
LETRERO_29LEDS2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a60  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08004b18  08004b18  00014b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c40  08004c40  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004c40  08004c40  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c40  08004c40  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c40  08004c40  00014c40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c44  08004c44  00014c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004c48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000010  08004c58  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08004c58  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007407  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017d0  00000000  00000000  00027482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007b0  00000000  00000000  00028c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005bd  00000000  00000000  00029408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001427a  00000000  00000000  000299c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008ab8  00000000  00000000  0003dc3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00080522  00000000  00000000  000466f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001c94  00000000  00000000  000c6c1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000c88b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000010 	.word	0x20000010
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004b00 	.word	0x08004b00

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000014 	.word	0x20000014
 80000fc:	08004b00 	.word	0x08004b00

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <__aeabi_f2uiz>:
 8000218:	219e      	movs	r1, #158	; 0x9e
 800021a:	b510      	push	{r4, lr}
 800021c:	05c9      	lsls	r1, r1, #23
 800021e:	1c04      	adds	r4, r0, #0
 8000220:	f000 fea4 	bl	8000f6c <__aeabi_fcmpge>
 8000224:	2800      	cmp	r0, #0
 8000226:	d103      	bne.n	8000230 <__aeabi_f2uiz+0x18>
 8000228:	1c20      	adds	r0, r4, #0
 800022a:	f000 fdb5 	bl	8000d98 <__aeabi_f2iz>
 800022e:	bd10      	pop	{r4, pc}
 8000230:	219e      	movs	r1, #158	; 0x9e
 8000232:	1c20      	adds	r0, r4, #0
 8000234:	05c9      	lsls	r1, r1, #23
 8000236:	f000 fc0f 	bl	8000a58 <__aeabi_fsub>
 800023a:	f000 fdad 	bl	8000d98 <__aeabi_f2iz>
 800023e:	2380      	movs	r3, #128	; 0x80
 8000240:	061b      	lsls	r3, r3, #24
 8000242:	469c      	mov	ip, r3
 8000244:	4460      	add	r0, ip
 8000246:	e7f2      	b.n	800022e <__aeabi_f2uiz+0x16>

08000248 <__aeabi_fadd>:
 8000248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800024a:	4647      	mov	r7, r8
 800024c:	46ce      	mov	lr, r9
 800024e:	024a      	lsls	r2, r1, #9
 8000250:	0243      	lsls	r3, r0, #9
 8000252:	0045      	lsls	r5, r0, #1
 8000254:	0fc4      	lsrs	r4, r0, #31
 8000256:	0a50      	lsrs	r0, r2, #9
 8000258:	4680      	mov	r8, r0
 800025a:	0048      	lsls	r0, r1, #1
 800025c:	0a5b      	lsrs	r3, r3, #9
 800025e:	0e00      	lsrs	r0, r0, #24
 8000260:	0992      	lsrs	r2, r2, #6
 8000262:	4694      	mov	ip, r2
 8000264:	b580      	push	{r7, lr}
 8000266:	001e      	movs	r6, r3
 8000268:	4681      	mov	r9, r0
 800026a:	0002      	movs	r2, r0
 800026c:	0e2d      	lsrs	r5, r5, #24
 800026e:	00df      	lsls	r7, r3, #3
 8000270:	0fc9      	lsrs	r1, r1, #31
 8000272:	428c      	cmp	r4, r1
 8000274:	d024      	beq.n	80002c0 <__aeabi_fadd+0x78>
 8000276:	1a28      	subs	r0, r5, r0
 8000278:	2800      	cmp	r0, #0
 800027a:	dd0e      	ble.n	800029a <__aeabi_fadd+0x52>
 800027c:	2a00      	cmp	r2, #0
 800027e:	d13e      	bne.n	80002fe <__aeabi_fadd+0xb6>
 8000280:	4662      	mov	r2, ip
 8000282:	2a00      	cmp	r2, #0
 8000284:	d100      	bne.n	8000288 <__aeabi_fadd+0x40>
 8000286:	e0fd      	b.n	8000484 <__aeabi_fadd+0x23c>
 8000288:	1e42      	subs	r2, r0, #1
 800028a:	2801      	cmp	r0, #1
 800028c:	d100      	bne.n	8000290 <__aeabi_fadd+0x48>
 800028e:	e137      	b.n	8000500 <__aeabi_fadd+0x2b8>
 8000290:	28ff      	cmp	r0, #255	; 0xff
 8000292:	d100      	bne.n	8000296 <__aeabi_fadd+0x4e>
 8000294:	e0a9      	b.n	80003ea <__aeabi_fadd+0x1a2>
 8000296:	0010      	movs	r0, r2
 8000298:	e039      	b.n	800030e <__aeabi_fadd+0xc6>
 800029a:	2800      	cmp	r0, #0
 800029c:	d063      	beq.n	8000366 <__aeabi_fadd+0x11e>
 800029e:	464b      	mov	r3, r9
 80002a0:	1b52      	subs	r2, r2, r5
 80002a2:	2d00      	cmp	r5, #0
 80002a4:	d000      	beq.n	80002a8 <__aeabi_fadd+0x60>
 80002a6:	e0e0      	b.n	800046a <__aeabi_fadd+0x222>
 80002a8:	2f00      	cmp	r7, #0
 80002aa:	d100      	bne.n	80002ae <__aeabi_fadd+0x66>
 80002ac:	e0ce      	b.n	800044c <__aeabi_fadd+0x204>
 80002ae:	1e53      	subs	r3, r2, #1
 80002b0:	2a01      	cmp	r2, #1
 80002b2:	d100      	bne.n	80002b6 <__aeabi_fadd+0x6e>
 80002b4:	e155      	b.n	8000562 <__aeabi_fadd+0x31a>
 80002b6:	2aff      	cmp	r2, #255	; 0xff
 80002b8:	d100      	bne.n	80002bc <__aeabi_fadd+0x74>
 80002ba:	e094      	b.n	80003e6 <__aeabi_fadd+0x19e>
 80002bc:	001a      	movs	r2, r3
 80002be:	e0d9      	b.n	8000474 <__aeabi_fadd+0x22c>
 80002c0:	1a2a      	subs	r2, r5, r0
 80002c2:	2a00      	cmp	r2, #0
 80002c4:	dc00      	bgt.n	80002c8 <__aeabi_fadd+0x80>
 80002c6:	e099      	b.n	80003fc <__aeabi_fadd+0x1b4>
 80002c8:	2800      	cmp	r0, #0
 80002ca:	d062      	beq.n	8000392 <__aeabi_fadd+0x14a>
 80002cc:	2dff      	cmp	r5, #255	; 0xff
 80002ce:	d100      	bne.n	80002d2 <__aeabi_fadd+0x8a>
 80002d0:	e08b      	b.n	80003ea <__aeabi_fadd+0x1a2>
 80002d2:	2380      	movs	r3, #128	; 0x80
 80002d4:	4661      	mov	r1, ip
 80002d6:	04db      	lsls	r3, r3, #19
 80002d8:	4319      	orrs	r1, r3
 80002da:	468c      	mov	ip, r1
 80002dc:	2a1b      	cmp	r2, #27
 80002de:	dc00      	bgt.n	80002e2 <__aeabi_fadd+0x9a>
 80002e0:	e0d2      	b.n	8000488 <__aeabi_fadd+0x240>
 80002e2:	2301      	movs	r3, #1
 80002e4:	19db      	adds	r3, r3, r7
 80002e6:	015a      	lsls	r2, r3, #5
 80002e8:	d56a      	bpl.n	80003c0 <__aeabi_fadd+0x178>
 80002ea:	3501      	adds	r5, #1
 80002ec:	2dff      	cmp	r5, #255	; 0xff
 80002ee:	d05b      	beq.n	80003a8 <__aeabi_fadd+0x160>
 80002f0:	2201      	movs	r2, #1
 80002f2:	49a3      	ldr	r1, [pc, #652]	; (8000580 <__aeabi_fadd+0x338>)
 80002f4:	401a      	ands	r2, r3
 80002f6:	085b      	lsrs	r3, r3, #1
 80002f8:	400b      	ands	r3, r1
 80002fa:	4313      	orrs	r3, r2
 80002fc:	e01c      	b.n	8000338 <__aeabi_fadd+0xf0>
 80002fe:	2dff      	cmp	r5, #255	; 0xff
 8000300:	d100      	bne.n	8000304 <__aeabi_fadd+0xbc>
 8000302:	e072      	b.n	80003ea <__aeabi_fadd+0x1a2>
 8000304:	2380      	movs	r3, #128	; 0x80
 8000306:	4662      	mov	r2, ip
 8000308:	04db      	lsls	r3, r3, #19
 800030a:	431a      	orrs	r2, r3
 800030c:	4694      	mov	ip, r2
 800030e:	281b      	cmp	r0, #27
 8000310:	dc00      	bgt.n	8000314 <__aeabi_fadd+0xcc>
 8000312:	e090      	b.n	8000436 <__aeabi_fadd+0x1ee>
 8000314:	2301      	movs	r3, #1
 8000316:	1afb      	subs	r3, r7, r3
 8000318:	015a      	lsls	r2, r3, #5
 800031a:	d551      	bpl.n	80003c0 <__aeabi_fadd+0x178>
 800031c:	019b      	lsls	r3, r3, #6
 800031e:	099e      	lsrs	r6, r3, #6
 8000320:	0030      	movs	r0, r6
 8000322:	f000 fe2d 	bl	8000f80 <__clzsi2>
 8000326:	0033      	movs	r3, r6
 8000328:	3805      	subs	r0, #5
 800032a:	4083      	lsls	r3, r0
 800032c:	4285      	cmp	r5, r0
 800032e:	dc00      	bgt.n	8000332 <__aeabi_fadd+0xea>
 8000330:	e075      	b.n	800041e <__aeabi_fadd+0x1d6>
 8000332:	4a94      	ldr	r2, [pc, #592]	; (8000584 <__aeabi_fadd+0x33c>)
 8000334:	1a2d      	subs	r5, r5, r0
 8000336:	4013      	ands	r3, r2
 8000338:	075a      	lsls	r2, r3, #29
 800033a:	d004      	beq.n	8000346 <__aeabi_fadd+0xfe>
 800033c:	220f      	movs	r2, #15
 800033e:	401a      	ands	r2, r3
 8000340:	2a04      	cmp	r2, #4
 8000342:	d000      	beq.n	8000346 <__aeabi_fadd+0xfe>
 8000344:	3304      	adds	r3, #4
 8000346:	015a      	lsls	r2, r3, #5
 8000348:	d53c      	bpl.n	80003c4 <__aeabi_fadd+0x17c>
 800034a:	1c68      	adds	r0, r5, #1
 800034c:	2dfe      	cmp	r5, #254	; 0xfe
 800034e:	d02b      	beq.n	80003a8 <__aeabi_fadd+0x160>
 8000350:	019b      	lsls	r3, r3, #6
 8000352:	0a5e      	lsrs	r6, r3, #9
 8000354:	b2c0      	uxtb	r0, r0
 8000356:	05c0      	lsls	r0, r0, #23
 8000358:	4330      	orrs	r0, r6
 800035a:	07e4      	lsls	r4, r4, #31
 800035c:	4320      	orrs	r0, r4
 800035e:	bcc0      	pop	{r6, r7}
 8000360:	46b9      	mov	r9, r7
 8000362:	46b0      	mov	r8, r6
 8000364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000366:	20fe      	movs	r0, #254	; 0xfe
 8000368:	1c6a      	adds	r2, r5, #1
 800036a:	4210      	tst	r0, r2
 800036c:	d172      	bne.n	8000454 <__aeabi_fadd+0x20c>
 800036e:	2d00      	cmp	r5, #0
 8000370:	d000      	beq.n	8000374 <__aeabi_fadd+0x12c>
 8000372:	e0ae      	b.n	80004d2 <__aeabi_fadd+0x28a>
 8000374:	2f00      	cmp	r7, #0
 8000376:	d100      	bne.n	800037a <__aeabi_fadd+0x132>
 8000378:	e0ec      	b.n	8000554 <__aeabi_fadd+0x30c>
 800037a:	4663      	mov	r3, ip
 800037c:	2000      	movs	r0, #0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d0e9      	beq.n	8000356 <__aeabi_fadd+0x10e>
 8000382:	1afb      	subs	r3, r7, r3
 8000384:	015a      	lsls	r2, r3, #5
 8000386:	d400      	bmi.n	800038a <__aeabi_fadd+0x142>
 8000388:	e0f3      	b.n	8000572 <__aeabi_fadd+0x32a>
 800038a:	4663      	mov	r3, ip
 800038c:	000c      	movs	r4, r1
 800038e:	1bdb      	subs	r3, r3, r7
 8000390:	e7d2      	b.n	8000338 <__aeabi_fadd+0xf0>
 8000392:	4661      	mov	r1, ip
 8000394:	2900      	cmp	r1, #0
 8000396:	d05b      	beq.n	8000450 <__aeabi_fadd+0x208>
 8000398:	1e51      	subs	r1, r2, #1
 800039a:	2a01      	cmp	r2, #1
 800039c:	d100      	bne.n	80003a0 <__aeabi_fadd+0x158>
 800039e:	e0a7      	b.n	80004f0 <__aeabi_fadd+0x2a8>
 80003a0:	2aff      	cmp	r2, #255	; 0xff
 80003a2:	d022      	beq.n	80003ea <__aeabi_fadd+0x1a2>
 80003a4:	000a      	movs	r2, r1
 80003a6:	e799      	b.n	80002dc <__aeabi_fadd+0x94>
 80003a8:	20ff      	movs	r0, #255	; 0xff
 80003aa:	2600      	movs	r6, #0
 80003ac:	e7d3      	b.n	8000356 <__aeabi_fadd+0x10e>
 80003ae:	21fe      	movs	r1, #254	; 0xfe
 80003b0:	1c6a      	adds	r2, r5, #1
 80003b2:	4211      	tst	r1, r2
 80003b4:	d073      	beq.n	800049e <__aeabi_fadd+0x256>
 80003b6:	2aff      	cmp	r2, #255	; 0xff
 80003b8:	d0f6      	beq.n	80003a8 <__aeabi_fadd+0x160>
 80003ba:	0015      	movs	r5, r2
 80003bc:	4467      	add	r7, ip
 80003be:	087b      	lsrs	r3, r7, #1
 80003c0:	075a      	lsls	r2, r3, #29
 80003c2:	d1bb      	bne.n	800033c <__aeabi_fadd+0xf4>
 80003c4:	08db      	lsrs	r3, r3, #3
 80003c6:	2dff      	cmp	r5, #255	; 0xff
 80003c8:	d00f      	beq.n	80003ea <__aeabi_fadd+0x1a2>
 80003ca:	025b      	lsls	r3, r3, #9
 80003cc:	0a5e      	lsrs	r6, r3, #9
 80003ce:	b2e8      	uxtb	r0, r5
 80003d0:	e7c1      	b.n	8000356 <__aeabi_fadd+0x10e>
 80003d2:	4662      	mov	r2, ip
 80003d4:	2a00      	cmp	r2, #0
 80003d6:	d008      	beq.n	80003ea <__aeabi_fadd+0x1a2>
 80003d8:	2280      	movs	r2, #128	; 0x80
 80003da:	03d2      	lsls	r2, r2, #15
 80003dc:	4213      	tst	r3, r2
 80003de:	d004      	beq.n	80003ea <__aeabi_fadd+0x1a2>
 80003e0:	4640      	mov	r0, r8
 80003e2:	4210      	tst	r0, r2
 80003e4:	d101      	bne.n	80003ea <__aeabi_fadd+0x1a2>
 80003e6:	000c      	movs	r4, r1
 80003e8:	4643      	mov	r3, r8
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d0dc      	beq.n	80003a8 <__aeabi_fadd+0x160>
 80003ee:	2680      	movs	r6, #128	; 0x80
 80003f0:	03f6      	lsls	r6, r6, #15
 80003f2:	431e      	orrs	r6, r3
 80003f4:	0276      	lsls	r6, r6, #9
 80003f6:	20ff      	movs	r0, #255	; 0xff
 80003f8:	0a76      	lsrs	r6, r6, #9
 80003fa:	e7ac      	b.n	8000356 <__aeabi_fadd+0x10e>
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	d0d6      	beq.n	80003ae <__aeabi_fadd+0x166>
 8000400:	1b42      	subs	r2, r0, r5
 8000402:	2d00      	cmp	r5, #0
 8000404:	d05c      	beq.n	80004c0 <__aeabi_fadd+0x278>
 8000406:	28ff      	cmp	r0, #255	; 0xff
 8000408:	d0ee      	beq.n	80003e8 <__aeabi_fadd+0x1a0>
 800040a:	2380      	movs	r3, #128	; 0x80
 800040c:	04db      	lsls	r3, r3, #19
 800040e:	431f      	orrs	r7, r3
 8000410:	2a1b      	cmp	r2, #27
 8000412:	dc00      	bgt.n	8000416 <__aeabi_fadd+0x1ce>
 8000414:	e082      	b.n	800051c <__aeabi_fadd+0x2d4>
 8000416:	2301      	movs	r3, #1
 8000418:	464d      	mov	r5, r9
 800041a:	4463      	add	r3, ip
 800041c:	e763      	b.n	80002e6 <__aeabi_fadd+0x9e>
 800041e:	2220      	movs	r2, #32
 8000420:	1b40      	subs	r0, r0, r5
 8000422:	3001      	adds	r0, #1
 8000424:	1a12      	subs	r2, r2, r0
 8000426:	0019      	movs	r1, r3
 8000428:	4093      	lsls	r3, r2
 800042a:	40c1      	lsrs	r1, r0
 800042c:	1e5a      	subs	r2, r3, #1
 800042e:	4193      	sbcs	r3, r2
 8000430:	2500      	movs	r5, #0
 8000432:	430b      	orrs	r3, r1
 8000434:	e780      	b.n	8000338 <__aeabi_fadd+0xf0>
 8000436:	2320      	movs	r3, #32
 8000438:	4661      	mov	r1, ip
 800043a:	1a1b      	subs	r3, r3, r0
 800043c:	4099      	lsls	r1, r3
 800043e:	4662      	mov	r2, ip
 8000440:	000b      	movs	r3, r1
 8000442:	40c2      	lsrs	r2, r0
 8000444:	1e59      	subs	r1, r3, #1
 8000446:	418b      	sbcs	r3, r1
 8000448:	4313      	orrs	r3, r2
 800044a:	e764      	b.n	8000316 <__aeabi_fadd+0xce>
 800044c:	000c      	movs	r4, r1
 800044e:	4643      	mov	r3, r8
 8000450:	0015      	movs	r5, r2
 8000452:	e7b8      	b.n	80003c6 <__aeabi_fadd+0x17e>
 8000454:	4663      	mov	r3, ip
 8000456:	1afe      	subs	r6, r7, r3
 8000458:	0173      	lsls	r3, r6, #5
 800045a:	d445      	bmi.n	80004e8 <__aeabi_fadd+0x2a0>
 800045c:	2e00      	cmp	r6, #0
 800045e:	d000      	beq.n	8000462 <__aeabi_fadd+0x21a>
 8000460:	e75e      	b.n	8000320 <__aeabi_fadd+0xd8>
 8000462:	2400      	movs	r4, #0
 8000464:	2000      	movs	r0, #0
 8000466:	2600      	movs	r6, #0
 8000468:	e775      	b.n	8000356 <__aeabi_fadd+0x10e>
 800046a:	2bff      	cmp	r3, #255	; 0xff
 800046c:	d0bb      	beq.n	80003e6 <__aeabi_fadd+0x19e>
 800046e:	2380      	movs	r3, #128	; 0x80
 8000470:	04db      	lsls	r3, r3, #19
 8000472:	431f      	orrs	r7, r3
 8000474:	2a1b      	cmp	r2, #27
 8000476:	dd47      	ble.n	8000508 <__aeabi_fadd+0x2c0>
 8000478:	2301      	movs	r3, #1
 800047a:	4662      	mov	r2, ip
 800047c:	000c      	movs	r4, r1
 800047e:	464d      	mov	r5, r9
 8000480:	1ad3      	subs	r3, r2, r3
 8000482:	e749      	b.n	8000318 <__aeabi_fadd+0xd0>
 8000484:	0005      	movs	r5, r0
 8000486:	e79e      	b.n	80003c6 <__aeabi_fadd+0x17e>
 8000488:	4661      	mov	r1, ip
 800048a:	2320      	movs	r3, #32
 800048c:	40d1      	lsrs	r1, r2
 800048e:	1a9b      	subs	r3, r3, r2
 8000490:	4662      	mov	r2, ip
 8000492:	409a      	lsls	r2, r3
 8000494:	0013      	movs	r3, r2
 8000496:	1e5a      	subs	r2, r3, #1
 8000498:	4193      	sbcs	r3, r2
 800049a:	430b      	orrs	r3, r1
 800049c:	e722      	b.n	80002e4 <__aeabi_fadd+0x9c>
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d146      	bne.n	8000530 <__aeabi_fadd+0x2e8>
 80004a2:	2f00      	cmp	r7, #0
 80004a4:	d062      	beq.n	800056c <__aeabi_fadd+0x324>
 80004a6:	4663      	mov	r3, ip
 80004a8:	2000      	movs	r0, #0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d100      	bne.n	80004b0 <__aeabi_fadd+0x268>
 80004ae:	e752      	b.n	8000356 <__aeabi_fadd+0x10e>
 80004b0:	003b      	movs	r3, r7
 80004b2:	4463      	add	r3, ip
 80004b4:	015a      	lsls	r2, r3, #5
 80004b6:	d583      	bpl.n	80003c0 <__aeabi_fadd+0x178>
 80004b8:	4a32      	ldr	r2, [pc, #200]	; (8000584 <__aeabi_fadd+0x33c>)
 80004ba:	3501      	adds	r5, #1
 80004bc:	4013      	ands	r3, r2
 80004be:	e77f      	b.n	80003c0 <__aeabi_fadd+0x178>
 80004c0:	2f00      	cmp	r7, #0
 80004c2:	d0c4      	beq.n	800044e <__aeabi_fadd+0x206>
 80004c4:	1e53      	subs	r3, r2, #1
 80004c6:	2a01      	cmp	r2, #1
 80004c8:	d012      	beq.n	80004f0 <__aeabi_fadd+0x2a8>
 80004ca:	2aff      	cmp	r2, #255	; 0xff
 80004cc:	d08c      	beq.n	80003e8 <__aeabi_fadd+0x1a0>
 80004ce:	001a      	movs	r2, r3
 80004d0:	e79e      	b.n	8000410 <__aeabi_fadd+0x1c8>
 80004d2:	2f00      	cmp	r7, #0
 80004d4:	d000      	beq.n	80004d8 <__aeabi_fadd+0x290>
 80004d6:	e77c      	b.n	80003d2 <__aeabi_fadd+0x18a>
 80004d8:	4663      	mov	r3, ip
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d183      	bne.n	80003e6 <__aeabi_fadd+0x19e>
 80004de:	2680      	movs	r6, #128	; 0x80
 80004e0:	2400      	movs	r4, #0
 80004e2:	20ff      	movs	r0, #255	; 0xff
 80004e4:	03f6      	lsls	r6, r6, #15
 80004e6:	e736      	b.n	8000356 <__aeabi_fadd+0x10e>
 80004e8:	4663      	mov	r3, ip
 80004ea:	000c      	movs	r4, r1
 80004ec:	1bde      	subs	r6, r3, r7
 80004ee:	e717      	b.n	8000320 <__aeabi_fadd+0xd8>
 80004f0:	003b      	movs	r3, r7
 80004f2:	4463      	add	r3, ip
 80004f4:	2501      	movs	r5, #1
 80004f6:	015a      	lsls	r2, r3, #5
 80004f8:	d400      	bmi.n	80004fc <__aeabi_fadd+0x2b4>
 80004fa:	e761      	b.n	80003c0 <__aeabi_fadd+0x178>
 80004fc:	2502      	movs	r5, #2
 80004fe:	e6f7      	b.n	80002f0 <__aeabi_fadd+0xa8>
 8000500:	4663      	mov	r3, ip
 8000502:	2501      	movs	r5, #1
 8000504:	1afb      	subs	r3, r7, r3
 8000506:	e707      	b.n	8000318 <__aeabi_fadd+0xd0>
 8000508:	2320      	movs	r3, #32
 800050a:	1a9b      	subs	r3, r3, r2
 800050c:	0038      	movs	r0, r7
 800050e:	409f      	lsls	r7, r3
 8000510:	003b      	movs	r3, r7
 8000512:	40d0      	lsrs	r0, r2
 8000514:	1e5a      	subs	r2, r3, #1
 8000516:	4193      	sbcs	r3, r2
 8000518:	4303      	orrs	r3, r0
 800051a:	e7ae      	b.n	800047a <__aeabi_fadd+0x232>
 800051c:	2320      	movs	r3, #32
 800051e:	1a9b      	subs	r3, r3, r2
 8000520:	0039      	movs	r1, r7
 8000522:	409f      	lsls	r7, r3
 8000524:	003b      	movs	r3, r7
 8000526:	40d1      	lsrs	r1, r2
 8000528:	1e5a      	subs	r2, r3, #1
 800052a:	4193      	sbcs	r3, r2
 800052c:	430b      	orrs	r3, r1
 800052e:	e773      	b.n	8000418 <__aeabi_fadd+0x1d0>
 8000530:	2f00      	cmp	r7, #0
 8000532:	d100      	bne.n	8000536 <__aeabi_fadd+0x2ee>
 8000534:	e758      	b.n	80003e8 <__aeabi_fadd+0x1a0>
 8000536:	4662      	mov	r2, ip
 8000538:	2a00      	cmp	r2, #0
 800053a:	d100      	bne.n	800053e <__aeabi_fadd+0x2f6>
 800053c:	e755      	b.n	80003ea <__aeabi_fadd+0x1a2>
 800053e:	2280      	movs	r2, #128	; 0x80
 8000540:	03d2      	lsls	r2, r2, #15
 8000542:	4213      	tst	r3, r2
 8000544:	d100      	bne.n	8000548 <__aeabi_fadd+0x300>
 8000546:	e750      	b.n	80003ea <__aeabi_fadd+0x1a2>
 8000548:	4641      	mov	r1, r8
 800054a:	4211      	tst	r1, r2
 800054c:	d000      	beq.n	8000550 <__aeabi_fadd+0x308>
 800054e:	e74c      	b.n	80003ea <__aeabi_fadd+0x1a2>
 8000550:	4643      	mov	r3, r8
 8000552:	e74a      	b.n	80003ea <__aeabi_fadd+0x1a2>
 8000554:	4663      	mov	r3, ip
 8000556:	2b00      	cmp	r3, #0
 8000558:	d083      	beq.n	8000462 <__aeabi_fadd+0x21a>
 800055a:	000c      	movs	r4, r1
 800055c:	4646      	mov	r6, r8
 800055e:	2000      	movs	r0, #0
 8000560:	e6f9      	b.n	8000356 <__aeabi_fadd+0x10e>
 8000562:	4663      	mov	r3, ip
 8000564:	000c      	movs	r4, r1
 8000566:	1bdb      	subs	r3, r3, r7
 8000568:	3501      	adds	r5, #1
 800056a:	e6d5      	b.n	8000318 <__aeabi_fadd+0xd0>
 800056c:	4646      	mov	r6, r8
 800056e:	2000      	movs	r0, #0
 8000570:	e6f1      	b.n	8000356 <__aeabi_fadd+0x10e>
 8000572:	2b00      	cmp	r3, #0
 8000574:	d000      	beq.n	8000578 <__aeabi_fadd+0x330>
 8000576:	e723      	b.n	80003c0 <__aeabi_fadd+0x178>
 8000578:	2400      	movs	r4, #0
 800057a:	2600      	movs	r6, #0
 800057c:	e6eb      	b.n	8000356 <__aeabi_fadd+0x10e>
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	7dffffff 	.word	0x7dffffff
 8000584:	fbffffff 	.word	0xfbffffff

08000588 <__aeabi_fdiv>:
 8000588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058a:	464f      	mov	r7, r9
 800058c:	4646      	mov	r6, r8
 800058e:	46d6      	mov	lr, sl
 8000590:	0245      	lsls	r5, r0, #9
 8000592:	b5c0      	push	{r6, r7, lr}
 8000594:	0047      	lsls	r7, r0, #1
 8000596:	1c0c      	adds	r4, r1, #0
 8000598:	0a6d      	lsrs	r5, r5, #9
 800059a:	0e3f      	lsrs	r7, r7, #24
 800059c:	0fc6      	lsrs	r6, r0, #31
 800059e:	2f00      	cmp	r7, #0
 80005a0:	d100      	bne.n	80005a4 <__aeabi_fdiv+0x1c>
 80005a2:	e06f      	b.n	8000684 <__aeabi_fdiv+0xfc>
 80005a4:	2fff      	cmp	r7, #255	; 0xff
 80005a6:	d100      	bne.n	80005aa <__aeabi_fdiv+0x22>
 80005a8:	e074      	b.n	8000694 <__aeabi_fdiv+0x10c>
 80005aa:	2300      	movs	r3, #0
 80005ac:	2280      	movs	r2, #128	; 0x80
 80005ae:	4699      	mov	r9, r3
 80005b0:	469a      	mov	sl, r3
 80005b2:	00ed      	lsls	r5, r5, #3
 80005b4:	04d2      	lsls	r2, r2, #19
 80005b6:	4315      	orrs	r5, r2
 80005b8:	3f7f      	subs	r7, #127	; 0x7f
 80005ba:	0263      	lsls	r3, r4, #9
 80005bc:	0a5b      	lsrs	r3, r3, #9
 80005be:	4698      	mov	r8, r3
 80005c0:	0063      	lsls	r3, r4, #1
 80005c2:	0e1b      	lsrs	r3, r3, #24
 80005c4:	0fe4      	lsrs	r4, r4, #31
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d04d      	beq.n	8000666 <__aeabi_fdiv+0xde>
 80005ca:	2bff      	cmp	r3, #255	; 0xff
 80005cc:	d045      	beq.n	800065a <__aeabi_fdiv+0xd2>
 80005ce:	4642      	mov	r2, r8
 80005d0:	2180      	movs	r1, #128	; 0x80
 80005d2:	00d2      	lsls	r2, r2, #3
 80005d4:	04c9      	lsls	r1, r1, #19
 80005d6:	4311      	orrs	r1, r2
 80005d8:	4688      	mov	r8, r1
 80005da:	2200      	movs	r2, #0
 80005dc:	3b7f      	subs	r3, #127	; 0x7f
 80005de:	0031      	movs	r1, r6
 80005e0:	1aff      	subs	r7, r7, r3
 80005e2:	464b      	mov	r3, r9
 80005e4:	4061      	eors	r1, r4
 80005e6:	b2c9      	uxtb	r1, r1
 80005e8:	2b0f      	cmp	r3, #15
 80005ea:	d900      	bls.n	80005ee <__aeabi_fdiv+0x66>
 80005ec:	e0b8      	b.n	8000760 <__aeabi_fdiv+0x1d8>
 80005ee:	4870      	ldr	r0, [pc, #448]	; (80007b0 <__aeabi_fdiv+0x228>)
 80005f0:	009b      	lsls	r3, r3, #2
 80005f2:	58c3      	ldr	r3, [r0, r3]
 80005f4:	469f      	mov	pc, r3
 80005f6:	2300      	movs	r3, #0
 80005f8:	4698      	mov	r8, r3
 80005fa:	0026      	movs	r6, r4
 80005fc:	4645      	mov	r5, r8
 80005fe:	4692      	mov	sl, r2
 8000600:	4653      	mov	r3, sl
 8000602:	2b02      	cmp	r3, #2
 8000604:	d100      	bne.n	8000608 <__aeabi_fdiv+0x80>
 8000606:	e08d      	b.n	8000724 <__aeabi_fdiv+0x19c>
 8000608:	2b03      	cmp	r3, #3
 800060a:	d100      	bne.n	800060e <__aeabi_fdiv+0x86>
 800060c:	e0a1      	b.n	8000752 <__aeabi_fdiv+0x1ca>
 800060e:	2b01      	cmp	r3, #1
 8000610:	d018      	beq.n	8000644 <__aeabi_fdiv+0xbc>
 8000612:	003b      	movs	r3, r7
 8000614:	337f      	adds	r3, #127	; 0x7f
 8000616:	2b00      	cmp	r3, #0
 8000618:	dd6d      	ble.n	80006f6 <__aeabi_fdiv+0x16e>
 800061a:	076a      	lsls	r2, r5, #29
 800061c:	d004      	beq.n	8000628 <__aeabi_fdiv+0xa0>
 800061e:	220f      	movs	r2, #15
 8000620:	402a      	ands	r2, r5
 8000622:	2a04      	cmp	r2, #4
 8000624:	d000      	beq.n	8000628 <__aeabi_fdiv+0xa0>
 8000626:	3504      	adds	r5, #4
 8000628:	012a      	lsls	r2, r5, #4
 800062a:	d503      	bpl.n	8000634 <__aeabi_fdiv+0xac>
 800062c:	4b61      	ldr	r3, [pc, #388]	; (80007b4 <__aeabi_fdiv+0x22c>)
 800062e:	401d      	ands	r5, r3
 8000630:	003b      	movs	r3, r7
 8000632:	3380      	adds	r3, #128	; 0x80
 8000634:	2bfe      	cmp	r3, #254	; 0xfe
 8000636:	dd00      	ble.n	800063a <__aeabi_fdiv+0xb2>
 8000638:	e074      	b.n	8000724 <__aeabi_fdiv+0x19c>
 800063a:	01aa      	lsls	r2, r5, #6
 800063c:	0a52      	lsrs	r2, r2, #9
 800063e:	b2d8      	uxtb	r0, r3
 8000640:	e002      	b.n	8000648 <__aeabi_fdiv+0xc0>
 8000642:	000e      	movs	r6, r1
 8000644:	2000      	movs	r0, #0
 8000646:	2200      	movs	r2, #0
 8000648:	05c0      	lsls	r0, r0, #23
 800064a:	07f6      	lsls	r6, r6, #31
 800064c:	4310      	orrs	r0, r2
 800064e:	4330      	orrs	r0, r6
 8000650:	bce0      	pop	{r5, r6, r7}
 8000652:	46ba      	mov	sl, r7
 8000654:	46b1      	mov	r9, r6
 8000656:	46a8      	mov	r8, r5
 8000658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800065a:	4643      	mov	r3, r8
 800065c:	2b00      	cmp	r3, #0
 800065e:	d13f      	bne.n	80006e0 <__aeabi_fdiv+0x158>
 8000660:	2202      	movs	r2, #2
 8000662:	3fff      	subs	r7, #255	; 0xff
 8000664:	e003      	b.n	800066e <__aeabi_fdiv+0xe6>
 8000666:	4643      	mov	r3, r8
 8000668:	2b00      	cmp	r3, #0
 800066a:	d12d      	bne.n	80006c8 <__aeabi_fdiv+0x140>
 800066c:	2201      	movs	r2, #1
 800066e:	0031      	movs	r1, r6
 8000670:	464b      	mov	r3, r9
 8000672:	4061      	eors	r1, r4
 8000674:	b2c9      	uxtb	r1, r1
 8000676:	4313      	orrs	r3, r2
 8000678:	2b0f      	cmp	r3, #15
 800067a:	d838      	bhi.n	80006ee <__aeabi_fdiv+0x166>
 800067c:	484e      	ldr	r0, [pc, #312]	; (80007b8 <__aeabi_fdiv+0x230>)
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	58c3      	ldr	r3, [r0, r3]
 8000682:	469f      	mov	pc, r3
 8000684:	2d00      	cmp	r5, #0
 8000686:	d113      	bne.n	80006b0 <__aeabi_fdiv+0x128>
 8000688:	2304      	movs	r3, #4
 800068a:	4699      	mov	r9, r3
 800068c:	3b03      	subs	r3, #3
 800068e:	2700      	movs	r7, #0
 8000690:	469a      	mov	sl, r3
 8000692:	e792      	b.n	80005ba <__aeabi_fdiv+0x32>
 8000694:	2d00      	cmp	r5, #0
 8000696:	d105      	bne.n	80006a4 <__aeabi_fdiv+0x11c>
 8000698:	2308      	movs	r3, #8
 800069a:	4699      	mov	r9, r3
 800069c:	3b06      	subs	r3, #6
 800069e:	27ff      	movs	r7, #255	; 0xff
 80006a0:	469a      	mov	sl, r3
 80006a2:	e78a      	b.n	80005ba <__aeabi_fdiv+0x32>
 80006a4:	230c      	movs	r3, #12
 80006a6:	4699      	mov	r9, r3
 80006a8:	3b09      	subs	r3, #9
 80006aa:	27ff      	movs	r7, #255	; 0xff
 80006ac:	469a      	mov	sl, r3
 80006ae:	e784      	b.n	80005ba <__aeabi_fdiv+0x32>
 80006b0:	0028      	movs	r0, r5
 80006b2:	f000 fc65 	bl	8000f80 <__clzsi2>
 80006b6:	2776      	movs	r7, #118	; 0x76
 80006b8:	1f43      	subs	r3, r0, #5
 80006ba:	409d      	lsls	r5, r3
 80006bc:	2300      	movs	r3, #0
 80006be:	427f      	negs	r7, r7
 80006c0:	4699      	mov	r9, r3
 80006c2:	469a      	mov	sl, r3
 80006c4:	1a3f      	subs	r7, r7, r0
 80006c6:	e778      	b.n	80005ba <__aeabi_fdiv+0x32>
 80006c8:	4640      	mov	r0, r8
 80006ca:	f000 fc59 	bl	8000f80 <__clzsi2>
 80006ce:	4642      	mov	r2, r8
 80006d0:	1f43      	subs	r3, r0, #5
 80006d2:	409a      	lsls	r2, r3
 80006d4:	2376      	movs	r3, #118	; 0x76
 80006d6:	425b      	negs	r3, r3
 80006d8:	4690      	mov	r8, r2
 80006da:	1a1b      	subs	r3, r3, r0
 80006dc:	2200      	movs	r2, #0
 80006de:	e77e      	b.n	80005de <__aeabi_fdiv+0x56>
 80006e0:	2303      	movs	r3, #3
 80006e2:	464a      	mov	r2, r9
 80006e4:	431a      	orrs	r2, r3
 80006e6:	4691      	mov	r9, r2
 80006e8:	33fc      	adds	r3, #252	; 0xfc
 80006ea:	2203      	movs	r2, #3
 80006ec:	e777      	b.n	80005de <__aeabi_fdiv+0x56>
 80006ee:	000e      	movs	r6, r1
 80006f0:	20ff      	movs	r0, #255	; 0xff
 80006f2:	2200      	movs	r2, #0
 80006f4:	e7a8      	b.n	8000648 <__aeabi_fdiv+0xc0>
 80006f6:	2201      	movs	r2, #1
 80006f8:	1ad3      	subs	r3, r2, r3
 80006fa:	2b1b      	cmp	r3, #27
 80006fc:	dca2      	bgt.n	8000644 <__aeabi_fdiv+0xbc>
 80006fe:	379e      	adds	r7, #158	; 0x9e
 8000700:	002a      	movs	r2, r5
 8000702:	40bd      	lsls	r5, r7
 8000704:	40da      	lsrs	r2, r3
 8000706:	1e6b      	subs	r3, r5, #1
 8000708:	419d      	sbcs	r5, r3
 800070a:	4315      	orrs	r5, r2
 800070c:	076a      	lsls	r2, r5, #29
 800070e:	d004      	beq.n	800071a <__aeabi_fdiv+0x192>
 8000710:	220f      	movs	r2, #15
 8000712:	402a      	ands	r2, r5
 8000714:	2a04      	cmp	r2, #4
 8000716:	d000      	beq.n	800071a <__aeabi_fdiv+0x192>
 8000718:	3504      	adds	r5, #4
 800071a:	016a      	lsls	r2, r5, #5
 800071c:	d544      	bpl.n	80007a8 <__aeabi_fdiv+0x220>
 800071e:	2001      	movs	r0, #1
 8000720:	2200      	movs	r2, #0
 8000722:	e791      	b.n	8000648 <__aeabi_fdiv+0xc0>
 8000724:	20ff      	movs	r0, #255	; 0xff
 8000726:	2200      	movs	r2, #0
 8000728:	e78e      	b.n	8000648 <__aeabi_fdiv+0xc0>
 800072a:	2280      	movs	r2, #128	; 0x80
 800072c:	2600      	movs	r6, #0
 800072e:	20ff      	movs	r0, #255	; 0xff
 8000730:	03d2      	lsls	r2, r2, #15
 8000732:	e789      	b.n	8000648 <__aeabi_fdiv+0xc0>
 8000734:	2300      	movs	r3, #0
 8000736:	4698      	mov	r8, r3
 8000738:	2280      	movs	r2, #128	; 0x80
 800073a:	03d2      	lsls	r2, r2, #15
 800073c:	4215      	tst	r5, r2
 800073e:	d008      	beq.n	8000752 <__aeabi_fdiv+0x1ca>
 8000740:	4643      	mov	r3, r8
 8000742:	4213      	tst	r3, r2
 8000744:	d105      	bne.n	8000752 <__aeabi_fdiv+0x1ca>
 8000746:	431a      	orrs	r2, r3
 8000748:	0252      	lsls	r2, r2, #9
 800074a:	0026      	movs	r6, r4
 800074c:	20ff      	movs	r0, #255	; 0xff
 800074e:	0a52      	lsrs	r2, r2, #9
 8000750:	e77a      	b.n	8000648 <__aeabi_fdiv+0xc0>
 8000752:	2280      	movs	r2, #128	; 0x80
 8000754:	03d2      	lsls	r2, r2, #15
 8000756:	432a      	orrs	r2, r5
 8000758:	0252      	lsls	r2, r2, #9
 800075a:	20ff      	movs	r0, #255	; 0xff
 800075c:	0a52      	lsrs	r2, r2, #9
 800075e:	e773      	b.n	8000648 <__aeabi_fdiv+0xc0>
 8000760:	4642      	mov	r2, r8
 8000762:	016b      	lsls	r3, r5, #5
 8000764:	0155      	lsls	r5, r2, #5
 8000766:	42ab      	cmp	r3, r5
 8000768:	d21a      	bcs.n	80007a0 <__aeabi_fdiv+0x218>
 800076a:	201b      	movs	r0, #27
 800076c:	2200      	movs	r2, #0
 800076e:	3f01      	subs	r7, #1
 8000770:	2601      	movs	r6, #1
 8000772:	001c      	movs	r4, r3
 8000774:	0052      	lsls	r2, r2, #1
 8000776:	005b      	lsls	r3, r3, #1
 8000778:	2c00      	cmp	r4, #0
 800077a:	db01      	blt.n	8000780 <__aeabi_fdiv+0x1f8>
 800077c:	429d      	cmp	r5, r3
 800077e:	d801      	bhi.n	8000784 <__aeabi_fdiv+0x1fc>
 8000780:	1b5b      	subs	r3, r3, r5
 8000782:	4332      	orrs	r2, r6
 8000784:	3801      	subs	r0, #1
 8000786:	2800      	cmp	r0, #0
 8000788:	d1f3      	bne.n	8000772 <__aeabi_fdiv+0x1ea>
 800078a:	1e58      	subs	r0, r3, #1
 800078c:	4183      	sbcs	r3, r0
 800078e:	4313      	orrs	r3, r2
 8000790:	001d      	movs	r5, r3
 8000792:	003b      	movs	r3, r7
 8000794:	337f      	adds	r3, #127	; 0x7f
 8000796:	000e      	movs	r6, r1
 8000798:	2b00      	cmp	r3, #0
 800079a:	dd00      	ble.n	800079e <__aeabi_fdiv+0x216>
 800079c:	e73d      	b.n	800061a <__aeabi_fdiv+0x92>
 800079e:	e7aa      	b.n	80006f6 <__aeabi_fdiv+0x16e>
 80007a0:	201a      	movs	r0, #26
 80007a2:	2201      	movs	r2, #1
 80007a4:	1b5b      	subs	r3, r3, r5
 80007a6:	e7e3      	b.n	8000770 <__aeabi_fdiv+0x1e8>
 80007a8:	01aa      	lsls	r2, r5, #6
 80007aa:	2000      	movs	r0, #0
 80007ac:	0a52      	lsrs	r2, r2, #9
 80007ae:	e74b      	b.n	8000648 <__aeabi_fdiv+0xc0>
 80007b0:	08004b18 	.word	0x08004b18
 80007b4:	f7ffffff 	.word	0xf7ffffff
 80007b8:	08004b58 	.word	0x08004b58

080007bc <__aeabi_fmul>:
 80007bc:	0243      	lsls	r3, r0, #9
 80007be:	0a5b      	lsrs	r3, r3, #9
 80007c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007c2:	464f      	mov	r7, r9
 80007c4:	4646      	mov	r6, r8
 80007c6:	4699      	mov	r9, r3
 80007c8:	46d6      	mov	lr, sl
 80007ca:	0fc3      	lsrs	r3, r0, #31
 80007cc:	0045      	lsls	r5, r0, #1
 80007ce:	4698      	mov	r8, r3
 80007d0:	b5c0      	push	{r6, r7, lr}
 80007d2:	464b      	mov	r3, r9
 80007d4:	1c0f      	adds	r7, r1, #0
 80007d6:	0e2d      	lsrs	r5, r5, #24
 80007d8:	d100      	bne.n	80007dc <__aeabi_fmul+0x20>
 80007da:	e0cb      	b.n	8000974 <__aeabi_fmul+0x1b8>
 80007dc:	2dff      	cmp	r5, #255	; 0xff
 80007de:	d100      	bne.n	80007e2 <__aeabi_fmul+0x26>
 80007e0:	e0cf      	b.n	8000982 <__aeabi_fmul+0x1c6>
 80007e2:	2280      	movs	r2, #128	; 0x80
 80007e4:	00db      	lsls	r3, r3, #3
 80007e6:	04d2      	lsls	r2, r2, #19
 80007e8:	431a      	orrs	r2, r3
 80007ea:	2300      	movs	r3, #0
 80007ec:	4691      	mov	r9, r2
 80007ee:	2600      	movs	r6, #0
 80007f0:	469a      	mov	sl, r3
 80007f2:	3d7f      	subs	r5, #127	; 0x7f
 80007f4:	027c      	lsls	r4, r7, #9
 80007f6:	007b      	lsls	r3, r7, #1
 80007f8:	0a64      	lsrs	r4, r4, #9
 80007fa:	0e1b      	lsrs	r3, r3, #24
 80007fc:	0fff      	lsrs	r7, r7, #31
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d100      	bne.n	8000804 <__aeabi_fmul+0x48>
 8000802:	e0a9      	b.n	8000958 <__aeabi_fmul+0x19c>
 8000804:	2bff      	cmp	r3, #255	; 0xff
 8000806:	d011      	beq.n	800082c <__aeabi_fmul+0x70>
 8000808:	2280      	movs	r2, #128	; 0x80
 800080a:	00e4      	lsls	r4, r4, #3
 800080c:	04d2      	lsls	r2, r2, #19
 800080e:	4314      	orrs	r4, r2
 8000810:	4642      	mov	r2, r8
 8000812:	3b7f      	subs	r3, #127	; 0x7f
 8000814:	195b      	adds	r3, r3, r5
 8000816:	407a      	eors	r2, r7
 8000818:	2000      	movs	r0, #0
 800081a:	b2d2      	uxtb	r2, r2
 800081c:	1c5d      	adds	r5, r3, #1
 800081e:	2e0a      	cmp	r6, #10
 8000820:	dd13      	ble.n	800084a <__aeabi_fmul+0x8e>
 8000822:	003a      	movs	r2, r7
 8000824:	2e0b      	cmp	r6, #11
 8000826:	d047      	beq.n	80008b8 <__aeabi_fmul+0xfc>
 8000828:	4647      	mov	r7, r8
 800082a:	e03f      	b.n	80008ac <__aeabi_fmul+0xf0>
 800082c:	002b      	movs	r3, r5
 800082e:	33ff      	adds	r3, #255	; 0xff
 8000830:	2c00      	cmp	r4, #0
 8000832:	d11e      	bne.n	8000872 <__aeabi_fmul+0xb6>
 8000834:	2202      	movs	r2, #2
 8000836:	4316      	orrs	r6, r2
 8000838:	4642      	mov	r2, r8
 800083a:	3501      	adds	r5, #1
 800083c:	407a      	eors	r2, r7
 800083e:	b2d2      	uxtb	r2, r2
 8000840:	35ff      	adds	r5, #255	; 0xff
 8000842:	2e0a      	cmp	r6, #10
 8000844:	dd00      	ble.n	8000848 <__aeabi_fmul+0x8c>
 8000846:	e0e4      	b.n	8000a12 <__aeabi_fmul+0x256>
 8000848:	2002      	movs	r0, #2
 800084a:	2e02      	cmp	r6, #2
 800084c:	dc1c      	bgt.n	8000888 <__aeabi_fmul+0xcc>
 800084e:	3e01      	subs	r6, #1
 8000850:	2e01      	cmp	r6, #1
 8000852:	d842      	bhi.n	80008da <__aeabi_fmul+0x11e>
 8000854:	2802      	cmp	r0, #2
 8000856:	d03d      	beq.n	80008d4 <__aeabi_fmul+0x118>
 8000858:	2801      	cmp	r0, #1
 800085a:	d166      	bne.n	800092a <__aeabi_fmul+0x16e>
 800085c:	2000      	movs	r0, #0
 800085e:	2100      	movs	r1, #0
 8000860:	05c0      	lsls	r0, r0, #23
 8000862:	4308      	orrs	r0, r1
 8000864:	07d2      	lsls	r2, r2, #31
 8000866:	4310      	orrs	r0, r2
 8000868:	bce0      	pop	{r5, r6, r7}
 800086a:	46ba      	mov	sl, r7
 800086c:	46b1      	mov	r9, r6
 800086e:	46a8      	mov	r8, r5
 8000870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000872:	2203      	movs	r2, #3
 8000874:	4316      	orrs	r6, r2
 8000876:	4642      	mov	r2, r8
 8000878:	3501      	adds	r5, #1
 800087a:	407a      	eors	r2, r7
 800087c:	b2d2      	uxtb	r2, r2
 800087e:	35ff      	adds	r5, #255	; 0xff
 8000880:	2e0a      	cmp	r6, #10
 8000882:	dd00      	ble.n	8000886 <__aeabi_fmul+0xca>
 8000884:	e0e4      	b.n	8000a50 <__aeabi_fmul+0x294>
 8000886:	2003      	movs	r0, #3
 8000888:	2101      	movs	r1, #1
 800088a:	40b1      	lsls	r1, r6
 800088c:	26a6      	movs	r6, #166	; 0xa6
 800088e:	00f6      	lsls	r6, r6, #3
 8000890:	4231      	tst	r1, r6
 8000892:	d10a      	bne.n	80008aa <__aeabi_fmul+0xee>
 8000894:	2690      	movs	r6, #144	; 0x90
 8000896:	00b6      	lsls	r6, r6, #2
 8000898:	4231      	tst	r1, r6
 800089a:	d116      	bne.n	80008ca <__aeabi_fmul+0x10e>
 800089c:	3eb9      	subs	r6, #185	; 0xb9
 800089e:	3eff      	subs	r6, #255	; 0xff
 80008a0:	420e      	tst	r6, r1
 80008a2:	d01a      	beq.n	80008da <__aeabi_fmul+0x11e>
 80008a4:	46a1      	mov	r9, r4
 80008a6:	4682      	mov	sl, r0
 80008a8:	e000      	b.n	80008ac <__aeabi_fmul+0xf0>
 80008aa:	0017      	movs	r7, r2
 80008ac:	4653      	mov	r3, sl
 80008ae:	003a      	movs	r2, r7
 80008b0:	2b02      	cmp	r3, #2
 80008b2:	d00f      	beq.n	80008d4 <__aeabi_fmul+0x118>
 80008b4:	464c      	mov	r4, r9
 80008b6:	4650      	mov	r0, sl
 80008b8:	2803      	cmp	r0, #3
 80008ba:	d1cd      	bne.n	8000858 <__aeabi_fmul+0x9c>
 80008bc:	2180      	movs	r1, #128	; 0x80
 80008be:	03c9      	lsls	r1, r1, #15
 80008c0:	4321      	orrs	r1, r4
 80008c2:	0249      	lsls	r1, r1, #9
 80008c4:	20ff      	movs	r0, #255	; 0xff
 80008c6:	0a49      	lsrs	r1, r1, #9
 80008c8:	e7ca      	b.n	8000860 <__aeabi_fmul+0xa4>
 80008ca:	2180      	movs	r1, #128	; 0x80
 80008cc:	2200      	movs	r2, #0
 80008ce:	20ff      	movs	r0, #255	; 0xff
 80008d0:	03c9      	lsls	r1, r1, #15
 80008d2:	e7c5      	b.n	8000860 <__aeabi_fmul+0xa4>
 80008d4:	20ff      	movs	r0, #255	; 0xff
 80008d6:	2100      	movs	r1, #0
 80008d8:	e7c2      	b.n	8000860 <__aeabi_fmul+0xa4>
 80008da:	0c20      	lsrs	r0, r4, #16
 80008dc:	4649      	mov	r1, r9
 80008de:	0424      	lsls	r4, r4, #16
 80008e0:	0c24      	lsrs	r4, r4, #16
 80008e2:	0027      	movs	r7, r4
 80008e4:	0c0e      	lsrs	r6, r1, #16
 80008e6:	0409      	lsls	r1, r1, #16
 80008e8:	0c09      	lsrs	r1, r1, #16
 80008ea:	4374      	muls	r4, r6
 80008ec:	434f      	muls	r7, r1
 80008ee:	4346      	muls	r6, r0
 80008f0:	4348      	muls	r0, r1
 80008f2:	0c39      	lsrs	r1, r7, #16
 80008f4:	1900      	adds	r0, r0, r4
 80008f6:	1809      	adds	r1, r1, r0
 80008f8:	428c      	cmp	r4, r1
 80008fa:	d903      	bls.n	8000904 <__aeabi_fmul+0x148>
 80008fc:	2080      	movs	r0, #128	; 0x80
 80008fe:	0240      	lsls	r0, r0, #9
 8000900:	4684      	mov	ip, r0
 8000902:	4466      	add	r6, ip
 8000904:	043f      	lsls	r7, r7, #16
 8000906:	0408      	lsls	r0, r1, #16
 8000908:	0c3f      	lsrs	r7, r7, #16
 800090a:	19c0      	adds	r0, r0, r7
 800090c:	0184      	lsls	r4, r0, #6
 800090e:	1e67      	subs	r7, r4, #1
 8000910:	41bc      	sbcs	r4, r7
 8000912:	0c09      	lsrs	r1, r1, #16
 8000914:	0e80      	lsrs	r0, r0, #26
 8000916:	1989      	adds	r1, r1, r6
 8000918:	4304      	orrs	r4, r0
 800091a:	0189      	lsls	r1, r1, #6
 800091c:	430c      	orrs	r4, r1
 800091e:	0109      	lsls	r1, r1, #4
 8000920:	d571      	bpl.n	8000a06 <__aeabi_fmul+0x24a>
 8000922:	2301      	movs	r3, #1
 8000924:	0861      	lsrs	r1, r4, #1
 8000926:	401c      	ands	r4, r3
 8000928:	430c      	orrs	r4, r1
 800092a:	002b      	movs	r3, r5
 800092c:	337f      	adds	r3, #127	; 0x7f
 800092e:	2b00      	cmp	r3, #0
 8000930:	dd51      	ble.n	80009d6 <__aeabi_fmul+0x21a>
 8000932:	0761      	lsls	r1, r4, #29
 8000934:	d004      	beq.n	8000940 <__aeabi_fmul+0x184>
 8000936:	210f      	movs	r1, #15
 8000938:	4021      	ands	r1, r4
 800093a:	2904      	cmp	r1, #4
 800093c:	d000      	beq.n	8000940 <__aeabi_fmul+0x184>
 800093e:	3404      	adds	r4, #4
 8000940:	0121      	lsls	r1, r4, #4
 8000942:	d503      	bpl.n	800094c <__aeabi_fmul+0x190>
 8000944:	4b43      	ldr	r3, [pc, #268]	; (8000a54 <__aeabi_fmul+0x298>)
 8000946:	401c      	ands	r4, r3
 8000948:	002b      	movs	r3, r5
 800094a:	3380      	adds	r3, #128	; 0x80
 800094c:	2bfe      	cmp	r3, #254	; 0xfe
 800094e:	dcc1      	bgt.n	80008d4 <__aeabi_fmul+0x118>
 8000950:	01a1      	lsls	r1, r4, #6
 8000952:	0a49      	lsrs	r1, r1, #9
 8000954:	b2d8      	uxtb	r0, r3
 8000956:	e783      	b.n	8000860 <__aeabi_fmul+0xa4>
 8000958:	2c00      	cmp	r4, #0
 800095a:	d12c      	bne.n	80009b6 <__aeabi_fmul+0x1fa>
 800095c:	2301      	movs	r3, #1
 800095e:	4642      	mov	r2, r8
 8000960:	431e      	orrs	r6, r3
 8000962:	002b      	movs	r3, r5
 8000964:	407a      	eors	r2, r7
 8000966:	2001      	movs	r0, #1
 8000968:	b2d2      	uxtb	r2, r2
 800096a:	1c5d      	adds	r5, r3, #1
 800096c:	2e0a      	cmp	r6, #10
 800096e:	dd00      	ble.n	8000972 <__aeabi_fmul+0x1b6>
 8000970:	e757      	b.n	8000822 <__aeabi_fmul+0x66>
 8000972:	e76a      	b.n	800084a <__aeabi_fmul+0x8e>
 8000974:	2b00      	cmp	r3, #0
 8000976:	d110      	bne.n	800099a <__aeabi_fmul+0x1de>
 8000978:	2301      	movs	r3, #1
 800097a:	2604      	movs	r6, #4
 800097c:	2500      	movs	r5, #0
 800097e:	469a      	mov	sl, r3
 8000980:	e738      	b.n	80007f4 <__aeabi_fmul+0x38>
 8000982:	2b00      	cmp	r3, #0
 8000984:	d104      	bne.n	8000990 <__aeabi_fmul+0x1d4>
 8000986:	2302      	movs	r3, #2
 8000988:	2608      	movs	r6, #8
 800098a:	25ff      	movs	r5, #255	; 0xff
 800098c:	469a      	mov	sl, r3
 800098e:	e731      	b.n	80007f4 <__aeabi_fmul+0x38>
 8000990:	2303      	movs	r3, #3
 8000992:	260c      	movs	r6, #12
 8000994:	25ff      	movs	r5, #255	; 0xff
 8000996:	469a      	mov	sl, r3
 8000998:	e72c      	b.n	80007f4 <__aeabi_fmul+0x38>
 800099a:	4648      	mov	r0, r9
 800099c:	f000 faf0 	bl	8000f80 <__clzsi2>
 80009a0:	464a      	mov	r2, r9
 80009a2:	1f43      	subs	r3, r0, #5
 80009a4:	2576      	movs	r5, #118	; 0x76
 80009a6:	409a      	lsls	r2, r3
 80009a8:	2300      	movs	r3, #0
 80009aa:	426d      	negs	r5, r5
 80009ac:	4691      	mov	r9, r2
 80009ae:	2600      	movs	r6, #0
 80009b0:	469a      	mov	sl, r3
 80009b2:	1a2d      	subs	r5, r5, r0
 80009b4:	e71e      	b.n	80007f4 <__aeabi_fmul+0x38>
 80009b6:	0020      	movs	r0, r4
 80009b8:	f000 fae2 	bl	8000f80 <__clzsi2>
 80009bc:	4642      	mov	r2, r8
 80009be:	1f43      	subs	r3, r0, #5
 80009c0:	409c      	lsls	r4, r3
 80009c2:	1a2b      	subs	r3, r5, r0
 80009c4:	3b76      	subs	r3, #118	; 0x76
 80009c6:	407a      	eors	r2, r7
 80009c8:	2000      	movs	r0, #0
 80009ca:	b2d2      	uxtb	r2, r2
 80009cc:	1c5d      	adds	r5, r3, #1
 80009ce:	2e0a      	cmp	r6, #10
 80009d0:	dd00      	ble.n	80009d4 <__aeabi_fmul+0x218>
 80009d2:	e726      	b.n	8000822 <__aeabi_fmul+0x66>
 80009d4:	e739      	b.n	800084a <__aeabi_fmul+0x8e>
 80009d6:	2101      	movs	r1, #1
 80009d8:	1acb      	subs	r3, r1, r3
 80009da:	2b1b      	cmp	r3, #27
 80009dc:	dd00      	ble.n	80009e0 <__aeabi_fmul+0x224>
 80009de:	e73d      	b.n	800085c <__aeabi_fmul+0xa0>
 80009e0:	359e      	adds	r5, #158	; 0x9e
 80009e2:	0021      	movs	r1, r4
 80009e4:	40ac      	lsls	r4, r5
 80009e6:	40d9      	lsrs	r1, r3
 80009e8:	1e63      	subs	r3, r4, #1
 80009ea:	419c      	sbcs	r4, r3
 80009ec:	4321      	orrs	r1, r4
 80009ee:	074b      	lsls	r3, r1, #29
 80009f0:	d004      	beq.n	80009fc <__aeabi_fmul+0x240>
 80009f2:	230f      	movs	r3, #15
 80009f4:	400b      	ands	r3, r1
 80009f6:	2b04      	cmp	r3, #4
 80009f8:	d000      	beq.n	80009fc <__aeabi_fmul+0x240>
 80009fa:	3104      	adds	r1, #4
 80009fc:	014b      	lsls	r3, r1, #5
 80009fe:	d504      	bpl.n	8000a0a <__aeabi_fmul+0x24e>
 8000a00:	2001      	movs	r0, #1
 8000a02:	2100      	movs	r1, #0
 8000a04:	e72c      	b.n	8000860 <__aeabi_fmul+0xa4>
 8000a06:	001d      	movs	r5, r3
 8000a08:	e78f      	b.n	800092a <__aeabi_fmul+0x16e>
 8000a0a:	0189      	lsls	r1, r1, #6
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	0a49      	lsrs	r1, r1, #9
 8000a10:	e726      	b.n	8000860 <__aeabi_fmul+0xa4>
 8000a12:	2302      	movs	r3, #2
 8000a14:	2e0f      	cmp	r6, #15
 8000a16:	d10c      	bne.n	8000a32 <__aeabi_fmul+0x276>
 8000a18:	2180      	movs	r1, #128	; 0x80
 8000a1a:	464b      	mov	r3, r9
 8000a1c:	03c9      	lsls	r1, r1, #15
 8000a1e:	420b      	tst	r3, r1
 8000a20:	d00d      	beq.n	8000a3e <__aeabi_fmul+0x282>
 8000a22:	420c      	tst	r4, r1
 8000a24:	d10b      	bne.n	8000a3e <__aeabi_fmul+0x282>
 8000a26:	4321      	orrs	r1, r4
 8000a28:	0249      	lsls	r1, r1, #9
 8000a2a:	003a      	movs	r2, r7
 8000a2c:	20ff      	movs	r0, #255	; 0xff
 8000a2e:	0a49      	lsrs	r1, r1, #9
 8000a30:	e716      	b.n	8000860 <__aeabi_fmul+0xa4>
 8000a32:	2e0b      	cmp	r6, #11
 8000a34:	d000      	beq.n	8000a38 <__aeabi_fmul+0x27c>
 8000a36:	e6f7      	b.n	8000828 <__aeabi_fmul+0x6c>
 8000a38:	46a1      	mov	r9, r4
 8000a3a:	469a      	mov	sl, r3
 8000a3c:	e736      	b.n	80008ac <__aeabi_fmul+0xf0>
 8000a3e:	2180      	movs	r1, #128	; 0x80
 8000a40:	464b      	mov	r3, r9
 8000a42:	03c9      	lsls	r1, r1, #15
 8000a44:	4319      	orrs	r1, r3
 8000a46:	0249      	lsls	r1, r1, #9
 8000a48:	4642      	mov	r2, r8
 8000a4a:	20ff      	movs	r0, #255	; 0xff
 8000a4c:	0a49      	lsrs	r1, r1, #9
 8000a4e:	e707      	b.n	8000860 <__aeabi_fmul+0xa4>
 8000a50:	2303      	movs	r3, #3
 8000a52:	e7df      	b.n	8000a14 <__aeabi_fmul+0x258>
 8000a54:	f7ffffff 	.word	0xf7ffffff

08000a58 <__aeabi_fsub>:
 8000a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a5a:	46c6      	mov	lr, r8
 8000a5c:	0243      	lsls	r3, r0, #9
 8000a5e:	0a5b      	lsrs	r3, r3, #9
 8000a60:	0045      	lsls	r5, r0, #1
 8000a62:	00da      	lsls	r2, r3, #3
 8000a64:	0fc4      	lsrs	r4, r0, #31
 8000a66:	0248      	lsls	r0, r1, #9
 8000a68:	004f      	lsls	r7, r1, #1
 8000a6a:	4694      	mov	ip, r2
 8000a6c:	0a42      	lsrs	r2, r0, #9
 8000a6e:	001e      	movs	r6, r3
 8000a70:	4690      	mov	r8, r2
 8000a72:	b500      	push	{lr}
 8000a74:	0e2d      	lsrs	r5, r5, #24
 8000a76:	0e3f      	lsrs	r7, r7, #24
 8000a78:	0fc9      	lsrs	r1, r1, #31
 8000a7a:	0980      	lsrs	r0, r0, #6
 8000a7c:	2fff      	cmp	r7, #255	; 0xff
 8000a7e:	d059      	beq.n	8000b34 <__aeabi_fsub+0xdc>
 8000a80:	2201      	movs	r2, #1
 8000a82:	4051      	eors	r1, r2
 8000a84:	428c      	cmp	r4, r1
 8000a86:	d039      	beq.n	8000afc <__aeabi_fsub+0xa4>
 8000a88:	1bea      	subs	r2, r5, r7
 8000a8a:	2a00      	cmp	r2, #0
 8000a8c:	dd58      	ble.n	8000b40 <__aeabi_fsub+0xe8>
 8000a8e:	2f00      	cmp	r7, #0
 8000a90:	d068      	beq.n	8000b64 <__aeabi_fsub+0x10c>
 8000a92:	2dff      	cmp	r5, #255	; 0xff
 8000a94:	d100      	bne.n	8000a98 <__aeabi_fsub+0x40>
 8000a96:	e0d1      	b.n	8000c3c <__aeabi_fsub+0x1e4>
 8000a98:	2380      	movs	r3, #128	; 0x80
 8000a9a:	04db      	lsls	r3, r3, #19
 8000a9c:	4318      	orrs	r0, r3
 8000a9e:	2a1b      	cmp	r2, #27
 8000aa0:	dc00      	bgt.n	8000aa4 <__aeabi_fsub+0x4c>
 8000aa2:	e0e3      	b.n	8000c6c <__aeabi_fsub+0x214>
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	4662      	mov	r2, ip
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	015a      	lsls	r2, r3, #5
 8000aac:	d400      	bmi.n	8000ab0 <__aeabi_fsub+0x58>
 8000aae:	e0ac      	b.n	8000c0a <__aeabi_fsub+0x1b2>
 8000ab0:	019b      	lsls	r3, r3, #6
 8000ab2:	099e      	lsrs	r6, r3, #6
 8000ab4:	0030      	movs	r0, r6
 8000ab6:	f000 fa63 	bl	8000f80 <__clzsi2>
 8000aba:	0033      	movs	r3, r6
 8000abc:	3805      	subs	r0, #5
 8000abe:	4083      	lsls	r3, r0
 8000ac0:	4285      	cmp	r5, r0
 8000ac2:	dc00      	bgt.n	8000ac6 <__aeabi_fsub+0x6e>
 8000ac4:	e0c6      	b.n	8000c54 <__aeabi_fsub+0x1fc>
 8000ac6:	4ab2      	ldr	r2, [pc, #712]	; (8000d90 <__aeabi_fsub+0x338>)
 8000ac8:	1a2d      	subs	r5, r5, r0
 8000aca:	4013      	ands	r3, r2
 8000acc:	075a      	lsls	r2, r3, #29
 8000ace:	d004      	beq.n	8000ada <__aeabi_fsub+0x82>
 8000ad0:	220f      	movs	r2, #15
 8000ad2:	401a      	ands	r2, r3
 8000ad4:	2a04      	cmp	r2, #4
 8000ad6:	d000      	beq.n	8000ada <__aeabi_fsub+0x82>
 8000ad8:	3304      	adds	r3, #4
 8000ada:	015a      	lsls	r2, r3, #5
 8000adc:	d400      	bmi.n	8000ae0 <__aeabi_fsub+0x88>
 8000ade:	e097      	b.n	8000c10 <__aeabi_fsub+0x1b8>
 8000ae0:	1c6a      	adds	r2, r5, #1
 8000ae2:	2dfe      	cmp	r5, #254	; 0xfe
 8000ae4:	d100      	bne.n	8000ae8 <__aeabi_fsub+0x90>
 8000ae6:	e084      	b.n	8000bf2 <__aeabi_fsub+0x19a>
 8000ae8:	019b      	lsls	r3, r3, #6
 8000aea:	0a5e      	lsrs	r6, r3, #9
 8000aec:	b2d2      	uxtb	r2, r2
 8000aee:	05d0      	lsls	r0, r2, #23
 8000af0:	4330      	orrs	r0, r6
 8000af2:	07e4      	lsls	r4, r4, #31
 8000af4:	4320      	orrs	r0, r4
 8000af6:	bc80      	pop	{r7}
 8000af8:	46b8      	mov	r8, r7
 8000afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000afc:	1bea      	subs	r2, r5, r7
 8000afe:	2a00      	cmp	r2, #0
 8000b00:	dd41      	ble.n	8000b86 <__aeabi_fsub+0x12e>
 8000b02:	2f00      	cmp	r7, #0
 8000b04:	d06b      	beq.n	8000bde <__aeabi_fsub+0x186>
 8000b06:	2dff      	cmp	r5, #255	; 0xff
 8000b08:	d100      	bne.n	8000b0c <__aeabi_fsub+0xb4>
 8000b0a:	e097      	b.n	8000c3c <__aeabi_fsub+0x1e4>
 8000b0c:	2380      	movs	r3, #128	; 0x80
 8000b0e:	04db      	lsls	r3, r3, #19
 8000b10:	4318      	orrs	r0, r3
 8000b12:	2a1b      	cmp	r2, #27
 8000b14:	dc00      	bgt.n	8000b18 <__aeabi_fsub+0xc0>
 8000b16:	e0cc      	b.n	8000cb2 <__aeabi_fsub+0x25a>
 8000b18:	2301      	movs	r3, #1
 8000b1a:	4463      	add	r3, ip
 8000b1c:	015a      	lsls	r2, r3, #5
 8000b1e:	d574      	bpl.n	8000c0a <__aeabi_fsub+0x1b2>
 8000b20:	3501      	adds	r5, #1
 8000b22:	2dff      	cmp	r5, #255	; 0xff
 8000b24:	d065      	beq.n	8000bf2 <__aeabi_fsub+0x19a>
 8000b26:	2201      	movs	r2, #1
 8000b28:	499a      	ldr	r1, [pc, #616]	; (8000d94 <__aeabi_fsub+0x33c>)
 8000b2a:	401a      	ands	r2, r3
 8000b2c:	085b      	lsrs	r3, r3, #1
 8000b2e:	400b      	ands	r3, r1
 8000b30:	4313      	orrs	r3, r2
 8000b32:	e7cb      	b.n	8000acc <__aeabi_fsub+0x74>
 8000b34:	2800      	cmp	r0, #0
 8000b36:	d01f      	beq.n	8000b78 <__aeabi_fsub+0x120>
 8000b38:	428c      	cmp	r4, r1
 8000b3a:	d022      	beq.n	8000b82 <__aeabi_fsub+0x12a>
 8000b3c:	002a      	movs	r2, r5
 8000b3e:	3aff      	subs	r2, #255	; 0xff
 8000b40:	2a00      	cmp	r2, #0
 8000b42:	d035      	beq.n	8000bb0 <__aeabi_fsub+0x158>
 8000b44:	1b7a      	subs	r2, r7, r5
 8000b46:	2d00      	cmp	r5, #0
 8000b48:	d000      	beq.n	8000b4c <__aeabi_fsub+0xf4>
 8000b4a:	e099      	b.n	8000c80 <__aeabi_fsub+0x228>
 8000b4c:	4663      	mov	r3, ip
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d100      	bne.n	8000b54 <__aeabi_fsub+0xfc>
 8000b52:	e0dd      	b.n	8000d10 <__aeabi_fsub+0x2b8>
 8000b54:	1e53      	subs	r3, r2, #1
 8000b56:	2a01      	cmp	r2, #1
 8000b58:	d100      	bne.n	8000b5c <__aeabi_fsub+0x104>
 8000b5a:	e105      	b.n	8000d68 <__aeabi_fsub+0x310>
 8000b5c:	2aff      	cmp	r2, #255	; 0xff
 8000b5e:	d06b      	beq.n	8000c38 <__aeabi_fsub+0x1e0>
 8000b60:	001a      	movs	r2, r3
 8000b62:	e094      	b.n	8000c8e <__aeabi_fsub+0x236>
 8000b64:	2800      	cmp	r0, #0
 8000b66:	d073      	beq.n	8000c50 <__aeabi_fsub+0x1f8>
 8000b68:	1e51      	subs	r1, r2, #1
 8000b6a:	2a01      	cmp	r2, #1
 8000b6c:	d100      	bne.n	8000b70 <__aeabi_fsub+0x118>
 8000b6e:	e0df      	b.n	8000d30 <__aeabi_fsub+0x2d8>
 8000b70:	2aff      	cmp	r2, #255	; 0xff
 8000b72:	d063      	beq.n	8000c3c <__aeabi_fsub+0x1e4>
 8000b74:	000a      	movs	r2, r1
 8000b76:	e792      	b.n	8000a9e <__aeabi_fsub+0x46>
 8000b78:	2201      	movs	r2, #1
 8000b7a:	4051      	eors	r1, r2
 8000b7c:	42a1      	cmp	r1, r4
 8000b7e:	d000      	beq.n	8000b82 <__aeabi_fsub+0x12a>
 8000b80:	e782      	b.n	8000a88 <__aeabi_fsub+0x30>
 8000b82:	002a      	movs	r2, r5
 8000b84:	3aff      	subs	r2, #255	; 0xff
 8000b86:	2a00      	cmp	r2, #0
 8000b88:	d036      	beq.n	8000bf8 <__aeabi_fsub+0x1a0>
 8000b8a:	1b7a      	subs	r2, r7, r5
 8000b8c:	2d00      	cmp	r5, #0
 8000b8e:	d100      	bne.n	8000b92 <__aeabi_fsub+0x13a>
 8000b90:	e0aa      	b.n	8000ce8 <__aeabi_fsub+0x290>
 8000b92:	2fff      	cmp	r7, #255	; 0xff
 8000b94:	d100      	bne.n	8000b98 <__aeabi_fsub+0x140>
 8000b96:	e0da      	b.n	8000d4e <__aeabi_fsub+0x2f6>
 8000b98:	2380      	movs	r3, #128	; 0x80
 8000b9a:	4661      	mov	r1, ip
 8000b9c:	04db      	lsls	r3, r3, #19
 8000b9e:	4319      	orrs	r1, r3
 8000ba0:	468c      	mov	ip, r1
 8000ba2:	2a1b      	cmp	r2, #27
 8000ba4:	dc00      	bgt.n	8000ba8 <__aeabi_fsub+0x150>
 8000ba6:	e0d4      	b.n	8000d52 <__aeabi_fsub+0x2fa>
 8000ba8:	2301      	movs	r3, #1
 8000baa:	003d      	movs	r5, r7
 8000bac:	181b      	adds	r3, r3, r0
 8000bae:	e7b5      	b.n	8000b1c <__aeabi_fsub+0xc4>
 8000bb0:	27fe      	movs	r7, #254	; 0xfe
 8000bb2:	1c6a      	adds	r2, r5, #1
 8000bb4:	4217      	tst	r7, r2
 8000bb6:	d171      	bne.n	8000c9c <__aeabi_fsub+0x244>
 8000bb8:	2d00      	cmp	r5, #0
 8000bba:	d000      	beq.n	8000bbe <__aeabi_fsub+0x166>
 8000bbc:	e09e      	b.n	8000cfc <__aeabi_fsub+0x2a4>
 8000bbe:	4663      	mov	r3, ip
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d100      	bne.n	8000bc6 <__aeabi_fsub+0x16e>
 8000bc4:	e0d5      	b.n	8000d72 <__aeabi_fsub+0x31a>
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2800      	cmp	r0, #0
 8000bca:	d100      	bne.n	8000bce <__aeabi_fsub+0x176>
 8000bcc:	e78f      	b.n	8000aee <__aeabi_fsub+0x96>
 8000bce:	1a1b      	subs	r3, r3, r0
 8000bd0:	015e      	lsls	r6, r3, #5
 8000bd2:	d400      	bmi.n	8000bd6 <__aeabi_fsub+0x17e>
 8000bd4:	e0d6      	b.n	8000d84 <__aeabi_fsub+0x32c>
 8000bd6:	4663      	mov	r3, ip
 8000bd8:	000c      	movs	r4, r1
 8000bda:	1ac3      	subs	r3, r0, r3
 8000bdc:	e776      	b.n	8000acc <__aeabi_fsub+0x74>
 8000bde:	2800      	cmp	r0, #0
 8000be0:	d036      	beq.n	8000c50 <__aeabi_fsub+0x1f8>
 8000be2:	1e51      	subs	r1, r2, #1
 8000be4:	2a01      	cmp	r2, #1
 8000be6:	d100      	bne.n	8000bea <__aeabi_fsub+0x192>
 8000be8:	e09a      	b.n	8000d20 <__aeabi_fsub+0x2c8>
 8000bea:	2aff      	cmp	r2, #255	; 0xff
 8000bec:	d026      	beq.n	8000c3c <__aeabi_fsub+0x1e4>
 8000bee:	000a      	movs	r2, r1
 8000bf0:	e78f      	b.n	8000b12 <__aeabi_fsub+0xba>
 8000bf2:	22ff      	movs	r2, #255	; 0xff
 8000bf4:	2600      	movs	r6, #0
 8000bf6:	e77a      	b.n	8000aee <__aeabi_fsub+0x96>
 8000bf8:	27fe      	movs	r7, #254	; 0xfe
 8000bfa:	1c6a      	adds	r2, r5, #1
 8000bfc:	4217      	tst	r7, r2
 8000bfe:	d062      	beq.n	8000cc6 <__aeabi_fsub+0x26e>
 8000c00:	2aff      	cmp	r2, #255	; 0xff
 8000c02:	d0f6      	beq.n	8000bf2 <__aeabi_fsub+0x19a>
 8000c04:	0015      	movs	r5, r2
 8000c06:	4460      	add	r0, ip
 8000c08:	0843      	lsrs	r3, r0, #1
 8000c0a:	075a      	lsls	r2, r3, #29
 8000c0c:	d000      	beq.n	8000c10 <__aeabi_fsub+0x1b8>
 8000c0e:	e75f      	b.n	8000ad0 <__aeabi_fsub+0x78>
 8000c10:	08db      	lsrs	r3, r3, #3
 8000c12:	2dff      	cmp	r5, #255	; 0xff
 8000c14:	d012      	beq.n	8000c3c <__aeabi_fsub+0x1e4>
 8000c16:	025b      	lsls	r3, r3, #9
 8000c18:	0a5e      	lsrs	r6, r3, #9
 8000c1a:	b2ea      	uxtb	r2, r5
 8000c1c:	e767      	b.n	8000aee <__aeabi_fsub+0x96>
 8000c1e:	4662      	mov	r2, ip
 8000c20:	2a00      	cmp	r2, #0
 8000c22:	d100      	bne.n	8000c26 <__aeabi_fsub+0x1ce>
 8000c24:	e093      	b.n	8000d4e <__aeabi_fsub+0x2f6>
 8000c26:	2800      	cmp	r0, #0
 8000c28:	d008      	beq.n	8000c3c <__aeabi_fsub+0x1e4>
 8000c2a:	2280      	movs	r2, #128	; 0x80
 8000c2c:	03d2      	lsls	r2, r2, #15
 8000c2e:	4213      	tst	r3, r2
 8000c30:	d004      	beq.n	8000c3c <__aeabi_fsub+0x1e4>
 8000c32:	4640      	mov	r0, r8
 8000c34:	4210      	tst	r0, r2
 8000c36:	d101      	bne.n	8000c3c <__aeabi_fsub+0x1e4>
 8000c38:	000c      	movs	r4, r1
 8000c3a:	4643      	mov	r3, r8
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d0d8      	beq.n	8000bf2 <__aeabi_fsub+0x19a>
 8000c40:	2680      	movs	r6, #128	; 0x80
 8000c42:	03f6      	lsls	r6, r6, #15
 8000c44:	431e      	orrs	r6, r3
 8000c46:	0276      	lsls	r6, r6, #9
 8000c48:	22ff      	movs	r2, #255	; 0xff
 8000c4a:	0a76      	lsrs	r6, r6, #9
 8000c4c:	e74f      	b.n	8000aee <__aeabi_fsub+0x96>
 8000c4e:	4643      	mov	r3, r8
 8000c50:	0015      	movs	r5, r2
 8000c52:	e7de      	b.n	8000c12 <__aeabi_fsub+0x1ba>
 8000c54:	2220      	movs	r2, #32
 8000c56:	1b40      	subs	r0, r0, r5
 8000c58:	3001      	adds	r0, #1
 8000c5a:	1a12      	subs	r2, r2, r0
 8000c5c:	0019      	movs	r1, r3
 8000c5e:	4093      	lsls	r3, r2
 8000c60:	40c1      	lsrs	r1, r0
 8000c62:	1e5a      	subs	r2, r3, #1
 8000c64:	4193      	sbcs	r3, r2
 8000c66:	2500      	movs	r5, #0
 8000c68:	430b      	orrs	r3, r1
 8000c6a:	e72f      	b.n	8000acc <__aeabi_fsub+0x74>
 8000c6c:	2320      	movs	r3, #32
 8000c6e:	1a9b      	subs	r3, r3, r2
 8000c70:	0001      	movs	r1, r0
 8000c72:	4098      	lsls	r0, r3
 8000c74:	0003      	movs	r3, r0
 8000c76:	40d1      	lsrs	r1, r2
 8000c78:	1e5a      	subs	r2, r3, #1
 8000c7a:	4193      	sbcs	r3, r2
 8000c7c:	430b      	orrs	r3, r1
 8000c7e:	e712      	b.n	8000aa6 <__aeabi_fsub+0x4e>
 8000c80:	2fff      	cmp	r7, #255	; 0xff
 8000c82:	d0d9      	beq.n	8000c38 <__aeabi_fsub+0x1e0>
 8000c84:	2380      	movs	r3, #128	; 0x80
 8000c86:	4664      	mov	r4, ip
 8000c88:	04db      	lsls	r3, r3, #19
 8000c8a:	431c      	orrs	r4, r3
 8000c8c:	46a4      	mov	ip, r4
 8000c8e:	2a1b      	cmp	r2, #27
 8000c90:	dd52      	ble.n	8000d38 <__aeabi_fsub+0x2e0>
 8000c92:	2301      	movs	r3, #1
 8000c94:	000c      	movs	r4, r1
 8000c96:	003d      	movs	r5, r7
 8000c98:	1ac3      	subs	r3, r0, r3
 8000c9a:	e706      	b.n	8000aaa <__aeabi_fsub+0x52>
 8000c9c:	4663      	mov	r3, ip
 8000c9e:	1a1e      	subs	r6, r3, r0
 8000ca0:	0173      	lsls	r3, r6, #5
 8000ca2:	d439      	bmi.n	8000d18 <__aeabi_fsub+0x2c0>
 8000ca4:	2e00      	cmp	r6, #0
 8000ca6:	d000      	beq.n	8000caa <__aeabi_fsub+0x252>
 8000ca8:	e704      	b.n	8000ab4 <__aeabi_fsub+0x5c>
 8000caa:	2400      	movs	r4, #0
 8000cac:	2200      	movs	r2, #0
 8000cae:	2600      	movs	r6, #0
 8000cb0:	e71d      	b.n	8000aee <__aeabi_fsub+0x96>
 8000cb2:	2320      	movs	r3, #32
 8000cb4:	1a9b      	subs	r3, r3, r2
 8000cb6:	0001      	movs	r1, r0
 8000cb8:	4098      	lsls	r0, r3
 8000cba:	0003      	movs	r3, r0
 8000cbc:	40d1      	lsrs	r1, r2
 8000cbe:	1e5a      	subs	r2, r3, #1
 8000cc0:	4193      	sbcs	r3, r2
 8000cc2:	430b      	orrs	r3, r1
 8000cc4:	e729      	b.n	8000b1a <__aeabi_fsub+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d1a9      	bne.n	8000c1e <__aeabi_fsub+0x1c6>
 8000cca:	4663      	mov	r3, ip
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d056      	beq.n	8000d7e <__aeabi_fsub+0x326>
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2800      	cmp	r0, #0
 8000cd4:	d100      	bne.n	8000cd8 <__aeabi_fsub+0x280>
 8000cd6:	e70a      	b.n	8000aee <__aeabi_fsub+0x96>
 8000cd8:	0003      	movs	r3, r0
 8000cda:	4463      	add	r3, ip
 8000cdc:	015a      	lsls	r2, r3, #5
 8000cde:	d594      	bpl.n	8000c0a <__aeabi_fsub+0x1b2>
 8000ce0:	4a2b      	ldr	r2, [pc, #172]	; (8000d90 <__aeabi_fsub+0x338>)
 8000ce2:	3501      	adds	r5, #1
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	e790      	b.n	8000c0a <__aeabi_fsub+0x1b2>
 8000ce8:	4663      	mov	r3, ip
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d0af      	beq.n	8000c4e <__aeabi_fsub+0x1f6>
 8000cee:	1e53      	subs	r3, r2, #1
 8000cf0:	2a01      	cmp	r2, #1
 8000cf2:	d015      	beq.n	8000d20 <__aeabi_fsub+0x2c8>
 8000cf4:	2aff      	cmp	r2, #255	; 0xff
 8000cf6:	d02a      	beq.n	8000d4e <__aeabi_fsub+0x2f6>
 8000cf8:	001a      	movs	r2, r3
 8000cfa:	e752      	b.n	8000ba2 <__aeabi_fsub+0x14a>
 8000cfc:	4662      	mov	r2, ip
 8000cfe:	2a00      	cmp	r2, #0
 8000d00:	d191      	bne.n	8000c26 <__aeabi_fsub+0x1ce>
 8000d02:	2800      	cmp	r0, #0
 8000d04:	d198      	bne.n	8000c38 <__aeabi_fsub+0x1e0>
 8000d06:	2680      	movs	r6, #128	; 0x80
 8000d08:	2400      	movs	r4, #0
 8000d0a:	22ff      	movs	r2, #255	; 0xff
 8000d0c:	03f6      	lsls	r6, r6, #15
 8000d0e:	e6ee      	b.n	8000aee <__aeabi_fsub+0x96>
 8000d10:	000c      	movs	r4, r1
 8000d12:	4643      	mov	r3, r8
 8000d14:	0015      	movs	r5, r2
 8000d16:	e77c      	b.n	8000c12 <__aeabi_fsub+0x1ba>
 8000d18:	4663      	mov	r3, ip
 8000d1a:	000c      	movs	r4, r1
 8000d1c:	1ac6      	subs	r6, r0, r3
 8000d1e:	e6c9      	b.n	8000ab4 <__aeabi_fsub+0x5c>
 8000d20:	0003      	movs	r3, r0
 8000d22:	4463      	add	r3, ip
 8000d24:	2501      	movs	r5, #1
 8000d26:	015a      	lsls	r2, r3, #5
 8000d28:	d400      	bmi.n	8000d2c <__aeabi_fsub+0x2d4>
 8000d2a:	e76e      	b.n	8000c0a <__aeabi_fsub+0x1b2>
 8000d2c:	2502      	movs	r5, #2
 8000d2e:	e6fa      	b.n	8000b26 <__aeabi_fsub+0xce>
 8000d30:	4663      	mov	r3, ip
 8000d32:	2501      	movs	r5, #1
 8000d34:	1a1b      	subs	r3, r3, r0
 8000d36:	e6b8      	b.n	8000aaa <__aeabi_fsub+0x52>
 8000d38:	4664      	mov	r4, ip
 8000d3a:	2320      	movs	r3, #32
 8000d3c:	40d4      	lsrs	r4, r2
 8000d3e:	1a9b      	subs	r3, r3, r2
 8000d40:	4662      	mov	r2, ip
 8000d42:	409a      	lsls	r2, r3
 8000d44:	0013      	movs	r3, r2
 8000d46:	1e5a      	subs	r2, r3, #1
 8000d48:	4193      	sbcs	r3, r2
 8000d4a:	4323      	orrs	r3, r4
 8000d4c:	e7a2      	b.n	8000c94 <__aeabi_fsub+0x23c>
 8000d4e:	4643      	mov	r3, r8
 8000d50:	e774      	b.n	8000c3c <__aeabi_fsub+0x1e4>
 8000d52:	4661      	mov	r1, ip
 8000d54:	2320      	movs	r3, #32
 8000d56:	40d1      	lsrs	r1, r2
 8000d58:	1a9b      	subs	r3, r3, r2
 8000d5a:	4662      	mov	r2, ip
 8000d5c:	409a      	lsls	r2, r3
 8000d5e:	0013      	movs	r3, r2
 8000d60:	1e5a      	subs	r2, r3, #1
 8000d62:	4193      	sbcs	r3, r2
 8000d64:	430b      	orrs	r3, r1
 8000d66:	e720      	b.n	8000baa <__aeabi_fsub+0x152>
 8000d68:	4663      	mov	r3, ip
 8000d6a:	000c      	movs	r4, r1
 8000d6c:	2501      	movs	r5, #1
 8000d6e:	1ac3      	subs	r3, r0, r3
 8000d70:	e69b      	b.n	8000aaa <__aeabi_fsub+0x52>
 8000d72:	2800      	cmp	r0, #0
 8000d74:	d099      	beq.n	8000caa <__aeabi_fsub+0x252>
 8000d76:	000c      	movs	r4, r1
 8000d78:	4646      	mov	r6, r8
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	e6b7      	b.n	8000aee <__aeabi_fsub+0x96>
 8000d7e:	4646      	mov	r6, r8
 8000d80:	2200      	movs	r2, #0
 8000d82:	e6b4      	b.n	8000aee <__aeabi_fsub+0x96>
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d000      	beq.n	8000d8a <__aeabi_fsub+0x332>
 8000d88:	e73f      	b.n	8000c0a <__aeabi_fsub+0x1b2>
 8000d8a:	2400      	movs	r4, #0
 8000d8c:	2600      	movs	r6, #0
 8000d8e:	e6ae      	b.n	8000aee <__aeabi_fsub+0x96>
 8000d90:	fbffffff 	.word	0xfbffffff
 8000d94:	7dffffff 	.word	0x7dffffff

08000d98 <__aeabi_f2iz>:
 8000d98:	0241      	lsls	r1, r0, #9
 8000d9a:	0042      	lsls	r2, r0, #1
 8000d9c:	0fc3      	lsrs	r3, r0, #31
 8000d9e:	0a49      	lsrs	r1, r1, #9
 8000da0:	2000      	movs	r0, #0
 8000da2:	0e12      	lsrs	r2, r2, #24
 8000da4:	2a7e      	cmp	r2, #126	; 0x7e
 8000da6:	dd03      	ble.n	8000db0 <__aeabi_f2iz+0x18>
 8000da8:	2a9d      	cmp	r2, #157	; 0x9d
 8000daa:	dd02      	ble.n	8000db2 <__aeabi_f2iz+0x1a>
 8000dac:	4a09      	ldr	r2, [pc, #36]	; (8000dd4 <__aeabi_f2iz+0x3c>)
 8000dae:	1898      	adds	r0, r3, r2
 8000db0:	4770      	bx	lr
 8000db2:	2080      	movs	r0, #128	; 0x80
 8000db4:	0400      	lsls	r0, r0, #16
 8000db6:	4301      	orrs	r1, r0
 8000db8:	2a95      	cmp	r2, #149	; 0x95
 8000dba:	dc07      	bgt.n	8000dcc <__aeabi_f2iz+0x34>
 8000dbc:	2096      	movs	r0, #150	; 0x96
 8000dbe:	1a82      	subs	r2, r0, r2
 8000dc0:	40d1      	lsrs	r1, r2
 8000dc2:	4248      	negs	r0, r1
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d1f3      	bne.n	8000db0 <__aeabi_f2iz+0x18>
 8000dc8:	0008      	movs	r0, r1
 8000dca:	e7f1      	b.n	8000db0 <__aeabi_f2iz+0x18>
 8000dcc:	3a96      	subs	r2, #150	; 0x96
 8000dce:	4091      	lsls	r1, r2
 8000dd0:	e7f7      	b.n	8000dc2 <__aeabi_f2iz+0x2a>
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	7fffffff 	.word	0x7fffffff

08000dd8 <__aeabi_i2f>:
 8000dd8:	b570      	push	{r4, r5, r6, lr}
 8000dda:	2800      	cmp	r0, #0
 8000ddc:	d013      	beq.n	8000e06 <__aeabi_i2f+0x2e>
 8000dde:	17c3      	asrs	r3, r0, #31
 8000de0:	18c5      	adds	r5, r0, r3
 8000de2:	405d      	eors	r5, r3
 8000de4:	0fc4      	lsrs	r4, r0, #31
 8000de6:	0028      	movs	r0, r5
 8000de8:	f000 f8ca 	bl	8000f80 <__clzsi2>
 8000dec:	239e      	movs	r3, #158	; 0x9e
 8000dee:	0001      	movs	r1, r0
 8000df0:	1a1b      	subs	r3, r3, r0
 8000df2:	2b96      	cmp	r3, #150	; 0x96
 8000df4:	dc0f      	bgt.n	8000e16 <__aeabi_i2f+0x3e>
 8000df6:	2808      	cmp	r0, #8
 8000df8:	d031      	beq.n	8000e5e <__aeabi_i2f+0x86>
 8000dfa:	3908      	subs	r1, #8
 8000dfc:	408d      	lsls	r5, r1
 8000dfe:	026d      	lsls	r5, r5, #9
 8000e00:	0a6d      	lsrs	r5, r5, #9
 8000e02:	b2d8      	uxtb	r0, r3
 8000e04:	e002      	b.n	8000e0c <__aeabi_i2f+0x34>
 8000e06:	2400      	movs	r4, #0
 8000e08:	2000      	movs	r0, #0
 8000e0a:	2500      	movs	r5, #0
 8000e0c:	05c0      	lsls	r0, r0, #23
 8000e0e:	4328      	orrs	r0, r5
 8000e10:	07e4      	lsls	r4, r4, #31
 8000e12:	4320      	orrs	r0, r4
 8000e14:	bd70      	pop	{r4, r5, r6, pc}
 8000e16:	2b99      	cmp	r3, #153	; 0x99
 8000e18:	dd0c      	ble.n	8000e34 <__aeabi_i2f+0x5c>
 8000e1a:	2205      	movs	r2, #5
 8000e1c:	1a12      	subs	r2, r2, r0
 8000e1e:	0028      	movs	r0, r5
 8000e20:	40d0      	lsrs	r0, r2
 8000e22:	0002      	movs	r2, r0
 8000e24:	0008      	movs	r0, r1
 8000e26:	301b      	adds	r0, #27
 8000e28:	4085      	lsls	r5, r0
 8000e2a:	0028      	movs	r0, r5
 8000e2c:	1e45      	subs	r5, r0, #1
 8000e2e:	41a8      	sbcs	r0, r5
 8000e30:	4302      	orrs	r2, r0
 8000e32:	0015      	movs	r5, r2
 8000e34:	2905      	cmp	r1, #5
 8000e36:	dc16      	bgt.n	8000e66 <__aeabi_i2f+0x8e>
 8000e38:	002a      	movs	r2, r5
 8000e3a:	480f      	ldr	r0, [pc, #60]	; (8000e78 <__aeabi_i2f+0xa0>)
 8000e3c:	4002      	ands	r2, r0
 8000e3e:	076e      	lsls	r6, r5, #29
 8000e40:	d009      	beq.n	8000e56 <__aeabi_i2f+0x7e>
 8000e42:	260f      	movs	r6, #15
 8000e44:	4035      	ands	r5, r6
 8000e46:	2d04      	cmp	r5, #4
 8000e48:	d005      	beq.n	8000e56 <__aeabi_i2f+0x7e>
 8000e4a:	3204      	adds	r2, #4
 8000e4c:	0155      	lsls	r5, r2, #5
 8000e4e:	d502      	bpl.n	8000e56 <__aeabi_i2f+0x7e>
 8000e50:	239f      	movs	r3, #159	; 0x9f
 8000e52:	4002      	ands	r2, r0
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	0192      	lsls	r2, r2, #6
 8000e58:	0a55      	lsrs	r5, r2, #9
 8000e5a:	b2d8      	uxtb	r0, r3
 8000e5c:	e7d6      	b.n	8000e0c <__aeabi_i2f+0x34>
 8000e5e:	026d      	lsls	r5, r5, #9
 8000e60:	2096      	movs	r0, #150	; 0x96
 8000e62:	0a6d      	lsrs	r5, r5, #9
 8000e64:	e7d2      	b.n	8000e0c <__aeabi_i2f+0x34>
 8000e66:	1f4a      	subs	r2, r1, #5
 8000e68:	4095      	lsls	r5, r2
 8000e6a:	002a      	movs	r2, r5
 8000e6c:	4802      	ldr	r0, [pc, #8]	; (8000e78 <__aeabi_i2f+0xa0>)
 8000e6e:	4002      	ands	r2, r0
 8000e70:	076e      	lsls	r6, r5, #29
 8000e72:	d0f0      	beq.n	8000e56 <__aeabi_i2f+0x7e>
 8000e74:	e7e5      	b.n	8000e42 <__aeabi_i2f+0x6a>
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	fbffffff 	.word	0xfbffffff

08000e7c <__aeabi_ui2f>:
 8000e7c:	b570      	push	{r4, r5, r6, lr}
 8000e7e:	1e04      	subs	r4, r0, #0
 8000e80:	d00e      	beq.n	8000ea0 <__aeabi_ui2f+0x24>
 8000e82:	f000 f87d 	bl	8000f80 <__clzsi2>
 8000e86:	239e      	movs	r3, #158	; 0x9e
 8000e88:	0001      	movs	r1, r0
 8000e8a:	1a1b      	subs	r3, r3, r0
 8000e8c:	2b96      	cmp	r3, #150	; 0x96
 8000e8e:	dc0c      	bgt.n	8000eaa <__aeabi_ui2f+0x2e>
 8000e90:	2808      	cmp	r0, #8
 8000e92:	d02c      	beq.n	8000eee <__aeabi_ui2f+0x72>
 8000e94:	3908      	subs	r1, #8
 8000e96:	408c      	lsls	r4, r1
 8000e98:	0264      	lsls	r4, r4, #9
 8000e9a:	0a64      	lsrs	r4, r4, #9
 8000e9c:	b2d8      	uxtb	r0, r3
 8000e9e:	e001      	b.n	8000ea4 <__aeabi_ui2f+0x28>
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	2400      	movs	r4, #0
 8000ea4:	05c0      	lsls	r0, r0, #23
 8000ea6:	4320      	orrs	r0, r4
 8000ea8:	bd70      	pop	{r4, r5, r6, pc}
 8000eaa:	2b99      	cmp	r3, #153	; 0x99
 8000eac:	dd0a      	ble.n	8000ec4 <__aeabi_ui2f+0x48>
 8000eae:	0002      	movs	r2, r0
 8000eb0:	0020      	movs	r0, r4
 8000eb2:	321b      	adds	r2, #27
 8000eb4:	4090      	lsls	r0, r2
 8000eb6:	0002      	movs	r2, r0
 8000eb8:	1e50      	subs	r0, r2, #1
 8000eba:	4182      	sbcs	r2, r0
 8000ebc:	2005      	movs	r0, #5
 8000ebe:	1a40      	subs	r0, r0, r1
 8000ec0:	40c4      	lsrs	r4, r0
 8000ec2:	4314      	orrs	r4, r2
 8000ec4:	2905      	cmp	r1, #5
 8000ec6:	dc16      	bgt.n	8000ef6 <__aeabi_ui2f+0x7a>
 8000ec8:	0022      	movs	r2, r4
 8000eca:	480f      	ldr	r0, [pc, #60]	; (8000f08 <__aeabi_ui2f+0x8c>)
 8000ecc:	4002      	ands	r2, r0
 8000ece:	0765      	lsls	r5, r4, #29
 8000ed0:	d009      	beq.n	8000ee6 <__aeabi_ui2f+0x6a>
 8000ed2:	250f      	movs	r5, #15
 8000ed4:	402c      	ands	r4, r5
 8000ed6:	2c04      	cmp	r4, #4
 8000ed8:	d005      	beq.n	8000ee6 <__aeabi_ui2f+0x6a>
 8000eda:	3204      	adds	r2, #4
 8000edc:	0154      	lsls	r4, r2, #5
 8000ede:	d502      	bpl.n	8000ee6 <__aeabi_ui2f+0x6a>
 8000ee0:	239f      	movs	r3, #159	; 0x9f
 8000ee2:	4002      	ands	r2, r0
 8000ee4:	1a5b      	subs	r3, r3, r1
 8000ee6:	0192      	lsls	r2, r2, #6
 8000ee8:	0a54      	lsrs	r4, r2, #9
 8000eea:	b2d8      	uxtb	r0, r3
 8000eec:	e7da      	b.n	8000ea4 <__aeabi_ui2f+0x28>
 8000eee:	0264      	lsls	r4, r4, #9
 8000ef0:	2096      	movs	r0, #150	; 0x96
 8000ef2:	0a64      	lsrs	r4, r4, #9
 8000ef4:	e7d6      	b.n	8000ea4 <__aeabi_ui2f+0x28>
 8000ef6:	1f4a      	subs	r2, r1, #5
 8000ef8:	4094      	lsls	r4, r2
 8000efa:	0022      	movs	r2, r4
 8000efc:	4802      	ldr	r0, [pc, #8]	; (8000f08 <__aeabi_ui2f+0x8c>)
 8000efe:	4002      	ands	r2, r0
 8000f00:	0765      	lsls	r5, r4, #29
 8000f02:	d0f0      	beq.n	8000ee6 <__aeabi_ui2f+0x6a>
 8000f04:	e7e5      	b.n	8000ed2 <__aeabi_ui2f+0x56>
 8000f06:	46c0      	nop			; (mov r8, r8)
 8000f08:	fbffffff 	.word	0xfbffffff

08000f0c <__aeabi_cfrcmple>:
 8000f0c:	4684      	mov	ip, r0
 8000f0e:	0008      	movs	r0, r1
 8000f10:	4661      	mov	r1, ip
 8000f12:	e7ff      	b.n	8000f14 <__aeabi_cfcmpeq>

08000f14 <__aeabi_cfcmpeq>:
 8000f14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000f16:	f000 f8bd 	bl	8001094 <__lesf2>
 8000f1a:	2800      	cmp	r0, #0
 8000f1c:	d401      	bmi.n	8000f22 <__aeabi_cfcmpeq+0xe>
 8000f1e:	2100      	movs	r1, #0
 8000f20:	42c8      	cmn	r0, r1
 8000f22:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000f24 <__aeabi_fcmpeq>:
 8000f24:	b510      	push	{r4, lr}
 8000f26:	f000 f849 	bl	8000fbc <__eqsf2>
 8000f2a:	4240      	negs	r0, r0
 8000f2c:	3001      	adds	r0, #1
 8000f2e:	bd10      	pop	{r4, pc}

08000f30 <__aeabi_fcmplt>:
 8000f30:	b510      	push	{r4, lr}
 8000f32:	f000 f8af 	bl	8001094 <__lesf2>
 8000f36:	2800      	cmp	r0, #0
 8000f38:	db01      	blt.n	8000f3e <__aeabi_fcmplt+0xe>
 8000f3a:	2000      	movs	r0, #0
 8000f3c:	bd10      	pop	{r4, pc}
 8000f3e:	2001      	movs	r0, #1
 8000f40:	bd10      	pop	{r4, pc}
 8000f42:	46c0      	nop			; (mov r8, r8)

08000f44 <__aeabi_fcmple>:
 8000f44:	b510      	push	{r4, lr}
 8000f46:	f000 f8a5 	bl	8001094 <__lesf2>
 8000f4a:	2800      	cmp	r0, #0
 8000f4c:	dd01      	ble.n	8000f52 <__aeabi_fcmple+0xe>
 8000f4e:	2000      	movs	r0, #0
 8000f50:	bd10      	pop	{r4, pc}
 8000f52:	2001      	movs	r0, #1
 8000f54:	bd10      	pop	{r4, pc}
 8000f56:	46c0      	nop			; (mov r8, r8)

08000f58 <__aeabi_fcmpgt>:
 8000f58:	b510      	push	{r4, lr}
 8000f5a:	f000 f855 	bl	8001008 <__gesf2>
 8000f5e:	2800      	cmp	r0, #0
 8000f60:	dc01      	bgt.n	8000f66 <__aeabi_fcmpgt+0xe>
 8000f62:	2000      	movs	r0, #0
 8000f64:	bd10      	pop	{r4, pc}
 8000f66:	2001      	movs	r0, #1
 8000f68:	bd10      	pop	{r4, pc}
 8000f6a:	46c0      	nop			; (mov r8, r8)

08000f6c <__aeabi_fcmpge>:
 8000f6c:	b510      	push	{r4, lr}
 8000f6e:	f000 f84b 	bl	8001008 <__gesf2>
 8000f72:	2800      	cmp	r0, #0
 8000f74:	da01      	bge.n	8000f7a <__aeabi_fcmpge+0xe>
 8000f76:	2000      	movs	r0, #0
 8000f78:	bd10      	pop	{r4, pc}
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	bd10      	pop	{r4, pc}
 8000f7e:	46c0      	nop			; (mov r8, r8)

08000f80 <__clzsi2>:
 8000f80:	211c      	movs	r1, #28
 8000f82:	2301      	movs	r3, #1
 8000f84:	041b      	lsls	r3, r3, #16
 8000f86:	4298      	cmp	r0, r3
 8000f88:	d301      	bcc.n	8000f8e <__clzsi2+0xe>
 8000f8a:	0c00      	lsrs	r0, r0, #16
 8000f8c:	3910      	subs	r1, #16
 8000f8e:	0a1b      	lsrs	r3, r3, #8
 8000f90:	4298      	cmp	r0, r3
 8000f92:	d301      	bcc.n	8000f98 <__clzsi2+0x18>
 8000f94:	0a00      	lsrs	r0, r0, #8
 8000f96:	3908      	subs	r1, #8
 8000f98:	091b      	lsrs	r3, r3, #4
 8000f9a:	4298      	cmp	r0, r3
 8000f9c:	d301      	bcc.n	8000fa2 <__clzsi2+0x22>
 8000f9e:	0900      	lsrs	r0, r0, #4
 8000fa0:	3904      	subs	r1, #4
 8000fa2:	a202      	add	r2, pc, #8	; (adr r2, 8000fac <__clzsi2+0x2c>)
 8000fa4:	5c10      	ldrb	r0, [r2, r0]
 8000fa6:	1840      	adds	r0, r0, r1
 8000fa8:	4770      	bx	lr
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	02020304 	.word	0x02020304
 8000fb0:	01010101 	.word	0x01010101
	...

08000fbc <__eqsf2>:
 8000fbc:	b570      	push	{r4, r5, r6, lr}
 8000fbe:	0042      	lsls	r2, r0, #1
 8000fc0:	0245      	lsls	r5, r0, #9
 8000fc2:	024e      	lsls	r6, r1, #9
 8000fc4:	004c      	lsls	r4, r1, #1
 8000fc6:	0fc3      	lsrs	r3, r0, #31
 8000fc8:	0a6d      	lsrs	r5, r5, #9
 8000fca:	2001      	movs	r0, #1
 8000fcc:	0e12      	lsrs	r2, r2, #24
 8000fce:	0a76      	lsrs	r6, r6, #9
 8000fd0:	0e24      	lsrs	r4, r4, #24
 8000fd2:	0fc9      	lsrs	r1, r1, #31
 8000fd4:	2aff      	cmp	r2, #255	; 0xff
 8000fd6:	d006      	beq.n	8000fe6 <__eqsf2+0x2a>
 8000fd8:	2cff      	cmp	r4, #255	; 0xff
 8000fda:	d003      	beq.n	8000fe4 <__eqsf2+0x28>
 8000fdc:	42a2      	cmp	r2, r4
 8000fde:	d101      	bne.n	8000fe4 <__eqsf2+0x28>
 8000fe0:	42b5      	cmp	r5, r6
 8000fe2:	d006      	beq.n	8000ff2 <__eqsf2+0x36>
 8000fe4:	bd70      	pop	{r4, r5, r6, pc}
 8000fe6:	2d00      	cmp	r5, #0
 8000fe8:	d1fc      	bne.n	8000fe4 <__eqsf2+0x28>
 8000fea:	2cff      	cmp	r4, #255	; 0xff
 8000fec:	d1fa      	bne.n	8000fe4 <__eqsf2+0x28>
 8000fee:	2e00      	cmp	r6, #0
 8000ff0:	d1f8      	bne.n	8000fe4 <__eqsf2+0x28>
 8000ff2:	428b      	cmp	r3, r1
 8000ff4:	d006      	beq.n	8001004 <__eqsf2+0x48>
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	2a00      	cmp	r2, #0
 8000ffa:	d1f3      	bne.n	8000fe4 <__eqsf2+0x28>
 8000ffc:	0028      	movs	r0, r5
 8000ffe:	1e43      	subs	r3, r0, #1
 8001000:	4198      	sbcs	r0, r3
 8001002:	e7ef      	b.n	8000fe4 <__eqsf2+0x28>
 8001004:	2000      	movs	r0, #0
 8001006:	e7ed      	b.n	8000fe4 <__eqsf2+0x28>

08001008 <__gesf2>:
 8001008:	b570      	push	{r4, r5, r6, lr}
 800100a:	0042      	lsls	r2, r0, #1
 800100c:	0245      	lsls	r5, r0, #9
 800100e:	024e      	lsls	r6, r1, #9
 8001010:	004c      	lsls	r4, r1, #1
 8001012:	0fc3      	lsrs	r3, r0, #31
 8001014:	0a6d      	lsrs	r5, r5, #9
 8001016:	0e12      	lsrs	r2, r2, #24
 8001018:	0a76      	lsrs	r6, r6, #9
 800101a:	0e24      	lsrs	r4, r4, #24
 800101c:	0fc8      	lsrs	r0, r1, #31
 800101e:	2aff      	cmp	r2, #255	; 0xff
 8001020:	d01b      	beq.n	800105a <__gesf2+0x52>
 8001022:	2cff      	cmp	r4, #255	; 0xff
 8001024:	d00e      	beq.n	8001044 <__gesf2+0x3c>
 8001026:	2a00      	cmp	r2, #0
 8001028:	d11b      	bne.n	8001062 <__gesf2+0x5a>
 800102a:	2c00      	cmp	r4, #0
 800102c:	d101      	bne.n	8001032 <__gesf2+0x2a>
 800102e:	2e00      	cmp	r6, #0
 8001030:	d01c      	beq.n	800106c <__gesf2+0x64>
 8001032:	2d00      	cmp	r5, #0
 8001034:	d00c      	beq.n	8001050 <__gesf2+0x48>
 8001036:	4283      	cmp	r3, r0
 8001038:	d01c      	beq.n	8001074 <__gesf2+0x6c>
 800103a:	2102      	movs	r1, #2
 800103c:	1e58      	subs	r0, r3, #1
 800103e:	4008      	ands	r0, r1
 8001040:	3801      	subs	r0, #1
 8001042:	bd70      	pop	{r4, r5, r6, pc}
 8001044:	2e00      	cmp	r6, #0
 8001046:	d122      	bne.n	800108e <__gesf2+0x86>
 8001048:	2a00      	cmp	r2, #0
 800104a:	d1f4      	bne.n	8001036 <__gesf2+0x2e>
 800104c:	2d00      	cmp	r5, #0
 800104e:	d1f2      	bne.n	8001036 <__gesf2+0x2e>
 8001050:	2800      	cmp	r0, #0
 8001052:	d1f6      	bne.n	8001042 <__gesf2+0x3a>
 8001054:	2001      	movs	r0, #1
 8001056:	4240      	negs	r0, r0
 8001058:	e7f3      	b.n	8001042 <__gesf2+0x3a>
 800105a:	2d00      	cmp	r5, #0
 800105c:	d117      	bne.n	800108e <__gesf2+0x86>
 800105e:	2cff      	cmp	r4, #255	; 0xff
 8001060:	d0f0      	beq.n	8001044 <__gesf2+0x3c>
 8001062:	2c00      	cmp	r4, #0
 8001064:	d1e7      	bne.n	8001036 <__gesf2+0x2e>
 8001066:	2e00      	cmp	r6, #0
 8001068:	d1e5      	bne.n	8001036 <__gesf2+0x2e>
 800106a:	e7e6      	b.n	800103a <__gesf2+0x32>
 800106c:	2000      	movs	r0, #0
 800106e:	2d00      	cmp	r5, #0
 8001070:	d0e7      	beq.n	8001042 <__gesf2+0x3a>
 8001072:	e7e2      	b.n	800103a <__gesf2+0x32>
 8001074:	42a2      	cmp	r2, r4
 8001076:	dc05      	bgt.n	8001084 <__gesf2+0x7c>
 8001078:	dbea      	blt.n	8001050 <__gesf2+0x48>
 800107a:	42b5      	cmp	r5, r6
 800107c:	d802      	bhi.n	8001084 <__gesf2+0x7c>
 800107e:	d3e7      	bcc.n	8001050 <__gesf2+0x48>
 8001080:	2000      	movs	r0, #0
 8001082:	e7de      	b.n	8001042 <__gesf2+0x3a>
 8001084:	4243      	negs	r3, r0
 8001086:	4158      	adcs	r0, r3
 8001088:	0040      	lsls	r0, r0, #1
 800108a:	3801      	subs	r0, #1
 800108c:	e7d9      	b.n	8001042 <__gesf2+0x3a>
 800108e:	2002      	movs	r0, #2
 8001090:	4240      	negs	r0, r0
 8001092:	e7d6      	b.n	8001042 <__gesf2+0x3a>

08001094 <__lesf2>:
 8001094:	b570      	push	{r4, r5, r6, lr}
 8001096:	0042      	lsls	r2, r0, #1
 8001098:	0245      	lsls	r5, r0, #9
 800109a:	024e      	lsls	r6, r1, #9
 800109c:	004c      	lsls	r4, r1, #1
 800109e:	0fc3      	lsrs	r3, r0, #31
 80010a0:	0a6d      	lsrs	r5, r5, #9
 80010a2:	0e12      	lsrs	r2, r2, #24
 80010a4:	0a76      	lsrs	r6, r6, #9
 80010a6:	0e24      	lsrs	r4, r4, #24
 80010a8:	0fc8      	lsrs	r0, r1, #31
 80010aa:	2aff      	cmp	r2, #255	; 0xff
 80010ac:	d00b      	beq.n	80010c6 <__lesf2+0x32>
 80010ae:	2cff      	cmp	r4, #255	; 0xff
 80010b0:	d00d      	beq.n	80010ce <__lesf2+0x3a>
 80010b2:	2a00      	cmp	r2, #0
 80010b4:	d11f      	bne.n	80010f6 <__lesf2+0x62>
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d116      	bne.n	80010e8 <__lesf2+0x54>
 80010ba:	2e00      	cmp	r6, #0
 80010bc:	d114      	bne.n	80010e8 <__lesf2+0x54>
 80010be:	2000      	movs	r0, #0
 80010c0:	2d00      	cmp	r5, #0
 80010c2:	d010      	beq.n	80010e6 <__lesf2+0x52>
 80010c4:	e009      	b.n	80010da <__lesf2+0x46>
 80010c6:	2d00      	cmp	r5, #0
 80010c8:	d10c      	bne.n	80010e4 <__lesf2+0x50>
 80010ca:	2cff      	cmp	r4, #255	; 0xff
 80010cc:	d113      	bne.n	80010f6 <__lesf2+0x62>
 80010ce:	2e00      	cmp	r6, #0
 80010d0:	d108      	bne.n	80010e4 <__lesf2+0x50>
 80010d2:	2a00      	cmp	r2, #0
 80010d4:	d008      	beq.n	80010e8 <__lesf2+0x54>
 80010d6:	4283      	cmp	r3, r0
 80010d8:	d012      	beq.n	8001100 <__lesf2+0x6c>
 80010da:	2102      	movs	r1, #2
 80010dc:	1e58      	subs	r0, r3, #1
 80010de:	4008      	ands	r0, r1
 80010e0:	3801      	subs	r0, #1
 80010e2:	e000      	b.n	80010e6 <__lesf2+0x52>
 80010e4:	2002      	movs	r0, #2
 80010e6:	bd70      	pop	{r4, r5, r6, pc}
 80010e8:	2d00      	cmp	r5, #0
 80010ea:	d1f4      	bne.n	80010d6 <__lesf2+0x42>
 80010ec:	2800      	cmp	r0, #0
 80010ee:	d1fa      	bne.n	80010e6 <__lesf2+0x52>
 80010f0:	2001      	movs	r0, #1
 80010f2:	4240      	negs	r0, r0
 80010f4:	e7f7      	b.n	80010e6 <__lesf2+0x52>
 80010f6:	2c00      	cmp	r4, #0
 80010f8:	d1ed      	bne.n	80010d6 <__lesf2+0x42>
 80010fa:	2e00      	cmp	r6, #0
 80010fc:	d1eb      	bne.n	80010d6 <__lesf2+0x42>
 80010fe:	e7ec      	b.n	80010da <__lesf2+0x46>
 8001100:	42a2      	cmp	r2, r4
 8001102:	dc05      	bgt.n	8001110 <__lesf2+0x7c>
 8001104:	dbf2      	blt.n	80010ec <__lesf2+0x58>
 8001106:	42b5      	cmp	r5, r6
 8001108:	d802      	bhi.n	8001110 <__lesf2+0x7c>
 800110a:	d3ef      	bcc.n	80010ec <__lesf2+0x58>
 800110c:	2000      	movs	r0, #0
 800110e:	e7ea      	b.n	80010e6 <__lesf2+0x52>
 8001110:	4243      	negs	r3, r0
 8001112:	4158      	adcs	r0, r3
 8001114:	0040      	lsls	r0, r0, #1
 8001116:	3801      	subs	r0, #1
 8001118:	e7e5      	b.n	80010e6 <__lesf2+0x52>
 800111a:	46c0      	nop			; (mov r8, r8)

0800111c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001122:	f001 fdc9 	bl	8002cb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001126:	f000 f8ef 	bl	8001308 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800112a:	f000 f9a1 	bl	8001470 <MX_GPIO_Init>
  MX_ADC1_Init();
 800112e:	f000 f933 	bl	8001398 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 8001132:	4b70      	ldr	r3, [pc, #448]	; (80012f4 <main+0x1d8>)
 8001134:	0018      	movs	r0, r3
 8001136:	f002 f953 	bl	80033e0 <HAL_ADC_Start_IT>
  /* USER CODE END 2 */
  HAL_Delay(3000);
 800113a:	4b6f      	ldr	r3, [pc, #444]	; (80012f8 <main+0x1dc>)
 800113c:	0018      	movs	r0, r3
 800113e:	f001 fe41 	bl	8002dc4 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  Barrido1(2,60,2500);
 8001142:	4b6e      	ldr	r3, [pc, #440]	; (80012fc <main+0x1e0>)
 8001144:	001a      	movs	r2, r3
 8001146:	213c      	movs	r1, #60	; 0x3c
 8001148:	2002      	movs	r0, #2
 800114a:	f000 fba1 	bl	8001890 <Barrido1>
	  Blink(3,1500);
 800114e:	4b6c      	ldr	r3, [pc, #432]	; (8001300 <main+0x1e4>)
 8001150:	0019      	movs	r1, r3
 8001152:	2003      	movs	r0, #3
 8001154:	f001 fc52 	bl	80029fc <Blink>

	  for(uint8_t i=1;i<=cantLeds;i++){ControlLeds2(i+10,1);}//encender todo 2
 8001158:	1dfb      	adds	r3, r7, #7
 800115a:	2201      	movs	r2, #1
 800115c:	701a      	strb	r2, [r3, #0]
 800115e:	e00c      	b.n	800117a <main+0x5e>
 8001160:	1dfb      	adds	r3, r7, #7
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	330a      	adds	r3, #10
 8001166:	b2db      	uxtb	r3, r3
 8001168:	2101      	movs	r1, #1
 800116a:	0018      	movs	r0, r3
 800116c:	f000 faec 	bl	8001748 <ControlLeds2>
 8001170:	1dfb      	adds	r3, r7, #7
 8001172:	781a      	ldrb	r2, [r3, #0]
 8001174:	1dfb      	adds	r3, r7, #7
 8001176:	3201      	adds	r2, #1
 8001178:	701a      	strb	r2, [r3, #0]
 800117a:	4b62      	ldr	r3, [pc, #392]	; (8001304 <main+0x1e8>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	1dfa      	adds	r2, r7, #7
 8001180:	7812      	ldrb	r2, [r2, #0]
 8001182:	429a      	cmp	r2, r3
 8001184:	d9ec      	bls.n	8001160 <main+0x44>
	  ArmarIzquierda(1,30,2000);
 8001186:	23fa      	movs	r3, #250	; 0xfa
 8001188:	00db      	lsls	r3, r3, #3
 800118a:	001a      	movs	r2, r3
 800118c:	211e      	movs	r1, #30
 800118e:	2001      	movs	r0, #1
 8001190:	f001 fa68 	bl	8002664 <ArmarIzquierda>
	  for(uint8_t i=1;i<=cantLeds;i++){ControlLeds(i,1);}//encender todo 1
 8001194:	1dbb      	adds	r3, r7, #6
 8001196:	2201      	movs	r2, #1
 8001198:	701a      	strb	r2, [r3, #0]
 800119a:	e00a      	b.n	80011b2 <main+0x96>
 800119c:	1dbb      	adds	r3, r7, #6
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2101      	movs	r1, #1
 80011a2:	0018      	movs	r0, r3
 80011a4:	f000 fa58 	bl	8001658 <ControlLeds>
 80011a8:	1dbb      	adds	r3, r7, #6
 80011aa:	781a      	ldrb	r2, [r3, #0]
 80011ac:	1dbb      	adds	r3, r7, #6
 80011ae:	3201      	adds	r2, #1
 80011b0:	701a      	strb	r2, [r3, #0]
 80011b2:	4b54      	ldr	r3, [pc, #336]	; (8001304 <main+0x1e8>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	1dba      	adds	r2, r7, #6
 80011b8:	7812      	ldrb	r2, [r2, #0]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d9ee      	bls.n	800119c <main+0x80>
	  ArmarIzquierda2(1,30,2000);
 80011be:	23fa      	movs	r3, #250	; 0xfa
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	001a      	movs	r2, r3
 80011c4:	211e      	movs	r1, #30
 80011c6:	2001      	movs	r0, #1
 80011c8:	f001 fb32 	bl	8002830 <ArmarIzquierda2>

	  Blink(2,1500);
 80011cc:	4b4c      	ldr	r3, [pc, #304]	; (8001300 <main+0x1e4>)
 80011ce:	0019      	movs	r1, r3
 80011d0:	2002      	movs	r0, #2
 80011d2:	f001 fc13 	bl	80029fc <Blink>
	  Girar(2,100);
 80011d6:	2164      	movs	r1, #100	; 0x64
 80011d8:	2002      	movs	r0, #2
 80011da:	f001 f863 	bl	80022a4 <Girar>
	  Blink(4,2000);
 80011de:	23fa      	movs	r3, #250	; 0xfa
 80011e0:	00db      	lsls	r3, r3, #3
 80011e2:	0019      	movs	r1, r3
 80011e4:	2004      	movs	r0, #4
 80011e6:	f001 fc09 	bl	80029fc <Blink>

	  for(uint8_t i=1;i<=cantLeds;i++){ControlLeds2(i+10,1);}//encender todo 2
 80011ea:	1d7b      	adds	r3, r7, #5
 80011ec:	2201      	movs	r2, #1
 80011ee:	701a      	strb	r2, [r3, #0]
 80011f0:	e00c      	b.n	800120c <main+0xf0>
 80011f2:	1d7b      	adds	r3, r7, #5
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	330a      	adds	r3, #10
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2101      	movs	r1, #1
 80011fc:	0018      	movs	r0, r3
 80011fe:	f000 faa3 	bl	8001748 <ControlLeds2>
 8001202:	1d7b      	adds	r3, r7, #5
 8001204:	781a      	ldrb	r2, [r3, #0]
 8001206:	1d7b      	adds	r3, r7, #5
 8001208:	3201      	adds	r2, #1
 800120a:	701a      	strb	r2, [r3, #0]
 800120c:	4b3d      	ldr	r3, [pc, #244]	; (8001304 <main+0x1e8>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	1d7a      	adds	r2, r7, #5
 8001212:	7812      	ldrb	r2, [r2, #0]
 8001214:	429a      	cmp	r2, r3
 8001216:	d9ec      	bls.n	80011f2 <main+0xd6>
	  VolumenAbrir(1,30,2500);
 8001218:	4b38      	ldr	r3, [pc, #224]	; (80012fc <main+0x1e0>)
 800121a:	001a      	movs	r2, r3
 800121c:	211e      	movs	r1, #30
 800121e:	2001      	movs	r0, #1
 8001220:	f001 f890 	bl	8002344 <VolumenAbrir>
	  for(uint8_t i=1;i<=cantLeds;i++){ControlLeds(i,1);}//encender todo 1
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	2201      	movs	r2, #1
 8001228:	701a      	strb	r2, [r3, #0]
 800122a:	e00a      	b.n	8001242 <main+0x126>
 800122c:	1d3b      	adds	r3, r7, #4
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2101      	movs	r1, #1
 8001232:	0018      	movs	r0, r3
 8001234:	f000 fa10 	bl	8001658 <ControlLeds>
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	781a      	ldrb	r2, [r3, #0]
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	3201      	adds	r2, #1
 8001240:	701a      	strb	r2, [r3, #0]
 8001242:	4b30      	ldr	r3, [pc, #192]	; (8001304 <main+0x1e8>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	1d3a      	adds	r2, r7, #4
 8001248:	7812      	ldrb	r2, [r2, #0]
 800124a:	429a      	cmp	r2, r3
 800124c:	d9ee      	bls.n	800122c <main+0x110>
	  VolumenAbrir2(1,30,2500);
 800124e:	4b2b      	ldr	r3, [pc, #172]	; (80012fc <main+0x1e0>)
 8001250:	001a      	movs	r2, r3
 8001252:	211e      	movs	r1, #30
 8001254:	2001      	movs	r0, #1
 8001256:	f001 f93d 	bl	80024d4 <VolumenAbrir2>

	  CerrarApagar(3,150,2000);
 800125a:	23fa      	movs	r3, #250	; 0xfa
 800125c:	00db      	lsls	r3, r3, #3
 800125e:	001a      	movs	r2, r3
 8001260:	2196      	movs	r1, #150	; 0x96
 8001262:	2003      	movs	r0, #3
 8001264:	f000 fe62 	bl	8001f2c <CerrarApagar>
	  Blink(3,1500);
 8001268:	4b25      	ldr	r3, [pc, #148]	; (8001300 <main+0x1e4>)
 800126a:	0019      	movs	r1, r3
 800126c:	2003      	movs	r0, #3
 800126e:	f001 fbc5 	bl	80029fc <Blink>

	  for(uint8_t i=1;i<=cantLeds;i++){ControlLeds2(i+10,1);}//encender todo 2
 8001272:	1cfb      	adds	r3, r7, #3
 8001274:	2201      	movs	r2, #1
 8001276:	701a      	strb	r2, [r3, #0]
 8001278:	e00c      	b.n	8001294 <main+0x178>
 800127a:	1cfb      	adds	r3, r7, #3
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	330a      	adds	r3, #10
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2101      	movs	r1, #1
 8001284:	0018      	movs	r0, r3
 8001286:	f000 fa5f 	bl	8001748 <ControlLeds2>
 800128a:	1cfb      	adds	r3, r7, #3
 800128c:	781a      	ldrb	r2, [r3, #0]
 800128e:	1cfb      	adds	r3, r7, #3
 8001290:	3201      	adds	r2, #1
 8001292:	701a      	strb	r2, [r3, #0]
 8001294:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <main+0x1e8>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	1cfa      	adds	r2, r7, #3
 800129a:	7812      	ldrb	r2, [r2, #0]
 800129c:	429a      	cmp	r2, r3
 800129e:	d9ec      	bls.n	800127a <main+0x15e>
	  ArmarIzquierda(1,30,2000);
 80012a0:	23fa      	movs	r3, #250	; 0xfa
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	001a      	movs	r2, r3
 80012a6:	211e      	movs	r1, #30
 80012a8:	2001      	movs	r0, #1
 80012aa:	f001 f9db 	bl	8002664 <ArmarIzquierda>
	  for(uint8_t i=1;i<=cantLeds;i++){ControlLeds(i,1);}//encender todo 1
 80012ae:	1cbb      	adds	r3, r7, #2
 80012b0:	2201      	movs	r2, #1
 80012b2:	701a      	strb	r2, [r3, #0]
 80012b4:	e00a      	b.n	80012cc <main+0x1b0>
 80012b6:	1cbb      	adds	r3, r7, #2
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2101      	movs	r1, #1
 80012bc:	0018      	movs	r0, r3
 80012be:	f000 f9cb 	bl	8001658 <ControlLeds>
 80012c2:	1cbb      	adds	r3, r7, #2
 80012c4:	781a      	ldrb	r2, [r3, #0]
 80012c6:	1cbb      	adds	r3, r7, #2
 80012c8:	3201      	adds	r2, #1
 80012ca:	701a      	strb	r2, [r3, #0]
 80012cc:	4b0d      	ldr	r3, [pc, #52]	; (8001304 <main+0x1e8>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	1cba      	adds	r2, r7, #2
 80012d2:	7812      	ldrb	r2, [r2, #0]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d9ee      	bls.n	80012b6 <main+0x19a>
	  ArmarIzquierda2(1,30,2000);
 80012d8:	23fa      	movs	r3, #250	; 0xfa
 80012da:	00db      	lsls	r3, r3, #3
 80012dc:	001a      	movs	r2, r3
 80012de:	211e      	movs	r1, #30
 80012e0:	2001      	movs	r0, #1
 80012e2:	f001 faa5 	bl	8002830 <ArmarIzquierda2>

	  Blink(2,1500);
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <main+0x1e4>)
 80012e8:	0019      	movs	r1, r3
 80012ea:	2002      	movs	r0, #2
 80012ec:	f001 fb86 	bl	80029fc <Blink>
	  Barrido1(2,60,2500);
 80012f0:	e727      	b.n	8001142 <main+0x26>
 80012f2:	46c0      	nop			; (mov r8, r8)
 80012f4:	2000002c 	.word	0x2000002c
 80012f8:	00000bb8 	.word	0x00000bb8
 80012fc:	000009c4 	.word	0x000009c4
 8001300:	000005dc 	.word	0x000005dc
 8001304:	20000000 	.word	0x20000000

08001308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b093      	sub	sp, #76	; 0x4c
 800130c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800130e:	2414      	movs	r4, #20
 8001310:	193b      	adds	r3, r7, r4
 8001312:	0018      	movs	r0, r3
 8001314:	2334      	movs	r3, #52	; 0x34
 8001316:	001a      	movs	r2, r3
 8001318:	2100      	movs	r1, #0
 800131a:	f003 fbc5 	bl	8004aa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	0018      	movs	r0, r3
 8001322:	2310      	movs	r3, #16
 8001324:	001a      	movs	r2, r3
 8001326:	2100      	movs	r1, #0
 8001328:	f003 fbbe 	bl	8004aa8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800132c:	2380      	movs	r3, #128	; 0x80
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	0018      	movs	r0, r3
 8001332:	f002 fedf 	bl	80040f4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001336:	193b      	adds	r3, r7, r4
 8001338:	2202      	movs	r2, #2
 800133a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800133c:	193b      	adds	r3, r7, r4
 800133e:	2280      	movs	r2, #128	; 0x80
 8001340:	0052      	lsls	r2, r2, #1
 8001342:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001344:	193b      	adds	r3, r7, r4
 8001346:	2200      	movs	r2, #0
 8001348:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800134a:	193b      	adds	r3, r7, r4
 800134c:	2240      	movs	r2, #64	; 0x40
 800134e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001350:	193b      	adds	r3, r7, r4
 8001352:	2200      	movs	r2, #0
 8001354:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001356:	193b      	adds	r3, r7, r4
 8001358:	0018      	movs	r0, r3
 800135a:	f002 ff0b 	bl	8004174 <HAL_RCC_OscConfig>
 800135e:	1e03      	subs	r3, r0, #0
 8001360:	d001      	beq.n	8001366 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001362:	f001 fbdf 	bl	8002b24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001366:	1d3b      	adds	r3, r7, #4
 8001368:	2207      	movs	r2, #7
 800136a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	2200      	movs	r2, #0
 8001370:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001372:	1d3b      	adds	r3, r7, #4
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001378:	1d3b      	adds	r3, r7, #4
 800137a:	2200      	movs	r2, #0
 800137c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	2100      	movs	r1, #0
 8001382:	0018      	movs	r0, r3
 8001384:	f003 fa06 	bl	8004794 <HAL_RCC_ClockConfig>
 8001388:	1e03      	subs	r3, r0, #0
 800138a:	d001      	beq.n	8001390 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800138c:	f001 fbca 	bl	8002b24 <Error_Handler>
  }
}
 8001390:	46c0      	nop			; (mov r8, r8)
 8001392:	46bd      	mov	sp, r7
 8001394:	b013      	add	sp, #76	; 0x4c
 8001396:	bd90      	pop	{r4, r7, pc}

08001398 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800139e:	1d3b      	adds	r3, r7, #4
 80013a0:	0018      	movs	r0, r3
 80013a2:	230c      	movs	r3, #12
 80013a4:	001a      	movs	r2, r3
 80013a6:	2100      	movs	r1, #0
 80013a8:	f003 fb7e 	bl	8004aa8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013ac:	4b2d      	ldr	r3, [pc, #180]	; (8001464 <MX_ADC1_Init+0xcc>)
 80013ae:	4a2e      	ldr	r2, [pc, #184]	; (8001468 <MX_ADC1_Init+0xd0>)
 80013b0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80013b2:	4b2c      	ldr	r3, [pc, #176]	; (8001464 <MX_ADC1_Init+0xcc>)
 80013b4:	2280      	movs	r2, #128	; 0x80
 80013b6:	05d2      	lsls	r2, r2, #23
 80013b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013ba:	4b2a      	ldr	r3, [pc, #168]	; (8001464 <MX_ADC1_Init+0xcc>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013c0:	4b28      	ldr	r3, [pc, #160]	; (8001464 <MX_ADC1_Init+0xcc>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013c6:	4b27      	ldr	r3, [pc, #156]	; (8001464 <MX_ADC1_Init+0xcc>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013cc:	4b25      	ldr	r3, [pc, #148]	; (8001464 <MX_ADC1_Init+0xcc>)
 80013ce:	2204      	movs	r2, #4
 80013d0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80013d2:	4b24      	ldr	r3, [pc, #144]	; (8001464 <MX_ADC1_Init+0xcc>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80013d8:	4b22      	ldr	r3, [pc, #136]	; (8001464 <MX_ADC1_Init+0xcc>)
 80013da:	2200      	movs	r2, #0
 80013dc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013de:	4b21      	ldr	r3, [pc, #132]	; (8001464 <MX_ADC1_Init+0xcc>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80013e4:	4b1f      	ldr	r3, [pc, #124]	; (8001464 <MX_ADC1_Init+0xcc>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013ea:	4b1e      	ldr	r3, [pc, #120]	; (8001464 <MX_ADC1_Init+0xcc>)
 80013ec:	2220      	movs	r2, #32
 80013ee:	2100      	movs	r1, #0
 80013f0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013f2:	4b1c      	ldr	r3, [pc, #112]	; (8001464 <MX_ADC1_Init+0xcc>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013f8:	4b1a      	ldr	r3, [pc, #104]	; (8001464 <MX_ADC1_Init+0xcc>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013fe:	4b19      	ldr	r3, [pc, #100]	; (8001464 <MX_ADC1_Init+0xcc>)
 8001400:	222c      	movs	r2, #44	; 0x2c
 8001402:	2100      	movs	r1, #0
 8001404:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001406:	4b17      	ldr	r3, [pc, #92]	; (8001464 <MX_ADC1_Init+0xcc>)
 8001408:	2200      	movs	r2, #0
 800140a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 800140c:	4b15      	ldr	r3, [pc, #84]	; (8001464 <MX_ADC1_Init+0xcc>)
 800140e:	2207      	movs	r2, #7
 8001410:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001412:	4b14      	ldr	r3, [pc, #80]	; (8001464 <MX_ADC1_Init+0xcc>)
 8001414:	2207      	movs	r2, #7
 8001416:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <MX_ADC1_Init+0xcc>)
 800141a:	223c      	movs	r2, #60	; 0x3c
 800141c:	2100      	movs	r1, #0
 800141e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001420:	4b10      	ldr	r3, [pc, #64]	; (8001464 <MX_ADC1_Init+0xcc>)
 8001422:	2200      	movs	r2, #0
 8001424:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001426:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <MX_ADC1_Init+0xcc>)
 8001428:	0018      	movs	r0, r3
 800142a:	f001 fe31 	bl	8003090 <HAL_ADC_Init>
 800142e:	1e03      	subs	r3, r0, #0
 8001430:	d001      	beq.n	8001436 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8001432:	f001 fb77 	bl	8002b24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001436:	1d3b      	adds	r3, r7, #4
 8001438:	4a0c      	ldr	r2, [pc, #48]	; (800146c <MX_ADC1_Init+0xd4>)
 800143a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	2200      	movs	r2, #0
 8001440:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001448:	1d3a      	adds	r2, r7, #4
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <MX_ADC1_Init+0xcc>)
 800144c:	0011      	movs	r1, r2
 800144e:	0018      	movs	r0, r3
 8001450:	f002 f972 	bl	8003738 <HAL_ADC_ConfigChannel>
 8001454:	1e03      	subs	r3, r0, #0
 8001456:	d001      	beq.n	800145c <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8001458:	f001 fb64 	bl	8002b24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800145c:	46c0      	nop			; (mov r8, r8)
 800145e:	46bd      	mov	sp, r7
 8001460:	b004      	add	sp, #16
 8001462:	bd80      	pop	{r7, pc}
 8001464:	2000002c 	.word	0x2000002c
 8001468:	40012400 	.word	0x40012400
 800146c:	2c000800 	.word	0x2c000800

08001470 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001470:	b590      	push	{r4, r7, lr}
 8001472:	b089      	sub	sp, #36	; 0x24
 8001474:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001476:	240c      	movs	r4, #12
 8001478:	193b      	adds	r3, r7, r4
 800147a:	0018      	movs	r0, r3
 800147c:	2314      	movs	r3, #20
 800147e:	001a      	movs	r2, r3
 8001480:	2100      	movs	r1, #0
 8001482:	f003 fb11 	bl	8004aa8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001486:	4b43      	ldr	r3, [pc, #268]	; (8001594 <MX_GPIO_Init+0x124>)
 8001488:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800148a:	4b42      	ldr	r3, [pc, #264]	; (8001594 <MX_GPIO_Init+0x124>)
 800148c:	2102      	movs	r1, #2
 800148e:	430a      	orrs	r2, r1
 8001490:	635a      	str	r2, [r3, #52]	; 0x34
 8001492:	4b40      	ldr	r3, [pc, #256]	; (8001594 <MX_GPIO_Init+0x124>)
 8001494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001496:	2202      	movs	r2, #2
 8001498:	4013      	ands	r3, r2
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800149e:	4b3d      	ldr	r3, [pc, #244]	; (8001594 <MX_GPIO_Init+0x124>)
 80014a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014a2:	4b3c      	ldr	r3, [pc, #240]	; (8001594 <MX_GPIO_Init+0x124>)
 80014a4:	2104      	movs	r1, #4
 80014a6:	430a      	orrs	r2, r1
 80014a8:	635a      	str	r2, [r3, #52]	; 0x34
 80014aa:	4b3a      	ldr	r3, [pc, #232]	; (8001594 <MX_GPIO_Init+0x124>)
 80014ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ae:	2204      	movs	r2, #4
 80014b0:	4013      	ands	r3, r2
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b6:	4b37      	ldr	r3, [pc, #220]	; (8001594 <MX_GPIO_Init+0x124>)
 80014b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014ba:	4b36      	ldr	r3, [pc, #216]	; (8001594 <MX_GPIO_Init+0x124>)
 80014bc:	2101      	movs	r1, #1
 80014be:	430a      	orrs	r2, r1
 80014c0:	635a      	str	r2, [r3, #52]	; 0x34
 80014c2:	4b34      	ldr	r3, [pc, #208]	; (8001594 <MX_GPIO_Init+0x124>)
 80014c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014c6:	2201      	movs	r2, #1
 80014c8:	4013      	ands	r3, r2
 80014ca:	603b      	str	r3, [r7, #0]
 80014cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED12_Pin|LED13_Pin|LED14_Pin
 80014ce:	4932      	ldr	r1, [pc, #200]	; (8001598 <MX_GPIO_Init+0x128>)
 80014d0:	4b32      	ldr	r3, [pc, #200]	; (800159c <MX_GPIO_Init+0x12c>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	0018      	movs	r0, r3
 80014d6:	f002 fdef 	bl	80040b8 <HAL_GPIO_WritePin>
                          |LED22_Pin|LED23_Pin|LED24_Pin|LED25_Pin
                          |ledBoard_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_Pin|LED3_Pin|LED17_Pin, GPIO_PIN_RESET);
 80014da:	4931      	ldr	r1, [pc, #196]	; (80015a0 <MX_GPIO_Init+0x130>)
 80014dc:	4b31      	ldr	r3, [pc, #196]	; (80015a4 <MX_GPIO_Init+0x134>)
 80014de:	2200      	movs	r2, #0
 80014e0:	0018      	movs	r0, r3
 80014e2:	f002 fde9 	bl	80040b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin
 80014e6:	4930      	ldr	r1, [pc, #192]	; (80015a8 <MX_GPIO_Init+0x138>)
 80014e8:	23a0      	movs	r3, #160	; 0xa0
 80014ea:	05db      	lsls	r3, r3, #23
 80014ec:	2200      	movs	r2, #0
 80014ee:	0018      	movs	r0, r3
 80014f0:	f002 fde2 	bl	80040b8 <HAL_GPIO_WritePin>
                          |LED15_Pin|LED16_Pin|LED18_Pin|LED19_Pin
                          |LED20_Pin|LED21_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED1_Pin LED12_Pin LED13_Pin LED14_Pin
                           LED22_Pin LED23_Pin LED24_Pin LED25_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED12_Pin|LED13_Pin|LED14_Pin
 80014f4:	193b      	adds	r3, r7, r4
 80014f6:	4a2d      	ldr	r2, [pc, #180]	; (80015ac <MX_GPIO_Init+0x13c>)
 80014f8:	601a      	str	r2, [r3, #0]
                          |LED22_Pin|LED23_Pin|LED24_Pin|LED25_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80014fa:	193b      	adds	r3, r7, r4
 80014fc:	2211      	movs	r2, #17
 80014fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	193b      	adds	r3, r7, r4
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001506:	193b      	adds	r3, r7, r4
 8001508:	2200      	movs	r2, #0
 800150a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150c:	193b      	adds	r3, r7, r4
 800150e:	4a23      	ldr	r2, [pc, #140]	; (800159c <MX_GPIO_Init+0x12c>)
 8001510:	0019      	movs	r1, r3
 8001512:	0010      	movs	r0, r2
 8001514:	f002 fc6c 	bl	8003df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED3_Pin LED17_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin|LED17_Pin;
 8001518:	193b      	adds	r3, r7, r4
 800151a:	4a21      	ldr	r2, [pc, #132]	; (80015a0 <MX_GPIO_Init+0x130>)
 800151c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800151e:	193b      	adds	r3, r7, r4
 8001520:	2211      	movs	r2, #17
 8001522:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	193b      	adds	r3, r7, r4
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152a:	193b      	adds	r3, r7, r4
 800152c:	2200      	movs	r2, #0
 800152e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001530:	193b      	adds	r3, r7, r4
 8001532:	4a1c      	ldr	r2, [pc, #112]	; (80015a4 <MX_GPIO_Init+0x134>)
 8001534:	0019      	movs	r1, r3
 8001536:	0010      	movs	r0, r2
 8001538:	f002 fc5a 	bl	8003df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED5_Pin LED6_Pin LED7_Pin
                           LED8_Pin LED9_Pin LED10_Pin LED11_Pin
                           LED15_Pin LED16_Pin LED18_Pin LED19_Pin
                           LED20_Pin LED21_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin
 800153c:	193b      	adds	r3, r7, r4
 800153e:	4a1a      	ldr	r2, [pc, #104]	; (80015a8 <MX_GPIO_Init+0x138>)
 8001540:	601a      	str	r2, [r3, #0]
                          |LED8_Pin|LED9_Pin|LED10_Pin|LED11_Pin
                          |LED15_Pin|LED16_Pin|LED18_Pin|LED19_Pin
                          |LED20_Pin|LED21_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001542:	193b      	adds	r3, r7, r4
 8001544:	2211      	movs	r2, #17
 8001546:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	193b      	adds	r3, r7, r4
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154e:	193b      	adds	r3, r7, r4
 8001550:	2200      	movs	r2, #0
 8001552:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001554:	193a      	adds	r2, r7, r4
 8001556:	23a0      	movs	r3, #160	; 0xa0
 8001558:	05db      	lsls	r3, r3, #23
 800155a:	0011      	movs	r1, r2
 800155c:	0018      	movs	r0, r3
 800155e:	f002 fc47 	bl	8003df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ledBoard_Pin */
  GPIO_InitStruct.Pin = ledBoard_Pin;
 8001562:	0021      	movs	r1, r4
 8001564:	187b      	adds	r3, r7, r1
 8001566:	2280      	movs	r2, #128	; 0x80
 8001568:	0052      	lsls	r2, r2, #1
 800156a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156c:	187b      	adds	r3, r7, r1
 800156e:	2201      	movs	r2, #1
 8001570:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	187b      	adds	r3, r7, r1
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001578:	187b      	adds	r3, r7, r1
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ledBoard_GPIO_Port, &GPIO_InitStruct);
 800157e:	187b      	adds	r3, r7, r1
 8001580:	4a06      	ldr	r2, [pc, #24]	; (800159c <MX_GPIO_Init+0x12c>)
 8001582:	0019      	movs	r1, r3
 8001584:	0010      	movs	r0, r2
 8001586:	f002 fc33 	bl	8003df0 <HAL_GPIO_Init>

}
 800158a:	46c0      	nop			; (mov r8, r8)
 800158c:	46bd      	mov	sp, r7
 800158e:	b009      	add	sp, #36	; 0x24
 8001590:	bd90      	pop	{r4, r7, pc}
 8001592:	46c0      	nop			; (mov r8, r8)
 8001594:	40021000 	.word	0x40021000
 8001598:	0000037f 	.word	0x0000037f
 800159c:	50000400 	.word	0x50000400
 80015a0:	0000c040 	.word	0x0000c040
 80015a4:	50000800 	.word	0x50000800
 80015a8:	00009fff 	.word	0x00009fff
 80015ac:	0000027f 	.word	0x0000027f

080015b0 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
	adc = HAL_ADC_GetValue(&hadc1);
 80015b8:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <HAL_ADC_ConvCpltCallback+0x44>)
 80015ba:	0018      	movs	r0, r3
 80015bc:	f001 ff88 	bl	80034d0 <HAL_ADC_GetValue>
 80015c0:	0003      	movs	r3, r0
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <HAL_ADC_ConvCpltCallback+0x48>)
 80015c6:	801a      	strh	r2, [r3, #0]
	vel = (float)adc/1023;
 80015c8:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <HAL_ADC_ConvCpltCallback+0x48>)
 80015ca:	881b      	ldrh	r3, [r3, #0]
 80015cc:	0018      	movs	r0, r3
 80015ce:	f7ff fc55 	bl	8000e7c <__aeabi_ui2f>
 80015d2:	1c03      	adds	r3, r0, #0
 80015d4:	4909      	ldr	r1, [pc, #36]	; (80015fc <HAL_ADC_ConvCpltCallback+0x4c>)
 80015d6:	1c18      	adds	r0, r3, #0
 80015d8:	f7fe ffd6 	bl	8000588 <__aeabi_fdiv>
 80015dc:	1c03      	adds	r3, r0, #0
 80015de:	1c1a      	adds	r2, r3, #0
 80015e0:	4b07      	ldr	r3, [pc, #28]	; (8001600 <HAL_ADC_ConvCpltCallback+0x50>)
 80015e2:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_IT(&hadc1);
 80015e4:	4b03      	ldr	r3, [pc, #12]	; (80015f4 <HAL_ADC_ConvCpltCallback+0x44>)
 80015e6:	0018      	movs	r0, r3
 80015e8:	f001 fefa 	bl	80033e0 <HAL_ADC_Start_IT>
}
 80015ec:	46c0      	nop			; (mov r8, r8)
 80015ee:	46bd      	mov	sp, r7
 80015f0:	b002      	add	sp, #8
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	2000002c 	.word	0x2000002c
 80015f8:	20000090 	.word	0x20000090
 80015fc:	447fc000 	.word	0x447fc000
 8001600:	20000094 	.word	0x20000094

08001604 <Refresh_ADC_Value>:

float Refresh_ADC_Value(void){
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
	adc = HAL_ADC_GetValue(&hadc1);
 8001608:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <Refresh_ADC_Value+0x44>)
 800160a:	0018      	movs	r0, r3
 800160c:	f001 ff60 	bl	80034d0 <HAL_ADC_GetValue>
 8001610:	0003      	movs	r3, r0
 8001612:	b29a      	uxth	r2, r3
 8001614:	4b0d      	ldr	r3, [pc, #52]	; (800164c <Refresh_ADC_Value+0x48>)
 8001616:	801a      	strh	r2, [r3, #0]
	vel = (float)adc/1023;
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <Refresh_ADC_Value+0x48>)
 800161a:	881b      	ldrh	r3, [r3, #0]
 800161c:	0018      	movs	r0, r3
 800161e:	f7ff fc2d 	bl	8000e7c <__aeabi_ui2f>
 8001622:	1c03      	adds	r3, r0, #0
 8001624:	490a      	ldr	r1, [pc, #40]	; (8001650 <Refresh_ADC_Value+0x4c>)
 8001626:	1c18      	adds	r0, r3, #0
 8001628:	f7fe ffae 	bl	8000588 <__aeabi_fdiv>
 800162c:	1c03      	adds	r3, r0, #0
 800162e:	1c1a      	adds	r2, r3, #0
 8001630:	4b08      	ldr	r3, [pc, #32]	; (8001654 <Refresh_ADC_Value+0x50>)
 8001632:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_IT(&hadc1);
 8001634:	4b04      	ldr	r3, [pc, #16]	; (8001648 <Refresh_ADC_Value+0x44>)
 8001636:	0018      	movs	r0, r3
 8001638:	f001 fed2 	bl	80033e0 <HAL_ADC_Start_IT>
	return vel;
 800163c:	4b05      	ldr	r3, [pc, #20]	; (8001654 <Refresh_ADC_Value+0x50>)
 800163e:	681b      	ldr	r3, [r3, #0]
}
 8001640:	1c18      	adds	r0, r3, #0
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	46c0      	nop			; (mov r8, r8)
 8001648:	2000002c 	.word	0x2000002c
 800164c:	20000090 	.word	0x20000090
 8001650:	447fc000 	.word	0x447fc000
 8001654:	20000094 	.word	0x20000094

08001658 <ControlLeds>:

void ControlLeds(uint8_t led, uint8_t state){
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	0002      	movs	r2, r0
 8001660:	1dfb      	adds	r3, r7, #7
 8001662:	701a      	strb	r2, [r3, #0]
 8001664:	1dbb      	adds	r3, r7, #6
 8001666:	1c0a      	adds	r2, r1, #0
 8001668:	701a      	strb	r2, [r3, #0]
	switch(led){
 800166a:	1dfb      	adds	r3, r7, #7
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b0a      	cmp	r3, #10
 8001670:	d85e      	bhi.n	8001730 <ControlLeds+0xd8>
 8001672:	009a      	lsls	r2, r3, #2
 8001674:	4b31      	ldr	r3, [pc, #196]	; (800173c <ControlLeds+0xe4>)
 8001676:	18d3      	adds	r3, r2, r3
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	469f      	mov	pc, r3
		case 1:  L1(state); break;
 800167c:	1dbb      	adds	r3, r7, #6
 800167e:	781a      	ldrb	r2, [r3, #0]
 8001680:	2380      	movs	r3, #128	; 0x80
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	482e      	ldr	r0, [pc, #184]	; (8001740 <ControlLeds+0xe8>)
 8001686:	0019      	movs	r1, r3
 8001688:	f002 fd16 	bl	80040b8 <HAL_GPIO_WritePin>
 800168c:	e051      	b.n	8001732 <ControlLeds+0xda>
		case 2:  L2(state); break;
 800168e:	1dbb      	adds	r3, r7, #6
 8001690:	781a      	ldrb	r2, [r3, #0]
 8001692:	2380      	movs	r3, #128	; 0x80
 8001694:	01db      	lsls	r3, r3, #7
 8001696:	482b      	ldr	r0, [pc, #172]	; (8001744 <ControlLeds+0xec>)
 8001698:	0019      	movs	r1, r3
 800169a:	f002 fd0d 	bl	80040b8 <HAL_GPIO_WritePin>
 800169e:	e048      	b.n	8001732 <ControlLeds+0xda>
		case 3:  L3(state); break;
 80016a0:	1dbb      	adds	r3, r7, #6
 80016a2:	781a      	ldrb	r2, [r3, #0]
 80016a4:	2380      	movs	r3, #128	; 0x80
 80016a6:	021b      	lsls	r3, r3, #8
 80016a8:	4826      	ldr	r0, [pc, #152]	; (8001744 <ControlLeds+0xec>)
 80016aa:	0019      	movs	r1, r3
 80016ac:	f002 fd04 	bl	80040b8 <HAL_GPIO_WritePin>
 80016b0:	e03f      	b.n	8001732 <ControlLeds+0xda>
		case 4:  L4(state); break;
 80016b2:	1dbb      	adds	r3, r7, #6
 80016b4:	781a      	ldrb	r2, [r3, #0]
 80016b6:	23a0      	movs	r3, #160	; 0xa0
 80016b8:	05db      	lsls	r3, r3, #23
 80016ba:	2101      	movs	r1, #1
 80016bc:	0018      	movs	r0, r3
 80016be:	f002 fcfb 	bl	80040b8 <HAL_GPIO_WritePin>
 80016c2:	e036      	b.n	8001732 <ControlLeds+0xda>
		case 5:  L5(state); break;
 80016c4:	1dbb      	adds	r3, r7, #6
 80016c6:	781a      	ldrb	r2, [r3, #0]
 80016c8:	23a0      	movs	r3, #160	; 0xa0
 80016ca:	05db      	lsls	r3, r3, #23
 80016cc:	2102      	movs	r1, #2
 80016ce:	0018      	movs	r0, r3
 80016d0:	f002 fcf2 	bl	80040b8 <HAL_GPIO_WritePin>
 80016d4:	e02d      	b.n	8001732 <ControlLeds+0xda>
		case 6:  L6(state); break;
 80016d6:	1dbb      	adds	r3, r7, #6
 80016d8:	781a      	ldrb	r2, [r3, #0]
 80016da:	23a0      	movs	r3, #160	; 0xa0
 80016dc:	05db      	lsls	r3, r3, #23
 80016de:	2104      	movs	r1, #4
 80016e0:	0018      	movs	r0, r3
 80016e2:	f002 fce9 	bl	80040b8 <HAL_GPIO_WritePin>
 80016e6:	e024      	b.n	8001732 <ControlLeds+0xda>
		case 7:  L7(state); break;
 80016e8:	1dbb      	adds	r3, r7, #6
 80016ea:	781a      	ldrb	r2, [r3, #0]
 80016ec:	23a0      	movs	r3, #160	; 0xa0
 80016ee:	05db      	lsls	r3, r3, #23
 80016f0:	2108      	movs	r1, #8
 80016f2:	0018      	movs	r0, r3
 80016f4:	f002 fce0 	bl	80040b8 <HAL_GPIO_WritePin>
 80016f8:	e01b      	b.n	8001732 <ControlLeds+0xda>
		case 8:  L8(state); break;
 80016fa:	1dbb      	adds	r3, r7, #6
 80016fc:	781a      	ldrb	r2, [r3, #0]
 80016fe:	23a0      	movs	r3, #160	; 0xa0
 8001700:	05db      	lsls	r3, r3, #23
 8001702:	2110      	movs	r1, #16
 8001704:	0018      	movs	r0, r3
 8001706:	f002 fcd7 	bl	80040b8 <HAL_GPIO_WritePin>
 800170a:	e012      	b.n	8001732 <ControlLeds+0xda>
		case 9:  L9(state); break;
 800170c:	1dbb      	adds	r3, r7, #6
 800170e:	781a      	ldrb	r2, [r3, #0]
 8001710:	23a0      	movs	r3, #160	; 0xa0
 8001712:	05db      	lsls	r3, r3, #23
 8001714:	2120      	movs	r1, #32
 8001716:	0018      	movs	r0, r3
 8001718:	f002 fcce 	bl	80040b8 <HAL_GPIO_WritePin>
 800171c:	e009      	b.n	8001732 <ControlLeds+0xda>
		case 10: L10(state);break;
 800171e:	1dbb      	adds	r3, r7, #6
 8001720:	781a      	ldrb	r2, [r3, #0]
 8001722:	23a0      	movs	r3, #160	; 0xa0
 8001724:	05db      	lsls	r3, r3, #23
 8001726:	2140      	movs	r1, #64	; 0x40
 8001728:	0018      	movs	r0, r3
 800172a:	f002 fcc5 	bl	80040b8 <HAL_GPIO_WritePin>
 800172e:	e000      	b.n	8001732 <ControlLeds+0xda>
		default:break;
 8001730:	46c0      	nop			; (mov r8, r8)
	}
}
 8001732:	46c0      	nop			; (mov r8, r8)
 8001734:	46bd      	mov	sp, r7
 8001736:	b002      	add	sp, #8
 8001738:	bd80      	pop	{r7, pc}
 800173a:	46c0      	nop			; (mov r8, r8)
 800173c:	08004b98 	.word	0x08004b98
 8001740:	50000400 	.word	0x50000400
 8001744:	50000800 	.word	0x50000800

08001748 <ControlLeds2>:

void ControlLeds2(uint8_t led, uint8_t state){
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	0002      	movs	r2, r0
 8001750:	1dfb      	adds	r3, r7, #7
 8001752:	701a      	strb	r2, [r3, #0]
 8001754:	1dbb      	adds	r3, r7, #6
 8001756:	1c0a      	adds	r2, r1, #0
 8001758:	701a      	strb	r2, [r3, #0]
	switch(led){
 800175a:	1dfb      	adds	r3, r7, #7
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	3b0b      	subs	r3, #11
 8001760:	2b0e      	cmp	r3, #14
 8001762:	d900      	bls.n	8001766 <ControlLeds2+0x1e>
 8001764:	e089      	b.n	800187a <ControlLeds2+0x132>
 8001766:	009a      	lsls	r2, r3, #2
 8001768:	4b46      	ldr	r3, [pc, #280]	; (8001884 <ControlLeds2+0x13c>)
 800176a:	18d3      	adds	r3, r2, r3
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	469f      	mov	pc, r3
		case 11: L11(state);break;
 8001770:	1dbb      	adds	r3, r7, #6
 8001772:	781a      	ldrb	r2, [r3, #0]
 8001774:	23a0      	movs	r3, #160	; 0xa0
 8001776:	05db      	lsls	r3, r3, #23
 8001778:	2180      	movs	r1, #128	; 0x80
 800177a:	0018      	movs	r0, r3
 800177c:	f002 fc9c 	bl	80040b8 <HAL_GPIO_WritePin>
 8001780:	e07b      	b.n	800187a <ControlLeds2+0x132>
		case 12: L12(state);break;
 8001782:	1dbb      	adds	r3, r7, #6
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	4840      	ldr	r0, [pc, #256]	; (8001888 <ControlLeds2+0x140>)
 8001788:	001a      	movs	r2, r3
 800178a:	2101      	movs	r1, #1
 800178c:	f002 fc94 	bl	80040b8 <HAL_GPIO_WritePin>
 8001790:	e073      	b.n	800187a <ControlLeds2+0x132>
		case 13: L13(state);break;
 8001792:	1dbb      	adds	r3, r7, #6
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	483c      	ldr	r0, [pc, #240]	; (8001888 <ControlLeds2+0x140>)
 8001798:	001a      	movs	r2, r3
 800179a:	2102      	movs	r1, #2
 800179c:	f002 fc8c 	bl	80040b8 <HAL_GPIO_WritePin>
 80017a0:	e06b      	b.n	800187a <ControlLeds2+0x132>
		case 14: L14(state);break;
 80017a2:	1dbb      	adds	r3, r7, #6
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	4838      	ldr	r0, [pc, #224]	; (8001888 <ControlLeds2+0x140>)
 80017a8:	001a      	movs	r2, r3
 80017aa:	2104      	movs	r1, #4
 80017ac:	f002 fc84 	bl	80040b8 <HAL_GPIO_WritePin>
 80017b0:	e063      	b.n	800187a <ControlLeds2+0x132>
		case 15: L15(state);break;
 80017b2:	1dbb      	adds	r3, r7, #6
 80017b4:	781a      	ldrb	r2, [r3, #0]
 80017b6:	2380      	movs	r3, #128	; 0x80
 80017b8:	0059      	lsls	r1, r3, #1
 80017ba:	23a0      	movs	r3, #160	; 0xa0
 80017bc:	05db      	lsls	r3, r3, #23
 80017be:	0018      	movs	r0, r3
 80017c0:	f002 fc7a 	bl	80040b8 <HAL_GPIO_WritePin>
 80017c4:	e059      	b.n	800187a <ControlLeds2+0x132>
		case 16: L16(state);break;
 80017c6:	1dbb      	adds	r3, r7, #6
 80017c8:	781a      	ldrb	r2, [r3, #0]
 80017ca:	2380      	movs	r3, #128	; 0x80
 80017cc:	0099      	lsls	r1, r3, #2
 80017ce:	23a0      	movs	r3, #160	; 0xa0
 80017d0:	05db      	lsls	r3, r3, #23
 80017d2:	0018      	movs	r0, r3
 80017d4:	f002 fc70 	bl	80040b8 <HAL_GPIO_WritePin>
 80017d8:	e04f      	b.n	800187a <ControlLeds2+0x132>
		case 17: L17(state);break;
 80017da:	1dbb      	adds	r3, r7, #6
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	482b      	ldr	r0, [pc, #172]	; (800188c <ControlLeds2+0x144>)
 80017e0:	001a      	movs	r2, r3
 80017e2:	2140      	movs	r1, #64	; 0x40
 80017e4:	f002 fc68 	bl	80040b8 <HAL_GPIO_WritePin>
 80017e8:	e047      	b.n	800187a <ControlLeds2+0x132>
		case 18: L18(state);break;
 80017ea:	1dbb      	adds	r3, r7, #6
 80017ec:	781a      	ldrb	r2, [r3, #0]
 80017ee:	2380      	movs	r3, #128	; 0x80
 80017f0:	00d9      	lsls	r1, r3, #3
 80017f2:	23a0      	movs	r3, #160	; 0xa0
 80017f4:	05db      	lsls	r3, r3, #23
 80017f6:	0018      	movs	r0, r3
 80017f8:	f002 fc5e 	bl	80040b8 <HAL_GPIO_WritePin>
 80017fc:	e03d      	b.n	800187a <ControlLeds2+0x132>
		case 19: L19(state);break;
 80017fe:	1dbb      	adds	r3, r7, #6
 8001800:	781a      	ldrb	r2, [r3, #0]
 8001802:	2380      	movs	r3, #128	; 0x80
 8001804:	0119      	lsls	r1, r3, #4
 8001806:	23a0      	movs	r3, #160	; 0xa0
 8001808:	05db      	lsls	r3, r3, #23
 800180a:	0018      	movs	r0, r3
 800180c:	f002 fc54 	bl	80040b8 <HAL_GPIO_WritePin>
 8001810:	e033      	b.n	800187a <ControlLeds2+0x132>
		case 20: L20(state);break;
 8001812:	1dbb      	adds	r3, r7, #6
 8001814:	781a      	ldrb	r2, [r3, #0]
 8001816:	2380      	movs	r3, #128	; 0x80
 8001818:	0159      	lsls	r1, r3, #5
 800181a:	23a0      	movs	r3, #160	; 0xa0
 800181c:	05db      	lsls	r3, r3, #23
 800181e:	0018      	movs	r0, r3
 8001820:	f002 fc4a 	bl	80040b8 <HAL_GPIO_WritePin>
 8001824:	e029      	b.n	800187a <ControlLeds2+0x132>
		case 21: L21(state);break;
 8001826:	1dbb      	adds	r3, r7, #6
 8001828:	781a      	ldrb	r2, [r3, #0]
 800182a:	2380      	movs	r3, #128	; 0x80
 800182c:	0219      	lsls	r1, r3, #8
 800182e:	23a0      	movs	r3, #160	; 0xa0
 8001830:	05db      	lsls	r3, r3, #23
 8001832:	0018      	movs	r0, r3
 8001834:	f002 fc40 	bl	80040b8 <HAL_GPIO_WritePin>
 8001838:	e01f      	b.n	800187a <ControlLeds2+0x132>
		case 22: L22(state);break;
 800183a:	1dbb      	adds	r3, r7, #6
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	4812      	ldr	r0, [pc, #72]	; (8001888 <ControlLeds2+0x140>)
 8001840:	001a      	movs	r2, r3
 8001842:	2108      	movs	r1, #8
 8001844:	f002 fc38 	bl	80040b8 <HAL_GPIO_WritePin>
 8001848:	e017      	b.n	800187a <ControlLeds2+0x132>
		case 23: L23(state);break;
 800184a:	1dbb      	adds	r3, r7, #6
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	480e      	ldr	r0, [pc, #56]	; (8001888 <ControlLeds2+0x140>)
 8001850:	001a      	movs	r2, r3
 8001852:	2110      	movs	r1, #16
 8001854:	f002 fc30 	bl	80040b8 <HAL_GPIO_WritePin>
 8001858:	e00f      	b.n	800187a <ControlLeds2+0x132>
		case 24: L24(state);break;
 800185a:	1dbb      	adds	r3, r7, #6
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	480a      	ldr	r0, [pc, #40]	; (8001888 <ControlLeds2+0x140>)
 8001860:	001a      	movs	r2, r3
 8001862:	2120      	movs	r1, #32
 8001864:	f002 fc28 	bl	80040b8 <HAL_GPIO_WritePin>
 8001868:	e007      	b.n	800187a <ControlLeds2+0x132>
		case 25: L25(state);break;
 800186a:	1dbb      	adds	r3, r7, #6
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	4806      	ldr	r0, [pc, #24]	; (8001888 <ControlLeds2+0x140>)
 8001870:	001a      	movs	r2, r3
 8001872:	2140      	movs	r1, #64	; 0x40
 8001874:	f002 fc20 	bl	80040b8 <HAL_GPIO_WritePin>
 8001878:	46c0      	nop			; (mov r8, r8)
	}
}
 800187a:	46c0      	nop			; (mov r8, r8)
 800187c:	46bd      	mov	sp, r7
 800187e:	b002      	add	sp, #8
 8001880:	bd80      	pop	{r7, pc}
 8001882:	46c0      	nop			; (mov r8, r8)
 8001884:	08004bc4 	.word	0x08004bc4
 8001888:	50000400 	.word	0x50000400
 800188c:	50000800 	.word	0x50000800

08001890 <Barrido1>:

void Barrido1(uint8_t veces, uint16_t tiempo, uint16_t tiempo2){
 8001890:	b5b0      	push	{r4, r5, r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	0004      	movs	r4, r0
 8001898:	0008      	movs	r0, r1
 800189a:	0011      	movs	r1, r2
 800189c:	1dfb      	adds	r3, r7, #7
 800189e:	1c22      	adds	r2, r4, #0
 80018a0:	701a      	strb	r2, [r3, #0]
 80018a2:	1d3b      	adds	r3, r7, #4
 80018a4:	1c02      	adds	r2, r0, #0
 80018a6:	801a      	strh	r2, [r3, #0]
 80018a8:	1cbb      	adds	r3, r7, #2
 80018aa:	1c0a      	adds	r2, r1, #0
 80018ac:	801a      	strh	r2, [r3, #0]
	for(uint8_t v=0;v<veces;v++){
 80018ae:	230f      	movs	r3, #15
 80018b0:	18fb      	adds	r3, r7, r3
 80018b2:	2200      	movs	r2, #0
 80018b4:	701a      	strb	r2, [r3, #0]
 80018b6:	e084      	b.n	80019c2 <Barrido1+0x132>
		for(uint8_t i=1; i<=cantLeds; i++){ControlLeds(i,1);ControlLeds2(i+10,1);HAL_Delay(tiempo*Refresh_ADC_Value());}
 80018b8:	230e      	movs	r3, #14
 80018ba:	18fb      	adds	r3, r7, r3
 80018bc:	2201      	movs	r2, #1
 80018be:	701a      	strb	r2, [r3, #0]
 80018c0:	e028      	b.n	8001914 <Barrido1+0x84>
 80018c2:	250e      	movs	r5, #14
 80018c4:	197b      	adds	r3, r7, r5
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2101      	movs	r1, #1
 80018ca:	0018      	movs	r0, r3
 80018cc:	f7ff fec4 	bl	8001658 <ControlLeds>
 80018d0:	197b      	adds	r3, r7, r5
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	330a      	adds	r3, #10
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	2101      	movs	r1, #1
 80018da:	0018      	movs	r0, r3
 80018dc:	f7ff ff34 	bl	8001748 <ControlLeds2>
 80018e0:	1d3b      	adds	r3, r7, #4
 80018e2:	881b      	ldrh	r3, [r3, #0]
 80018e4:	0018      	movs	r0, r3
 80018e6:	f7ff fa77 	bl	8000dd8 <__aeabi_i2f>
 80018ea:	1c04      	adds	r4, r0, #0
 80018ec:	f7ff fe8a 	bl	8001604 <Refresh_ADC_Value>
 80018f0:	1c03      	adds	r3, r0, #0
 80018f2:	1c19      	adds	r1, r3, #0
 80018f4:	1c20      	adds	r0, r4, #0
 80018f6:	f7fe ff61 	bl	80007bc <__aeabi_fmul>
 80018fa:	1c03      	adds	r3, r0, #0
 80018fc:	1c18      	adds	r0, r3, #0
 80018fe:	f7fe fc8b 	bl	8000218 <__aeabi_f2uiz>
 8001902:	0003      	movs	r3, r0
 8001904:	0018      	movs	r0, r3
 8001906:	f001 fa5d 	bl	8002dc4 <HAL_Delay>
 800190a:	197b      	adds	r3, r7, r5
 800190c:	781a      	ldrb	r2, [r3, #0]
 800190e:	197b      	adds	r3, r7, r5
 8001910:	3201      	adds	r2, #1
 8001912:	701a      	strb	r2, [r3, #0]
 8001914:	4b31      	ldr	r3, [pc, #196]	; (80019dc <Barrido1+0x14c>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	220e      	movs	r2, #14
 800191a:	18ba      	adds	r2, r7, r2
 800191c:	7812      	ldrb	r2, [r2, #0]
 800191e:	429a      	cmp	r2, r3
 8001920:	d9cf      	bls.n	80018c2 <Barrido1+0x32>
		HAL_Delay(tiempo2*Refresh_ADC_Value());
 8001922:	1cbb      	adds	r3, r7, #2
 8001924:	881b      	ldrh	r3, [r3, #0]
 8001926:	0018      	movs	r0, r3
 8001928:	f7ff fa56 	bl	8000dd8 <__aeabi_i2f>
 800192c:	1c04      	adds	r4, r0, #0
 800192e:	f7ff fe69 	bl	8001604 <Refresh_ADC_Value>
 8001932:	1c03      	adds	r3, r0, #0
 8001934:	1c19      	adds	r1, r3, #0
 8001936:	1c20      	adds	r0, r4, #0
 8001938:	f7fe ff40 	bl	80007bc <__aeabi_fmul>
 800193c:	1c03      	adds	r3, r0, #0
 800193e:	1c18      	adds	r0, r3, #0
 8001940:	f7fe fc6a 	bl	8000218 <__aeabi_f2uiz>
 8001944:	0003      	movs	r3, r0
 8001946:	0018      	movs	r0, r3
 8001948:	f001 fa3c 	bl	8002dc4 <HAL_Delay>
		for(uint8_t i=1; i<=cantLeds; i++){ControlLeds(i,0);ControlLeds2(i+10,0);HAL_Delay(tiempo*Refresh_ADC_Value());}
 800194c:	230d      	movs	r3, #13
 800194e:	18fb      	adds	r3, r7, r3
 8001950:	2201      	movs	r2, #1
 8001952:	701a      	strb	r2, [r3, #0]
 8001954:	e028      	b.n	80019a8 <Barrido1+0x118>
 8001956:	250d      	movs	r5, #13
 8001958:	197b      	adds	r3, r7, r5
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2100      	movs	r1, #0
 800195e:	0018      	movs	r0, r3
 8001960:	f7ff fe7a 	bl	8001658 <ControlLeds>
 8001964:	197b      	adds	r3, r7, r5
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	330a      	adds	r3, #10
 800196a:	b2db      	uxtb	r3, r3
 800196c:	2100      	movs	r1, #0
 800196e:	0018      	movs	r0, r3
 8001970:	f7ff feea 	bl	8001748 <ControlLeds2>
 8001974:	1d3b      	adds	r3, r7, #4
 8001976:	881b      	ldrh	r3, [r3, #0]
 8001978:	0018      	movs	r0, r3
 800197a:	f7ff fa2d 	bl	8000dd8 <__aeabi_i2f>
 800197e:	1c04      	adds	r4, r0, #0
 8001980:	f7ff fe40 	bl	8001604 <Refresh_ADC_Value>
 8001984:	1c03      	adds	r3, r0, #0
 8001986:	1c19      	adds	r1, r3, #0
 8001988:	1c20      	adds	r0, r4, #0
 800198a:	f7fe ff17 	bl	80007bc <__aeabi_fmul>
 800198e:	1c03      	adds	r3, r0, #0
 8001990:	1c18      	adds	r0, r3, #0
 8001992:	f7fe fc41 	bl	8000218 <__aeabi_f2uiz>
 8001996:	0003      	movs	r3, r0
 8001998:	0018      	movs	r0, r3
 800199a:	f001 fa13 	bl	8002dc4 <HAL_Delay>
 800199e:	197b      	adds	r3, r7, r5
 80019a0:	781a      	ldrb	r2, [r3, #0]
 80019a2:	197b      	adds	r3, r7, r5
 80019a4:	3201      	adds	r2, #1
 80019a6:	701a      	strb	r2, [r3, #0]
 80019a8:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <Barrido1+0x14c>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	220d      	movs	r2, #13
 80019ae:	18ba      	adds	r2, r7, r2
 80019b0:	7812      	ldrb	r2, [r2, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d9cf      	bls.n	8001956 <Barrido1+0xc6>
	for(uint8_t v=0;v<veces;v++){
 80019b6:	210f      	movs	r1, #15
 80019b8:	187b      	adds	r3, r7, r1
 80019ba:	781a      	ldrb	r2, [r3, #0]
 80019bc:	187b      	adds	r3, r7, r1
 80019be:	3201      	adds	r2, #1
 80019c0:	701a      	strb	r2, [r3, #0]
 80019c2:	230f      	movs	r3, #15
 80019c4:	18fa      	adds	r2, r7, r3
 80019c6:	1dfb      	adds	r3, r7, #7
 80019c8:	7812      	ldrb	r2, [r2, #0]
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d200      	bcs.n	80019d2 <Barrido1+0x142>
 80019d0:	e772      	b.n	80018b8 <Barrido1+0x28>
	}
}
 80019d2:	46c0      	nop			; (mov r8, r8)
 80019d4:	46c0      	nop			; (mov r8, r8)
 80019d6:	46bd      	mov	sp, r7
 80019d8:	b004      	add	sp, #16
 80019da:	bdb0      	pop	{r4, r5, r7, pc}
 80019dc:	20000000 	.word	0x20000000

080019e0 <Encender_1_Led_2>:
			ControlLeds(i,0);
		}
	}
}

void Encender_1_Led_2(uint8_t num_led){
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	0002      	movs	r2, r0
 80019e8:	1dfb      	adds	r3, r7, #7
 80019ea:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=1; i<=cantLeds; i++){
 80019ec:	230f      	movs	r3, #15
 80019ee:	18fb      	adds	r3, r7, r3
 80019f0:	2201      	movs	r2, #1
 80019f2:	701a      	strb	r2, [r3, #0]
 80019f4:	e01a      	b.n	8001a2c <Encender_1_Led_2+0x4c>
		if(i<=num_led){
 80019f6:	210f      	movs	r1, #15
 80019f8:	187a      	adds	r2, r7, r1
 80019fa:	1dfb      	adds	r3, r7, #7
 80019fc:	7812      	ldrb	r2, [r2, #0]
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d806      	bhi.n	8001a12 <Encender_1_Led_2+0x32>
			ControlLeds(i,1);
 8001a04:	187b      	adds	r3, r7, r1
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2101      	movs	r1, #1
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	f7ff fe24 	bl	8001658 <ControlLeds>
 8001a10:	e006      	b.n	8001a20 <Encender_1_Led_2+0x40>
		}else{
			ControlLeds(i,0);
 8001a12:	230f      	movs	r3, #15
 8001a14:	18fb      	adds	r3, r7, r3
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2100      	movs	r1, #0
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	f7ff fe1c 	bl	8001658 <ControlLeds>
	for(uint8_t i=1; i<=cantLeds; i++){
 8001a20:	210f      	movs	r1, #15
 8001a22:	187b      	adds	r3, r7, r1
 8001a24:	781a      	ldrb	r2, [r3, #0]
 8001a26:	187b      	adds	r3, r7, r1
 8001a28:	3201      	adds	r2, #1
 8001a2a:	701a      	strb	r2, [r3, #0]
 8001a2c:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <Encender_1_Led_2+0x64>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	220f      	movs	r2, #15
 8001a32:	18ba      	adds	r2, r7, r2
 8001a34:	7812      	ldrb	r2, [r2, #0]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d9dd      	bls.n	80019f6 <Encender_1_Led_2+0x16>
		}
	}
}
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	46c0      	nop			; (mov r8, r8)
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	b004      	add	sp, #16
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20000000 	.word	0x20000000

08001a48 <Encender_1_Led_2_1>:

void Encender_1_Led_2_1(uint8_t num_led){
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	0002      	movs	r2, r0
 8001a50:	1dfb      	adds	r3, r7, #7
 8001a52:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=1; i<=cantLeds; i++){
 8001a54:	230f      	movs	r3, #15
 8001a56:	18fb      	adds	r3, r7, r3
 8001a58:	2201      	movs	r2, #1
 8001a5a:	701a      	strb	r2, [r3, #0]
 8001a5c:	e01e      	b.n	8001a9c <Encender_1_Led_2_1+0x54>
		if(i<=num_led){
 8001a5e:	210f      	movs	r1, #15
 8001a60:	187a      	adds	r2, r7, r1
 8001a62:	1dfb      	adds	r3, r7, #7
 8001a64:	7812      	ldrb	r2, [r2, #0]
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d808      	bhi.n	8001a7e <Encender_1_Led_2_1+0x36>
			ControlLeds2(i+10,1);
 8001a6c:	187b      	adds	r3, r7, r1
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	330a      	adds	r3, #10
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2101      	movs	r1, #1
 8001a76:	0018      	movs	r0, r3
 8001a78:	f7ff fe66 	bl	8001748 <ControlLeds2>
 8001a7c:	e008      	b.n	8001a90 <Encender_1_Led_2_1+0x48>
		}else{
			ControlLeds2(i+10,0);
 8001a7e:	230f      	movs	r3, #15
 8001a80:	18fb      	adds	r3, r7, r3
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	330a      	adds	r3, #10
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	2100      	movs	r1, #0
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	f7ff fe5c 	bl	8001748 <ControlLeds2>
	for(uint8_t i=1; i<=cantLeds; i++){
 8001a90:	210f      	movs	r1, #15
 8001a92:	187b      	adds	r3, r7, r1
 8001a94:	781a      	ldrb	r2, [r3, #0]
 8001a96:	187b      	adds	r3, r7, r1
 8001a98:	3201      	adds	r2, #1
 8001a9a:	701a      	strb	r2, [r3, #0]
 8001a9c:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <Encender_1_Led_2_1+0x6c>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	220f      	movs	r2, #15
 8001aa2:	18ba      	adds	r2, r7, r2
 8001aa4:	7812      	ldrb	r2, [r2, #0]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d9d9      	bls.n	8001a5e <Encender_1_Led_2_1+0x16>
		}
	}
}
 8001aaa:	46c0      	nop			; (mov r8, r8)
 8001aac:	46c0      	nop			; (mov r8, r8)
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	b004      	add	sp, #16
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	20000000 	.word	0x20000000

08001ab8 <Encender_1_Led_4>:
			ControlLeds(i,0);
		}
	}
}

void Encender_1_Led_4(uint8_t num_led, uint8_t indice){
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	0002      	movs	r2, r0
 8001ac0:	1dfb      	adds	r3, r7, #7
 8001ac2:	701a      	strb	r2, [r3, #0]
 8001ac4:	1dbb      	adds	r3, r7, #6
 8001ac6:	1c0a      	adds	r2, r1, #0
 8001ac8:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=cantLeds;i>=indice;i--){
 8001aca:	230f      	movs	r3, #15
 8001acc:	18fb      	adds	r3, r7, r3
 8001ace:	4a15      	ldr	r2, [pc, #84]	; (8001b24 <Encender_1_Led_4+0x6c>)
 8001ad0:	7812      	ldrb	r2, [r2, #0]
 8001ad2:	701a      	strb	r2, [r3, #0]
 8001ad4:	e01a      	b.n	8001b0c <Encender_1_Led_4+0x54>
		if(i == num_led){
 8001ad6:	210f      	movs	r1, #15
 8001ad8:	187a      	adds	r2, r7, r1
 8001ada:	1dfb      	adds	r3, r7, #7
 8001adc:	7812      	ldrb	r2, [r2, #0]
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d106      	bne.n	8001af2 <Encender_1_Led_4+0x3a>
			ControlLeds(i,1);
 8001ae4:	187b      	adds	r3, r7, r1
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2101      	movs	r1, #1
 8001aea:	0018      	movs	r0, r3
 8001aec:	f7ff fdb4 	bl	8001658 <ControlLeds>
 8001af0:	e006      	b.n	8001b00 <Encender_1_Led_4+0x48>
		}else{
			ControlLeds(i,0);
 8001af2:	230f      	movs	r3, #15
 8001af4:	18fb      	adds	r3, r7, r3
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2100      	movs	r1, #0
 8001afa:	0018      	movs	r0, r3
 8001afc:	f7ff fdac 	bl	8001658 <ControlLeds>
	for(uint8_t i=cantLeds;i>=indice;i--){
 8001b00:	210f      	movs	r1, #15
 8001b02:	187b      	adds	r3, r7, r1
 8001b04:	781a      	ldrb	r2, [r3, #0]
 8001b06:	187b      	adds	r3, r7, r1
 8001b08:	3a01      	subs	r2, #1
 8001b0a:	701a      	strb	r2, [r3, #0]
 8001b0c:	230f      	movs	r3, #15
 8001b0e:	18fa      	adds	r2, r7, r3
 8001b10:	1dbb      	adds	r3, r7, #6
 8001b12:	7812      	ldrb	r2, [r2, #0]
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d2dd      	bcs.n	8001ad6 <Encender_1_Led_4+0x1e>
		}
	}
}
 8001b1a:	46c0      	nop			; (mov r8, r8)
 8001b1c:	46c0      	nop			; (mov r8, r8)
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	b004      	add	sp, #16
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	20000000 	.word	0x20000000

08001b28 <Encender_1_Led_4_1>:

void Encender_1_Led_4_1(uint8_t num_led, uint8_t indice){
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	0002      	movs	r2, r0
 8001b30:	1dfb      	adds	r3, r7, #7
 8001b32:	701a      	strb	r2, [r3, #0]
 8001b34:	1dbb      	adds	r3, r7, #6
 8001b36:	1c0a      	adds	r2, r1, #0
 8001b38:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=cantLeds;i>=indice;i--){
 8001b3a:	230f      	movs	r3, #15
 8001b3c:	18fb      	adds	r3, r7, r3
 8001b3e:	4a17      	ldr	r2, [pc, #92]	; (8001b9c <Encender_1_Led_4_1+0x74>)
 8001b40:	7812      	ldrb	r2, [r2, #0]
 8001b42:	701a      	strb	r2, [r3, #0]
 8001b44:	e01e      	b.n	8001b84 <Encender_1_Led_4_1+0x5c>
		if(i == num_led){
 8001b46:	210f      	movs	r1, #15
 8001b48:	187a      	adds	r2, r7, r1
 8001b4a:	1dfb      	adds	r3, r7, #7
 8001b4c:	7812      	ldrb	r2, [r2, #0]
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d108      	bne.n	8001b66 <Encender_1_Led_4_1+0x3e>
			ControlLeds2(i+10,1);
 8001b54:	187b      	adds	r3, r7, r1
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	330a      	adds	r3, #10
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	0018      	movs	r0, r3
 8001b60:	f7ff fdf2 	bl	8001748 <ControlLeds2>
 8001b64:	e008      	b.n	8001b78 <Encender_1_Led_4_1+0x50>
		}else{
			ControlLeds2(i+10,0);
 8001b66:	230f      	movs	r3, #15
 8001b68:	18fb      	adds	r3, r7, r3
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	330a      	adds	r3, #10
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2100      	movs	r1, #0
 8001b72:	0018      	movs	r0, r3
 8001b74:	f7ff fde8 	bl	8001748 <ControlLeds2>
	for(uint8_t i=cantLeds;i>=indice;i--){
 8001b78:	210f      	movs	r1, #15
 8001b7a:	187b      	adds	r3, r7, r1
 8001b7c:	781a      	ldrb	r2, [r3, #0]
 8001b7e:	187b      	adds	r3, r7, r1
 8001b80:	3a01      	subs	r2, #1
 8001b82:	701a      	strb	r2, [r3, #0]
 8001b84:	230f      	movs	r3, #15
 8001b86:	18fa      	adds	r2, r7, r3
 8001b88:	1dbb      	adds	r3, r7, #6
 8001b8a:	7812      	ldrb	r2, [r2, #0]
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d2d9      	bcs.n	8001b46 <Encender_1_Led_4_1+0x1e>
		}
	}
}
 8001b92:	46c0      	nop			; (mov r8, r8)
 8001b94:	46c0      	nop			; (mov r8, r8)
 8001b96:	46bd      	mov	sp, r7
 8001b98:	b004      	add	sp, #16
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20000000 	.word	0x20000000

08001ba0 <AbrirApagar>:
			HAL_Delay(tiempo*Refresh_ADC_Value());
		}
	}
}

void AbrirApagar(uint8_t veces, uint16_t tiempo, uint16_t tiempo2){
 8001ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ba2:	b087      	sub	sp, #28
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	0004      	movs	r4, r0
 8001ba8:	0008      	movs	r0, r1
 8001baa:	0011      	movs	r1, r2
 8001bac:	1dfb      	adds	r3, r7, #7
 8001bae:	1c22      	adds	r2, r4, #0
 8001bb0:	701a      	strb	r2, [r3, #0]
 8001bb2:	1d3b      	adds	r3, r7, #4
 8001bb4:	1c02      	adds	r2, r0, #0
 8001bb6:	801a      	strh	r2, [r3, #0]
 8001bb8:	1cbb      	adds	r3, r7, #2
 8001bba:	1c0a      	adds	r2, r1, #0
 8001bbc:	801a      	strh	r2, [r3, #0]

	for(uint8_t v=0;v<veces;v++){
 8001bbe:	2317      	movs	r3, #23
 8001bc0:	18fb      	adds	r3, r7, r3
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	701a      	strb	r2, [r3, #0]
 8001bc6:	e1a0      	b.n	8001f0a <AbrirApagar+0x36a>
		uint8_t centro,centro2,impar=1,par=0;
 8001bc8:	2316      	movs	r3, #22
 8001bca:	18fb      	adds	r3, r7, r3
 8001bcc:	2201      	movs	r2, #1
 8001bce:	701a      	strb	r2, [r3, #0]
 8001bd0:	2315      	movs	r3, #21
 8001bd2:	18fb      	adds	r3, r7, r3
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	701a      	strb	r2, [r3, #0]
		if(cantLeds%2==0){//si es par
 8001bd8:	4bd2      	ldr	r3, [pc, #840]	; (8001f24 <AbrirApagar+0x384>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	4013      	ands	r3, r2
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d000      	beq.n	8001be8 <AbrirApagar+0x48>
 8001be6:	e098      	b.n	8001d1a <AbrirApagar+0x17a>
			centro = cantLeds/2;
 8001be8:	4bce      	ldr	r3, [pc, #824]	; (8001f24 <AbrirApagar+0x384>)
 8001bea:	781a      	ldrb	r2, [r3, #0]
 8001bec:	2110      	movs	r1, #16
 8001bee:	187b      	adds	r3, r7, r1
 8001bf0:	0852      	lsrs	r2, r2, #1
 8001bf2:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=centro;i>=1;i--){
 8001bf4:	2314      	movs	r3, #20
 8001bf6:	18fb      	adds	r3, r7, r3
 8001bf8:	187a      	adds	r2, r7, r1
 8001bfa:	7812      	ldrb	r2, [r2, #0]
 8001bfc:	701a      	strb	r2, [r3, #0]
 8001bfe:	e030      	b.n	8001c62 <AbrirApagar+0xc2>
				ControlLeds(i, 1);
 8001c00:	2514      	movs	r5, #20
 8001c02:	197b      	adds	r3, r7, r5
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	2101      	movs	r1, #1
 8001c08:	0018      	movs	r0, r3
 8001c0a:	f7ff fd25 	bl	8001658 <ControlLeds>
				ControlLeds(i+impar, 1);
 8001c0e:	197a      	adds	r2, r7, r5
 8001c10:	2416      	movs	r4, #22
 8001c12:	193b      	adds	r3, r7, r4
 8001c14:	7812      	ldrb	r2, [r2, #0]
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	18d3      	adds	r3, r2, r3
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	0018      	movs	r0, r3
 8001c20:	f7ff fd1a 	bl	8001658 <ControlLeds>
				impar=impar+2;
 8001c24:	193b      	adds	r3, r7, r4
 8001c26:	193a      	adds	r2, r7, r4
 8001c28:	7812      	ldrb	r2, [r2, #0]
 8001c2a:	3202      	adds	r2, #2
 8001c2c:	701a      	strb	r2, [r3, #0]
				HAL_Delay(tiempo*Refresh_ADC_Value());
 8001c2e:	1d3b      	adds	r3, r7, #4
 8001c30:	881b      	ldrh	r3, [r3, #0]
 8001c32:	0018      	movs	r0, r3
 8001c34:	f7ff f8d0 	bl	8000dd8 <__aeabi_i2f>
 8001c38:	1c04      	adds	r4, r0, #0
 8001c3a:	f7ff fce3 	bl	8001604 <Refresh_ADC_Value>
 8001c3e:	1c03      	adds	r3, r0, #0
 8001c40:	1c19      	adds	r1, r3, #0
 8001c42:	1c20      	adds	r0, r4, #0
 8001c44:	f7fe fdba 	bl	80007bc <__aeabi_fmul>
 8001c48:	1c03      	adds	r3, r0, #0
 8001c4a:	1c18      	adds	r0, r3, #0
 8001c4c:	f7fe fae4 	bl	8000218 <__aeabi_f2uiz>
 8001c50:	0003      	movs	r3, r0
 8001c52:	0018      	movs	r0, r3
 8001c54:	f001 f8b6 	bl	8002dc4 <HAL_Delay>
			for(uint8_t i=centro;i>=1;i--){
 8001c58:	197b      	adds	r3, r7, r5
 8001c5a:	781a      	ldrb	r2, [r3, #0]
 8001c5c:	197b      	adds	r3, r7, r5
 8001c5e:	3a01      	subs	r2, #1
 8001c60:	701a      	strb	r2, [r3, #0]
 8001c62:	2314      	movs	r3, #20
 8001c64:	18fb      	adds	r3, r7, r3
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1c9      	bne.n	8001c00 <AbrirApagar+0x60>
			}

			impar=1;
 8001c6c:	2316      	movs	r3, #22
 8001c6e:	18fb      	adds	r3, r7, r3
 8001c70:	2201      	movs	r2, #1
 8001c72:	701a      	strb	r2, [r3, #0]
			HAL_Delay(tiempo2*Refresh_ADC_Value());
 8001c74:	1cbb      	adds	r3, r7, #2
 8001c76:	881b      	ldrh	r3, [r3, #0]
 8001c78:	0018      	movs	r0, r3
 8001c7a:	f7ff f8ad 	bl	8000dd8 <__aeabi_i2f>
 8001c7e:	1c04      	adds	r4, r0, #0
 8001c80:	f7ff fcc0 	bl	8001604 <Refresh_ADC_Value>
 8001c84:	1c03      	adds	r3, r0, #0
 8001c86:	1c19      	adds	r1, r3, #0
 8001c88:	1c20      	adds	r0, r4, #0
 8001c8a:	f7fe fd97 	bl	80007bc <__aeabi_fmul>
 8001c8e:	1c03      	adds	r3, r0, #0
 8001c90:	1c18      	adds	r0, r3, #0
 8001c92:	f7fe fac1 	bl	8000218 <__aeabi_f2uiz>
 8001c96:	0003      	movs	r3, r0
 8001c98:	0018      	movs	r0, r3
 8001c9a:	f001 f893 	bl	8002dc4 <HAL_Delay>

			for(uint8_t i=centro;i>=1;i--){
 8001c9e:	2313      	movs	r3, #19
 8001ca0:	18fb      	adds	r3, r7, r3
 8001ca2:	2210      	movs	r2, #16
 8001ca4:	18ba      	adds	r2, r7, r2
 8001ca6:	7812      	ldrb	r2, [r2, #0]
 8001ca8:	701a      	strb	r2, [r3, #0]
 8001caa:	e030      	b.n	8001d0e <AbrirApagar+0x16e>
				ControlLeds(i, 0);
 8001cac:	2513      	movs	r5, #19
 8001cae:	197b      	adds	r3, r7, r5
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	f7ff fccf 	bl	8001658 <ControlLeds>
				ControlLeds(i+impar, 0);
 8001cba:	197a      	adds	r2, r7, r5
 8001cbc:	2416      	movs	r4, #22
 8001cbe:	193b      	adds	r3, r7, r4
 8001cc0:	7812      	ldrb	r2, [r2, #0]
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	18d3      	adds	r3, r2, r3
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	2100      	movs	r1, #0
 8001cca:	0018      	movs	r0, r3
 8001ccc:	f7ff fcc4 	bl	8001658 <ControlLeds>
				impar=impar+2;
 8001cd0:	193b      	adds	r3, r7, r4
 8001cd2:	193a      	adds	r2, r7, r4
 8001cd4:	7812      	ldrb	r2, [r2, #0]
 8001cd6:	3202      	adds	r2, #2
 8001cd8:	701a      	strb	r2, [r3, #0]
				HAL_Delay(tiempo*Refresh_ADC_Value());
 8001cda:	1d3b      	adds	r3, r7, #4
 8001cdc:	881b      	ldrh	r3, [r3, #0]
 8001cde:	0018      	movs	r0, r3
 8001ce0:	f7ff f87a 	bl	8000dd8 <__aeabi_i2f>
 8001ce4:	1c04      	adds	r4, r0, #0
 8001ce6:	f7ff fc8d 	bl	8001604 <Refresh_ADC_Value>
 8001cea:	1c03      	adds	r3, r0, #0
 8001cec:	1c19      	adds	r1, r3, #0
 8001cee:	1c20      	adds	r0, r4, #0
 8001cf0:	f7fe fd64 	bl	80007bc <__aeabi_fmul>
 8001cf4:	1c03      	adds	r3, r0, #0
 8001cf6:	1c18      	adds	r0, r3, #0
 8001cf8:	f7fe fa8e 	bl	8000218 <__aeabi_f2uiz>
 8001cfc:	0003      	movs	r3, r0
 8001cfe:	0018      	movs	r0, r3
 8001d00:	f001 f860 	bl	8002dc4 <HAL_Delay>
			for(uint8_t i=centro;i>=1;i--){
 8001d04:	197b      	adds	r3, r7, r5
 8001d06:	781a      	ldrb	r2, [r3, #0]
 8001d08:	197b      	adds	r3, r7, r5
 8001d0a:	3a01      	subs	r2, #1
 8001d0c:	701a      	strb	r2, [r3, #0]
 8001d0e:	2313      	movs	r3, #19
 8001d10:	18fb      	adds	r3, r7, r3
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1c9      	bne.n	8001cac <AbrirApagar+0x10c>
 8001d18:	e0f1      	b.n	8001efe <AbrirApagar+0x35e>
			}

		}else{//si es impar (aqui edito porq cantLeds=15)
			centro = (cantLeds/2)+1;//8
 8001d1a:	4b82      	ldr	r3, [pc, #520]	; (8001f24 <AbrirApagar+0x384>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	085b      	lsrs	r3, r3, #1
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	2110      	movs	r1, #16
 8001d24:	187b      	adds	r3, r7, r1
 8001d26:	3201      	adds	r2, #1
 8001d28:	701a      	strb	r2, [r3, #0]
			centro2 = (cantLeds2/2);//5
 8001d2a:	4b7f      	ldr	r3, [pc, #508]	; (8001f28 <AbrirApagar+0x388>)
 8001d2c:	781a      	ldrb	r2, [r3, #0]
 8001d2e:	230f      	movs	r3, #15
 8001d30:	18fb      	adds	r3, r7, r3
 8001d32:	0852      	lsrs	r2, r2, #1
 8001d34:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=centro;i>=1;i--){
 8001d36:	2312      	movs	r3, #18
 8001d38:	18fb      	adds	r3, r7, r3
 8001d3a:	187a      	adds	r2, r7, r1
 8001d3c:	7812      	ldrb	r2, [r2, #0]
 8001d3e:	701a      	strb	r2, [r3, #0]
 8001d40:	e059      	b.n	8001df6 <AbrirApagar+0x256>
				ControlLeds(i-(centro-centro2), 1);ControlLeds2(i+10,1);
 8001d42:	260f      	movs	r6, #15
 8001d44:	19ba      	adds	r2, r7, r6
 8001d46:	2310      	movs	r3, #16
 8001d48:	18fb      	adds	r3, r7, r3
 8001d4a:	7812      	ldrb	r2, [r2, #0]
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	b2da      	uxtb	r2, r3
 8001d52:	2512      	movs	r5, #18
 8001d54:	197b      	adds	r3, r7, r5
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	18d3      	adds	r3, r2, r3
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	0018      	movs	r0, r3
 8001d60:	f7ff fc7a 	bl	8001658 <ControlLeds>
 8001d64:	197b      	adds	r3, r7, r5
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	330a      	adds	r3, #10
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	0018      	movs	r0, r3
 8001d70:	f7ff fcea 	bl	8001748 <ControlLeds2>
				ControlLeds(i+par-(centro-centro2-1), 1);ControlLeds2(i+10+par,1);
 8001d74:	197a      	adds	r2, r7, r5
 8001d76:	2415      	movs	r4, #21
 8001d78:	193b      	adds	r3, r7, r4
 8001d7a:	7812      	ldrb	r2, [r2, #0]
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	18d3      	adds	r3, r2, r3
 8001d80:	b2da      	uxtb	r2, r3
 8001d82:	19b9      	adds	r1, r7, r6
 8001d84:	2310      	movs	r3, #16
 8001d86:	18fb      	adds	r3, r7, r3
 8001d88:	7809      	ldrb	r1, [r1, #0]
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	1acb      	subs	r3, r1, r3
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	18d3      	adds	r3, r2, r3
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	3301      	adds	r3, #1
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2101      	movs	r1, #1
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	f7ff fc5c 	bl	8001658 <ControlLeds>
 8001da0:	197a      	adds	r2, r7, r5
 8001da2:	193b      	adds	r3, r7, r4
 8001da4:	7812      	ldrb	r2, [r2, #0]
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	18d3      	adds	r3, r2, r3
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	330a      	adds	r3, #10
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2101      	movs	r1, #1
 8001db2:	0018      	movs	r0, r3
 8001db4:	f7ff fcc8 	bl	8001748 <ControlLeds2>
				par=par+2;
 8001db8:	193b      	adds	r3, r7, r4
 8001dba:	193a      	adds	r2, r7, r4
 8001dbc:	7812      	ldrb	r2, [r2, #0]
 8001dbe:	3202      	adds	r2, #2
 8001dc0:	701a      	strb	r2, [r3, #0]
				HAL_Delay(tiempo*Refresh_ADC_Value());
 8001dc2:	1d3b      	adds	r3, r7, #4
 8001dc4:	881b      	ldrh	r3, [r3, #0]
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	f7ff f806 	bl	8000dd8 <__aeabi_i2f>
 8001dcc:	1c04      	adds	r4, r0, #0
 8001dce:	f7ff fc19 	bl	8001604 <Refresh_ADC_Value>
 8001dd2:	1c03      	adds	r3, r0, #0
 8001dd4:	1c19      	adds	r1, r3, #0
 8001dd6:	1c20      	adds	r0, r4, #0
 8001dd8:	f7fe fcf0 	bl	80007bc <__aeabi_fmul>
 8001ddc:	1c03      	adds	r3, r0, #0
 8001dde:	1c18      	adds	r0, r3, #0
 8001de0:	f7fe fa1a 	bl	8000218 <__aeabi_f2uiz>
 8001de4:	0003      	movs	r3, r0
 8001de6:	0018      	movs	r0, r3
 8001de8:	f000 ffec 	bl	8002dc4 <HAL_Delay>
			for(uint8_t i=centro;i>=1;i--){
 8001dec:	197b      	adds	r3, r7, r5
 8001dee:	781a      	ldrb	r2, [r3, #0]
 8001df0:	197b      	adds	r3, r7, r5
 8001df2:	3a01      	subs	r2, #1
 8001df4:	701a      	strb	r2, [r3, #0]
 8001df6:	2312      	movs	r3, #18
 8001df8:	18fb      	adds	r3, r7, r3
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d1a0      	bne.n	8001d42 <AbrirApagar+0x1a2>
			}

			par=0;
 8001e00:	2315      	movs	r3, #21
 8001e02:	18fb      	adds	r3, r7, r3
 8001e04:	2200      	movs	r2, #0
 8001e06:	701a      	strb	r2, [r3, #0]
			HAL_Delay(tiempo2*Refresh_ADC_Value());
 8001e08:	1cbb      	adds	r3, r7, #2
 8001e0a:	881b      	ldrh	r3, [r3, #0]
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	f7fe ffe3 	bl	8000dd8 <__aeabi_i2f>
 8001e12:	1c04      	adds	r4, r0, #0
 8001e14:	f7ff fbf6 	bl	8001604 <Refresh_ADC_Value>
 8001e18:	1c03      	adds	r3, r0, #0
 8001e1a:	1c19      	adds	r1, r3, #0
 8001e1c:	1c20      	adds	r0, r4, #0
 8001e1e:	f7fe fccd 	bl	80007bc <__aeabi_fmul>
 8001e22:	1c03      	adds	r3, r0, #0
 8001e24:	1c18      	adds	r0, r3, #0
 8001e26:	f7fe f9f7 	bl	8000218 <__aeabi_f2uiz>
 8001e2a:	0003      	movs	r3, r0
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	f000 ffc9 	bl	8002dc4 <HAL_Delay>

			for(uint8_t i=centro;i>=1;i--){
 8001e32:	2311      	movs	r3, #17
 8001e34:	18fb      	adds	r3, r7, r3
 8001e36:	2210      	movs	r2, #16
 8001e38:	18ba      	adds	r2, r7, r2
 8001e3a:	7812      	ldrb	r2, [r2, #0]
 8001e3c:	701a      	strb	r2, [r3, #0]
 8001e3e:	e059      	b.n	8001ef4 <AbrirApagar+0x354>
				ControlLeds(i-(centro-centro2), 0);ControlLeds2(i+10,0);
 8001e40:	260f      	movs	r6, #15
 8001e42:	19ba      	adds	r2, r7, r6
 8001e44:	2310      	movs	r3, #16
 8001e46:	18fb      	adds	r3, r7, r3
 8001e48:	7812      	ldrb	r2, [r2, #0]
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	2511      	movs	r5, #17
 8001e52:	197b      	adds	r3, r7, r5
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	18d3      	adds	r3, r2, r3
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	f7ff fbfb 	bl	8001658 <ControlLeds>
 8001e62:	197b      	adds	r3, r7, r5
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	330a      	adds	r3, #10
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	0018      	movs	r0, r3
 8001e6e:	f7ff fc6b 	bl	8001748 <ControlLeds2>
				ControlLeds(i+par-(centro-centro2-1), 0);ControlLeds2(i+10+par,0);
 8001e72:	197a      	adds	r2, r7, r5
 8001e74:	2415      	movs	r4, #21
 8001e76:	193b      	adds	r3, r7, r4
 8001e78:	7812      	ldrb	r2, [r2, #0]
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	18d3      	adds	r3, r2, r3
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	19b9      	adds	r1, r7, r6
 8001e82:	2310      	movs	r3, #16
 8001e84:	18fb      	adds	r3, r7, r3
 8001e86:	7809      	ldrb	r1, [r1, #0]
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	1acb      	subs	r3, r1, r3
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	18d3      	adds	r3, r2, r3
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	3301      	adds	r3, #1
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2100      	movs	r1, #0
 8001e98:	0018      	movs	r0, r3
 8001e9a:	f7ff fbdd 	bl	8001658 <ControlLeds>
 8001e9e:	197a      	adds	r2, r7, r5
 8001ea0:	193b      	adds	r3, r7, r4
 8001ea2:	7812      	ldrb	r2, [r2, #0]
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	18d3      	adds	r3, r2, r3
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	330a      	adds	r3, #10
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2100      	movs	r1, #0
 8001eb0:	0018      	movs	r0, r3
 8001eb2:	f7ff fc49 	bl	8001748 <ControlLeds2>
				par=par+2;
 8001eb6:	193b      	adds	r3, r7, r4
 8001eb8:	193a      	adds	r2, r7, r4
 8001eba:	7812      	ldrb	r2, [r2, #0]
 8001ebc:	3202      	adds	r2, #2
 8001ebe:	701a      	strb	r2, [r3, #0]
				HAL_Delay(tiempo*Refresh_ADC_Value());
 8001ec0:	1d3b      	adds	r3, r7, #4
 8001ec2:	881b      	ldrh	r3, [r3, #0]
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	f7fe ff87 	bl	8000dd8 <__aeabi_i2f>
 8001eca:	1c04      	adds	r4, r0, #0
 8001ecc:	f7ff fb9a 	bl	8001604 <Refresh_ADC_Value>
 8001ed0:	1c03      	adds	r3, r0, #0
 8001ed2:	1c19      	adds	r1, r3, #0
 8001ed4:	1c20      	adds	r0, r4, #0
 8001ed6:	f7fe fc71 	bl	80007bc <__aeabi_fmul>
 8001eda:	1c03      	adds	r3, r0, #0
 8001edc:	1c18      	adds	r0, r3, #0
 8001ede:	f7fe f99b 	bl	8000218 <__aeabi_f2uiz>
 8001ee2:	0003      	movs	r3, r0
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	f000 ff6d 	bl	8002dc4 <HAL_Delay>
			for(uint8_t i=centro;i>=1;i--){
 8001eea:	197b      	adds	r3, r7, r5
 8001eec:	781a      	ldrb	r2, [r3, #0]
 8001eee:	197b      	adds	r3, r7, r5
 8001ef0:	3a01      	subs	r2, #1
 8001ef2:	701a      	strb	r2, [r3, #0]
 8001ef4:	2311      	movs	r3, #17
 8001ef6:	18fb      	adds	r3, r7, r3
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1a0      	bne.n	8001e40 <AbrirApagar+0x2a0>
	for(uint8_t v=0;v<veces;v++){
 8001efe:	2117      	movs	r1, #23
 8001f00:	187b      	adds	r3, r7, r1
 8001f02:	781a      	ldrb	r2, [r3, #0]
 8001f04:	187b      	adds	r3, r7, r1
 8001f06:	3201      	adds	r2, #1
 8001f08:	701a      	strb	r2, [r3, #0]
 8001f0a:	2317      	movs	r3, #23
 8001f0c:	18fa      	adds	r2, r7, r3
 8001f0e:	1dfb      	adds	r3, r7, #7
 8001f10:	7812      	ldrb	r2, [r2, #0]
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d200      	bcs.n	8001f1a <AbrirApagar+0x37a>
 8001f18:	e656      	b.n	8001bc8 <AbrirApagar+0x28>
			}
		}
	}
}
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	46c0      	nop			; (mov r8, r8)
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	b007      	add	sp, #28
 8001f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f24:	20000000 	.word	0x20000000
 8001f28:	20000001 	.word	0x20000001

08001f2c <CerrarApagar>:

void CerrarApagar(uint8_t veces, uint16_t tiempo, uint16_t tiempo2){
 8001f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	0004      	movs	r4, r0
 8001f34:	0008      	movs	r0, r1
 8001f36:	0011      	movs	r1, r2
 8001f38:	1dfb      	adds	r3, r7, #7
 8001f3a:	1c22      	adds	r2, r4, #0
 8001f3c:	701a      	strb	r2, [r3, #0]
 8001f3e:	1d3b      	adds	r3, r7, #4
 8001f40:	1c02      	adds	r2, r0, #0
 8001f42:	801a      	strh	r2, [r3, #0]
 8001f44:	1cbb      	adds	r3, r7, #2
 8001f46:	1c0a      	adds	r2, r1, #0
 8001f48:	801a      	strh	r2, [r3, #0]
	for(uint8_t v=0;v<veces;v++){
 8001f4a:	230f      	movs	r3, #15
 8001f4c:	18fb      	adds	r3, r7, r3
 8001f4e:	2200      	movs	r2, #0
 8001f50:	701a      	strb	r2, [r3, #0]
 8001f52:	e196      	b.n	8002282 <CerrarApagar+0x356>
		uint8_t limite,limite2,centro;
		if(cantLeds%2==0){//si es par
 8001f54:	4bd1      	ldr	r3, [pc, #836]	; (800229c <CerrarApagar+0x370>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d000      	beq.n	8001f64 <CerrarApagar+0x38>
 8001f62:	e0a3      	b.n	80020ac <CerrarApagar+0x180>

			centro = cantLeds/2;//5
 8001f64:	4bcd      	ldr	r3, [pc, #820]	; (800229c <CerrarApagar+0x370>)
 8001f66:	781a      	ldrb	r2, [r3, #0]
 8001f68:	2308      	movs	r3, #8
 8001f6a:	18fb      	adds	r3, r7, r3
 8001f6c:	0852      	lsrs	r2, r2, #1
 8001f6e:	701a      	strb	r2, [r3, #0]
			limite = cantLeds-1;
 8001f70:	4bca      	ldr	r3, [pc, #808]	; (800229c <CerrarApagar+0x370>)
 8001f72:	781a      	ldrb	r2, [r3, #0]
 8001f74:	230e      	movs	r3, #14
 8001f76:	18fb      	adds	r3, r7, r3
 8001f78:	3a01      	subs	r2, #1
 8001f7a:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=1;i<=centro;i++){
 8001f7c:	230c      	movs	r3, #12
 8001f7e:	18fb      	adds	r3, r7, r3
 8001f80:	2201      	movs	r2, #1
 8001f82:	701a      	strb	r2, [r3, #0]
 8001f84:	e030      	b.n	8001fe8 <CerrarApagar+0xbc>
				ControlLeds(i, 1);
 8001f86:	250c      	movs	r5, #12
 8001f88:	197b      	adds	r3, r7, r5
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	0018      	movs	r0, r3
 8001f90:	f7ff fb62 	bl	8001658 <ControlLeds>
				ControlLeds(i+limite, 1);
 8001f94:	197a      	adds	r2, r7, r5
 8001f96:	240e      	movs	r4, #14
 8001f98:	193b      	adds	r3, r7, r4
 8001f9a:	7812      	ldrb	r2, [r2, #0]
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	18d3      	adds	r3, r2, r3
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	f7ff fb57 	bl	8001658 <ControlLeds>
				limite=limite-2;
 8001faa:	193b      	adds	r3, r7, r4
 8001fac:	193a      	adds	r2, r7, r4
 8001fae:	7812      	ldrb	r2, [r2, #0]
 8001fb0:	3a02      	subs	r2, #2
 8001fb2:	701a      	strb	r2, [r3, #0]
				HAL_Delay(tiempo*Refresh_ADC_Value());
 8001fb4:	1d3b      	adds	r3, r7, #4
 8001fb6:	881b      	ldrh	r3, [r3, #0]
 8001fb8:	0018      	movs	r0, r3
 8001fba:	f7fe ff0d 	bl	8000dd8 <__aeabi_i2f>
 8001fbe:	1c04      	adds	r4, r0, #0
 8001fc0:	f7ff fb20 	bl	8001604 <Refresh_ADC_Value>
 8001fc4:	1c03      	adds	r3, r0, #0
 8001fc6:	1c19      	adds	r1, r3, #0
 8001fc8:	1c20      	adds	r0, r4, #0
 8001fca:	f7fe fbf7 	bl	80007bc <__aeabi_fmul>
 8001fce:	1c03      	adds	r3, r0, #0
 8001fd0:	1c18      	adds	r0, r3, #0
 8001fd2:	f7fe f921 	bl	8000218 <__aeabi_f2uiz>
 8001fd6:	0003      	movs	r3, r0
 8001fd8:	0018      	movs	r0, r3
 8001fda:	f000 fef3 	bl	8002dc4 <HAL_Delay>
			for(uint8_t i=1;i<=centro;i++){
 8001fde:	197b      	adds	r3, r7, r5
 8001fe0:	781a      	ldrb	r2, [r3, #0]
 8001fe2:	197b      	adds	r3, r7, r5
 8001fe4:	3201      	adds	r2, #1
 8001fe6:	701a      	strb	r2, [r3, #0]
 8001fe8:	230c      	movs	r3, #12
 8001fea:	18fa      	adds	r2, r7, r3
 8001fec:	2308      	movs	r3, #8
 8001fee:	18fb      	adds	r3, r7, r3
 8001ff0:	7812      	ldrb	r2, [r2, #0]
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d9c6      	bls.n	8001f86 <CerrarApagar+0x5a>
			}
			limite = cantLeds-1;
 8001ff8:	4ba8      	ldr	r3, [pc, #672]	; (800229c <CerrarApagar+0x370>)
 8001ffa:	781a      	ldrb	r2, [r3, #0]
 8001ffc:	230e      	movs	r3, #14
 8001ffe:	18fb      	adds	r3, r7, r3
 8002000:	3a01      	subs	r2, #1
 8002002:	701a      	strb	r2, [r3, #0]
			HAL_Delay(tiempo2*Refresh_ADC_Value());
 8002004:	1cbb      	adds	r3, r7, #2
 8002006:	881b      	ldrh	r3, [r3, #0]
 8002008:	0018      	movs	r0, r3
 800200a:	f7fe fee5 	bl	8000dd8 <__aeabi_i2f>
 800200e:	1c04      	adds	r4, r0, #0
 8002010:	f7ff faf8 	bl	8001604 <Refresh_ADC_Value>
 8002014:	1c03      	adds	r3, r0, #0
 8002016:	1c19      	adds	r1, r3, #0
 8002018:	1c20      	adds	r0, r4, #0
 800201a:	f7fe fbcf 	bl	80007bc <__aeabi_fmul>
 800201e:	1c03      	adds	r3, r0, #0
 8002020:	1c18      	adds	r0, r3, #0
 8002022:	f7fe f8f9 	bl	8000218 <__aeabi_f2uiz>
 8002026:	0003      	movs	r3, r0
 8002028:	0018      	movs	r0, r3
 800202a:	f000 fecb 	bl	8002dc4 <HAL_Delay>
			for(uint8_t i=1;i<=centro;i++){
 800202e:	230b      	movs	r3, #11
 8002030:	18fb      	adds	r3, r7, r3
 8002032:	2201      	movs	r2, #1
 8002034:	701a      	strb	r2, [r3, #0]
 8002036:	e030      	b.n	800209a <CerrarApagar+0x16e>
				ControlLeds(i, 0);
 8002038:	250b      	movs	r5, #11
 800203a:	197b      	adds	r3, r7, r5
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2100      	movs	r1, #0
 8002040:	0018      	movs	r0, r3
 8002042:	f7ff fb09 	bl	8001658 <ControlLeds>
				ControlLeds(i+limite, 0);
 8002046:	197a      	adds	r2, r7, r5
 8002048:	240e      	movs	r4, #14
 800204a:	193b      	adds	r3, r7, r4
 800204c:	7812      	ldrb	r2, [r2, #0]
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	18d3      	adds	r3, r2, r3
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2100      	movs	r1, #0
 8002056:	0018      	movs	r0, r3
 8002058:	f7ff fafe 	bl	8001658 <ControlLeds>
				limite=limite-2;
 800205c:	193b      	adds	r3, r7, r4
 800205e:	193a      	adds	r2, r7, r4
 8002060:	7812      	ldrb	r2, [r2, #0]
 8002062:	3a02      	subs	r2, #2
 8002064:	701a      	strb	r2, [r3, #0]
				HAL_Delay(tiempo*Refresh_ADC_Value());
 8002066:	1d3b      	adds	r3, r7, #4
 8002068:	881b      	ldrh	r3, [r3, #0]
 800206a:	0018      	movs	r0, r3
 800206c:	f7fe feb4 	bl	8000dd8 <__aeabi_i2f>
 8002070:	1c04      	adds	r4, r0, #0
 8002072:	f7ff fac7 	bl	8001604 <Refresh_ADC_Value>
 8002076:	1c03      	adds	r3, r0, #0
 8002078:	1c19      	adds	r1, r3, #0
 800207a:	1c20      	adds	r0, r4, #0
 800207c:	f7fe fb9e 	bl	80007bc <__aeabi_fmul>
 8002080:	1c03      	adds	r3, r0, #0
 8002082:	1c18      	adds	r0, r3, #0
 8002084:	f7fe f8c8 	bl	8000218 <__aeabi_f2uiz>
 8002088:	0003      	movs	r3, r0
 800208a:	0018      	movs	r0, r3
 800208c:	f000 fe9a 	bl	8002dc4 <HAL_Delay>
			for(uint8_t i=1;i<=centro;i++){
 8002090:	197b      	adds	r3, r7, r5
 8002092:	781a      	ldrb	r2, [r3, #0]
 8002094:	197b      	adds	r3, r7, r5
 8002096:	3201      	adds	r2, #1
 8002098:	701a      	strb	r2, [r3, #0]
 800209a:	230b      	movs	r3, #11
 800209c:	18fa      	adds	r2, r7, r3
 800209e:	2308      	movs	r3, #8
 80020a0:	18fb      	adds	r3, r7, r3
 80020a2:	7812      	ldrb	r2, [r2, #0]
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d9c6      	bls.n	8002038 <CerrarApagar+0x10c>
 80020aa:	e0e4      	b.n	8002276 <CerrarApagar+0x34a>
			}

		}else{//si es impar (aqui edite porq cantleds=15)
			centro = (cantLeds/2)+1;//5
 80020ac:	4b7b      	ldr	r3, [pc, #492]	; (800229c <CerrarApagar+0x370>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	085b      	lsrs	r3, r3, #1
 80020b2:	b2da      	uxtb	r2, r3
 80020b4:	2308      	movs	r3, #8
 80020b6:	18fb      	adds	r3, r7, r3
 80020b8:	3201      	adds	r2, #1
 80020ba:	701a      	strb	r2, [r3, #0]
			limite = cantLeds-1;limite2 = cantLeds2-1;
 80020bc:	4b77      	ldr	r3, [pc, #476]	; (800229c <CerrarApagar+0x370>)
 80020be:	781a      	ldrb	r2, [r3, #0]
 80020c0:	230e      	movs	r3, #14
 80020c2:	18fb      	adds	r3, r7, r3
 80020c4:	3a01      	subs	r2, #1
 80020c6:	701a      	strb	r2, [r3, #0]
 80020c8:	4b75      	ldr	r3, [pc, #468]	; (80022a0 <CerrarApagar+0x374>)
 80020ca:	781a      	ldrb	r2, [r3, #0]
 80020cc:	230d      	movs	r3, #13
 80020ce:	18fb      	adds	r3, r7, r3
 80020d0:	3a01      	subs	r2, #1
 80020d2:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=1;i<=centro;i++){
 80020d4:	230a      	movs	r3, #10
 80020d6:	18fb      	adds	r3, r7, r3
 80020d8:	2201      	movs	r2, #1
 80020da:	701a      	strb	r2, [r3, #0]
 80020dc:	e04a      	b.n	8002174 <CerrarApagar+0x248>
				ControlLeds(i, 1);ControlLeds2(i+10,1);
 80020de:	250a      	movs	r5, #10
 80020e0:	197b      	adds	r3, r7, r5
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2101      	movs	r1, #1
 80020e6:	0018      	movs	r0, r3
 80020e8:	f7ff fab6 	bl	8001658 <ControlLeds>
 80020ec:	197b      	adds	r3, r7, r5
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	330a      	adds	r3, #10
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2101      	movs	r1, #1
 80020f6:	0018      	movs	r0, r3
 80020f8:	f7ff fb26 	bl	8001748 <ControlLeds2>
				ControlLeds(i+limite2, 1);ControlLeds2(i+10+limite,1);
 80020fc:	197a      	adds	r2, r7, r5
 80020fe:	240d      	movs	r4, #13
 8002100:	193b      	adds	r3, r7, r4
 8002102:	7812      	ldrb	r2, [r2, #0]
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	18d3      	adds	r3, r2, r3
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2101      	movs	r1, #1
 800210c:	0018      	movs	r0, r3
 800210e:	f7ff faa3 	bl	8001658 <ControlLeds>
 8002112:	197a      	adds	r2, r7, r5
 8002114:	260e      	movs	r6, #14
 8002116:	19bb      	adds	r3, r7, r6
 8002118:	7812      	ldrb	r2, [r2, #0]
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	18d3      	adds	r3, r2, r3
 800211e:	b2db      	uxtb	r3, r3
 8002120:	330a      	adds	r3, #10
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2101      	movs	r1, #1
 8002126:	0018      	movs	r0, r3
 8002128:	f7ff fb0e 	bl	8001748 <ControlLeds2>
				limite=limite-2;limite2=limite2-2;
 800212c:	19bb      	adds	r3, r7, r6
 800212e:	19ba      	adds	r2, r7, r6
 8002130:	7812      	ldrb	r2, [r2, #0]
 8002132:	3a02      	subs	r2, #2
 8002134:	701a      	strb	r2, [r3, #0]
 8002136:	193b      	adds	r3, r7, r4
 8002138:	193a      	adds	r2, r7, r4
 800213a:	7812      	ldrb	r2, [r2, #0]
 800213c:	3a02      	subs	r2, #2
 800213e:	701a      	strb	r2, [r3, #0]
				HAL_Delay(tiempo*Refresh_ADC_Value());
 8002140:	1d3b      	adds	r3, r7, #4
 8002142:	881b      	ldrh	r3, [r3, #0]
 8002144:	0018      	movs	r0, r3
 8002146:	f7fe fe47 	bl	8000dd8 <__aeabi_i2f>
 800214a:	1c04      	adds	r4, r0, #0
 800214c:	f7ff fa5a 	bl	8001604 <Refresh_ADC_Value>
 8002150:	1c03      	adds	r3, r0, #0
 8002152:	1c19      	adds	r1, r3, #0
 8002154:	1c20      	adds	r0, r4, #0
 8002156:	f7fe fb31 	bl	80007bc <__aeabi_fmul>
 800215a:	1c03      	adds	r3, r0, #0
 800215c:	1c18      	adds	r0, r3, #0
 800215e:	f7fe f85b 	bl	8000218 <__aeabi_f2uiz>
 8002162:	0003      	movs	r3, r0
 8002164:	0018      	movs	r0, r3
 8002166:	f000 fe2d 	bl	8002dc4 <HAL_Delay>
			for(uint8_t i=1;i<=centro;i++){
 800216a:	197b      	adds	r3, r7, r5
 800216c:	781a      	ldrb	r2, [r3, #0]
 800216e:	197b      	adds	r3, r7, r5
 8002170:	3201      	adds	r2, #1
 8002172:	701a      	strb	r2, [r3, #0]
 8002174:	230a      	movs	r3, #10
 8002176:	18fa      	adds	r2, r7, r3
 8002178:	2308      	movs	r3, #8
 800217a:	18fb      	adds	r3, r7, r3
 800217c:	7812      	ldrb	r2, [r2, #0]
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	429a      	cmp	r2, r3
 8002182:	d9ac      	bls.n	80020de <CerrarApagar+0x1b2>
			}
			limite = cantLeds-1;limite2 = cantLeds2-1;
 8002184:	4b45      	ldr	r3, [pc, #276]	; (800229c <CerrarApagar+0x370>)
 8002186:	781a      	ldrb	r2, [r3, #0]
 8002188:	230e      	movs	r3, #14
 800218a:	18fb      	adds	r3, r7, r3
 800218c:	3a01      	subs	r2, #1
 800218e:	701a      	strb	r2, [r3, #0]
 8002190:	4b43      	ldr	r3, [pc, #268]	; (80022a0 <CerrarApagar+0x374>)
 8002192:	781a      	ldrb	r2, [r3, #0]
 8002194:	230d      	movs	r3, #13
 8002196:	18fb      	adds	r3, r7, r3
 8002198:	3a01      	subs	r2, #1
 800219a:	701a      	strb	r2, [r3, #0]
			HAL_Delay(tiempo2*Refresh_ADC_Value());
 800219c:	1cbb      	adds	r3, r7, #2
 800219e:	881b      	ldrh	r3, [r3, #0]
 80021a0:	0018      	movs	r0, r3
 80021a2:	f7fe fe19 	bl	8000dd8 <__aeabi_i2f>
 80021a6:	1c04      	adds	r4, r0, #0
 80021a8:	f7ff fa2c 	bl	8001604 <Refresh_ADC_Value>
 80021ac:	1c03      	adds	r3, r0, #0
 80021ae:	1c19      	adds	r1, r3, #0
 80021b0:	1c20      	adds	r0, r4, #0
 80021b2:	f7fe fb03 	bl	80007bc <__aeabi_fmul>
 80021b6:	1c03      	adds	r3, r0, #0
 80021b8:	1c18      	adds	r0, r3, #0
 80021ba:	f7fe f82d 	bl	8000218 <__aeabi_f2uiz>
 80021be:	0003      	movs	r3, r0
 80021c0:	0018      	movs	r0, r3
 80021c2:	f000 fdff 	bl	8002dc4 <HAL_Delay>
			for(uint8_t i=1;i<=centro;i++){
 80021c6:	2309      	movs	r3, #9
 80021c8:	18fb      	adds	r3, r7, r3
 80021ca:	2201      	movs	r2, #1
 80021cc:	701a      	strb	r2, [r3, #0]
 80021ce:	e04a      	b.n	8002266 <CerrarApagar+0x33a>
				ControlLeds(i, 0);ControlLeds2(i+10,0);
 80021d0:	2509      	movs	r5, #9
 80021d2:	197b      	adds	r3, r7, r5
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2100      	movs	r1, #0
 80021d8:	0018      	movs	r0, r3
 80021da:	f7ff fa3d 	bl	8001658 <ControlLeds>
 80021de:	197b      	adds	r3, r7, r5
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	330a      	adds	r3, #10
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2100      	movs	r1, #0
 80021e8:	0018      	movs	r0, r3
 80021ea:	f7ff faad 	bl	8001748 <ControlLeds2>
				ControlLeds(i+limite2, 0);ControlLeds2(i+10+limite,0);
 80021ee:	197a      	adds	r2, r7, r5
 80021f0:	240d      	movs	r4, #13
 80021f2:	193b      	adds	r3, r7, r4
 80021f4:	7812      	ldrb	r2, [r2, #0]
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	18d3      	adds	r3, r2, r3
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2100      	movs	r1, #0
 80021fe:	0018      	movs	r0, r3
 8002200:	f7ff fa2a 	bl	8001658 <ControlLeds>
 8002204:	197a      	adds	r2, r7, r5
 8002206:	260e      	movs	r6, #14
 8002208:	19bb      	adds	r3, r7, r6
 800220a:	7812      	ldrb	r2, [r2, #0]
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	18d3      	adds	r3, r2, r3
 8002210:	b2db      	uxtb	r3, r3
 8002212:	330a      	adds	r3, #10
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2100      	movs	r1, #0
 8002218:	0018      	movs	r0, r3
 800221a:	f7ff fa95 	bl	8001748 <ControlLeds2>
				limite=limite-2;limite2=limite2-2;
 800221e:	19bb      	adds	r3, r7, r6
 8002220:	19ba      	adds	r2, r7, r6
 8002222:	7812      	ldrb	r2, [r2, #0]
 8002224:	3a02      	subs	r2, #2
 8002226:	701a      	strb	r2, [r3, #0]
 8002228:	193b      	adds	r3, r7, r4
 800222a:	193a      	adds	r2, r7, r4
 800222c:	7812      	ldrb	r2, [r2, #0]
 800222e:	3a02      	subs	r2, #2
 8002230:	701a      	strb	r2, [r3, #0]
				HAL_Delay(tiempo*Refresh_ADC_Value());
 8002232:	1d3b      	adds	r3, r7, #4
 8002234:	881b      	ldrh	r3, [r3, #0]
 8002236:	0018      	movs	r0, r3
 8002238:	f7fe fdce 	bl	8000dd8 <__aeabi_i2f>
 800223c:	1c04      	adds	r4, r0, #0
 800223e:	f7ff f9e1 	bl	8001604 <Refresh_ADC_Value>
 8002242:	1c03      	adds	r3, r0, #0
 8002244:	1c19      	adds	r1, r3, #0
 8002246:	1c20      	adds	r0, r4, #0
 8002248:	f7fe fab8 	bl	80007bc <__aeabi_fmul>
 800224c:	1c03      	adds	r3, r0, #0
 800224e:	1c18      	adds	r0, r3, #0
 8002250:	f7fd ffe2 	bl	8000218 <__aeabi_f2uiz>
 8002254:	0003      	movs	r3, r0
 8002256:	0018      	movs	r0, r3
 8002258:	f000 fdb4 	bl	8002dc4 <HAL_Delay>
			for(uint8_t i=1;i<=centro;i++){
 800225c:	197b      	adds	r3, r7, r5
 800225e:	781a      	ldrb	r2, [r3, #0]
 8002260:	197b      	adds	r3, r7, r5
 8002262:	3201      	adds	r2, #1
 8002264:	701a      	strb	r2, [r3, #0]
 8002266:	2309      	movs	r3, #9
 8002268:	18fa      	adds	r2, r7, r3
 800226a:	2308      	movs	r3, #8
 800226c:	18fb      	adds	r3, r7, r3
 800226e:	7812      	ldrb	r2, [r2, #0]
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	429a      	cmp	r2, r3
 8002274:	d9ac      	bls.n	80021d0 <CerrarApagar+0x2a4>
	for(uint8_t v=0;v<veces;v++){
 8002276:	210f      	movs	r1, #15
 8002278:	187b      	adds	r3, r7, r1
 800227a:	781a      	ldrb	r2, [r3, #0]
 800227c:	187b      	adds	r3, r7, r1
 800227e:	3201      	adds	r2, #1
 8002280:	701a      	strb	r2, [r3, #0]
 8002282:	230f      	movs	r3, #15
 8002284:	18fa      	adds	r2, r7, r3
 8002286:	1dfb      	adds	r3, r7, #7
 8002288:	7812      	ldrb	r2, [r2, #0]
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	429a      	cmp	r2, r3
 800228e:	d200      	bcs.n	8002292 <CerrarApagar+0x366>
 8002290:	e660      	b.n	8001f54 <CerrarApagar+0x28>
			}
		}
	}
}
 8002292:	46c0      	nop			; (mov r8, r8)
 8002294:	46c0      	nop			; (mov r8, r8)
 8002296:	46bd      	mov	sp, r7
 8002298:	b005      	add	sp, #20
 800229a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800229c:	20000000 	.word	0x20000000
 80022a0:	20000001 	.word	0x20000001

080022a4 <Girar>:

void Girar(uint8_t veces, uint16_t tiempo){
 80022a4:	b590      	push	{r4, r7, lr}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	0002      	movs	r2, r0
 80022ac:	1dfb      	adds	r3, r7, #7
 80022ae:	701a      	strb	r2, [r3, #0]
 80022b0:	1d3b      	adds	r3, r7, #4
 80022b2:	1c0a      	adds	r2, r1, #0
 80022b4:	801a      	strh	r2, [r3, #0]
	for(uint8_t v=0;v<veces;v++){
 80022b6:	230f      	movs	r3, #15
 80022b8:	18fb      	adds	r3, r7, r3
 80022ba:	2200      	movs	r2, #0
 80022bc:	701a      	strb	r2, [r3, #0]
 80022be:	e035      	b.n	800232c <Girar+0x88>
		AbrirApagar(1,tiempo*Refresh_ADC_Value(),0);
 80022c0:	1d3b      	adds	r3, r7, #4
 80022c2:	881b      	ldrh	r3, [r3, #0]
 80022c4:	0018      	movs	r0, r3
 80022c6:	f7fe fd87 	bl	8000dd8 <__aeabi_i2f>
 80022ca:	1c04      	adds	r4, r0, #0
 80022cc:	f7ff f99a 	bl	8001604 <Refresh_ADC_Value>
 80022d0:	1c03      	adds	r3, r0, #0
 80022d2:	1c19      	adds	r1, r3, #0
 80022d4:	1c20      	adds	r0, r4, #0
 80022d6:	f7fe fa71 	bl	80007bc <__aeabi_fmul>
 80022da:	1c03      	adds	r3, r0, #0
 80022dc:	1c18      	adds	r0, r3, #0
 80022de:	f7fd ff9b 	bl	8000218 <__aeabi_f2uiz>
 80022e2:	0003      	movs	r3, r0
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	2200      	movs	r2, #0
 80022e8:	0019      	movs	r1, r3
 80022ea:	2001      	movs	r0, #1
 80022ec:	f7ff fc58 	bl	8001ba0 <AbrirApagar>
		CerrarApagar(1,tiempo*Refresh_ADC_Value(),0);
 80022f0:	1d3b      	adds	r3, r7, #4
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	0018      	movs	r0, r3
 80022f6:	f7fe fd6f 	bl	8000dd8 <__aeabi_i2f>
 80022fa:	1c04      	adds	r4, r0, #0
 80022fc:	f7ff f982 	bl	8001604 <Refresh_ADC_Value>
 8002300:	1c03      	adds	r3, r0, #0
 8002302:	1c19      	adds	r1, r3, #0
 8002304:	1c20      	adds	r0, r4, #0
 8002306:	f7fe fa59 	bl	80007bc <__aeabi_fmul>
 800230a:	1c03      	adds	r3, r0, #0
 800230c:	1c18      	adds	r0, r3, #0
 800230e:	f7fd ff83 	bl	8000218 <__aeabi_f2uiz>
 8002312:	0003      	movs	r3, r0
 8002314:	b29b      	uxth	r3, r3
 8002316:	2200      	movs	r2, #0
 8002318:	0019      	movs	r1, r3
 800231a:	2001      	movs	r0, #1
 800231c:	f7ff fe06 	bl	8001f2c <CerrarApagar>
	for(uint8_t v=0;v<veces;v++){
 8002320:	210f      	movs	r1, #15
 8002322:	187b      	adds	r3, r7, r1
 8002324:	781a      	ldrb	r2, [r3, #0]
 8002326:	187b      	adds	r3, r7, r1
 8002328:	3201      	adds	r2, #1
 800232a:	701a      	strb	r2, [r3, #0]
 800232c:	230f      	movs	r3, #15
 800232e:	18fa      	adds	r2, r7, r3
 8002330:	1dfb      	adds	r3, r7, #7
 8002332:	7812      	ldrb	r2, [r2, #0]
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	429a      	cmp	r2, r3
 8002338:	d3c2      	bcc.n	80022c0 <Girar+0x1c>
	}
}
 800233a:	46c0      	nop			; (mov r8, r8)
 800233c:	46c0      	nop			; (mov r8, r8)
 800233e:	46bd      	mov	sp, r7
 8002340:	b005      	add	sp, #20
 8002342:	bd90      	pop	{r4, r7, pc}

08002344 <VolumenAbrir>:

void VolumenAbrir(uint8_t veces, uint16_t tiempo, uint16_t tiempo2){
 8002344:	b5b0      	push	{r4, r5, r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	0004      	movs	r4, r0
 800234c:	0008      	movs	r0, r1
 800234e:	0011      	movs	r1, r2
 8002350:	1dfb      	adds	r3, r7, #7
 8002352:	1c22      	adds	r2, r4, #0
 8002354:	701a      	strb	r2, [r3, #0]
 8002356:	1d3b      	adds	r3, r7, #4
 8002358:	1c02      	adds	r2, r0, #0
 800235a:	801a      	strh	r2, [r3, #0]
 800235c:	1cbb      	adds	r3, r7, #2
 800235e:	1c0a      	adds	r2, r1, #0
 8002360:	801a      	strh	r2, [r3, #0]
	for(uint8_t v=0;v<veces;v++){
 8002362:	230f      	movs	r3, #15
 8002364:	18fb      	adds	r3, r7, r3
 8002366:	2200      	movs	r2, #0
 8002368:	701a      	strb	r2, [r3, #0]
 800236a:	e0a3      	b.n	80024b4 <VolumenAbrir+0x170>
		uint8_t l;
		for(uint8_t i=1;i<=cantLeds;i++){
 800236c:	230e      	movs	r3, #14
 800236e:	18fb      	adds	r3, r7, r3
 8002370:	2201      	movs	r2, #1
 8002372:	701a      	strb	r2, [r3, #0]
 8002374:	e07b      	b.n	800246e <VolumenAbrir+0x12a>
			l=i;
 8002376:	250b      	movs	r5, #11
 8002378:	197b      	adds	r3, r7, r5
 800237a:	220e      	movs	r2, #14
 800237c:	18ba      	adds	r2, r7, r2
 800237e:	7812      	ldrb	r2, [r2, #0]
 8002380:	701a      	strb	r2, [r3, #0]
			HAL_Delay(tiempo*Refresh_ADC_Value());
 8002382:	1d3b      	adds	r3, r7, #4
 8002384:	881b      	ldrh	r3, [r3, #0]
 8002386:	0018      	movs	r0, r3
 8002388:	f7fe fd26 	bl	8000dd8 <__aeabi_i2f>
 800238c:	1c04      	adds	r4, r0, #0
 800238e:	f7ff f939 	bl	8001604 <Refresh_ADC_Value>
 8002392:	1c03      	adds	r3, r0, #0
 8002394:	1c19      	adds	r1, r3, #0
 8002396:	1c20      	adds	r0, r4, #0
 8002398:	f7fe fa10 	bl	80007bc <__aeabi_fmul>
 800239c:	1c03      	adds	r3, r0, #0
 800239e:	1c18      	adds	r0, r3, #0
 80023a0:	f7fd ff3a 	bl	8000218 <__aeabi_f2uiz>
 80023a4:	0003      	movs	r3, r0
 80023a6:	0018      	movs	r0, r3
 80023a8:	f000 fd0c 	bl	8002dc4 <HAL_Delay>
			for(uint8_t i=l;i<=cantLeds;i++){
 80023ac:	230d      	movs	r3, #13
 80023ae:	18fb      	adds	r3, r7, r3
 80023b0:	197a      	adds	r2, r7, r5
 80023b2:	7812      	ldrb	r2, [r2, #0]
 80023b4:	701a      	strb	r2, [r3, #0]
 80023b6:	e01f      	b.n	80023f8 <VolumenAbrir+0xb4>
				Encender_1_Led_2(i);
 80023b8:	250d      	movs	r5, #13
 80023ba:	197b      	adds	r3, r7, r5
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	0018      	movs	r0, r3
 80023c0:	f7ff fb0e 	bl	80019e0 <Encender_1_Led_2>
				HAL_Delay(tiempo*Refresh_ADC_Value());
 80023c4:	1d3b      	adds	r3, r7, #4
 80023c6:	881b      	ldrh	r3, [r3, #0]
 80023c8:	0018      	movs	r0, r3
 80023ca:	f7fe fd05 	bl	8000dd8 <__aeabi_i2f>
 80023ce:	1c04      	adds	r4, r0, #0
 80023d0:	f7ff f918 	bl	8001604 <Refresh_ADC_Value>
 80023d4:	1c03      	adds	r3, r0, #0
 80023d6:	1c19      	adds	r1, r3, #0
 80023d8:	1c20      	adds	r0, r4, #0
 80023da:	f7fe f9ef 	bl	80007bc <__aeabi_fmul>
 80023de:	1c03      	adds	r3, r0, #0
 80023e0:	1c18      	adds	r0, r3, #0
 80023e2:	f7fd ff19 	bl	8000218 <__aeabi_f2uiz>
 80023e6:	0003      	movs	r3, r0
 80023e8:	0018      	movs	r0, r3
 80023ea:	f000 fceb 	bl	8002dc4 <HAL_Delay>
			for(uint8_t i=l;i<=cantLeds;i++){
 80023ee:	197b      	adds	r3, r7, r5
 80023f0:	781a      	ldrb	r2, [r3, #0]
 80023f2:	197b      	adds	r3, r7, r5
 80023f4:	3201      	adds	r2, #1
 80023f6:	701a      	strb	r2, [r3, #0]
 80023f8:	4b35      	ldr	r3, [pc, #212]	; (80024d0 <VolumenAbrir+0x18c>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	220d      	movs	r2, #13
 80023fe:	18ba      	adds	r2, r7, r2
 8002400:	7812      	ldrb	r2, [r2, #0]
 8002402:	429a      	cmp	r2, r3
 8002404:	d9d8      	bls.n	80023b8 <VolumenAbrir+0x74>
			}
			for(uint8_t i=cantLeds;i>=l;i--){
 8002406:	230c      	movs	r3, #12
 8002408:	18fb      	adds	r3, r7, r3
 800240a:	4a31      	ldr	r2, [pc, #196]	; (80024d0 <VolumenAbrir+0x18c>)
 800240c:	7812      	ldrb	r2, [r2, #0]
 800240e:	701a      	strb	r2, [r3, #0]
 8002410:	e01f      	b.n	8002452 <VolumenAbrir+0x10e>
				Encender_1_Led_2(i);
 8002412:	250c      	movs	r5, #12
 8002414:	197b      	adds	r3, r7, r5
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	0018      	movs	r0, r3
 800241a:	f7ff fae1 	bl	80019e0 <Encender_1_Led_2>
				HAL_Delay(tiempo*Refresh_ADC_Value());
 800241e:	1d3b      	adds	r3, r7, #4
 8002420:	881b      	ldrh	r3, [r3, #0]
 8002422:	0018      	movs	r0, r3
 8002424:	f7fe fcd8 	bl	8000dd8 <__aeabi_i2f>
 8002428:	1c04      	adds	r4, r0, #0
 800242a:	f7ff f8eb 	bl	8001604 <Refresh_ADC_Value>
 800242e:	1c03      	adds	r3, r0, #0
 8002430:	1c19      	adds	r1, r3, #0
 8002432:	1c20      	adds	r0, r4, #0
 8002434:	f7fe f9c2 	bl	80007bc <__aeabi_fmul>
 8002438:	1c03      	adds	r3, r0, #0
 800243a:	1c18      	adds	r0, r3, #0
 800243c:	f7fd feec 	bl	8000218 <__aeabi_f2uiz>
 8002440:	0003      	movs	r3, r0
 8002442:	0018      	movs	r0, r3
 8002444:	f000 fcbe 	bl	8002dc4 <HAL_Delay>
			for(uint8_t i=cantLeds;i>=l;i--){
 8002448:	197b      	adds	r3, r7, r5
 800244a:	781a      	ldrb	r2, [r3, #0]
 800244c:	197b      	adds	r3, r7, r5
 800244e:	3a01      	subs	r2, #1
 8002450:	701a      	strb	r2, [r3, #0]
 8002452:	230c      	movs	r3, #12
 8002454:	18fa      	adds	r2, r7, r3
 8002456:	230b      	movs	r3, #11
 8002458:	18fb      	adds	r3, r7, r3
 800245a:	7812      	ldrb	r2, [r2, #0]
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	429a      	cmp	r2, r3
 8002460:	d2d7      	bcs.n	8002412 <VolumenAbrir+0xce>
		for(uint8_t i=1;i<=cantLeds;i++){
 8002462:	210e      	movs	r1, #14
 8002464:	187b      	adds	r3, r7, r1
 8002466:	781a      	ldrb	r2, [r3, #0]
 8002468:	187b      	adds	r3, r7, r1
 800246a:	3201      	adds	r2, #1
 800246c:	701a      	strb	r2, [r3, #0]
 800246e:	4b18      	ldr	r3, [pc, #96]	; (80024d0 <VolumenAbrir+0x18c>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	220e      	movs	r2, #14
 8002474:	18ba      	adds	r2, r7, r2
 8002476:	7812      	ldrb	r2, [r2, #0]
 8002478:	429a      	cmp	r2, r3
 800247a:	d800      	bhi.n	800247e <VolumenAbrir+0x13a>
 800247c:	e77b      	b.n	8002376 <VolumenAbrir+0x32>
			}
		}
		HAL_Delay(tiempo2*Refresh_ADC_Value());
 800247e:	1cbb      	adds	r3, r7, #2
 8002480:	881b      	ldrh	r3, [r3, #0]
 8002482:	0018      	movs	r0, r3
 8002484:	f7fe fca8 	bl	8000dd8 <__aeabi_i2f>
 8002488:	1c04      	adds	r4, r0, #0
 800248a:	f7ff f8bb 	bl	8001604 <Refresh_ADC_Value>
 800248e:	1c03      	adds	r3, r0, #0
 8002490:	1c19      	adds	r1, r3, #0
 8002492:	1c20      	adds	r0, r4, #0
 8002494:	f7fe f992 	bl	80007bc <__aeabi_fmul>
 8002498:	1c03      	adds	r3, r0, #0
 800249a:	1c18      	adds	r0, r3, #0
 800249c:	f7fd febc 	bl	8000218 <__aeabi_f2uiz>
 80024a0:	0003      	movs	r3, r0
 80024a2:	0018      	movs	r0, r3
 80024a4:	f000 fc8e 	bl	8002dc4 <HAL_Delay>
	for(uint8_t v=0;v<veces;v++){
 80024a8:	210f      	movs	r1, #15
 80024aa:	187b      	adds	r3, r7, r1
 80024ac:	781a      	ldrb	r2, [r3, #0]
 80024ae:	187b      	adds	r3, r7, r1
 80024b0:	3201      	adds	r2, #1
 80024b2:	701a      	strb	r2, [r3, #0]
 80024b4:	230f      	movs	r3, #15
 80024b6:	18fa      	adds	r2, r7, r3
 80024b8:	1dfb      	adds	r3, r7, #7
 80024ba:	7812      	ldrb	r2, [r2, #0]
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d200      	bcs.n	80024c4 <VolumenAbrir+0x180>
 80024c2:	e753      	b.n	800236c <VolumenAbrir+0x28>
	}
}
 80024c4:	46c0      	nop			; (mov r8, r8)
 80024c6:	46c0      	nop			; (mov r8, r8)
 80024c8:	46bd      	mov	sp, r7
 80024ca:	b004      	add	sp, #16
 80024cc:	bdb0      	pop	{r4, r5, r7, pc}
 80024ce:	46c0      	nop			; (mov r8, r8)
 80024d0:	20000000 	.word	0x20000000

080024d4 <VolumenAbrir2>:

void VolumenAbrir2(uint8_t veces, uint16_t tiempo, uint16_t tiempo2){
 80024d4:	b5b0      	push	{r4, r5, r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	0004      	movs	r4, r0
 80024dc:	0008      	movs	r0, r1
 80024de:	0011      	movs	r1, r2
 80024e0:	1dfb      	adds	r3, r7, #7
 80024e2:	1c22      	adds	r2, r4, #0
 80024e4:	701a      	strb	r2, [r3, #0]
 80024e6:	1d3b      	adds	r3, r7, #4
 80024e8:	1c02      	adds	r2, r0, #0
 80024ea:	801a      	strh	r2, [r3, #0]
 80024ec:	1cbb      	adds	r3, r7, #2
 80024ee:	1c0a      	adds	r2, r1, #0
 80024f0:	801a      	strh	r2, [r3, #0]
	for(uint8_t v=0;v<veces;v++){
 80024f2:	230f      	movs	r3, #15
 80024f4:	18fb      	adds	r3, r7, r3
 80024f6:	2200      	movs	r2, #0
 80024f8:	701a      	strb	r2, [r3, #0]
 80024fa:	e0a3      	b.n	8002644 <VolumenAbrir2+0x170>
		uint8_t l;
		for(uint8_t i=1;i<=cantLeds;i++){
 80024fc:	230e      	movs	r3, #14
 80024fe:	18fb      	adds	r3, r7, r3
 8002500:	2201      	movs	r2, #1
 8002502:	701a      	strb	r2, [r3, #0]
 8002504:	e07b      	b.n	80025fe <VolumenAbrir2+0x12a>
			l=i;
 8002506:	250b      	movs	r5, #11
 8002508:	197b      	adds	r3, r7, r5
 800250a:	220e      	movs	r2, #14
 800250c:	18ba      	adds	r2, r7, r2
 800250e:	7812      	ldrb	r2, [r2, #0]
 8002510:	701a      	strb	r2, [r3, #0]
			HAL_Delay(tiempo*Refresh_ADC_Value());
 8002512:	1d3b      	adds	r3, r7, #4
 8002514:	881b      	ldrh	r3, [r3, #0]
 8002516:	0018      	movs	r0, r3
 8002518:	f7fe fc5e 	bl	8000dd8 <__aeabi_i2f>
 800251c:	1c04      	adds	r4, r0, #0
 800251e:	f7ff f871 	bl	8001604 <Refresh_ADC_Value>
 8002522:	1c03      	adds	r3, r0, #0
 8002524:	1c19      	adds	r1, r3, #0
 8002526:	1c20      	adds	r0, r4, #0
 8002528:	f7fe f948 	bl	80007bc <__aeabi_fmul>
 800252c:	1c03      	adds	r3, r0, #0
 800252e:	1c18      	adds	r0, r3, #0
 8002530:	f7fd fe72 	bl	8000218 <__aeabi_f2uiz>
 8002534:	0003      	movs	r3, r0
 8002536:	0018      	movs	r0, r3
 8002538:	f000 fc44 	bl	8002dc4 <HAL_Delay>
			for(uint8_t i=l;i<=cantLeds;i++){
 800253c:	230d      	movs	r3, #13
 800253e:	18fb      	adds	r3, r7, r3
 8002540:	197a      	adds	r2, r7, r5
 8002542:	7812      	ldrb	r2, [r2, #0]
 8002544:	701a      	strb	r2, [r3, #0]
 8002546:	e01f      	b.n	8002588 <VolumenAbrir2+0xb4>
				Encender_1_Led_2_1(i);
 8002548:	250d      	movs	r5, #13
 800254a:	197b      	adds	r3, r7, r5
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	0018      	movs	r0, r3
 8002550:	f7ff fa7a 	bl	8001a48 <Encender_1_Led_2_1>
				HAL_Delay(tiempo*Refresh_ADC_Value());
 8002554:	1d3b      	adds	r3, r7, #4
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	0018      	movs	r0, r3
 800255a:	f7fe fc3d 	bl	8000dd8 <__aeabi_i2f>
 800255e:	1c04      	adds	r4, r0, #0
 8002560:	f7ff f850 	bl	8001604 <Refresh_ADC_Value>
 8002564:	1c03      	adds	r3, r0, #0
 8002566:	1c19      	adds	r1, r3, #0
 8002568:	1c20      	adds	r0, r4, #0
 800256a:	f7fe f927 	bl	80007bc <__aeabi_fmul>
 800256e:	1c03      	adds	r3, r0, #0
 8002570:	1c18      	adds	r0, r3, #0
 8002572:	f7fd fe51 	bl	8000218 <__aeabi_f2uiz>
 8002576:	0003      	movs	r3, r0
 8002578:	0018      	movs	r0, r3
 800257a:	f000 fc23 	bl	8002dc4 <HAL_Delay>
			for(uint8_t i=l;i<=cantLeds;i++){
 800257e:	197b      	adds	r3, r7, r5
 8002580:	781a      	ldrb	r2, [r3, #0]
 8002582:	197b      	adds	r3, r7, r5
 8002584:	3201      	adds	r2, #1
 8002586:	701a      	strb	r2, [r3, #0]
 8002588:	4b35      	ldr	r3, [pc, #212]	; (8002660 <VolumenAbrir2+0x18c>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	220d      	movs	r2, #13
 800258e:	18ba      	adds	r2, r7, r2
 8002590:	7812      	ldrb	r2, [r2, #0]
 8002592:	429a      	cmp	r2, r3
 8002594:	d9d8      	bls.n	8002548 <VolumenAbrir2+0x74>
			}
			for(uint8_t i=cantLeds;i>=l;i--){
 8002596:	230c      	movs	r3, #12
 8002598:	18fb      	adds	r3, r7, r3
 800259a:	4a31      	ldr	r2, [pc, #196]	; (8002660 <VolumenAbrir2+0x18c>)
 800259c:	7812      	ldrb	r2, [r2, #0]
 800259e:	701a      	strb	r2, [r3, #0]
 80025a0:	e01f      	b.n	80025e2 <VolumenAbrir2+0x10e>
				Encender_1_Led_2_1(i);
 80025a2:	250c      	movs	r5, #12
 80025a4:	197b      	adds	r3, r7, r5
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	0018      	movs	r0, r3
 80025aa:	f7ff fa4d 	bl	8001a48 <Encender_1_Led_2_1>
				HAL_Delay(tiempo*Refresh_ADC_Value());
 80025ae:	1d3b      	adds	r3, r7, #4
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	0018      	movs	r0, r3
 80025b4:	f7fe fc10 	bl	8000dd8 <__aeabi_i2f>
 80025b8:	1c04      	adds	r4, r0, #0
 80025ba:	f7ff f823 	bl	8001604 <Refresh_ADC_Value>
 80025be:	1c03      	adds	r3, r0, #0
 80025c0:	1c19      	adds	r1, r3, #0
 80025c2:	1c20      	adds	r0, r4, #0
 80025c4:	f7fe f8fa 	bl	80007bc <__aeabi_fmul>
 80025c8:	1c03      	adds	r3, r0, #0
 80025ca:	1c18      	adds	r0, r3, #0
 80025cc:	f7fd fe24 	bl	8000218 <__aeabi_f2uiz>
 80025d0:	0003      	movs	r3, r0
 80025d2:	0018      	movs	r0, r3
 80025d4:	f000 fbf6 	bl	8002dc4 <HAL_Delay>
			for(uint8_t i=cantLeds;i>=l;i--){
 80025d8:	197b      	adds	r3, r7, r5
 80025da:	781a      	ldrb	r2, [r3, #0]
 80025dc:	197b      	adds	r3, r7, r5
 80025de:	3a01      	subs	r2, #1
 80025e0:	701a      	strb	r2, [r3, #0]
 80025e2:	230c      	movs	r3, #12
 80025e4:	18fa      	adds	r2, r7, r3
 80025e6:	230b      	movs	r3, #11
 80025e8:	18fb      	adds	r3, r7, r3
 80025ea:	7812      	ldrb	r2, [r2, #0]
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d2d7      	bcs.n	80025a2 <VolumenAbrir2+0xce>
		for(uint8_t i=1;i<=cantLeds;i++){
 80025f2:	210e      	movs	r1, #14
 80025f4:	187b      	adds	r3, r7, r1
 80025f6:	781a      	ldrb	r2, [r3, #0]
 80025f8:	187b      	adds	r3, r7, r1
 80025fa:	3201      	adds	r2, #1
 80025fc:	701a      	strb	r2, [r3, #0]
 80025fe:	4b18      	ldr	r3, [pc, #96]	; (8002660 <VolumenAbrir2+0x18c>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	220e      	movs	r2, #14
 8002604:	18ba      	adds	r2, r7, r2
 8002606:	7812      	ldrb	r2, [r2, #0]
 8002608:	429a      	cmp	r2, r3
 800260a:	d800      	bhi.n	800260e <VolumenAbrir2+0x13a>
 800260c:	e77b      	b.n	8002506 <VolumenAbrir2+0x32>
			}
		}
		HAL_Delay(tiempo2*Refresh_ADC_Value());
 800260e:	1cbb      	adds	r3, r7, #2
 8002610:	881b      	ldrh	r3, [r3, #0]
 8002612:	0018      	movs	r0, r3
 8002614:	f7fe fbe0 	bl	8000dd8 <__aeabi_i2f>
 8002618:	1c04      	adds	r4, r0, #0
 800261a:	f7fe fff3 	bl	8001604 <Refresh_ADC_Value>
 800261e:	1c03      	adds	r3, r0, #0
 8002620:	1c19      	adds	r1, r3, #0
 8002622:	1c20      	adds	r0, r4, #0
 8002624:	f7fe f8ca 	bl	80007bc <__aeabi_fmul>
 8002628:	1c03      	adds	r3, r0, #0
 800262a:	1c18      	adds	r0, r3, #0
 800262c:	f7fd fdf4 	bl	8000218 <__aeabi_f2uiz>
 8002630:	0003      	movs	r3, r0
 8002632:	0018      	movs	r0, r3
 8002634:	f000 fbc6 	bl	8002dc4 <HAL_Delay>
	for(uint8_t v=0;v<veces;v++){
 8002638:	210f      	movs	r1, #15
 800263a:	187b      	adds	r3, r7, r1
 800263c:	781a      	ldrb	r2, [r3, #0]
 800263e:	187b      	adds	r3, r7, r1
 8002640:	3201      	adds	r2, #1
 8002642:	701a      	strb	r2, [r3, #0]
 8002644:	230f      	movs	r3, #15
 8002646:	18fa      	adds	r2, r7, r3
 8002648:	1dfb      	adds	r3, r7, #7
 800264a:	7812      	ldrb	r2, [r2, #0]
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	429a      	cmp	r2, r3
 8002650:	d200      	bcs.n	8002654 <VolumenAbrir2+0x180>
 8002652:	e753      	b.n	80024fc <VolumenAbrir2+0x28>
	}
}
 8002654:	46c0      	nop			; (mov r8, r8)
 8002656:	46c0      	nop			; (mov r8, r8)
 8002658:	46bd      	mov	sp, r7
 800265a:	b004      	add	sp, #16
 800265c:	bdb0      	pop	{r4, r5, r7, pc}
 800265e:	46c0      	nop			; (mov r8, r8)
 8002660:	20000000 	.word	0x20000000

08002664 <ArmarIzquierda>:
			}
		}
	}
}

void ArmarIzquierda(uint8_t veces, uint16_t tiempo, uint16_t tiempo2){
 8002664:	b590      	push	{r4, r7, lr}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	0004      	movs	r4, r0
 800266c:	0008      	movs	r0, r1
 800266e:	0011      	movs	r1, r2
 8002670:	1dfb      	adds	r3, r7, #7
 8002672:	1c22      	adds	r2, r4, #0
 8002674:	701a      	strb	r2, [r3, #0]
 8002676:	1d3b      	adds	r3, r7, #4
 8002678:	1c02      	adds	r2, r0, #0
 800267a:	801a      	strh	r2, [r3, #0]
 800267c:	1cbb      	adds	r3, r7, #2
 800267e:	1c0a      	adds	r2, r1, #0
 8002680:	801a      	strh	r2, [r3, #0]
	for(uint8_t v=0;v<veces;v++){
 8002682:	230f      	movs	r3, #15
 8002684:	18fb      	adds	r3, r7, r3
 8002686:	2200      	movs	r2, #0
 8002688:	701a      	strb	r2, [r3, #0]
 800268a:	e0c1      	b.n	8002810 <ArmarIzquierda+0x1ac>

		uint8_t l=1;
 800268c:	230e      	movs	r3, #14
 800268e:	18fb      	adds	r3, r7, r3
 8002690:	2201      	movs	r2, #1
 8002692:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=cantLeds;i>=1;i--){
 8002694:	230d      	movs	r3, #13
 8002696:	18fb      	adds	r3, r7, r3
 8002698:	4a64      	ldr	r2, [pc, #400]	; (800282c <ArmarIzquierda+0x1c8>)
 800269a:	7812      	ldrb	r2, [r2, #0]
 800269c:	701a      	strb	r2, [r3, #0]
 800269e:	e096      	b.n	80027ce <ArmarIzquierda+0x16a>
			for(uint8_t i=cantLeds;i>=l;i--){
 80026a0:	230c      	movs	r3, #12
 80026a2:	18fb      	adds	r3, r7, r3
 80026a4:	4a61      	ldr	r2, [pc, #388]	; (800282c <ArmarIzquierda+0x1c8>)
 80026a6:	7812      	ldrb	r2, [r2, #0]
 80026a8:	701a      	strb	r2, [r3, #0]
 80026aa:	e06b      	b.n	8002784 <ArmarIzquierda+0x120>
				Encender_1_Led_4(i,l);
 80026ac:	240e      	movs	r4, #14
 80026ae:	193b      	adds	r3, r7, r4
 80026b0:	781a      	ldrb	r2, [r3, #0]
 80026b2:	230c      	movs	r3, #12
 80026b4:	18fb      	adds	r3, r7, r3
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	0011      	movs	r1, r2
 80026ba:	0018      	movs	r0, r3
 80026bc:	f7ff f9fc 	bl	8001ab8 <Encender_1_Led_4>
				if(l<cantLeds/2){
 80026c0:	4b5a      	ldr	r3, [pc, #360]	; (800282c <ArmarIzquierda+0x1c8>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	085b      	lsrs	r3, r3, #1
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	193a      	adds	r2, r7, r4
 80026ca:	7812      	ldrb	r2, [r2, #0]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d215      	bcs.n	80026fc <ArmarIzquierda+0x98>
					HAL_Delay(tiempo*Refresh_ADC_Value());
 80026d0:	1d3b      	adds	r3, r7, #4
 80026d2:	881b      	ldrh	r3, [r3, #0]
 80026d4:	0018      	movs	r0, r3
 80026d6:	f7fe fb7f 	bl	8000dd8 <__aeabi_i2f>
 80026da:	1c04      	adds	r4, r0, #0
 80026dc:	f7fe ff92 	bl	8001604 <Refresh_ADC_Value>
 80026e0:	1c03      	adds	r3, r0, #0
 80026e2:	1c19      	adds	r1, r3, #0
 80026e4:	1c20      	adds	r0, r4, #0
 80026e6:	f7fe f869 	bl	80007bc <__aeabi_fmul>
 80026ea:	1c03      	adds	r3, r0, #0
 80026ec:	1c18      	adds	r0, r3, #0
 80026ee:	f7fd fd93 	bl	8000218 <__aeabi_f2uiz>
 80026f2:	0003      	movs	r3, r0
 80026f4:	0018      	movs	r0, r3
 80026f6:	f000 fb65 	bl	8002dc4 <HAL_Delay>
 80026fa:	e03d      	b.n	8002778 <ArmarIzquierda+0x114>
				}else if(l>=cantLeds-2){
 80026fc:	230e      	movs	r3, #14
 80026fe:	18fb      	adds	r3, r7, r3
 8002700:	781a      	ldrb	r2, [r3, #0]
 8002702:	4b4a      	ldr	r3, [pc, #296]	; (800282c <ArmarIzquierda+0x1c8>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	3b02      	subs	r3, #2
 8002708:	429a      	cmp	r2, r3
 800270a:	db1b      	blt.n	8002744 <ArmarIzquierda+0xe0>
					HAL_Delay(tiempo*Refresh_ADC_Value()*4);
 800270c:	1d3b      	adds	r3, r7, #4
 800270e:	881b      	ldrh	r3, [r3, #0]
 8002710:	0018      	movs	r0, r3
 8002712:	f7fe fb61 	bl	8000dd8 <__aeabi_i2f>
 8002716:	1c04      	adds	r4, r0, #0
 8002718:	f7fe ff74 	bl	8001604 <Refresh_ADC_Value>
 800271c:	1c03      	adds	r3, r0, #0
 800271e:	1c19      	adds	r1, r3, #0
 8002720:	1c20      	adds	r0, r4, #0
 8002722:	f7fe f84b 	bl	80007bc <__aeabi_fmul>
 8002726:	1c03      	adds	r3, r0, #0
 8002728:	2181      	movs	r1, #129	; 0x81
 800272a:	05c9      	lsls	r1, r1, #23
 800272c:	1c18      	adds	r0, r3, #0
 800272e:	f7fe f845 	bl	80007bc <__aeabi_fmul>
 8002732:	1c03      	adds	r3, r0, #0
 8002734:	1c18      	adds	r0, r3, #0
 8002736:	f7fd fd6f 	bl	8000218 <__aeabi_f2uiz>
 800273a:	0003      	movs	r3, r0
 800273c:	0018      	movs	r0, r3
 800273e:	f000 fb41 	bl	8002dc4 <HAL_Delay>
 8002742:	e019      	b.n	8002778 <ArmarIzquierda+0x114>
				}else{
					HAL_Delay(tiempo*Refresh_ADC_Value()*2);
 8002744:	1d3b      	adds	r3, r7, #4
 8002746:	881b      	ldrh	r3, [r3, #0]
 8002748:	0018      	movs	r0, r3
 800274a:	f7fe fb45 	bl	8000dd8 <__aeabi_i2f>
 800274e:	1c04      	adds	r4, r0, #0
 8002750:	f7fe ff58 	bl	8001604 <Refresh_ADC_Value>
 8002754:	1c03      	adds	r3, r0, #0
 8002756:	1c19      	adds	r1, r3, #0
 8002758:	1c20      	adds	r0, r4, #0
 800275a:	f7fe f82f 	bl	80007bc <__aeabi_fmul>
 800275e:	1c03      	adds	r3, r0, #0
 8002760:	1c19      	adds	r1, r3, #0
 8002762:	1c18      	adds	r0, r3, #0
 8002764:	f7fd fd70 	bl	8000248 <__aeabi_fadd>
 8002768:	1c03      	adds	r3, r0, #0
 800276a:	1c18      	adds	r0, r3, #0
 800276c:	f7fd fd54 	bl	8000218 <__aeabi_f2uiz>
 8002770:	0003      	movs	r3, r0
 8002772:	0018      	movs	r0, r3
 8002774:	f000 fb26 	bl	8002dc4 <HAL_Delay>
			for(uint8_t i=cantLeds;i>=l;i--){
 8002778:	210c      	movs	r1, #12
 800277a:	187b      	adds	r3, r7, r1
 800277c:	781a      	ldrb	r2, [r3, #0]
 800277e:	187b      	adds	r3, r7, r1
 8002780:	3a01      	subs	r2, #1
 8002782:	701a      	strb	r2, [r3, #0]
 8002784:	230c      	movs	r3, #12
 8002786:	18fa      	adds	r2, r7, r3
 8002788:	210e      	movs	r1, #14
 800278a:	187b      	adds	r3, r7, r1
 800278c:	7812      	ldrb	r2, [r2, #0]
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	429a      	cmp	r2, r3
 8002792:	d28b      	bcs.n	80026ac <ArmarIzquierda+0x48>
				}
				//HAL_Delay(tiempo);
			}

			if(l>=cantLeds){
 8002794:	4b25      	ldr	r3, [pc, #148]	; (800282c <ArmarIzquierda+0x1c8>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	187a      	adds	r2, r7, r1
 800279a:	7812      	ldrb	r2, [r2, #0]
 800279c:	429a      	cmp	r2, r3
 800279e:	d303      	bcc.n	80027a8 <ArmarIzquierda+0x144>
				l=1;
 80027a0:	187b      	adds	r3, r7, r1
 80027a2:	2201      	movs	r2, #1
 80027a4:	701a      	strb	r2, [r3, #0]
 80027a6:	e00c      	b.n	80027c2 <ArmarIzquierda+0x15e>
			}else{
				ControlLeds(l, 1);
 80027a8:	240e      	movs	r4, #14
 80027aa:	193b      	adds	r3, r7, r4
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	2101      	movs	r1, #1
 80027b0:	0018      	movs	r0, r3
 80027b2:	f7fe ff51 	bl	8001658 <ControlLeds>
				l++;
 80027b6:	0021      	movs	r1, r4
 80027b8:	187b      	adds	r3, r7, r1
 80027ba:	781a      	ldrb	r2, [r3, #0]
 80027bc:	187b      	adds	r3, r7, r1
 80027be:	3201      	adds	r2, #1
 80027c0:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=cantLeds;i>=1;i--){
 80027c2:	210d      	movs	r1, #13
 80027c4:	187b      	adds	r3, r7, r1
 80027c6:	781a      	ldrb	r2, [r3, #0]
 80027c8:	187b      	adds	r3, r7, r1
 80027ca:	3a01      	subs	r2, #1
 80027cc:	701a      	strb	r2, [r3, #0]
 80027ce:	230d      	movs	r3, #13
 80027d0:	18fb      	adds	r3, r7, r3
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d000      	beq.n	80027da <ArmarIzquierda+0x176>
 80027d8:	e762      	b.n	80026a0 <ArmarIzquierda+0x3c>
			}
		}

		HAL_Delay(tiempo2*Refresh_ADC_Value());
 80027da:	1cbb      	adds	r3, r7, #2
 80027dc:	881b      	ldrh	r3, [r3, #0]
 80027de:	0018      	movs	r0, r3
 80027e0:	f7fe fafa 	bl	8000dd8 <__aeabi_i2f>
 80027e4:	1c04      	adds	r4, r0, #0
 80027e6:	f7fe ff0d 	bl	8001604 <Refresh_ADC_Value>
 80027ea:	1c03      	adds	r3, r0, #0
 80027ec:	1c19      	adds	r1, r3, #0
 80027ee:	1c20      	adds	r0, r4, #0
 80027f0:	f7fd ffe4 	bl	80007bc <__aeabi_fmul>
 80027f4:	1c03      	adds	r3, r0, #0
 80027f6:	1c18      	adds	r0, r3, #0
 80027f8:	f7fd fd0e 	bl	8000218 <__aeabi_f2uiz>
 80027fc:	0003      	movs	r3, r0
 80027fe:	0018      	movs	r0, r3
 8002800:	f000 fae0 	bl	8002dc4 <HAL_Delay>
	for(uint8_t v=0;v<veces;v++){
 8002804:	210f      	movs	r1, #15
 8002806:	187b      	adds	r3, r7, r1
 8002808:	781a      	ldrb	r2, [r3, #0]
 800280a:	187b      	adds	r3, r7, r1
 800280c:	3201      	adds	r2, #1
 800280e:	701a      	strb	r2, [r3, #0]
 8002810:	230f      	movs	r3, #15
 8002812:	18fa      	adds	r2, r7, r3
 8002814:	1dfb      	adds	r3, r7, #7
 8002816:	7812      	ldrb	r2, [r2, #0]
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	429a      	cmp	r2, r3
 800281c:	d200      	bcs.n	8002820 <ArmarIzquierda+0x1bc>
 800281e:	e735      	b.n	800268c <ArmarIzquierda+0x28>
	}
}
 8002820:	46c0      	nop			; (mov r8, r8)
 8002822:	46c0      	nop			; (mov r8, r8)
 8002824:	46bd      	mov	sp, r7
 8002826:	b005      	add	sp, #20
 8002828:	bd90      	pop	{r4, r7, pc}
 800282a:	46c0      	nop			; (mov r8, r8)
 800282c:	20000000 	.word	0x20000000

08002830 <ArmarIzquierda2>:

void ArmarIzquierda2(uint8_t veces, uint16_t tiempo, uint16_t tiempo2){
 8002830:	b590      	push	{r4, r7, lr}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	0004      	movs	r4, r0
 8002838:	0008      	movs	r0, r1
 800283a:	0011      	movs	r1, r2
 800283c:	1dfb      	adds	r3, r7, #7
 800283e:	1c22      	adds	r2, r4, #0
 8002840:	701a      	strb	r2, [r3, #0]
 8002842:	1d3b      	adds	r3, r7, #4
 8002844:	1c02      	adds	r2, r0, #0
 8002846:	801a      	strh	r2, [r3, #0]
 8002848:	1cbb      	adds	r3, r7, #2
 800284a:	1c0a      	adds	r2, r1, #0
 800284c:	801a      	strh	r2, [r3, #0]
	for(uint8_t v=0;v<veces;v++){
 800284e:	230f      	movs	r3, #15
 8002850:	18fb      	adds	r3, r7, r3
 8002852:	2200      	movs	r2, #0
 8002854:	701a      	strb	r2, [r3, #0]
 8002856:	e0c2      	b.n	80029de <ArmarIzquierda2+0x1ae>

		uint8_t l=1;
 8002858:	230e      	movs	r3, #14
 800285a:	18fb      	adds	r3, r7, r3
 800285c:	2201      	movs	r2, #1
 800285e:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=cantLeds;i>=1;i--){
 8002860:	230d      	movs	r3, #13
 8002862:	18fb      	adds	r3, r7, r3
 8002864:	4a64      	ldr	r2, [pc, #400]	; (80029f8 <ArmarIzquierda2+0x1c8>)
 8002866:	7812      	ldrb	r2, [r2, #0]
 8002868:	701a      	strb	r2, [r3, #0]
 800286a:	e097      	b.n	800299c <ArmarIzquierda2+0x16c>
			for(uint8_t i=cantLeds;i>=l;i--){
 800286c:	230c      	movs	r3, #12
 800286e:	18fb      	adds	r3, r7, r3
 8002870:	4a61      	ldr	r2, [pc, #388]	; (80029f8 <ArmarIzquierda2+0x1c8>)
 8002872:	7812      	ldrb	r2, [r2, #0]
 8002874:	701a      	strb	r2, [r3, #0]
 8002876:	e06b      	b.n	8002950 <ArmarIzquierda2+0x120>
				Encender_1_Led_4_1(i,l);
 8002878:	240e      	movs	r4, #14
 800287a:	193b      	adds	r3, r7, r4
 800287c:	781a      	ldrb	r2, [r3, #0]
 800287e:	230c      	movs	r3, #12
 8002880:	18fb      	adds	r3, r7, r3
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	0011      	movs	r1, r2
 8002886:	0018      	movs	r0, r3
 8002888:	f7ff f94e 	bl	8001b28 <Encender_1_Led_4_1>
				if(l<cantLeds/2){
 800288c:	4b5a      	ldr	r3, [pc, #360]	; (80029f8 <ArmarIzquierda2+0x1c8>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	085b      	lsrs	r3, r3, #1
 8002892:	b2db      	uxtb	r3, r3
 8002894:	193a      	adds	r2, r7, r4
 8002896:	7812      	ldrb	r2, [r2, #0]
 8002898:	429a      	cmp	r2, r3
 800289a:	d215      	bcs.n	80028c8 <ArmarIzquierda2+0x98>
					HAL_Delay(tiempo*Refresh_ADC_Value());
 800289c:	1d3b      	adds	r3, r7, #4
 800289e:	881b      	ldrh	r3, [r3, #0]
 80028a0:	0018      	movs	r0, r3
 80028a2:	f7fe fa99 	bl	8000dd8 <__aeabi_i2f>
 80028a6:	1c04      	adds	r4, r0, #0
 80028a8:	f7fe feac 	bl	8001604 <Refresh_ADC_Value>
 80028ac:	1c03      	adds	r3, r0, #0
 80028ae:	1c19      	adds	r1, r3, #0
 80028b0:	1c20      	adds	r0, r4, #0
 80028b2:	f7fd ff83 	bl	80007bc <__aeabi_fmul>
 80028b6:	1c03      	adds	r3, r0, #0
 80028b8:	1c18      	adds	r0, r3, #0
 80028ba:	f7fd fcad 	bl	8000218 <__aeabi_f2uiz>
 80028be:	0003      	movs	r3, r0
 80028c0:	0018      	movs	r0, r3
 80028c2:	f000 fa7f 	bl	8002dc4 <HAL_Delay>
 80028c6:	e03d      	b.n	8002944 <ArmarIzquierda2+0x114>
				}else if(l>=cantLeds-2){
 80028c8:	230e      	movs	r3, #14
 80028ca:	18fb      	adds	r3, r7, r3
 80028cc:	781a      	ldrb	r2, [r3, #0]
 80028ce:	4b4a      	ldr	r3, [pc, #296]	; (80029f8 <ArmarIzquierda2+0x1c8>)
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	3b02      	subs	r3, #2
 80028d4:	429a      	cmp	r2, r3
 80028d6:	db1b      	blt.n	8002910 <ArmarIzquierda2+0xe0>
					HAL_Delay(tiempo*Refresh_ADC_Value()*4);
 80028d8:	1d3b      	adds	r3, r7, #4
 80028da:	881b      	ldrh	r3, [r3, #0]
 80028dc:	0018      	movs	r0, r3
 80028de:	f7fe fa7b 	bl	8000dd8 <__aeabi_i2f>
 80028e2:	1c04      	adds	r4, r0, #0
 80028e4:	f7fe fe8e 	bl	8001604 <Refresh_ADC_Value>
 80028e8:	1c03      	adds	r3, r0, #0
 80028ea:	1c19      	adds	r1, r3, #0
 80028ec:	1c20      	adds	r0, r4, #0
 80028ee:	f7fd ff65 	bl	80007bc <__aeabi_fmul>
 80028f2:	1c03      	adds	r3, r0, #0
 80028f4:	2181      	movs	r1, #129	; 0x81
 80028f6:	05c9      	lsls	r1, r1, #23
 80028f8:	1c18      	adds	r0, r3, #0
 80028fa:	f7fd ff5f 	bl	80007bc <__aeabi_fmul>
 80028fe:	1c03      	adds	r3, r0, #0
 8002900:	1c18      	adds	r0, r3, #0
 8002902:	f7fd fc89 	bl	8000218 <__aeabi_f2uiz>
 8002906:	0003      	movs	r3, r0
 8002908:	0018      	movs	r0, r3
 800290a:	f000 fa5b 	bl	8002dc4 <HAL_Delay>
 800290e:	e019      	b.n	8002944 <ArmarIzquierda2+0x114>
				}else{
					HAL_Delay(tiempo*Refresh_ADC_Value()*2);
 8002910:	1d3b      	adds	r3, r7, #4
 8002912:	881b      	ldrh	r3, [r3, #0]
 8002914:	0018      	movs	r0, r3
 8002916:	f7fe fa5f 	bl	8000dd8 <__aeabi_i2f>
 800291a:	1c04      	adds	r4, r0, #0
 800291c:	f7fe fe72 	bl	8001604 <Refresh_ADC_Value>
 8002920:	1c03      	adds	r3, r0, #0
 8002922:	1c19      	adds	r1, r3, #0
 8002924:	1c20      	adds	r0, r4, #0
 8002926:	f7fd ff49 	bl	80007bc <__aeabi_fmul>
 800292a:	1c03      	adds	r3, r0, #0
 800292c:	1c19      	adds	r1, r3, #0
 800292e:	1c18      	adds	r0, r3, #0
 8002930:	f7fd fc8a 	bl	8000248 <__aeabi_fadd>
 8002934:	1c03      	adds	r3, r0, #0
 8002936:	1c18      	adds	r0, r3, #0
 8002938:	f7fd fc6e 	bl	8000218 <__aeabi_f2uiz>
 800293c:	0003      	movs	r3, r0
 800293e:	0018      	movs	r0, r3
 8002940:	f000 fa40 	bl	8002dc4 <HAL_Delay>
			for(uint8_t i=cantLeds;i>=l;i--){
 8002944:	210c      	movs	r1, #12
 8002946:	187b      	adds	r3, r7, r1
 8002948:	781a      	ldrb	r2, [r3, #0]
 800294a:	187b      	adds	r3, r7, r1
 800294c:	3a01      	subs	r2, #1
 800294e:	701a      	strb	r2, [r3, #0]
 8002950:	230c      	movs	r3, #12
 8002952:	18fa      	adds	r2, r7, r3
 8002954:	210e      	movs	r1, #14
 8002956:	187b      	adds	r3, r7, r1
 8002958:	7812      	ldrb	r2, [r2, #0]
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	429a      	cmp	r2, r3
 800295e:	d28b      	bcs.n	8002878 <ArmarIzquierda2+0x48>
				}
				//HAL_Delay(tiempo);
			}

			if(l>=cantLeds){
 8002960:	4b25      	ldr	r3, [pc, #148]	; (80029f8 <ArmarIzquierda2+0x1c8>)
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	187a      	adds	r2, r7, r1
 8002966:	7812      	ldrb	r2, [r2, #0]
 8002968:	429a      	cmp	r2, r3
 800296a:	d303      	bcc.n	8002974 <ArmarIzquierda2+0x144>
				l=1;
 800296c:	187b      	adds	r3, r7, r1
 800296e:	2201      	movs	r2, #1
 8002970:	701a      	strb	r2, [r3, #0]
 8002972:	e00d      	b.n	8002990 <ArmarIzquierda2+0x160>
			}else{
				ControlLeds2(l+10, 1);
 8002974:	240e      	movs	r4, #14
 8002976:	193b      	adds	r3, r7, r4
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	330a      	adds	r3, #10
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2101      	movs	r1, #1
 8002980:	0018      	movs	r0, r3
 8002982:	f7fe fee1 	bl	8001748 <ControlLeds2>
				l++;
 8002986:	193b      	adds	r3, r7, r4
 8002988:	781a      	ldrb	r2, [r3, #0]
 800298a:	193b      	adds	r3, r7, r4
 800298c:	3201      	adds	r2, #1
 800298e:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=cantLeds;i>=1;i--){
 8002990:	210d      	movs	r1, #13
 8002992:	187b      	adds	r3, r7, r1
 8002994:	781a      	ldrb	r2, [r3, #0]
 8002996:	187b      	adds	r3, r7, r1
 8002998:	3a01      	subs	r2, #1
 800299a:	701a      	strb	r2, [r3, #0]
 800299c:	230d      	movs	r3, #13
 800299e:	18fb      	adds	r3, r7, r3
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d000      	beq.n	80029a8 <ArmarIzquierda2+0x178>
 80029a6:	e761      	b.n	800286c <ArmarIzquierda2+0x3c>
			}
		}

		HAL_Delay(tiempo2*Refresh_ADC_Value());
 80029a8:	1cbb      	adds	r3, r7, #2
 80029aa:	881b      	ldrh	r3, [r3, #0]
 80029ac:	0018      	movs	r0, r3
 80029ae:	f7fe fa13 	bl	8000dd8 <__aeabi_i2f>
 80029b2:	1c04      	adds	r4, r0, #0
 80029b4:	f7fe fe26 	bl	8001604 <Refresh_ADC_Value>
 80029b8:	1c03      	adds	r3, r0, #0
 80029ba:	1c19      	adds	r1, r3, #0
 80029bc:	1c20      	adds	r0, r4, #0
 80029be:	f7fd fefd 	bl	80007bc <__aeabi_fmul>
 80029c2:	1c03      	adds	r3, r0, #0
 80029c4:	1c18      	adds	r0, r3, #0
 80029c6:	f7fd fc27 	bl	8000218 <__aeabi_f2uiz>
 80029ca:	0003      	movs	r3, r0
 80029cc:	0018      	movs	r0, r3
 80029ce:	f000 f9f9 	bl	8002dc4 <HAL_Delay>
	for(uint8_t v=0;v<veces;v++){
 80029d2:	210f      	movs	r1, #15
 80029d4:	187b      	adds	r3, r7, r1
 80029d6:	781a      	ldrb	r2, [r3, #0]
 80029d8:	187b      	adds	r3, r7, r1
 80029da:	3201      	adds	r2, #1
 80029dc:	701a      	strb	r2, [r3, #0]
 80029de:	230f      	movs	r3, #15
 80029e0:	18fa      	adds	r2, r7, r3
 80029e2:	1dfb      	adds	r3, r7, #7
 80029e4:	7812      	ldrb	r2, [r2, #0]
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d200      	bcs.n	80029ee <ArmarIzquierda2+0x1be>
 80029ec:	e734      	b.n	8002858 <ArmarIzquierda2+0x28>
	}
}
 80029ee:	46c0      	nop			; (mov r8, r8)
 80029f0:	46c0      	nop			; (mov r8, r8)
 80029f2:	46bd      	mov	sp, r7
 80029f4:	b005      	add	sp, #20
 80029f6:	bd90      	pop	{r4, r7, pc}
 80029f8:	20000000 	.word	0x20000000

080029fc <Blink>:

void Blink(uint8_t veces, uint16_t tiempo){
 80029fc:	b590      	push	{r4, r7, lr}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	0002      	movs	r2, r0
 8002a04:	1dfb      	adds	r3, r7, #7
 8002a06:	701a      	strb	r2, [r3, #0]
 8002a08:	1d3b      	adds	r3, r7, #4
 8002a0a:	1c0a      	adds	r2, r1, #0
 8002a0c:	801a      	strh	r2, [r3, #0]
	for(uint8_t v=0;v<veces;v++){
 8002a0e:	230f      	movs	r3, #15
 8002a10:	18fb      	adds	r3, r7, r3
 8002a12:	2200      	movs	r2, #0
 8002a14:	701a      	strb	r2, [r3, #0]
 8002a16:	e074      	b.n	8002b02 <Blink+0x106>
		for(uint8_t i=1;i<=cantLeds;i++){
 8002a18:	230e      	movs	r3, #14
 8002a1a:	18fb      	adds	r3, r7, r3
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	701a      	strb	r2, [r3, #0]
 8002a20:	e013      	b.n	8002a4a <Blink+0x4e>
			ControlLeds(i, 1);ControlLeds2(i+10,1);
 8002a22:	240e      	movs	r4, #14
 8002a24:	193b      	adds	r3, r7, r4
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2101      	movs	r1, #1
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	f7fe fe14 	bl	8001658 <ControlLeds>
 8002a30:	193b      	adds	r3, r7, r4
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	330a      	adds	r3, #10
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2101      	movs	r1, #1
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	f7fe fe84 	bl	8001748 <ControlLeds2>
		for(uint8_t i=1;i<=cantLeds;i++){
 8002a40:	193b      	adds	r3, r7, r4
 8002a42:	781a      	ldrb	r2, [r3, #0]
 8002a44:	193b      	adds	r3, r7, r4
 8002a46:	3201      	adds	r2, #1
 8002a48:	701a      	strb	r2, [r3, #0]
 8002a4a:	4b34      	ldr	r3, [pc, #208]	; (8002b1c <Blink+0x120>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	220e      	movs	r2, #14
 8002a50:	18ba      	adds	r2, r7, r2
 8002a52:	7812      	ldrb	r2, [r2, #0]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d9e4      	bls.n	8002a22 <Blink+0x26>
		}
		HAL_Delay(tiempo*Refresh_ADC_Value());
 8002a58:	1d3b      	adds	r3, r7, #4
 8002a5a:	881b      	ldrh	r3, [r3, #0]
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	f7fe f9bb 	bl	8000dd8 <__aeabi_i2f>
 8002a62:	1c04      	adds	r4, r0, #0
 8002a64:	f7fe fdce 	bl	8001604 <Refresh_ADC_Value>
 8002a68:	1c03      	adds	r3, r0, #0
 8002a6a:	1c19      	adds	r1, r3, #0
 8002a6c:	1c20      	adds	r0, r4, #0
 8002a6e:	f7fd fea5 	bl	80007bc <__aeabi_fmul>
 8002a72:	1c03      	adds	r3, r0, #0
 8002a74:	1c18      	adds	r0, r3, #0
 8002a76:	f7fd fbcf 	bl	8000218 <__aeabi_f2uiz>
 8002a7a:	0003      	movs	r3, r0
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	f000 f9a1 	bl	8002dc4 <HAL_Delay>
		for(uint8_t i=1;i<=cantLeds;i++){
 8002a82:	230d      	movs	r3, #13
 8002a84:	18fb      	adds	r3, r7, r3
 8002a86:	2201      	movs	r2, #1
 8002a88:	701a      	strb	r2, [r3, #0]
 8002a8a:	e013      	b.n	8002ab4 <Blink+0xb8>
			ControlLeds(i, 0);ControlLeds2(i+10,0);
 8002a8c:	240d      	movs	r4, #13
 8002a8e:	193b      	adds	r3, r7, r4
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	2100      	movs	r1, #0
 8002a94:	0018      	movs	r0, r3
 8002a96:	f7fe fddf 	bl	8001658 <ControlLeds>
 8002a9a:	193b      	adds	r3, r7, r4
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	330a      	adds	r3, #10
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	f7fe fe4f 	bl	8001748 <ControlLeds2>
		for(uint8_t i=1;i<=cantLeds;i++){
 8002aaa:	193b      	adds	r3, r7, r4
 8002aac:	781a      	ldrb	r2, [r3, #0]
 8002aae:	193b      	adds	r3, r7, r4
 8002ab0:	3201      	adds	r2, #1
 8002ab2:	701a      	strb	r2, [r3, #0]
 8002ab4:	4b19      	ldr	r3, [pc, #100]	; (8002b1c <Blink+0x120>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	220d      	movs	r2, #13
 8002aba:	18ba      	adds	r2, r7, r2
 8002abc:	7812      	ldrb	r2, [r2, #0]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d9e4      	bls.n	8002a8c <Blink+0x90>
		}
		HAL_Delay(tiempo*Refresh_ADC_Value()/5);
 8002ac2:	1d3b      	adds	r3, r7, #4
 8002ac4:	881b      	ldrh	r3, [r3, #0]
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	f7fe f986 	bl	8000dd8 <__aeabi_i2f>
 8002acc:	1c04      	adds	r4, r0, #0
 8002ace:	f7fe fd99 	bl	8001604 <Refresh_ADC_Value>
 8002ad2:	1c03      	adds	r3, r0, #0
 8002ad4:	1c19      	adds	r1, r3, #0
 8002ad6:	1c20      	adds	r0, r4, #0
 8002ad8:	f7fd fe70 	bl	80007bc <__aeabi_fmul>
 8002adc:	1c03      	adds	r3, r0, #0
 8002ade:	4910      	ldr	r1, [pc, #64]	; (8002b20 <Blink+0x124>)
 8002ae0:	1c18      	adds	r0, r3, #0
 8002ae2:	f7fd fd51 	bl	8000588 <__aeabi_fdiv>
 8002ae6:	1c03      	adds	r3, r0, #0
 8002ae8:	1c18      	adds	r0, r3, #0
 8002aea:	f7fd fb95 	bl	8000218 <__aeabi_f2uiz>
 8002aee:	0003      	movs	r3, r0
 8002af0:	0018      	movs	r0, r3
 8002af2:	f000 f967 	bl	8002dc4 <HAL_Delay>
	for(uint8_t v=0;v<veces;v++){
 8002af6:	210f      	movs	r1, #15
 8002af8:	187b      	adds	r3, r7, r1
 8002afa:	781a      	ldrb	r2, [r3, #0]
 8002afc:	187b      	adds	r3, r7, r1
 8002afe:	3201      	adds	r2, #1
 8002b00:	701a      	strb	r2, [r3, #0]
 8002b02:	230f      	movs	r3, #15
 8002b04:	18fa      	adds	r2, r7, r3
 8002b06:	1dfb      	adds	r3, r7, #7
 8002b08:	7812      	ldrb	r2, [r2, #0]
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d383      	bcc.n	8002a18 <Blink+0x1c>
	}
}
 8002b10:	46c0      	nop			; (mov r8, r8)
 8002b12:	46c0      	nop			; (mov r8, r8)
 8002b14:	46bd      	mov	sp, r7
 8002b16:	b005      	add	sp, #20
 8002b18:	bd90      	pop	{r4, r7, pc}
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	20000000 	.word	0x20000000
 8002b20:	40a00000 	.word	0x40a00000

08002b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b28:	b672      	cpsid	i
}
 8002b2a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b2c:	e7fe      	b.n	8002b2c <Error_Handler+0x8>
	...

08002b30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b36:	4b0f      	ldr	r3, [pc, #60]	; (8002b74 <HAL_MspInit+0x44>)
 8002b38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b3a:	4b0e      	ldr	r3, [pc, #56]	; (8002b74 <HAL_MspInit+0x44>)
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	641a      	str	r2, [r3, #64]	; 0x40
 8002b42:	4b0c      	ldr	r3, [pc, #48]	; (8002b74 <HAL_MspInit+0x44>)
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	2201      	movs	r2, #1
 8002b48:	4013      	ands	r3, r2
 8002b4a:	607b      	str	r3, [r7, #4]
 8002b4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b4e:	4b09      	ldr	r3, [pc, #36]	; (8002b74 <HAL_MspInit+0x44>)
 8002b50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b52:	4b08      	ldr	r3, [pc, #32]	; (8002b74 <HAL_MspInit+0x44>)
 8002b54:	2180      	movs	r1, #128	; 0x80
 8002b56:	0549      	lsls	r1, r1, #21
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b5c:	4b05      	ldr	r3, [pc, #20]	; (8002b74 <HAL_MspInit+0x44>)
 8002b5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b60:	2380      	movs	r3, #128	; 0x80
 8002b62:	055b      	lsls	r3, r3, #21
 8002b64:	4013      	ands	r3, r2
 8002b66:	603b      	str	r3, [r7, #0]
 8002b68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b6a:	46c0      	nop			; (mov r8, r8)
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	b002      	add	sp, #8
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	46c0      	nop			; (mov r8, r8)
 8002b74:	40021000 	.word	0x40021000

08002b78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b78:	b590      	push	{r4, r7, lr}
 8002b7a:	b08b      	sub	sp, #44	; 0x2c
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b80:	2414      	movs	r4, #20
 8002b82:	193b      	adds	r3, r7, r4
 8002b84:	0018      	movs	r0, r3
 8002b86:	2314      	movs	r3, #20
 8002b88:	001a      	movs	r2, r3
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	f001 ff8c 	bl	8004aa8 <memset>
  if(hadc->Instance==ADC1)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a1b      	ldr	r2, [pc, #108]	; (8002c04 <HAL_ADC_MspInit+0x8c>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d130      	bne.n	8002bfc <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002b9a:	4b1b      	ldr	r3, [pc, #108]	; (8002c08 <HAL_ADC_MspInit+0x90>)
 8002b9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b9e:	4b1a      	ldr	r3, [pc, #104]	; (8002c08 <HAL_ADC_MspInit+0x90>)
 8002ba0:	2180      	movs	r1, #128	; 0x80
 8002ba2:	0349      	lsls	r1, r1, #13
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	641a      	str	r2, [r3, #64]	; 0x40
 8002ba8:	4b17      	ldr	r3, [pc, #92]	; (8002c08 <HAL_ADC_MspInit+0x90>)
 8002baa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bac:	2380      	movs	r3, #128	; 0x80
 8002bae:	035b      	lsls	r3, r3, #13
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]
 8002bb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bb6:	4b14      	ldr	r3, [pc, #80]	; (8002c08 <HAL_ADC_MspInit+0x90>)
 8002bb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bba:	4b13      	ldr	r3, [pc, #76]	; (8002c08 <HAL_ADC_MspInit+0x90>)
 8002bbc:	2102      	movs	r1, #2
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	635a      	str	r2, [r3, #52]	; 0x34
 8002bc2:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <HAL_ADC_MspInit+0x90>)
 8002bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	4013      	ands	r3, r2
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB7     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002bce:	193b      	adds	r3, r7, r4
 8002bd0:	2280      	movs	r2, #128	; 0x80
 8002bd2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bd4:	193b      	adds	r3, r7, r4
 8002bd6:	2203      	movs	r2, #3
 8002bd8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bda:	193b      	adds	r3, r7, r4
 8002bdc:	2200      	movs	r2, #0
 8002bde:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002be0:	193b      	adds	r3, r7, r4
 8002be2:	4a0a      	ldr	r2, [pc, #40]	; (8002c0c <HAL_ADC_MspInit+0x94>)
 8002be4:	0019      	movs	r1, r3
 8002be6:	0010      	movs	r0, r2
 8002be8:	f001 f902 	bl	8003df0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8002bec:	2200      	movs	r2, #0
 8002bee:	2100      	movs	r1, #0
 8002bf0:	200c      	movs	r0, #12
 8002bf2:	f001 f8cb 	bl	8003d8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8002bf6:	200c      	movs	r0, #12
 8002bf8:	f001 f8dd 	bl	8003db6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002bfc:	46c0      	nop			; (mov r8, r8)
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	b00b      	add	sp, #44	; 0x2c
 8002c02:	bd90      	pop	{r4, r7, pc}
 8002c04:	40012400 	.word	0x40012400
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	50000400 	.word	0x50000400

08002c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c14:	e7fe      	b.n	8002c14 <NMI_Handler+0x4>

08002c16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c1a:	e7fe      	b.n	8002c1a <HardFault_Handler+0x4>

08002c1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002c20:	46c0      	nop			; (mov r8, r8)
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c2a:	46c0      	nop			; (mov r8, r8)
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c34:	f000 f8aa 	bl	8002d8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c38:	46c0      	nop			; (mov r8, r8)
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
	...

08002c40 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002c44:	4b03      	ldr	r3, [pc, #12]	; (8002c54 <ADC1_IRQHandler+0x14>)
 8002c46:	0018      	movs	r0, r3
 8002c48:	f000 fc4e 	bl	80034e8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8002c4c:	46c0      	nop			; (mov r8, r8)
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	46c0      	nop			; (mov r8, r8)
 8002c54:	2000002c 	.word	0x2000002c

08002c58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c5c:	46c0      	nop			; (mov r8, r8)
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
	...

08002c64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002c64:	480d      	ldr	r0, [pc, #52]	; (8002c9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002c66:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002c68:	f7ff fff6 	bl	8002c58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c6c:	480c      	ldr	r0, [pc, #48]	; (8002ca0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002c6e:	490d      	ldr	r1, [pc, #52]	; (8002ca4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c70:	4a0d      	ldr	r2, [pc, #52]	; (8002ca8 <LoopForever+0xe>)
  movs r3, #0
 8002c72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c74:	e002      	b.n	8002c7c <LoopCopyDataInit>

08002c76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c7a:	3304      	adds	r3, #4

08002c7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c80:	d3f9      	bcc.n	8002c76 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c82:	4a0a      	ldr	r2, [pc, #40]	; (8002cac <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c84:	4c0a      	ldr	r4, [pc, #40]	; (8002cb0 <LoopForever+0x16>)
  movs r3, #0
 8002c86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c88:	e001      	b.n	8002c8e <LoopFillZerobss>

08002c8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c8c:	3204      	adds	r2, #4

08002c8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c90:	d3fb      	bcc.n	8002c8a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002c92:	f001 ff11 	bl	8004ab8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002c96:	f7fe fa41 	bl	800111c <main>

08002c9a <LoopForever>:

LoopForever:
  b LoopForever
 8002c9a:	e7fe      	b.n	8002c9a <LoopForever>
  ldr   r0, =_estack
 8002c9c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ca4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002ca8:	08004c48 	.word	0x08004c48
  ldr r2, =_sbss
 8002cac:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002cb0:	2000009c 	.word	0x2000009c

08002cb4 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002cb4:	e7fe      	b.n	8002cb4 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>
	...

08002cb8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002cbe:	1dfb      	adds	r3, r7, #7
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cc4:	4b0b      	ldr	r3, [pc, #44]	; (8002cf4 <HAL_Init+0x3c>)
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	4b0a      	ldr	r3, [pc, #40]	; (8002cf4 <HAL_Init+0x3c>)
 8002cca:	2180      	movs	r1, #128	; 0x80
 8002ccc:	0049      	lsls	r1, r1, #1
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002cd2:	2003      	movs	r0, #3
 8002cd4:	f000 f810 	bl	8002cf8 <HAL_InitTick>
 8002cd8:	1e03      	subs	r3, r0, #0
 8002cda:	d003      	beq.n	8002ce4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002cdc:	1dfb      	adds	r3, r7, #7
 8002cde:	2201      	movs	r2, #1
 8002ce0:	701a      	strb	r2, [r3, #0]
 8002ce2:	e001      	b.n	8002ce8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002ce4:	f7ff ff24 	bl	8002b30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ce8:	1dfb      	adds	r3, r7, #7
 8002cea:	781b      	ldrb	r3, [r3, #0]
}
 8002cec:	0018      	movs	r0, r3
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	b002      	add	sp, #8
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	40022000 	.word	0x40022000

08002cf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cf8:	b590      	push	{r4, r7, lr}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002d00:	230f      	movs	r3, #15
 8002d02:	18fb      	adds	r3, r7, r3
 8002d04:	2200      	movs	r2, #0
 8002d06:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002d08:	4b1d      	ldr	r3, [pc, #116]	; (8002d80 <HAL_InitTick+0x88>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d02b      	beq.n	8002d68 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002d10:	4b1c      	ldr	r3, [pc, #112]	; (8002d84 <HAL_InitTick+0x8c>)
 8002d12:	681c      	ldr	r4, [r3, #0]
 8002d14:	4b1a      	ldr	r3, [pc, #104]	; (8002d80 <HAL_InitTick+0x88>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	0019      	movs	r1, r3
 8002d1a:	23fa      	movs	r3, #250	; 0xfa
 8002d1c:	0098      	lsls	r0, r3, #2
 8002d1e:	f7fd f9ef 	bl	8000100 <__udivsi3>
 8002d22:	0003      	movs	r3, r0
 8002d24:	0019      	movs	r1, r3
 8002d26:	0020      	movs	r0, r4
 8002d28:	f7fd f9ea 	bl	8000100 <__udivsi3>
 8002d2c:	0003      	movs	r3, r0
 8002d2e:	0018      	movs	r0, r3
 8002d30:	f001 f851 	bl	8003dd6 <HAL_SYSTICK_Config>
 8002d34:	1e03      	subs	r3, r0, #0
 8002d36:	d112      	bne.n	8002d5e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b03      	cmp	r3, #3
 8002d3c:	d80a      	bhi.n	8002d54 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	2301      	movs	r3, #1
 8002d42:	425b      	negs	r3, r3
 8002d44:	2200      	movs	r2, #0
 8002d46:	0018      	movs	r0, r3
 8002d48:	f001 f820 	bl	8003d8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d4c:	4b0e      	ldr	r3, [pc, #56]	; (8002d88 <HAL_InitTick+0x90>)
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	e00d      	b.n	8002d70 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002d54:	230f      	movs	r3, #15
 8002d56:	18fb      	adds	r3, r7, r3
 8002d58:	2201      	movs	r2, #1
 8002d5a:	701a      	strb	r2, [r3, #0]
 8002d5c:	e008      	b.n	8002d70 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002d5e:	230f      	movs	r3, #15
 8002d60:	18fb      	adds	r3, r7, r3
 8002d62:	2201      	movs	r2, #1
 8002d64:	701a      	strb	r2, [r3, #0]
 8002d66:	e003      	b.n	8002d70 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d68:	230f      	movs	r3, #15
 8002d6a:	18fb      	adds	r3, r7, r3
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002d70:	230f      	movs	r3, #15
 8002d72:	18fb      	adds	r3, r7, r3
 8002d74:	781b      	ldrb	r3, [r3, #0]
}
 8002d76:	0018      	movs	r0, r3
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	b005      	add	sp, #20
 8002d7c:	bd90      	pop	{r4, r7, pc}
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	2000000c 	.word	0x2000000c
 8002d84:	20000004 	.word	0x20000004
 8002d88:	20000008 	.word	0x20000008

08002d8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d90:	4b05      	ldr	r3, [pc, #20]	; (8002da8 <HAL_IncTick+0x1c>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	001a      	movs	r2, r3
 8002d96:	4b05      	ldr	r3, [pc, #20]	; (8002dac <HAL_IncTick+0x20>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	18d2      	adds	r2, r2, r3
 8002d9c:	4b03      	ldr	r3, [pc, #12]	; (8002dac <HAL_IncTick+0x20>)
 8002d9e:	601a      	str	r2, [r3, #0]
}
 8002da0:	46c0      	nop			; (mov r8, r8)
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	46c0      	nop			; (mov r8, r8)
 8002da8:	2000000c 	.word	0x2000000c
 8002dac:	20000098 	.word	0x20000098

08002db0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  return uwTick;
 8002db4:	4b02      	ldr	r3, [pc, #8]	; (8002dc0 <HAL_GetTick+0x10>)
 8002db6:	681b      	ldr	r3, [r3, #0]
}
 8002db8:	0018      	movs	r0, r3
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	46c0      	nop			; (mov r8, r8)
 8002dc0:	20000098 	.word	0x20000098

08002dc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dcc:	f7ff fff0 	bl	8002db0 <HAL_GetTick>
 8002dd0:	0003      	movs	r3, r0
 8002dd2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	3301      	adds	r3, #1
 8002ddc:	d005      	beq.n	8002dea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dde:	4b0a      	ldr	r3, [pc, #40]	; (8002e08 <HAL_Delay+0x44>)
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	001a      	movs	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	189b      	adds	r3, r3, r2
 8002de8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002dea:	46c0      	nop			; (mov r8, r8)
 8002dec:	f7ff ffe0 	bl	8002db0 <HAL_GetTick>
 8002df0:	0002      	movs	r2, r0
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d8f7      	bhi.n	8002dec <HAL_Delay+0x28>
  {
  }
}
 8002dfc:	46c0      	nop			; (mov r8, r8)
 8002dfe:	46c0      	nop			; (mov r8, r8)
 8002e00:	46bd      	mov	sp, r7
 8002e02:	b004      	add	sp, #16
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	46c0      	nop			; (mov r8, r8)
 8002e08:	2000000c 	.word	0x2000000c

08002e0c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a05      	ldr	r2, [pc, #20]	; (8002e30 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002e1c:	401a      	ands	r2, r3
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	431a      	orrs	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	601a      	str	r2, [r3, #0]
}
 8002e26:	46c0      	nop			; (mov r8, r8)
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	b002      	add	sp, #8
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	46c0      	nop			; (mov r8, r8)
 8002e30:	fe3fffff 	.word	0xfe3fffff

08002e34 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	23e0      	movs	r3, #224	; 0xe0
 8002e42:	045b      	lsls	r3, r3, #17
 8002e44:	4013      	ands	r3, r2
}
 8002e46:	0018      	movs	r0, r3
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	b002      	add	sp, #8
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b084      	sub	sp, #16
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	60f8      	str	r0, [r7, #12]
 8002e56:	60b9      	str	r1, [r7, #8]
 8002e58:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	2104      	movs	r1, #4
 8002e62:	400a      	ands	r2, r1
 8002e64:	2107      	movs	r1, #7
 8002e66:	4091      	lsls	r1, r2
 8002e68:	000a      	movs	r2, r1
 8002e6a:	43d2      	mvns	r2, r2
 8002e6c:	401a      	ands	r2, r3
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	2104      	movs	r1, #4
 8002e72:	400b      	ands	r3, r1
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	4099      	lsls	r1, r3
 8002e78:	000b      	movs	r3, r1
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002e80:	46c0      	nop			; (mov r8, r8)
 8002e82:	46bd      	mov	sp, r7
 8002e84:	b004      	add	sp, #16
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	2104      	movs	r1, #4
 8002e9a:	400a      	ands	r2, r1
 8002e9c:	2107      	movs	r1, #7
 8002e9e:	4091      	lsls	r1, r2
 8002ea0:	000a      	movs	r2, r1
 8002ea2:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	2104      	movs	r1, #4
 8002ea8:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002eaa:	40da      	lsrs	r2, r3
 8002eac:	0013      	movs	r3, r2
}
 8002eae:	0018      	movs	r0, r3
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	b002      	add	sp, #8
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b082      	sub	sp, #8
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	23c0      	movs	r3, #192	; 0xc0
 8002ec4:	011b      	lsls	r3, r3, #4
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	d101      	bne.n	8002ece <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e000      	b.n	8002ed0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	0018      	movs	r0, r3
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	b002      	add	sp, #8
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee8:	68ba      	ldr	r2, [r7, #8]
 8002eea:	211f      	movs	r1, #31
 8002eec:	400a      	ands	r2, r1
 8002eee:	210f      	movs	r1, #15
 8002ef0:	4091      	lsls	r1, r2
 8002ef2:	000a      	movs	r2, r1
 8002ef4:	43d2      	mvns	r2, r2
 8002ef6:	401a      	ands	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	0e9b      	lsrs	r3, r3, #26
 8002efc:	210f      	movs	r1, #15
 8002efe:	4019      	ands	r1, r3
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	201f      	movs	r0, #31
 8002f04:	4003      	ands	r3, r0
 8002f06:	4099      	lsls	r1, r3
 8002f08:	000b      	movs	r3, r1
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002f10:	46c0      	nop			; (mov r8, r8)
 8002f12:	46bd      	mov	sp, r7
 8002f14:	b004      	add	sp, #16
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	035b      	lsls	r3, r3, #13
 8002f2a:	0b5b      	lsrs	r3, r3, #13
 8002f2c:	431a      	orrs	r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f32:	46c0      	nop			; (mov r8, r8)
 8002f34:	46bd      	mov	sp, r7
 8002f36:	b002      	add	sp, #8
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b082      	sub	sp, #8
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
 8002f42:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	0352      	lsls	r2, r2, #13
 8002f4c:	0b52      	lsrs	r2, r2, #13
 8002f4e:	43d2      	mvns	r2, r2
 8002f50:	401a      	ands	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f56:	46c0      	nop			; (mov r8, r8)
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	b002      	add	sp, #8
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b082      	sub	sp, #8
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	2203      	movs	r2, #3
 8002f6c:	4013      	ands	r3, r2
}
 8002f6e:	0018      	movs	r0, r3
 8002f70:	46bd      	mov	sp, r7
 8002f72:	b002      	add	sp, #8
 8002f74:	bd80      	pop	{r7, pc}
	...

08002f78 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	68ba      	ldr	r2, [r7, #8]
 8002f8a:	0212      	lsls	r2, r2, #8
 8002f8c:	43d2      	mvns	r2, r2
 8002f8e:	401a      	ands	r2, r3
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	021b      	lsls	r3, r3, #8
 8002f94:	6879      	ldr	r1, [r7, #4]
 8002f96:	400b      	ands	r3, r1
 8002f98:	4904      	ldr	r1, [pc, #16]	; (8002fac <LL_ADC_SetChannelSamplingTime+0x34>)
 8002f9a:	400b      	ands	r3, r1
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002fa2:	46c0      	nop			; (mov r8, r8)
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	b004      	add	sp, #16
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	46c0      	nop			; (mov r8, r8)
 8002fac:	07ffff00 	.word	0x07ffff00

08002fb0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	4a05      	ldr	r2, [pc, #20]	; (8002fd4 <LL_ADC_EnableInternalRegulator+0x24>)
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	2280      	movs	r2, #128	; 0x80
 8002fc2:	0552      	lsls	r2, r2, #21
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002fca:	46c0      	nop			; (mov r8, r8)
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	b002      	add	sp, #8
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	46c0      	nop			; (mov r8, r8)
 8002fd4:	6fffffe8 	.word	0x6fffffe8

08002fd8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	2380      	movs	r3, #128	; 0x80
 8002fe6:	055b      	lsls	r3, r3, #21
 8002fe8:	401a      	ands	r2, r3
 8002fea:	2380      	movs	r3, #128	; 0x80
 8002fec:	055b      	lsls	r3, r3, #21
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d101      	bne.n	8002ff6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e000      	b.n	8002ff8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	b002      	add	sp, #8
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	4a04      	ldr	r2, [pc, #16]	; (8003020 <LL_ADC_Enable+0x20>)
 800300e:	4013      	ands	r3, r2
 8003010:	2201      	movs	r2, #1
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003018:	46c0      	nop			; (mov r8, r8)
 800301a:	46bd      	mov	sp, r7
 800301c:	b002      	add	sp, #8
 800301e:	bd80      	pop	{r7, pc}
 8003020:	7fffffe8 	.word	0x7fffffe8

08003024 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	2201      	movs	r2, #1
 8003032:	4013      	ands	r3, r2
 8003034:	2b01      	cmp	r3, #1
 8003036:	d101      	bne.n	800303c <LL_ADC_IsEnabled+0x18>
 8003038:	2301      	movs	r3, #1
 800303a:	e000      	b.n	800303e <LL_ADC_IsEnabled+0x1a>
 800303c:	2300      	movs	r3, #0
}
 800303e:	0018      	movs	r0, r3
 8003040:	46bd      	mov	sp, r7
 8003042:	b002      	add	sp, #8
 8003044:	bd80      	pop	{r7, pc}
	...

08003048 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	4a04      	ldr	r2, [pc, #16]	; (8003068 <LL_ADC_REG_StartConversion+0x20>)
 8003056:	4013      	ands	r3, r2
 8003058:	2204      	movs	r2, #4
 800305a:	431a      	orrs	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003060:	46c0      	nop			; (mov r8, r8)
 8003062:	46bd      	mov	sp, r7
 8003064:	b002      	add	sp, #8
 8003066:	bd80      	pop	{r7, pc}
 8003068:	7fffffe8 	.word	0x7fffffe8

0800306c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	2204      	movs	r2, #4
 800307a:	4013      	ands	r3, r2
 800307c:	2b04      	cmp	r3, #4
 800307e:	d101      	bne.n	8003084 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003080:	2301      	movs	r3, #1
 8003082:	e000      	b.n	8003086 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003084:	2300      	movs	r3, #0
}
 8003086:	0018      	movs	r0, r3
 8003088:	46bd      	mov	sp, r7
 800308a:	b002      	add	sp, #8
 800308c:	bd80      	pop	{r7, pc}
	...

08003090 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b088      	sub	sp, #32
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003098:	231f      	movs	r3, #31
 800309a:	18fb      	adds	r3, r7, r3
 800309c:	2200      	movs	r2, #0
 800309e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80030a0:	2300      	movs	r3, #0
 80030a2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80030a4:	2300      	movs	r3, #0
 80030a6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80030a8:	2300      	movs	r3, #0
 80030aa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e17f      	b.n	80033b6 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10a      	bne.n	80030d4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	0018      	movs	r0, r3
 80030c2:	f7ff fd59 	bl	8002b78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2254      	movs	r2, #84	; 0x54
 80030d0:	2100      	movs	r1, #0
 80030d2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	0018      	movs	r0, r3
 80030da:	f7ff ff7d 	bl	8002fd8 <LL_ADC_IsInternalRegulatorEnabled>
 80030de:	1e03      	subs	r3, r0, #0
 80030e0:	d115      	bne.n	800310e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	0018      	movs	r0, r3
 80030e8:	f7ff ff62 	bl	8002fb0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030ec:	4bb4      	ldr	r3, [pc, #720]	; (80033c0 <HAL_ADC_Init+0x330>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	49b4      	ldr	r1, [pc, #720]	; (80033c4 <HAL_ADC_Init+0x334>)
 80030f2:	0018      	movs	r0, r3
 80030f4:	f7fd f804 	bl	8000100 <__udivsi3>
 80030f8:	0003      	movs	r3, r0
 80030fa:	3301      	adds	r3, #1
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003100:	e002      	b.n	8003108 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	3b01      	subs	r3, #1
 8003106:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1f9      	bne.n	8003102 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	0018      	movs	r0, r3
 8003114:	f7ff ff60 	bl	8002fd8 <LL_ADC_IsInternalRegulatorEnabled>
 8003118:	1e03      	subs	r3, r0, #0
 800311a:	d10f      	bne.n	800313c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003120:	2210      	movs	r2, #16
 8003122:	431a      	orrs	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800312c:	2201      	movs	r2, #1
 800312e:	431a      	orrs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003134:	231f      	movs	r3, #31
 8003136:	18fb      	adds	r3, r7, r3
 8003138:	2201      	movs	r2, #1
 800313a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	0018      	movs	r0, r3
 8003142:	f7ff ff93 	bl	800306c <LL_ADC_REG_IsConversionOngoing>
 8003146:	0003      	movs	r3, r0
 8003148:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800314e:	2210      	movs	r2, #16
 8003150:	4013      	ands	r3, r2
 8003152:	d000      	beq.n	8003156 <HAL_ADC_Init+0xc6>
 8003154:	e122      	b.n	800339c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d000      	beq.n	800315e <HAL_ADC_Init+0xce>
 800315c:	e11e      	b.n	800339c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003162:	4a99      	ldr	r2, [pc, #612]	; (80033c8 <HAL_ADC_Init+0x338>)
 8003164:	4013      	ands	r3, r2
 8003166:	2202      	movs	r2, #2
 8003168:	431a      	orrs	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	0018      	movs	r0, r3
 8003174:	f7ff ff56 	bl	8003024 <LL_ADC_IsEnabled>
 8003178:	1e03      	subs	r3, r0, #0
 800317a:	d000      	beq.n	800317e <HAL_ADC_Init+0xee>
 800317c:	e0ad      	b.n	80032da <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	7e1b      	ldrb	r3, [r3, #24]
 8003186:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003188:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	7e5b      	ldrb	r3, [r3, #25]
 800318e:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003190:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	7e9b      	ldrb	r3, [r3, #26]
 8003196:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003198:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d002      	beq.n	80031a8 <HAL_ADC_Init+0x118>
 80031a2:	2380      	movs	r3, #128	; 0x80
 80031a4:	015b      	lsls	r3, r3, #5
 80031a6:	e000      	b.n	80031aa <HAL_ADC_Init+0x11a>
 80031a8:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80031aa:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80031b0:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	da04      	bge.n	80031c4 <HAL_ADC_Init+0x134>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	085b      	lsrs	r3, r3, #1
 80031c2:	e001      	b.n	80031c8 <HAL_ADC_Init+0x138>
 80031c4:	2380      	movs	r3, #128	; 0x80
 80031c6:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80031c8:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	212c      	movs	r1, #44	; 0x2c
 80031ce:	5c5b      	ldrb	r3, [r3, r1]
 80031d0:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80031d2:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2220      	movs	r2, #32
 80031de:	5c9b      	ldrb	r3, [r3, r2]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d115      	bne.n	8003210 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	7e9b      	ldrb	r3, [r3, #26]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d105      	bne.n	80031f8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	2280      	movs	r2, #128	; 0x80
 80031f0:	0252      	lsls	r2, r2, #9
 80031f2:	4313      	orrs	r3, r2
 80031f4:	61bb      	str	r3, [r7, #24]
 80031f6:	e00b      	b.n	8003210 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fc:	2220      	movs	r2, #32
 80031fe:	431a      	orrs	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003208:	2201      	movs	r2, #1
 800320a:	431a      	orrs	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00a      	beq.n	800322e <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800321c:	23e0      	movs	r3, #224	; 0xe0
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003226:	4313      	orrs	r3, r2
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	4313      	orrs	r3, r2
 800322c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	4a65      	ldr	r2, [pc, #404]	; (80033cc <HAL_ADC_Init+0x33c>)
 8003236:	4013      	ands	r3, r2
 8003238:	0019      	movs	r1, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	430a      	orrs	r2, r1
 8003242:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	0f9b      	lsrs	r3, r3, #30
 800324a:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003250:	4313      	orrs	r3, r2
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	4313      	orrs	r3, r2
 8003256:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	223c      	movs	r2, #60	; 0x3c
 800325c:	5c9b      	ldrb	r3, [r3, r2]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d111      	bne.n	8003286 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	0f9b      	lsrs	r3, r3, #30
 8003268:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800326e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003274:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800327a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	4313      	orrs	r3, r2
 8003280:	2201      	movs	r2, #1
 8003282:	4313      	orrs	r3, r2
 8003284:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	4a50      	ldr	r2, [pc, #320]	; (80033d0 <HAL_ADC_Init+0x340>)
 800328e:	4013      	ands	r3, r2
 8003290:	0019      	movs	r1, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	430a      	orrs	r2, r1
 800329a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	23c0      	movs	r3, #192	; 0xc0
 80032a2:	061b      	lsls	r3, r3, #24
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d018      	beq.n	80032da <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80032ac:	2380      	movs	r3, #128	; 0x80
 80032ae:	05db      	lsls	r3, r3, #23
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d012      	beq.n	80032da <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80032b8:	2380      	movs	r3, #128	; 0x80
 80032ba:	061b      	lsls	r3, r3, #24
 80032bc:	429a      	cmp	r2, r3
 80032be:	d00c      	beq.n	80032da <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80032c0:	4b44      	ldr	r3, [pc, #272]	; (80033d4 <HAL_ADC_Init+0x344>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a44      	ldr	r2, [pc, #272]	; (80033d8 <HAL_ADC_Init+0x348>)
 80032c6:	4013      	ands	r3, r2
 80032c8:	0019      	movs	r1, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	23f0      	movs	r3, #240	; 0xf0
 80032d0:	039b      	lsls	r3, r3, #14
 80032d2:	401a      	ands	r2, r3
 80032d4:	4b3f      	ldr	r3, [pc, #252]	; (80033d4 <HAL_ADC_Init+0x344>)
 80032d6:	430a      	orrs	r2, r1
 80032d8:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6818      	ldr	r0, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e2:	001a      	movs	r2, r3
 80032e4:	2100      	movs	r1, #0
 80032e6:	f7ff fdb2 	bl	8002e4e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6818      	ldr	r0, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f2:	493a      	ldr	r1, [pc, #232]	; (80033dc <HAL_ADC_Init+0x34c>)
 80032f4:	001a      	movs	r2, r3
 80032f6:	f7ff fdaa 	bl	8002e4e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d109      	bne.n	8003316 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2110      	movs	r1, #16
 800330e:	4249      	negs	r1, r1
 8003310:	430a      	orrs	r2, r1
 8003312:	629a      	str	r2, [r3, #40]	; 0x28
 8003314:	e018      	b.n	8003348 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	691a      	ldr	r2, [r3, #16]
 800331a:	2380      	movs	r3, #128	; 0x80
 800331c:	039b      	lsls	r3, r3, #14
 800331e:	429a      	cmp	r2, r3
 8003320:	d112      	bne.n	8003348 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	69db      	ldr	r3, [r3, #28]
 800332c:	3b01      	subs	r3, #1
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	221c      	movs	r2, #28
 8003332:	4013      	ands	r3, r2
 8003334:	2210      	movs	r2, #16
 8003336:	4252      	negs	r2, r2
 8003338:	409a      	lsls	r2, r3
 800333a:	0011      	movs	r1, r2
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	430a      	orrs	r2, r1
 8003346:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2100      	movs	r1, #0
 800334e:	0018      	movs	r0, r3
 8003350:	f7ff fd9a 	bl	8002e88 <LL_ADC_GetSamplingTimeCommonChannels>
 8003354:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800335a:	429a      	cmp	r2, r3
 800335c:	d10b      	bne.n	8003376 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003368:	2203      	movs	r2, #3
 800336a:	4393      	bics	r3, r2
 800336c:	2201      	movs	r2, #1
 800336e:	431a      	orrs	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003374:	e01c      	b.n	80033b0 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337a:	2212      	movs	r2, #18
 800337c:	4393      	bics	r3, r2
 800337e:	2210      	movs	r2, #16
 8003380:	431a      	orrs	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800338a:	2201      	movs	r2, #1
 800338c:	431a      	orrs	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003392:	231f      	movs	r3, #31
 8003394:	18fb      	adds	r3, r7, r3
 8003396:	2201      	movs	r2, #1
 8003398:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800339a:	e009      	b.n	80033b0 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a0:	2210      	movs	r2, #16
 80033a2:	431a      	orrs	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80033a8:	231f      	movs	r3, #31
 80033aa:	18fb      	adds	r3, r7, r3
 80033ac:	2201      	movs	r2, #1
 80033ae:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80033b0:	231f      	movs	r3, #31
 80033b2:	18fb      	adds	r3, r7, r3
 80033b4:	781b      	ldrb	r3, [r3, #0]
}
 80033b6:	0018      	movs	r0, r3
 80033b8:	46bd      	mov	sp, r7
 80033ba:	b008      	add	sp, #32
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	46c0      	nop			; (mov r8, r8)
 80033c0:	20000004 	.word	0x20000004
 80033c4:	00030d40 	.word	0x00030d40
 80033c8:	fffffefd 	.word	0xfffffefd
 80033cc:	fffe0201 	.word	0xfffe0201
 80033d0:	1ffffc02 	.word	0x1ffffc02
 80033d4:	40012708 	.word	0x40012708
 80033d8:	ffc3ffff 	.word	0xffc3ffff
 80033dc:	07ffff04 	.word	0x07ffff04

080033e0 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80033e0:	b5b0      	push	{r4, r5, r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	0018      	movs	r0, r3
 80033ee:	f7ff fe3d 	bl	800306c <LL_ADC_REG_IsConversionOngoing>
 80033f2:	1e03      	subs	r3, r0, #0
 80033f4:	d15f      	bne.n	80034b6 <HAL_ADC_Start_IT+0xd6>
  {
    __HAL_LOCK(hadc);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2254      	movs	r2, #84	; 0x54
 80033fa:	5c9b      	ldrb	r3, [r3, r2]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d101      	bne.n	8003404 <HAL_ADC_Start_IT+0x24>
 8003400:	2302      	movs	r3, #2
 8003402:	e05f      	b.n	80034c4 <HAL_ADC_Start_IT+0xe4>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2254      	movs	r2, #84	; 0x54
 8003408:	2101      	movs	r1, #1
 800340a:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800340c:	250f      	movs	r5, #15
 800340e:	197c      	adds	r4, r7, r5
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	0018      	movs	r0, r3
 8003414:	f000 fb68 	bl	8003ae8 <ADC_Enable>
 8003418:	0003      	movs	r3, r0
 800341a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800341c:	197b      	adds	r3, r7, r5
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d143      	bne.n	80034ac <HAL_ADC_Start_IT+0xcc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003428:	4a28      	ldr	r2, [pc, #160]	; (80034cc <HAL_ADC_Start_IT+0xec>)
 800342a:	4013      	ands	r3, r2
 800342c:	2280      	movs	r2, #128	; 0x80
 800342e:	0052      	lsls	r2, r2, #1
 8003430:	431a      	orrs	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY);


      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	221c      	movs	r2, #28
 8003442:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2254      	movs	r2, #84	; 0x54
 8003448:	2100      	movs	r1, #0
 800344a:	5499      	strb	r1, [r3, r2]

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	211c      	movs	r1, #28
 8003458:	438a      	bics	r2, r1
 800345a:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	2b08      	cmp	r3, #8
 8003462:	d108      	bne.n	8003476 <HAL_ADC_Start_IT+0x96>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2108      	movs	r1, #8
 8003470:	430a      	orrs	r2, r1
 8003472:	605a      	str	r2, [r3, #4]
          break;
 8003474:	e008      	b.n	8003488 <HAL_ADC_Start_IT+0xa8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2104      	movs	r1, #4
 8003482:	430a      	orrs	r2, r1
 8003484:	605a      	str	r2, [r3, #4]
          break;
 8003486:	46c0      	nop			; (mov r8, r8)

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348c:	2b00      	cmp	r3, #0
 800348e:	d107      	bne.n	80034a0 <HAL_ADC_Start_IT+0xc0>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685a      	ldr	r2, [r3, #4]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2110      	movs	r1, #16
 800349c:	430a      	orrs	r2, r1
 800349e:	605a      	str	r2, [r3, #4]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	0018      	movs	r0, r3
 80034a6:	f7ff fdcf 	bl	8003048 <LL_ADC_REG_StartConversion>
 80034aa:	e008      	b.n	80034be <HAL_ADC_Start_IT+0xde>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2254      	movs	r2, #84	; 0x54
 80034b0:	2100      	movs	r1, #0
 80034b2:	5499      	strb	r1, [r3, r2]
 80034b4:	e003      	b.n	80034be <HAL_ADC_Start_IT+0xde>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80034b6:	230f      	movs	r3, #15
 80034b8:	18fb      	adds	r3, r7, r3
 80034ba:	2202      	movs	r2, #2
 80034bc:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80034be:	230f      	movs	r3, #15
 80034c0:	18fb      	adds	r3, r7, r3
 80034c2:	781b      	ldrb	r3, [r3, #0]
}
 80034c4:	0018      	movs	r0, r3
 80034c6:	46bd      	mov	sp, r7
 80034c8:	b004      	add	sp, #16
 80034ca:	bdb0      	pop	{r4, r5, r7, pc}
 80034cc:	fffff0fe 	.word	0xfffff0fe

080034d0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80034de:	0018      	movs	r0, r3
 80034e0:	46bd      	mov	sp, r7
 80034e2:	b002      	add	sp, #8
 80034e4:	bd80      	pop	{r7, pc}
	...

080034e8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80034f0:	2300      	movs	r3, #0
 80034f2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	2202      	movs	r2, #2
 8003508:	4013      	ands	r3, r2
 800350a:	d017      	beq.n	800353c <HAL_ADC_IRQHandler+0x54>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2202      	movs	r2, #2
 8003510:	4013      	ands	r3, r2
 8003512:	d013      	beq.n	800353c <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003518:	2210      	movs	r2, #16
 800351a:	4013      	ands	r3, r2
 800351c:	d106      	bne.n	800352c <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003522:	2280      	movs	r2, #128	; 0x80
 8003524:	0112      	lsls	r2, r2, #4
 8003526:	431a      	orrs	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	0018      	movs	r0, r3
 8003530:	f000 fb70 	bl	8003c14 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2202      	movs	r2, #2
 800353a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	2204      	movs	r2, #4
 8003540:	4013      	ands	r3, r2
 8003542:	d003      	beq.n	800354c <HAL_ADC_IRQHandler+0x64>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2204      	movs	r2, #4
 8003548:	4013      	ands	r3, r2
 800354a:	d107      	bne.n	800355c <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	2208      	movs	r2, #8
 8003550:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003552:	d04d      	beq.n	80035f0 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2208      	movs	r2, #8
 8003558:	4013      	ands	r3, r2
 800355a:	d049      	beq.n	80035f0 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003560:	2210      	movs	r2, #16
 8003562:	4013      	ands	r3, r2
 8003564:	d106      	bne.n	8003574 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356a:	2280      	movs	r2, #128	; 0x80
 800356c:	0092      	lsls	r2, r2, #2
 800356e:	431a      	orrs	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	0018      	movs	r0, r3
 800357a:	f7ff fc9c 	bl	8002eb6 <LL_ADC_REG_IsTriggerSourceSWStart>
 800357e:	1e03      	subs	r3, r0, #0
 8003580:	d02e      	beq.n	80035e0 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	7e9b      	ldrb	r3, [r3, #26]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d12a      	bne.n	80035e0 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2208      	movs	r2, #8
 8003592:	4013      	ands	r3, r2
 8003594:	2b08      	cmp	r3, #8
 8003596:	d123      	bne.n	80035e0 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	0018      	movs	r0, r3
 800359e:	f7ff fd65 	bl	800306c <LL_ADC_REG_IsConversionOngoing>
 80035a2:	1e03      	subs	r3, r0, #0
 80035a4:	d110      	bne.n	80035c8 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	685a      	ldr	r2, [r3, #4]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	210c      	movs	r1, #12
 80035b2:	438a      	bics	r2, r1
 80035b4:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ba:	4a56      	ldr	r2, [pc, #344]	; (8003714 <HAL_ADC_IRQHandler+0x22c>)
 80035bc:	4013      	ands	r3, r2
 80035be:	2201      	movs	r2, #1
 80035c0:	431a      	orrs	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	659a      	str	r2, [r3, #88]	; 0x58
 80035c6:	e00b      	b.n	80035e0 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035cc:	2220      	movs	r2, #32
 80035ce:	431a      	orrs	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d8:	2201      	movs	r2, #1
 80035da:	431a      	orrs	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	0018      	movs	r0, r3
 80035e4:	f7fd ffe4 	bl	80015b0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	220c      	movs	r2, #12
 80035ee:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	2280      	movs	r2, #128	; 0x80
 80035f4:	4013      	ands	r3, r2
 80035f6:	d012      	beq.n	800361e <HAL_ADC_IRQHandler+0x136>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2280      	movs	r2, #128	; 0x80
 80035fc:	4013      	ands	r3, r2
 80035fe:	d00e      	beq.n	800361e <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003604:	2280      	movs	r2, #128	; 0x80
 8003606:	0252      	lsls	r2, r2, #9
 8003608:	431a      	orrs	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	0018      	movs	r0, r3
 8003612:	f000 f881 	bl	8003718 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2280      	movs	r2, #128	; 0x80
 800361c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	2380      	movs	r3, #128	; 0x80
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	4013      	ands	r3, r2
 8003626:	d014      	beq.n	8003652 <HAL_ADC_IRQHandler+0x16a>
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	2380      	movs	r3, #128	; 0x80
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	4013      	ands	r3, r2
 8003630:	d00f      	beq.n	8003652 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003636:	2280      	movs	r2, #128	; 0x80
 8003638:	0292      	lsls	r2, r2, #10
 800363a:	431a      	orrs	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	0018      	movs	r0, r3
 8003644:	f000 fad6 	bl	8003bf4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2280      	movs	r2, #128	; 0x80
 800364e:	0052      	lsls	r2, r2, #1
 8003650:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	2380      	movs	r3, #128	; 0x80
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4013      	ands	r3, r2
 800365a:	d014      	beq.n	8003686 <HAL_ADC_IRQHandler+0x19e>
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	2380      	movs	r3, #128	; 0x80
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4013      	ands	r3, r2
 8003664:	d00f      	beq.n	8003686 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800366a:	2280      	movs	r2, #128	; 0x80
 800366c:	02d2      	lsls	r2, r2, #11
 800366e:	431a      	orrs	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	0018      	movs	r0, r3
 8003678:	f000 fac4 	bl	8003c04 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2280      	movs	r2, #128	; 0x80
 8003682:	0092      	lsls	r2, r2, #2
 8003684:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	2210      	movs	r2, #16
 800368a:	4013      	ands	r3, r2
 800368c:	d02b      	beq.n	80036e6 <HAL_ADC_IRQHandler+0x1fe>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2210      	movs	r2, #16
 8003692:	4013      	ands	r3, r2
 8003694:	d027      	beq.n	80036e6 <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369a:	2b00      	cmp	r3, #0
 800369c:	d102      	bne.n	80036a4 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 800369e:	2301      	movs	r3, #1
 80036a0:	617b      	str	r3, [r7, #20]
 80036a2:	e008      	b.n	80036b6 <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	0018      	movs	r0, r3
 80036aa:	f7ff fc58 	bl	8002f5e <LL_ADC_REG_GetDMATransfer>
 80036ae:	1e03      	subs	r3, r0, #0
 80036b0:	d001      	beq.n	80036b6 <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 80036b2:	2301      	movs	r3, #1
 80036b4:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d110      	bne.n	80036de <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c0:	2280      	movs	r2, #128	; 0x80
 80036c2:	00d2      	lsls	r2, r2, #3
 80036c4:	431a      	orrs	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ce:	2202      	movs	r2, #2
 80036d0:	431a      	orrs	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	0018      	movs	r0, r3
 80036da:	f000 f825 	bl	8003728 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2210      	movs	r2, #16
 80036e4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	2380      	movs	r3, #128	; 0x80
 80036ea:	019b      	lsls	r3, r3, #6
 80036ec:	4013      	ands	r3, r2
 80036ee:	d00d      	beq.n	800370c <HAL_ADC_IRQHandler+0x224>
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	2380      	movs	r3, #128	; 0x80
 80036f4:	019b      	lsls	r3, r3, #6
 80036f6:	4013      	ands	r3, r2
 80036f8:	d008      	beq.n	800370c <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	0018      	movs	r0, r3
 80036fe:	f000 fa91 	bl	8003c24 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2280      	movs	r2, #128	; 0x80
 8003708:	0192      	lsls	r2, r2, #6
 800370a:	601a      	str	r2, [r3, #0]
  }
}
 800370c:	46c0      	nop			; (mov r8, r8)
 800370e:	46bd      	mov	sp, r7
 8003710:	b006      	add	sp, #24
 8003712:	bd80      	pop	{r7, pc}
 8003714:	fffffefe 	.word	0xfffffefe

08003718 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003720:	46c0      	nop			; (mov r8, r8)
 8003722:	46bd      	mov	sp, r7
 8003724:	b002      	add	sp, #8
 8003726:	bd80      	pop	{r7, pc}

08003728 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003730:	46c0      	nop			; (mov r8, r8)
 8003732:	46bd      	mov	sp, r7
 8003734:	b002      	add	sp, #8
 8003736:	bd80      	pop	{r7, pc}

08003738 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003742:	2317      	movs	r3, #23
 8003744:	18fb      	adds	r3, r7, r3
 8003746:	2200      	movs	r2, #0
 8003748:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800374a:	2300      	movs	r3, #0
 800374c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2254      	movs	r2, #84	; 0x54
 8003752:	5c9b      	ldrb	r3, [r3, r2]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d101      	bne.n	800375c <HAL_ADC_ConfigChannel+0x24>
 8003758:	2302      	movs	r3, #2
 800375a:	e1c0      	b.n	8003ade <HAL_ADC_ConfigChannel+0x3a6>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2254      	movs	r2, #84	; 0x54
 8003760:	2101      	movs	r1, #1
 8003762:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	0018      	movs	r0, r3
 800376a:	f7ff fc7f 	bl	800306c <LL_ADC_REG_IsConversionOngoing>
 800376e:	1e03      	subs	r3, r0, #0
 8003770:	d000      	beq.n	8003774 <HAL_ADC_ConfigChannel+0x3c>
 8003772:	e1a3      	b.n	8003abc <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	2b02      	cmp	r3, #2
 800377a:	d100      	bne.n	800377e <HAL_ADC_ConfigChannel+0x46>
 800377c:	e143      	b.n	8003a06 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691a      	ldr	r2, [r3, #16]
 8003782:	2380      	movs	r3, #128	; 0x80
 8003784:	061b      	lsls	r3, r3, #24
 8003786:	429a      	cmp	r2, r3
 8003788:	d004      	beq.n	8003794 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800378e:	4ac1      	ldr	r2, [pc, #772]	; (8003a94 <HAL_ADC_ConfigChannel+0x35c>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d108      	bne.n	80037a6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	0019      	movs	r1, r3
 800379e:	0010      	movs	r0, r2
 80037a0:	f7ff fbba 	bl	8002f18 <LL_ADC_REG_SetSequencerChAdd>
 80037a4:	e0c9      	b.n	800393a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	211f      	movs	r1, #31
 80037b0:	400b      	ands	r3, r1
 80037b2:	210f      	movs	r1, #15
 80037b4:	4099      	lsls	r1, r3
 80037b6:	000b      	movs	r3, r1
 80037b8:	43db      	mvns	r3, r3
 80037ba:	4013      	ands	r3, r2
 80037bc:	0019      	movs	r1, r3
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	035b      	lsls	r3, r3, #13
 80037c4:	0b5b      	lsrs	r3, r3, #13
 80037c6:	d105      	bne.n	80037d4 <HAL_ADC_ConfigChannel+0x9c>
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	0e9b      	lsrs	r3, r3, #26
 80037ce:	221f      	movs	r2, #31
 80037d0:	4013      	ands	r3, r2
 80037d2:	e098      	b.n	8003906 <HAL_ADC_ConfigChannel+0x1ce>
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2201      	movs	r2, #1
 80037da:	4013      	ands	r3, r2
 80037dc:	d000      	beq.n	80037e0 <HAL_ADC_ConfigChannel+0xa8>
 80037de:	e091      	b.n	8003904 <HAL_ADC_ConfigChannel+0x1cc>
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2202      	movs	r2, #2
 80037e6:	4013      	ands	r3, r2
 80037e8:	d000      	beq.n	80037ec <HAL_ADC_ConfigChannel+0xb4>
 80037ea:	e089      	b.n	8003900 <HAL_ADC_ConfigChannel+0x1c8>
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2204      	movs	r2, #4
 80037f2:	4013      	ands	r3, r2
 80037f4:	d000      	beq.n	80037f8 <HAL_ADC_ConfigChannel+0xc0>
 80037f6:	e081      	b.n	80038fc <HAL_ADC_ConfigChannel+0x1c4>
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2208      	movs	r2, #8
 80037fe:	4013      	ands	r3, r2
 8003800:	d000      	beq.n	8003804 <HAL_ADC_ConfigChannel+0xcc>
 8003802:	e079      	b.n	80038f8 <HAL_ADC_ConfigChannel+0x1c0>
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2210      	movs	r2, #16
 800380a:	4013      	ands	r3, r2
 800380c:	d000      	beq.n	8003810 <HAL_ADC_ConfigChannel+0xd8>
 800380e:	e071      	b.n	80038f4 <HAL_ADC_ConfigChannel+0x1bc>
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2220      	movs	r2, #32
 8003816:	4013      	ands	r3, r2
 8003818:	d000      	beq.n	800381c <HAL_ADC_ConfigChannel+0xe4>
 800381a:	e069      	b.n	80038f0 <HAL_ADC_ConfigChannel+0x1b8>
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2240      	movs	r2, #64	; 0x40
 8003822:	4013      	ands	r3, r2
 8003824:	d000      	beq.n	8003828 <HAL_ADC_ConfigChannel+0xf0>
 8003826:	e061      	b.n	80038ec <HAL_ADC_ConfigChannel+0x1b4>
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2280      	movs	r2, #128	; 0x80
 800382e:	4013      	ands	r3, r2
 8003830:	d000      	beq.n	8003834 <HAL_ADC_ConfigChannel+0xfc>
 8003832:	e059      	b.n	80038e8 <HAL_ADC_ConfigChannel+0x1b0>
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	2380      	movs	r3, #128	; 0x80
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	4013      	ands	r3, r2
 800383e:	d151      	bne.n	80038e4 <HAL_ADC_ConfigChannel+0x1ac>
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	2380      	movs	r3, #128	; 0x80
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	4013      	ands	r3, r2
 800384a:	d149      	bne.n	80038e0 <HAL_ADC_ConfigChannel+0x1a8>
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	2380      	movs	r3, #128	; 0x80
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	4013      	ands	r3, r2
 8003856:	d141      	bne.n	80038dc <HAL_ADC_ConfigChannel+0x1a4>
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	2380      	movs	r3, #128	; 0x80
 800385e:	011b      	lsls	r3, r3, #4
 8003860:	4013      	ands	r3, r2
 8003862:	d139      	bne.n	80038d8 <HAL_ADC_ConfigChannel+0x1a0>
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	2380      	movs	r3, #128	; 0x80
 800386a:	015b      	lsls	r3, r3, #5
 800386c:	4013      	ands	r3, r2
 800386e:	d131      	bne.n	80038d4 <HAL_ADC_ConfigChannel+0x19c>
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	2380      	movs	r3, #128	; 0x80
 8003876:	019b      	lsls	r3, r3, #6
 8003878:	4013      	ands	r3, r2
 800387a:	d129      	bne.n	80038d0 <HAL_ADC_ConfigChannel+0x198>
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	2380      	movs	r3, #128	; 0x80
 8003882:	01db      	lsls	r3, r3, #7
 8003884:	4013      	ands	r3, r2
 8003886:	d121      	bne.n	80038cc <HAL_ADC_ConfigChannel+0x194>
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	2380      	movs	r3, #128	; 0x80
 800388e:	021b      	lsls	r3, r3, #8
 8003890:	4013      	ands	r3, r2
 8003892:	d119      	bne.n	80038c8 <HAL_ADC_ConfigChannel+0x190>
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	2380      	movs	r3, #128	; 0x80
 800389a:	025b      	lsls	r3, r3, #9
 800389c:	4013      	ands	r3, r2
 800389e:	d111      	bne.n	80038c4 <HAL_ADC_ConfigChannel+0x18c>
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	2380      	movs	r3, #128	; 0x80
 80038a6:	029b      	lsls	r3, r3, #10
 80038a8:	4013      	ands	r3, r2
 80038aa:	d109      	bne.n	80038c0 <HAL_ADC_ConfigChannel+0x188>
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	2380      	movs	r3, #128	; 0x80
 80038b2:	02db      	lsls	r3, r3, #11
 80038b4:	4013      	ands	r3, r2
 80038b6:	d001      	beq.n	80038bc <HAL_ADC_ConfigChannel+0x184>
 80038b8:	2312      	movs	r3, #18
 80038ba:	e024      	b.n	8003906 <HAL_ADC_ConfigChannel+0x1ce>
 80038bc:	2300      	movs	r3, #0
 80038be:	e022      	b.n	8003906 <HAL_ADC_ConfigChannel+0x1ce>
 80038c0:	2311      	movs	r3, #17
 80038c2:	e020      	b.n	8003906 <HAL_ADC_ConfigChannel+0x1ce>
 80038c4:	2310      	movs	r3, #16
 80038c6:	e01e      	b.n	8003906 <HAL_ADC_ConfigChannel+0x1ce>
 80038c8:	230f      	movs	r3, #15
 80038ca:	e01c      	b.n	8003906 <HAL_ADC_ConfigChannel+0x1ce>
 80038cc:	230e      	movs	r3, #14
 80038ce:	e01a      	b.n	8003906 <HAL_ADC_ConfigChannel+0x1ce>
 80038d0:	230d      	movs	r3, #13
 80038d2:	e018      	b.n	8003906 <HAL_ADC_ConfigChannel+0x1ce>
 80038d4:	230c      	movs	r3, #12
 80038d6:	e016      	b.n	8003906 <HAL_ADC_ConfigChannel+0x1ce>
 80038d8:	230b      	movs	r3, #11
 80038da:	e014      	b.n	8003906 <HAL_ADC_ConfigChannel+0x1ce>
 80038dc:	230a      	movs	r3, #10
 80038de:	e012      	b.n	8003906 <HAL_ADC_ConfigChannel+0x1ce>
 80038e0:	2309      	movs	r3, #9
 80038e2:	e010      	b.n	8003906 <HAL_ADC_ConfigChannel+0x1ce>
 80038e4:	2308      	movs	r3, #8
 80038e6:	e00e      	b.n	8003906 <HAL_ADC_ConfigChannel+0x1ce>
 80038e8:	2307      	movs	r3, #7
 80038ea:	e00c      	b.n	8003906 <HAL_ADC_ConfigChannel+0x1ce>
 80038ec:	2306      	movs	r3, #6
 80038ee:	e00a      	b.n	8003906 <HAL_ADC_ConfigChannel+0x1ce>
 80038f0:	2305      	movs	r3, #5
 80038f2:	e008      	b.n	8003906 <HAL_ADC_ConfigChannel+0x1ce>
 80038f4:	2304      	movs	r3, #4
 80038f6:	e006      	b.n	8003906 <HAL_ADC_ConfigChannel+0x1ce>
 80038f8:	2303      	movs	r3, #3
 80038fa:	e004      	b.n	8003906 <HAL_ADC_ConfigChannel+0x1ce>
 80038fc:	2302      	movs	r3, #2
 80038fe:	e002      	b.n	8003906 <HAL_ADC_ConfigChannel+0x1ce>
 8003900:	2301      	movs	r3, #1
 8003902:	e000      	b.n	8003906 <HAL_ADC_ConfigChannel+0x1ce>
 8003904:	2300      	movs	r3, #0
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	6852      	ldr	r2, [r2, #4]
 800390a:	201f      	movs	r0, #31
 800390c:	4002      	ands	r2, r0
 800390e:	4093      	lsls	r3, r2
 8003910:	000a      	movs	r2, r1
 8003912:	431a      	orrs	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	089b      	lsrs	r3, r3, #2
 800391e:	1c5a      	adds	r2, r3, #1
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	69db      	ldr	r3, [r3, #28]
 8003924:	429a      	cmp	r2, r3
 8003926:	d808      	bhi.n	800393a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6818      	ldr	r0, [r3, #0]
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	6859      	ldr	r1, [r3, #4]
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	001a      	movs	r2, r3
 8003936:	f7ff facf 	bl	8002ed8 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6818      	ldr	r0, [r3, #0]
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	6819      	ldr	r1, [r3, #0]
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	001a      	movs	r2, r3
 8003948:	f7ff fb16 	bl	8002f78 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	db00      	blt.n	8003956 <HAL_ADC_ConfigChannel+0x21e>
 8003954:	e0bc      	b.n	8003ad0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003956:	4b50      	ldr	r3, [pc, #320]	; (8003a98 <HAL_ADC_ConfigChannel+0x360>)
 8003958:	0018      	movs	r0, r3
 800395a:	f7ff fa6b 	bl	8002e34 <LL_ADC_GetCommonPathInternalCh>
 800395e:	0003      	movs	r3, r0
 8003960:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a4d      	ldr	r2, [pc, #308]	; (8003a9c <HAL_ADC_ConfigChannel+0x364>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d122      	bne.n	80039b2 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	2380      	movs	r3, #128	; 0x80
 8003970:	041b      	lsls	r3, r3, #16
 8003972:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003974:	d11d      	bne.n	80039b2 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	2280      	movs	r2, #128	; 0x80
 800397a:	0412      	lsls	r2, r2, #16
 800397c:	4313      	orrs	r3, r2
 800397e:	4a46      	ldr	r2, [pc, #280]	; (8003a98 <HAL_ADC_ConfigChannel+0x360>)
 8003980:	0019      	movs	r1, r3
 8003982:	0010      	movs	r0, r2
 8003984:	f7ff fa42 	bl	8002e0c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003988:	4b45      	ldr	r3, [pc, #276]	; (8003aa0 <HAL_ADC_ConfigChannel+0x368>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4945      	ldr	r1, [pc, #276]	; (8003aa4 <HAL_ADC_ConfigChannel+0x36c>)
 800398e:	0018      	movs	r0, r3
 8003990:	f7fc fbb6 	bl	8000100 <__udivsi3>
 8003994:	0003      	movs	r3, r0
 8003996:	1c5a      	adds	r2, r3, #1
 8003998:	0013      	movs	r3, r2
 800399a:	005b      	lsls	r3, r3, #1
 800399c:	189b      	adds	r3, r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80039a2:	e002      	b.n	80039aa <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	3b01      	subs	r3, #1
 80039a8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1f9      	bne.n	80039a4 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80039b0:	e08e      	b.n	8003ad0 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a3c      	ldr	r2, [pc, #240]	; (8003aa8 <HAL_ADC_ConfigChannel+0x370>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d10e      	bne.n	80039da <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	2380      	movs	r3, #128	; 0x80
 80039c0:	045b      	lsls	r3, r3, #17
 80039c2:	4013      	ands	r3, r2
 80039c4:	d109      	bne.n	80039da <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	2280      	movs	r2, #128	; 0x80
 80039ca:	0452      	lsls	r2, r2, #17
 80039cc:	4313      	orrs	r3, r2
 80039ce:	4a32      	ldr	r2, [pc, #200]	; (8003a98 <HAL_ADC_ConfigChannel+0x360>)
 80039d0:	0019      	movs	r1, r3
 80039d2:	0010      	movs	r0, r2
 80039d4:	f7ff fa1a 	bl	8002e0c <LL_ADC_SetCommonPathInternalCh>
 80039d8:	e07a      	b.n	8003ad0 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a33      	ldr	r2, [pc, #204]	; (8003aac <HAL_ADC_ConfigChannel+0x374>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d000      	beq.n	80039e6 <HAL_ADC_ConfigChannel+0x2ae>
 80039e4:	e074      	b.n	8003ad0 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	2380      	movs	r3, #128	; 0x80
 80039ea:	03db      	lsls	r3, r3, #15
 80039ec:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80039ee:	d000      	beq.n	80039f2 <HAL_ADC_ConfigChannel+0x2ba>
 80039f0:	e06e      	b.n	8003ad0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	2280      	movs	r2, #128	; 0x80
 80039f6:	03d2      	lsls	r2, r2, #15
 80039f8:	4313      	orrs	r3, r2
 80039fa:	4a27      	ldr	r2, [pc, #156]	; (8003a98 <HAL_ADC_ConfigChannel+0x360>)
 80039fc:	0019      	movs	r1, r3
 80039fe:	0010      	movs	r0, r2
 8003a00:	f7ff fa04 	bl	8002e0c <LL_ADC_SetCommonPathInternalCh>
 8003a04:	e064      	b.n	8003ad0 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691a      	ldr	r2, [r3, #16]
 8003a0a:	2380      	movs	r3, #128	; 0x80
 8003a0c:	061b      	lsls	r3, r3, #24
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d004      	beq.n	8003a1c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003a16:	4a1f      	ldr	r2, [pc, #124]	; (8003a94 <HAL_ADC_ConfigChannel+0x35c>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d107      	bne.n	8003a2c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	0019      	movs	r1, r3
 8003a26:	0010      	movs	r0, r2
 8003a28:	f7ff fa87 	bl	8002f3a <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	da4d      	bge.n	8003ad0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a34:	4b18      	ldr	r3, [pc, #96]	; (8003a98 <HAL_ADC_ConfigChannel+0x360>)
 8003a36:	0018      	movs	r0, r3
 8003a38:	f7ff f9fc 	bl	8002e34 <LL_ADC_GetCommonPathInternalCh>
 8003a3c:	0003      	movs	r3, r0
 8003a3e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a15      	ldr	r2, [pc, #84]	; (8003a9c <HAL_ADC_ConfigChannel+0x364>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d108      	bne.n	8003a5c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	4a18      	ldr	r2, [pc, #96]	; (8003ab0 <HAL_ADC_ConfigChannel+0x378>)
 8003a4e:	4013      	ands	r3, r2
 8003a50:	4a11      	ldr	r2, [pc, #68]	; (8003a98 <HAL_ADC_ConfigChannel+0x360>)
 8003a52:	0019      	movs	r1, r3
 8003a54:	0010      	movs	r0, r2
 8003a56:	f7ff f9d9 	bl	8002e0c <LL_ADC_SetCommonPathInternalCh>
 8003a5a:	e039      	b.n	8003ad0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a11      	ldr	r2, [pc, #68]	; (8003aa8 <HAL_ADC_ConfigChannel+0x370>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d108      	bne.n	8003a78 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	4a12      	ldr	r2, [pc, #72]	; (8003ab4 <HAL_ADC_ConfigChannel+0x37c>)
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	4a0a      	ldr	r2, [pc, #40]	; (8003a98 <HAL_ADC_ConfigChannel+0x360>)
 8003a6e:	0019      	movs	r1, r3
 8003a70:	0010      	movs	r0, r2
 8003a72:	f7ff f9cb 	bl	8002e0c <LL_ADC_SetCommonPathInternalCh>
 8003a76:	e02b      	b.n	8003ad0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a0b      	ldr	r2, [pc, #44]	; (8003aac <HAL_ADC_ConfigChannel+0x374>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d126      	bne.n	8003ad0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	4a0c      	ldr	r2, [pc, #48]	; (8003ab8 <HAL_ADC_ConfigChannel+0x380>)
 8003a86:	4013      	ands	r3, r2
 8003a88:	4a03      	ldr	r2, [pc, #12]	; (8003a98 <HAL_ADC_ConfigChannel+0x360>)
 8003a8a:	0019      	movs	r1, r3
 8003a8c:	0010      	movs	r0, r2
 8003a8e:	f7ff f9bd 	bl	8002e0c <LL_ADC_SetCommonPathInternalCh>
 8003a92:	e01d      	b.n	8003ad0 <HAL_ADC_ConfigChannel+0x398>
 8003a94:	80000004 	.word	0x80000004
 8003a98:	40012708 	.word	0x40012708
 8003a9c:	b0001000 	.word	0xb0001000
 8003aa0:	20000004 	.word	0x20000004
 8003aa4:	00030d40 	.word	0x00030d40
 8003aa8:	b8004000 	.word	0xb8004000
 8003aac:	b4002000 	.word	0xb4002000
 8003ab0:	ff7fffff 	.word	0xff7fffff
 8003ab4:	feffffff 	.word	0xfeffffff
 8003ab8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003ac8:	2317      	movs	r3, #23
 8003aca:	18fb      	adds	r3, r7, r3
 8003acc:	2201      	movs	r2, #1
 8003ace:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2254      	movs	r2, #84	; 0x54
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003ad8:	2317      	movs	r3, #23
 8003ada:	18fb      	adds	r3, r7, r3
 8003adc:	781b      	ldrb	r3, [r3, #0]
}
 8003ade:	0018      	movs	r0, r3
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	b006      	add	sp, #24
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	46c0      	nop			; (mov r8, r8)

08003ae8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003af0:	2300      	movs	r3, #0
 8003af2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	0018      	movs	r0, r3
 8003afa:	f7ff fa93 	bl	8003024 <LL_ADC_IsEnabled>
 8003afe:	1e03      	subs	r3, r0, #0
 8003b00:	d000      	beq.n	8003b04 <ADC_Enable+0x1c>
 8003b02:	e069      	b.n	8003bd8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	4a36      	ldr	r2, [pc, #216]	; (8003be4 <ADC_Enable+0xfc>)
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	d00d      	beq.n	8003b2c <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b14:	2210      	movs	r2, #16
 8003b16:	431a      	orrs	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b20:	2201      	movs	r2, #1
 8003b22:	431a      	orrs	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e056      	b.n	8003bda <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	0018      	movs	r0, r3
 8003b32:	f7ff fa65 	bl	8003000 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8003b36:	4b2c      	ldr	r3, [pc, #176]	; (8003be8 <ADC_Enable+0x100>)
 8003b38:	0018      	movs	r0, r3
 8003b3a:	f7ff f97b 	bl	8002e34 <LL_ADC_GetCommonPathInternalCh>
 8003b3e:	0002      	movs	r2, r0
 8003b40:	2380      	movs	r3, #128	; 0x80
 8003b42:	041b      	lsls	r3, r3, #16
 8003b44:	4013      	ands	r3, r2
 8003b46:	d00f      	beq.n	8003b68 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b48:	4b28      	ldr	r3, [pc, #160]	; (8003bec <ADC_Enable+0x104>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4928      	ldr	r1, [pc, #160]	; (8003bf0 <ADC_Enable+0x108>)
 8003b4e:	0018      	movs	r0, r3
 8003b50:	f7fc fad6 	bl	8000100 <__udivsi3>
 8003b54:	0003      	movs	r3, r0
 8003b56:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8003b58:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003b5a:	e002      	b.n	8003b62 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1f9      	bne.n	8003b5c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	7e5b      	ldrb	r3, [r3, #25]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d033      	beq.n	8003bd8 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003b70:	f7ff f91e 	bl	8002db0 <HAL_GetTick>
 8003b74:	0003      	movs	r3, r0
 8003b76:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b78:	e027      	b.n	8003bca <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	0018      	movs	r0, r3
 8003b80:	f7ff fa50 	bl	8003024 <LL_ADC_IsEnabled>
 8003b84:	1e03      	subs	r3, r0, #0
 8003b86:	d104      	bne.n	8003b92 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	0018      	movs	r0, r3
 8003b8e:	f7ff fa37 	bl	8003000 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003b92:	f7ff f90d 	bl	8002db0 <HAL_GetTick>
 8003b96:	0002      	movs	r2, r0
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d914      	bls.n	8003bca <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	4013      	ands	r3, r2
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d00d      	beq.n	8003bca <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb2:	2210      	movs	r2, #16
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e007      	b.n	8003bda <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d1d0      	bne.n	8003b7a <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	0018      	movs	r0, r3
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	b004      	add	sp, #16
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	46c0      	nop			; (mov r8, r8)
 8003be4:	80000017 	.word	0x80000017
 8003be8:	40012708 	.word	0x40012708
 8003bec:	20000004 	.word	0x20000004
 8003bf0:	00030d40 	.word	0x00030d40

08003bf4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003bfc:	46c0      	nop			; (mov r8, r8)
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	b002      	add	sp, #8
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003c0c:	46c0      	nop			; (mov r8, r8)
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	b002      	add	sp, #8
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003c1c:	46c0      	nop			; (mov r8, r8)
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	b002      	add	sp, #8
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8003c2c:	46c0      	nop			; (mov r8, r8)
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	b002      	add	sp, #8
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	0002      	movs	r2, r0
 8003c3c:	1dfb      	adds	r3, r7, #7
 8003c3e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003c40:	1dfb      	adds	r3, r7, #7
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	2b7f      	cmp	r3, #127	; 0x7f
 8003c46:	d809      	bhi.n	8003c5c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c48:	1dfb      	adds	r3, r7, #7
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	001a      	movs	r2, r3
 8003c4e:	231f      	movs	r3, #31
 8003c50:	401a      	ands	r2, r3
 8003c52:	4b04      	ldr	r3, [pc, #16]	; (8003c64 <__NVIC_EnableIRQ+0x30>)
 8003c54:	2101      	movs	r1, #1
 8003c56:	4091      	lsls	r1, r2
 8003c58:	000a      	movs	r2, r1
 8003c5a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003c5c:	46c0      	nop			; (mov r8, r8)
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	b002      	add	sp, #8
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	e000e100 	.word	0xe000e100

08003c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c68:	b590      	push	{r4, r7, lr}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	0002      	movs	r2, r0
 8003c70:	6039      	str	r1, [r7, #0]
 8003c72:	1dfb      	adds	r3, r7, #7
 8003c74:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003c76:	1dfb      	adds	r3, r7, #7
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	2b7f      	cmp	r3, #127	; 0x7f
 8003c7c:	d828      	bhi.n	8003cd0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c7e:	4a2f      	ldr	r2, [pc, #188]	; (8003d3c <__NVIC_SetPriority+0xd4>)
 8003c80:	1dfb      	adds	r3, r7, #7
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	b25b      	sxtb	r3, r3
 8003c86:	089b      	lsrs	r3, r3, #2
 8003c88:	33c0      	adds	r3, #192	; 0xc0
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	589b      	ldr	r3, [r3, r2]
 8003c8e:	1dfa      	adds	r2, r7, #7
 8003c90:	7812      	ldrb	r2, [r2, #0]
 8003c92:	0011      	movs	r1, r2
 8003c94:	2203      	movs	r2, #3
 8003c96:	400a      	ands	r2, r1
 8003c98:	00d2      	lsls	r2, r2, #3
 8003c9a:	21ff      	movs	r1, #255	; 0xff
 8003c9c:	4091      	lsls	r1, r2
 8003c9e:	000a      	movs	r2, r1
 8003ca0:	43d2      	mvns	r2, r2
 8003ca2:	401a      	ands	r2, r3
 8003ca4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	019b      	lsls	r3, r3, #6
 8003caa:	22ff      	movs	r2, #255	; 0xff
 8003cac:	401a      	ands	r2, r3
 8003cae:	1dfb      	adds	r3, r7, #7
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	0018      	movs	r0, r3
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	4003      	ands	r3, r0
 8003cb8:	00db      	lsls	r3, r3, #3
 8003cba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003cbc:	481f      	ldr	r0, [pc, #124]	; (8003d3c <__NVIC_SetPriority+0xd4>)
 8003cbe:	1dfb      	adds	r3, r7, #7
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	b25b      	sxtb	r3, r3
 8003cc4:	089b      	lsrs	r3, r3, #2
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	33c0      	adds	r3, #192	; 0xc0
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003cce:	e031      	b.n	8003d34 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003cd0:	4a1b      	ldr	r2, [pc, #108]	; (8003d40 <__NVIC_SetPriority+0xd8>)
 8003cd2:	1dfb      	adds	r3, r7, #7
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	0019      	movs	r1, r3
 8003cd8:	230f      	movs	r3, #15
 8003cda:	400b      	ands	r3, r1
 8003cdc:	3b08      	subs	r3, #8
 8003cde:	089b      	lsrs	r3, r3, #2
 8003ce0:	3306      	adds	r3, #6
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	18d3      	adds	r3, r2, r3
 8003ce6:	3304      	adds	r3, #4
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	1dfa      	adds	r2, r7, #7
 8003cec:	7812      	ldrb	r2, [r2, #0]
 8003cee:	0011      	movs	r1, r2
 8003cf0:	2203      	movs	r2, #3
 8003cf2:	400a      	ands	r2, r1
 8003cf4:	00d2      	lsls	r2, r2, #3
 8003cf6:	21ff      	movs	r1, #255	; 0xff
 8003cf8:	4091      	lsls	r1, r2
 8003cfa:	000a      	movs	r2, r1
 8003cfc:	43d2      	mvns	r2, r2
 8003cfe:	401a      	ands	r2, r3
 8003d00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	019b      	lsls	r3, r3, #6
 8003d06:	22ff      	movs	r2, #255	; 0xff
 8003d08:	401a      	ands	r2, r3
 8003d0a:	1dfb      	adds	r3, r7, #7
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	0018      	movs	r0, r3
 8003d10:	2303      	movs	r3, #3
 8003d12:	4003      	ands	r3, r0
 8003d14:	00db      	lsls	r3, r3, #3
 8003d16:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003d18:	4809      	ldr	r0, [pc, #36]	; (8003d40 <__NVIC_SetPriority+0xd8>)
 8003d1a:	1dfb      	adds	r3, r7, #7
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	001c      	movs	r4, r3
 8003d20:	230f      	movs	r3, #15
 8003d22:	4023      	ands	r3, r4
 8003d24:	3b08      	subs	r3, #8
 8003d26:	089b      	lsrs	r3, r3, #2
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	3306      	adds	r3, #6
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	18c3      	adds	r3, r0, r3
 8003d30:	3304      	adds	r3, #4
 8003d32:	601a      	str	r2, [r3, #0]
}
 8003d34:	46c0      	nop			; (mov r8, r8)
 8003d36:	46bd      	mov	sp, r7
 8003d38:	b003      	add	sp, #12
 8003d3a:	bd90      	pop	{r4, r7, pc}
 8003d3c:	e000e100 	.word	0xe000e100
 8003d40:	e000ed00 	.word	0xe000ed00

08003d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	1e5a      	subs	r2, r3, #1
 8003d50:	2380      	movs	r3, #128	; 0x80
 8003d52:	045b      	lsls	r3, r3, #17
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d301      	bcc.n	8003d5c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e010      	b.n	8003d7e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d5c:	4b0a      	ldr	r3, [pc, #40]	; (8003d88 <SysTick_Config+0x44>)
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	3a01      	subs	r2, #1
 8003d62:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d64:	2301      	movs	r3, #1
 8003d66:	425b      	negs	r3, r3
 8003d68:	2103      	movs	r1, #3
 8003d6a:	0018      	movs	r0, r3
 8003d6c:	f7ff ff7c 	bl	8003c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d70:	4b05      	ldr	r3, [pc, #20]	; (8003d88 <SysTick_Config+0x44>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d76:	4b04      	ldr	r3, [pc, #16]	; (8003d88 <SysTick_Config+0x44>)
 8003d78:	2207      	movs	r2, #7
 8003d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	0018      	movs	r0, r3
 8003d80:	46bd      	mov	sp, r7
 8003d82:	b002      	add	sp, #8
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	46c0      	nop			; (mov r8, r8)
 8003d88:	e000e010 	.word	0xe000e010

08003d8c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60b9      	str	r1, [r7, #8]
 8003d94:	607a      	str	r2, [r7, #4]
 8003d96:	210f      	movs	r1, #15
 8003d98:	187b      	adds	r3, r7, r1
 8003d9a:	1c02      	adds	r2, r0, #0
 8003d9c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	187b      	adds	r3, r7, r1
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	b25b      	sxtb	r3, r3
 8003da6:	0011      	movs	r1, r2
 8003da8:	0018      	movs	r0, r3
 8003daa:	f7ff ff5d 	bl	8003c68 <__NVIC_SetPriority>
}
 8003dae:	46c0      	nop			; (mov r8, r8)
 8003db0:	46bd      	mov	sp, r7
 8003db2:	b004      	add	sp, #16
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b082      	sub	sp, #8
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	0002      	movs	r2, r0
 8003dbe:	1dfb      	adds	r3, r7, #7
 8003dc0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dc2:	1dfb      	adds	r3, r7, #7
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	b25b      	sxtb	r3, r3
 8003dc8:	0018      	movs	r0, r3
 8003dca:	f7ff ff33 	bl	8003c34 <__NVIC_EnableIRQ>
}
 8003dce:	46c0      	nop			; (mov r8, r8)
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	b002      	add	sp, #8
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b082      	sub	sp, #8
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	0018      	movs	r0, r3
 8003de2:	f7ff ffaf 	bl	8003d44 <SysTick_Config>
 8003de6:	0003      	movs	r3, r0
}
 8003de8:	0018      	movs	r0, r3
 8003dea:	46bd      	mov	sp, r7
 8003dec:	b002      	add	sp, #8
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dfe:	e147      	b.n	8004090 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2101      	movs	r1, #1
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	4091      	lsls	r1, r2
 8003e0a:	000a      	movs	r2, r1
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d100      	bne.n	8003e18 <HAL_GPIO_Init+0x28>
 8003e16:	e138      	b.n	800408a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	2203      	movs	r2, #3
 8003e1e:	4013      	ands	r3, r2
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d005      	beq.n	8003e30 <HAL_GPIO_Init+0x40>
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	2203      	movs	r2, #3
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d130      	bne.n	8003e92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	2203      	movs	r2, #3
 8003e3c:	409a      	lsls	r2, r3
 8003e3e:	0013      	movs	r3, r2
 8003e40:	43da      	mvns	r2, r3
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	4013      	ands	r3, r2
 8003e46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	68da      	ldr	r2, [r3, #12]
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	409a      	lsls	r2, r3
 8003e52:	0013      	movs	r3, r2
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e66:	2201      	movs	r2, #1
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	409a      	lsls	r2, r3
 8003e6c:	0013      	movs	r3, r2
 8003e6e:	43da      	mvns	r2, r3
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	4013      	ands	r3, r2
 8003e74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	091b      	lsrs	r3, r3, #4
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	401a      	ands	r2, r3
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	409a      	lsls	r2, r3
 8003e84:	0013      	movs	r3, r2
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	2203      	movs	r2, #3
 8003e98:	4013      	ands	r3, r2
 8003e9a:	2b03      	cmp	r3, #3
 8003e9c:	d017      	beq.n	8003ece <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	2203      	movs	r2, #3
 8003eaa:	409a      	lsls	r2, r3
 8003eac:	0013      	movs	r3, r2
 8003eae:	43da      	mvns	r2, r3
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	689a      	ldr	r2, [r3, #8]
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	409a      	lsls	r2, r3
 8003ec0:	0013      	movs	r3, r2
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	2203      	movs	r2, #3
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d123      	bne.n	8003f22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	08da      	lsrs	r2, r3, #3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	3208      	adds	r2, #8
 8003ee2:	0092      	lsls	r2, r2, #2
 8003ee4:	58d3      	ldr	r3, [r2, r3]
 8003ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	2207      	movs	r2, #7
 8003eec:	4013      	ands	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	220f      	movs	r2, #15
 8003ef2:	409a      	lsls	r2, r3
 8003ef4:	0013      	movs	r3, r2
 8003ef6:	43da      	mvns	r2, r3
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	4013      	ands	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	691a      	ldr	r2, [r3, #16]
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	2107      	movs	r1, #7
 8003f06:	400b      	ands	r3, r1
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	409a      	lsls	r2, r3
 8003f0c:	0013      	movs	r3, r2
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	08da      	lsrs	r2, r3, #3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	3208      	adds	r2, #8
 8003f1c:	0092      	lsls	r2, r2, #2
 8003f1e:	6939      	ldr	r1, [r7, #16]
 8003f20:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	2203      	movs	r2, #3
 8003f2e:	409a      	lsls	r2, r3
 8003f30:	0013      	movs	r3, r2
 8003f32:	43da      	mvns	r2, r3
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	4013      	ands	r3, r2
 8003f38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	2203      	movs	r2, #3
 8003f40:	401a      	ands	r2, r3
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	409a      	lsls	r2, r3
 8003f48:	0013      	movs	r3, r2
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685a      	ldr	r2, [r3, #4]
 8003f5a:	23c0      	movs	r3, #192	; 0xc0
 8003f5c:	029b      	lsls	r3, r3, #10
 8003f5e:	4013      	ands	r3, r2
 8003f60:	d100      	bne.n	8003f64 <HAL_GPIO_Init+0x174>
 8003f62:	e092      	b.n	800408a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003f64:	4a50      	ldr	r2, [pc, #320]	; (80040a8 <HAL_GPIO_Init+0x2b8>)
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	089b      	lsrs	r3, r3, #2
 8003f6a:	3318      	adds	r3, #24
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	589b      	ldr	r3, [r3, r2]
 8003f70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	2203      	movs	r2, #3
 8003f76:	4013      	ands	r3, r2
 8003f78:	00db      	lsls	r3, r3, #3
 8003f7a:	220f      	movs	r2, #15
 8003f7c:	409a      	lsls	r2, r3
 8003f7e:	0013      	movs	r3, r2
 8003f80:	43da      	mvns	r2, r3
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	4013      	ands	r3, r2
 8003f86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	23a0      	movs	r3, #160	; 0xa0
 8003f8c:	05db      	lsls	r3, r3, #23
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d013      	beq.n	8003fba <HAL_GPIO_Init+0x1ca>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a45      	ldr	r2, [pc, #276]	; (80040ac <HAL_GPIO_Init+0x2bc>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d00d      	beq.n	8003fb6 <HAL_GPIO_Init+0x1c6>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a44      	ldr	r2, [pc, #272]	; (80040b0 <HAL_GPIO_Init+0x2c0>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d007      	beq.n	8003fb2 <HAL_GPIO_Init+0x1c2>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a43      	ldr	r2, [pc, #268]	; (80040b4 <HAL_GPIO_Init+0x2c4>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d101      	bne.n	8003fae <HAL_GPIO_Init+0x1be>
 8003faa:	2303      	movs	r3, #3
 8003fac:	e006      	b.n	8003fbc <HAL_GPIO_Init+0x1cc>
 8003fae:	2305      	movs	r3, #5
 8003fb0:	e004      	b.n	8003fbc <HAL_GPIO_Init+0x1cc>
 8003fb2:	2302      	movs	r3, #2
 8003fb4:	e002      	b.n	8003fbc <HAL_GPIO_Init+0x1cc>
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e000      	b.n	8003fbc <HAL_GPIO_Init+0x1cc>
 8003fba:	2300      	movs	r3, #0
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	2103      	movs	r1, #3
 8003fc0:	400a      	ands	r2, r1
 8003fc2:	00d2      	lsls	r2, r2, #3
 8003fc4:	4093      	lsls	r3, r2
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003fcc:	4936      	ldr	r1, [pc, #216]	; (80040a8 <HAL_GPIO_Init+0x2b8>)
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	089b      	lsrs	r3, r3, #2
 8003fd2:	3318      	adds	r3, #24
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003fda:	4b33      	ldr	r3, [pc, #204]	; (80040a8 <HAL_GPIO_Init+0x2b8>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	43da      	mvns	r2, r3
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	2380      	movs	r3, #128	; 0x80
 8003ff0:	035b      	lsls	r3, r3, #13
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	d003      	beq.n	8003ffe <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ffe:	4b2a      	ldr	r3, [pc, #168]	; (80040a8 <HAL_GPIO_Init+0x2b8>)
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004004:	4b28      	ldr	r3, [pc, #160]	; (80040a8 <HAL_GPIO_Init+0x2b8>)
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	43da      	mvns	r2, r3
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	4013      	ands	r3, r2
 8004012:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	2380      	movs	r3, #128	; 0x80
 800401a:	039b      	lsls	r3, r3, #14
 800401c:	4013      	ands	r3, r2
 800401e:	d003      	beq.n	8004028 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	4313      	orrs	r3, r2
 8004026:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004028:	4b1f      	ldr	r3, [pc, #124]	; (80040a8 <HAL_GPIO_Init+0x2b8>)
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800402e:	4a1e      	ldr	r2, [pc, #120]	; (80040a8 <HAL_GPIO_Init+0x2b8>)
 8004030:	2384      	movs	r3, #132	; 0x84
 8004032:	58d3      	ldr	r3, [r2, r3]
 8004034:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	43da      	mvns	r2, r3
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	4013      	ands	r3, r2
 800403e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	685a      	ldr	r2, [r3, #4]
 8004044:	2380      	movs	r3, #128	; 0x80
 8004046:	029b      	lsls	r3, r3, #10
 8004048:	4013      	ands	r3, r2
 800404a:	d003      	beq.n	8004054 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	4313      	orrs	r3, r2
 8004052:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004054:	4914      	ldr	r1, [pc, #80]	; (80040a8 <HAL_GPIO_Init+0x2b8>)
 8004056:	2284      	movs	r2, #132	; 0x84
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800405c:	4a12      	ldr	r2, [pc, #72]	; (80040a8 <HAL_GPIO_Init+0x2b8>)
 800405e:	2380      	movs	r3, #128	; 0x80
 8004060:	58d3      	ldr	r3, [r2, r3]
 8004062:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	43da      	mvns	r2, r3
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	4013      	ands	r3, r2
 800406c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	2380      	movs	r3, #128	; 0x80
 8004074:	025b      	lsls	r3, r3, #9
 8004076:	4013      	ands	r3, r2
 8004078:	d003      	beq.n	8004082 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	4313      	orrs	r3, r2
 8004080:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004082:	4909      	ldr	r1, [pc, #36]	; (80040a8 <HAL_GPIO_Init+0x2b8>)
 8004084:	2280      	movs	r2, #128	; 0x80
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	3301      	adds	r3, #1
 800408e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	40da      	lsrs	r2, r3
 8004098:	1e13      	subs	r3, r2, #0
 800409a:	d000      	beq.n	800409e <HAL_GPIO_Init+0x2ae>
 800409c:	e6b0      	b.n	8003e00 <HAL_GPIO_Init+0x10>
  }
}
 800409e:	46c0      	nop			; (mov r8, r8)
 80040a0:	46c0      	nop			; (mov r8, r8)
 80040a2:	46bd      	mov	sp, r7
 80040a4:	b006      	add	sp, #24
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	40021800 	.word	0x40021800
 80040ac:	50000400 	.word	0x50000400
 80040b0:	50000800 	.word	0x50000800
 80040b4:	50000c00 	.word	0x50000c00

080040b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	0008      	movs	r0, r1
 80040c2:	0011      	movs	r1, r2
 80040c4:	1cbb      	adds	r3, r7, #2
 80040c6:	1c02      	adds	r2, r0, #0
 80040c8:	801a      	strh	r2, [r3, #0]
 80040ca:	1c7b      	adds	r3, r7, #1
 80040cc:	1c0a      	adds	r2, r1, #0
 80040ce:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040d0:	1c7b      	adds	r3, r7, #1
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d004      	beq.n	80040e2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80040d8:	1cbb      	adds	r3, r7, #2
 80040da:	881a      	ldrh	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80040e0:	e003      	b.n	80040ea <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80040e2:	1cbb      	adds	r3, r7, #2
 80040e4:	881a      	ldrh	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80040ea:	46c0      	nop			; (mov r8, r8)
 80040ec:	46bd      	mov	sp, r7
 80040ee:	b002      	add	sp, #8
 80040f0:	bd80      	pop	{r7, pc}
	...

080040f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80040fc:	4b19      	ldr	r3, [pc, #100]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a19      	ldr	r2, [pc, #100]	; (8004168 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004102:	4013      	ands	r3, r2
 8004104:	0019      	movs	r1, r3
 8004106:	4b17      	ldr	r3, [pc, #92]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	430a      	orrs	r2, r1
 800410c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	2380      	movs	r3, #128	; 0x80
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	429a      	cmp	r2, r3
 8004116:	d11f      	bne.n	8004158 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004118:	4b14      	ldr	r3, [pc, #80]	; (800416c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	0013      	movs	r3, r2
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	189b      	adds	r3, r3, r2
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	4912      	ldr	r1, [pc, #72]	; (8004170 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004126:	0018      	movs	r0, r3
 8004128:	f7fb ffea 	bl	8000100 <__udivsi3>
 800412c:	0003      	movs	r3, r0
 800412e:	3301      	adds	r3, #1
 8004130:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004132:	e008      	b.n	8004146 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d003      	beq.n	8004142 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	3b01      	subs	r3, #1
 800413e:	60fb      	str	r3, [r7, #12]
 8004140:	e001      	b.n	8004146 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e009      	b.n	800415a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004146:	4b07      	ldr	r3, [pc, #28]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004148:	695a      	ldr	r2, [r3, #20]
 800414a:	2380      	movs	r3, #128	; 0x80
 800414c:	00db      	lsls	r3, r3, #3
 800414e:	401a      	ands	r2, r3
 8004150:	2380      	movs	r3, #128	; 0x80
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	429a      	cmp	r2, r3
 8004156:	d0ed      	beq.n	8004134 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	0018      	movs	r0, r3
 800415c:	46bd      	mov	sp, r7
 800415e:	b004      	add	sp, #16
 8004160:	bd80      	pop	{r7, pc}
 8004162:	46c0      	nop			; (mov r8, r8)
 8004164:	40007000 	.word	0x40007000
 8004168:	fffff9ff 	.word	0xfffff9ff
 800416c:	20000004 	.word	0x20000004
 8004170:	000f4240 	.word	0x000f4240

08004174 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b088      	sub	sp, #32
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e2f3      	b.n	800476e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2201      	movs	r2, #1
 800418c:	4013      	ands	r3, r2
 800418e:	d100      	bne.n	8004192 <HAL_RCC_OscConfig+0x1e>
 8004190:	e07c      	b.n	800428c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004192:	4bc3      	ldr	r3, [pc, #780]	; (80044a0 <HAL_RCC_OscConfig+0x32c>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	2238      	movs	r2, #56	; 0x38
 8004198:	4013      	ands	r3, r2
 800419a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800419c:	4bc0      	ldr	r3, [pc, #768]	; (80044a0 <HAL_RCC_OscConfig+0x32c>)
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	2203      	movs	r2, #3
 80041a2:	4013      	ands	r3, r2
 80041a4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	2b10      	cmp	r3, #16
 80041aa:	d102      	bne.n	80041b2 <HAL_RCC_OscConfig+0x3e>
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	2b03      	cmp	r3, #3
 80041b0:	d002      	beq.n	80041b8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	2b08      	cmp	r3, #8
 80041b6:	d10b      	bne.n	80041d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041b8:	4bb9      	ldr	r3, [pc, #740]	; (80044a0 <HAL_RCC_OscConfig+0x32c>)
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	2380      	movs	r3, #128	; 0x80
 80041be:	029b      	lsls	r3, r3, #10
 80041c0:	4013      	ands	r3, r2
 80041c2:	d062      	beq.n	800428a <HAL_RCC_OscConfig+0x116>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d15e      	bne.n	800428a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e2ce      	b.n	800476e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685a      	ldr	r2, [r3, #4]
 80041d4:	2380      	movs	r3, #128	; 0x80
 80041d6:	025b      	lsls	r3, r3, #9
 80041d8:	429a      	cmp	r2, r3
 80041da:	d107      	bne.n	80041ec <HAL_RCC_OscConfig+0x78>
 80041dc:	4bb0      	ldr	r3, [pc, #704]	; (80044a0 <HAL_RCC_OscConfig+0x32c>)
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	4baf      	ldr	r3, [pc, #700]	; (80044a0 <HAL_RCC_OscConfig+0x32c>)
 80041e2:	2180      	movs	r1, #128	; 0x80
 80041e4:	0249      	lsls	r1, r1, #9
 80041e6:	430a      	orrs	r2, r1
 80041e8:	601a      	str	r2, [r3, #0]
 80041ea:	e020      	b.n	800422e <HAL_RCC_OscConfig+0xba>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	23a0      	movs	r3, #160	; 0xa0
 80041f2:	02db      	lsls	r3, r3, #11
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d10e      	bne.n	8004216 <HAL_RCC_OscConfig+0xa2>
 80041f8:	4ba9      	ldr	r3, [pc, #676]	; (80044a0 <HAL_RCC_OscConfig+0x32c>)
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	4ba8      	ldr	r3, [pc, #672]	; (80044a0 <HAL_RCC_OscConfig+0x32c>)
 80041fe:	2180      	movs	r1, #128	; 0x80
 8004200:	02c9      	lsls	r1, r1, #11
 8004202:	430a      	orrs	r2, r1
 8004204:	601a      	str	r2, [r3, #0]
 8004206:	4ba6      	ldr	r3, [pc, #664]	; (80044a0 <HAL_RCC_OscConfig+0x32c>)
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	4ba5      	ldr	r3, [pc, #660]	; (80044a0 <HAL_RCC_OscConfig+0x32c>)
 800420c:	2180      	movs	r1, #128	; 0x80
 800420e:	0249      	lsls	r1, r1, #9
 8004210:	430a      	orrs	r2, r1
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	e00b      	b.n	800422e <HAL_RCC_OscConfig+0xba>
 8004216:	4ba2      	ldr	r3, [pc, #648]	; (80044a0 <HAL_RCC_OscConfig+0x32c>)
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	4ba1      	ldr	r3, [pc, #644]	; (80044a0 <HAL_RCC_OscConfig+0x32c>)
 800421c:	49a1      	ldr	r1, [pc, #644]	; (80044a4 <HAL_RCC_OscConfig+0x330>)
 800421e:	400a      	ands	r2, r1
 8004220:	601a      	str	r2, [r3, #0]
 8004222:	4b9f      	ldr	r3, [pc, #636]	; (80044a0 <HAL_RCC_OscConfig+0x32c>)
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	4b9e      	ldr	r3, [pc, #632]	; (80044a0 <HAL_RCC_OscConfig+0x32c>)
 8004228:	499f      	ldr	r1, [pc, #636]	; (80044a8 <HAL_RCC_OscConfig+0x334>)
 800422a:	400a      	ands	r2, r1
 800422c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d014      	beq.n	8004260 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004236:	f7fe fdbb 	bl	8002db0 <HAL_GetTick>
 800423a:	0003      	movs	r3, r0
 800423c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800423e:	e008      	b.n	8004252 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004240:	f7fe fdb6 	bl	8002db0 <HAL_GetTick>
 8004244:	0002      	movs	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b64      	cmp	r3, #100	; 0x64
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e28d      	b.n	800476e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004252:	4b93      	ldr	r3, [pc, #588]	; (80044a0 <HAL_RCC_OscConfig+0x32c>)
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	2380      	movs	r3, #128	; 0x80
 8004258:	029b      	lsls	r3, r3, #10
 800425a:	4013      	ands	r3, r2
 800425c:	d0f0      	beq.n	8004240 <HAL_RCC_OscConfig+0xcc>
 800425e:	e015      	b.n	800428c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004260:	f7fe fda6 	bl	8002db0 <HAL_GetTick>
 8004264:	0003      	movs	r3, r0
 8004266:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004268:	e008      	b.n	800427c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800426a:	f7fe fda1 	bl	8002db0 <HAL_GetTick>
 800426e:	0002      	movs	r2, r0
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b64      	cmp	r3, #100	; 0x64
 8004276:	d901      	bls.n	800427c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e278      	b.n	800476e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800427c:	4b88      	ldr	r3, [pc, #544]	; (80044a0 <HAL_RCC_OscConfig+0x32c>)
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	2380      	movs	r3, #128	; 0x80
 8004282:	029b      	lsls	r3, r3, #10
 8004284:	4013      	ands	r3, r2
 8004286:	d1f0      	bne.n	800426a <HAL_RCC_OscConfig+0xf6>
 8004288:	e000      	b.n	800428c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800428a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2202      	movs	r2, #2
 8004292:	4013      	ands	r3, r2
 8004294:	d100      	bne.n	8004298 <HAL_RCC_OscConfig+0x124>
 8004296:	e099      	b.n	80043cc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004298:	4b81      	ldr	r3, [pc, #516]	; (80044a0 <HAL_RCC_OscConfig+0x32c>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	2238      	movs	r2, #56	; 0x38
 800429e:	4013      	ands	r3, r2
 80042a0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042a2:	4b7f      	ldr	r3, [pc, #508]	; (80044a0 <HAL_RCC_OscConfig+0x32c>)
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	2203      	movs	r2, #3
 80042a8:	4013      	ands	r3, r2
 80042aa:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	2b10      	cmp	r3, #16
 80042b0:	d102      	bne.n	80042b8 <HAL_RCC_OscConfig+0x144>
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d002      	beq.n	80042be <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d135      	bne.n	800432a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042be:	4b78      	ldr	r3, [pc, #480]	; (80044a0 <HAL_RCC_OscConfig+0x32c>)
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	2380      	movs	r3, #128	; 0x80
 80042c4:	00db      	lsls	r3, r3, #3
 80042c6:	4013      	ands	r3, r2
 80042c8:	d005      	beq.n	80042d6 <HAL_RCC_OscConfig+0x162>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e24b      	b.n	800476e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042d6:	4b72      	ldr	r3, [pc, #456]	; (80044a0 <HAL_RCC_OscConfig+0x32c>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	4a74      	ldr	r2, [pc, #464]	; (80044ac <HAL_RCC_OscConfig+0x338>)
 80042dc:	4013      	ands	r3, r2
 80042de:	0019      	movs	r1, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	021a      	lsls	r2, r3, #8
 80042e6:	4b6e      	ldr	r3, [pc, #440]	; (80044a0 <HAL_RCC_OscConfig+0x32c>)
 80042e8:	430a      	orrs	r2, r1
 80042ea:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d112      	bne.n	8004318 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80042f2:	4b6b      	ldr	r3, [pc, #428]	; (80044a0 <HAL_RCC_OscConfig+0x32c>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a6e      	ldr	r2, [pc, #440]	; (80044b0 <HAL_RCC_OscConfig+0x33c>)
 80042f8:	4013      	ands	r3, r2
 80042fa:	0019      	movs	r1, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	691a      	ldr	r2, [r3, #16]
 8004300:	4b67      	ldr	r3, [pc, #412]	; (80044a0 <HAL_RCC_OscConfig+0x32c>)
 8004302:	430a      	orrs	r2, r1
 8004304:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004306:	4b66      	ldr	r3, [pc, #408]	; (80044a0 <HAL_RCC_OscConfig+0x32c>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	0adb      	lsrs	r3, r3, #11
 800430c:	2207      	movs	r2, #7
 800430e:	4013      	ands	r3, r2
 8004310:	4a68      	ldr	r2, [pc, #416]	; (80044b4 <HAL_RCC_OscConfig+0x340>)
 8004312:	40da      	lsrs	r2, r3
 8004314:	4b68      	ldr	r3, [pc, #416]	; (80044b8 <HAL_RCC_OscConfig+0x344>)
 8004316:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004318:	4b68      	ldr	r3, [pc, #416]	; (80044bc <HAL_RCC_OscConfig+0x348>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	0018      	movs	r0, r3
 800431e:	f7fe fceb 	bl	8002cf8 <HAL_InitTick>
 8004322:	1e03      	subs	r3, r0, #0
 8004324:	d051      	beq.n	80043ca <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e221      	b.n	800476e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d030      	beq.n	8004394 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004332:	4b5b      	ldr	r3, [pc, #364]	; (80044a0 <HAL_RCC_OscConfig+0x32c>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a5e      	ldr	r2, [pc, #376]	; (80044b0 <HAL_RCC_OscConfig+0x33c>)
 8004338:	4013      	ands	r3, r2
 800433a:	0019      	movs	r1, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	691a      	ldr	r2, [r3, #16]
 8004340:	4b57      	ldr	r3, [pc, #348]	; (80044a0 <HAL_RCC_OscConfig+0x32c>)
 8004342:	430a      	orrs	r2, r1
 8004344:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004346:	4b56      	ldr	r3, [pc, #344]	; (80044a0 <HAL_RCC_OscConfig+0x32c>)
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	4b55      	ldr	r3, [pc, #340]	; (80044a0 <HAL_RCC_OscConfig+0x32c>)
 800434c:	2180      	movs	r1, #128	; 0x80
 800434e:	0049      	lsls	r1, r1, #1
 8004350:	430a      	orrs	r2, r1
 8004352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004354:	f7fe fd2c 	bl	8002db0 <HAL_GetTick>
 8004358:	0003      	movs	r3, r0
 800435a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800435c:	e008      	b.n	8004370 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800435e:	f7fe fd27 	bl	8002db0 <HAL_GetTick>
 8004362:	0002      	movs	r2, r0
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	2b02      	cmp	r3, #2
 800436a:	d901      	bls.n	8004370 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e1fe      	b.n	800476e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004370:	4b4b      	ldr	r3, [pc, #300]	; (80044a0 <HAL_RCC_OscConfig+0x32c>)
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	2380      	movs	r3, #128	; 0x80
 8004376:	00db      	lsls	r3, r3, #3
 8004378:	4013      	ands	r3, r2
 800437a:	d0f0      	beq.n	800435e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800437c:	4b48      	ldr	r3, [pc, #288]	; (80044a0 <HAL_RCC_OscConfig+0x32c>)
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	4a4a      	ldr	r2, [pc, #296]	; (80044ac <HAL_RCC_OscConfig+0x338>)
 8004382:	4013      	ands	r3, r2
 8004384:	0019      	movs	r1, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	021a      	lsls	r2, r3, #8
 800438c:	4b44      	ldr	r3, [pc, #272]	; (80044a0 <HAL_RCC_OscConfig+0x32c>)
 800438e:	430a      	orrs	r2, r1
 8004390:	605a      	str	r2, [r3, #4]
 8004392:	e01b      	b.n	80043cc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004394:	4b42      	ldr	r3, [pc, #264]	; (80044a0 <HAL_RCC_OscConfig+0x32c>)
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	4b41      	ldr	r3, [pc, #260]	; (80044a0 <HAL_RCC_OscConfig+0x32c>)
 800439a:	4949      	ldr	r1, [pc, #292]	; (80044c0 <HAL_RCC_OscConfig+0x34c>)
 800439c:	400a      	ands	r2, r1
 800439e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a0:	f7fe fd06 	bl	8002db0 <HAL_GetTick>
 80043a4:	0003      	movs	r3, r0
 80043a6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043a8:	e008      	b.n	80043bc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043aa:	f7fe fd01 	bl	8002db0 <HAL_GetTick>
 80043ae:	0002      	movs	r2, r0
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d901      	bls.n	80043bc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e1d8      	b.n	800476e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043bc:	4b38      	ldr	r3, [pc, #224]	; (80044a0 <HAL_RCC_OscConfig+0x32c>)
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	2380      	movs	r3, #128	; 0x80
 80043c2:	00db      	lsls	r3, r3, #3
 80043c4:	4013      	ands	r3, r2
 80043c6:	d1f0      	bne.n	80043aa <HAL_RCC_OscConfig+0x236>
 80043c8:	e000      	b.n	80043cc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043ca:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2208      	movs	r2, #8
 80043d2:	4013      	ands	r3, r2
 80043d4:	d047      	beq.n	8004466 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80043d6:	4b32      	ldr	r3, [pc, #200]	; (80044a0 <HAL_RCC_OscConfig+0x32c>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	2238      	movs	r2, #56	; 0x38
 80043dc:	4013      	ands	r3, r2
 80043de:	2b18      	cmp	r3, #24
 80043e0:	d10a      	bne.n	80043f8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80043e2:	4b2f      	ldr	r3, [pc, #188]	; (80044a0 <HAL_RCC_OscConfig+0x32c>)
 80043e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043e6:	2202      	movs	r2, #2
 80043e8:	4013      	ands	r3, r2
 80043ea:	d03c      	beq.n	8004466 <HAL_RCC_OscConfig+0x2f2>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d138      	bne.n	8004466 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e1ba      	b.n	800476e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d019      	beq.n	8004434 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004400:	4b27      	ldr	r3, [pc, #156]	; (80044a0 <HAL_RCC_OscConfig+0x32c>)
 8004402:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004404:	4b26      	ldr	r3, [pc, #152]	; (80044a0 <HAL_RCC_OscConfig+0x32c>)
 8004406:	2101      	movs	r1, #1
 8004408:	430a      	orrs	r2, r1
 800440a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440c:	f7fe fcd0 	bl	8002db0 <HAL_GetTick>
 8004410:	0003      	movs	r3, r0
 8004412:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004414:	e008      	b.n	8004428 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004416:	f7fe fccb 	bl	8002db0 <HAL_GetTick>
 800441a:	0002      	movs	r2, r0
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	2b02      	cmp	r3, #2
 8004422:	d901      	bls.n	8004428 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e1a2      	b.n	800476e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004428:	4b1d      	ldr	r3, [pc, #116]	; (80044a0 <HAL_RCC_OscConfig+0x32c>)
 800442a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800442c:	2202      	movs	r2, #2
 800442e:	4013      	ands	r3, r2
 8004430:	d0f1      	beq.n	8004416 <HAL_RCC_OscConfig+0x2a2>
 8004432:	e018      	b.n	8004466 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004434:	4b1a      	ldr	r3, [pc, #104]	; (80044a0 <HAL_RCC_OscConfig+0x32c>)
 8004436:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004438:	4b19      	ldr	r3, [pc, #100]	; (80044a0 <HAL_RCC_OscConfig+0x32c>)
 800443a:	2101      	movs	r1, #1
 800443c:	438a      	bics	r2, r1
 800443e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004440:	f7fe fcb6 	bl	8002db0 <HAL_GetTick>
 8004444:	0003      	movs	r3, r0
 8004446:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004448:	e008      	b.n	800445c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800444a:	f7fe fcb1 	bl	8002db0 <HAL_GetTick>
 800444e:	0002      	movs	r2, r0
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	2b02      	cmp	r3, #2
 8004456:	d901      	bls.n	800445c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e188      	b.n	800476e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800445c:	4b10      	ldr	r3, [pc, #64]	; (80044a0 <HAL_RCC_OscConfig+0x32c>)
 800445e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004460:	2202      	movs	r2, #2
 8004462:	4013      	ands	r3, r2
 8004464:	d1f1      	bne.n	800444a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2204      	movs	r2, #4
 800446c:	4013      	ands	r3, r2
 800446e:	d100      	bne.n	8004472 <HAL_RCC_OscConfig+0x2fe>
 8004470:	e0c6      	b.n	8004600 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004472:	231f      	movs	r3, #31
 8004474:	18fb      	adds	r3, r7, r3
 8004476:	2200      	movs	r2, #0
 8004478:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800447a:	4b09      	ldr	r3, [pc, #36]	; (80044a0 <HAL_RCC_OscConfig+0x32c>)
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	2238      	movs	r2, #56	; 0x38
 8004480:	4013      	ands	r3, r2
 8004482:	2b20      	cmp	r3, #32
 8004484:	d11e      	bne.n	80044c4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004486:	4b06      	ldr	r3, [pc, #24]	; (80044a0 <HAL_RCC_OscConfig+0x32c>)
 8004488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800448a:	2202      	movs	r2, #2
 800448c:	4013      	ands	r3, r2
 800448e:	d100      	bne.n	8004492 <HAL_RCC_OscConfig+0x31e>
 8004490:	e0b6      	b.n	8004600 <HAL_RCC_OscConfig+0x48c>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d000      	beq.n	800449c <HAL_RCC_OscConfig+0x328>
 800449a:	e0b1      	b.n	8004600 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e166      	b.n	800476e <HAL_RCC_OscConfig+0x5fa>
 80044a0:	40021000 	.word	0x40021000
 80044a4:	fffeffff 	.word	0xfffeffff
 80044a8:	fffbffff 	.word	0xfffbffff
 80044ac:	ffff80ff 	.word	0xffff80ff
 80044b0:	ffffc7ff 	.word	0xffffc7ff
 80044b4:	00f42400 	.word	0x00f42400
 80044b8:	20000004 	.word	0x20000004
 80044bc:	20000008 	.word	0x20000008
 80044c0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80044c4:	4bac      	ldr	r3, [pc, #688]	; (8004778 <HAL_RCC_OscConfig+0x604>)
 80044c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044c8:	2380      	movs	r3, #128	; 0x80
 80044ca:	055b      	lsls	r3, r3, #21
 80044cc:	4013      	ands	r3, r2
 80044ce:	d101      	bne.n	80044d4 <HAL_RCC_OscConfig+0x360>
 80044d0:	2301      	movs	r3, #1
 80044d2:	e000      	b.n	80044d6 <HAL_RCC_OscConfig+0x362>
 80044d4:	2300      	movs	r3, #0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d011      	beq.n	80044fe <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80044da:	4ba7      	ldr	r3, [pc, #668]	; (8004778 <HAL_RCC_OscConfig+0x604>)
 80044dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044de:	4ba6      	ldr	r3, [pc, #664]	; (8004778 <HAL_RCC_OscConfig+0x604>)
 80044e0:	2180      	movs	r1, #128	; 0x80
 80044e2:	0549      	lsls	r1, r1, #21
 80044e4:	430a      	orrs	r2, r1
 80044e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80044e8:	4ba3      	ldr	r3, [pc, #652]	; (8004778 <HAL_RCC_OscConfig+0x604>)
 80044ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044ec:	2380      	movs	r3, #128	; 0x80
 80044ee:	055b      	lsls	r3, r3, #21
 80044f0:	4013      	ands	r3, r2
 80044f2:	60fb      	str	r3, [r7, #12]
 80044f4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80044f6:	231f      	movs	r3, #31
 80044f8:	18fb      	adds	r3, r7, r3
 80044fa:	2201      	movs	r2, #1
 80044fc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044fe:	4b9f      	ldr	r3, [pc, #636]	; (800477c <HAL_RCC_OscConfig+0x608>)
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	2380      	movs	r3, #128	; 0x80
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	4013      	ands	r3, r2
 8004508:	d11a      	bne.n	8004540 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800450a:	4b9c      	ldr	r3, [pc, #624]	; (800477c <HAL_RCC_OscConfig+0x608>)
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	4b9b      	ldr	r3, [pc, #620]	; (800477c <HAL_RCC_OscConfig+0x608>)
 8004510:	2180      	movs	r1, #128	; 0x80
 8004512:	0049      	lsls	r1, r1, #1
 8004514:	430a      	orrs	r2, r1
 8004516:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004518:	f7fe fc4a 	bl	8002db0 <HAL_GetTick>
 800451c:	0003      	movs	r3, r0
 800451e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004520:	e008      	b.n	8004534 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004522:	f7fe fc45 	bl	8002db0 <HAL_GetTick>
 8004526:	0002      	movs	r2, r0
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	2b02      	cmp	r3, #2
 800452e:	d901      	bls.n	8004534 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e11c      	b.n	800476e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004534:	4b91      	ldr	r3, [pc, #580]	; (800477c <HAL_RCC_OscConfig+0x608>)
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	2380      	movs	r3, #128	; 0x80
 800453a:	005b      	lsls	r3, r3, #1
 800453c:	4013      	ands	r3, r2
 800453e:	d0f0      	beq.n	8004522 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d106      	bne.n	8004556 <HAL_RCC_OscConfig+0x3e2>
 8004548:	4b8b      	ldr	r3, [pc, #556]	; (8004778 <HAL_RCC_OscConfig+0x604>)
 800454a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800454c:	4b8a      	ldr	r3, [pc, #552]	; (8004778 <HAL_RCC_OscConfig+0x604>)
 800454e:	2101      	movs	r1, #1
 8004550:	430a      	orrs	r2, r1
 8004552:	65da      	str	r2, [r3, #92]	; 0x5c
 8004554:	e01c      	b.n	8004590 <HAL_RCC_OscConfig+0x41c>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	2b05      	cmp	r3, #5
 800455c:	d10c      	bne.n	8004578 <HAL_RCC_OscConfig+0x404>
 800455e:	4b86      	ldr	r3, [pc, #536]	; (8004778 <HAL_RCC_OscConfig+0x604>)
 8004560:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004562:	4b85      	ldr	r3, [pc, #532]	; (8004778 <HAL_RCC_OscConfig+0x604>)
 8004564:	2104      	movs	r1, #4
 8004566:	430a      	orrs	r2, r1
 8004568:	65da      	str	r2, [r3, #92]	; 0x5c
 800456a:	4b83      	ldr	r3, [pc, #524]	; (8004778 <HAL_RCC_OscConfig+0x604>)
 800456c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800456e:	4b82      	ldr	r3, [pc, #520]	; (8004778 <HAL_RCC_OscConfig+0x604>)
 8004570:	2101      	movs	r1, #1
 8004572:	430a      	orrs	r2, r1
 8004574:	65da      	str	r2, [r3, #92]	; 0x5c
 8004576:	e00b      	b.n	8004590 <HAL_RCC_OscConfig+0x41c>
 8004578:	4b7f      	ldr	r3, [pc, #508]	; (8004778 <HAL_RCC_OscConfig+0x604>)
 800457a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800457c:	4b7e      	ldr	r3, [pc, #504]	; (8004778 <HAL_RCC_OscConfig+0x604>)
 800457e:	2101      	movs	r1, #1
 8004580:	438a      	bics	r2, r1
 8004582:	65da      	str	r2, [r3, #92]	; 0x5c
 8004584:	4b7c      	ldr	r3, [pc, #496]	; (8004778 <HAL_RCC_OscConfig+0x604>)
 8004586:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004588:	4b7b      	ldr	r3, [pc, #492]	; (8004778 <HAL_RCC_OscConfig+0x604>)
 800458a:	2104      	movs	r1, #4
 800458c:	438a      	bics	r2, r1
 800458e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d014      	beq.n	80045c2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004598:	f7fe fc0a 	bl	8002db0 <HAL_GetTick>
 800459c:	0003      	movs	r3, r0
 800459e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045a0:	e009      	b.n	80045b6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045a2:	f7fe fc05 	bl	8002db0 <HAL_GetTick>
 80045a6:	0002      	movs	r2, r0
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	4a74      	ldr	r2, [pc, #464]	; (8004780 <HAL_RCC_OscConfig+0x60c>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e0db      	b.n	800476e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045b6:	4b70      	ldr	r3, [pc, #448]	; (8004778 <HAL_RCC_OscConfig+0x604>)
 80045b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ba:	2202      	movs	r2, #2
 80045bc:	4013      	ands	r3, r2
 80045be:	d0f0      	beq.n	80045a2 <HAL_RCC_OscConfig+0x42e>
 80045c0:	e013      	b.n	80045ea <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c2:	f7fe fbf5 	bl	8002db0 <HAL_GetTick>
 80045c6:	0003      	movs	r3, r0
 80045c8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045ca:	e009      	b.n	80045e0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045cc:	f7fe fbf0 	bl	8002db0 <HAL_GetTick>
 80045d0:	0002      	movs	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	4a6a      	ldr	r2, [pc, #424]	; (8004780 <HAL_RCC_OscConfig+0x60c>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d901      	bls.n	80045e0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e0c6      	b.n	800476e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045e0:	4b65      	ldr	r3, [pc, #404]	; (8004778 <HAL_RCC_OscConfig+0x604>)
 80045e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045e4:	2202      	movs	r2, #2
 80045e6:	4013      	ands	r3, r2
 80045e8:	d1f0      	bne.n	80045cc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80045ea:	231f      	movs	r3, #31
 80045ec:	18fb      	adds	r3, r7, r3
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d105      	bne.n	8004600 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80045f4:	4b60      	ldr	r3, [pc, #384]	; (8004778 <HAL_RCC_OscConfig+0x604>)
 80045f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045f8:	4b5f      	ldr	r3, [pc, #380]	; (8004778 <HAL_RCC_OscConfig+0x604>)
 80045fa:	4962      	ldr	r1, [pc, #392]	; (8004784 <HAL_RCC_OscConfig+0x610>)
 80045fc:	400a      	ands	r2, r1
 80045fe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	69db      	ldr	r3, [r3, #28]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d100      	bne.n	800460a <HAL_RCC_OscConfig+0x496>
 8004608:	e0b0      	b.n	800476c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800460a:	4b5b      	ldr	r3, [pc, #364]	; (8004778 <HAL_RCC_OscConfig+0x604>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	2238      	movs	r2, #56	; 0x38
 8004610:	4013      	ands	r3, r2
 8004612:	2b10      	cmp	r3, #16
 8004614:	d100      	bne.n	8004618 <HAL_RCC_OscConfig+0x4a4>
 8004616:	e078      	b.n	800470a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	69db      	ldr	r3, [r3, #28]
 800461c:	2b02      	cmp	r3, #2
 800461e:	d153      	bne.n	80046c8 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004620:	4b55      	ldr	r3, [pc, #340]	; (8004778 <HAL_RCC_OscConfig+0x604>)
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	4b54      	ldr	r3, [pc, #336]	; (8004778 <HAL_RCC_OscConfig+0x604>)
 8004626:	4958      	ldr	r1, [pc, #352]	; (8004788 <HAL_RCC_OscConfig+0x614>)
 8004628:	400a      	ands	r2, r1
 800462a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800462c:	f7fe fbc0 	bl	8002db0 <HAL_GetTick>
 8004630:	0003      	movs	r3, r0
 8004632:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004634:	e008      	b.n	8004648 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004636:	f7fe fbbb 	bl	8002db0 <HAL_GetTick>
 800463a:	0002      	movs	r2, r0
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b02      	cmp	r3, #2
 8004642:	d901      	bls.n	8004648 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e092      	b.n	800476e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004648:	4b4b      	ldr	r3, [pc, #300]	; (8004778 <HAL_RCC_OscConfig+0x604>)
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	2380      	movs	r3, #128	; 0x80
 800464e:	049b      	lsls	r3, r3, #18
 8004650:	4013      	ands	r3, r2
 8004652:	d1f0      	bne.n	8004636 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004654:	4b48      	ldr	r3, [pc, #288]	; (8004778 <HAL_RCC_OscConfig+0x604>)
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	4a4c      	ldr	r2, [pc, #304]	; (800478c <HAL_RCC_OscConfig+0x618>)
 800465a:	4013      	ands	r3, r2
 800465c:	0019      	movs	r1, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a1a      	ldr	r2, [r3, #32]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004666:	431a      	orrs	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466c:	021b      	lsls	r3, r3, #8
 800466e:	431a      	orrs	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004674:	431a      	orrs	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467a:	431a      	orrs	r2, r3
 800467c:	4b3e      	ldr	r3, [pc, #248]	; (8004778 <HAL_RCC_OscConfig+0x604>)
 800467e:	430a      	orrs	r2, r1
 8004680:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004682:	4b3d      	ldr	r3, [pc, #244]	; (8004778 <HAL_RCC_OscConfig+0x604>)
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	4b3c      	ldr	r3, [pc, #240]	; (8004778 <HAL_RCC_OscConfig+0x604>)
 8004688:	2180      	movs	r1, #128	; 0x80
 800468a:	0449      	lsls	r1, r1, #17
 800468c:	430a      	orrs	r2, r1
 800468e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004690:	4b39      	ldr	r3, [pc, #228]	; (8004778 <HAL_RCC_OscConfig+0x604>)
 8004692:	68da      	ldr	r2, [r3, #12]
 8004694:	4b38      	ldr	r3, [pc, #224]	; (8004778 <HAL_RCC_OscConfig+0x604>)
 8004696:	2180      	movs	r1, #128	; 0x80
 8004698:	0549      	lsls	r1, r1, #21
 800469a:	430a      	orrs	r2, r1
 800469c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800469e:	f7fe fb87 	bl	8002db0 <HAL_GetTick>
 80046a2:	0003      	movs	r3, r0
 80046a4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046a6:	e008      	b.n	80046ba <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046a8:	f7fe fb82 	bl	8002db0 <HAL_GetTick>
 80046ac:	0002      	movs	r2, r0
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e059      	b.n	800476e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046ba:	4b2f      	ldr	r3, [pc, #188]	; (8004778 <HAL_RCC_OscConfig+0x604>)
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	2380      	movs	r3, #128	; 0x80
 80046c0:	049b      	lsls	r3, r3, #18
 80046c2:	4013      	ands	r3, r2
 80046c4:	d0f0      	beq.n	80046a8 <HAL_RCC_OscConfig+0x534>
 80046c6:	e051      	b.n	800476c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046c8:	4b2b      	ldr	r3, [pc, #172]	; (8004778 <HAL_RCC_OscConfig+0x604>)
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	4b2a      	ldr	r3, [pc, #168]	; (8004778 <HAL_RCC_OscConfig+0x604>)
 80046ce:	492e      	ldr	r1, [pc, #184]	; (8004788 <HAL_RCC_OscConfig+0x614>)
 80046d0:	400a      	ands	r2, r1
 80046d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d4:	f7fe fb6c 	bl	8002db0 <HAL_GetTick>
 80046d8:	0003      	movs	r3, r0
 80046da:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046dc:	e008      	b.n	80046f0 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046de:	f7fe fb67 	bl	8002db0 <HAL_GetTick>
 80046e2:	0002      	movs	r2, r0
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d901      	bls.n	80046f0 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e03e      	b.n	800476e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046f0:	4b21      	ldr	r3, [pc, #132]	; (8004778 <HAL_RCC_OscConfig+0x604>)
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	2380      	movs	r3, #128	; 0x80
 80046f6:	049b      	lsls	r3, r3, #18
 80046f8:	4013      	ands	r3, r2
 80046fa:	d1f0      	bne.n	80046de <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80046fc:	4b1e      	ldr	r3, [pc, #120]	; (8004778 <HAL_RCC_OscConfig+0x604>)
 80046fe:	68da      	ldr	r2, [r3, #12]
 8004700:	4b1d      	ldr	r3, [pc, #116]	; (8004778 <HAL_RCC_OscConfig+0x604>)
 8004702:	4923      	ldr	r1, [pc, #140]	; (8004790 <HAL_RCC_OscConfig+0x61c>)
 8004704:	400a      	ands	r2, r1
 8004706:	60da      	str	r2, [r3, #12]
 8004708:	e030      	b.n	800476c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d101      	bne.n	8004716 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e02b      	b.n	800476e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004716:	4b18      	ldr	r3, [pc, #96]	; (8004778 <HAL_RCC_OscConfig+0x604>)
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	2203      	movs	r2, #3
 8004720:	401a      	ands	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	429a      	cmp	r2, r3
 8004728:	d11e      	bne.n	8004768 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	2270      	movs	r2, #112	; 0x70
 800472e:	401a      	ands	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004734:	429a      	cmp	r2, r3
 8004736:	d117      	bne.n	8004768 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	23fe      	movs	r3, #254	; 0xfe
 800473c:	01db      	lsls	r3, r3, #7
 800473e:	401a      	ands	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004744:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004746:	429a      	cmp	r2, r3
 8004748:	d10e      	bne.n	8004768 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	23f8      	movs	r3, #248	; 0xf8
 800474e:	039b      	lsls	r3, r3, #14
 8004750:	401a      	ands	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004756:	429a      	cmp	r2, r3
 8004758:	d106      	bne.n	8004768 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	0f5b      	lsrs	r3, r3, #29
 800475e:	075a      	lsls	r2, r3, #29
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004764:	429a      	cmp	r2, r3
 8004766:	d001      	beq.n	800476c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e000      	b.n	800476e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	0018      	movs	r0, r3
 8004770:	46bd      	mov	sp, r7
 8004772:	b008      	add	sp, #32
 8004774:	bd80      	pop	{r7, pc}
 8004776:	46c0      	nop			; (mov r8, r8)
 8004778:	40021000 	.word	0x40021000
 800477c:	40007000 	.word	0x40007000
 8004780:	00001388 	.word	0x00001388
 8004784:	efffffff 	.word	0xefffffff
 8004788:	feffffff 	.word	0xfeffffff
 800478c:	1fc1808c 	.word	0x1fc1808c
 8004790:	effefffc 	.word	0xeffefffc

08004794 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d101      	bne.n	80047a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e0e9      	b.n	800497c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047a8:	4b76      	ldr	r3, [pc, #472]	; (8004984 <HAL_RCC_ClockConfig+0x1f0>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2207      	movs	r2, #7
 80047ae:	4013      	ands	r3, r2
 80047b0:	683a      	ldr	r2, [r7, #0]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d91e      	bls.n	80047f4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047b6:	4b73      	ldr	r3, [pc, #460]	; (8004984 <HAL_RCC_ClockConfig+0x1f0>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2207      	movs	r2, #7
 80047bc:	4393      	bics	r3, r2
 80047be:	0019      	movs	r1, r3
 80047c0:	4b70      	ldr	r3, [pc, #448]	; (8004984 <HAL_RCC_ClockConfig+0x1f0>)
 80047c2:	683a      	ldr	r2, [r7, #0]
 80047c4:	430a      	orrs	r2, r1
 80047c6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80047c8:	f7fe faf2 	bl	8002db0 <HAL_GetTick>
 80047cc:	0003      	movs	r3, r0
 80047ce:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80047d0:	e009      	b.n	80047e6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047d2:	f7fe faed 	bl	8002db0 <HAL_GetTick>
 80047d6:	0002      	movs	r2, r0
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	4a6a      	ldr	r2, [pc, #424]	; (8004988 <HAL_RCC_ClockConfig+0x1f4>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e0ca      	b.n	800497c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80047e6:	4b67      	ldr	r3, [pc, #412]	; (8004984 <HAL_RCC_ClockConfig+0x1f0>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2207      	movs	r2, #7
 80047ec:	4013      	ands	r3, r2
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d1ee      	bne.n	80047d2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2202      	movs	r2, #2
 80047fa:	4013      	ands	r3, r2
 80047fc:	d015      	beq.n	800482a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2204      	movs	r2, #4
 8004804:	4013      	ands	r3, r2
 8004806:	d006      	beq.n	8004816 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004808:	4b60      	ldr	r3, [pc, #384]	; (800498c <HAL_RCC_ClockConfig+0x1f8>)
 800480a:	689a      	ldr	r2, [r3, #8]
 800480c:	4b5f      	ldr	r3, [pc, #380]	; (800498c <HAL_RCC_ClockConfig+0x1f8>)
 800480e:	21e0      	movs	r1, #224	; 0xe0
 8004810:	01c9      	lsls	r1, r1, #7
 8004812:	430a      	orrs	r2, r1
 8004814:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004816:	4b5d      	ldr	r3, [pc, #372]	; (800498c <HAL_RCC_ClockConfig+0x1f8>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	4a5d      	ldr	r2, [pc, #372]	; (8004990 <HAL_RCC_ClockConfig+0x1fc>)
 800481c:	4013      	ands	r3, r2
 800481e:	0019      	movs	r1, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689a      	ldr	r2, [r3, #8]
 8004824:	4b59      	ldr	r3, [pc, #356]	; (800498c <HAL_RCC_ClockConfig+0x1f8>)
 8004826:	430a      	orrs	r2, r1
 8004828:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2201      	movs	r2, #1
 8004830:	4013      	ands	r3, r2
 8004832:	d057      	beq.n	80048e4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d107      	bne.n	800484c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800483c:	4b53      	ldr	r3, [pc, #332]	; (800498c <HAL_RCC_ClockConfig+0x1f8>)
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	2380      	movs	r3, #128	; 0x80
 8004842:	029b      	lsls	r3, r3, #10
 8004844:	4013      	ands	r3, r2
 8004846:	d12b      	bne.n	80048a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e097      	b.n	800497c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	2b02      	cmp	r3, #2
 8004852:	d107      	bne.n	8004864 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004854:	4b4d      	ldr	r3, [pc, #308]	; (800498c <HAL_RCC_ClockConfig+0x1f8>)
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	2380      	movs	r3, #128	; 0x80
 800485a:	049b      	lsls	r3, r3, #18
 800485c:	4013      	ands	r3, r2
 800485e:	d11f      	bne.n	80048a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e08b      	b.n	800497c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d107      	bne.n	800487c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800486c:	4b47      	ldr	r3, [pc, #284]	; (800498c <HAL_RCC_ClockConfig+0x1f8>)
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	2380      	movs	r3, #128	; 0x80
 8004872:	00db      	lsls	r3, r3, #3
 8004874:	4013      	ands	r3, r2
 8004876:	d113      	bne.n	80048a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e07f      	b.n	800497c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	2b03      	cmp	r3, #3
 8004882:	d106      	bne.n	8004892 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004884:	4b41      	ldr	r3, [pc, #260]	; (800498c <HAL_RCC_ClockConfig+0x1f8>)
 8004886:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004888:	2202      	movs	r2, #2
 800488a:	4013      	ands	r3, r2
 800488c:	d108      	bne.n	80048a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e074      	b.n	800497c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004892:	4b3e      	ldr	r3, [pc, #248]	; (800498c <HAL_RCC_ClockConfig+0x1f8>)
 8004894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004896:	2202      	movs	r2, #2
 8004898:	4013      	ands	r3, r2
 800489a:	d101      	bne.n	80048a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e06d      	b.n	800497c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048a0:	4b3a      	ldr	r3, [pc, #232]	; (800498c <HAL_RCC_ClockConfig+0x1f8>)
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	2207      	movs	r2, #7
 80048a6:	4393      	bics	r3, r2
 80048a8:	0019      	movs	r1, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685a      	ldr	r2, [r3, #4]
 80048ae:	4b37      	ldr	r3, [pc, #220]	; (800498c <HAL_RCC_ClockConfig+0x1f8>)
 80048b0:	430a      	orrs	r2, r1
 80048b2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048b4:	f7fe fa7c 	bl	8002db0 <HAL_GetTick>
 80048b8:	0003      	movs	r3, r0
 80048ba:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048bc:	e009      	b.n	80048d2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048be:	f7fe fa77 	bl	8002db0 <HAL_GetTick>
 80048c2:	0002      	movs	r2, r0
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	4a2f      	ldr	r2, [pc, #188]	; (8004988 <HAL_RCC_ClockConfig+0x1f4>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d901      	bls.n	80048d2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e054      	b.n	800497c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048d2:	4b2e      	ldr	r3, [pc, #184]	; (800498c <HAL_RCC_ClockConfig+0x1f8>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	2238      	movs	r2, #56	; 0x38
 80048d8:	401a      	ands	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	00db      	lsls	r3, r3, #3
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d1ec      	bne.n	80048be <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048e4:	4b27      	ldr	r3, [pc, #156]	; (8004984 <HAL_RCC_ClockConfig+0x1f0>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2207      	movs	r2, #7
 80048ea:	4013      	ands	r3, r2
 80048ec:	683a      	ldr	r2, [r7, #0]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d21e      	bcs.n	8004930 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048f2:	4b24      	ldr	r3, [pc, #144]	; (8004984 <HAL_RCC_ClockConfig+0x1f0>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2207      	movs	r2, #7
 80048f8:	4393      	bics	r3, r2
 80048fa:	0019      	movs	r1, r3
 80048fc:	4b21      	ldr	r3, [pc, #132]	; (8004984 <HAL_RCC_ClockConfig+0x1f0>)
 80048fe:	683a      	ldr	r2, [r7, #0]
 8004900:	430a      	orrs	r2, r1
 8004902:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004904:	f7fe fa54 	bl	8002db0 <HAL_GetTick>
 8004908:	0003      	movs	r3, r0
 800490a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800490c:	e009      	b.n	8004922 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800490e:	f7fe fa4f 	bl	8002db0 <HAL_GetTick>
 8004912:	0002      	movs	r2, r0
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	4a1b      	ldr	r2, [pc, #108]	; (8004988 <HAL_RCC_ClockConfig+0x1f4>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d901      	bls.n	8004922 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e02c      	b.n	800497c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004922:	4b18      	ldr	r3, [pc, #96]	; (8004984 <HAL_RCC_ClockConfig+0x1f0>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2207      	movs	r2, #7
 8004928:	4013      	ands	r3, r2
 800492a:	683a      	ldr	r2, [r7, #0]
 800492c:	429a      	cmp	r2, r3
 800492e:	d1ee      	bne.n	800490e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2204      	movs	r2, #4
 8004936:	4013      	ands	r3, r2
 8004938:	d009      	beq.n	800494e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800493a:	4b14      	ldr	r3, [pc, #80]	; (800498c <HAL_RCC_ClockConfig+0x1f8>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	4a15      	ldr	r2, [pc, #84]	; (8004994 <HAL_RCC_ClockConfig+0x200>)
 8004940:	4013      	ands	r3, r2
 8004942:	0019      	movs	r1, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68da      	ldr	r2, [r3, #12]
 8004948:	4b10      	ldr	r3, [pc, #64]	; (800498c <HAL_RCC_ClockConfig+0x1f8>)
 800494a:	430a      	orrs	r2, r1
 800494c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800494e:	f000 f829 	bl	80049a4 <HAL_RCC_GetSysClockFreq>
 8004952:	0001      	movs	r1, r0
 8004954:	4b0d      	ldr	r3, [pc, #52]	; (800498c <HAL_RCC_ClockConfig+0x1f8>)
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	0a1b      	lsrs	r3, r3, #8
 800495a:	220f      	movs	r2, #15
 800495c:	401a      	ands	r2, r3
 800495e:	4b0e      	ldr	r3, [pc, #56]	; (8004998 <HAL_RCC_ClockConfig+0x204>)
 8004960:	0092      	lsls	r2, r2, #2
 8004962:	58d3      	ldr	r3, [r2, r3]
 8004964:	221f      	movs	r2, #31
 8004966:	4013      	ands	r3, r2
 8004968:	000a      	movs	r2, r1
 800496a:	40da      	lsrs	r2, r3
 800496c:	4b0b      	ldr	r3, [pc, #44]	; (800499c <HAL_RCC_ClockConfig+0x208>)
 800496e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004970:	4b0b      	ldr	r3, [pc, #44]	; (80049a0 <HAL_RCC_ClockConfig+0x20c>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	0018      	movs	r0, r3
 8004976:	f7fe f9bf 	bl	8002cf8 <HAL_InitTick>
 800497a:	0003      	movs	r3, r0
}
 800497c:	0018      	movs	r0, r3
 800497e:	46bd      	mov	sp, r7
 8004980:	b004      	add	sp, #16
 8004982:	bd80      	pop	{r7, pc}
 8004984:	40022000 	.word	0x40022000
 8004988:	00001388 	.word	0x00001388
 800498c:	40021000 	.word	0x40021000
 8004990:	fffff0ff 	.word	0xfffff0ff
 8004994:	ffff8fff 	.word	0xffff8fff
 8004998:	08004c00 	.word	0x08004c00
 800499c:	20000004 	.word	0x20000004
 80049a0:	20000008 	.word	0x20000008

080049a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b086      	sub	sp, #24
 80049a8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80049aa:	4b3c      	ldr	r3, [pc, #240]	; (8004a9c <HAL_RCC_GetSysClockFreq+0xf8>)
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	2238      	movs	r2, #56	; 0x38
 80049b0:	4013      	ands	r3, r2
 80049b2:	d10f      	bne.n	80049d4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80049b4:	4b39      	ldr	r3, [pc, #228]	; (8004a9c <HAL_RCC_GetSysClockFreq+0xf8>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	0adb      	lsrs	r3, r3, #11
 80049ba:	2207      	movs	r2, #7
 80049bc:	4013      	ands	r3, r2
 80049be:	2201      	movs	r2, #1
 80049c0:	409a      	lsls	r2, r3
 80049c2:	0013      	movs	r3, r2
 80049c4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80049c6:	6839      	ldr	r1, [r7, #0]
 80049c8:	4835      	ldr	r0, [pc, #212]	; (8004aa0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80049ca:	f7fb fb99 	bl	8000100 <__udivsi3>
 80049ce:	0003      	movs	r3, r0
 80049d0:	613b      	str	r3, [r7, #16]
 80049d2:	e05d      	b.n	8004a90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80049d4:	4b31      	ldr	r3, [pc, #196]	; (8004a9c <HAL_RCC_GetSysClockFreq+0xf8>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	2238      	movs	r2, #56	; 0x38
 80049da:	4013      	ands	r3, r2
 80049dc:	2b08      	cmp	r3, #8
 80049de:	d102      	bne.n	80049e6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80049e0:	4b30      	ldr	r3, [pc, #192]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x100>)
 80049e2:	613b      	str	r3, [r7, #16]
 80049e4:	e054      	b.n	8004a90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049e6:	4b2d      	ldr	r3, [pc, #180]	; (8004a9c <HAL_RCC_GetSysClockFreq+0xf8>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	2238      	movs	r2, #56	; 0x38
 80049ec:	4013      	ands	r3, r2
 80049ee:	2b10      	cmp	r3, #16
 80049f0:	d138      	bne.n	8004a64 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80049f2:	4b2a      	ldr	r3, [pc, #168]	; (8004a9c <HAL_RCC_GetSysClockFreq+0xf8>)
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	2203      	movs	r2, #3
 80049f8:	4013      	ands	r3, r2
 80049fa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80049fc:	4b27      	ldr	r3, [pc, #156]	; (8004a9c <HAL_RCC_GetSysClockFreq+0xf8>)
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	091b      	lsrs	r3, r3, #4
 8004a02:	2207      	movs	r2, #7
 8004a04:	4013      	ands	r3, r2
 8004a06:	3301      	adds	r3, #1
 8004a08:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2b03      	cmp	r3, #3
 8004a0e:	d10d      	bne.n	8004a2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a10:	68b9      	ldr	r1, [r7, #8]
 8004a12:	4824      	ldr	r0, [pc, #144]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x100>)
 8004a14:	f7fb fb74 	bl	8000100 <__udivsi3>
 8004a18:	0003      	movs	r3, r0
 8004a1a:	0019      	movs	r1, r3
 8004a1c:	4b1f      	ldr	r3, [pc, #124]	; (8004a9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	0a1b      	lsrs	r3, r3, #8
 8004a22:	227f      	movs	r2, #127	; 0x7f
 8004a24:	4013      	ands	r3, r2
 8004a26:	434b      	muls	r3, r1
 8004a28:	617b      	str	r3, [r7, #20]
        break;
 8004a2a:	e00d      	b.n	8004a48 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004a2c:	68b9      	ldr	r1, [r7, #8]
 8004a2e:	481c      	ldr	r0, [pc, #112]	; (8004aa0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004a30:	f7fb fb66 	bl	8000100 <__udivsi3>
 8004a34:	0003      	movs	r3, r0
 8004a36:	0019      	movs	r1, r3
 8004a38:	4b18      	ldr	r3, [pc, #96]	; (8004a9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	0a1b      	lsrs	r3, r3, #8
 8004a3e:	227f      	movs	r2, #127	; 0x7f
 8004a40:	4013      	ands	r3, r2
 8004a42:	434b      	muls	r3, r1
 8004a44:	617b      	str	r3, [r7, #20]
        break;
 8004a46:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004a48:	4b14      	ldr	r3, [pc, #80]	; (8004a9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	0f5b      	lsrs	r3, r3, #29
 8004a4e:	2207      	movs	r2, #7
 8004a50:	4013      	ands	r3, r2
 8004a52:	3301      	adds	r3, #1
 8004a54:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004a56:	6879      	ldr	r1, [r7, #4]
 8004a58:	6978      	ldr	r0, [r7, #20]
 8004a5a:	f7fb fb51 	bl	8000100 <__udivsi3>
 8004a5e:	0003      	movs	r3, r0
 8004a60:	613b      	str	r3, [r7, #16]
 8004a62:	e015      	b.n	8004a90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004a64:	4b0d      	ldr	r3, [pc, #52]	; (8004a9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	2238      	movs	r2, #56	; 0x38
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	2b20      	cmp	r3, #32
 8004a6e:	d103      	bne.n	8004a78 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004a70:	2380      	movs	r3, #128	; 0x80
 8004a72:	021b      	lsls	r3, r3, #8
 8004a74:	613b      	str	r3, [r7, #16]
 8004a76:	e00b      	b.n	8004a90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004a78:	4b08      	ldr	r3, [pc, #32]	; (8004a9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	2238      	movs	r2, #56	; 0x38
 8004a7e:	4013      	ands	r3, r2
 8004a80:	2b18      	cmp	r3, #24
 8004a82:	d103      	bne.n	8004a8c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004a84:	23fa      	movs	r3, #250	; 0xfa
 8004a86:	01db      	lsls	r3, r3, #7
 8004a88:	613b      	str	r3, [r7, #16]
 8004a8a:	e001      	b.n	8004a90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004a90:	693b      	ldr	r3, [r7, #16]
}
 8004a92:	0018      	movs	r0, r3
 8004a94:	46bd      	mov	sp, r7
 8004a96:	b006      	add	sp, #24
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	46c0      	nop			; (mov r8, r8)
 8004a9c:	40021000 	.word	0x40021000
 8004aa0:	00f42400 	.word	0x00f42400
 8004aa4:	007a1200 	.word	0x007a1200

08004aa8 <memset>:
 8004aa8:	0003      	movs	r3, r0
 8004aaa:	1882      	adds	r2, r0, r2
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d100      	bne.n	8004ab2 <memset+0xa>
 8004ab0:	4770      	bx	lr
 8004ab2:	7019      	strb	r1, [r3, #0]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	e7f9      	b.n	8004aac <memset+0x4>

08004ab8 <__libc_init_array>:
 8004ab8:	b570      	push	{r4, r5, r6, lr}
 8004aba:	2600      	movs	r6, #0
 8004abc:	4c0c      	ldr	r4, [pc, #48]	; (8004af0 <__libc_init_array+0x38>)
 8004abe:	4d0d      	ldr	r5, [pc, #52]	; (8004af4 <__libc_init_array+0x3c>)
 8004ac0:	1b64      	subs	r4, r4, r5
 8004ac2:	10a4      	asrs	r4, r4, #2
 8004ac4:	42a6      	cmp	r6, r4
 8004ac6:	d109      	bne.n	8004adc <__libc_init_array+0x24>
 8004ac8:	2600      	movs	r6, #0
 8004aca:	f000 f819 	bl	8004b00 <_init>
 8004ace:	4c0a      	ldr	r4, [pc, #40]	; (8004af8 <__libc_init_array+0x40>)
 8004ad0:	4d0a      	ldr	r5, [pc, #40]	; (8004afc <__libc_init_array+0x44>)
 8004ad2:	1b64      	subs	r4, r4, r5
 8004ad4:	10a4      	asrs	r4, r4, #2
 8004ad6:	42a6      	cmp	r6, r4
 8004ad8:	d105      	bne.n	8004ae6 <__libc_init_array+0x2e>
 8004ada:	bd70      	pop	{r4, r5, r6, pc}
 8004adc:	00b3      	lsls	r3, r6, #2
 8004ade:	58eb      	ldr	r3, [r5, r3]
 8004ae0:	4798      	blx	r3
 8004ae2:	3601      	adds	r6, #1
 8004ae4:	e7ee      	b.n	8004ac4 <__libc_init_array+0xc>
 8004ae6:	00b3      	lsls	r3, r6, #2
 8004ae8:	58eb      	ldr	r3, [r5, r3]
 8004aea:	4798      	blx	r3
 8004aec:	3601      	adds	r6, #1
 8004aee:	e7f2      	b.n	8004ad6 <__libc_init_array+0x1e>
 8004af0:	08004c40 	.word	0x08004c40
 8004af4:	08004c40 	.word	0x08004c40
 8004af8:	08004c44 	.word	0x08004c44
 8004afc:	08004c40 	.word	0x08004c40

08004b00 <_init>:
 8004b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b02:	46c0      	nop			; (mov r8, r8)
 8004b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b06:	bc08      	pop	{r3}
 8004b08:	469e      	mov	lr, r3
 8004b0a:	4770      	bx	lr

08004b0c <_fini>:
 8004b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b0e:	46c0      	nop			; (mov r8, r8)
 8004b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b12:	bc08      	pop	{r3}
 8004b14:	469e      	mov	lr, r3
 8004b16:	4770      	bx	lr
