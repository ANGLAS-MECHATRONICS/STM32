
LETRERO_29LEDS2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a10  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08004ac8  08004ac8  00014ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c30  08004c30  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004c30  08004c30  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c30  08004c30  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c30  08004c30  00014c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c34  08004c34  00014c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004c38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000010  08004c48  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08004c48  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007857  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001767  00000000  00000000  0002788f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b0  00000000  00000000  00028ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006f8  00000000  00000000  000297a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001424a  00000000  00000000  00029ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000087d8  00000000  00000000  0003e0ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008043a  00000000  00000000  000468c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c6cfc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c98  00000000  00000000  000c6d4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000010 	.word	0x20000010
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004ab0 	.word	0x08004ab0

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000014 	.word	0x20000014
 80000fc:	08004ab0 	.word	0x08004ab0

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <__aeabi_f2uiz>:
 8000218:	219e      	movs	r1, #158	; 0x9e
 800021a:	b510      	push	{r4, lr}
 800021c:	05c9      	lsls	r1, r1, #23
 800021e:	1c04      	adds	r4, r0, #0
 8000220:	f000 fe7c 	bl	8000f1c <__aeabi_fcmpge>
 8000224:	2800      	cmp	r0, #0
 8000226:	d103      	bne.n	8000230 <__aeabi_f2uiz+0x18>
 8000228:	1c20      	adds	r0, r4, #0
 800022a:	f000 fd97 	bl	8000d5c <__aeabi_f2iz>
 800022e:	bd10      	pop	{r4, pc}
 8000230:	219e      	movs	r1, #158	; 0x9e
 8000232:	1c20      	adds	r0, r4, #0
 8000234:	05c9      	lsls	r1, r1, #23
 8000236:	f000 fbe3 	bl	8000a00 <__aeabi_fsub>
 800023a:	f000 fd8f 	bl	8000d5c <__aeabi_f2iz>
 800023e:	2380      	movs	r3, #128	; 0x80
 8000240:	061b      	lsls	r3, r3, #24
 8000242:	469c      	mov	ip, r3
 8000244:	4460      	add	r0, ip
 8000246:	e7f2      	b.n	800022e <__aeabi_f2uiz+0x16>

08000248 <__aeabi_fadd>:
 8000248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800024a:	46c6      	mov	lr, r8
 800024c:	0243      	lsls	r3, r0, #9
 800024e:	0a5b      	lsrs	r3, r3, #9
 8000250:	024e      	lsls	r6, r1, #9
 8000252:	0045      	lsls	r5, r0, #1
 8000254:	004f      	lsls	r7, r1, #1
 8000256:	00da      	lsls	r2, r3, #3
 8000258:	0fc4      	lsrs	r4, r0, #31
 800025a:	469c      	mov	ip, r3
 800025c:	0a70      	lsrs	r0, r6, #9
 800025e:	4690      	mov	r8, r2
 8000260:	b500      	push	{lr}
 8000262:	0e2d      	lsrs	r5, r5, #24
 8000264:	0e3f      	lsrs	r7, r7, #24
 8000266:	0fc9      	lsrs	r1, r1, #31
 8000268:	09b6      	lsrs	r6, r6, #6
 800026a:	428c      	cmp	r4, r1
 800026c:	d04b      	beq.n	8000306 <__aeabi_fadd+0xbe>
 800026e:	1bea      	subs	r2, r5, r7
 8000270:	2a00      	cmp	r2, #0
 8000272:	dd36      	ble.n	80002e2 <__aeabi_fadd+0x9a>
 8000274:	2f00      	cmp	r7, #0
 8000276:	d061      	beq.n	800033c <__aeabi_fadd+0xf4>
 8000278:	2dff      	cmp	r5, #255	; 0xff
 800027a:	d100      	bne.n	800027e <__aeabi_fadd+0x36>
 800027c:	e0ad      	b.n	80003da <__aeabi_fadd+0x192>
 800027e:	2380      	movs	r3, #128	; 0x80
 8000280:	04db      	lsls	r3, r3, #19
 8000282:	431e      	orrs	r6, r3
 8000284:	2a1b      	cmp	r2, #27
 8000286:	dc00      	bgt.n	800028a <__aeabi_fadd+0x42>
 8000288:	e0d3      	b.n	8000432 <__aeabi_fadd+0x1ea>
 800028a:	2001      	movs	r0, #1
 800028c:	4643      	mov	r3, r8
 800028e:	1a18      	subs	r0, r3, r0
 8000290:	0143      	lsls	r3, r0, #5
 8000292:	d400      	bmi.n	8000296 <__aeabi_fadd+0x4e>
 8000294:	e08c      	b.n	80003b0 <__aeabi_fadd+0x168>
 8000296:	0180      	lsls	r0, r0, #6
 8000298:	0987      	lsrs	r7, r0, #6
 800029a:	0038      	movs	r0, r7
 800029c:	f000 fe48 	bl	8000f30 <__clzsi2>
 80002a0:	3805      	subs	r0, #5
 80002a2:	4087      	lsls	r7, r0
 80002a4:	4285      	cmp	r5, r0
 80002a6:	dc00      	bgt.n	80002aa <__aeabi_fadd+0x62>
 80002a8:	e0b6      	b.n	8000418 <__aeabi_fadd+0x1d0>
 80002aa:	1a2d      	subs	r5, r5, r0
 80002ac:	48b3      	ldr	r0, [pc, #716]	; (800057c <__aeabi_fadd+0x334>)
 80002ae:	4038      	ands	r0, r7
 80002b0:	0743      	lsls	r3, r0, #29
 80002b2:	d004      	beq.n	80002be <__aeabi_fadd+0x76>
 80002b4:	230f      	movs	r3, #15
 80002b6:	4003      	ands	r3, r0
 80002b8:	2b04      	cmp	r3, #4
 80002ba:	d000      	beq.n	80002be <__aeabi_fadd+0x76>
 80002bc:	3004      	adds	r0, #4
 80002be:	0143      	lsls	r3, r0, #5
 80002c0:	d400      	bmi.n	80002c4 <__aeabi_fadd+0x7c>
 80002c2:	e078      	b.n	80003b6 <__aeabi_fadd+0x16e>
 80002c4:	1c6a      	adds	r2, r5, #1
 80002c6:	2dfe      	cmp	r5, #254	; 0xfe
 80002c8:	d065      	beq.n	8000396 <__aeabi_fadd+0x14e>
 80002ca:	0180      	lsls	r0, r0, #6
 80002cc:	0a43      	lsrs	r3, r0, #9
 80002ce:	469c      	mov	ip, r3
 80002d0:	b2d2      	uxtb	r2, r2
 80002d2:	4663      	mov	r3, ip
 80002d4:	05d0      	lsls	r0, r2, #23
 80002d6:	4318      	orrs	r0, r3
 80002d8:	07e4      	lsls	r4, r4, #31
 80002da:	4320      	orrs	r0, r4
 80002dc:	bc80      	pop	{r7}
 80002de:	46b8      	mov	r8, r7
 80002e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d035      	beq.n	8000352 <__aeabi_fadd+0x10a>
 80002e6:	1b7a      	subs	r2, r7, r5
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	d000      	beq.n	80002ee <__aeabi_fadd+0xa6>
 80002ec:	e0af      	b.n	800044e <__aeabi_fadd+0x206>
 80002ee:	4643      	mov	r3, r8
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d100      	bne.n	80002f6 <__aeabi_fadd+0xae>
 80002f4:	e0a7      	b.n	8000446 <__aeabi_fadd+0x1fe>
 80002f6:	1e53      	subs	r3, r2, #1
 80002f8:	2a01      	cmp	r2, #1
 80002fa:	d100      	bne.n	80002fe <__aeabi_fadd+0xb6>
 80002fc:	e12f      	b.n	800055e <__aeabi_fadd+0x316>
 80002fe:	2aff      	cmp	r2, #255	; 0xff
 8000300:	d069      	beq.n	80003d6 <__aeabi_fadd+0x18e>
 8000302:	001a      	movs	r2, r3
 8000304:	e0aa      	b.n	800045c <__aeabi_fadd+0x214>
 8000306:	1be9      	subs	r1, r5, r7
 8000308:	2900      	cmp	r1, #0
 800030a:	dd70      	ble.n	80003ee <__aeabi_fadd+0x1a6>
 800030c:	2f00      	cmp	r7, #0
 800030e:	d037      	beq.n	8000380 <__aeabi_fadd+0x138>
 8000310:	2dff      	cmp	r5, #255	; 0xff
 8000312:	d062      	beq.n	80003da <__aeabi_fadd+0x192>
 8000314:	2380      	movs	r3, #128	; 0x80
 8000316:	04db      	lsls	r3, r3, #19
 8000318:	431e      	orrs	r6, r3
 800031a:	291b      	cmp	r1, #27
 800031c:	dc00      	bgt.n	8000320 <__aeabi_fadd+0xd8>
 800031e:	e0b0      	b.n	8000482 <__aeabi_fadd+0x23a>
 8000320:	2001      	movs	r0, #1
 8000322:	4440      	add	r0, r8
 8000324:	0143      	lsls	r3, r0, #5
 8000326:	d543      	bpl.n	80003b0 <__aeabi_fadd+0x168>
 8000328:	3501      	adds	r5, #1
 800032a:	2dff      	cmp	r5, #255	; 0xff
 800032c:	d033      	beq.n	8000396 <__aeabi_fadd+0x14e>
 800032e:	2301      	movs	r3, #1
 8000330:	4a93      	ldr	r2, [pc, #588]	; (8000580 <__aeabi_fadd+0x338>)
 8000332:	4003      	ands	r3, r0
 8000334:	0840      	lsrs	r0, r0, #1
 8000336:	4010      	ands	r0, r2
 8000338:	4318      	orrs	r0, r3
 800033a:	e7b9      	b.n	80002b0 <__aeabi_fadd+0x68>
 800033c:	2e00      	cmp	r6, #0
 800033e:	d100      	bne.n	8000342 <__aeabi_fadd+0xfa>
 8000340:	e083      	b.n	800044a <__aeabi_fadd+0x202>
 8000342:	1e51      	subs	r1, r2, #1
 8000344:	2a01      	cmp	r2, #1
 8000346:	d100      	bne.n	800034a <__aeabi_fadd+0x102>
 8000348:	e0d8      	b.n	80004fc <__aeabi_fadd+0x2b4>
 800034a:	2aff      	cmp	r2, #255	; 0xff
 800034c:	d045      	beq.n	80003da <__aeabi_fadd+0x192>
 800034e:	000a      	movs	r2, r1
 8000350:	e798      	b.n	8000284 <__aeabi_fadd+0x3c>
 8000352:	27fe      	movs	r7, #254	; 0xfe
 8000354:	1c6a      	adds	r2, r5, #1
 8000356:	4217      	tst	r7, r2
 8000358:	d000      	beq.n	800035c <__aeabi_fadd+0x114>
 800035a:	e086      	b.n	800046a <__aeabi_fadd+0x222>
 800035c:	2d00      	cmp	r5, #0
 800035e:	d000      	beq.n	8000362 <__aeabi_fadd+0x11a>
 8000360:	e0b7      	b.n	80004d2 <__aeabi_fadd+0x28a>
 8000362:	4643      	mov	r3, r8
 8000364:	2b00      	cmp	r3, #0
 8000366:	d100      	bne.n	800036a <__aeabi_fadd+0x122>
 8000368:	e0f3      	b.n	8000552 <__aeabi_fadd+0x30a>
 800036a:	2200      	movs	r2, #0
 800036c:	2e00      	cmp	r6, #0
 800036e:	d0b0      	beq.n	80002d2 <__aeabi_fadd+0x8a>
 8000370:	1b98      	subs	r0, r3, r6
 8000372:	0143      	lsls	r3, r0, #5
 8000374:	d400      	bmi.n	8000378 <__aeabi_fadd+0x130>
 8000376:	e0fa      	b.n	800056e <__aeabi_fadd+0x326>
 8000378:	4643      	mov	r3, r8
 800037a:	000c      	movs	r4, r1
 800037c:	1af0      	subs	r0, r6, r3
 800037e:	e797      	b.n	80002b0 <__aeabi_fadd+0x68>
 8000380:	2e00      	cmp	r6, #0
 8000382:	d100      	bne.n	8000386 <__aeabi_fadd+0x13e>
 8000384:	e0c8      	b.n	8000518 <__aeabi_fadd+0x2d0>
 8000386:	1e4a      	subs	r2, r1, #1
 8000388:	2901      	cmp	r1, #1
 800038a:	d100      	bne.n	800038e <__aeabi_fadd+0x146>
 800038c:	e0ae      	b.n	80004ec <__aeabi_fadd+0x2a4>
 800038e:	29ff      	cmp	r1, #255	; 0xff
 8000390:	d023      	beq.n	80003da <__aeabi_fadd+0x192>
 8000392:	0011      	movs	r1, r2
 8000394:	e7c1      	b.n	800031a <__aeabi_fadd+0xd2>
 8000396:	2300      	movs	r3, #0
 8000398:	22ff      	movs	r2, #255	; 0xff
 800039a:	469c      	mov	ip, r3
 800039c:	e799      	b.n	80002d2 <__aeabi_fadd+0x8a>
 800039e:	21fe      	movs	r1, #254	; 0xfe
 80003a0:	1c6a      	adds	r2, r5, #1
 80003a2:	4211      	tst	r1, r2
 80003a4:	d077      	beq.n	8000496 <__aeabi_fadd+0x24e>
 80003a6:	2aff      	cmp	r2, #255	; 0xff
 80003a8:	d0f5      	beq.n	8000396 <__aeabi_fadd+0x14e>
 80003aa:	0015      	movs	r5, r2
 80003ac:	4446      	add	r6, r8
 80003ae:	0870      	lsrs	r0, r6, #1
 80003b0:	0743      	lsls	r3, r0, #29
 80003b2:	d000      	beq.n	80003b6 <__aeabi_fadd+0x16e>
 80003b4:	e77e      	b.n	80002b4 <__aeabi_fadd+0x6c>
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	2dff      	cmp	r5, #255	; 0xff
 80003ba:	d00e      	beq.n	80003da <__aeabi_fadd+0x192>
 80003bc:	025b      	lsls	r3, r3, #9
 80003be:	0a5b      	lsrs	r3, r3, #9
 80003c0:	469c      	mov	ip, r3
 80003c2:	b2ea      	uxtb	r2, r5
 80003c4:	e785      	b.n	80002d2 <__aeabi_fadd+0x8a>
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d007      	beq.n	80003da <__aeabi_fadd+0x192>
 80003ca:	2280      	movs	r2, #128	; 0x80
 80003cc:	03d2      	lsls	r2, r2, #15
 80003ce:	4213      	tst	r3, r2
 80003d0:	d003      	beq.n	80003da <__aeabi_fadd+0x192>
 80003d2:	4210      	tst	r0, r2
 80003d4:	d101      	bne.n	80003da <__aeabi_fadd+0x192>
 80003d6:	000c      	movs	r4, r1
 80003d8:	0003      	movs	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d0db      	beq.n	8000396 <__aeabi_fadd+0x14e>
 80003de:	2080      	movs	r0, #128	; 0x80
 80003e0:	03c0      	lsls	r0, r0, #15
 80003e2:	4318      	orrs	r0, r3
 80003e4:	0240      	lsls	r0, r0, #9
 80003e6:	0a43      	lsrs	r3, r0, #9
 80003e8:	469c      	mov	ip, r3
 80003ea:	22ff      	movs	r2, #255	; 0xff
 80003ec:	e771      	b.n	80002d2 <__aeabi_fadd+0x8a>
 80003ee:	2900      	cmp	r1, #0
 80003f0:	d0d5      	beq.n	800039e <__aeabi_fadd+0x156>
 80003f2:	1b7a      	subs	r2, r7, r5
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d160      	bne.n	80004ba <__aeabi_fadd+0x272>
 80003f8:	4643      	mov	r3, r8
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d024      	beq.n	8000448 <__aeabi_fadd+0x200>
 80003fe:	1e53      	subs	r3, r2, #1
 8000400:	2a01      	cmp	r2, #1
 8000402:	d073      	beq.n	80004ec <__aeabi_fadd+0x2a4>
 8000404:	2aff      	cmp	r2, #255	; 0xff
 8000406:	d0e7      	beq.n	80003d8 <__aeabi_fadd+0x190>
 8000408:	001a      	movs	r2, r3
 800040a:	2a1b      	cmp	r2, #27
 800040c:	dc00      	bgt.n	8000410 <__aeabi_fadd+0x1c8>
 800040e:	e085      	b.n	800051c <__aeabi_fadd+0x2d4>
 8000410:	2001      	movs	r0, #1
 8000412:	003d      	movs	r5, r7
 8000414:	1980      	adds	r0, r0, r6
 8000416:	e785      	b.n	8000324 <__aeabi_fadd+0xdc>
 8000418:	2320      	movs	r3, #32
 800041a:	003a      	movs	r2, r7
 800041c:	1b45      	subs	r5, r0, r5
 800041e:	0038      	movs	r0, r7
 8000420:	3501      	adds	r5, #1
 8000422:	40ea      	lsrs	r2, r5
 8000424:	1b5d      	subs	r5, r3, r5
 8000426:	40a8      	lsls	r0, r5
 8000428:	1e43      	subs	r3, r0, #1
 800042a:	4198      	sbcs	r0, r3
 800042c:	2500      	movs	r5, #0
 800042e:	4310      	orrs	r0, r2
 8000430:	e73e      	b.n	80002b0 <__aeabi_fadd+0x68>
 8000432:	2320      	movs	r3, #32
 8000434:	0030      	movs	r0, r6
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	0031      	movs	r1, r6
 800043a:	4098      	lsls	r0, r3
 800043c:	40d1      	lsrs	r1, r2
 800043e:	1e43      	subs	r3, r0, #1
 8000440:	4198      	sbcs	r0, r3
 8000442:	4308      	orrs	r0, r1
 8000444:	e722      	b.n	800028c <__aeabi_fadd+0x44>
 8000446:	000c      	movs	r4, r1
 8000448:	0003      	movs	r3, r0
 800044a:	0015      	movs	r5, r2
 800044c:	e7b4      	b.n	80003b8 <__aeabi_fadd+0x170>
 800044e:	2fff      	cmp	r7, #255	; 0xff
 8000450:	d0c1      	beq.n	80003d6 <__aeabi_fadd+0x18e>
 8000452:	2380      	movs	r3, #128	; 0x80
 8000454:	4640      	mov	r0, r8
 8000456:	04db      	lsls	r3, r3, #19
 8000458:	4318      	orrs	r0, r3
 800045a:	4680      	mov	r8, r0
 800045c:	2a1b      	cmp	r2, #27
 800045e:	dd51      	ble.n	8000504 <__aeabi_fadd+0x2bc>
 8000460:	2001      	movs	r0, #1
 8000462:	000c      	movs	r4, r1
 8000464:	003d      	movs	r5, r7
 8000466:	1a30      	subs	r0, r6, r0
 8000468:	e712      	b.n	8000290 <__aeabi_fadd+0x48>
 800046a:	4643      	mov	r3, r8
 800046c:	1b9f      	subs	r7, r3, r6
 800046e:	017b      	lsls	r3, r7, #5
 8000470:	d42b      	bmi.n	80004ca <__aeabi_fadd+0x282>
 8000472:	2f00      	cmp	r7, #0
 8000474:	d000      	beq.n	8000478 <__aeabi_fadd+0x230>
 8000476:	e710      	b.n	800029a <__aeabi_fadd+0x52>
 8000478:	2300      	movs	r3, #0
 800047a:	2400      	movs	r4, #0
 800047c:	2200      	movs	r2, #0
 800047e:	469c      	mov	ip, r3
 8000480:	e727      	b.n	80002d2 <__aeabi_fadd+0x8a>
 8000482:	2320      	movs	r3, #32
 8000484:	0032      	movs	r2, r6
 8000486:	0030      	movs	r0, r6
 8000488:	40ca      	lsrs	r2, r1
 800048a:	1a59      	subs	r1, r3, r1
 800048c:	4088      	lsls	r0, r1
 800048e:	1e43      	subs	r3, r0, #1
 8000490:	4198      	sbcs	r0, r3
 8000492:	4310      	orrs	r0, r2
 8000494:	e745      	b.n	8000322 <__aeabi_fadd+0xda>
 8000496:	2d00      	cmp	r5, #0
 8000498:	d14a      	bne.n	8000530 <__aeabi_fadd+0x2e8>
 800049a:	4643      	mov	r3, r8
 800049c:	2b00      	cmp	r3, #0
 800049e:	d063      	beq.n	8000568 <__aeabi_fadd+0x320>
 80004a0:	2200      	movs	r2, #0
 80004a2:	2e00      	cmp	r6, #0
 80004a4:	d100      	bne.n	80004a8 <__aeabi_fadd+0x260>
 80004a6:	e714      	b.n	80002d2 <__aeabi_fadd+0x8a>
 80004a8:	0030      	movs	r0, r6
 80004aa:	4440      	add	r0, r8
 80004ac:	0143      	lsls	r3, r0, #5
 80004ae:	d400      	bmi.n	80004b2 <__aeabi_fadd+0x26a>
 80004b0:	e77e      	b.n	80003b0 <__aeabi_fadd+0x168>
 80004b2:	4b32      	ldr	r3, [pc, #200]	; (800057c <__aeabi_fadd+0x334>)
 80004b4:	3501      	adds	r5, #1
 80004b6:	4018      	ands	r0, r3
 80004b8:	e77a      	b.n	80003b0 <__aeabi_fadd+0x168>
 80004ba:	2fff      	cmp	r7, #255	; 0xff
 80004bc:	d08c      	beq.n	80003d8 <__aeabi_fadd+0x190>
 80004be:	2380      	movs	r3, #128	; 0x80
 80004c0:	4641      	mov	r1, r8
 80004c2:	04db      	lsls	r3, r3, #19
 80004c4:	4319      	orrs	r1, r3
 80004c6:	4688      	mov	r8, r1
 80004c8:	e79f      	b.n	800040a <__aeabi_fadd+0x1c2>
 80004ca:	4643      	mov	r3, r8
 80004cc:	000c      	movs	r4, r1
 80004ce:	1af7      	subs	r7, r6, r3
 80004d0:	e6e3      	b.n	800029a <__aeabi_fadd+0x52>
 80004d2:	4642      	mov	r2, r8
 80004d4:	2a00      	cmp	r2, #0
 80004d6:	d000      	beq.n	80004da <__aeabi_fadd+0x292>
 80004d8:	e775      	b.n	80003c6 <__aeabi_fadd+0x17e>
 80004da:	2e00      	cmp	r6, #0
 80004dc:	d000      	beq.n	80004e0 <__aeabi_fadd+0x298>
 80004de:	e77a      	b.n	80003d6 <__aeabi_fadd+0x18e>
 80004e0:	2380      	movs	r3, #128	; 0x80
 80004e2:	03db      	lsls	r3, r3, #15
 80004e4:	2400      	movs	r4, #0
 80004e6:	469c      	mov	ip, r3
 80004e8:	22ff      	movs	r2, #255	; 0xff
 80004ea:	e6f2      	b.n	80002d2 <__aeabi_fadd+0x8a>
 80004ec:	0030      	movs	r0, r6
 80004ee:	4440      	add	r0, r8
 80004f0:	2501      	movs	r5, #1
 80004f2:	0143      	lsls	r3, r0, #5
 80004f4:	d400      	bmi.n	80004f8 <__aeabi_fadd+0x2b0>
 80004f6:	e75b      	b.n	80003b0 <__aeabi_fadd+0x168>
 80004f8:	2502      	movs	r5, #2
 80004fa:	e718      	b.n	800032e <__aeabi_fadd+0xe6>
 80004fc:	4643      	mov	r3, r8
 80004fe:	2501      	movs	r5, #1
 8000500:	1b98      	subs	r0, r3, r6
 8000502:	e6c5      	b.n	8000290 <__aeabi_fadd+0x48>
 8000504:	2320      	movs	r3, #32
 8000506:	4644      	mov	r4, r8
 8000508:	4640      	mov	r0, r8
 800050a:	40d4      	lsrs	r4, r2
 800050c:	1a9a      	subs	r2, r3, r2
 800050e:	4090      	lsls	r0, r2
 8000510:	1e43      	subs	r3, r0, #1
 8000512:	4198      	sbcs	r0, r3
 8000514:	4320      	orrs	r0, r4
 8000516:	e7a4      	b.n	8000462 <__aeabi_fadd+0x21a>
 8000518:	000d      	movs	r5, r1
 800051a:	e74d      	b.n	80003b8 <__aeabi_fadd+0x170>
 800051c:	2320      	movs	r3, #32
 800051e:	4641      	mov	r1, r8
 8000520:	4640      	mov	r0, r8
 8000522:	40d1      	lsrs	r1, r2
 8000524:	1a9a      	subs	r2, r3, r2
 8000526:	4090      	lsls	r0, r2
 8000528:	1e43      	subs	r3, r0, #1
 800052a:	4198      	sbcs	r0, r3
 800052c:	4308      	orrs	r0, r1
 800052e:	e770      	b.n	8000412 <__aeabi_fadd+0x1ca>
 8000530:	4642      	mov	r2, r8
 8000532:	2a00      	cmp	r2, #0
 8000534:	d100      	bne.n	8000538 <__aeabi_fadd+0x2f0>
 8000536:	e74f      	b.n	80003d8 <__aeabi_fadd+0x190>
 8000538:	2e00      	cmp	r6, #0
 800053a:	d100      	bne.n	800053e <__aeabi_fadd+0x2f6>
 800053c:	e74d      	b.n	80003da <__aeabi_fadd+0x192>
 800053e:	2280      	movs	r2, #128	; 0x80
 8000540:	03d2      	lsls	r2, r2, #15
 8000542:	4213      	tst	r3, r2
 8000544:	d100      	bne.n	8000548 <__aeabi_fadd+0x300>
 8000546:	e748      	b.n	80003da <__aeabi_fadd+0x192>
 8000548:	4210      	tst	r0, r2
 800054a:	d000      	beq.n	800054e <__aeabi_fadd+0x306>
 800054c:	e745      	b.n	80003da <__aeabi_fadd+0x192>
 800054e:	0003      	movs	r3, r0
 8000550:	e743      	b.n	80003da <__aeabi_fadd+0x192>
 8000552:	2e00      	cmp	r6, #0
 8000554:	d090      	beq.n	8000478 <__aeabi_fadd+0x230>
 8000556:	000c      	movs	r4, r1
 8000558:	4684      	mov	ip, r0
 800055a:	2200      	movs	r2, #0
 800055c:	e6b9      	b.n	80002d2 <__aeabi_fadd+0x8a>
 800055e:	4643      	mov	r3, r8
 8000560:	000c      	movs	r4, r1
 8000562:	1af0      	subs	r0, r6, r3
 8000564:	3501      	adds	r5, #1
 8000566:	e693      	b.n	8000290 <__aeabi_fadd+0x48>
 8000568:	4684      	mov	ip, r0
 800056a:	2200      	movs	r2, #0
 800056c:	e6b1      	b.n	80002d2 <__aeabi_fadd+0x8a>
 800056e:	2800      	cmp	r0, #0
 8000570:	d000      	beq.n	8000574 <__aeabi_fadd+0x32c>
 8000572:	e71d      	b.n	80003b0 <__aeabi_fadd+0x168>
 8000574:	2300      	movs	r3, #0
 8000576:	2400      	movs	r4, #0
 8000578:	469c      	mov	ip, r3
 800057a:	e6aa      	b.n	80002d2 <__aeabi_fadd+0x8a>
 800057c:	fbffffff 	.word	0xfbffffff
 8000580:	7dffffff 	.word	0x7dffffff

08000584 <__aeabi_fdiv>:
 8000584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000586:	464f      	mov	r7, r9
 8000588:	4646      	mov	r6, r8
 800058a:	46d6      	mov	lr, sl
 800058c:	0245      	lsls	r5, r0, #9
 800058e:	b5c0      	push	{r6, r7, lr}
 8000590:	0047      	lsls	r7, r0, #1
 8000592:	1c0c      	adds	r4, r1, #0
 8000594:	0a6d      	lsrs	r5, r5, #9
 8000596:	0e3f      	lsrs	r7, r7, #24
 8000598:	0fc6      	lsrs	r6, r0, #31
 800059a:	2f00      	cmp	r7, #0
 800059c:	d100      	bne.n	80005a0 <__aeabi_fdiv+0x1c>
 800059e:	e070      	b.n	8000682 <__aeabi_fdiv+0xfe>
 80005a0:	2fff      	cmp	r7, #255	; 0xff
 80005a2:	d100      	bne.n	80005a6 <__aeabi_fdiv+0x22>
 80005a4:	e075      	b.n	8000692 <__aeabi_fdiv+0x10e>
 80005a6:	00eb      	lsls	r3, r5, #3
 80005a8:	2580      	movs	r5, #128	; 0x80
 80005aa:	04ed      	lsls	r5, r5, #19
 80005ac:	431d      	orrs	r5, r3
 80005ae:	2300      	movs	r3, #0
 80005b0:	4699      	mov	r9, r3
 80005b2:	469a      	mov	sl, r3
 80005b4:	3f7f      	subs	r7, #127	; 0x7f
 80005b6:	0260      	lsls	r0, r4, #9
 80005b8:	0a43      	lsrs	r3, r0, #9
 80005ba:	4698      	mov	r8, r3
 80005bc:	0063      	lsls	r3, r4, #1
 80005be:	0e1b      	lsrs	r3, r3, #24
 80005c0:	0fe4      	lsrs	r4, r4, #31
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d04e      	beq.n	8000664 <__aeabi_fdiv+0xe0>
 80005c6:	2bff      	cmp	r3, #255	; 0xff
 80005c8:	d046      	beq.n	8000658 <__aeabi_fdiv+0xd4>
 80005ca:	4642      	mov	r2, r8
 80005cc:	00d0      	lsls	r0, r2, #3
 80005ce:	2280      	movs	r2, #128	; 0x80
 80005d0:	04d2      	lsls	r2, r2, #19
 80005d2:	4302      	orrs	r2, r0
 80005d4:	4690      	mov	r8, r2
 80005d6:	2200      	movs	r2, #0
 80005d8:	3b7f      	subs	r3, #127	; 0x7f
 80005da:	0031      	movs	r1, r6
 80005dc:	1aff      	subs	r7, r7, r3
 80005de:	464b      	mov	r3, r9
 80005e0:	4061      	eors	r1, r4
 80005e2:	b2c9      	uxtb	r1, r1
 80005e4:	4313      	orrs	r3, r2
 80005e6:	2b0f      	cmp	r3, #15
 80005e8:	d900      	bls.n	80005ec <__aeabi_fdiv+0x68>
 80005ea:	e0b5      	b.n	8000758 <__aeabi_fdiv+0x1d4>
 80005ec:	486e      	ldr	r0, [pc, #440]	; (80007a8 <__aeabi_fdiv+0x224>)
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	58c3      	ldr	r3, [r0, r3]
 80005f2:	469f      	mov	pc, r3
 80005f4:	2300      	movs	r3, #0
 80005f6:	4698      	mov	r8, r3
 80005f8:	0026      	movs	r6, r4
 80005fa:	4645      	mov	r5, r8
 80005fc:	4692      	mov	sl, r2
 80005fe:	4653      	mov	r3, sl
 8000600:	2b02      	cmp	r3, #2
 8000602:	d100      	bne.n	8000606 <__aeabi_fdiv+0x82>
 8000604:	e089      	b.n	800071a <__aeabi_fdiv+0x196>
 8000606:	2b03      	cmp	r3, #3
 8000608:	d100      	bne.n	800060c <__aeabi_fdiv+0x88>
 800060a:	e09e      	b.n	800074a <__aeabi_fdiv+0x1c6>
 800060c:	2b01      	cmp	r3, #1
 800060e:	d018      	beq.n	8000642 <__aeabi_fdiv+0xbe>
 8000610:	003b      	movs	r3, r7
 8000612:	337f      	adds	r3, #127	; 0x7f
 8000614:	2b00      	cmp	r3, #0
 8000616:	dd69      	ble.n	80006ec <__aeabi_fdiv+0x168>
 8000618:	076a      	lsls	r2, r5, #29
 800061a:	d004      	beq.n	8000626 <__aeabi_fdiv+0xa2>
 800061c:	220f      	movs	r2, #15
 800061e:	402a      	ands	r2, r5
 8000620:	2a04      	cmp	r2, #4
 8000622:	d000      	beq.n	8000626 <__aeabi_fdiv+0xa2>
 8000624:	3504      	adds	r5, #4
 8000626:	012a      	lsls	r2, r5, #4
 8000628:	d503      	bpl.n	8000632 <__aeabi_fdiv+0xae>
 800062a:	4b60      	ldr	r3, [pc, #384]	; (80007ac <__aeabi_fdiv+0x228>)
 800062c:	401d      	ands	r5, r3
 800062e:	003b      	movs	r3, r7
 8000630:	3380      	adds	r3, #128	; 0x80
 8000632:	2bfe      	cmp	r3, #254	; 0xfe
 8000634:	dd00      	ble.n	8000638 <__aeabi_fdiv+0xb4>
 8000636:	e070      	b.n	800071a <__aeabi_fdiv+0x196>
 8000638:	01ad      	lsls	r5, r5, #6
 800063a:	0a6d      	lsrs	r5, r5, #9
 800063c:	b2d8      	uxtb	r0, r3
 800063e:	e002      	b.n	8000646 <__aeabi_fdiv+0xc2>
 8000640:	000e      	movs	r6, r1
 8000642:	2000      	movs	r0, #0
 8000644:	2500      	movs	r5, #0
 8000646:	05c0      	lsls	r0, r0, #23
 8000648:	4328      	orrs	r0, r5
 800064a:	07f6      	lsls	r6, r6, #31
 800064c:	4330      	orrs	r0, r6
 800064e:	bce0      	pop	{r5, r6, r7}
 8000650:	46ba      	mov	sl, r7
 8000652:	46b1      	mov	r9, r6
 8000654:	46a8      	mov	r8, r5
 8000656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000658:	4643      	mov	r3, r8
 800065a:	2b00      	cmp	r3, #0
 800065c:	d13f      	bne.n	80006de <__aeabi_fdiv+0x15a>
 800065e:	2202      	movs	r2, #2
 8000660:	3fff      	subs	r7, #255	; 0xff
 8000662:	e003      	b.n	800066c <__aeabi_fdiv+0xe8>
 8000664:	4643      	mov	r3, r8
 8000666:	2b00      	cmp	r3, #0
 8000668:	d12d      	bne.n	80006c6 <__aeabi_fdiv+0x142>
 800066a:	2201      	movs	r2, #1
 800066c:	0031      	movs	r1, r6
 800066e:	464b      	mov	r3, r9
 8000670:	4061      	eors	r1, r4
 8000672:	b2c9      	uxtb	r1, r1
 8000674:	4313      	orrs	r3, r2
 8000676:	2b0f      	cmp	r3, #15
 8000678:	d834      	bhi.n	80006e4 <__aeabi_fdiv+0x160>
 800067a:	484d      	ldr	r0, [pc, #308]	; (80007b0 <__aeabi_fdiv+0x22c>)
 800067c:	009b      	lsls	r3, r3, #2
 800067e:	58c3      	ldr	r3, [r0, r3]
 8000680:	469f      	mov	pc, r3
 8000682:	2d00      	cmp	r5, #0
 8000684:	d113      	bne.n	80006ae <__aeabi_fdiv+0x12a>
 8000686:	2304      	movs	r3, #4
 8000688:	4699      	mov	r9, r3
 800068a:	3b03      	subs	r3, #3
 800068c:	2700      	movs	r7, #0
 800068e:	469a      	mov	sl, r3
 8000690:	e791      	b.n	80005b6 <__aeabi_fdiv+0x32>
 8000692:	2d00      	cmp	r5, #0
 8000694:	d105      	bne.n	80006a2 <__aeabi_fdiv+0x11e>
 8000696:	2308      	movs	r3, #8
 8000698:	4699      	mov	r9, r3
 800069a:	3b06      	subs	r3, #6
 800069c:	27ff      	movs	r7, #255	; 0xff
 800069e:	469a      	mov	sl, r3
 80006a0:	e789      	b.n	80005b6 <__aeabi_fdiv+0x32>
 80006a2:	230c      	movs	r3, #12
 80006a4:	4699      	mov	r9, r3
 80006a6:	3b09      	subs	r3, #9
 80006a8:	27ff      	movs	r7, #255	; 0xff
 80006aa:	469a      	mov	sl, r3
 80006ac:	e783      	b.n	80005b6 <__aeabi_fdiv+0x32>
 80006ae:	0028      	movs	r0, r5
 80006b0:	f000 fc3e 	bl	8000f30 <__clzsi2>
 80006b4:	2776      	movs	r7, #118	; 0x76
 80006b6:	1f43      	subs	r3, r0, #5
 80006b8:	409d      	lsls	r5, r3
 80006ba:	2300      	movs	r3, #0
 80006bc:	427f      	negs	r7, r7
 80006be:	4699      	mov	r9, r3
 80006c0:	469a      	mov	sl, r3
 80006c2:	1a3f      	subs	r7, r7, r0
 80006c4:	e777      	b.n	80005b6 <__aeabi_fdiv+0x32>
 80006c6:	4640      	mov	r0, r8
 80006c8:	f000 fc32 	bl	8000f30 <__clzsi2>
 80006cc:	4642      	mov	r2, r8
 80006ce:	1f43      	subs	r3, r0, #5
 80006d0:	409a      	lsls	r2, r3
 80006d2:	2376      	movs	r3, #118	; 0x76
 80006d4:	425b      	negs	r3, r3
 80006d6:	4690      	mov	r8, r2
 80006d8:	1a1b      	subs	r3, r3, r0
 80006da:	2200      	movs	r2, #0
 80006dc:	e77d      	b.n	80005da <__aeabi_fdiv+0x56>
 80006de:	23ff      	movs	r3, #255	; 0xff
 80006e0:	2203      	movs	r2, #3
 80006e2:	e77a      	b.n	80005da <__aeabi_fdiv+0x56>
 80006e4:	000e      	movs	r6, r1
 80006e6:	20ff      	movs	r0, #255	; 0xff
 80006e8:	2500      	movs	r5, #0
 80006ea:	e7ac      	b.n	8000646 <__aeabi_fdiv+0xc2>
 80006ec:	2001      	movs	r0, #1
 80006ee:	1ac0      	subs	r0, r0, r3
 80006f0:	281b      	cmp	r0, #27
 80006f2:	dca6      	bgt.n	8000642 <__aeabi_fdiv+0xbe>
 80006f4:	379e      	adds	r7, #158	; 0x9e
 80006f6:	002a      	movs	r2, r5
 80006f8:	40bd      	lsls	r5, r7
 80006fa:	40c2      	lsrs	r2, r0
 80006fc:	1e6b      	subs	r3, r5, #1
 80006fe:	419d      	sbcs	r5, r3
 8000700:	4315      	orrs	r5, r2
 8000702:	076b      	lsls	r3, r5, #29
 8000704:	d004      	beq.n	8000710 <__aeabi_fdiv+0x18c>
 8000706:	230f      	movs	r3, #15
 8000708:	402b      	ands	r3, r5
 800070a:	2b04      	cmp	r3, #4
 800070c:	d000      	beq.n	8000710 <__aeabi_fdiv+0x18c>
 800070e:	3504      	adds	r5, #4
 8000710:	016b      	lsls	r3, r5, #5
 8000712:	d544      	bpl.n	800079e <__aeabi_fdiv+0x21a>
 8000714:	2001      	movs	r0, #1
 8000716:	2500      	movs	r5, #0
 8000718:	e795      	b.n	8000646 <__aeabi_fdiv+0xc2>
 800071a:	20ff      	movs	r0, #255	; 0xff
 800071c:	2500      	movs	r5, #0
 800071e:	e792      	b.n	8000646 <__aeabi_fdiv+0xc2>
 8000720:	2580      	movs	r5, #128	; 0x80
 8000722:	2600      	movs	r6, #0
 8000724:	20ff      	movs	r0, #255	; 0xff
 8000726:	03ed      	lsls	r5, r5, #15
 8000728:	e78d      	b.n	8000646 <__aeabi_fdiv+0xc2>
 800072a:	2300      	movs	r3, #0
 800072c:	4698      	mov	r8, r3
 800072e:	2080      	movs	r0, #128	; 0x80
 8000730:	03c0      	lsls	r0, r0, #15
 8000732:	4205      	tst	r5, r0
 8000734:	d009      	beq.n	800074a <__aeabi_fdiv+0x1c6>
 8000736:	4643      	mov	r3, r8
 8000738:	4203      	tst	r3, r0
 800073a:	d106      	bne.n	800074a <__aeabi_fdiv+0x1c6>
 800073c:	4645      	mov	r5, r8
 800073e:	4305      	orrs	r5, r0
 8000740:	026d      	lsls	r5, r5, #9
 8000742:	0026      	movs	r6, r4
 8000744:	20ff      	movs	r0, #255	; 0xff
 8000746:	0a6d      	lsrs	r5, r5, #9
 8000748:	e77d      	b.n	8000646 <__aeabi_fdiv+0xc2>
 800074a:	2080      	movs	r0, #128	; 0x80
 800074c:	03c0      	lsls	r0, r0, #15
 800074e:	4305      	orrs	r5, r0
 8000750:	026d      	lsls	r5, r5, #9
 8000752:	20ff      	movs	r0, #255	; 0xff
 8000754:	0a6d      	lsrs	r5, r5, #9
 8000756:	e776      	b.n	8000646 <__aeabi_fdiv+0xc2>
 8000758:	4642      	mov	r2, r8
 800075a:	016b      	lsls	r3, r5, #5
 800075c:	0150      	lsls	r0, r2, #5
 800075e:	4283      	cmp	r3, r0
 8000760:	d219      	bcs.n	8000796 <__aeabi_fdiv+0x212>
 8000762:	221b      	movs	r2, #27
 8000764:	2500      	movs	r5, #0
 8000766:	3f01      	subs	r7, #1
 8000768:	2601      	movs	r6, #1
 800076a:	001c      	movs	r4, r3
 800076c:	006d      	lsls	r5, r5, #1
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	2c00      	cmp	r4, #0
 8000772:	db01      	blt.n	8000778 <__aeabi_fdiv+0x1f4>
 8000774:	4298      	cmp	r0, r3
 8000776:	d801      	bhi.n	800077c <__aeabi_fdiv+0x1f8>
 8000778:	1a1b      	subs	r3, r3, r0
 800077a:	4335      	orrs	r5, r6
 800077c:	3a01      	subs	r2, #1
 800077e:	2a00      	cmp	r2, #0
 8000780:	d1f3      	bne.n	800076a <__aeabi_fdiv+0x1e6>
 8000782:	1e5a      	subs	r2, r3, #1
 8000784:	4193      	sbcs	r3, r2
 8000786:	431d      	orrs	r5, r3
 8000788:	003b      	movs	r3, r7
 800078a:	337f      	adds	r3, #127	; 0x7f
 800078c:	000e      	movs	r6, r1
 800078e:	2b00      	cmp	r3, #0
 8000790:	dd00      	ble.n	8000794 <__aeabi_fdiv+0x210>
 8000792:	e741      	b.n	8000618 <__aeabi_fdiv+0x94>
 8000794:	e7aa      	b.n	80006ec <__aeabi_fdiv+0x168>
 8000796:	221a      	movs	r2, #26
 8000798:	2501      	movs	r5, #1
 800079a:	1a1b      	subs	r3, r3, r0
 800079c:	e7e4      	b.n	8000768 <__aeabi_fdiv+0x1e4>
 800079e:	01ad      	lsls	r5, r5, #6
 80007a0:	2000      	movs	r0, #0
 80007a2:	0a6d      	lsrs	r5, r5, #9
 80007a4:	e74f      	b.n	8000646 <__aeabi_fdiv+0xc2>
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	08004ac8 	.word	0x08004ac8
 80007ac:	f7ffffff 	.word	0xf7ffffff
 80007b0:	08004b08 	.word	0x08004b08

080007b4 <__aeabi_fmul>:
 80007b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007b6:	464f      	mov	r7, r9
 80007b8:	4646      	mov	r6, r8
 80007ba:	46d6      	mov	lr, sl
 80007bc:	0244      	lsls	r4, r0, #9
 80007be:	0045      	lsls	r5, r0, #1
 80007c0:	b5c0      	push	{r6, r7, lr}
 80007c2:	0a64      	lsrs	r4, r4, #9
 80007c4:	1c0f      	adds	r7, r1, #0
 80007c6:	0e2d      	lsrs	r5, r5, #24
 80007c8:	0fc6      	lsrs	r6, r0, #31
 80007ca:	2d00      	cmp	r5, #0
 80007cc:	d100      	bne.n	80007d0 <__aeabi_fmul+0x1c>
 80007ce:	e08d      	b.n	80008ec <__aeabi_fmul+0x138>
 80007d0:	2dff      	cmp	r5, #255	; 0xff
 80007d2:	d100      	bne.n	80007d6 <__aeabi_fmul+0x22>
 80007d4:	e092      	b.n	80008fc <__aeabi_fmul+0x148>
 80007d6:	2300      	movs	r3, #0
 80007d8:	2080      	movs	r0, #128	; 0x80
 80007da:	4699      	mov	r9, r3
 80007dc:	469a      	mov	sl, r3
 80007de:	00e4      	lsls	r4, r4, #3
 80007e0:	04c0      	lsls	r0, r0, #19
 80007e2:	4304      	orrs	r4, r0
 80007e4:	3d7f      	subs	r5, #127	; 0x7f
 80007e6:	0278      	lsls	r0, r7, #9
 80007e8:	0a43      	lsrs	r3, r0, #9
 80007ea:	4698      	mov	r8, r3
 80007ec:	007b      	lsls	r3, r7, #1
 80007ee:	0e1b      	lsrs	r3, r3, #24
 80007f0:	0fff      	lsrs	r7, r7, #31
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d100      	bne.n	80007f8 <__aeabi_fmul+0x44>
 80007f6:	e070      	b.n	80008da <__aeabi_fmul+0x126>
 80007f8:	2bff      	cmp	r3, #255	; 0xff
 80007fa:	d100      	bne.n	80007fe <__aeabi_fmul+0x4a>
 80007fc:	e086      	b.n	800090c <__aeabi_fmul+0x158>
 80007fe:	4642      	mov	r2, r8
 8000800:	00d0      	lsls	r0, r2, #3
 8000802:	2280      	movs	r2, #128	; 0x80
 8000804:	3b7f      	subs	r3, #127	; 0x7f
 8000806:	18ed      	adds	r5, r5, r3
 8000808:	2300      	movs	r3, #0
 800080a:	04d2      	lsls	r2, r2, #19
 800080c:	4302      	orrs	r2, r0
 800080e:	4690      	mov	r8, r2
 8000810:	469c      	mov	ip, r3
 8000812:	0031      	movs	r1, r6
 8000814:	464b      	mov	r3, r9
 8000816:	4079      	eors	r1, r7
 8000818:	1c68      	adds	r0, r5, #1
 800081a:	2b0f      	cmp	r3, #15
 800081c:	d81c      	bhi.n	8000858 <__aeabi_fmul+0xa4>
 800081e:	4a76      	ldr	r2, [pc, #472]	; (80009f8 <__aeabi_fmul+0x244>)
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	58d3      	ldr	r3, [r2, r3]
 8000824:	469f      	mov	pc, r3
 8000826:	0039      	movs	r1, r7
 8000828:	4644      	mov	r4, r8
 800082a:	46e2      	mov	sl, ip
 800082c:	4653      	mov	r3, sl
 800082e:	2b02      	cmp	r3, #2
 8000830:	d00f      	beq.n	8000852 <__aeabi_fmul+0x9e>
 8000832:	2b03      	cmp	r3, #3
 8000834:	d100      	bne.n	8000838 <__aeabi_fmul+0x84>
 8000836:	e0d7      	b.n	80009e8 <__aeabi_fmul+0x234>
 8000838:	2b01      	cmp	r3, #1
 800083a:	d137      	bne.n	80008ac <__aeabi_fmul+0xf8>
 800083c:	2000      	movs	r0, #0
 800083e:	2400      	movs	r4, #0
 8000840:	05c0      	lsls	r0, r0, #23
 8000842:	4320      	orrs	r0, r4
 8000844:	07c9      	lsls	r1, r1, #31
 8000846:	4308      	orrs	r0, r1
 8000848:	bce0      	pop	{r5, r6, r7}
 800084a:	46ba      	mov	sl, r7
 800084c:	46b1      	mov	r9, r6
 800084e:	46a8      	mov	r8, r5
 8000850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000852:	20ff      	movs	r0, #255	; 0xff
 8000854:	2400      	movs	r4, #0
 8000856:	e7f3      	b.n	8000840 <__aeabi_fmul+0x8c>
 8000858:	0c26      	lsrs	r6, r4, #16
 800085a:	0424      	lsls	r4, r4, #16
 800085c:	0c22      	lsrs	r2, r4, #16
 800085e:	4644      	mov	r4, r8
 8000860:	0424      	lsls	r4, r4, #16
 8000862:	0c24      	lsrs	r4, r4, #16
 8000864:	4643      	mov	r3, r8
 8000866:	0027      	movs	r7, r4
 8000868:	0c1b      	lsrs	r3, r3, #16
 800086a:	4357      	muls	r7, r2
 800086c:	4374      	muls	r4, r6
 800086e:	435a      	muls	r2, r3
 8000870:	435e      	muls	r6, r3
 8000872:	1912      	adds	r2, r2, r4
 8000874:	0c3b      	lsrs	r3, r7, #16
 8000876:	189b      	adds	r3, r3, r2
 8000878:	429c      	cmp	r4, r3
 800087a:	d903      	bls.n	8000884 <__aeabi_fmul+0xd0>
 800087c:	2280      	movs	r2, #128	; 0x80
 800087e:	0252      	lsls	r2, r2, #9
 8000880:	4694      	mov	ip, r2
 8000882:	4466      	add	r6, ip
 8000884:	043f      	lsls	r7, r7, #16
 8000886:	041a      	lsls	r2, r3, #16
 8000888:	0c3f      	lsrs	r7, r7, #16
 800088a:	19d2      	adds	r2, r2, r7
 800088c:	0194      	lsls	r4, r2, #6
 800088e:	1e67      	subs	r7, r4, #1
 8000890:	41bc      	sbcs	r4, r7
 8000892:	0c1b      	lsrs	r3, r3, #16
 8000894:	0e92      	lsrs	r2, r2, #26
 8000896:	199b      	adds	r3, r3, r6
 8000898:	4314      	orrs	r4, r2
 800089a:	019b      	lsls	r3, r3, #6
 800089c:	431c      	orrs	r4, r3
 800089e:	011b      	lsls	r3, r3, #4
 80008a0:	d400      	bmi.n	80008a4 <__aeabi_fmul+0xf0>
 80008a2:	e09b      	b.n	80009dc <__aeabi_fmul+0x228>
 80008a4:	2301      	movs	r3, #1
 80008a6:	0862      	lsrs	r2, r4, #1
 80008a8:	401c      	ands	r4, r3
 80008aa:	4314      	orrs	r4, r2
 80008ac:	0002      	movs	r2, r0
 80008ae:	327f      	adds	r2, #127	; 0x7f
 80008b0:	2a00      	cmp	r2, #0
 80008b2:	dd64      	ble.n	800097e <__aeabi_fmul+0x1ca>
 80008b4:	0763      	lsls	r3, r4, #29
 80008b6:	d004      	beq.n	80008c2 <__aeabi_fmul+0x10e>
 80008b8:	230f      	movs	r3, #15
 80008ba:	4023      	ands	r3, r4
 80008bc:	2b04      	cmp	r3, #4
 80008be:	d000      	beq.n	80008c2 <__aeabi_fmul+0x10e>
 80008c0:	3404      	adds	r4, #4
 80008c2:	0123      	lsls	r3, r4, #4
 80008c4:	d503      	bpl.n	80008ce <__aeabi_fmul+0x11a>
 80008c6:	0002      	movs	r2, r0
 80008c8:	4b4c      	ldr	r3, [pc, #304]	; (80009fc <__aeabi_fmul+0x248>)
 80008ca:	3280      	adds	r2, #128	; 0x80
 80008cc:	401c      	ands	r4, r3
 80008ce:	2afe      	cmp	r2, #254	; 0xfe
 80008d0:	dcbf      	bgt.n	8000852 <__aeabi_fmul+0x9e>
 80008d2:	01a4      	lsls	r4, r4, #6
 80008d4:	0a64      	lsrs	r4, r4, #9
 80008d6:	b2d0      	uxtb	r0, r2
 80008d8:	e7b2      	b.n	8000840 <__aeabi_fmul+0x8c>
 80008da:	4643      	mov	r3, r8
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d13d      	bne.n	800095c <__aeabi_fmul+0x1a8>
 80008e0:	464a      	mov	r2, r9
 80008e2:	3301      	adds	r3, #1
 80008e4:	431a      	orrs	r2, r3
 80008e6:	4691      	mov	r9, r2
 80008e8:	469c      	mov	ip, r3
 80008ea:	e792      	b.n	8000812 <__aeabi_fmul+0x5e>
 80008ec:	2c00      	cmp	r4, #0
 80008ee:	d129      	bne.n	8000944 <__aeabi_fmul+0x190>
 80008f0:	2304      	movs	r3, #4
 80008f2:	4699      	mov	r9, r3
 80008f4:	3b03      	subs	r3, #3
 80008f6:	2500      	movs	r5, #0
 80008f8:	469a      	mov	sl, r3
 80008fa:	e774      	b.n	80007e6 <__aeabi_fmul+0x32>
 80008fc:	2c00      	cmp	r4, #0
 80008fe:	d11b      	bne.n	8000938 <__aeabi_fmul+0x184>
 8000900:	2308      	movs	r3, #8
 8000902:	4699      	mov	r9, r3
 8000904:	3b06      	subs	r3, #6
 8000906:	25ff      	movs	r5, #255	; 0xff
 8000908:	469a      	mov	sl, r3
 800090a:	e76c      	b.n	80007e6 <__aeabi_fmul+0x32>
 800090c:	4643      	mov	r3, r8
 800090e:	35ff      	adds	r5, #255	; 0xff
 8000910:	2b00      	cmp	r3, #0
 8000912:	d10b      	bne.n	800092c <__aeabi_fmul+0x178>
 8000914:	2302      	movs	r3, #2
 8000916:	464a      	mov	r2, r9
 8000918:	431a      	orrs	r2, r3
 800091a:	4691      	mov	r9, r2
 800091c:	469c      	mov	ip, r3
 800091e:	e778      	b.n	8000812 <__aeabi_fmul+0x5e>
 8000920:	4653      	mov	r3, sl
 8000922:	0031      	movs	r1, r6
 8000924:	2b02      	cmp	r3, #2
 8000926:	d000      	beq.n	800092a <__aeabi_fmul+0x176>
 8000928:	e783      	b.n	8000832 <__aeabi_fmul+0x7e>
 800092a:	e792      	b.n	8000852 <__aeabi_fmul+0x9e>
 800092c:	2303      	movs	r3, #3
 800092e:	464a      	mov	r2, r9
 8000930:	431a      	orrs	r2, r3
 8000932:	4691      	mov	r9, r2
 8000934:	469c      	mov	ip, r3
 8000936:	e76c      	b.n	8000812 <__aeabi_fmul+0x5e>
 8000938:	230c      	movs	r3, #12
 800093a:	4699      	mov	r9, r3
 800093c:	3b09      	subs	r3, #9
 800093e:	25ff      	movs	r5, #255	; 0xff
 8000940:	469a      	mov	sl, r3
 8000942:	e750      	b.n	80007e6 <__aeabi_fmul+0x32>
 8000944:	0020      	movs	r0, r4
 8000946:	f000 faf3 	bl	8000f30 <__clzsi2>
 800094a:	2576      	movs	r5, #118	; 0x76
 800094c:	1f43      	subs	r3, r0, #5
 800094e:	409c      	lsls	r4, r3
 8000950:	2300      	movs	r3, #0
 8000952:	426d      	negs	r5, r5
 8000954:	4699      	mov	r9, r3
 8000956:	469a      	mov	sl, r3
 8000958:	1a2d      	subs	r5, r5, r0
 800095a:	e744      	b.n	80007e6 <__aeabi_fmul+0x32>
 800095c:	4640      	mov	r0, r8
 800095e:	f000 fae7 	bl	8000f30 <__clzsi2>
 8000962:	4642      	mov	r2, r8
 8000964:	1f43      	subs	r3, r0, #5
 8000966:	409a      	lsls	r2, r3
 8000968:	2300      	movs	r3, #0
 800096a:	1a2d      	subs	r5, r5, r0
 800096c:	4690      	mov	r8, r2
 800096e:	469c      	mov	ip, r3
 8000970:	3d76      	subs	r5, #118	; 0x76
 8000972:	e74e      	b.n	8000812 <__aeabi_fmul+0x5e>
 8000974:	2480      	movs	r4, #128	; 0x80
 8000976:	2100      	movs	r1, #0
 8000978:	20ff      	movs	r0, #255	; 0xff
 800097a:	03e4      	lsls	r4, r4, #15
 800097c:	e760      	b.n	8000840 <__aeabi_fmul+0x8c>
 800097e:	2301      	movs	r3, #1
 8000980:	1a9b      	subs	r3, r3, r2
 8000982:	2b1b      	cmp	r3, #27
 8000984:	dd00      	ble.n	8000988 <__aeabi_fmul+0x1d4>
 8000986:	e759      	b.n	800083c <__aeabi_fmul+0x88>
 8000988:	0022      	movs	r2, r4
 800098a:	309e      	adds	r0, #158	; 0x9e
 800098c:	40da      	lsrs	r2, r3
 800098e:	4084      	lsls	r4, r0
 8000990:	0013      	movs	r3, r2
 8000992:	1e62      	subs	r2, r4, #1
 8000994:	4194      	sbcs	r4, r2
 8000996:	431c      	orrs	r4, r3
 8000998:	0763      	lsls	r3, r4, #29
 800099a:	d004      	beq.n	80009a6 <__aeabi_fmul+0x1f2>
 800099c:	230f      	movs	r3, #15
 800099e:	4023      	ands	r3, r4
 80009a0:	2b04      	cmp	r3, #4
 80009a2:	d000      	beq.n	80009a6 <__aeabi_fmul+0x1f2>
 80009a4:	3404      	adds	r4, #4
 80009a6:	0163      	lsls	r3, r4, #5
 80009a8:	d51a      	bpl.n	80009e0 <__aeabi_fmul+0x22c>
 80009aa:	2001      	movs	r0, #1
 80009ac:	2400      	movs	r4, #0
 80009ae:	e747      	b.n	8000840 <__aeabi_fmul+0x8c>
 80009b0:	2080      	movs	r0, #128	; 0x80
 80009b2:	03c0      	lsls	r0, r0, #15
 80009b4:	4204      	tst	r4, r0
 80009b6:	d009      	beq.n	80009cc <__aeabi_fmul+0x218>
 80009b8:	4643      	mov	r3, r8
 80009ba:	4203      	tst	r3, r0
 80009bc:	d106      	bne.n	80009cc <__aeabi_fmul+0x218>
 80009be:	4644      	mov	r4, r8
 80009c0:	4304      	orrs	r4, r0
 80009c2:	0264      	lsls	r4, r4, #9
 80009c4:	0039      	movs	r1, r7
 80009c6:	20ff      	movs	r0, #255	; 0xff
 80009c8:	0a64      	lsrs	r4, r4, #9
 80009ca:	e739      	b.n	8000840 <__aeabi_fmul+0x8c>
 80009cc:	2080      	movs	r0, #128	; 0x80
 80009ce:	03c0      	lsls	r0, r0, #15
 80009d0:	4304      	orrs	r4, r0
 80009d2:	0264      	lsls	r4, r4, #9
 80009d4:	0031      	movs	r1, r6
 80009d6:	20ff      	movs	r0, #255	; 0xff
 80009d8:	0a64      	lsrs	r4, r4, #9
 80009da:	e731      	b.n	8000840 <__aeabi_fmul+0x8c>
 80009dc:	0028      	movs	r0, r5
 80009de:	e765      	b.n	80008ac <__aeabi_fmul+0xf8>
 80009e0:	01a4      	lsls	r4, r4, #6
 80009e2:	2000      	movs	r0, #0
 80009e4:	0a64      	lsrs	r4, r4, #9
 80009e6:	e72b      	b.n	8000840 <__aeabi_fmul+0x8c>
 80009e8:	2080      	movs	r0, #128	; 0x80
 80009ea:	03c0      	lsls	r0, r0, #15
 80009ec:	4304      	orrs	r4, r0
 80009ee:	0264      	lsls	r4, r4, #9
 80009f0:	20ff      	movs	r0, #255	; 0xff
 80009f2:	0a64      	lsrs	r4, r4, #9
 80009f4:	e724      	b.n	8000840 <__aeabi_fmul+0x8c>
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	08004b48 	.word	0x08004b48
 80009fc:	f7ffffff 	.word	0xf7ffffff

08000a00 <__aeabi_fsub>:
 8000a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a02:	46ce      	mov	lr, r9
 8000a04:	4647      	mov	r7, r8
 8000a06:	0243      	lsls	r3, r0, #9
 8000a08:	0a5b      	lsrs	r3, r3, #9
 8000a0a:	024e      	lsls	r6, r1, #9
 8000a0c:	00da      	lsls	r2, r3, #3
 8000a0e:	4694      	mov	ip, r2
 8000a10:	0a72      	lsrs	r2, r6, #9
 8000a12:	4691      	mov	r9, r2
 8000a14:	0045      	lsls	r5, r0, #1
 8000a16:	004a      	lsls	r2, r1, #1
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	0e2d      	lsrs	r5, r5, #24
 8000a1c:	001f      	movs	r7, r3
 8000a1e:	0fc4      	lsrs	r4, r0, #31
 8000a20:	0e12      	lsrs	r2, r2, #24
 8000a22:	0fc9      	lsrs	r1, r1, #31
 8000a24:	09b6      	lsrs	r6, r6, #6
 8000a26:	2aff      	cmp	r2, #255	; 0xff
 8000a28:	d05b      	beq.n	8000ae2 <__aeabi_fsub+0xe2>
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	4041      	eors	r1, r0
 8000a2e:	428c      	cmp	r4, r1
 8000a30:	d039      	beq.n	8000aa6 <__aeabi_fsub+0xa6>
 8000a32:	1aa8      	subs	r0, r5, r2
 8000a34:	2800      	cmp	r0, #0
 8000a36:	dd5a      	ble.n	8000aee <__aeabi_fsub+0xee>
 8000a38:	2a00      	cmp	r2, #0
 8000a3a:	d06a      	beq.n	8000b12 <__aeabi_fsub+0x112>
 8000a3c:	2dff      	cmp	r5, #255	; 0xff
 8000a3e:	d100      	bne.n	8000a42 <__aeabi_fsub+0x42>
 8000a40:	e0d9      	b.n	8000bf6 <__aeabi_fsub+0x1f6>
 8000a42:	2280      	movs	r2, #128	; 0x80
 8000a44:	04d2      	lsls	r2, r2, #19
 8000a46:	4316      	orrs	r6, r2
 8000a48:	281b      	cmp	r0, #27
 8000a4a:	dc00      	bgt.n	8000a4e <__aeabi_fsub+0x4e>
 8000a4c:	e0e9      	b.n	8000c22 <__aeabi_fsub+0x222>
 8000a4e:	2001      	movs	r0, #1
 8000a50:	4663      	mov	r3, ip
 8000a52:	1a18      	subs	r0, r3, r0
 8000a54:	0143      	lsls	r3, r0, #5
 8000a56:	d400      	bmi.n	8000a5a <__aeabi_fsub+0x5a>
 8000a58:	e0b4      	b.n	8000bc4 <__aeabi_fsub+0x1c4>
 8000a5a:	0180      	lsls	r0, r0, #6
 8000a5c:	0987      	lsrs	r7, r0, #6
 8000a5e:	0038      	movs	r0, r7
 8000a60:	f000 fa66 	bl	8000f30 <__clzsi2>
 8000a64:	3805      	subs	r0, #5
 8000a66:	4087      	lsls	r7, r0
 8000a68:	4285      	cmp	r5, r0
 8000a6a:	dc00      	bgt.n	8000a6e <__aeabi_fsub+0x6e>
 8000a6c:	e0cc      	b.n	8000c08 <__aeabi_fsub+0x208>
 8000a6e:	1a2d      	subs	r5, r5, r0
 8000a70:	48b5      	ldr	r0, [pc, #724]	; (8000d48 <__aeabi_fsub+0x348>)
 8000a72:	4038      	ands	r0, r7
 8000a74:	0743      	lsls	r3, r0, #29
 8000a76:	d004      	beq.n	8000a82 <__aeabi_fsub+0x82>
 8000a78:	230f      	movs	r3, #15
 8000a7a:	4003      	ands	r3, r0
 8000a7c:	2b04      	cmp	r3, #4
 8000a7e:	d000      	beq.n	8000a82 <__aeabi_fsub+0x82>
 8000a80:	3004      	adds	r0, #4
 8000a82:	0143      	lsls	r3, r0, #5
 8000a84:	d400      	bmi.n	8000a88 <__aeabi_fsub+0x88>
 8000a86:	e0a0      	b.n	8000bca <__aeabi_fsub+0x1ca>
 8000a88:	1c6a      	adds	r2, r5, #1
 8000a8a:	2dfe      	cmp	r5, #254	; 0xfe
 8000a8c:	d100      	bne.n	8000a90 <__aeabi_fsub+0x90>
 8000a8e:	e08d      	b.n	8000bac <__aeabi_fsub+0x1ac>
 8000a90:	0180      	lsls	r0, r0, #6
 8000a92:	0a47      	lsrs	r7, r0, #9
 8000a94:	b2d2      	uxtb	r2, r2
 8000a96:	05d0      	lsls	r0, r2, #23
 8000a98:	4338      	orrs	r0, r7
 8000a9a:	07e4      	lsls	r4, r4, #31
 8000a9c:	4320      	orrs	r0, r4
 8000a9e:	bcc0      	pop	{r6, r7}
 8000aa0:	46b9      	mov	r9, r7
 8000aa2:	46b0      	mov	r8, r6
 8000aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000aa6:	1aa8      	subs	r0, r5, r2
 8000aa8:	4680      	mov	r8, r0
 8000aaa:	2800      	cmp	r0, #0
 8000aac:	dd45      	ble.n	8000b3a <__aeabi_fsub+0x13a>
 8000aae:	2a00      	cmp	r2, #0
 8000ab0:	d070      	beq.n	8000b94 <__aeabi_fsub+0x194>
 8000ab2:	2dff      	cmp	r5, #255	; 0xff
 8000ab4:	d100      	bne.n	8000ab8 <__aeabi_fsub+0xb8>
 8000ab6:	e09e      	b.n	8000bf6 <__aeabi_fsub+0x1f6>
 8000ab8:	2380      	movs	r3, #128	; 0x80
 8000aba:	04db      	lsls	r3, r3, #19
 8000abc:	431e      	orrs	r6, r3
 8000abe:	4643      	mov	r3, r8
 8000ac0:	2b1b      	cmp	r3, #27
 8000ac2:	dc00      	bgt.n	8000ac6 <__aeabi_fsub+0xc6>
 8000ac4:	e0d2      	b.n	8000c6c <__aeabi_fsub+0x26c>
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	4460      	add	r0, ip
 8000aca:	0143      	lsls	r3, r0, #5
 8000acc:	d57a      	bpl.n	8000bc4 <__aeabi_fsub+0x1c4>
 8000ace:	3501      	adds	r5, #1
 8000ad0:	2dff      	cmp	r5, #255	; 0xff
 8000ad2:	d06b      	beq.n	8000bac <__aeabi_fsub+0x1ac>
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	4a9d      	ldr	r2, [pc, #628]	; (8000d4c <__aeabi_fsub+0x34c>)
 8000ad8:	4003      	ands	r3, r0
 8000ada:	0840      	lsrs	r0, r0, #1
 8000adc:	4010      	ands	r0, r2
 8000ade:	4318      	orrs	r0, r3
 8000ae0:	e7c8      	b.n	8000a74 <__aeabi_fsub+0x74>
 8000ae2:	2e00      	cmp	r6, #0
 8000ae4:	d020      	beq.n	8000b28 <__aeabi_fsub+0x128>
 8000ae6:	428c      	cmp	r4, r1
 8000ae8:	d023      	beq.n	8000b32 <__aeabi_fsub+0x132>
 8000aea:	0028      	movs	r0, r5
 8000aec:	38ff      	subs	r0, #255	; 0xff
 8000aee:	2800      	cmp	r0, #0
 8000af0:	d039      	beq.n	8000b66 <__aeabi_fsub+0x166>
 8000af2:	1b57      	subs	r7, r2, r5
 8000af4:	2d00      	cmp	r5, #0
 8000af6:	d000      	beq.n	8000afa <__aeabi_fsub+0xfa>
 8000af8:	e09d      	b.n	8000c36 <__aeabi_fsub+0x236>
 8000afa:	4663      	mov	r3, ip
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d100      	bne.n	8000b02 <__aeabi_fsub+0x102>
 8000b00:	e0db      	b.n	8000cba <__aeabi_fsub+0x2ba>
 8000b02:	1e7b      	subs	r3, r7, #1
 8000b04:	2f01      	cmp	r7, #1
 8000b06:	d100      	bne.n	8000b0a <__aeabi_fsub+0x10a>
 8000b08:	e10d      	b.n	8000d26 <__aeabi_fsub+0x326>
 8000b0a:	2fff      	cmp	r7, #255	; 0xff
 8000b0c:	d071      	beq.n	8000bf2 <__aeabi_fsub+0x1f2>
 8000b0e:	001f      	movs	r7, r3
 8000b10:	e098      	b.n	8000c44 <__aeabi_fsub+0x244>
 8000b12:	2e00      	cmp	r6, #0
 8000b14:	d100      	bne.n	8000b18 <__aeabi_fsub+0x118>
 8000b16:	e0a7      	b.n	8000c68 <__aeabi_fsub+0x268>
 8000b18:	1e42      	subs	r2, r0, #1
 8000b1a:	2801      	cmp	r0, #1
 8000b1c:	d100      	bne.n	8000b20 <__aeabi_fsub+0x120>
 8000b1e:	e0e6      	b.n	8000cee <__aeabi_fsub+0x2ee>
 8000b20:	28ff      	cmp	r0, #255	; 0xff
 8000b22:	d068      	beq.n	8000bf6 <__aeabi_fsub+0x1f6>
 8000b24:	0010      	movs	r0, r2
 8000b26:	e78f      	b.n	8000a48 <__aeabi_fsub+0x48>
 8000b28:	2001      	movs	r0, #1
 8000b2a:	4041      	eors	r1, r0
 8000b2c:	42a1      	cmp	r1, r4
 8000b2e:	d000      	beq.n	8000b32 <__aeabi_fsub+0x132>
 8000b30:	e77f      	b.n	8000a32 <__aeabi_fsub+0x32>
 8000b32:	20ff      	movs	r0, #255	; 0xff
 8000b34:	4240      	negs	r0, r0
 8000b36:	4680      	mov	r8, r0
 8000b38:	44a8      	add	r8, r5
 8000b3a:	4640      	mov	r0, r8
 8000b3c:	2800      	cmp	r0, #0
 8000b3e:	d038      	beq.n	8000bb2 <__aeabi_fsub+0x1b2>
 8000b40:	1b51      	subs	r1, r2, r5
 8000b42:	2d00      	cmp	r5, #0
 8000b44:	d100      	bne.n	8000b48 <__aeabi_fsub+0x148>
 8000b46:	e0ae      	b.n	8000ca6 <__aeabi_fsub+0x2a6>
 8000b48:	2aff      	cmp	r2, #255	; 0xff
 8000b4a:	d100      	bne.n	8000b4e <__aeabi_fsub+0x14e>
 8000b4c:	e0df      	b.n	8000d0e <__aeabi_fsub+0x30e>
 8000b4e:	2380      	movs	r3, #128	; 0x80
 8000b50:	4660      	mov	r0, ip
 8000b52:	04db      	lsls	r3, r3, #19
 8000b54:	4318      	orrs	r0, r3
 8000b56:	4684      	mov	ip, r0
 8000b58:	291b      	cmp	r1, #27
 8000b5a:	dc00      	bgt.n	8000b5e <__aeabi_fsub+0x15e>
 8000b5c:	e0d9      	b.n	8000d12 <__aeabi_fsub+0x312>
 8000b5e:	2001      	movs	r0, #1
 8000b60:	0015      	movs	r5, r2
 8000b62:	1980      	adds	r0, r0, r6
 8000b64:	e7b1      	b.n	8000aca <__aeabi_fsub+0xca>
 8000b66:	20fe      	movs	r0, #254	; 0xfe
 8000b68:	1c6a      	adds	r2, r5, #1
 8000b6a:	4210      	tst	r0, r2
 8000b6c:	d171      	bne.n	8000c52 <__aeabi_fsub+0x252>
 8000b6e:	2d00      	cmp	r5, #0
 8000b70:	d000      	beq.n	8000b74 <__aeabi_fsub+0x174>
 8000b72:	e0a6      	b.n	8000cc2 <__aeabi_fsub+0x2c2>
 8000b74:	4663      	mov	r3, ip
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d100      	bne.n	8000b7c <__aeabi_fsub+0x17c>
 8000b7a:	e0d9      	b.n	8000d30 <__aeabi_fsub+0x330>
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d100      	bne.n	8000b84 <__aeabi_fsub+0x184>
 8000b82:	e788      	b.n	8000a96 <__aeabi_fsub+0x96>
 8000b84:	1b98      	subs	r0, r3, r6
 8000b86:	0143      	lsls	r3, r0, #5
 8000b88:	d400      	bmi.n	8000b8c <__aeabi_fsub+0x18c>
 8000b8a:	e0e1      	b.n	8000d50 <__aeabi_fsub+0x350>
 8000b8c:	4663      	mov	r3, ip
 8000b8e:	000c      	movs	r4, r1
 8000b90:	1af0      	subs	r0, r6, r3
 8000b92:	e76f      	b.n	8000a74 <__aeabi_fsub+0x74>
 8000b94:	2e00      	cmp	r6, #0
 8000b96:	d100      	bne.n	8000b9a <__aeabi_fsub+0x19a>
 8000b98:	e0b7      	b.n	8000d0a <__aeabi_fsub+0x30a>
 8000b9a:	0002      	movs	r2, r0
 8000b9c:	3a01      	subs	r2, #1
 8000b9e:	2801      	cmp	r0, #1
 8000ba0:	d100      	bne.n	8000ba4 <__aeabi_fsub+0x1a4>
 8000ba2:	e09c      	b.n	8000cde <__aeabi_fsub+0x2de>
 8000ba4:	28ff      	cmp	r0, #255	; 0xff
 8000ba6:	d026      	beq.n	8000bf6 <__aeabi_fsub+0x1f6>
 8000ba8:	4690      	mov	r8, r2
 8000baa:	e788      	b.n	8000abe <__aeabi_fsub+0xbe>
 8000bac:	22ff      	movs	r2, #255	; 0xff
 8000bae:	2700      	movs	r7, #0
 8000bb0:	e771      	b.n	8000a96 <__aeabi_fsub+0x96>
 8000bb2:	20fe      	movs	r0, #254	; 0xfe
 8000bb4:	1c6a      	adds	r2, r5, #1
 8000bb6:	4210      	tst	r0, r2
 8000bb8:	d064      	beq.n	8000c84 <__aeabi_fsub+0x284>
 8000bba:	2aff      	cmp	r2, #255	; 0xff
 8000bbc:	d0f6      	beq.n	8000bac <__aeabi_fsub+0x1ac>
 8000bbe:	0015      	movs	r5, r2
 8000bc0:	4466      	add	r6, ip
 8000bc2:	0870      	lsrs	r0, r6, #1
 8000bc4:	0743      	lsls	r3, r0, #29
 8000bc6:	d000      	beq.n	8000bca <__aeabi_fsub+0x1ca>
 8000bc8:	e756      	b.n	8000a78 <__aeabi_fsub+0x78>
 8000bca:	08c3      	lsrs	r3, r0, #3
 8000bcc:	2dff      	cmp	r5, #255	; 0xff
 8000bce:	d012      	beq.n	8000bf6 <__aeabi_fsub+0x1f6>
 8000bd0:	025b      	lsls	r3, r3, #9
 8000bd2:	0a5f      	lsrs	r7, r3, #9
 8000bd4:	b2ea      	uxtb	r2, r5
 8000bd6:	e75e      	b.n	8000a96 <__aeabi_fsub+0x96>
 8000bd8:	4662      	mov	r2, ip
 8000bda:	2a00      	cmp	r2, #0
 8000bdc:	d100      	bne.n	8000be0 <__aeabi_fsub+0x1e0>
 8000bde:	e096      	b.n	8000d0e <__aeabi_fsub+0x30e>
 8000be0:	2e00      	cmp	r6, #0
 8000be2:	d008      	beq.n	8000bf6 <__aeabi_fsub+0x1f6>
 8000be4:	2280      	movs	r2, #128	; 0x80
 8000be6:	03d2      	lsls	r2, r2, #15
 8000be8:	4213      	tst	r3, r2
 8000bea:	d004      	beq.n	8000bf6 <__aeabi_fsub+0x1f6>
 8000bec:	4648      	mov	r0, r9
 8000bee:	4210      	tst	r0, r2
 8000bf0:	d101      	bne.n	8000bf6 <__aeabi_fsub+0x1f6>
 8000bf2:	000c      	movs	r4, r1
 8000bf4:	464b      	mov	r3, r9
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d0d8      	beq.n	8000bac <__aeabi_fsub+0x1ac>
 8000bfa:	2780      	movs	r7, #128	; 0x80
 8000bfc:	03ff      	lsls	r7, r7, #15
 8000bfe:	431f      	orrs	r7, r3
 8000c00:	027f      	lsls	r7, r7, #9
 8000c02:	22ff      	movs	r2, #255	; 0xff
 8000c04:	0a7f      	lsrs	r7, r7, #9
 8000c06:	e746      	b.n	8000a96 <__aeabi_fsub+0x96>
 8000c08:	2320      	movs	r3, #32
 8000c0a:	003a      	movs	r2, r7
 8000c0c:	1b45      	subs	r5, r0, r5
 8000c0e:	0038      	movs	r0, r7
 8000c10:	3501      	adds	r5, #1
 8000c12:	40ea      	lsrs	r2, r5
 8000c14:	1b5d      	subs	r5, r3, r5
 8000c16:	40a8      	lsls	r0, r5
 8000c18:	1e43      	subs	r3, r0, #1
 8000c1a:	4198      	sbcs	r0, r3
 8000c1c:	2500      	movs	r5, #0
 8000c1e:	4310      	orrs	r0, r2
 8000c20:	e728      	b.n	8000a74 <__aeabi_fsub+0x74>
 8000c22:	2320      	movs	r3, #32
 8000c24:	1a1b      	subs	r3, r3, r0
 8000c26:	0032      	movs	r2, r6
 8000c28:	409e      	lsls	r6, r3
 8000c2a:	40c2      	lsrs	r2, r0
 8000c2c:	0030      	movs	r0, r6
 8000c2e:	1e43      	subs	r3, r0, #1
 8000c30:	4198      	sbcs	r0, r3
 8000c32:	4310      	orrs	r0, r2
 8000c34:	e70c      	b.n	8000a50 <__aeabi_fsub+0x50>
 8000c36:	2aff      	cmp	r2, #255	; 0xff
 8000c38:	d0db      	beq.n	8000bf2 <__aeabi_fsub+0x1f2>
 8000c3a:	2380      	movs	r3, #128	; 0x80
 8000c3c:	4660      	mov	r0, ip
 8000c3e:	04db      	lsls	r3, r3, #19
 8000c40:	4318      	orrs	r0, r3
 8000c42:	4684      	mov	ip, r0
 8000c44:	2f1b      	cmp	r7, #27
 8000c46:	dd56      	ble.n	8000cf6 <__aeabi_fsub+0x2f6>
 8000c48:	2001      	movs	r0, #1
 8000c4a:	000c      	movs	r4, r1
 8000c4c:	0015      	movs	r5, r2
 8000c4e:	1a30      	subs	r0, r6, r0
 8000c50:	e700      	b.n	8000a54 <__aeabi_fsub+0x54>
 8000c52:	4663      	mov	r3, ip
 8000c54:	1b9f      	subs	r7, r3, r6
 8000c56:	017b      	lsls	r3, r7, #5
 8000c58:	d43d      	bmi.n	8000cd6 <__aeabi_fsub+0x2d6>
 8000c5a:	2f00      	cmp	r7, #0
 8000c5c:	d000      	beq.n	8000c60 <__aeabi_fsub+0x260>
 8000c5e:	e6fe      	b.n	8000a5e <__aeabi_fsub+0x5e>
 8000c60:	2400      	movs	r4, #0
 8000c62:	2200      	movs	r2, #0
 8000c64:	2700      	movs	r7, #0
 8000c66:	e716      	b.n	8000a96 <__aeabi_fsub+0x96>
 8000c68:	0005      	movs	r5, r0
 8000c6a:	e7af      	b.n	8000bcc <__aeabi_fsub+0x1cc>
 8000c6c:	0032      	movs	r2, r6
 8000c6e:	4643      	mov	r3, r8
 8000c70:	4641      	mov	r1, r8
 8000c72:	40da      	lsrs	r2, r3
 8000c74:	2320      	movs	r3, #32
 8000c76:	1a5b      	subs	r3, r3, r1
 8000c78:	409e      	lsls	r6, r3
 8000c7a:	0030      	movs	r0, r6
 8000c7c:	1e43      	subs	r3, r0, #1
 8000c7e:	4198      	sbcs	r0, r3
 8000c80:	4310      	orrs	r0, r2
 8000c82:	e721      	b.n	8000ac8 <__aeabi_fsub+0xc8>
 8000c84:	2d00      	cmp	r5, #0
 8000c86:	d1a7      	bne.n	8000bd8 <__aeabi_fsub+0x1d8>
 8000c88:	4663      	mov	r3, ip
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d059      	beq.n	8000d42 <__aeabi_fsub+0x342>
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2e00      	cmp	r6, #0
 8000c92:	d100      	bne.n	8000c96 <__aeabi_fsub+0x296>
 8000c94:	e6ff      	b.n	8000a96 <__aeabi_fsub+0x96>
 8000c96:	0030      	movs	r0, r6
 8000c98:	4460      	add	r0, ip
 8000c9a:	0143      	lsls	r3, r0, #5
 8000c9c:	d592      	bpl.n	8000bc4 <__aeabi_fsub+0x1c4>
 8000c9e:	4b2a      	ldr	r3, [pc, #168]	; (8000d48 <__aeabi_fsub+0x348>)
 8000ca0:	3501      	adds	r5, #1
 8000ca2:	4018      	ands	r0, r3
 8000ca4:	e78e      	b.n	8000bc4 <__aeabi_fsub+0x1c4>
 8000ca6:	4663      	mov	r3, ip
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d047      	beq.n	8000d3c <__aeabi_fsub+0x33c>
 8000cac:	1e4b      	subs	r3, r1, #1
 8000cae:	2901      	cmp	r1, #1
 8000cb0:	d015      	beq.n	8000cde <__aeabi_fsub+0x2de>
 8000cb2:	29ff      	cmp	r1, #255	; 0xff
 8000cb4:	d02b      	beq.n	8000d0e <__aeabi_fsub+0x30e>
 8000cb6:	0019      	movs	r1, r3
 8000cb8:	e74e      	b.n	8000b58 <__aeabi_fsub+0x158>
 8000cba:	000c      	movs	r4, r1
 8000cbc:	464b      	mov	r3, r9
 8000cbe:	003d      	movs	r5, r7
 8000cc0:	e784      	b.n	8000bcc <__aeabi_fsub+0x1cc>
 8000cc2:	4662      	mov	r2, ip
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	d18b      	bne.n	8000be0 <__aeabi_fsub+0x1e0>
 8000cc8:	2e00      	cmp	r6, #0
 8000cca:	d192      	bne.n	8000bf2 <__aeabi_fsub+0x1f2>
 8000ccc:	2780      	movs	r7, #128	; 0x80
 8000cce:	2400      	movs	r4, #0
 8000cd0:	22ff      	movs	r2, #255	; 0xff
 8000cd2:	03ff      	lsls	r7, r7, #15
 8000cd4:	e6df      	b.n	8000a96 <__aeabi_fsub+0x96>
 8000cd6:	4663      	mov	r3, ip
 8000cd8:	000c      	movs	r4, r1
 8000cda:	1af7      	subs	r7, r6, r3
 8000cdc:	e6bf      	b.n	8000a5e <__aeabi_fsub+0x5e>
 8000cde:	0030      	movs	r0, r6
 8000ce0:	4460      	add	r0, ip
 8000ce2:	2501      	movs	r5, #1
 8000ce4:	0143      	lsls	r3, r0, #5
 8000ce6:	d400      	bmi.n	8000cea <__aeabi_fsub+0x2ea>
 8000ce8:	e76c      	b.n	8000bc4 <__aeabi_fsub+0x1c4>
 8000cea:	2502      	movs	r5, #2
 8000cec:	e6f2      	b.n	8000ad4 <__aeabi_fsub+0xd4>
 8000cee:	4663      	mov	r3, ip
 8000cf0:	2501      	movs	r5, #1
 8000cf2:	1b98      	subs	r0, r3, r6
 8000cf4:	e6ae      	b.n	8000a54 <__aeabi_fsub+0x54>
 8000cf6:	2320      	movs	r3, #32
 8000cf8:	4664      	mov	r4, ip
 8000cfa:	4660      	mov	r0, ip
 8000cfc:	40fc      	lsrs	r4, r7
 8000cfe:	1bdf      	subs	r7, r3, r7
 8000d00:	40b8      	lsls	r0, r7
 8000d02:	1e43      	subs	r3, r0, #1
 8000d04:	4198      	sbcs	r0, r3
 8000d06:	4320      	orrs	r0, r4
 8000d08:	e79f      	b.n	8000c4a <__aeabi_fsub+0x24a>
 8000d0a:	0005      	movs	r5, r0
 8000d0c:	e75e      	b.n	8000bcc <__aeabi_fsub+0x1cc>
 8000d0e:	464b      	mov	r3, r9
 8000d10:	e771      	b.n	8000bf6 <__aeabi_fsub+0x1f6>
 8000d12:	2320      	movs	r3, #32
 8000d14:	4665      	mov	r5, ip
 8000d16:	4660      	mov	r0, ip
 8000d18:	40cd      	lsrs	r5, r1
 8000d1a:	1a59      	subs	r1, r3, r1
 8000d1c:	4088      	lsls	r0, r1
 8000d1e:	1e43      	subs	r3, r0, #1
 8000d20:	4198      	sbcs	r0, r3
 8000d22:	4328      	orrs	r0, r5
 8000d24:	e71c      	b.n	8000b60 <__aeabi_fsub+0x160>
 8000d26:	4663      	mov	r3, ip
 8000d28:	000c      	movs	r4, r1
 8000d2a:	2501      	movs	r5, #1
 8000d2c:	1af0      	subs	r0, r6, r3
 8000d2e:	e691      	b.n	8000a54 <__aeabi_fsub+0x54>
 8000d30:	2e00      	cmp	r6, #0
 8000d32:	d095      	beq.n	8000c60 <__aeabi_fsub+0x260>
 8000d34:	000c      	movs	r4, r1
 8000d36:	464f      	mov	r7, r9
 8000d38:	2200      	movs	r2, #0
 8000d3a:	e6ac      	b.n	8000a96 <__aeabi_fsub+0x96>
 8000d3c:	464b      	mov	r3, r9
 8000d3e:	000d      	movs	r5, r1
 8000d40:	e744      	b.n	8000bcc <__aeabi_fsub+0x1cc>
 8000d42:	464f      	mov	r7, r9
 8000d44:	2200      	movs	r2, #0
 8000d46:	e6a6      	b.n	8000a96 <__aeabi_fsub+0x96>
 8000d48:	fbffffff 	.word	0xfbffffff
 8000d4c:	7dffffff 	.word	0x7dffffff
 8000d50:	2800      	cmp	r0, #0
 8000d52:	d000      	beq.n	8000d56 <__aeabi_fsub+0x356>
 8000d54:	e736      	b.n	8000bc4 <__aeabi_fsub+0x1c4>
 8000d56:	2400      	movs	r4, #0
 8000d58:	2700      	movs	r7, #0
 8000d5a:	e69c      	b.n	8000a96 <__aeabi_fsub+0x96>

08000d5c <__aeabi_f2iz>:
 8000d5c:	0241      	lsls	r1, r0, #9
 8000d5e:	0042      	lsls	r2, r0, #1
 8000d60:	0fc3      	lsrs	r3, r0, #31
 8000d62:	0a49      	lsrs	r1, r1, #9
 8000d64:	2000      	movs	r0, #0
 8000d66:	0e12      	lsrs	r2, r2, #24
 8000d68:	2a7e      	cmp	r2, #126	; 0x7e
 8000d6a:	dd03      	ble.n	8000d74 <__aeabi_f2iz+0x18>
 8000d6c:	2a9d      	cmp	r2, #157	; 0x9d
 8000d6e:	dd02      	ble.n	8000d76 <__aeabi_f2iz+0x1a>
 8000d70:	4a09      	ldr	r2, [pc, #36]	; (8000d98 <__aeabi_f2iz+0x3c>)
 8000d72:	1898      	adds	r0, r3, r2
 8000d74:	4770      	bx	lr
 8000d76:	2080      	movs	r0, #128	; 0x80
 8000d78:	0400      	lsls	r0, r0, #16
 8000d7a:	4301      	orrs	r1, r0
 8000d7c:	2a95      	cmp	r2, #149	; 0x95
 8000d7e:	dc07      	bgt.n	8000d90 <__aeabi_f2iz+0x34>
 8000d80:	2096      	movs	r0, #150	; 0x96
 8000d82:	1a82      	subs	r2, r0, r2
 8000d84:	40d1      	lsrs	r1, r2
 8000d86:	4248      	negs	r0, r1
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d1f3      	bne.n	8000d74 <__aeabi_f2iz+0x18>
 8000d8c:	0008      	movs	r0, r1
 8000d8e:	e7f1      	b.n	8000d74 <__aeabi_f2iz+0x18>
 8000d90:	3a96      	subs	r2, #150	; 0x96
 8000d92:	4091      	lsls	r1, r2
 8000d94:	e7f7      	b.n	8000d86 <__aeabi_f2iz+0x2a>
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	7fffffff 	.word	0x7fffffff

08000d9c <__aeabi_i2f>:
 8000d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d9e:	2800      	cmp	r0, #0
 8000da0:	d013      	beq.n	8000dca <__aeabi_i2f+0x2e>
 8000da2:	17c3      	asrs	r3, r0, #31
 8000da4:	18c6      	adds	r6, r0, r3
 8000da6:	405e      	eors	r6, r3
 8000da8:	0fc4      	lsrs	r4, r0, #31
 8000daa:	0030      	movs	r0, r6
 8000dac:	f000 f8c0 	bl	8000f30 <__clzsi2>
 8000db0:	239e      	movs	r3, #158	; 0x9e
 8000db2:	0005      	movs	r5, r0
 8000db4:	1a1b      	subs	r3, r3, r0
 8000db6:	2b96      	cmp	r3, #150	; 0x96
 8000db8:	dc0f      	bgt.n	8000dda <__aeabi_i2f+0x3e>
 8000dba:	2808      	cmp	r0, #8
 8000dbc:	dd01      	ble.n	8000dc2 <__aeabi_i2f+0x26>
 8000dbe:	3d08      	subs	r5, #8
 8000dc0:	40ae      	lsls	r6, r5
 8000dc2:	0276      	lsls	r6, r6, #9
 8000dc4:	0a76      	lsrs	r6, r6, #9
 8000dc6:	b2d8      	uxtb	r0, r3
 8000dc8:	e002      	b.n	8000dd0 <__aeabi_i2f+0x34>
 8000dca:	2400      	movs	r4, #0
 8000dcc:	2000      	movs	r0, #0
 8000dce:	2600      	movs	r6, #0
 8000dd0:	05c0      	lsls	r0, r0, #23
 8000dd2:	4330      	orrs	r0, r6
 8000dd4:	07e4      	lsls	r4, r4, #31
 8000dd6:	4320      	orrs	r0, r4
 8000dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000dda:	2b99      	cmp	r3, #153	; 0x99
 8000ddc:	dd0c      	ble.n	8000df8 <__aeabi_i2f+0x5c>
 8000dde:	2205      	movs	r2, #5
 8000de0:	0031      	movs	r1, r6
 8000de2:	1a12      	subs	r2, r2, r0
 8000de4:	40d1      	lsrs	r1, r2
 8000de6:	000a      	movs	r2, r1
 8000de8:	0001      	movs	r1, r0
 8000dea:	0030      	movs	r0, r6
 8000dec:	311b      	adds	r1, #27
 8000dee:	4088      	lsls	r0, r1
 8000df0:	1e41      	subs	r1, r0, #1
 8000df2:	4188      	sbcs	r0, r1
 8000df4:	4302      	orrs	r2, r0
 8000df6:	0016      	movs	r6, r2
 8000df8:	2d05      	cmp	r5, #5
 8000dfa:	dc12      	bgt.n	8000e22 <__aeabi_i2f+0x86>
 8000dfc:	0031      	movs	r1, r6
 8000dfe:	4f0d      	ldr	r7, [pc, #52]	; (8000e34 <__aeabi_i2f+0x98>)
 8000e00:	4039      	ands	r1, r7
 8000e02:	0772      	lsls	r2, r6, #29
 8000e04:	d009      	beq.n	8000e1a <__aeabi_i2f+0x7e>
 8000e06:	200f      	movs	r0, #15
 8000e08:	4030      	ands	r0, r6
 8000e0a:	2804      	cmp	r0, #4
 8000e0c:	d005      	beq.n	8000e1a <__aeabi_i2f+0x7e>
 8000e0e:	3104      	adds	r1, #4
 8000e10:	014a      	lsls	r2, r1, #5
 8000e12:	d502      	bpl.n	8000e1a <__aeabi_i2f+0x7e>
 8000e14:	239f      	movs	r3, #159	; 0x9f
 8000e16:	4039      	ands	r1, r7
 8000e18:	1b5b      	subs	r3, r3, r5
 8000e1a:	0189      	lsls	r1, r1, #6
 8000e1c:	0a4e      	lsrs	r6, r1, #9
 8000e1e:	b2d8      	uxtb	r0, r3
 8000e20:	e7d6      	b.n	8000dd0 <__aeabi_i2f+0x34>
 8000e22:	1f6a      	subs	r2, r5, #5
 8000e24:	4096      	lsls	r6, r2
 8000e26:	0031      	movs	r1, r6
 8000e28:	4f02      	ldr	r7, [pc, #8]	; (8000e34 <__aeabi_i2f+0x98>)
 8000e2a:	4039      	ands	r1, r7
 8000e2c:	0772      	lsls	r2, r6, #29
 8000e2e:	d0f4      	beq.n	8000e1a <__aeabi_i2f+0x7e>
 8000e30:	e7e9      	b.n	8000e06 <__aeabi_i2f+0x6a>
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	fbffffff 	.word	0xfbffffff

08000e38 <__aeabi_ui2f>:
 8000e38:	b570      	push	{r4, r5, r6, lr}
 8000e3a:	1e05      	subs	r5, r0, #0
 8000e3c:	d00e      	beq.n	8000e5c <__aeabi_ui2f+0x24>
 8000e3e:	f000 f877 	bl	8000f30 <__clzsi2>
 8000e42:	239e      	movs	r3, #158	; 0x9e
 8000e44:	0004      	movs	r4, r0
 8000e46:	1a1b      	subs	r3, r3, r0
 8000e48:	2b96      	cmp	r3, #150	; 0x96
 8000e4a:	dc0c      	bgt.n	8000e66 <__aeabi_ui2f+0x2e>
 8000e4c:	2808      	cmp	r0, #8
 8000e4e:	dd01      	ble.n	8000e54 <__aeabi_ui2f+0x1c>
 8000e50:	3c08      	subs	r4, #8
 8000e52:	40a5      	lsls	r5, r4
 8000e54:	026d      	lsls	r5, r5, #9
 8000e56:	0a6d      	lsrs	r5, r5, #9
 8000e58:	b2d8      	uxtb	r0, r3
 8000e5a:	e001      	b.n	8000e60 <__aeabi_ui2f+0x28>
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	2500      	movs	r5, #0
 8000e60:	05c0      	lsls	r0, r0, #23
 8000e62:	4328      	orrs	r0, r5
 8000e64:	bd70      	pop	{r4, r5, r6, pc}
 8000e66:	2b99      	cmp	r3, #153	; 0x99
 8000e68:	dd09      	ble.n	8000e7e <__aeabi_ui2f+0x46>
 8000e6a:	0002      	movs	r2, r0
 8000e6c:	0029      	movs	r1, r5
 8000e6e:	321b      	adds	r2, #27
 8000e70:	4091      	lsls	r1, r2
 8000e72:	1e4a      	subs	r2, r1, #1
 8000e74:	4191      	sbcs	r1, r2
 8000e76:	2205      	movs	r2, #5
 8000e78:	1a12      	subs	r2, r2, r0
 8000e7a:	40d5      	lsrs	r5, r2
 8000e7c:	430d      	orrs	r5, r1
 8000e7e:	2c05      	cmp	r4, #5
 8000e80:	dc12      	bgt.n	8000ea8 <__aeabi_ui2f+0x70>
 8000e82:	0029      	movs	r1, r5
 8000e84:	4e0c      	ldr	r6, [pc, #48]	; (8000eb8 <__aeabi_ui2f+0x80>)
 8000e86:	4031      	ands	r1, r6
 8000e88:	076a      	lsls	r2, r5, #29
 8000e8a:	d009      	beq.n	8000ea0 <__aeabi_ui2f+0x68>
 8000e8c:	200f      	movs	r0, #15
 8000e8e:	4028      	ands	r0, r5
 8000e90:	2804      	cmp	r0, #4
 8000e92:	d005      	beq.n	8000ea0 <__aeabi_ui2f+0x68>
 8000e94:	3104      	adds	r1, #4
 8000e96:	014a      	lsls	r2, r1, #5
 8000e98:	d502      	bpl.n	8000ea0 <__aeabi_ui2f+0x68>
 8000e9a:	239f      	movs	r3, #159	; 0x9f
 8000e9c:	4031      	ands	r1, r6
 8000e9e:	1b1b      	subs	r3, r3, r4
 8000ea0:	0189      	lsls	r1, r1, #6
 8000ea2:	0a4d      	lsrs	r5, r1, #9
 8000ea4:	b2d8      	uxtb	r0, r3
 8000ea6:	e7db      	b.n	8000e60 <__aeabi_ui2f+0x28>
 8000ea8:	1f62      	subs	r2, r4, #5
 8000eaa:	4095      	lsls	r5, r2
 8000eac:	0029      	movs	r1, r5
 8000eae:	4e02      	ldr	r6, [pc, #8]	; (8000eb8 <__aeabi_ui2f+0x80>)
 8000eb0:	4031      	ands	r1, r6
 8000eb2:	076a      	lsls	r2, r5, #29
 8000eb4:	d0f4      	beq.n	8000ea0 <__aeabi_ui2f+0x68>
 8000eb6:	e7e9      	b.n	8000e8c <__aeabi_ui2f+0x54>
 8000eb8:	fbffffff 	.word	0xfbffffff

08000ebc <__aeabi_cfrcmple>:
 8000ebc:	4684      	mov	ip, r0
 8000ebe:	0008      	movs	r0, r1
 8000ec0:	4661      	mov	r1, ip
 8000ec2:	e7ff      	b.n	8000ec4 <__aeabi_cfcmpeq>

08000ec4 <__aeabi_cfcmpeq>:
 8000ec4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000ec6:	f000 f8bd 	bl	8001044 <__lesf2>
 8000eca:	2800      	cmp	r0, #0
 8000ecc:	d401      	bmi.n	8000ed2 <__aeabi_cfcmpeq+0xe>
 8000ece:	2100      	movs	r1, #0
 8000ed0:	42c8      	cmn	r0, r1
 8000ed2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000ed4 <__aeabi_fcmpeq>:
 8000ed4:	b510      	push	{r4, lr}
 8000ed6:	f000 f849 	bl	8000f6c <__eqsf2>
 8000eda:	4240      	negs	r0, r0
 8000edc:	3001      	adds	r0, #1
 8000ede:	bd10      	pop	{r4, pc}

08000ee0 <__aeabi_fcmplt>:
 8000ee0:	b510      	push	{r4, lr}
 8000ee2:	f000 f8af 	bl	8001044 <__lesf2>
 8000ee6:	2800      	cmp	r0, #0
 8000ee8:	db01      	blt.n	8000eee <__aeabi_fcmplt+0xe>
 8000eea:	2000      	movs	r0, #0
 8000eec:	bd10      	pop	{r4, pc}
 8000eee:	2001      	movs	r0, #1
 8000ef0:	bd10      	pop	{r4, pc}
 8000ef2:	46c0      	nop			; (mov r8, r8)

08000ef4 <__aeabi_fcmple>:
 8000ef4:	b510      	push	{r4, lr}
 8000ef6:	f000 f8a5 	bl	8001044 <__lesf2>
 8000efa:	2800      	cmp	r0, #0
 8000efc:	dd01      	ble.n	8000f02 <__aeabi_fcmple+0xe>
 8000efe:	2000      	movs	r0, #0
 8000f00:	bd10      	pop	{r4, pc}
 8000f02:	2001      	movs	r0, #1
 8000f04:	bd10      	pop	{r4, pc}
 8000f06:	46c0      	nop			; (mov r8, r8)

08000f08 <__aeabi_fcmpgt>:
 8000f08:	b510      	push	{r4, lr}
 8000f0a:	f000 f855 	bl	8000fb8 <__gesf2>
 8000f0e:	2800      	cmp	r0, #0
 8000f10:	dc01      	bgt.n	8000f16 <__aeabi_fcmpgt+0xe>
 8000f12:	2000      	movs	r0, #0
 8000f14:	bd10      	pop	{r4, pc}
 8000f16:	2001      	movs	r0, #1
 8000f18:	bd10      	pop	{r4, pc}
 8000f1a:	46c0      	nop			; (mov r8, r8)

08000f1c <__aeabi_fcmpge>:
 8000f1c:	b510      	push	{r4, lr}
 8000f1e:	f000 f84b 	bl	8000fb8 <__gesf2>
 8000f22:	2800      	cmp	r0, #0
 8000f24:	da01      	bge.n	8000f2a <__aeabi_fcmpge+0xe>
 8000f26:	2000      	movs	r0, #0
 8000f28:	bd10      	pop	{r4, pc}
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	bd10      	pop	{r4, pc}
 8000f2e:	46c0      	nop			; (mov r8, r8)

08000f30 <__clzsi2>:
 8000f30:	211c      	movs	r1, #28
 8000f32:	2301      	movs	r3, #1
 8000f34:	041b      	lsls	r3, r3, #16
 8000f36:	4298      	cmp	r0, r3
 8000f38:	d301      	bcc.n	8000f3e <__clzsi2+0xe>
 8000f3a:	0c00      	lsrs	r0, r0, #16
 8000f3c:	3910      	subs	r1, #16
 8000f3e:	0a1b      	lsrs	r3, r3, #8
 8000f40:	4298      	cmp	r0, r3
 8000f42:	d301      	bcc.n	8000f48 <__clzsi2+0x18>
 8000f44:	0a00      	lsrs	r0, r0, #8
 8000f46:	3908      	subs	r1, #8
 8000f48:	091b      	lsrs	r3, r3, #4
 8000f4a:	4298      	cmp	r0, r3
 8000f4c:	d301      	bcc.n	8000f52 <__clzsi2+0x22>
 8000f4e:	0900      	lsrs	r0, r0, #4
 8000f50:	3904      	subs	r1, #4
 8000f52:	a202      	add	r2, pc, #8	; (adr r2, 8000f5c <__clzsi2+0x2c>)
 8000f54:	5c10      	ldrb	r0, [r2, r0]
 8000f56:	1840      	adds	r0, r0, r1
 8000f58:	4770      	bx	lr
 8000f5a:	46c0      	nop			; (mov r8, r8)
 8000f5c:	02020304 	.word	0x02020304
 8000f60:	01010101 	.word	0x01010101
	...

08000f6c <__eqsf2>:
 8000f6c:	b570      	push	{r4, r5, r6, lr}
 8000f6e:	0042      	lsls	r2, r0, #1
 8000f70:	0245      	lsls	r5, r0, #9
 8000f72:	024e      	lsls	r6, r1, #9
 8000f74:	004c      	lsls	r4, r1, #1
 8000f76:	0fc3      	lsrs	r3, r0, #31
 8000f78:	0a6d      	lsrs	r5, r5, #9
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	0e12      	lsrs	r2, r2, #24
 8000f7e:	0a76      	lsrs	r6, r6, #9
 8000f80:	0e24      	lsrs	r4, r4, #24
 8000f82:	0fc9      	lsrs	r1, r1, #31
 8000f84:	2aff      	cmp	r2, #255	; 0xff
 8000f86:	d006      	beq.n	8000f96 <__eqsf2+0x2a>
 8000f88:	2cff      	cmp	r4, #255	; 0xff
 8000f8a:	d003      	beq.n	8000f94 <__eqsf2+0x28>
 8000f8c:	42a2      	cmp	r2, r4
 8000f8e:	d101      	bne.n	8000f94 <__eqsf2+0x28>
 8000f90:	42b5      	cmp	r5, r6
 8000f92:	d006      	beq.n	8000fa2 <__eqsf2+0x36>
 8000f94:	bd70      	pop	{r4, r5, r6, pc}
 8000f96:	2d00      	cmp	r5, #0
 8000f98:	d1fc      	bne.n	8000f94 <__eqsf2+0x28>
 8000f9a:	2cff      	cmp	r4, #255	; 0xff
 8000f9c:	d1fa      	bne.n	8000f94 <__eqsf2+0x28>
 8000f9e:	2e00      	cmp	r6, #0
 8000fa0:	d1f8      	bne.n	8000f94 <__eqsf2+0x28>
 8000fa2:	428b      	cmp	r3, r1
 8000fa4:	d006      	beq.n	8000fb4 <__eqsf2+0x48>
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	2a00      	cmp	r2, #0
 8000faa:	d1f3      	bne.n	8000f94 <__eqsf2+0x28>
 8000fac:	0028      	movs	r0, r5
 8000fae:	1e43      	subs	r3, r0, #1
 8000fb0:	4198      	sbcs	r0, r3
 8000fb2:	e7ef      	b.n	8000f94 <__eqsf2+0x28>
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	e7ed      	b.n	8000f94 <__eqsf2+0x28>

08000fb8 <__gesf2>:
 8000fb8:	b570      	push	{r4, r5, r6, lr}
 8000fba:	0042      	lsls	r2, r0, #1
 8000fbc:	0245      	lsls	r5, r0, #9
 8000fbe:	024e      	lsls	r6, r1, #9
 8000fc0:	004c      	lsls	r4, r1, #1
 8000fc2:	0fc3      	lsrs	r3, r0, #31
 8000fc4:	0a6d      	lsrs	r5, r5, #9
 8000fc6:	0e12      	lsrs	r2, r2, #24
 8000fc8:	0a76      	lsrs	r6, r6, #9
 8000fca:	0e24      	lsrs	r4, r4, #24
 8000fcc:	0fc8      	lsrs	r0, r1, #31
 8000fce:	2aff      	cmp	r2, #255	; 0xff
 8000fd0:	d01b      	beq.n	800100a <__gesf2+0x52>
 8000fd2:	2cff      	cmp	r4, #255	; 0xff
 8000fd4:	d00e      	beq.n	8000ff4 <__gesf2+0x3c>
 8000fd6:	2a00      	cmp	r2, #0
 8000fd8:	d11b      	bne.n	8001012 <__gesf2+0x5a>
 8000fda:	2c00      	cmp	r4, #0
 8000fdc:	d101      	bne.n	8000fe2 <__gesf2+0x2a>
 8000fde:	2e00      	cmp	r6, #0
 8000fe0:	d01c      	beq.n	800101c <__gesf2+0x64>
 8000fe2:	2d00      	cmp	r5, #0
 8000fe4:	d00c      	beq.n	8001000 <__gesf2+0x48>
 8000fe6:	4283      	cmp	r3, r0
 8000fe8:	d01c      	beq.n	8001024 <__gesf2+0x6c>
 8000fea:	2102      	movs	r1, #2
 8000fec:	1e58      	subs	r0, r3, #1
 8000fee:	4008      	ands	r0, r1
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	bd70      	pop	{r4, r5, r6, pc}
 8000ff4:	2e00      	cmp	r6, #0
 8000ff6:	d122      	bne.n	800103e <__gesf2+0x86>
 8000ff8:	2a00      	cmp	r2, #0
 8000ffa:	d1f4      	bne.n	8000fe6 <__gesf2+0x2e>
 8000ffc:	2d00      	cmp	r5, #0
 8000ffe:	d1f2      	bne.n	8000fe6 <__gesf2+0x2e>
 8001000:	2800      	cmp	r0, #0
 8001002:	d1f6      	bne.n	8000ff2 <__gesf2+0x3a>
 8001004:	2001      	movs	r0, #1
 8001006:	4240      	negs	r0, r0
 8001008:	e7f3      	b.n	8000ff2 <__gesf2+0x3a>
 800100a:	2d00      	cmp	r5, #0
 800100c:	d117      	bne.n	800103e <__gesf2+0x86>
 800100e:	2cff      	cmp	r4, #255	; 0xff
 8001010:	d0f0      	beq.n	8000ff4 <__gesf2+0x3c>
 8001012:	2c00      	cmp	r4, #0
 8001014:	d1e7      	bne.n	8000fe6 <__gesf2+0x2e>
 8001016:	2e00      	cmp	r6, #0
 8001018:	d1e5      	bne.n	8000fe6 <__gesf2+0x2e>
 800101a:	e7e6      	b.n	8000fea <__gesf2+0x32>
 800101c:	2000      	movs	r0, #0
 800101e:	2d00      	cmp	r5, #0
 8001020:	d0e7      	beq.n	8000ff2 <__gesf2+0x3a>
 8001022:	e7e2      	b.n	8000fea <__gesf2+0x32>
 8001024:	42a2      	cmp	r2, r4
 8001026:	dc05      	bgt.n	8001034 <__gesf2+0x7c>
 8001028:	dbea      	blt.n	8001000 <__gesf2+0x48>
 800102a:	42b5      	cmp	r5, r6
 800102c:	d802      	bhi.n	8001034 <__gesf2+0x7c>
 800102e:	d3e7      	bcc.n	8001000 <__gesf2+0x48>
 8001030:	2000      	movs	r0, #0
 8001032:	e7de      	b.n	8000ff2 <__gesf2+0x3a>
 8001034:	4243      	negs	r3, r0
 8001036:	4158      	adcs	r0, r3
 8001038:	0040      	lsls	r0, r0, #1
 800103a:	3801      	subs	r0, #1
 800103c:	e7d9      	b.n	8000ff2 <__gesf2+0x3a>
 800103e:	2002      	movs	r0, #2
 8001040:	4240      	negs	r0, r0
 8001042:	e7d6      	b.n	8000ff2 <__gesf2+0x3a>

08001044 <__lesf2>:
 8001044:	b570      	push	{r4, r5, r6, lr}
 8001046:	0042      	lsls	r2, r0, #1
 8001048:	0245      	lsls	r5, r0, #9
 800104a:	024e      	lsls	r6, r1, #9
 800104c:	004c      	lsls	r4, r1, #1
 800104e:	0fc3      	lsrs	r3, r0, #31
 8001050:	0a6d      	lsrs	r5, r5, #9
 8001052:	0e12      	lsrs	r2, r2, #24
 8001054:	0a76      	lsrs	r6, r6, #9
 8001056:	0e24      	lsrs	r4, r4, #24
 8001058:	0fc8      	lsrs	r0, r1, #31
 800105a:	2aff      	cmp	r2, #255	; 0xff
 800105c:	d00b      	beq.n	8001076 <__lesf2+0x32>
 800105e:	2cff      	cmp	r4, #255	; 0xff
 8001060:	d00d      	beq.n	800107e <__lesf2+0x3a>
 8001062:	2a00      	cmp	r2, #0
 8001064:	d11f      	bne.n	80010a6 <__lesf2+0x62>
 8001066:	2c00      	cmp	r4, #0
 8001068:	d116      	bne.n	8001098 <__lesf2+0x54>
 800106a:	2e00      	cmp	r6, #0
 800106c:	d114      	bne.n	8001098 <__lesf2+0x54>
 800106e:	2000      	movs	r0, #0
 8001070:	2d00      	cmp	r5, #0
 8001072:	d010      	beq.n	8001096 <__lesf2+0x52>
 8001074:	e009      	b.n	800108a <__lesf2+0x46>
 8001076:	2d00      	cmp	r5, #0
 8001078:	d10c      	bne.n	8001094 <__lesf2+0x50>
 800107a:	2cff      	cmp	r4, #255	; 0xff
 800107c:	d113      	bne.n	80010a6 <__lesf2+0x62>
 800107e:	2e00      	cmp	r6, #0
 8001080:	d108      	bne.n	8001094 <__lesf2+0x50>
 8001082:	2a00      	cmp	r2, #0
 8001084:	d008      	beq.n	8001098 <__lesf2+0x54>
 8001086:	4283      	cmp	r3, r0
 8001088:	d012      	beq.n	80010b0 <__lesf2+0x6c>
 800108a:	2102      	movs	r1, #2
 800108c:	1e58      	subs	r0, r3, #1
 800108e:	4008      	ands	r0, r1
 8001090:	3801      	subs	r0, #1
 8001092:	e000      	b.n	8001096 <__lesf2+0x52>
 8001094:	2002      	movs	r0, #2
 8001096:	bd70      	pop	{r4, r5, r6, pc}
 8001098:	2d00      	cmp	r5, #0
 800109a:	d1f4      	bne.n	8001086 <__lesf2+0x42>
 800109c:	2800      	cmp	r0, #0
 800109e:	d1fa      	bne.n	8001096 <__lesf2+0x52>
 80010a0:	2001      	movs	r0, #1
 80010a2:	4240      	negs	r0, r0
 80010a4:	e7f7      	b.n	8001096 <__lesf2+0x52>
 80010a6:	2c00      	cmp	r4, #0
 80010a8:	d1ed      	bne.n	8001086 <__lesf2+0x42>
 80010aa:	2e00      	cmp	r6, #0
 80010ac:	d1eb      	bne.n	8001086 <__lesf2+0x42>
 80010ae:	e7ec      	b.n	800108a <__lesf2+0x46>
 80010b0:	42a2      	cmp	r2, r4
 80010b2:	dc05      	bgt.n	80010c0 <__lesf2+0x7c>
 80010b4:	dbf2      	blt.n	800109c <__lesf2+0x58>
 80010b6:	42b5      	cmp	r5, r6
 80010b8:	d802      	bhi.n	80010c0 <__lesf2+0x7c>
 80010ba:	d3ef      	bcc.n	800109c <__lesf2+0x58>
 80010bc:	2000      	movs	r0, #0
 80010be:	e7ea      	b.n	8001096 <__lesf2+0x52>
 80010c0:	4243      	negs	r3, r0
 80010c2:	4158      	adcs	r0, r3
 80010c4:	0040      	lsls	r0, r0, #1
 80010c6:	3801      	subs	r0, #1
 80010c8:	e7e5      	b.n	8001096 <__lesf2+0x52>
 80010ca:	46c0      	nop			; (mov r8, r8)

080010cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010d2:	f001 fdc9 	bl	8002c68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d6:	f000 f8ef 	bl	80012b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010da:	f000 f9a1 	bl	8001420 <MX_GPIO_Init>
  MX_ADC1_Init();
 80010de:	f000 f933 	bl	8001348 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 80010e2:	4b70      	ldr	r3, [pc, #448]	; (80012a4 <main+0x1d8>)
 80010e4:	0018      	movs	r0, r3
 80010e6:	f002 f953 	bl	8003390 <HAL_ADC_Start_IT>
  /* USER CODE END 2 */
  HAL_Delay(3000);
 80010ea:	4b6f      	ldr	r3, [pc, #444]	; (80012a8 <main+0x1dc>)
 80010ec:	0018      	movs	r0, r3
 80010ee:	f001 fe41 	bl	8002d74 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  Barrido1(2,60,2500);
 80010f2:	4b6e      	ldr	r3, [pc, #440]	; (80012ac <main+0x1e0>)
 80010f4:	001a      	movs	r2, r3
 80010f6:	213c      	movs	r1, #60	; 0x3c
 80010f8:	2002      	movs	r0, #2
 80010fa:	f000 fba1 	bl	8001840 <Barrido1>
	  Blink(3,1500);
 80010fe:	4b6c      	ldr	r3, [pc, #432]	; (80012b0 <main+0x1e4>)
 8001100:	0019      	movs	r1, r3
 8001102:	2003      	movs	r0, #3
 8001104:	f001 fc52 	bl	80029ac <Blink>

	  for(uint8_t i=1;i<=cantLeds;i++){ControlLeds2(i+10,1);}//encender todo 2
 8001108:	1dfb      	adds	r3, r7, #7
 800110a:	2201      	movs	r2, #1
 800110c:	701a      	strb	r2, [r3, #0]
 800110e:	e00c      	b.n	800112a <main+0x5e>
 8001110:	1dfb      	adds	r3, r7, #7
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	330a      	adds	r3, #10
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2101      	movs	r1, #1
 800111a:	0018      	movs	r0, r3
 800111c:	f000 faec 	bl	80016f8 <ControlLeds2>
 8001120:	1dfb      	adds	r3, r7, #7
 8001122:	781a      	ldrb	r2, [r3, #0]
 8001124:	1dfb      	adds	r3, r7, #7
 8001126:	3201      	adds	r2, #1
 8001128:	701a      	strb	r2, [r3, #0]
 800112a:	4b62      	ldr	r3, [pc, #392]	; (80012b4 <main+0x1e8>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	1dfa      	adds	r2, r7, #7
 8001130:	7812      	ldrb	r2, [r2, #0]
 8001132:	429a      	cmp	r2, r3
 8001134:	d9ec      	bls.n	8001110 <main+0x44>
	  ArmarIzquierda(1,30,2000);
 8001136:	23fa      	movs	r3, #250	; 0xfa
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	001a      	movs	r2, r3
 800113c:	211e      	movs	r1, #30
 800113e:	2001      	movs	r0, #1
 8001140:	f001 fa68 	bl	8002614 <ArmarIzquierda>
	  for(uint8_t i=1;i<=cantLeds;i++){ControlLeds(i,1);}//encender todo 1
 8001144:	1dbb      	adds	r3, r7, #6
 8001146:	2201      	movs	r2, #1
 8001148:	701a      	strb	r2, [r3, #0]
 800114a:	e00a      	b.n	8001162 <main+0x96>
 800114c:	1dbb      	adds	r3, r7, #6
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2101      	movs	r1, #1
 8001152:	0018      	movs	r0, r3
 8001154:	f000 fa58 	bl	8001608 <ControlLeds>
 8001158:	1dbb      	adds	r3, r7, #6
 800115a:	781a      	ldrb	r2, [r3, #0]
 800115c:	1dbb      	adds	r3, r7, #6
 800115e:	3201      	adds	r2, #1
 8001160:	701a      	strb	r2, [r3, #0]
 8001162:	4b54      	ldr	r3, [pc, #336]	; (80012b4 <main+0x1e8>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	1dba      	adds	r2, r7, #6
 8001168:	7812      	ldrb	r2, [r2, #0]
 800116a:	429a      	cmp	r2, r3
 800116c:	d9ee      	bls.n	800114c <main+0x80>
	  ArmarIzquierda2(1,30,2000);
 800116e:	23fa      	movs	r3, #250	; 0xfa
 8001170:	00db      	lsls	r3, r3, #3
 8001172:	001a      	movs	r2, r3
 8001174:	211e      	movs	r1, #30
 8001176:	2001      	movs	r0, #1
 8001178:	f001 fb32 	bl	80027e0 <ArmarIzquierda2>

	  Blink(2,1500);
 800117c:	4b4c      	ldr	r3, [pc, #304]	; (80012b0 <main+0x1e4>)
 800117e:	0019      	movs	r1, r3
 8001180:	2002      	movs	r0, #2
 8001182:	f001 fc13 	bl	80029ac <Blink>
	  Girar(2,100);
 8001186:	2164      	movs	r1, #100	; 0x64
 8001188:	2002      	movs	r0, #2
 800118a:	f001 f863 	bl	8002254 <Girar>
	  Blink(4,2000);
 800118e:	23fa      	movs	r3, #250	; 0xfa
 8001190:	00db      	lsls	r3, r3, #3
 8001192:	0019      	movs	r1, r3
 8001194:	2004      	movs	r0, #4
 8001196:	f001 fc09 	bl	80029ac <Blink>

	  for(uint8_t i=1;i<=cantLeds;i++){ControlLeds2(i+10,1);}//encender todo 2
 800119a:	1d7b      	adds	r3, r7, #5
 800119c:	2201      	movs	r2, #1
 800119e:	701a      	strb	r2, [r3, #0]
 80011a0:	e00c      	b.n	80011bc <main+0xf0>
 80011a2:	1d7b      	adds	r3, r7, #5
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	330a      	adds	r3, #10
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2101      	movs	r1, #1
 80011ac:	0018      	movs	r0, r3
 80011ae:	f000 faa3 	bl	80016f8 <ControlLeds2>
 80011b2:	1d7b      	adds	r3, r7, #5
 80011b4:	781a      	ldrb	r2, [r3, #0]
 80011b6:	1d7b      	adds	r3, r7, #5
 80011b8:	3201      	adds	r2, #1
 80011ba:	701a      	strb	r2, [r3, #0]
 80011bc:	4b3d      	ldr	r3, [pc, #244]	; (80012b4 <main+0x1e8>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	1d7a      	adds	r2, r7, #5
 80011c2:	7812      	ldrb	r2, [r2, #0]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d9ec      	bls.n	80011a2 <main+0xd6>
	  VolumenAbrir(1,30,2500);
 80011c8:	4b38      	ldr	r3, [pc, #224]	; (80012ac <main+0x1e0>)
 80011ca:	001a      	movs	r2, r3
 80011cc:	211e      	movs	r1, #30
 80011ce:	2001      	movs	r0, #1
 80011d0:	f001 f890 	bl	80022f4 <VolumenAbrir>
	  for(uint8_t i=1;i<=cantLeds;i++){ControlLeds(i,1);}//encender todo 1
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	2201      	movs	r2, #1
 80011d8:	701a      	strb	r2, [r3, #0]
 80011da:	e00a      	b.n	80011f2 <main+0x126>
 80011dc:	1d3b      	adds	r3, r7, #4
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2101      	movs	r1, #1
 80011e2:	0018      	movs	r0, r3
 80011e4:	f000 fa10 	bl	8001608 <ControlLeds>
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	781a      	ldrb	r2, [r3, #0]
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	3201      	adds	r2, #1
 80011f0:	701a      	strb	r2, [r3, #0]
 80011f2:	4b30      	ldr	r3, [pc, #192]	; (80012b4 <main+0x1e8>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	1d3a      	adds	r2, r7, #4
 80011f8:	7812      	ldrb	r2, [r2, #0]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d9ee      	bls.n	80011dc <main+0x110>
	  VolumenAbrir2(1,30,2500);
 80011fe:	4b2b      	ldr	r3, [pc, #172]	; (80012ac <main+0x1e0>)
 8001200:	001a      	movs	r2, r3
 8001202:	211e      	movs	r1, #30
 8001204:	2001      	movs	r0, #1
 8001206:	f001 f93d 	bl	8002484 <VolumenAbrir2>

	  CerrarApagar(3,150,2000);
 800120a:	23fa      	movs	r3, #250	; 0xfa
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	001a      	movs	r2, r3
 8001210:	2196      	movs	r1, #150	; 0x96
 8001212:	2003      	movs	r0, #3
 8001214:	f000 fe62 	bl	8001edc <CerrarApagar>
	  Blink(3,1500);
 8001218:	4b25      	ldr	r3, [pc, #148]	; (80012b0 <main+0x1e4>)
 800121a:	0019      	movs	r1, r3
 800121c:	2003      	movs	r0, #3
 800121e:	f001 fbc5 	bl	80029ac <Blink>

	  for(uint8_t i=1;i<=cantLeds;i++){ControlLeds2(i+10,1);}//encender todo 2
 8001222:	1cfb      	adds	r3, r7, #3
 8001224:	2201      	movs	r2, #1
 8001226:	701a      	strb	r2, [r3, #0]
 8001228:	e00c      	b.n	8001244 <main+0x178>
 800122a:	1cfb      	adds	r3, r7, #3
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	330a      	adds	r3, #10
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2101      	movs	r1, #1
 8001234:	0018      	movs	r0, r3
 8001236:	f000 fa5f 	bl	80016f8 <ControlLeds2>
 800123a:	1cfb      	adds	r3, r7, #3
 800123c:	781a      	ldrb	r2, [r3, #0]
 800123e:	1cfb      	adds	r3, r7, #3
 8001240:	3201      	adds	r2, #1
 8001242:	701a      	strb	r2, [r3, #0]
 8001244:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <main+0x1e8>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	1cfa      	adds	r2, r7, #3
 800124a:	7812      	ldrb	r2, [r2, #0]
 800124c:	429a      	cmp	r2, r3
 800124e:	d9ec      	bls.n	800122a <main+0x15e>
	  ArmarIzquierda(1,30,2000);
 8001250:	23fa      	movs	r3, #250	; 0xfa
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	001a      	movs	r2, r3
 8001256:	211e      	movs	r1, #30
 8001258:	2001      	movs	r0, #1
 800125a:	f001 f9db 	bl	8002614 <ArmarIzquierda>
	  for(uint8_t i=1;i<=cantLeds;i++){ControlLeds(i,1);}//encender todo 1
 800125e:	1cbb      	adds	r3, r7, #2
 8001260:	2201      	movs	r2, #1
 8001262:	701a      	strb	r2, [r3, #0]
 8001264:	e00a      	b.n	800127c <main+0x1b0>
 8001266:	1cbb      	adds	r3, r7, #2
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2101      	movs	r1, #1
 800126c:	0018      	movs	r0, r3
 800126e:	f000 f9cb 	bl	8001608 <ControlLeds>
 8001272:	1cbb      	adds	r3, r7, #2
 8001274:	781a      	ldrb	r2, [r3, #0]
 8001276:	1cbb      	adds	r3, r7, #2
 8001278:	3201      	adds	r2, #1
 800127a:	701a      	strb	r2, [r3, #0]
 800127c:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <main+0x1e8>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	1cba      	adds	r2, r7, #2
 8001282:	7812      	ldrb	r2, [r2, #0]
 8001284:	429a      	cmp	r2, r3
 8001286:	d9ee      	bls.n	8001266 <main+0x19a>
	  ArmarIzquierda2(1,30,2000);
 8001288:	23fa      	movs	r3, #250	; 0xfa
 800128a:	00db      	lsls	r3, r3, #3
 800128c:	001a      	movs	r2, r3
 800128e:	211e      	movs	r1, #30
 8001290:	2001      	movs	r0, #1
 8001292:	f001 faa5 	bl	80027e0 <ArmarIzquierda2>

	  Blink(2,1500);
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <main+0x1e4>)
 8001298:	0019      	movs	r1, r3
 800129a:	2002      	movs	r0, #2
 800129c:	f001 fb86 	bl	80029ac <Blink>
	  Barrido1(2,60,2500);
 80012a0:	e727      	b.n	80010f2 <main+0x26>
 80012a2:	46c0      	nop			; (mov r8, r8)
 80012a4:	2000002c 	.word	0x2000002c
 80012a8:	00000bb8 	.word	0x00000bb8
 80012ac:	000009c4 	.word	0x000009c4
 80012b0:	000005dc 	.word	0x000005dc
 80012b4:	20000000 	.word	0x20000000

080012b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012b8:	b590      	push	{r4, r7, lr}
 80012ba:	b093      	sub	sp, #76	; 0x4c
 80012bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012be:	2414      	movs	r4, #20
 80012c0:	193b      	adds	r3, r7, r4
 80012c2:	0018      	movs	r0, r3
 80012c4:	2334      	movs	r3, #52	; 0x34
 80012c6:	001a      	movs	r2, r3
 80012c8:	2100      	movs	r1, #0
 80012ca:	f003 fbe9 	bl	8004aa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	0018      	movs	r0, r3
 80012d2:	2310      	movs	r3, #16
 80012d4:	001a      	movs	r2, r3
 80012d6:	2100      	movs	r1, #0
 80012d8:	f003 fbe2 	bl	8004aa0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012dc:	2380      	movs	r3, #128	; 0x80
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	0018      	movs	r0, r3
 80012e2:	f002 fedf 	bl	80040a4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012e6:	193b      	adds	r3, r7, r4
 80012e8:	2202      	movs	r2, #2
 80012ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012ec:	193b      	adds	r3, r7, r4
 80012ee:	2280      	movs	r2, #128	; 0x80
 80012f0:	0052      	lsls	r2, r2, #1
 80012f2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80012f4:	193b      	adds	r3, r7, r4
 80012f6:	2200      	movs	r2, #0
 80012f8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012fa:	193b      	adds	r3, r7, r4
 80012fc:	2240      	movs	r2, #64	; 0x40
 80012fe:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001300:	193b      	adds	r3, r7, r4
 8001302:	2200      	movs	r2, #0
 8001304:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001306:	193b      	adds	r3, r7, r4
 8001308:	0018      	movs	r0, r3
 800130a:	f002 ff0b 	bl	8004124 <HAL_RCC_OscConfig>
 800130e:	1e03      	subs	r3, r0, #0
 8001310:	d001      	beq.n	8001316 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001312:	f001 fbdf 	bl	8002ad4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	2207      	movs	r2, #7
 800131a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	2200      	movs	r2, #0
 8001320:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	2200      	movs	r2, #0
 800132c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	2100      	movs	r1, #0
 8001332:	0018      	movs	r0, r3
 8001334:	f003 fa06 	bl	8004744 <HAL_RCC_ClockConfig>
 8001338:	1e03      	subs	r3, r0, #0
 800133a:	d001      	beq.n	8001340 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800133c:	f001 fbca 	bl	8002ad4 <Error_Handler>
  }
}
 8001340:	46c0      	nop			; (mov r8, r8)
 8001342:	46bd      	mov	sp, r7
 8001344:	b013      	add	sp, #76	; 0x4c
 8001346:	bd90      	pop	{r4, r7, pc}

08001348 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800134e:	1d3b      	adds	r3, r7, #4
 8001350:	0018      	movs	r0, r3
 8001352:	230c      	movs	r3, #12
 8001354:	001a      	movs	r2, r3
 8001356:	2100      	movs	r1, #0
 8001358:	f003 fba2 	bl	8004aa0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800135c:	4b2d      	ldr	r3, [pc, #180]	; (8001414 <MX_ADC1_Init+0xcc>)
 800135e:	4a2e      	ldr	r2, [pc, #184]	; (8001418 <MX_ADC1_Init+0xd0>)
 8001360:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001362:	4b2c      	ldr	r3, [pc, #176]	; (8001414 <MX_ADC1_Init+0xcc>)
 8001364:	2280      	movs	r2, #128	; 0x80
 8001366:	05d2      	lsls	r2, r2, #23
 8001368:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800136a:	4b2a      	ldr	r3, [pc, #168]	; (8001414 <MX_ADC1_Init+0xcc>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001370:	4b28      	ldr	r3, [pc, #160]	; (8001414 <MX_ADC1_Init+0xcc>)
 8001372:	2200      	movs	r2, #0
 8001374:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001376:	4b27      	ldr	r3, [pc, #156]	; (8001414 <MX_ADC1_Init+0xcc>)
 8001378:	2200      	movs	r2, #0
 800137a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800137c:	4b25      	ldr	r3, [pc, #148]	; (8001414 <MX_ADC1_Init+0xcc>)
 800137e:	2204      	movs	r2, #4
 8001380:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001382:	4b24      	ldr	r3, [pc, #144]	; (8001414 <MX_ADC1_Init+0xcc>)
 8001384:	2200      	movs	r2, #0
 8001386:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001388:	4b22      	ldr	r3, [pc, #136]	; (8001414 <MX_ADC1_Init+0xcc>)
 800138a:	2200      	movs	r2, #0
 800138c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800138e:	4b21      	ldr	r3, [pc, #132]	; (8001414 <MX_ADC1_Init+0xcc>)
 8001390:	2200      	movs	r2, #0
 8001392:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8001394:	4b1f      	ldr	r3, [pc, #124]	; (8001414 <MX_ADC1_Init+0xcc>)
 8001396:	2201      	movs	r2, #1
 8001398:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800139a:	4b1e      	ldr	r3, [pc, #120]	; (8001414 <MX_ADC1_Init+0xcc>)
 800139c:	2220      	movs	r2, #32
 800139e:	2100      	movs	r1, #0
 80013a0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013a2:	4b1c      	ldr	r3, [pc, #112]	; (8001414 <MX_ADC1_Init+0xcc>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013a8:	4b1a      	ldr	r3, [pc, #104]	; (8001414 <MX_ADC1_Init+0xcc>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013ae:	4b19      	ldr	r3, [pc, #100]	; (8001414 <MX_ADC1_Init+0xcc>)
 80013b0:	222c      	movs	r2, #44	; 0x2c
 80013b2:	2100      	movs	r1, #0
 80013b4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80013b6:	4b17      	ldr	r3, [pc, #92]	; (8001414 <MX_ADC1_Init+0xcc>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80013bc:	4b15      	ldr	r3, [pc, #84]	; (8001414 <MX_ADC1_Init+0xcc>)
 80013be:	2207      	movs	r2, #7
 80013c0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 80013c2:	4b14      	ldr	r3, [pc, #80]	; (8001414 <MX_ADC1_Init+0xcc>)
 80013c4:	2207      	movs	r2, #7
 80013c6:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80013c8:	4b12      	ldr	r3, [pc, #72]	; (8001414 <MX_ADC1_Init+0xcc>)
 80013ca:	223c      	movs	r2, #60	; 0x3c
 80013cc:	2100      	movs	r1, #0
 80013ce:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80013d0:	4b10      	ldr	r3, [pc, #64]	; (8001414 <MX_ADC1_Init+0xcc>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013d6:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <MX_ADC1_Init+0xcc>)
 80013d8:	0018      	movs	r0, r3
 80013da:	f001 fe31 	bl	8003040 <HAL_ADC_Init>
 80013de:	1e03      	subs	r3, r0, #0
 80013e0:	d001      	beq.n	80013e6 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80013e2:	f001 fb77 	bl	8002ad4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	4a0c      	ldr	r2, [pc, #48]	; (800141c <MX_ADC1_Init+0xd4>)
 80013ea:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	2200      	movs	r2, #0
 80013f0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80013f2:	1d3b      	adds	r3, r7, #4
 80013f4:	2200      	movs	r2, #0
 80013f6:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013f8:	1d3a      	adds	r2, r7, #4
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <MX_ADC1_Init+0xcc>)
 80013fc:	0011      	movs	r1, r2
 80013fe:	0018      	movs	r0, r3
 8001400:	f002 f972 	bl	80036e8 <HAL_ADC_ConfigChannel>
 8001404:	1e03      	subs	r3, r0, #0
 8001406:	d001      	beq.n	800140c <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8001408:	f001 fb64 	bl	8002ad4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800140c:	46c0      	nop			; (mov r8, r8)
 800140e:	46bd      	mov	sp, r7
 8001410:	b004      	add	sp, #16
 8001412:	bd80      	pop	{r7, pc}
 8001414:	2000002c 	.word	0x2000002c
 8001418:	40012400 	.word	0x40012400
 800141c:	2c000800 	.word	0x2c000800

08001420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001420:	b590      	push	{r4, r7, lr}
 8001422:	b089      	sub	sp, #36	; 0x24
 8001424:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001426:	240c      	movs	r4, #12
 8001428:	193b      	adds	r3, r7, r4
 800142a:	0018      	movs	r0, r3
 800142c:	2314      	movs	r3, #20
 800142e:	001a      	movs	r2, r3
 8001430:	2100      	movs	r1, #0
 8001432:	f003 fb35 	bl	8004aa0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001436:	4b43      	ldr	r3, [pc, #268]	; (8001544 <MX_GPIO_Init+0x124>)
 8001438:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800143a:	4b42      	ldr	r3, [pc, #264]	; (8001544 <MX_GPIO_Init+0x124>)
 800143c:	2102      	movs	r1, #2
 800143e:	430a      	orrs	r2, r1
 8001440:	635a      	str	r2, [r3, #52]	; 0x34
 8001442:	4b40      	ldr	r3, [pc, #256]	; (8001544 <MX_GPIO_Init+0x124>)
 8001444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001446:	2202      	movs	r2, #2
 8001448:	4013      	ands	r3, r2
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800144e:	4b3d      	ldr	r3, [pc, #244]	; (8001544 <MX_GPIO_Init+0x124>)
 8001450:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001452:	4b3c      	ldr	r3, [pc, #240]	; (8001544 <MX_GPIO_Init+0x124>)
 8001454:	2104      	movs	r1, #4
 8001456:	430a      	orrs	r2, r1
 8001458:	635a      	str	r2, [r3, #52]	; 0x34
 800145a:	4b3a      	ldr	r3, [pc, #232]	; (8001544 <MX_GPIO_Init+0x124>)
 800145c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800145e:	2204      	movs	r2, #4
 8001460:	4013      	ands	r3, r2
 8001462:	607b      	str	r3, [r7, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001466:	4b37      	ldr	r3, [pc, #220]	; (8001544 <MX_GPIO_Init+0x124>)
 8001468:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800146a:	4b36      	ldr	r3, [pc, #216]	; (8001544 <MX_GPIO_Init+0x124>)
 800146c:	2101      	movs	r1, #1
 800146e:	430a      	orrs	r2, r1
 8001470:	635a      	str	r2, [r3, #52]	; 0x34
 8001472:	4b34      	ldr	r3, [pc, #208]	; (8001544 <MX_GPIO_Init+0x124>)
 8001474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001476:	2201      	movs	r2, #1
 8001478:	4013      	ands	r3, r2
 800147a:	603b      	str	r3, [r7, #0]
 800147c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED12_Pin|LED13_Pin|LED14_Pin
 800147e:	4932      	ldr	r1, [pc, #200]	; (8001548 <MX_GPIO_Init+0x128>)
 8001480:	4b32      	ldr	r3, [pc, #200]	; (800154c <MX_GPIO_Init+0x12c>)
 8001482:	2200      	movs	r2, #0
 8001484:	0018      	movs	r0, r3
 8001486:	f002 fdef 	bl	8004068 <HAL_GPIO_WritePin>
                          |LED22_Pin|LED23_Pin|LED24_Pin|LED25_Pin
                          |ledBoard_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_Pin|LED3_Pin|LED17_Pin, GPIO_PIN_RESET);
 800148a:	4931      	ldr	r1, [pc, #196]	; (8001550 <MX_GPIO_Init+0x130>)
 800148c:	4b31      	ldr	r3, [pc, #196]	; (8001554 <MX_GPIO_Init+0x134>)
 800148e:	2200      	movs	r2, #0
 8001490:	0018      	movs	r0, r3
 8001492:	f002 fde9 	bl	8004068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin
 8001496:	4930      	ldr	r1, [pc, #192]	; (8001558 <MX_GPIO_Init+0x138>)
 8001498:	23a0      	movs	r3, #160	; 0xa0
 800149a:	05db      	lsls	r3, r3, #23
 800149c:	2200      	movs	r2, #0
 800149e:	0018      	movs	r0, r3
 80014a0:	f002 fde2 	bl	8004068 <HAL_GPIO_WritePin>
                          |LED15_Pin|LED16_Pin|LED18_Pin|LED19_Pin
                          |LED20_Pin|LED21_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED1_Pin LED12_Pin LED13_Pin LED14_Pin
                           LED22_Pin LED23_Pin LED24_Pin LED25_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED12_Pin|LED13_Pin|LED14_Pin
 80014a4:	193b      	adds	r3, r7, r4
 80014a6:	4a2d      	ldr	r2, [pc, #180]	; (800155c <MX_GPIO_Init+0x13c>)
 80014a8:	601a      	str	r2, [r3, #0]
                          |LED22_Pin|LED23_Pin|LED24_Pin|LED25_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80014aa:	193b      	adds	r3, r7, r4
 80014ac:	2211      	movs	r2, #17
 80014ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	193b      	adds	r3, r7, r4
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b6:	193b      	adds	r3, r7, r4
 80014b8:	2200      	movs	r2, #0
 80014ba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014bc:	193b      	adds	r3, r7, r4
 80014be:	4a23      	ldr	r2, [pc, #140]	; (800154c <MX_GPIO_Init+0x12c>)
 80014c0:	0019      	movs	r1, r3
 80014c2:	0010      	movs	r0, r2
 80014c4:	f002 fc6c 	bl	8003da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED3_Pin LED17_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin|LED17_Pin;
 80014c8:	193b      	adds	r3, r7, r4
 80014ca:	4a21      	ldr	r2, [pc, #132]	; (8001550 <MX_GPIO_Init+0x130>)
 80014cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80014ce:	193b      	adds	r3, r7, r4
 80014d0:	2211      	movs	r2, #17
 80014d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	193b      	adds	r3, r7, r4
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014da:	193b      	adds	r3, r7, r4
 80014dc:	2200      	movs	r2, #0
 80014de:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014e0:	193b      	adds	r3, r7, r4
 80014e2:	4a1c      	ldr	r2, [pc, #112]	; (8001554 <MX_GPIO_Init+0x134>)
 80014e4:	0019      	movs	r1, r3
 80014e6:	0010      	movs	r0, r2
 80014e8:	f002 fc5a 	bl	8003da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED5_Pin LED6_Pin LED7_Pin
                           LED8_Pin LED9_Pin LED10_Pin LED11_Pin
                           LED15_Pin LED16_Pin LED18_Pin LED19_Pin
                           LED20_Pin LED21_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin
 80014ec:	193b      	adds	r3, r7, r4
 80014ee:	4a1a      	ldr	r2, [pc, #104]	; (8001558 <MX_GPIO_Init+0x138>)
 80014f0:	601a      	str	r2, [r3, #0]
                          |LED8_Pin|LED9_Pin|LED10_Pin|LED11_Pin
                          |LED15_Pin|LED16_Pin|LED18_Pin|LED19_Pin
                          |LED20_Pin|LED21_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80014f2:	193b      	adds	r3, r7, r4
 80014f4:	2211      	movs	r2, #17
 80014f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	193b      	adds	r3, r7, r4
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	193b      	adds	r3, r7, r4
 8001500:	2200      	movs	r2, #0
 8001502:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001504:	193a      	adds	r2, r7, r4
 8001506:	23a0      	movs	r3, #160	; 0xa0
 8001508:	05db      	lsls	r3, r3, #23
 800150a:	0011      	movs	r1, r2
 800150c:	0018      	movs	r0, r3
 800150e:	f002 fc47 	bl	8003da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ledBoard_Pin */
  GPIO_InitStruct.Pin = ledBoard_Pin;
 8001512:	0021      	movs	r1, r4
 8001514:	187b      	adds	r3, r7, r1
 8001516:	2280      	movs	r2, #128	; 0x80
 8001518:	0052      	lsls	r2, r2, #1
 800151a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151c:	187b      	adds	r3, r7, r1
 800151e:	2201      	movs	r2, #1
 8001520:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	187b      	adds	r3, r7, r1
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001528:	187b      	adds	r3, r7, r1
 800152a:	2200      	movs	r2, #0
 800152c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ledBoard_GPIO_Port, &GPIO_InitStruct);
 800152e:	187b      	adds	r3, r7, r1
 8001530:	4a06      	ldr	r2, [pc, #24]	; (800154c <MX_GPIO_Init+0x12c>)
 8001532:	0019      	movs	r1, r3
 8001534:	0010      	movs	r0, r2
 8001536:	f002 fc33 	bl	8003da0 <HAL_GPIO_Init>

}
 800153a:	46c0      	nop			; (mov r8, r8)
 800153c:	46bd      	mov	sp, r7
 800153e:	b009      	add	sp, #36	; 0x24
 8001540:	bd90      	pop	{r4, r7, pc}
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	40021000 	.word	0x40021000
 8001548:	0000037f 	.word	0x0000037f
 800154c:	50000400 	.word	0x50000400
 8001550:	0000c040 	.word	0x0000c040
 8001554:	50000800 	.word	0x50000800
 8001558:	00009fff 	.word	0x00009fff
 800155c:	0000027f 	.word	0x0000027f

08001560 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
	adc = HAL_ADC_GetValue(&hadc1);
 8001568:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <HAL_ADC_ConvCpltCallback+0x44>)
 800156a:	0018      	movs	r0, r3
 800156c:	f001 ff88 	bl	8003480 <HAL_ADC_GetValue>
 8001570:	0003      	movs	r3, r0
 8001572:	b29a      	uxth	r2, r3
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <HAL_ADC_ConvCpltCallback+0x48>)
 8001576:	801a      	strh	r2, [r3, #0]
	vel = (float)adc/1023;
 8001578:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <HAL_ADC_ConvCpltCallback+0x48>)
 800157a:	881b      	ldrh	r3, [r3, #0]
 800157c:	0018      	movs	r0, r3
 800157e:	f7ff fc5b 	bl	8000e38 <__aeabi_ui2f>
 8001582:	1c03      	adds	r3, r0, #0
 8001584:	4909      	ldr	r1, [pc, #36]	; (80015ac <HAL_ADC_ConvCpltCallback+0x4c>)
 8001586:	1c18      	adds	r0, r3, #0
 8001588:	f7fe fffc 	bl	8000584 <__aeabi_fdiv>
 800158c:	1c03      	adds	r3, r0, #0
 800158e:	1c1a      	adds	r2, r3, #0
 8001590:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <HAL_ADC_ConvCpltCallback+0x50>)
 8001592:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_IT(&hadc1);
 8001594:	4b03      	ldr	r3, [pc, #12]	; (80015a4 <HAL_ADC_ConvCpltCallback+0x44>)
 8001596:	0018      	movs	r0, r3
 8001598:	f001 fefa 	bl	8003390 <HAL_ADC_Start_IT>
}
 800159c:	46c0      	nop			; (mov r8, r8)
 800159e:	46bd      	mov	sp, r7
 80015a0:	b002      	add	sp, #8
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	2000002c 	.word	0x2000002c
 80015a8:	20000090 	.word	0x20000090
 80015ac:	447fc000 	.word	0x447fc000
 80015b0:	20000094 	.word	0x20000094

080015b4 <Refresh_ADC_Value>:

float Refresh_ADC_Value(void){
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
	adc = HAL_ADC_GetValue(&hadc1);
 80015b8:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <Refresh_ADC_Value+0x44>)
 80015ba:	0018      	movs	r0, r3
 80015bc:	f001 ff60 	bl	8003480 <HAL_ADC_GetValue>
 80015c0:	0003      	movs	r3, r0
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	4b0d      	ldr	r3, [pc, #52]	; (80015fc <Refresh_ADC_Value+0x48>)
 80015c6:	801a      	strh	r2, [r3, #0]
	vel = (float)adc/1023;
 80015c8:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <Refresh_ADC_Value+0x48>)
 80015ca:	881b      	ldrh	r3, [r3, #0]
 80015cc:	0018      	movs	r0, r3
 80015ce:	f7ff fc33 	bl	8000e38 <__aeabi_ui2f>
 80015d2:	1c03      	adds	r3, r0, #0
 80015d4:	490a      	ldr	r1, [pc, #40]	; (8001600 <Refresh_ADC_Value+0x4c>)
 80015d6:	1c18      	adds	r0, r3, #0
 80015d8:	f7fe ffd4 	bl	8000584 <__aeabi_fdiv>
 80015dc:	1c03      	adds	r3, r0, #0
 80015de:	1c1a      	adds	r2, r3, #0
 80015e0:	4b08      	ldr	r3, [pc, #32]	; (8001604 <Refresh_ADC_Value+0x50>)
 80015e2:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_IT(&hadc1);
 80015e4:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <Refresh_ADC_Value+0x44>)
 80015e6:	0018      	movs	r0, r3
 80015e8:	f001 fed2 	bl	8003390 <HAL_ADC_Start_IT>
	return vel;
 80015ec:	4b05      	ldr	r3, [pc, #20]	; (8001604 <Refresh_ADC_Value+0x50>)
 80015ee:	681b      	ldr	r3, [r3, #0]
}
 80015f0:	1c18      	adds	r0, r3, #0
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	46c0      	nop			; (mov r8, r8)
 80015f8:	2000002c 	.word	0x2000002c
 80015fc:	20000090 	.word	0x20000090
 8001600:	447fc000 	.word	0x447fc000
 8001604:	20000094 	.word	0x20000094

08001608 <ControlLeds>:

void ControlLeds(uint8_t led, uint8_t state){
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	0002      	movs	r2, r0
 8001610:	1dfb      	adds	r3, r7, #7
 8001612:	701a      	strb	r2, [r3, #0]
 8001614:	1dbb      	adds	r3, r7, #6
 8001616:	1c0a      	adds	r2, r1, #0
 8001618:	701a      	strb	r2, [r3, #0]
	switch(led){
 800161a:	1dfb      	adds	r3, r7, #7
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b0a      	cmp	r3, #10
 8001620:	d85e      	bhi.n	80016e0 <ControlLeds+0xd8>
 8001622:	009a      	lsls	r2, r3, #2
 8001624:	4b31      	ldr	r3, [pc, #196]	; (80016ec <ControlLeds+0xe4>)
 8001626:	18d3      	adds	r3, r2, r3
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	469f      	mov	pc, r3
		case 1:  L1(state); break;
 800162c:	1dbb      	adds	r3, r7, #6
 800162e:	781a      	ldrb	r2, [r3, #0]
 8001630:	2380      	movs	r3, #128	; 0x80
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	482e      	ldr	r0, [pc, #184]	; (80016f0 <ControlLeds+0xe8>)
 8001636:	0019      	movs	r1, r3
 8001638:	f002 fd16 	bl	8004068 <HAL_GPIO_WritePin>
 800163c:	e051      	b.n	80016e2 <ControlLeds+0xda>
		case 2:  L2(state); break;
 800163e:	1dbb      	adds	r3, r7, #6
 8001640:	781a      	ldrb	r2, [r3, #0]
 8001642:	2380      	movs	r3, #128	; 0x80
 8001644:	01db      	lsls	r3, r3, #7
 8001646:	482b      	ldr	r0, [pc, #172]	; (80016f4 <ControlLeds+0xec>)
 8001648:	0019      	movs	r1, r3
 800164a:	f002 fd0d 	bl	8004068 <HAL_GPIO_WritePin>
 800164e:	e048      	b.n	80016e2 <ControlLeds+0xda>
		case 3:  L3(state); break;
 8001650:	1dbb      	adds	r3, r7, #6
 8001652:	781a      	ldrb	r2, [r3, #0]
 8001654:	2380      	movs	r3, #128	; 0x80
 8001656:	021b      	lsls	r3, r3, #8
 8001658:	4826      	ldr	r0, [pc, #152]	; (80016f4 <ControlLeds+0xec>)
 800165a:	0019      	movs	r1, r3
 800165c:	f002 fd04 	bl	8004068 <HAL_GPIO_WritePin>
 8001660:	e03f      	b.n	80016e2 <ControlLeds+0xda>
		case 4:  L4(state); break;
 8001662:	1dbb      	adds	r3, r7, #6
 8001664:	781a      	ldrb	r2, [r3, #0]
 8001666:	23a0      	movs	r3, #160	; 0xa0
 8001668:	05db      	lsls	r3, r3, #23
 800166a:	2101      	movs	r1, #1
 800166c:	0018      	movs	r0, r3
 800166e:	f002 fcfb 	bl	8004068 <HAL_GPIO_WritePin>
 8001672:	e036      	b.n	80016e2 <ControlLeds+0xda>
		case 5:  L5(state); break;
 8001674:	1dbb      	adds	r3, r7, #6
 8001676:	781a      	ldrb	r2, [r3, #0]
 8001678:	23a0      	movs	r3, #160	; 0xa0
 800167a:	05db      	lsls	r3, r3, #23
 800167c:	2102      	movs	r1, #2
 800167e:	0018      	movs	r0, r3
 8001680:	f002 fcf2 	bl	8004068 <HAL_GPIO_WritePin>
 8001684:	e02d      	b.n	80016e2 <ControlLeds+0xda>
		case 6:  L6(state); break;
 8001686:	1dbb      	adds	r3, r7, #6
 8001688:	781a      	ldrb	r2, [r3, #0]
 800168a:	23a0      	movs	r3, #160	; 0xa0
 800168c:	05db      	lsls	r3, r3, #23
 800168e:	2104      	movs	r1, #4
 8001690:	0018      	movs	r0, r3
 8001692:	f002 fce9 	bl	8004068 <HAL_GPIO_WritePin>
 8001696:	e024      	b.n	80016e2 <ControlLeds+0xda>
		case 7:  L7(state); break;
 8001698:	1dbb      	adds	r3, r7, #6
 800169a:	781a      	ldrb	r2, [r3, #0]
 800169c:	23a0      	movs	r3, #160	; 0xa0
 800169e:	05db      	lsls	r3, r3, #23
 80016a0:	2108      	movs	r1, #8
 80016a2:	0018      	movs	r0, r3
 80016a4:	f002 fce0 	bl	8004068 <HAL_GPIO_WritePin>
 80016a8:	e01b      	b.n	80016e2 <ControlLeds+0xda>
		case 8:  L8(state); break;
 80016aa:	1dbb      	adds	r3, r7, #6
 80016ac:	781a      	ldrb	r2, [r3, #0]
 80016ae:	23a0      	movs	r3, #160	; 0xa0
 80016b0:	05db      	lsls	r3, r3, #23
 80016b2:	2110      	movs	r1, #16
 80016b4:	0018      	movs	r0, r3
 80016b6:	f002 fcd7 	bl	8004068 <HAL_GPIO_WritePin>
 80016ba:	e012      	b.n	80016e2 <ControlLeds+0xda>
		case 9:  L9(state); break;
 80016bc:	1dbb      	adds	r3, r7, #6
 80016be:	781a      	ldrb	r2, [r3, #0]
 80016c0:	23a0      	movs	r3, #160	; 0xa0
 80016c2:	05db      	lsls	r3, r3, #23
 80016c4:	2120      	movs	r1, #32
 80016c6:	0018      	movs	r0, r3
 80016c8:	f002 fcce 	bl	8004068 <HAL_GPIO_WritePin>
 80016cc:	e009      	b.n	80016e2 <ControlLeds+0xda>
		case 10: L10(state);break;
 80016ce:	1dbb      	adds	r3, r7, #6
 80016d0:	781a      	ldrb	r2, [r3, #0]
 80016d2:	23a0      	movs	r3, #160	; 0xa0
 80016d4:	05db      	lsls	r3, r3, #23
 80016d6:	2140      	movs	r1, #64	; 0x40
 80016d8:	0018      	movs	r0, r3
 80016da:	f002 fcc5 	bl	8004068 <HAL_GPIO_WritePin>
 80016de:	e000      	b.n	80016e2 <ControlLeds+0xda>
		default:break;
 80016e0:	46c0      	nop			; (mov r8, r8)
	}
}
 80016e2:	46c0      	nop			; (mov r8, r8)
 80016e4:	46bd      	mov	sp, r7
 80016e6:	b002      	add	sp, #8
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	46c0      	nop			; (mov r8, r8)
 80016ec:	08004b88 	.word	0x08004b88
 80016f0:	50000400 	.word	0x50000400
 80016f4:	50000800 	.word	0x50000800

080016f8 <ControlLeds2>:

void ControlLeds2(uint8_t led, uint8_t state){
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	0002      	movs	r2, r0
 8001700:	1dfb      	adds	r3, r7, #7
 8001702:	701a      	strb	r2, [r3, #0]
 8001704:	1dbb      	adds	r3, r7, #6
 8001706:	1c0a      	adds	r2, r1, #0
 8001708:	701a      	strb	r2, [r3, #0]
	switch(led){
 800170a:	1dfb      	adds	r3, r7, #7
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	3b0b      	subs	r3, #11
 8001710:	2b0e      	cmp	r3, #14
 8001712:	d900      	bls.n	8001716 <ControlLeds2+0x1e>
 8001714:	e089      	b.n	800182a <ControlLeds2+0x132>
 8001716:	009a      	lsls	r2, r3, #2
 8001718:	4b46      	ldr	r3, [pc, #280]	; (8001834 <ControlLeds2+0x13c>)
 800171a:	18d3      	adds	r3, r2, r3
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	469f      	mov	pc, r3
		case 11: L11(state);break;
 8001720:	1dbb      	adds	r3, r7, #6
 8001722:	781a      	ldrb	r2, [r3, #0]
 8001724:	23a0      	movs	r3, #160	; 0xa0
 8001726:	05db      	lsls	r3, r3, #23
 8001728:	2180      	movs	r1, #128	; 0x80
 800172a:	0018      	movs	r0, r3
 800172c:	f002 fc9c 	bl	8004068 <HAL_GPIO_WritePin>
 8001730:	e07b      	b.n	800182a <ControlLeds2+0x132>
		case 12: L12(state);break;
 8001732:	1dbb      	adds	r3, r7, #6
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	4840      	ldr	r0, [pc, #256]	; (8001838 <ControlLeds2+0x140>)
 8001738:	001a      	movs	r2, r3
 800173a:	2101      	movs	r1, #1
 800173c:	f002 fc94 	bl	8004068 <HAL_GPIO_WritePin>
 8001740:	e073      	b.n	800182a <ControlLeds2+0x132>
		case 13: L13(state);break;
 8001742:	1dbb      	adds	r3, r7, #6
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	483c      	ldr	r0, [pc, #240]	; (8001838 <ControlLeds2+0x140>)
 8001748:	001a      	movs	r2, r3
 800174a:	2102      	movs	r1, #2
 800174c:	f002 fc8c 	bl	8004068 <HAL_GPIO_WritePin>
 8001750:	e06b      	b.n	800182a <ControlLeds2+0x132>
		case 14: L14(state);break;
 8001752:	1dbb      	adds	r3, r7, #6
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	4838      	ldr	r0, [pc, #224]	; (8001838 <ControlLeds2+0x140>)
 8001758:	001a      	movs	r2, r3
 800175a:	2104      	movs	r1, #4
 800175c:	f002 fc84 	bl	8004068 <HAL_GPIO_WritePin>
 8001760:	e063      	b.n	800182a <ControlLeds2+0x132>
		case 15: L15(state);break;
 8001762:	1dbb      	adds	r3, r7, #6
 8001764:	781a      	ldrb	r2, [r3, #0]
 8001766:	2380      	movs	r3, #128	; 0x80
 8001768:	0059      	lsls	r1, r3, #1
 800176a:	23a0      	movs	r3, #160	; 0xa0
 800176c:	05db      	lsls	r3, r3, #23
 800176e:	0018      	movs	r0, r3
 8001770:	f002 fc7a 	bl	8004068 <HAL_GPIO_WritePin>
 8001774:	e059      	b.n	800182a <ControlLeds2+0x132>
		case 16: L16(state);break;
 8001776:	1dbb      	adds	r3, r7, #6
 8001778:	781a      	ldrb	r2, [r3, #0]
 800177a:	2380      	movs	r3, #128	; 0x80
 800177c:	0099      	lsls	r1, r3, #2
 800177e:	23a0      	movs	r3, #160	; 0xa0
 8001780:	05db      	lsls	r3, r3, #23
 8001782:	0018      	movs	r0, r3
 8001784:	f002 fc70 	bl	8004068 <HAL_GPIO_WritePin>
 8001788:	e04f      	b.n	800182a <ControlLeds2+0x132>
		case 17: L17(state);break;
 800178a:	1dbb      	adds	r3, r7, #6
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	482b      	ldr	r0, [pc, #172]	; (800183c <ControlLeds2+0x144>)
 8001790:	001a      	movs	r2, r3
 8001792:	2140      	movs	r1, #64	; 0x40
 8001794:	f002 fc68 	bl	8004068 <HAL_GPIO_WritePin>
 8001798:	e047      	b.n	800182a <ControlLeds2+0x132>
		case 18: L18(state);break;
 800179a:	1dbb      	adds	r3, r7, #6
 800179c:	781a      	ldrb	r2, [r3, #0]
 800179e:	2380      	movs	r3, #128	; 0x80
 80017a0:	00d9      	lsls	r1, r3, #3
 80017a2:	23a0      	movs	r3, #160	; 0xa0
 80017a4:	05db      	lsls	r3, r3, #23
 80017a6:	0018      	movs	r0, r3
 80017a8:	f002 fc5e 	bl	8004068 <HAL_GPIO_WritePin>
 80017ac:	e03d      	b.n	800182a <ControlLeds2+0x132>
		case 19: L19(state);break;
 80017ae:	1dbb      	adds	r3, r7, #6
 80017b0:	781a      	ldrb	r2, [r3, #0]
 80017b2:	2380      	movs	r3, #128	; 0x80
 80017b4:	0119      	lsls	r1, r3, #4
 80017b6:	23a0      	movs	r3, #160	; 0xa0
 80017b8:	05db      	lsls	r3, r3, #23
 80017ba:	0018      	movs	r0, r3
 80017bc:	f002 fc54 	bl	8004068 <HAL_GPIO_WritePin>
 80017c0:	e033      	b.n	800182a <ControlLeds2+0x132>
		case 20: L20(state);break;
 80017c2:	1dbb      	adds	r3, r7, #6
 80017c4:	781a      	ldrb	r2, [r3, #0]
 80017c6:	2380      	movs	r3, #128	; 0x80
 80017c8:	0159      	lsls	r1, r3, #5
 80017ca:	23a0      	movs	r3, #160	; 0xa0
 80017cc:	05db      	lsls	r3, r3, #23
 80017ce:	0018      	movs	r0, r3
 80017d0:	f002 fc4a 	bl	8004068 <HAL_GPIO_WritePin>
 80017d4:	e029      	b.n	800182a <ControlLeds2+0x132>
		case 21: L21(state);break;
 80017d6:	1dbb      	adds	r3, r7, #6
 80017d8:	781a      	ldrb	r2, [r3, #0]
 80017da:	2380      	movs	r3, #128	; 0x80
 80017dc:	0219      	lsls	r1, r3, #8
 80017de:	23a0      	movs	r3, #160	; 0xa0
 80017e0:	05db      	lsls	r3, r3, #23
 80017e2:	0018      	movs	r0, r3
 80017e4:	f002 fc40 	bl	8004068 <HAL_GPIO_WritePin>
 80017e8:	e01f      	b.n	800182a <ControlLeds2+0x132>
		case 22: L22(state);break;
 80017ea:	1dbb      	adds	r3, r7, #6
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	4812      	ldr	r0, [pc, #72]	; (8001838 <ControlLeds2+0x140>)
 80017f0:	001a      	movs	r2, r3
 80017f2:	2108      	movs	r1, #8
 80017f4:	f002 fc38 	bl	8004068 <HAL_GPIO_WritePin>
 80017f8:	e017      	b.n	800182a <ControlLeds2+0x132>
		case 23: L23(state);break;
 80017fa:	1dbb      	adds	r3, r7, #6
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	480e      	ldr	r0, [pc, #56]	; (8001838 <ControlLeds2+0x140>)
 8001800:	001a      	movs	r2, r3
 8001802:	2110      	movs	r1, #16
 8001804:	f002 fc30 	bl	8004068 <HAL_GPIO_WritePin>
 8001808:	e00f      	b.n	800182a <ControlLeds2+0x132>
		case 24: L24(state);break;
 800180a:	1dbb      	adds	r3, r7, #6
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	480a      	ldr	r0, [pc, #40]	; (8001838 <ControlLeds2+0x140>)
 8001810:	001a      	movs	r2, r3
 8001812:	2120      	movs	r1, #32
 8001814:	f002 fc28 	bl	8004068 <HAL_GPIO_WritePin>
 8001818:	e007      	b.n	800182a <ControlLeds2+0x132>
		case 25: L25(state);break;
 800181a:	1dbb      	adds	r3, r7, #6
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	4806      	ldr	r0, [pc, #24]	; (8001838 <ControlLeds2+0x140>)
 8001820:	001a      	movs	r2, r3
 8001822:	2140      	movs	r1, #64	; 0x40
 8001824:	f002 fc20 	bl	8004068 <HAL_GPIO_WritePin>
 8001828:	46c0      	nop			; (mov r8, r8)
	}
}
 800182a:	46c0      	nop			; (mov r8, r8)
 800182c:	46bd      	mov	sp, r7
 800182e:	b002      	add	sp, #8
 8001830:	bd80      	pop	{r7, pc}
 8001832:	46c0      	nop			; (mov r8, r8)
 8001834:	08004bb4 	.word	0x08004bb4
 8001838:	50000400 	.word	0x50000400
 800183c:	50000800 	.word	0x50000800

08001840 <Barrido1>:

void Barrido1(uint8_t veces, uint16_t tiempo, uint16_t tiempo2){
 8001840:	b5b0      	push	{r4, r5, r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	0004      	movs	r4, r0
 8001848:	0008      	movs	r0, r1
 800184a:	0011      	movs	r1, r2
 800184c:	1dfb      	adds	r3, r7, #7
 800184e:	1c22      	adds	r2, r4, #0
 8001850:	701a      	strb	r2, [r3, #0]
 8001852:	1d3b      	adds	r3, r7, #4
 8001854:	1c02      	adds	r2, r0, #0
 8001856:	801a      	strh	r2, [r3, #0]
 8001858:	1cbb      	adds	r3, r7, #2
 800185a:	1c0a      	adds	r2, r1, #0
 800185c:	801a      	strh	r2, [r3, #0]
	for(uint8_t v=0;v<veces;v++){
 800185e:	230f      	movs	r3, #15
 8001860:	18fb      	adds	r3, r7, r3
 8001862:	2200      	movs	r2, #0
 8001864:	701a      	strb	r2, [r3, #0]
 8001866:	e084      	b.n	8001972 <Barrido1+0x132>
		for(uint8_t i=1; i<=cantLeds; i++){ControlLeds(i,1);ControlLeds2(i+10,1);HAL_Delay(tiempo*Refresh_ADC_Value());}
 8001868:	230e      	movs	r3, #14
 800186a:	18fb      	adds	r3, r7, r3
 800186c:	2201      	movs	r2, #1
 800186e:	701a      	strb	r2, [r3, #0]
 8001870:	e028      	b.n	80018c4 <Barrido1+0x84>
 8001872:	250e      	movs	r5, #14
 8001874:	197b      	adds	r3, r7, r5
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2101      	movs	r1, #1
 800187a:	0018      	movs	r0, r3
 800187c:	f7ff fec4 	bl	8001608 <ControlLeds>
 8001880:	197b      	adds	r3, r7, r5
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	330a      	adds	r3, #10
 8001886:	b2db      	uxtb	r3, r3
 8001888:	2101      	movs	r1, #1
 800188a:	0018      	movs	r0, r3
 800188c:	f7ff ff34 	bl	80016f8 <ControlLeds2>
 8001890:	1d3b      	adds	r3, r7, #4
 8001892:	881b      	ldrh	r3, [r3, #0]
 8001894:	0018      	movs	r0, r3
 8001896:	f7ff fa81 	bl	8000d9c <__aeabi_i2f>
 800189a:	1c04      	adds	r4, r0, #0
 800189c:	f7ff fe8a 	bl	80015b4 <Refresh_ADC_Value>
 80018a0:	1c03      	adds	r3, r0, #0
 80018a2:	1c19      	adds	r1, r3, #0
 80018a4:	1c20      	adds	r0, r4, #0
 80018a6:	f7fe ff85 	bl	80007b4 <__aeabi_fmul>
 80018aa:	1c03      	adds	r3, r0, #0
 80018ac:	1c18      	adds	r0, r3, #0
 80018ae:	f7fe fcb3 	bl	8000218 <__aeabi_f2uiz>
 80018b2:	0003      	movs	r3, r0
 80018b4:	0018      	movs	r0, r3
 80018b6:	f001 fa5d 	bl	8002d74 <HAL_Delay>
 80018ba:	197b      	adds	r3, r7, r5
 80018bc:	781a      	ldrb	r2, [r3, #0]
 80018be:	197b      	adds	r3, r7, r5
 80018c0:	3201      	adds	r2, #1
 80018c2:	701a      	strb	r2, [r3, #0]
 80018c4:	4b31      	ldr	r3, [pc, #196]	; (800198c <Barrido1+0x14c>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	220e      	movs	r2, #14
 80018ca:	18ba      	adds	r2, r7, r2
 80018cc:	7812      	ldrb	r2, [r2, #0]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d9cf      	bls.n	8001872 <Barrido1+0x32>
		HAL_Delay(tiempo2*Refresh_ADC_Value());
 80018d2:	1cbb      	adds	r3, r7, #2
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	0018      	movs	r0, r3
 80018d8:	f7ff fa60 	bl	8000d9c <__aeabi_i2f>
 80018dc:	1c04      	adds	r4, r0, #0
 80018de:	f7ff fe69 	bl	80015b4 <Refresh_ADC_Value>
 80018e2:	1c03      	adds	r3, r0, #0
 80018e4:	1c19      	adds	r1, r3, #0
 80018e6:	1c20      	adds	r0, r4, #0
 80018e8:	f7fe ff64 	bl	80007b4 <__aeabi_fmul>
 80018ec:	1c03      	adds	r3, r0, #0
 80018ee:	1c18      	adds	r0, r3, #0
 80018f0:	f7fe fc92 	bl	8000218 <__aeabi_f2uiz>
 80018f4:	0003      	movs	r3, r0
 80018f6:	0018      	movs	r0, r3
 80018f8:	f001 fa3c 	bl	8002d74 <HAL_Delay>
		for(uint8_t i=1; i<=cantLeds; i++){ControlLeds(i,0);ControlLeds2(i+10,0);HAL_Delay(tiempo*Refresh_ADC_Value());}
 80018fc:	230d      	movs	r3, #13
 80018fe:	18fb      	adds	r3, r7, r3
 8001900:	2201      	movs	r2, #1
 8001902:	701a      	strb	r2, [r3, #0]
 8001904:	e028      	b.n	8001958 <Barrido1+0x118>
 8001906:	250d      	movs	r5, #13
 8001908:	197b      	adds	r3, r7, r5
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2100      	movs	r1, #0
 800190e:	0018      	movs	r0, r3
 8001910:	f7ff fe7a 	bl	8001608 <ControlLeds>
 8001914:	197b      	adds	r3, r7, r5
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	330a      	adds	r3, #10
 800191a:	b2db      	uxtb	r3, r3
 800191c:	2100      	movs	r1, #0
 800191e:	0018      	movs	r0, r3
 8001920:	f7ff feea 	bl	80016f8 <ControlLeds2>
 8001924:	1d3b      	adds	r3, r7, #4
 8001926:	881b      	ldrh	r3, [r3, #0]
 8001928:	0018      	movs	r0, r3
 800192a:	f7ff fa37 	bl	8000d9c <__aeabi_i2f>
 800192e:	1c04      	adds	r4, r0, #0
 8001930:	f7ff fe40 	bl	80015b4 <Refresh_ADC_Value>
 8001934:	1c03      	adds	r3, r0, #0
 8001936:	1c19      	adds	r1, r3, #0
 8001938:	1c20      	adds	r0, r4, #0
 800193a:	f7fe ff3b 	bl	80007b4 <__aeabi_fmul>
 800193e:	1c03      	adds	r3, r0, #0
 8001940:	1c18      	adds	r0, r3, #0
 8001942:	f7fe fc69 	bl	8000218 <__aeabi_f2uiz>
 8001946:	0003      	movs	r3, r0
 8001948:	0018      	movs	r0, r3
 800194a:	f001 fa13 	bl	8002d74 <HAL_Delay>
 800194e:	197b      	adds	r3, r7, r5
 8001950:	781a      	ldrb	r2, [r3, #0]
 8001952:	197b      	adds	r3, r7, r5
 8001954:	3201      	adds	r2, #1
 8001956:	701a      	strb	r2, [r3, #0]
 8001958:	4b0c      	ldr	r3, [pc, #48]	; (800198c <Barrido1+0x14c>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	220d      	movs	r2, #13
 800195e:	18ba      	adds	r2, r7, r2
 8001960:	7812      	ldrb	r2, [r2, #0]
 8001962:	429a      	cmp	r2, r3
 8001964:	d9cf      	bls.n	8001906 <Barrido1+0xc6>
	for(uint8_t v=0;v<veces;v++){
 8001966:	210f      	movs	r1, #15
 8001968:	187b      	adds	r3, r7, r1
 800196a:	781a      	ldrb	r2, [r3, #0]
 800196c:	187b      	adds	r3, r7, r1
 800196e:	3201      	adds	r2, #1
 8001970:	701a      	strb	r2, [r3, #0]
 8001972:	230f      	movs	r3, #15
 8001974:	18fa      	adds	r2, r7, r3
 8001976:	1dfb      	adds	r3, r7, #7
 8001978:	7812      	ldrb	r2, [r2, #0]
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	429a      	cmp	r2, r3
 800197e:	d200      	bcs.n	8001982 <Barrido1+0x142>
 8001980:	e772      	b.n	8001868 <Barrido1+0x28>
	}
}
 8001982:	46c0      	nop			; (mov r8, r8)
 8001984:	46c0      	nop			; (mov r8, r8)
 8001986:	46bd      	mov	sp, r7
 8001988:	b004      	add	sp, #16
 800198a:	bdb0      	pop	{r4, r5, r7, pc}
 800198c:	20000000 	.word	0x20000000

08001990 <Encender_1_Led_2>:
			ControlLeds(i,0);
		}
	}
}

void Encender_1_Led_2(uint8_t num_led){
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	0002      	movs	r2, r0
 8001998:	1dfb      	adds	r3, r7, #7
 800199a:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=1; i<=cantLeds; i++){
 800199c:	230f      	movs	r3, #15
 800199e:	18fb      	adds	r3, r7, r3
 80019a0:	2201      	movs	r2, #1
 80019a2:	701a      	strb	r2, [r3, #0]
 80019a4:	e01a      	b.n	80019dc <Encender_1_Led_2+0x4c>
		if(i<=num_led){
 80019a6:	210f      	movs	r1, #15
 80019a8:	187a      	adds	r2, r7, r1
 80019aa:	1dfb      	adds	r3, r7, #7
 80019ac:	7812      	ldrb	r2, [r2, #0]
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d806      	bhi.n	80019c2 <Encender_1_Led_2+0x32>
			ControlLeds(i,1);
 80019b4:	187b      	adds	r3, r7, r1
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2101      	movs	r1, #1
 80019ba:	0018      	movs	r0, r3
 80019bc:	f7ff fe24 	bl	8001608 <ControlLeds>
 80019c0:	e006      	b.n	80019d0 <Encender_1_Led_2+0x40>
		}else{
			ControlLeds(i,0);
 80019c2:	230f      	movs	r3, #15
 80019c4:	18fb      	adds	r3, r7, r3
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2100      	movs	r1, #0
 80019ca:	0018      	movs	r0, r3
 80019cc:	f7ff fe1c 	bl	8001608 <ControlLeds>
	for(uint8_t i=1; i<=cantLeds; i++){
 80019d0:	210f      	movs	r1, #15
 80019d2:	187b      	adds	r3, r7, r1
 80019d4:	781a      	ldrb	r2, [r3, #0]
 80019d6:	187b      	adds	r3, r7, r1
 80019d8:	3201      	adds	r2, #1
 80019da:	701a      	strb	r2, [r3, #0]
 80019dc:	4b05      	ldr	r3, [pc, #20]	; (80019f4 <Encender_1_Led_2+0x64>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	220f      	movs	r2, #15
 80019e2:	18ba      	adds	r2, r7, r2
 80019e4:	7812      	ldrb	r2, [r2, #0]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d9dd      	bls.n	80019a6 <Encender_1_Led_2+0x16>
		}
	}
}
 80019ea:	46c0      	nop			; (mov r8, r8)
 80019ec:	46c0      	nop			; (mov r8, r8)
 80019ee:	46bd      	mov	sp, r7
 80019f0:	b004      	add	sp, #16
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20000000 	.word	0x20000000

080019f8 <Encender_1_Led_2_1>:

void Encender_1_Led_2_1(uint8_t num_led){
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	0002      	movs	r2, r0
 8001a00:	1dfb      	adds	r3, r7, #7
 8001a02:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=1; i<=cantLeds; i++){
 8001a04:	230f      	movs	r3, #15
 8001a06:	18fb      	adds	r3, r7, r3
 8001a08:	2201      	movs	r2, #1
 8001a0a:	701a      	strb	r2, [r3, #0]
 8001a0c:	e01e      	b.n	8001a4c <Encender_1_Led_2_1+0x54>
		if(i<=num_led){
 8001a0e:	210f      	movs	r1, #15
 8001a10:	187a      	adds	r2, r7, r1
 8001a12:	1dfb      	adds	r3, r7, #7
 8001a14:	7812      	ldrb	r2, [r2, #0]
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d808      	bhi.n	8001a2e <Encender_1_Led_2_1+0x36>
			ControlLeds2(i+10,1);
 8001a1c:	187b      	adds	r3, r7, r1
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	330a      	adds	r3, #10
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2101      	movs	r1, #1
 8001a26:	0018      	movs	r0, r3
 8001a28:	f7ff fe66 	bl	80016f8 <ControlLeds2>
 8001a2c:	e008      	b.n	8001a40 <Encender_1_Led_2_1+0x48>
		}else{
			ControlLeds2(i+10,0);
 8001a2e:	230f      	movs	r3, #15
 8001a30:	18fb      	adds	r3, r7, r3
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	330a      	adds	r3, #10
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	2100      	movs	r1, #0
 8001a3a:	0018      	movs	r0, r3
 8001a3c:	f7ff fe5c 	bl	80016f8 <ControlLeds2>
	for(uint8_t i=1; i<=cantLeds; i++){
 8001a40:	210f      	movs	r1, #15
 8001a42:	187b      	adds	r3, r7, r1
 8001a44:	781a      	ldrb	r2, [r3, #0]
 8001a46:	187b      	adds	r3, r7, r1
 8001a48:	3201      	adds	r2, #1
 8001a4a:	701a      	strb	r2, [r3, #0]
 8001a4c:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <Encender_1_Led_2_1+0x6c>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	220f      	movs	r2, #15
 8001a52:	18ba      	adds	r2, r7, r2
 8001a54:	7812      	ldrb	r2, [r2, #0]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d9d9      	bls.n	8001a0e <Encender_1_Led_2_1+0x16>
		}
	}
}
 8001a5a:	46c0      	nop			; (mov r8, r8)
 8001a5c:	46c0      	nop			; (mov r8, r8)
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	b004      	add	sp, #16
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20000000 	.word	0x20000000

08001a68 <Encender_1_Led_4>:
			ControlLeds(i,0);
		}
	}
}

void Encender_1_Led_4(uint8_t num_led, uint8_t indice){
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	0002      	movs	r2, r0
 8001a70:	1dfb      	adds	r3, r7, #7
 8001a72:	701a      	strb	r2, [r3, #0]
 8001a74:	1dbb      	adds	r3, r7, #6
 8001a76:	1c0a      	adds	r2, r1, #0
 8001a78:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=cantLeds;i>=indice;i--){
 8001a7a:	230f      	movs	r3, #15
 8001a7c:	18fb      	adds	r3, r7, r3
 8001a7e:	4a15      	ldr	r2, [pc, #84]	; (8001ad4 <Encender_1_Led_4+0x6c>)
 8001a80:	7812      	ldrb	r2, [r2, #0]
 8001a82:	701a      	strb	r2, [r3, #0]
 8001a84:	e01a      	b.n	8001abc <Encender_1_Led_4+0x54>
		if(i == num_led){
 8001a86:	210f      	movs	r1, #15
 8001a88:	187a      	adds	r2, r7, r1
 8001a8a:	1dfb      	adds	r3, r7, #7
 8001a8c:	7812      	ldrb	r2, [r2, #0]
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d106      	bne.n	8001aa2 <Encender_1_Led_4+0x3a>
			ControlLeds(i,1);
 8001a94:	187b      	adds	r3, r7, r1
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2101      	movs	r1, #1
 8001a9a:	0018      	movs	r0, r3
 8001a9c:	f7ff fdb4 	bl	8001608 <ControlLeds>
 8001aa0:	e006      	b.n	8001ab0 <Encender_1_Led_4+0x48>
		}else{
			ControlLeds(i,0);
 8001aa2:	230f      	movs	r3, #15
 8001aa4:	18fb      	adds	r3, r7, r3
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	0018      	movs	r0, r3
 8001aac:	f7ff fdac 	bl	8001608 <ControlLeds>
	for(uint8_t i=cantLeds;i>=indice;i--){
 8001ab0:	210f      	movs	r1, #15
 8001ab2:	187b      	adds	r3, r7, r1
 8001ab4:	781a      	ldrb	r2, [r3, #0]
 8001ab6:	187b      	adds	r3, r7, r1
 8001ab8:	3a01      	subs	r2, #1
 8001aba:	701a      	strb	r2, [r3, #0]
 8001abc:	230f      	movs	r3, #15
 8001abe:	18fa      	adds	r2, r7, r3
 8001ac0:	1dbb      	adds	r3, r7, #6
 8001ac2:	7812      	ldrb	r2, [r2, #0]
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d2dd      	bcs.n	8001a86 <Encender_1_Led_4+0x1e>
		}
	}
}
 8001aca:	46c0      	nop			; (mov r8, r8)
 8001acc:	46c0      	nop			; (mov r8, r8)
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	b004      	add	sp, #16
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	20000000 	.word	0x20000000

08001ad8 <Encender_1_Led_4_1>:

void Encender_1_Led_4_1(uint8_t num_led, uint8_t indice){
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	0002      	movs	r2, r0
 8001ae0:	1dfb      	adds	r3, r7, #7
 8001ae2:	701a      	strb	r2, [r3, #0]
 8001ae4:	1dbb      	adds	r3, r7, #6
 8001ae6:	1c0a      	adds	r2, r1, #0
 8001ae8:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=cantLeds;i>=indice;i--){
 8001aea:	230f      	movs	r3, #15
 8001aec:	18fb      	adds	r3, r7, r3
 8001aee:	4a17      	ldr	r2, [pc, #92]	; (8001b4c <Encender_1_Led_4_1+0x74>)
 8001af0:	7812      	ldrb	r2, [r2, #0]
 8001af2:	701a      	strb	r2, [r3, #0]
 8001af4:	e01e      	b.n	8001b34 <Encender_1_Led_4_1+0x5c>
		if(i == num_led){
 8001af6:	210f      	movs	r1, #15
 8001af8:	187a      	adds	r2, r7, r1
 8001afa:	1dfb      	adds	r3, r7, #7
 8001afc:	7812      	ldrb	r2, [r2, #0]
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d108      	bne.n	8001b16 <Encender_1_Led_4_1+0x3e>
			ControlLeds2(i+10,1);
 8001b04:	187b      	adds	r3, r7, r1
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	330a      	adds	r3, #10
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	0018      	movs	r0, r3
 8001b10:	f7ff fdf2 	bl	80016f8 <ControlLeds2>
 8001b14:	e008      	b.n	8001b28 <Encender_1_Led_4_1+0x50>
		}else{
			ControlLeds2(i+10,0);
 8001b16:	230f      	movs	r3, #15
 8001b18:	18fb      	adds	r3, r7, r3
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	330a      	adds	r3, #10
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	2100      	movs	r1, #0
 8001b22:	0018      	movs	r0, r3
 8001b24:	f7ff fde8 	bl	80016f8 <ControlLeds2>
	for(uint8_t i=cantLeds;i>=indice;i--){
 8001b28:	210f      	movs	r1, #15
 8001b2a:	187b      	adds	r3, r7, r1
 8001b2c:	781a      	ldrb	r2, [r3, #0]
 8001b2e:	187b      	adds	r3, r7, r1
 8001b30:	3a01      	subs	r2, #1
 8001b32:	701a      	strb	r2, [r3, #0]
 8001b34:	230f      	movs	r3, #15
 8001b36:	18fa      	adds	r2, r7, r3
 8001b38:	1dbb      	adds	r3, r7, #6
 8001b3a:	7812      	ldrb	r2, [r2, #0]
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d2d9      	bcs.n	8001af6 <Encender_1_Led_4_1+0x1e>
		}
	}
}
 8001b42:	46c0      	nop			; (mov r8, r8)
 8001b44:	46c0      	nop			; (mov r8, r8)
 8001b46:	46bd      	mov	sp, r7
 8001b48:	b004      	add	sp, #16
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20000000 	.word	0x20000000

08001b50 <AbrirApagar>:
			HAL_Delay(tiempo*Refresh_ADC_Value());
		}
	}
}

void AbrirApagar(uint8_t veces, uint16_t tiempo, uint16_t tiempo2){
 8001b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b52:	b087      	sub	sp, #28
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	0004      	movs	r4, r0
 8001b58:	0008      	movs	r0, r1
 8001b5a:	0011      	movs	r1, r2
 8001b5c:	1dfb      	adds	r3, r7, #7
 8001b5e:	1c22      	adds	r2, r4, #0
 8001b60:	701a      	strb	r2, [r3, #0]
 8001b62:	1d3b      	adds	r3, r7, #4
 8001b64:	1c02      	adds	r2, r0, #0
 8001b66:	801a      	strh	r2, [r3, #0]
 8001b68:	1cbb      	adds	r3, r7, #2
 8001b6a:	1c0a      	adds	r2, r1, #0
 8001b6c:	801a      	strh	r2, [r3, #0]

	for(uint8_t v=0;v<veces;v++){
 8001b6e:	2317      	movs	r3, #23
 8001b70:	18fb      	adds	r3, r7, r3
 8001b72:	2200      	movs	r2, #0
 8001b74:	701a      	strb	r2, [r3, #0]
 8001b76:	e1a0      	b.n	8001eba <AbrirApagar+0x36a>
		uint8_t centro,centro2,impar=1,par=0;
 8001b78:	2316      	movs	r3, #22
 8001b7a:	18fb      	adds	r3, r7, r3
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	701a      	strb	r2, [r3, #0]
 8001b80:	2315      	movs	r3, #21
 8001b82:	18fb      	adds	r3, r7, r3
 8001b84:	2200      	movs	r2, #0
 8001b86:	701a      	strb	r2, [r3, #0]
		if(cantLeds%2==0){//si es par
 8001b88:	4bd2      	ldr	r3, [pc, #840]	; (8001ed4 <AbrirApagar+0x384>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	4013      	ands	r3, r2
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d000      	beq.n	8001b98 <AbrirApagar+0x48>
 8001b96:	e098      	b.n	8001cca <AbrirApagar+0x17a>
			centro = cantLeds/2;
 8001b98:	4bce      	ldr	r3, [pc, #824]	; (8001ed4 <AbrirApagar+0x384>)
 8001b9a:	781a      	ldrb	r2, [r3, #0]
 8001b9c:	2110      	movs	r1, #16
 8001b9e:	187b      	adds	r3, r7, r1
 8001ba0:	0852      	lsrs	r2, r2, #1
 8001ba2:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=centro;i>=1;i--){
 8001ba4:	2314      	movs	r3, #20
 8001ba6:	18fb      	adds	r3, r7, r3
 8001ba8:	187a      	adds	r2, r7, r1
 8001baa:	7812      	ldrb	r2, [r2, #0]
 8001bac:	701a      	strb	r2, [r3, #0]
 8001bae:	e030      	b.n	8001c12 <AbrirApagar+0xc2>
				ControlLeds(i, 1);
 8001bb0:	2514      	movs	r5, #20
 8001bb2:	197b      	adds	r3, r7, r5
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	2101      	movs	r1, #1
 8001bb8:	0018      	movs	r0, r3
 8001bba:	f7ff fd25 	bl	8001608 <ControlLeds>
				ControlLeds(i+impar, 1);
 8001bbe:	197a      	adds	r2, r7, r5
 8001bc0:	2416      	movs	r4, #22
 8001bc2:	193b      	adds	r3, r7, r4
 8001bc4:	7812      	ldrb	r2, [r2, #0]
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	18d3      	adds	r3, r2, r3
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2101      	movs	r1, #1
 8001bce:	0018      	movs	r0, r3
 8001bd0:	f7ff fd1a 	bl	8001608 <ControlLeds>
				impar=impar+2;
 8001bd4:	193b      	adds	r3, r7, r4
 8001bd6:	193a      	adds	r2, r7, r4
 8001bd8:	7812      	ldrb	r2, [r2, #0]
 8001bda:	3202      	adds	r2, #2
 8001bdc:	701a      	strb	r2, [r3, #0]
				HAL_Delay(tiempo*Refresh_ADC_Value());
 8001bde:	1d3b      	adds	r3, r7, #4
 8001be0:	881b      	ldrh	r3, [r3, #0]
 8001be2:	0018      	movs	r0, r3
 8001be4:	f7ff f8da 	bl	8000d9c <__aeabi_i2f>
 8001be8:	1c04      	adds	r4, r0, #0
 8001bea:	f7ff fce3 	bl	80015b4 <Refresh_ADC_Value>
 8001bee:	1c03      	adds	r3, r0, #0
 8001bf0:	1c19      	adds	r1, r3, #0
 8001bf2:	1c20      	adds	r0, r4, #0
 8001bf4:	f7fe fdde 	bl	80007b4 <__aeabi_fmul>
 8001bf8:	1c03      	adds	r3, r0, #0
 8001bfa:	1c18      	adds	r0, r3, #0
 8001bfc:	f7fe fb0c 	bl	8000218 <__aeabi_f2uiz>
 8001c00:	0003      	movs	r3, r0
 8001c02:	0018      	movs	r0, r3
 8001c04:	f001 f8b6 	bl	8002d74 <HAL_Delay>
			for(uint8_t i=centro;i>=1;i--){
 8001c08:	197b      	adds	r3, r7, r5
 8001c0a:	781a      	ldrb	r2, [r3, #0]
 8001c0c:	197b      	adds	r3, r7, r5
 8001c0e:	3a01      	subs	r2, #1
 8001c10:	701a      	strb	r2, [r3, #0]
 8001c12:	2314      	movs	r3, #20
 8001c14:	18fb      	adds	r3, r7, r3
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1c9      	bne.n	8001bb0 <AbrirApagar+0x60>
			}

			impar=1;
 8001c1c:	2316      	movs	r3, #22
 8001c1e:	18fb      	adds	r3, r7, r3
 8001c20:	2201      	movs	r2, #1
 8001c22:	701a      	strb	r2, [r3, #0]
			HAL_Delay(tiempo2*Refresh_ADC_Value());
 8001c24:	1cbb      	adds	r3, r7, #2
 8001c26:	881b      	ldrh	r3, [r3, #0]
 8001c28:	0018      	movs	r0, r3
 8001c2a:	f7ff f8b7 	bl	8000d9c <__aeabi_i2f>
 8001c2e:	1c04      	adds	r4, r0, #0
 8001c30:	f7ff fcc0 	bl	80015b4 <Refresh_ADC_Value>
 8001c34:	1c03      	adds	r3, r0, #0
 8001c36:	1c19      	adds	r1, r3, #0
 8001c38:	1c20      	adds	r0, r4, #0
 8001c3a:	f7fe fdbb 	bl	80007b4 <__aeabi_fmul>
 8001c3e:	1c03      	adds	r3, r0, #0
 8001c40:	1c18      	adds	r0, r3, #0
 8001c42:	f7fe fae9 	bl	8000218 <__aeabi_f2uiz>
 8001c46:	0003      	movs	r3, r0
 8001c48:	0018      	movs	r0, r3
 8001c4a:	f001 f893 	bl	8002d74 <HAL_Delay>

			for(uint8_t i=centro;i>=1;i--){
 8001c4e:	2313      	movs	r3, #19
 8001c50:	18fb      	adds	r3, r7, r3
 8001c52:	2210      	movs	r2, #16
 8001c54:	18ba      	adds	r2, r7, r2
 8001c56:	7812      	ldrb	r2, [r2, #0]
 8001c58:	701a      	strb	r2, [r3, #0]
 8001c5a:	e030      	b.n	8001cbe <AbrirApagar+0x16e>
				ControlLeds(i, 0);
 8001c5c:	2513      	movs	r5, #19
 8001c5e:	197b      	adds	r3, r7, r5
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2100      	movs	r1, #0
 8001c64:	0018      	movs	r0, r3
 8001c66:	f7ff fccf 	bl	8001608 <ControlLeds>
				ControlLeds(i+impar, 0);
 8001c6a:	197a      	adds	r2, r7, r5
 8001c6c:	2416      	movs	r4, #22
 8001c6e:	193b      	adds	r3, r7, r4
 8001c70:	7812      	ldrb	r2, [r2, #0]
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	18d3      	adds	r3, r2, r3
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2100      	movs	r1, #0
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	f7ff fcc4 	bl	8001608 <ControlLeds>
				impar=impar+2;
 8001c80:	193b      	adds	r3, r7, r4
 8001c82:	193a      	adds	r2, r7, r4
 8001c84:	7812      	ldrb	r2, [r2, #0]
 8001c86:	3202      	adds	r2, #2
 8001c88:	701a      	strb	r2, [r3, #0]
				HAL_Delay(tiempo*Refresh_ADC_Value());
 8001c8a:	1d3b      	adds	r3, r7, #4
 8001c8c:	881b      	ldrh	r3, [r3, #0]
 8001c8e:	0018      	movs	r0, r3
 8001c90:	f7ff f884 	bl	8000d9c <__aeabi_i2f>
 8001c94:	1c04      	adds	r4, r0, #0
 8001c96:	f7ff fc8d 	bl	80015b4 <Refresh_ADC_Value>
 8001c9a:	1c03      	adds	r3, r0, #0
 8001c9c:	1c19      	adds	r1, r3, #0
 8001c9e:	1c20      	adds	r0, r4, #0
 8001ca0:	f7fe fd88 	bl	80007b4 <__aeabi_fmul>
 8001ca4:	1c03      	adds	r3, r0, #0
 8001ca6:	1c18      	adds	r0, r3, #0
 8001ca8:	f7fe fab6 	bl	8000218 <__aeabi_f2uiz>
 8001cac:	0003      	movs	r3, r0
 8001cae:	0018      	movs	r0, r3
 8001cb0:	f001 f860 	bl	8002d74 <HAL_Delay>
			for(uint8_t i=centro;i>=1;i--){
 8001cb4:	197b      	adds	r3, r7, r5
 8001cb6:	781a      	ldrb	r2, [r3, #0]
 8001cb8:	197b      	adds	r3, r7, r5
 8001cba:	3a01      	subs	r2, #1
 8001cbc:	701a      	strb	r2, [r3, #0]
 8001cbe:	2313      	movs	r3, #19
 8001cc0:	18fb      	adds	r3, r7, r3
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1c9      	bne.n	8001c5c <AbrirApagar+0x10c>
 8001cc8:	e0f1      	b.n	8001eae <AbrirApagar+0x35e>
			}

		}else{//si es impar (aqui edito porq cantLeds=15)
			centro = (cantLeds/2)+1;//8
 8001cca:	4b82      	ldr	r3, [pc, #520]	; (8001ed4 <AbrirApagar+0x384>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	085b      	lsrs	r3, r3, #1
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	2110      	movs	r1, #16
 8001cd4:	187b      	adds	r3, r7, r1
 8001cd6:	3201      	adds	r2, #1
 8001cd8:	701a      	strb	r2, [r3, #0]
			centro2 = (cantLeds2/2);//5
 8001cda:	4b7f      	ldr	r3, [pc, #508]	; (8001ed8 <AbrirApagar+0x388>)
 8001cdc:	781a      	ldrb	r2, [r3, #0]
 8001cde:	230f      	movs	r3, #15
 8001ce0:	18fb      	adds	r3, r7, r3
 8001ce2:	0852      	lsrs	r2, r2, #1
 8001ce4:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=centro;i>=1;i--){
 8001ce6:	2312      	movs	r3, #18
 8001ce8:	18fb      	adds	r3, r7, r3
 8001cea:	187a      	adds	r2, r7, r1
 8001cec:	7812      	ldrb	r2, [r2, #0]
 8001cee:	701a      	strb	r2, [r3, #0]
 8001cf0:	e059      	b.n	8001da6 <AbrirApagar+0x256>
				ControlLeds(i-(centro-centro2), 1);ControlLeds2(i+10,1);
 8001cf2:	260f      	movs	r6, #15
 8001cf4:	19ba      	adds	r2, r7, r6
 8001cf6:	2310      	movs	r3, #16
 8001cf8:	18fb      	adds	r3, r7, r3
 8001cfa:	7812      	ldrb	r2, [r2, #0]
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	2512      	movs	r5, #18
 8001d04:	197b      	adds	r3, r7, r5
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	18d3      	adds	r3, r2, r3
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	0018      	movs	r0, r3
 8001d10:	f7ff fc7a 	bl	8001608 <ControlLeds>
 8001d14:	197b      	adds	r3, r7, r5
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	330a      	adds	r3, #10
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	0018      	movs	r0, r3
 8001d20:	f7ff fcea 	bl	80016f8 <ControlLeds2>
				ControlLeds(i+par-(centro-centro2-1), 1);ControlLeds2(i+10+par,1);
 8001d24:	197a      	adds	r2, r7, r5
 8001d26:	2415      	movs	r4, #21
 8001d28:	193b      	adds	r3, r7, r4
 8001d2a:	7812      	ldrb	r2, [r2, #0]
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	18d3      	adds	r3, r2, r3
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	19b9      	adds	r1, r7, r6
 8001d34:	2310      	movs	r3, #16
 8001d36:	18fb      	adds	r3, r7, r3
 8001d38:	7809      	ldrb	r1, [r1, #0]
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	1acb      	subs	r3, r1, r3
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	18d3      	adds	r3, r2, r3
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	3301      	adds	r3, #1
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2101      	movs	r1, #1
 8001d4a:	0018      	movs	r0, r3
 8001d4c:	f7ff fc5c 	bl	8001608 <ControlLeds>
 8001d50:	197a      	adds	r2, r7, r5
 8001d52:	193b      	adds	r3, r7, r4
 8001d54:	7812      	ldrb	r2, [r2, #0]
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	18d3      	adds	r3, r2, r3
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	330a      	adds	r3, #10
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2101      	movs	r1, #1
 8001d62:	0018      	movs	r0, r3
 8001d64:	f7ff fcc8 	bl	80016f8 <ControlLeds2>
				par=par+2;
 8001d68:	193b      	adds	r3, r7, r4
 8001d6a:	193a      	adds	r2, r7, r4
 8001d6c:	7812      	ldrb	r2, [r2, #0]
 8001d6e:	3202      	adds	r2, #2
 8001d70:	701a      	strb	r2, [r3, #0]
				HAL_Delay(tiempo*Refresh_ADC_Value());
 8001d72:	1d3b      	adds	r3, r7, #4
 8001d74:	881b      	ldrh	r3, [r3, #0]
 8001d76:	0018      	movs	r0, r3
 8001d78:	f7ff f810 	bl	8000d9c <__aeabi_i2f>
 8001d7c:	1c04      	adds	r4, r0, #0
 8001d7e:	f7ff fc19 	bl	80015b4 <Refresh_ADC_Value>
 8001d82:	1c03      	adds	r3, r0, #0
 8001d84:	1c19      	adds	r1, r3, #0
 8001d86:	1c20      	adds	r0, r4, #0
 8001d88:	f7fe fd14 	bl	80007b4 <__aeabi_fmul>
 8001d8c:	1c03      	adds	r3, r0, #0
 8001d8e:	1c18      	adds	r0, r3, #0
 8001d90:	f7fe fa42 	bl	8000218 <__aeabi_f2uiz>
 8001d94:	0003      	movs	r3, r0
 8001d96:	0018      	movs	r0, r3
 8001d98:	f000 ffec 	bl	8002d74 <HAL_Delay>
			for(uint8_t i=centro;i>=1;i--){
 8001d9c:	197b      	adds	r3, r7, r5
 8001d9e:	781a      	ldrb	r2, [r3, #0]
 8001da0:	197b      	adds	r3, r7, r5
 8001da2:	3a01      	subs	r2, #1
 8001da4:	701a      	strb	r2, [r3, #0]
 8001da6:	2312      	movs	r3, #18
 8001da8:	18fb      	adds	r3, r7, r3
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1a0      	bne.n	8001cf2 <AbrirApagar+0x1a2>
			}

			par=0;
 8001db0:	2315      	movs	r3, #21
 8001db2:	18fb      	adds	r3, r7, r3
 8001db4:	2200      	movs	r2, #0
 8001db6:	701a      	strb	r2, [r3, #0]
			HAL_Delay(tiempo2*Refresh_ADC_Value());
 8001db8:	1cbb      	adds	r3, r7, #2
 8001dba:	881b      	ldrh	r3, [r3, #0]
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	f7fe ffed 	bl	8000d9c <__aeabi_i2f>
 8001dc2:	1c04      	adds	r4, r0, #0
 8001dc4:	f7ff fbf6 	bl	80015b4 <Refresh_ADC_Value>
 8001dc8:	1c03      	adds	r3, r0, #0
 8001dca:	1c19      	adds	r1, r3, #0
 8001dcc:	1c20      	adds	r0, r4, #0
 8001dce:	f7fe fcf1 	bl	80007b4 <__aeabi_fmul>
 8001dd2:	1c03      	adds	r3, r0, #0
 8001dd4:	1c18      	adds	r0, r3, #0
 8001dd6:	f7fe fa1f 	bl	8000218 <__aeabi_f2uiz>
 8001dda:	0003      	movs	r3, r0
 8001ddc:	0018      	movs	r0, r3
 8001dde:	f000 ffc9 	bl	8002d74 <HAL_Delay>

			for(uint8_t i=centro;i>=1;i--){
 8001de2:	2311      	movs	r3, #17
 8001de4:	18fb      	adds	r3, r7, r3
 8001de6:	2210      	movs	r2, #16
 8001de8:	18ba      	adds	r2, r7, r2
 8001dea:	7812      	ldrb	r2, [r2, #0]
 8001dec:	701a      	strb	r2, [r3, #0]
 8001dee:	e059      	b.n	8001ea4 <AbrirApagar+0x354>
				ControlLeds(i-(centro-centro2), 0);ControlLeds2(i+10,0);
 8001df0:	260f      	movs	r6, #15
 8001df2:	19ba      	adds	r2, r7, r6
 8001df4:	2310      	movs	r3, #16
 8001df6:	18fb      	adds	r3, r7, r3
 8001df8:	7812      	ldrb	r2, [r2, #0]
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	b2da      	uxtb	r2, r3
 8001e00:	2511      	movs	r5, #17
 8001e02:	197b      	adds	r3, r7, r5
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	18d3      	adds	r3, r2, r3
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	f7ff fbfb 	bl	8001608 <ControlLeds>
 8001e12:	197b      	adds	r3, r7, r5
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	330a      	adds	r3, #10
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	f7ff fc6b 	bl	80016f8 <ControlLeds2>
				ControlLeds(i+par-(centro-centro2-1), 0);ControlLeds2(i+10+par,0);
 8001e22:	197a      	adds	r2, r7, r5
 8001e24:	2415      	movs	r4, #21
 8001e26:	193b      	adds	r3, r7, r4
 8001e28:	7812      	ldrb	r2, [r2, #0]
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	18d3      	adds	r3, r2, r3
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	19b9      	adds	r1, r7, r6
 8001e32:	2310      	movs	r3, #16
 8001e34:	18fb      	adds	r3, r7, r3
 8001e36:	7809      	ldrb	r1, [r1, #0]
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	1acb      	subs	r3, r1, r3
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	18d3      	adds	r3, r2, r3
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	3301      	adds	r3, #1
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2100      	movs	r1, #0
 8001e48:	0018      	movs	r0, r3
 8001e4a:	f7ff fbdd 	bl	8001608 <ControlLeds>
 8001e4e:	197a      	adds	r2, r7, r5
 8001e50:	193b      	adds	r3, r7, r4
 8001e52:	7812      	ldrb	r2, [r2, #0]
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	18d3      	adds	r3, r2, r3
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	330a      	adds	r3, #10
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2100      	movs	r1, #0
 8001e60:	0018      	movs	r0, r3
 8001e62:	f7ff fc49 	bl	80016f8 <ControlLeds2>
				par=par+2;
 8001e66:	193b      	adds	r3, r7, r4
 8001e68:	193a      	adds	r2, r7, r4
 8001e6a:	7812      	ldrb	r2, [r2, #0]
 8001e6c:	3202      	adds	r2, #2
 8001e6e:	701a      	strb	r2, [r3, #0]
				HAL_Delay(tiempo*Refresh_ADC_Value());
 8001e70:	1d3b      	adds	r3, r7, #4
 8001e72:	881b      	ldrh	r3, [r3, #0]
 8001e74:	0018      	movs	r0, r3
 8001e76:	f7fe ff91 	bl	8000d9c <__aeabi_i2f>
 8001e7a:	1c04      	adds	r4, r0, #0
 8001e7c:	f7ff fb9a 	bl	80015b4 <Refresh_ADC_Value>
 8001e80:	1c03      	adds	r3, r0, #0
 8001e82:	1c19      	adds	r1, r3, #0
 8001e84:	1c20      	adds	r0, r4, #0
 8001e86:	f7fe fc95 	bl	80007b4 <__aeabi_fmul>
 8001e8a:	1c03      	adds	r3, r0, #0
 8001e8c:	1c18      	adds	r0, r3, #0
 8001e8e:	f7fe f9c3 	bl	8000218 <__aeabi_f2uiz>
 8001e92:	0003      	movs	r3, r0
 8001e94:	0018      	movs	r0, r3
 8001e96:	f000 ff6d 	bl	8002d74 <HAL_Delay>
			for(uint8_t i=centro;i>=1;i--){
 8001e9a:	197b      	adds	r3, r7, r5
 8001e9c:	781a      	ldrb	r2, [r3, #0]
 8001e9e:	197b      	adds	r3, r7, r5
 8001ea0:	3a01      	subs	r2, #1
 8001ea2:	701a      	strb	r2, [r3, #0]
 8001ea4:	2311      	movs	r3, #17
 8001ea6:	18fb      	adds	r3, r7, r3
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1a0      	bne.n	8001df0 <AbrirApagar+0x2a0>
	for(uint8_t v=0;v<veces;v++){
 8001eae:	2117      	movs	r1, #23
 8001eb0:	187b      	adds	r3, r7, r1
 8001eb2:	781a      	ldrb	r2, [r3, #0]
 8001eb4:	187b      	adds	r3, r7, r1
 8001eb6:	3201      	adds	r2, #1
 8001eb8:	701a      	strb	r2, [r3, #0]
 8001eba:	2317      	movs	r3, #23
 8001ebc:	18fa      	adds	r2, r7, r3
 8001ebe:	1dfb      	adds	r3, r7, #7
 8001ec0:	7812      	ldrb	r2, [r2, #0]
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d200      	bcs.n	8001eca <AbrirApagar+0x37a>
 8001ec8:	e656      	b.n	8001b78 <AbrirApagar+0x28>
			}
		}
	}
}
 8001eca:	46c0      	nop			; (mov r8, r8)
 8001ecc:	46c0      	nop			; (mov r8, r8)
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	b007      	add	sp, #28
 8001ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ed4:	20000000 	.word	0x20000000
 8001ed8:	20000001 	.word	0x20000001

08001edc <CerrarApagar>:

void CerrarApagar(uint8_t veces, uint16_t tiempo, uint16_t tiempo2){
 8001edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	0004      	movs	r4, r0
 8001ee4:	0008      	movs	r0, r1
 8001ee6:	0011      	movs	r1, r2
 8001ee8:	1dfb      	adds	r3, r7, #7
 8001eea:	1c22      	adds	r2, r4, #0
 8001eec:	701a      	strb	r2, [r3, #0]
 8001eee:	1d3b      	adds	r3, r7, #4
 8001ef0:	1c02      	adds	r2, r0, #0
 8001ef2:	801a      	strh	r2, [r3, #0]
 8001ef4:	1cbb      	adds	r3, r7, #2
 8001ef6:	1c0a      	adds	r2, r1, #0
 8001ef8:	801a      	strh	r2, [r3, #0]
	for(uint8_t v=0;v<veces;v++){
 8001efa:	230f      	movs	r3, #15
 8001efc:	18fb      	adds	r3, r7, r3
 8001efe:	2200      	movs	r2, #0
 8001f00:	701a      	strb	r2, [r3, #0]
 8001f02:	e196      	b.n	8002232 <CerrarApagar+0x356>
		uint8_t limite,limite2,centro;
		if(cantLeds%2==0){//si es par
 8001f04:	4bd1      	ldr	r3, [pc, #836]	; (800224c <CerrarApagar+0x370>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d000      	beq.n	8001f14 <CerrarApagar+0x38>
 8001f12:	e0a3      	b.n	800205c <CerrarApagar+0x180>

			centro = cantLeds/2;//5
 8001f14:	4bcd      	ldr	r3, [pc, #820]	; (800224c <CerrarApagar+0x370>)
 8001f16:	781a      	ldrb	r2, [r3, #0]
 8001f18:	2308      	movs	r3, #8
 8001f1a:	18fb      	adds	r3, r7, r3
 8001f1c:	0852      	lsrs	r2, r2, #1
 8001f1e:	701a      	strb	r2, [r3, #0]
			limite = cantLeds-1;
 8001f20:	4bca      	ldr	r3, [pc, #808]	; (800224c <CerrarApagar+0x370>)
 8001f22:	781a      	ldrb	r2, [r3, #0]
 8001f24:	230e      	movs	r3, #14
 8001f26:	18fb      	adds	r3, r7, r3
 8001f28:	3a01      	subs	r2, #1
 8001f2a:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=1;i<=centro;i++){
 8001f2c:	230c      	movs	r3, #12
 8001f2e:	18fb      	adds	r3, r7, r3
 8001f30:	2201      	movs	r2, #1
 8001f32:	701a      	strb	r2, [r3, #0]
 8001f34:	e030      	b.n	8001f98 <CerrarApagar+0xbc>
				ControlLeds(i, 1);
 8001f36:	250c      	movs	r5, #12
 8001f38:	197b      	adds	r3, r7, r5
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	0018      	movs	r0, r3
 8001f40:	f7ff fb62 	bl	8001608 <ControlLeds>
				ControlLeds(i+limite, 1);
 8001f44:	197a      	adds	r2, r7, r5
 8001f46:	240e      	movs	r4, #14
 8001f48:	193b      	adds	r3, r7, r4
 8001f4a:	7812      	ldrb	r2, [r2, #0]
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	18d3      	adds	r3, r2, r3
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2101      	movs	r1, #1
 8001f54:	0018      	movs	r0, r3
 8001f56:	f7ff fb57 	bl	8001608 <ControlLeds>
				limite=limite-2;
 8001f5a:	193b      	adds	r3, r7, r4
 8001f5c:	193a      	adds	r2, r7, r4
 8001f5e:	7812      	ldrb	r2, [r2, #0]
 8001f60:	3a02      	subs	r2, #2
 8001f62:	701a      	strb	r2, [r3, #0]
				HAL_Delay(tiempo*Refresh_ADC_Value());
 8001f64:	1d3b      	adds	r3, r7, #4
 8001f66:	881b      	ldrh	r3, [r3, #0]
 8001f68:	0018      	movs	r0, r3
 8001f6a:	f7fe ff17 	bl	8000d9c <__aeabi_i2f>
 8001f6e:	1c04      	adds	r4, r0, #0
 8001f70:	f7ff fb20 	bl	80015b4 <Refresh_ADC_Value>
 8001f74:	1c03      	adds	r3, r0, #0
 8001f76:	1c19      	adds	r1, r3, #0
 8001f78:	1c20      	adds	r0, r4, #0
 8001f7a:	f7fe fc1b 	bl	80007b4 <__aeabi_fmul>
 8001f7e:	1c03      	adds	r3, r0, #0
 8001f80:	1c18      	adds	r0, r3, #0
 8001f82:	f7fe f949 	bl	8000218 <__aeabi_f2uiz>
 8001f86:	0003      	movs	r3, r0
 8001f88:	0018      	movs	r0, r3
 8001f8a:	f000 fef3 	bl	8002d74 <HAL_Delay>
			for(uint8_t i=1;i<=centro;i++){
 8001f8e:	197b      	adds	r3, r7, r5
 8001f90:	781a      	ldrb	r2, [r3, #0]
 8001f92:	197b      	adds	r3, r7, r5
 8001f94:	3201      	adds	r2, #1
 8001f96:	701a      	strb	r2, [r3, #0]
 8001f98:	230c      	movs	r3, #12
 8001f9a:	18fa      	adds	r2, r7, r3
 8001f9c:	2308      	movs	r3, #8
 8001f9e:	18fb      	adds	r3, r7, r3
 8001fa0:	7812      	ldrb	r2, [r2, #0]
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d9c6      	bls.n	8001f36 <CerrarApagar+0x5a>
			}
			limite = cantLeds-1;
 8001fa8:	4ba8      	ldr	r3, [pc, #672]	; (800224c <CerrarApagar+0x370>)
 8001faa:	781a      	ldrb	r2, [r3, #0]
 8001fac:	230e      	movs	r3, #14
 8001fae:	18fb      	adds	r3, r7, r3
 8001fb0:	3a01      	subs	r2, #1
 8001fb2:	701a      	strb	r2, [r3, #0]
			HAL_Delay(tiempo2*Refresh_ADC_Value());
 8001fb4:	1cbb      	adds	r3, r7, #2
 8001fb6:	881b      	ldrh	r3, [r3, #0]
 8001fb8:	0018      	movs	r0, r3
 8001fba:	f7fe feef 	bl	8000d9c <__aeabi_i2f>
 8001fbe:	1c04      	adds	r4, r0, #0
 8001fc0:	f7ff faf8 	bl	80015b4 <Refresh_ADC_Value>
 8001fc4:	1c03      	adds	r3, r0, #0
 8001fc6:	1c19      	adds	r1, r3, #0
 8001fc8:	1c20      	adds	r0, r4, #0
 8001fca:	f7fe fbf3 	bl	80007b4 <__aeabi_fmul>
 8001fce:	1c03      	adds	r3, r0, #0
 8001fd0:	1c18      	adds	r0, r3, #0
 8001fd2:	f7fe f921 	bl	8000218 <__aeabi_f2uiz>
 8001fd6:	0003      	movs	r3, r0
 8001fd8:	0018      	movs	r0, r3
 8001fda:	f000 fecb 	bl	8002d74 <HAL_Delay>
			for(uint8_t i=1;i<=centro;i++){
 8001fde:	230b      	movs	r3, #11
 8001fe0:	18fb      	adds	r3, r7, r3
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	701a      	strb	r2, [r3, #0]
 8001fe6:	e030      	b.n	800204a <CerrarApagar+0x16e>
				ControlLeds(i, 0);
 8001fe8:	250b      	movs	r5, #11
 8001fea:	197b      	adds	r3, r7, r5
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	2100      	movs	r1, #0
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	f7ff fb09 	bl	8001608 <ControlLeds>
				ControlLeds(i+limite, 0);
 8001ff6:	197a      	adds	r2, r7, r5
 8001ff8:	240e      	movs	r4, #14
 8001ffa:	193b      	adds	r3, r7, r4
 8001ffc:	7812      	ldrb	r2, [r2, #0]
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	18d3      	adds	r3, r2, r3
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2100      	movs	r1, #0
 8002006:	0018      	movs	r0, r3
 8002008:	f7ff fafe 	bl	8001608 <ControlLeds>
				limite=limite-2;
 800200c:	193b      	adds	r3, r7, r4
 800200e:	193a      	adds	r2, r7, r4
 8002010:	7812      	ldrb	r2, [r2, #0]
 8002012:	3a02      	subs	r2, #2
 8002014:	701a      	strb	r2, [r3, #0]
				HAL_Delay(tiempo*Refresh_ADC_Value());
 8002016:	1d3b      	adds	r3, r7, #4
 8002018:	881b      	ldrh	r3, [r3, #0]
 800201a:	0018      	movs	r0, r3
 800201c:	f7fe febe 	bl	8000d9c <__aeabi_i2f>
 8002020:	1c04      	adds	r4, r0, #0
 8002022:	f7ff fac7 	bl	80015b4 <Refresh_ADC_Value>
 8002026:	1c03      	adds	r3, r0, #0
 8002028:	1c19      	adds	r1, r3, #0
 800202a:	1c20      	adds	r0, r4, #0
 800202c:	f7fe fbc2 	bl	80007b4 <__aeabi_fmul>
 8002030:	1c03      	adds	r3, r0, #0
 8002032:	1c18      	adds	r0, r3, #0
 8002034:	f7fe f8f0 	bl	8000218 <__aeabi_f2uiz>
 8002038:	0003      	movs	r3, r0
 800203a:	0018      	movs	r0, r3
 800203c:	f000 fe9a 	bl	8002d74 <HAL_Delay>
			for(uint8_t i=1;i<=centro;i++){
 8002040:	197b      	adds	r3, r7, r5
 8002042:	781a      	ldrb	r2, [r3, #0]
 8002044:	197b      	adds	r3, r7, r5
 8002046:	3201      	adds	r2, #1
 8002048:	701a      	strb	r2, [r3, #0]
 800204a:	230b      	movs	r3, #11
 800204c:	18fa      	adds	r2, r7, r3
 800204e:	2308      	movs	r3, #8
 8002050:	18fb      	adds	r3, r7, r3
 8002052:	7812      	ldrb	r2, [r2, #0]
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	d9c6      	bls.n	8001fe8 <CerrarApagar+0x10c>
 800205a:	e0e4      	b.n	8002226 <CerrarApagar+0x34a>
			}

		}else{//si es impar (aqui edite porq cantleds=15)
			centro = (cantLeds/2)+1;//5
 800205c:	4b7b      	ldr	r3, [pc, #492]	; (800224c <CerrarApagar+0x370>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	085b      	lsrs	r3, r3, #1
 8002062:	b2da      	uxtb	r2, r3
 8002064:	2308      	movs	r3, #8
 8002066:	18fb      	adds	r3, r7, r3
 8002068:	3201      	adds	r2, #1
 800206a:	701a      	strb	r2, [r3, #0]
			limite = cantLeds-1;limite2 = cantLeds2-1;
 800206c:	4b77      	ldr	r3, [pc, #476]	; (800224c <CerrarApagar+0x370>)
 800206e:	781a      	ldrb	r2, [r3, #0]
 8002070:	230e      	movs	r3, #14
 8002072:	18fb      	adds	r3, r7, r3
 8002074:	3a01      	subs	r2, #1
 8002076:	701a      	strb	r2, [r3, #0]
 8002078:	4b75      	ldr	r3, [pc, #468]	; (8002250 <CerrarApagar+0x374>)
 800207a:	781a      	ldrb	r2, [r3, #0]
 800207c:	230d      	movs	r3, #13
 800207e:	18fb      	adds	r3, r7, r3
 8002080:	3a01      	subs	r2, #1
 8002082:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=1;i<=centro;i++){
 8002084:	230a      	movs	r3, #10
 8002086:	18fb      	adds	r3, r7, r3
 8002088:	2201      	movs	r2, #1
 800208a:	701a      	strb	r2, [r3, #0]
 800208c:	e04a      	b.n	8002124 <CerrarApagar+0x248>
				ControlLeds(i, 1);ControlLeds2(i+10,1);
 800208e:	250a      	movs	r5, #10
 8002090:	197b      	adds	r3, r7, r5
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2101      	movs	r1, #1
 8002096:	0018      	movs	r0, r3
 8002098:	f7ff fab6 	bl	8001608 <ControlLeds>
 800209c:	197b      	adds	r3, r7, r5
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	330a      	adds	r3, #10
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2101      	movs	r1, #1
 80020a6:	0018      	movs	r0, r3
 80020a8:	f7ff fb26 	bl	80016f8 <ControlLeds2>
				ControlLeds(i+limite2, 1);ControlLeds2(i+10+limite,1);
 80020ac:	197a      	adds	r2, r7, r5
 80020ae:	240d      	movs	r4, #13
 80020b0:	193b      	adds	r3, r7, r4
 80020b2:	7812      	ldrb	r2, [r2, #0]
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	18d3      	adds	r3, r2, r3
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2101      	movs	r1, #1
 80020bc:	0018      	movs	r0, r3
 80020be:	f7ff faa3 	bl	8001608 <ControlLeds>
 80020c2:	197a      	adds	r2, r7, r5
 80020c4:	260e      	movs	r6, #14
 80020c6:	19bb      	adds	r3, r7, r6
 80020c8:	7812      	ldrb	r2, [r2, #0]
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	18d3      	adds	r3, r2, r3
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	330a      	adds	r3, #10
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	2101      	movs	r1, #1
 80020d6:	0018      	movs	r0, r3
 80020d8:	f7ff fb0e 	bl	80016f8 <ControlLeds2>
				limite=limite-2;limite2=limite2-2;
 80020dc:	19bb      	adds	r3, r7, r6
 80020de:	19ba      	adds	r2, r7, r6
 80020e0:	7812      	ldrb	r2, [r2, #0]
 80020e2:	3a02      	subs	r2, #2
 80020e4:	701a      	strb	r2, [r3, #0]
 80020e6:	193b      	adds	r3, r7, r4
 80020e8:	193a      	adds	r2, r7, r4
 80020ea:	7812      	ldrb	r2, [r2, #0]
 80020ec:	3a02      	subs	r2, #2
 80020ee:	701a      	strb	r2, [r3, #0]
				HAL_Delay(tiempo*Refresh_ADC_Value());
 80020f0:	1d3b      	adds	r3, r7, #4
 80020f2:	881b      	ldrh	r3, [r3, #0]
 80020f4:	0018      	movs	r0, r3
 80020f6:	f7fe fe51 	bl	8000d9c <__aeabi_i2f>
 80020fa:	1c04      	adds	r4, r0, #0
 80020fc:	f7ff fa5a 	bl	80015b4 <Refresh_ADC_Value>
 8002100:	1c03      	adds	r3, r0, #0
 8002102:	1c19      	adds	r1, r3, #0
 8002104:	1c20      	adds	r0, r4, #0
 8002106:	f7fe fb55 	bl	80007b4 <__aeabi_fmul>
 800210a:	1c03      	adds	r3, r0, #0
 800210c:	1c18      	adds	r0, r3, #0
 800210e:	f7fe f883 	bl	8000218 <__aeabi_f2uiz>
 8002112:	0003      	movs	r3, r0
 8002114:	0018      	movs	r0, r3
 8002116:	f000 fe2d 	bl	8002d74 <HAL_Delay>
			for(uint8_t i=1;i<=centro;i++){
 800211a:	197b      	adds	r3, r7, r5
 800211c:	781a      	ldrb	r2, [r3, #0]
 800211e:	197b      	adds	r3, r7, r5
 8002120:	3201      	adds	r2, #1
 8002122:	701a      	strb	r2, [r3, #0]
 8002124:	230a      	movs	r3, #10
 8002126:	18fa      	adds	r2, r7, r3
 8002128:	2308      	movs	r3, #8
 800212a:	18fb      	adds	r3, r7, r3
 800212c:	7812      	ldrb	r2, [r2, #0]
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	429a      	cmp	r2, r3
 8002132:	d9ac      	bls.n	800208e <CerrarApagar+0x1b2>
			}
			limite = cantLeds-1;limite2 = cantLeds2-1;
 8002134:	4b45      	ldr	r3, [pc, #276]	; (800224c <CerrarApagar+0x370>)
 8002136:	781a      	ldrb	r2, [r3, #0]
 8002138:	230e      	movs	r3, #14
 800213a:	18fb      	adds	r3, r7, r3
 800213c:	3a01      	subs	r2, #1
 800213e:	701a      	strb	r2, [r3, #0]
 8002140:	4b43      	ldr	r3, [pc, #268]	; (8002250 <CerrarApagar+0x374>)
 8002142:	781a      	ldrb	r2, [r3, #0]
 8002144:	230d      	movs	r3, #13
 8002146:	18fb      	adds	r3, r7, r3
 8002148:	3a01      	subs	r2, #1
 800214a:	701a      	strb	r2, [r3, #0]
			HAL_Delay(tiempo2*Refresh_ADC_Value());
 800214c:	1cbb      	adds	r3, r7, #2
 800214e:	881b      	ldrh	r3, [r3, #0]
 8002150:	0018      	movs	r0, r3
 8002152:	f7fe fe23 	bl	8000d9c <__aeabi_i2f>
 8002156:	1c04      	adds	r4, r0, #0
 8002158:	f7ff fa2c 	bl	80015b4 <Refresh_ADC_Value>
 800215c:	1c03      	adds	r3, r0, #0
 800215e:	1c19      	adds	r1, r3, #0
 8002160:	1c20      	adds	r0, r4, #0
 8002162:	f7fe fb27 	bl	80007b4 <__aeabi_fmul>
 8002166:	1c03      	adds	r3, r0, #0
 8002168:	1c18      	adds	r0, r3, #0
 800216a:	f7fe f855 	bl	8000218 <__aeabi_f2uiz>
 800216e:	0003      	movs	r3, r0
 8002170:	0018      	movs	r0, r3
 8002172:	f000 fdff 	bl	8002d74 <HAL_Delay>
			for(uint8_t i=1;i<=centro;i++){
 8002176:	2309      	movs	r3, #9
 8002178:	18fb      	adds	r3, r7, r3
 800217a:	2201      	movs	r2, #1
 800217c:	701a      	strb	r2, [r3, #0]
 800217e:	e04a      	b.n	8002216 <CerrarApagar+0x33a>
				ControlLeds(i, 0);ControlLeds2(i+10,0);
 8002180:	2509      	movs	r5, #9
 8002182:	197b      	adds	r3, r7, r5
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	2100      	movs	r1, #0
 8002188:	0018      	movs	r0, r3
 800218a:	f7ff fa3d 	bl	8001608 <ControlLeds>
 800218e:	197b      	adds	r3, r7, r5
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	330a      	adds	r3, #10
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2100      	movs	r1, #0
 8002198:	0018      	movs	r0, r3
 800219a:	f7ff faad 	bl	80016f8 <ControlLeds2>
				ControlLeds(i+limite2, 0);ControlLeds2(i+10+limite,0);
 800219e:	197a      	adds	r2, r7, r5
 80021a0:	240d      	movs	r4, #13
 80021a2:	193b      	adds	r3, r7, r4
 80021a4:	7812      	ldrb	r2, [r2, #0]
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	18d3      	adds	r3, r2, r3
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2100      	movs	r1, #0
 80021ae:	0018      	movs	r0, r3
 80021b0:	f7ff fa2a 	bl	8001608 <ControlLeds>
 80021b4:	197a      	adds	r2, r7, r5
 80021b6:	260e      	movs	r6, #14
 80021b8:	19bb      	adds	r3, r7, r6
 80021ba:	7812      	ldrb	r2, [r2, #0]
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	18d3      	adds	r3, r2, r3
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	330a      	adds	r3, #10
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2100      	movs	r1, #0
 80021c8:	0018      	movs	r0, r3
 80021ca:	f7ff fa95 	bl	80016f8 <ControlLeds2>
				limite=limite-2;limite2=limite2-2;
 80021ce:	19bb      	adds	r3, r7, r6
 80021d0:	19ba      	adds	r2, r7, r6
 80021d2:	7812      	ldrb	r2, [r2, #0]
 80021d4:	3a02      	subs	r2, #2
 80021d6:	701a      	strb	r2, [r3, #0]
 80021d8:	193b      	adds	r3, r7, r4
 80021da:	193a      	adds	r2, r7, r4
 80021dc:	7812      	ldrb	r2, [r2, #0]
 80021de:	3a02      	subs	r2, #2
 80021e0:	701a      	strb	r2, [r3, #0]
				HAL_Delay(tiempo*Refresh_ADC_Value());
 80021e2:	1d3b      	adds	r3, r7, #4
 80021e4:	881b      	ldrh	r3, [r3, #0]
 80021e6:	0018      	movs	r0, r3
 80021e8:	f7fe fdd8 	bl	8000d9c <__aeabi_i2f>
 80021ec:	1c04      	adds	r4, r0, #0
 80021ee:	f7ff f9e1 	bl	80015b4 <Refresh_ADC_Value>
 80021f2:	1c03      	adds	r3, r0, #0
 80021f4:	1c19      	adds	r1, r3, #0
 80021f6:	1c20      	adds	r0, r4, #0
 80021f8:	f7fe fadc 	bl	80007b4 <__aeabi_fmul>
 80021fc:	1c03      	adds	r3, r0, #0
 80021fe:	1c18      	adds	r0, r3, #0
 8002200:	f7fe f80a 	bl	8000218 <__aeabi_f2uiz>
 8002204:	0003      	movs	r3, r0
 8002206:	0018      	movs	r0, r3
 8002208:	f000 fdb4 	bl	8002d74 <HAL_Delay>
			for(uint8_t i=1;i<=centro;i++){
 800220c:	197b      	adds	r3, r7, r5
 800220e:	781a      	ldrb	r2, [r3, #0]
 8002210:	197b      	adds	r3, r7, r5
 8002212:	3201      	adds	r2, #1
 8002214:	701a      	strb	r2, [r3, #0]
 8002216:	2309      	movs	r3, #9
 8002218:	18fa      	adds	r2, r7, r3
 800221a:	2308      	movs	r3, #8
 800221c:	18fb      	adds	r3, r7, r3
 800221e:	7812      	ldrb	r2, [r2, #0]
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	429a      	cmp	r2, r3
 8002224:	d9ac      	bls.n	8002180 <CerrarApagar+0x2a4>
	for(uint8_t v=0;v<veces;v++){
 8002226:	210f      	movs	r1, #15
 8002228:	187b      	adds	r3, r7, r1
 800222a:	781a      	ldrb	r2, [r3, #0]
 800222c:	187b      	adds	r3, r7, r1
 800222e:	3201      	adds	r2, #1
 8002230:	701a      	strb	r2, [r3, #0]
 8002232:	230f      	movs	r3, #15
 8002234:	18fa      	adds	r2, r7, r3
 8002236:	1dfb      	adds	r3, r7, #7
 8002238:	7812      	ldrb	r2, [r2, #0]
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	429a      	cmp	r2, r3
 800223e:	d200      	bcs.n	8002242 <CerrarApagar+0x366>
 8002240:	e660      	b.n	8001f04 <CerrarApagar+0x28>
			}
		}
	}
}
 8002242:	46c0      	nop			; (mov r8, r8)
 8002244:	46c0      	nop			; (mov r8, r8)
 8002246:	46bd      	mov	sp, r7
 8002248:	b005      	add	sp, #20
 800224a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800224c:	20000000 	.word	0x20000000
 8002250:	20000001 	.word	0x20000001

08002254 <Girar>:

void Girar(uint8_t veces, uint16_t tiempo){
 8002254:	b590      	push	{r4, r7, lr}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	0002      	movs	r2, r0
 800225c:	1dfb      	adds	r3, r7, #7
 800225e:	701a      	strb	r2, [r3, #0]
 8002260:	1d3b      	adds	r3, r7, #4
 8002262:	1c0a      	adds	r2, r1, #0
 8002264:	801a      	strh	r2, [r3, #0]
	for(uint8_t v=0;v<veces;v++){
 8002266:	230f      	movs	r3, #15
 8002268:	18fb      	adds	r3, r7, r3
 800226a:	2200      	movs	r2, #0
 800226c:	701a      	strb	r2, [r3, #0]
 800226e:	e035      	b.n	80022dc <Girar+0x88>
		AbrirApagar(1,tiempo*Refresh_ADC_Value(),0);
 8002270:	1d3b      	adds	r3, r7, #4
 8002272:	881b      	ldrh	r3, [r3, #0]
 8002274:	0018      	movs	r0, r3
 8002276:	f7fe fd91 	bl	8000d9c <__aeabi_i2f>
 800227a:	1c04      	adds	r4, r0, #0
 800227c:	f7ff f99a 	bl	80015b4 <Refresh_ADC_Value>
 8002280:	1c03      	adds	r3, r0, #0
 8002282:	1c19      	adds	r1, r3, #0
 8002284:	1c20      	adds	r0, r4, #0
 8002286:	f7fe fa95 	bl	80007b4 <__aeabi_fmul>
 800228a:	1c03      	adds	r3, r0, #0
 800228c:	1c18      	adds	r0, r3, #0
 800228e:	f7fd ffc3 	bl	8000218 <__aeabi_f2uiz>
 8002292:	0003      	movs	r3, r0
 8002294:	b29b      	uxth	r3, r3
 8002296:	2200      	movs	r2, #0
 8002298:	0019      	movs	r1, r3
 800229a:	2001      	movs	r0, #1
 800229c:	f7ff fc58 	bl	8001b50 <AbrirApagar>
		CerrarApagar(1,tiempo*Refresh_ADC_Value(),0);
 80022a0:	1d3b      	adds	r3, r7, #4
 80022a2:	881b      	ldrh	r3, [r3, #0]
 80022a4:	0018      	movs	r0, r3
 80022a6:	f7fe fd79 	bl	8000d9c <__aeabi_i2f>
 80022aa:	1c04      	adds	r4, r0, #0
 80022ac:	f7ff f982 	bl	80015b4 <Refresh_ADC_Value>
 80022b0:	1c03      	adds	r3, r0, #0
 80022b2:	1c19      	adds	r1, r3, #0
 80022b4:	1c20      	adds	r0, r4, #0
 80022b6:	f7fe fa7d 	bl	80007b4 <__aeabi_fmul>
 80022ba:	1c03      	adds	r3, r0, #0
 80022bc:	1c18      	adds	r0, r3, #0
 80022be:	f7fd ffab 	bl	8000218 <__aeabi_f2uiz>
 80022c2:	0003      	movs	r3, r0
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	2200      	movs	r2, #0
 80022c8:	0019      	movs	r1, r3
 80022ca:	2001      	movs	r0, #1
 80022cc:	f7ff fe06 	bl	8001edc <CerrarApagar>
	for(uint8_t v=0;v<veces;v++){
 80022d0:	210f      	movs	r1, #15
 80022d2:	187b      	adds	r3, r7, r1
 80022d4:	781a      	ldrb	r2, [r3, #0]
 80022d6:	187b      	adds	r3, r7, r1
 80022d8:	3201      	adds	r2, #1
 80022da:	701a      	strb	r2, [r3, #0]
 80022dc:	230f      	movs	r3, #15
 80022de:	18fa      	adds	r2, r7, r3
 80022e0:	1dfb      	adds	r3, r7, #7
 80022e2:	7812      	ldrb	r2, [r2, #0]
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d3c2      	bcc.n	8002270 <Girar+0x1c>
	}
}
 80022ea:	46c0      	nop			; (mov r8, r8)
 80022ec:	46c0      	nop			; (mov r8, r8)
 80022ee:	46bd      	mov	sp, r7
 80022f0:	b005      	add	sp, #20
 80022f2:	bd90      	pop	{r4, r7, pc}

080022f4 <VolumenAbrir>:

void VolumenAbrir(uint8_t veces, uint16_t tiempo, uint16_t tiempo2){
 80022f4:	b5b0      	push	{r4, r5, r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	0004      	movs	r4, r0
 80022fc:	0008      	movs	r0, r1
 80022fe:	0011      	movs	r1, r2
 8002300:	1dfb      	adds	r3, r7, #7
 8002302:	1c22      	adds	r2, r4, #0
 8002304:	701a      	strb	r2, [r3, #0]
 8002306:	1d3b      	adds	r3, r7, #4
 8002308:	1c02      	adds	r2, r0, #0
 800230a:	801a      	strh	r2, [r3, #0]
 800230c:	1cbb      	adds	r3, r7, #2
 800230e:	1c0a      	adds	r2, r1, #0
 8002310:	801a      	strh	r2, [r3, #0]
	for(uint8_t v=0;v<veces;v++){
 8002312:	230f      	movs	r3, #15
 8002314:	18fb      	adds	r3, r7, r3
 8002316:	2200      	movs	r2, #0
 8002318:	701a      	strb	r2, [r3, #0]
 800231a:	e0a3      	b.n	8002464 <VolumenAbrir+0x170>
		uint8_t l;
		for(uint8_t i=1;i<=cantLeds;i++){
 800231c:	230e      	movs	r3, #14
 800231e:	18fb      	adds	r3, r7, r3
 8002320:	2201      	movs	r2, #1
 8002322:	701a      	strb	r2, [r3, #0]
 8002324:	e07b      	b.n	800241e <VolumenAbrir+0x12a>
			l=i;
 8002326:	250b      	movs	r5, #11
 8002328:	197b      	adds	r3, r7, r5
 800232a:	220e      	movs	r2, #14
 800232c:	18ba      	adds	r2, r7, r2
 800232e:	7812      	ldrb	r2, [r2, #0]
 8002330:	701a      	strb	r2, [r3, #0]
			HAL_Delay(tiempo*Refresh_ADC_Value());
 8002332:	1d3b      	adds	r3, r7, #4
 8002334:	881b      	ldrh	r3, [r3, #0]
 8002336:	0018      	movs	r0, r3
 8002338:	f7fe fd30 	bl	8000d9c <__aeabi_i2f>
 800233c:	1c04      	adds	r4, r0, #0
 800233e:	f7ff f939 	bl	80015b4 <Refresh_ADC_Value>
 8002342:	1c03      	adds	r3, r0, #0
 8002344:	1c19      	adds	r1, r3, #0
 8002346:	1c20      	adds	r0, r4, #0
 8002348:	f7fe fa34 	bl	80007b4 <__aeabi_fmul>
 800234c:	1c03      	adds	r3, r0, #0
 800234e:	1c18      	adds	r0, r3, #0
 8002350:	f7fd ff62 	bl	8000218 <__aeabi_f2uiz>
 8002354:	0003      	movs	r3, r0
 8002356:	0018      	movs	r0, r3
 8002358:	f000 fd0c 	bl	8002d74 <HAL_Delay>
			for(uint8_t i=l;i<=cantLeds;i++){
 800235c:	230d      	movs	r3, #13
 800235e:	18fb      	adds	r3, r7, r3
 8002360:	197a      	adds	r2, r7, r5
 8002362:	7812      	ldrb	r2, [r2, #0]
 8002364:	701a      	strb	r2, [r3, #0]
 8002366:	e01f      	b.n	80023a8 <VolumenAbrir+0xb4>
				Encender_1_Led_2(i);
 8002368:	250d      	movs	r5, #13
 800236a:	197b      	adds	r3, r7, r5
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	0018      	movs	r0, r3
 8002370:	f7ff fb0e 	bl	8001990 <Encender_1_Led_2>
				HAL_Delay(tiempo*Refresh_ADC_Value());
 8002374:	1d3b      	adds	r3, r7, #4
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	0018      	movs	r0, r3
 800237a:	f7fe fd0f 	bl	8000d9c <__aeabi_i2f>
 800237e:	1c04      	adds	r4, r0, #0
 8002380:	f7ff f918 	bl	80015b4 <Refresh_ADC_Value>
 8002384:	1c03      	adds	r3, r0, #0
 8002386:	1c19      	adds	r1, r3, #0
 8002388:	1c20      	adds	r0, r4, #0
 800238a:	f7fe fa13 	bl	80007b4 <__aeabi_fmul>
 800238e:	1c03      	adds	r3, r0, #0
 8002390:	1c18      	adds	r0, r3, #0
 8002392:	f7fd ff41 	bl	8000218 <__aeabi_f2uiz>
 8002396:	0003      	movs	r3, r0
 8002398:	0018      	movs	r0, r3
 800239a:	f000 fceb 	bl	8002d74 <HAL_Delay>
			for(uint8_t i=l;i<=cantLeds;i++){
 800239e:	197b      	adds	r3, r7, r5
 80023a0:	781a      	ldrb	r2, [r3, #0]
 80023a2:	197b      	adds	r3, r7, r5
 80023a4:	3201      	adds	r2, #1
 80023a6:	701a      	strb	r2, [r3, #0]
 80023a8:	4b35      	ldr	r3, [pc, #212]	; (8002480 <VolumenAbrir+0x18c>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	220d      	movs	r2, #13
 80023ae:	18ba      	adds	r2, r7, r2
 80023b0:	7812      	ldrb	r2, [r2, #0]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d9d8      	bls.n	8002368 <VolumenAbrir+0x74>
			}
			for(uint8_t i=cantLeds;i>=l;i--){
 80023b6:	230c      	movs	r3, #12
 80023b8:	18fb      	adds	r3, r7, r3
 80023ba:	4a31      	ldr	r2, [pc, #196]	; (8002480 <VolumenAbrir+0x18c>)
 80023bc:	7812      	ldrb	r2, [r2, #0]
 80023be:	701a      	strb	r2, [r3, #0]
 80023c0:	e01f      	b.n	8002402 <VolumenAbrir+0x10e>
				Encender_1_Led_2(i);
 80023c2:	250c      	movs	r5, #12
 80023c4:	197b      	adds	r3, r7, r5
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	0018      	movs	r0, r3
 80023ca:	f7ff fae1 	bl	8001990 <Encender_1_Led_2>
				HAL_Delay(tiempo*Refresh_ADC_Value());
 80023ce:	1d3b      	adds	r3, r7, #4
 80023d0:	881b      	ldrh	r3, [r3, #0]
 80023d2:	0018      	movs	r0, r3
 80023d4:	f7fe fce2 	bl	8000d9c <__aeabi_i2f>
 80023d8:	1c04      	adds	r4, r0, #0
 80023da:	f7ff f8eb 	bl	80015b4 <Refresh_ADC_Value>
 80023de:	1c03      	adds	r3, r0, #0
 80023e0:	1c19      	adds	r1, r3, #0
 80023e2:	1c20      	adds	r0, r4, #0
 80023e4:	f7fe f9e6 	bl	80007b4 <__aeabi_fmul>
 80023e8:	1c03      	adds	r3, r0, #0
 80023ea:	1c18      	adds	r0, r3, #0
 80023ec:	f7fd ff14 	bl	8000218 <__aeabi_f2uiz>
 80023f0:	0003      	movs	r3, r0
 80023f2:	0018      	movs	r0, r3
 80023f4:	f000 fcbe 	bl	8002d74 <HAL_Delay>
			for(uint8_t i=cantLeds;i>=l;i--){
 80023f8:	197b      	adds	r3, r7, r5
 80023fa:	781a      	ldrb	r2, [r3, #0]
 80023fc:	197b      	adds	r3, r7, r5
 80023fe:	3a01      	subs	r2, #1
 8002400:	701a      	strb	r2, [r3, #0]
 8002402:	230c      	movs	r3, #12
 8002404:	18fa      	adds	r2, r7, r3
 8002406:	230b      	movs	r3, #11
 8002408:	18fb      	adds	r3, r7, r3
 800240a:	7812      	ldrb	r2, [r2, #0]
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	429a      	cmp	r2, r3
 8002410:	d2d7      	bcs.n	80023c2 <VolumenAbrir+0xce>
		for(uint8_t i=1;i<=cantLeds;i++){
 8002412:	210e      	movs	r1, #14
 8002414:	187b      	adds	r3, r7, r1
 8002416:	781a      	ldrb	r2, [r3, #0]
 8002418:	187b      	adds	r3, r7, r1
 800241a:	3201      	adds	r2, #1
 800241c:	701a      	strb	r2, [r3, #0]
 800241e:	4b18      	ldr	r3, [pc, #96]	; (8002480 <VolumenAbrir+0x18c>)
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	220e      	movs	r2, #14
 8002424:	18ba      	adds	r2, r7, r2
 8002426:	7812      	ldrb	r2, [r2, #0]
 8002428:	429a      	cmp	r2, r3
 800242a:	d800      	bhi.n	800242e <VolumenAbrir+0x13a>
 800242c:	e77b      	b.n	8002326 <VolumenAbrir+0x32>
			}
		}
		HAL_Delay(tiempo2*Refresh_ADC_Value());
 800242e:	1cbb      	adds	r3, r7, #2
 8002430:	881b      	ldrh	r3, [r3, #0]
 8002432:	0018      	movs	r0, r3
 8002434:	f7fe fcb2 	bl	8000d9c <__aeabi_i2f>
 8002438:	1c04      	adds	r4, r0, #0
 800243a:	f7ff f8bb 	bl	80015b4 <Refresh_ADC_Value>
 800243e:	1c03      	adds	r3, r0, #0
 8002440:	1c19      	adds	r1, r3, #0
 8002442:	1c20      	adds	r0, r4, #0
 8002444:	f7fe f9b6 	bl	80007b4 <__aeabi_fmul>
 8002448:	1c03      	adds	r3, r0, #0
 800244a:	1c18      	adds	r0, r3, #0
 800244c:	f7fd fee4 	bl	8000218 <__aeabi_f2uiz>
 8002450:	0003      	movs	r3, r0
 8002452:	0018      	movs	r0, r3
 8002454:	f000 fc8e 	bl	8002d74 <HAL_Delay>
	for(uint8_t v=0;v<veces;v++){
 8002458:	210f      	movs	r1, #15
 800245a:	187b      	adds	r3, r7, r1
 800245c:	781a      	ldrb	r2, [r3, #0]
 800245e:	187b      	adds	r3, r7, r1
 8002460:	3201      	adds	r2, #1
 8002462:	701a      	strb	r2, [r3, #0]
 8002464:	230f      	movs	r3, #15
 8002466:	18fa      	adds	r2, r7, r3
 8002468:	1dfb      	adds	r3, r7, #7
 800246a:	7812      	ldrb	r2, [r2, #0]
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	429a      	cmp	r2, r3
 8002470:	d200      	bcs.n	8002474 <VolumenAbrir+0x180>
 8002472:	e753      	b.n	800231c <VolumenAbrir+0x28>
	}
}
 8002474:	46c0      	nop			; (mov r8, r8)
 8002476:	46c0      	nop			; (mov r8, r8)
 8002478:	46bd      	mov	sp, r7
 800247a:	b004      	add	sp, #16
 800247c:	bdb0      	pop	{r4, r5, r7, pc}
 800247e:	46c0      	nop			; (mov r8, r8)
 8002480:	20000000 	.word	0x20000000

08002484 <VolumenAbrir2>:

void VolumenAbrir2(uint8_t veces, uint16_t tiempo, uint16_t tiempo2){
 8002484:	b5b0      	push	{r4, r5, r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	0004      	movs	r4, r0
 800248c:	0008      	movs	r0, r1
 800248e:	0011      	movs	r1, r2
 8002490:	1dfb      	adds	r3, r7, #7
 8002492:	1c22      	adds	r2, r4, #0
 8002494:	701a      	strb	r2, [r3, #0]
 8002496:	1d3b      	adds	r3, r7, #4
 8002498:	1c02      	adds	r2, r0, #0
 800249a:	801a      	strh	r2, [r3, #0]
 800249c:	1cbb      	adds	r3, r7, #2
 800249e:	1c0a      	adds	r2, r1, #0
 80024a0:	801a      	strh	r2, [r3, #0]
	for(uint8_t v=0;v<veces;v++){
 80024a2:	230f      	movs	r3, #15
 80024a4:	18fb      	adds	r3, r7, r3
 80024a6:	2200      	movs	r2, #0
 80024a8:	701a      	strb	r2, [r3, #0]
 80024aa:	e0a3      	b.n	80025f4 <VolumenAbrir2+0x170>
		uint8_t l;
		for(uint8_t i=1;i<=cantLeds;i++){
 80024ac:	230e      	movs	r3, #14
 80024ae:	18fb      	adds	r3, r7, r3
 80024b0:	2201      	movs	r2, #1
 80024b2:	701a      	strb	r2, [r3, #0]
 80024b4:	e07b      	b.n	80025ae <VolumenAbrir2+0x12a>
			l=i;
 80024b6:	250b      	movs	r5, #11
 80024b8:	197b      	adds	r3, r7, r5
 80024ba:	220e      	movs	r2, #14
 80024bc:	18ba      	adds	r2, r7, r2
 80024be:	7812      	ldrb	r2, [r2, #0]
 80024c0:	701a      	strb	r2, [r3, #0]
			HAL_Delay(tiempo*Refresh_ADC_Value());
 80024c2:	1d3b      	adds	r3, r7, #4
 80024c4:	881b      	ldrh	r3, [r3, #0]
 80024c6:	0018      	movs	r0, r3
 80024c8:	f7fe fc68 	bl	8000d9c <__aeabi_i2f>
 80024cc:	1c04      	adds	r4, r0, #0
 80024ce:	f7ff f871 	bl	80015b4 <Refresh_ADC_Value>
 80024d2:	1c03      	adds	r3, r0, #0
 80024d4:	1c19      	adds	r1, r3, #0
 80024d6:	1c20      	adds	r0, r4, #0
 80024d8:	f7fe f96c 	bl	80007b4 <__aeabi_fmul>
 80024dc:	1c03      	adds	r3, r0, #0
 80024de:	1c18      	adds	r0, r3, #0
 80024e0:	f7fd fe9a 	bl	8000218 <__aeabi_f2uiz>
 80024e4:	0003      	movs	r3, r0
 80024e6:	0018      	movs	r0, r3
 80024e8:	f000 fc44 	bl	8002d74 <HAL_Delay>
			for(uint8_t i=l;i<=cantLeds;i++){
 80024ec:	230d      	movs	r3, #13
 80024ee:	18fb      	adds	r3, r7, r3
 80024f0:	197a      	adds	r2, r7, r5
 80024f2:	7812      	ldrb	r2, [r2, #0]
 80024f4:	701a      	strb	r2, [r3, #0]
 80024f6:	e01f      	b.n	8002538 <VolumenAbrir2+0xb4>
				Encender_1_Led_2_1(i);
 80024f8:	250d      	movs	r5, #13
 80024fa:	197b      	adds	r3, r7, r5
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	0018      	movs	r0, r3
 8002500:	f7ff fa7a 	bl	80019f8 <Encender_1_Led_2_1>
				HAL_Delay(tiempo*Refresh_ADC_Value());
 8002504:	1d3b      	adds	r3, r7, #4
 8002506:	881b      	ldrh	r3, [r3, #0]
 8002508:	0018      	movs	r0, r3
 800250a:	f7fe fc47 	bl	8000d9c <__aeabi_i2f>
 800250e:	1c04      	adds	r4, r0, #0
 8002510:	f7ff f850 	bl	80015b4 <Refresh_ADC_Value>
 8002514:	1c03      	adds	r3, r0, #0
 8002516:	1c19      	adds	r1, r3, #0
 8002518:	1c20      	adds	r0, r4, #0
 800251a:	f7fe f94b 	bl	80007b4 <__aeabi_fmul>
 800251e:	1c03      	adds	r3, r0, #0
 8002520:	1c18      	adds	r0, r3, #0
 8002522:	f7fd fe79 	bl	8000218 <__aeabi_f2uiz>
 8002526:	0003      	movs	r3, r0
 8002528:	0018      	movs	r0, r3
 800252a:	f000 fc23 	bl	8002d74 <HAL_Delay>
			for(uint8_t i=l;i<=cantLeds;i++){
 800252e:	197b      	adds	r3, r7, r5
 8002530:	781a      	ldrb	r2, [r3, #0]
 8002532:	197b      	adds	r3, r7, r5
 8002534:	3201      	adds	r2, #1
 8002536:	701a      	strb	r2, [r3, #0]
 8002538:	4b35      	ldr	r3, [pc, #212]	; (8002610 <VolumenAbrir2+0x18c>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	220d      	movs	r2, #13
 800253e:	18ba      	adds	r2, r7, r2
 8002540:	7812      	ldrb	r2, [r2, #0]
 8002542:	429a      	cmp	r2, r3
 8002544:	d9d8      	bls.n	80024f8 <VolumenAbrir2+0x74>
			}
			for(uint8_t i=cantLeds;i>=l;i--){
 8002546:	230c      	movs	r3, #12
 8002548:	18fb      	adds	r3, r7, r3
 800254a:	4a31      	ldr	r2, [pc, #196]	; (8002610 <VolumenAbrir2+0x18c>)
 800254c:	7812      	ldrb	r2, [r2, #0]
 800254e:	701a      	strb	r2, [r3, #0]
 8002550:	e01f      	b.n	8002592 <VolumenAbrir2+0x10e>
				Encender_1_Led_2_1(i);
 8002552:	250c      	movs	r5, #12
 8002554:	197b      	adds	r3, r7, r5
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	0018      	movs	r0, r3
 800255a:	f7ff fa4d 	bl	80019f8 <Encender_1_Led_2_1>
				HAL_Delay(tiempo*Refresh_ADC_Value());
 800255e:	1d3b      	adds	r3, r7, #4
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	0018      	movs	r0, r3
 8002564:	f7fe fc1a 	bl	8000d9c <__aeabi_i2f>
 8002568:	1c04      	adds	r4, r0, #0
 800256a:	f7ff f823 	bl	80015b4 <Refresh_ADC_Value>
 800256e:	1c03      	adds	r3, r0, #0
 8002570:	1c19      	adds	r1, r3, #0
 8002572:	1c20      	adds	r0, r4, #0
 8002574:	f7fe f91e 	bl	80007b4 <__aeabi_fmul>
 8002578:	1c03      	adds	r3, r0, #0
 800257a:	1c18      	adds	r0, r3, #0
 800257c:	f7fd fe4c 	bl	8000218 <__aeabi_f2uiz>
 8002580:	0003      	movs	r3, r0
 8002582:	0018      	movs	r0, r3
 8002584:	f000 fbf6 	bl	8002d74 <HAL_Delay>
			for(uint8_t i=cantLeds;i>=l;i--){
 8002588:	197b      	adds	r3, r7, r5
 800258a:	781a      	ldrb	r2, [r3, #0]
 800258c:	197b      	adds	r3, r7, r5
 800258e:	3a01      	subs	r2, #1
 8002590:	701a      	strb	r2, [r3, #0]
 8002592:	230c      	movs	r3, #12
 8002594:	18fa      	adds	r2, r7, r3
 8002596:	230b      	movs	r3, #11
 8002598:	18fb      	adds	r3, r7, r3
 800259a:	7812      	ldrb	r2, [r2, #0]
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d2d7      	bcs.n	8002552 <VolumenAbrir2+0xce>
		for(uint8_t i=1;i<=cantLeds;i++){
 80025a2:	210e      	movs	r1, #14
 80025a4:	187b      	adds	r3, r7, r1
 80025a6:	781a      	ldrb	r2, [r3, #0]
 80025a8:	187b      	adds	r3, r7, r1
 80025aa:	3201      	adds	r2, #1
 80025ac:	701a      	strb	r2, [r3, #0]
 80025ae:	4b18      	ldr	r3, [pc, #96]	; (8002610 <VolumenAbrir2+0x18c>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	220e      	movs	r2, #14
 80025b4:	18ba      	adds	r2, r7, r2
 80025b6:	7812      	ldrb	r2, [r2, #0]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d800      	bhi.n	80025be <VolumenAbrir2+0x13a>
 80025bc:	e77b      	b.n	80024b6 <VolumenAbrir2+0x32>
			}
		}
		HAL_Delay(tiempo2*Refresh_ADC_Value());
 80025be:	1cbb      	adds	r3, r7, #2
 80025c0:	881b      	ldrh	r3, [r3, #0]
 80025c2:	0018      	movs	r0, r3
 80025c4:	f7fe fbea 	bl	8000d9c <__aeabi_i2f>
 80025c8:	1c04      	adds	r4, r0, #0
 80025ca:	f7fe fff3 	bl	80015b4 <Refresh_ADC_Value>
 80025ce:	1c03      	adds	r3, r0, #0
 80025d0:	1c19      	adds	r1, r3, #0
 80025d2:	1c20      	adds	r0, r4, #0
 80025d4:	f7fe f8ee 	bl	80007b4 <__aeabi_fmul>
 80025d8:	1c03      	adds	r3, r0, #0
 80025da:	1c18      	adds	r0, r3, #0
 80025dc:	f7fd fe1c 	bl	8000218 <__aeabi_f2uiz>
 80025e0:	0003      	movs	r3, r0
 80025e2:	0018      	movs	r0, r3
 80025e4:	f000 fbc6 	bl	8002d74 <HAL_Delay>
	for(uint8_t v=0;v<veces;v++){
 80025e8:	210f      	movs	r1, #15
 80025ea:	187b      	adds	r3, r7, r1
 80025ec:	781a      	ldrb	r2, [r3, #0]
 80025ee:	187b      	adds	r3, r7, r1
 80025f0:	3201      	adds	r2, #1
 80025f2:	701a      	strb	r2, [r3, #0]
 80025f4:	230f      	movs	r3, #15
 80025f6:	18fa      	adds	r2, r7, r3
 80025f8:	1dfb      	adds	r3, r7, #7
 80025fa:	7812      	ldrb	r2, [r2, #0]
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d200      	bcs.n	8002604 <VolumenAbrir2+0x180>
 8002602:	e753      	b.n	80024ac <VolumenAbrir2+0x28>
	}
}
 8002604:	46c0      	nop			; (mov r8, r8)
 8002606:	46c0      	nop			; (mov r8, r8)
 8002608:	46bd      	mov	sp, r7
 800260a:	b004      	add	sp, #16
 800260c:	bdb0      	pop	{r4, r5, r7, pc}
 800260e:	46c0      	nop			; (mov r8, r8)
 8002610:	20000000 	.word	0x20000000

08002614 <ArmarIzquierda>:
			}
		}
	}
}

void ArmarIzquierda(uint8_t veces, uint16_t tiempo, uint16_t tiempo2){
 8002614:	b590      	push	{r4, r7, lr}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	0004      	movs	r4, r0
 800261c:	0008      	movs	r0, r1
 800261e:	0011      	movs	r1, r2
 8002620:	1dfb      	adds	r3, r7, #7
 8002622:	1c22      	adds	r2, r4, #0
 8002624:	701a      	strb	r2, [r3, #0]
 8002626:	1d3b      	adds	r3, r7, #4
 8002628:	1c02      	adds	r2, r0, #0
 800262a:	801a      	strh	r2, [r3, #0]
 800262c:	1cbb      	adds	r3, r7, #2
 800262e:	1c0a      	adds	r2, r1, #0
 8002630:	801a      	strh	r2, [r3, #0]
	for(uint8_t v=0;v<veces;v++){
 8002632:	230f      	movs	r3, #15
 8002634:	18fb      	adds	r3, r7, r3
 8002636:	2200      	movs	r2, #0
 8002638:	701a      	strb	r2, [r3, #0]
 800263a:	e0c1      	b.n	80027c0 <ArmarIzquierda+0x1ac>

		uint8_t l=1;
 800263c:	230e      	movs	r3, #14
 800263e:	18fb      	adds	r3, r7, r3
 8002640:	2201      	movs	r2, #1
 8002642:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=cantLeds;i>=1;i--){
 8002644:	230d      	movs	r3, #13
 8002646:	18fb      	adds	r3, r7, r3
 8002648:	4a64      	ldr	r2, [pc, #400]	; (80027dc <ArmarIzquierda+0x1c8>)
 800264a:	7812      	ldrb	r2, [r2, #0]
 800264c:	701a      	strb	r2, [r3, #0]
 800264e:	e096      	b.n	800277e <ArmarIzquierda+0x16a>
			for(uint8_t i=cantLeds;i>=l;i--){
 8002650:	230c      	movs	r3, #12
 8002652:	18fb      	adds	r3, r7, r3
 8002654:	4a61      	ldr	r2, [pc, #388]	; (80027dc <ArmarIzquierda+0x1c8>)
 8002656:	7812      	ldrb	r2, [r2, #0]
 8002658:	701a      	strb	r2, [r3, #0]
 800265a:	e06b      	b.n	8002734 <ArmarIzquierda+0x120>
				Encender_1_Led_4(i,l);
 800265c:	240e      	movs	r4, #14
 800265e:	193b      	adds	r3, r7, r4
 8002660:	781a      	ldrb	r2, [r3, #0]
 8002662:	230c      	movs	r3, #12
 8002664:	18fb      	adds	r3, r7, r3
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	0011      	movs	r1, r2
 800266a:	0018      	movs	r0, r3
 800266c:	f7ff f9fc 	bl	8001a68 <Encender_1_Led_4>
				if(l<cantLeds/2){
 8002670:	4b5a      	ldr	r3, [pc, #360]	; (80027dc <ArmarIzquierda+0x1c8>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	085b      	lsrs	r3, r3, #1
 8002676:	b2db      	uxtb	r3, r3
 8002678:	193a      	adds	r2, r7, r4
 800267a:	7812      	ldrb	r2, [r2, #0]
 800267c:	429a      	cmp	r2, r3
 800267e:	d215      	bcs.n	80026ac <ArmarIzquierda+0x98>
					HAL_Delay(tiempo*Refresh_ADC_Value());
 8002680:	1d3b      	adds	r3, r7, #4
 8002682:	881b      	ldrh	r3, [r3, #0]
 8002684:	0018      	movs	r0, r3
 8002686:	f7fe fb89 	bl	8000d9c <__aeabi_i2f>
 800268a:	1c04      	adds	r4, r0, #0
 800268c:	f7fe ff92 	bl	80015b4 <Refresh_ADC_Value>
 8002690:	1c03      	adds	r3, r0, #0
 8002692:	1c19      	adds	r1, r3, #0
 8002694:	1c20      	adds	r0, r4, #0
 8002696:	f7fe f88d 	bl	80007b4 <__aeabi_fmul>
 800269a:	1c03      	adds	r3, r0, #0
 800269c:	1c18      	adds	r0, r3, #0
 800269e:	f7fd fdbb 	bl	8000218 <__aeabi_f2uiz>
 80026a2:	0003      	movs	r3, r0
 80026a4:	0018      	movs	r0, r3
 80026a6:	f000 fb65 	bl	8002d74 <HAL_Delay>
 80026aa:	e03d      	b.n	8002728 <ArmarIzquierda+0x114>
				}else if(l>=cantLeds-2){
 80026ac:	230e      	movs	r3, #14
 80026ae:	18fb      	adds	r3, r7, r3
 80026b0:	781a      	ldrb	r2, [r3, #0]
 80026b2:	4b4a      	ldr	r3, [pc, #296]	; (80027dc <ArmarIzquierda+0x1c8>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	3b02      	subs	r3, #2
 80026b8:	429a      	cmp	r2, r3
 80026ba:	db1b      	blt.n	80026f4 <ArmarIzquierda+0xe0>
					HAL_Delay(tiempo*Refresh_ADC_Value()*4);
 80026bc:	1d3b      	adds	r3, r7, #4
 80026be:	881b      	ldrh	r3, [r3, #0]
 80026c0:	0018      	movs	r0, r3
 80026c2:	f7fe fb6b 	bl	8000d9c <__aeabi_i2f>
 80026c6:	1c04      	adds	r4, r0, #0
 80026c8:	f7fe ff74 	bl	80015b4 <Refresh_ADC_Value>
 80026cc:	1c03      	adds	r3, r0, #0
 80026ce:	1c19      	adds	r1, r3, #0
 80026d0:	1c20      	adds	r0, r4, #0
 80026d2:	f7fe f86f 	bl	80007b4 <__aeabi_fmul>
 80026d6:	1c03      	adds	r3, r0, #0
 80026d8:	2181      	movs	r1, #129	; 0x81
 80026da:	05c9      	lsls	r1, r1, #23
 80026dc:	1c18      	adds	r0, r3, #0
 80026de:	f7fe f869 	bl	80007b4 <__aeabi_fmul>
 80026e2:	1c03      	adds	r3, r0, #0
 80026e4:	1c18      	adds	r0, r3, #0
 80026e6:	f7fd fd97 	bl	8000218 <__aeabi_f2uiz>
 80026ea:	0003      	movs	r3, r0
 80026ec:	0018      	movs	r0, r3
 80026ee:	f000 fb41 	bl	8002d74 <HAL_Delay>
 80026f2:	e019      	b.n	8002728 <ArmarIzquierda+0x114>
				}else{
					HAL_Delay(tiempo*Refresh_ADC_Value()*2);
 80026f4:	1d3b      	adds	r3, r7, #4
 80026f6:	881b      	ldrh	r3, [r3, #0]
 80026f8:	0018      	movs	r0, r3
 80026fa:	f7fe fb4f 	bl	8000d9c <__aeabi_i2f>
 80026fe:	1c04      	adds	r4, r0, #0
 8002700:	f7fe ff58 	bl	80015b4 <Refresh_ADC_Value>
 8002704:	1c03      	adds	r3, r0, #0
 8002706:	1c19      	adds	r1, r3, #0
 8002708:	1c20      	adds	r0, r4, #0
 800270a:	f7fe f853 	bl	80007b4 <__aeabi_fmul>
 800270e:	1c03      	adds	r3, r0, #0
 8002710:	1c19      	adds	r1, r3, #0
 8002712:	1c18      	adds	r0, r3, #0
 8002714:	f7fd fd98 	bl	8000248 <__aeabi_fadd>
 8002718:	1c03      	adds	r3, r0, #0
 800271a:	1c18      	adds	r0, r3, #0
 800271c:	f7fd fd7c 	bl	8000218 <__aeabi_f2uiz>
 8002720:	0003      	movs	r3, r0
 8002722:	0018      	movs	r0, r3
 8002724:	f000 fb26 	bl	8002d74 <HAL_Delay>
			for(uint8_t i=cantLeds;i>=l;i--){
 8002728:	210c      	movs	r1, #12
 800272a:	187b      	adds	r3, r7, r1
 800272c:	781a      	ldrb	r2, [r3, #0]
 800272e:	187b      	adds	r3, r7, r1
 8002730:	3a01      	subs	r2, #1
 8002732:	701a      	strb	r2, [r3, #0]
 8002734:	230c      	movs	r3, #12
 8002736:	18fa      	adds	r2, r7, r3
 8002738:	210e      	movs	r1, #14
 800273a:	187b      	adds	r3, r7, r1
 800273c:	7812      	ldrb	r2, [r2, #0]
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	429a      	cmp	r2, r3
 8002742:	d28b      	bcs.n	800265c <ArmarIzquierda+0x48>
				}
				//HAL_Delay(tiempo);
			}

			if(l>=cantLeds){
 8002744:	4b25      	ldr	r3, [pc, #148]	; (80027dc <ArmarIzquierda+0x1c8>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	187a      	adds	r2, r7, r1
 800274a:	7812      	ldrb	r2, [r2, #0]
 800274c:	429a      	cmp	r2, r3
 800274e:	d303      	bcc.n	8002758 <ArmarIzquierda+0x144>
				l=1;
 8002750:	187b      	adds	r3, r7, r1
 8002752:	2201      	movs	r2, #1
 8002754:	701a      	strb	r2, [r3, #0]
 8002756:	e00c      	b.n	8002772 <ArmarIzquierda+0x15e>
			}else{
				ControlLeds(l, 1);
 8002758:	240e      	movs	r4, #14
 800275a:	193b      	adds	r3, r7, r4
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	2101      	movs	r1, #1
 8002760:	0018      	movs	r0, r3
 8002762:	f7fe ff51 	bl	8001608 <ControlLeds>
				l++;
 8002766:	0021      	movs	r1, r4
 8002768:	187b      	adds	r3, r7, r1
 800276a:	781a      	ldrb	r2, [r3, #0]
 800276c:	187b      	adds	r3, r7, r1
 800276e:	3201      	adds	r2, #1
 8002770:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=cantLeds;i>=1;i--){
 8002772:	210d      	movs	r1, #13
 8002774:	187b      	adds	r3, r7, r1
 8002776:	781a      	ldrb	r2, [r3, #0]
 8002778:	187b      	adds	r3, r7, r1
 800277a:	3a01      	subs	r2, #1
 800277c:	701a      	strb	r2, [r3, #0]
 800277e:	230d      	movs	r3, #13
 8002780:	18fb      	adds	r3, r7, r3
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d000      	beq.n	800278a <ArmarIzquierda+0x176>
 8002788:	e762      	b.n	8002650 <ArmarIzquierda+0x3c>
			}
		}

		HAL_Delay(tiempo2*Refresh_ADC_Value());
 800278a:	1cbb      	adds	r3, r7, #2
 800278c:	881b      	ldrh	r3, [r3, #0]
 800278e:	0018      	movs	r0, r3
 8002790:	f7fe fb04 	bl	8000d9c <__aeabi_i2f>
 8002794:	1c04      	adds	r4, r0, #0
 8002796:	f7fe ff0d 	bl	80015b4 <Refresh_ADC_Value>
 800279a:	1c03      	adds	r3, r0, #0
 800279c:	1c19      	adds	r1, r3, #0
 800279e:	1c20      	adds	r0, r4, #0
 80027a0:	f7fe f808 	bl	80007b4 <__aeabi_fmul>
 80027a4:	1c03      	adds	r3, r0, #0
 80027a6:	1c18      	adds	r0, r3, #0
 80027a8:	f7fd fd36 	bl	8000218 <__aeabi_f2uiz>
 80027ac:	0003      	movs	r3, r0
 80027ae:	0018      	movs	r0, r3
 80027b0:	f000 fae0 	bl	8002d74 <HAL_Delay>
	for(uint8_t v=0;v<veces;v++){
 80027b4:	210f      	movs	r1, #15
 80027b6:	187b      	adds	r3, r7, r1
 80027b8:	781a      	ldrb	r2, [r3, #0]
 80027ba:	187b      	adds	r3, r7, r1
 80027bc:	3201      	adds	r2, #1
 80027be:	701a      	strb	r2, [r3, #0]
 80027c0:	230f      	movs	r3, #15
 80027c2:	18fa      	adds	r2, r7, r3
 80027c4:	1dfb      	adds	r3, r7, #7
 80027c6:	7812      	ldrb	r2, [r2, #0]
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d200      	bcs.n	80027d0 <ArmarIzquierda+0x1bc>
 80027ce:	e735      	b.n	800263c <ArmarIzquierda+0x28>
	}
}
 80027d0:	46c0      	nop			; (mov r8, r8)
 80027d2:	46c0      	nop			; (mov r8, r8)
 80027d4:	46bd      	mov	sp, r7
 80027d6:	b005      	add	sp, #20
 80027d8:	bd90      	pop	{r4, r7, pc}
 80027da:	46c0      	nop			; (mov r8, r8)
 80027dc:	20000000 	.word	0x20000000

080027e0 <ArmarIzquierda2>:

void ArmarIzquierda2(uint8_t veces, uint16_t tiempo, uint16_t tiempo2){
 80027e0:	b590      	push	{r4, r7, lr}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	0004      	movs	r4, r0
 80027e8:	0008      	movs	r0, r1
 80027ea:	0011      	movs	r1, r2
 80027ec:	1dfb      	adds	r3, r7, #7
 80027ee:	1c22      	adds	r2, r4, #0
 80027f0:	701a      	strb	r2, [r3, #0]
 80027f2:	1d3b      	adds	r3, r7, #4
 80027f4:	1c02      	adds	r2, r0, #0
 80027f6:	801a      	strh	r2, [r3, #0]
 80027f8:	1cbb      	adds	r3, r7, #2
 80027fa:	1c0a      	adds	r2, r1, #0
 80027fc:	801a      	strh	r2, [r3, #0]
	for(uint8_t v=0;v<veces;v++){
 80027fe:	230f      	movs	r3, #15
 8002800:	18fb      	adds	r3, r7, r3
 8002802:	2200      	movs	r2, #0
 8002804:	701a      	strb	r2, [r3, #0]
 8002806:	e0c2      	b.n	800298e <ArmarIzquierda2+0x1ae>

		uint8_t l=1;
 8002808:	230e      	movs	r3, #14
 800280a:	18fb      	adds	r3, r7, r3
 800280c:	2201      	movs	r2, #1
 800280e:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=cantLeds;i>=1;i--){
 8002810:	230d      	movs	r3, #13
 8002812:	18fb      	adds	r3, r7, r3
 8002814:	4a64      	ldr	r2, [pc, #400]	; (80029a8 <ArmarIzquierda2+0x1c8>)
 8002816:	7812      	ldrb	r2, [r2, #0]
 8002818:	701a      	strb	r2, [r3, #0]
 800281a:	e097      	b.n	800294c <ArmarIzquierda2+0x16c>
			for(uint8_t i=cantLeds;i>=l;i--){
 800281c:	230c      	movs	r3, #12
 800281e:	18fb      	adds	r3, r7, r3
 8002820:	4a61      	ldr	r2, [pc, #388]	; (80029a8 <ArmarIzquierda2+0x1c8>)
 8002822:	7812      	ldrb	r2, [r2, #0]
 8002824:	701a      	strb	r2, [r3, #0]
 8002826:	e06b      	b.n	8002900 <ArmarIzquierda2+0x120>
				Encender_1_Led_4_1(i,l);
 8002828:	240e      	movs	r4, #14
 800282a:	193b      	adds	r3, r7, r4
 800282c:	781a      	ldrb	r2, [r3, #0]
 800282e:	230c      	movs	r3, #12
 8002830:	18fb      	adds	r3, r7, r3
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	0011      	movs	r1, r2
 8002836:	0018      	movs	r0, r3
 8002838:	f7ff f94e 	bl	8001ad8 <Encender_1_Led_4_1>
				if(l<cantLeds/2){
 800283c:	4b5a      	ldr	r3, [pc, #360]	; (80029a8 <ArmarIzquierda2+0x1c8>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	085b      	lsrs	r3, r3, #1
 8002842:	b2db      	uxtb	r3, r3
 8002844:	193a      	adds	r2, r7, r4
 8002846:	7812      	ldrb	r2, [r2, #0]
 8002848:	429a      	cmp	r2, r3
 800284a:	d215      	bcs.n	8002878 <ArmarIzquierda2+0x98>
					HAL_Delay(tiempo*Refresh_ADC_Value());
 800284c:	1d3b      	adds	r3, r7, #4
 800284e:	881b      	ldrh	r3, [r3, #0]
 8002850:	0018      	movs	r0, r3
 8002852:	f7fe faa3 	bl	8000d9c <__aeabi_i2f>
 8002856:	1c04      	adds	r4, r0, #0
 8002858:	f7fe feac 	bl	80015b4 <Refresh_ADC_Value>
 800285c:	1c03      	adds	r3, r0, #0
 800285e:	1c19      	adds	r1, r3, #0
 8002860:	1c20      	adds	r0, r4, #0
 8002862:	f7fd ffa7 	bl	80007b4 <__aeabi_fmul>
 8002866:	1c03      	adds	r3, r0, #0
 8002868:	1c18      	adds	r0, r3, #0
 800286a:	f7fd fcd5 	bl	8000218 <__aeabi_f2uiz>
 800286e:	0003      	movs	r3, r0
 8002870:	0018      	movs	r0, r3
 8002872:	f000 fa7f 	bl	8002d74 <HAL_Delay>
 8002876:	e03d      	b.n	80028f4 <ArmarIzquierda2+0x114>
				}else if(l>=cantLeds-2){
 8002878:	230e      	movs	r3, #14
 800287a:	18fb      	adds	r3, r7, r3
 800287c:	781a      	ldrb	r2, [r3, #0]
 800287e:	4b4a      	ldr	r3, [pc, #296]	; (80029a8 <ArmarIzquierda2+0x1c8>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	3b02      	subs	r3, #2
 8002884:	429a      	cmp	r2, r3
 8002886:	db1b      	blt.n	80028c0 <ArmarIzquierda2+0xe0>
					HAL_Delay(tiempo*Refresh_ADC_Value()*4);
 8002888:	1d3b      	adds	r3, r7, #4
 800288a:	881b      	ldrh	r3, [r3, #0]
 800288c:	0018      	movs	r0, r3
 800288e:	f7fe fa85 	bl	8000d9c <__aeabi_i2f>
 8002892:	1c04      	adds	r4, r0, #0
 8002894:	f7fe fe8e 	bl	80015b4 <Refresh_ADC_Value>
 8002898:	1c03      	adds	r3, r0, #0
 800289a:	1c19      	adds	r1, r3, #0
 800289c:	1c20      	adds	r0, r4, #0
 800289e:	f7fd ff89 	bl	80007b4 <__aeabi_fmul>
 80028a2:	1c03      	adds	r3, r0, #0
 80028a4:	2181      	movs	r1, #129	; 0x81
 80028a6:	05c9      	lsls	r1, r1, #23
 80028a8:	1c18      	adds	r0, r3, #0
 80028aa:	f7fd ff83 	bl	80007b4 <__aeabi_fmul>
 80028ae:	1c03      	adds	r3, r0, #0
 80028b0:	1c18      	adds	r0, r3, #0
 80028b2:	f7fd fcb1 	bl	8000218 <__aeabi_f2uiz>
 80028b6:	0003      	movs	r3, r0
 80028b8:	0018      	movs	r0, r3
 80028ba:	f000 fa5b 	bl	8002d74 <HAL_Delay>
 80028be:	e019      	b.n	80028f4 <ArmarIzquierda2+0x114>
				}else{
					HAL_Delay(tiempo*Refresh_ADC_Value()*2);
 80028c0:	1d3b      	adds	r3, r7, #4
 80028c2:	881b      	ldrh	r3, [r3, #0]
 80028c4:	0018      	movs	r0, r3
 80028c6:	f7fe fa69 	bl	8000d9c <__aeabi_i2f>
 80028ca:	1c04      	adds	r4, r0, #0
 80028cc:	f7fe fe72 	bl	80015b4 <Refresh_ADC_Value>
 80028d0:	1c03      	adds	r3, r0, #0
 80028d2:	1c19      	adds	r1, r3, #0
 80028d4:	1c20      	adds	r0, r4, #0
 80028d6:	f7fd ff6d 	bl	80007b4 <__aeabi_fmul>
 80028da:	1c03      	adds	r3, r0, #0
 80028dc:	1c19      	adds	r1, r3, #0
 80028de:	1c18      	adds	r0, r3, #0
 80028e0:	f7fd fcb2 	bl	8000248 <__aeabi_fadd>
 80028e4:	1c03      	adds	r3, r0, #0
 80028e6:	1c18      	adds	r0, r3, #0
 80028e8:	f7fd fc96 	bl	8000218 <__aeabi_f2uiz>
 80028ec:	0003      	movs	r3, r0
 80028ee:	0018      	movs	r0, r3
 80028f0:	f000 fa40 	bl	8002d74 <HAL_Delay>
			for(uint8_t i=cantLeds;i>=l;i--){
 80028f4:	210c      	movs	r1, #12
 80028f6:	187b      	adds	r3, r7, r1
 80028f8:	781a      	ldrb	r2, [r3, #0]
 80028fa:	187b      	adds	r3, r7, r1
 80028fc:	3a01      	subs	r2, #1
 80028fe:	701a      	strb	r2, [r3, #0]
 8002900:	230c      	movs	r3, #12
 8002902:	18fa      	adds	r2, r7, r3
 8002904:	210e      	movs	r1, #14
 8002906:	187b      	adds	r3, r7, r1
 8002908:	7812      	ldrb	r2, [r2, #0]
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	429a      	cmp	r2, r3
 800290e:	d28b      	bcs.n	8002828 <ArmarIzquierda2+0x48>
				}
				//HAL_Delay(tiempo);
			}

			if(l>=cantLeds){
 8002910:	4b25      	ldr	r3, [pc, #148]	; (80029a8 <ArmarIzquierda2+0x1c8>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	187a      	adds	r2, r7, r1
 8002916:	7812      	ldrb	r2, [r2, #0]
 8002918:	429a      	cmp	r2, r3
 800291a:	d303      	bcc.n	8002924 <ArmarIzquierda2+0x144>
				l=1;
 800291c:	187b      	adds	r3, r7, r1
 800291e:	2201      	movs	r2, #1
 8002920:	701a      	strb	r2, [r3, #0]
 8002922:	e00d      	b.n	8002940 <ArmarIzquierda2+0x160>
			}else{
				ControlLeds2(l+10, 1);
 8002924:	240e      	movs	r4, #14
 8002926:	193b      	adds	r3, r7, r4
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	330a      	adds	r3, #10
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2101      	movs	r1, #1
 8002930:	0018      	movs	r0, r3
 8002932:	f7fe fee1 	bl	80016f8 <ControlLeds2>
				l++;
 8002936:	193b      	adds	r3, r7, r4
 8002938:	781a      	ldrb	r2, [r3, #0]
 800293a:	193b      	adds	r3, r7, r4
 800293c:	3201      	adds	r2, #1
 800293e:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=cantLeds;i>=1;i--){
 8002940:	210d      	movs	r1, #13
 8002942:	187b      	adds	r3, r7, r1
 8002944:	781a      	ldrb	r2, [r3, #0]
 8002946:	187b      	adds	r3, r7, r1
 8002948:	3a01      	subs	r2, #1
 800294a:	701a      	strb	r2, [r3, #0]
 800294c:	230d      	movs	r3, #13
 800294e:	18fb      	adds	r3, r7, r3
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d000      	beq.n	8002958 <ArmarIzquierda2+0x178>
 8002956:	e761      	b.n	800281c <ArmarIzquierda2+0x3c>
			}
		}

		HAL_Delay(tiempo2*Refresh_ADC_Value());
 8002958:	1cbb      	adds	r3, r7, #2
 800295a:	881b      	ldrh	r3, [r3, #0]
 800295c:	0018      	movs	r0, r3
 800295e:	f7fe fa1d 	bl	8000d9c <__aeabi_i2f>
 8002962:	1c04      	adds	r4, r0, #0
 8002964:	f7fe fe26 	bl	80015b4 <Refresh_ADC_Value>
 8002968:	1c03      	adds	r3, r0, #0
 800296a:	1c19      	adds	r1, r3, #0
 800296c:	1c20      	adds	r0, r4, #0
 800296e:	f7fd ff21 	bl	80007b4 <__aeabi_fmul>
 8002972:	1c03      	adds	r3, r0, #0
 8002974:	1c18      	adds	r0, r3, #0
 8002976:	f7fd fc4f 	bl	8000218 <__aeabi_f2uiz>
 800297a:	0003      	movs	r3, r0
 800297c:	0018      	movs	r0, r3
 800297e:	f000 f9f9 	bl	8002d74 <HAL_Delay>
	for(uint8_t v=0;v<veces;v++){
 8002982:	210f      	movs	r1, #15
 8002984:	187b      	adds	r3, r7, r1
 8002986:	781a      	ldrb	r2, [r3, #0]
 8002988:	187b      	adds	r3, r7, r1
 800298a:	3201      	adds	r2, #1
 800298c:	701a      	strb	r2, [r3, #0]
 800298e:	230f      	movs	r3, #15
 8002990:	18fa      	adds	r2, r7, r3
 8002992:	1dfb      	adds	r3, r7, #7
 8002994:	7812      	ldrb	r2, [r2, #0]
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	429a      	cmp	r2, r3
 800299a:	d200      	bcs.n	800299e <ArmarIzquierda2+0x1be>
 800299c:	e734      	b.n	8002808 <ArmarIzquierda2+0x28>
	}
}
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	46c0      	nop			; (mov r8, r8)
 80029a2:	46bd      	mov	sp, r7
 80029a4:	b005      	add	sp, #20
 80029a6:	bd90      	pop	{r4, r7, pc}
 80029a8:	20000000 	.word	0x20000000

080029ac <Blink>:

void Blink(uint8_t veces, uint16_t tiempo){
 80029ac:	b590      	push	{r4, r7, lr}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	0002      	movs	r2, r0
 80029b4:	1dfb      	adds	r3, r7, #7
 80029b6:	701a      	strb	r2, [r3, #0]
 80029b8:	1d3b      	adds	r3, r7, #4
 80029ba:	1c0a      	adds	r2, r1, #0
 80029bc:	801a      	strh	r2, [r3, #0]
	for(uint8_t v=0;v<veces;v++){
 80029be:	230f      	movs	r3, #15
 80029c0:	18fb      	adds	r3, r7, r3
 80029c2:	2200      	movs	r2, #0
 80029c4:	701a      	strb	r2, [r3, #0]
 80029c6:	e074      	b.n	8002ab2 <Blink+0x106>
		for(uint8_t i=1;i<=cantLeds;i++){
 80029c8:	230e      	movs	r3, #14
 80029ca:	18fb      	adds	r3, r7, r3
 80029cc:	2201      	movs	r2, #1
 80029ce:	701a      	strb	r2, [r3, #0]
 80029d0:	e013      	b.n	80029fa <Blink+0x4e>
			ControlLeds(i, 1);ControlLeds2(i+10,1);
 80029d2:	240e      	movs	r4, #14
 80029d4:	193b      	adds	r3, r7, r4
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2101      	movs	r1, #1
 80029da:	0018      	movs	r0, r3
 80029dc:	f7fe fe14 	bl	8001608 <ControlLeds>
 80029e0:	193b      	adds	r3, r7, r4
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	330a      	adds	r3, #10
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2101      	movs	r1, #1
 80029ea:	0018      	movs	r0, r3
 80029ec:	f7fe fe84 	bl	80016f8 <ControlLeds2>
		for(uint8_t i=1;i<=cantLeds;i++){
 80029f0:	193b      	adds	r3, r7, r4
 80029f2:	781a      	ldrb	r2, [r3, #0]
 80029f4:	193b      	adds	r3, r7, r4
 80029f6:	3201      	adds	r2, #1
 80029f8:	701a      	strb	r2, [r3, #0]
 80029fa:	4b34      	ldr	r3, [pc, #208]	; (8002acc <Blink+0x120>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	220e      	movs	r2, #14
 8002a00:	18ba      	adds	r2, r7, r2
 8002a02:	7812      	ldrb	r2, [r2, #0]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d9e4      	bls.n	80029d2 <Blink+0x26>
		}
		HAL_Delay(tiempo*Refresh_ADC_Value());
 8002a08:	1d3b      	adds	r3, r7, #4
 8002a0a:	881b      	ldrh	r3, [r3, #0]
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	f7fe f9c5 	bl	8000d9c <__aeabi_i2f>
 8002a12:	1c04      	adds	r4, r0, #0
 8002a14:	f7fe fdce 	bl	80015b4 <Refresh_ADC_Value>
 8002a18:	1c03      	adds	r3, r0, #0
 8002a1a:	1c19      	adds	r1, r3, #0
 8002a1c:	1c20      	adds	r0, r4, #0
 8002a1e:	f7fd fec9 	bl	80007b4 <__aeabi_fmul>
 8002a22:	1c03      	adds	r3, r0, #0
 8002a24:	1c18      	adds	r0, r3, #0
 8002a26:	f7fd fbf7 	bl	8000218 <__aeabi_f2uiz>
 8002a2a:	0003      	movs	r3, r0
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	f000 f9a1 	bl	8002d74 <HAL_Delay>
		for(uint8_t i=1;i<=cantLeds;i++){
 8002a32:	230d      	movs	r3, #13
 8002a34:	18fb      	adds	r3, r7, r3
 8002a36:	2201      	movs	r2, #1
 8002a38:	701a      	strb	r2, [r3, #0]
 8002a3a:	e013      	b.n	8002a64 <Blink+0xb8>
			ControlLeds(i, 0);ControlLeds2(i+10,0);
 8002a3c:	240d      	movs	r4, #13
 8002a3e:	193b      	adds	r3, r7, r4
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	2100      	movs	r1, #0
 8002a44:	0018      	movs	r0, r3
 8002a46:	f7fe fddf 	bl	8001608 <ControlLeds>
 8002a4a:	193b      	adds	r3, r7, r4
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	330a      	adds	r3, #10
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2100      	movs	r1, #0
 8002a54:	0018      	movs	r0, r3
 8002a56:	f7fe fe4f 	bl	80016f8 <ControlLeds2>
		for(uint8_t i=1;i<=cantLeds;i++){
 8002a5a:	193b      	adds	r3, r7, r4
 8002a5c:	781a      	ldrb	r2, [r3, #0]
 8002a5e:	193b      	adds	r3, r7, r4
 8002a60:	3201      	adds	r2, #1
 8002a62:	701a      	strb	r2, [r3, #0]
 8002a64:	4b19      	ldr	r3, [pc, #100]	; (8002acc <Blink+0x120>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	220d      	movs	r2, #13
 8002a6a:	18ba      	adds	r2, r7, r2
 8002a6c:	7812      	ldrb	r2, [r2, #0]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d9e4      	bls.n	8002a3c <Blink+0x90>
		}
		HAL_Delay(tiempo*Refresh_ADC_Value()/5);
 8002a72:	1d3b      	adds	r3, r7, #4
 8002a74:	881b      	ldrh	r3, [r3, #0]
 8002a76:	0018      	movs	r0, r3
 8002a78:	f7fe f990 	bl	8000d9c <__aeabi_i2f>
 8002a7c:	1c04      	adds	r4, r0, #0
 8002a7e:	f7fe fd99 	bl	80015b4 <Refresh_ADC_Value>
 8002a82:	1c03      	adds	r3, r0, #0
 8002a84:	1c19      	adds	r1, r3, #0
 8002a86:	1c20      	adds	r0, r4, #0
 8002a88:	f7fd fe94 	bl	80007b4 <__aeabi_fmul>
 8002a8c:	1c03      	adds	r3, r0, #0
 8002a8e:	4910      	ldr	r1, [pc, #64]	; (8002ad0 <Blink+0x124>)
 8002a90:	1c18      	adds	r0, r3, #0
 8002a92:	f7fd fd77 	bl	8000584 <__aeabi_fdiv>
 8002a96:	1c03      	adds	r3, r0, #0
 8002a98:	1c18      	adds	r0, r3, #0
 8002a9a:	f7fd fbbd 	bl	8000218 <__aeabi_f2uiz>
 8002a9e:	0003      	movs	r3, r0
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	f000 f967 	bl	8002d74 <HAL_Delay>
	for(uint8_t v=0;v<veces;v++){
 8002aa6:	210f      	movs	r1, #15
 8002aa8:	187b      	adds	r3, r7, r1
 8002aaa:	781a      	ldrb	r2, [r3, #0]
 8002aac:	187b      	adds	r3, r7, r1
 8002aae:	3201      	adds	r2, #1
 8002ab0:	701a      	strb	r2, [r3, #0]
 8002ab2:	230f      	movs	r3, #15
 8002ab4:	18fa      	adds	r2, r7, r3
 8002ab6:	1dfb      	adds	r3, r7, #7
 8002ab8:	7812      	ldrb	r2, [r2, #0]
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d383      	bcc.n	80029c8 <Blink+0x1c>
	}
}
 8002ac0:	46c0      	nop			; (mov r8, r8)
 8002ac2:	46c0      	nop			; (mov r8, r8)
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	b005      	add	sp, #20
 8002ac8:	bd90      	pop	{r4, r7, pc}
 8002aca:	46c0      	nop			; (mov r8, r8)
 8002acc:	20000000 	.word	0x20000000
 8002ad0:	40a00000 	.word	0x40a00000

08002ad4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ad8:	b672      	cpsid	i
}
 8002ada:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002adc:	e7fe      	b.n	8002adc <Error_Handler+0x8>
	...

08002ae0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ae6:	4b0f      	ldr	r3, [pc, #60]	; (8002b24 <HAL_MspInit+0x44>)
 8002ae8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002aea:	4b0e      	ldr	r3, [pc, #56]	; (8002b24 <HAL_MspInit+0x44>)
 8002aec:	2101      	movs	r1, #1
 8002aee:	430a      	orrs	r2, r1
 8002af0:	641a      	str	r2, [r3, #64]	; 0x40
 8002af2:	4b0c      	ldr	r3, [pc, #48]	; (8002b24 <HAL_MspInit+0x44>)
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	2201      	movs	r2, #1
 8002af8:	4013      	ands	r3, r2
 8002afa:	607b      	str	r3, [r7, #4]
 8002afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002afe:	4b09      	ldr	r3, [pc, #36]	; (8002b24 <HAL_MspInit+0x44>)
 8002b00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b02:	4b08      	ldr	r3, [pc, #32]	; (8002b24 <HAL_MspInit+0x44>)
 8002b04:	2180      	movs	r1, #128	; 0x80
 8002b06:	0549      	lsls	r1, r1, #21
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b0c:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <HAL_MspInit+0x44>)
 8002b0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b10:	2380      	movs	r3, #128	; 0x80
 8002b12:	055b      	lsls	r3, r3, #21
 8002b14:	4013      	ands	r3, r2
 8002b16:	603b      	str	r3, [r7, #0]
 8002b18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	b002      	add	sp, #8
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	40021000 	.word	0x40021000

08002b28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b28:	b590      	push	{r4, r7, lr}
 8002b2a:	b08b      	sub	sp, #44	; 0x2c
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b30:	2414      	movs	r4, #20
 8002b32:	193b      	adds	r3, r7, r4
 8002b34:	0018      	movs	r0, r3
 8002b36:	2314      	movs	r3, #20
 8002b38:	001a      	movs	r2, r3
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	f001 ffb0 	bl	8004aa0 <memset>
  if(hadc->Instance==ADC1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a1b      	ldr	r2, [pc, #108]	; (8002bb4 <HAL_ADC_MspInit+0x8c>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d130      	bne.n	8002bac <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002b4a:	4b1b      	ldr	r3, [pc, #108]	; (8002bb8 <HAL_ADC_MspInit+0x90>)
 8002b4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b4e:	4b1a      	ldr	r3, [pc, #104]	; (8002bb8 <HAL_ADC_MspInit+0x90>)
 8002b50:	2180      	movs	r1, #128	; 0x80
 8002b52:	0349      	lsls	r1, r1, #13
 8002b54:	430a      	orrs	r2, r1
 8002b56:	641a      	str	r2, [r3, #64]	; 0x40
 8002b58:	4b17      	ldr	r3, [pc, #92]	; (8002bb8 <HAL_ADC_MspInit+0x90>)
 8002b5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b5c:	2380      	movs	r3, #128	; 0x80
 8002b5e:	035b      	lsls	r3, r3, #13
 8002b60:	4013      	ands	r3, r2
 8002b62:	613b      	str	r3, [r7, #16]
 8002b64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b66:	4b14      	ldr	r3, [pc, #80]	; (8002bb8 <HAL_ADC_MspInit+0x90>)
 8002b68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b6a:	4b13      	ldr	r3, [pc, #76]	; (8002bb8 <HAL_ADC_MspInit+0x90>)
 8002b6c:	2102      	movs	r1, #2
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	635a      	str	r2, [r3, #52]	; 0x34
 8002b72:	4b11      	ldr	r3, [pc, #68]	; (8002bb8 <HAL_ADC_MspInit+0x90>)
 8002b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b76:	2202      	movs	r2, #2
 8002b78:	4013      	ands	r3, r2
 8002b7a:	60fb      	str	r3, [r7, #12]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB7     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002b7e:	193b      	adds	r3, r7, r4
 8002b80:	2280      	movs	r2, #128	; 0x80
 8002b82:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b84:	193b      	adds	r3, r7, r4
 8002b86:	2203      	movs	r2, #3
 8002b88:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8a:	193b      	adds	r3, r7, r4
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b90:	193b      	adds	r3, r7, r4
 8002b92:	4a0a      	ldr	r2, [pc, #40]	; (8002bbc <HAL_ADC_MspInit+0x94>)
 8002b94:	0019      	movs	r1, r3
 8002b96:	0010      	movs	r0, r2
 8002b98:	f001 f902 	bl	8003da0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	200c      	movs	r0, #12
 8002ba2:	f001 f8cb 	bl	8003d3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8002ba6:	200c      	movs	r0, #12
 8002ba8:	f001 f8dd 	bl	8003d66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002bac:	46c0      	nop			; (mov r8, r8)
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	b00b      	add	sp, #44	; 0x2c
 8002bb2:	bd90      	pop	{r4, r7, pc}
 8002bb4:	40012400 	.word	0x40012400
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	50000400 	.word	0x50000400

08002bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bc4:	e7fe      	b.n	8002bc4 <NMI_Handler+0x4>

08002bc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bca:	e7fe      	b.n	8002bca <HardFault_Handler+0x4>

08002bcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002bd0:	46c0      	nop			; (mov r8, r8)
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bda:	46c0      	nop			; (mov r8, r8)
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002be4:	f000 f8aa 	bl	8002d3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002be8:	46c0      	nop			; (mov r8, r8)
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
	...

08002bf0 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002bf4:	4b03      	ldr	r3, [pc, #12]	; (8002c04 <ADC1_IRQHandler+0x14>)
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	f000 fc4e 	bl	8003498 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8002bfc:	46c0      	nop			; (mov r8, r8)
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	46c0      	nop			; (mov r8, r8)
 8002c04:	2000002c 	.word	0x2000002c

08002c08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c0c:	46c0      	nop			; (mov r8, r8)
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
	...

08002c14 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002c14:	480d      	ldr	r0, [pc, #52]	; (8002c4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002c16:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002c18:	f7ff fff6 	bl	8002c08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c1c:	480c      	ldr	r0, [pc, #48]	; (8002c50 <LoopForever+0x6>)
  ldr r1, =_edata
 8002c1e:	490d      	ldr	r1, [pc, #52]	; (8002c54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c20:	4a0d      	ldr	r2, [pc, #52]	; (8002c58 <LoopForever+0xe>)
  movs r3, #0
 8002c22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c24:	e002      	b.n	8002c2c <LoopCopyDataInit>

08002c26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c2a:	3304      	adds	r3, #4

08002c2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c30:	d3f9      	bcc.n	8002c26 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c32:	4a0a      	ldr	r2, [pc, #40]	; (8002c5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c34:	4c0a      	ldr	r4, [pc, #40]	; (8002c60 <LoopForever+0x16>)
  movs r3, #0
 8002c36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c38:	e001      	b.n	8002c3e <LoopFillZerobss>

08002c3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c3c:	3204      	adds	r2, #4

08002c3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c40:	d3fb      	bcc.n	8002c3a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002c42:	f001 ff09 	bl	8004a58 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002c46:	f7fe fa41 	bl	80010cc <main>

08002c4a <LoopForever>:

LoopForever:
  b LoopForever
 8002c4a:	e7fe      	b.n	8002c4a <LoopForever>
  ldr   r0, =_estack
 8002c4c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002c50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c54:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002c58:	08004c38 	.word	0x08004c38
  ldr r2, =_sbss
 8002c5c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002c60:	2000009c 	.word	0x2000009c

08002c64 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c64:	e7fe      	b.n	8002c64 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>
	...

08002c68 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c6e:	1dfb      	adds	r3, r7, #7
 8002c70:	2200      	movs	r2, #0
 8002c72:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c74:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <HAL_Init+0x3c>)
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	4b0a      	ldr	r3, [pc, #40]	; (8002ca4 <HAL_Init+0x3c>)
 8002c7a:	2180      	movs	r1, #128	; 0x80
 8002c7c:	0049      	lsls	r1, r1, #1
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c82:	2003      	movs	r0, #3
 8002c84:	f000 f810 	bl	8002ca8 <HAL_InitTick>
 8002c88:	1e03      	subs	r3, r0, #0
 8002c8a:	d003      	beq.n	8002c94 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002c8c:	1dfb      	adds	r3, r7, #7
 8002c8e:	2201      	movs	r2, #1
 8002c90:	701a      	strb	r2, [r3, #0]
 8002c92:	e001      	b.n	8002c98 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002c94:	f7ff ff24 	bl	8002ae0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c98:	1dfb      	adds	r3, r7, #7
 8002c9a:	781b      	ldrb	r3, [r3, #0]
}
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	b002      	add	sp, #8
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40022000 	.word	0x40022000

08002ca8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ca8:	b590      	push	{r4, r7, lr}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002cb0:	230f      	movs	r3, #15
 8002cb2:	18fb      	adds	r3, r7, r3
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002cb8:	4b1d      	ldr	r3, [pc, #116]	; (8002d30 <HAL_InitTick+0x88>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d02b      	beq.n	8002d18 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002cc0:	4b1c      	ldr	r3, [pc, #112]	; (8002d34 <HAL_InitTick+0x8c>)
 8002cc2:	681c      	ldr	r4, [r3, #0]
 8002cc4:	4b1a      	ldr	r3, [pc, #104]	; (8002d30 <HAL_InitTick+0x88>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	0019      	movs	r1, r3
 8002cca:	23fa      	movs	r3, #250	; 0xfa
 8002ccc:	0098      	lsls	r0, r3, #2
 8002cce:	f7fd fa17 	bl	8000100 <__udivsi3>
 8002cd2:	0003      	movs	r3, r0
 8002cd4:	0019      	movs	r1, r3
 8002cd6:	0020      	movs	r0, r4
 8002cd8:	f7fd fa12 	bl	8000100 <__udivsi3>
 8002cdc:	0003      	movs	r3, r0
 8002cde:	0018      	movs	r0, r3
 8002ce0:	f001 f851 	bl	8003d86 <HAL_SYSTICK_Config>
 8002ce4:	1e03      	subs	r3, r0, #0
 8002ce6:	d112      	bne.n	8002d0e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b03      	cmp	r3, #3
 8002cec:	d80a      	bhi.n	8002d04 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	425b      	negs	r3, r3
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	f001 f820 	bl	8003d3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002cfc:	4b0e      	ldr	r3, [pc, #56]	; (8002d38 <HAL_InitTick+0x90>)
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	e00d      	b.n	8002d20 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002d04:	230f      	movs	r3, #15
 8002d06:	18fb      	adds	r3, r7, r3
 8002d08:	2201      	movs	r2, #1
 8002d0a:	701a      	strb	r2, [r3, #0]
 8002d0c:	e008      	b.n	8002d20 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002d0e:	230f      	movs	r3, #15
 8002d10:	18fb      	adds	r3, r7, r3
 8002d12:	2201      	movs	r2, #1
 8002d14:	701a      	strb	r2, [r3, #0]
 8002d16:	e003      	b.n	8002d20 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d18:	230f      	movs	r3, #15
 8002d1a:	18fb      	adds	r3, r7, r3
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002d20:	230f      	movs	r3, #15
 8002d22:	18fb      	adds	r3, r7, r3
 8002d24:	781b      	ldrb	r3, [r3, #0]
}
 8002d26:	0018      	movs	r0, r3
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	b005      	add	sp, #20
 8002d2c:	bd90      	pop	{r4, r7, pc}
 8002d2e:	46c0      	nop			; (mov r8, r8)
 8002d30:	2000000c 	.word	0x2000000c
 8002d34:	20000004 	.word	0x20000004
 8002d38:	20000008 	.word	0x20000008

08002d3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d40:	4b05      	ldr	r3, [pc, #20]	; (8002d58 <HAL_IncTick+0x1c>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	001a      	movs	r2, r3
 8002d46:	4b05      	ldr	r3, [pc, #20]	; (8002d5c <HAL_IncTick+0x20>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	18d2      	adds	r2, r2, r3
 8002d4c:	4b03      	ldr	r3, [pc, #12]	; (8002d5c <HAL_IncTick+0x20>)
 8002d4e:	601a      	str	r2, [r3, #0]
}
 8002d50:	46c0      	nop			; (mov r8, r8)
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	46c0      	nop			; (mov r8, r8)
 8002d58:	2000000c 	.word	0x2000000c
 8002d5c:	20000098 	.word	0x20000098

08002d60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  return uwTick;
 8002d64:	4b02      	ldr	r3, [pc, #8]	; (8002d70 <HAL_GetTick+0x10>)
 8002d66:	681b      	ldr	r3, [r3, #0]
}
 8002d68:	0018      	movs	r0, r3
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	46c0      	nop			; (mov r8, r8)
 8002d70:	20000098 	.word	0x20000098

08002d74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d7c:	f7ff fff0 	bl	8002d60 <HAL_GetTick>
 8002d80:	0003      	movs	r3, r0
 8002d82:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	d005      	beq.n	8002d9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d8e:	4b0a      	ldr	r3, [pc, #40]	; (8002db8 <HAL_Delay+0x44>)
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	001a      	movs	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	189b      	adds	r3, r3, r2
 8002d98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d9a:	46c0      	nop			; (mov r8, r8)
 8002d9c:	f7ff ffe0 	bl	8002d60 <HAL_GetTick>
 8002da0:	0002      	movs	r2, r0
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d8f7      	bhi.n	8002d9c <HAL_Delay+0x28>
  {
  }
}
 8002dac:	46c0      	nop			; (mov r8, r8)
 8002dae:	46c0      	nop			; (mov r8, r8)
 8002db0:	46bd      	mov	sp, r7
 8002db2:	b004      	add	sp, #16
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	46c0      	nop			; (mov r8, r8)
 8002db8:	2000000c 	.word	0x2000000c

08002dbc <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a05      	ldr	r2, [pc, #20]	; (8002de0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002dcc:	401a      	ands	r2, r3
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	601a      	str	r2, [r3, #0]
}
 8002dd6:	46c0      	nop			; (mov r8, r8)
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	b002      	add	sp, #8
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	46c0      	nop			; (mov r8, r8)
 8002de0:	fe3fffff 	.word	0xfe3fffff

08002de4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	23e0      	movs	r3, #224	; 0xe0
 8002df2:	045b      	lsls	r3, r3, #17
 8002df4:	4013      	ands	r3, r2
}
 8002df6:	0018      	movs	r0, r3
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	b002      	add	sp, #8
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b084      	sub	sp, #16
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	60f8      	str	r0, [r7, #12]
 8002e06:	60b9      	str	r1, [r7, #8]
 8002e08:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	68ba      	ldr	r2, [r7, #8]
 8002e10:	2104      	movs	r1, #4
 8002e12:	400a      	ands	r2, r1
 8002e14:	2107      	movs	r1, #7
 8002e16:	4091      	lsls	r1, r2
 8002e18:	000a      	movs	r2, r1
 8002e1a:	43d2      	mvns	r2, r2
 8002e1c:	401a      	ands	r2, r3
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	2104      	movs	r1, #4
 8002e22:	400b      	ands	r3, r1
 8002e24:	6879      	ldr	r1, [r7, #4]
 8002e26:	4099      	lsls	r1, r3
 8002e28:	000b      	movs	r3, r1
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002e30:	46c0      	nop			; (mov r8, r8)
 8002e32:	46bd      	mov	sp, r7
 8002e34:	b004      	add	sp, #16
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	683a      	ldr	r2, [r7, #0]
 8002e48:	2104      	movs	r1, #4
 8002e4a:	400a      	ands	r2, r1
 8002e4c:	2107      	movs	r1, #7
 8002e4e:	4091      	lsls	r1, r2
 8002e50:	000a      	movs	r2, r1
 8002e52:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	2104      	movs	r1, #4
 8002e58:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002e5a:	40da      	lsrs	r2, r3
 8002e5c:	0013      	movs	r3, r2
}
 8002e5e:	0018      	movs	r0, r3
 8002e60:	46bd      	mov	sp, r7
 8002e62:	b002      	add	sp, #8
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b082      	sub	sp, #8
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68da      	ldr	r2, [r3, #12]
 8002e72:	23c0      	movs	r3, #192	; 0xc0
 8002e74:	011b      	lsls	r3, r3, #4
 8002e76:	4013      	ands	r3, r2
 8002e78:	d101      	bne.n	8002e7e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e000      	b.n	8002e80 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	0018      	movs	r0, r3
 8002e82:	46bd      	mov	sp, r7
 8002e84:	b002      	add	sp, #8
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e98:	68ba      	ldr	r2, [r7, #8]
 8002e9a:	211f      	movs	r1, #31
 8002e9c:	400a      	ands	r2, r1
 8002e9e:	210f      	movs	r1, #15
 8002ea0:	4091      	lsls	r1, r2
 8002ea2:	000a      	movs	r2, r1
 8002ea4:	43d2      	mvns	r2, r2
 8002ea6:	401a      	ands	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	0e9b      	lsrs	r3, r3, #26
 8002eac:	210f      	movs	r1, #15
 8002eae:	4019      	ands	r1, r3
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	201f      	movs	r0, #31
 8002eb4:	4003      	ands	r3, r0
 8002eb6:	4099      	lsls	r1, r3
 8002eb8:	000b      	movs	r3, r1
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002ec0:	46c0      	nop			; (mov r8, r8)
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	b004      	add	sp, #16
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	035b      	lsls	r3, r3, #13
 8002eda:	0b5b      	lsrs	r3, r3, #13
 8002edc:	431a      	orrs	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ee2:	46c0      	nop			; (mov r8, r8)
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	b002      	add	sp, #8
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b082      	sub	sp, #8
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
 8002ef2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	0352      	lsls	r2, r2, #13
 8002efc:	0b52      	lsrs	r2, r2, #13
 8002efe:	43d2      	mvns	r2, r2
 8002f00:	401a      	ands	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f06:	46c0      	nop			; (mov r8, r8)
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	b002      	add	sp, #8
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b082      	sub	sp, #8
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	2203      	movs	r2, #3
 8002f1c:	4013      	ands	r3, r2
}
 8002f1e:	0018      	movs	r0, r3
 8002f20:	46bd      	mov	sp, r7
 8002f22:	b002      	add	sp, #8
 8002f24:	bd80      	pop	{r7, pc}
	...

08002f28 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	68ba      	ldr	r2, [r7, #8]
 8002f3a:	0212      	lsls	r2, r2, #8
 8002f3c:	43d2      	mvns	r2, r2
 8002f3e:	401a      	ands	r2, r3
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	021b      	lsls	r3, r3, #8
 8002f44:	6879      	ldr	r1, [r7, #4]
 8002f46:	400b      	ands	r3, r1
 8002f48:	4904      	ldr	r1, [pc, #16]	; (8002f5c <LL_ADC_SetChannelSamplingTime+0x34>)
 8002f4a:	400b      	ands	r3, r1
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002f52:	46c0      	nop			; (mov r8, r8)
 8002f54:	46bd      	mov	sp, r7
 8002f56:	b004      	add	sp, #16
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	46c0      	nop			; (mov r8, r8)
 8002f5c:	07ffff00 	.word	0x07ffff00

08002f60 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	4a05      	ldr	r2, [pc, #20]	; (8002f84 <LL_ADC_EnableInternalRegulator+0x24>)
 8002f6e:	4013      	ands	r3, r2
 8002f70:	2280      	movs	r2, #128	; 0x80
 8002f72:	0552      	lsls	r2, r2, #21
 8002f74:	431a      	orrs	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002f7a:	46c0      	nop			; (mov r8, r8)
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	b002      	add	sp, #8
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	46c0      	nop			; (mov r8, r8)
 8002f84:	6fffffe8 	.word	0x6fffffe8

08002f88 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	2380      	movs	r3, #128	; 0x80
 8002f96:	055b      	lsls	r3, r3, #21
 8002f98:	401a      	ands	r2, r3
 8002f9a:	2380      	movs	r3, #128	; 0x80
 8002f9c:	055b      	lsls	r3, r3, #21
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d101      	bne.n	8002fa6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e000      	b.n	8002fa8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	0018      	movs	r0, r3
 8002faa:	46bd      	mov	sp, r7
 8002fac:	b002      	add	sp, #8
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	4a04      	ldr	r2, [pc, #16]	; (8002fd0 <LL_ADC_Enable+0x20>)
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002fc8:	46c0      	nop			; (mov r8, r8)
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	b002      	add	sp, #8
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	7fffffe8 	.word	0x7fffffe8

08002fd4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d101      	bne.n	8002fec <LL_ADC_IsEnabled+0x18>
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e000      	b.n	8002fee <LL_ADC_IsEnabled+0x1a>
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	0018      	movs	r0, r3
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	b002      	add	sp, #8
 8002ff4:	bd80      	pop	{r7, pc}
	...

08002ff8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	4a04      	ldr	r2, [pc, #16]	; (8003018 <LL_ADC_REG_StartConversion+0x20>)
 8003006:	4013      	ands	r3, r2
 8003008:	2204      	movs	r2, #4
 800300a:	431a      	orrs	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003010:	46c0      	nop			; (mov r8, r8)
 8003012:	46bd      	mov	sp, r7
 8003014:	b002      	add	sp, #8
 8003016:	bd80      	pop	{r7, pc}
 8003018:	7fffffe8 	.word	0x7fffffe8

0800301c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	2204      	movs	r2, #4
 800302a:	4013      	ands	r3, r2
 800302c:	2b04      	cmp	r3, #4
 800302e:	d101      	bne.n	8003034 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003030:	2301      	movs	r3, #1
 8003032:	e000      	b.n	8003036 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003034:	2300      	movs	r3, #0
}
 8003036:	0018      	movs	r0, r3
 8003038:	46bd      	mov	sp, r7
 800303a:	b002      	add	sp, #8
 800303c:	bd80      	pop	{r7, pc}
	...

08003040 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b088      	sub	sp, #32
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003048:	231f      	movs	r3, #31
 800304a:	18fb      	adds	r3, r7, r3
 800304c:	2200      	movs	r2, #0
 800304e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8003050:	2300      	movs	r3, #0
 8003052:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003054:	2300      	movs	r3, #0
 8003056:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003058:	2300      	movs	r3, #0
 800305a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e17f      	b.n	8003366 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10a      	bne.n	8003084 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	0018      	movs	r0, r3
 8003072:	f7ff fd59 	bl	8002b28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2254      	movs	r2, #84	; 0x54
 8003080:	2100      	movs	r1, #0
 8003082:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	0018      	movs	r0, r3
 800308a:	f7ff ff7d 	bl	8002f88 <LL_ADC_IsInternalRegulatorEnabled>
 800308e:	1e03      	subs	r3, r0, #0
 8003090:	d115      	bne.n	80030be <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	0018      	movs	r0, r3
 8003098:	f7ff ff62 	bl	8002f60 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800309c:	4bb4      	ldr	r3, [pc, #720]	; (8003370 <HAL_ADC_Init+0x330>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	49b4      	ldr	r1, [pc, #720]	; (8003374 <HAL_ADC_Init+0x334>)
 80030a2:	0018      	movs	r0, r3
 80030a4:	f7fd f82c 	bl	8000100 <__udivsi3>
 80030a8:	0003      	movs	r3, r0
 80030aa:	3301      	adds	r3, #1
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80030b0:	e002      	b.n	80030b8 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	3b01      	subs	r3, #1
 80030b6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1f9      	bne.n	80030b2 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	0018      	movs	r0, r3
 80030c4:	f7ff ff60 	bl	8002f88 <LL_ADC_IsInternalRegulatorEnabled>
 80030c8:	1e03      	subs	r3, r0, #0
 80030ca:	d10f      	bne.n	80030ec <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d0:	2210      	movs	r2, #16
 80030d2:	431a      	orrs	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030dc:	2201      	movs	r2, #1
 80030de:	431a      	orrs	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80030e4:	231f      	movs	r3, #31
 80030e6:	18fb      	adds	r3, r7, r3
 80030e8:	2201      	movs	r2, #1
 80030ea:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	0018      	movs	r0, r3
 80030f2:	f7ff ff93 	bl	800301c <LL_ADC_REG_IsConversionOngoing>
 80030f6:	0003      	movs	r3, r0
 80030f8:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fe:	2210      	movs	r2, #16
 8003100:	4013      	ands	r3, r2
 8003102:	d000      	beq.n	8003106 <HAL_ADC_Init+0xc6>
 8003104:	e122      	b.n	800334c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d000      	beq.n	800310e <HAL_ADC_Init+0xce>
 800310c:	e11e      	b.n	800334c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003112:	4a99      	ldr	r2, [pc, #612]	; (8003378 <HAL_ADC_Init+0x338>)
 8003114:	4013      	ands	r3, r2
 8003116:	2202      	movs	r2, #2
 8003118:	431a      	orrs	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	0018      	movs	r0, r3
 8003124:	f7ff ff56 	bl	8002fd4 <LL_ADC_IsEnabled>
 8003128:	1e03      	subs	r3, r0, #0
 800312a:	d000      	beq.n	800312e <HAL_ADC_Init+0xee>
 800312c:	e0ad      	b.n	800328a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	7e1b      	ldrb	r3, [r3, #24]
 8003136:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003138:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	7e5b      	ldrb	r3, [r3, #25]
 800313e:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003140:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	7e9b      	ldrb	r3, [r3, #26]
 8003146:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003148:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314e:	2b00      	cmp	r3, #0
 8003150:	d002      	beq.n	8003158 <HAL_ADC_Init+0x118>
 8003152:	2380      	movs	r3, #128	; 0x80
 8003154:	015b      	lsls	r3, r3, #5
 8003156:	e000      	b.n	800315a <HAL_ADC_Init+0x11a>
 8003158:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800315a:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003160:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	2b00      	cmp	r3, #0
 8003168:	da04      	bge.n	8003174 <HAL_ADC_Init+0x134>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	085b      	lsrs	r3, r3, #1
 8003172:	e001      	b.n	8003178 <HAL_ADC_Init+0x138>
 8003174:	2380      	movs	r3, #128	; 0x80
 8003176:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8003178:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	212c      	movs	r1, #44	; 0x2c
 800317e:	5c5b      	ldrb	r3, [r3, r1]
 8003180:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003182:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	4313      	orrs	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2220      	movs	r2, #32
 800318e:	5c9b      	ldrb	r3, [r3, r2]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d115      	bne.n	80031c0 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	7e9b      	ldrb	r3, [r3, #26]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d105      	bne.n	80031a8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	2280      	movs	r2, #128	; 0x80
 80031a0:	0252      	lsls	r2, r2, #9
 80031a2:	4313      	orrs	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
 80031a6:	e00b      	b.n	80031c0 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ac:	2220      	movs	r2, #32
 80031ae:	431a      	orrs	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b8:	2201      	movs	r2, #1
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00a      	beq.n	80031de <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031cc:	23e0      	movs	r3, #224	; 0xe0
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80031d6:	4313      	orrs	r3, r2
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	4313      	orrs	r3, r2
 80031dc:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	4a65      	ldr	r2, [pc, #404]	; (800337c <HAL_ADC_Init+0x33c>)
 80031e6:	4013      	ands	r3, r2
 80031e8:	0019      	movs	r1, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	0f9b      	lsrs	r3, r3, #30
 80031fa:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003200:	4313      	orrs	r3, r2
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	4313      	orrs	r3, r2
 8003206:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	223c      	movs	r2, #60	; 0x3c
 800320c:	5c9b      	ldrb	r3, [r3, r2]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d111      	bne.n	8003236 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	0f9b      	lsrs	r3, r3, #30
 8003218:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800321e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003224:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800322a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	4313      	orrs	r3, r2
 8003230:	2201      	movs	r2, #1
 8003232:	4313      	orrs	r3, r2
 8003234:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	4a50      	ldr	r2, [pc, #320]	; (8003380 <HAL_ADC_Init+0x340>)
 800323e:	4013      	ands	r3, r2
 8003240:	0019      	movs	r1, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	430a      	orrs	r2, r1
 800324a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	23c0      	movs	r3, #192	; 0xc0
 8003252:	061b      	lsls	r3, r3, #24
 8003254:	429a      	cmp	r2, r3
 8003256:	d018      	beq.n	800328a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800325c:	2380      	movs	r3, #128	; 0x80
 800325e:	05db      	lsls	r3, r3, #23
 8003260:	429a      	cmp	r2, r3
 8003262:	d012      	beq.n	800328a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003268:	2380      	movs	r3, #128	; 0x80
 800326a:	061b      	lsls	r3, r3, #24
 800326c:	429a      	cmp	r2, r3
 800326e:	d00c      	beq.n	800328a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8003270:	4b44      	ldr	r3, [pc, #272]	; (8003384 <HAL_ADC_Init+0x344>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a44      	ldr	r2, [pc, #272]	; (8003388 <HAL_ADC_Init+0x348>)
 8003276:	4013      	ands	r3, r2
 8003278:	0019      	movs	r1, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	23f0      	movs	r3, #240	; 0xf0
 8003280:	039b      	lsls	r3, r3, #14
 8003282:	401a      	ands	r2, r3
 8003284:	4b3f      	ldr	r3, [pc, #252]	; (8003384 <HAL_ADC_Init+0x344>)
 8003286:	430a      	orrs	r2, r1
 8003288:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6818      	ldr	r0, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003292:	001a      	movs	r2, r3
 8003294:	2100      	movs	r1, #0
 8003296:	f7ff fdb2 	bl	8002dfe <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6818      	ldr	r0, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a2:	493a      	ldr	r1, [pc, #232]	; (800338c <HAL_ADC_Init+0x34c>)
 80032a4:	001a      	movs	r2, r3
 80032a6:	f7ff fdaa 	bl	8002dfe <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d109      	bne.n	80032c6 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2110      	movs	r1, #16
 80032be:	4249      	negs	r1, r1
 80032c0:	430a      	orrs	r2, r1
 80032c2:	629a      	str	r2, [r3, #40]	; 0x28
 80032c4:	e018      	b.n	80032f8 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	691a      	ldr	r2, [r3, #16]
 80032ca:	2380      	movs	r3, #128	; 0x80
 80032cc:	039b      	lsls	r3, r3, #14
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d112      	bne.n	80032f8 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	69db      	ldr	r3, [r3, #28]
 80032dc:	3b01      	subs	r3, #1
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	221c      	movs	r2, #28
 80032e2:	4013      	ands	r3, r2
 80032e4:	2210      	movs	r2, #16
 80032e6:	4252      	negs	r2, r2
 80032e8:	409a      	lsls	r2, r3
 80032ea:	0011      	movs	r1, r2
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	430a      	orrs	r2, r1
 80032f6:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2100      	movs	r1, #0
 80032fe:	0018      	movs	r0, r3
 8003300:	f7ff fd9a 	bl	8002e38 <LL_ADC_GetSamplingTimeCommonChannels>
 8003304:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800330a:	429a      	cmp	r2, r3
 800330c:	d10b      	bne.n	8003326 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003318:	2203      	movs	r2, #3
 800331a:	4393      	bics	r3, r2
 800331c:	2201      	movs	r2, #1
 800331e:	431a      	orrs	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003324:	e01c      	b.n	8003360 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800332a:	2212      	movs	r2, #18
 800332c:	4393      	bics	r3, r2
 800332e:	2210      	movs	r2, #16
 8003330:	431a      	orrs	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333a:	2201      	movs	r2, #1
 800333c:	431a      	orrs	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003342:	231f      	movs	r3, #31
 8003344:	18fb      	adds	r3, r7, r3
 8003346:	2201      	movs	r2, #1
 8003348:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800334a:	e009      	b.n	8003360 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003350:	2210      	movs	r2, #16
 8003352:	431a      	orrs	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003358:	231f      	movs	r3, #31
 800335a:	18fb      	adds	r3, r7, r3
 800335c:	2201      	movs	r2, #1
 800335e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003360:	231f      	movs	r3, #31
 8003362:	18fb      	adds	r3, r7, r3
 8003364:	781b      	ldrb	r3, [r3, #0]
}
 8003366:	0018      	movs	r0, r3
 8003368:	46bd      	mov	sp, r7
 800336a:	b008      	add	sp, #32
 800336c:	bd80      	pop	{r7, pc}
 800336e:	46c0      	nop			; (mov r8, r8)
 8003370:	20000004 	.word	0x20000004
 8003374:	00030d40 	.word	0x00030d40
 8003378:	fffffefd 	.word	0xfffffefd
 800337c:	fffe0201 	.word	0xfffe0201
 8003380:	1ffffc02 	.word	0x1ffffc02
 8003384:	40012708 	.word	0x40012708
 8003388:	ffc3ffff 	.word	0xffc3ffff
 800338c:	07ffff04 	.word	0x07ffff04

08003390 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8003390:	b5b0      	push	{r4, r5, r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	0018      	movs	r0, r3
 800339e:	f7ff fe3d 	bl	800301c <LL_ADC_REG_IsConversionOngoing>
 80033a2:	1e03      	subs	r3, r0, #0
 80033a4:	d15f      	bne.n	8003466 <HAL_ADC_Start_IT+0xd6>
  {
    __HAL_LOCK(hadc);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2254      	movs	r2, #84	; 0x54
 80033aa:	5c9b      	ldrb	r3, [r3, r2]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d101      	bne.n	80033b4 <HAL_ADC_Start_IT+0x24>
 80033b0:	2302      	movs	r3, #2
 80033b2:	e05f      	b.n	8003474 <HAL_ADC_Start_IT+0xe4>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2254      	movs	r2, #84	; 0x54
 80033b8:	2101      	movs	r1, #1
 80033ba:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80033bc:	250f      	movs	r5, #15
 80033be:	197c      	adds	r4, r7, r5
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	0018      	movs	r0, r3
 80033c4:	f000 fb68 	bl	8003a98 <ADC_Enable>
 80033c8:	0003      	movs	r3, r0
 80033ca:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80033cc:	197b      	adds	r3, r7, r5
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d143      	bne.n	800345c <HAL_ADC_Start_IT+0xcc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d8:	4a28      	ldr	r2, [pc, #160]	; (800347c <HAL_ADC_Start_IT+0xec>)
 80033da:	4013      	ands	r3, r2
 80033dc:	2280      	movs	r2, #128	; 0x80
 80033de:	0052      	lsls	r2, r2, #1
 80033e0:	431a      	orrs	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY);


      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	221c      	movs	r2, #28
 80033f2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2254      	movs	r2, #84	; 0x54
 80033f8:	2100      	movs	r1, #0
 80033fa:	5499      	strb	r1, [r3, r2]

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	211c      	movs	r1, #28
 8003408:	438a      	bics	r2, r1
 800340a:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	2b08      	cmp	r3, #8
 8003412:	d108      	bne.n	8003426 <HAL_ADC_Start_IT+0x96>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685a      	ldr	r2, [r3, #4]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2108      	movs	r1, #8
 8003420:	430a      	orrs	r2, r1
 8003422:	605a      	str	r2, [r3, #4]
          break;
 8003424:	e008      	b.n	8003438 <HAL_ADC_Start_IT+0xa8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2104      	movs	r1, #4
 8003432:	430a      	orrs	r2, r1
 8003434:	605a      	str	r2, [r3, #4]
          break;
 8003436:	46c0      	nop			; (mov r8, r8)

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343c:	2b00      	cmp	r3, #0
 800343e:	d107      	bne.n	8003450 <HAL_ADC_Start_IT+0xc0>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2110      	movs	r1, #16
 800344c:	430a      	orrs	r2, r1
 800344e:	605a      	str	r2, [r3, #4]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	0018      	movs	r0, r3
 8003456:	f7ff fdcf 	bl	8002ff8 <LL_ADC_REG_StartConversion>
 800345a:	e008      	b.n	800346e <HAL_ADC_Start_IT+0xde>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2254      	movs	r2, #84	; 0x54
 8003460:	2100      	movs	r1, #0
 8003462:	5499      	strb	r1, [r3, r2]
 8003464:	e003      	b.n	800346e <HAL_ADC_Start_IT+0xde>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003466:	230f      	movs	r3, #15
 8003468:	18fb      	adds	r3, r7, r3
 800346a:	2202      	movs	r2, #2
 800346c:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800346e:	230f      	movs	r3, #15
 8003470:	18fb      	adds	r3, r7, r3
 8003472:	781b      	ldrb	r3, [r3, #0]
}
 8003474:	0018      	movs	r0, r3
 8003476:	46bd      	mov	sp, r7
 8003478:	b004      	add	sp, #16
 800347a:	bdb0      	pop	{r4, r5, r7, pc}
 800347c:	fffff0fe 	.word	0xfffff0fe

08003480 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800348e:	0018      	movs	r0, r3
 8003490:	46bd      	mov	sp, r7
 8003492:	b002      	add	sp, #8
 8003494:	bd80      	pop	{r7, pc}
	...

08003498 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80034a0:	2300      	movs	r3, #0
 80034a2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	2202      	movs	r2, #2
 80034b8:	4013      	ands	r3, r2
 80034ba:	d017      	beq.n	80034ec <HAL_ADC_IRQHandler+0x54>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2202      	movs	r2, #2
 80034c0:	4013      	ands	r3, r2
 80034c2:	d013      	beq.n	80034ec <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c8:	2210      	movs	r2, #16
 80034ca:	4013      	ands	r3, r2
 80034cc:	d106      	bne.n	80034dc <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d2:	2280      	movs	r2, #128	; 0x80
 80034d4:	0112      	lsls	r2, r2, #4
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	0018      	movs	r0, r3
 80034e0:	f000 fb70 	bl	8003bc4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2202      	movs	r2, #2
 80034ea:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	2204      	movs	r2, #4
 80034f0:	4013      	ands	r3, r2
 80034f2:	d003      	beq.n	80034fc <HAL_ADC_IRQHandler+0x64>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2204      	movs	r2, #4
 80034f8:	4013      	ands	r3, r2
 80034fa:	d107      	bne.n	800350c <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	2208      	movs	r2, #8
 8003500:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003502:	d04d      	beq.n	80035a0 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2208      	movs	r2, #8
 8003508:	4013      	ands	r3, r2
 800350a:	d049      	beq.n	80035a0 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003510:	2210      	movs	r2, #16
 8003512:	4013      	ands	r3, r2
 8003514:	d106      	bne.n	8003524 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800351a:	2280      	movs	r2, #128	; 0x80
 800351c:	0092      	lsls	r2, r2, #2
 800351e:	431a      	orrs	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	0018      	movs	r0, r3
 800352a:	f7ff fc9c 	bl	8002e66 <LL_ADC_REG_IsTriggerSourceSWStart>
 800352e:	1e03      	subs	r3, r0, #0
 8003530:	d02e      	beq.n	8003590 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	7e9b      	ldrb	r3, [r3, #26]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d12a      	bne.n	8003590 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2208      	movs	r2, #8
 8003542:	4013      	ands	r3, r2
 8003544:	2b08      	cmp	r3, #8
 8003546:	d123      	bne.n	8003590 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	0018      	movs	r0, r3
 800354e:	f7ff fd65 	bl	800301c <LL_ADC_REG_IsConversionOngoing>
 8003552:	1e03      	subs	r3, r0, #0
 8003554:	d110      	bne.n	8003578 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	685a      	ldr	r2, [r3, #4]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	210c      	movs	r1, #12
 8003562:	438a      	bics	r2, r1
 8003564:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356a:	4a56      	ldr	r2, [pc, #344]	; (80036c4 <HAL_ADC_IRQHandler+0x22c>)
 800356c:	4013      	ands	r3, r2
 800356e:	2201      	movs	r2, #1
 8003570:	431a      	orrs	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	659a      	str	r2, [r3, #88]	; 0x58
 8003576:	e00b      	b.n	8003590 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800357c:	2220      	movs	r2, #32
 800357e:	431a      	orrs	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003588:	2201      	movs	r2, #1
 800358a:	431a      	orrs	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	0018      	movs	r0, r3
 8003594:	f7fd ffe4 	bl	8001560 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	220c      	movs	r2, #12
 800359e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	2280      	movs	r2, #128	; 0x80
 80035a4:	4013      	ands	r3, r2
 80035a6:	d012      	beq.n	80035ce <HAL_ADC_IRQHandler+0x136>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2280      	movs	r2, #128	; 0x80
 80035ac:	4013      	ands	r3, r2
 80035ae:	d00e      	beq.n	80035ce <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b4:	2280      	movs	r2, #128	; 0x80
 80035b6:	0252      	lsls	r2, r2, #9
 80035b8:	431a      	orrs	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	0018      	movs	r0, r3
 80035c2:	f000 f881 	bl	80036c8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2280      	movs	r2, #128	; 0x80
 80035cc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	2380      	movs	r3, #128	; 0x80
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	4013      	ands	r3, r2
 80035d6:	d014      	beq.n	8003602 <HAL_ADC_IRQHandler+0x16a>
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	2380      	movs	r3, #128	; 0x80
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	4013      	ands	r3, r2
 80035e0:	d00f      	beq.n	8003602 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e6:	2280      	movs	r2, #128	; 0x80
 80035e8:	0292      	lsls	r2, r2, #10
 80035ea:	431a      	orrs	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	0018      	movs	r0, r3
 80035f4:	f000 fad6 	bl	8003ba4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2280      	movs	r2, #128	; 0x80
 80035fe:	0052      	lsls	r2, r2, #1
 8003600:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	2380      	movs	r3, #128	; 0x80
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4013      	ands	r3, r2
 800360a:	d014      	beq.n	8003636 <HAL_ADC_IRQHandler+0x19e>
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	2380      	movs	r3, #128	; 0x80
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	4013      	ands	r3, r2
 8003614:	d00f      	beq.n	8003636 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361a:	2280      	movs	r2, #128	; 0x80
 800361c:	02d2      	lsls	r2, r2, #11
 800361e:	431a      	orrs	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	0018      	movs	r0, r3
 8003628:	f000 fac4 	bl	8003bb4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2280      	movs	r2, #128	; 0x80
 8003632:	0092      	lsls	r2, r2, #2
 8003634:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	2210      	movs	r2, #16
 800363a:	4013      	ands	r3, r2
 800363c:	d02b      	beq.n	8003696 <HAL_ADC_IRQHandler+0x1fe>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2210      	movs	r2, #16
 8003642:	4013      	ands	r3, r2
 8003644:	d027      	beq.n	8003696 <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364a:	2b00      	cmp	r3, #0
 800364c:	d102      	bne.n	8003654 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 800364e:	2301      	movs	r3, #1
 8003650:	617b      	str	r3, [r7, #20]
 8003652:	e008      	b.n	8003666 <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	0018      	movs	r0, r3
 800365a:	f7ff fc58 	bl	8002f0e <LL_ADC_REG_GetDMATransfer>
 800365e:	1e03      	subs	r3, r0, #0
 8003660:	d001      	beq.n	8003666 <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8003662:	2301      	movs	r3, #1
 8003664:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d110      	bne.n	800368e <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003670:	2280      	movs	r2, #128	; 0x80
 8003672:	00d2      	lsls	r2, r2, #3
 8003674:	431a      	orrs	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800367e:	2202      	movs	r2, #2
 8003680:	431a      	orrs	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	0018      	movs	r0, r3
 800368a:	f000 f825 	bl	80036d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2210      	movs	r2, #16
 8003694:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	2380      	movs	r3, #128	; 0x80
 800369a:	019b      	lsls	r3, r3, #6
 800369c:	4013      	ands	r3, r2
 800369e:	d00d      	beq.n	80036bc <HAL_ADC_IRQHandler+0x224>
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	2380      	movs	r3, #128	; 0x80
 80036a4:	019b      	lsls	r3, r3, #6
 80036a6:	4013      	ands	r3, r2
 80036a8:	d008      	beq.n	80036bc <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	0018      	movs	r0, r3
 80036ae:	f000 fa91 	bl	8003bd4 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2280      	movs	r2, #128	; 0x80
 80036b8:	0192      	lsls	r2, r2, #6
 80036ba:	601a      	str	r2, [r3, #0]
  }
}
 80036bc:	46c0      	nop			; (mov r8, r8)
 80036be:	46bd      	mov	sp, r7
 80036c0:	b006      	add	sp, #24
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	fffffefe 	.word	0xfffffefe

080036c8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80036d0:	46c0      	nop			; (mov r8, r8)
 80036d2:	46bd      	mov	sp, r7
 80036d4:	b002      	add	sp, #8
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80036e0:	46c0      	nop			; (mov r8, r8)
 80036e2:	46bd      	mov	sp, r7
 80036e4:	b002      	add	sp, #8
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036f2:	2317      	movs	r3, #23
 80036f4:	18fb      	adds	r3, r7, r3
 80036f6:	2200      	movs	r2, #0
 80036f8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80036fa:	2300      	movs	r3, #0
 80036fc:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2254      	movs	r2, #84	; 0x54
 8003702:	5c9b      	ldrb	r3, [r3, r2]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d101      	bne.n	800370c <HAL_ADC_ConfigChannel+0x24>
 8003708:	2302      	movs	r3, #2
 800370a:	e1c0      	b.n	8003a8e <HAL_ADC_ConfigChannel+0x3a6>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2254      	movs	r2, #84	; 0x54
 8003710:	2101      	movs	r1, #1
 8003712:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	0018      	movs	r0, r3
 800371a:	f7ff fc7f 	bl	800301c <LL_ADC_REG_IsConversionOngoing>
 800371e:	1e03      	subs	r3, r0, #0
 8003720:	d000      	beq.n	8003724 <HAL_ADC_ConfigChannel+0x3c>
 8003722:	e1a3      	b.n	8003a6c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	2b02      	cmp	r3, #2
 800372a:	d100      	bne.n	800372e <HAL_ADC_ConfigChannel+0x46>
 800372c:	e143      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691a      	ldr	r2, [r3, #16]
 8003732:	2380      	movs	r3, #128	; 0x80
 8003734:	061b      	lsls	r3, r3, #24
 8003736:	429a      	cmp	r2, r3
 8003738:	d004      	beq.n	8003744 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800373e:	4ac1      	ldr	r2, [pc, #772]	; (8003a44 <HAL_ADC_ConfigChannel+0x35c>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d108      	bne.n	8003756 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	0019      	movs	r1, r3
 800374e:	0010      	movs	r0, r2
 8003750:	f7ff fbba 	bl	8002ec8 <LL_ADC_REG_SetSequencerChAdd>
 8003754:	e0c9      	b.n	80038ea <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	211f      	movs	r1, #31
 8003760:	400b      	ands	r3, r1
 8003762:	210f      	movs	r1, #15
 8003764:	4099      	lsls	r1, r3
 8003766:	000b      	movs	r3, r1
 8003768:	43db      	mvns	r3, r3
 800376a:	4013      	ands	r3, r2
 800376c:	0019      	movs	r1, r3
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	035b      	lsls	r3, r3, #13
 8003774:	0b5b      	lsrs	r3, r3, #13
 8003776:	d105      	bne.n	8003784 <HAL_ADC_ConfigChannel+0x9c>
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	0e9b      	lsrs	r3, r3, #26
 800377e:	221f      	movs	r2, #31
 8003780:	4013      	ands	r3, r2
 8003782:	e098      	b.n	80038b6 <HAL_ADC_ConfigChannel+0x1ce>
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2201      	movs	r2, #1
 800378a:	4013      	ands	r3, r2
 800378c:	d000      	beq.n	8003790 <HAL_ADC_ConfigChannel+0xa8>
 800378e:	e091      	b.n	80038b4 <HAL_ADC_ConfigChannel+0x1cc>
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2202      	movs	r2, #2
 8003796:	4013      	ands	r3, r2
 8003798:	d000      	beq.n	800379c <HAL_ADC_ConfigChannel+0xb4>
 800379a:	e089      	b.n	80038b0 <HAL_ADC_ConfigChannel+0x1c8>
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2204      	movs	r2, #4
 80037a2:	4013      	ands	r3, r2
 80037a4:	d000      	beq.n	80037a8 <HAL_ADC_ConfigChannel+0xc0>
 80037a6:	e081      	b.n	80038ac <HAL_ADC_ConfigChannel+0x1c4>
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2208      	movs	r2, #8
 80037ae:	4013      	ands	r3, r2
 80037b0:	d000      	beq.n	80037b4 <HAL_ADC_ConfigChannel+0xcc>
 80037b2:	e079      	b.n	80038a8 <HAL_ADC_ConfigChannel+0x1c0>
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2210      	movs	r2, #16
 80037ba:	4013      	ands	r3, r2
 80037bc:	d000      	beq.n	80037c0 <HAL_ADC_ConfigChannel+0xd8>
 80037be:	e071      	b.n	80038a4 <HAL_ADC_ConfigChannel+0x1bc>
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2220      	movs	r2, #32
 80037c6:	4013      	ands	r3, r2
 80037c8:	d000      	beq.n	80037cc <HAL_ADC_ConfigChannel+0xe4>
 80037ca:	e069      	b.n	80038a0 <HAL_ADC_ConfigChannel+0x1b8>
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2240      	movs	r2, #64	; 0x40
 80037d2:	4013      	ands	r3, r2
 80037d4:	d000      	beq.n	80037d8 <HAL_ADC_ConfigChannel+0xf0>
 80037d6:	e061      	b.n	800389c <HAL_ADC_ConfigChannel+0x1b4>
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2280      	movs	r2, #128	; 0x80
 80037de:	4013      	ands	r3, r2
 80037e0:	d000      	beq.n	80037e4 <HAL_ADC_ConfigChannel+0xfc>
 80037e2:	e059      	b.n	8003898 <HAL_ADC_ConfigChannel+0x1b0>
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	2380      	movs	r3, #128	; 0x80
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	4013      	ands	r3, r2
 80037ee:	d151      	bne.n	8003894 <HAL_ADC_ConfigChannel+0x1ac>
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	2380      	movs	r3, #128	; 0x80
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	4013      	ands	r3, r2
 80037fa:	d149      	bne.n	8003890 <HAL_ADC_ConfigChannel+0x1a8>
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	2380      	movs	r3, #128	; 0x80
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	4013      	ands	r3, r2
 8003806:	d141      	bne.n	800388c <HAL_ADC_ConfigChannel+0x1a4>
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	2380      	movs	r3, #128	; 0x80
 800380e:	011b      	lsls	r3, r3, #4
 8003810:	4013      	ands	r3, r2
 8003812:	d139      	bne.n	8003888 <HAL_ADC_ConfigChannel+0x1a0>
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	2380      	movs	r3, #128	; 0x80
 800381a:	015b      	lsls	r3, r3, #5
 800381c:	4013      	ands	r3, r2
 800381e:	d131      	bne.n	8003884 <HAL_ADC_ConfigChannel+0x19c>
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	2380      	movs	r3, #128	; 0x80
 8003826:	019b      	lsls	r3, r3, #6
 8003828:	4013      	ands	r3, r2
 800382a:	d129      	bne.n	8003880 <HAL_ADC_ConfigChannel+0x198>
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	2380      	movs	r3, #128	; 0x80
 8003832:	01db      	lsls	r3, r3, #7
 8003834:	4013      	ands	r3, r2
 8003836:	d121      	bne.n	800387c <HAL_ADC_ConfigChannel+0x194>
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	2380      	movs	r3, #128	; 0x80
 800383e:	021b      	lsls	r3, r3, #8
 8003840:	4013      	ands	r3, r2
 8003842:	d119      	bne.n	8003878 <HAL_ADC_ConfigChannel+0x190>
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	2380      	movs	r3, #128	; 0x80
 800384a:	025b      	lsls	r3, r3, #9
 800384c:	4013      	ands	r3, r2
 800384e:	d111      	bne.n	8003874 <HAL_ADC_ConfigChannel+0x18c>
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	2380      	movs	r3, #128	; 0x80
 8003856:	029b      	lsls	r3, r3, #10
 8003858:	4013      	ands	r3, r2
 800385a:	d109      	bne.n	8003870 <HAL_ADC_ConfigChannel+0x188>
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	2380      	movs	r3, #128	; 0x80
 8003862:	02db      	lsls	r3, r3, #11
 8003864:	4013      	ands	r3, r2
 8003866:	d001      	beq.n	800386c <HAL_ADC_ConfigChannel+0x184>
 8003868:	2312      	movs	r3, #18
 800386a:	e024      	b.n	80038b6 <HAL_ADC_ConfigChannel+0x1ce>
 800386c:	2300      	movs	r3, #0
 800386e:	e022      	b.n	80038b6 <HAL_ADC_ConfigChannel+0x1ce>
 8003870:	2311      	movs	r3, #17
 8003872:	e020      	b.n	80038b6 <HAL_ADC_ConfigChannel+0x1ce>
 8003874:	2310      	movs	r3, #16
 8003876:	e01e      	b.n	80038b6 <HAL_ADC_ConfigChannel+0x1ce>
 8003878:	230f      	movs	r3, #15
 800387a:	e01c      	b.n	80038b6 <HAL_ADC_ConfigChannel+0x1ce>
 800387c:	230e      	movs	r3, #14
 800387e:	e01a      	b.n	80038b6 <HAL_ADC_ConfigChannel+0x1ce>
 8003880:	230d      	movs	r3, #13
 8003882:	e018      	b.n	80038b6 <HAL_ADC_ConfigChannel+0x1ce>
 8003884:	230c      	movs	r3, #12
 8003886:	e016      	b.n	80038b6 <HAL_ADC_ConfigChannel+0x1ce>
 8003888:	230b      	movs	r3, #11
 800388a:	e014      	b.n	80038b6 <HAL_ADC_ConfigChannel+0x1ce>
 800388c:	230a      	movs	r3, #10
 800388e:	e012      	b.n	80038b6 <HAL_ADC_ConfigChannel+0x1ce>
 8003890:	2309      	movs	r3, #9
 8003892:	e010      	b.n	80038b6 <HAL_ADC_ConfigChannel+0x1ce>
 8003894:	2308      	movs	r3, #8
 8003896:	e00e      	b.n	80038b6 <HAL_ADC_ConfigChannel+0x1ce>
 8003898:	2307      	movs	r3, #7
 800389a:	e00c      	b.n	80038b6 <HAL_ADC_ConfigChannel+0x1ce>
 800389c:	2306      	movs	r3, #6
 800389e:	e00a      	b.n	80038b6 <HAL_ADC_ConfigChannel+0x1ce>
 80038a0:	2305      	movs	r3, #5
 80038a2:	e008      	b.n	80038b6 <HAL_ADC_ConfigChannel+0x1ce>
 80038a4:	2304      	movs	r3, #4
 80038a6:	e006      	b.n	80038b6 <HAL_ADC_ConfigChannel+0x1ce>
 80038a8:	2303      	movs	r3, #3
 80038aa:	e004      	b.n	80038b6 <HAL_ADC_ConfigChannel+0x1ce>
 80038ac:	2302      	movs	r3, #2
 80038ae:	e002      	b.n	80038b6 <HAL_ADC_ConfigChannel+0x1ce>
 80038b0:	2301      	movs	r3, #1
 80038b2:	e000      	b.n	80038b6 <HAL_ADC_ConfigChannel+0x1ce>
 80038b4:	2300      	movs	r3, #0
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	6852      	ldr	r2, [r2, #4]
 80038ba:	201f      	movs	r0, #31
 80038bc:	4002      	ands	r2, r0
 80038be:	4093      	lsls	r3, r2
 80038c0:	000a      	movs	r2, r1
 80038c2:	431a      	orrs	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	089b      	lsrs	r3, r3, #2
 80038ce:	1c5a      	adds	r2, r3, #1
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	69db      	ldr	r3, [r3, #28]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d808      	bhi.n	80038ea <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6818      	ldr	r0, [r3, #0]
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	6859      	ldr	r1, [r3, #4]
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	001a      	movs	r2, r3
 80038e6:	f7ff facf 	bl	8002e88 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6818      	ldr	r0, [r3, #0]
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	6819      	ldr	r1, [r3, #0]
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	001a      	movs	r2, r3
 80038f8:	f7ff fb16 	bl	8002f28 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	db00      	blt.n	8003906 <HAL_ADC_ConfigChannel+0x21e>
 8003904:	e0bc      	b.n	8003a80 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003906:	4b50      	ldr	r3, [pc, #320]	; (8003a48 <HAL_ADC_ConfigChannel+0x360>)
 8003908:	0018      	movs	r0, r3
 800390a:	f7ff fa6b 	bl	8002de4 <LL_ADC_GetCommonPathInternalCh>
 800390e:	0003      	movs	r3, r0
 8003910:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a4d      	ldr	r2, [pc, #308]	; (8003a4c <HAL_ADC_ConfigChannel+0x364>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d122      	bne.n	8003962 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	2380      	movs	r3, #128	; 0x80
 8003920:	041b      	lsls	r3, r3, #16
 8003922:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003924:	d11d      	bne.n	8003962 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	2280      	movs	r2, #128	; 0x80
 800392a:	0412      	lsls	r2, r2, #16
 800392c:	4313      	orrs	r3, r2
 800392e:	4a46      	ldr	r2, [pc, #280]	; (8003a48 <HAL_ADC_ConfigChannel+0x360>)
 8003930:	0019      	movs	r1, r3
 8003932:	0010      	movs	r0, r2
 8003934:	f7ff fa42 	bl	8002dbc <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003938:	4b45      	ldr	r3, [pc, #276]	; (8003a50 <HAL_ADC_ConfigChannel+0x368>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4945      	ldr	r1, [pc, #276]	; (8003a54 <HAL_ADC_ConfigChannel+0x36c>)
 800393e:	0018      	movs	r0, r3
 8003940:	f7fc fbde 	bl	8000100 <__udivsi3>
 8003944:	0003      	movs	r3, r0
 8003946:	1c5a      	adds	r2, r3, #1
 8003948:	0013      	movs	r3, r2
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	189b      	adds	r3, r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003952:	e002      	b.n	800395a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	3b01      	subs	r3, #1
 8003958:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1f9      	bne.n	8003954 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003960:	e08e      	b.n	8003a80 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a3c      	ldr	r2, [pc, #240]	; (8003a58 <HAL_ADC_ConfigChannel+0x370>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d10e      	bne.n	800398a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	2380      	movs	r3, #128	; 0x80
 8003970:	045b      	lsls	r3, r3, #17
 8003972:	4013      	ands	r3, r2
 8003974:	d109      	bne.n	800398a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	2280      	movs	r2, #128	; 0x80
 800397a:	0452      	lsls	r2, r2, #17
 800397c:	4313      	orrs	r3, r2
 800397e:	4a32      	ldr	r2, [pc, #200]	; (8003a48 <HAL_ADC_ConfigChannel+0x360>)
 8003980:	0019      	movs	r1, r3
 8003982:	0010      	movs	r0, r2
 8003984:	f7ff fa1a 	bl	8002dbc <LL_ADC_SetCommonPathInternalCh>
 8003988:	e07a      	b.n	8003a80 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a33      	ldr	r2, [pc, #204]	; (8003a5c <HAL_ADC_ConfigChannel+0x374>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d000      	beq.n	8003996 <HAL_ADC_ConfigChannel+0x2ae>
 8003994:	e074      	b.n	8003a80 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	2380      	movs	r3, #128	; 0x80
 800399a:	03db      	lsls	r3, r3, #15
 800399c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800399e:	d000      	beq.n	80039a2 <HAL_ADC_ConfigChannel+0x2ba>
 80039a0:	e06e      	b.n	8003a80 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	2280      	movs	r2, #128	; 0x80
 80039a6:	03d2      	lsls	r2, r2, #15
 80039a8:	4313      	orrs	r3, r2
 80039aa:	4a27      	ldr	r2, [pc, #156]	; (8003a48 <HAL_ADC_ConfigChannel+0x360>)
 80039ac:	0019      	movs	r1, r3
 80039ae:	0010      	movs	r0, r2
 80039b0:	f7ff fa04 	bl	8002dbc <LL_ADC_SetCommonPathInternalCh>
 80039b4:	e064      	b.n	8003a80 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	691a      	ldr	r2, [r3, #16]
 80039ba:	2380      	movs	r3, #128	; 0x80
 80039bc:	061b      	lsls	r3, r3, #24
 80039be:	429a      	cmp	r2, r3
 80039c0:	d004      	beq.n	80039cc <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80039c6:	4a1f      	ldr	r2, [pc, #124]	; (8003a44 <HAL_ADC_ConfigChannel+0x35c>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d107      	bne.n	80039dc <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	0019      	movs	r1, r3
 80039d6:	0010      	movs	r0, r2
 80039d8:	f7ff fa87 	bl	8002eea <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	da4d      	bge.n	8003a80 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039e4:	4b18      	ldr	r3, [pc, #96]	; (8003a48 <HAL_ADC_ConfigChannel+0x360>)
 80039e6:	0018      	movs	r0, r3
 80039e8:	f7ff f9fc 	bl	8002de4 <LL_ADC_GetCommonPathInternalCh>
 80039ec:	0003      	movs	r3, r0
 80039ee:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a15      	ldr	r2, [pc, #84]	; (8003a4c <HAL_ADC_ConfigChannel+0x364>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d108      	bne.n	8003a0c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	4a18      	ldr	r2, [pc, #96]	; (8003a60 <HAL_ADC_ConfigChannel+0x378>)
 80039fe:	4013      	ands	r3, r2
 8003a00:	4a11      	ldr	r2, [pc, #68]	; (8003a48 <HAL_ADC_ConfigChannel+0x360>)
 8003a02:	0019      	movs	r1, r3
 8003a04:	0010      	movs	r0, r2
 8003a06:	f7ff f9d9 	bl	8002dbc <LL_ADC_SetCommonPathInternalCh>
 8003a0a:	e039      	b.n	8003a80 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a11      	ldr	r2, [pc, #68]	; (8003a58 <HAL_ADC_ConfigChannel+0x370>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d108      	bne.n	8003a28 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	4a12      	ldr	r2, [pc, #72]	; (8003a64 <HAL_ADC_ConfigChannel+0x37c>)
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	4a0a      	ldr	r2, [pc, #40]	; (8003a48 <HAL_ADC_ConfigChannel+0x360>)
 8003a1e:	0019      	movs	r1, r3
 8003a20:	0010      	movs	r0, r2
 8003a22:	f7ff f9cb 	bl	8002dbc <LL_ADC_SetCommonPathInternalCh>
 8003a26:	e02b      	b.n	8003a80 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a0b      	ldr	r2, [pc, #44]	; (8003a5c <HAL_ADC_ConfigChannel+0x374>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d126      	bne.n	8003a80 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	4a0c      	ldr	r2, [pc, #48]	; (8003a68 <HAL_ADC_ConfigChannel+0x380>)
 8003a36:	4013      	ands	r3, r2
 8003a38:	4a03      	ldr	r2, [pc, #12]	; (8003a48 <HAL_ADC_ConfigChannel+0x360>)
 8003a3a:	0019      	movs	r1, r3
 8003a3c:	0010      	movs	r0, r2
 8003a3e:	f7ff f9bd 	bl	8002dbc <LL_ADC_SetCommonPathInternalCh>
 8003a42:	e01d      	b.n	8003a80 <HAL_ADC_ConfigChannel+0x398>
 8003a44:	80000004 	.word	0x80000004
 8003a48:	40012708 	.word	0x40012708
 8003a4c:	b0001000 	.word	0xb0001000
 8003a50:	20000004 	.word	0x20000004
 8003a54:	00030d40 	.word	0x00030d40
 8003a58:	b8004000 	.word	0xb8004000
 8003a5c:	b4002000 	.word	0xb4002000
 8003a60:	ff7fffff 	.word	0xff7fffff
 8003a64:	feffffff 	.word	0xfeffffff
 8003a68:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a70:	2220      	movs	r2, #32
 8003a72:	431a      	orrs	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003a78:	2317      	movs	r3, #23
 8003a7a:	18fb      	adds	r3, r7, r3
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2254      	movs	r2, #84	; 0x54
 8003a84:	2100      	movs	r1, #0
 8003a86:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003a88:	2317      	movs	r3, #23
 8003a8a:	18fb      	adds	r3, r7, r3
 8003a8c:	781b      	ldrb	r3, [r3, #0]
}
 8003a8e:	0018      	movs	r0, r3
 8003a90:	46bd      	mov	sp, r7
 8003a92:	b006      	add	sp, #24
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	46c0      	nop			; (mov r8, r8)

08003a98 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	f7ff fa93 	bl	8002fd4 <LL_ADC_IsEnabled>
 8003aae:	1e03      	subs	r3, r0, #0
 8003ab0:	d000      	beq.n	8003ab4 <ADC_Enable+0x1c>
 8003ab2:	e069      	b.n	8003b88 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	4a36      	ldr	r2, [pc, #216]	; (8003b94 <ADC_Enable+0xfc>)
 8003abc:	4013      	ands	r3, r2
 8003abe:	d00d      	beq.n	8003adc <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac4:	2210      	movs	r2, #16
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e056      	b.n	8003b8a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	f7ff fa65 	bl	8002fb0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8003ae6:	4b2c      	ldr	r3, [pc, #176]	; (8003b98 <ADC_Enable+0x100>)
 8003ae8:	0018      	movs	r0, r3
 8003aea:	f7ff f97b 	bl	8002de4 <LL_ADC_GetCommonPathInternalCh>
 8003aee:	0002      	movs	r2, r0
 8003af0:	2380      	movs	r3, #128	; 0x80
 8003af2:	041b      	lsls	r3, r3, #16
 8003af4:	4013      	ands	r3, r2
 8003af6:	d00f      	beq.n	8003b18 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003af8:	4b28      	ldr	r3, [pc, #160]	; (8003b9c <ADC_Enable+0x104>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4928      	ldr	r1, [pc, #160]	; (8003ba0 <ADC_Enable+0x108>)
 8003afe:	0018      	movs	r0, r3
 8003b00:	f7fc fafe 	bl	8000100 <__udivsi3>
 8003b04:	0003      	movs	r3, r0
 8003b06:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8003b08:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003b0a:	e002      	b.n	8003b12 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1f9      	bne.n	8003b0c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	7e5b      	ldrb	r3, [r3, #25]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d033      	beq.n	8003b88 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003b20:	f7ff f91e 	bl	8002d60 <HAL_GetTick>
 8003b24:	0003      	movs	r3, r0
 8003b26:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b28:	e027      	b.n	8003b7a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	0018      	movs	r0, r3
 8003b30:	f7ff fa50 	bl	8002fd4 <LL_ADC_IsEnabled>
 8003b34:	1e03      	subs	r3, r0, #0
 8003b36:	d104      	bne.n	8003b42 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	0018      	movs	r0, r3
 8003b3e:	f7ff fa37 	bl	8002fb0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003b42:	f7ff f90d 	bl	8002d60 <HAL_GetTick>
 8003b46:	0002      	movs	r2, r0
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d914      	bls.n	8003b7a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2201      	movs	r2, #1
 8003b58:	4013      	ands	r3, r2
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d00d      	beq.n	8003b7a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b62:	2210      	movs	r2, #16
 8003b64:	431a      	orrs	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b6e:	2201      	movs	r2, #1
 8003b70:	431a      	orrs	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e007      	b.n	8003b8a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2201      	movs	r2, #1
 8003b82:	4013      	ands	r3, r2
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d1d0      	bne.n	8003b2a <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	b004      	add	sp, #16
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	46c0      	nop			; (mov r8, r8)
 8003b94:	80000017 	.word	0x80000017
 8003b98:	40012708 	.word	0x40012708
 8003b9c:	20000004 	.word	0x20000004
 8003ba0:	00030d40 	.word	0x00030d40

08003ba4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003bac:	46c0      	nop			; (mov r8, r8)
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	b002      	add	sp, #8
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003bbc:	46c0      	nop			; (mov r8, r8)
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	b002      	add	sp, #8
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003bcc:	46c0      	nop			; (mov r8, r8)
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	b002      	add	sp, #8
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8003bdc:	46c0      	nop			; (mov r8, r8)
 8003bde:	46bd      	mov	sp, r7
 8003be0:	b002      	add	sp, #8
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	0002      	movs	r2, r0
 8003bec:	1dfb      	adds	r3, r7, #7
 8003bee:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003bf0:	1dfb      	adds	r3, r7, #7
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	2b7f      	cmp	r3, #127	; 0x7f
 8003bf6:	d809      	bhi.n	8003c0c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bf8:	1dfb      	adds	r3, r7, #7
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	001a      	movs	r2, r3
 8003bfe:	231f      	movs	r3, #31
 8003c00:	401a      	ands	r2, r3
 8003c02:	4b04      	ldr	r3, [pc, #16]	; (8003c14 <__NVIC_EnableIRQ+0x30>)
 8003c04:	2101      	movs	r1, #1
 8003c06:	4091      	lsls	r1, r2
 8003c08:	000a      	movs	r2, r1
 8003c0a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003c0c:	46c0      	nop			; (mov r8, r8)
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	b002      	add	sp, #8
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	e000e100 	.word	0xe000e100

08003c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c18:	b590      	push	{r4, r7, lr}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	0002      	movs	r2, r0
 8003c20:	6039      	str	r1, [r7, #0]
 8003c22:	1dfb      	adds	r3, r7, #7
 8003c24:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003c26:	1dfb      	adds	r3, r7, #7
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	2b7f      	cmp	r3, #127	; 0x7f
 8003c2c:	d828      	bhi.n	8003c80 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c2e:	4a2f      	ldr	r2, [pc, #188]	; (8003cec <__NVIC_SetPriority+0xd4>)
 8003c30:	1dfb      	adds	r3, r7, #7
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	b25b      	sxtb	r3, r3
 8003c36:	089b      	lsrs	r3, r3, #2
 8003c38:	33c0      	adds	r3, #192	; 0xc0
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	589b      	ldr	r3, [r3, r2]
 8003c3e:	1dfa      	adds	r2, r7, #7
 8003c40:	7812      	ldrb	r2, [r2, #0]
 8003c42:	0011      	movs	r1, r2
 8003c44:	2203      	movs	r2, #3
 8003c46:	400a      	ands	r2, r1
 8003c48:	00d2      	lsls	r2, r2, #3
 8003c4a:	21ff      	movs	r1, #255	; 0xff
 8003c4c:	4091      	lsls	r1, r2
 8003c4e:	000a      	movs	r2, r1
 8003c50:	43d2      	mvns	r2, r2
 8003c52:	401a      	ands	r2, r3
 8003c54:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	019b      	lsls	r3, r3, #6
 8003c5a:	22ff      	movs	r2, #255	; 0xff
 8003c5c:	401a      	ands	r2, r3
 8003c5e:	1dfb      	adds	r3, r7, #7
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	0018      	movs	r0, r3
 8003c64:	2303      	movs	r3, #3
 8003c66:	4003      	ands	r3, r0
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c6c:	481f      	ldr	r0, [pc, #124]	; (8003cec <__NVIC_SetPriority+0xd4>)
 8003c6e:	1dfb      	adds	r3, r7, #7
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	b25b      	sxtb	r3, r3
 8003c74:	089b      	lsrs	r3, r3, #2
 8003c76:	430a      	orrs	r2, r1
 8003c78:	33c0      	adds	r3, #192	; 0xc0
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003c7e:	e031      	b.n	8003ce4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c80:	4a1b      	ldr	r2, [pc, #108]	; (8003cf0 <__NVIC_SetPriority+0xd8>)
 8003c82:	1dfb      	adds	r3, r7, #7
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	0019      	movs	r1, r3
 8003c88:	230f      	movs	r3, #15
 8003c8a:	400b      	ands	r3, r1
 8003c8c:	3b08      	subs	r3, #8
 8003c8e:	089b      	lsrs	r3, r3, #2
 8003c90:	3306      	adds	r3, #6
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	18d3      	adds	r3, r2, r3
 8003c96:	3304      	adds	r3, #4
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	1dfa      	adds	r2, r7, #7
 8003c9c:	7812      	ldrb	r2, [r2, #0]
 8003c9e:	0011      	movs	r1, r2
 8003ca0:	2203      	movs	r2, #3
 8003ca2:	400a      	ands	r2, r1
 8003ca4:	00d2      	lsls	r2, r2, #3
 8003ca6:	21ff      	movs	r1, #255	; 0xff
 8003ca8:	4091      	lsls	r1, r2
 8003caa:	000a      	movs	r2, r1
 8003cac:	43d2      	mvns	r2, r2
 8003cae:	401a      	ands	r2, r3
 8003cb0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	019b      	lsls	r3, r3, #6
 8003cb6:	22ff      	movs	r2, #255	; 0xff
 8003cb8:	401a      	ands	r2, r3
 8003cba:	1dfb      	adds	r3, r7, #7
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	0018      	movs	r0, r3
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	4003      	ands	r3, r0
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003cc8:	4809      	ldr	r0, [pc, #36]	; (8003cf0 <__NVIC_SetPriority+0xd8>)
 8003cca:	1dfb      	adds	r3, r7, #7
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	001c      	movs	r4, r3
 8003cd0:	230f      	movs	r3, #15
 8003cd2:	4023      	ands	r3, r4
 8003cd4:	3b08      	subs	r3, #8
 8003cd6:	089b      	lsrs	r3, r3, #2
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	3306      	adds	r3, #6
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	18c3      	adds	r3, r0, r3
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	601a      	str	r2, [r3, #0]
}
 8003ce4:	46c0      	nop			; (mov r8, r8)
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	b003      	add	sp, #12
 8003cea:	bd90      	pop	{r4, r7, pc}
 8003cec:	e000e100 	.word	0xe000e100
 8003cf0:	e000ed00 	.word	0xe000ed00

08003cf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	1e5a      	subs	r2, r3, #1
 8003d00:	2380      	movs	r3, #128	; 0x80
 8003d02:	045b      	lsls	r3, r3, #17
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d301      	bcc.n	8003d0c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e010      	b.n	8003d2e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d0c:	4b0a      	ldr	r3, [pc, #40]	; (8003d38 <SysTick_Config+0x44>)
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	3a01      	subs	r2, #1
 8003d12:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d14:	2301      	movs	r3, #1
 8003d16:	425b      	negs	r3, r3
 8003d18:	2103      	movs	r1, #3
 8003d1a:	0018      	movs	r0, r3
 8003d1c:	f7ff ff7c 	bl	8003c18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d20:	4b05      	ldr	r3, [pc, #20]	; (8003d38 <SysTick_Config+0x44>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d26:	4b04      	ldr	r3, [pc, #16]	; (8003d38 <SysTick_Config+0x44>)
 8003d28:	2207      	movs	r2, #7
 8003d2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	0018      	movs	r0, r3
 8003d30:	46bd      	mov	sp, r7
 8003d32:	b002      	add	sp, #8
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	46c0      	nop			; (mov r8, r8)
 8003d38:	e000e010 	.word	0xe000e010

08003d3c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60b9      	str	r1, [r7, #8]
 8003d44:	607a      	str	r2, [r7, #4]
 8003d46:	210f      	movs	r1, #15
 8003d48:	187b      	adds	r3, r7, r1
 8003d4a:	1c02      	adds	r2, r0, #0
 8003d4c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	187b      	adds	r3, r7, r1
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	b25b      	sxtb	r3, r3
 8003d56:	0011      	movs	r1, r2
 8003d58:	0018      	movs	r0, r3
 8003d5a:	f7ff ff5d 	bl	8003c18 <__NVIC_SetPriority>
}
 8003d5e:	46c0      	nop			; (mov r8, r8)
 8003d60:	46bd      	mov	sp, r7
 8003d62:	b004      	add	sp, #16
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b082      	sub	sp, #8
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	0002      	movs	r2, r0
 8003d6e:	1dfb      	adds	r3, r7, #7
 8003d70:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d72:	1dfb      	adds	r3, r7, #7
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	b25b      	sxtb	r3, r3
 8003d78:	0018      	movs	r0, r3
 8003d7a:	f7ff ff33 	bl	8003be4 <__NVIC_EnableIRQ>
}
 8003d7e:	46c0      	nop			; (mov r8, r8)
 8003d80:	46bd      	mov	sp, r7
 8003d82:	b002      	add	sp, #8
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b082      	sub	sp, #8
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	0018      	movs	r0, r3
 8003d92:	f7ff ffaf 	bl	8003cf4 <SysTick_Config>
 8003d96:	0003      	movs	r3, r0
}
 8003d98:	0018      	movs	r0, r3
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	b002      	add	sp, #8
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003daa:	2300      	movs	r3, #0
 8003dac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dae:	e147      	b.n	8004040 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2101      	movs	r1, #1
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	4091      	lsls	r1, r2
 8003dba:	000a      	movs	r2, r1
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d100      	bne.n	8003dc8 <HAL_GPIO_Init+0x28>
 8003dc6:	e138      	b.n	800403a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	2203      	movs	r2, #3
 8003dce:	4013      	ands	r3, r2
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d005      	beq.n	8003de0 <HAL_GPIO_Init+0x40>
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	2203      	movs	r2, #3
 8003dda:	4013      	ands	r3, r2
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d130      	bne.n	8003e42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	005b      	lsls	r3, r3, #1
 8003dea:	2203      	movs	r2, #3
 8003dec:	409a      	lsls	r2, r3
 8003dee:	0013      	movs	r3, r2
 8003df0:	43da      	mvns	r2, r3
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	4013      	ands	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	68da      	ldr	r2, [r3, #12]
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	005b      	lsls	r3, r3, #1
 8003e00:	409a      	lsls	r2, r3
 8003e02:	0013      	movs	r3, r2
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e16:	2201      	movs	r2, #1
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	409a      	lsls	r2, r3
 8003e1c:	0013      	movs	r3, r2
 8003e1e:	43da      	mvns	r2, r3
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	4013      	ands	r3, r2
 8003e24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	091b      	lsrs	r3, r3, #4
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	401a      	ands	r2, r3
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	409a      	lsls	r2, r3
 8003e34:	0013      	movs	r3, r2
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	2203      	movs	r2, #3
 8003e48:	4013      	ands	r3, r2
 8003e4a:	2b03      	cmp	r3, #3
 8003e4c:	d017      	beq.n	8003e7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	005b      	lsls	r3, r3, #1
 8003e58:	2203      	movs	r2, #3
 8003e5a:	409a      	lsls	r2, r3
 8003e5c:	0013      	movs	r3, r2
 8003e5e:	43da      	mvns	r2, r3
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	4013      	ands	r3, r2
 8003e64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	689a      	ldr	r2, [r3, #8]
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	409a      	lsls	r2, r3
 8003e70:	0013      	movs	r3, r2
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	2203      	movs	r2, #3
 8003e84:	4013      	ands	r3, r2
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d123      	bne.n	8003ed2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	08da      	lsrs	r2, r3, #3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	3208      	adds	r2, #8
 8003e92:	0092      	lsls	r2, r2, #2
 8003e94:	58d3      	ldr	r3, [r2, r3]
 8003e96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	2207      	movs	r2, #7
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	220f      	movs	r2, #15
 8003ea2:	409a      	lsls	r2, r3
 8003ea4:	0013      	movs	r3, r2
 8003ea6:	43da      	mvns	r2, r3
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	691a      	ldr	r2, [r3, #16]
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	2107      	movs	r1, #7
 8003eb6:	400b      	ands	r3, r1
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	409a      	lsls	r2, r3
 8003ebc:	0013      	movs	r3, r2
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	08da      	lsrs	r2, r3, #3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	3208      	adds	r2, #8
 8003ecc:	0092      	lsls	r2, r2, #2
 8003ece:	6939      	ldr	r1, [r7, #16]
 8003ed0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	2203      	movs	r2, #3
 8003ede:	409a      	lsls	r2, r3
 8003ee0:	0013      	movs	r3, r2
 8003ee2:	43da      	mvns	r2, r3
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	2203      	movs	r2, #3
 8003ef0:	401a      	ands	r2, r3
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	409a      	lsls	r2, r3
 8003ef8:	0013      	movs	r3, r2
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	23c0      	movs	r3, #192	; 0xc0
 8003f0c:	029b      	lsls	r3, r3, #10
 8003f0e:	4013      	ands	r3, r2
 8003f10:	d100      	bne.n	8003f14 <HAL_GPIO_Init+0x174>
 8003f12:	e092      	b.n	800403a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003f14:	4a50      	ldr	r2, [pc, #320]	; (8004058 <HAL_GPIO_Init+0x2b8>)
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	089b      	lsrs	r3, r3, #2
 8003f1a:	3318      	adds	r3, #24
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	589b      	ldr	r3, [r3, r2]
 8003f20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	2203      	movs	r2, #3
 8003f26:	4013      	ands	r3, r2
 8003f28:	00db      	lsls	r3, r3, #3
 8003f2a:	220f      	movs	r2, #15
 8003f2c:	409a      	lsls	r2, r3
 8003f2e:	0013      	movs	r3, r2
 8003f30:	43da      	mvns	r2, r3
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	4013      	ands	r3, r2
 8003f36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	23a0      	movs	r3, #160	; 0xa0
 8003f3c:	05db      	lsls	r3, r3, #23
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d013      	beq.n	8003f6a <HAL_GPIO_Init+0x1ca>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a45      	ldr	r2, [pc, #276]	; (800405c <HAL_GPIO_Init+0x2bc>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d00d      	beq.n	8003f66 <HAL_GPIO_Init+0x1c6>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a44      	ldr	r2, [pc, #272]	; (8004060 <HAL_GPIO_Init+0x2c0>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d007      	beq.n	8003f62 <HAL_GPIO_Init+0x1c2>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a43      	ldr	r2, [pc, #268]	; (8004064 <HAL_GPIO_Init+0x2c4>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d101      	bne.n	8003f5e <HAL_GPIO_Init+0x1be>
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e006      	b.n	8003f6c <HAL_GPIO_Init+0x1cc>
 8003f5e:	2305      	movs	r3, #5
 8003f60:	e004      	b.n	8003f6c <HAL_GPIO_Init+0x1cc>
 8003f62:	2302      	movs	r3, #2
 8003f64:	e002      	b.n	8003f6c <HAL_GPIO_Init+0x1cc>
 8003f66:	2301      	movs	r3, #1
 8003f68:	e000      	b.n	8003f6c <HAL_GPIO_Init+0x1cc>
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	697a      	ldr	r2, [r7, #20]
 8003f6e:	2103      	movs	r1, #3
 8003f70:	400a      	ands	r2, r1
 8003f72:	00d2      	lsls	r2, r2, #3
 8003f74:	4093      	lsls	r3, r2
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003f7c:	4936      	ldr	r1, [pc, #216]	; (8004058 <HAL_GPIO_Init+0x2b8>)
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	089b      	lsrs	r3, r3, #2
 8003f82:	3318      	adds	r3, #24
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	693a      	ldr	r2, [r7, #16]
 8003f88:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f8a:	4b33      	ldr	r3, [pc, #204]	; (8004058 <HAL_GPIO_Init+0x2b8>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	43da      	mvns	r2, r3
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	4013      	ands	r3, r2
 8003f98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	685a      	ldr	r2, [r3, #4]
 8003f9e:	2380      	movs	r3, #128	; 0x80
 8003fa0:	035b      	lsls	r3, r3, #13
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	d003      	beq.n	8003fae <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003fae:	4b2a      	ldr	r3, [pc, #168]	; (8004058 <HAL_GPIO_Init+0x2b8>)
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003fb4:	4b28      	ldr	r3, [pc, #160]	; (8004058 <HAL_GPIO_Init+0x2b8>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	43da      	mvns	r2, r3
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685a      	ldr	r2, [r3, #4]
 8003fc8:	2380      	movs	r3, #128	; 0x80
 8003fca:	039b      	lsls	r3, r3, #14
 8003fcc:	4013      	ands	r3, r2
 8003fce:	d003      	beq.n	8003fd8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003fd8:	4b1f      	ldr	r3, [pc, #124]	; (8004058 <HAL_GPIO_Init+0x2b8>)
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003fde:	4a1e      	ldr	r2, [pc, #120]	; (8004058 <HAL_GPIO_Init+0x2b8>)
 8003fe0:	2384      	movs	r3, #132	; 0x84
 8003fe2:	58d3      	ldr	r3, [r2, r3]
 8003fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	43da      	mvns	r2, r3
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	4013      	ands	r3, r2
 8003fee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685a      	ldr	r2, [r3, #4]
 8003ff4:	2380      	movs	r3, #128	; 0x80
 8003ff6:	029b      	lsls	r3, r3, #10
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	d003      	beq.n	8004004 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	4313      	orrs	r3, r2
 8004002:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004004:	4914      	ldr	r1, [pc, #80]	; (8004058 <HAL_GPIO_Init+0x2b8>)
 8004006:	2284      	movs	r2, #132	; 0x84
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800400c:	4a12      	ldr	r2, [pc, #72]	; (8004058 <HAL_GPIO_Init+0x2b8>)
 800400e:	2380      	movs	r3, #128	; 0x80
 8004010:	58d3      	ldr	r3, [r2, r3]
 8004012:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	43da      	mvns	r2, r3
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	4013      	ands	r3, r2
 800401c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	2380      	movs	r3, #128	; 0x80
 8004024:	025b      	lsls	r3, r3, #9
 8004026:	4013      	ands	r3, r2
 8004028:	d003      	beq.n	8004032 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	4313      	orrs	r3, r2
 8004030:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004032:	4909      	ldr	r1, [pc, #36]	; (8004058 <HAL_GPIO_Init+0x2b8>)
 8004034:	2280      	movs	r2, #128	; 0x80
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	3301      	adds	r3, #1
 800403e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	40da      	lsrs	r2, r3
 8004048:	1e13      	subs	r3, r2, #0
 800404a:	d000      	beq.n	800404e <HAL_GPIO_Init+0x2ae>
 800404c:	e6b0      	b.n	8003db0 <HAL_GPIO_Init+0x10>
  }
}
 800404e:	46c0      	nop			; (mov r8, r8)
 8004050:	46c0      	nop			; (mov r8, r8)
 8004052:	46bd      	mov	sp, r7
 8004054:	b006      	add	sp, #24
 8004056:	bd80      	pop	{r7, pc}
 8004058:	40021800 	.word	0x40021800
 800405c:	50000400 	.word	0x50000400
 8004060:	50000800 	.word	0x50000800
 8004064:	50000c00 	.word	0x50000c00

08004068 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	0008      	movs	r0, r1
 8004072:	0011      	movs	r1, r2
 8004074:	1cbb      	adds	r3, r7, #2
 8004076:	1c02      	adds	r2, r0, #0
 8004078:	801a      	strh	r2, [r3, #0]
 800407a:	1c7b      	adds	r3, r7, #1
 800407c:	1c0a      	adds	r2, r1, #0
 800407e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004080:	1c7b      	adds	r3, r7, #1
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d004      	beq.n	8004092 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004088:	1cbb      	adds	r3, r7, #2
 800408a:	881a      	ldrh	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004090:	e003      	b.n	800409a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004092:	1cbb      	adds	r3, r7, #2
 8004094:	881a      	ldrh	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	629a      	str	r2, [r3, #40]	; 0x28
}
 800409a:	46c0      	nop			; (mov r8, r8)
 800409c:	46bd      	mov	sp, r7
 800409e:	b002      	add	sp, #8
 80040a0:	bd80      	pop	{r7, pc}
	...

080040a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80040ac:	4b19      	ldr	r3, [pc, #100]	; (8004114 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a19      	ldr	r2, [pc, #100]	; (8004118 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80040b2:	4013      	ands	r3, r2
 80040b4:	0019      	movs	r1, r3
 80040b6:	4b17      	ldr	r3, [pc, #92]	; (8004114 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	2380      	movs	r3, #128	; 0x80
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d11f      	bne.n	8004108 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80040c8:	4b14      	ldr	r3, [pc, #80]	; (800411c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	0013      	movs	r3, r2
 80040ce:	005b      	lsls	r3, r3, #1
 80040d0:	189b      	adds	r3, r3, r2
 80040d2:	005b      	lsls	r3, r3, #1
 80040d4:	4912      	ldr	r1, [pc, #72]	; (8004120 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80040d6:	0018      	movs	r0, r3
 80040d8:	f7fc f812 	bl	8000100 <__udivsi3>
 80040dc:	0003      	movs	r3, r0
 80040de:	3301      	adds	r3, #1
 80040e0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040e2:	e008      	b.n	80040f6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	3b01      	subs	r3, #1
 80040ee:	60fb      	str	r3, [r7, #12]
 80040f0:	e001      	b.n	80040f6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e009      	b.n	800410a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040f6:	4b07      	ldr	r3, [pc, #28]	; (8004114 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80040f8:	695a      	ldr	r2, [r3, #20]
 80040fa:	2380      	movs	r3, #128	; 0x80
 80040fc:	00db      	lsls	r3, r3, #3
 80040fe:	401a      	ands	r2, r3
 8004100:	2380      	movs	r3, #128	; 0x80
 8004102:	00db      	lsls	r3, r3, #3
 8004104:	429a      	cmp	r2, r3
 8004106:	d0ed      	beq.n	80040e4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	0018      	movs	r0, r3
 800410c:	46bd      	mov	sp, r7
 800410e:	b004      	add	sp, #16
 8004110:	bd80      	pop	{r7, pc}
 8004112:	46c0      	nop			; (mov r8, r8)
 8004114:	40007000 	.word	0x40007000
 8004118:	fffff9ff 	.word	0xfffff9ff
 800411c:	20000004 	.word	0x20000004
 8004120:	000f4240 	.word	0x000f4240

08004124 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b088      	sub	sp, #32
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d101      	bne.n	8004136 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e2f3      	b.n	800471e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2201      	movs	r2, #1
 800413c:	4013      	ands	r3, r2
 800413e:	d100      	bne.n	8004142 <HAL_RCC_OscConfig+0x1e>
 8004140:	e07c      	b.n	800423c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004142:	4bc3      	ldr	r3, [pc, #780]	; (8004450 <HAL_RCC_OscConfig+0x32c>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	2238      	movs	r2, #56	; 0x38
 8004148:	4013      	ands	r3, r2
 800414a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800414c:	4bc0      	ldr	r3, [pc, #768]	; (8004450 <HAL_RCC_OscConfig+0x32c>)
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	2203      	movs	r2, #3
 8004152:	4013      	ands	r3, r2
 8004154:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	2b10      	cmp	r3, #16
 800415a:	d102      	bne.n	8004162 <HAL_RCC_OscConfig+0x3e>
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	2b03      	cmp	r3, #3
 8004160:	d002      	beq.n	8004168 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	2b08      	cmp	r3, #8
 8004166:	d10b      	bne.n	8004180 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004168:	4bb9      	ldr	r3, [pc, #740]	; (8004450 <HAL_RCC_OscConfig+0x32c>)
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	2380      	movs	r3, #128	; 0x80
 800416e:	029b      	lsls	r3, r3, #10
 8004170:	4013      	ands	r3, r2
 8004172:	d062      	beq.n	800423a <HAL_RCC_OscConfig+0x116>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d15e      	bne.n	800423a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e2ce      	b.n	800471e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	2380      	movs	r3, #128	; 0x80
 8004186:	025b      	lsls	r3, r3, #9
 8004188:	429a      	cmp	r2, r3
 800418a:	d107      	bne.n	800419c <HAL_RCC_OscConfig+0x78>
 800418c:	4bb0      	ldr	r3, [pc, #704]	; (8004450 <HAL_RCC_OscConfig+0x32c>)
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	4baf      	ldr	r3, [pc, #700]	; (8004450 <HAL_RCC_OscConfig+0x32c>)
 8004192:	2180      	movs	r1, #128	; 0x80
 8004194:	0249      	lsls	r1, r1, #9
 8004196:	430a      	orrs	r2, r1
 8004198:	601a      	str	r2, [r3, #0]
 800419a:	e020      	b.n	80041de <HAL_RCC_OscConfig+0xba>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	23a0      	movs	r3, #160	; 0xa0
 80041a2:	02db      	lsls	r3, r3, #11
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d10e      	bne.n	80041c6 <HAL_RCC_OscConfig+0xa2>
 80041a8:	4ba9      	ldr	r3, [pc, #676]	; (8004450 <HAL_RCC_OscConfig+0x32c>)
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	4ba8      	ldr	r3, [pc, #672]	; (8004450 <HAL_RCC_OscConfig+0x32c>)
 80041ae:	2180      	movs	r1, #128	; 0x80
 80041b0:	02c9      	lsls	r1, r1, #11
 80041b2:	430a      	orrs	r2, r1
 80041b4:	601a      	str	r2, [r3, #0]
 80041b6:	4ba6      	ldr	r3, [pc, #664]	; (8004450 <HAL_RCC_OscConfig+0x32c>)
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	4ba5      	ldr	r3, [pc, #660]	; (8004450 <HAL_RCC_OscConfig+0x32c>)
 80041bc:	2180      	movs	r1, #128	; 0x80
 80041be:	0249      	lsls	r1, r1, #9
 80041c0:	430a      	orrs	r2, r1
 80041c2:	601a      	str	r2, [r3, #0]
 80041c4:	e00b      	b.n	80041de <HAL_RCC_OscConfig+0xba>
 80041c6:	4ba2      	ldr	r3, [pc, #648]	; (8004450 <HAL_RCC_OscConfig+0x32c>)
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	4ba1      	ldr	r3, [pc, #644]	; (8004450 <HAL_RCC_OscConfig+0x32c>)
 80041cc:	49a1      	ldr	r1, [pc, #644]	; (8004454 <HAL_RCC_OscConfig+0x330>)
 80041ce:	400a      	ands	r2, r1
 80041d0:	601a      	str	r2, [r3, #0]
 80041d2:	4b9f      	ldr	r3, [pc, #636]	; (8004450 <HAL_RCC_OscConfig+0x32c>)
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	4b9e      	ldr	r3, [pc, #632]	; (8004450 <HAL_RCC_OscConfig+0x32c>)
 80041d8:	499f      	ldr	r1, [pc, #636]	; (8004458 <HAL_RCC_OscConfig+0x334>)
 80041da:	400a      	ands	r2, r1
 80041dc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d014      	beq.n	8004210 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e6:	f7fe fdbb 	bl	8002d60 <HAL_GetTick>
 80041ea:	0003      	movs	r3, r0
 80041ec:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041ee:	e008      	b.n	8004202 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041f0:	f7fe fdb6 	bl	8002d60 <HAL_GetTick>
 80041f4:	0002      	movs	r2, r0
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b64      	cmp	r3, #100	; 0x64
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e28d      	b.n	800471e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004202:	4b93      	ldr	r3, [pc, #588]	; (8004450 <HAL_RCC_OscConfig+0x32c>)
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	2380      	movs	r3, #128	; 0x80
 8004208:	029b      	lsls	r3, r3, #10
 800420a:	4013      	ands	r3, r2
 800420c:	d0f0      	beq.n	80041f0 <HAL_RCC_OscConfig+0xcc>
 800420e:	e015      	b.n	800423c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004210:	f7fe fda6 	bl	8002d60 <HAL_GetTick>
 8004214:	0003      	movs	r3, r0
 8004216:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004218:	e008      	b.n	800422c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800421a:	f7fe fda1 	bl	8002d60 <HAL_GetTick>
 800421e:	0002      	movs	r2, r0
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b64      	cmp	r3, #100	; 0x64
 8004226:	d901      	bls.n	800422c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e278      	b.n	800471e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800422c:	4b88      	ldr	r3, [pc, #544]	; (8004450 <HAL_RCC_OscConfig+0x32c>)
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	2380      	movs	r3, #128	; 0x80
 8004232:	029b      	lsls	r3, r3, #10
 8004234:	4013      	ands	r3, r2
 8004236:	d1f0      	bne.n	800421a <HAL_RCC_OscConfig+0xf6>
 8004238:	e000      	b.n	800423c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800423a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2202      	movs	r2, #2
 8004242:	4013      	ands	r3, r2
 8004244:	d100      	bne.n	8004248 <HAL_RCC_OscConfig+0x124>
 8004246:	e099      	b.n	800437c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004248:	4b81      	ldr	r3, [pc, #516]	; (8004450 <HAL_RCC_OscConfig+0x32c>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	2238      	movs	r2, #56	; 0x38
 800424e:	4013      	ands	r3, r2
 8004250:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004252:	4b7f      	ldr	r3, [pc, #508]	; (8004450 <HAL_RCC_OscConfig+0x32c>)
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	2203      	movs	r2, #3
 8004258:	4013      	ands	r3, r2
 800425a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	2b10      	cmp	r3, #16
 8004260:	d102      	bne.n	8004268 <HAL_RCC_OscConfig+0x144>
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	2b02      	cmp	r3, #2
 8004266:	d002      	beq.n	800426e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d135      	bne.n	80042da <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800426e:	4b78      	ldr	r3, [pc, #480]	; (8004450 <HAL_RCC_OscConfig+0x32c>)
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	2380      	movs	r3, #128	; 0x80
 8004274:	00db      	lsls	r3, r3, #3
 8004276:	4013      	ands	r3, r2
 8004278:	d005      	beq.n	8004286 <HAL_RCC_OscConfig+0x162>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d101      	bne.n	8004286 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e24b      	b.n	800471e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004286:	4b72      	ldr	r3, [pc, #456]	; (8004450 <HAL_RCC_OscConfig+0x32c>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	4a74      	ldr	r2, [pc, #464]	; (800445c <HAL_RCC_OscConfig+0x338>)
 800428c:	4013      	ands	r3, r2
 800428e:	0019      	movs	r1, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	695b      	ldr	r3, [r3, #20]
 8004294:	021a      	lsls	r2, r3, #8
 8004296:	4b6e      	ldr	r3, [pc, #440]	; (8004450 <HAL_RCC_OscConfig+0x32c>)
 8004298:	430a      	orrs	r2, r1
 800429a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d112      	bne.n	80042c8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80042a2:	4b6b      	ldr	r3, [pc, #428]	; (8004450 <HAL_RCC_OscConfig+0x32c>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a6e      	ldr	r2, [pc, #440]	; (8004460 <HAL_RCC_OscConfig+0x33c>)
 80042a8:	4013      	ands	r3, r2
 80042aa:	0019      	movs	r1, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	691a      	ldr	r2, [r3, #16]
 80042b0:	4b67      	ldr	r3, [pc, #412]	; (8004450 <HAL_RCC_OscConfig+0x32c>)
 80042b2:	430a      	orrs	r2, r1
 80042b4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80042b6:	4b66      	ldr	r3, [pc, #408]	; (8004450 <HAL_RCC_OscConfig+0x32c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	0adb      	lsrs	r3, r3, #11
 80042bc:	2207      	movs	r2, #7
 80042be:	4013      	ands	r3, r2
 80042c0:	4a68      	ldr	r2, [pc, #416]	; (8004464 <HAL_RCC_OscConfig+0x340>)
 80042c2:	40da      	lsrs	r2, r3
 80042c4:	4b68      	ldr	r3, [pc, #416]	; (8004468 <HAL_RCC_OscConfig+0x344>)
 80042c6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80042c8:	4b68      	ldr	r3, [pc, #416]	; (800446c <HAL_RCC_OscConfig+0x348>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	0018      	movs	r0, r3
 80042ce:	f7fe fceb 	bl	8002ca8 <HAL_InitTick>
 80042d2:	1e03      	subs	r3, r0, #0
 80042d4:	d051      	beq.n	800437a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e221      	b.n	800471e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d030      	beq.n	8004344 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80042e2:	4b5b      	ldr	r3, [pc, #364]	; (8004450 <HAL_RCC_OscConfig+0x32c>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a5e      	ldr	r2, [pc, #376]	; (8004460 <HAL_RCC_OscConfig+0x33c>)
 80042e8:	4013      	ands	r3, r2
 80042ea:	0019      	movs	r1, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	691a      	ldr	r2, [r3, #16]
 80042f0:	4b57      	ldr	r3, [pc, #348]	; (8004450 <HAL_RCC_OscConfig+0x32c>)
 80042f2:	430a      	orrs	r2, r1
 80042f4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80042f6:	4b56      	ldr	r3, [pc, #344]	; (8004450 <HAL_RCC_OscConfig+0x32c>)
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	4b55      	ldr	r3, [pc, #340]	; (8004450 <HAL_RCC_OscConfig+0x32c>)
 80042fc:	2180      	movs	r1, #128	; 0x80
 80042fe:	0049      	lsls	r1, r1, #1
 8004300:	430a      	orrs	r2, r1
 8004302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004304:	f7fe fd2c 	bl	8002d60 <HAL_GetTick>
 8004308:	0003      	movs	r3, r0
 800430a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800430c:	e008      	b.n	8004320 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800430e:	f7fe fd27 	bl	8002d60 <HAL_GetTick>
 8004312:	0002      	movs	r2, r0
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	2b02      	cmp	r3, #2
 800431a:	d901      	bls.n	8004320 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e1fe      	b.n	800471e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004320:	4b4b      	ldr	r3, [pc, #300]	; (8004450 <HAL_RCC_OscConfig+0x32c>)
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	2380      	movs	r3, #128	; 0x80
 8004326:	00db      	lsls	r3, r3, #3
 8004328:	4013      	ands	r3, r2
 800432a:	d0f0      	beq.n	800430e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800432c:	4b48      	ldr	r3, [pc, #288]	; (8004450 <HAL_RCC_OscConfig+0x32c>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	4a4a      	ldr	r2, [pc, #296]	; (800445c <HAL_RCC_OscConfig+0x338>)
 8004332:	4013      	ands	r3, r2
 8004334:	0019      	movs	r1, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	021a      	lsls	r2, r3, #8
 800433c:	4b44      	ldr	r3, [pc, #272]	; (8004450 <HAL_RCC_OscConfig+0x32c>)
 800433e:	430a      	orrs	r2, r1
 8004340:	605a      	str	r2, [r3, #4]
 8004342:	e01b      	b.n	800437c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004344:	4b42      	ldr	r3, [pc, #264]	; (8004450 <HAL_RCC_OscConfig+0x32c>)
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	4b41      	ldr	r3, [pc, #260]	; (8004450 <HAL_RCC_OscConfig+0x32c>)
 800434a:	4949      	ldr	r1, [pc, #292]	; (8004470 <HAL_RCC_OscConfig+0x34c>)
 800434c:	400a      	ands	r2, r1
 800434e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004350:	f7fe fd06 	bl	8002d60 <HAL_GetTick>
 8004354:	0003      	movs	r3, r0
 8004356:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004358:	e008      	b.n	800436c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800435a:	f7fe fd01 	bl	8002d60 <HAL_GetTick>
 800435e:	0002      	movs	r2, r0
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	2b02      	cmp	r3, #2
 8004366:	d901      	bls.n	800436c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e1d8      	b.n	800471e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800436c:	4b38      	ldr	r3, [pc, #224]	; (8004450 <HAL_RCC_OscConfig+0x32c>)
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	2380      	movs	r3, #128	; 0x80
 8004372:	00db      	lsls	r3, r3, #3
 8004374:	4013      	ands	r3, r2
 8004376:	d1f0      	bne.n	800435a <HAL_RCC_OscConfig+0x236>
 8004378:	e000      	b.n	800437c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800437a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2208      	movs	r2, #8
 8004382:	4013      	ands	r3, r2
 8004384:	d047      	beq.n	8004416 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004386:	4b32      	ldr	r3, [pc, #200]	; (8004450 <HAL_RCC_OscConfig+0x32c>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	2238      	movs	r2, #56	; 0x38
 800438c:	4013      	ands	r3, r2
 800438e:	2b18      	cmp	r3, #24
 8004390:	d10a      	bne.n	80043a8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004392:	4b2f      	ldr	r3, [pc, #188]	; (8004450 <HAL_RCC_OscConfig+0x32c>)
 8004394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004396:	2202      	movs	r2, #2
 8004398:	4013      	ands	r3, r2
 800439a:	d03c      	beq.n	8004416 <HAL_RCC_OscConfig+0x2f2>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d138      	bne.n	8004416 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e1ba      	b.n	800471e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d019      	beq.n	80043e4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80043b0:	4b27      	ldr	r3, [pc, #156]	; (8004450 <HAL_RCC_OscConfig+0x32c>)
 80043b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80043b4:	4b26      	ldr	r3, [pc, #152]	; (8004450 <HAL_RCC_OscConfig+0x32c>)
 80043b6:	2101      	movs	r1, #1
 80043b8:	430a      	orrs	r2, r1
 80043ba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043bc:	f7fe fcd0 	bl	8002d60 <HAL_GetTick>
 80043c0:	0003      	movs	r3, r0
 80043c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043c4:	e008      	b.n	80043d8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043c6:	f7fe fccb 	bl	8002d60 <HAL_GetTick>
 80043ca:	0002      	movs	r2, r0
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d901      	bls.n	80043d8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e1a2      	b.n	800471e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043d8:	4b1d      	ldr	r3, [pc, #116]	; (8004450 <HAL_RCC_OscConfig+0x32c>)
 80043da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043dc:	2202      	movs	r2, #2
 80043de:	4013      	ands	r3, r2
 80043e0:	d0f1      	beq.n	80043c6 <HAL_RCC_OscConfig+0x2a2>
 80043e2:	e018      	b.n	8004416 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80043e4:	4b1a      	ldr	r3, [pc, #104]	; (8004450 <HAL_RCC_OscConfig+0x32c>)
 80043e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80043e8:	4b19      	ldr	r3, [pc, #100]	; (8004450 <HAL_RCC_OscConfig+0x32c>)
 80043ea:	2101      	movs	r1, #1
 80043ec:	438a      	bics	r2, r1
 80043ee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f0:	f7fe fcb6 	bl	8002d60 <HAL_GetTick>
 80043f4:	0003      	movs	r3, r0
 80043f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043f8:	e008      	b.n	800440c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043fa:	f7fe fcb1 	bl	8002d60 <HAL_GetTick>
 80043fe:	0002      	movs	r2, r0
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d901      	bls.n	800440c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e188      	b.n	800471e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800440c:	4b10      	ldr	r3, [pc, #64]	; (8004450 <HAL_RCC_OscConfig+0x32c>)
 800440e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004410:	2202      	movs	r2, #2
 8004412:	4013      	ands	r3, r2
 8004414:	d1f1      	bne.n	80043fa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2204      	movs	r2, #4
 800441c:	4013      	ands	r3, r2
 800441e:	d100      	bne.n	8004422 <HAL_RCC_OscConfig+0x2fe>
 8004420:	e0c6      	b.n	80045b0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004422:	231f      	movs	r3, #31
 8004424:	18fb      	adds	r3, r7, r3
 8004426:	2200      	movs	r2, #0
 8004428:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800442a:	4b09      	ldr	r3, [pc, #36]	; (8004450 <HAL_RCC_OscConfig+0x32c>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	2238      	movs	r2, #56	; 0x38
 8004430:	4013      	ands	r3, r2
 8004432:	2b20      	cmp	r3, #32
 8004434:	d11e      	bne.n	8004474 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004436:	4b06      	ldr	r3, [pc, #24]	; (8004450 <HAL_RCC_OscConfig+0x32c>)
 8004438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800443a:	2202      	movs	r2, #2
 800443c:	4013      	ands	r3, r2
 800443e:	d100      	bne.n	8004442 <HAL_RCC_OscConfig+0x31e>
 8004440:	e0b6      	b.n	80045b0 <HAL_RCC_OscConfig+0x48c>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d000      	beq.n	800444c <HAL_RCC_OscConfig+0x328>
 800444a:	e0b1      	b.n	80045b0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e166      	b.n	800471e <HAL_RCC_OscConfig+0x5fa>
 8004450:	40021000 	.word	0x40021000
 8004454:	fffeffff 	.word	0xfffeffff
 8004458:	fffbffff 	.word	0xfffbffff
 800445c:	ffff80ff 	.word	0xffff80ff
 8004460:	ffffc7ff 	.word	0xffffc7ff
 8004464:	00f42400 	.word	0x00f42400
 8004468:	20000004 	.word	0x20000004
 800446c:	20000008 	.word	0x20000008
 8004470:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004474:	4bac      	ldr	r3, [pc, #688]	; (8004728 <HAL_RCC_OscConfig+0x604>)
 8004476:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004478:	2380      	movs	r3, #128	; 0x80
 800447a:	055b      	lsls	r3, r3, #21
 800447c:	4013      	ands	r3, r2
 800447e:	d101      	bne.n	8004484 <HAL_RCC_OscConfig+0x360>
 8004480:	2301      	movs	r3, #1
 8004482:	e000      	b.n	8004486 <HAL_RCC_OscConfig+0x362>
 8004484:	2300      	movs	r3, #0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d011      	beq.n	80044ae <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800448a:	4ba7      	ldr	r3, [pc, #668]	; (8004728 <HAL_RCC_OscConfig+0x604>)
 800448c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800448e:	4ba6      	ldr	r3, [pc, #664]	; (8004728 <HAL_RCC_OscConfig+0x604>)
 8004490:	2180      	movs	r1, #128	; 0x80
 8004492:	0549      	lsls	r1, r1, #21
 8004494:	430a      	orrs	r2, r1
 8004496:	63da      	str	r2, [r3, #60]	; 0x3c
 8004498:	4ba3      	ldr	r3, [pc, #652]	; (8004728 <HAL_RCC_OscConfig+0x604>)
 800449a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800449c:	2380      	movs	r3, #128	; 0x80
 800449e:	055b      	lsls	r3, r3, #21
 80044a0:	4013      	ands	r3, r2
 80044a2:	60fb      	str	r3, [r7, #12]
 80044a4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80044a6:	231f      	movs	r3, #31
 80044a8:	18fb      	adds	r3, r7, r3
 80044aa:	2201      	movs	r2, #1
 80044ac:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044ae:	4b9f      	ldr	r3, [pc, #636]	; (800472c <HAL_RCC_OscConfig+0x608>)
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	2380      	movs	r3, #128	; 0x80
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	4013      	ands	r3, r2
 80044b8:	d11a      	bne.n	80044f0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044ba:	4b9c      	ldr	r3, [pc, #624]	; (800472c <HAL_RCC_OscConfig+0x608>)
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	4b9b      	ldr	r3, [pc, #620]	; (800472c <HAL_RCC_OscConfig+0x608>)
 80044c0:	2180      	movs	r1, #128	; 0x80
 80044c2:	0049      	lsls	r1, r1, #1
 80044c4:	430a      	orrs	r2, r1
 80044c6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80044c8:	f7fe fc4a 	bl	8002d60 <HAL_GetTick>
 80044cc:	0003      	movs	r3, r0
 80044ce:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044d0:	e008      	b.n	80044e4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044d2:	f7fe fc45 	bl	8002d60 <HAL_GetTick>
 80044d6:	0002      	movs	r2, r0
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d901      	bls.n	80044e4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e11c      	b.n	800471e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044e4:	4b91      	ldr	r3, [pc, #580]	; (800472c <HAL_RCC_OscConfig+0x608>)
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	2380      	movs	r3, #128	; 0x80
 80044ea:	005b      	lsls	r3, r3, #1
 80044ec:	4013      	ands	r3, r2
 80044ee:	d0f0      	beq.n	80044d2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d106      	bne.n	8004506 <HAL_RCC_OscConfig+0x3e2>
 80044f8:	4b8b      	ldr	r3, [pc, #556]	; (8004728 <HAL_RCC_OscConfig+0x604>)
 80044fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80044fc:	4b8a      	ldr	r3, [pc, #552]	; (8004728 <HAL_RCC_OscConfig+0x604>)
 80044fe:	2101      	movs	r1, #1
 8004500:	430a      	orrs	r2, r1
 8004502:	65da      	str	r2, [r3, #92]	; 0x5c
 8004504:	e01c      	b.n	8004540 <HAL_RCC_OscConfig+0x41c>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	2b05      	cmp	r3, #5
 800450c:	d10c      	bne.n	8004528 <HAL_RCC_OscConfig+0x404>
 800450e:	4b86      	ldr	r3, [pc, #536]	; (8004728 <HAL_RCC_OscConfig+0x604>)
 8004510:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004512:	4b85      	ldr	r3, [pc, #532]	; (8004728 <HAL_RCC_OscConfig+0x604>)
 8004514:	2104      	movs	r1, #4
 8004516:	430a      	orrs	r2, r1
 8004518:	65da      	str	r2, [r3, #92]	; 0x5c
 800451a:	4b83      	ldr	r3, [pc, #524]	; (8004728 <HAL_RCC_OscConfig+0x604>)
 800451c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800451e:	4b82      	ldr	r3, [pc, #520]	; (8004728 <HAL_RCC_OscConfig+0x604>)
 8004520:	2101      	movs	r1, #1
 8004522:	430a      	orrs	r2, r1
 8004524:	65da      	str	r2, [r3, #92]	; 0x5c
 8004526:	e00b      	b.n	8004540 <HAL_RCC_OscConfig+0x41c>
 8004528:	4b7f      	ldr	r3, [pc, #508]	; (8004728 <HAL_RCC_OscConfig+0x604>)
 800452a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800452c:	4b7e      	ldr	r3, [pc, #504]	; (8004728 <HAL_RCC_OscConfig+0x604>)
 800452e:	2101      	movs	r1, #1
 8004530:	438a      	bics	r2, r1
 8004532:	65da      	str	r2, [r3, #92]	; 0x5c
 8004534:	4b7c      	ldr	r3, [pc, #496]	; (8004728 <HAL_RCC_OscConfig+0x604>)
 8004536:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004538:	4b7b      	ldr	r3, [pc, #492]	; (8004728 <HAL_RCC_OscConfig+0x604>)
 800453a:	2104      	movs	r1, #4
 800453c:	438a      	bics	r2, r1
 800453e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d014      	beq.n	8004572 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004548:	f7fe fc0a 	bl	8002d60 <HAL_GetTick>
 800454c:	0003      	movs	r3, r0
 800454e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004550:	e009      	b.n	8004566 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004552:	f7fe fc05 	bl	8002d60 <HAL_GetTick>
 8004556:	0002      	movs	r2, r0
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	4a74      	ldr	r2, [pc, #464]	; (8004730 <HAL_RCC_OscConfig+0x60c>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e0db      	b.n	800471e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004566:	4b70      	ldr	r3, [pc, #448]	; (8004728 <HAL_RCC_OscConfig+0x604>)
 8004568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800456a:	2202      	movs	r2, #2
 800456c:	4013      	ands	r3, r2
 800456e:	d0f0      	beq.n	8004552 <HAL_RCC_OscConfig+0x42e>
 8004570:	e013      	b.n	800459a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004572:	f7fe fbf5 	bl	8002d60 <HAL_GetTick>
 8004576:	0003      	movs	r3, r0
 8004578:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800457a:	e009      	b.n	8004590 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800457c:	f7fe fbf0 	bl	8002d60 <HAL_GetTick>
 8004580:	0002      	movs	r2, r0
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	4a6a      	ldr	r2, [pc, #424]	; (8004730 <HAL_RCC_OscConfig+0x60c>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d901      	bls.n	8004590 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e0c6      	b.n	800471e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004590:	4b65      	ldr	r3, [pc, #404]	; (8004728 <HAL_RCC_OscConfig+0x604>)
 8004592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004594:	2202      	movs	r2, #2
 8004596:	4013      	ands	r3, r2
 8004598:	d1f0      	bne.n	800457c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800459a:	231f      	movs	r3, #31
 800459c:	18fb      	adds	r3, r7, r3
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d105      	bne.n	80045b0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80045a4:	4b60      	ldr	r3, [pc, #384]	; (8004728 <HAL_RCC_OscConfig+0x604>)
 80045a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045a8:	4b5f      	ldr	r3, [pc, #380]	; (8004728 <HAL_RCC_OscConfig+0x604>)
 80045aa:	4962      	ldr	r1, [pc, #392]	; (8004734 <HAL_RCC_OscConfig+0x610>)
 80045ac:	400a      	ands	r2, r1
 80045ae:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	69db      	ldr	r3, [r3, #28]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d100      	bne.n	80045ba <HAL_RCC_OscConfig+0x496>
 80045b8:	e0b0      	b.n	800471c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045ba:	4b5b      	ldr	r3, [pc, #364]	; (8004728 <HAL_RCC_OscConfig+0x604>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	2238      	movs	r2, #56	; 0x38
 80045c0:	4013      	ands	r3, r2
 80045c2:	2b10      	cmp	r3, #16
 80045c4:	d100      	bne.n	80045c8 <HAL_RCC_OscConfig+0x4a4>
 80045c6:	e078      	b.n	80046ba <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	69db      	ldr	r3, [r3, #28]
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d153      	bne.n	8004678 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045d0:	4b55      	ldr	r3, [pc, #340]	; (8004728 <HAL_RCC_OscConfig+0x604>)
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	4b54      	ldr	r3, [pc, #336]	; (8004728 <HAL_RCC_OscConfig+0x604>)
 80045d6:	4958      	ldr	r1, [pc, #352]	; (8004738 <HAL_RCC_OscConfig+0x614>)
 80045d8:	400a      	ands	r2, r1
 80045da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045dc:	f7fe fbc0 	bl	8002d60 <HAL_GetTick>
 80045e0:	0003      	movs	r3, r0
 80045e2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045e4:	e008      	b.n	80045f8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045e6:	f7fe fbbb 	bl	8002d60 <HAL_GetTick>
 80045ea:	0002      	movs	r2, r0
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d901      	bls.n	80045f8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e092      	b.n	800471e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045f8:	4b4b      	ldr	r3, [pc, #300]	; (8004728 <HAL_RCC_OscConfig+0x604>)
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	2380      	movs	r3, #128	; 0x80
 80045fe:	049b      	lsls	r3, r3, #18
 8004600:	4013      	ands	r3, r2
 8004602:	d1f0      	bne.n	80045e6 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004604:	4b48      	ldr	r3, [pc, #288]	; (8004728 <HAL_RCC_OscConfig+0x604>)
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	4a4c      	ldr	r2, [pc, #304]	; (800473c <HAL_RCC_OscConfig+0x618>)
 800460a:	4013      	ands	r3, r2
 800460c:	0019      	movs	r1, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a1a      	ldr	r2, [r3, #32]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004616:	431a      	orrs	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461c:	021b      	lsls	r3, r3, #8
 800461e:	431a      	orrs	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004624:	431a      	orrs	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462a:	431a      	orrs	r2, r3
 800462c:	4b3e      	ldr	r3, [pc, #248]	; (8004728 <HAL_RCC_OscConfig+0x604>)
 800462e:	430a      	orrs	r2, r1
 8004630:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004632:	4b3d      	ldr	r3, [pc, #244]	; (8004728 <HAL_RCC_OscConfig+0x604>)
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	4b3c      	ldr	r3, [pc, #240]	; (8004728 <HAL_RCC_OscConfig+0x604>)
 8004638:	2180      	movs	r1, #128	; 0x80
 800463a:	0449      	lsls	r1, r1, #17
 800463c:	430a      	orrs	r2, r1
 800463e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004640:	4b39      	ldr	r3, [pc, #228]	; (8004728 <HAL_RCC_OscConfig+0x604>)
 8004642:	68da      	ldr	r2, [r3, #12]
 8004644:	4b38      	ldr	r3, [pc, #224]	; (8004728 <HAL_RCC_OscConfig+0x604>)
 8004646:	2180      	movs	r1, #128	; 0x80
 8004648:	0549      	lsls	r1, r1, #21
 800464a:	430a      	orrs	r2, r1
 800464c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464e:	f7fe fb87 	bl	8002d60 <HAL_GetTick>
 8004652:	0003      	movs	r3, r0
 8004654:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004656:	e008      	b.n	800466a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004658:	f7fe fb82 	bl	8002d60 <HAL_GetTick>
 800465c:	0002      	movs	r2, r0
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b02      	cmp	r3, #2
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e059      	b.n	800471e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800466a:	4b2f      	ldr	r3, [pc, #188]	; (8004728 <HAL_RCC_OscConfig+0x604>)
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	2380      	movs	r3, #128	; 0x80
 8004670:	049b      	lsls	r3, r3, #18
 8004672:	4013      	ands	r3, r2
 8004674:	d0f0      	beq.n	8004658 <HAL_RCC_OscConfig+0x534>
 8004676:	e051      	b.n	800471c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004678:	4b2b      	ldr	r3, [pc, #172]	; (8004728 <HAL_RCC_OscConfig+0x604>)
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	4b2a      	ldr	r3, [pc, #168]	; (8004728 <HAL_RCC_OscConfig+0x604>)
 800467e:	492e      	ldr	r1, [pc, #184]	; (8004738 <HAL_RCC_OscConfig+0x614>)
 8004680:	400a      	ands	r2, r1
 8004682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004684:	f7fe fb6c 	bl	8002d60 <HAL_GetTick>
 8004688:	0003      	movs	r3, r0
 800468a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800468c:	e008      	b.n	80046a0 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800468e:	f7fe fb67 	bl	8002d60 <HAL_GetTick>
 8004692:	0002      	movs	r2, r0
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	2b02      	cmp	r3, #2
 800469a:	d901      	bls.n	80046a0 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e03e      	b.n	800471e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046a0:	4b21      	ldr	r3, [pc, #132]	; (8004728 <HAL_RCC_OscConfig+0x604>)
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	2380      	movs	r3, #128	; 0x80
 80046a6:	049b      	lsls	r3, r3, #18
 80046a8:	4013      	ands	r3, r2
 80046aa:	d1f0      	bne.n	800468e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80046ac:	4b1e      	ldr	r3, [pc, #120]	; (8004728 <HAL_RCC_OscConfig+0x604>)
 80046ae:	68da      	ldr	r2, [r3, #12]
 80046b0:	4b1d      	ldr	r3, [pc, #116]	; (8004728 <HAL_RCC_OscConfig+0x604>)
 80046b2:	4923      	ldr	r1, [pc, #140]	; (8004740 <HAL_RCC_OscConfig+0x61c>)
 80046b4:	400a      	ands	r2, r1
 80046b6:	60da      	str	r2, [r3, #12]
 80046b8:	e030      	b.n	800471c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	69db      	ldr	r3, [r3, #28]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d101      	bne.n	80046c6 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e02b      	b.n	800471e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80046c6:	4b18      	ldr	r3, [pc, #96]	; (8004728 <HAL_RCC_OscConfig+0x604>)
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	2203      	movs	r2, #3
 80046d0:	401a      	ands	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d11e      	bne.n	8004718 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	2270      	movs	r2, #112	; 0x70
 80046de:	401a      	ands	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d117      	bne.n	8004718 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	23fe      	movs	r3, #254	; 0xfe
 80046ec:	01db      	lsls	r3, r3, #7
 80046ee:	401a      	ands	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d10e      	bne.n	8004718 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	23f8      	movs	r3, #248	; 0xf8
 80046fe:	039b      	lsls	r3, r3, #14
 8004700:	401a      	ands	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004706:	429a      	cmp	r2, r3
 8004708:	d106      	bne.n	8004718 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	0f5b      	lsrs	r3, r3, #29
 800470e:	075a      	lsls	r2, r3, #29
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004714:	429a      	cmp	r2, r3
 8004716:	d001      	beq.n	800471c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e000      	b.n	800471e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	0018      	movs	r0, r3
 8004720:	46bd      	mov	sp, r7
 8004722:	b008      	add	sp, #32
 8004724:	bd80      	pop	{r7, pc}
 8004726:	46c0      	nop			; (mov r8, r8)
 8004728:	40021000 	.word	0x40021000
 800472c:	40007000 	.word	0x40007000
 8004730:	00001388 	.word	0x00001388
 8004734:	efffffff 	.word	0xefffffff
 8004738:	feffffff 	.word	0xfeffffff
 800473c:	1fc1808c 	.word	0x1fc1808c
 8004740:	effefffc 	.word	0xeffefffc

08004744 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d101      	bne.n	8004758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e0e9      	b.n	800492c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004758:	4b76      	ldr	r3, [pc, #472]	; (8004934 <HAL_RCC_ClockConfig+0x1f0>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2207      	movs	r2, #7
 800475e:	4013      	ands	r3, r2
 8004760:	683a      	ldr	r2, [r7, #0]
 8004762:	429a      	cmp	r2, r3
 8004764:	d91e      	bls.n	80047a4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004766:	4b73      	ldr	r3, [pc, #460]	; (8004934 <HAL_RCC_ClockConfig+0x1f0>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2207      	movs	r2, #7
 800476c:	4393      	bics	r3, r2
 800476e:	0019      	movs	r1, r3
 8004770:	4b70      	ldr	r3, [pc, #448]	; (8004934 <HAL_RCC_ClockConfig+0x1f0>)
 8004772:	683a      	ldr	r2, [r7, #0]
 8004774:	430a      	orrs	r2, r1
 8004776:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004778:	f7fe faf2 	bl	8002d60 <HAL_GetTick>
 800477c:	0003      	movs	r3, r0
 800477e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004780:	e009      	b.n	8004796 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004782:	f7fe faed 	bl	8002d60 <HAL_GetTick>
 8004786:	0002      	movs	r2, r0
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	4a6a      	ldr	r2, [pc, #424]	; (8004938 <HAL_RCC_ClockConfig+0x1f4>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e0ca      	b.n	800492c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004796:	4b67      	ldr	r3, [pc, #412]	; (8004934 <HAL_RCC_ClockConfig+0x1f0>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2207      	movs	r2, #7
 800479c:	4013      	ands	r3, r2
 800479e:	683a      	ldr	r2, [r7, #0]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d1ee      	bne.n	8004782 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2202      	movs	r2, #2
 80047aa:	4013      	ands	r3, r2
 80047ac:	d015      	beq.n	80047da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2204      	movs	r2, #4
 80047b4:	4013      	ands	r3, r2
 80047b6:	d006      	beq.n	80047c6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80047b8:	4b60      	ldr	r3, [pc, #384]	; (800493c <HAL_RCC_ClockConfig+0x1f8>)
 80047ba:	689a      	ldr	r2, [r3, #8]
 80047bc:	4b5f      	ldr	r3, [pc, #380]	; (800493c <HAL_RCC_ClockConfig+0x1f8>)
 80047be:	21e0      	movs	r1, #224	; 0xe0
 80047c0:	01c9      	lsls	r1, r1, #7
 80047c2:	430a      	orrs	r2, r1
 80047c4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047c6:	4b5d      	ldr	r3, [pc, #372]	; (800493c <HAL_RCC_ClockConfig+0x1f8>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	4a5d      	ldr	r2, [pc, #372]	; (8004940 <HAL_RCC_ClockConfig+0x1fc>)
 80047cc:	4013      	ands	r3, r2
 80047ce:	0019      	movs	r1, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	4b59      	ldr	r3, [pc, #356]	; (800493c <HAL_RCC_ClockConfig+0x1f8>)
 80047d6:	430a      	orrs	r2, r1
 80047d8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2201      	movs	r2, #1
 80047e0:	4013      	ands	r3, r2
 80047e2:	d057      	beq.n	8004894 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d107      	bne.n	80047fc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047ec:	4b53      	ldr	r3, [pc, #332]	; (800493c <HAL_RCC_ClockConfig+0x1f8>)
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	2380      	movs	r3, #128	; 0x80
 80047f2:	029b      	lsls	r3, r3, #10
 80047f4:	4013      	ands	r3, r2
 80047f6:	d12b      	bne.n	8004850 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e097      	b.n	800492c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	2b02      	cmp	r3, #2
 8004802:	d107      	bne.n	8004814 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004804:	4b4d      	ldr	r3, [pc, #308]	; (800493c <HAL_RCC_ClockConfig+0x1f8>)
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	2380      	movs	r3, #128	; 0x80
 800480a:	049b      	lsls	r3, r3, #18
 800480c:	4013      	ands	r3, r2
 800480e:	d11f      	bne.n	8004850 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e08b      	b.n	800492c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d107      	bne.n	800482c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800481c:	4b47      	ldr	r3, [pc, #284]	; (800493c <HAL_RCC_ClockConfig+0x1f8>)
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	2380      	movs	r3, #128	; 0x80
 8004822:	00db      	lsls	r3, r3, #3
 8004824:	4013      	ands	r3, r2
 8004826:	d113      	bne.n	8004850 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e07f      	b.n	800492c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	2b03      	cmp	r3, #3
 8004832:	d106      	bne.n	8004842 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004834:	4b41      	ldr	r3, [pc, #260]	; (800493c <HAL_RCC_ClockConfig+0x1f8>)
 8004836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004838:	2202      	movs	r2, #2
 800483a:	4013      	ands	r3, r2
 800483c:	d108      	bne.n	8004850 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e074      	b.n	800492c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004842:	4b3e      	ldr	r3, [pc, #248]	; (800493c <HAL_RCC_ClockConfig+0x1f8>)
 8004844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004846:	2202      	movs	r2, #2
 8004848:	4013      	ands	r3, r2
 800484a:	d101      	bne.n	8004850 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e06d      	b.n	800492c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004850:	4b3a      	ldr	r3, [pc, #232]	; (800493c <HAL_RCC_ClockConfig+0x1f8>)
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	2207      	movs	r2, #7
 8004856:	4393      	bics	r3, r2
 8004858:	0019      	movs	r1, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685a      	ldr	r2, [r3, #4]
 800485e:	4b37      	ldr	r3, [pc, #220]	; (800493c <HAL_RCC_ClockConfig+0x1f8>)
 8004860:	430a      	orrs	r2, r1
 8004862:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004864:	f7fe fa7c 	bl	8002d60 <HAL_GetTick>
 8004868:	0003      	movs	r3, r0
 800486a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800486c:	e009      	b.n	8004882 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800486e:	f7fe fa77 	bl	8002d60 <HAL_GetTick>
 8004872:	0002      	movs	r2, r0
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	4a2f      	ldr	r2, [pc, #188]	; (8004938 <HAL_RCC_ClockConfig+0x1f4>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e054      	b.n	800492c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004882:	4b2e      	ldr	r3, [pc, #184]	; (800493c <HAL_RCC_ClockConfig+0x1f8>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	2238      	movs	r2, #56	; 0x38
 8004888:	401a      	ands	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	00db      	lsls	r3, r3, #3
 8004890:	429a      	cmp	r2, r3
 8004892:	d1ec      	bne.n	800486e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004894:	4b27      	ldr	r3, [pc, #156]	; (8004934 <HAL_RCC_ClockConfig+0x1f0>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2207      	movs	r2, #7
 800489a:	4013      	ands	r3, r2
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d21e      	bcs.n	80048e0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048a2:	4b24      	ldr	r3, [pc, #144]	; (8004934 <HAL_RCC_ClockConfig+0x1f0>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2207      	movs	r2, #7
 80048a8:	4393      	bics	r3, r2
 80048aa:	0019      	movs	r1, r3
 80048ac:	4b21      	ldr	r3, [pc, #132]	; (8004934 <HAL_RCC_ClockConfig+0x1f0>)
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	430a      	orrs	r2, r1
 80048b2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80048b4:	f7fe fa54 	bl	8002d60 <HAL_GetTick>
 80048b8:	0003      	movs	r3, r0
 80048ba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80048bc:	e009      	b.n	80048d2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048be:	f7fe fa4f 	bl	8002d60 <HAL_GetTick>
 80048c2:	0002      	movs	r2, r0
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	4a1b      	ldr	r2, [pc, #108]	; (8004938 <HAL_RCC_ClockConfig+0x1f4>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d901      	bls.n	80048d2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e02c      	b.n	800492c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80048d2:	4b18      	ldr	r3, [pc, #96]	; (8004934 <HAL_RCC_ClockConfig+0x1f0>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2207      	movs	r2, #7
 80048d8:	4013      	ands	r3, r2
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d1ee      	bne.n	80048be <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2204      	movs	r2, #4
 80048e6:	4013      	ands	r3, r2
 80048e8:	d009      	beq.n	80048fe <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80048ea:	4b14      	ldr	r3, [pc, #80]	; (800493c <HAL_RCC_ClockConfig+0x1f8>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	4a15      	ldr	r2, [pc, #84]	; (8004944 <HAL_RCC_ClockConfig+0x200>)
 80048f0:	4013      	ands	r3, r2
 80048f2:	0019      	movs	r1, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68da      	ldr	r2, [r3, #12]
 80048f8:	4b10      	ldr	r3, [pc, #64]	; (800493c <HAL_RCC_ClockConfig+0x1f8>)
 80048fa:	430a      	orrs	r2, r1
 80048fc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80048fe:	f000 f829 	bl	8004954 <HAL_RCC_GetSysClockFreq>
 8004902:	0001      	movs	r1, r0
 8004904:	4b0d      	ldr	r3, [pc, #52]	; (800493c <HAL_RCC_ClockConfig+0x1f8>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	0a1b      	lsrs	r3, r3, #8
 800490a:	220f      	movs	r2, #15
 800490c:	401a      	ands	r2, r3
 800490e:	4b0e      	ldr	r3, [pc, #56]	; (8004948 <HAL_RCC_ClockConfig+0x204>)
 8004910:	0092      	lsls	r2, r2, #2
 8004912:	58d3      	ldr	r3, [r2, r3]
 8004914:	221f      	movs	r2, #31
 8004916:	4013      	ands	r3, r2
 8004918:	000a      	movs	r2, r1
 800491a:	40da      	lsrs	r2, r3
 800491c:	4b0b      	ldr	r3, [pc, #44]	; (800494c <HAL_RCC_ClockConfig+0x208>)
 800491e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004920:	4b0b      	ldr	r3, [pc, #44]	; (8004950 <HAL_RCC_ClockConfig+0x20c>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	0018      	movs	r0, r3
 8004926:	f7fe f9bf 	bl	8002ca8 <HAL_InitTick>
 800492a:	0003      	movs	r3, r0
}
 800492c:	0018      	movs	r0, r3
 800492e:	46bd      	mov	sp, r7
 8004930:	b004      	add	sp, #16
 8004932:	bd80      	pop	{r7, pc}
 8004934:	40022000 	.word	0x40022000
 8004938:	00001388 	.word	0x00001388
 800493c:	40021000 	.word	0x40021000
 8004940:	fffff0ff 	.word	0xfffff0ff
 8004944:	ffff8fff 	.word	0xffff8fff
 8004948:	08004bf0 	.word	0x08004bf0
 800494c:	20000004 	.word	0x20000004
 8004950:	20000008 	.word	0x20000008

08004954 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800495a:	4b3c      	ldr	r3, [pc, #240]	; (8004a4c <HAL_RCC_GetSysClockFreq+0xf8>)
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	2238      	movs	r2, #56	; 0x38
 8004960:	4013      	ands	r3, r2
 8004962:	d10f      	bne.n	8004984 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004964:	4b39      	ldr	r3, [pc, #228]	; (8004a4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	0adb      	lsrs	r3, r3, #11
 800496a:	2207      	movs	r2, #7
 800496c:	4013      	ands	r3, r2
 800496e:	2201      	movs	r2, #1
 8004970:	409a      	lsls	r2, r3
 8004972:	0013      	movs	r3, r2
 8004974:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004976:	6839      	ldr	r1, [r7, #0]
 8004978:	4835      	ldr	r0, [pc, #212]	; (8004a50 <HAL_RCC_GetSysClockFreq+0xfc>)
 800497a:	f7fb fbc1 	bl	8000100 <__udivsi3>
 800497e:	0003      	movs	r3, r0
 8004980:	613b      	str	r3, [r7, #16]
 8004982:	e05d      	b.n	8004a40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004984:	4b31      	ldr	r3, [pc, #196]	; (8004a4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	2238      	movs	r2, #56	; 0x38
 800498a:	4013      	ands	r3, r2
 800498c:	2b08      	cmp	r3, #8
 800498e:	d102      	bne.n	8004996 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004990:	4b30      	ldr	r3, [pc, #192]	; (8004a54 <HAL_RCC_GetSysClockFreq+0x100>)
 8004992:	613b      	str	r3, [r7, #16]
 8004994:	e054      	b.n	8004a40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004996:	4b2d      	ldr	r3, [pc, #180]	; (8004a4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	2238      	movs	r2, #56	; 0x38
 800499c:	4013      	ands	r3, r2
 800499e:	2b10      	cmp	r3, #16
 80049a0:	d138      	bne.n	8004a14 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80049a2:	4b2a      	ldr	r3, [pc, #168]	; (8004a4c <HAL_RCC_GetSysClockFreq+0xf8>)
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	2203      	movs	r2, #3
 80049a8:	4013      	ands	r3, r2
 80049aa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80049ac:	4b27      	ldr	r3, [pc, #156]	; (8004a4c <HAL_RCC_GetSysClockFreq+0xf8>)
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	091b      	lsrs	r3, r3, #4
 80049b2:	2207      	movs	r2, #7
 80049b4:	4013      	ands	r3, r2
 80049b6:	3301      	adds	r3, #1
 80049b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2b03      	cmp	r3, #3
 80049be:	d10d      	bne.n	80049dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80049c0:	68b9      	ldr	r1, [r7, #8]
 80049c2:	4824      	ldr	r0, [pc, #144]	; (8004a54 <HAL_RCC_GetSysClockFreq+0x100>)
 80049c4:	f7fb fb9c 	bl	8000100 <__udivsi3>
 80049c8:	0003      	movs	r3, r0
 80049ca:	0019      	movs	r1, r3
 80049cc:	4b1f      	ldr	r3, [pc, #124]	; (8004a4c <HAL_RCC_GetSysClockFreq+0xf8>)
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	0a1b      	lsrs	r3, r3, #8
 80049d2:	227f      	movs	r2, #127	; 0x7f
 80049d4:	4013      	ands	r3, r2
 80049d6:	434b      	muls	r3, r1
 80049d8:	617b      	str	r3, [r7, #20]
        break;
 80049da:	e00d      	b.n	80049f8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80049dc:	68b9      	ldr	r1, [r7, #8]
 80049de:	481c      	ldr	r0, [pc, #112]	; (8004a50 <HAL_RCC_GetSysClockFreq+0xfc>)
 80049e0:	f7fb fb8e 	bl	8000100 <__udivsi3>
 80049e4:	0003      	movs	r3, r0
 80049e6:	0019      	movs	r1, r3
 80049e8:	4b18      	ldr	r3, [pc, #96]	; (8004a4c <HAL_RCC_GetSysClockFreq+0xf8>)
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	0a1b      	lsrs	r3, r3, #8
 80049ee:	227f      	movs	r2, #127	; 0x7f
 80049f0:	4013      	ands	r3, r2
 80049f2:	434b      	muls	r3, r1
 80049f4:	617b      	str	r3, [r7, #20]
        break;
 80049f6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80049f8:	4b14      	ldr	r3, [pc, #80]	; (8004a4c <HAL_RCC_GetSysClockFreq+0xf8>)
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	0f5b      	lsrs	r3, r3, #29
 80049fe:	2207      	movs	r2, #7
 8004a00:	4013      	ands	r3, r2
 8004a02:	3301      	adds	r3, #1
 8004a04:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004a06:	6879      	ldr	r1, [r7, #4]
 8004a08:	6978      	ldr	r0, [r7, #20]
 8004a0a:	f7fb fb79 	bl	8000100 <__udivsi3>
 8004a0e:	0003      	movs	r3, r0
 8004a10:	613b      	str	r3, [r7, #16]
 8004a12:	e015      	b.n	8004a40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004a14:	4b0d      	ldr	r3, [pc, #52]	; (8004a4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	2238      	movs	r2, #56	; 0x38
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	2b20      	cmp	r3, #32
 8004a1e:	d103      	bne.n	8004a28 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004a20:	2380      	movs	r3, #128	; 0x80
 8004a22:	021b      	lsls	r3, r3, #8
 8004a24:	613b      	str	r3, [r7, #16]
 8004a26:	e00b      	b.n	8004a40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004a28:	4b08      	ldr	r3, [pc, #32]	; (8004a4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	2238      	movs	r2, #56	; 0x38
 8004a2e:	4013      	ands	r3, r2
 8004a30:	2b18      	cmp	r3, #24
 8004a32:	d103      	bne.n	8004a3c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004a34:	23fa      	movs	r3, #250	; 0xfa
 8004a36:	01db      	lsls	r3, r3, #7
 8004a38:	613b      	str	r3, [r7, #16]
 8004a3a:	e001      	b.n	8004a40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004a40:	693b      	ldr	r3, [r7, #16]
}
 8004a42:	0018      	movs	r0, r3
 8004a44:	46bd      	mov	sp, r7
 8004a46:	b006      	add	sp, #24
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	46c0      	nop			; (mov r8, r8)
 8004a4c:	40021000 	.word	0x40021000
 8004a50:	00f42400 	.word	0x00f42400
 8004a54:	007a1200 	.word	0x007a1200

08004a58 <__libc_init_array>:
 8004a58:	b570      	push	{r4, r5, r6, lr}
 8004a5a:	2600      	movs	r6, #0
 8004a5c:	4d0c      	ldr	r5, [pc, #48]	; (8004a90 <__libc_init_array+0x38>)
 8004a5e:	4c0d      	ldr	r4, [pc, #52]	; (8004a94 <__libc_init_array+0x3c>)
 8004a60:	1b64      	subs	r4, r4, r5
 8004a62:	10a4      	asrs	r4, r4, #2
 8004a64:	42a6      	cmp	r6, r4
 8004a66:	d109      	bne.n	8004a7c <__libc_init_array+0x24>
 8004a68:	2600      	movs	r6, #0
 8004a6a:	f000 f821 	bl	8004ab0 <_init>
 8004a6e:	4d0a      	ldr	r5, [pc, #40]	; (8004a98 <__libc_init_array+0x40>)
 8004a70:	4c0a      	ldr	r4, [pc, #40]	; (8004a9c <__libc_init_array+0x44>)
 8004a72:	1b64      	subs	r4, r4, r5
 8004a74:	10a4      	asrs	r4, r4, #2
 8004a76:	42a6      	cmp	r6, r4
 8004a78:	d105      	bne.n	8004a86 <__libc_init_array+0x2e>
 8004a7a:	bd70      	pop	{r4, r5, r6, pc}
 8004a7c:	00b3      	lsls	r3, r6, #2
 8004a7e:	58eb      	ldr	r3, [r5, r3]
 8004a80:	4798      	blx	r3
 8004a82:	3601      	adds	r6, #1
 8004a84:	e7ee      	b.n	8004a64 <__libc_init_array+0xc>
 8004a86:	00b3      	lsls	r3, r6, #2
 8004a88:	58eb      	ldr	r3, [r5, r3]
 8004a8a:	4798      	blx	r3
 8004a8c:	3601      	adds	r6, #1
 8004a8e:	e7f2      	b.n	8004a76 <__libc_init_array+0x1e>
 8004a90:	08004c30 	.word	0x08004c30
 8004a94:	08004c30 	.word	0x08004c30
 8004a98:	08004c30 	.word	0x08004c30
 8004a9c:	08004c34 	.word	0x08004c34

08004aa0 <memset>:
 8004aa0:	0003      	movs	r3, r0
 8004aa2:	1882      	adds	r2, r0, r2
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d100      	bne.n	8004aaa <memset+0xa>
 8004aa8:	4770      	bx	lr
 8004aaa:	7019      	strb	r1, [r3, #0]
 8004aac:	3301      	adds	r3, #1
 8004aae:	e7f9      	b.n	8004aa4 <memset+0x4>

08004ab0 <_init>:
 8004ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ab2:	46c0      	nop			; (mov r8, r8)
 8004ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ab6:	bc08      	pop	{r3}
 8004ab8:	469e      	mov	lr, r3
 8004aba:	4770      	bx	lr

08004abc <_fini>:
 8004abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004abe:	46c0      	nop			; (mov r8, r8)
 8004ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ac2:	bc08      	pop	{r3}
 8004ac4:	469e      	mov	lr, r3
 8004ac6:	4770      	bx	lr
