
LETRERO_29LEDS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042d8  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08004390  08004390  00014390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044fc  080044fc  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080044fc  080044fc  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044fc  080044fc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044fc  080044fc  000144fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004500  08004500  00014500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004504  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000010  08004514  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08004514  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000074ca  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001765  00000000  00000000  00027502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000780  00000000  00000000  00028c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c8  00000000  00000000  000293e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014250  00000000  00000000  00029ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008399  00000000  00000000  0003dd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000803fe  00000000  00000000  00046099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c6497  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bcc  00000000  00000000  000c64e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000010 	.word	0x20000010
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004378 	.word	0x08004378

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000014 	.word	0x20000014
 80000fc:	08004378 	.word	0x08004378

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <__aeabi_f2uiz>:
 8000218:	219e      	movs	r1, #158	; 0x9e
 800021a:	b510      	push	{r4, lr}
 800021c:	05c9      	lsls	r1, r1, #23
 800021e:	1c04      	adds	r4, r0, #0
 8000220:	f000 fe7c 	bl	8000f1c <__aeabi_fcmpge>
 8000224:	2800      	cmp	r0, #0
 8000226:	d103      	bne.n	8000230 <__aeabi_f2uiz+0x18>
 8000228:	1c20      	adds	r0, r4, #0
 800022a:	f000 fd97 	bl	8000d5c <__aeabi_f2iz>
 800022e:	bd10      	pop	{r4, pc}
 8000230:	219e      	movs	r1, #158	; 0x9e
 8000232:	1c20      	adds	r0, r4, #0
 8000234:	05c9      	lsls	r1, r1, #23
 8000236:	f000 fbe3 	bl	8000a00 <__aeabi_fsub>
 800023a:	f000 fd8f 	bl	8000d5c <__aeabi_f2iz>
 800023e:	2380      	movs	r3, #128	; 0x80
 8000240:	061b      	lsls	r3, r3, #24
 8000242:	469c      	mov	ip, r3
 8000244:	4460      	add	r0, ip
 8000246:	e7f2      	b.n	800022e <__aeabi_f2uiz+0x16>

08000248 <__aeabi_fadd>:
 8000248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800024a:	46c6      	mov	lr, r8
 800024c:	0243      	lsls	r3, r0, #9
 800024e:	0a5b      	lsrs	r3, r3, #9
 8000250:	024e      	lsls	r6, r1, #9
 8000252:	0045      	lsls	r5, r0, #1
 8000254:	004f      	lsls	r7, r1, #1
 8000256:	00da      	lsls	r2, r3, #3
 8000258:	0fc4      	lsrs	r4, r0, #31
 800025a:	469c      	mov	ip, r3
 800025c:	0a70      	lsrs	r0, r6, #9
 800025e:	4690      	mov	r8, r2
 8000260:	b500      	push	{lr}
 8000262:	0e2d      	lsrs	r5, r5, #24
 8000264:	0e3f      	lsrs	r7, r7, #24
 8000266:	0fc9      	lsrs	r1, r1, #31
 8000268:	09b6      	lsrs	r6, r6, #6
 800026a:	428c      	cmp	r4, r1
 800026c:	d04b      	beq.n	8000306 <__aeabi_fadd+0xbe>
 800026e:	1bea      	subs	r2, r5, r7
 8000270:	2a00      	cmp	r2, #0
 8000272:	dd36      	ble.n	80002e2 <__aeabi_fadd+0x9a>
 8000274:	2f00      	cmp	r7, #0
 8000276:	d061      	beq.n	800033c <__aeabi_fadd+0xf4>
 8000278:	2dff      	cmp	r5, #255	; 0xff
 800027a:	d100      	bne.n	800027e <__aeabi_fadd+0x36>
 800027c:	e0ad      	b.n	80003da <__aeabi_fadd+0x192>
 800027e:	2380      	movs	r3, #128	; 0x80
 8000280:	04db      	lsls	r3, r3, #19
 8000282:	431e      	orrs	r6, r3
 8000284:	2a1b      	cmp	r2, #27
 8000286:	dc00      	bgt.n	800028a <__aeabi_fadd+0x42>
 8000288:	e0d3      	b.n	8000432 <__aeabi_fadd+0x1ea>
 800028a:	2001      	movs	r0, #1
 800028c:	4643      	mov	r3, r8
 800028e:	1a18      	subs	r0, r3, r0
 8000290:	0143      	lsls	r3, r0, #5
 8000292:	d400      	bmi.n	8000296 <__aeabi_fadd+0x4e>
 8000294:	e08c      	b.n	80003b0 <__aeabi_fadd+0x168>
 8000296:	0180      	lsls	r0, r0, #6
 8000298:	0987      	lsrs	r7, r0, #6
 800029a:	0038      	movs	r0, r7
 800029c:	f000 fe48 	bl	8000f30 <__clzsi2>
 80002a0:	3805      	subs	r0, #5
 80002a2:	4087      	lsls	r7, r0
 80002a4:	4285      	cmp	r5, r0
 80002a6:	dc00      	bgt.n	80002aa <__aeabi_fadd+0x62>
 80002a8:	e0b6      	b.n	8000418 <__aeabi_fadd+0x1d0>
 80002aa:	1a2d      	subs	r5, r5, r0
 80002ac:	48b3      	ldr	r0, [pc, #716]	; (800057c <__aeabi_fadd+0x334>)
 80002ae:	4038      	ands	r0, r7
 80002b0:	0743      	lsls	r3, r0, #29
 80002b2:	d004      	beq.n	80002be <__aeabi_fadd+0x76>
 80002b4:	230f      	movs	r3, #15
 80002b6:	4003      	ands	r3, r0
 80002b8:	2b04      	cmp	r3, #4
 80002ba:	d000      	beq.n	80002be <__aeabi_fadd+0x76>
 80002bc:	3004      	adds	r0, #4
 80002be:	0143      	lsls	r3, r0, #5
 80002c0:	d400      	bmi.n	80002c4 <__aeabi_fadd+0x7c>
 80002c2:	e078      	b.n	80003b6 <__aeabi_fadd+0x16e>
 80002c4:	1c6a      	adds	r2, r5, #1
 80002c6:	2dfe      	cmp	r5, #254	; 0xfe
 80002c8:	d065      	beq.n	8000396 <__aeabi_fadd+0x14e>
 80002ca:	0180      	lsls	r0, r0, #6
 80002cc:	0a43      	lsrs	r3, r0, #9
 80002ce:	469c      	mov	ip, r3
 80002d0:	b2d2      	uxtb	r2, r2
 80002d2:	4663      	mov	r3, ip
 80002d4:	05d0      	lsls	r0, r2, #23
 80002d6:	4318      	orrs	r0, r3
 80002d8:	07e4      	lsls	r4, r4, #31
 80002da:	4320      	orrs	r0, r4
 80002dc:	bc80      	pop	{r7}
 80002de:	46b8      	mov	r8, r7
 80002e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d035      	beq.n	8000352 <__aeabi_fadd+0x10a>
 80002e6:	1b7a      	subs	r2, r7, r5
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	d000      	beq.n	80002ee <__aeabi_fadd+0xa6>
 80002ec:	e0af      	b.n	800044e <__aeabi_fadd+0x206>
 80002ee:	4643      	mov	r3, r8
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d100      	bne.n	80002f6 <__aeabi_fadd+0xae>
 80002f4:	e0a7      	b.n	8000446 <__aeabi_fadd+0x1fe>
 80002f6:	1e53      	subs	r3, r2, #1
 80002f8:	2a01      	cmp	r2, #1
 80002fa:	d100      	bne.n	80002fe <__aeabi_fadd+0xb6>
 80002fc:	e12f      	b.n	800055e <__aeabi_fadd+0x316>
 80002fe:	2aff      	cmp	r2, #255	; 0xff
 8000300:	d069      	beq.n	80003d6 <__aeabi_fadd+0x18e>
 8000302:	001a      	movs	r2, r3
 8000304:	e0aa      	b.n	800045c <__aeabi_fadd+0x214>
 8000306:	1be9      	subs	r1, r5, r7
 8000308:	2900      	cmp	r1, #0
 800030a:	dd70      	ble.n	80003ee <__aeabi_fadd+0x1a6>
 800030c:	2f00      	cmp	r7, #0
 800030e:	d037      	beq.n	8000380 <__aeabi_fadd+0x138>
 8000310:	2dff      	cmp	r5, #255	; 0xff
 8000312:	d062      	beq.n	80003da <__aeabi_fadd+0x192>
 8000314:	2380      	movs	r3, #128	; 0x80
 8000316:	04db      	lsls	r3, r3, #19
 8000318:	431e      	orrs	r6, r3
 800031a:	291b      	cmp	r1, #27
 800031c:	dc00      	bgt.n	8000320 <__aeabi_fadd+0xd8>
 800031e:	e0b0      	b.n	8000482 <__aeabi_fadd+0x23a>
 8000320:	2001      	movs	r0, #1
 8000322:	4440      	add	r0, r8
 8000324:	0143      	lsls	r3, r0, #5
 8000326:	d543      	bpl.n	80003b0 <__aeabi_fadd+0x168>
 8000328:	3501      	adds	r5, #1
 800032a:	2dff      	cmp	r5, #255	; 0xff
 800032c:	d033      	beq.n	8000396 <__aeabi_fadd+0x14e>
 800032e:	2301      	movs	r3, #1
 8000330:	4a93      	ldr	r2, [pc, #588]	; (8000580 <__aeabi_fadd+0x338>)
 8000332:	4003      	ands	r3, r0
 8000334:	0840      	lsrs	r0, r0, #1
 8000336:	4010      	ands	r0, r2
 8000338:	4318      	orrs	r0, r3
 800033a:	e7b9      	b.n	80002b0 <__aeabi_fadd+0x68>
 800033c:	2e00      	cmp	r6, #0
 800033e:	d100      	bne.n	8000342 <__aeabi_fadd+0xfa>
 8000340:	e083      	b.n	800044a <__aeabi_fadd+0x202>
 8000342:	1e51      	subs	r1, r2, #1
 8000344:	2a01      	cmp	r2, #1
 8000346:	d100      	bne.n	800034a <__aeabi_fadd+0x102>
 8000348:	e0d8      	b.n	80004fc <__aeabi_fadd+0x2b4>
 800034a:	2aff      	cmp	r2, #255	; 0xff
 800034c:	d045      	beq.n	80003da <__aeabi_fadd+0x192>
 800034e:	000a      	movs	r2, r1
 8000350:	e798      	b.n	8000284 <__aeabi_fadd+0x3c>
 8000352:	27fe      	movs	r7, #254	; 0xfe
 8000354:	1c6a      	adds	r2, r5, #1
 8000356:	4217      	tst	r7, r2
 8000358:	d000      	beq.n	800035c <__aeabi_fadd+0x114>
 800035a:	e086      	b.n	800046a <__aeabi_fadd+0x222>
 800035c:	2d00      	cmp	r5, #0
 800035e:	d000      	beq.n	8000362 <__aeabi_fadd+0x11a>
 8000360:	e0b7      	b.n	80004d2 <__aeabi_fadd+0x28a>
 8000362:	4643      	mov	r3, r8
 8000364:	2b00      	cmp	r3, #0
 8000366:	d100      	bne.n	800036a <__aeabi_fadd+0x122>
 8000368:	e0f3      	b.n	8000552 <__aeabi_fadd+0x30a>
 800036a:	2200      	movs	r2, #0
 800036c:	2e00      	cmp	r6, #0
 800036e:	d0b0      	beq.n	80002d2 <__aeabi_fadd+0x8a>
 8000370:	1b98      	subs	r0, r3, r6
 8000372:	0143      	lsls	r3, r0, #5
 8000374:	d400      	bmi.n	8000378 <__aeabi_fadd+0x130>
 8000376:	e0fa      	b.n	800056e <__aeabi_fadd+0x326>
 8000378:	4643      	mov	r3, r8
 800037a:	000c      	movs	r4, r1
 800037c:	1af0      	subs	r0, r6, r3
 800037e:	e797      	b.n	80002b0 <__aeabi_fadd+0x68>
 8000380:	2e00      	cmp	r6, #0
 8000382:	d100      	bne.n	8000386 <__aeabi_fadd+0x13e>
 8000384:	e0c8      	b.n	8000518 <__aeabi_fadd+0x2d0>
 8000386:	1e4a      	subs	r2, r1, #1
 8000388:	2901      	cmp	r1, #1
 800038a:	d100      	bne.n	800038e <__aeabi_fadd+0x146>
 800038c:	e0ae      	b.n	80004ec <__aeabi_fadd+0x2a4>
 800038e:	29ff      	cmp	r1, #255	; 0xff
 8000390:	d023      	beq.n	80003da <__aeabi_fadd+0x192>
 8000392:	0011      	movs	r1, r2
 8000394:	e7c1      	b.n	800031a <__aeabi_fadd+0xd2>
 8000396:	2300      	movs	r3, #0
 8000398:	22ff      	movs	r2, #255	; 0xff
 800039a:	469c      	mov	ip, r3
 800039c:	e799      	b.n	80002d2 <__aeabi_fadd+0x8a>
 800039e:	21fe      	movs	r1, #254	; 0xfe
 80003a0:	1c6a      	adds	r2, r5, #1
 80003a2:	4211      	tst	r1, r2
 80003a4:	d077      	beq.n	8000496 <__aeabi_fadd+0x24e>
 80003a6:	2aff      	cmp	r2, #255	; 0xff
 80003a8:	d0f5      	beq.n	8000396 <__aeabi_fadd+0x14e>
 80003aa:	0015      	movs	r5, r2
 80003ac:	4446      	add	r6, r8
 80003ae:	0870      	lsrs	r0, r6, #1
 80003b0:	0743      	lsls	r3, r0, #29
 80003b2:	d000      	beq.n	80003b6 <__aeabi_fadd+0x16e>
 80003b4:	e77e      	b.n	80002b4 <__aeabi_fadd+0x6c>
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	2dff      	cmp	r5, #255	; 0xff
 80003ba:	d00e      	beq.n	80003da <__aeabi_fadd+0x192>
 80003bc:	025b      	lsls	r3, r3, #9
 80003be:	0a5b      	lsrs	r3, r3, #9
 80003c0:	469c      	mov	ip, r3
 80003c2:	b2ea      	uxtb	r2, r5
 80003c4:	e785      	b.n	80002d2 <__aeabi_fadd+0x8a>
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d007      	beq.n	80003da <__aeabi_fadd+0x192>
 80003ca:	2280      	movs	r2, #128	; 0x80
 80003cc:	03d2      	lsls	r2, r2, #15
 80003ce:	4213      	tst	r3, r2
 80003d0:	d003      	beq.n	80003da <__aeabi_fadd+0x192>
 80003d2:	4210      	tst	r0, r2
 80003d4:	d101      	bne.n	80003da <__aeabi_fadd+0x192>
 80003d6:	000c      	movs	r4, r1
 80003d8:	0003      	movs	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d0db      	beq.n	8000396 <__aeabi_fadd+0x14e>
 80003de:	2080      	movs	r0, #128	; 0x80
 80003e0:	03c0      	lsls	r0, r0, #15
 80003e2:	4318      	orrs	r0, r3
 80003e4:	0240      	lsls	r0, r0, #9
 80003e6:	0a43      	lsrs	r3, r0, #9
 80003e8:	469c      	mov	ip, r3
 80003ea:	22ff      	movs	r2, #255	; 0xff
 80003ec:	e771      	b.n	80002d2 <__aeabi_fadd+0x8a>
 80003ee:	2900      	cmp	r1, #0
 80003f0:	d0d5      	beq.n	800039e <__aeabi_fadd+0x156>
 80003f2:	1b7a      	subs	r2, r7, r5
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d160      	bne.n	80004ba <__aeabi_fadd+0x272>
 80003f8:	4643      	mov	r3, r8
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d024      	beq.n	8000448 <__aeabi_fadd+0x200>
 80003fe:	1e53      	subs	r3, r2, #1
 8000400:	2a01      	cmp	r2, #1
 8000402:	d073      	beq.n	80004ec <__aeabi_fadd+0x2a4>
 8000404:	2aff      	cmp	r2, #255	; 0xff
 8000406:	d0e7      	beq.n	80003d8 <__aeabi_fadd+0x190>
 8000408:	001a      	movs	r2, r3
 800040a:	2a1b      	cmp	r2, #27
 800040c:	dc00      	bgt.n	8000410 <__aeabi_fadd+0x1c8>
 800040e:	e085      	b.n	800051c <__aeabi_fadd+0x2d4>
 8000410:	2001      	movs	r0, #1
 8000412:	003d      	movs	r5, r7
 8000414:	1980      	adds	r0, r0, r6
 8000416:	e785      	b.n	8000324 <__aeabi_fadd+0xdc>
 8000418:	2320      	movs	r3, #32
 800041a:	003a      	movs	r2, r7
 800041c:	1b45      	subs	r5, r0, r5
 800041e:	0038      	movs	r0, r7
 8000420:	3501      	adds	r5, #1
 8000422:	40ea      	lsrs	r2, r5
 8000424:	1b5d      	subs	r5, r3, r5
 8000426:	40a8      	lsls	r0, r5
 8000428:	1e43      	subs	r3, r0, #1
 800042a:	4198      	sbcs	r0, r3
 800042c:	2500      	movs	r5, #0
 800042e:	4310      	orrs	r0, r2
 8000430:	e73e      	b.n	80002b0 <__aeabi_fadd+0x68>
 8000432:	2320      	movs	r3, #32
 8000434:	0030      	movs	r0, r6
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	0031      	movs	r1, r6
 800043a:	4098      	lsls	r0, r3
 800043c:	40d1      	lsrs	r1, r2
 800043e:	1e43      	subs	r3, r0, #1
 8000440:	4198      	sbcs	r0, r3
 8000442:	4308      	orrs	r0, r1
 8000444:	e722      	b.n	800028c <__aeabi_fadd+0x44>
 8000446:	000c      	movs	r4, r1
 8000448:	0003      	movs	r3, r0
 800044a:	0015      	movs	r5, r2
 800044c:	e7b4      	b.n	80003b8 <__aeabi_fadd+0x170>
 800044e:	2fff      	cmp	r7, #255	; 0xff
 8000450:	d0c1      	beq.n	80003d6 <__aeabi_fadd+0x18e>
 8000452:	2380      	movs	r3, #128	; 0x80
 8000454:	4640      	mov	r0, r8
 8000456:	04db      	lsls	r3, r3, #19
 8000458:	4318      	orrs	r0, r3
 800045a:	4680      	mov	r8, r0
 800045c:	2a1b      	cmp	r2, #27
 800045e:	dd51      	ble.n	8000504 <__aeabi_fadd+0x2bc>
 8000460:	2001      	movs	r0, #1
 8000462:	000c      	movs	r4, r1
 8000464:	003d      	movs	r5, r7
 8000466:	1a30      	subs	r0, r6, r0
 8000468:	e712      	b.n	8000290 <__aeabi_fadd+0x48>
 800046a:	4643      	mov	r3, r8
 800046c:	1b9f      	subs	r7, r3, r6
 800046e:	017b      	lsls	r3, r7, #5
 8000470:	d42b      	bmi.n	80004ca <__aeabi_fadd+0x282>
 8000472:	2f00      	cmp	r7, #0
 8000474:	d000      	beq.n	8000478 <__aeabi_fadd+0x230>
 8000476:	e710      	b.n	800029a <__aeabi_fadd+0x52>
 8000478:	2300      	movs	r3, #0
 800047a:	2400      	movs	r4, #0
 800047c:	2200      	movs	r2, #0
 800047e:	469c      	mov	ip, r3
 8000480:	e727      	b.n	80002d2 <__aeabi_fadd+0x8a>
 8000482:	2320      	movs	r3, #32
 8000484:	0032      	movs	r2, r6
 8000486:	0030      	movs	r0, r6
 8000488:	40ca      	lsrs	r2, r1
 800048a:	1a59      	subs	r1, r3, r1
 800048c:	4088      	lsls	r0, r1
 800048e:	1e43      	subs	r3, r0, #1
 8000490:	4198      	sbcs	r0, r3
 8000492:	4310      	orrs	r0, r2
 8000494:	e745      	b.n	8000322 <__aeabi_fadd+0xda>
 8000496:	2d00      	cmp	r5, #0
 8000498:	d14a      	bne.n	8000530 <__aeabi_fadd+0x2e8>
 800049a:	4643      	mov	r3, r8
 800049c:	2b00      	cmp	r3, #0
 800049e:	d063      	beq.n	8000568 <__aeabi_fadd+0x320>
 80004a0:	2200      	movs	r2, #0
 80004a2:	2e00      	cmp	r6, #0
 80004a4:	d100      	bne.n	80004a8 <__aeabi_fadd+0x260>
 80004a6:	e714      	b.n	80002d2 <__aeabi_fadd+0x8a>
 80004a8:	0030      	movs	r0, r6
 80004aa:	4440      	add	r0, r8
 80004ac:	0143      	lsls	r3, r0, #5
 80004ae:	d400      	bmi.n	80004b2 <__aeabi_fadd+0x26a>
 80004b0:	e77e      	b.n	80003b0 <__aeabi_fadd+0x168>
 80004b2:	4b32      	ldr	r3, [pc, #200]	; (800057c <__aeabi_fadd+0x334>)
 80004b4:	3501      	adds	r5, #1
 80004b6:	4018      	ands	r0, r3
 80004b8:	e77a      	b.n	80003b0 <__aeabi_fadd+0x168>
 80004ba:	2fff      	cmp	r7, #255	; 0xff
 80004bc:	d08c      	beq.n	80003d8 <__aeabi_fadd+0x190>
 80004be:	2380      	movs	r3, #128	; 0x80
 80004c0:	4641      	mov	r1, r8
 80004c2:	04db      	lsls	r3, r3, #19
 80004c4:	4319      	orrs	r1, r3
 80004c6:	4688      	mov	r8, r1
 80004c8:	e79f      	b.n	800040a <__aeabi_fadd+0x1c2>
 80004ca:	4643      	mov	r3, r8
 80004cc:	000c      	movs	r4, r1
 80004ce:	1af7      	subs	r7, r6, r3
 80004d0:	e6e3      	b.n	800029a <__aeabi_fadd+0x52>
 80004d2:	4642      	mov	r2, r8
 80004d4:	2a00      	cmp	r2, #0
 80004d6:	d000      	beq.n	80004da <__aeabi_fadd+0x292>
 80004d8:	e775      	b.n	80003c6 <__aeabi_fadd+0x17e>
 80004da:	2e00      	cmp	r6, #0
 80004dc:	d000      	beq.n	80004e0 <__aeabi_fadd+0x298>
 80004de:	e77a      	b.n	80003d6 <__aeabi_fadd+0x18e>
 80004e0:	2380      	movs	r3, #128	; 0x80
 80004e2:	03db      	lsls	r3, r3, #15
 80004e4:	2400      	movs	r4, #0
 80004e6:	469c      	mov	ip, r3
 80004e8:	22ff      	movs	r2, #255	; 0xff
 80004ea:	e6f2      	b.n	80002d2 <__aeabi_fadd+0x8a>
 80004ec:	0030      	movs	r0, r6
 80004ee:	4440      	add	r0, r8
 80004f0:	2501      	movs	r5, #1
 80004f2:	0143      	lsls	r3, r0, #5
 80004f4:	d400      	bmi.n	80004f8 <__aeabi_fadd+0x2b0>
 80004f6:	e75b      	b.n	80003b0 <__aeabi_fadd+0x168>
 80004f8:	2502      	movs	r5, #2
 80004fa:	e718      	b.n	800032e <__aeabi_fadd+0xe6>
 80004fc:	4643      	mov	r3, r8
 80004fe:	2501      	movs	r5, #1
 8000500:	1b98      	subs	r0, r3, r6
 8000502:	e6c5      	b.n	8000290 <__aeabi_fadd+0x48>
 8000504:	2320      	movs	r3, #32
 8000506:	4644      	mov	r4, r8
 8000508:	4640      	mov	r0, r8
 800050a:	40d4      	lsrs	r4, r2
 800050c:	1a9a      	subs	r2, r3, r2
 800050e:	4090      	lsls	r0, r2
 8000510:	1e43      	subs	r3, r0, #1
 8000512:	4198      	sbcs	r0, r3
 8000514:	4320      	orrs	r0, r4
 8000516:	e7a4      	b.n	8000462 <__aeabi_fadd+0x21a>
 8000518:	000d      	movs	r5, r1
 800051a:	e74d      	b.n	80003b8 <__aeabi_fadd+0x170>
 800051c:	2320      	movs	r3, #32
 800051e:	4641      	mov	r1, r8
 8000520:	4640      	mov	r0, r8
 8000522:	40d1      	lsrs	r1, r2
 8000524:	1a9a      	subs	r2, r3, r2
 8000526:	4090      	lsls	r0, r2
 8000528:	1e43      	subs	r3, r0, #1
 800052a:	4198      	sbcs	r0, r3
 800052c:	4308      	orrs	r0, r1
 800052e:	e770      	b.n	8000412 <__aeabi_fadd+0x1ca>
 8000530:	4642      	mov	r2, r8
 8000532:	2a00      	cmp	r2, #0
 8000534:	d100      	bne.n	8000538 <__aeabi_fadd+0x2f0>
 8000536:	e74f      	b.n	80003d8 <__aeabi_fadd+0x190>
 8000538:	2e00      	cmp	r6, #0
 800053a:	d100      	bne.n	800053e <__aeabi_fadd+0x2f6>
 800053c:	e74d      	b.n	80003da <__aeabi_fadd+0x192>
 800053e:	2280      	movs	r2, #128	; 0x80
 8000540:	03d2      	lsls	r2, r2, #15
 8000542:	4213      	tst	r3, r2
 8000544:	d100      	bne.n	8000548 <__aeabi_fadd+0x300>
 8000546:	e748      	b.n	80003da <__aeabi_fadd+0x192>
 8000548:	4210      	tst	r0, r2
 800054a:	d000      	beq.n	800054e <__aeabi_fadd+0x306>
 800054c:	e745      	b.n	80003da <__aeabi_fadd+0x192>
 800054e:	0003      	movs	r3, r0
 8000550:	e743      	b.n	80003da <__aeabi_fadd+0x192>
 8000552:	2e00      	cmp	r6, #0
 8000554:	d090      	beq.n	8000478 <__aeabi_fadd+0x230>
 8000556:	000c      	movs	r4, r1
 8000558:	4684      	mov	ip, r0
 800055a:	2200      	movs	r2, #0
 800055c:	e6b9      	b.n	80002d2 <__aeabi_fadd+0x8a>
 800055e:	4643      	mov	r3, r8
 8000560:	000c      	movs	r4, r1
 8000562:	1af0      	subs	r0, r6, r3
 8000564:	3501      	adds	r5, #1
 8000566:	e693      	b.n	8000290 <__aeabi_fadd+0x48>
 8000568:	4684      	mov	ip, r0
 800056a:	2200      	movs	r2, #0
 800056c:	e6b1      	b.n	80002d2 <__aeabi_fadd+0x8a>
 800056e:	2800      	cmp	r0, #0
 8000570:	d000      	beq.n	8000574 <__aeabi_fadd+0x32c>
 8000572:	e71d      	b.n	80003b0 <__aeabi_fadd+0x168>
 8000574:	2300      	movs	r3, #0
 8000576:	2400      	movs	r4, #0
 8000578:	469c      	mov	ip, r3
 800057a:	e6aa      	b.n	80002d2 <__aeabi_fadd+0x8a>
 800057c:	fbffffff 	.word	0xfbffffff
 8000580:	7dffffff 	.word	0x7dffffff

08000584 <__aeabi_fdiv>:
 8000584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000586:	464f      	mov	r7, r9
 8000588:	4646      	mov	r6, r8
 800058a:	46d6      	mov	lr, sl
 800058c:	0245      	lsls	r5, r0, #9
 800058e:	b5c0      	push	{r6, r7, lr}
 8000590:	0047      	lsls	r7, r0, #1
 8000592:	1c0c      	adds	r4, r1, #0
 8000594:	0a6d      	lsrs	r5, r5, #9
 8000596:	0e3f      	lsrs	r7, r7, #24
 8000598:	0fc6      	lsrs	r6, r0, #31
 800059a:	2f00      	cmp	r7, #0
 800059c:	d100      	bne.n	80005a0 <__aeabi_fdiv+0x1c>
 800059e:	e070      	b.n	8000682 <__aeabi_fdiv+0xfe>
 80005a0:	2fff      	cmp	r7, #255	; 0xff
 80005a2:	d100      	bne.n	80005a6 <__aeabi_fdiv+0x22>
 80005a4:	e075      	b.n	8000692 <__aeabi_fdiv+0x10e>
 80005a6:	00eb      	lsls	r3, r5, #3
 80005a8:	2580      	movs	r5, #128	; 0x80
 80005aa:	04ed      	lsls	r5, r5, #19
 80005ac:	431d      	orrs	r5, r3
 80005ae:	2300      	movs	r3, #0
 80005b0:	4699      	mov	r9, r3
 80005b2:	469a      	mov	sl, r3
 80005b4:	3f7f      	subs	r7, #127	; 0x7f
 80005b6:	0260      	lsls	r0, r4, #9
 80005b8:	0a43      	lsrs	r3, r0, #9
 80005ba:	4698      	mov	r8, r3
 80005bc:	0063      	lsls	r3, r4, #1
 80005be:	0e1b      	lsrs	r3, r3, #24
 80005c0:	0fe4      	lsrs	r4, r4, #31
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d04e      	beq.n	8000664 <__aeabi_fdiv+0xe0>
 80005c6:	2bff      	cmp	r3, #255	; 0xff
 80005c8:	d046      	beq.n	8000658 <__aeabi_fdiv+0xd4>
 80005ca:	4642      	mov	r2, r8
 80005cc:	00d0      	lsls	r0, r2, #3
 80005ce:	2280      	movs	r2, #128	; 0x80
 80005d0:	04d2      	lsls	r2, r2, #19
 80005d2:	4302      	orrs	r2, r0
 80005d4:	4690      	mov	r8, r2
 80005d6:	2200      	movs	r2, #0
 80005d8:	3b7f      	subs	r3, #127	; 0x7f
 80005da:	0031      	movs	r1, r6
 80005dc:	1aff      	subs	r7, r7, r3
 80005de:	464b      	mov	r3, r9
 80005e0:	4061      	eors	r1, r4
 80005e2:	b2c9      	uxtb	r1, r1
 80005e4:	4313      	orrs	r3, r2
 80005e6:	2b0f      	cmp	r3, #15
 80005e8:	d900      	bls.n	80005ec <__aeabi_fdiv+0x68>
 80005ea:	e0b5      	b.n	8000758 <__aeabi_fdiv+0x1d4>
 80005ec:	486e      	ldr	r0, [pc, #440]	; (80007a8 <__aeabi_fdiv+0x224>)
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	58c3      	ldr	r3, [r0, r3]
 80005f2:	469f      	mov	pc, r3
 80005f4:	2300      	movs	r3, #0
 80005f6:	4698      	mov	r8, r3
 80005f8:	0026      	movs	r6, r4
 80005fa:	4645      	mov	r5, r8
 80005fc:	4692      	mov	sl, r2
 80005fe:	4653      	mov	r3, sl
 8000600:	2b02      	cmp	r3, #2
 8000602:	d100      	bne.n	8000606 <__aeabi_fdiv+0x82>
 8000604:	e089      	b.n	800071a <__aeabi_fdiv+0x196>
 8000606:	2b03      	cmp	r3, #3
 8000608:	d100      	bne.n	800060c <__aeabi_fdiv+0x88>
 800060a:	e09e      	b.n	800074a <__aeabi_fdiv+0x1c6>
 800060c:	2b01      	cmp	r3, #1
 800060e:	d018      	beq.n	8000642 <__aeabi_fdiv+0xbe>
 8000610:	003b      	movs	r3, r7
 8000612:	337f      	adds	r3, #127	; 0x7f
 8000614:	2b00      	cmp	r3, #0
 8000616:	dd69      	ble.n	80006ec <__aeabi_fdiv+0x168>
 8000618:	076a      	lsls	r2, r5, #29
 800061a:	d004      	beq.n	8000626 <__aeabi_fdiv+0xa2>
 800061c:	220f      	movs	r2, #15
 800061e:	402a      	ands	r2, r5
 8000620:	2a04      	cmp	r2, #4
 8000622:	d000      	beq.n	8000626 <__aeabi_fdiv+0xa2>
 8000624:	3504      	adds	r5, #4
 8000626:	012a      	lsls	r2, r5, #4
 8000628:	d503      	bpl.n	8000632 <__aeabi_fdiv+0xae>
 800062a:	4b60      	ldr	r3, [pc, #384]	; (80007ac <__aeabi_fdiv+0x228>)
 800062c:	401d      	ands	r5, r3
 800062e:	003b      	movs	r3, r7
 8000630:	3380      	adds	r3, #128	; 0x80
 8000632:	2bfe      	cmp	r3, #254	; 0xfe
 8000634:	dd00      	ble.n	8000638 <__aeabi_fdiv+0xb4>
 8000636:	e070      	b.n	800071a <__aeabi_fdiv+0x196>
 8000638:	01ad      	lsls	r5, r5, #6
 800063a:	0a6d      	lsrs	r5, r5, #9
 800063c:	b2d8      	uxtb	r0, r3
 800063e:	e002      	b.n	8000646 <__aeabi_fdiv+0xc2>
 8000640:	000e      	movs	r6, r1
 8000642:	2000      	movs	r0, #0
 8000644:	2500      	movs	r5, #0
 8000646:	05c0      	lsls	r0, r0, #23
 8000648:	4328      	orrs	r0, r5
 800064a:	07f6      	lsls	r6, r6, #31
 800064c:	4330      	orrs	r0, r6
 800064e:	bce0      	pop	{r5, r6, r7}
 8000650:	46ba      	mov	sl, r7
 8000652:	46b1      	mov	r9, r6
 8000654:	46a8      	mov	r8, r5
 8000656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000658:	4643      	mov	r3, r8
 800065a:	2b00      	cmp	r3, #0
 800065c:	d13f      	bne.n	80006de <__aeabi_fdiv+0x15a>
 800065e:	2202      	movs	r2, #2
 8000660:	3fff      	subs	r7, #255	; 0xff
 8000662:	e003      	b.n	800066c <__aeabi_fdiv+0xe8>
 8000664:	4643      	mov	r3, r8
 8000666:	2b00      	cmp	r3, #0
 8000668:	d12d      	bne.n	80006c6 <__aeabi_fdiv+0x142>
 800066a:	2201      	movs	r2, #1
 800066c:	0031      	movs	r1, r6
 800066e:	464b      	mov	r3, r9
 8000670:	4061      	eors	r1, r4
 8000672:	b2c9      	uxtb	r1, r1
 8000674:	4313      	orrs	r3, r2
 8000676:	2b0f      	cmp	r3, #15
 8000678:	d834      	bhi.n	80006e4 <__aeabi_fdiv+0x160>
 800067a:	484d      	ldr	r0, [pc, #308]	; (80007b0 <__aeabi_fdiv+0x22c>)
 800067c:	009b      	lsls	r3, r3, #2
 800067e:	58c3      	ldr	r3, [r0, r3]
 8000680:	469f      	mov	pc, r3
 8000682:	2d00      	cmp	r5, #0
 8000684:	d113      	bne.n	80006ae <__aeabi_fdiv+0x12a>
 8000686:	2304      	movs	r3, #4
 8000688:	4699      	mov	r9, r3
 800068a:	3b03      	subs	r3, #3
 800068c:	2700      	movs	r7, #0
 800068e:	469a      	mov	sl, r3
 8000690:	e791      	b.n	80005b6 <__aeabi_fdiv+0x32>
 8000692:	2d00      	cmp	r5, #0
 8000694:	d105      	bne.n	80006a2 <__aeabi_fdiv+0x11e>
 8000696:	2308      	movs	r3, #8
 8000698:	4699      	mov	r9, r3
 800069a:	3b06      	subs	r3, #6
 800069c:	27ff      	movs	r7, #255	; 0xff
 800069e:	469a      	mov	sl, r3
 80006a0:	e789      	b.n	80005b6 <__aeabi_fdiv+0x32>
 80006a2:	230c      	movs	r3, #12
 80006a4:	4699      	mov	r9, r3
 80006a6:	3b09      	subs	r3, #9
 80006a8:	27ff      	movs	r7, #255	; 0xff
 80006aa:	469a      	mov	sl, r3
 80006ac:	e783      	b.n	80005b6 <__aeabi_fdiv+0x32>
 80006ae:	0028      	movs	r0, r5
 80006b0:	f000 fc3e 	bl	8000f30 <__clzsi2>
 80006b4:	2776      	movs	r7, #118	; 0x76
 80006b6:	1f43      	subs	r3, r0, #5
 80006b8:	409d      	lsls	r5, r3
 80006ba:	2300      	movs	r3, #0
 80006bc:	427f      	negs	r7, r7
 80006be:	4699      	mov	r9, r3
 80006c0:	469a      	mov	sl, r3
 80006c2:	1a3f      	subs	r7, r7, r0
 80006c4:	e777      	b.n	80005b6 <__aeabi_fdiv+0x32>
 80006c6:	4640      	mov	r0, r8
 80006c8:	f000 fc32 	bl	8000f30 <__clzsi2>
 80006cc:	4642      	mov	r2, r8
 80006ce:	1f43      	subs	r3, r0, #5
 80006d0:	409a      	lsls	r2, r3
 80006d2:	2376      	movs	r3, #118	; 0x76
 80006d4:	425b      	negs	r3, r3
 80006d6:	4690      	mov	r8, r2
 80006d8:	1a1b      	subs	r3, r3, r0
 80006da:	2200      	movs	r2, #0
 80006dc:	e77d      	b.n	80005da <__aeabi_fdiv+0x56>
 80006de:	23ff      	movs	r3, #255	; 0xff
 80006e0:	2203      	movs	r2, #3
 80006e2:	e77a      	b.n	80005da <__aeabi_fdiv+0x56>
 80006e4:	000e      	movs	r6, r1
 80006e6:	20ff      	movs	r0, #255	; 0xff
 80006e8:	2500      	movs	r5, #0
 80006ea:	e7ac      	b.n	8000646 <__aeabi_fdiv+0xc2>
 80006ec:	2001      	movs	r0, #1
 80006ee:	1ac0      	subs	r0, r0, r3
 80006f0:	281b      	cmp	r0, #27
 80006f2:	dca6      	bgt.n	8000642 <__aeabi_fdiv+0xbe>
 80006f4:	379e      	adds	r7, #158	; 0x9e
 80006f6:	002a      	movs	r2, r5
 80006f8:	40bd      	lsls	r5, r7
 80006fa:	40c2      	lsrs	r2, r0
 80006fc:	1e6b      	subs	r3, r5, #1
 80006fe:	419d      	sbcs	r5, r3
 8000700:	4315      	orrs	r5, r2
 8000702:	076b      	lsls	r3, r5, #29
 8000704:	d004      	beq.n	8000710 <__aeabi_fdiv+0x18c>
 8000706:	230f      	movs	r3, #15
 8000708:	402b      	ands	r3, r5
 800070a:	2b04      	cmp	r3, #4
 800070c:	d000      	beq.n	8000710 <__aeabi_fdiv+0x18c>
 800070e:	3504      	adds	r5, #4
 8000710:	016b      	lsls	r3, r5, #5
 8000712:	d544      	bpl.n	800079e <__aeabi_fdiv+0x21a>
 8000714:	2001      	movs	r0, #1
 8000716:	2500      	movs	r5, #0
 8000718:	e795      	b.n	8000646 <__aeabi_fdiv+0xc2>
 800071a:	20ff      	movs	r0, #255	; 0xff
 800071c:	2500      	movs	r5, #0
 800071e:	e792      	b.n	8000646 <__aeabi_fdiv+0xc2>
 8000720:	2580      	movs	r5, #128	; 0x80
 8000722:	2600      	movs	r6, #0
 8000724:	20ff      	movs	r0, #255	; 0xff
 8000726:	03ed      	lsls	r5, r5, #15
 8000728:	e78d      	b.n	8000646 <__aeabi_fdiv+0xc2>
 800072a:	2300      	movs	r3, #0
 800072c:	4698      	mov	r8, r3
 800072e:	2080      	movs	r0, #128	; 0x80
 8000730:	03c0      	lsls	r0, r0, #15
 8000732:	4205      	tst	r5, r0
 8000734:	d009      	beq.n	800074a <__aeabi_fdiv+0x1c6>
 8000736:	4643      	mov	r3, r8
 8000738:	4203      	tst	r3, r0
 800073a:	d106      	bne.n	800074a <__aeabi_fdiv+0x1c6>
 800073c:	4645      	mov	r5, r8
 800073e:	4305      	orrs	r5, r0
 8000740:	026d      	lsls	r5, r5, #9
 8000742:	0026      	movs	r6, r4
 8000744:	20ff      	movs	r0, #255	; 0xff
 8000746:	0a6d      	lsrs	r5, r5, #9
 8000748:	e77d      	b.n	8000646 <__aeabi_fdiv+0xc2>
 800074a:	2080      	movs	r0, #128	; 0x80
 800074c:	03c0      	lsls	r0, r0, #15
 800074e:	4305      	orrs	r5, r0
 8000750:	026d      	lsls	r5, r5, #9
 8000752:	20ff      	movs	r0, #255	; 0xff
 8000754:	0a6d      	lsrs	r5, r5, #9
 8000756:	e776      	b.n	8000646 <__aeabi_fdiv+0xc2>
 8000758:	4642      	mov	r2, r8
 800075a:	016b      	lsls	r3, r5, #5
 800075c:	0150      	lsls	r0, r2, #5
 800075e:	4283      	cmp	r3, r0
 8000760:	d219      	bcs.n	8000796 <__aeabi_fdiv+0x212>
 8000762:	221b      	movs	r2, #27
 8000764:	2500      	movs	r5, #0
 8000766:	3f01      	subs	r7, #1
 8000768:	2601      	movs	r6, #1
 800076a:	001c      	movs	r4, r3
 800076c:	006d      	lsls	r5, r5, #1
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	2c00      	cmp	r4, #0
 8000772:	db01      	blt.n	8000778 <__aeabi_fdiv+0x1f4>
 8000774:	4298      	cmp	r0, r3
 8000776:	d801      	bhi.n	800077c <__aeabi_fdiv+0x1f8>
 8000778:	1a1b      	subs	r3, r3, r0
 800077a:	4335      	orrs	r5, r6
 800077c:	3a01      	subs	r2, #1
 800077e:	2a00      	cmp	r2, #0
 8000780:	d1f3      	bne.n	800076a <__aeabi_fdiv+0x1e6>
 8000782:	1e5a      	subs	r2, r3, #1
 8000784:	4193      	sbcs	r3, r2
 8000786:	431d      	orrs	r5, r3
 8000788:	003b      	movs	r3, r7
 800078a:	337f      	adds	r3, #127	; 0x7f
 800078c:	000e      	movs	r6, r1
 800078e:	2b00      	cmp	r3, #0
 8000790:	dd00      	ble.n	8000794 <__aeabi_fdiv+0x210>
 8000792:	e741      	b.n	8000618 <__aeabi_fdiv+0x94>
 8000794:	e7aa      	b.n	80006ec <__aeabi_fdiv+0x168>
 8000796:	221a      	movs	r2, #26
 8000798:	2501      	movs	r5, #1
 800079a:	1a1b      	subs	r3, r3, r0
 800079c:	e7e4      	b.n	8000768 <__aeabi_fdiv+0x1e4>
 800079e:	01ad      	lsls	r5, r5, #6
 80007a0:	2000      	movs	r0, #0
 80007a2:	0a6d      	lsrs	r5, r5, #9
 80007a4:	e74f      	b.n	8000646 <__aeabi_fdiv+0xc2>
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	08004390 	.word	0x08004390
 80007ac:	f7ffffff 	.word	0xf7ffffff
 80007b0:	080043d0 	.word	0x080043d0

080007b4 <__aeabi_fmul>:
 80007b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007b6:	464f      	mov	r7, r9
 80007b8:	4646      	mov	r6, r8
 80007ba:	46d6      	mov	lr, sl
 80007bc:	0244      	lsls	r4, r0, #9
 80007be:	0045      	lsls	r5, r0, #1
 80007c0:	b5c0      	push	{r6, r7, lr}
 80007c2:	0a64      	lsrs	r4, r4, #9
 80007c4:	1c0f      	adds	r7, r1, #0
 80007c6:	0e2d      	lsrs	r5, r5, #24
 80007c8:	0fc6      	lsrs	r6, r0, #31
 80007ca:	2d00      	cmp	r5, #0
 80007cc:	d100      	bne.n	80007d0 <__aeabi_fmul+0x1c>
 80007ce:	e08d      	b.n	80008ec <__aeabi_fmul+0x138>
 80007d0:	2dff      	cmp	r5, #255	; 0xff
 80007d2:	d100      	bne.n	80007d6 <__aeabi_fmul+0x22>
 80007d4:	e092      	b.n	80008fc <__aeabi_fmul+0x148>
 80007d6:	2300      	movs	r3, #0
 80007d8:	2080      	movs	r0, #128	; 0x80
 80007da:	4699      	mov	r9, r3
 80007dc:	469a      	mov	sl, r3
 80007de:	00e4      	lsls	r4, r4, #3
 80007e0:	04c0      	lsls	r0, r0, #19
 80007e2:	4304      	orrs	r4, r0
 80007e4:	3d7f      	subs	r5, #127	; 0x7f
 80007e6:	0278      	lsls	r0, r7, #9
 80007e8:	0a43      	lsrs	r3, r0, #9
 80007ea:	4698      	mov	r8, r3
 80007ec:	007b      	lsls	r3, r7, #1
 80007ee:	0e1b      	lsrs	r3, r3, #24
 80007f0:	0fff      	lsrs	r7, r7, #31
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d100      	bne.n	80007f8 <__aeabi_fmul+0x44>
 80007f6:	e070      	b.n	80008da <__aeabi_fmul+0x126>
 80007f8:	2bff      	cmp	r3, #255	; 0xff
 80007fa:	d100      	bne.n	80007fe <__aeabi_fmul+0x4a>
 80007fc:	e086      	b.n	800090c <__aeabi_fmul+0x158>
 80007fe:	4642      	mov	r2, r8
 8000800:	00d0      	lsls	r0, r2, #3
 8000802:	2280      	movs	r2, #128	; 0x80
 8000804:	3b7f      	subs	r3, #127	; 0x7f
 8000806:	18ed      	adds	r5, r5, r3
 8000808:	2300      	movs	r3, #0
 800080a:	04d2      	lsls	r2, r2, #19
 800080c:	4302      	orrs	r2, r0
 800080e:	4690      	mov	r8, r2
 8000810:	469c      	mov	ip, r3
 8000812:	0031      	movs	r1, r6
 8000814:	464b      	mov	r3, r9
 8000816:	4079      	eors	r1, r7
 8000818:	1c68      	adds	r0, r5, #1
 800081a:	2b0f      	cmp	r3, #15
 800081c:	d81c      	bhi.n	8000858 <__aeabi_fmul+0xa4>
 800081e:	4a76      	ldr	r2, [pc, #472]	; (80009f8 <__aeabi_fmul+0x244>)
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	58d3      	ldr	r3, [r2, r3]
 8000824:	469f      	mov	pc, r3
 8000826:	0039      	movs	r1, r7
 8000828:	4644      	mov	r4, r8
 800082a:	46e2      	mov	sl, ip
 800082c:	4653      	mov	r3, sl
 800082e:	2b02      	cmp	r3, #2
 8000830:	d00f      	beq.n	8000852 <__aeabi_fmul+0x9e>
 8000832:	2b03      	cmp	r3, #3
 8000834:	d100      	bne.n	8000838 <__aeabi_fmul+0x84>
 8000836:	e0d7      	b.n	80009e8 <__aeabi_fmul+0x234>
 8000838:	2b01      	cmp	r3, #1
 800083a:	d137      	bne.n	80008ac <__aeabi_fmul+0xf8>
 800083c:	2000      	movs	r0, #0
 800083e:	2400      	movs	r4, #0
 8000840:	05c0      	lsls	r0, r0, #23
 8000842:	4320      	orrs	r0, r4
 8000844:	07c9      	lsls	r1, r1, #31
 8000846:	4308      	orrs	r0, r1
 8000848:	bce0      	pop	{r5, r6, r7}
 800084a:	46ba      	mov	sl, r7
 800084c:	46b1      	mov	r9, r6
 800084e:	46a8      	mov	r8, r5
 8000850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000852:	20ff      	movs	r0, #255	; 0xff
 8000854:	2400      	movs	r4, #0
 8000856:	e7f3      	b.n	8000840 <__aeabi_fmul+0x8c>
 8000858:	0c26      	lsrs	r6, r4, #16
 800085a:	0424      	lsls	r4, r4, #16
 800085c:	0c22      	lsrs	r2, r4, #16
 800085e:	4644      	mov	r4, r8
 8000860:	0424      	lsls	r4, r4, #16
 8000862:	0c24      	lsrs	r4, r4, #16
 8000864:	4643      	mov	r3, r8
 8000866:	0027      	movs	r7, r4
 8000868:	0c1b      	lsrs	r3, r3, #16
 800086a:	4357      	muls	r7, r2
 800086c:	4374      	muls	r4, r6
 800086e:	435a      	muls	r2, r3
 8000870:	435e      	muls	r6, r3
 8000872:	1912      	adds	r2, r2, r4
 8000874:	0c3b      	lsrs	r3, r7, #16
 8000876:	189b      	adds	r3, r3, r2
 8000878:	429c      	cmp	r4, r3
 800087a:	d903      	bls.n	8000884 <__aeabi_fmul+0xd0>
 800087c:	2280      	movs	r2, #128	; 0x80
 800087e:	0252      	lsls	r2, r2, #9
 8000880:	4694      	mov	ip, r2
 8000882:	4466      	add	r6, ip
 8000884:	043f      	lsls	r7, r7, #16
 8000886:	041a      	lsls	r2, r3, #16
 8000888:	0c3f      	lsrs	r7, r7, #16
 800088a:	19d2      	adds	r2, r2, r7
 800088c:	0194      	lsls	r4, r2, #6
 800088e:	1e67      	subs	r7, r4, #1
 8000890:	41bc      	sbcs	r4, r7
 8000892:	0c1b      	lsrs	r3, r3, #16
 8000894:	0e92      	lsrs	r2, r2, #26
 8000896:	199b      	adds	r3, r3, r6
 8000898:	4314      	orrs	r4, r2
 800089a:	019b      	lsls	r3, r3, #6
 800089c:	431c      	orrs	r4, r3
 800089e:	011b      	lsls	r3, r3, #4
 80008a0:	d400      	bmi.n	80008a4 <__aeabi_fmul+0xf0>
 80008a2:	e09b      	b.n	80009dc <__aeabi_fmul+0x228>
 80008a4:	2301      	movs	r3, #1
 80008a6:	0862      	lsrs	r2, r4, #1
 80008a8:	401c      	ands	r4, r3
 80008aa:	4314      	orrs	r4, r2
 80008ac:	0002      	movs	r2, r0
 80008ae:	327f      	adds	r2, #127	; 0x7f
 80008b0:	2a00      	cmp	r2, #0
 80008b2:	dd64      	ble.n	800097e <__aeabi_fmul+0x1ca>
 80008b4:	0763      	lsls	r3, r4, #29
 80008b6:	d004      	beq.n	80008c2 <__aeabi_fmul+0x10e>
 80008b8:	230f      	movs	r3, #15
 80008ba:	4023      	ands	r3, r4
 80008bc:	2b04      	cmp	r3, #4
 80008be:	d000      	beq.n	80008c2 <__aeabi_fmul+0x10e>
 80008c0:	3404      	adds	r4, #4
 80008c2:	0123      	lsls	r3, r4, #4
 80008c4:	d503      	bpl.n	80008ce <__aeabi_fmul+0x11a>
 80008c6:	0002      	movs	r2, r0
 80008c8:	4b4c      	ldr	r3, [pc, #304]	; (80009fc <__aeabi_fmul+0x248>)
 80008ca:	3280      	adds	r2, #128	; 0x80
 80008cc:	401c      	ands	r4, r3
 80008ce:	2afe      	cmp	r2, #254	; 0xfe
 80008d0:	dcbf      	bgt.n	8000852 <__aeabi_fmul+0x9e>
 80008d2:	01a4      	lsls	r4, r4, #6
 80008d4:	0a64      	lsrs	r4, r4, #9
 80008d6:	b2d0      	uxtb	r0, r2
 80008d8:	e7b2      	b.n	8000840 <__aeabi_fmul+0x8c>
 80008da:	4643      	mov	r3, r8
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d13d      	bne.n	800095c <__aeabi_fmul+0x1a8>
 80008e0:	464a      	mov	r2, r9
 80008e2:	3301      	adds	r3, #1
 80008e4:	431a      	orrs	r2, r3
 80008e6:	4691      	mov	r9, r2
 80008e8:	469c      	mov	ip, r3
 80008ea:	e792      	b.n	8000812 <__aeabi_fmul+0x5e>
 80008ec:	2c00      	cmp	r4, #0
 80008ee:	d129      	bne.n	8000944 <__aeabi_fmul+0x190>
 80008f0:	2304      	movs	r3, #4
 80008f2:	4699      	mov	r9, r3
 80008f4:	3b03      	subs	r3, #3
 80008f6:	2500      	movs	r5, #0
 80008f8:	469a      	mov	sl, r3
 80008fa:	e774      	b.n	80007e6 <__aeabi_fmul+0x32>
 80008fc:	2c00      	cmp	r4, #0
 80008fe:	d11b      	bne.n	8000938 <__aeabi_fmul+0x184>
 8000900:	2308      	movs	r3, #8
 8000902:	4699      	mov	r9, r3
 8000904:	3b06      	subs	r3, #6
 8000906:	25ff      	movs	r5, #255	; 0xff
 8000908:	469a      	mov	sl, r3
 800090a:	e76c      	b.n	80007e6 <__aeabi_fmul+0x32>
 800090c:	4643      	mov	r3, r8
 800090e:	35ff      	adds	r5, #255	; 0xff
 8000910:	2b00      	cmp	r3, #0
 8000912:	d10b      	bne.n	800092c <__aeabi_fmul+0x178>
 8000914:	2302      	movs	r3, #2
 8000916:	464a      	mov	r2, r9
 8000918:	431a      	orrs	r2, r3
 800091a:	4691      	mov	r9, r2
 800091c:	469c      	mov	ip, r3
 800091e:	e778      	b.n	8000812 <__aeabi_fmul+0x5e>
 8000920:	4653      	mov	r3, sl
 8000922:	0031      	movs	r1, r6
 8000924:	2b02      	cmp	r3, #2
 8000926:	d000      	beq.n	800092a <__aeabi_fmul+0x176>
 8000928:	e783      	b.n	8000832 <__aeabi_fmul+0x7e>
 800092a:	e792      	b.n	8000852 <__aeabi_fmul+0x9e>
 800092c:	2303      	movs	r3, #3
 800092e:	464a      	mov	r2, r9
 8000930:	431a      	orrs	r2, r3
 8000932:	4691      	mov	r9, r2
 8000934:	469c      	mov	ip, r3
 8000936:	e76c      	b.n	8000812 <__aeabi_fmul+0x5e>
 8000938:	230c      	movs	r3, #12
 800093a:	4699      	mov	r9, r3
 800093c:	3b09      	subs	r3, #9
 800093e:	25ff      	movs	r5, #255	; 0xff
 8000940:	469a      	mov	sl, r3
 8000942:	e750      	b.n	80007e6 <__aeabi_fmul+0x32>
 8000944:	0020      	movs	r0, r4
 8000946:	f000 faf3 	bl	8000f30 <__clzsi2>
 800094a:	2576      	movs	r5, #118	; 0x76
 800094c:	1f43      	subs	r3, r0, #5
 800094e:	409c      	lsls	r4, r3
 8000950:	2300      	movs	r3, #0
 8000952:	426d      	negs	r5, r5
 8000954:	4699      	mov	r9, r3
 8000956:	469a      	mov	sl, r3
 8000958:	1a2d      	subs	r5, r5, r0
 800095a:	e744      	b.n	80007e6 <__aeabi_fmul+0x32>
 800095c:	4640      	mov	r0, r8
 800095e:	f000 fae7 	bl	8000f30 <__clzsi2>
 8000962:	4642      	mov	r2, r8
 8000964:	1f43      	subs	r3, r0, #5
 8000966:	409a      	lsls	r2, r3
 8000968:	2300      	movs	r3, #0
 800096a:	1a2d      	subs	r5, r5, r0
 800096c:	4690      	mov	r8, r2
 800096e:	469c      	mov	ip, r3
 8000970:	3d76      	subs	r5, #118	; 0x76
 8000972:	e74e      	b.n	8000812 <__aeabi_fmul+0x5e>
 8000974:	2480      	movs	r4, #128	; 0x80
 8000976:	2100      	movs	r1, #0
 8000978:	20ff      	movs	r0, #255	; 0xff
 800097a:	03e4      	lsls	r4, r4, #15
 800097c:	e760      	b.n	8000840 <__aeabi_fmul+0x8c>
 800097e:	2301      	movs	r3, #1
 8000980:	1a9b      	subs	r3, r3, r2
 8000982:	2b1b      	cmp	r3, #27
 8000984:	dd00      	ble.n	8000988 <__aeabi_fmul+0x1d4>
 8000986:	e759      	b.n	800083c <__aeabi_fmul+0x88>
 8000988:	0022      	movs	r2, r4
 800098a:	309e      	adds	r0, #158	; 0x9e
 800098c:	40da      	lsrs	r2, r3
 800098e:	4084      	lsls	r4, r0
 8000990:	0013      	movs	r3, r2
 8000992:	1e62      	subs	r2, r4, #1
 8000994:	4194      	sbcs	r4, r2
 8000996:	431c      	orrs	r4, r3
 8000998:	0763      	lsls	r3, r4, #29
 800099a:	d004      	beq.n	80009a6 <__aeabi_fmul+0x1f2>
 800099c:	230f      	movs	r3, #15
 800099e:	4023      	ands	r3, r4
 80009a0:	2b04      	cmp	r3, #4
 80009a2:	d000      	beq.n	80009a6 <__aeabi_fmul+0x1f2>
 80009a4:	3404      	adds	r4, #4
 80009a6:	0163      	lsls	r3, r4, #5
 80009a8:	d51a      	bpl.n	80009e0 <__aeabi_fmul+0x22c>
 80009aa:	2001      	movs	r0, #1
 80009ac:	2400      	movs	r4, #0
 80009ae:	e747      	b.n	8000840 <__aeabi_fmul+0x8c>
 80009b0:	2080      	movs	r0, #128	; 0x80
 80009b2:	03c0      	lsls	r0, r0, #15
 80009b4:	4204      	tst	r4, r0
 80009b6:	d009      	beq.n	80009cc <__aeabi_fmul+0x218>
 80009b8:	4643      	mov	r3, r8
 80009ba:	4203      	tst	r3, r0
 80009bc:	d106      	bne.n	80009cc <__aeabi_fmul+0x218>
 80009be:	4644      	mov	r4, r8
 80009c0:	4304      	orrs	r4, r0
 80009c2:	0264      	lsls	r4, r4, #9
 80009c4:	0039      	movs	r1, r7
 80009c6:	20ff      	movs	r0, #255	; 0xff
 80009c8:	0a64      	lsrs	r4, r4, #9
 80009ca:	e739      	b.n	8000840 <__aeabi_fmul+0x8c>
 80009cc:	2080      	movs	r0, #128	; 0x80
 80009ce:	03c0      	lsls	r0, r0, #15
 80009d0:	4304      	orrs	r4, r0
 80009d2:	0264      	lsls	r4, r4, #9
 80009d4:	0031      	movs	r1, r6
 80009d6:	20ff      	movs	r0, #255	; 0xff
 80009d8:	0a64      	lsrs	r4, r4, #9
 80009da:	e731      	b.n	8000840 <__aeabi_fmul+0x8c>
 80009dc:	0028      	movs	r0, r5
 80009de:	e765      	b.n	80008ac <__aeabi_fmul+0xf8>
 80009e0:	01a4      	lsls	r4, r4, #6
 80009e2:	2000      	movs	r0, #0
 80009e4:	0a64      	lsrs	r4, r4, #9
 80009e6:	e72b      	b.n	8000840 <__aeabi_fmul+0x8c>
 80009e8:	2080      	movs	r0, #128	; 0x80
 80009ea:	03c0      	lsls	r0, r0, #15
 80009ec:	4304      	orrs	r4, r0
 80009ee:	0264      	lsls	r4, r4, #9
 80009f0:	20ff      	movs	r0, #255	; 0xff
 80009f2:	0a64      	lsrs	r4, r4, #9
 80009f4:	e724      	b.n	8000840 <__aeabi_fmul+0x8c>
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	08004410 	.word	0x08004410
 80009fc:	f7ffffff 	.word	0xf7ffffff

08000a00 <__aeabi_fsub>:
 8000a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a02:	46ce      	mov	lr, r9
 8000a04:	4647      	mov	r7, r8
 8000a06:	0243      	lsls	r3, r0, #9
 8000a08:	0a5b      	lsrs	r3, r3, #9
 8000a0a:	024e      	lsls	r6, r1, #9
 8000a0c:	00da      	lsls	r2, r3, #3
 8000a0e:	4694      	mov	ip, r2
 8000a10:	0a72      	lsrs	r2, r6, #9
 8000a12:	4691      	mov	r9, r2
 8000a14:	0045      	lsls	r5, r0, #1
 8000a16:	004a      	lsls	r2, r1, #1
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	0e2d      	lsrs	r5, r5, #24
 8000a1c:	001f      	movs	r7, r3
 8000a1e:	0fc4      	lsrs	r4, r0, #31
 8000a20:	0e12      	lsrs	r2, r2, #24
 8000a22:	0fc9      	lsrs	r1, r1, #31
 8000a24:	09b6      	lsrs	r6, r6, #6
 8000a26:	2aff      	cmp	r2, #255	; 0xff
 8000a28:	d05b      	beq.n	8000ae2 <__aeabi_fsub+0xe2>
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	4041      	eors	r1, r0
 8000a2e:	428c      	cmp	r4, r1
 8000a30:	d039      	beq.n	8000aa6 <__aeabi_fsub+0xa6>
 8000a32:	1aa8      	subs	r0, r5, r2
 8000a34:	2800      	cmp	r0, #0
 8000a36:	dd5a      	ble.n	8000aee <__aeabi_fsub+0xee>
 8000a38:	2a00      	cmp	r2, #0
 8000a3a:	d06a      	beq.n	8000b12 <__aeabi_fsub+0x112>
 8000a3c:	2dff      	cmp	r5, #255	; 0xff
 8000a3e:	d100      	bne.n	8000a42 <__aeabi_fsub+0x42>
 8000a40:	e0d9      	b.n	8000bf6 <__aeabi_fsub+0x1f6>
 8000a42:	2280      	movs	r2, #128	; 0x80
 8000a44:	04d2      	lsls	r2, r2, #19
 8000a46:	4316      	orrs	r6, r2
 8000a48:	281b      	cmp	r0, #27
 8000a4a:	dc00      	bgt.n	8000a4e <__aeabi_fsub+0x4e>
 8000a4c:	e0e9      	b.n	8000c22 <__aeabi_fsub+0x222>
 8000a4e:	2001      	movs	r0, #1
 8000a50:	4663      	mov	r3, ip
 8000a52:	1a18      	subs	r0, r3, r0
 8000a54:	0143      	lsls	r3, r0, #5
 8000a56:	d400      	bmi.n	8000a5a <__aeabi_fsub+0x5a>
 8000a58:	e0b4      	b.n	8000bc4 <__aeabi_fsub+0x1c4>
 8000a5a:	0180      	lsls	r0, r0, #6
 8000a5c:	0987      	lsrs	r7, r0, #6
 8000a5e:	0038      	movs	r0, r7
 8000a60:	f000 fa66 	bl	8000f30 <__clzsi2>
 8000a64:	3805      	subs	r0, #5
 8000a66:	4087      	lsls	r7, r0
 8000a68:	4285      	cmp	r5, r0
 8000a6a:	dc00      	bgt.n	8000a6e <__aeabi_fsub+0x6e>
 8000a6c:	e0cc      	b.n	8000c08 <__aeabi_fsub+0x208>
 8000a6e:	1a2d      	subs	r5, r5, r0
 8000a70:	48b5      	ldr	r0, [pc, #724]	; (8000d48 <__aeabi_fsub+0x348>)
 8000a72:	4038      	ands	r0, r7
 8000a74:	0743      	lsls	r3, r0, #29
 8000a76:	d004      	beq.n	8000a82 <__aeabi_fsub+0x82>
 8000a78:	230f      	movs	r3, #15
 8000a7a:	4003      	ands	r3, r0
 8000a7c:	2b04      	cmp	r3, #4
 8000a7e:	d000      	beq.n	8000a82 <__aeabi_fsub+0x82>
 8000a80:	3004      	adds	r0, #4
 8000a82:	0143      	lsls	r3, r0, #5
 8000a84:	d400      	bmi.n	8000a88 <__aeabi_fsub+0x88>
 8000a86:	e0a0      	b.n	8000bca <__aeabi_fsub+0x1ca>
 8000a88:	1c6a      	adds	r2, r5, #1
 8000a8a:	2dfe      	cmp	r5, #254	; 0xfe
 8000a8c:	d100      	bne.n	8000a90 <__aeabi_fsub+0x90>
 8000a8e:	e08d      	b.n	8000bac <__aeabi_fsub+0x1ac>
 8000a90:	0180      	lsls	r0, r0, #6
 8000a92:	0a47      	lsrs	r7, r0, #9
 8000a94:	b2d2      	uxtb	r2, r2
 8000a96:	05d0      	lsls	r0, r2, #23
 8000a98:	4338      	orrs	r0, r7
 8000a9a:	07e4      	lsls	r4, r4, #31
 8000a9c:	4320      	orrs	r0, r4
 8000a9e:	bcc0      	pop	{r6, r7}
 8000aa0:	46b9      	mov	r9, r7
 8000aa2:	46b0      	mov	r8, r6
 8000aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000aa6:	1aa8      	subs	r0, r5, r2
 8000aa8:	4680      	mov	r8, r0
 8000aaa:	2800      	cmp	r0, #0
 8000aac:	dd45      	ble.n	8000b3a <__aeabi_fsub+0x13a>
 8000aae:	2a00      	cmp	r2, #0
 8000ab0:	d070      	beq.n	8000b94 <__aeabi_fsub+0x194>
 8000ab2:	2dff      	cmp	r5, #255	; 0xff
 8000ab4:	d100      	bne.n	8000ab8 <__aeabi_fsub+0xb8>
 8000ab6:	e09e      	b.n	8000bf6 <__aeabi_fsub+0x1f6>
 8000ab8:	2380      	movs	r3, #128	; 0x80
 8000aba:	04db      	lsls	r3, r3, #19
 8000abc:	431e      	orrs	r6, r3
 8000abe:	4643      	mov	r3, r8
 8000ac0:	2b1b      	cmp	r3, #27
 8000ac2:	dc00      	bgt.n	8000ac6 <__aeabi_fsub+0xc6>
 8000ac4:	e0d2      	b.n	8000c6c <__aeabi_fsub+0x26c>
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	4460      	add	r0, ip
 8000aca:	0143      	lsls	r3, r0, #5
 8000acc:	d57a      	bpl.n	8000bc4 <__aeabi_fsub+0x1c4>
 8000ace:	3501      	adds	r5, #1
 8000ad0:	2dff      	cmp	r5, #255	; 0xff
 8000ad2:	d06b      	beq.n	8000bac <__aeabi_fsub+0x1ac>
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	4a9d      	ldr	r2, [pc, #628]	; (8000d4c <__aeabi_fsub+0x34c>)
 8000ad8:	4003      	ands	r3, r0
 8000ada:	0840      	lsrs	r0, r0, #1
 8000adc:	4010      	ands	r0, r2
 8000ade:	4318      	orrs	r0, r3
 8000ae0:	e7c8      	b.n	8000a74 <__aeabi_fsub+0x74>
 8000ae2:	2e00      	cmp	r6, #0
 8000ae4:	d020      	beq.n	8000b28 <__aeabi_fsub+0x128>
 8000ae6:	428c      	cmp	r4, r1
 8000ae8:	d023      	beq.n	8000b32 <__aeabi_fsub+0x132>
 8000aea:	0028      	movs	r0, r5
 8000aec:	38ff      	subs	r0, #255	; 0xff
 8000aee:	2800      	cmp	r0, #0
 8000af0:	d039      	beq.n	8000b66 <__aeabi_fsub+0x166>
 8000af2:	1b57      	subs	r7, r2, r5
 8000af4:	2d00      	cmp	r5, #0
 8000af6:	d000      	beq.n	8000afa <__aeabi_fsub+0xfa>
 8000af8:	e09d      	b.n	8000c36 <__aeabi_fsub+0x236>
 8000afa:	4663      	mov	r3, ip
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d100      	bne.n	8000b02 <__aeabi_fsub+0x102>
 8000b00:	e0db      	b.n	8000cba <__aeabi_fsub+0x2ba>
 8000b02:	1e7b      	subs	r3, r7, #1
 8000b04:	2f01      	cmp	r7, #1
 8000b06:	d100      	bne.n	8000b0a <__aeabi_fsub+0x10a>
 8000b08:	e10d      	b.n	8000d26 <__aeabi_fsub+0x326>
 8000b0a:	2fff      	cmp	r7, #255	; 0xff
 8000b0c:	d071      	beq.n	8000bf2 <__aeabi_fsub+0x1f2>
 8000b0e:	001f      	movs	r7, r3
 8000b10:	e098      	b.n	8000c44 <__aeabi_fsub+0x244>
 8000b12:	2e00      	cmp	r6, #0
 8000b14:	d100      	bne.n	8000b18 <__aeabi_fsub+0x118>
 8000b16:	e0a7      	b.n	8000c68 <__aeabi_fsub+0x268>
 8000b18:	1e42      	subs	r2, r0, #1
 8000b1a:	2801      	cmp	r0, #1
 8000b1c:	d100      	bne.n	8000b20 <__aeabi_fsub+0x120>
 8000b1e:	e0e6      	b.n	8000cee <__aeabi_fsub+0x2ee>
 8000b20:	28ff      	cmp	r0, #255	; 0xff
 8000b22:	d068      	beq.n	8000bf6 <__aeabi_fsub+0x1f6>
 8000b24:	0010      	movs	r0, r2
 8000b26:	e78f      	b.n	8000a48 <__aeabi_fsub+0x48>
 8000b28:	2001      	movs	r0, #1
 8000b2a:	4041      	eors	r1, r0
 8000b2c:	42a1      	cmp	r1, r4
 8000b2e:	d000      	beq.n	8000b32 <__aeabi_fsub+0x132>
 8000b30:	e77f      	b.n	8000a32 <__aeabi_fsub+0x32>
 8000b32:	20ff      	movs	r0, #255	; 0xff
 8000b34:	4240      	negs	r0, r0
 8000b36:	4680      	mov	r8, r0
 8000b38:	44a8      	add	r8, r5
 8000b3a:	4640      	mov	r0, r8
 8000b3c:	2800      	cmp	r0, #0
 8000b3e:	d038      	beq.n	8000bb2 <__aeabi_fsub+0x1b2>
 8000b40:	1b51      	subs	r1, r2, r5
 8000b42:	2d00      	cmp	r5, #0
 8000b44:	d100      	bne.n	8000b48 <__aeabi_fsub+0x148>
 8000b46:	e0ae      	b.n	8000ca6 <__aeabi_fsub+0x2a6>
 8000b48:	2aff      	cmp	r2, #255	; 0xff
 8000b4a:	d100      	bne.n	8000b4e <__aeabi_fsub+0x14e>
 8000b4c:	e0df      	b.n	8000d0e <__aeabi_fsub+0x30e>
 8000b4e:	2380      	movs	r3, #128	; 0x80
 8000b50:	4660      	mov	r0, ip
 8000b52:	04db      	lsls	r3, r3, #19
 8000b54:	4318      	orrs	r0, r3
 8000b56:	4684      	mov	ip, r0
 8000b58:	291b      	cmp	r1, #27
 8000b5a:	dc00      	bgt.n	8000b5e <__aeabi_fsub+0x15e>
 8000b5c:	e0d9      	b.n	8000d12 <__aeabi_fsub+0x312>
 8000b5e:	2001      	movs	r0, #1
 8000b60:	0015      	movs	r5, r2
 8000b62:	1980      	adds	r0, r0, r6
 8000b64:	e7b1      	b.n	8000aca <__aeabi_fsub+0xca>
 8000b66:	20fe      	movs	r0, #254	; 0xfe
 8000b68:	1c6a      	adds	r2, r5, #1
 8000b6a:	4210      	tst	r0, r2
 8000b6c:	d171      	bne.n	8000c52 <__aeabi_fsub+0x252>
 8000b6e:	2d00      	cmp	r5, #0
 8000b70:	d000      	beq.n	8000b74 <__aeabi_fsub+0x174>
 8000b72:	e0a6      	b.n	8000cc2 <__aeabi_fsub+0x2c2>
 8000b74:	4663      	mov	r3, ip
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d100      	bne.n	8000b7c <__aeabi_fsub+0x17c>
 8000b7a:	e0d9      	b.n	8000d30 <__aeabi_fsub+0x330>
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d100      	bne.n	8000b84 <__aeabi_fsub+0x184>
 8000b82:	e788      	b.n	8000a96 <__aeabi_fsub+0x96>
 8000b84:	1b98      	subs	r0, r3, r6
 8000b86:	0143      	lsls	r3, r0, #5
 8000b88:	d400      	bmi.n	8000b8c <__aeabi_fsub+0x18c>
 8000b8a:	e0e1      	b.n	8000d50 <__aeabi_fsub+0x350>
 8000b8c:	4663      	mov	r3, ip
 8000b8e:	000c      	movs	r4, r1
 8000b90:	1af0      	subs	r0, r6, r3
 8000b92:	e76f      	b.n	8000a74 <__aeabi_fsub+0x74>
 8000b94:	2e00      	cmp	r6, #0
 8000b96:	d100      	bne.n	8000b9a <__aeabi_fsub+0x19a>
 8000b98:	e0b7      	b.n	8000d0a <__aeabi_fsub+0x30a>
 8000b9a:	0002      	movs	r2, r0
 8000b9c:	3a01      	subs	r2, #1
 8000b9e:	2801      	cmp	r0, #1
 8000ba0:	d100      	bne.n	8000ba4 <__aeabi_fsub+0x1a4>
 8000ba2:	e09c      	b.n	8000cde <__aeabi_fsub+0x2de>
 8000ba4:	28ff      	cmp	r0, #255	; 0xff
 8000ba6:	d026      	beq.n	8000bf6 <__aeabi_fsub+0x1f6>
 8000ba8:	4690      	mov	r8, r2
 8000baa:	e788      	b.n	8000abe <__aeabi_fsub+0xbe>
 8000bac:	22ff      	movs	r2, #255	; 0xff
 8000bae:	2700      	movs	r7, #0
 8000bb0:	e771      	b.n	8000a96 <__aeabi_fsub+0x96>
 8000bb2:	20fe      	movs	r0, #254	; 0xfe
 8000bb4:	1c6a      	adds	r2, r5, #1
 8000bb6:	4210      	tst	r0, r2
 8000bb8:	d064      	beq.n	8000c84 <__aeabi_fsub+0x284>
 8000bba:	2aff      	cmp	r2, #255	; 0xff
 8000bbc:	d0f6      	beq.n	8000bac <__aeabi_fsub+0x1ac>
 8000bbe:	0015      	movs	r5, r2
 8000bc0:	4466      	add	r6, ip
 8000bc2:	0870      	lsrs	r0, r6, #1
 8000bc4:	0743      	lsls	r3, r0, #29
 8000bc6:	d000      	beq.n	8000bca <__aeabi_fsub+0x1ca>
 8000bc8:	e756      	b.n	8000a78 <__aeabi_fsub+0x78>
 8000bca:	08c3      	lsrs	r3, r0, #3
 8000bcc:	2dff      	cmp	r5, #255	; 0xff
 8000bce:	d012      	beq.n	8000bf6 <__aeabi_fsub+0x1f6>
 8000bd0:	025b      	lsls	r3, r3, #9
 8000bd2:	0a5f      	lsrs	r7, r3, #9
 8000bd4:	b2ea      	uxtb	r2, r5
 8000bd6:	e75e      	b.n	8000a96 <__aeabi_fsub+0x96>
 8000bd8:	4662      	mov	r2, ip
 8000bda:	2a00      	cmp	r2, #0
 8000bdc:	d100      	bne.n	8000be0 <__aeabi_fsub+0x1e0>
 8000bde:	e096      	b.n	8000d0e <__aeabi_fsub+0x30e>
 8000be0:	2e00      	cmp	r6, #0
 8000be2:	d008      	beq.n	8000bf6 <__aeabi_fsub+0x1f6>
 8000be4:	2280      	movs	r2, #128	; 0x80
 8000be6:	03d2      	lsls	r2, r2, #15
 8000be8:	4213      	tst	r3, r2
 8000bea:	d004      	beq.n	8000bf6 <__aeabi_fsub+0x1f6>
 8000bec:	4648      	mov	r0, r9
 8000bee:	4210      	tst	r0, r2
 8000bf0:	d101      	bne.n	8000bf6 <__aeabi_fsub+0x1f6>
 8000bf2:	000c      	movs	r4, r1
 8000bf4:	464b      	mov	r3, r9
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d0d8      	beq.n	8000bac <__aeabi_fsub+0x1ac>
 8000bfa:	2780      	movs	r7, #128	; 0x80
 8000bfc:	03ff      	lsls	r7, r7, #15
 8000bfe:	431f      	orrs	r7, r3
 8000c00:	027f      	lsls	r7, r7, #9
 8000c02:	22ff      	movs	r2, #255	; 0xff
 8000c04:	0a7f      	lsrs	r7, r7, #9
 8000c06:	e746      	b.n	8000a96 <__aeabi_fsub+0x96>
 8000c08:	2320      	movs	r3, #32
 8000c0a:	003a      	movs	r2, r7
 8000c0c:	1b45      	subs	r5, r0, r5
 8000c0e:	0038      	movs	r0, r7
 8000c10:	3501      	adds	r5, #1
 8000c12:	40ea      	lsrs	r2, r5
 8000c14:	1b5d      	subs	r5, r3, r5
 8000c16:	40a8      	lsls	r0, r5
 8000c18:	1e43      	subs	r3, r0, #1
 8000c1a:	4198      	sbcs	r0, r3
 8000c1c:	2500      	movs	r5, #0
 8000c1e:	4310      	orrs	r0, r2
 8000c20:	e728      	b.n	8000a74 <__aeabi_fsub+0x74>
 8000c22:	2320      	movs	r3, #32
 8000c24:	1a1b      	subs	r3, r3, r0
 8000c26:	0032      	movs	r2, r6
 8000c28:	409e      	lsls	r6, r3
 8000c2a:	40c2      	lsrs	r2, r0
 8000c2c:	0030      	movs	r0, r6
 8000c2e:	1e43      	subs	r3, r0, #1
 8000c30:	4198      	sbcs	r0, r3
 8000c32:	4310      	orrs	r0, r2
 8000c34:	e70c      	b.n	8000a50 <__aeabi_fsub+0x50>
 8000c36:	2aff      	cmp	r2, #255	; 0xff
 8000c38:	d0db      	beq.n	8000bf2 <__aeabi_fsub+0x1f2>
 8000c3a:	2380      	movs	r3, #128	; 0x80
 8000c3c:	4660      	mov	r0, ip
 8000c3e:	04db      	lsls	r3, r3, #19
 8000c40:	4318      	orrs	r0, r3
 8000c42:	4684      	mov	ip, r0
 8000c44:	2f1b      	cmp	r7, #27
 8000c46:	dd56      	ble.n	8000cf6 <__aeabi_fsub+0x2f6>
 8000c48:	2001      	movs	r0, #1
 8000c4a:	000c      	movs	r4, r1
 8000c4c:	0015      	movs	r5, r2
 8000c4e:	1a30      	subs	r0, r6, r0
 8000c50:	e700      	b.n	8000a54 <__aeabi_fsub+0x54>
 8000c52:	4663      	mov	r3, ip
 8000c54:	1b9f      	subs	r7, r3, r6
 8000c56:	017b      	lsls	r3, r7, #5
 8000c58:	d43d      	bmi.n	8000cd6 <__aeabi_fsub+0x2d6>
 8000c5a:	2f00      	cmp	r7, #0
 8000c5c:	d000      	beq.n	8000c60 <__aeabi_fsub+0x260>
 8000c5e:	e6fe      	b.n	8000a5e <__aeabi_fsub+0x5e>
 8000c60:	2400      	movs	r4, #0
 8000c62:	2200      	movs	r2, #0
 8000c64:	2700      	movs	r7, #0
 8000c66:	e716      	b.n	8000a96 <__aeabi_fsub+0x96>
 8000c68:	0005      	movs	r5, r0
 8000c6a:	e7af      	b.n	8000bcc <__aeabi_fsub+0x1cc>
 8000c6c:	0032      	movs	r2, r6
 8000c6e:	4643      	mov	r3, r8
 8000c70:	4641      	mov	r1, r8
 8000c72:	40da      	lsrs	r2, r3
 8000c74:	2320      	movs	r3, #32
 8000c76:	1a5b      	subs	r3, r3, r1
 8000c78:	409e      	lsls	r6, r3
 8000c7a:	0030      	movs	r0, r6
 8000c7c:	1e43      	subs	r3, r0, #1
 8000c7e:	4198      	sbcs	r0, r3
 8000c80:	4310      	orrs	r0, r2
 8000c82:	e721      	b.n	8000ac8 <__aeabi_fsub+0xc8>
 8000c84:	2d00      	cmp	r5, #0
 8000c86:	d1a7      	bne.n	8000bd8 <__aeabi_fsub+0x1d8>
 8000c88:	4663      	mov	r3, ip
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d059      	beq.n	8000d42 <__aeabi_fsub+0x342>
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2e00      	cmp	r6, #0
 8000c92:	d100      	bne.n	8000c96 <__aeabi_fsub+0x296>
 8000c94:	e6ff      	b.n	8000a96 <__aeabi_fsub+0x96>
 8000c96:	0030      	movs	r0, r6
 8000c98:	4460      	add	r0, ip
 8000c9a:	0143      	lsls	r3, r0, #5
 8000c9c:	d592      	bpl.n	8000bc4 <__aeabi_fsub+0x1c4>
 8000c9e:	4b2a      	ldr	r3, [pc, #168]	; (8000d48 <__aeabi_fsub+0x348>)
 8000ca0:	3501      	adds	r5, #1
 8000ca2:	4018      	ands	r0, r3
 8000ca4:	e78e      	b.n	8000bc4 <__aeabi_fsub+0x1c4>
 8000ca6:	4663      	mov	r3, ip
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d047      	beq.n	8000d3c <__aeabi_fsub+0x33c>
 8000cac:	1e4b      	subs	r3, r1, #1
 8000cae:	2901      	cmp	r1, #1
 8000cb0:	d015      	beq.n	8000cde <__aeabi_fsub+0x2de>
 8000cb2:	29ff      	cmp	r1, #255	; 0xff
 8000cb4:	d02b      	beq.n	8000d0e <__aeabi_fsub+0x30e>
 8000cb6:	0019      	movs	r1, r3
 8000cb8:	e74e      	b.n	8000b58 <__aeabi_fsub+0x158>
 8000cba:	000c      	movs	r4, r1
 8000cbc:	464b      	mov	r3, r9
 8000cbe:	003d      	movs	r5, r7
 8000cc0:	e784      	b.n	8000bcc <__aeabi_fsub+0x1cc>
 8000cc2:	4662      	mov	r2, ip
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	d18b      	bne.n	8000be0 <__aeabi_fsub+0x1e0>
 8000cc8:	2e00      	cmp	r6, #0
 8000cca:	d192      	bne.n	8000bf2 <__aeabi_fsub+0x1f2>
 8000ccc:	2780      	movs	r7, #128	; 0x80
 8000cce:	2400      	movs	r4, #0
 8000cd0:	22ff      	movs	r2, #255	; 0xff
 8000cd2:	03ff      	lsls	r7, r7, #15
 8000cd4:	e6df      	b.n	8000a96 <__aeabi_fsub+0x96>
 8000cd6:	4663      	mov	r3, ip
 8000cd8:	000c      	movs	r4, r1
 8000cda:	1af7      	subs	r7, r6, r3
 8000cdc:	e6bf      	b.n	8000a5e <__aeabi_fsub+0x5e>
 8000cde:	0030      	movs	r0, r6
 8000ce0:	4460      	add	r0, ip
 8000ce2:	2501      	movs	r5, #1
 8000ce4:	0143      	lsls	r3, r0, #5
 8000ce6:	d400      	bmi.n	8000cea <__aeabi_fsub+0x2ea>
 8000ce8:	e76c      	b.n	8000bc4 <__aeabi_fsub+0x1c4>
 8000cea:	2502      	movs	r5, #2
 8000cec:	e6f2      	b.n	8000ad4 <__aeabi_fsub+0xd4>
 8000cee:	4663      	mov	r3, ip
 8000cf0:	2501      	movs	r5, #1
 8000cf2:	1b98      	subs	r0, r3, r6
 8000cf4:	e6ae      	b.n	8000a54 <__aeabi_fsub+0x54>
 8000cf6:	2320      	movs	r3, #32
 8000cf8:	4664      	mov	r4, ip
 8000cfa:	4660      	mov	r0, ip
 8000cfc:	40fc      	lsrs	r4, r7
 8000cfe:	1bdf      	subs	r7, r3, r7
 8000d00:	40b8      	lsls	r0, r7
 8000d02:	1e43      	subs	r3, r0, #1
 8000d04:	4198      	sbcs	r0, r3
 8000d06:	4320      	orrs	r0, r4
 8000d08:	e79f      	b.n	8000c4a <__aeabi_fsub+0x24a>
 8000d0a:	0005      	movs	r5, r0
 8000d0c:	e75e      	b.n	8000bcc <__aeabi_fsub+0x1cc>
 8000d0e:	464b      	mov	r3, r9
 8000d10:	e771      	b.n	8000bf6 <__aeabi_fsub+0x1f6>
 8000d12:	2320      	movs	r3, #32
 8000d14:	4665      	mov	r5, ip
 8000d16:	4660      	mov	r0, ip
 8000d18:	40cd      	lsrs	r5, r1
 8000d1a:	1a59      	subs	r1, r3, r1
 8000d1c:	4088      	lsls	r0, r1
 8000d1e:	1e43      	subs	r3, r0, #1
 8000d20:	4198      	sbcs	r0, r3
 8000d22:	4328      	orrs	r0, r5
 8000d24:	e71c      	b.n	8000b60 <__aeabi_fsub+0x160>
 8000d26:	4663      	mov	r3, ip
 8000d28:	000c      	movs	r4, r1
 8000d2a:	2501      	movs	r5, #1
 8000d2c:	1af0      	subs	r0, r6, r3
 8000d2e:	e691      	b.n	8000a54 <__aeabi_fsub+0x54>
 8000d30:	2e00      	cmp	r6, #0
 8000d32:	d095      	beq.n	8000c60 <__aeabi_fsub+0x260>
 8000d34:	000c      	movs	r4, r1
 8000d36:	464f      	mov	r7, r9
 8000d38:	2200      	movs	r2, #0
 8000d3a:	e6ac      	b.n	8000a96 <__aeabi_fsub+0x96>
 8000d3c:	464b      	mov	r3, r9
 8000d3e:	000d      	movs	r5, r1
 8000d40:	e744      	b.n	8000bcc <__aeabi_fsub+0x1cc>
 8000d42:	464f      	mov	r7, r9
 8000d44:	2200      	movs	r2, #0
 8000d46:	e6a6      	b.n	8000a96 <__aeabi_fsub+0x96>
 8000d48:	fbffffff 	.word	0xfbffffff
 8000d4c:	7dffffff 	.word	0x7dffffff
 8000d50:	2800      	cmp	r0, #0
 8000d52:	d000      	beq.n	8000d56 <__aeabi_fsub+0x356>
 8000d54:	e736      	b.n	8000bc4 <__aeabi_fsub+0x1c4>
 8000d56:	2400      	movs	r4, #0
 8000d58:	2700      	movs	r7, #0
 8000d5a:	e69c      	b.n	8000a96 <__aeabi_fsub+0x96>

08000d5c <__aeabi_f2iz>:
 8000d5c:	0241      	lsls	r1, r0, #9
 8000d5e:	0042      	lsls	r2, r0, #1
 8000d60:	0fc3      	lsrs	r3, r0, #31
 8000d62:	0a49      	lsrs	r1, r1, #9
 8000d64:	2000      	movs	r0, #0
 8000d66:	0e12      	lsrs	r2, r2, #24
 8000d68:	2a7e      	cmp	r2, #126	; 0x7e
 8000d6a:	dd03      	ble.n	8000d74 <__aeabi_f2iz+0x18>
 8000d6c:	2a9d      	cmp	r2, #157	; 0x9d
 8000d6e:	dd02      	ble.n	8000d76 <__aeabi_f2iz+0x1a>
 8000d70:	4a09      	ldr	r2, [pc, #36]	; (8000d98 <__aeabi_f2iz+0x3c>)
 8000d72:	1898      	adds	r0, r3, r2
 8000d74:	4770      	bx	lr
 8000d76:	2080      	movs	r0, #128	; 0x80
 8000d78:	0400      	lsls	r0, r0, #16
 8000d7a:	4301      	orrs	r1, r0
 8000d7c:	2a95      	cmp	r2, #149	; 0x95
 8000d7e:	dc07      	bgt.n	8000d90 <__aeabi_f2iz+0x34>
 8000d80:	2096      	movs	r0, #150	; 0x96
 8000d82:	1a82      	subs	r2, r0, r2
 8000d84:	40d1      	lsrs	r1, r2
 8000d86:	4248      	negs	r0, r1
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d1f3      	bne.n	8000d74 <__aeabi_f2iz+0x18>
 8000d8c:	0008      	movs	r0, r1
 8000d8e:	e7f1      	b.n	8000d74 <__aeabi_f2iz+0x18>
 8000d90:	3a96      	subs	r2, #150	; 0x96
 8000d92:	4091      	lsls	r1, r2
 8000d94:	e7f7      	b.n	8000d86 <__aeabi_f2iz+0x2a>
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	7fffffff 	.word	0x7fffffff

08000d9c <__aeabi_i2f>:
 8000d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d9e:	2800      	cmp	r0, #0
 8000da0:	d013      	beq.n	8000dca <__aeabi_i2f+0x2e>
 8000da2:	17c3      	asrs	r3, r0, #31
 8000da4:	18c6      	adds	r6, r0, r3
 8000da6:	405e      	eors	r6, r3
 8000da8:	0fc4      	lsrs	r4, r0, #31
 8000daa:	0030      	movs	r0, r6
 8000dac:	f000 f8c0 	bl	8000f30 <__clzsi2>
 8000db0:	239e      	movs	r3, #158	; 0x9e
 8000db2:	0005      	movs	r5, r0
 8000db4:	1a1b      	subs	r3, r3, r0
 8000db6:	2b96      	cmp	r3, #150	; 0x96
 8000db8:	dc0f      	bgt.n	8000dda <__aeabi_i2f+0x3e>
 8000dba:	2808      	cmp	r0, #8
 8000dbc:	dd01      	ble.n	8000dc2 <__aeabi_i2f+0x26>
 8000dbe:	3d08      	subs	r5, #8
 8000dc0:	40ae      	lsls	r6, r5
 8000dc2:	0276      	lsls	r6, r6, #9
 8000dc4:	0a76      	lsrs	r6, r6, #9
 8000dc6:	b2d8      	uxtb	r0, r3
 8000dc8:	e002      	b.n	8000dd0 <__aeabi_i2f+0x34>
 8000dca:	2400      	movs	r4, #0
 8000dcc:	2000      	movs	r0, #0
 8000dce:	2600      	movs	r6, #0
 8000dd0:	05c0      	lsls	r0, r0, #23
 8000dd2:	4330      	orrs	r0, r6
 8000dd4:	07e4      	lsls	r4, r4, #31
 8000dd6:	4320      	orrs	r0, r4
 8000dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000dda:	2b99      	cmp	r3, #153	; 0x99
 8000ddc:	dd0c      	ble.n	8000df8 <__aeabi_i2f+0x5c>
 8000dde:	2205      	movs	r2, #5
 8000de0:	0031      	movs	r1, r6
 8000de2:	1a12      	subs	r2, r2, r0
 8000de4:	40d1      	lsrs	r1, r2
 8000de6:	000a      	movs	r2, r1
 8000de8:	0001      	movs	r1, r0
 8000dea:	0030      	movs	r0, r6
 8000dec:	311b      	adds	r1, #27
 8000dee:	4088      	lsls	r0, r1
 8000df0:	1e41      	subs	r1, r0, #1
 8000df2:	4188      	sbcs	r0, r1
 8000df4:	4302      	orrs	r2, r0
 8000df6:	0016      	movs	r6, r2
 8000df8:	2d05      	cmp	r5, #5
 8000dfa:	dc12      	bgt.n	8000e22 <__aeabi_i2f+0x86>
 8000dfc:	0031      	movs	r1, r6
 8000dfe:	4f0d      	ldr	r7, [pc, #52]	; (8000e34 <__aeabi_i2f+0x98>)
 8000e00:	4039      	ands	r1, r7
 8000e02:	0772      	lsls	r2, r6, #29
 8000e04:	d009      	beq.n	8000e1a <__aeabi_i2f+0x7e>
 8000e06:	200f      	movs	r0, #15
 8000e08:	4030      	ands	r0, r6
 8000e0a:	2804      	cmp	r0, #4
 8000e0c:	d005      	beq.n	8000e1a <__aeabi_i2f+0x7e>
 8000e0e:	3104      	adds	r1, #4
 8000e10:	014a      	lsls	r2, r1, #5
 8000e12:	d502      	bpl.n	8000e1a <__aeabi_i2f+0x7e>
 8000e14:	239f      	movs	r3, #159	; 0x9f
 8000e16:	4039      	ands	r1, r7
 8000e18:	1b5b      	subs	r3, r3, r5
 8000e1a:	0189      	lsls	r1, r1, #6
 8000e1c:	0a4e      	lsrs	r6, r1, #9
 8000e1e:	b2d8      	uxtb	r0, r3
 8000e20:	e7d6      	b.n	8000dd0 <__aeabi_i2f+0x34>
 8000e22:	1f6a      	subs	r2, r5, #5
 8000e24:	4096      	lsls	r6, r2
 8000e26:	0031      	movs	r1, r6
 8000e28:	4f02      	ldr	r7, [pc, #8]	; (8000e34 <__aeabi_i2f+0x98>)
 8000e2a:	4039      	ands	r1, r7
 8000e2c:	0772      	lsls	r2, r6, #29
 8000e2e:	d0f4      	beq.n	8000e1a <__aeabi_i2f+0x7e>
 8000e30:	e7e9      	b.n	8000e06 <__aeabi_i2f+0x6a>
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	fbffffff 	.word	0xfbffffff

08000e38 <__aeabi_ui2f>:
 8000e38:	b570      	push	{r4, r5, r6, lr}
 8000e3a:	1e05      	subs	r5, r0, #0
 8000e3c:	d00e      	beq.n	8000e5c <__aeabi_ui2f+0x24>
 8000e3e:	f000 f877 	bl	8000f30 <__clzsi2>
 8000e42:	239e      	movs	r3, #158	; 0x9e
 8000e44:	0004      	movs	r4, r0
 8000e46:	1a1b      	subs	r3, r3, r0
 8000e48:	2b96      	cmp	r3, #150	; 0x96
 8000e4a:	dc0c      	bgt.n	8000e66 <__aeabi_ui2f+0x2e>
 8000e4c:	2808      	cmp	r0, #8
 8000e4e:	dd01      	ble.n	8000e54 <__aeabi_ui2f+0x1c>
 8000e50:	3c08      	subs	r4, #8
 8000e52:	40a5      	lsls	r5, r4
 8000e54:	026d      	lsls	r5, r5, #9
 8000e56:	0a6d      	lsrs	r5, r5, #9
 8000e58:	b2d8      	uxtb	r0, r3
 8000e5a:	e001      	b.n	8000e60 <__aeabi_ui2f+0x28>
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	2500      	movs	r5, #0
 8000e60:	05c0      	lsls	r0, r0, #23
 8000e62:	4328      	orrs	r0, r5
 8000e64:	bd70      	pop	{r4, r5, r6, pc}
 8000e66:	2b99      	cmp	r3, #153	; 0x99
 8000e68:	dd09      	ble.n	8000e7e <__aeabi_ui2f+0x46>
 8000e6a:	0002      	movs	r2, r0
 8000e6c:	0029      	movs	r1, r5
 8000e6e:	321b      	adds	r2, #27
 8000e70:	4091      	lsls	r1, r2
 8000e72:	1e4a      	subs	r2, r1, #1
 8000e74:	4191      	sbcs	r1, r2
 8000e76:	2205      	movs	r2, #5
 8000e78:	1a12      	subs	r2, r2, r0
 8000e7a:	40d5      	lsrs	r5, r2
 8000e7c:	430d      	orrs	r5, r1
 8000e7e:	2c05      	cmp	r4, #5
 8000e80:	dc12      	bgt.n	8000ea8 <__aeabi_ui2f+0x70>
 8000e82:	0029      	movs	r1, r5
 8000e84:	4e0c      	ldr	r6, [pc, #48]	; (8000eb8 <__aeabi_ui2f+0x80>)
 8000e86:	4031      	ands	r1, r6
 8000e88:	076a      	lsls	r2, r5, #29
 8000e8a:	d009      	beq.n	8000ea0 <__aeabi_ui2f+0x68>
 8000e8c:	200f      	movs	r0, #15
 8000e8e:	4028      	ands	r0, r5
 8000e90:	2804      	cmp	r0, #4
 8000e92:	d005      	beq.n	8000ea0 <__aeabi_ui2f+0x68>
 8000e94:	3104      	adds	r1, #4
 8000e96:	014a      	lsls	r2, r1, #5
 8000e98:	d502      	bpl.n	8000ea0 <__aeabi_ui2f+0x68>
 8000e9a:	239f      	movs	r3, #159	; 0x9f
 8000e9c:	4031      	ands	r1, r6
 8000e9e:	1b1b      	subs	r3, r3, r4
 8000ea0:	0189      	lsls	r1, r1, #6
 8000ea2:	0a4d      	lsrs	r5, r1, #9
 8000ea4:	b2d8      	uxtb	r0, r3
 8000ea6:	e7db      	b.n	8000e60 <__aeabi_ui2f+0x28>
 8000ea8:	1f62      	subs	r2, r4, #5
 8000eaa:	4095      	lsls	r5, r2
 8000eac:	0029      	movs	r1, r5
 8000eae:	4e02      	ldr	r6, [pc, #8]	; (8000eb8 <__aeabi_ui2f+0x80>)
 8000eb0:	4031      	ands	r1, r6
 8000eb2:	076a      	lsls	r2, r5, #29
 8000eb4:	d0f4      	beq.n	8000ea0 <__aeabi_ui2f+0x68>
 8000eb6:	e7e9      	b.n	8000e8c <__aeabi_ui2f+0x54>
 8000eb8:	fbffffff 	.word	0xfbffffff

08000ebc <__aeabi_cfrcmple>:
 8000ebc:	4684      	mov	ip, r0
 8000ebe:	0008      	movs	r0, r1
 8000ec0:	4661      	mov	r1, ip
 8000ec2:	e7ff      	b.n	8000ec4 <__aeabi_cfcmpeq>

08000ec4 <__aeabi_cfcmpeq>:
 8000ec4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000ec6:	f000 f8bd 	bl	8001044 <__lesf2>
 8000eca:	2800      	cmp	r0, #0
 8000ecc:	d401      	bmi.n	8000ed2 <__aeabi_cfcmpeq+0xe>
 8000ece:	2100      	movs	r1, #0
 8000ed0:	42c8      	cmn	r0, r1
 8000ed2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000ed4 <__aeabi_fcmpeq>:
 8000ed4:	b510      	push	{r4, lr}
 8000ed6:	f000 f849 	bl	8000f6c <__eqsf2>
 8000eda:	4240      	negs	r0, r0
 8000edc:	3001      	adds	r0, #1
 8000ede:	bd10      	pop	{r4, pc}

08000ee0 <__aeabi_fcmplt>:
 8000ee0:	b510      	push	{r4, lr}
 8000ee2:	f000 f8af 	bl	8001044 <__lesf2>
 8000ee6:	2800      	cmp	r0, #0
 8000ee8:	db01      	blt.n	8000eee <__aeabi_fcmplt+0xe>
 8000eea:	2000      	movs	r0, #0
 8000eec:	bd10      	pop	{r4, pc}
 8000eee:	2001      	movs	r0, #1
 8000ef0:	bd10      	pop	{r4, pc}
 8000ef2:	46c0      	nop			; (mov r8, r8)

08000ef4 <__aeabi_fcmple>:
 8000ef4:	b510      	push	{r4, lr}
 8000ef6:	f000 f8a5 	bl	8001044 <__lesf2>
 8000efa:	2800      	cmp	r0, #0
 8000efc:	dd01      	ble.n	8000f02 <__aeabi_fcmple+0xe>
 8000efe:	2000      	movs	r0, #0
 8000f00:	bd10      	pop	{r4, pc}
 8000f02:	2001      	movs	r0, #1
 8000f04:	bd10      	pop	{r4, pc}
 8000f06:	46c0      	nop			; (mov r8, r8)

08000f08 <__aeabi_fcmpgt>:
 8000f08:	b510      	push	{r4, lr}
 8000f0a:	f000 f855 	bl	8000fb8 <__gesf2>
 8000f0e:	2800      	cmp	r0, #0
 8000f10:	dc01      	bgt.n	8000f16 <__aeabi_fcmpgt+0xe>
 8000f12:	2000      	movs	r0, #0
 8000f14:	bd10      	pop	{r4, pc}
 8000f16:	2001      	movs	r0, #1
 8000f18:	bd10      	pop	{r4, pc}
 8000f1a:	46c0      	nop			; (mov r8, r8)

08000f1c <__aeabi_fcmpge>:
 8000f1c:	b510      	push	{r4, lr}
 8000f1e:	f000 f84b 	bl	8000fb8 <__gesf2>
 8000f22:	2800      	cmp	r0, #0
 8000f24:	da01      	bge.n	8000f2a <__aeabi_fcmpge+0xe>
 8000f26:	2000      	movs	r0, #0
 8000f28:	bd10      	pop	{r4, pc}
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	bd10      	pop	{r4, pc}
 8000f2e:	46c0      	nop			; (mov r8, r8)

08000f30 <__clzsi2>:
 8000f30:	211c      	movs	r1, #28
 8000f32:	2301      	movs	r3, #1
 8000f34:	041b      	lsls	r3, r3, #16
 8000f36:	4298      	cmp	r0, r3
 8000f38:	d301      	bcc.n	8000f3e <__clzsi2+0xe>
 8000f3a:	0c00      	lsrs	r0, r0, #16
 8000f3c:	3910      	subs	r1, #16
 8000f3e:	0a1b      	lsrs	r3, r3, #8
 8000f40:	4298      	cmp	r0, r3
 8000f42:	d301      	bcc.n	8000f48 <__clzsi2+0x18>
 8000f44:	0a00      	lsrs	r0, r0, #8
 8000f46:	3908      	subs	r1, #8
 8000f48:	091b      	lsrs	r3, r3, #4
 8000f4a:	4298      	cmp	r0, r3
 8000f4c:	d301      	bcc.n	8000f52 <__clzsi2+0x22>
 8000f4e:	0900      	lsrs	r0, r0, #4
 8000f50:	3904      	subs	r1, #4
 8000f52:	a202      	add	r2, pc, #8	; (adr r2, 8000f5c <__clzsi2+0x2c>)
 8000f54:	5c10      	ldrb	r0, [r2, r0]
 8000f56:	1840      	adds	r0, r0, r1
 8000f58:	4770      	bx	lr
 8000f5a:	46c0      	nop			; (mov r8, r8)
 8000f5c:	02020304 	.word	0x02020304
 8000f60:	01010101 	.word	0x01010101
	...

08000f6c <__eqsf2>:
 8000f6c:	b570      	push	{r4, r5, r6, lr}
 8000f6e:	0042      	lsls	r2, r0, #1
 8000f70:	0245      	lsls	r5, r0, #9
 8000f72:	024e      	lsls	r6, r1, #9
 8000f74:	004c      	lsls	r4, r1, #1
 8000f76:	0fc3      	lsrs	r3, r0, #31
 8000f78:	0a6d      	lsrs	r5, r5, #9
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	0e12      	lsrs	r2, r2, #24
 8000f7e:	0a76      	lsrs	r6, r6, #9
 8000f80:	0e24      	lsrs	r4, r4, #24
 8000f82:	0fc9      	lsrs	r1, r1, #31
 8000f84:	2aff      	cmp	r2, #255	; 0xff
 8000f86:	d006      	beq.n	8000f96 <__eqsf2+0x2a>
 8000f88:	2cff      	cmp	r4, #255	; 0xff
 8000f8a:	d003      	beq.n	8000f94 <__eqsf2+0x28>
 8000f8c:	42a2      	cmp	r2, r4
 8000f8e:	d101      	bne.n	8000f94 <__eqsf2+0x28>
 8000f90:	42b5      	cmp	r5, r6
 8000f92:	d006      	beq.n	8000fa2 <__eqsf2+0x36>
 8000f94:	bd70      	pop	{r4, r5, r6, pc}
 8000f96:	2d00      	cmp	r5, #0
 8000f98:	d1fc      	bne.n	8000f94 <__eqsf2+0x28>
 8000f9a:	2cff      	cmp	r4, #255	; 0xff
 8000f9c:	d1fa      	bne.n	8000f94 <__eqsf2+0x28>
 8000f9e:	2e00      	cmp	r6, #0
 8000fa0:	d1f8      	bne.n	8000f94 <__eqsf2+0x28>
 8000fa2:	428b      	cmp	r3, r1
 8000fa4:	d006      	beq.n	8000fb4 <__eqsf2+0x48>
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	2a00      	cmp	r2, #0
 8000faa:	d1f3      	bne.n	8000f94 <__eqsf2+0x28>
 8000fac:	0028      	movs	r0, r5
 8000fae:	1e43      	subs	r3, r0, #1
 8000fb0:	4198      	sbcs	r0, r3
 8000fb2:	e7ef      	b.n	8000f94 <__eqsf2+0x28>
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	e7ed      	b.n	8000f94 <__eqsf2+0x28>

08000fb8 <__gesf2>:
 8000fb8:	b570      	push	{r4, r5, r6, lr}
 8000fba:	0042      	lsls	r2, r0, #1
 8000fbc:	0245      	lsls	r5, r0, #9
 8000fbe:	024e      	lsls	r6, r1, #9
 8000fc0:	004c      	lsls	r4, r1, #1
 8000fc2:	0fc3      	lsrs	r3, r0, #31
 8000fc4:	0a6d      	lsrs	r5, r5, #9
 8000fc6:	0e12      	lsrs	r2, r2, #24
 8000fc8:	0a76      	lsrs	r6, r6, #9
 8000fca:	0e24      	lsrs	r4, r4, #24
 8000fcc:	0fc8      	lsrs	r0, r1, #31
 8000fce:	2aff      	cmp	r2, #255	; 0xff
 8000fd0:	d01b      	beq.n	800100a <__gesf2+0x52>
 8000fd2:	2cff      	cmp	r4, #255	; 0xff
 8000fd4:	d00e      	beq.n	8000ff4 <__gesf2+0x3c>
 8000fd6:	2a00      	cmp	r2, #0
 8000fd8:	d11b      	bne.n	8001012 <__gesf2+0x5a>
 8000fda:	2c00      	cmp	r4, #0
 8000fdc:	d101      	bne.n	8000fe2 <__gesf2+0x2a>
 8000fde:	2e00      	cmp	r6, #0
 8000fe0:	d01c      	beq.n	800101c <__gesf2+0x64>
 8000fe2:	2d00      	cmp	r5, #0
 8000fe4:	d00c      	beq.n	8001000 <__gesf2+0x48>
 8000fe6:	4283      	cmp	r3, r0
 8000fe8:	d01c      	beq.n	8001024 <__gesf2+0x6c>
 8000fea:	2102      	movs	r1, #2
 8000fec:	1e58      	subs	r0, r3, #1
 8000fee:	4008      	ands	r0, r1
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	bd70      	pop	{r4, r5, r6, pc}
 8000ff4:	2e00      	cmp	r6, #0
 8000ff6:	d122      	bne.n	800103e <__gesf2+0x86>
 8000ff8:	2a00      	cmp	r2, #0
 8000ffa:	d1f4      	bne.n	8000fe6 <__gesf2+0x2e>
 8000ffc:	2d00      	cmp	r5, #0
 8000ffe:	d1f2      	bne.n	8000fe6 <__gesf2+0x2e>
 8001000:	2800      	cmp	r0, #0
 8001002:	d1f6      	bne.n	8000ff2 <__gesf2+0x3a>
 8001004:	2001      	movs	r0, #1
 8001006:	4240      	negs	r0, r0
 8001008:	e7f3      	b.n	8000ff2 <__gesf2+0x3a>
 800100a:	2d00      	cmp	r5, #0
 800100c:	d117      	bne.n	800103e <__gesf2+0x86>
 800100e:	2cff      	cmp	r4, #255	; 0xff
 8001010:	d0f0      	beq.n	8000ff4 <__gesf2+0x3c>
 8001012:	2c00      	cmp	r4, #0
 8001014:	d1e7      	bne.n	8000fe6 <__gesf2+0x2e>
 8001016:	2e00      	cmp	r6, #0
 8001018:	d1e5      	bne.n	8000fe6 <__gesf2+0x2e>
 800101a:	e7e6      	b.n	8000fea <__gesf2+0x32>
 800101c:	2000      	movs	r0, #0
 800101e:	2d00      	cmp	r5, #0
 8001020:	d0e7      	beq.n	8000ff2 <__gesf2+0x3a>
 8001022:	e7e2      	b.n	8000fea <__gesf2+0x32>
 8001024:	42a2      	cmp	r2, r4
 8001026:	dc05      	bgt.n	8001034 <__gesf2+0x7c>
 8001028:	dbea      	blt.n	8001000 <__gesf2+0x48>
 800102a:	42b5      	cmp	r5, r6
 800102c:	d802      	bhi.n	8001034 <__gesf2+0x7c>
 800102e:	d3e7      	bcc.n	8001000 <__gesf2+0x48>
 8001030:	2000      	movs	r0, #0
 8001032:	e7de      	b.n	8000ff2 <__gesf2+0x3a>
 8001034:	4243      	negs	r3, r0
 8001036:	4158      	adcs	r0, r3
 8001038:	0040      	lsls	r0, r0, #1
 800103a:	3801      	subs	r0, #1
 800103c:	e7d9      	b.n	8000ff2 <__gesf2+0x3a>
 800103e:	2002      	movs	r0, #2
 8001040:	4240      	negs	r0, r0
 8001042:	e7d6      	b.n	8000ff2 <__gesf2+0x3a>

08001044 <__lesf2>:
 8001044:	b570      	push	{r4, r5, r6, lr}
 8001046:	0042      	lsls	r2, r0, #1
 8001048:	0245      	lsls	r5, r0, #9
 800104a:	024e      	lsls	r6, r1, #9
 800104c:	004c      	lsls	r4, r1, #1
 800104e:	0fc3      	lsrs	r3, r0, #31
 8001050:	0a6d      	lsrs	r5, r5, #9
 8001052:	0e12      	lsrs	r2, r2, #24
 8001054:	0a76      	lsrs	r6, r6, #9
 8001056:	0e24      	lsrs	r4, r4, #24
 8001058:	0fc8      	lsrs	r0, r1, #31
 800105a:	2aff      	cmp	r2, #255	; 0xff
 800105c:	d00b      	beq.n	8001076 <__lesf2+0x32>
 800105e:	2cff      	cmp	r4, #255	; 0xff
 8001060:	d00d      	beq.n	800107e <__lesf2+0x3a>
 8001062:	2a00      	cmp	r2, #0
 8001064:	d11f      	bne.n	80010a6 <__lesf2+0x62>
 8001066:	2c00      	cmp	r4, #0
 8001068:	d116      	bne.n	8001098 <__lesf2+0x54>
 800106a:	2e00      	cmp	r6, #0
 800106c:	d114      	bne.n	8001098 <__lesf2+0x54>
 800106e:	2000      	movs	r0, #0
 8001070:	2d00      	cmp	r5, #0
 8001072:	d010      	beq.n	8001096 <__lesf2+0x52>
 8001074:	e009      	b.n	800108a <__lesf2+0x46>
 8001076:	2d00      	cmp	r5, #0
 8001078:	d10c      	bne.n	8001094 <__lesf2+0x50>
 800107a:	2cff      	cmp	r4, #255	; 0xff
 800107c:	d113      	bne.n	80010a6 <__lesf2+0x62>
 800107e:	2e00      	cmp	r6, #0
 8001080:	d108      	bne.n	8001094 <__lesf2+0x50>
 8001082:	2a00      	cmp	r2, #0
 8001084:	d008      	beq.n	8001098 <__lesf2+0x54>
 8001086:	4283      	cmp	r3, r0
 8001088:	d012      	beq.n	80010b0 <__lesf2+0x6c>
 800108a:	2102      	movs	r1, #2
 800108c:	1e58      	subs	r0, r3, #1
 800108e:	4008      	ands	r0, r1
 8001090:	3801      	subs	r0, #1
 8001092:	e000      	b.n	8001096 <__lesf2+0x52>
 8001094:	2002      	movs	r0, #2
 8001096:	bd70      	pop	{r4, r5, r6, pc}
 8001098:	2d00      	cmp	r5, #0
 800109a:	d1f4      	bne.n	8001086 <__lesf2+0x42>
 800109c:	2800      	cmp	r0, #0
 800109e:	d1fa      	bne.n	8001096 <__lesf2+0x52>
 80010a0:	2001      	movs	r0, #1
 80010a2:	4240      	negs	r0, r0
 80010a4:	e7f7      	b.n	8001096 <__lesf2+0x52>
 80010a6:	2c00      	cmp	r4, #0
 80010a8:	d1ed      	bne.n	8001086 <__lesf2+0x42>
 80010aa:	2e00      	cmp	r6, #0
 80010ac:	d1eb      	bne.n	8001086 <__lesf2+0x42>
 80010ae:	e7ec      	b.n	800108a <__lesf2+0x46>
 80010b0:	42a2      	cmp	r2, r4
 80010b2:	dc05      	bgt.n	80010c0 <__lesf2+0x7c>
 80010b4:	dbf2      	blt.n	800109c <__lesf2+0x58>
 80010b6:	42b5      	cmp	r5, r6
 80010b8:	d802      	bhi.n	80010c0 <__lesf2+0x7c>
 80010ba:	d3ef      	bcc.n	800109c <__lesf2+0x58>
 80010bc:	2000      	movs	r0, #0
 80010be:	e7ea      	b.n	8001096 <__lesf2+0x52>
 80010c0:	4243      	negs	r3, r0
 80010c2:	4158      	adcs	r0, r3
 80010c4:	0040      	lsls	r0, r0, #1
 80010c6:	3801      	subs	r0, #1
 80010c8:	e7e5      	b.n	8001096 <__lesf2+0x52>
 80010ca:	46c0      	nop			; (mov r8, r8)

080010cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010d0:	f001 fa2e 	bl	8002530 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d4:	f000 f85c 	bl	8001190 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d8:	f000 f90e 	bl	80012f8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80010dc:	f000 f8a0 	bl	8001220 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 80010e0:	4b28      	ldr	r3, [pc, #160]	; (8001184 <main+0xb8>)
 80010e2:	0018      	movs	r0, r3
 80010e4:	f001 fdb8 	bl	8002c58 <HAL_ADC_Start_IT>
  HAL_Delay(1500);
 80010e8:	4b27      	ldr	r3, [pc, #156]	; (8001188 <main+0xbc>)
 80010ea:	0018      	movs	r0, r3
 80010ec:	f001 faa6 	bl	800263c <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  Barrido1(2,60,2500);
 80010f0:	4b26      	ldr	r3, [pc, #152]	; (800118c <main+0xc0>)
 80010f2:	001a      	movs	r2, r3
 80010f4:	213c      	movs	r1, #60	; 0x3c
 80010f6:	2002      	movs	r0, #2
 80010f8:	f000 fae2 	bl	80016c0 <Barrido1>
	  Blink(3,2000);
 80010fc:	23fa      	movs	r3, #250	; 0xfa
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	0019      	movs	r1, r3
 8001102:	2003      	movs	r0, #3
 8001104:	f001 f8c4 	bl	8002290 <Blink>

	  ArmarIzquierda(2,30,2000);
 8001108:	23fa      	movs	r3, #250	; 0xfa
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	001a      	movs	r2, r3
 800110e:	211e      	movs	r1, #30
 8001110:	2002      	movs	r0, #2
 8001112:	f000 ffd7 	bl	80020c4 <ArmarIzquierda>
	  Blink(3,2000);
 8001116:	23fa      	movs	r3, #250	; 0xfa
 8001118:	00db      	lsls	r3, r3, #3
 800111a:	0019      	movs	r1, r3
 800111c:	2003      	movs	r0, #3
 800111e:	f001 f8b7 	bl	8002290 <Blink>

	  Girar(4,100);
 8001122:	2164      	movs	r1, #100	; 0x64
 8001124:	2004      	movs	r0, #4
 8001126:	f000 feb5 	bl	8001e94 <Girar>
	  Blink(4,2000);
 800112a:	23fa      	movs	r3, #250	; 0xfa
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	0019      	movs	r1, r3
 8001130:	2004      	movs	r0, #4
 8001132:	f001 f8ad 	bl	8002290 <Blink>

	  VolumenAbrir(2,30,2500);
 8001136:	4b15      	ldr	r3, [pc, #84]	; (800118c <main+0xc0>)
 8001138:	001a      	movs	r2, r3
 800113a:	211e      	movs	r1, #30
 800113c:	2002      	movs	r0, #2
 800113e:	f000 fef9 	bl	8001f34 <VolumenAbrir>
	  Blink(3,2000);
 8001142:	23fa      	movs	r3, #250	; 0xfa
 8001144:	00db      	lsls	r3, r3, #3
 8001146:	0019      	movs	r1, r3
 8001148:	2003      	movs	r0, #3
 800114a:	f001 f8a1 	bl	8002290 <Blink>

	  CerrarApagar(4,150,2000);
 800114e:	23fa      	movs	r3, #250	; 0xfa
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	001a      	movs	r2, r3
 8001154:	2196      	movs	r1, #150	; 0x96
 8001156:	2004      	movs	r0, #4
 8001158:	f000 fd22 	bl	8001ba0 <CerrarApagar>
	  Blink(3,2000);
 800115c:	23fa      	movs	r3, #250	; 0xfa
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	0019      	movs	r1, r3
 8001162:	2003      	movs	r0, #3
 8001164:	f001 f894 	bl	8002290 <Blink>

	  ArmarIzquierda(1,30,2000);
 8001168:	23fa      	movs	r3, #250	; 0xfa
 800116a:	00db      	lsls	r3, r3, #3
 800116c:	001a      	movs	r2, r3
 800116e:	211e      	movs	r1, #30
 8001170:	2001      	movs	r0, #1
 8001172:	f000 ffa7 	bl	80020c4 <ArmarIzquierda>
	  Blink(2,2000);
 8001176:	23fa      	movs	r3, #250	; 0xfa
 8001178:	00db      	lsls	r3, r3, #3
 800117a:	0019      	movs	r1, r3
 800117c:	2002      	movs	r0, #2
 800117e:	f001 f887 	bl	8002290 <Blink>
	  Barrido1(2,60,2500);
 8001182:	e7b5      	b.n	80010f0 <main+0x24>
 8001184:	2000002c 	.word	0x2000002c
 8001188:	000005dc 	.word	0x000005dc
 800118c:	000009c4 	.word	0x000009c4

08001190 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001190:	b590      	push	{r4, r7, lr}
 8001192:	b093      	sub	sp, #76	; 0x4c
 8001194:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001196:	2414      	movs	r4, #20
 8001198:	193b      	adds	r3, r7, r4
 800119a:	0018      	movs	r0, r3
 800119c:	2334      	movs	r3, #52	; 0x34
 800119e:	001a      	movs	r2, r3
 80011a0:	2100      	movs	r1, #0
 80011a2:	f003 f8e1 	bl	8004368 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a6:	1d3b      	adds	r3, r7, #4
 80011a8:	0018      	movs	r0, r3
 80011aa:	2310      	movs	r3, #16
 80011ac:	001a      	movs	r2, r3
 80011ae:	2100      	movs	r1, #0
 80011b0:	f003 f8da 	bl	8004368 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011b4:	2380      	movs	r3, #128	; 0x80
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	0018      	movs	r0, r3
 80011ba:	f002 fbd7 	bl	800396c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011be:	193b      	adds	r3, r7, r4
 80011c0:	2202      	movs	r2, #2
 80011c2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011c4:	193b      	adds	r3, r7, r4
 80011c6:	2280      	movs	r2, #128	; 0x80
 80011c8:	0052      	lsls	r2, r2, #1
 80011ca:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80011cc:	193b      	adds	r3, r7, r4
 80011ce:	2200      	movs	r2, #0
 80011d0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011d2:	193b      	adds	r3, r7, r4
 80011d4:	2240      	movs	r2, #64	; 0x40
 80011d6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011d8:	193b      	adds	r3, r7, r4
 80011da:	2200      	movs	r2, #0
 80011dc:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011de:	193b      	adds	r3, r7, r4
 80011e0:	0018      	movs	r0, r3
 80011e2:	f002 fc03 	bl	80039ec <HAL_RCC_OscConfig>
 80011e6:	1e03      	subs	r3, r0, #0
 80011e8:	d001      	beq.n	80011ee <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80011ea:	f001 f8d7 	bl	800239c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	2207      	movs	r2, #7
 80011f2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011f4:	1d3b      	adds	r3, r7, #4
 80011f6:	2200      	movs	r2, #0
 80011f8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001200:	1d3b      	adds	r3, r7, #4
 8001202:	2200      	movs	r2, #0
 8001204:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	2100      	movs	r1, #0
 800120a:	0018      	movs	r0, r3
 800120c:	f002 fefe 	bl	800400c <HAL_RCC_ClockConfig>
 8001210:	1e03      	subs	r3, r0, #0
 8001212:	d001      	beq.n	8001218 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001214:	f001 f8c2 	bl	800239c <Error_Handler>
  }
}
 8001218:	46c0      	nop			; (mov r8, r8)
 800121a:	46bd      	mov	sp, r7
 800121c:	b013      	add	sp, #76	; 0x4c
 800121e:	bd90      	pop	{r4, r7, pc}

08001220 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	0018      	movs	r0, r3
 800122a:	230c      	movs	r3, #12
 800122c:	001a      	movs	r2, r3
 800122e:	2100      	movs	r1, #0
 8001230:	f003 f89a 	bl	8004368 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001234:	4b2d      	ldr	r3, [pc, #180]	; (80012ec <MX_ADC1_Init+0xcc>)
 8001236:	4a2e      	ldr	r2, [pc, #184]	; (80012f0 <MX_ADC1_Init+0xd0>)
 8001238:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800123a:	4b2c      	ldr	r3, [pc, #176]	; (80012ec <MX_ADC1_Init+0xcc>)
 800123c:	2280      	movs	r2, #128	; 0x80
 800123e:	05d2      	lsls	r2, r2, #23
 8001240:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001242:	4b2a      	ldr	r3, [pc, #168]	; (80012ec <MX_ADC1_Init+0xcc>)
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001248:	4b28      	ldr	r3, [pc, #160]	; (80012ec <MX_ADC1_Init+0xcc>)
 800124a:	2200      	movs	r2, #0
 800124c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800124e:	4b27      	ldr	r3, [pc, #156]	; (80012ec <MX_ADC1_Init+0xcc>)
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001254:	4b25      	ldr	r3, [pc, #148]	; (80012ec <MX_ADC1_Init+0xcc>)
 8001256:	2204      	movs	r2, #4
 8001258:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800125a:	4b24      	ldr	r3, [pc, #144]	; (80012ec <MX_ADC1_Init+0xcc>)
 800125c:	2200      	movs	r2, #0
 800125e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001260:	4b22      	ldr	r3, [pc, #136]	; (80012ec <MX_ADC1_Init+0xcc>)
 8001262:	2200      	movs	r2, #0
 8001264:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001266:	4b21      	ldr	r3, [pc, #132]	; (80012ec <MX_ADC1_Init+0xcc>)
 8001268:	2200      	movs	r2, #0
 800126a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800126c:	4b1f      	ldr	r3, [pc, #124]	; (80012ec <MX_ADC1_Init+0xcc>)
 800126e:	2201      	movs	r2, #1
 8001270:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001272:	4b1e      	ldr	r3, [pc, #120]	; (80012ec <MX_ADC1_Init+0xcc>)
 8001274:	2220      	movs	r2, #32
 8001276:	2100      	movs	r1, #0
 8001278:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800127a:	4b1c      	ldr	r3, [pc, #112]	; (80012ec <MX_ADC1_Init+0xcc>)
 800127c:	2200      	movs	r2, #0
 800127e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001280:	4b1a      	ldr	r3, [pc, #104]	; (80012ec <MX_ADC1_Init+0xcc>)
 8001282:	2200      	movs	r2, #0
 8001284:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001286:	4b19      	ldr	r3, [pc, #100]	; (80012ec <MX_ADC1_Init+0xcc>)
 8001288:	222c      	movs	r2, #44	; 0x2c
 800128a:	2100      	movs	r1, #0
 800128c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800128e:	4b17      	ldr	r3, [pc, #92]	; (80012ec <MX_ADC1_Init+0xcc>)
 8001290:	2200      	movs	r2, #0
 8001292:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8001294:	4b15      	ldr	r3, [pc, #84]	; (80012ec <MX_ADC1_Init+0xcc>)
 8001296:	2207      	movs	r2, #7
 8001298:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 800129a:	4b14      	ldr	r3, [pc, #80]	; (80012ec <MX_ADC1_Init+0xcc>)
 800129c:	2207      	movs	r2, #7
 800129e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <MX_ADC1_Init+0xcc>)
 80012a2:	223c      	movs	r2, #60	; 0x3c
 80012a4:	2100      	movs	r1, #0
 80012a6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80012a8:	4b10      	ldr	r3, [pc, #64]	; (80012ec <MX_ADC1_Init+0xcc>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012ae:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <MX_ADC1_Init+0xcc>)
 80012b0:	0018      	movs	r0, r3
 80012b2:	f001 fb29 	bl	8002908 <HAL_ADC_Init>
 80012b6:	1e03      	subs	r3, r0, #0
 80012b8:	d001      	beq.n	80012be <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80012ba:	f001 f86f 	bl	800239c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	4a0c      	ldr	r2, [pc, #48]	; (80012f4 <MX_ADC1_Init+0xd4>)
 80012c2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	2200      	movs	r2, #0
 80012c8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80012ca:	1d3b      	adds	r3, r7, #4
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012d0:	1d3a      	adds	r2, r7, #4
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <MX_ADC1_Init+0xcc>)
 80012d4:	0011      	movs	r1, r2
 80012d6:	0018      	movs	r0, r3
 80012d8:	f001 fe6a 	bl	8002fb0 <HAL_ADC_ConfigChannel>
 80012dc:	1e03      	subs	r3, r0, #0
 80012de:	d001      	beq.n	80012e4 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80012e0:	f001 f85c 	bl	800239c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012e4:	46c0      	nop			; (mov r8, r8)
 80012e6:	46bd      	mov	sp, r7
 80012e8:	b004      	add	sp, #16
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	2000002c 	.word	0x2000002c
 80012f0:	40012400 	.word	0x40012400
 80012f4:	2c000800 	.word	0x2c000800

080012f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012f8:	b590      	push	{r4, r7, lr}
 80012fa:	b089      	sub	sp, #36	; 0x24
 80012fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fe:	240c      	movs	r4, #12
 8001300:	193b      	adds	r3, r7, r4
 8001302:	0018      	movs	r0, r3
 8001304:	2314      	movs	r3, #20
 8001306:	001a      	movs	r2, r3
 8001308:	2100      	movs	r1, #0
 800130a:	f003 f82d 	bl	8004368 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800130e:	4b39      	ldr	r3, [pc, #228]	; (80013f4 <MX_GPIO_Init+0xfc>)
 8001310:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001312:	4b38      	ldr	r3, [pc, #224]	; (80013f4 <MX_GPIO_Init+0xfc>)
 8001314:	2102      	movs	r1, #2
 8001316:	430a      	orrs	r2, r1
 8001318:	635a      	str	r2, [r3, #52]	; 0x34
 800131a:	4b36      	ldr	r3, [pc, #216]	; (80013f4 <MX_GPIO_Init+0xfc>)
 800131c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800131e:	2202      	movs	r2, #2
 8001320:	4013      	ands	r3, r2
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001326:	4b33      	ldr	r3, [pc, #204]	; (80013f4 <MX_GPIO_Init+0xfc>)
 8001328:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800132a:	4b32      	ldr	r3, [pc, #200]	; (80013f4 <MX_GPIO_Init+0xfc>)
 800132c:	2104      	movs	r1, #4
 800132e:	430a      	orrs	r2, r1
 8001330:	635a      	str	r2, [r3, #52]	; 0x34
 8001332:	4b30      	ldr	r3, [pc, #192]	; (80013f4 <MX_GPIO_Init+0xfc>)
 8001334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001336:	2204      	movs	r2, #4
 8001338:	4013      	ands	r3, r2
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800133e:	4b2d      	ldr	r3, [pc, #180]	; (80013f4 <MX_GPIO_Init+0xfc>)
 8001340:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001342:	4b2c      	ldr	r3, [pc, #176]	; (80013f4 <MX_GPIO_Init+0xfc>)
 8001344:	2101      	movs	r1, #1
 8001346:	430a      	orrs	r2, r1
 8001348:	635a      	str	r2, [r3, #52]	; 0x34
 800134a:	4b2a      	ldr	r3, [pc, #168]	; (80013f4 <MX_GPIO_Init+0xfc>)
 800134c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800134e:	2201      	movs	r2, #1
 8001350:	4013      	ands	r3, r2
 8001352:	603b      	str	r3, [r7, #0]
 8001354:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED12_Pin|LED13_Pin|LED14_Pin
 8001356:	4928      	ldr	r1, [pc, #160]	; (80013f8 <MX_GPIO_Init+0x100>)
 8001358:	4b28      	ldr	r3, [pc, #160]	; (80013fc <MX_GPIO_Init+0x104>)
 800135a:	2200      	movs	r2, #0
 800135c:	0018      	movs	r0, r3
 800135e:	f002 fae7 	bl	8003930 <HAL_GPIO_WritePin>
                          |LED22_Pin|LED23_Pin|LED24_Pin|LED25_Pin
                          |LED26_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_Pin|LED3_Pin|LED17_Pin, GPIO_PIN_RESET);
 8001362:	4927      	ldr	r1, [pc, #156]	; (8001400 <MX_GPIO_Init+0x108>)
 8001364:	4b27      	ldr	r3, [pc, #156]	; (8001404 <MX_GPIO_Init+0x10c>)
 8001366:	2200      	movs	r2, #0
 8001368:	0018      	movs	r0, r3
 800136a:	f002 fae1 	bl	8003930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin
 800136e:	4926      	ldr	r1, [pc, #152]	; (8001408 <MX_GPIO_Init+0x110>)
 8001370:	23a0      	movs	r3, #160	; 0xa0
 8001372:	05db      	lsls	r3, r3, #23
 8001374:	2200      	movs	r2, #0
 8001376:	0018      	movs	r0, r3
 8001378:	f002 fada 	bl	8003930 <HAL_GPIO_WritePin>
                          |LED20_Pin|LED21_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED1_Pin LED12_Pin LED13_Pin LED14_Pin
                           LED22_Pin LED23_Pin LED24_Pin LED25_Pin
                           LED26_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED12_Pin|LED13_Pin|LED14_Pin
 800137c:	193b      	adds	r3, r7, r4
 800137e:	4a1e      	ldr	r2, [pc, #120]	; (80013f8 <MX_GPIO_Init+0x100>)
 8001380:	601a      	str	r2, [r3, #0]
                          |LED22_Pin|LED23_Pin|LED24_Pin|LED25_Pin
                          |LED26_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001382:	193b      	adds	r3, r7, r4
 8001384:	2211      	movs	r2, #17
 8001386:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	193b      	adds	r3, r7, r4
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138e:	193b      	adds	r3, r7, r4
 8001390:	2200      	movs	r2, #0
 8001392:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001394:	193b      	adds	r3, r7, r4
 8001396:	4a19      	ldr	r2, [pc, #100]	; (80013fc <MX_GPIO_Init+0x104>)
 8001398:	0019      	movs	r1, r3
 800139a:	0010      	movs	r0, r2
 800139c:	f002 f964 	bl	8003668 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED3_Pin LED17_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin|LED17_Pin;
 80013a0:	193b      	adds	r3, r7, r4
 80013a2:	4a17      	ldr	r2, [pc, #92]	; (8001400 <MX_GPIO_Init+0x108>)
 80013a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80013a6:	193b      	adds	r3, r7, r4
 80013a8:	2211      	movs	r2, #17
 80013aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	193b      	adds	r3, r7, r4
 80013ae:	2200      	movs	r2, #0
 80013b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	193b      	adds	r3, r7, r4
 80013b4:	2200      	movs	r2, #0
 80013b6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b8:	193b      	adds	r3, r7, r4
 80013ba:	4a12      	ldr	r2, [pc, #72]	; (8001404 <MX_GPIO_Init+0x10c>)
 80013bc:	0019      	movs	r1, r3
 80013be:	0010      	movs	r0, r2
 80013c0:	f002 f952 	bl	8003668 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED5_Pin LED6_Pin LED7_Pin
                           LED8_Pin LED9_Pin LED10_Pin LED11_Pin
                           LED15_Pin LED16_Pin LED18_Pin LED19_Pin
                           LED20_Pin LED21_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin
 80013c4:	0021      	movs	r1, r4
 80013c6:	187b      	adds	r3, r7, r1
 80013c8:	4a0f      	ldr	r2, [pc, #60]	; (8001408 <MX_GPIO_Init+0x110>)
 80013ca:	601a      	str	r2, [r3, #0]
                          |LED8_Pin|LED9_Pin|LED10_Pin|LED11_Pin
                          |LED15_Pin|LED16_Pin|LED18_Pin|LED19_Pin
                          |LED20_Pin|LED21_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80013cc:	187b      	adds	r3, r7, r1
 80013ce:	2211      	movs	r2, #17
 80013d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	187b      	adds	r3, r7, r1
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d8:	187b      	adds	r3, r7, r1
 80013da:	2200      	movs	r2, #0
 80013dc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013de:	187a      	adds	r2, r7, r1
 80013e0:	23a0      	movs	r3, #160	; 0xa0
 80013e2:	05db      	lsls	r3, r3, #23
 80013e4:	0011      	movs	r1, r2
 80013e6:	0018      	movs	r0, r3
 80013e8:	f002 f93e 	bl	8003668 <HAL_GPIO_Init>

}
 80013ec:	46c0      	nop			; (mov r8, r8)
 80013ee:	46bd      	mov	sp, r7
 80013f0:	b009      	add	sp, #36	; 0x24
 80013f2:	bd90      	pop	{r4, r7, pc}
 80013f4:	40021000 	.word	0x40021000
 80013f8:	0000037f 	.word	0x0000037f
 80013fc:	50000400 	.word	0x50000400
 8001400:	0000c040 	.word	0x0000c040
 8001404:	50000800 	.word	0x50000800
 8001408:	00009fff 	.word	0x00009fff

0800140c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
	adc = HAL_ADC_GetValue(&hadc1);
 8001414:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <HAL_ADC_ConvCpltCallback+0x44>)
 8001416:	0018      	movs	r0, r3
 8001418:	f001 fc96 	bl	8002d48 <HAL_ADC_GetValue>
 800141c:	0003      	movs	r3, r0
 800141e:	b29a      	uxth	r2, r3
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <HAL_ADC_ConvCpltCallback+0x48>)
 8001422:	801a      	strh	r2, [r3, #0]
	vel = (float)adc/1023;
 8001424:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <HAL_ADC_ConvCpltCallback+0x48>)
 8001426:	881b      	ldrh	r3, [r3, #0]
 8001428:	0018      	movs	r0, r3
 800142a:	f7ff fd05 	bl	8000e38 <__aeabi_ui2f>
 800142e:	1c03      	adds	r3, r0, #0
 8001430:	4909      	ldr	r1, [pc, #36]	; (8001458 <HAL_ADC_ConvCpltCallback+0x4c>)
 8001432:	1c18      	adds	r0, r3, #0
 8001434:	f7ff f8a6 	bl	8000584 <__aeabi_fdiv>
 8001438:	1c03      	adds	r3, r0, #0
 800143a:	1c1a      	adds	r2, r3, #0
 800143c:	4b07      	ldr	r3, [pc, #28]	; (800145c <HAL_ADC_ConvCpltCallback+0x50>)
 800143e:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_IT(&hadc1);
 8001440:	4b03      	ldr	r3, [pc, #12]	; (8001450 <HAL_ADC_ConvCpltCallback+0x44>)
 8001442:	0018      	movs	r0, r3
 8001444:	f001 fc08 	bl	8002c58 <HAL_ADC_Start_IT>
}
 8001448:	46c0      	nop			; (mov r8, r8)
 800144a:	46bd      	mov	sp, r7
 800144c:	b002      	add	sp, #8
 800144e:	bd80      	pop	{r7, pc}
 8001450:	2000002c 	.word	0x2000002c
 8001454:	20000090 	.word	0x20000090
 8001458:	447fc000 	.word	0x447fc000
 800145c:	20000094 	.word	0x20000094

08001460 <Refresh_ADC_Value>:

float Refresh_ADC_Value(void){
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
	adc = HAL_ADC_GetValue(&hadc1);
 8001464:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <Refresh_ADC_Value+0x44>)
 8001466:	0018      	movs	r0, r3
 8001468:	f001 fc6e 	bl	8002d48 <HAL_ADC_GetValue>
 800146c:	0003      	movs	r3, r0
 800146e:	b29a      	uxth	r2, r3
 8001470:	4b0d      	ldr	r3, [pc, #52]	; (80014a8 <Refresh_ADC_Value+0x48>)
 8001472:	801a      	strh	r2, [r3, #0]
	vel = (float)adc/1023;
 8001474:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <Refresh_ADC_Value+0x48>)
 8001476:	881b      	ldrh	r3, [r3, #0]
 8001478:	0018      	movs	r0, r3
 800147a:	f7ff fcdd 	bl	8000e38 <__aeabi_ui2f>
 800147e:	1c03      	adds	r3, r0, #0
 8001480:	490a      	ldr	r1, [pc, #40]	; (80014ac <Refresh_ADC_Value+0x4c>)
 8001482:	1c18      	adds	r0, r3, #0
 8001484:	f7ff f87e 	bl	8000584 <__aeabi_fdiv>
 8001488:	1c03      	adds	r3, r0, #0
 800148a:	1c1a      	adds	r2, r3, #0
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <Refresh_ADC_Value+0x50>)
 800148e:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_IT(&hadc1);
 8001490:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <Refresh_ADC_Value+0x44>)
 8001492:	0018      	movs	r0, r3
 8001494:	f001 fbe0 	bl	8002c58 <HAL_ADC_Start_IT>
	return vel;
 8001498:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <Refresh_ADC_Value+0x50>)
 800149a:	681b      	ldr	r3, [r3, #0]
}
 800149c:	1c18      	adds	r0, r3, #0
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	2000002c 	.word	0x2000002c
 80014a8:	20000090 	.word	0x20000090
 80014ac:	447fc000 	.word	0x447fc000
 80014b0:	20000094 	.word	0x20000094

080014b4 <ControlLeds>:

void ControlLeds(uint8_t led, uint8_t state){
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	0002      	movs	r2, r0
 80014bc:	1dfb      	adds	r3, r7, #7
 80014be:	701a      	strb	r2, [r3, #0]
 80014c0:	1dbb      	adds	r3, r7, #6
 80014c2:	1c0a      	adds	r2, r1, #0
 80014c4:	701a      	strb	r2, [r3, #0]
	switch(led){
 80014c6:	1dfb      	adds	r3, r7, #7
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b1a      	cmp	r3, #26
 80014cc:	d900      	bls.n	80014d0 <ControlLeds+0x1c>
 80014ce:	e0ec      	b.n	80016aa <ControlLeds+0x1f6>
 80014d0:	009a      	lsls	r2, r3, #2
 80014d2:	4b78      	ldr	r3, [pc, #480]	; (80016b4 <ControlLeds+0x200>)
 80014d4:	18d3      	adds	r3, r2, r3
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	469f      	mov	pc, r3
		case 1:  L1(state); break;
 80014da:	1dbb      	adds	r3, r7, #6
 80014dc:	781a      	ldrb	r2, [r3, #0]
 80014de:	2380      	movs	r3, #128	; 0x80
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4875      	ldr	r0, [pc, #468]	; (80016b8 <ControlLeds+0x204>)
 80014e4:	0019      	movs	r1, r3
 80014e6:	f002 fa23 	bl	8003930 <HAL_GPIO_WritePin>
 80014ea:	e0de      	b.n	80016aa <ControlLeds+0x1f6>
		case 2:  L2(state); break;
 80014ec:	1dbb      	adds	r3, r7, #6
 80014ee:	781a      	ldrb	r2, [r3, #0]
 80014f0:	2380      	movs	r3, #128	; 0x80
 80014f2:	01db      	lsls	r3, r3, #7
 80014f4:	4871      	ldr	r0, [pc, #452]	; (80016bc <ControlLeds+0x208>)
 80014f6:	0019      	movs	r1, r3
 80014f8:	f002 fa1a 	bl	8003930 <HAL_GPIO_WritePin>
 80014fc:	e0d5      	b.n	80016aa <ControlLeds+0x1f6>
		case 3:  L3(state); break;
 80014fe:	1dbb      	adds	r3, r7, #6
 8001500:	781a      	ldrb	r2, [r3, #0]
 8001502:	2380      	movs	r3, #128	; 0x80
 8001504:	021b      	lsls	r3, r3, #8
 8001506:	486d      	ldr	r0, [pc, #436]	; (80016bc <ControlLeds+0x208>)
 8001508:	0019      	movs	r1, r3
 800150a:	f002 fa11 	bl	8003930 <HAL_GPIO_WritePin>
 800150e:	e0cc      	b.n	80016aa <ControlLeds+0x1f6>
		case 4:  L4(state); break;
 8001510:	1dbb      	adds	r3, r7, #6
 8001512:	781a      	ldrb	r2, [r3, #0]
 8001514:	23a0      	movs	r3, #160	; 0xa0
 8001516:	05db      	lsls	r3, r3, #23
 8001518:	2101      	movs	r1, #1
 800151a:	0018      	movs	r0, r3
 800151c:	f002 fa08 	bl	8003930 <HAL_GPIO_WritePin>
 8001520:	e0c3      	b.n	80016aa <ControlLeds+0x1f6>
		case 5:  L5(state); break;
 8001522:	1dbb      	adds	r3, r7, #6
 8001524:	781a      	ldrb	r2, [r3, #0]
 8001526:	23a0      	movs	r3, #160	; 0xa0
 8001528:	05db      	lsls	r3, r3, #23
 800152a:	2102      	movs	r1, #2
 800152c:	0018      	movs	r0, r3
 800152e:	f002 f9ff 	bl	8003930 <HAL_GPIO_WritePin>
 8001532:	e0ba      	b.n	80016aa <ControlLeds+0x1f6>
		case 6:  L6(state); break;
 8001534:	1dbb      	adds	r3, r7, #6
 8001536:	781a      	ldrb	r2, [r3, #0]
 8001538:	23a0      	movs	r3, #160	; 0xa0
 800153a:	05db      	lsls	r3, r3, #23
 800153c:	2104      	movs	r1, #4
 800153e:	0018      	movs	r0, r3
 8001540:	f002 f9f6 	bl	8003930 <HAL_GPIO_WritePin>
 8001544:	e0b1      	b.n	80016aa <ControlLeds+0x1f6>
		case 7:  L7(state); break;
 8001546:	1dbb      	adds	r3, r7, #6
 8001548:	781a      	ldrb	r2, [r3, #0]
 800154a:	23a0      	movs	r3, #160	; 0xa0
 800154c:	05db      	lsls	r3, r3, #23
 800154e:	2108      	movs	r1, #8
 8001550:	0018      	movs	r0, r3
 8001552:	f002 f9ed 	bl	8003930 <HAL_GPIO_WritePin>
 8001556:	e0a8      	b.n	80016aa <ControlLeds+0x1f6>
		case 8:  L8(state); break;
 8001558:	1dbb      	adds	r3, r7, #6
 800155a:	781a      	ldrb	r2, [r3, #0]
 800155c:	23a0      	movs	r3, #160	; 0xa0
 800155e:	05db      	lsls	r3, r3, #23
 8001560:	2110      	movs	r1, #16
 8001562:	0018      	movs	r0, r3
 8001564:	f002 f9e4 	bl	8003930 <HAL_GPIO_WritePin>
 8001568:	e09f      	b.n	80016aa <ControlLeds+0x1f6>
		case 9:  L9(state); break;
 800156a:	1dbb      	adds	r3, r7, #6
 800156c:	781a      	ldrb	r2, [r3, #0]
 800156e:	23a0      	movs	r3, #160	; 0xa0
 8001570:	05db      	lsls	r3, r3, #23
 8001572:	2120      	movs	r1, #32
 8001574:	0018      	movs	r0, r3
 8001576:	f002 f9db 	bl	8003930 <HAL_GPIO_WritePin>
 800157a:	e096      	b.n	80016aa <ControlLeds+0x1f6>
		case 10: L10(state);break;
 800157c:	1dbb      	adds	r3, r7, #6
 800157e:	781a      	ldrb	r2, [r3, #0]
 8001580:	23a0      	movs	r3, #160	; 0xa0
 8001582:	05db      	lsls	r3, r3, #23
 8001584:	2140      	movs	r1, #64	; 0x40
 8001586:	0018      	movs	r0, r3
 8001588:	f002 f9d2 	bl	8003930 <HAL_GPIO_WritePin>
 800158c:	e08d      	b.n	80016aa <ControlLeds+0x1f6>
		case 11: L11(state);break;
 800158e:	1dbb      	adds	r3, r7, #6
 8001590:	781a      	ldrb	r2, [r3, #0]
 8001592:	23a0      	movs	r3, #160	; 0xa0
 8001594:	05db      	lsls	r3, r3, #23
 8001596:	2180      	movs	r1, #128	; 0x80
 8001598:	0018      	movs	r0, r3
 800159a:	f002 f9c9 	bl	8003930 <HAL_GPIO_WritePin>
 800159e:	e084      	b.n	80016aa <ControlLeds+0x1f6>
		case 12: L12(state);break;
 80015a0:	1dbb      	adds	r3, r7, #6
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	4844      	ldr	r0, [pc, #272]	; (80016b8 <ControlLeds+0x204>)
 80015a6:	001a      	movs	r2, r3
 80015a8:	2101      	movs	r1, #1
 80015aa:	f002 f9c1 	bl	8003930 <HAL_GPIO_WritePin>
 80015ae:	e07c      	b.n	80016aa <ControlLeds+0x1f6>
		case 13: L13(state);break;
 80015b0:	1dbb      	adds	r3, r7, #6
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	4840      	ldr	r0, [pc, #256]	; (80016b8 <ControlLeds+0x204>)
 80015b6:	001a      	movs	r2, r3
 80015b8:	2102      	movs	r1, #2
 80015ba:	f002 f9b9 	bl	8003930 <HAL_GPIO_WritePin>
 80015be:	e074      	b.n	80016aa <ControlLeds+0x1f6>
		case 14: L14(state);break;
 80015c0:	1dbb      	adds	r3, r7, #6
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	483c      	ldr	r0, [pc, #240]	; (80016b8 <ControlLeds+0x204>)
 80015c6:	001a      	movs	r2, r3
 80015c8:	2104      	movs	r1, #4
 80015ca:	f002 f9b1 	bl	8003930 <HAL_GPIO_WritePin>
 80015ce:	e06c      	b.n	80016aa <ControlLeds+0x1f6>
		case 15: L15(state);break;
 80015d0:	1dbb      	adds	r3, r7, #6
 80015d2:	781a      	ldrb	r2, [r3, #0]
 80015d4:	2380      	movs	r3, #128	; 0x80
 80015d6:	0059      	lsls	r1, r3, #1
 80015d8:	23a0      	movs	r3, #160	; 0xa0
 80015da:	05db      	lsls	r3, r3, #23
 80015dc:	0018      	movs	r0, r3
 80015de:	f002 f9a7 	bl	8003930 <HAL_GPIO_WritePin>
 80015e2:	e062      	b.n	80016aa <ControlLeds+0x1f6>
		case 16: L16(state);break;
 80015e4:	1dbb      	adds	r3, r7, #6
 80015e6:	781a      	ldrb	r2, [r3, #0]
 80015e8:	2380      	movs	r3, #128	; 0x80
 80015ea:	0099      	lsls	r1, r3, #2
 80015ec:	23a0      	movs	r3, #160	; 0xa0
 80015ee:	05db      	lsls	r3, r3, #23
 80015f0:	0018      	movs	r0, r3
 80015f2:	f002 f99d 	bl	8003930 <HAL_GPIO_WritePin>
 80015f6:	e058      	b.n	80016aa <ControlLeds+0x1f6>
		case 17: L17(state);break;
 80015f8:	1dbb      	adds	r3, r7, #6
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	482f      	ldr	r0, [pc, #188]	; (80016bc <ControlLeds+0x208>)
 80015fe:	001a      	movs	r2, r3
 8001600:	2140      	movs	r1, #64	; 0x40
 8001602:	f002 f995 	bl	8003930 <HAL_GPIO_WritePin>
 8001606:	e050      	b.n	80016aa <ControlLeds+0x1f6>
		case 18: L18(state);break;
 8001608:	1dbb      	adds	r3, r7, #6
 800160a:	781a      	ldrb	r2, [r3, #0]
 800160c:	2380      	movs	r3, #128	; 0x80
 800160e:	00d9      	lsls	r1, r3, #3
 8001610:	23a0      	movs	r3, #160	; 0xa0
 8001612:	05db      	lsls	r3, r3, #23
 8001614:	0018      	movs	r0, r3
 8001616:	f002 f98b 	bl	8003930 <HAL_GPIO_WritePin>
 800161a:	e046      	b.n	80016aa <ControlLeds+0x1f6>
		case 19: L19(state);break;
 800161c:	1dbb      	adds	r3, r7, #6
 800161e:	781a      	ldrb	r2, [r3, #0]
 8001620:	2380      	movs	r3, #128	; 0x80
 8001622:	0119      	lsls	r1, r3, #4
 8001624:	23a0      	movs	r3, #160	; 0xa0
 8001626:	05db      	lsls	r3, r3, #23
 8001628:	0018      	movs	r0, r3
 800162a:	f002 f981 	bl	8003930 <HAL_GPIO_WritePin>
 800162e:	e03c      	b.n	80016aa <ControlLeds+0x1f6>
		case 20: L20(state);break;
 8001630:	1dbb      	adds	r3, r7, #6
 8001632:	781a      	ldrb	r2, [r3, #0]
 8001634:	2380      	movs	r3, #128	; 0x80
 8001636:	0159      	lsls	r1, r3, #5
 8001638:	23a0      	movs	r3, #160	; 0xa0
 800163a:	05db      	lsls	r3, r3, #23
 800163c:	0018      	movs	r0, r3
 800163e:	f002 f977 	bl	8003930 <HAL_GPIO_WritePin>
 8001642:	e032      	b.n	80016aa <ControlLeds+0x1f6>
		case 21: L21(state);break;
 8001644:	1dbb      	adds	r3, r7, #6
 8001646:	781a      	ldrb	r2, [r3, #0]
 8001648:	2380      	movs	r3, #128	; 0x80
 800164a:	0219      	lsls	r1, r3, #8
 800164c:	23a0      	movs	r3, #160	; 0xa0
 800164e:	05db      	lsls	r3, r3, #23
 8001650:	0018      	movs	r0, r3
 8001652:	f002 f96d 	bl	8003930 <HAL_GPIO_WritePin>
 8001656:	e028      	b.n	80016aa <ControlLeds+0x1f6>
		case 22: L22(state);break;
 8001658:	1dbb      	adds	r3, r7, #6
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	4816      	ldr	r0, [pc, #88]	; (80016b8 <ControlLeds+0x204>)
 800165e:	001a      	movs	r2, r3
 8001660:	2108      	movs	r1, #8
 8001662:	f002 f965 	bl	8003930 <HAL_GPIO_WritePin>
 8001666:	e020      	b.n	80016aa <ControlLeds+0x1f6>
		case 23: L23(state);break;
 8001668:	1dbb      	adds	r3, r7, #6
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	4812      	ldr	r0, [pc, #72]	; (80016b8 <ControlLeds+0x204>)
 800166e:	001a      	movs	r2, r3
 8001670:	2110      	movs	r1, #16
 8001672:	f002 f95d 	bl	8003930 <HAL_GPIO_WritePin>
 8001676:	e018      	b.n	80016aa <ControlLeds+0x1f6>
		case 24: L24(state);break;
 8001678:	1dbb      	adds	r3, r7, #6
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	480e      	ldr	r0, [pc, #56]	; (80016b8 <ControlLeds+0x204>)
 800167e:	001a      	movs	r2, r3
 8001680:	2120      	movs	r1, #32
 8001682:	f002 f955 	bl	8003930 <HAL_GPIO_WritePin>
 8001686:	e010      	b.n	80016aa <ControlLeds+0x1f6>
		case 25: L25(state);break;
 8001688:	1dbb      	adds	r3, r7, #6
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	480a      	ldr	r0, [pc, #40]	; (80016b8 <ControlLeds+0x204>)
 800168e:	001a      	movs	r2, r3
 8001690:	2140      	movs	r1, #64	; 0x40
 8001692:	f002 f94d 	bl	8003930 <HAL_GPIO_WritePin>
 8001696:	e008      	b.n	80016aa <ControlLeds+0x1f6>
		case 26: L26(state);break;
 8001698:	1dbb      	adds	r3, r7, #6
 800169a:	781a      	ldrb	r2, [r3, #0]
 800169c:	2380      	movs	r3, #128	; 0x80
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	4805      	ldr	r0, [pc, #20]	; (80016b8 <ControlLeds+0x204>)
 80016a2:	0019      	movs	r1, r3
 80016a4:	f002 f944 	bl	8003930 <HAL_GPIO_WritePin>
 80016a8:	46c0      	nop			; (mov r8, r8)
	}
}
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	46bd      	mov	sp, r7
 80016ae:	b002      	add	sp, #8
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	46c0      	nop			; (mov r8, r8)
 80016b4:	08004450 	.word	0x08004450
 80016b8:	50000400 	.word	0x50000400
 80016bc:	50000800 	.word	0x50000800

080016c0 <Barrido1>:

void Barrido1(uint8_t veces, uint16_t tiempo, uint16_t tiempo2){
 80016c0:	b5b0      	push	{r4, r5, r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	0004      	movs	r4, r0
 80016c8:	0008      	movs	r0, r1
 80016ca:	0011      	movs	r1, r2
 80016cc:	1dfb      	adds	r3, r7, #7
 80016ce:	1c22      	adds	r2, r4, #0
 80016d0:	701a      	strb	r2, [r3, #0]
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	1c02      	adds	r2, r0, #0
 80016d6:	801a      	strh	r2, [r3, #0]
 80016d8:	1cbb      	adds	r3, r7, #2
 80016da:	1c0a      	adds	r2, r1, #0
 80016dc:	801a      	strh	r2, [r3, #0]
	for(uint8_t v=0;v<veces;v++){
 80016de:	230f      	movs	r3, #15
 80016e0:	18fb      	adds	r3, r7, r3
 80016e2:	2200      	movs	r2, #0
 80016e4:	701a      	strb	r2, [r3, #0]
 80016e6:	e074      	b.n	80017d2 <Barrido1+0x112>
		for(uint8_t i=1; i<=cantLeds; i++){ControlLeds(i,1);HAL_Delay(tiempo*Refresh_ADC_Value());}
 80016e8:	230e      	movs	r3, #14
 80016ea:	18fb      	adds	r3, r7, r3
 80016ec:	2201      	movs	r2, #1
 80016ee:	701a      	strb	r2, [r3, #0]
 80016f0:	e020      	b.n	8001734 <Barrido1+0x74>
 80016f2:	250e      	movs	r5, #14
 80016f4:	197b      	adds	r3, r7, r5
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2101      	movs	r1, #1
 80016fa:	0018      	movs	r0, r3
 80016fc:	f7ff feda 	bl	80014b4 <ControlLeds>
 8001700:	1d3b      	adds	r3, r7, #4
 8001702:	881b      	ldrh	r3, [r3, #0]
 8001704:	0018      	movs	r0, r3
 8001706:	f7ff fb49 	bl	8000d9c <__aeabi_i2f>
 800170a:	1c04      	adds	r4, r0, #0
 800170c:	f7ff fea8 	bl	8001460 <Refresh_ADC_Value>
 8001710:	1c03      	adds	r3, r0, #0
 8001712:	1c19      	adds	r1, r3, #0
 8001714:	1c20      	adds	r0, r4, #0
 8001716:	f7ff f84d 	bl	80007b4 <__aeabi_fmul>
 800171a:	1c03      	adds	r3, r0, #0
 800171c:	1c18      	adds	r0, r3, #0
 800171e:	f7fe fd7b 	bl	8000218 <__aeabi_f2uiz>
 8001722:	0003      	movs	r3, r0
 8001724:	0018      	movs	r0, r3
 8001726:	f000 ff89 	bl	800263c <HAL_Delay>
 800172a:	197b      	adds	r3, r7, r5
 800172c:	781a      	ldrb	r2, [r3, #0]
 800172e:	197b      	adds	r3, r7, r5
 8001730:	3201      	adds	r2, #1
 8001732:	701a      	strb	r2, [r3, #0]
 8001734:	4b2d      	ldr	r3, [pc, #180]	; (80017ec <Barrido1+0x12c>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	220e      	movs	r2, #14
 800173a:	18ba      	adds	r2, r7, r2
 800173c:	7812      	ldrb	r2, [r2, #0]
 800173e:	429a      	cmp	r2, r3
 8001740:	d9d7      	bls.n	80016f2 <Barrido1+0x32>
		HAL_Delay(tiempo2*Refresh_ADC_Value());
 8001742:	1cbb      	adds	r3, r7, #2
 8001744:	881b      	ldrh	r3, [r3, #0]
 8001746:	0018      	movs	r0, r3
 8001748:	f7ff fb28 	bl	8000d9c <__aeabi_i2f>
 800174c:	1c04      	adds	r4, r0, #0
 800174e:	f7ff fe87 	bl	8001460 <Refresh_ADC_Value>
 8001752:	1c03      	adds	r3, r0, #0
 8001754:	1c19      	adds	r1, r3, #0
 8001756:	1c20      	adds	r0, r4, #0
 8001758:	f7ff f82c 	bl	80007b4 <__aeabi_fmul>
 800175c:	1c03      	adds	r3, r0, #0
 800175e:	1c18      	adds	r0, r3, #0
 8001760:	f7fe fd5a 	bl	8000218 <__aeabi_f2uiz>
 8001764:	0003      	movs	r3, r0
 8001766:	0018      	movs	r0, r3
 8001768:	f000 ff68 	bl	800263c <HAL_Delay>
		for(uint8_t i=1; i<=cantLeds; i++){ControlLeds(i,0);HAL_Delay(tiempo*Refresh_ADC_Value());}
 800176c:	230d      	movs	r3, #13
 800176e:	18fb      	adds	r3, r7, r3
 8001770:	2201      	movs	r2, #1
 8001772:	701a      	strb	r2, [r3, #0]
 8001774:	e020      	b.n	80017b8 <Barrido1+0xf8>
 8001776:	250d      	movs	r5, #13
 8001778:	197b      	adds	r3, r7, r5
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2100      	movs	r1, #0
 800177e:	0018      	movs	r0, r3
 8001780:	f7ff fe98 	bl	80014b4 <ControlLeds>
 8001784:	1d3b      	adds	r3, r7, #4
 8001786:	881b      	ldrh	r3, [r3, #0]
 8001788:	0018      	movs	r0, r3
 800178a:	f7ff fb07 	bl	8000d9c <__aeabi_i2f>
 800178e:	1c04      	adds	r4, r0, #0
 8001790:	f7ff fe66 	bl	8001460 <Refresh_ADC_Value>
 8001794:	1c03      	adds	r3, r0, #0
 8001796:	1c19      	adds	r1, r3, #0
 8001798:	1c20      	adds	r0, r4, #0
 800179a:	f7ff f80b 	bl	80007b4 <__aeabi_fmul>
 800179e:	1c03      	adds	r3, r0, #0
 80017a0:	1c18      	adds	r0, r3, #0
 80017a2:	f7fe fd39 	bl	8000218 <__aeabi_f2uiz>
 80017a6:	0003      	movs	r3, r0
 80017a8:	0018      	movs	r0, r3
 80017aa:	f000 ff47 	bl	800263c <HAL_Delay>
 80017ae:	197b      	adds	r3, r7, r5
 80017b0:	781a      	ldrb	r2, [r3, #0]
 80017b2:	197b      	adds	r3, r7, r5
 80017b4:	3201      	adds	r2, #1
 80017b6:	701a      	strb	r2, [r3, #0]
 80017b8:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <Barrido1+0x12c>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	220d      	movs	r2, #13
 80017be:	18ba      	adds	r2, r7, r2
 80017c0:	7812      	ldrb	r2, [r2, #0]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d9d7      	bls.n	8001776 <Barrido1+0xb6>
	for(uint8_t v=0;v<veces;v++){
 80017c6:	210f      	movs	r1, #15
 80017c8:	187b      	adds	r3, r7, r1
 80017ca:	781a      	ldrb	r2, [r3, #0]
 80017cc:	187b      	adds	r3, r7, r1
 80017ce:	3201      	adds	r2, #1
 80017d0:	701a      	strb	r2, [r3, #0]
 80017d2:	230f      	movs	r3, #15
 80017d4:	18fa      	adds	r2, r7, r3
 80017d6:	1dfb      	adds	r3, r7, #7
 80017d8:	7812      	ldrb	r2, [r2, #0]
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d383      	bcc.n	80016e8 <Barrido1+0x28>
	}
}
 80017e0:	46c0      	nop			; (mov r8, r8)
 80017e2:	46c0      	nop			; (mov r8, r8)
 80017e4:	46bd      	mov	sp, r7
 80017e6:	b004      	add	sp, #16
 80017e8:	bdb0      	pop	{r4, r5, r7, pc}
 80017ea:	46c0      	nop			; (mov r8, r8)
 80017ec:	20000000 	.word	0x20000000

080017f0 <Encender_1_Led_2>:
			ControlLeds(i,0);
		}
	}
}

void Encender_1_Led_2(uint8_t num_led){
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	0002      	movs	r2, r0
 80017f8:	1dfb      	adds	r3, r7, #7
 80017fa:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=1; i<=cantLeds; i++){
 80017fc:	230f      	movs	r3, #15
 80017fe:	18fb      	adds	r3, r7, r3
 8001800:	2201      	movs	r2, #1
 8001802:	701a      	strb	r2, [r3, #0]
 8001804:	e01a      	b.n	800183c <Encender_1_Led_2+0x4c>
		if(i<=num_led){
 8001806:	210f      	movs	r1, #15
 8001808:	187a      	adds	r2, r7, r1
 800180a:	1dfb      	adds	r3, r7, #7
 800180c:	7812      	ldrb	r2, [r2, #0]
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	429a      	cmp	r2, r3
 8001812:	d806      	bhi.n	8001822 <Encender_1_Led_2+0x32>
			ControlLeds(i,1);
 8001814:	187b      	adds	r3, r7, r1
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2101      	movs	r1, #1
 800181a:	0018      	movs	r0, r3
 800181c:	f7ff fe4a 	bl	80014b4 <ControlLeds>
 8001820:	e006      	b.n	8001830 <Encender_1_Led_2+0x40>
		}else{
			ControlLeds(i,0);
 8001822:	230f      	movs	r3, #15
 8001824:	18fb      	adds	r3, r7, r3
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2100      	movs	r1, #0
 800182a:	0018      	movs	r0, r3
 800182c:	f7ff fe42 	bl	80014b4 <ControlLeds>
	for(uint8_t i=1; i<=cantLeds; i++){
 8001830:	210f      	movs	r1, #15
 8001832:	187b      	adds	r3, r7, r1
 8001834:	781a      	ldrb	r2, [r3, #0]
 8001836:	187b      	adds	r3, r7, r1
 8001838:	3201      	adds	r2, #1
 800183a:	701a      	strb	r2, [r3, #0]
 800183c:	4b05      	ldr	r3, [pc, #20]	; (8001854 <Encender_1_Led_2+0x64>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	220f      	movs	r2, #15
 8001842:	18ba      	adds	r2, r7, r2
 8001844:	7812      	ldrb	r2, [r2, #0]
 8001846:	429a      	cmp	r2, r3
 8001848:	d9dd      	bls.n	8001806 <Encender_1_Led_2+0x16>
		}
	}
}
 800184a:	46c0      	nop			; (mov r8, r8)
 800184c:	46c0      	nop			; (mov r8, r8)
 800184e:	46bd      	mov	sp, r7
 8001850:	b004      	add	sp, #16
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20000000 	.word	0x20000000

08001858 <Encender_1_Led_4>:
			ControlLeds(i,0);
		}
	}
}

void Encender_1_Led_4(uint8_t num_led, uint8_t indice){
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	0002      	movs	r2, r0
 8001860:	1dfb      	adds	r3, r7, #7
 8001862:	701a      	strb	r2, [r3, #0]
 8001864:	1dbb      	adds	r3, r7, #6
 8001866:	1c0a      	adds	r2, r1, #0
 8001868:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=cantLeds;i>=indice;i--){
 800186a:	230f      	movs	r3, #15
 800186c:	18fb      	adds	r3, r7, r3
 800186e:	4a15      	ldr	r2, [pc, #84]	; (80018c4 <Encender_1_Led_4+0x6c>)
 8001870:	7812      	ldrb	r2, [r2, #0]
 8001872:	701a      	strb	r2, [r3, #0]
 8001874:	e01a      	b.n	80018ac <Encender_1_Led_4+0x54>
		if(i == num_led){
 8001876:	210f      	movs	r1, #15
 8001878:	187a      	adds	r2, r7, r1
 800187a:	1dfb      	adds	r3, r7, #7
 800187c:	7812      	ldrb	r2, [r2, #0]
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	429a      	cmp	r2, r3
 8001882:	d106      	bne.n	8001892 <Encender_1_Led_4+0x3a>
			ControlLeds(i,1);
 8001884:	187b      	adds	r3, r7, r1
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2101      	movs	r1, #1
 800188a:	0018      	movs	r0, r3
 800188c:	f7ff fe12 	bl	80014b4 <ControlLeds>
 8001890:	e006      	b.n	80018a0 <Encender_1_Led_4+0x48>
		}else{
			ControlLeds(i,0);
 8001892:	230f      	movs	r3, #15
 8001894:	18fb      	adds	r3, r7, r3
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2100      	movs	r1, #0
 800189a:	0018      	movs	r0, r3
 800189c:	f7ff fe0a 	bl	80014b4 <ControlLeds>
	for(uint8_t i=cantLeds;i>=indice;i--){
 80018a0:	210f      	movs	r1, #15
 80018a2:	187b      	adds	r3, r7, r1
 80018a4:	781a      	ldrb	r2, [r3, #0]
 80018a6:	187b      	adds	r3, r7, r1
 80018a8:	3a01      	subs	r2, #1
 80018aa:	701a      	strb	r2, [r3, #0]
 80018ac:	230f      	movs	r3, #15
 80018ae:	18fa      	adds	r2, r7, r3
 80018b0:	1dbb      	adds	r3, r7, #6
 80018b2:	7812      	ldrb	r2, [r2, #0]
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d2dd      	bcs.n	8001876 <Encender_1_Led_4+0x1e>
		}
	}
}
 80018ba:	46c0      	nop			; (mov r8, r8)
 80018bc:	46c0      	nop			; (mov r8, r8)
 80018be:	46bd      	mov	sp, r7
 80018c0:	b004      	add	sp, #16
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20000000 	.word	0x20000000

080018c8 <AbrirApagar>:

void AbrirApagar(uint8_t veces, uint16_t tiempo, uint16_t tiempo2){
 80018c8:	b5b0      	push	{r4, r5, r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	0004      	movs	r4, r0
 80018d0:	0008      	movs	r0, r1
 80018d2:	0011      	movs	r1, r2
 80018d4:	1dfb      	adds	r3, r7, #7
 80018d6:	1c22      	adds	r2, r4, #0
 80018d8:	701a      	strb	r2, [r3, #0]
 80018da:	1d3b      	adds	r3, r7, #4
 80018dc:	1c02      	adds	r2, r0, #0
 80018de:	801a      	strh	r2, [r3, #0]
 80018e0:	1cbb      	adds	r3, r7, #2
 80018e2:	1c0a      	adds	r2, r1, #0
 80018e4:	801a      	strh	r2, [r3, #0]

	for(uint8_t v=0;v<veces;v++){
 80018e6:	230f      	movs	r3, #15
 80018e8:	18fb      	adds	r3, r7, r3
 80018ea:	2200      	movs	r2, #0
 80018ec:	701a      	strb	r2, [r3, #0]
 80018ee:	e148      	b.n	8001b82 <AbrirApagar+0x2ba>
		uint8_t centro,impar=1,par=0;
 80018f0:	230e      	movs	r3, #14
 80018f2:	18fb      	adds	r3, r7, r3
 80018f4:	2201      	movs	r2, #1
 80018f6:	701a      	strb	r2, [r3, #0]
 80018f8:	230d      	movs	r3, #13
 80018fa:	18fb      	adds	r3, r7, r3
 80018fc:	2200      	movs	r2, #0
 80018fe:	701a      	strb	r2, [r3, #0]
		if(cantLeds%2==0){//si es par
 8001900:	4ba6      	ldr	r3, [pc, #664]	; (8001b9c <AbrirApagar+0x2d4>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2201      	movs	r2, #1
 8001906:	4013      	ands	r3, r2
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b00      	cmp	r3, #0
 800190c:	d000      	beq.n	8001910 <AbrirApagar+0x48>
 800190e:	e098      	b.n	8001a42 <AbrirApagar+0x17a>
			centro = cantLeds/2;
 8001910:	4ba2      	ldr	r3, [pc, #648]	; (8001b9c <AbrirApagar+0x2d4>)
 8001912:	781a      	ldrb	r2, [r3, #0]
 8001914:	2108      	movs	r1, #8
 8001916:	187b      	adds	r3, r7, r1
 8001918:	0852      	lsrs	r2, r2, #1
 800191a:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=centro;i>=1;i--){
 800191c:	230c      	movs	r3, #12
 800191e:	18fb      	adds	r3, r7, r3
 8001920:	187a      	adds	r2, r7, r1
 8001922:	7812      	ldrb	r2, [r2, #0]
 8001924:	701a      	strb	r2, [r3, #0]
 8001926:	e030      	b.n	800198a <AbrirApagar+0xc2>
				ControlLeds(i, 1);
 8001928:	250c      	movs	r5, #12
 800192a:	197b      	adds	r3, r7, r5
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2101      	movs	r1, #1
 8001930:	0018      	movs	r0, r3
 8001932:	f7ff fdbf 	bl	80014b4 <ControlLeds>
				ControlLeds(i+impar, 1);
 8001936:	197a      	adds	r2, r7, r5
 8001938:	240e      	movs	r4, #14
 800193a:	193b      	adds	r3, r7, r4
 800193c:	7812      	ldrb	r2, [r2, #0]
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	18d3      	adds	r3, r2, r3
 8001942:	b2db      	uxtb	r3, r3
 8001944:	2101      	movs	r1, #1
 8001946:	0018      	movs	r0, r3
 8001948:	f7ff fdb4 	bl	80014b4 <ControlLeds>
				impar=impar+2;
 800194c:	193b      	adds	r3, r7, r4
 800194e:	193a      	adds	r2, r7, r4
 8001950:	7812      	ldrb	r2, [r2, #0]
 8001952:	3202      	adds	r2, #2
 8001954:	701a      	strb	r2, [r3, #0]
				HAL_Delay(tiempo*Refresh_ADC_Value());
 8001956:	1d3b      	adds	r3, r7, #4
 8001958:	881b      	ldrh	r3, [r3, #0]
 800195a:	0018      	movs	r0, r3
 800195c:	f7ff fa1e 	bl	8000d9c <__aeabi_i2f>
 8001960:	1c04      	adds	r4, r0, #0
 8001962:	f7ff fd7d 	bl	8001460 <Refresh_ADC_Value>
 8001966:	1c03      	adds	r3, r0, #0
 8001968:	1c19      	adds	r1, r3, #0
 800196a:	1c20      	adds	r0, r4, #0
 800196c:	f7fe ff22 	bl	80007b4 <__aeabi_fmul>
 8001970:	1c03      	adds	r3, r0, #0
 8001972:	1c18      	adds	r0, r3, #0
 8001974:	f7fe fc50 	bl	8000218 <__aeabi_f2uiz>
 8001978:	0003      	movs	r3, r0
 800197a:	0018      	movs	r0, r3
 800197c:	f000 fe5e 	bl	800263c <HAL_Delay>
			for(uint8_t i=centro;i>=1;i--){
 8001980:	197b      	adds	r3, r7, r5
 8001982:	781a      	ldrb	r2, [r3, #0]
 8001984:	197b      	adds	r3, r7, r5
 8001986:	3a01      	subs	r2, #1
 8001988:	701a      	strb	r2, [r3, #0]
 800198a:	230c      	movs	r3, #12
 800198c:	18fb      	adds	r3, r7, r3
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1c9      	bne.n	8001928 <AbrirApagar+0x60>
			}

			impar=1;
 8001994:	230e      	movs	r3, #14
 8001996:	18fb      	adds	r3, r7, r3
 8001998:	2201      	movs	r2, #1
 800199a:	701a      	strb	r2, [r3, #0]
			HAL_Delay(tiempo2*Refresh_ADC_Value());
 800199c:	1cbb      	adds	r3, r7, #2
 800199e:	881b      	ldrh	r3, [r3, #0]
 80019a0:	0018      	movs	r0, r3
 80019a2:	f7ff f9fb 	bl	8000d9c <__aeabi_i2f>
 80019a6:	1c04      	adds	r4, r0, #0
 80019a8:	f7ff fd5a 	bl	8001460 <Refresh_ADC_Value>
 80019ac:	1c03      	adds	r3, r0, #0
 80019ae:	1c19      	adds	r1, r3, #0
 80019b0:	1c20      	adds	r0, r4, #0
 80019b2:	f7fe feff 	bl	80007b4 <__aeabi_fmul>
 80019b6:	1c03      	adds	r3, r0, #0
 80019b8:	1c18      	adds	r0, r3, #0
 80019ba:	f7fe fc2d 	bl	8000218 <__aeabi_f2uiz>
 80019be:	0003      	movs	r3, r0
 80019c0:	0018      	movs	r0, r3
 80019c2:	f000 fe3b 	bl	800263c <HAL_Delay>

			for(uint8_t i=centro;i>=1;i--){
 80019c6:	230b      	movs	r3, #11
 80019c8:	18fb      	adds	r3, r7, r3
 80019ca:	2208      	movs	r2, #8
 80019cc:	18ba      	adds	r2, r7, r2
 80019ce:	7812      	ldrb	r2, [r2, #0]
 80019d0:	701a      	strb	r2, [r3, #0]
 80019d2:	e030      	b.n	8001a36 <AbrirApagar+0x16e>
				ControlLeds(i, 0);
 80019d4:	250b      	movs	r5, #11
 80019d6:	197b      	adds	r3, r7, r5
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2100      	movs	r1, #0
 80019dc:	0018      	movs	r0, r3
 80019de:	f7ff fd69 	bl	80014b4 <ControlLeds>
				ControlLeds(i+impar, 0);
 80019e2:	197a      	adds	r2, r7, r5
 80019e4:	240e      	movs	r4, #14
 80019e6:	193b      	adds	r3, r7, r4
 80019e8:	7812      	ldrb	r2, [r2, #0]
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	18d3      	adds	r3, r2, r3
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2100      	movs	r1, #0
 80019f2:	0018      	movs	r0, r3
 80019f4:	f7ff fd5e 	bl	80014b4 <ControlLeds>
				impar=impar+2;
 80019f8:	193b      	adds	r3, r7, r4
 80019fa:	193a      	adds	r2, r7, r4
 80019fc:	7812      	ldrb	r2, [r2, #0]
 80019fe:	3202      	adds	r2, #2
 8001a00:	701a      	strb	r2, [r3, #0]
				HAL_Delay(tiempo*Refresh_ADC_Value());
 8001a02:	1d3b      	adds	r3, r7, #4
 8001a04:	881b      	ldrh	r3, [r3, #0]
 8001a06:	0018      	movs	r0, r3
 8001a08:	f7ff f9c8 	bl	8000d9c <__aeabi_i2f>
 8001a0c:	1c04      	adds	r4, r0, #0
 8001a0e:	f7ff fd27 	bl	8001460 <Refresh_ADC_Value>
 8001a12:	1c03      	adds	r3, r0, #0
 8001a14:	1c19      	adds	r1, r3, #0
 8001a16:	1c20      	adds	r0, r4, #0
 8001a18:	f7fe fecc 	bl	80007b4 <__aeabi_fmul>
 8001a1c:	1c03      	adds	r3, r0, #0
 8001a1e:	1c18      	adds	r0, r3, #0
 8001a20:	f7fe fbfa 	bl	8000218 <__aeabi_f2uiz>
 8001a24:	0003      	movs	r3, r0
 8001a26:	0018      	movs	r0, r3
 8001a28:	f000 fe08 	bl	800263c <HAL_Delay>
			for(uint8_t i=centro;i>=1;i--){
 8001a2c:	197b      	adds	r3, r7, r5
 8001a2e:	781a      	ldrb	r2, [r3, #0]
 8001a30:	197b      	adds	r3, r7, r5
 8001a32:	3a01      	subs	r2, #1
 8001a34:	701a      	strb	r2, [r3, #0]
 8001a36:	230b      	movs	r3, #11
 8001a38:	18fb      	adds	r3, r7, r3
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1c9      	bne.n	80019d4 <AbrirApagar+0x10c>
 8001a40:	e099      	b.n	8001b76 <AbrirApagar+0x2ae>
			}

		}else{//si es impar
			centro = (cantLeds/2)+1;
 8001a42:	4b56      	ldr	r3, [pc, #344]	; (8001b9c <AbrirApagar+0x2d4>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	085b      	lsrs	r3, r3, #1
 8001a48:	b2da      	uxtb	r2, r3
 8001a4a:	2108      	movs	r1, #8
 8001a4c:	187b      	adds	r3, r7, r1
 8001a4e:	3201      	adds	r2, #1
 8001a50:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=centro;i>=1;i--){
 8001a52:	230a      	movs	r3, #10
 8001a54:	18fb      	adds	r3, r7, r3
 8001a56:	187a      	adds	r2, r7, r1
 8001a58:	7812      	ldrb	r2, [r2, #0]
 8001a5a:	701a      	strb	r2, [r3, #0]
 8001a5c:	e030      	b.n	8001ac0 <AbrirApagar+0x1f8>
				ControlLeds(i, 1);
 8001a5e:	250a      	movs	r5, #10
 8001a60:	197b      	adds	r3, r7, r5
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2101      	movs	r1, #1
 8001a66:	0018      	movs	r0, r3
 8001a68:	f7ff fd24 	bl	80014b4 <ControlLeds>
				ControlLeds(i+par, 1);
 8001a6c:	197a      	adds	r2, r7, r5
 8001a6e:	240d      	movs	r4, #13
 8001a70:	193b      	adds	r3, r7, r4
 8001a72:	7812      	ldrb	r2, [r2, #0]
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	18d3      	adds	r3, r2, r3
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	f7ff fd19 	bl	80014b4 <ControlLeds>
				par=par+2;
 8001a82:	193b      	adds	r3, r7, r4
 8001a84:	193a      	adds	r2, r7, r4
 8001a86:	7812      	ldrb	r2, [r2, #0]
 8001a88:	3202      	adds	r2, #2
 8001a8a:	701a      	strb	r2, [r3, #0]
				HAL_Delay(tiempo*Refresh_ADC_Value());
 8001a8c:	1d3b      	adds	r3, r7, #4
 8001a8e:	881b      	ldrh	r3, [r3, #0]
 8001a90:	0018      	movs	r0, r3
 8001a92:	f7ff f983 	bl	8000d9c <__aeabi_i2f>
 8001a96:	1c04      	adds	r4, r0, #0
 8001a98:	f7ff fce2 	bl	8001460 <Refresh_ADC_Value>
 8001a9c:	1c03      	adds	r3, r0, #0
 8001a9e:	1c19      	adds	r1, r3, #0
 8001aa0:	1c20      	adds	r0, r4, #0
 8001aa2:	f7fe fe87 	bl	80007b4 <__aeabi_fmul>
 8001aa6:	1c03      	adds	r3, r0, #0
 8001aa8:	1c18      	adds	r0, r3, #0
 8001aaa:	f7fe fbb5 	bl	8000218 <__aeabi_f2uiz>
 8001aae:	0003      	movs	r3, r0
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	f000 fdc3 	bl	800263c <HAL_Delay>
			for(uint8_t i=centro;i>=1;i--){
 8001ab6:	197b      	adds	r3, r7, r5
 8001ab8:	781a      	ldrb	r2, [r3, #0]
 8001aba:	197b      	adds	r3, r7, r5
 8001abc:	3a01      	subs	r2, #1
 8001abe:	701a      	strb	r2, [r3, #0]
 8001ac0:	230a      	movs	r3, #10
 8001ac2:	18fb      	adds	r3, r7, r3
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1c9      	bne.n	8001a5e <AbrirApagar+0x196>
			}

			par=0;
 8001aca:	230d      	movs	r3, #13
 8001acc:	18fb      	adds	r3, r7, r3
 8001ace:	2200      	movs	r2, #0
 8001ad0:	701a      	strb	r2, [r3, #0]
			HAL_Delay(tiempo2*Refresh_ADC_Value());
 8001ad2:	1cbb      	adds	r3, r7, #2
 8001ad4:	881b      	ldrh	r3, [r3, #0]
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	f7ff f960 	bl	8000d9c <__aeabi_i2f>
 8001adc:	1c04      	adds	r4, r0, #0
 8001ade:	f7ff fcbf 	bl	8001460 <Refresh_ADC_Value>
 8001ae2:	1c03      	adds	r3, r0, #0
 8001ae4:	1c19      	adds	r1, r3, #0
 8001ae6:	1c20      	adds	r0, r4, #0
 8001ae8:	f7fe fe64 	bl	80007b4 <__aeabi_fmul>
 8001aec:	1c03      	adds	r3, r0, #0
 8001aee:	1c18      	adds	r0, r3, #0
 8001af0:	f7fe fb92 	bl	8000218 <__aeabi_f2uiz>
 8001af4:	0003      	movs	r3, r0
 8001af6:	0018      	movs	r0, r3
 8001af8:	f000 fda0 	bl	800263c <HAL_Delay>

			for(uint8_t i=centro;i>=1;i--){
 8001afc:	2309      	movs	r3, #9
 8001afe:	18fb      	adds	r3, r7, r3
 8001b00:	2208      	movs	r2, #8
 8001b02:	18ba      	adds	r2, r7, r2
 8001b04:	7812      	ldrb	r2, [r2, #0]
 8001b06:	701a      	strb	r2, [r3, #0]
 8001b08:	e030      	b.n	8001b6c <AbrirApagar+0x2a4>
				ControlLeds(i, 0);
 8001b0a:	2509      	movs	r5, #9
 8001b0c:	197b      	adds	r3, r7, r5
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2100      	movs	r1, #0
 8001b12:	0018      	movs	r0, r3
 8001b14:	f7ff fcce 	bl	80014b4 <ControlLeds>
				ControlLeds(i+par, 0);
 8001b18:	197a      	adds	r2, r7, r5
 8001b1a:	240d      	movs	r4, #13
 8001b1c:	193b      	adds	r3, r7, r4
 8001b1e:	7812      	ldrb	r2, [r2, #0]
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	18d3      	adds	r3, r2, r3
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2100      	movs	r1, #0
 8001b28:	0018      	movs	r0, r3
 8001b2a:	f7ff fcc3 	bl	80014b4 <ControlLeds>
				par=par+2;
 8001b2e:	193b      	adds	r3, r7, r4
 8001b30:	193a      	adds	r2, r7, r4
 8001b32:	7812      	ldrb	r2, [r2, #0]
 8001b34:	3202      	adds	r2, #2
 8001b36:	701a      	strb	r2, [r3, #0]
				HAL_Delay(tiempo*Refresh_ADC_Value());
 8001b38:	1d3b      	adds	r3, r7, #4
 8001b3a:	881b      	ldrh	r3, [r3, #0]
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	f7ff f92d 	bl	8000d9c <__aeabi_i2f>
 8001b42:	1c04      	adds	r4, r0, #0
 8001b44:	f7ff fc8c 	bl	8001460 <Refresh_ADC_Value>
 8001b48:	1c03      	adds	r3, r0, #0
 8001b4a:	1c19      	adds	r1, r3, #0
 8001b4c:	1c20      	adds	r0, r4, #0
 8001b4e:	f7fe fe31 	bl	80007b4 <__aeabi_fmul>
 8001b52:	1c03      	adds	r3, r0, #0
 8001b54:	1c18      	adds	r0, r3, #0
 8001b56:	f7fe fb5f 	bl	8000218 <__aeabi_f2uiz>
 8001b5a:	0003      	movs	r3, r0
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	f000 fd6d 	bl	800263c <HAL_Delay>
			for(uint8_t i=centro;i>=1;i--){
 8001b62:	197b      	adds	r3, r7, r5
 8001b64:	781a      	ldrb	r2, [r3, #0]
 8001b66:	197b      	adds	r3, r7, r5
 8001b68:	3a01      	subs	r2, #1
 8001b6a:	701a      	strb	r2, [r3, #0]
 8001b6c:	2309      	movs	r3, #9
 8001b6e:	18fb      	adds	r3, r7, r3
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1c9      	bne.n	8001b0a <AbrirApagar+0x242>
	for(uint8_t v=0;v<veces;v++){
 8001b76:	210f      	movs	r1, #15
 8001b78:	187b      	adds	r3, r7, r1
 8001b7a:	781a      	ldrb	r2, [r3, #0]
 8001b7c:	187b      	adds	r3, r7, r1
 8001b7e:	3201      	adds	r2, #1
 8001b80:	701a      	strb	r2, [r3, #0]
 8001b82:	230f      	movs	r3, #15
 8001b84:	18fa      	adds	r2, r7, r3
 8001b86:	1dfb      	adds	r3, r7, #7
 8001b88:	7812      	ldrb	r2, [r2, #0]
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d200      	bcs.n	8001b92 <AbrirApagar+0x2ca>
 8001b90:	e6ae      	b.n	80018f0 <AbrirApagar+0x28>
			}
		}
	}
}
 8001b92:	46c0      	nop			; (mov r8, r8)
 8001b94:	46c0      	nop			; (mov r8, r8)
 8001b96:	46bd      	mov	sp, r7
 8001b98:	b004      	add	sp, #16
 8001b9a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b9c:	20000000 	.word	0x20000000

08001ba0 <CerrarApagar>:

void CerrarApagar(uint8_t veces, uint16_t tiempo, uint16_t tiempo2){
 8001ba0:	b5b0      	push	{r4, r5, r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	0004      	movs	r4, r0
 8001ba8:	0008      	movs	r0, r1
 8001baa:	0011      	movs	r1, r2
 8001bac:	1dfb      	adds	r3, r7, #7
 8001bae:	1c22      	adds	r2, r4, #0
 8001bb0:	701a      	strb	r2, [r3, #0]
 8001bb2:	1d3b      	adds	r3, r7, #4
 8001bb4:	1c02      	adds	r2, r0, #0
 8001bb6:	801a      	strh	r2, [r3, #0]
 8001bb8:	1cbb      	adds	r3, r7, #2
 8001bba:	1c0a      	adds	r2, r1, #0
 8001bbc:	801a      	strh	r2, [r3, #0]
	for(uint8_t v=0;v<veces;v++){
 8001bbe:	230f      	movs	r3, #15
 8001bc0:	18fb      	adds	r3, r7, r3
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	701a      	strb	r2, [r3, #0]
 8001bc6:	e156      	b.n	8001e76 <CerrarApagar+0x2d6>
		uint8_t limite,centro;
		if(cantLeds%2==0){//si es par
 8001bc8:	4bb1      	ldr	r3, [pc, #708]	; (8001e90 <CerrarApagar+0x2f0>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	4013      	ands	r3, r2
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d000      	beq.n	8001bd8 <CerrarApagar+0x38>
 8001bd6:	e0a3      	b.n	8001d20 <CerrarApagar+0x180>

			centro = cantLeds/2;//5
 8001bd8:	4bad      	ldr	r3, [pc, #692]	; (8001e90 <CerrarApagar+0x2f0>)
 8001bda:	781a      	ldrb	r2, [r3, #0]
 8001bdc:	2309      	movs	r3, #9
 8001bde:	18fb      	adds	r3, r7, r3
 8001be0:	0852      	lsrs	r2, r2, #1
 8001be2:	701a      	strb	r2, [r3, #0]
			limite = cantLeds-1;
 8001be4:	4baa      	ldr	r3, [pc, #680]	; (8001e90 <CerrarApagar+0x2f0>)
 8001be6:	781a      	ldrb	r2, [r3, #0]
 8001be8:	230e      	movs	r3, #14
 8001bea:	18fb      	adds	r3, r7, r3
 8001bec:	3a01      	subs	r2, #1
 8001bee:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=1;i<=centro;i++){
 8001bf0:	230d      	movs	r3, #13
 8001bf2:	18fb      	adds	r3, r7, r3
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	701a      	strb	r2, [r3, #0]
 8001bf8:	e030      	b.n	8001c5c <CerrarApagar+0xbc>
				ControlLeds(i, 1);
 8001bfa:	250d      	movs	r5, #13
 8001bfc:	197b      	adds	r3, r7, r5
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2101      	movs	r1, #1
 8001c02:	0018      	movs	r0, r3
 8001c04:	f7ff fc56 	bl	80014b4 <ControlLeds>
				ControlLeds(i+limite, 1);
 8001c08:	197a      	adds	r2, r7, r5
 8001c0a:	240e      	movs	r4, #14
 8001c0c:	193b      	adds	r3, r7, r4
 8001c0e:	7812      	ldrb	r2, [r2, #0]
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	18d3      	adds	r3, r2, r3
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2101      	movs	r1, #1
 8001c18:	0018      	movs	r0, r3
 8001c1a:	f7ff fc4b 	bl	80014b4 <ControlLeds>
				limite=limite-2;
 8001c1e:	193b      	adds	r3, r7, r4
 8001c20:	193a      	adds	r2, r7, r4
 8001c22:	7812      	ldrb	r2, [r2, #0]
 8001c24:	3a02      	subs	r2, #2
 8001c26:	701a      	strb	r2, [r3, #0]
				HAL_Delay(tiempo*Refresh_ADC_Value());
 8001c28:	1d3b      	adds	r3, r7, #4
 8001c2a:	881b      	ldrh	r3, [r3, #0]
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	f7ff f8b5 	bl	8000d9c <__aeabi_i2f>
 8001c32:	1c04      	adds	r4, r0, #0
 8001c34:	f7ff fc14 	bl	8001460 <Refresh_ADC_Value>
 8001c38:	1c03      	adds	r3, r0, #0
 8001c3a:	1c19      	adds	r1, r3, #0
 8001c3c:	1c20      	adds	r0, r4, #0
 8001c3e:	f7fe fdb9 	bl	80007b4 <__aeabi_fmul>
 8001c42:	1c03      	adds	r3, r0, #0
 8001c44:	1c18      	adds	r0, r3, #0
 8001c46:	f7fe fae7 	bl	8000218 <__aeabi_f2uiz>
 8001c4a:	0003      	movs	r3, r0
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	f000 fcf5 	bl	800263c <HAL_Delay>
			for(uint8_t i=1;i<=centro;i++){
 8001c52:	197b      	adds	r3, r7, r5
 8001c54:	781a      	ldrb	r2, [r3, #0]
 8001c56:	197b      	adds	r3, r7, r5
 8001c58:	3201      	adds	r2, #1
 8001c5a:	701a      	strb	r2, [r3, #0]
 8001c5c:	230d      	movs	r3, #13
 8001c5e:	18fa      	adds	r2, r7, r3
 8001c60:	2309      	movs	r3, #9
 8001c62:	18fb      	adds	r3, r7, r3
 8001c64:	7812      	ldrb	r2, [r2, #0]
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d9c6      	bls.n	8001bfa <CerrarApagar+0x5a>
			}
			limite = cantLeds-1;
 8001c6c:	4b88      	ldr	r3, [pc, #544]	; (8001e90 <CerrarApagar+0x2f0>)
 8001c6e:	781a      	ldrb	r2, [r3, #0]
 8001c70:	230e      	movs	r3, #14
 8001c72:	18fb      	adds	r3, r7, r3
 8001c74:	3a01      	subs	r2, #1
 8001c76:	701a      	strb	r2, [r3, #0]
			HAL_Delay(tiempo2*Refresh_ADC_Value());
 8001c78:	1cbb      	adds	r3, r7, #2
 8001c7a:	881b      	ldrh	r3, [r3, #0]
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	f7ff f88d 	bl	8000d9c <__aeabi_i2f>
 8001c82:	1c04      	adds	r4, r0, #0
 8001c84:	f7ff fbec 	bl	8001460 <Refresh_ADC_Value>
 8001c88:	1c03      	adds	r3, r0, #0
 8001c8a:	1c19      	adds	r1, r3, #0
 8001c8c:	1c20      	adds	r0, r4, #0
 8001c8e:	f7fe fd91 	bl	80007b4 <__aeabi_fmul>
 8001c92:	1c03      	adds	r3, r0, #0
 8001c94:	1c18      	adds	r0, r3, #0
 8001c96:	f7fe fabf 	bl	8000218 <__aeabi_f2uiz>
 8001c9a:	0003      	movs	r3, r0
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	f000 fccd 	bl	800263c <HAL_Delay>
			for(uint8_t i=1;i<=centro;i++){
 8001ca2:	230c      	movs	r3, #12
 8001ca4:	18fb      	adds	r3, r7, r3
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	701a      	strb	r2, [r3, #0]
 8001caa:	e030      	b.n	8001d0e <CerrarApagar+0x16e>
				ControlLeds(i, 0);
 8001cac:	250c      	movs	r5, #12
 8001cae:	197b      	adds	r3, r7, r5
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	f7ff fbfd 	bl	80014b4 <ControlLeds>
				ControlLeds(i+limite, 0);
 8001cba:	197a      	adds	r2, r7, r5
 8001cbc:	240e      	movs	r4, #14
 8001cbe:	193b      	adds	r3, r7, r4
 8001cc0:	7812      	ldrb	r2, [r2, #0]
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	18d3      	adds	r3, r2, r3
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	2100      	movs	r1, #0
 8001cca:	0018      	movs	r0, r3
 8001ccc:	f7ff fbf2 	bl	80014b4 <ControlLeds>
				limite=limite-2;
 8001cd0:	193b      	adds	r3, r7, r4
 8001cd2:	193a      	adds	r2, r7, r4
 8001cd4:	7812      	ldrb	r2, [r2, #0]
 8001cd6:	3a02      	subs	r2, #2
 8001cd8:	701a      	strb	r2, [r3, #0]
				HAL_Delay(tiempo*Refresh_ADC_Value());
 8001cda:	1d3b      	adds	r3, r7, #4
 8001cdc:	881b      	ldrh	r3, [r3, #0]
 8001cde:	0018      	movs	r0, r3
 8001ce0:	f7ff f85c 	bl	8000d9c <__aeabi_i2f>
 8001ce4:	1c04      	adds	r4, r0, #0
 8001ce6:	f7ff fbbb 	bl	8001460 <Refresh_ADC_Value>
 8001cea:	1c03      	adds	r3, r0, #0
 8001cec:	1c19      	adds	r1, r3, #0
 8001cee:	1c20      	adds	r0, r4, #0
 8001cf0:	f7fe fd60 	bl	80007b4 <__aeabi_fmul>
 8001cf4:	1c03      	adds	r3, r0, #0
 8001cf6:	1c18      	adds	r0, r3, #0
 8001cf8:	f7fe fa8e 	bl	8000218 <__aeabi_f2uiz>
 8001cfc:	0003      	movs	r3, r0
 8001cfe:	0018      	movs	r0, r3
 8001d00:	f000 fc9c 	bl	800263c <HAL_Delay>
			for(uint8_t i=1;i<=centro;i++){
 8001d04:	197b      	adds	r3, r7, r5
 8001d06:	781a      	ldrb	r2, [r3, #0]
 8001d08:	197b      	adds	r3, r7, r5
 8001d0a:	3201      	adds	r2, #1
 8001d0c:	701a      	strb	r2, [r3, #0]
 8001d0e:	230c      	movs	r3, #12
 8001d10:	18fa      	adds	r2, r7, r3
 8001d12:	2309      	movs	r3, #9
 8001d14:	18fb      	adds	r3, r7, r3
 8001d16:	7812      	ldrb	r2, [r2, #0]
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d9c6      	bls.n	8001cac <CerrarApagar+0x10c>
 8001d1e:	e0a4      	b.n	8001e6a <CerrarApagar+0x2ca>
			}

		}else{//si es impar
			centro = (cantLeds/2)+1;//5
 8001d20:	4b5b      	ldr	r3, [pc, #364]	; (8001e90 <CerrarApagar+0x2f0>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	085b      	lsrs	r3, r3, #1
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	2309      	movs	r3, #9
 8001d2a:	18fb      	adds	r3, r7, r3
 8001d2c:	3201      	adds	r2, #1
 8001d2e:	701a      	strb	r2, [r3, #0]
			limite = cantLeds-1;
 8001d30:	4b57      	ldr	r3, [pc, #348]	; (8001e90 <CerrarApagar+0x2f0>)
 8001d32:	781a      	ldrb	r2, [r3, #0]
 8001d34:	230e      	movs	r3, #14
 8001d36:	18fb      	adds	r3, r7, r3
 8001d38:	3a01      	subs	r2, #1
 8001d3a:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=1;i<=centro;i++){
 8001d3c:	230b      	movs	r3, #11
 8001d3e:	18fb      	adds	r3, r7, r3
 8001d40:	2201      	movs	r2, #1
 8001d42:	701a      	strb	r2, [r3, #0]
 8001d44:	e030      	b.n	8001da8 <CerrarApagar+0x208>
				ControlLeds(i, 1);
 8001d46:	250b      	movs	r5, #11
 8001d48:	197b      	adds	r3, r7, r5
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	0018      	movs	r0, r3
 8001d50:	f7ff fbb0 	bl	80014b4 <ControlLeds>
				ControlLeds(i+limite, 1);
 8001d54:	197a      	adds	r2, r7, r5
 8001d56:	240e      	movs	r4, #14
 8001d58:	193b      	adds	r3, r7, r4
 8001d5a:	7812      	ldrb	r2, [r2, #0]
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	18d3      	adds	r3, r2, r3
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2101      	movs	r1, #1
 8001d64:	0018      	movs	r0, r3
 8001d66:	f7ff fba5 	bl	80014b4 <ControlLeds>
				limite=limite-2;
 8001d6a:	193b      	adds	r3, r7, r4
 8001d6c:	193a      	adds	r2, r7, r4
 8001d6e:	7812      	ldrb	r2, [r2, #0]
 8001d70:	3a02      	subs	r2, #2
 8001d72:	701a      	strb	r2, [r3, #0]
				HAL_Delay(tiempo*Refresh_ADC_Value());
 8001d74:	1d3b      	adds	r3, r7, #4
 8001d76:	881b      	ldrh	r3, [r3, #0]
 8001d78:	0018      	movs	r0, r3
 8001d7a:	f7ff f80f 	bl	8000d9c <__aeabi_i2f>
 8001d7e:	1c04      	adds	r4, r0, #0
 8001d80:	f7ff fb6e 	bl	8001460 <Refresh_ADC_Value>
 8001d84:	1c03      	adds	r3, r0, #0
 8001d86:	1c19      	adds	r1, r3, #0
 8001d88:	1c20      	adds	r0, r4, #0
 8001d8a:	f7fe fd13 	bl	80007b4 <__aeabi_fmul>
 8001d8e:	1c03      	adds	r3, r0, #0
 8001d90:	1c18      	adds	r0, r3, #0
 8001d92:	f7fe fa41 	bl	8000218 <__aeabi_f2uiz>
 8001d96:	0003      	movs	r3, r0
 8001d98:	0018      	movs	r0, r3
 8001d9a:	f000 fc4f 	bl	800263c <HAL_Delay>
			for(uint8_t i=1;i<=centro;i++){
 8001d9e:	197b      	adds	r3, r7, r5
 8001da0:	781a      	ldrb	r2, [r3, #0]
 8001da2:	197b      	adds	r3, r7, r5
 8001da4:	3201      	adds	r2, #1
 8001da6:	701a      	strb	r2, [r3, #0]
 8001da8:	230b      	movs	r3, #11
 8001daa:	18fa      	adds	r2, r7, r3
 8001dac:	2309      	movs	r3, #9
 8001dae:	18fb      	adds	r3, r7, r3
 8001db0:	7812      	ldrb	r2, [r2, #0]
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d9c6      	bls.n	8001d46 <CerrarApagar+0x1a6>
			}
			limite = cantLeds-1;
 8001db8:	4b35      	ldr	r3, [pc, #212]	; (8001e90 <CerrarApagar+0x2f0>)
 8001dba:	781a      	ldrb	r2, [r3, #0]
 8001dbc:	230e      	movs	r3, #14
 8001dbe:	18fb      	adds	r3, r7, r3
 8001dc0:	3a01      	subs	r2, #1
 8001dc2:	701a      	strb	r2, [r3, #0]
			HAL_Delay(tiempo2*Refresh_ADC_Value());
 8001dc4:	1cbb      	adds	r3, r7, #2
 8001dc6:	881b      	ldrh	r3, [r3, #0]
 8001dc8:	0018      	movs	r0, r3
 8001dca:	f7fe ffe7 	bl	8000d9c <__aeabi_i2f>
 8001dce:	1c04      	adds	r4, r0, #0
 8001dd0:	f7ff fb46 	bl	8001460 <Refresh_ADC_Value>
 8001dd4:	1c03      	adds	r3, r0, #0
 8001dd6:	1c19      	adds	r1, r3, #0
 8001dd8:	1c20      	adds	r0, r4, #0
 8001dda:	f7fe fceb 	bl	80007b4 <__aeabi_fmul>
 8001dde:	1c03      	adds	r3, r0, #0
 8001de0:	1c18      	adds	r0, r3, #0
 8001de2:	f7fe fa19 	bl	8000218 <__aeabi_f2uiz>
 8001de6:	0003      	movs	r3, r0
 8001de8:	0018      	movs	r0, r3
 8001dea:	f000 fc27 	bl	800263c <HAL_Delay>
			for(uint8_t i=1;i<=centro;i++){
 8001dee:	230a      	movs	r3, #10
 8001df0:	18fb      	adds	r3, r7, r3
 8001df2:	2201      	movs	r2, #1
 8001df4:	701a      	strb	r2, [r3, #0]
 8001df6:	e030      	b.n	8001e5a <CerrarApagar+0x2ba>
				ControlLeds(i, 0);
 8001df8:	250a      	movs	r5, #10
 8001dfa:	197b      	adds	r3, r7, r5
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	2100      	movs	r1, #0
 8001e00:	0018      	movs	r0, r3
 8001e02:	f7ff fb57 	bl	80014b4 <ControlLeds>
				ControlLeds(i+limite, 0);
 8001e06:	197a      	adds	r2, r7, r5
 8001e08:	240e      	movs	r4, #14
 8001e0a:	193b      	adds	r3, r7, r4
 8001e0c:	7812      	ldrb	r2, [r2, #0]
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	18d3      	adds	r3, r2, r3
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2100      	movs	r1, #0
 8001e16:	0018      	movs	r0, r3
 8001e18:	f7ff fb4c 	bl	80014b4 <ControlLeds>
				limite=limite-2;
 8001e1c:	193b      	adds	r3, r7, r4
 8001e1e:	193a      	adds	r2, r7, r4
 8001e20:	7812      	ldrb	r2, [r2, #0]
 8001e22:	3a02      	subs	r2, #2
 8001e24:	701a      	strb	r2, [r3, #0]
				HAL_Delay(tiempo*Refresh_ADC_Value());
 8001e26:	1d3b      	adds	r3, r7, #4
 8001e28:	881b      	ldrh	r3, [r3, #0]
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	f7fe ffb6 	bl	8000d9c <__aeabi_i2f>
 8001e30:	1c04      	adds	r4, r0, #0
 8001e32:	f7ff fb15 	bl	8001460 <Refresh_ADC_Value>
 8001e36:	1c03      	adds	r3, r0, #0
 8001e38:	1c19      	adds	r1, r3, #0
 8001e3a:	1c20      	adds	r0, r4, #0
 8001e3c:	f7fe fcba 	bl	80007b4 <__aeabi_fmul>
 8001e40:	1c03      	adds	r3, r0, #0
 8001e42:	1c18      	adds	r0, r3, #0
 8001e44:	f7fe f9e8 	bl	8000218 <__aeabi_f2uiz>
 8001e48:	0003      	movs	r3, r0
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	f000 fbf6 	bl	800263c <HAL_Delay>
			for(uint8_t i=1;i<=centro;i++){
 8001e50:	197b      	adds	r3, r7, r5
 8001e52:	781a      	ldrb	r2, [r3, #0]
 8001e54:	197b      	adds	r3, r7, r5
 8001e56:	3201      	adds	r2, #1
 8001e58:	701a      	strb	r2, [r3, #0]
 8001e5a:	230a      	movs	r3, #10
 8001e5c:	18fa      	adds	r2, r7, r3
 8001e5e:	2309      	movs	r3, #9
 8001e60:	18fb      	adds	r3, r7, r3
 8001e62:	7812      	ldrb	r2, [r2, #0]
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d9c6      	bls.n	8001df8 <CerrarApagar+0x258>
	for(uint8_t v=0;v<veces;v++){
 8001e6a:	210f      	movs	r1, #15
 8001e6c:	187b      	adds	r3, r7, r1
 8001e6e:	781a      	ldrb	r2, [r3, #0]
 8001e70:	187b      	adds	r3, r7, r1
 8001e72:	3201      	adds	r2, #1
 8001e74:	701a      	strb	r2, [r3, #0]
 8001e76:	230f      	movs	r3, #15
 8001e78:	18fa      	adds	r2, r7, r3
 8001e7a:	1dfb      	adds	r3, r7, #7
 8001e7c:	7812      	ldrb	r2, [r2, #0]
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d200      	bcs.n	8001e86 <CerrarApagar+0x2e6>
 8001e84:	e6a0      	b.n	8001bc8 <CerrarApagar+0x28>
			}
		}
	}
}
 8001e86:	46c0      	nop			; (mov r8, r8)
 8001e88:	46c0      	nop			; (mov r8, r8)
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	b004      	add	sp, #16
 8001e8e:	bdb0      	pop	{r4, r5, r7, pc}
 8001e90:	20000000 	.word	0x20000000

08001e94 <Girar>:

void Girar(uint8_t veces, uint16_t tiempo){
 8001e94:	b590      	push	{r4, r7, lr}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	0002      	movs	r2, r0
 8001e9c:	1dfb      	adds	r3, r7, #7
 8001e9e:	701a      	strb	r2, [r3, #0]
 8001ea0:	1d3b      	adds	r3, r7, #4
 8001ea2:	1c0a      	adds	r2, r1, #0
 8001ea4:	801a      	strh	r2, [r3, #0]
	for(uint8_t v=0;v<veces;v++){
 8001ea6:	230f      	movs	r3, #15
 8001ea8:	18fb      	adds	r3, r7, r3
 8001eaa:	2200      	movs	r2, #0
 8001eac:	701a      	strb	r2, [r3, #0]
 8001eae:	e035      	b.n	8001f1c <Girar+0x88>
		AbrirApagar(1,tiempo*Refresh_ADC_Value(),0);
 8001eb0:	1d3b      	adds	r3, r7, #4
 8001eb2:	881b      	ldrh	r3, [r3, #0]
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	f7fe ff71 	bl	8000d9c <__aeabi_i2f>
 8001eba:	1c04      	adds	r4, r0, #0
 8001ebc:	f7ff fad0 	bl	8001460 <Refresh_ADC_Value>
 8001ec0:	1c03      	adds	r3, r0, #0
 8001ec2:	1c19      	adds	r1, r3, #0
 8001ec4:	1c20      	adds	r0, r4, #0
 8001ec6:	f7fe fc75 	bl	80007b4 <__aeabi_fmul>
 8001eca:	1c03      	adds	r3, r0, #0
 8001ecc:	1c18      	adds	r0, r3, #0
 8001ece:	f7fe f9a3 	bl	8000218 <__aeabi_f2uiz>
 8001ed2:	0003      	movs	r3, r0
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	0019      	movs	r1, r3
 8001eda:	2001      	movs	r0, #1
 8001edc:	f7ff fcf4 	bl	80018c8 <AbrirApagar>
		CerrarApagar(1,tiempo*Refresh_ADC_Value(),0);
 8001ee0:	1d3b      	adds	r3, r7, #4
 8001ee2:	881b      	ldrh	r3, [r3, #0]
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	f7fe ff59 	bl	8000d9c <__aeabi_i2f>
 8001eea:	1c04      	adds	r4, r0, #0
 8001eec:	f7ff fab8 	bl	8001460 <Refresh_ADC_Value>
 8001ef0:	1c03      	adds	r3, r0, #0
 8001ef2:	1c19      	adds	r1, r3, #0
 8001ef4:	1c20      	adds	r0, r4, #0
 8001ef6:	f7fe fc5d 	bl	80007b4 <__aeabi_fmul>
 8001efa:	1c03      	adds	r3, r0, #0
 8001efc:	1c18      	adds	r0, r3, #0
 8001efe:	f7fe f98b 	bl	8000218 <__aeabi_f2uiz>
 8001f02:	0003      	movs	r3, r0
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	2200      	movs	r2, #0
 8001f08:	0019      	movs	r1, r3
 8001f0a:	2001      	movs	r0, #1
 8001f0c:	f7ff fe48 	bl	8001ba0 <CerrarApagar>
	for(uint8_t v=0;v<veces;v++){
 8001f10:	210f      	movs	r1, #15
 8001f12:	187b      	adds	r3, r7, r1
 8001f14:	781a      	ldrb	r2, [r3, #0]
 8001f16:	187b      	adds	r3, r7, r1
 8001f18:	3201      	adds	r2, #1
 8001f1a:	701a      	strb	r2, [r3, #0]
 8001f1c:	230f      	movs	r3, #15
 8001f1e:	18fa      	adds	r2, r7, r3
 8001f20:	1dfb      	adds	r3, r7, #7
 8001f22:	7812      	ldrb	r2, [r2, #0]
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d3c2      	bcc.n	8001eb0 <Girar+0x1c>
	}
}
 8001f2a:	46c0      	nop			; (mov r8, r8)
 8001f2c:	46c0      	nop			; (mov r8, r8)
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	b005      	add	sp, #20
 8001f32:	bd90      	pop	{r4, r7, pc}

08001f34 <VolumenAbrir>:

void VolumenAbrir(uint8_t veces, uint16_t tiempo, uint16_t tiempo2){
 8001f34:	b5b0      	push	{r4, r5, r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	0004      	movs	r4, r0
 8001f3c:	0008      	movs	r0, r1
 8001f3e:	0011      	movs	r1, r2
 8001f40:	1dfb      	adds	r3, r7, #7
 8001f42:	1c22      	adds	r2, r4, #0
 8001f44:	701a      	strb	r2, [r3, #0]
 8001f46:	1d3b      	adds	r3, r7, #4
 8001f48:	1c02      	adds	r2, r0, #0
 8001f4a:	801a      	strh	r2, [r3, #0]
 8001f4c:	1cbb      	adds	r3, r7, #2
 8001f4e:	1c0a      	adds	r2, r1, #0
 8001f50:	801a      	strh	r2, [r3, #0]
	for(uint8_t v=0;v<veces;v++){
 8001f52:	230f      	movs	r3, #15
 8001f54:	18fb      	adds	r3, r7, r3
 8001f56:	2200      	movs	r2, #0
 8001f58:	701a      	strb	r2, [r3, #0]
 8001f5a:	e0a3      	b.n	80020a4 <VolumenAbrir+0x170>
		uint8_t l;
		for(uint8_t i=1;i<=cantLeds;i++){
 8001f5c:	230e      	movs	r3, #14
 8001f5e:	18fb      	adds	r3, r7, r3
 8001f60:	2201      	movs	r2, #1
 8001f62:	701a      	strb	r2, [r3, #0]
 8001f64:	e07b      	b.n	800205e <VolumenAbrir+0x12a>
			l=i;
 8001f66:	250b      	movs	r5, #11
 8001f68:	197b      	adds	r3, r7, r5
 8001f6a:	220e      	movs	r2, #14
 8001f6c:	18ba      	adds	r2, r7, r2
 8001f6e:	7812      	ldrb	r2, [r2, #0]
 8001f70:	701a      	strb	r2, [r3, #0]
			HAL_Delay(tiempo*Refresh_ADC_Value());
 8001f72:	1d3b      	adds	r3, r7, #4
 8001f74:	881b      	ldrh	r3, [r3, #0]
 8001f76:	0018      	movs	r0, r3
 8001f78:	f7fe ff10 	bl	8000d9c <__aeabi_i2f>
 8001f7c:	1c04      	adds	r4, r0, #0
 8001f7e:	f7ff fa6f 	bl	8001460 <Refresh_ADC_Value>
 8001f82:	1c03      	adds	r3, r0, #0
 8001f84:	1c19      	adds	r1, r3, #0
 8001f86:	1c20      	adds	r0, r4, #0
 8001f88:	f7fe fc14 	bl	80007b4 <__aeabi_fmul>
 8001f8c:	1c03      	adds	r3, r0, #0
 8001f8e:	1c18      	adds	r0, r3, #0
 8001f90:	f7fe f942 	bl	8000218 <__aeabi_f2uiz>
 8001f94:	0003      	movs	r3, r0
 8001f96:	0018      	movs	r0, r3
 8001f98:	f000 fb50 	bl	800263c <HAL_Delay>
			for(uint8_t i=l;i<=cantLeds;i++){
 8001f9c:	230d      	movs	r3, #13
 8001f9e:	18fb      	adds	r3, r7, r3
 8001fa0:	197a      	adds	r2, r7, r5
 8001fa2:	7812      	ldrb	r2, [r2, #0]
 8001fa4:	701a      	strb	r2, [r3, #0]
 8001fa6:	e01f      	b.n	8001fe8 <VolumenAbrir+0xb4>
				Encender_1_Led_2(i);
 8001fa8:	250d      	movs	r5, #13
 8001faa:	197b      	adds	r3, r7, r5
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	0018      	movs	r0, r3
 8001fb0:	f7ff fc1e 	bl	80017f0 <Encender_1_Led_2>
				HAL_Delay(tiempo*Refresh_ADC_Value());
 8001fb4:	1d3b      	adds	r3, r7, #4
 8001fb6:	881b      	ldrh	r3, [r3, #0]
 8001fb8:	0018      	movs	r0, r3
 8001fba:	f7fe feef 	bl	8000d9c <__aeabi_i2f>
 8001fbe:	1c04      	adds	r4, r0, #0
 8001fc0:	f7ff fa4e 	bl	8001460 <Refresh_ADC_Value>
 8001fc4:	1c03      	adds	r3, r0, #0
 8001fc6:	1c19      	adds	r1, r3, #0
 8001fc8:	1c20      	adds	r0, r4, #0
 8001fca:	f7fe fbf3 	bl	80007b4 <__aeabi_fmul>
 8001fce:	1c03      	adds	r3, r0, #0
 8001fd0:	1c18      	adds	r0, r3, #0
 8001fd2:	f7fe f921 	bl	8000218 <__aeabi_f2uiz>
 8001fd6:	0003      	movs	r3, r0
 8001fd8:	0018      	movs	r0, r3
 8001fda:	f000 fb2f 	bl	800263c <HAL_Delay>
			for(uint8_t i=l;i<=cantLeds;i++){
 8001fde:	197b      	adds	r3, r7, r5
 8001fe0:	781a      	ldrb	r2, [r3, #0]
 8001fe2:	197b      	adds	r3, r7, r5
 8001fe4:	3201      	adds	r2, #1
 8001fe6:	701a      	strb	r2, [r3, #0]
 8001fe8:	4b35      	ldr	r3, [pc, #212]	; (80020c0 <VolumenAbrir+0x18c>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	220d      	movs	r2, #13
 8001fee:	18ba      	adds	r2, r7, r2
 8001ff0:	7812      	ldrb	r2, [r2, #0]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d9d8      	bls.n	8001fa8 <VolumenAbrir+0x74>
			}
			for(uint8_t i=cantLeds;i>=l;i--){
 8001ff6:	230c      	movs	r3, #12
 8001ff8:	18fb      	adds	r3, r7, r3
 8001ffa:	4a31      	ldr	r2, [pc, #196]	; (80020c0 <VolumenAbrir+0x18c>)
 8001ffc:	7812      	ldrb	r2, [r2, #0]
 8001ffe:	701a      	strb	r2, [r3, #0]
 8002000:	e01f      	b.n	8002042 <VolumenAbrir+0x10e>
				Encender_1_Led_2(i);
 8002002:	250c      	movs	r5, #12
 8002004:	197b      	adds	r3, r7, r5
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	0018      	movs	r0, r3
 800200a:	f7ff fbf1 	bl	80017f0 <Encender_1_Led_2>
				HAL_Delay(tiempo*Refresh_ADC_Value());
 800200e:	1d3b      	adds	r3, r7, #4
 8002010:	881b      	ldrh	r3, [r3, #0]
 8002012:	0018      	movs	r0, r3
 8002014:	f7fe fec2 	bl	8000d9c <__aeabi_i2f>
 8002018:	1c04      	adds	r4, r0, #0
 800201a:	f7ff fa21 	bl	8001460 <Refresh_ADC_Value>
 800201e:	1c03      	adds	r3, r0, #0
 8002020:	1c19      	adds	r1, r3, #0
 8002022:	1c20      	adds	r0, r4, #0
 8002024:	f7fe fbc6 	bl	80007b4 <__aeabi_fmul>
 8002028:	1c03      	adds	r3, r0, #0
 800202a:	1c18      	adds	r0, r3, #0
 800202c:	f7fe f8f4 	bl	8000218 <__aeabi_f2uiz>
 8002030:	0003      	movs	r3, r0
 8002032:	0018      	movs	r0, r3
 8002034:	f000 fb02 	bl	800263c <HAL_Delay>
			for(uint8_t i=cantLeds;i>=l;i--){
 8002038:	197b      	adds	r3, r7, r5
 800203a:	781a      	ldrb	r2, [r3, #0]
 800203c:	197b      	adds	r3, r7, r5
 800203e:	3a01      	subs	r2, #1
 8002040:	701a      	strb	r2, [r3, #0]
 8002042:	230c      	movs	r3, #12
 8002044:	18fa      	adds	r2, r7, r3
 8002046:	230b      	movs	r3, #11
 8002048:	18fb      	adds	r3, r7, r3
 800204a:	7812      	ldrb	r2, [r2, #0]
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	429a      	cmp	r2, r3
 8002050:	d2d7      	bcs.n	8002002 <VolumenAbrir+0xce>
		for(uint8_t i=1;i<=cantLeds;i++){
 8002052:	210e      	movs	r1, #14
 8002054:	187b      	adds	r3, r7, r1
 8002056:	781a      	ldrb	r2, [r3, #0]
 8002058:	187b      	adds	r3, r7, r1
 800205a:	3201      	adds	r2, #1
 800205c:	701a      	strb	r2, [r3, #0]
 800205e:	4b18      	ldr	r3, [pc, #96]	; (80020c0 <VolumenAbrir+0x18c>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	220e      	movs	r2, #14
 8002064:	18ba      	adds	r2, r7, r2
 8002066:	7812      	ldrb	r2, [r2, #0]
 8002068:	429a      	cmp	r2, r3
 800206a:	d800      	bhi.n	800206e <VolumenAbrir+0x13a>
 800206c:	e77b      	b.n	8001f66 <VolumenAbrir+0x32>
			}
		}
		HAL_Delay(tiempo2*Refresh_ADC_Value());
 800206e:	1cbb      	adds	r3, r7, #2
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	0018      	movs	r0, r3
 8002074:	f7fe fe92 	bl	8000d9c <__aeabi_i2f>
 8002078:	1c04      	adds	r4, r0, #0
 800207a:	f7ff f9f1 	bl	8001460 <Refresh_ADC_Value>
 800207e:	1c03      	adds	r3, r0, #0
 8002080:	1c19      	adds	r1, r3, #0
 8002082:	1c20      	adds	r0, r4, #0
 8002084:	f7fe fb96 	bl	80007b4 <__aeabi_fmul>
 8002088:	1c03      	adds	r3, r0, #0
 800208a:	1c18      	adds	r0, r3, #0
 800208c:	f7fe f8c4 	bl	8000218 <__aeabi_f2uiz>
 8002090:	0003      	movs	r3, r0
 8002092:	0018      	movs	r0, r3
 8002094:	f000 fad2 	bl	800263c <HAL_Delay>
	for(uint8_t v=0;v<veces;v++){
 8002098:	210f      	movs	r1, #15
 800209a:	187b      	adds	r3, r7, r1
 800209c:	781a      	ldrb	r2, [r3, #0]
 800209e:	187b      	adds	r3, r7, r1
 80020a0:	3201      	adds	r2, #1
 80020a2:	701a      	strb	r2, [r3, #0]
 80020a4:	230f      	movs	r3, #15
 80020a6:	18fa      	adds	r2, r7, r3
 80020a8:	1dfb      	adds	r3, r7, #7
 80020aa:	7812      	ldrb	r2, [r2, #0]
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d200      	bcs.n	80020b4 <VolumenAbrir+0x180>
 80020b2:	e753      	b.n	8001f5c <VolumenAbrir+0x28>
	}
}
 80020b4:	46c0      	nop			; (mov r8, r8)
 80020b6:	46c0      	nop			; (mov r8, r8)
 80020b8:	46bd      	mov	sp, r7
 80020ba:	b004      	add	sp, #16
 80020bc:	bdb0      	pop	{r4, r5, r7, pc}
 80020be:	46c0      	nop			; (mov r8, r8)
 80020c0:	20000000 	.word	0x20000000

080020c4 <ArmarIzquierda>:
			}
		}
	}
}

void ArmarIzquierda(uint8_t veces, uint16_t tiempo, uint16_t tiempo2){
 80020c4:	b590      	push	{r4, r7, lr}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	0004      	movs	r4, r0
 80020cc:	0008      	movs	r0, r1
 80020ce:	0011      	movs	r1, r2
 80020d0:	1dfb      	adds	r3, r7, #7
 80020d2:	1c22      	adds	r2, r4, #0
 80020d4:	701a      	strb	r2, [r3, #0]
 80020d6:	1d3b      	adds	r3, r7, #4
 80020d8:	1c02      	adds	r2, r0, #0
 80020da:	801a      	strh	r2, [r3, #0]
 80020dc:	1cbb      	adds	r3, r7, #2
 80020de:	1c0a      	adds	r2, r1, #0
 80020e0:	801a      	strh	r2, [r3, #0]
	for(uint8_t v=0;v<veces;v++){
 80020e2:	230f      	movs	r3, #15
 80020e4:	18fb      	adds	r3, r7, r3
 80020e6:	2200      	movs	r2, #0
 80020e8:	701a      	strb	r2, [r3, #0]
 80020ea:	e0c1      	b.n	8002270 <ArmarIzquierda+0x1ac>

		uint8_t l=1;
 80020ec:	230e      	movs	r3, #14
 80020ee:	18fb      	adds	r3, r7, r3
 80020f0:	2201      	movs	r2, #1
 80020f2:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=cantLeds;i>=1;i--){
 80020f4:	230d      	movs	r3, #13
 80020f6:	18fb      	adds	r3, r7, r3
 80020f8:	4a64      	ldr	r2, [pc, #400]	; (800228c <ArmarIzquierda+0x1c8>)
 80020fa:	7812      	ldrb	r2, [r2, #0]
 80020fc:	701a      	strb	r2, [r3, #0]
 80020fe:	e096      	b.n	800222e <ArmarIzquierda+0x16a>
			for(uint8_t i=cantLeds;i>=l;i--){
 8002100:	230c      	movs	r3, #12
 8002102:	18fb      	adds	r3, r7, r3
 8002104:	4a61      	ldr	r2, [pc, #388]	; (800228c <ArmarIzquierda+0x1c8>)
 8002106:	7812      	ldrb	r2, [r2, #0]
 8002108:	701a      	strb	r2, [r3, #0]
 800210a:	e06b      	b.n	80021e4 <ArmarIzquierda+0x120>
				Encender_1_Led_4(i,l);
 800210c:	240e      	movs	r4, #14
 800210e:	193b      	adds	r3, r7, r4
 8002110:	781a      	ldrb	r2, [r3, #0]
 8002112:	230c      	movs	r3, #12
 8002114:	18fb      	adds	r3, r7, r3
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	0011      	movs	r1, r2
 800211a:	0018      	movs	r0, r3
 800211c:	f7ff fb9c 	bl	8001858 <Encender_1_Led_4>
				if(l<cantLeds/2){
 8002120:	4b5a      	ldr	r3, [pc, #360]	; (800228c <ArmarIzquierda+0x1c8>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	085b      	lsrs	r3, r3, #1
 8002126:	b2db      	uxtb	r3, r3
 8002128:	193a      	adds	r2, r7, r4
 800212a:	7812      	ldrb	r2, [r2, #0]
 800212c:	429a      	cmp	r2, r3
 800212e:	d215      	bcs.n	800215c <ArmarIzquierda+0x98>
					HAL_Delay(tiempo*Refresh_ADC_Value());
 8002130:	1d3b      	adds	r3, r7, #4
 8002132:	881b      	ldrh	r3, [r3, #0]
 8002134:	0018      	movs	r0, r3
 8002136:	f7fe fe31 	bl	8000d9c <__aeabi_i2f>
 800213a:	1c04      	adds	r4, r0, #0
 800213c:	f7ff f990 	bl	8001460 <Refresh_ADC_Value>
 8002140:	1c03      	adds	r3, r0, #0
 8002142:	1c19      	adds	r1, r3, #0
 8002144:	1c20      	adds	r0, r4, #0
 8002146:	f7fe fb35 	bl	80007b4 <__aeabi_fmul>
 800214a:	1c03      	adds	r3, r0, #0
 800214c:	1c18      	adds	r0, r3, #0
 800214e:	f7fe f863 	bl	8000218 <__aeabi_f2uiz>
 8002152:	0003      	movs	r3, r0
 8002154:	0018      	movs	r0, r3
 8002156:	f000 fa71 	bl	800263c <HAL_Delay>
 800215a:	e03d      	b.n	80021d8 <ArmarIzquierda+0x114>
				}else if(l>=cantLeds-2){
 800215c:	230e      	movs	r3, #14
 800215e:	18fb      	adds	r3, r7, r3
 8002160:	781a      	ldrb	r2, [r3, #0]
 8002162:	4b4a      	ldr	r3, [pc, #296]	; (800228c <ArmarIzquierda+0x1c8>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	3b02      	subs	r3, #2
 8002168:	429a      	cmp	r2, r3
 800216a:	db1b      	blt.n	80021a4 <ArmarIzquierda+0xe0>
					HAL_Delay(tiempo*Refresh_ADC_Value()*4);
 800216c:	1d3b      	adds	r3, r7, #4
 800216e:	881b      	ldrh	r3, [r3, #0]
 8002170:	0018      	movs	r0, r3
 8002172:	f7fe fe13 	bl	8000d9c <__aeabi_i2f>
 8002176:	1c04      	adds	r4, r0, #0
 8002178:	f7ff f972 	bl	8001460 <Refresh_ADC_Value>
 800217c:	1c03      	adds	r3, r0, #0
 800217e:	1c19      	adds	r1, r3, #0
 8002180:	1c20      	adds	r0, r4, #0
 8002182:	f7fe fb17 	bl	80007b4 <__aeabi_fmul>
 8002186:	1c03      	adds	r3, r0, #0
 8002188:	2181      	movs	r1, #129	; 0x81
 800218a:	05c9      	lsls	r1, r1, #23
 800218c:	1c18      	adds	r0, r3, #0
 800218e:	f7fe fb11 	bl	80007b4 <__aeabi_fmul>
 8002192:	1c03      	adds	r3, r0, #0
 8002194:	1c18      	adds	r0, r3, #0
 8002196:	f7fe f83f 	bl	8000218 <__aeabi_f2uiz>
 800219a:	0003      	movs	r3, r0
 800219c:	0018      	movs	r0, r3
 800219e:	f000 fa4d 	bl	800263c <HAL_Delay>
 80021a2:	e019      	b.n	80021d8 <ArmarIzquierda+0x114>
				}else{
					HAL_Delay(tiempo*Refresh_ADC_Value()*2);
 80021a4:	1d3b      	adds	r3, r7, #4
 80021a6:	881b      	ldrh	r3, [r3, #0]
 80021a8:	0018      	movs	r0, r3
 80021aa:	f7fe fdf7 	bl	8000d9c <__aeabi_i2f>
 80021ae:	1c04      	adds	r4, r0, #0
 80021b0:	f7ff f956 	bl	8001460 <Refresh_ADC_Value>
 80021b4:	1c03      	adds	r3, r0, #0
 80021b6:	1c19      	adds	r1, r3, #0
 80021b8:	1c20      	adds	r0, r4, #0
 80021ba:	f7fe fafb 	bl	80007b4 <__aeabi_fmul>
 80021be:	1c03      	adds	r3, r0, #0
 80021c0:	1c19      	adds	r1, r3, #0
 80021c2:	1c18      	adds	r0, r3, #0
 80021c4:	f7fe f840 	bl	8000248 <__aeabi_fadd>
 80021c8:	1c03      	adds	r3, r0, #0
 80021ca:	1c18      	adds	r0, r3, #0
 80021cc:	f7fe f824 	bl	8000218 <__aeabi_f2uiz>
 80021d0:	0003      	movs	r3, r0
 80021d2:	0018      	movs	r0, r3
 80021d4:	f000 fa32 	bl	800263c <HAL_Delay>
			for(uint8_t i=cantLeds;i>=l;i--){
 80021d8:	210c      	movs	r1, #12
 80021da:	187b      	adds	r3, r7, r1
 80021dc:	781a      	ldrb	r2, [r3, #0]
 80021de:	187b      	adds	r3, r7, r1
 80021e0:	3a01      	subs	r2, #1
 80021e2:	701a      	strb	r2, [r3, #0]
 80021e4:	230c      	movs	r3, #12
 80021e6:	18fa      	adds	r2, r7, r3
 80021e8:	210e      	movs	r1, #14
 80021ea:	187b      	adds	r3, r7, r1
 80021ec:	7812      	ldrb	r2, [r2, #0]
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d28b      	bcs.n	800210c <ArmarIzquierda+0x48>
				}
				//HAL_Delay(tiempo);
			}

			if(l>=cantLeds){
 80021f4:	4b25      	ldr	r3, [pc, #148]	; (800228c <ArmarIzquierda+0x1c8>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	187a      	adds	r2, r7, r1
 80021fa:	7812      	ldrb	r2, [r2, #0]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d303      	bcc.n	8002208 <ArmarIzquierda+0x144>
				l=1;
 8002200:	187b      	adds	r3, r7, r1
 8002202:	2201      	movs	r2, #1
 8002204:	701a      	strb	r2, [r3, #0]
 8002206:	e00c      	b.n	8002222 <ArmarIzquierda+0x15e>
			}else{
				ControlLeds(l, 1);
 8002208:	240e      	movs	r4, #14
 800220a:	193b      	adds	r3, r7, r4
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2101      	movs	r1, #1
 8002210:	0018      	movs	r0, r3
 8002212:	f7ff f94f 	bl	80014b4 <ControlLeds>
				l++;
 8002216:	0021      	movs	r1, r4
 8002218:	187b      	adds	r3, r7, r1
 800221a:	781a      	ldrb	r2, [r3, #0]
 800221c:	187b      	adds	r3, r7, r1
 800221e:	3201      	adds	r2, #1
 8002220:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=cantLeds;i>=1;i--){
 8002222:	210d      	movs	r1, #13
 8002224:	187b      	adds	r3, r7, r1
 8002226:	781a      	ldrb	r2, [r3, #0]
 8002228:	187b      	adds	r3, r7, r1
 800222a:	3a01      	subs	r2, #1
 800222c:	701a      	strb	r2, [r3, #0]
 800222e:	230d      	movs	r3, #13
 8002230:	18fb      	adds	r3, r7, r3
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d000      	beq.n	800223a <ArmarIzquierda+0x176>
 8002238:	e762      	b.n	8002100 <ArmarIzquierda+0x3c>
			}
		}

		HAL_Delay(tiempo2*Refresh_ADC_Value());
 800223a:	1cbb      	adds	r3, r7, #2
 800223c:	881b      	ldrh	r3, [r3, #0]
 800223e:	0018      	movs	r0, r3
 8002240:	f7fe fdac 	bl	8000d9c <__aeabi_i2f>
 8002244:	1c04      	adds	r4, r0, #0
 8002246:	f7ff f90b 	bl	8001460 <Refresh_ADC_Value>
 800224a:	1c03      	adds	r3, r0, #0
 800224c:	1c19      	adds	r1, r3, #0
 800224e:	1c20      	adds	r0, r4, #0
 8002250:	f7fe fab0 	bl	80007b4 <__aeabi_fmul>
 8002254:	1c03      	adds	r3, r0, #0
 8002256:	1c18      	adds	r0, r3, #0
 8002258:	f7fd ffde 	bl	8000218 <__aeabi_f2uiz>
 800225c:	0003      	movs	r3, r0
 800225e:	0018      	movs	r0, r3
 8002260:	f000 f9ec 	bl	800263c <HAL_Delay>
	for(uint8_t v=0;v<veces;v++){
 8002264:	210f      	movs	r1, #15
 8002266:	187b      	adds	r3, r7, r1
 8002268:	781a      	ldrb	r2, [r3, #0]
 800226a:	187b      	adds	r3, r7, r1
 800226c:	3201      	adds	r2, #1
 800226e:	701a      	strb	r2, [r3, #0]
 8002270:	230f      	movs	r3, #15
 8002272:	18fa      	adds	r2, r7, r3
 8002274:	1dfb      	adds	r3, r7, #7
 8002276:	7812      	ldrb	r2, [r2, #0]
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	429a      	cmp	r2, r3
 800227c:	d200      	bcs.n	8002280 <ArmarIzquierda+0x1bc>
 800227e:	e735      	b.n	80020ec <ArmarIzquierda+0x28>
	}
}
 8002280:	46c0      	nop			; (mov r8, r8)
 8002282:	46c0      	nop			; (mov r8, r8)
 8002284:	46bd      	mov	sp, r7
 8002286:	b005      	add	sp, #20
 8002288:	bd90      	pop	{r4, r7, pc}
 800228a:	46c0      	nop			; (mov r8, r8)
 800228c:	20000000 	.word	0x20000000

08002290 <Blink>:

void Blink(uint8_t veces, uint16_t tiempo){
 8002290:	b590      	push	{r4, r7, lr}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	0002      	movs	r2, r0
 8002298:	1dfb      	adds	r3, r7, #7
 800229a:	701a      	strb	r2, [r3, #0]
 800229c:	1d3b      	adds	r3, r7, #4
 800229e:	1c0a      	adds	r2, r1, #0
 80022a0:	801a      	strh	r2, [r3, #0]
	for(uint8_t v=0;v<veces;v++){
 80022a2:	230f      	movs	r3, #15
 80022a4:	18fb      	adds	r3, r7, r3
 80022a6:	2200      	movs	r2, #0
 80022a8:	701a      	strb	r2, [r3, #0]
 80022aa:	e066      	b.n	800237a <Blink+0xea>
		for(uint8_t i=1;i<=cantLeds;i++){
 80022ac:	230e      	movs	r3, #14
 80022ae:	18fb      	adds	r3, r7, r3
 80022b0:	2201      	movs	r2, #1
 80022b2:	701a      	strb	r2, [r3, #0]
 80022b4:	e00c      	b.n	80022d0 <Blink+0x40>
			ControlLeds(i, 1);
 80022b6:	240e      	movs	r4, #14
 80022b8:	193b      	adds	r3, r7, r4
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2101      	movs	r1, #1
 80022be:	0018      	movs	r0, r3
 80022c0:	f7ff f8f8 	bl	80014b4 <ControlLeds>
		for(uint8_t i=1;i<=cantLeds;i++){
 80022c4:	0021      	movs	r1, r4
 80022c6:	187b      	adds	r3, r7, r1
 80022c8:	781a      	ldrb	r2, [r3, #0]
 80022ca:	187b      	adds	r3, r7, r1
 80022cc:	3201      	adds	r2, #1
 80022ce:	701a      	strb	r2, [r3, #0]
 80022d0:	4b30      	ldr	r3, [pc, #192]	; (8002394 <Blink+0x104>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	220e      	movs	r2, #14
 80022d6:	18ba      	adds	r2, r7, r2
 80022d8:	7812      	ldrb	r2, [r2, #0]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d9eb      	bls.n	80022b6 <Blink+0x26>
		}
		HAL_Delay(tiempo*Refresh_ADC_Value());
 80022de:	1d3b      	adds	r3, r7, #4
 80022e0:	881b      	ldrh	r3, [r3, #0]
 80022e2:	0018      	movs	r0, r3
 80022e4:	f7fe fd5a 	bl	8000d9c <__aeabi_i2f>
 80022e8:	1c04      	adds	r4, r0, #0
 80022ea:	f7ff f8b9 	bl	8001460 <Refresh_ADC_Value>
 80022ee:	1c03      	adds	r3, r0, #0
 80022f0:	1c19      	adds	r1, r3, #0
 80022f2:	1c20      	adds	r0, r4, #0
 80022f4:	f7fe fa5e 	bl	80007b4 <__aeabi_fmul>
 80022f8:	1c03      	adds	r3, r0, #0
 80022fa:	1c18      	adds	r0, r3, #0
 80022fc:	f7fd ff8c 	bl	8000218 <__aeabi_f2uiz>
 8002300:	0003      	movs	r3, r0
 8002302:	0018      	movs	r0, r3
 8002304:	f000 f99a 	bl	800263c <HAL_Delay>
		for(uint8_t i=1;i<=cantLeds;i++){
 8002308:	230d      	movs	r3, #13
 800230a:	18fb      	adds	r3, r7, r3
 800230c:	2201      	movs	r2, #1
 800230e:	701a      	strb	r2, [r3, #0]
 8002310:	e00c      	b.n	800232c <Blink+0x9c>
			ControlLeds(i, 0);
 8002312:	240d      	movs	r4, #13
 8002314:	193b      	adds	r3, r7, r4
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	2100      	movs	r1, #0
 800231a:	0018      	movs	r0, r3
 800231c:	f7ff f8ca 	bl	80014b4 <ControlLeds>
		for(uint8_t i=1;i<=cantLeds;i++){
 8002320:	0021      	movs	r1, r4
 8002322:	187b      	adds	r3, r7, r1
 8002324:	781a      	ldrb	r2, [r3, #0]
 8002326:	187b      	adds	r3, r7, r1
 8002328:	3201      	adds	r2, #1
 800232a:	701a      	strb	r2, [r3, #0]
 800232c:	4b19      	ldr	r3, [pc, #100]	; (8002394 <Blink+0x104>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	220d      	movs	r2, #13
 8002332:	18ba      	adds	r2, r7, r2
 8002334:	7812      	ldrb	r2, [r2, #0]
 8002336:	429a      	cmp	r2, r3
 8002338:	d9eb      	bls.n	8002312 <Blink+0x82>
		}
		HAL_Delay((tiempo*Refresh_ADC_Value())/5);
 800233a:	1d3b      	adds	r3, r7, #4
 800233c:	881b      	ldrh	r3, [r3, #0]
 800233e:	0018      	movs	r0, r3
 8002340:	f7fe fd2c 	bl	8000d9c <__aeabi_i2f>
 8002344:	1c04      	adds	r4, r0, #0
 8002346:	f7ff f88b 	bl	8001460 <Refresh_ADC_Value>
 800234a:	1c03      	adds	r3, r0, #0
 800234c:	1c19      	adds	r1, r3, #0
 800234e:	1c20      	adds	r0, r4, #0
 8002350:	f7fe fa30 	bl	80007b4 <__aeabi_fmul>
 8002354:	1c03      	adds	r3, r0, #0
 8002356:	4910      	ldr	r1, [pc, #64]	; (8002398 <Blink+0x108>)
 8002358:	1c18      	adds	r0, r3, #0
 800235a:	f7fe f913 	bl	8000584 <__aeabi_fdiv>
 800235e:	1c03      	adds	r3, r0, #0
 8002360:	1c18      	adds	r0, r3, #0
 8002362:	f7fd ff59 	bl	8000218 <__aeabi_f2uiz>
 8002366:	0003      	movs	r3, r0
 8002368:	0018      	movs	r0, r3
 800236a:	f000 f967 	bl	800263c <HAL_Delay>
	for(uint8_t v=0;v<veces;v++){
 800236e:	210f      	movs	r1, #15
 8002370:	187b      	adds	r3, r7, r1
 8002372:	781a      	ldrb	r2, [r3, #0]
 8002374:	187b      	adds	r3, r7, r1
 8002376:	3201      	adds	r2, #1
 8002378:	701a      	strb	r2, [r3, #0]
 800237a:	230f      	movs	r3, #15
 800237c:	18fa      	adds	r2, r7, r3
 800237e:	1dfb      	adds	r3, r7, #7
 8002380:	7812      	ldrb	r2, [r2, #0]
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	429a      	cmp	r2, r3
 8002386:	d391      	bcc.n	80022ac <Blink+0x1c>
	}
}
 8002388:	46c0      	nop			; (mov r8, r8)
 800238a:	46c0      	nop			; (mov r8, r8)
 800238c:	46bd      	mov	sp, r7
 800238e:	b005      	add	sp, #20
 8002390:	bd90      	pop	{r4, r7, pc}
 8002392:	46c0      	nop			; (mov r8, r8)
 8002394:	20000000 	.word	0x20000000
 8002398:	40a00000 	.word	0x40a00000

0800239c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023a0:	b672      	cpsid	i
}
 80023a2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023a4:	e7fe      	b.n	80023a4 <Error_Handler+0x8>
	...

080023a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ae:	4b0f      	ldr	r3, [pc, #60]	; (80023ec <HAL_MspInit+0x44>)
 80023b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023b2:	4b0e      	ldr	r3, [pc, #56]	; (80023ec <HAL_MspInit+0x44>)
 80023b4:	2101      	movs	r1, #1
 80023b6:	430a      	orrs	r2, r1
 80023b8:	641a      	str	r2, [r3, #64]	; 0x40
 80023ba:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <HAL_MspInit+0x44>)
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	2201      	movs	r2, #1
 80023c0:	4013      	ands	r3, r2
 80023c2:	607b      	str	r3, [r7, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023c6:	4b09      	ldr	r3, [pc, #36]	; (80023ec <HAL_MspInit+0x44>)
 80023c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023ca:	4b08      	ldr	r3, [pc, #32]	; (80023ec <HAL_MspInit+0x44>)
 80023cc:	2180      	movs	r1, #128	; 0x80
 80023ce:	0549      	lsls	r1, r1, #21
 80023d0:	430a      	orrs	r2, r1
 80023d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80023d4:	4b05      	ldr	r3, [pc, #20]	; (80023ec <HAL_MspInit+0x44>)
 80023d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023d8:	2380      	movs	r3, #128	; 0x80
 80023da:	055b      	lsls	r3, r3, #21
 80023dc:	4013      	ands	r3, r2
 80023de:	603b      	str	r3, [r7, #0]
 80023e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023e2:	46c0      	nop			; (mov r8, r8)
 80023e4:	46bd      	mov	sp, r7
 80023e6:	b002      	add	sp, #8
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	46c0      	nop			; (mov r8, r8)
 80023ec:	40021000 	.word	0x40021000

080023f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80023f0:	b590      	push	{r4, r7, lr}
 80023f2:	b08b      	sub	sp, #44	; 0x2c
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f8:	2414      	movs	r4, #20
 80023fa:	193b      	adds	r3, r7, r4
 80023fc:	0018      	movs	r0, r3
 80023fe:	2314      	movs	r3, #20
 8002400:	001a      	movs	r2, r3
 8002402:	2100      	movs	r1, #0
 8002404:	f001 ffb0 	bl	8004368 <memset>
  if(hadc->Instance==ADC1)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a1b      	ldr	r2, [pc, #108]	; (800247c <HAL_ADC_MspInit+0x8c>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d130      	bne.n	8002474 <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002412:	4b1b      	ldr	r3, [pc, #108]	; (8002480 <HAL_ADC_MspInit+0x90>)
 8002414:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002416:	4b1a      	ldr	r3, [pc, #104]	; (8002480 <HAL_ADC_MspInit+0x90>)
 8002418:	2180      	movs	r1, #128	; 0x80
 800241a:	0349      	lsls	r1, r1, #13
 800241c:	430a      	orrs	r2, r1
 800241e:	641a      	str	r2, [r3, #64]	; 0x40
 8002420:	4b17      	ldr	r3, [pc, #92]	; (8002480 <HAL_ADC_MspInit+0x90>)
 8002422:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002424:	2380      	movs	r3, #128	; 0x80
 8002426:	035b      	lsls	r3, r3, #13
 8002428:	4013      	ands	r3, r2
 800242a:	613b      	str	r3, [r7, #16]
 800242c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800242e:	4b14      	ldr	r3, [pc, #80]	; (8002480 <HAL_ADC_MspInit+0x90>)
 8002430:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002432:	4b13      	ldr	r3, [pc, #76]	; (8002480 <HAL_ADC_MspInit+0x90>)
 8002434:	2102      	movs	r1, #2
 8002436:	430a      	orrs	r2, r1
 8002438:	635a      	str	r2, [r3, #52]	; 0x34
 800243a:	4b11      	ldr	r3, [pc, #68]	; (8002480 <HAL_ADC_MspInit+0x90>)
 800243c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800243e:	2202      	movs	r2, #2
 8002440:	4013      	ands	r3, r2
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB7     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002446:	193b      	adds	r3, r7, r4
 8002448:	2280      	movs	r2, #128	; 0x80
 800244a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800244c:	193b      	adds	r3, r7, r4
 800244e:	2203      	movs	r2, #3
 8002450:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002452:	193b      	adds	r3, r7, r4
 8002454:	2200      	movs	r2, #0
 8002456:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002458:	193b      	adds	r3, r7, r4
 800245a:	4a0a      	ldr	r2, [pc, #40]	; (8002484 <HAL_ADC_MspInit+0x94>)
 800245c:	0019      	movs	r1, r3
 800245e:	0010      	movs	r0, r2
 8002460:	f001 f902 	bl	8003668 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8002464:	2200      	movs	r2, #0
 8002466:	2100      	movs	r1, #0
 8002468:	200c      	movs	r0, #12
 800246a:	f001 f8cb 	bl	8003604 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800246e:	200c      	movs	r0, #12
 8002470:	f001 f8dd 	bl	800362e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002474:	46c0      	nop			; (mov r8, r8)
 8002476:	46bd      	mov	sp, r7
 8002478:	b00b      	add	sp, #44	; 0x2c
 800247a:	bd90      	pop	{r4, r7, pc}
 800247c:	40012400 	.word	0x40012400
 8002480:	40021000 	.word	0x40021000
 8002484:	50000400 	.word	0x50000400

08002488 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800248c:	e7fe      	b.n	800248c <NMI_Handler+0x4>

0800248e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002492:	e7fe      	b.n	8002492 <HardFault_Handler+0x4>

08002494 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002498:	46c0      	nop			; (mov r8, r8)
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024a2:	46c0      	nop			; (mov r8, r8)
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024ac:	f000 f8aa 	bl	8002604 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024b0:	46c0      	nop			; (mov r8, r8)
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
	...

080024b8 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80024bc:	4b03      	ldr	r3, [pc, #12]	; (80024cc <ADC1_IRQHandler+0x14>)
 80024be:	0018      	movs	r0, r3
 80024c0:	f000 fc4e 	bl	8002d60 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80024c4:	46c0      	nop			; (mov r8, r8)
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	46c0      	nop			; (mov r8, r8)
 80024cc:	2000002c 	.word	0x2000002c

080024d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024d4:	46c0      	nop			; (mov r8, r8)
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
	...

080024dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80024dc:	480d      	ldr	r0, [pc, #52]	; (8002514 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80024de:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80024e0:	f7ff fff6 	bl	80024d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024e4:	480c      	ldr	r0, [pc, #48]	; (8002518 <LoopForever+0x6>)
  ldr r1, =_edata
 80024e6:	490d      	ldr	r1, [pc, #52]	; (800251c <LoopForever+0xa>)
  ldr r2, =_sidata
 80024e8:	4a0d      	ldr	r2, [pc, #52]	; (8002520 <LoopForever+0xe>)
  movs r3, #0
 80024ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024ec:	e002      	b.n	80024f4 <LoopCopyDataInit>

080024ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024f2:	3304      	adds	r3, #4

080024f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024f8:	d3f9      	bcc.n	80024ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024fa:	4a0a      	ldr	r2, [pc, #40]	; (8002524 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024fc:	4c0a      	ldr	r4, [pc, #40]	; (8002528 <LoopForever+0x16>)
  movs r3, #0
 80024fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002500:	e001      	b.n	8002506 <LoopFillZerobss>

08002502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002504:	3204      	adds	r2, #4

08002506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002508:	d3fb      	bcc.n	8002502 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800250a:	f001 ff09 	bl	8004320 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800250e:	f7fe fddd 	bl	80010cc <main>

08002512 <LoopForever>:

LoopForever:
  b LoopForever
 8002512:	e7fe      	b.n	8002512 <LoopForever>
  ldr   r0, =_estack
 8002514:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800251c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002520:	08004504 	.word	0x08004504
  ldr r2, =_sbss
 8002524:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002528:	2000009c 	.word	0x2000009c

0800252c <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800252c:	e7fe      	b.n	800252c <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>
	...

08002530 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002536:	1dfb      	adds	r3, r7, #7
 8002538:	2200      	movs	r2, #0
 800253a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800253c:	4b0b      	ldr	r3, [pc, #44]	; (800256c <HAL_Init+0x3c>)
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	4b0a      	ldr	r3, [pc, #40]	; (800256c <HAL_Init+0x3c>)
 8002542:	2180      	movs	r1, #128	; 0x80
 8002544:	0049      	lsls	r1, r1, #1
 8002546:	430a      	orrs	r2, r1
 8002548:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800254a:	2003      	movs	r0, #3
 800254c:	f000 f810 	bl	8002570 <HAL_InitTick>
 8002550:	1e03      	subs	r3, r0, #0
 8002552:	d003      	beq.n	800255c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002554:	1dfb      	adds	r3, r7, #7
 8002556:	2201      	movs	r2, #1
 8002558:	701a      	strb	r2, [r3, #0]
 800255a:	e001      	b.n	8002560 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800255c:	f7ff ff24 	bl	80023a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002560:	1dfb      	adds	r3, r7, #7
 8002562:	781b      	ldrb	r3, [r3, #0]
}
 8002564:	0018      	movs	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	b002      	add	sp, #8
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40022000 	.word	0x40022000

08002570 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002570:	b590      	push	{r4, r7, lr}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002578:	230f      	movs	r3, #15
 800257a:	18fb      	adds	r3, r7, r3
 800257c:	2200      	movs	r2, #0
 800257e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002580:	4b1d      	ldr	r3, [pc, #116]	; (80025f8 <HAL_InitTick+0x88>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d02b      	beq.n	80025e0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002588:	4b1c      	ldr	r3, [pc, #112]	; (80025fc <HAL_InitTick+0x8c>)
 800258a:	681c      	ldr	r4, [r3, #0]
 800258c:	4b1a      	ldr	r3, [pc, #104]	; (80025f8 <HAL_InitTick+0x88>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	0019      	movs	r1, r3
 8002592:	23fa      	movs	r3, #250	; 0xfa
 8002594:	0098      	lsls	r0, r3, #2
 8002596:	f7fd fdb3 	bl	8000100 <__udivsi3>
 800259a:	0003      	movs	r3, r0
 800259c:	0019      	movs	r1, r3
 800259e:	0020      	movs	r0, r4
 80025a0:	f7fd fdae 	bl	8000100 <__udivsi3>
 80025a4:	0003      	movs	r3, r0
 80025a6:	0018      	movs	r0, r3
 80025a8:	f001 f851 	bl	800364e <HAL_SYSTICK_Config>
 80025ac:	1e03      	subs	r3, r0, #0
 80025ae:	d112      	bne.n	80025d6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b03      	cmp	r3, #3
 80025b4:	d80a      	bhi.n	80025cc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	2301      	movs	r3, #1
 80025ba:	425b      	negs	r3, r3
 80025bc:	2200      	movs	r2, #0
 80025be:	0018      	movs	r0, r3
 80025c0:	f001 f820 	bl	8003604 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025c4:	4b0e      	ldr	r3, [pc, #56]	; (8002600 <HAL_InitTick+0x90>)
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	e00d      	b.n	80025e8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80025cc:	230f      	movs	r3, #15
 80025ce:	18fb      	adds	r3, r7, r3
 80025d0:	2201      	movs	r2, #1
 80025d2:	701a      	strb	r2, [r3, #0]
 80025d4:	e008      	b.n	80025e8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80025d6:	230f      	movs	r3, #15
 80025d8:	18fb      	adds	r3, r7, r3
 80025da:	2201      	movs	r2, #1
 80025dc:	701a      	strb	r2, [r3, #0]
 80025de:	e003      	b.n	80025e8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80025e0:	230f      	movs	r3, #15
 80025e2:	18fb      	adds	r3, r7, r3
 80025e4:	2201      	movs	r2, #1
 80025e6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80025e8:	230f      	movs	r3, #15
 80025ea:	18fb      	adds	r3, r7, r3
 80025ec:	781b      	ldrb	r3, [r3, #0]
}
 80025ee:	0018      	movs	r0, r3
 80025f0:	46bd      	mov	sp, r7
 80025f2:	b005      	add	sp, #20
 80025f4:	bd90      	pop	{r4, r7, pc}
 80025f6:	46c0      	nop			; (mov r8, r8)
 80025f8:	2000000c 	.word	0x2000000c
 80025fc:	20000004 	.word	0x20000004
 8002600:	20000008 	.word	0x20000008

08002604 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002608:	4b05      	ldr	r3, [pc, #20]	; (8002620 <HAL_IncTick+0x1c>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	001a      	movs	r2, r3
 800260e:	4b05      	ldr	r3, [pc, #20]	; (8002624 <HAL_IncTick+0x20>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	18d2      	adds	r2, r2, r3
 8002614:	4b03      	ldr	r3, [pc, #12]	; (8002624 <HAL_IncTick+0x20>)
 8002616:	601a      	str	r2, [r3, #0]
}
 8002618:	46c0      	nop			; (mov r8, r8)
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	46c0      	nop			; (mov r8, r8)
 8002620:	2000000c 	.word	0x2000000c
 8002624:	20000098 	.word	0x20000098

08002628 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  return uwTick;
 800262c:	4b02      	ldr	r3, [pc, #8]	; (8002638 <HAL_GetTick+0x10>)
 800262e:	681b      	ldr	r3, [r3, #0]
}
 8002630:	0018      	movs	r0, r3
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	46c0      	nop			; (mov r8, r8)
 8002638:	20000098 	.word	0x20000098

0800263c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002644:	f7ff fff0 	bl	8002628 <HAL_GetTick>
 8002648:	0003      	movs	r3, r0
 800264a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	3301      	adds	r3, #1
 8002654:	d005      	beq.n	8002662 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002656:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <HAL_Delay+0x44>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	001a      	movs	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	189b      	adds	r3, r3, r2
 8002660:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002662:	46c0      	nop			; (mov r8, r8)
 8002664:	f7ff ffe0 	bl	8002628 <HAL_GetTick>
 8002668:	0002      	movs	r2, r0
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	429a      	cmp	r2, r3
 8002672:	d8f7      	bhi.n	8002664 <HAL_Delay+0x28>
  {
  }
}
 8002674:	46c0      	nop			; (mov r8, r8)
 8002676:	46c0      	nop			; (mov r8, r8)
 8002678:	46bd      	mov	sp, r7
 800267a:	b004      	add	sp, #16
 800267c:	bd80      	pop	{r7, pc}
 800267e:	46c0      	nop			; (mov r8, r8)
 8002680:	2000000c 	.word	0x2000000c

08002684 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a05      	ldr	r2, [pc, #20]	; (80026a8 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002694:	401a      	ands	r2, r3
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	431a      	orrs	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	601a      	str	r2, [r3, #0]
}
 800269e:	46c0      	nop			; (mov r8, r8)
 80026a0:	46bd      	mov	sp, r7
 80026a2:	b002      	add	sp, #8
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	46c0      	nop			; (mov r8, r8)
 80026a8:	fe3fffff 	.word	0xfe3fffff

080026ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	23e0      	movs	r3, #224	; 0xe0
 80026ba:	045b      	lsls	r3, r3, #17
 80026bc:	4013      	ands	r3, r2
}
 80026be:	0018      	movs	r0, r3
 80026c0:	46bd      	mov	sp, r7
 80026c2:	b002      	add	sp, #8
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b084      	sub	sp, #16
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	60f8      	str	r0, [r7, #12]
 80026ce:	60b9      	str	r1, [r7, #8]
 80026d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	2104      	movs	r1, #4
 80026da:	400a      	ands	r2, r1
 80026dc:	2107      	movs	r1, #7
 80026de:	4091      	lsls	r1, r2
 80026e0:	000a      	movs	r2, r1
 80026e2:	43d2      	mvns	r2, r2
 80026e4:	401a      	ands	r2, r3
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	2104      	movs	r1, #4
 80026ea:	400b      	ands	r3, r1
 80026ec:	6879      	ldr	r1, [r7, #4]
 80026ee:	4099      	lsls	r1, r3
 80026f0:	000b      	movs	r3, r1
 80026f2:	431a      	orrs	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80026f8:	46c0      	nop			; (mov r8, r8)
 80026fa:	46bd      	mov	sp, r7
 80026fc:	b004      	add	sp, #16
 80026fe:	bd80      	pop	{r7, pc}

08002700 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	2104      	movs	r1, #4
 8002712:	400a      	ands	r2, r1
 8002714:	2107      	movs	r1, #7
 8002716:	4091      	lsls	r1, r2
 8002718:	000a      	movs	r2, r1
 800271a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	2104      	movs	r1, #4
 8002720:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002722:	40da      	lsrs	r2, r3
 8002724:	0013      	movs	r3, r2
}
 8002726:	0018      	movs	r0, r3
 8002728:	46bd      	mov	sp, r7
 800272a:	b002      	add	sp, #8
 800272c:	bd80      	pop	{r7, pc}

0800272e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b082      	sub	sp, #8
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68da      	ldr	r2, [r3, #12]
 800273a:	23c0      	movs	r3, #192	; 0xc0
 800273c:	011b      	lsls	r3, r3, #4
 800273e:	4013      	ands	r3, r2
 8002740:	d101      	bne.n	8002746 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002742:	2301      	movs	r3, #1
 8002744:	e000      	b.n	8002748 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002746:	2300      	movs	r3, #0
}
 8002748:	0018      	movs	r0, r3
 800274a:	46bd      	mov	sp, r7
 800274c:	b002      	add	sp, #8
 800274e:	bd80      	pop	{r7, pc}

08002750 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002760:	68ba      	ldr	r2, [r7, #8]
 8002762:	211f      	movs	r1, #31
 8002764:	400a      	ands	r2, r1
 8002766:	210f      	movs	r1, #15
 8002768:	4091      	lsls	r1, r2
 800276a:	000a      	movs	r2, r1
 800276c:	43d2      	mvns	r2, r2
 800276e:	401a      	ands	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	0e9b      	lsrs	r3, r3, #26
 8002774:	210f      	movs	r1, #15
 8002776:	4019      	ands	r1, r3
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	201f      	movs	r0, #31
 800277c:	4003      	ands	r3, r0
 800277e:	4099      	lsls	r1, r3
 8002780:	000b      	movs	r3, r1
 8002782:	431a      	orrs	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002788:	46c0      	nop			; (mov r8, r8)
 800278a:	46bd      	mov	sp, r7
 800278c:	b004      	add	sp, #16
 800278e:	bd80      	pop	{r7, pc}

08002790 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	035b      	lsls	r3, r3, #13
 80027a2:	0b5b      	lsrs	r3, r3, #13
 80027a4:	431a      	orrs	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027aa:	46c0      	nop			; (mov r8, r8)
 80027ac:	46bd      	mov	sp, r7
 80027ae:	b002      	add	sp, #8
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b082      	sub	sp, #8
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
 80027ba:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	0352      	lsls	r2, r2, #13
 80027c4:	0b52      	lsrs	r2, r2, #13
 80027c6:	43d2      	mvns	r2, r2
 80027c8:	401a      	ands	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027ce:	46c0      	nop			; (mov r8, r8)
 80027d0:	46bd      	mov	sp, r7
 80027d2:	b002      	add	sp, #8
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b082      	sub	sp, #8
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	2203      	movs	r2, #3
 80027e4:	4013      	ands	r3, r2
}
 80027e6:	0018      	movs	r0, r3
 80027e8:	46bd      	mov	sp, r7
 80027ea:	b002      	add	sp, #8
 80027ec:	bd80      	pop	{r7, pc}
	...

080027f0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	68ba      	ldr	r2, [r7, #8]
 8002802:	0212      	lsls	r2, r2, #8
 8002804:	43d2      	mvns	r2, r2
 8002806:	401a      	ands	r2, r3
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	021b      	lsls	r3, r3, #8
 800280c:	6879      	ldr	r1, [r7, #4]
 800280e:	400b      	ands	r3, r1
 8002810:	4904      	ldr	r1, [pc, #16]	; (8002824 <LL_ADC_SetChannelSamplingTime+0x34>)
 8002812:	400b      	ands	r3, r1
 8002814:	431a      	orrs	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800281a:	46c0      	nop			; (mov r8, r8)
 800281c:	46bd      	mov	sp, r7
 800281e:	b004      	add	sp, #16
 8002820:	bd80      	pop	{r7, pc}
 8002822:	46c0      	nop			; (mov r8, r8)
 8002824:	07ffff00 	.word	0x07ffff00

08002828 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	4a05      	ldr	r2, [pc, #20]	; (800284c <LL_ADC_EnableInternalRegulator+0x24>)
 8002836:	4013      	ands	r3, r2
 8002838:	2280      	movs	r2, #128	; 0x80
 800283a:	0552      	lsls	r2, r2, #21
 800283c:	431a      	orrs	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002842:	46c0      	nop			; (mov r8, r8)
 8002844:	46bd      	mov	sp, r7
 8002846:	b002      	add	sp, #8
 8002848:	bd80      	pop	{r7, pc}
 800284a:	46c0      	nop			; (mov r8, r8)
 800284c:	6fffffe8 	.word	0x6fffffe8

08002850 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	2380      	movs	r3, #128	; 0x80
 800285e:	055b      	lsls	r3, r3, #21
 8002860:	401a      	ands	r2, r3
 8002862:	2380      	movs	r3, #128	; 0x80
 8002864:	055b      	lsls	r3, r3, #21
 8002866:	429a      	cmp	r2, r3
 8002868:	d101      	bne.n	800286e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800286a:	2301      	movs	r3, #1
 800286c:	e000      	b.n	8002870 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800286e:	2300      	movs	r3, #0
}
 8002870:	0018      	movs	r0, r3
 8002872:	46bd      	mov	sp, r7
 8002874:	b002      	add	sp, #8
 8002876:	bd80      	pop	{r7, pc}

08002878 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	4a04      	ldr	r2, [pc, #16]	; (8002898 <LL_ADC_Enable+0x20>)
 8002886:	4013      	ands	r3, r2
 8002888:	2201      	movs	r2, #1
 800288a:	431a      	orrs	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002890:	46c0      	nop			; (mov r8, r8)
 8002892:	46bd      	mov	sp, r7
 8002894:	b002      	add	sp, #8
 8002896:	bd80      	pop	{r7, pc}
 8002898:	7fffffe8 	.word	0x7fffffe8

0800289c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	2201      	movs	r2, #1
 80028aa:	4013      	ands	r3, r2
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d101      	bne.n	80028b4 <LL_ADC_IsEnabled+0x18>
 80028b0:	2301      	movs	r3, #1
 80028b2:	e000      	b.n	80028b6 <LL_ADC_IsEnabled+0x1a>
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	0018      	movs	r0, r3
 80028b8:	46bd      	mov	sp, r7
 80028ba:	b002      	add	sp, #8
 80028bc:	bd80      	pop	{r7, pc}
	...

080028c0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	4a04      	ldr	r2, [pc, #16]	; (80028e0 <LL_ADC_REG_StartConversion+0x20>)
 80028ce:	4013      	ands	r3, r2
 80028d0:	2204      	movs	r2, #4
 80028d2:	431a      	orrs	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80028d8:	46c0      	nop			; (mov r8, r8)
 80028da:	46bd      	mov	sp, r7
 80028dc:	b002      	add	sp, #8
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	7fffffe8 	.word	0x7fffffe8

080028e4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	2204      	movs	r2, #4
 80028f2:	4013      	ands	r3, r2
 80028f4:	2b04      	cmp	r3, #4
 80028f6:	d101      	bne.n	80028fc <LL_ADC_REG_IsConversionOngoing+0x18>
 80028f8:	2301      	movs	r3, #1
 80028fa:	e000      	b.n	80028fe <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	0018      	movs	r0, r3
 8002900:	46bd      	mov	sp, r7
 8002902:	b002      	add	sp, #8
 8002904:	bd80      	pop	{r7, pc}
	...

08002908 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b088      	sub	sp, #32
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002910:	231f      	movs	r3, #31
 8002912:	18fb      	adds	r3, r7, r3
 8002914:	2200      	movs	r2, #0
 8002916:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8002918:	2300      	movs	r3, #0
 800291a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 800291c:	2300      	movs	r3, #0
 800291e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002920:	2300      	movs	r3, #0
 8002922:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e17f      	b.n	8002c2e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10a      	bne.n	800294c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	0018      	movs	r0, r3
 800293a:	f7ff fd59 	bl	80023f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2254      	movs	r2, #84	; 0x54
 8002948:	2100      	movs	r1, #0
 800294a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	0018      	movs	r0, r3
 8002952:	f7ff ff7d 	bl	8002850 <LL_ADC_IsInternalRegulatorEnabled>
 8002956:	1e03      	subs	r3, r0, #0
 8002958:	d115      	bne.n	8002986 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	0018      	movs	r0, r3
 8002960:	f7ff ff62 	bl	8002828 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002964:	4bb4      	ldr	r3, [pc, #720]	; (8002c38 <HAL_ADC_Init+0x330>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	49b4      	ldr	r1, [pc, #720]	; (8002c3c <HAL_ADC_Init+0x334>)
 800296a:	0018      	movs	r0, r3
 800296c:	f7fd fbc8 	bl	8000100 <__udivsi3>
 8002970:	0003      	movs	r3, r0
 8002972:	3301      	adds	r3, #1
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002978:	e002      	b.n	8002980 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	3b01      	subs	r3, #1
 800297e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1f9      	bne.n	800297a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	0018      	movs	r0, r3
 800298c:	f7ff ff60 	bl	8002850 <LL_ADC_IsInternalRegulatorEnabled>
 8002990:	1e03      	subs	r3, r0, #0
 8002992:	d10f      	bne.n	80029b4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002998:	2210      	movs	r2, #16
 800299a:	431a      	orrs	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a4:	2201      	movs	r2, #1
 80029a6:	431a      	orrs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80029ac:	231f      	movs	r3, #31
 80029ae:	18fb      	adds	r3, r7, r3
 80029b0:	2201      	movs	r2, #1
 80029b2:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	0018      	movs	r0, r3
 80029ba:	f7ff ff93 	bl	80028e4 <LL_ADC_REG_IsConversionOngoing>
 80029be:	0003      	movs	r3, r0
 80029c0:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c6:	2210      	movs	r2, #16
 80029c8:	4013      	ands	r3, r2
 80029ca:	d000      	beq.n	80029ce <HAL_ADC_Init+0xc6>
 80029cc:	e122      	b.n	8002c14 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d000      	beq.n	80029d6 <HAL_ADC_Init+0xce>
 80029d4:	e11e      	b.n	8002c14 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029da:	4a99      	ldr	r2, [pc, #612]	; (8002c40 <HAL_ADC_Init+0x338>)
 80029dc:	4013      	ands	r3, r2
 80029de:	2202      	movs	r2, #2
 80029e0:	431a      	orrs	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	0018      	movs	r0, r3
 80029ec:	f7ff ff56 	bl	800289c <LL_ADC_IsEnabled>
 80029f0:	1e03      	subs	r3, r0, #0
 80029f2:	d000      	beq.n	80029f6 <HAL_ADC_Init+0xee>
 80029f4:	e0ad      	b.n	8002b52 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	7e1b      	ldrb	r3, [r3, #24]
 80029fe:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002a00:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	7e5b      	ldrb	r3, [r3, #25]
 8002a06:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002a08:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	7e9b      	ldrb	r3, [r3, #26]
 8002a0e:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002a10:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d002      	beq.n	8002a20 <HAL_ADC_Init+0x118>
 8002a1a:	2380      	movs	r3, #128	; 0x80
 8002a1c:	015b      	lsls	r3, r3, #5
 8002a1e:	e000      	b.n	8002a22 <HAL_ADC_Init+0x11a>
 8002a20:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002a22:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002a28:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	da04      	bge.n	8002a3c <HAL_ADC_Init+0x134>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	085b      	lsrs	r3, r3, #1
 8002a3a:	e001      	b.n	8002a40 <HAL_ADC_Init+0x138>
 8002a3c:	2380      	movs	r3, #128	; 0x80
 8002a3e:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8002a40:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	212c      	movs	r1, #44	; 0x2c
 8002a46:	5c5b      	ldrb	r3, [r3, r1]
 8002a48:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002a4a:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2220      	movs	r2, #32
 8002a56:	5c9b      	ldrb	r3, [r3, r2]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d115      	bne.n	8002a88 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	7e9b      	ldrb	r3, [r3, #26]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d105      	bne.n	8002a70 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	2280      	movs	r2, #128	; 0x80
 8002a68:	0252      	lsls	r2, r2, #9
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
 8002a6e:	e00b      	b.n	8002a88 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a74:	2220      	movs	r2, #32
 8002a76:	431a      	orrs	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a80:	2201      	movs	r2, #1
 8002a82:	431a      	orrs	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00a      	beq.n	8002aa6 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a94:	23e0      	movs	r3, #224	; 0xe0
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	4a65      	ldr	r2, [pc, #404]	; (8002c44 <HAL_ADC_Init+0x33c>)
 8002aae:	4013      	ands	r3, r2
 8002ab0:	0019      	movs	r1, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	0f9b      	lsrs	r3, r3, #30
 8002ac2:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	223c      	movs	r2, #60	; 0x3c
 8002ad4:	5c9b      	ldrb	r3, [r3, r2]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d111      	bne.n	8002afe <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	0f9b      	lsrs	r3, r3, #30
 8002ae0:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002ae6:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002aec:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002af2:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	2201      	movs	r2, #1
 8002afa:	4313      	orrs	r3, r2
 8002afc:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	4a50      	ldr	r2, [pc, #320]	; (8002c48 <HAL_ADC_Init+0x340>)
 8002b06:	4013      	ands	r3, r2
 8002b08:	0019      	movs	r1, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	23c0      	movs	r3, #192	; 0xc0
 8002b1a:	061b      	lsls	r3, r3, #24
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d018      	beq.n	8002b52 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002b24:	2380      	movs	r3, #128	; 0x80
 8002b26:	05db      	lsls	r3, r3, #23
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d012      	beq.n	8002b52 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002b30:	2380      	movs	r3, #128	; 0x80
 8002b32:	061b      	lsls	r3, r3, #24
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d00c      	beq.n	8002b52 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002b38:	4b44      	ldr	r3, [pc, #272]	; (8002c4c <HAL_ADC_Init+0x344>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a44      	ldr	r2, [pc, #272]	; (8002c50 <HAL_ADC_Init+0x348>)
 8002b3e:	4013      	ands	r3, r2
 8002b40:	0019      	movs	r1, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685a      	ldr	r2, [r3, #4]
 8002b46:	23f0      	movs	r3, #240	; 0xf0
 8002b48:	039b      	lsls	r3, r3, #14
 8002b4a:	401a      	ands	r2, r3
 8002b4c:	4b3f      	ldr	r3, [pc, #252]	; (8002c4c <HAL_ADC_Init+0x344>)
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6818      	ldr	r0, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b5a:	001a      	movs	r2, r3
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	f7ff fdb2 	bl	80026c6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6818      	ldr	r0, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b6a:	493a      	ldr	r1, [pc, #232]	; (8002c54 <HAL_ADC_Init+0x34c>)
 8002b6c:	001a      	movs	r2, r3
 8002b6e:	f7ff fdaa 	bl	80026c6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d109      	bne.n	8002b8e <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2110      	movs	r1, #16
 8002b86:	4249      	negs	r1, r1
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	629a      	str	r2, [r3, #40]	; 0x28
 8002b8c:	e018      	b.n	8002bc0 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691a      	ldr	r2, [r3, #16]
 8002b92:	2380      	movs	r3, #128	; 0x80
 8002b94:	039b      	lsls	r3, r3, #14
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d112      	bne.n	8002bc0 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	69db      	ldr	r3, [r3, #28]
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	221c      	movs	r2, #28
 8002baa:	4013      	ands	r3, r2
 8002bac:	2210      	movs	r2, #16
 8002bae:	4252      	negs	r2, r2
 8002bb0:	409a      	lsls	r2, r3
 8002bb2:	0011      	movs	r1, r2
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	0018      	movs	r0, r3
 8002bc8:	f7ff fd9a 	bl	8002700 <LL_ADC_GetSamplingTimeCommonChannels>
 8002bcc:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d10b      	bne.n	8002bee <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be0:	2203      	movs	r2, #3
 8002be2:	4393      	bics	r3, r2
 8002be4:	2201      	movs	r2, #1
 8002be6:	431a      	orrs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002bec:	e01c      	b.n	8002c28 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf2:	2212      	movs	r2, #18
 8002bf4:	4393      	bics	r3, r2
 8002bf6:	2210      	movs	r2, #16
 8002bf8:	431a      	orrs	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c02:	2201      	movs	r2, #1
 8002c04:	431a      	orrs	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002c0a:	231f      	movs	r3, #31
 8002c0c:	18fb      	adds	r3, r7, r3
 8002c0e:	2201      	movs	r2, #1
 8002c10:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002c12:	e009      	b.n	8002c28 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c18:	2210      	movs	r2, #16
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002c20:	231f      	movs	r3, #31
 8002c22:	18fb      	adds	r3, r7, r3
 8002c24:	2201      	movs	r2, #1
 8002c26:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002c28:	231f      	movs	r3, #31
 8002c2a:	18fb      	adds	r3, r7, r3
 8002c2c:	781b      	ldrb	r3, [r3, #0]
}
 8002c2e:	0018      	movs	r0, r3
 8002c30:	46bd      	mov	sp, r7
 8002c32:	b008      	add	sp, #32
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	46c0      	nop			; (mov r8, r8)
 8002c38:	20000004 	.word	0x20000004
 8002c3c:	00030d40 	.word	0x00030d40
 8002c40:	fffffefd 	.word	0xfffffefd
 8002c44:	fffe0201 	.word	0xfffe0201
 8002c48:	1ffffc02 	.word	0x1ffffc02
 8002c4c:	40012708 	.word	0x40012708
 8002c50:	ffc3ffff 	.word	0xffc3ffff
 8002c54:	07ffff04 	.word	0x07ffff04

08002c58 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002c58:	b5b0      	push	{r4, r5, r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	0018      	movs	r0, r3
 8002c66:	f7ff fe3d 	bl	80028e4 <LL_ADC_REG_IsConversionOngoing>
 8002c6a:	1e03      	subs	r3, r0, #0
 8002c6c:	d15f      	bne.n	8002d2e <HAL_ADC_Start_IT+0xd6>
  {
    __HAL_LOCK(hadc);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2254      	movs	r2, #84	; 0x54
 8002c72:	5c9b      	ldrb	r3, [r3, r2]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d101      	bne.n	8002c7c <HAL_ADC_Start_IT+0x24>
 8002c78:	2302      	movs	r3, #2
 8002c7a:	e05f      	b.n	8002d3c <HAL_ADC_Start_IT+0xe4>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2254      	movs	r2, #84	; 0x54
 8002c80:	2101      	movs	r1, #1
 8002c82:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002c84:	250f      	movs	r5, #15
 8002c86:	197c      	adds	r4, r7, r5
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	0018      	movs	r0, r3
 8002c8c:	f000 fb68 	bl	8003360 <ADC_Enable>
 8002c90:	0003      	movs	r3, r0
 8002c92:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002c94:	197b      	adds	r3, r7, r5
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d143      	bne.n	8002d24 <HAL_ADC_Start_IT+0xcc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca0:	4a28      	ldr	r2, [pc, #160]	; (8002d44 <HAL_ADC_Start_IT+0xec>)
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	2280      	movs	r2, #128	; 0x80
 8002ca6:	0052      	lsls	r2, r2, #1
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY);


      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	221c      	movs	r2, #28
 8002cba:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2254      	movs	r2, #84	; 0x54
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	5499      	strb	r1, [r3, r2]

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	211c      	movs	r1, #28
 8002cd0:	438a      	bics	r2, r1
 8002cd2:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	d108      	bne.n	8002cee <HAL_ADC_Start_IT+0x96>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2108      	movs	r1, #8
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	605a      	str	r2, [r3, #4]
          break;
 8002cec:	e008      	b.n	8002d00 <HAL_ADC_Start_IT+0xa8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	685a      	ldr	r2, [r3, #4]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2104      	movs	r1, #4
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	605a      	str	r2, [r3, #4]
          break;
 8002cfe:	46c0      	nop			; (mov r8, r8)

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d107      	bne.n	8002d18 <HAL_ADC_Start_IT+0xc0>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2110      	movs	r1, #16
 8002d14:	430a      	orrs	r2, r1
 8002d16:	605a      	str	r2, [r3, #4]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	f7ff fdcf 	bl	80028c0 <LL_ADC_REG_StartConversion>
 8002d22:	e008      	b.n	8002d36 <HAL_ADC_Start_IT+0xde>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2254      	movs	r2, #84	; 0x54
 8002d28:	2100      	movs	r1, #0
 8002d2a:	5499      	strb	r1, [r3, r2]
 8002d2c:	e003      	b.n	8002d36 <HAL_ADC_Start_IT+0xde>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002d2e:	230f      	movs	r3, #15
 8002d30:	18fb      	adds	r3, r7, r3
 8002d32:	2202      	movs	r2, #2
 8002d34:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002d36:	230f      	movs	r3, #15
 8002d38:	18fb      	adds	r3, r7, r3
 8002d3a:	781b      	ldrb	r3, [r3, #0]
}
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	b004      	add	sp, #16
 8002d42:	bdb0      	pop	{r4, r5, r7, pc}
 8002d44:	fffff0fe 	.word	0xfffff0fe

08002d48 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002d56:	0018      	movs	r0, r3
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	b002      	add	sp, #8
 8002d5c:	bd80      	pop	{r7, pc}
	...

08002d60 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002d68:	2300      	movs	r3, #0
 8002d6a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	2202      	movs	r2, #2
 8002d80:	4013      	ands	r3, r2
 8002d82:	d017      	beq.n	8002db4 <HAL_ADC_IRQHandler+0x54>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2202      	movs	r2, #2
 8002d88:	4013      	ands	r3, r2
 8002d8a:	d013      	beq.n	8002db4 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d90:	2210      	movs	r2, #16
 8002d92:	4013      	ands	r3, r2
 8002d94:	d106      	bne.n	8002da4 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9a:	2280      	movs	r2, #128	; 0x80
 8002d9c:	0112      	lsls	r2, r2, #4
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	0018      	movs	r0, r3
 8002da8:	f000 fb70 	bl	800348c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2202      	movs	r2, #2
 8002db2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	2204      	movs	r2, #4
 8002db8:	4013      	ands	r3, r2
 8002dba:	d003      	beq.n	8002dc4 <HAL_ADC_IRQHandler+0x64>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2204      	movs	r2, #4
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	d107      	bne.n	8002dd4 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	2208      	movs	r2, #8
 8002dc8:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002dca:	d04d      	beq.n	8002e68 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2208      	movs	r2, #8
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	d049      	beq.n	8002e68 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd8:	2210      	movs	r2, #16
 8002dda:	4013      	ands	r3, r2
 8002ddc:	d106      	bne.n	8002dec <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de2:	2280      	movs	r2, #128	; 0x80
 8002de4:	0092      	lsls	r2, r2, #2
 8002de6:	431a      	orrs	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	0018      	movs	r0, r3
 8002df2:	f7ff fc9c 	bl	800272e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002df6:	1e03      	subs	r3, r0, #0
 8002df8:	d02e      	beq.n	8002e58 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	7e9b      	ldrb	r3, [r3, #26]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d12a      	bne.n	8002e58 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2208      	movs	r2, #8
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	2b08      	cmp	r3, #8
 8002e0e:	d123      	bne.n	8002e58 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	0018      	movs	r0, r3
 8002e16:	f7ff fd65 	bl	80028e4 <LL_ADC_REG_IsConversionOngoing>
 8002e1a:	1e03      	subs	r3, r0, #0
 8002e1c:	d110      	bne.n	8002e40 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	210c      	movs	r1, #12
 8002e2a:	438a      	bics	r2, r1
 8002e2c:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e32:	4a56      	ldr	r2, [pc, #344]	; (8002f8c <HAL_ADC_IRQHandler+0x22c>)
 8002e34:	4013      	ands	r3, r2
 8002e36:	2201      	movs	r2, #1
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	659a      	str	r2, [r3, #88]	; 0x58
 8002e3e:	e00b      	b.n	8002e58 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e44:	2220      	movs	r2, #32
 8002e46:	431a      	orrs	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e50:	2201      	movs	r2, #1
 8002e52:	431a      	orrs	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	f7fe fad6 	bl	800140c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	220c      	movs	r2, #12
 8002e66:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	2280      	movs	r2, #128	; 0x80
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	d012      	beq.n	8002e96 <HAL_ADC_IRQHandler+0x136>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2280      	movs	r2, #128	; 0x80
 8002e74:	4013      	ands	r3, r2
 8002e76:	d00e      	beq.n	8002e96 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e7c:	2280      	movs	r2, #128	; 0x80
 8002e7e:	0252      	lsls	r2, r2, #9
 8002e80:	431a      	orrs	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	0018      	movs	r0, r3
 8002e8a:	f000 f881 	bl	8002f90 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2280      	movs	r2, #128	; 0x80
 8002e94:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	2380      	movs	r3, #128	; 0x80
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	d014      	beq.n	8002eca <HAL_ADC_IRQHandler+0x16a>
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	2380      	movs	r3, #128	; 0x80
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	d00f      	beq.n	8002eca <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eae:	2280      	movs	r2, #128	; 0x80
 8002eb0:	0292      	lsls	r2, r2, #10
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	0018      	movs	r0, r3
 8002ebc:	f000 fad6 	bl	800346c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2280      	movs	r2, #128	; 0x80
 8002ec6:	0052      	lsls	r2, r2, #1
 8002ec8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	2380      	movs	r3, #128	; 0x80
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	d014      	beq.n	8002efe <HAL_ADC_IRQHandler+0x19e>
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	2380      	movs	r3, #128	; 0x80
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4013      	ands	r3, r2
 8002edc:	d00f      	beq.n	8002efe <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee2:	2280      	movs	r2, #128	; 0x80
 8002ee4:	02d2      	lsls	r2, r2, #11
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	0018      	movs	r0, r3
 8002ef0:	f000 fac4 	bl	800347c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2280      	movs	r2, #128	; 0x80
 8002efa:	0092      	lsls	r2, r2, #2
 8002efc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	2210      	movs	r2, #16
 8002f02:	4013      	ands	r3, r2
 8002f04:	d02b      	beq.n	8002f5e <HAL_ADC_IRQHandler+0x1fe>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2210      	movs	r2, #16
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	d027      	beq.n	8002f5e <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d102      	bne.n	8002f1c <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8002f16:	2301      	movs	r3, #1
 8002f18:	617b      	str	r3, [r7, #20]
 8002f1a:	e008      	b.n	8002f2e <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	0018      	movs	r0, r3
 8002f22:	f7ff fc58 	bl	80027d6 <LL_ADC_REG_GetDMATransfer>
 8002f26:	1e03      	subs	r3, r0, #0
 8002f28:	d001      	beq.n	8002f2e <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d110      	bne.n	8002f56 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f38:	2280      	movs	r2, #128	; 0x80
 8002f3a:	00d2      	lsls	r2, r2, #3
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f46:	2202      	movs	r2, #2
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	0018      	movs	r0, r3
 8002f52:	f000 f825 	bl	8002fa0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2210      	movs	r2, #16
 8002f5c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	2380      	movs	r3, #128	; 0x80
 8002f62:	019b      	lsls	r3, r3, #6
 8002f64:	4013      	ands	r3, r2
 8002f66:	d00d      	beq.n	8002f84 <HAL_ADC_IRQHandler+0x224>
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	2380      	movs	r3, #128	; 0x80
 8002f6c:	019b      	lsls	r3, r3, #6
 8002f6e:	4013      	ands	r3, r2
 8002f70:	d008      	beq.n	8002f84 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	0018      	movs	r0, r3
 8002f76:	f000 fa91 	bl	800349c <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2280      	movs	r2, #128	; 0x80
 8002f80:	0192      	lsls	r2, r2, #6
 8002f82:	601a      	str	r2, [r3, #0]
  }
}
 8002f84:	46c0      	nop			; (mov r8, r8)
 8002f86:	46bd      	mov	sp, r7
 8002f88:	b006      	add	sp, #24
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	fffffefe 	.word	0xfffffefe

08002f90 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002f98:	46c0      	nop			; (mov r8, r8)
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	b002      	add	sp, #8
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002fa8:	46c0      	nop			; (mov r8, r8)
 8002faa:	46bd      	mov	sp, r7
 8002fac:	b002      	add	sp, #8
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fba:	2317      	movs	r3, #23
 8002fbc:	18fb      	adds	r3, r7, r3
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2254      	movs	r2, #84	; 0x54
 8002fca:	5c9b      	ldrb	r3, [r3, r2]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d101      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x24>
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	e1c0      	b.n	8003356 <HAL_ADC_ConfigChannel+0x3a6>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2254      	movs	r2, #84	; 0x54
 8002fd8:	2101      	movs	r1, #1
 8002fda:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	f7ff fc7f 	bl	80028e4 <LL_ADC_REG_IsConversionOngoing>
 8002fe6:	1e03      	subs	r3, r0, #0
 8002fe8:	d000      	beq.n	8002fec <HAL_ADC_ConfigChannel+0x3c>
 8002fea:	e1a3      	b.n	8003334 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d100      	bne.n	8002ff6 <HAL_ADC_ConfigChannel+0x46>
 8002ff4:	e143      	b.n	800327e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	691a      	ldr	r2, [r3, #16]
 8002ffa:	2380      	movs	r3, #128	; 0x80
 8002ffc:	061b      	lsls	r3, r3, #24
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d004      	beq.n	800300c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003006:	4ac1      	ldr	r2, [pc, #772]	; (800330c <HAL_ADC_ConfigChannel+0x35c>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d108      	bne.n	800301e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	0019      	movs	r1, r3
 8003016:	0010      	movs	r0, r2
 8003018:	f7ff fbba 	bl	8002790 <LL_ADC_REG_SetSequencerChAdd>
 800301c:	e0c9      	b.n	80031b2 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	211f      	movs	r1, #31
 8003028:	400b      	ands	r3, r1
 800302a:	210f      	movs	r1, #15
 800302c:	4099      	lsls	r1, r3
 800302e:	000b      	movs	r3, r1
 8003030:	43db      	mvns	r3, r3
 8003032:	4013      	ands	r3, r2
 8003034:	0019      	movs	r1, r3
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	035b      	lsls	r3, r3, #13
 800303c:	0b5b      	lsrs	r3, r3, #13
 800303e:	d105      	bne.n	800304c <HAL_ADC_ConfigChannel+0x9c>
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	0e9b      	lsrs	r3, r3, #26
 8003046:	221f      	movs	r2, #31
 8003048:	4013      	ands	r3, r2
 800304a:	e098      	b.n	800317e <HAL_ADC_ConfigChannel+0x1ce>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2201      	movs	r2, #1
 8003052:	4013      	ands	r3, r2
 8003054:	d000      	beq.n	8003058 <HAL_ADC_ConfigChannel+0xa8>
 8003056:	e091      	b.n	800317c <HAL_ADC_ConfigChannel+0x1cc>
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2202      	movs	r2, #2
 800305e:	4013      	ands	r3, r2
 8003060:	d000      	beq.n	8003064 <HAL_ADC_ConfigChannel+0xb4>
 8003062:	e089      	b.n	8003178 <HAL_ADC_ConfigChannel+0x1c8>
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2204      	movs	r2, #4
 800306a:	4013      	ands	r3, r2
 800306c:	d000      	beq.n	8003070 <HAL_ADC_ConfigChannel+0xc0>
 800306e:	e081      	b.n	8003174 <HAL_ADC_ConfigChannel+0x1c4>
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2208      	movs	r2, #8
 8003076:	4013      	ands	r3, r2
 8003078:	d000      	beq.n	800307c <HAL_ADC_ConfigChannel+0xcc>
 800307a:	e079      	b.n	8003170 <HAL_ADC_ConfigChannel+0x1c0>
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2210      	movs	r2, #16
 8003082:	4013      	ands	r3, r2
 8003084:	d000      	beq.n	8003088 <HAL_ADC_ConfigChannel+0xd8>
 8003086:	e071      	b.n	800316c <HAL_ADC_ConfigChannel+0x1bc>
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2220      	movs	r2, #32
 800308e:	4013      	ands	r3, r2
 8003090:	d000      	beq.n	8003094 <HAL_ADC_ConfigChannel+0xe4>
 8003092:	e069      	b.n	8003168 <HAL_ADC_ConfigChannel+0x1b8>
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2240      	movs	r2, #64	; 0x40
 800309a:	4013      	ands	r3, r2
 800309c:	d000      	beq.n	80030a0 <HAL_ADC_ConfigChannel+0xf0>
 800309e:	e061      	b.n	8003164 <HAL_ADC_ConfigChannel+0x1b4>
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2280      	movs	r2, #128	; 0x80
 80030a6:	4013      	ands	r3, r2
 80030a8:	d000      	beq.n	80030ac <HAL_ADC_ConfigChannel+0xfc>
 80030aa:	e059      	b.n	8003160 <HAL_ADC_ConfigChannel+0x1b0>
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	2380      	movs	r3, #128	; 0x80
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	4013      	ands	r3, r2
 80030b6:	d151      	bne.n	800315c <HAL_ADC_ConfigChannel+0x1ac>
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	2380      	movs	r3, #128	; 0x80
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4013      	ands	r3, r2
 80030c2:	d149      	bne.n	8003158 <HAL_ADC_ConfigChannel+0x1a8>
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	2380      	movs	r3, #128	; 0x80
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	4013      	ands	r3, r2
 80030ce:	d141      	bne.n	8003154 <HAL_ADC_ConfigChannel+0x1a4>
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	2380      	movs	r3, #128	; 0x80
 80030d6:	011b      	lsls	r3, r3, #4
 80030d8:	4013      	ands	r3, r2
 80030da:	d139      	bne.n	8003150 <HAL_ADC_ConfigChannel+0x1a0>
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	2380      	movs	r3, #128	; 0x80
 80030e2:	015b      	lsls	r3, r3, #5
 80030e4:	4013      	ands	r3, r2
 80030e6:	d131      	bne.n	800314c <HAL_ADC_ConfigChannel+0x19c>
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	2380      	movs	r3, #128	; 0x80
 80030ee:	019b      	lsls	r3, r3, #6
 80030f0:	4013      	ands	r3, r2
 80030f2:	d129      	bne.n	8003148 <HAL_ADC_ConfigChannel+0x198>
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	2380      	movs	r3, #128	; 0x80
 80030fa:	01db      	lsls	r3, r3, #7
 80030fc:	4013      	ands	r3, r2
 80030fe:	d121      	bne.n	8003144 <HAL_ADC_ConfigChannel+0x194>
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	2380      	movs	r3, #128	; 0x80
 8003106:	021b      	lsls	r3, r3, #8
 8003108:	4013      	ands	r3, r2
 800310a:	d119      	bne.n	8003140 <HAL_ADC_ConfigChannel+0x190>
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	2380      	movs	r3, #128	; 0x80
 8003112:	025b      	lsls	r3, r3, #9
 8003114:	4013      	ands	r3, r2
 8003116:	d111      	bne.n	800313c <HAL_ADC_ConfigChannel+0x18c>
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	2380      	movs	r3, #128	; 0x80
 800311e:	029b      	lsls	r3, r3, #10
 8003120:	4013      	ands	r3, r2
 8003122:	d109      	bne.n	8003138 <HAL_ADC_ConfigChannel+0x188>
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	2380      	movs	r3, #128	; 0x80
 800312a:	02db      	lsls	r3, r3, #11
 800312c:	4013      	ands	r3, r2
 800312e:	d001      	beq.n	8003134 <HAL_ADC_ConfigChannel+0x184>
 8003130:	2312      	movs	r3, #18
 8003132:	e024      	b.n	800317e <HAL_ADC_ConfigChannel+0x1ce>
 8003134:	2300      	movs	r3, #0
 8003136:	e022      	b.n	800317e <HAL_ADC_ConfigChannel+0x1ce>
 8003138:	2311      	movs	r3, #17
 800313a:	e020      	b.n	800317e <HAL_ADC_ConfigChannel+0x1ce>
 800313c:	2310      	movs	r3, #16
 800313e:	e01e      	b.n	800317e <HAL_ADC_ConfigChannel+0x1ce>
 8003140:	230f      	movs	r3, #15
 8003142:	e01c      	b.n	800317e <HAL_ADC_ConfigChannel+0x1ce>
 8003144:	230e      	movs	r3, #14
 8003146:	e01a      	b.n	800317e <HAL_ADC_ConfigChannel+0x1ce>
 8003148:	230d      	movs	r3, #13
 800314a:	e018      	b.n	800317e <HAL_ADC_ConfigChannel+0x1ce>
 800314c:	230c      	movs	r3, #12
 800314e:	e016      	b.n	800317e <HAL_ADC_ConfigChannel+0x1ce>
 8003150:	230b      	movs	r3, #11
 8003152:	e014      	b.n	800317e <HAL_ADC_ConfigChannel+0x1ce>
 8003154:	230a      	movs	r3, #10
 8003156:	e012      	b.n	800317e <HAL_ADC_ConfigChannel+0x1ce>
 8003158:	2309      	movs	r3, #9
 800315a:	e010      	b.n	800317e <HAL_ADC_ConfigChannel+0x1ce>
 800315c:	2308      	movs	r3, #8
 800315e:	e00e      	b.n	800317e <HAL_ADC_ConfigChannel+0x1ce>
 8003160:	2307      	movs	r3, #7
 8003162:	e00c      	b.n	800317e <HAL_ADC_ConfigChannel+0x1ce>
 8003164:	2306      	movs	r3, #6
 8003166:	e00a      	b.n	800317e <HAL_ADC_ConfigChannel+0x1ce>
 8003168:	2305      	movs	r3, #5
 800316a:	e008      	b.n	800317e <HAL_ADC_ConfigChannel+0x1ce>
 800316c:	2304      	movs	r3, #4
 800316e:	e006      	b.n	800317e <HAL_ADC_ConfigChannel+0x1ce>
 8003170:	2303      	movs	r3, #3
 8003172:	e004      	b.n	800317e <HAL_ADC_ConfigChannel+0x1ce>
 8003174:	2302      	movs	r3, #2
 8003176:	e002      	b.n	800317e <HAL_ADC_ConfigChannel+0x1ce>
 8003178:	2301      	movs	r3, #1
 800317a:	e000      	b.n	800317e <HAL_ADC_ConfigChannel+0x1ce>
 800317c:	2300      	movs	r3, #0
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	6852      	ldr	r2, [r2, #4]
 8003182:	201f      	movs	r0, #31
 8003184:	4002      	ands	r2, r0
 8003186:	4093      	lsls	r3, r2
 8003188:	000a      	movs	r2, r1
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	089b      	lsrs	r3, r3, #2
 8003196:	1c5a      	adds	r2, r3, #1
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	69db      	ldr	r3, [r3, #28]
 800319c:	429a      	cmp	r2, r3
 800319e:	d808      	bhi.n	80031b2 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6818      	ldr	r0, [r3, #0]
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	6859      	ldr	r1, [r3, #4]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	001a      	movs	r2, r3
 80031ae:	f7ff facf 	bl	8002750 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6818      	ldr	r0, [r3, #0]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	6819      	ldr	r1, [r3, #0]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	001a      	movs	r2, r3
 80031c0:	f7ff fb16 	bl	80027f0 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	db00      	blt.n	80031ce <HAL_ADC_ConfigChannel+0x21e>
 80031cc:	e0bc      	b.n	8003348 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031ce:	4b50      	ldr	r3, [pc, #320]	; (8003310 <HAL_ADC_ConfigChannel+0x360>)
 80031d0:	0018      	movs	r0, r3
 80031d2:	f7ff fa6b 	bl	80026ac <LL_ADC_GetCommonPathInternalCh>
 80031d6:	0003      	movs	r3, r0
 80031d8:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a4d      	ldr	r2, [pc, #308]	; (8003314 <HAL_ADC_ConfigChannel+0x364>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d122      	bne.n	800322a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	2380      	movs	r3, #128	; 0x80
 80031e8:	041b      	lsls	r3, r3, #16
 80031ea:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80031ec:	d11d      	bne.n	800322a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	2280      	movs	r2, #128	; 0x80
 80031f2:	0412      	lsls	r2, r2, #16
 80031f4:	4313      	orrs	r3, r2
 80031f6:	4a46      	ldr	r2, [pc, #280]	; (8003310 <HAL_ADC_ConfigChannel+0x360>)
 80031f8:	0019      	movs	r1, r3
 80031fa:	0010      	movs	r0, r2
 80031fc:	f7ff fa42 	bl	8002684 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003200:	4b45      	ldr	r3, [pc, #276]	; (8003318 <HAL_ADC_ConfigChannel+0x368>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4945      	ldr	r1, [pc, #276]	; (800331c <HAL_ADC_ConfigChannel+0x36c>)
 8003206:	0018      	movs	r0, r3
 8003208:	f7fc ff7a 	bl	8000100 <__udivsi3>
 800320c:	0003      	movs	r3, r0
 800320e:	1c5a      	adds	r2, r3, #1
 8003210:	0013      	movs	r3, r2
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	189b      	adds	r3, r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800321a:	e002      	b.n	8003222 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	3b01      	subs	r3, #1
 8003220:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1f9      	bne.n	800321c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003228:	e08e      	b.n	8003348 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a3c      	ldr	r2, [pc, #240]	; (8003320 <HAL_ADC_ConfigChannel+0x370>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d10e      	bne.n	8003252 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	2380      	movs	r3, #128	; 0x80
 8003238:	045b      	lsls	r3, r3, #17
 800323a:	4013      	ands	r3, r2
 800323c:	d109      	bne.n	8003252 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	2280      	movs	r2, #128	; 0x80
 8003242:	0452      	lsls	r2, r2, #17
 8003244:	4313      	orrs	r3, r2
 8003246:	4a32      	ldr	r2, [pc, #200]	; (8003310 <HAL_ADC_ConfigChannel+0x360>)
 8003248:	0019      	movs	r1, r3
 800324a:	0010      	movs	r0, r2
 800324c:	f7ff fa1a 	bl	8002684 <LL_ADC_SetCommonPathInternalCh>
 8003250:	e07a      	b.n	8003348 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a33      	ldr	r2, [pc, #204]	; (8003324 <HAL_ADC_ConfigChannel+0x374>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d000      	beq.n	800325e <HAL_ADC_ConfigChannel+0x2ae>
 800325c:	e074      	b.n	8003348 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	2380      	movs	r3, #128	; 0x80
 8003262:	03db      	lsls	r3, r3, #15
 8003264:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003266:	d000      	beq.n	800326a <HAL_ADC_ConfigChannel+0x2ba>
 8003268:	e06e      	b.n	8003348 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	2280      	movs	r2, #128	; 0x80
 800326e:	03d2      	lsls	r2, r2, #15
 8003270:	4313      	orrs	r3, r2
 8003272:	4a27      	ldr	r2, [pc, #156]	; (8003310 <HAL_ADC_ConfigChannel+0x360>)
 8003274:	0019      	movs	r1, r3
 8003276:	0010      	movs	r0, r2
 8003278:	f7ff fa04 	bl	8002684 <LL_ADC_SetCommonPathInternalCh>
 800327c:	e064      	b.n	8003348 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	691a      	ldr	r2, [r3, #16]
 8003282:	2380      	movs	r3, #128	; 0x80
 8003284:	061b      	lsls	r3, r3, #24
 8003286:	429a      	cmp	r2, r3
 8003288:	d004      	beq.n	8003294 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800328e:	4a1f      	ldr	r2, [pc, #124]	; (800330c <HAL_ADC_ConfigChannel+0x35c>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d107      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	0019      	movs	r1, r3
 800329e:	0010      	movs	r0, r2
 80032a0:	f7ff fa87 	bl	80027b2 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	da4d      	bge.n	8003348 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80032ac:	4b18      	ldr	r3, [pc, #96]	; (8003310 <HAL_ADC_ConfigChannel+0x360>)
 80032ae:	0018      	movs	r0, r3
 80032b0:	f7ff f9fc 	bl	80026ac <LL_ADC_GetCommonPathInternalCh>
 80032b4:	0003      	movs	r3, r0
 80032b6:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a15      	ldr	r2, [pc, #84]	; (8003314 <HAL_ADC_ConfigChannel+0x364>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d108      	bne.n	80032d4 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	4a18      	ldr	r2, [pc, #96]	; (8003328 <HAL_ADC_ConfigChannel+0x378>)
 80032c6:	4013      	ands	r3, r2
 80032c8:	4a11      	ldr	r2, [pc, #68]	; (8003310 <HAL_ADC_ConfigChannel+0x360>)
 80032ca:	0019      	movs	r1, r3
 80032cc:	0010      	movs	r0, r2
 80032ce:	f7ff f9d9 	bl	8002684 <LL_ADC_SetCommonPathInternalCh>
 80032d2:	e039      	b.n	8003348 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a11      	ldr	r2, [pc, #68]	; (8003320 <HAL_ADC_ConfigChannel+0x370>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d108      	bne.n	80032f0 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	4a12      	ldr	r2, [pc, #72]	; (800332c <HAL_ADC_ConfigChannel+0x37c>)
 80032e2:	4013      	ands	r3, r2
 80032e4:	4a0a      	ldr	r2, [pc, #40]	; (8003310 <HAL_ADC_ConfigChannel+0x360>)
 80032e6:	0019      	movs	r1, r3
 80032e8:	0010      	movs	r0, r2
 80032ea:	f7ff f9cb 	bl	8002684 <LL_ADC_SetCommonPathInternalCh>
 80032ee:	e02b      	b.n	8003348 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a0b      	ldr	r2, [pc, #44]	; (8003324 <HAL_ADC_ConfigChannel+0x374>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d126      	bne.n	8003348 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	4a0c      	ldr	r2, [pc, #48]	; (8003330 <HAL_ADC_ConfigChannel+0x380>)
 80032fe:	4013      	ands	r3, r2
 8003300:	4a03      	ldr	r2, [pc, #12]	; (8003310 <HAL_ADC_ConfigChannel+0x360>)
 8003302:	0019      	movs	r1, r3
 8003304:	0010      	movs	r0, r2
 8003306:	f7ff f9bd 	bl	8002684 <LL_ADC_SetCommonPathInternalCh>
 800330a:	e01d      	b.n	8003348 <HAL_ADC_ConfigChannel+0x398>
 800330c:	80000004 	.word	0x80000004
 8003310:	40012708 	.word	0x40012708
 8003314:	b0001000 	.word	0xb0001000
 8003318:	20000004 	.word	0x20000004
 800331c:	00030d40 	.word	0x00030d40
 8003320:	b8004000 	.word	0xb8004000
 8003324:	b4002000 	.word	0xb4002000
 8003328:	ff7fffff 	.word	0xff7fffff
 800332c:	feffffff 	.word	0xfeffffff
 8003330:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003338:	2220      	movs	r2, #32
 800333a:	431a      	orrs	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003340:	2317      	movs	r3, #23
 8003342:	18fb      	adds	r3, r7, r3
 8003344:	2201      	movs	r2, #1
 8003346:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2254      	movs	r2, #84	; 0x54
 800334c:	2100      	movs	r1, #0
 800334e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003350:	2317      	movs	r3, #23
 8003352:	18fb      	adds	r3, r7, r3
 8003354:	781b      	ldrb	r3, [r3, #0]
}
 8003356:	0018      	movs	r0, r3
 8003358:	46bd      	mov	sp, r7
 800335a:	b006      	add	sp, #24
 800335c:	bd80      	pop	{r7, pc}
 800335e:	46c0      	nop			; (mov r8, r8)

08003360 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003368:	2300      	movs	r3, #0
 800336a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	0018      	movs	r0, r3
 8003372:	f7ff fa93 	bl	800289c <LL_ADC_IsEnabled>
 8003376:	1e03      	subs	r3, r0, #0
 8003378:	d000      	beq.n	800337c <ADC_Enable+0x1c>
 800337a:	e069      	b.n	8003450 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	4a36      	ldr	r2, [pc, #216]	; (800345c <ADC_Enable+0xfc>)
 8003384:	4013      	ands	r3, r2
 8003386:	d00d      	beq.n	80033a4 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338c:	2210      	movs	r2, #16
 800338e:	431a      	orrs	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003398:	2201      	movs	r2, #1
 800339a:	431a      	orrs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e056      	b.n	8003452 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	0018      	movs	r0, r3
 80033aa:	f7ff fa65 	bl	8002878 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 80033ae:	4b2c      	ldr	r3, [pc, #176]	; (8003460 <ADC_Enable+0x100>)
 80033b0:	0018      	movs	r0, r3
 80033b2:	f7ff f97b 	bl	80026ac <LL_ADC_GetCommonPathInternalCh>
 80033b6:	0002      	movs	r2, r0
 80033b8:	2380      	movs	r3, #128	; 0x80
 80033ba:	041b      	lsls	r3, r3, #16
 80033bc:	4013      	ands	r3, r2
 80033be:	d00f      	beq.n	80033e0 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033c0:	4b28      	ldr	r3, [pc, #160]	; (8003464 <ADC_Enable+0x104>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4928      	ldr	r1, [pc, #160]	; (8003468 <ADC_Enable+0x108>)
 80033c6:	0018      	movs	r0, r3
 80033c8:	f7fc fe9a 	bl	8000100 <__udivsi3>
 80033cc:	0003      	movs	r3, r0
 80033ce:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80033d0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80033d2:	e002      	b.n	80033da <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	3b01      	subs	r3, #1
 80033d8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1f9      	bne.n	80033d4 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	7e5b      	ldrb	r3, [r3, #25]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d033      	beq.n	8003450 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80033e8:	f7ff f91e 	bl	8002628 <HAL_GetTick>
 80033ec:	0003      	movs	r3, r0
 80033ee:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033f0:	e027      	b.n	8003442 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	0018      	movs	r0, r3
 80033f8:	f7ff fa50 	bl	800289c <LL_ADC_IsEnabled>
 80033fc:	1e03      	subs	r3, r0, #0
 80033fe:	d104      	bne.n	800340a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	0018      	movs	r0, r3
 8003406:	f7ff fa37 	bl	8002878 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800340a:	f7ff f90d 	bl	8002628 <HAL_GetTick>
 800340e:	0002      	movs	r2, r0
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d914      	bls.n	8003442 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2201      	movs	r2, #1
 8003420:	4013      	ands	r3, r2
 8003422:	2b01      	cmp	r3, #1
 8003424:	d00d      	beq.n	8003442 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342a:	2210      	movs	r2, #16
 800342c:	431a      	orrs	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003436:	2201      	movs	r2, #1
 8003438:	431a      	orrs	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e007      	b.n	8003452 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2201      	movs	r2, #1
 800344a:	4013      	ands	r3, r2
 800344c:	2b01      	cmp	r3, #1
 800344e:	d1d0      	bne.n	80033f2 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	0018      	movs	r0, r3
 8003454:	46bd      	mov	sp, r7
 8003456:	b004      	add	sp, #16
 8003458:	bd80      	pop	{r7, pc}
 800345a:	46c0      	nop			; (mov r8, r8)
 800345c:	80000017 	.word	0x80000017
 8003460:	40012708 	.word	0x40012708
 8003464:	20000004 	.word	0x20000004
 8003468:	00030d40 	.word	0x00030d40

0800346c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003474:	46c0      	nop			; (mov r8, r8)
 8003476:	46bd      	mov	sp, r7
 8003478:	b002      	add	sp, #8
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003484:	46c0      	nop			; (mov r8, r8)
 8003486:	46bd      	mov	sp, r7
 8003488:	b002      	add	sp, #8
 800348a:	bd80      	pop	{r7, pc}

0800348c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003494:	46c0      	nop			; (mov r8, r8)
 8003496:	46bd      	mov	sp, r7
 8003498:	b002      	add	sp, #8
 800349a:	bd80      	pop	{r7, pc}

0800349c <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 80034a4:	46c0      	nop			; (mov r8, r8)
 80034a6:	46bd      	mov	sp, r7
 80034a8:	b002      	add	sp, #8
 80034aa:	bd80      	pop	{r7, pc}

080034ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	0002      	movs	r2, r0
 80034b4:	1dfb      	adds	r3, r7, #7
 80034b6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80034b8:	1dfb      	adds	r3, r7, #7
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	2b7f      	cmp	r3, #127	; 0x7f
 80034be:	d809      	bhi.n	80034d4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034c0:	1dfb      	adds	r3, r7, #7
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	001a      	movs	r2, r3
 80034c6:	231f      	movs	r3, #31
 80034c8:	401a      	ands	r2, r3
 80034ca:	4b04      	ldr	r3, [pc, #16]	; (80034dc <__NVIC_EnableIRQ+0x30>)
 80034cc:	2101      	movs	r1, #1
 80034ce:	4091      	lsls	r1, r2
 80034d0:	000a      	movs	r2, r1
 80034d2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80034d4:	46c0      	nop			; (mov r8, r8)
 80034d6:	46bd      	mov	sp, r7
 80034d8:	b002      	add	sp, #8
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	e000e100 	.word	0xe000e100

080034e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034e0:	b590      	push	{r4, r7, lr}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	0002      	movs	r2, r0
 80034e8:	6039      	str	r1, [r7, #0]
 80034ea:	1dfb      	adds	r3, r7, #7
 80034ec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80034ee:	1dfb      	adds	r3, r7, #7
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	2b7f      	cmp	r3, #127	; 0x7f
 80034f4:	d828      	bhi.n	8003548 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034f6:	4a2f      	ldr	r2, [pc, #188]	; (80035b4 <__NVIC_SetPriority+0xd4>)
 80034f8:	1dfb      	adds	r3, r7, #7
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	b25b      	sxtb	r3, r3
 80034fe:	089b      	lsrs	r3, r3, #2
 8003500:	33c0      	adds	r3, #192	; 0xc0
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	589b      	ldr	r3, [r3, r2]
 8003506:	1dfa      	adds	r2, r7, #7
 8003508:	7812      	ldrb	r2, [r2, #0]
 800350a:	0011      	movs	r1, r2
 800350c:	2203      	movs	r2, #3
 800350e:	400a      	ands	r2, r1
 8003510:	00d2      	lsls	r2, r2, #3
 8003512:	21ff      	movs	r1, #255	; 0xff
 8003514:	4091      	lsls	r1, r2
 8003516:	000a      	movs	r2, r1
 8003518:	43d2      	mvns	r2, r2
 800351a:	401a      	ands	r2, r3
 800351c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	019b      	lsls	r3, r3, #6
 8003522:	22ff      	movs	r2, #255	; 0xff
 8003524:	401a      	ands	r2, r3
 8003526:	1dfb      	adds	r3, r7, #7
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	0018      	movs	r0, r3
 800352c:	2303      	movs	r3, #3
 800352e:	4003      	ands	r3, r0
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003534:	481f      	ldr	r0, [pc, #124]	; (80035b4 <__NVIC_SetPriority+0xd4>)
 8003536:	1dfb      	adds	r3, r7, #7
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	b25b      	sxtb	r3, r3
 800353c:	089b      	lsrs	r3, r3, #2
 800353e:	430a      	orrs	r2, r1
 8003540:	33c0      	adds	r3, #192	; 0xc0
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003546:	e031      	b.n	80035ac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003548:	4a1b      	ldr	r2, [pc, #108]	; (80035b8 <__NVIC_SetPriority+0xd8>)
 800354a:	1dfb      	adds	r3, r7, #7
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	0019      	movs	r1, r3
 8003550:	230f      	movs	r3, #15
 8003552:	400b      	ands	r3, r1
 8003554:	3b08      	subs	r3, #8
 8003556:	089b      	lsrs	r3, r3, #2
 8003558:	3306      	adds	r3, #6
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	18d3      	adds	r3, r2, r3
 800355e:	3304      	adds	r3, #4
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	1dfa      	adds	r2, r7, #7
 8003564:	7812      	ldrb	r2, [r2, #0]
 8003566:	0011      	movs	r1, r2
 8003568:	2203      	movs	r2, #3
 800356a:	400a      	ands	r2, r1
 800356c:	00d2      	lsls	r2, r2, #3
 800356e:	21ff      	movs	r1, #255	; 0xff
 8003570:	4091      	lsls	r1, r2
 8003572:	000a      	movs	r2, r1
 8003574:	43d2      	mvns	r2, r2
 8003576:	401a      	ands	r2, r3
 8003578:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	019b      	lsls	r3, r3, #6
 800357e:	22ff      	movs	r2, #255	; 0xff
 8003580:	401a      	ands	r2, r3
 8003582:	1dfb      	adds	r3, r7, #7
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	0018      	movs	r0, r3
 8003588:	2303      	movs	r3, #3
 800358a:	4003      	ands	r3, r0
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003590:	4809      	ldr	r0, [pc, #36]	; (80035b8 <__NVIC_SetPriority+0xd8>)
 8003592:	1dfb      	adds	r3, r7, #7
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	001c      	movs	r4, r3
 8003598:	230f      	movs	r3, #15
 800359a:	4023      	ands	r3, r4
 800359c:	3b08      	subs	r3, #8
 800359e:	089b      	lsrs	r3, r3, #2
 80035a0:	430a      	orrs	r2, r1
 80035a2:	3306      	adds	r3, #6
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	18c3      	adds	r3, r0, r3
 80035a8:	3304      	adds	r3, #4
 80035aa:	601a      	str	r2, [r3, #0]
}
 80035ac:	46c0      	nop			; (mov r8, r8)
 80035ae:	46bd      	mov	sp, r7
 80035b0:	b003      	add	sp, #12
 80035b2:	bd90      	pop	{r4, r7, pc}
 80035b4:	e000e100 	.word	0xe000e100
 80035b8:	e000ed00 	.word	0xe000ed00

080035bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	1e5a      	subs	r2, r3, #1
 80035c8:	2380      	movs	r3, #128	; 0x80
 80035ca:	045b      	lsls	r3, r3, #17
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d301      	bcc.n	80035d4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035d0:	2301      	movs	r3, #1
 80035d2:	e010      	b.n	80035f6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035d4:	4b0a      	ldr	r3, [pc, #40]	; (8003600 <SysTick_Config+0x44>)
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	3a01      	subs	r2, #1
 80035da:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035dc:	2301      	movs	r3, #1
 80035de:	425b      	negs	r3, r3
 80035e0:	2103      	movs	r1, #3
 80035e2:	0018      	movs	r0, r3
 80035e4:	f7ff ff7c 	bl	80034e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035e8:	4b05      	ldr	r3, [pc, #20]	; (8003600 <SysTick_Config+0x44>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035ee:	4b04      	ldr	r3, [pc, #16]	; (8003600 <SysTick_Config+0x44>)
 80035f0:	2207      	movs	r2, #7
 80035f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	0018      	movs	r0, r3
 80035f8:	46bd      	mov	sp, r7
 80035fa:	b002      	add	sp, #8
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	46c0      	nop			; (mov r8, r8)
 8003600:	e000e010 	.word	0xe000e010

08003604 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	60b9      	str	r1, [r7, #8]
 800360c:	607a      	str	r2, [r7, #4]
 800360e:	210f      	movs	r1, #15
 8003610:	187b      	adds	r3, r7, r1
 8003612:	1c02      	adds	r2, r0, #0
 8003614:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	187b      	adds	r3, r7, r1
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	b25b      	sxtb	r3, r3
 800361e:	0011      	movs	r1, r2
 8003620:	0018      	movs	r0, r3
 8003622:	f7ff ff5d 	bl	80034e0 <__NVIC_SetPriority>
}
 8003626:	46c0      	nop			; (mov r8, r8)
 8003628:	46bd      	mov	sp, r7
 800362a:	b004      	add	sp, #16
 800362c:	bd80      	pop	{r7, pc}

0800362e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b082      	sub	sp, #8
 8003632:	af00      	add	r7, sp, #0
 8003634:	0002      	movs	r2, r0
 8003636:	1dfb      	adds	r3, r7, #7
 8003638:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800363a:	1dfb      	adds	r3, r7, #7
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	b25b      	sxtb	r3, r3
 8003640:	0018      	movs	r0, r3
 8003642:	f7ff ff33 	bl	80034ac <__NVIC_EnableIRQ>
}
 8003646:	46c0      	nop			; (mov r8, r8)
 8003648:	46bd      	mov	sp, r7
 800364a:	b002      	add	sp, #8
 800364c:	bd80      	pop	{r7, pc}

0800364e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b082      	sub	sp, #8
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	0018      	movs	r0, r3
 800365a:	f7ff ffaf 	bl	80035bc <SysTick_Config>
 800365e:	0003      	movs	r3, r0
}
 8003660:	0018      	movs	r0, r3
 8003662:	46bd      	mov	sp, r7
 8003664:	b002      	add	sp, #8
 8003666:	bd80      	pop	{r7, pc}

08003668 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003672:	2300      	movs	r3, #0
 8003674:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003676:	e147      	b.n	8003908 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2101      	movs	r1, #1
 800367e:	697a      	ldr	r2, [r7, #20]
 8003680:	4091      	lsls	r1, r2
 8003682:	000a      	movs	r2, r1
 8003684:	4013      	ands	r3, r2
 8003686:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d100      	bne.n	8003690 <HAL_GPIO_Init+0x28>
 800368e:	e138      	b.n	8003902 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	2203      	movs	r2, #3
 8003696:	4013      	ands	r3, r2
 8003698:	2b01      	cmp	r3, #1
 800369a:	d005      	beq.n	80036a8 <HAL_GPIO_Init+0x40>
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	2203      	movs	r2, #3
 80036a2:	4013      	ands	r3, r2
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d130      	bne.n	800370a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	2203      	movs	r2, #3
 80036b4:	409a      	lsls	r2, r3
 80036b6:	0013      	movs	r3, r2
 80036b8:	43da      	mvns	r2, r3
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	4013      	ands	r3, r2
 80036be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	68da      	ldr	r2, [r3, #12]
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	409a      	lsls	r2, r3
 80036ca:	0013      	movs	r3, r2
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80036de:	2201      	movs	r2, #1
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	409a      	lsls	r2, r3
 80036e4:	0013      	movs	r3, r2
 80036e6:	43da      	mvns	r2, r3
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	4013      	ands	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	091b      	lsrs	r3, r3, #4
 80036f4:	2201      	movs	r2, #1
 80036f6:	401a      	ands	r2, r3
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	409a      	lsls	r2, r3
 80036fc:	0013      	movs	r3, r2
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	4313      	orrs	r3, r2
 8003702:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	2203      	movs	r2, #3
 8003710:	4013      	ands	r3, r2
 8003712:	2b03      	cmp	r3, #3
 8003714:	d017      	beq.n	8003746 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	2203      	movs	r2, #3
 8003722:	409a      	lsls	r2, r3
 8003724:	0013      	movs	r3, r2
 8003726:	43da      	mvns	r2, r3
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	4013      	ands	r3, r2
 800372c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	689a      	ldr	r2, [r3, #8]
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	409a      	lsls	r2, r3
 8003738:	0013      	movs	r3, r2
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	4313      	orrs	r3, r2
 800373e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2203      	movs	r2, #3
 800374c:	4013      	ands	r3, r2
 800374e:	2b02      	cmp	r3, #2
 8003750:	d123      	bne.n	800379a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	08da      	lsrs	r2, r3, #3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	3208      	adds	r2, #8
 800375a:	0092      	lsls	r2, r2, #2
 800375c:	58d3      	ldr	r3, [r2, r3]
 800375e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	2207      	movs	r2, #7
 8003764:	4013      	ands	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	220f      	movs	r2, #15
 800376a:	409a      	lsls	r2, r3
 800376c:	0013      	movs	r3, r2
 800376e:	43da      	mvns	r2, r3
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	4013      	ands	r3, r2
 8003774:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	691a      	ldr	r2, [r3, #16]
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2107      	movs	r1, #7
 800377e:	400b      	ands	r3, r1
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	409a      	lsls	r2, r3
 8003784:	0013      	movs	r3, r2
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	4313      	orrs	r3, r2
 800378a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	08da      	lsrs	r2, r3, #3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	3208      	adds	r2, #8
 8003794:	0092      	lsls	r2, r2, #2
 8003796:	6939      	ldr	r1, [r7, #16]
 8003798:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	2203      	movs	r2, #3
 80037a6:	409a      	lsls	r2, r3
 80037a8:	0013      	movs	r3, r2
 80037aa:	43da      	mvns	r2, r3
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	4013      	ands	r3, r2
 80037b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2203      	movs	r2, #3
 80037b8:	401a      	ands	r2, r3
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	409a      	lsls	r2, r3
 80037c0:	0013      	movs	r3, r2
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	23c0      	movs	r3, #192	; 0xc0
 80037d4:	029b      	lsls	r3, r3, #10
 80037d6:	4013      	ands	r3, r2
 80037d8:	d100      	bne.n	80037dc <HAL_GPIO_Init+0x174>
 80037da:	e092      	b.n	8003902 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80037dc:	4a50      	ldr	r2, [pc, #320]	; (8003920 <HAL_GPIO_Init+0x2b8>)
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	089b      	lsrs	r3, r3, #2
 80037e2:	3318      	adds	r3, #24
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	589b      	ldr	r3, [r3, r2]
 80037e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	2203      	movs	r2, #3
 80037ee:	4013      	ands	r3, r2
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	220f      	movs	r2, #15
 80037f4:	409a      	lsls	r2, r3
 80037f6:	0013      	movs	r3, r2
 80037f8:	43da      	mvns	r2, r3
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	4013      	ands	r3, r2
 80037fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	23a0      	movs	r3, #160	; 0xa0
 8003804:	05db      	lsls	r3, r3, #23
 8003806:	429a      	cmp	r2, r3
 8003808:	d013      	beq.n	8003832 <HAL_GPIO_Init+0x1ca>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a45      	ldr	r2, [pc, #276]	; (8003924 <HAL_GPIO_Init+0x2bc>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d00d      	beq.n	800382e <HAL_GPIO_Init+0x1c6>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a44      	ldr	r2, [pc, #272]	; (8003928 <HAL_GPIO_Init+0x2c0>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d007      	beq.n	800382a <HAL_GPIO_Init+0x1c2>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a43      	ldr	r2, [pc, #268]	; (800392c <HAL_GPIO_Init+0x2c4>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d101      	bne.n	8003826 <HAL_GPIO_Init+0x1be>
 8003822:	2303      	movs	r3, #3
 8003824:	e006      	b.n	8003834 <HAL_GPIO_Init+0x1cc>
 8003826:	2305      	movs	r3, #5
 8003828:	e004      	b.n	8003834 <HAL_GPIO_Init+0x1cc>
 800382a:	2302      	movs	r3, #2
 800382c:	e002      	b.n	8003834 <HAL_GPIO_Init+0x1cc>
 800382e:	2301      	movs	r3, #1
 8003830:	e000      	b.n	8003834 <HAL_GPIO_Init+0x1cc>
 8003832:	2300      	movs	r3, #0
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	2103      	movs	r1, #3
 8003838:	400a      	ands	r2, r1
 800383a:	00d2      	lsls	r2, r2, #3
 800383c:	4093      	lsls	r3, r2
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	4313      	orrs	r3, r2
 8003842:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003844:	4936      	ldr	r1, [pc, #216]	; (8003920 <HAL_GPIO_Init+0x2b8>)
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	089b      	lsrs	r3, r3, #2
 800384a:	3318      	adds	r3, #24
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003852:	4b33      	ldr	r3, [pc, #204]	; (8003920 <HAL_GPIO_Init+0x2b8>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	43da      	mvns	r2, r3
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	4013      	ands	r3, r2
 8003860:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	2380      	movs	r3, #128	; 0x80
 8003868:	035b      	lsls	r3, r3, #13
 800386a:	4013      	ands	r3, r2
 800386c:	d003      	beq.n	8003876 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	4313      	orrs	r3, r2
 8003874:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003876:	4b2a      	ldr	r3, [pc, #168]	; (8003920 <HAL_GPIO_Init+0x2b8>)
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800387c:	4b28      	ldr	r3, [pc, #160]	; (8003920 <HAL_GPIO_Init+0x2b8>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	43da      	mvns	r2, r3
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	4013      	ands	r3, r2
 800388a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685a      	ldr	r2, [r3, #4]
 8003890:	2380      	movs	r3, #128	; 0x80
 8003892:	039b      	lsls	r3, r3, #14
 8003894:	4013      	ands	r3, r2
 8003896:	d003      	beq.n	80038a0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	4313      	orrs	r3, r2
 800389e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80038a0:	4b1f      	ldr	r3, [pc, #124]	; (8003920 <HAL_GPIO_Init+0x2b8>)
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80038a6:	4a1e      	ldr	r2, [pc, #120]	; (8003920 <HAL_GPIO_Init+0x2b8>)
 80038a8:	2384      	movs	r3, #132	; 0x84
 80038aa:	58d3      	ldr	r3, [r2, r3]
 80038ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	43da      	mvns	r2, r3
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	4013      	ands	r3, r2
 80038b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	2380      	movs	r3, #128	; 0x80
 80038be:	029b      	lsls	r3, r3, #10
 80038c0:	4013      	ands	r3, r2
 80038c2:	d003      	beq.n	80038cc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80038cc:	4914      	ldr	r1, [pc, #80]	; (8003920 <HAL_GPIO_Init+0x2b8>)
 80038ce:	2284      	movs	r2, #132	; 0x84
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80038d4:	4a12      	ldr	r2, [pc, #72]	; (8003920 <HAL_GPIO_Init+0x2b8>)
 80038d6:	2380      	movs	r3, #128	; 0x80
 80038d8:	58d3      	ldr	r3, [r2, r3]
 80038da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	43da      	mvns	r2, r3
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	4013      	ands	r3, r2
 80038e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685a      	ldr	r2, [r3, #4]
 80038ea:	2380      	movs	r3, #128	; 0x80
 80038ec:	025b      	lsls	r3, r3, #9
 80038ee:	4013      	ands	r3, r2
 80038f0:	d003      	beq.n	80038fa <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80038fa:	4909      	ldr	r1, [pc, #36]	; (8003920 <HAL_GPIO_Init+0x2b8>)
 80038fc:	2280      	movs	r2, #128	; 0x80
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	3301      	adds	r3, #1
 8003906:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	40da      	lsrs	r2, r3
 8003910:	1e13      	subs	r3, r2, #0
 8003912:	d000      	beq.n	8003916 <HAL_GPIO_Init+0x2ae>
 8003914:	e6b0      	b.n	8003678 <HAL_GPIO_Init+0x10>
  }
}
 8003916:	46c0      	nop			; (mov r8, r8)
 8003918:	46c0      	nop			; (mov r8, r8)
 800391a:	46bd      	mov	sp, r7
 800391c:	b006      	add	sp, #24
 800391e:	bd80      	pop	{r7, pc}
 8003920:	40021800 	.word	0x40021800
 8003924:	50000400 	.word	0x50000400
 8003928:	50000800 	.word	0x50000800
 800392c:	50000c00 	.word	0x50000c00

08003930 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	0008      	movs	r0, r1
 800393a:	0011      	movs	r1, r2
 800393c:	1cbb      	adds	r3, r7, #2
 800393e:	1c02      	adds	r2, r0, #0
 8003940:	801a      	strh	r2, [r3, #0]
 8003942:	1c7b      	adds	r3, r7, #1
 8003944:	1c0a      	adds	r2, r1, #0
 8003946:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003948:	1c7b      	adds	r3, r7, #1
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d004      	beq.n	800395a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003950:	1cbb      	adds	r3, r7, #2
 8003952:	881a      	ldrh	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003958:	e003      	b.n	8003962 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800395a:	1cbb      	adds	r3, r7, #2
 800395c:	881a      	ldrh	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003962:	46c0      	nop			; (mov r8, r8)
 8003964:	46bd      	mov	sp, r7
 8003966:	b002      	add	sp, #8
 8003968:	bd80      	pop	{r7, pc}
	...

0800396c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003974:	4b19      	ldr	r3, [pc, #100]	; (80039dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a19      	ldr	r2, [pc, #100]	; (80039e0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800397a:	4013      	ands	r3, r2
 800397c:	0019      	movs	r1, r3
 800397e:	4b17      	ldr	r3, [pc, #92]	; (80039dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	430a      	orrs	r2, r1
 8003984:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	2380      	movs	r3, #128	; 0x80
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	429a      	cmp	r2, r3
 800398e:	d11f      	bne.n	80039d0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003990:	4b14      	ldr	r3, [pc, #80]	; (80039e4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	0013      	movs	r3, r2
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	189b      	adds	r3, r3, r2
 800399a:	005b      	lsls	r3, r3, #1
 800399c:	4912      	ldr	r1, [pc, #72]	; (80039e8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800399e:	0018      	movs	r0, r3
 80039a0:	f7fc fbae 	bl	8000100 <__udivsi3>
 80039a4:	0003      	movs	r3, r0
 80039a6:	3301      	adds	r3, #1
 80039a8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039aa:	e008      	b.n	80039be <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d003      	beq.n	80039ba <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	3b01      	subs	r3, #1
 80039b6:	60fb      	str	r3, [r7, #12]
 80039b8:	e001      	b.n	80039be <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e009      	b.n	80039d2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039be:	4b07      	ldr	r3, [pc, #28]	; (80039dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80039c0:	695a      	ldr	r2, [r3, #20]
 80039c2:	2380      	movs	r3, #128	; 0x80
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	401a      	ands	r2, r3
 80039c8:	2380      	movs	r3, #128	; 0x80
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d0ed      	beq.n	80039ac <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	0018      	movs	r0, r3
 80039d4:	46bd      	mov	sp, r7
 80039d6:	b004      	add	sp, #16
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	46c0      	nop			; (mov r8, r8)
 80039dc:	40007000 	.word	0x40007000
 80039e0:	fffff9ff 	.word	0xfffff9ff
 80039e4:	20000004 	.word	0x20000004
 80039e8:	000f4240 	.word	0x000f4240

080039ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b088      	sub	sp, #32
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e2f3      	b.n	8003fe6 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2201      	movs	r2, #1
 8003a04:	4013      	ands	r3, r2
 8003a06:	d100      	bne.n	8003a0a <HAL_RCC_OscConfig+0x1e>
 8003a08:	e07c      	b.n	8003b04 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a0a:	4bc3      	ldr	r3, [pc, #780]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	2238      	movs	r2, #56	; 0x38
 8003a10:	4013      	ands	r3, r2
 8003a12:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a14:	4bc0      	ldr	r3, [pc, #768]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	2203      	movs	r2, #3
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	2b10      	cmp	r3, #16
 8003a22:	d102      	bne.n	8003a2a <HAL_RCC_OscConfig+0x3e>
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	2b03      	cmp	r3, #3
 8003a28:	d002      	beq.n	8003a30 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	2b08      	cmp	r3, #8
 8003a2e:	d10b      	bne.n	8003a48 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a30:	4bb9      	ldr	r3, [pc, #740]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	2380      	movs	r3, #128	; 0x80
 8003a36:	029b      	lsls	r3, r3, #10
 8003a38:	4013      	ands	r3, r2
 8003a3a:	d062      	beq.n	8003b02 <HAL_RCC_OscConfig+0x116>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d15e      	bne.n	8003b02 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e2ce      	b.n	8003fe6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	2380      	movs	r3, #128	; 0x80
 8003a4e:	025b      	lsls	r3, r3, #9
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d107      	bne.n	8003a64 <HAL_RCC_OscConfig+0x78>
 8003a54:	4bb0      	ldr	r3, [pc, #704]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	4baf      	ldr	r3, [pc, #700]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003a5a:	2180      	movs	r1, #128	; 0x80
 8003a5c:	0249      	lsls	r1, r1, #9
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	601a      	str	r2, [r3, #0]
 8003a62:	e020      	b.n	8003aa6 <HAL_RCC_OscConfig+0xba>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	23a0      	movs	r3, #160	; 0xa0
 8003a6a:	02db      	lsls	r3, r3, #11
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d10e      	bne.n	8003a8e <HAL_RCC_OscConfig+0xa2>
 8003a70:	4ba9      	ldr	r3, [pc, #676]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	4ba8      	ldr	r3, [pc, #672]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003a76:	2180      	movs	r1, #128	; 0x80
 8003a78:	02c9      	lsls	r1, r1, #11
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	4ba6      	ldr	r3, [pc, #664]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	4ba5      	ldr	r3, [pc, #660]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003a84:	2180      	movs	r1, #128	; 0x80
 8003a86:	0249      	lsls	r1, r1, #9
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	e00b      	b.n	8003aa6 <HAL_RCC_OscConfig+0xba>
 8003a8e:	4ba2      	ldr	r3, [pc, #648]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	4ba1      	ldr	r3, [pc, #644]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003a94:	49a1      	ldr	r1, [pc, #644]	; (8003d1c <HAL_RCC_OscConfig+0x330>)
 8003a96:	400a      	ands	r2, r1
 8003a98:	601a      	str	r2, [r3, #0]
 8003a9a:	4b9f      	ldr	r3, [pc, #636]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	4b9e      	ldr	r3, [pc, #632]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003aa0:	499f      	ldr	r1, [pc, #636]	; (8003d20 <HAL_RCC_OscConfig+0x334>)
 8003aa2:	400a      	ands	r2, r1
 8003aa4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d014      	beq.n	8003ad8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aae:	f7fe fdbb 	bl	8002628 <HAL_GetTick>
 8003ab2:	0003      	movs	r3, r0
 8003ab4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ab6:	e008      	b.n	8003aca <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ab8:	f7fe fdb6 	bl	8002628 <HAL_GetTick>
 8003abc:	0002      	movs	r2, r0
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b64      	cmp	r3, #100	; 0x64
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e28d      	b.n	8003fe6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aca:	4b93      	ldr	r3, [pc, #588]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	2380      	movs	r3, #128	; 0x80
 8003ad0:	029b      	lsls	r3, r3, #10
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	d0f0      	beq.n	8003ab8 <HAL_RCC_OscConfig+0xcc>
 8003ad6:	e015      	b.n	8003b04 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad8:	f7fe fda6 	bl	8002628 <HAL_GetTick>
 8003adc:	0003      	movs	r3, r0
 8003ade:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ae0:	e008      	b.n	8003af4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ae2:	f7fe fda1 	bl	8002628 <HAL_GetTick>
 8003ae6:	0002      	movs	r2, r0
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	2b64      	cmp	r3, #100	; 0x64
 8003aee:	d901      	bls.n	8003af4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e278      	b.n	8003fe6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003af4:	4b88      	ldr	r3, [pc, #544]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	2380      	movs	r3, #128	; 0x80
 8003afa:	029b      	lsls	r3, r3, #10
 8003afc:	4013      	ands	r3, r2
 8003afe:	d1f0      	bne.n	8003ae2 <HAL_RCC_OscConfig+0xf6>
 8003b00:	e000      	b.n	8003b04 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b02:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2202      	movs	r2, #2
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	d100      	bne.n	8003b10 <HAL_RCC_OscConfig+0x124>
 8003b0e:	e099      	b.n	8003c44 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b10:	4b81      	ldr	r3, [pc, #516]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	2238      	movs	r2, #56	; 0x38
 8003b16:	4013      	ands	r3, r2
 8003b18:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b1a:	4b7f      	ldr	r3, [pc, #508]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	2203      	movs	r2, #3
 8003b20:	4013      	ands	r3, r2
 8003b22:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	2b10      	cmp	r3, #16
 8003b28:	d102      	bne.n	8003b30 <HAL_RCC_OscConfig+0x144>
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d002      	beq.n	8003b36 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d135      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b36:	4b78      	ldr	r3, [pc, #480]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	2380      	movs	r3, #128	; 0x80
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	4013      	ands	r3, r2
 8003b40:	d005      	beq.n	8003b4e <HAL_RCC_OscConfig+0x162>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e24b      	b.n	8003fe6 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b4e:	4b72      	ldr	r3, [pc, #456]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	4a74      	ldr	r2, [pc, #464]	; (8003d24 <HAL_RCC_OscConfig+0x338>)
 8003b54:	4013      	ands	r3, r2
 8003b56:	0019      	movs	r1, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	021a      	lsls	r2, r3, #8
 8003b5e:	4b6e      	ldr	r3, [pc, #440]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003b60:	430a      	orrs	r2, r1
 8003b62:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d112      	bne.n	8003b90 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003b6a:	4b6b      	ldr	r3, [pc, #428]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a6e      	ldr	r2, [pc, #440]	; (8003d28 <HAL_RCC_OscConfig+0x33c>)
 8003b70:	4013      	ands	r3, r2
 8003b72:	0019      	movs	r1, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691a      	ldr	r2, [r3, #16]
 8003b78:	4b67      	ldr	r3, [pc, #412]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003b7e:	4b66      	ldr	r3, [pc, #408]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	0adb      	lsrs	r3, r3, #11
 8003b84:	2207      	movs	r2, #7
 8003b86:	4013      	ands	r3, r2
 8003b88:	4a68      	ldr	r2, [pc, #416]	; (8003d2c <HAL_RCC_OscConfig+0x340>)
 8003b8a:	40da      	lsrs	r2, r3
 8003b8c:	4b68      	ldr	r3, [pc, #416]	; (8003d30 <HAL_RCC_OscConfig+0x344>)
 8003b8e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003b90:	4b68      	ldr	r3, [pc, #416]	; (8003d34 <HAL_RCC_OscConfig+0x348>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	0018      	movs	r0, r3
 8003b96:	f7fe fceb 	bl	8002570 <HAL_InitTick>
 8003b9a:	1e03      	subs	r3, r0, #0
 8003b9c:	d051      	beq.n	8003c42 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e221      	b.n	8003fe6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d030      	beq.n	8003c0c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003baa:	4b5b      	ldr	r3, [pc, #364]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a5e      	ldr	r2, [pc, #376]	; (8003d28 <HAL_RCC_OscConfig+0x33c>)
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	0019      	movs	r1, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	691a      	ldr	r2, [r3, #16]
 8003bb8:	4b57      	ldr	r3, [pc, #348]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003bbe:	4b56      	ldr	r3, [pc, #344]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	4b55      	ldr	r3, [pc, #340]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003bc4:	2180      	movs	r1, #128	; 0x80
 8003bc6:	0049      	lsls	r1, r1, #1
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bcc:	f7fe fd2c 	bl	8002628 <HAL_GetTick>
 8003bd0:	0003      	movs	r3, r0
 8003bd2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bd4:	e008      	b.n	8003be8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bd6:	f7fe fd27 	bl	8002628 <HAL_GetTick>
 8003bda:	0002      	movs	r2, r0
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d901      	bls.n	8003be8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e1fe      	b.n	8003fe6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003be8:	4b4b      	ldr	r3, [pc, #300]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	2380      	movs	r3, #128	; 0x80
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	d0f0      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bf4:	4b48      	ldr	r3, [pc, #288]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	4a4a      	ldr	r2, [pc, #296]	; (8003d24 <HAL_RCC_OscConfig+0x338>)
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	0019      	movs	r1, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	021a      	lsls	r2, r3, #8
 8003c04:	4b44      	ldr	r3, [pc, #272]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003c06:	430a      	orrs	r2, r1
 8003c08:	605a      	str	r2, [r3, #4]
 8003c0a:	e01b      	b.n	8003c44 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003c0c:	4b42      	ldr	r3, [pc, #264]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	4b41      	ldr	r3, [pc, #260]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003c12:	4949      	ldr	r1, [pc, #292]	; (8003d38 <HAL_RCC_OscConfig+0x34c>)
 8003c14:	400a      	ands	r2, r1
 8003c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c18:	f7fe fd06 	bl	8002628 <HAL_GetTick>
 8003c1c:	0003      	movs	r3, r0
 8003c1e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c20:	e008      	b.n	8003c34 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c22:	f7fe fd01 	bl	8002628 <HAL_GetTick>
 8003c26:	0002      	movs	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e1d8      	b.n	8003fe6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c34:	4b38      	ldr	r3, [pc, #224]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	2380      	movs	r3, #128	; 0x80
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	d1f0      	bne.n	8003c22 <HAL_RCC_OscConfig+0x236>
 8003c40:	e000      	b.n	8003c44 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c42:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2208      	movs	r2, #8
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	d047      	beq.n	8003cde <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003c4e:	4b32      	ldr	r3, [pc, #200]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	2238      	movs	r2, #56	; 0x38
 8003c54:	4013      	ands	r3, r2
 8003c56:	2b18      	cmp	r3, #24
 8003c58:	d10a      	bne.n	8003c70 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003c5a:	4b2f      	ldr	r3, [pc, #188]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c5e:	2202      	movs	r2, #2
 8003c60:	4013      	ands	r3, r2
 8003c62:	d03c      	beq.n	8003cde <HAL_RCC_OscConfig+0x2f2>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d138      	bne.n	8003cde <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e1ba      	b.n	8003fe6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d019      	beq.n	8003cac <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003c78:	4b27      	ldr	r3, [pc, #156]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003c7a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c7c:	4b26      	ldr	r3, [pc, #152]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003c7e:	2101      	movs	r1, #1
 8003c80:	430a      	orrs	r2, r1
 8003c82:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c84:	f7fe fcd0 	bl	8002628 <HAL_GetTick>
 8003c88:	0003      	movs	r3, r0
 8003c8a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c8c:	e008      	b.n	8003ca0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c8e:	f7fe fccb 	bl	8002628 <HAL_GetTick>
 8003c92:	0002      	movs	r2, r0
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d901      	bls.n	8003ca0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e1a2      	b.n	8003fe6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ca0:	4b1d      	ldr	r3, [pc, #116]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ca4:	2202      	movs	r2, #2
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	d0f1      	beq.n	8003c8e <HAL_RCC_OscConfig+0x2a2>
 8003caa:	e018      	b.n	8003cde <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003cac:	4b1a      	ldr	r3, [pc, #104]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003cae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003cb0:	4b19      	ldr	r3, [pc, #100]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003cb2:	2101      	movs	r1, #1
 8003cb4:	438a      	bics	r2, r1
 8003cb6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb8:	f7fe fcb6 	bl	8002628 <HAL_GetTick>
 8003cbc:	0003      	movs	r3, r0
 8003cbe:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cc0:	e008      	b.n	8003cd4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cc2:	f7fe fcb1 	bl	8002628 <HAL_GetTick>
 8003cc6:	0002      	movs	r2, r0
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e188      	b.n	8003fe6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cd4:	4b10      	ldr	r3, [pc, #64]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003cd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cd8:	2202      	movs	r2, #2
 8003cda:	4013      	ands	r3, r2
 8003cdc:	d1f1      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2204      	movs	r2, #4
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	d100      	bne.n	8003cea <HAL_RCC_OscConfig+0x2fe>
 8003ce8:	e0c6      	b.n	8003e78 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cea:	231f      	movs	r3, #31
 8003cec:	18fb      	adds	r3, r7, r3
 8003cee:	2200      	movs	r2, #0
 8003cf0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003cf2:	4b09      	ldr	r3, [pc, #36]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	2238      	movs	r2, #56	; 0x38
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	2b20      	cmp	r3, #32
 8003cfc:	d11e      	bne.n	8003d3c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003cfe:	4b06      	ldr	r3, [pc, #24]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d02:	2202      	movs	r2, #2
 8003d04:	4013      	ands	r3, r2
 8003d06:	d100      	bne.n	8003d0a <HAL_RCC_OscConfig+0x31e>
 8003d08:	e0b6      	b.n	8003e78 <HAL_RCC_OscConfig+0x48c>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d000      	beq.n	8003d14 <HAL_RCC_OscConfig+0x328>
 8003d12:	e0b1      	b.n	8003e78 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e166      	b.n	8003fe6 <HAL_RCC_OscConfig+0x5fa>
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	fffeffff 	.word	0xfffeffff
 8003d20:	fffbffff 	.word	0xfffbffff
 8003d24:	ffff80ff 	.word	0xffff80ff
 8003d28:	ffffc7ff 	.word	0xffffc7ff
 8003d2c:	00f42400 	.word	0x00f42400
 8003d30:	20000004 	.word	0x20000004
 8003d34:	20000008 	.word	0x20000008
 8003d38:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d3c:	4bac      	ldr	r3, [pc, #688]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003d3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d40:	2380      	movs	r3, #128	; 0x80
 8003d42:	055b      	lsls	r3, r3, #21
 8003d44:	4013      	ands	r3, r2
 8003d46:	d101      	bne.n	8003d4c <HAL_RCC_OscConfig+0x360>
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e000      	b.n	8003d4e <HAL_RCC_OscConfig+0x362>
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d011      	beq.n	8003d76 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003d52:	4ba7      	ldr	r3, [pc, #668]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003d54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d56:	4ba6      	ldr	r3, [pc, #664]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003d58:	2180      	movs	r1, #128	; 0x80
 8003d5a:	0549      	lsls	r1, r1, #21
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003d60:	4ba3      	ldr	r3, [pc, #652]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003d62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d64:	2380      	movs	r3, #128	; 0x80
 8003d66:	055b      	lsls	r3, r3, #21
 8003d68:	4013      	ands	r3, r2
 8003d6a:	60fb      	str	r3, [r7, #12]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003d6e:	231f      	movs	r3, #31
 8003d70:	18fb      	adds	r3, r7, r3
 8003d72:	2201      	movs	r2, #1
 8003d74:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d76:	4b9f      	ldr	r3, [pc, #636]	; (8003ff4 <HAL_RCC_OscConfig+0x608>)
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	2380      	movs	r3, #128	; 0x80
 8003d7c:	005b      	lsls	r3, r3, #1
 8003d7e:	4013      	ands	r3, r2
 8003d80:	d11a      	bne.n	8003db8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d82:	4b9c      	ldr	r3, [pc, #624]	; (8003ff4 <HAL_RCC_OscConfig+0x608>)
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	4b9b      	ldr	r3, [pc, #620]	; (8003ff4 <HAL_RCC_OscConfig+0x608>)
 8003d88:	2180      	movs	r1, #128	; 0x80
 8003d8a:	0049      	lsls	r1, r1, #1
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003d90:	f7fe fc4a 	bl	8002628 <HAL_GetTick>
 8003d94:	0003      	movs	r3, r0
 8003d96:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d98:	e008      	b.n	8003dac <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d9a:	f7fe fc45 	bl	8002628 <HAL_GetTick>
 8003d9e:	0002      	movs	r2, r0
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d901      	bls.n	8003dac <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e11c      	b.n	8003fe6 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dac:	4b91      	ldr	r3, [pc, #580]	; (8003ff4 <HAL_RCC_OscConfig+0x608>)
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	2380      	movs	r3, #128	; 0x80
 8003db2:	005b      	lsls	r3, r3, #1
 8003db4:	4013      	ands	r3, r2
 8003db6:	d0f0      	beq.n	8003d9a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d106      	bne.n	8003dce <HAL_RCC_OscConfig+0x3e2>
 8003dc0:	4b8b      	ldr	r3, [pc, #556]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003dc2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003dc4:	4b8a      	ldr	r3, [pc, #552]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	65da      	str	r2, [r3, #92]	; 0x5c
 8003dcc:	e01c      	b.n	8003e08 <HAL_RCC_OscConfig+0x41c>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	2b05      	cmp	r3, #5
 8003dd4:	d10c      	bne.n	8003df0 <HAL_RCC_OscConfig+0x404>
 8003dd6:	4b86      	ldr	r3, [pc, #536]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003dd8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003dda:	4b85      	ldr	r3, [pc, #532]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003ddc:	2104      	movs	r1, #4
 8003dde:	430a      	orrs	r2, r1
 8003de0:	65da      	str	r2, [r3, #92]	; 0x5c
 8003de2:	4b83      	ldr	r3, [pc, #524]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003de4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003de6:	4b82      	ldr	r3, [pc, #520]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003de8:	2101      	movs	r1, #1
 8003dea:	430a      	orrs	r2, r1
 8003dec:	65da      	str	r2, [r3, #92]	; 0x5c
 8003dee:	e00b      	b.n	8003e08 <HAL_RCC_OscConfig+0x41c>
 8003df0:	4b7f      	ldr	r3, [pc, #508]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003df2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003df4:	4b7e      	ldr	r3, [pc, #504]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003df6:	2101      	movs	r1, #1
 8003df8:	438a      	bics	r2, r1
 8003dfa:	65da      	str	r2, [r3, #92]	; 0x5c
 8003dfc:	4b7c      	ldr	r3, [pc, #496]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003dfe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003e00:	4b7b      	ldr	r3, [pc, #492]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003e02:	2104      	movs	r1, #4
 8003e04:	438a      	bics	r2, r1
 8003e06:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d014      	beq.n	8003e3a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e10:	f7fe fc0a 	bl	8002628 <HAL_GetTick>
 8003e14:	0003      	movs	r3, r0
 8003e16:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e18:	e009      	b.n	8003e2e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e1a:	f7fe fc05 	bl	8002628 <HAL_GetTick>
 8003e1e:	0002      	movs	r2, r0
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	4a74      	ldr	r2, [pc, #464]	; (8003ff8 <HAL_RCC_OscConfig+0x60c>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e0db      	b.n	8003fe6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e2e:	4b70      	ldr	r3, [pc, #448]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e32:	2202      	movs	r2, #2
 8003e34:	4013      	ands	r3, r2
 8003e36:	d0f0      	beq.n	8003e1a <HAL_RCC_OscConfig+0x42e>
 8003e38:	e013      	b.n	8003e62 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3a:	f7fe fbf5 	bl	8002628 <HAL_GetTick>
 8003e3e:	0003      	movs	r3, r0
 8003e40:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e42:	e009      	b.n	8003e58 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e44:	f7fe fbf0 	bl	8002628 <HAL_GetTick>
 8003e48:	0002      	movs	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	4a6a      	ldr	r2, [pc, #424]	; (8003ff8 <HAL_RCC_OscConfig+0x60c>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d901      	bls.n	8003e58 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e0c6      	b.n	8003fe6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e58:	4b65      	ldr	r3, [pc, #404]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e5c:	2202      	movs	r2, #2
 8003e5e:	4013      	ands	r3, r2
 8003e60:	d1f0      	bne.n	8003e44 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003e62:	231f      	movs	r3, #31
 8003e64:	18fb      	adds	r3, r7, r3
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d105      	bne.n	8003e78 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003e6c:	4b60      	ldr	r3, [pc, #384]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003e6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e70:	4b5f      	ldr	r3, [pc, #380]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003e72:	4962      	ldr	r1, [pc, #392]	; (8003ffc <HAL_RCC_OscConfig+0x610>)
 8003e74:	400a      	ands	r2, r1
 8003e76:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	69db      	ldr	r3, [r3, #28]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d100      	bne.n	8003e82 <HAL_RCC_OscConfig+0x496>
 8003e80:	e0b0      	b.n	8003fe4 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e82:	4b5b      	ldr	r3, [pc, #364]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	2238      	movs	r2, #56	; 0x38
 8003e88:	4013      	ands	r3, r2
 8003e8a:	2b10      	cmp	r3, #16
 8003e8c:	d100      	bne.n	8003e90 <HAL_RCC_OscConfig+0x4a4>
 8003e8e:	e078      	b.n	8003f82 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	69db      	ldr	r3, [r3, #28]
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d153      	bne.n	8003f40 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e98:	4b55      	ldr	r3, [pc, #340]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	4b54      	ldr	r3, [pc, #336]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003e9e:	4958      	ldr	r1, [pc, #352]	; (8004000 <HAL_RCC_OscConfig+0x614>)
 8003ea0:	400a      	ands	r2, r1
 8003ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea4:	f7fe fbc0 	bl	8002628 <HAL_GetTick>
 8003ea8:	0003      	movs	r3, r0
 8003eaa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eac:	e008      	b.n	8003ec0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eae:	f7fe fbbb 	bl	8002628 <HAL_GetTick>
 8003eb2:	0002      	movs	r2, r0
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e092      	b.n	8003fe6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ec0:	4b4b      	ldr	r3, [pc, #300]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	2380      	movs	r3, #128	; 0x80
 8003ec6:	049b      	lsls	r3, r3, #18
 8003ec8:	4013      	ands	r3, r2
 8003eca:	d1f0      	bne.n	8003eae <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ecc:	4b48      	ldr	r3, [pc, #288]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	4a4c      	ldr	r2, [pc, #304]	; (8004004 <HAL_RCC_OscConfig+0x618>)
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	0019      	movs	r1, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a1a      	ldr	r2, [r3, #32]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee4:	021b      	lsls	r3, r3, #8
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eec:	431a      	orrs	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	4b3e      	ldr	r3, [pc, #248]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003efa:	4b3d      	ldr	r3, [pc, #244]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	4b3c      	ldr	r3, [pc, #240]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003f00:	2180      	movs	r1, #128	; 0x80
 8003f02:	0449      	lsls	r1, r1, #17
 8003f04:	430a      	orrs	r2, r1
 8003f06:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003f08:	4b39      	ldr	r3, [pc, #228]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003f0a:	68da      	ldr	r2, [r3, #12]
 8003f0c:	4b38      	ldr	r3, [pc, #224]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003f0e:	2180      	movs	r1, #128	; 0x80
 8003f10:	0549      	lsls	r1, r1, #21
 8003f12:	430a      	orrs	r2, r1
 8003f14:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f16:	f7fe fb87 	bl	8002628 <HAL_GetTick>
 8003f1a:	0003      	movs	r3, r0
 8003f1c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f1e:	e008      	b.n	8003f32 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f20:	f7fe fb82 	bl	8002628 <HAL_GetTick>
 8003f24:	0002      	movs	r2, r0
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e059      	b.n	8003fe6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f32:	4b2f      	ldr	r3, [pc, #188]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	2380      	movs	r3, #128	; 0x80
 8003f38:	049b      	lsls	r3, r3, #18
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	d0f0      	beq.n	8003f20 <HAL_RCC_OscConfig+0x534>
 8003f3e:	e051      	b.n	8003fe4 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f40:	4b2b      	ldr	r3, [pc, #172]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	4b2a      	ldr	r3, [pc, #168]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003f46:	492e      	ldr	r1, [pc, #184]	; (8004000 <HAL_RCC_OscConfig+0x614>)
 8003f48:	400a      	ands	r2, r1
 8003f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f4c:	f7fe fb6c 	bl	8002628 <HAL_GetTick>
 8003f50:	0003      	movs	r3, r0
 8003f52:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f54:	e008      	b.n	8003f68 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f56:	f7fe fb67 	bl	8002628 <HAL_GetTick>
 8003f5a:	0002      	movs	r2, r0
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e03e      	b.n	8003fe6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f68:	4b21      	ldr	r3, [pc, #132]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	2380      	movs	r3, #128	; 0x80
 8003f6e:	049b      	lsls	r3, r3, #18
 8003f70:	4013      	ands	r3, r2
 8003f72:	d1f0      	bne.n	8003f56 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8003f74:	4b1e      	ldr	r3, [pc, #120]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003f76:	68da      	ldr	r2, [r3, #12]
 8003f78:	4b1d      	ldr	r3, [pc, #116]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003f7a:	4923      	ldr	r1, [pc, #140]	; (8004008 <HAL_RCC_OscConfig+0x61c>)
 8003f7c:	400a      	ands	r2, r1
 8003f7e:	60da      	str	r2, [r3, #12]
 8003f80:	e030      	b.n	8003fe4 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	69db      	ldr	r3, [r3, #28]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d101      	bne.n	8003f8e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e02b      	b.n	8003fe6 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003f8e:	4b18      	ldr	r3, [pc, #96]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	2203      	movs	r2, #3
 8003f98:	401a      	ands	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d11e      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	2270      	movs	r2, #112	; 0x70
 8003fa6:	401a      	ands	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d117      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	23fe      	movs	r3, #254	; 0xfe
 8003fb4:	01db      	lsls	r3, r3, #7
 8003fb6:	401a      	ands	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fbc:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d10e      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	23f8      	movs	r3, #248	; 0xf8
 8003fc6:	039b      	lsls	r3, r3, #14
 8003fc8:	401a      	ands	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d106      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	0f5b      	lsrs	r3, r3, #29
 8003fd6:	075a      	lsls	r2, r3, #29
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d001      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e000      	b.n	8003fe6 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	0018      	movs	r0, r3
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	b008      	add	sp, #32
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	46c0      	nop			; (mov r8, r8)
 8003ff0:	40021000 	.word	0x40021000
 8003ff4:	40007000 	.word	0x40007000
 8003ff8:	00001388 	.word	0x00001388
 8003ffc:	efffffff 	.word	0xefffffff
 8004000:	feffffff 	.word	0xfeffffff
 8004004:	1fc1808c 	.word	0x1fc1808c
 8004008:	effefffc 	.word	0xeffefffc

0800400c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d101      	bne.n	8004020 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e0e9      	b.n	80041f4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004020:	4b76      	ldr	r3, [pc, #472]	; (80041fc <HAL_RCC_ClockConfig+0x1f0>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2207      	movs	r2, #7
 8004026:	4013      	ands	r3, r2
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	429a      	cmp	r2, r3
 800402c:	d91e      	bls.n	800406c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800402e:	4b73      	ldr	r3, [pc, #460]	; (80041fc <HAL_RCC_ClockConfig+0x1f0>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2207      	movs	r2, #7
 8004034:	4393      	bics	r3, r2
 8004036:	0019      	movs	r1, r3
 8004038:	4b70      	ldr	r3, [pc, #448]	; (80041fc <HAL_RCC_ClockConfig+0x1f0>)
 800403a:	683a      	ldr	r2, [r7, #0]
 800403c:	430a      	orrs	r2, r1
 800403e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004040:	f7fe faf2 	bl	8002628 <HAL_GetTick>
 8004044:	0003      	movs	r3, r0
 8004046:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004048:	e009      	b.n	800405e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800404a:	f7fe faed 	bl	8002628 <HAL_GetTick>
 800404e:	0002      	movs	r2, r0
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	4a6a      	ldr	r2, [pc, #424]	; (8004200 <HAL_RCC_ClockConfig+0x1f4>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d901      	bls.n	800405e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e0ca      	b.n	80041f4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800405e:	4b67      	ldr	r3, [pc, #412]	; (80041fc <HAL_RCC_ClockConfig+0x1f0>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2207      	movs	r2, #7
 8004064:	4013      	ands	r3, r2
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	429a      	cmp	r2, r3
 800406a:	d1ee      	bne.n	800404a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2202      	movs	r2, #2
 8004072:	4013      	ands	r3, r2
 8004074:	d015      	beq.n	80040a2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2204      	movs	r2, #4
 800407c:	4013      	ands	r3, r2
 800407e:	d006      	beq.n	800408e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004080:	4b60      	ldr	r3, [pc, #384]	; (8004204 <HAL_RCC_ClockConfig+0x1f8>)
 8004082:	689a      	ldr	r2, [r3, #8]
 8004084:	4b5f      	ldr	r3, [pc, #380]	; (8004204 <HAL_RCC_ClockConfig+0x1f8>)
 8004086:	21e0      	movs	r1, #224	; 0xe0
 8004088:	01c9      	lsls	r1, r1, #7
 800408a:	430a      	orrs	r2, r1
 800408c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800408e:	4b5d      	ldr	r3, [pc, #372]	; (8004204 <HAL_RCC_ClockConfig+0x1f8>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	4a5d      	ldr	r2, [pc, #372]	; (8004208 <HAL_RCC_ClockConfig+0x1fc>)
 8004094:	4013      	ands	r3, r2
 8004096:	0019      	movs	r1, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689a      	ldr	r2, [r3, #8]
 800409c:	4b59      	ldr	r3, [pc, #356]	; (8004204 <HAL_RCC_ClockConfig+0x1f8>)
 800409e:	430a      	orrs	r2, r1
 80040a0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2201      	movs	r2, #1
 80040a8:	4013      	ands	r3, r2
 80040aa:	d057      	beq.n	800415c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d107      	bne.n	80040c4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040b4:	4b53      	ldr	r3, [pc, #332]	; (8004204 <HAL_RCC_ClockConfig+0x1f8>)
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	2380      	movs	r3, #128	; 0x80
 80040ba:	029b      	lsls	r3, r3, #10
 80040bc:	4013      	ands	r3, r2
 80040be:	d12b      	bne.n	8004118 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e097      	b.n	80041f4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d107      	bne.n	80040dc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040cc:	4b4d      	ldr	r3, [pc, #308]	; (8004204 <HAL_RCC_ClockConfig+0x1f8>)
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	2380      	movs	r3, #128	; 0x80
 80040d2:	049b      	lsls	r3, r3, #18
 80040d4:	4013      	ands	r3, r2
 80040d6:	d11f      	bne.n	8004118 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e08b      	b.n	80041f4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d107      	bne.n	80040f4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040e4:	4b47      	ldr	r3, [pc, #284]	; (8004204 <HAL_RCC_ClockConfig+0x1f8>)
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	2380      	movs	r3, #128	; 0x80
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	4013      	ands	r3, r2
 80040ee:	d113      	bne.n	8004118 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e07f      	b.n	80041f4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	2b03      	cmp	r3, #3
 80040fa:	d106      	bne.n	800410a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040fc:	4b41      	ldr	r3, [pc, #260]	; (8004204 <HAL_RCC_ClockConfig+0x1f8>)
 80040fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004100:	2202      	movs	r2, #2
 8004102:	4013      	ands	r3, r2
 8004104:	d108      	bne.n	8004118 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e074      	b.n	80041f4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800410a:	4b3e      	ldr	r3, [pc, #248]	; (8004204 <HAL_RCC_ClockConfig+0x1f8>)
 800410c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800410e:	2202      	movs	r2, #2
 8004110:	4013      	ands	r3, r2
 8004112:	d101      	bne.n	8004118 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e06d      	b.n	80041f4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004118:	4b3a      	ldr	r3, [pc, #232]	; (8004204 <HAL_RCC_ClockConfig+0x1f8>)
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	2207      	movs	r2, #7
 800411e:	4393      	bics	r3, r2
 8004120:	0019      	movs	r1, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685a      	ldr	r2, [r3, #4]
 8004126:	4b37      	ldr	r3, [pc, #220]	; (8004204 <HAL_RCC_ClockConfig+0x1f8>)
 8004128:	430a      	orrs	r2, r1
 800412a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800412c:	f7fe fa7c 	bl	8002628 <HAL_GetTick>
 8004130:	0003      	movs	r3, r0
 8004132:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004134:	e009      	b.n	800414a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004136:	f7fe fa77 	bl	8002628 <HAL_GetTick>
 800413a:	0002      	movs	r2, r0
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	4a2f      	ldr	r2, [pc, #188]	; (8004200 <HAL_RCC_ClockConfig+0x1f4>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d901      	bls.n	800414a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e054      	b.n	80041f4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800414a:	4b2e      	ldr	r3, [pc, #184]	; (8004204 <HAL_RCC_ClockConfig+0x1f8>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	2238      	movs	r2, #56	; 0x38
 8004150:	401a      	ands	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	429a      	cmp	r2, r3
 800415a:	d1ec      	bne.n	8004136 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800415c:	4b27      	ldr	r3, [pc, #156]	; (80041fc <HAL_RCC_ClockConfig+0x1f0>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2207      	movs	r2, #7
 8004162:	4013      	ands	r3, r2
 8004164:	683a      	ldr	r2, [r7, #0]
 8004166:	429a      	cmp	r2, r3
 8004168:	d21e      	bcs.n	80041a8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800416a:	4b24      	ldr	r3, [pc, #144]	; (80041fc <HAL_RCC_ClockConfig+0x1f0>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2207      	movs	r2, #7
 8004170:	4393      	bics	r3, r2
 8004172:	0019      	movs	r1, r3
 8004174:	4b21      	ldr	r3, [pc, #132]	; (80041fc <HAL_RCC_ClockConfig+0x1f0>)
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	430a      	orrs	r2, r1
 800417a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800417c:	f7fe fa54 	bl	8002628 <HAL_GetTick>
 8004180:	0003      	movs	r3, r0
 8004182:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004184:	e009      	b.n	800419a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004186:	f7fe fa4f 	bl	8002628 <HAL_GetTick>
 800418a:	0002      	movs	r2, r0
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	4a1b      	ldr	r2, [pc, #108]	; (8004200 <HAL_RCC_ClockConfig+0x1f4>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d901      	bls.n	800419a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e02c      	b.n	80041f4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800419a:	4b18      	ldr	r3, [pc, #96]	; (80041fc <HAL_RCC_ClockConfig+0x1f0>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2207      	movs	r2, #7
 80041a0:	4013      	ands	r3, r2
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d1ee      	bne.n	8004186 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2204      	movs	r2, #4
 80041ae:	4013      	ands	r3, r2
 80041b0:	d009      	beq.n	80041c6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80041b2:	4b14      	ldr	r3, [pc, #80]	; (8004204 <HAL_RCC_ClockConfig+0x1f8>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	4a15      	ldr	r2, [pc, #84]	; (800420c <HAL_RCC_ClockConfig+0x200>)
 80041b8:	4013      	ands	r3, r2
 80041ba:	0019      	movs	r1, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	68da      	ldr	r2, [r3, #12]
 80041c0:	4b10      	ldr	r3, [pc, #64]	; (8004204 <HAL_RCC_ClockConfig+0x1f8>)
 80041c2:	430a      	orrs	r2, r1
 80041c4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80041c6:	f000 f829 	bl	800421c <HAL_RCC_GetSysClockFreq>
 80041ca:	0001      	movs	r1, r0
 80041cc:	4b0d      	ldr	r3, [pc, #52]	; (8004204 <HAL_RCC_ClockConfig+0x1f8>)
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	0a1b      	lsrs	r3, r3, #8
 80041d2:	220f      	movs	r2, #15
 80041d4:	401a      	ands	r2, r3
 80041d6:	4b0e      	ldr	r3, [pc, #56]	; (8004210 <HAL_RCC_ClockConfig+0x204>)
 80041d8:	0092      	lsls	r2, r2, #2
 80041da:	58d3      	ldr	r3, [r2, r3]
 80041dc:	221f      	movs	r2, #31
 80041de:	4013      	ands	r3, r2
 80041e0:	000a      	movs	r2, r1
 80041e2:	40da      	lsrs	r2, r3
 80041e4:	4b0b      	ldr	r3, [pc, #44]	; (8004214 <HAL_RCC_ClockConfig+0x208>)
 80041e6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80041e8:	4b0b      	ldr	r3, [pc, #44]	; (8004218 <HAL_RCC_ClockConfig+0x20c>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	0018      	movs	r0, r3
 80041ee:	f7fe f9bf 	bl	8002570 <HAL_InitTick>
 80041f2:	0003      	movs	r3, r0
}
 80041f4:	0018      	movs	r0, r3
 80041f6:	46bd      	mov	sp, r7
 80041f8:	b004      	add	sp, #16
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	40022000 	.word	0x40022000
 8004200:	00001388 	.word	0x00001388
 8004204:	40021000 	.word	0x40021000
 8004208:	fffff0ff 	.word	0xfffff0ff
 800420c:	ffff8fff 	.word	0xffff8fff
 8004210:	080044bc 	.word	0x080044bc
 8004214:	20000004 	.word	0x20000004
 8004218:	20000008 	.word	0x20000008

0800421c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004222:	4b3c      	ldr	r3, [pc, #240]	; (8004314 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	2238      	movs	r2, #56	; 0x38
 8004228:	4013      	ands	r3, r2
 800422a:	d10f      	bne.n	800424c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800422c:	4b39      	ldr	r3, [pc, #228]	; (8004314 <HAL_RCC_GetSysClockFreq+0xf8>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	0adb      	lsrs	r3, r3, #11
 8004232:	2207      	movs	r2, #7
 8004234:	4013      	ands	r3, r2
 8004236:	2201      	movs	r2, #1
 8004238:	409a      	lsls	r2, r3
 800423a:	0013      	movs	r3, r2
 800423c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800423e:	6839      	ldr	r1, [r7, #0]
 8004240:	4835      	ldr	r0, [pc, #212]	; (8004318 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004242:	f7fb ff5d 	bl	8000100 <__udivsi3>
 8004246:	0003      	movs	r3, r0
 8004248:	613b      	str	r3, [r7, #16]
 800424a:	e05d      	b.n	8004308 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800424c:	4b31      	ldr	r3, [pc, #196]	; (8004314 <HAL_RCC_GetSysClockFreq+0xf8>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	2238      	movs	r2, #56	; 0x38
 8004252:	4013      	ands	r3, r2
 8004254:	2b08      	cmp	r3, #8
 8004256:	d102      	bne.n	800425e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004258:	4b30      	ldr	r3, [pc, #192]	; (800431c <HAL_RCC_GetSysClockFreq+0x100>)
 800425a:	613b      	str	r3, [r7, #16]
 800425c:	e054      	b.n	8004308 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800425e:	4b2d      	ldr	r3, [pc, #180]	; (8004314 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	2238      	movs	r2, #56	; 0x38
 8004264:	4013      	ands	r3, r2
 8004266:	2b10      	cmp	r3, #16
 8004268:	d138      	bne.n	80042dc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800426a:	4b2a      	ldr	r3, [pc, #168]	; (8004314 <HAL_RCC_GetSysClockFreq+0xf8>)
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	2203      	movs	r2, #3
 8004270:	4013      	ands	r3, r2
 8004272:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004274:	4b27      	ldr	r3, [pc, #156]	; (8004314 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	091b      	lsrs	r3, r3, #4
 800427a:	2207      	movs	r2, #7
 800427c:	4013      	ands	r3, r2
 800427e:	3301      	adds	r3, #1
 8004280:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2b03      	cmp	r3, #3
 8004286:	d10d      	bne.n	80042a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004288:	68b9      	ldr	r1, [r7, #8]
 800428a:	4824      	ldr	r0, [pc, #144]	; (800431c <HAL_RCC_GetSysClockFreq+0x100>)
 800428c:	f7fb ff38 	bl	8000100 <__udivsi3>
 8004290:	0003      	movs	r3, r0
 8004292:	0019      	movs	r1, r3
 8004294:	4b1f      	ldr	r3, [pc, #124]	; (8004314 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	0a1b      	lsrs	r3, r3, #8
 800429a:	227f      	movs	r2, #127	; 0x7f
 800429c:	4013      	ands	r3, r2
 800429e:	434b      	muls	r3, r1
 80042a0:	617b      	str	r3, [r7, #20]
        break;
 80042a2:	e00d      	b.n	80042c0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80042a4:	68b9      	ldr	r1, [r7, #8]
 80042a6:	481c      	ldr	r0, [pc, #112]	; (8004318 <HAL_RCC_GetSysClockFreq+0xfc>)
 80042a8:	f7fb ff2a 	bl	8000100 <__udivsi3>
 80042ac:	0003      	movs	r3, r0
 80042ae:	0019      	movs	r1, r3
 80042b0:	4b18      	ldr	r3, [pc, #96]	; (8004314 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	0a1b      	lsrs	r3, r3, #8
 80042b6:	227f      	movs	r2, #127	; 0x7f
 80042b8:	4013      	ands	r3, r2
 80042ba:	434b      	muls	r3, r1
 80042bc:	617b      	str	r3, [r7, #20]
        break;
 80042be:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80042c0:	4b14      	ldr	r3, [pc, #80]	; (8004314 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	0f5b      	lsrs	r3, r3, #29
 80042c6:	2207      	movs	r2, #7
 80042c8:	4013      	ands	r3, r2
 80042ca:	3301      	adds	r3, #1
 80042cc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80042ce:	6879      	ldr	r1, [r7, #4]
 80042d0:	6978      	ldr	r0, [r7, #20]
 80042d2:	f7fb ff15 	bl	8000100 <__udivsi3>
 80042d6:	0003      	movs	r3, r0
 80042d8:	613b      	str	r3, [r7, #16]
 80042da:	e015      	b.n	8004308 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80042dc:	4b0d      	ldr	r3, [pc, #52]	; (8004314 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	2238      	movs	r2, #56	; 0x38
 80042e2:	4013      	ands	r3, r2
 80042e4:	2b20      	cmp	r3, #32
 80042e6:	d103      	bne.n	80042f0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80042e8:	2380      	movs	r3, #128	; 0x80
 80042ea:	021b      	lsls	r3, r3, #8
 80042ec:	613b      	str	r3, [r7, #16]
 80042ee:	e00b      	b.n	8004308 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80042f0:	4b08      	ldr	r3, [pc, #32]	; (8004314 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	2238      	movs	r2, #56	; 0x38
 80042f6:	4013      	ands	r3, r2
 80042f8:	2b18      	cmp	r3, #24
 80042fa:	d103      	bne.n	8004304 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80042fc:	23fa      	movs	r3, #250	; 0xfa
 80042fe:	01db      	lsls	r3, r3, #7
 8004300:	613b      	str	r3, [r7, #16]
 8004302:	e001      	b.n	8004308 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004304:	2300      	movs	r3, #0
 8004306:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004308:	693b      	ldr	r3, [r7, #16]
}
 800430a:	0018      	movs	r0, r3
 800430c:	46bd      	mov	sp, r7
 800430e:	b006      	add	sp, #24
 8004310:	bd80      	pop	{r7, pc}
 8004312:	46c0      	nop			; (mov r8, r8)
 8004314:	40021000 	.word	0x40021000
 8004318:	00f42400 	.word	0x00f42400
 800431c:	007a1200 	.word	0x007a1200

08004320 <__libc_init_array>:
 8004320:	b570      	push	{r4, r5, r6, lr}
 8004322:	2600      	movs	r6, #0
 8004324:	4d0c      	ldr	r5, [pc, #48]	; (8004358 <__libc_init_array+0x38>)
 8004326:	4c0d      	ldr	r4, [pc, #52]	; (800435c <__libc_init_array+0x3c>)
 8004328:	1b64      	subs	r4, r4, r5
 800432a:	10a4      	asrs	r4, r4, #2
 800432c:	42a6      	cmp	r6, r4
 800432e:	d109      	bne.n	8004344 <__libc_init_array+0x24>
 8004330:	2600      	movs	r6, #0
 8004332:	f000 f821 	bl	8004378 <_init>
 8004336:	4d0a      	ldr	r5, [pc, #40]	; (8004360 <__libc_init_array+0x40>)
 8004338:	4c0a      	ldr	r4, [pc, #40]	; (8004364 <__libc_init_array+0x44>)
 800433a:	1b64      	subs	r4, r4, r5
 800433c:	10a4      	asrs	r4, r4, #2
 800433e:	42a6      	cmp	r6, r4
 8004340:	d105      	bne.n	800434e <__libc_init_array+0x2e>
 8004342:	bd70      	pop	{r4, r5, r6, pc}
 8004344:	00b3      	lsls	r3, r6, #2
 8004346:	58eb      	ldr	r3, [r5, r3]
 8004348:	4798      	blx	r3
 800434a:	3601      	adds	r6, #1
 800434c:	e7ee      	b.n	800432c <__libc_init_array+0xc>
 800434e:	00b3      	lsls	r3, r6, #2
 8004350:	58eb      	ldr	r3, [r5, r3]
 8004352:	4798      	blx	r3
 8004354:	3601      	adds	r6, #1
 8004356:	e7f2      	b.n	800433e <__libc_init_array+0x1e>
 8004358:	080044fc 	.word	0x080044fc
 800435c:	080044fc 	.word	0x080044fc
 8004360:	080044fc 	.word	0x080044fc
 8004364:	08004500 	.word	0x08004500

08004368 <memset>:
 8004368:	0003      	movs	r3, r0
 800436a:	1882      	adds	r2, r0, r2
 800436c:	4293      	cmp	r3, r2
 800436e:	d100      	bne.n	8004372 <memset+0xa>
 8004370:	4770      	bx	lr
 8004372:	7019      	strb	r1, [r3, #0]
 8004374:	3301      	adds	r3, #1
 8004376:	e7f9      	b.n	800436c <memset+0x4>

08004378 <_init>:
 8004378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800437a:	46c0      	nop			; (mov r8, r8)
 800437c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800437e:	bc08      	pop	{r3}
 8004380:	469e      	mov	lr, r3
 8004382:	4770      	bx	lr

08004384 <_fini>:
 8004384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004386:	46c0      	nop			; (mov r8, r8)
 8004388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800438a:	bc08      	pop	{r3}
 800438c:	469e      	mov	lr, r3
 800438e:	4770      	bx	lr
