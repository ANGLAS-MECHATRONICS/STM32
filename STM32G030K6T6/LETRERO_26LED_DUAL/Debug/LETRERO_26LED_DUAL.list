
LETRERO_26LED_DUAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005670  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08005728  08005728  00015728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005894  08005894  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005894  08005894  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005894  08005894  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005894  08005894  00015894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005898  08005898  00015898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800589c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000010  080058ac  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  080058ac  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000075d6  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001765  00000000  00000000  0002760e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000788  00000000  00000000  00028d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006d0  00000000  00000000  00029500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000141d8  00000000  00000000  00029bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000084ae  00000000  00000000  0003dda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000800b9  00000000  00000000  00046256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c630f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d8c  00000000  00000000  000c6360  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000010 	.word	0x20000010
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08005710 	.word	0x08005710

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000014 	.word	0x20000014
 80000fc:	08005710 	.word	0x08005710

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <__aeabi_f2uiz>:
 8000218:	219e      	movs	r1, #158	; 0x9e
 800021a:	b510      	push	{r4, lr}
 800021c:	05c9      	lsls	r1, r1, #23
 800021e:	1c04      	adds	r4, r0, #0
 8000220:	f001 fd54 	bl	8001ccc <__aeabi_fcmpge>
 8000224:	2800      	cmp	r0, #0
 8000226:	d103      	bne.n	8000230 <__aeabi_f2uiz+0x18>
 8000228:	1c20      	adds	r0, r4, #0
 800022a:	f000 fdb5 	bl	8000d98 <__aeabi_f2iz>
 800022e:	bd10      	pop	{r4, pc}
 8000230:	219e      	movs	r1, #158	; 0x9e
 8000232:	1c20      	adds	r0, r4, #0
 8000234:	05c9      	lsls	r1, r1, #23
 8000236:	f000 fc01 	bl	8000a3c <__aeabi_fsub>
 800023a:	f000 fdad 	bl	8000d98 <__aeabi_f2iz>
 800023e:	2380      	movs	r3, #128	; 0x80
 8000240:	061b      	lsls	r3, r3, #24
 8000242:	469c      	mov	ip, r3
 8000244:	4460      	add	r0, ip
 8000246:	e7f2      	b.n	800022e <__aeabi_f2uiz+0x16>

08000248 <__aeabi_d2uiz>:
 8000248:	b570      	push	{r4, r5, r6, lr}
 800024a:	2200      	movs	r2, #0
 800024c:	4b0c      	ldr	r3, [pc, #48]	; (8000280 <__aeabi_d2uiz+0x38>)
 800024e:	0004      	movs	r4, r0
 8000250:	000d      	movs	r5, r1
 8000252:	f001 fd01 	bl	8001c58 <__aeabi_dcmpge>
 8000256:	2800      	cmp	r0, #0
 8000258:	d104      	bne.n	8000264 <__aeabi_d2uiz+0x1c>
 800025a:	0020      	movs	r0, r4
 800025c:	0029      	movs	r1, r5
 800025e:	f001 fc49 	bl	8001af4 <__aeabi_d2iz>
 8000262:	bd70      	pop	{r4, r5, r6, pc}
 8000264:	4b06      	ldr	r3, [pc, #24]	; (8000280 <__aeabi_d2uiz+0x38>)
 8000266:	2200      	movs	r2, #0
 8000268:	0020      	movs	r0, r4
 800026a:	0029      	movs	r1, r5
 800026c:	f001 f8b0 	bl	80013d0 <__aeabi_dsub>
 8000270:	f001 fc40 	bl	8001af4 <__aeabi_d2iz>
 8000274:	2380      	movs	r3, #128	; 0x80
 8000276:	061b      	lsls	r3, r3, #24
 8000278:	469c      	mov	ip, r3
 800027a:	4460      	add	r0, ip
 800027c:	e7f1      	b.n	8000262 <__aeabi_d2uiz+0x1a>
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	41e00000 	.word	0x41e00000

08000284 <__aeabi_fadd>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	46c6      	mov	lr, r8
 8000288:	0243      	lsls	r3, r0, #9
 800028a:	0a5b      	lsrs	r3, r3, #9
 800028c:	024e      	lsls	r6, r1, #9
 800028e:	0045      	lsls	r5, r0, #1
 8000290:	004f      	lsls	r7, r1, #1
 8000292:	00da      	lsls	r2, r3, #3
 8000294:	0fc4      	lsrs	r4, r0, #31
 8000296:	469c      	mov	ip, r3
 8000298:	0a70      	lsrs	r0, r6, #9
 800029a:	4690      	mov	r8, r2
 800029c:	b500      	push	{lr}
 800029e:	0e2d      	lsrs	r5, r5, #24
 80002a0:	0e3f      	lsrs	r7, r7, #24
 80002a2:	0fc9      	lsrs	r1, r1, #31
 80002a4:	09b6      	lsrs	r6, r6, #6
 80002a6:	428c      	cmp	r4, r1
 80002a8:	d04b      	beq.n	8000342 <__aeabi_fadd+0xbe>
 80002aa:	1bea      	subs	r2, r5, r7
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	dd36      	ble.n	800031e <__aeabi_fadd+0x9a>
 80002b0:	2f00      	cmp	r7, #0
 80002b2:	d061      	beq.n	8000378 <__aeabi_fadd+0xf4>
 80002b4:	2dff      	cmp	r5, #255	; 0xff
 80002b6:	d100      	bne.n	80002ba <__aeabi_fadd+0x36>
 80002b8:	e0ad      	b.n	8000416 <__aeabi_fadd+0x192>
 80002ba:	2380      	movs	r3, #128	; 0x80
 80002bc:	04db      	lsls	r3, r3, #19
 80002be:	431e      	orrs	r6, r3
 80002c0:	2a1b      	cmp	r2, #27
 80002c2:	dc00      	bgt.n	80002c6 <__aeabi_fadd+0x42>
 80002c4:	e0d3      	b.n	800046e <__aeabi_fadd+0x1ea>
 80002c6:	2001      	movs	r0, #1
 80002c8:	4643      	mov	r3, r8
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	0143      	lsls	r3, r0, #5
 80002ce:	d400      	bmi.n	80002d2 <__aeabi_fadd+0x4e>
 80002d0:	e08c      	b.n	80003ec <__aeabi_fadd+0x168>
 80002d2:	0180      	lsls	r0, r0, #6
 80002d4:	0987      	lsrs	r7, r0, #6
 80002d6:	0038      	movs	r0, r7
 80002d8:	f001 fd02 	bl	8001ce0 <__clzsi2>
 80002dc:	3805      	subs	r0, #5
 80002de:	4087      	lsls	r7, r0
 80002e0:	4285      	cmp	r5, r0
 80002e2:	dc00      	bgt.n	80002e6 <__aeabi_fadd+0x62>
 80002e4:	e0b6      	b.n	8000454 <__aeabi_fadd+0x1d0>
 80002e6:	1a2d      	subs	r5, r5, r0
 80002e8:	48b3      	ldr	r0, [pc, #716]	; (80005b8 <__aeabi_fadd+0x334>)
 80002ea:	4038      	ands	r0, r7
 80002ec:	0743      	lsls	r3, r0, #29
 80002ee:	d004      	beq.n	80002fa <__aeabi_fadd+0x76>
 80002f0:	230f      	movs	r3, #15
 80002f2:	4003      	ands	r3, r0
 80002f4:	2b04      	cmp	r3, #4
 80002f6:	d000      	beq.n	80002fa <__aeabi_fadd+0x76>
 80002f8:	3004      	adds	r0, #4
 80002fa:	0143      	lsls	r3, r0, #5
 80002fc:	d400      	bmi.n	8000300 <__aeabi_fadd+0x7c>
 80002fe:	e078      	b.n	80003f2 <__aeabi_fadd+0x16e>
 8000300:	1c6a      	adds	r2, r5, #1
 8000302:	2dfe      	cmp	r5, #254	; 0xfe
 8000304:	d065      	beq.n	80003d2 <__aeabi_fadd+0x14e>
 8000306:	0180      	lsls	r0, r0, #6
 8000308:	0a43      	lsrs	r3, r0, #9
 800030a:	469c      	mov	ip, r3
 800030c:	b2d2      	uxtb	r2, r2
 800030e:	4663      	mov	r3, ip
 8000310:	05d0      	lsls	r0, r2, #23
 8000312:	4318      	orrs	r0, r3
 8000314:	07e4      	lsls	r4, r4, #31
 8000316:	4320      	orrs	r0, r4
 8000318:	bc80      	pop	{r7}
 800031a:	46b8      	mov	r8, r7
 800031c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800031e:	2a00      	cmp	r2, #0
 8000320:	d035      	beq.n	800038e <__aeabi_fadd+0x10a>
 8000322:	1b7a      	subs	r2, r7, r5
 8000324:	2d00      	cmp	r5, #0
 8000326:	d000      	beq.n	800032a <__aeabi_fadd+0xa6>
 8000328:	e0af      	b.n	800048a <__aeabi_fadd+0x206>
 800032a:	4643      	mov	r3, r8
 800032c:	2b00      	cmp	r3, #0
 800032e:	d100      	bne.n	8000332 <__aeabi_fadd+0xae>
 8000330:	e0a7      	b.n	8000482 <__aeabi_fadd+0x1fe>
 8000332:	1e53      	subs	r3, r2, #1
 8000334:	2a01      	cmp	r2, #1
 8000336:	d100      	bne.n	800033a <__aeabi_fadd+0xb6>
 8000338:	e12f      	b.n	800059a <__aeabi_fadd+0x316>
 800033a:	2aff      	cmp	r2, #255	; 0xff
 800033c:	d069      	beq.n	8000412 <__aeabi_fadd+0x18e>
 800033e:	001a      	movs	r2, r3
 8000340:	e0aa      	b.n	8000498 <__aeabi_fadd+0x214>
 8000342:	1be9      	subs	r1, r5, r7
 8000344:	2900      	cmp	r1, #0
 8000346:	dd70      	ble.n	800042a <__aeabi_fadd+0x1a6>
 8000348:	2f00      	cmp	r7, #0
 800034a:	d037      	beq.n	80003bc <__aeabi_fadd+0x138>
 800034c:	2dff      	cmp	r5, #255	; 0xff
 800034e:	d062      	beq.n	8000416 <__aeabi_fadd+0x192>
 8000350:	2380      	movs	r3, #128	; 0x80
 8000352:	04db      	lsls	r3, r3, #19
 8000354:	431e      	orrs	r6, r3
 8000356:	291b      	cmp	r1, #27
 8000358:	dc00      	bgt.n	800035c <__aeabi_fadd+0xd8>
 800035a:	e0b0      	b.n	80004be <__aeabi_fadd+0x23a>
 800035c:	2001      	movs	r0, #1
 800035e:	4440      	add	r0, r8
 8000360:	0143      	lsls	r3, r0, #5
 8000362:	d543      	bpl.n	80003ec <__aeabi_fadd+0x168>
 8000364:	3501      	adds	r5, #1
 8000366:	2dff      	cmp	r5, #255	; 0xff
 8000368:	d033      	beq.n	80003d2 <__aeabi_fadd+0x14e>
 800036a:	2301      	movs	r3, #1
 800036c:	4a93      	ldr	r2, [pc, #588]	; (80005bc <__aeabi_fadd+0x338>)
 800036e:	4003      	ands	r3, r0
 8000370:	0840      	lsrs	r0, r0, #1
 8000372:	4010      	ands	r0, r2
 8000374:	4318      	orrs	r0, r3
 8000376:	e7b9      	b.n	80002ec <__aeabi_fadd+0x68>
 8000378:	2e00      	cmp	r6, #0
 800037a:	d100      	bne.n	800037e <__aeabi_fadd+0xfa>
 800037c:	e083      	b.n	8000486 <__aeabi_fadd+0x202>
 800037e:	1e51      	subs	r1, r2, #1
 8000380:	2a01      	cmp	r2, #1
 8000382:	d100      	bne.n	8000386 <__aeabi_fadd+0x102>
 8000384:	e0d8      	b.n	8000538 <__aeabi_fadd+0x2b4>
 8000386:	2aff      	cmp	r2, #255	; 0xff
 8000388:	d045      	beq.n	8000416 <__aeabi_fadd+0x192>
 800038a:	000a      	movs	r2, r1
 800038c:	e798      	b.n	80002c0 <__aeabi_fadd+0x3c>
 800038e:	27fe      	movs	r7, #254	; 0xfe
 8000390:	1c6a      	adds	r2, r5, #1
 8000392:	4217      	tst	r7, r2
 8000394:	d000      	beq.n	8000398 <__aeabi_fadd+0x114>
 8000396:	e086      	b.n	80004a6 <__aeabi_fadd+0x222>
 8000398:	2d00      	cmp	r5, #0
 800039a:	d000      	beq.n	800039e <__aeabi_fadd+0x11a>
 800039c:	e0b7      	b.n	800050e <__aeabi_fadd+0x28a>
 800039e:	4643      	mov	r3, r8
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d100      	bne.n	80003a6 <__aeabi_fadd+0x122>
 80003a4:	e0f3      	b.n	800058e <__aeabi_fadd+0x30a>
 80003a6:	2200      	movs	r2, #0
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0b0      	beq.n	800030e <__aeabi_fadd+0x8a>
 80003ac:	1b98      	subs	r0, r3, r6
 80003ae:	0143      	lsls	r3, r0, #5
 80003b0:	d400      	bmi.n	80003b4 <__aeabi_fadd+0x130>
 80003b2:	e0fa      	b.n	80005aa <__aeabi_fadd+0x326>
 80003b4:	4643      	mov	r3, r8
 80003b6:	000c      	movs	r4, r1
 80003b8:	1af0      	subs	r0, r6, r3
 80003ba:	e797      	b.n	80002ec <__aeabi_fadd+0x68>
 80003bc:	2e00      	cmp	r6, #0
 80003be:	d100      	bne.n	80003c2 <__aeabi_fadd+0x13e>
 80003c0:	e0c8      	b.n	8000554 <__aeabi_fadd+0x2d0>
 80003c2:	1e4a      	subs	r2, r1, #1
 80003c4:	2901      	cmp	r1, #1
 80003c6:	d100      	bne.n	80003ca <__aeabi_fadd+0x146>
 80003c8:	e0ae      	b.n	8000528 <__aeabi_fadd+0x2a4>
 80003ca:	29ff      	cmp	r1, #255	; 0xff
 80003cc:	d023      	beq.n	8000416 <__aeabi_fadd+0x192>
 80003ce:	0011      	movs	r1, r2
 80003d0:	e7c1      	b.n	8000356 <__aeabi_fadd+0xd2>
 80003d2:	2300      	movs	r3, #0
 80003d4:	22ff      	movs	r2, #255	; 0xff
 80003d6:	469c      	mov	ip, r3
 80003d8:	e799      	b.n	800030e <__aeabi_fadd+0x8a>
 80003da:	21fe      	movs	r1, #254	; 0xfe
 80003dc:	1c6a      	adds	r2, r5, #1
 80003de:	4211      	tst	r1, r2
 80003e0:	d077      	beq.n	80004d2 <__aeabi_fadd+0x24e>
 80003e2:	2aff      	cmp	r2, #255	; 0xff
 80003e4:	d0f5      	beq.n	80003d2 <__aeabi_fadd+0x14e>
 80003e6:	0015      	movs	r5, r2
 80003e8:	4446      	add	r6, r8
 80003ea:	0870      	lsrs	r0, r6, #1
 80003ec:	0743      	lsls	r3, r0, #29
 80003ee:	d000      	beq.n	80003f2 <__aeabi_fadd+0x16e>
 80003f0:	e77e      	b.n	80002f0 <__aeabi_fadd+0x6c>
 80003f2:	08c3      	lsrs	r3, r0, #3
 80003f4:	2dff      	cmp	r5, #255	; 0xff
 80003f6:	d00e      	beq.n	8000416 <__aeabi_fadd+0x192>
 80003f8:	025b      	lsls	r3, r3, #9
 80003fa:	0a5b      	lsrs	r3, r3, #9
 80003fc:	469c      	mov	ip, r3
 80003fe:	b2ea      	uxtb	r2, r5
 8000400:	e785      	b.n	800030e <__aeabi_fadd+0x8a>
 8000402:	2e00      	cmp	r6, #0
 8000404:	d007      	beq.n	8000416 <__aeabi_fadd+0x192>
 8000406:	2280      	movs	r2, #128	; 0x80
 8000408:	03d2      	lsls	r2, r2, #15
 800040a:	4213      	tst	r3, r2
 800040c:	d003      	beq.n	8000416 <__aeabi_fadd+0x192>
 800040e:	4210      	tst	r0, r2
 8000410:	d101      	bne.n	8000416 <__aeabi_fadd+0x192>
 8000412:	000c      	movs	r4, r1
 8000414:	0003      	movs	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d0db      	beq.n	80003d2 <__aeabi_fadd+0x14e>
 800041a:	2080      	movs	r0, #128	; 0x80
 800041c:	03c0      	lsls	r0, r0, #15
 800041e:	4318      	orrs	r0, r3
 8000420:	0240      	lsls	r0, r0, #9
 8000422:	0a43      	lsrs	r3, r0, #9
 8000424:	469c      	mov	ip, r3
 8000426:	22ff      	movs	r2, #255	; 0xff
 8000428:	e771      	b.n	800030e <__aeabi_fadd+0x8a>
 800042a:	2900      	cmp	r1, #0
 800042c:	d0d5      	beq.n	80003da <__aeabi_fadd+0x156>
 800042e:	1b7a      	subs	r2, r7, r5
 8000430:	2d00      	cmp	r5, #0
 8000432:	d160      	bne.n	80004f6 <__aeabi_fadd+0x272>
 8000434:	4643      	mov	r3, r8
 8000436:	2b00      	cmp	r3, #0
 8000438:	d024      	beq.n	8000484 <__aeabi_fadd+0x200>
 800043a:	1e53      	subs	r3, r2, #1
 800043c:	2a01      	cmp	r2, #1
 800043e:	d073      	beq.n	8000528 <__aeabi_fadd+0x2a4>
 8000440:	2aff      	cmp	r2, #255	; 0xff
 8000442:	d0e7      	beq.n	8000414 <__aeabi_fadd+0x190>
 8000444:	001a      	movs	r2, r3
 8000446:	2a1b      	cmp	r2, #27
 8000448:	dc00      	bgt.n	800044c <__aeabi_fadd+0x1c8>
 800044a:	e085      	b.n	8000558 <__aeabi_fadd+0x2d4>
 800044c:	2001      	movs	r0, #1
 800044e:	003d      	movs	r5, r7
 8000450:	1980      	adds	r0, r0, r6
 8000452:	e785      	b.n	8000360 <__aeabi_fadd+0xdc>
 8000454:	2320      	movs	r3, #32
 8000456:	003a      	movs	r2, r7
 8000458:	1b45      	subs	r5, r0, r5
 800045a:	0038      	movs	r0, r7
 800045c:	3501      	adds	r5, #1
 800045e:	40ea      	lsrs	r2, r5
 8000460:	1b5d      	subs	r5, r3, r5
 8000462:	40a8      	lsls	r0, r5
 8000464:	1e43      	subs	r3, r0, #1
 8000466:	4198      	sbcs	r0, r3
 8000468:	2500      	movs	r5, #0
 800046a:	4310      	orrs	r0, r2
 800046c:	e73e      	b.n	80002ec <__aeabi_fadd+0x68>
 800046e:	2320      	movs	r3, #32
 8000470:	0030      	movs	r0, r6
 8000472:	1a9b      	subs	r3, r3, r2
 8000474:	0031      	movs	r1, r6
 8000476:	4098      	lsls	r0, r3
 8000478:	40d1      	lsrs	r1, r2
 800047a:	1e43      	subs	r3, r0, #1
 800047c:	4198      	sbcs	r0, r3
 800047e:	4308      	orrs	r0, r1
 8000480:	e722      	b.n	80002c8 <__aeabi_fadd+0x44>
 8000482:	000c      	movs	r4, r1
 8000484:	0003      	movs	r3, r0
 8000486:	0015      	movs	r5, r2
 8000488:	e7b4      	b.n	80003f4 <__aeabi_fadd+0x170>
 800048a:	2fff      	cmp	r7, #255	; 0xff
 800048c:	d0c1      	beq.n	8000412 <__aeabi_fadd+0x18e>
 800048e:	2380      	movs	r3, #128	; 0x80
 8000490:	4640      	mov	r0, r8
 8000492:	04db      	lsls	r3, r3, #19
 8000494:	4318      	orrs	r0, r3
 8000496:	4680      	mov	r8, r0
 8000498:	2a1b      	cmp	r2, #27
 800049a:	dd51      	ble.n	8000540 <__aeabi_fadd+0x2bc>
 800049c:	2001      	movs	r0, #1
 800049e:	000c      	movs	r4, r1
 80004a0:	003d      	movs	r5, r7
 80004a2:	1a30      	subs	r0, r6, r0
 80004a4:	e712      	b.n	80002cc <__aeabi_fadd+0x48>
 80004a6:	4643      	mov	r3, r8
 80004a8:	1b9f      	subs	r7, r3, r6
 80004aa:	017b      	lsls	r3, r7, #5
 80004ac:	d42b      	bmi.n	8000506 <__aeabi_fadd+0x282>
 80004ae:	2f00      	cmp	r7, #0
 80004b0:	d000      	beq.n	80004b4 <__aeabi_fadd+0x230>
 80004b2:	e710      	b.n	80002d6 <__aeabi_fadd+0x52>
 80004b4:	2300      	movs	r3, #0
 80004b6:	2400      	movs	r4, #0
 80004b8:	2200      	movs	r2, #0
 80004ba:	469c      	mov	ip, r3
 80004bc:	e727      	b.n	800030e <__aeabi_fadd+0x8a>
 80004be:	2320      	movs	r3, #32
 80004c0:	0032      	movs	r2, r6
 80004c2:	0030      	movs	r0, r6
 80004c4:	40ca      	lsrs	r2, r1
 80004c6:	1a59      	subs	r1, r3, r1
 80004c8:	4088      	lsls	r0, r1
 80004ca:	1e43      	subs	r3, r0, #1
 80004cc:	4198      	sbcs	r0, r3
 80004ce:	4310      	orrs	r0, r2
 80004d0:	e745      	b.n	800035e <__aeabi_fadd+0xda>
 80004d2:	2d00      	cmp	r5, #0
 80004d4:	d14a      	bne.n	800056c <__aeabi_fadd+0x2e8>
 80004d6:	4643      	mov	r3, r8
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d063      	beq.n	80005a4 <__aeabi_fadd+0x320>
 80004dc:	2200      	movs	r2, #0
 80004de:	2e00      	cmp	r6, #0
 80004e0:	d100      	bne.n	80004e4 <__aeabi_fadd+0x260>
 80004e2:	e714      	b.n	800030e <__aeabi_fadd+0x8a>
 80004e4:	0030      	movs	r0, r6
 80004e6:	4440      	add	r0, r8
 80004e8:	0143      	lsls	r3, r0, #5
 80004ea:	d400      	bmi.n	80004ee <__aeabi_fadd+0x26a>
 80004ec:	e77e      	b.n	80003ec <__aeabi_fadd+0x168>
 80004ee:	4b32      	ldr	r3, [pc, #200]	; (80005b8 <__aeabi_fadd+0x334>)
 80004f0:	3501      	adds	r5, #1
 80004f2:	4018      	ands	r0, r3
 80004f4:	e77a      	b.n	80003ec <__aeabi_fadd+0x168>
 80004f6:	2fff      	cmp	r7, #255	; 0xff
 80004f8:	d08c      	beq.n	8000414 <__aeabi_fadd+0x190>
 80004fa:	2380      	movs	r3, #128	; 0x80
 80004fc:	4641      	mov	r1, r8
 80004fe:	04db      	lsls	r3, r3, #19
 8000500:	4319      	orrs	r1, r3
 8000502:	4688      	mov	r8, r1
 8000504:	e79f      	b.n	8000446 <__aeabi_fadd+0x1c2>
 8000506:	4643      	mov	r3, r8
 8000508:	000c      	movs	r4, r1
 800050a:	1af7      	subs	r7, r6, r3
 800050c:	e6e3      	b.n	80002d6 <__aeabi_fadd+0x52>
 800050e:	4642      	mov	r2, r8
 8000510:	2a00      	cmp	r2, #0
 8000512:	d000      	beq.n	8000516 <__aeabi_fadd+0x292>
 8000514:	e775      	b.n	8000402 <__aeabi_fadd+0x17e>
 8000516:	2e00      	cmp	r6, #0
 8000518:	d000      	beq.n	800051c <__aeabi_fadd+0x298>
 800051a:	e77a      	b.n	8000412 <__aeabi_fadd+0x18e>
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	03db      	lsls	r3, r3, #15
 8000520:	2400      	movs	r4, #0
 8000522:	469c      	mov	ip, r3
 8000524:	22ff      	movs	r2, #255	; 0xff
 8000526:	e6f2      	b.n	800030e <__aeabi_fadd+0x8a>
 8000528:	0030      	movs	r0, r6
 800052a:	4440      	add	r0, r8
 800052c:	2501      	movs	r5, #1
 800052e:	0143      	lsls	r3, r0, #5
 8000530:	d400      	bmi.n	8000534 <__aeabi_fadd+0x2b0>
 8000532:	e75b      	b.n	80003ec <__aeabi_fadd+0x168>
 8000534:	2502      	movs	r5, #2
 8000536:	e718      	b.n	800036a <__aeabi_fadd+0xe6>
 8000538:	4643      	mov	r3, r8
 800053a:	2501      	movs	r5, #1
 800053c:	1b98      	subs	r0, r3, r6
 800053e:	e6c5      	b.n	80002cc <__aeabi_fadd+0x48>
 8000540:	2320      	movs	r3, #32
 8000542:	4644      	mov	r4, r8
 8000544:	4640      	mov	r0, r8
 8000546:	40d4      	lsrs	r4, r2
 8000548:	1a9a      	subs	r2, r3, r2
 800054a:	4090      	lsls	r0, r2
 800054c:	1e43      	subs	r3, r0, #1
 800054e:	4198      	sbcs	r0, r3
 8000550:	4320      	orrs	r0, r4
 8000552:	e7a4      	b.n	800049e <__aeabi_fadd+0x21a>
 8000554:	000d      	movs	r5, r1
 8000556:	e74d      	b.n	80003f4 <__aeabi_fadd+0x170>
 8000558:	2320      	movs	r3, #32
 800055a:	4641      	mov	r1, r8
 800055c:	4640      	mov	r0, r8
 800055e:	40d1      	lsrs	r1, r2
 8000560:	1a9a      	subs	r2, r3, r2
 8000562:	4090      	lsls	r0, r2
 8000564:	1e43      	subs	r3, r0, #1
 8000566:	4198      	sbcs	r0, r3
 8000568:	4308      	orrs	r0, r1
 800056a:	e770      	b.n	800044e <__aeabi_fadd+0x1ca>
 800056c:	4642      	mov	r2, r8
 800056e:	2a00      	cmp	r2, #0
 8000570:	d100      	bne.n	8000574 <__aeabi_fadd+0x2f0>
 8000572:	e74f      	b.n	8000414 <__aeabi_fadd+0x190>
 8000574:	2e00      	cmp	r6, #0
 8000576:	d100      	bne.n	800057a <__aeabi_fadd+0x2f6>
 8000578:	e74d      	b.n	8000416 <__aeabi_fadd+0x192>
 800057a:	2280      	movs	r2, #128	; 0x80
 800057c:	03d2      	lsls	r2, r2, #15
 800057e:	4213      	tst	r3, r2
 8000580:	d100      	bne.n	8000584 <__aeabi_fadd+0x300>
 8000582:	e748      	b.n	8000416 <__aeabi_fadd+0x192>
 8000584:	4210      	tst	r0, r2
 8000586:	d000      	beq.n	800058a <__aeabi_fadd+0x306>
 8000588:	e745      	b.n	8000416 <__aeabi_fadd+0x192>
 800058a:	0003      	movs	r3, r0
 800058c:	e743      	b.n	8000416 <__aeabi_fadd+0x192>
 800058e:	2e00      	cmp	r6, #0
 8000590:	d090      	beq.n	80004b4 <__aeabi_fadd+0x230>
 8000592:	000c      	movs	r4, r1
 8000594:	4684      	mov	ip, r0
 8000596:	2200      	movs	r2, #0
 8000598:	e6b9      	b.n	800030e <__aeabi_fadd+0x8a>
 800059a:	4643      	mov	r3, r8
 800059c:	000c      	movs	r4, r1
 800059e:	1af0      	subs	r0, r6, r3
 80005a0:	3501      	adds	r5, #1
 80005a2:	e693      	b.n	80002cc <__aeabi_fadd+0x48>
 80005a4:	4684      	mov	ip, r0
 80005a6:	2200      	movs	r2, #0
 80005a8:	e6b1      	b.n	800030e <__aeabi_fadd+0x8a>
 80005aa:	2800      	cmp	r0, #0
 80005ac:	d000      	beq.n	80005b0 <__aeabi_fadd+0x32c>
 80005ae:	e71d      	b.n	80003ec <__aeabi_fadd+0x168>
 80005b0:	2300      	movs	r3, #0
 80005b2:	2400      	movs	r4, #0
 80005b4:	469c      	mov	ip, r3
 80005b6:	e6aa      	b.n	800030e <__aeabi_fadd+0x8a>
 80005b8:	fbffffff 	.word	0xfbffffff
 80005bc:	7dffffff 	.word	0x7dffffff

080005c0 <__aeabi_fdiv>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	464f      	mov	r7, r9
 80005c4:	4646      	mov	r6, r8
 80005c6:	46d6      	mov	lr, sl
 80005c8:	0245      	lsls	r5, r0, #9
 80005ca:	b5c0      	push	{r6, r7, lr}
 80005cc:	0047      	lsls	r7, r0, #1
 80005ce:	1c0c      	adds	r4, r1, #0
 80005d0:	0a6d      	lsrs	r5, r5, #9
 80005d2:	0e3f      	lsrs	r7, r7, #24
 80005d4:	0fc6      	lsrs	r6, r0, #31
 80005d6:	2f00      	cmp	r7, #0
 80005d8:	d100      	bne.n	80005dc <__aeabi_fdiv+0x1c>
 80005da:	e070      	b.n	80006be <__aeabi_fdiv+0xfe>
 80005dc:	2fff      	cmp	r7, #255	; 0xff
 80005de:	d100      	bne.n	80005e2 <__aeabi_fdiv+0x22>
 80005e0:	e075      	b.n	80006ce <__aeabi_fdiv+0x10e>
 80005e2:	00eb      	lsls	r3, r5, #3
 80005e4:	2580      	movs	r5, #128	; 0x80
 80005e6:	04ed      	lsls	r5, r5, #19
 80005e8:	431d      	orrs	r5, r3
 80005ea:	2300      	movs	r3, #0
 80005ec:	4699      	mov	r9, r3
 80005ee:	469a      	mov	sl, r3
 80005f0:	3f7f      	subs	r7, #127	; 0x7f
 80005f2:	0260      	lsls	r0, r4, #9
 80005f4:	0a43      	lsrs	r3, r0, #9
 80005f6:	4698      	mov	r8, r3
 80005f8:	0063      	lsls	r3, r4, #1
 80005fa:	0e1b      	lsrs	r3, r3, #24
 80005fc:	0fe4      	lsrs	r4, r4, #31
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d04e      	beq.n	80006a0 <__aeabi_fdiv+0xe0>
 8000602:	2bff      	cmp	r3, #255	; 0xff
 8000604:	d046      	beq.n	8000694 <__aeabi_fdiv+0xd4>
 8000606:	4642      	mov	r2, r8
 8000608:	00d0      	lsls	r0, r2, #3
 800060a:	2280      	movs	r2, #128	; 0x80
 800060c:	04d2      	lsls	r2, r2, #19
 800060e:	4302      	orrs	r2, r0
 8000610:	4690      	mov	r8, r2
 8000612:	2200      	movs	r2, #0
 8000614:	3b7f      	subs	r3, #127	; 0x7f
 8000616:	0031      	movs	r1, r6
 8000618:	1aff      	subs	r7, r7, r3
 800061a:	464b      	mov	r3, r9
 800061c:	4061      	eors	r1, r4
 800061e:	b2c9      	uxtb	r1, r1
 8000620:	4313      	orrs	r3, r2
 8000622:	2b0f      	cmp	r3, #15
 8000624:	d900      	bls.n	8000628 <__aeabi_fdiv+0x68>
 8000626:	e0b5      	b.n	8000794 <__aeabi_fdiv+0x1d4>
 8000628:	486e      	ldr	r0, [pc, #440]	; (80007e4 <__aeabi_fdiv+0x224>)
 800062a:	009b      	lsls	r3, r3, #2
 800062c:	58c3      	ldr	r3, [r0, r3]
 800062e:	469f      	mov	pc, r3
 8000630:	2300      	movs	r3, #0
 8000632:	4698      	mov	r8, r3
 8000634:	0026      	movs	r6, r4
 8000636:	4645      	mov	r5, r8
 8000638:	4692      	mov	sl, r2
 800063a:	4653      	mov	r3, sl
 800063c:	2b02      	cmp	r3, #2
 800063e:	d100      	bne.n	8000642 <__aeabi_fdiv+0x82>
 8000640:	e089      	b.n	8000756 <__aeabi_fdiv+0x196>
 8000642:	2b03      	cmp	r3, #3
 8000644:	d100      	bne.n	8000648 <__aeabi_fdiv+0x88>
 8000646:	e09e      	b.n	8000786 <__aeabi_fdiv+0x1c6>
 8000648:	2b01      	cmp	r3, #1
 800064a:	d018      	beq.n	800067e <__aeabi_fdiv+0xbe>
 800064c:	003b      	movs	r3, r7
 800064e:	337f      	adds	r3, #127	; 0x7f
 8000650:	2b00      	cmp	r3, #0
 8000652:	dd69      	ble.n	8000728 <__aeabi_fdiv+0x168>
 8000654:	076a      	lsls	r2, r5, #29
 8000656:	d004      	beq.n	8000662 <__aeabi_fdiv+0xa2>
 8000658:	220f      	movs	r2, #15
 800065a:	402a      	ands	r2, r5
 800065c:	2a04      	cmp	r2, #4
 800065e:	d000      	beq.n	8000662 <__aeabi_fdiv+0xa2>
 8000660:	3504      	adds	r5, #4
 8000662:	012a      	lsls	r2, r5, #4
 8000664:	d503      	bpl.n	800066e <__aeabi_fdiv+0xae>
 8000666:	4b60      	ldr	r3, [pc, #384]	; (80007e8 <__aeabi_fdiv+0x228>)
 8000668:	401d      	ands	r5, r3
 800066a:	003b      	movs	r3, r7
 800066c:	3380      	adds	r3, #128	; 0x80
 800066e:	2bfe      	cmp	r3, #254	; 0xfe
 8000670:	dd00      	ble.n	8000674 <__aeabi_fdiv+0xb4>
 8000672:	e070      	b.n	8000756 <__aeabi_fdiv+0x196>
 8000674:	01ad      	lsls	r5, r5, #6
 8000676:	0a6d      	lsrs	r5, r5, #9
 8000678:	b2d8      	uxtb	r0, r3
 800067a:	e002      	b.n	8000682 <__aeabi_fdiv+0xc2>
 800067c:	000e      	movs	r6, r1
 800067e:	2000      	movs	r0, #0
 8000680:	2500      	movs	r5, #0
 8000682:	05c0      	lsls	r0, r0, #23
 8000684:	4328      	orrs	r0, r5
 8000686:	07f6      	lsls	r6, r6, #31
 8000688:	4330      	orrs	r0, r6
 800068a:	bce0      	pop	{r5, r6, r7}
 800068c:	46ba      	mov	sl, r7
 800068e:	46b1      	mov	r9, r6
 8000690:	46a8      	mov	r8, r5
 8000692:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000694:	4643      	mov	r3, r8
 8000696:	2b00      	cmp	r3, #0
 8000698:	d13f      	bne.n	800071a <__aeabi_fdiv+0x15a>
 800069a:	2202      	movs	r2, #2
 800069c:	3fff      	subs	r7, #255	; 0xff
 800069e:	e003      	b.n	80006a8 <__aeabi_fdiv+0xe8>
 80006a0:	4643      	mov	r3, r8
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d12d      	bne.n	8000702 <__aeabi_fdiv+0x142>
 80006a6:	2201      	movs	r2, #1
 80006a8:	0031      	movs	r1, r6
 80006aa:	464b      	mov	r3, r9
 80006ac:	4061      	eors	r1, r4
 80006ae:	b2c9      	uxtb	r1, r1
 80006b0:	4313      	orrs	r3, r2
 80006b2:	2b0f      	cmp	r3, #15
 80006b4:	d834      	bhi.n	8000720 <__aeabi_fdiv+0x160>
 80006b6:	484d      	ldr	r0, [pc, #308]	; (80007ec <__aeabi_fdiv+0x22c>)
 80006b8:	009b      	lsls	r3, r3, #2
 80006ba:	58c3      	ldr	r3, [r0, r3]
 80006bc:	469f      	mov	pc, r3
 80006be:	2d00      	cmp	r5, #0
 80006c0:	d113      	bne.n	80006ea <__aeabi_fdiv+0x12a>
 80006c2:	2304      	movs	r3, #4
 80006c4:	4699      	mov	r9, r3
 80006c6:	3b03      	subs	r3, #3
 80006c8:	2700      	movs	r7, #0
 80006ca:	469a      	mov	sl, r3
 80006cc:	e791      	b.n	80005f2 <__aeabi_fdiv+0x32>
 80006ce:	2d00      	cmp	r5, #0
 80006d0:	d105      	bne.n	80006de <__aeabi_fdiv+0x11e>
 80006d2:	2308      	movs	r3, #8
 80006d4:	4699      	mov	r9, r3
 80006d6:	3b06      	subs	r3, #6
 80006d8:	27ff      	movs	r7, #255	; 0xff
 80006da:	469a      	mov	sl, r3
 80006dc:	e789      	b.n	80005f2 <__aeabi_fdiv+0x32>
 80006de:	230c      	movs	r3, #12
 80006e0:	4699      	mov	r9, r3
 80006e2:	3b09      	subs	r3, #9
 80006e4:	27ff      	movs	r7, #255	; 0xff
 80006e6:	469a      	mov	sl, r3
 80006e8:	e783      	b.n	80005f2 <__aeabi_fdiv+0x32>
 80006ea:	0028      	movs	r0, r5
 80006ec:	f001 faf8 	bl	8001ce0 <__clzsi2>
 80006f0:	2776      	movs	r7, #118	; 0x76
 80006f2:	1f43      	subs	r3, r0, #5
 80006f4:	409d      	lsls	r5, r3
 80006f6:	2300      	movs	r3, #0
 80006f8:	427f      	negs	r7, r7
 80006fa:	4699      	mov	r9, r3
 80006fc:	469a      	mov	sl, r3
 80006fe:	1a3f      	subs	r7, r7, r0
 8000700:	e777      	b.n	80005f2 <__aeabi_fdiv+0x32>
 8000702:	4640      	mov	r0, r8
 8000704:	f001 faec 	bl	8001ce0 <__clzsi2>
 8000708:	4642      	mov	r2, r8
 800070a:	1f43      	subs	r3, r0, #5
 800070c:	409a      	lsls	r2, r3
 800070e:	2376      	movs	r3, #118	; 0x76
 8000710:	425b      	negs	r3, r3
 8000712:	4690      	mov	r8, r2
 8000714:	1a1b      	subs	r3, r3, r0
 8000716:	2200      	movs	r2, #0
 8000718:	e77d      	b.n	8000616 <__aeabi_fdiv+0x56>
 800071a:	23ff      	movs	r3, #255	; 0xff
 800071c:	2203      	movs	r2, #3
 800071e:	e77a      	b.n	8000616 <__aeabi_fdiv+0x56>
 8000720:	000e      	movs	r6, r1
 8000722:	20ff      	movs	r0, #255	; 0xff
 8000724:	2500      	movs	r5, #0
 8000726:	e7ac      	b.n	8000682 <__aeabi_fdiv+0xc2>
 8000728:	2001      	movs	r0, #1
 800072a:	1ac0      	subs	r0, r0, r3
 800072c:	281b      	cmp	r0, #27
 800072e:	dca6      	bgt.n	800067e <__aeabi_fdiv+0xbe>
 8000730:	379e      	adds	r7, #158	; 0x9e
 8000732:	002a      	movs	r2, r5
 8000734:	40bd      	lsls	r5, r7
 8000736:	40c2      	lsrs	r2, r0
 8000738:	1e6b      	subs	r3, r5, #1
 800073a:	419d      	sbcs	r5, r3
 800073c:	4315      	orrs	r5, r2
 800073e:	076b      	lsls	r3, r5, #29
 8000740:	d004      	beq.n	800074c <__aeabi_fdiv+0x18c>
 8000742:	230f      	movs	r3, #15
 8000744:	402b      	ands	r3, r5
 8000746:	2b04      	cmp	r3, #4
 8000748:	d000      	beq.n	800074c <__aeabi_fdiv+0x18c>
 800074a:	3504      	adds	r5, #4
 800074c:	016b      	lsls	r3, r5, #5
 800074e:	d544      	bpl.n	80007da <__aeabi_fdiv+0x21a>
 8000750:	2001      	movs	r0, #1
 8000752:	2500      	movs	r5, #0
 8000754:	e795      	b.n	8000682 <__aeabi_fdiv+0xc2>
 8000756:	20ff      	movs	r0, #255	; 0xff
 8000758:	2500      	movs	r5, #0
 800075a:	e792      	b.n	8000682 <__aeabi_fdiv+0xc2>
 800075c:	2580      	movs	r5, #128	; 0x80
 800075e:	2600      	movs	r6, #0
 8000760:	20ff      	movs	r0, #255	; 0xff
 8000762:	03ed      	lsls	r5, r5, #15
 8000764:	e78d      	b.n	8000682 <__aeabi_fdiv+0xc2>
 8000766:	2300      	movs	r3, #0
 8000768:	4698      	mov	r8, r3
 800076a:	2080      	movs	r0, #128	; 0x80
 800076c:	03c0      	lsls	r0, r0, #15
 800076e:	4205      	tst	r5, r0
 8000770:	d009      	beq.n	8000786 <__aeabi_fdiv+0x1c6>
 8000772:	4643      	mov	r3, r8
 8000774:	4203      	tst	r3, r0
 8000776:	d106      	bne.n	8000786 <__aeabi_fdiv+0x1c6>
 8000778:	4645      	mov	r5, r8
 800077a:	4305      	orrs	r5, r0
 800077c:	026d      	lsls	r5, r5, #9
 800077e:	0026      	movs	r6, r4
 8000780:	20ff      	movs	r0, #255	; 0xff
 8000782:	0a6d      	lsrs	r5, r5, #9
 8000784:	e77d      	b.n	8000682 <__aeabi_fdiv+0xc2>
 8000786:	2080      	movs	r0, #128	; 0x80
 8000788:	03c0      	lsls	r0, r0, #15
 800078a:	4305      	orrs	r5, r0
 800078c:	026d      	lsls	r5, r5, #9
 800078e:	20ff      	movs	r0, #255	; 0xff
 8000790:	0a6d      	lsrs	r5, r5, #9
 8000792:	e776      	b.n	8000682 <__aeabi_fdiv+0xc2>
 8000794:	4642      	mov	r2, r8
 8000796:	016b      	lsls	r3, r5, #5
 8000798:	0150      	lsls	r0, r2, #5
 800079a:	4283      	cmp	r3, r0
 800079c:	d219      	bcs.n	80007d2 <__aeabi_fdiv+0x212>
 800079e:	221b      	movs	r2, #27
 80007a0:	2500      	movs	r5, #0
 80007a2:	3f01      	subs	r7, #1
 80007a4:	2601      	movs	r6, #1
 80007a6:	001c      	movs	r4, r3
 80007a8:	006d      	lsls	r5, r5, #1
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	2c00      	cmp	r4, #0
 80007ae:	db01      	blt.n	80007b4 <__aeabi_fdiv+0x1f4>
 80007b0:	4298      	cmp	r0, r3
 80007b2:	d801      	bhi.n	80007b8 <__aeabi_fdiv+0x1f8>
 80007b4:	1a1b      	subs	r3, r3, r0
 80007b6:	4335      	orrs	r5, r6
 80007b8:	3a01      	subs	r2, #1
 80007ba:	2a00      	cmp	r2, #0
 80007bc:	d1f3      	bne.n	80007a6 <__aeabi_fdiv+0x1e6>
 80007be:	1e5a      	subs	r2, r3, #1
 80007c0:	4193      	sbcs	r3, r2
 80007c2:	431d      	orrs	r5, r3
 80007c4:	003b      	movs	r3, r7
 80007c6:	337f      	adds	r3, #127	; 0x7f
 80007c8:	000e      	movs	r6, r1
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	dd00      	ble.n	80007d0 <__aeabi_fdiv+0x210>
 80007ce:	e741      	b.n	8000654 <__aeabi_fdiv+0x94>
 80007d0:	e7aa      	b.n	8000728 <__aeabi_fdiv+0x168>
 80007d2:	221a      	movs	r2, #26
 80007d4:	2501      	movs	r5, #1
 80007d6:	1a1b      	subs	r3, r3, r0
 80007d8:	e7e4      	b.n	80007a4 <__aeabi_fdiv+0x1e4>
 80007da:	01ad      	lsls	r5, r5, #6
 80007dc:	2000      	movs	r0, #0
 80007de:	0a6d      	lsrs	r5, r5, #9
 80007e0:	e74f      	b.n	8000682 <__aeabi_fdiv+0xc2>
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	08005738 	.word	0x08005738
 80007e8:	f7ffffff 	.word	0xf7ffffff
 80007ec:	08005778 	.word	0x08005778

080007f0 <__aeabi_fmul>:
 80007f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007f2:	464f      	mov	r7, r9
 80007f4:	4646      	mov	r6, r8
 80007f6:	46d6      	mov	lr, sl
 80007f8:	0244      	lsls	r4, r0, #9
 80007fa:	0045      	lsls	r5, r0, #1
 80007fc:	b5c0      	push	{r6, r7, lr}
 80007fe:	0a64      	lsrs	r4, r4, #9
 8000800:	1c0f      	adds	r7, r1, #0
 8000802:	0e2d      	lsrs	r5, r5, #24
 8000804:	0fc6      	lsrs	r6, r0, #31
 8000806:	2d00      	cmp	r5, #0
 8000808:	d100      	bne.n	800080c <__aeabi_fmul+0x1c>
 800080a:	e08d      	b.n	8000928 <__aeabi_fmul+0x138>
 800080c:	2dff      	cmp	r5, #255	; 0xff
 800080e:	d100      	bne.n	8000812 <__aeabi_fmul+0x22>
 8000810:	e092      	b.n	8000938 <__aeabi_fmul+0x148>
 8000812:	2300      	movs	r3, #0
 8000814:	2080      	movs	r0, #128	; 0x80
 8000816:	4699      	mov	r9, r3
 8000818:	469a      	mov	sl, r3
 800081a:	00e4      	lsls	r4, r4, #3
 800081c:	04c0      	lsls	r0, r0, #19
 800081e:	4304      	orrs	r4, r0
 8000820:	3d7f      	subs	r5, #127	; 0x7f
 8000822:	0278      	lsls	r0, r7, #9
 8000824:	0a43      	lsrs	r3, r0, #9
 8000826:	4698      	mov	r8, r3
 8000828:	007b      	lsls	r3, r7, #1
 800082a:	0e1b      	lsrs	r3, r3, #24
 800082c:	0fff      	lsrs	r7, r7, #31
 800082e:	2b00      	cmp	r3, #0
 8000830:	d100      	bne.n	8000834 <__aeabi_fmul+0x44>
 8000832:	e070      	b.n	8000916 <__aeabi_fmul+0x126>
 8000834:	2bff      	cmp	r3, #255	; 0xff
 8000836:	d100      	bne.n	800083a <__aeabi_fmul+0x4a>
 8000838:	e086      	b.n	8000948 <__aeabi_fmul+0x158>
 800083a:	4642      	mov	r2, r8
 800083c:	00d0      	lsls	r0, r2, #3
 800083e:	2280      	movs	r2, #128	; 0x80
 8000840:	3b7f      	subs	r3, #127	; 0x7f
 8000842:	18ed      	adds	r5, r5, r3
 8000844:	2300      	movs	r3, #0
 8000846:	04d2      	lsls	r2, r2, #19
 8000848:	4302      	orrs	r2, r0
 800084a:	4690      	mov	r8, r2
 800084c:	469c      	mov	ip, r3
 800084e:	0031      	movs	r1, r6
 8000850:	464b      	mov	r3, r9
 8000852:	4079      	eors	r1, r7
 8000854:	1c68      	adds	r0, r5, #1
 8000856:	2b0f      	cmp	r3, #15
 8000858:	d81c      	bhi.n	8000894 <__aeabi_fmul+0xa4>
 800085a:	4a76      	ldr	r2, [pc, #472]	; (8000a34 <__aeabi_fmul+0x244>)
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	58d3      	ldr	r3, [r2, r3]
 8000860:	469f      	mov	pc, r3
 8000862:	0039      	movs	r1, r7
 8000864:	4644      	mov	r4, r8
 8000866:	46e2      	mov	sl, ip
 8000868:	4653      	mov	r3, sl
 800086a:	2b02      	cmp	r3, #2
 800086c:	d00f      	beq.n	800088e <__aeabi_fmul+0x9e>
 800086e:	2b03      	cmp	r3, #3
 8000870:	d100      	bne.n	8000874 <__aeabi_fmul+0x84>
 8000872:	e0d7      	b.n	8000a24 <__aeabi_fmul+0x234>
 8000874:	2b01      	cmp	r3, #1
 8000876:	d137      	bne.n	80008e8 <__aeabi_fmul+0xf8>
 8000878:	2000      	movs	r0, #0
 800087a:	2400      	movs	r4, #0
 800087c:	05c0      	lsls	r0, r0, #23
 800087e:	4320      	orrs	r0, r4
 8000880:	07c9      	lsls	r1, r1, #31
 8000882:	4308      	orrs	r0, r1
 8000884:	bce0      	pop	{r5, r6, r7}
 8000886:	46ba      	mov	sl, r7
 8000888:	46b1      	mov	r9, r6
 800088a:	46a8      	mov	r8, r5
 800088c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800088e:	20ff      	movs	r0, #255	; 0xff
 8000890:	2400      	movs	r4, #0
 8000892:	e7f3      	b.n	800087c <__aeabi_fmul+0x8c>
 8000894:	0c26      	lsrs	r6, r4, #16
 8000896:	0424      	lsls	r4, r4, #16
 8000898:	0c22      	lsrs	r2, r4, #16
 800089a:	4644      	mov	r4, r8
 800089c:	0424      	lsls	r4, r4, #16
 800089e:	0c24      	lsrs	r4, r4, #16
 80008a0:	4643      	mov	r3, r8
 80008a2:	0027      	movs	r7, r4
 80008a4:	0c1b      	lsrs	r3, r3, #16
 80008a6:	4357      	muls	r7, r2
 80008a8:	4374      	muls	r4, r6
 80008aa:	435a      	muls	r2, r3
 80008ac:	435e      	muls	r6, r3
 80008ae:	1912      	adds	r2, r2, r4
 80008b0:	0c3b      	lsrs	r3, r7, #16
 80008b2:	189b      	adds	r3, r3, r2
 80008b4:	429c      	cmp	r4, r3
 80008b6:	d903      	bls.n	80008c0 <__aeabi_fmul+0xd0>
 80008b8:	2280      	movs	r2, #128	; 0x80
 80008ba:	0252      	lsls	r2, r2, #9
 80008bc:	4694      	mov	ip, r2
 80008be:	4466      	add	r6, ip
 80008c0:	043f      	lsls	r7, r7, #16
 80008c2:	041a      	lsls	r2, r3, #16
 80008c4:	0c3f      	lsrs	r7, r7, #16
 80008c6:	19d2      	adds	r2, r2, r7
 80008c8:	0194      	lsls	r4, r2, #6
 80008ca:	1e67      	subs	r7, r4, #1
 80008cc:	41bc      	sbcs	r4, r7
 80008ce:	0c1b      	lsrs	r3, r3, #16
 80008d0:	0e92      	lsrs	r2, r2, #26
 80008d2:	199b      	adds	r3, r3, r6
 80008d4:	4314      	orrs	r4, r2
 80008d6:	019b      	lsls	r3, r3, #6
 80008d8:	431c      	orrs	r4, r3
 80008da:	011b      	lsls	r3, r3, #4
 80008dc:	d400      	bmi.n	80008e0 <__aeabi_fmul+0xf0>
 80008de:	e09b      	b.n	8000a18 <__aeabi_fmul+0x228>
 80008e0:	2301      	movs	r3, #1
 80008e2:	0862      	lsrs	r2, r4, #1
 80008e4:	401c      	ands	r4, r3
 80008e6:	4314      	orrs	r4, r2
 80008e8:	0002      	movs	r2, r0
 80008ea:	327f      	adds	r2, #127	; 0x7f
 80008ec:	2a00      	cmp	r2, #0
 80008ee:	dd64      	ble.n	80009ba <__aeabi_fmul+0x1ca>
 80008f0:	0763      	lsls	r3, r4, #29
 80008f2:	d004      	beq.n	80008fe <__aeabi_fmul+0x10e>
 80008f4:	230f      	movs	r3, #15
 80008f6:	4023      	ands	r3, r4
 80008f8:	2b04      	cmp	r3, #4
 80008fa:	d000      	beq.n	80008fe <__aeabi_fmul+0x10e>
 80008fc:	3404      	adds	r4, #4
 80008fe:	0123      	lsls	r3, r4, #4
 8000900:	d503      	bpl.n	800090a <__aeabi_fmul+0x11a>
 8000902:	0002      	movs	r2, r0
 8000904:	4b4c      	ldr	r3, [pc, #304]	; (8000a38 <__aeabi_fmul+0x248>)
 8000906:	3280      	adds	r2, #128	; 0x80
 8000908:	401c      	ands	r4, r3
 800090a:	2afe      	cmp	r2, #254	; 0xfe
 800090c:	dcbf      	bgt.n	800088e <__aeabi_fmul+0x9e>
 800090e:	01a4      	lsls	r4, r4, #6
 8000910:	0a64      	lsrs	r4, r4, #9
 8000912:	b2d0      	uxtb	r0, r2
 8000914:	e7b2      	b.n	800087c <__aeabi_fmul+0x8c>
 8000916:	4643      	mov	r3, r8
 8000918:	2b00      	cmp	r3, #0
 800091a:	d13d      	bne.n	8000998 <__aeabi_fmul+0x1a8>
 800091c:	464a      	mov	r2, r9
 800091e:	3301      	adds	r3, #1
 8000920:	431a      	orrs	r2, r3
 8000922:	4691      	mov	r9, r2
 8000924:	469c      	mov	ip, r3
 8000926:	e792      	b.n	800084e <__aeabi_fmul+0x5e>
 8000928:	2c00      	cmp	r4, #0
 800092a:	d129      	bne.n	8000980 <__aeabi_fmul+0x190>
 800092c:	2304      	movs	r3, #4
 800092e:	4699      	mov	r9, r3
 8000930:	3b03      	subs	r3, #3
 8000932:	2500      	movs	r5, #0
 8000934:	469a      	mov	sl, r3
 8000936:	e774      	b.n	8000822 <__aeabi_fmul+0x32>
 8000938:	2c00      	cmp	r4, #0
 800093a:	d11b      	bne.n	8000974 <__aeabi_fmul+0x184>
 800093c:	2308      	movs	r3, #8
 800093e:	4699      	mov	r9, r3
 8000940:	3b06      	subs	r3, #6
 8000942:	25ff      	movs	r5, #255	; 0xff
 8000944:	469a      	mov	sl, r3
 8000946:	e76c      	b.n	8000822 <__aeabi_fmul+0x32>
 8000948:	4643      	mov	r3, r8
 800094a:	35ff      	adds	r5, #255	; 0xff
 800094c:	2b00      	cmp	r3, #0
 800094e:	d10b      	bne.n	8000968 <__aeabi_fmul+0x178>
 8000950:	2302      	movs	r3, #2
 8000952:	464a      	mov	r2, r9
 8000954:	431a      	orrs	r2, r3
 8000956:	4691      	mov	r9, r2
 8000958:	469c      	mov	ip, r3
 800095a:	e778      	b.n	800084e <__aeabi_fmul+0x5e>
 800095c:	4653      	mov	r3, sl
 800095e:	0031      	movs	r1, r6
 8000960:	2b02      	cmp	r3, #2
 8000962:	d000      	beq.n	8000966 <__aeabi_fmul+0x176>
 8000964:	e783      	b.n	800086e <__aeabi_fmul+0x7e>
 8000966:	e792      	b.n	800088e <__aeabi_fmul+0x9e>
 8000968:	2303      	movs	r3, #3
 800096a:	464a      	mov	r2, r9
 800096c:	431a      	orrs	r2, r3
 800096e:	4691      	mov	r9, r2
 8000970:	469c      	mov	ip, r3
 8000972:	e76c      	b.n	800084e <__aeabi_fmul+0x5e>
 8000974:	230c      	movs	r3, #12
 8000976:	4699      	mov	r9, r3
 8000978:	3b09      	subs	r3, #9
 800097a:	25ff      	movs	r5, #255	; 0xff
 800097c:	469a      	mov	sl, r3
 800097e:	e750      	b.n	8000822 <__aeabi_fmul+0x32>
 8000980:	0020      	movs	r0, r4
 8000982:	f001 f9ad 	bl	8001ce0 <__clzsi2>
 8000986:	2576      	movs	r5, #118	; 0x76
 8000988:	1f43      	subs	r3, r0, #5
 800098a:	409c      	lsls	r4, r3
 800098c:	2300      	movs	r3, #0
 800098e:	426d      	negs	r5, r5
 8000990:	4699      	mov	r9, r3
 8000992:	469a      	mov	sl, r3
 8000994:	1a2d      	subs	r5, r5, r0
 8000996:	e744      	b.n	8000822 <__aeabi_fmul+0x32>
 8000998:	4640      	mov	r0, r8
 800099a:	f001 f9a1 	bl	8001ce0 <__clzsi2>
 800099e:	4642      	mov	r2, r8
 80009a0:	1f43      	subs	r3, r0, #5
 80009a2:	409a      	lsls	r2, r3
 80009a4:	2300      	movs	r3, #0
 80009a6:	1a2d      	subs	r5, r5, r0
 80009a8:	4690      	mov	r8, r2
 80009aa:	469c      	mov	ip, r3
 80009ac:	3d76      	subs	r5, #118	; 0x76
 80009ae:	e74e      	b.n	800084e <__aeabi_fmul+0x5e>
 80009b0:	2480      	movs	r4, #128	; 0x80
 80009b2:	2100      	movs	r1, #0
 80009b4:	20ff      	movs	r0, #255	; 0xff
 80009b6:	03e4      	lsls	r4, r4, #15
 80009b8:	e760      	b.n	800087c <__aeabi_fmul+0x8c>
 80009ba:	2301      	movs	r3, #1
 80009bc:	1a9b      	subs	r3, r3, r2
 80009be:	2b1b      	cmp	r3, #27
 80009c0:	dd00      	ble.n	80009c4 <__aeabi_fmul+0x1d4>
 80009c2:	e759      	b.n	8000878 <__aeabi_fmul+0x88>
 80009c4:	0022      	movs	r2, r4
 80009c6:	309e      	adds	r0, #158	; 0x9e
 80009c8:	40da      	lsrs	r2, r3
 80009ca:	4084      	lsls	r4, r0
 80009cc:	0013      	movs	r3, r2
 80009ce:	1e62      	subs	r2, r4, #1
 80009d0:	4194      	sbcs	r4, r2
 80009d2:	431c      	orrs	r4, r3
 80009d4:	0763      	lsls	r3, r4, #29
 80009d6:	d004      	beq.n	80009e2 <__aeabi_fmul+0x1f2>
 80009d8:	230f      	movs	r3, #15
 80009da:	4023      	ands	r3, r4
 80009dc:	2b04      	cmp	r3, #4
 80009de:	d000      	beq.n	80009e2 <__aeabi_fmul+0x1f2>
 80009e0:	3404      	adds	r4, #4
 80009e2:	0163      	lsls	r3, r4, #5
 80009e4:	d51a      	bpl.n	8000a1c <__aeabi_fmul+0x22c>
 80009e6:	2001      	movs	r0, #1
 80009e8:	2400      	movs	r4, #0
 80009ea:	e747      	b.n	800087c <__aeabi_fmul+0x8c>
 80009ec:	2080      	movs	r0, #128	; 0x80
 80009ee:	03c0      	lsls	r0, r0, #15
 80009f0:	4204      	tst	r4, r0
 80009f2:	d009      	beq.n	8000a08 <__aeabi_fmul+0x218>
 80009f4:	4643      	mov	r3, r8
 80009f6:	4203      	tst	r3, r0
 80009f8:	d106      	bne.n	8000a08 <__aeabi_fmul+0x218>
 80009fa:	4644      	mov	r4, r8
 80009fc:	4304      	orrs	r4, r0
 80009fe:	0264      	lsls	r4, r4, #9
 8000a00:	0039      	movs	r1, r7
 8000a02:	20ff      	movs	r0, #255	; 0xff
 8000a04:	0a64      	lsrs	r4, r4, #9
 8000a06:	e739      	b.n	800087c <__aeabi_fmul+0x8c>
 8000a08:	2080      	movs	r0, #128	; 0x80
 8000a0a:	03c0      	lsls	r0, r0, #15
 8000a0c:	4304      	orrs	r4, r0
 8000a0e:	0264      	lsls	r4, r4, #9
 8000a10:	0031      	movs	r1, r6
 8000a12:	20ff      	movs	r0, #255	; 0xff
 8000a14:	0a64      	lsrs	r4, r4, #9
 8000a16:	e731      	b.n	800087c <__aeabi_fmul+0x8c>
 8000a18:	0028      	movs	r0, r5
 8000a1a:	e765      	b.n	80008e8 <__aeabi_fmul+0xf8>
 8000a1c:	01a4      	lsls	r4, r4, #6
 8000a1e:	2000      	movs	r0, #0
 8000a20:	0a64      	lsrs	r4, r4, #9
 8000a22:	e72b      	b.n	800087c <__aeabi_fmul+0x8c>
 8000a24:	2080      	movs	r0, #128	; 0x80
 8000a26:	03c0      	lsls	r0, r0, #15
 8000a28:	4304      	orrs	r4, r0
 8000a2a:	0264      	lsls	r4, r4, #9
 8000a2c:	20ff      	movs	r0, #255	; 0xff
 8000a2e:	0a64      	lsrs	r4, r4, #9
 8000a30:	e724      	b.n	800087c <__aeabi_fmul+0x8c>
 8000a32:	46c0      	nop			; (mov r8, r8)
 8000a34:	080057b8 	.word	0x080057b8
 8000a38:	f7ffffff 	.word	0xf7ffffff

08000a3c <__aeabi_fsub>:
 8000a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a3e:	46ce      	mov	lr, r9
 8000a40:	4647      	mov	r7, r8
 8000a42:	0243      	lsls	r3, r0, #9
 8000a44:	0a5b      	lsrs	r3, r3, #9
 8000a46:	024e      	lsls	r6, r1, #9
 8000a48:	00da      	lsls	r2, r3, #3
 8000a4a:	4694      	mov	ip, r2
 8000a4c:	0a72      	lsrs	r2, r6, #9
 8000a4e:	4691      	mov	r9, r2
 8000a50:	0045      	lsls	r5, r0, #1
 8000a52:	004a      	lsls	r2, r1, #1
 8000a54:	b580      	push	{r7, lr}
 8000a56:	0e2d      	lsrs	r5, r5, #24
 8000a58:	001f      	movs	r7, r3
 8000a5a:	0fc4      	lsrs	r4, r0, #31
 8000a5c:	0e12      	lsrs	r2, r2, #24
 8000a5e:	0fc9      	lsrs	r1, r1, #31
 8000a60:	09b6      	lsrs	r6, r6, #6
 8000a62:	2aff      	cmp	r2, #255	; 0xff
 8000a64:	d05b      	beq.n	8000b1e <__aeabi_fsub+0xe2>
 8000a66:	2001      	movs	r0, #1
 8000a68:	4041      	eors	r1, r0
 8000a6a:	428c      	cmp	r4, r1
 8000a6c:	d039      	beq.n	8000ae2 <__aeabi_fsub+0xa6>
 8000a6e:	1aa8      	subs	r0, r5, r2
 8000a70:	2800      	cmp	r0, #0
 8000a72:	dd5a      	ble.n	8000b2a <__aeabi_fsub+0xee>
 8000a74:	2a00      	cmp	r2, #0
 8000a76:	d06a      	beq.n	8000b4e <__aeabi_fsub+0x112>
 8000a78:	2dff      	cmp	r5, #255	; 0xff
 8000a7a:	d100      	bne.n	8000a7e <__aeabi_fsub+0x42>
 8000a7c:	e0d9      	b.n	8000c32 <__aeabi_fsub+0x1f6>
 8000a7e:	2280      	movs	r2, #128	; 0x80
 8000a80:	04d2      	lsls	r2, r2, #19
 8000a82:	4316      	orrs	r6, r2
 8000a84:	281b      	cmp	r0, #27
 8000a86:	dc00      	bgt.n	8000a8a <__aeabi_fsub+0x4e>
 8000a88:	e0e9      	b.n	8000c5e <__aeabi_fsub+0x222>
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	4663      	mov	r3, ip
 8000a8e:	1a18      	subs	r0, r3, r0
 8000a90:	0143      	lsls	r3, r0, #5
 8000a92:	d400      	bmi.n	8000a96 <__aeabi_fsub+0x5a>
 8000a94:	e0b4      	b.n	8000c00 <__aeabi_fsub+0x1c4>
 8000a96:	0180      	lsls	r0, r0, #6
 8000a98:	0987      	lsrs	r7, r0, #6
 8000a9a:	0038      	movs	r0, r7
 8000a9c:	f001 f920 	bl	8001ce0 <__clzsi2>
 8000aa0:	3805      	subs	r0, #5
 8000aa2:	4087      	lsls	r7, r0
 8000aa4:	4285      	cmp	r5, r0
 8000aa6:	dc00      	bgt.n	8000aaa <__aeabi_fsub+0x6e>
 8000aa8:	e0cc      	b.n	8000c44 <__aeabi_fsub+0x208>
 8000aaa:	1a2d      	subs	r5, r5, r0
 8000aac:	48b5      	ldr	r0, [pc, #724]	; (8000d84 <__aeabi_fsub+0x348>)
 8000aae:	4038      	ands	r0, r7
 8000ab0:	0743      	lsls	r3, r0, #29
 8000ab2:	d004      	beq.n	8000abe <__aeabi_fsub+0x82>
 8000ab4:	230f      	movs	r3, #15
 8000ab6:	4003      	ands	r3, r0
 8000ab8:	2b04      	cmp	r3, #4
 8000aba:	d000      	beq.n	8000abe <__aeabi_fsub+0x82>
 8000abc:	3004      	adds	r0, #4
 8000abe:	0143      	lsls	r3, r0, #5
 8000ac0:	d400      	bmi.n	8000ac4 <__aeabi_fsub+0x88>
 8000ac2:	e0a0      	b.n	8000c06 <__aeabi_fsub+0x1ca>
 8000ac4:	1c6a      	adds	r2, r5, #1
 8000ac6:	2dfe      	cmp	r5, #254	; 0xfe
 8000ac8:	d100      	bne.n	8000acc <__aeabi_fsub+0x90>
 8000aca:	e08d      	b.n	8000be8 <__aeabi_fsub+0x1ac>
 8000acc:	0180      	lsls	r0, r0, #6
 8000ace:	0a47      	lsrs	r7, r0, #9
 8000ad0:	b2d2      	uxtb	r2, r2
 8000ad2:	05d0      	lsls	r0, r2, #23
 8000ad4:	4338      	orrs	r0, r7
 8000ad6:	07e4      	lsls	r4, r4, #31
 8000ad8:	4320      	orrs	r0, r4
 8000ada:	bcc0      	pop	{r6, r7}
 8000adc:	46b9      	mov	r9, r7
 8000ade:	46b0      	mov	r8, r6
 8000ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ae2:	1aa8      	subs	r0, r5, r2
 8000ae4:	4680      	mov	r8, r0
 8000ae6:	2800      	cmp	r0, #0
 8000ae8:	dd45      	ble.n	8000b76 <__aeabi_fsub+0x13a>
 8000aea:	2a00      	cmp	r2, #0
 8000aec:	d070      	beq.n	8000bd0 <__aeabi_fsub+0x194>
 8000aee:	2dff      	cmp	r5, #255	; 0xff
 8000af0:	d100      	bne.n	8000af4 <__aeabi_fsub+0xb8>
 8000af2:	e09e      	b.n	8000c32 <__aeabi_fsub+0x1f6>
 8000af4:	2380      	movs	r3, #128	; 0x80
 8000af6:	04db      	lsls	r3, r3, #19
 8000af8:	431e      	orrs	r6, r3
 8000afa:	4643      	mov	r3, r8
 8000afc:	2b1b      	cmp	r3, #27
 8000afe:	dc00      	bgt.n	8000b02 <__aeabi_fsub+0xc6>
 8000b00:	e0d2      	b.n	8000ca8 <__aeabi_fsub+0x26c>
 8000b02:	2001      	movs	r0, #1
 8000b04:	4460      	add	r0, ip
 8000b06:	0143      	lsls	r3, r0, #5
 8000b08:	d57a      	bpl.n	8000c00 <__aeabi_fsub+0x1c4>
 8000b0a:	3501      	adds	r5, #1
 8000b0c:	2dff      	cmp	r5, #255	; 0xff
 8000b0e:	d06b      	beq.n	8000be8 <__aeabi_fsub+0x1ac>
 8000b10:	2301      	movs	r3, #1
 8000b12:	4a9d      	ldr	r2, [pc, #628]	; (8000d88 <__aeabi_fsub+0x34c>)
 8000b14:	4003      	ands	r3, r0
 8000b16:	0840      	lsrs	r0, r0, #1
 8000b18:	4010      	ands	r0, r2
 8000b1a:	4318      	orrs	r0, r3
 8000b1c:	e7c8      	b.n	8000ab0 <__aeabi_fsub+0x74>
 8000b1e:	2e00      	cmp	r6, #0
 8000b20:	d020      	beq.n	8000b64 <__aeabi_fsub+0x128>
 8000b22:	428c      	cmp	r4, r1
 8000b24:	d023      	beq.n	8000b6e <__aeabi_fsub+0x132>
 8000b26:	0028      	movs	r0, r5
 8000b28:	38ff      	subs	r0, #255	; 0xff
 8000b2a:	2800      	cmp	r0, #0
 8000b2c:	d039      	beq.n	8000ba2 <__aeabi_fsub+0x166>
 8000b2e:	1b57      	subs	r7, r2, r5
 8000b30:	2d00      	cmp	r5, #0
 8000b32:	d000      	beq.n	8000b36 <__aeabi_fsub+0xfa>
 8000b34:	e09d      	b.n	8000c72 <__aeabi_fsub+0x236>
 8000b36:	4663      	mov	r3, ip
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d100      	bne.n	8000b3e <__aeabi_fsub+0x102>
 8000b3c:	e0db      	b.n	8000cf6 <__aeabi_fsub+0x2ba>
 8000b3e:	1e7b      	subs	r3, r7, #1
 8000b40:	2f01      	cmp	r7, #1
 8000b42:	d100      	bne.n	8000b46 <__aeabi_fsub+0x10a>
 8000b44:	e10d      	b.n	8000d62 <__aeabi_fsub+0x326>
 8000b46:	2fff      	cmp	r7, #255	; 0xff
 8000b48:	d071      	beq.n	8000c2e <__aeabi_fsub+0x1f2>
 8000b4a:	001f      	movs	r7, r3
 8000b4c:	e098      	b.n	8000c80 <__aeabi_fsub+0x244>
 8000b4e:	2e00      	cmp	r6, #0
 8000b50:	d100      	bne.n	8000b54 <__aeabi_fsub+0x118>
 8000b52:	e0a7      	b.n	8000ca4 <__aeabi_fsub+0x268>
 8000b54:	1e42      	subs	r2, r0, #1
 8000b56:	2801      	cmp	r0, #1
 8000b58:	d100      	bne.n	8000b5c <__aeabi_fsub+0x120>
 8000b5a:	e0e6      	b.n	8000d2a <__aeabi_fsub+0x2ee>
 8000b5c:	28ff      	cmp	r0, #255	; 0xff
 8000b5e:	d068      	beq.n	8000c32 <__aeabi_fsub+0x1f6>
 8000b60:	0010      	movs	r0, r2
 8000b62:	e78f      	b.n	8000a84 <__aeabi_fsub+0x48>
 8000b64:	2001      	movs	r0, #1
 8000b66:	4041      	eors	r1, r0
 8000b68:	42a1      	cmp	r1, r4
 8000b6a:	d000      	beq.n	8000b6e <__aeabi_fsub+0x132>
 8000b6c:	e77f      	b.n	8000a6e <__aeabi_fsub+0x32>
 8000b6e:	20ff      	movs	r0, #255	; 0xff
 8000b70:	4240      	negs	r0, r0
 8000b72:	4680      	mov	r8, r0
 8000b74:	44a8      	add	r8, r5
 8000b76:	4640      	mov	r0, r8
 8000b78:	2800      	cmp	r0, #0
 8000b7a:	d038      	beq.n	8000bee <__aeabi_fsub+0x1b2>
 8000b7c:	1b51      	subs	r1, r2, r5
 8000b7e:	2d00      	cmp	r5, #0
 8000b80:	d100      	bne.n	8000b84 <__aeabi_fsub+0x148>
 8000b82:	e0ae      	b.n	8000ce2 <__aeabi_fsub+0x2a6>
 8000b84:	2aff      	cmp	r2, #255	; 0xff
 8000b86:	d100      	bne.n	8000b8a <__aeabi_fsub+0x14e>
 8000b88:	e0df      	b.n	8000d4a <__aeabi_fsub+0x30e>
 8000b8a:	2380      	movs	r3, #128	; 0x80
 8000b8c:	4660      	mov	r0, ip
 8000b8e:	04db      	lsls	r3, r3, #19
 8000b90:	4318      	orrs	r0, r3
 8000b92:	4684      	mov	ip, r0
 8000b94:	291b      	cmp	r1, #27
 8000b96:	dc00      	bgt.n	8000b9a <__aeabi_fsub+0x15e>
 8000b98:	e0d9      	b.n	8000d4e <__aeabi_fsub+0x312>
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	0015      	movs	r5, r2
 8000b9e:	1980      	adds	r0, r0, r6
 8000ba0:	e7b1      	b.n	8000b06 <__aeabi_fsub+0xca>
 8000ba2:	20fe      	movs	r0, #254	; 0xfe
 8000ba4:	1c6a      	adds	r2, r5, #1
 8000ba6:	4210      	tst	r0, r2
 8000ba8:	d171      	bne.n	8000c8e <__aeabi_fsub+0x252>
 8000baa:	2d00      	cmp	r5, #0
 8000bac:	d000      	beq.n	8000bb0 <__aeabi_fsub+0x174>
 8000bae:	e0a6      	b.n	8000cfe <__aeabi_fsub+0x2c2>
 8000bb0:	4663      	mov	r3, ip
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d100      	bne.n	8000bb8 <__aeabi_fsub+0x17c>
 8000bb6:	e0d9      	b.n	8000d6c <__aeabi_fsub+0x330>
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2e00      	cmp	r6, #0
 8000bbc:	d100      	bne.n	8000bc0 <__aeabi_fsub+0x184>
 8000bbe:	e788      	b.n	8000ad2 <__aeabi_fsub+0x96>
 8000bc0:	1b98      	subs	r0, r3, r6
 8000bc2:	0143      	lsls	r3, r0, #5
 8000bc4:	d400      	bmi.n	8000bc8 <__aeabi_fsub+0x18c>
 8000bc6:	e0e1      	b.n	8000d8c <__aeabi_fsub+0x350>
 8000bc8:	4663      	mov	r3, ip
 8000bca:	000c      	movs	r4, r1
 8000bcc:	1af0      	subs	r0, r6, r3
 8000bce:	e76f      	b.n	8000ab0 <__aeabi_fsub+0x74>
 8000bd0:	2e00      	cmp	r6, #0
 8000bd2:	d100      	bne.n	8000bd6 <__aeabi_fsub+0x19a>
 8000bd4:	e0b7      	b.n	8000d46 <__aeabi_fsub+0x30a>
 8000bd6:	0002      	movs	r2, r0
 8000bd8:	3a01      	subs	r2, #1
 8000bda:	2801      	cmp	r0, #1
 8000bdc:	d100      	bne.n	8000be0 <__aeabi_fsub+0x1a4>
 8000bde:	e09c      	b.n	8000d1a <__aeabi_fsub+0x2de>
 8000be0:	28ff      	cmp	r0, #255	; 0xff
 8000be2:	d026      	beq.n	8000c32 <__aeabi_fsub+0x1f6>
 8000be4:	4690      	mov	r8, r2
 8000be6:	e788      	b.n	8000afa <__aeabi_fsub+0xbe>
 8000be8:	22ff      	movs	r2, #255	; 0xff
 8000bea:	2700      	movs	r7, #0
 8000bec:	e771      	b.n	8000ad2 <__aeabi_fsub+0x96>
 8000bee:	20fe      	movs	r0, #254	; 0xfe
 8000bf0:	1c6a      	adds	r2, r5, #1
 8000bf2:	4210      	tst	r0, r2
 8000bf4:	d064      	beq.n	8000cc0 <__aeabi_fsub+0x284>
 8000bf6:	2aff      	cmp	r2, #255	; 0xff
 8000bf8:	d0f6      	beq.n	8000be8 <__aeabi_fsub+0x1ac>
 8000bfa:	0015      	movs	r5, r2
 8000bfc:	4466      	add	r6, ip
 8000bfe:	0870      	lsrs	r0, r6, #1
 8000c00:	0743      	lsls	r3, r0, #29
 8000c02:	d000      	beq.n	8000c06 <__aeabi_fsub+0x1ca>
 8000c04:	e756      	b.n	8000ab4 <__aeabi_fsub+0x78>
 8000c06:	08c3      	lsrs	r3, r0, #3
 8000c08:	2dff      	cmp	r5, #255	; 0xff
 8000c0a:	d012      	beq.n	8000c32 <__aeabi_fsub+0x1f6>
 8000c0c:	025b      	lsls	r3, r3, #9
 8000c0e:	0a5f      	lsrs	r7, r3, #9
 8000c10:	b2ea      	uxtb	r2, r5
 8000c12:	e75e      	b.n	8000ad2 <__aeabi_fsub+0x96>
 8000c14:	4662      	mov	r2, ip
 8000c16:	2a00      	cmp	r2, #0
 8000c18:	d100      	bne.n	8000c1c <__aeabi_fsub+0x1e0>
 8000c1a:	e096      	b.n	8000d4a <__aeabi_fsub+0x30e>
 8000c1c:	2e00      	cmp	r6, #0
 8000c1e:	d008      	beq.n	8000c32 <__aeabi_fsub+0x1f6>
 8000c20:	2280      	movs	r2, #128	; 0x80
 8000c22:	03d2      	lsls	r2, r2, #15
 8000c24:	4213      	tst	r3, r2
 8000c26:	d004      	beq.n	8000c32 <__aeabi_fsub+0x1f6>
 8000c28:	4648      	mov	r0, r9
 8000c2a:	4210      	tst	r0, r2
 8000c2c:	d101      	bne.n	8000c32 <__aeabi_fsub+0x1f6>
 8000c2e:	000c      	movs	r4, r1
 8000c30:	464b      	mov	r3, r9
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d0d8      	beq.n	8000be8 <__aeabi_fsub+0x1ac>
 8000c36:	2780      	movs	r7, #128	; 0x80
 8000c38:	03ff      	lsls	r7, r7, #15
 8000c3a:	431f      	orrs	r7, r3
 8000c3c:	027f      	lsls	r7, r7, #9
 8000c3e:	22ff      	movs	r2, #255	; 0xff
 8000c40:	0a7f      	lsrs	r7, r7, #9
 8000c42:	e746      	b.n	8000ad2 <__aeabi_fsub+0x96>
 8000c44:	2320      	movs	r3, #32
 8000c46:	003a      	movs	r2, r7
 8000c48:	1b45      	subs	r5, r0, r5
 8000c4a:	0038      	movs	r0, r7
 8000c4c:	3501      	adds	r5, #1
 8000c4e:	40ea      	lsrs	r2, r5
 8000c50:	1b5d      	subs	r5, r3, r5
 8000c52:	40a8      	lsls	r0, r5
 8000c54:	1e43      	subs	r3, r0, #1
 8000c56:	4198      	sbcs	r0, r3
 8000c58:	2500      	movs	r5, #0
 8000c5a:	4310      	orrs	r0, r2
 8000c5c:	e728      	b.n	8000ab0 <__aeabi_fsub+0x74>
 8000c5e:	2320      	movs	r3, #32
 8000c60:	1a1b      	subs	r3, r3, r0
 8000c62:	0032      	movs	r2, r6
 8000c64:	409e      	lsls	r6, r3
 8000c66:	40c2      	lsrs	r2, r0
 8000c68:	0030      	movs	r0, r6
 8000c6a:	1e43      	subs	r3, r0, #1
 8000c6c:	4198      	sbcs	r0, r3
 8000c6e:	4310      	orrs	r0, r2
 8000c70:	e70c      	b.n	8000a8c <__aeabi_fsub+0x50>
 8000c72:	2aff      	cmp	r2, #255	; 0xff
 8000c74:	d0db      	beq.n	8000c2e <__aeabi_fsub+0x1f2>
 8000c76:	2380      	movs	r3, #128	; 0x80
 8000c78:	4660      	mov	r0, ip
 8000c7a:	04db      	lsls	r3, r3, #19
 8000c7c:	4318      	orrs	r0, r3
 8000c7e:	4684      	mov	ip, r0
 8000c80:	2f1b      	cmp	r7, #27
 8000c82:	dd56      	ble.n	8000d32 <__aeabi_fsub+0x2f6>
 8000c84:	2001      	movs	r0, #1
 8000c86:	000c      	movs	r4, r1
 8000c88:	0015      	movs	r5, r2
 8000c8a:	1a30      	subs	r0, r6, r0
 8000c8c:	e700      	b.n	8000a90 <__aeabi_fsub+0x54>
 8000c8e:	4663      	mov	r3, ip
 8000c90:	1b9f      	subs	r7, r3, r6
 8000c92:	017b      	lsls	r3, r7, #5
 8000c94:	d43d      	bmi.n	8000d12 <__aeabi_fsub+0x2d6>
 8000c96:	2f00      	cmp	r7, #0
 8000c98:	d000      	beq.n	8000c9c <__aeabi_fsub+0x260>
 8000c9a:	e6fe      	b.n	8000a9a <__aeabi_fsub+0x5e>
 8000c9c:	2400      	movs	r4, #0
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2700      	movs	r7, #0
 8000ca2:	e716      	b.n	8000ad2 <__aeabi_fsub+0x96>
 8000ca4:	0005      	movs	r5, r0
 8000ca6:	e7af      	b.n	8000c08 <__aeabi_fsub+0x1cc>
 8000ca8:	0032      	movs	r2, r6
 8000caa:	4643      	mov	r3, r8
 8000cac:	4641      	mov	r1, r8
 8000cae:	40da      	lsrs	r2, r3
 8000cb0:	2320      	movs	r3, #32
 8000cb2:	1a5b      	subs	r3, r3, r1
 8000cb4:	409e      	lsls	r6, r3
 8000cb6:	0030      	movs	r0, r6
 8000cb8:	1e43      	subs	r3, r0, #1
 8000cba:	4198      	sbcs	r0, r3
 8000cbc:	4310      	orrs	r0, r2
 8000cbe:	e721      	b.n	8000b04 <__aeabi_fsub+0xc8>
 8000cc0:	2d00      	cmp	r5, #0
 8000cc2:	d1a7      	bne.n	8000c14 <__aeabi_fsub+0x1d8>
 8000cc4:	4663      	mov	r3, ip
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d059      	beq.n	8000d7e <__aeabi_fsub+0x342>
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2e00      	cmp	r6, #0
 8000cce:	d100      	bne.n	8000cd2 <__aeabi_fsub+0x296>
 8000cd0:	e6ff      	b.n	8000ad2 <__aeabi_fsub+0x96>
 8000cd2:	0030      	movs	r0, r6
 8000cd4:	4460      	add	r0, ip
 8000cd6:	0143      	lsls	r3, r0, #5
 8000cd8:	d592      	bpl.n	8000c00 <__aeabi_fsub+0x1c4>
 8000cda:	4b2a      	ldr	r3, [pc, #168]	; (8000d84 <__aeabi_fsub+0x348>)
 8000cdc:	3501      	adds	r5, #1
 8000cde:	4018      	ands	r0, r3
 8000ce0:	e78e      	b.n	8000c00 <__aeabi_fsub+0x1c4>
 8000ce2:	4663      	mov	r3, ip
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d047      	beq.n	8000d78 <__aeabi_fsub+0x33c>
 8000ce8:	1e4b      	subs	r3, r1, #1
 8000cea:	2901      	cmp	r1, #1
 8000cec:	d015      	beq.n	8000d1a <__aeabi_fsub+0x2de>
 8000cee:	29ff      	cmp	r1, #255	; 0xff
 8000cf0:	d02b      	beq.n	8000d4a <__aeabi_fsub+0x30e>
 8000cf2:	0019      	movs	r1, r3
 8000cf4:	e74e      	b.n	8000b94 <__aeabi_fsub+0x158>
 8000cf6:	000c      	movs	r4, r1
 8000cf8:	464b      	mov	r3, r9
 8000cfa:	003d      	movs	r5, r7
 8000cfc:	e784      	b.n	8000c08 <__aeabi_fsub+0x1cc>
 8000cfe:	4662      	mov	r2, ip
 8000d00:	2a00      	cmp	r2, #0
 8000d02:	d18b      	bne.n	8000c1c <__aeabi_fsub+0x1e0>
 8000d04:	2e00      	cmp	r6, #0
 8000d06:	d192      	bne.n	8000c2e <__aeabi_fsub+0x1f2>
 8000d08:	2780      	movs	r7, #128	; 0x80
 8000d0a:	2400      	movs	r4, #0
 8000d0c:	22ff      	movs	r2, #255	; 0xff
 8000d0e:	03ff      	lsls	r7, r7, #15
 8000d10:	e6df      	b.n	8000ad2 <__aeabi_fsub+0x96>
 8000d12:	4663      	mov	r3, ip
 8000d14:	000c      	movs	r4, r1
 8000d16:	1af7      	subs	r7, r6, r3
 8000d18:	e6bf      	b.n	8000a9a <__aeabi_fsub+0x5e>
 8000d1a:	0030      	movs	r0, r6
 8000d1c:	4460      	add	r0, ip
 8000d1e:	2501      	movs	r5, #1
 8000d20:	0143      	lsls	r3, r0, #5
 8000d22:	d400      	bmi.n	8000d26 <__aeabi_fsub+0x2ea>
 8000d24:	e76c      	b.n	8000c00 <__aeabi_fsub+0x1c4>
 8000d26:	2502      	movs	r5, #2
 8000d28:	e6f2      	b.n	8000b10 <__aeabi_fsub+0xd4>
 8000d2a:	4663      	mov	r3, ip
 8000d2c:	2501      	movs	r5, #1
 8000d2e:	1b98      	subs	r0, r3, r6
 8000d30:	e6ae      	b.n	8000a90 <__aeabi_fsub+0x54>
 8000d32:	2320      	movs	r3, #32
 8000d34:	4664      	mov	r4, ip
 8000d36:	4660      	mov	r0, ip
 8000d38:	40fc      	lsrs	r4, r7
 8000d3a:	1bdf      	subs	r7, r3, r7
 8000d3c:	40b8      	lsls	r0, r7
 8000d3e:	1e43      	subs	r3, r0, #1
 8000d40:	4198      	sbcs	r0, r3
 8000d42:	4320      	orrs	r0, r4
 8000d44:	e79f      	b.n	8000c86 <__aeabi_fsub+0x24a>
 8000d46:	0005      	movs	r5, r0
 8000d48:	e75e      	b.n	8000c08 <__aeabi_fsub+0x1cc>
 8000d4a:	464b      	mov	r3, r9
 8000d4c:	e771      	b.n	8000c32 <__aeabi_fsub+0x1f6>
 8000d4e:	2320      	movs	r3, #32
 8000d50:	4665      	mov	r5, ip
 8000d52:	4660      	mov	r0, ip
 8000d54:	40cd      	lsrs	r5, r1
 8000d56:	1a59      	subs	r1, r3, r1
 8000d58:	4088      	lsls	r0, r1
 8000d5a:	1e43      	subs	r3, r0, #1
 8000d5c:	4198      	sbcs	r0, r3
 8000d5e:	4328      	orrs	r0, r5
 8000d60:	e71c      	b.n	8000b9c <__aeabi_fsub+0x160>
 8000d62:	4663      	mov	r3, ip
 8000d64:	000c      	movs	r4, r1
 8000d66:	2501      	movs	r5, #1
 8000d68:	1af0      	subs	r0, r6, r3
 8000d6a:	e691      	b.n	8000a90 <__aeabi_fsub+0x54>
 8000d6c:	2e00      	cmp	r6, #0
 8000d6e:	d095      	beq.n	8000c9c <__aeabi_fsub+0x260>
 8000d70:	000c      	movs	r4, r1
 8000d72:	464f      	mov	r7, r9
 8000d74:	2200      	movs	r2, #0
 8000d76:	e6ac      	b.n	8000ad2 <__aeabi_fsub+0x96>
 8000d78:	464b      	mov	r3, r9
 8000d7a:	000d      	movs	r5, r1
 8000d7c:	e744      	b.n	8000c08 <__aeabi_fsub+0x1cc>
 8000d7e:	464f      	mov	r7, r9
 8000d80:	2200      	movs	r2, #0
 8000d82:	e6a6      	b.n	8000ad2 <__aeabi_fsub+0x96>
 8000d84:	fbffffff 	.word	0xfbffffff
 8000d88:	7dffffff 	.word	0x7dffffff
 8000d8c:	2800      	cmp	r0, #0
 8000d8e:	d000      	beq.n	8000d92 <__aeabi_fsub+0x356>
 8000d90:	e736      	b.n	8000c00 <__aeabi_fsub+0x1c4>
 8000d92:	2400      	movs	r4, #0
 8000d94:	2700      	movs	r7, #0
 8000d96:	e69c      	b.n	8000ad2 <__aeabi_fsub+0x96>

08000d98 <__aeabi_f2iz>:
 8000d98:	0241      	lsls	r1, r0, #9
 8000d9a:	0042      	lsls	r2, r0, #1
 8000d9c:	0fc3      	lsrs	r3, r0, #31
 8000d9e:	0a49      	lsrs	r1, r1, #9
 8000da0:	2000      	movs	r0, #0
 8000da2:	0e12      	lsrs	r2, r2, #24
 8000da4:	2a7e      	cmp	r2, #126	; 0x7e
 8000da6:	dd03      	ble.n	8000db0 <__aeabi_f2iz+0x18>
 8000da8:	2a9d      	cmp	r2, #157	; 0x9d
 8000daa:	dd02      	ble.n	8000db2 <__aeabi_f2iz+0x1a>
 8000dac:	4a09      	ldr	r2, [pc, #36]	; (8000dd4 <__aeabi_f2iz+0x3c>)
 8000dae:	1898      	adds	r0, r3, r2
 8000db0:	4770      	bx	lr
 8000db2:	2080      	movs	r0, #128	; 0x80
 8000db4:	0400      	lsls	r0, r0, #16
 8000db6:	4301      	orrs	r1, r0
 8000db8:	2a95      	cmp	r2, #149	; 0x95
 8000dba:	dc07      	bgt.n	8000dcc <__aeabi_f2iz+0x34>
 8000dbc:	2096      	movs	r0, #150	; 0x96
 8000dbe:	1a82      	subs	r2, r0, r2
 8000dc0:	40d1      	lsrs	r1, r2
 8000dc2:	4248      	negs	r0, r1
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d1f3      	bne.n	8000db0 <__aeabi_f2iz+0x18>
 8000dc8:	0008      	movs	r0, r1
 8000dca:	e7f1      	b.n	8000db0 <__aeabi_f2iz+0x18>
 8000dcc:	3a96      	subs	r2, #150	; 0x96
 8000dce:	4091      	lsls	r1, r2
 8000dd0:	e7f7      	b.n	8000dc2 <__aeabi_f2iz+0x2a>
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	7fffffff 	.word	0x7fffffff

08000dd8 <__aeabi_i2f>:
 8000dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dda:	2800      	cmp	r0, #0
 8000ddc:	d013      	beq.n	8000e06 <__aeabi_i2f+0x2e>
 8000dde:	17c3      	asrs	r3, r0, #31
 8000de0:	18c6      	adds	r6, r0, r3
 8000de2:	405e      	eors	r6, r3
 8000de4:	0fc4      	lsrs	r4, r0, #31
 8000de6:	0030      	movs	r0, r6
 8000de8:	f000 ff7a 	bl	8001ce0 <__clzsi2>
 8000dec:	239e      	movs	r3, #158	; 0x9e
 8000dee:	0005      	movs	r5, r0
 8000df0:	1a1b      	subs	r3, r3, r0
 8000df2:	2b96      	cmp	r3, #150	; 0x96
 8000df4:	dc0f      	bgt.n	8000e16 <__aeabi_i2f+0x3e>
 8000df6:	2808      	cmp	r0, #8
 8000df8:	dd01      	ble.n	8000dfe <__aeabi_i2f+0x26>
 8000dfa:	3d08      	subs	r5, #8
 8000dfc:	40ae      	lsls	r6, r5
 8000dfe:	0276      	lsls	r6, r6, #9
 8000e00:	0a76      	lsrs	r6, r6, #9
 8000e02:	b2d8      	uxtb	r0, r3
 8000e04:	e002      	b.n	8000e0c <__aeabi_i2f+0x34>
 8000e06:	2400      	movs	r4, #0
 8000e08:	2000      	movs	r0, #0
 8000e0a:	2600      	movs	r6, #0
 8000e0c:	05c0      	lsls	r0, r0, #23
 8000e0e:	4330      	orrs	r0, r6
 8000e10:	07e4      	lsls	r4, r4, #31
 8000e12:	4320      	orrs	r0, r4
 8000e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e16:	2b99      	cmp	r3, #153	; 0x99
 8000e18:	dd0c      	ble.n	8000e34 <__aeabi_i2f+0x5c>
 8000e1a:	2205      	movs	r2, #5
 8000e1c:	0031      	movs	r1, r6
 8000e1e:	1a12      	subs	r2, r2, r0
 8000e20:	40d1      	lsrs	r1, r2
 8000e22:	000a      	movs	r2, r1
 8000e24:	0001      	movs	r1, r0
 8000e26:	0030      	movs	r0, r6
 8000e28:	311b      	adds	r1, #27
 8000e2a:	4088      	lsls	r0, r1
 8000e2c:	1e41      	subs	r1, r0, #1
 8000e2e:	4188      	sbcs	r0, r1
 8000e30:	4302      	orrs	r2, r0
 8000e32:	0016      	movs	r6, r2
 8000e34:	2d05      	cmp	r5, #5
 8000e36:	dc12      	bgt.n	8000e5e <__aeabi_i2f+0x86>
 8000e38:	0031      	movs	r1, r6
 8000e3a:	4f0d      	ldr	r7, [pc, #52]	; (8000e70 <__aeabi_i2f+0x98>)
 8000e3c:	4039      	ands	r1, r7
 8000e3e:	0772      	lsls	r2, r6, #29
 8000e40:	d009      	beq.n	8000e56 <__aeabi_i2f+0x7e>
 8000e42:	200f      	movs	r0, #15
 8000e44:	4030      	ands	r0, r6
 8000e46:	2804      	cmp	r0, #4
 8000e48:	d005      	beq.n	8000e56 <__aeabi_i2f+0x7e>
 8000e4a:	3104      	adds	r1, #4
 8000e4c:	014a      	lsls	r2, r1, #5
 8000e4e:	d502      	bpl.n	8000e56 <__aeabi_i2f+0x7e>
 8000e50:	239f      	movs	r3, #159	; 0x9f
 8000e52:	4039      	ands	r1, r7
 8000e54:	1b5b      	subs	r3, r3, r5
 8000e56:	0189      	lsls	r1, r1, #6
 8000e58:	0a4e      	lsrs	r6, r1, #9
 8000e5a:	b2d8      	uxtb	r0, r3
 8000e5c:	e7d6      	b.n	8000e0c <__aeabi_i2f+0x34>
 8000e5e:	1f6a      	subs	r2, r5, #5
 8000e60:	4096      	lsls	r6, r2
 8000e62:	0031      	movs	r1, r6
 8000e64:	4f02      	ldr	r7, [pc, #8]	; (8000e70 <__aeabi_i2f+0x98>)
 8000e66:	4039      	ands	r1, r7
 8000e68:	0772      	lsls	r2, r6, #29
 8000e6a:	d0f4      	beq.n	8000e56 <__aeabi_i2f+0x7e>
 8000e6c:	e7e9      	b.n	8000e42 <__aeabi_i2f+0x6a>
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	fbffffff 	.word	0xfbffffff

08000e74 <__aeabi_ui2f>:
 8000e74:	b570      	push	{r4, r5, r6, lr}
 8000e76:	1e05      	subs	r5, r0, #0
 8000e78:	d00e      	beq.n	8000e98 <__aeabi_ui2f+0x24>
 8000e7a:	f000 ff31 	bl	8001ce0 <__clzsi2>
 8000e7e:	239e      	movs	r3, #158	; 0x9e
 8000e80:	0004      	movs	r4, r0
 8000e82:	1a1b      	subs	r3, r3, r0
 8000e84:	2b96      	cmp	r3, #150	; 0x96
 8000e86:	dc0c      	bgt.n	8000ea2 <__aeabi_ui2f+0x2e>
 8000e88:	2808      	cmp	r0, #8
 8000e8a:	dd01      	ble.n	8000e90 <__aeabi_ui2f+0x1c>
 8000e8c:	3c08      	subs	r4, #8
 8000e8e:	40a5      	lsls	r5, r4
 8000e90:	026d      	lsls	r5, r5, #9
 8000e92:	0a6d      	lsrs	r5, r5, #9
 8000e94:	b2d8      	uxtb	r0, r3
 8000e96:	e001      	b.n	8000e9c <__aeabi_ui2f+0x28>
 8000e98:	2000      	movs	r0, #0
 8000e9a:	2500      	movs	r5, #0
 8000e9c:	05c0      	lsls	r0, r0, #23
 8000e9e:	4328      	orrs	r0, r5
 8000ea0:	bd70      	pop	{r4, r5, r6, pc}
 8000ea2:	2b99      	cmp	r3, #153	; 0x99
 8000ea4:	dd09      	ble.n	8000eba <__aeabi_ui2f+0x46>
 8000ea6:	0002      	movs	r2, r0
 8000ea8:	0029      	movs	r1, r5
 8000eaa:	321b      	adds	r2, #27
 8000eac:	4091      	lsls	r1, r2
 8000eae:	1e4a      	subs	r2, r1, #1
 8000eb0:	4191      	sbcs	r1, r2
 8000eb2:	2205      	movs	r2, #5
 8000eb4:	1a12      	subs	r2, r2, r0
 8000eb6:	40d5      	lsrs	r5, r2
 8000eb8:	430d      	orrs	r5, r1
 8000eba:	2c05      	cmp	r4, #5
 8000ebc:	dc12      	bgt.n	8000ee4 <__aeabi_ui2f+0x70>
 8000ebe:	0029      	movs	r1, r5
 8000ec0:	4e0c      	ldr	r6, [pc, #48]	; (8000ef4 <__aeabi_ui2f+0x80>)
 8000ec2:	4031      	ands	r1, r6
 8000ec4:	076a      	lsls	r2, r5, #29
 8000ec6:	d009      	beq.n	8000edc <__aeabi_ui2f+0x68>
 8000ec8:	200f      	movs	r0, #15
 8000eca:	4028      	ands	r0, r5
 8000ecc:	2804      	cmp	r0, #4
 8000ece:	d005      	beq.n	8000edc <__aeabi_ui2f+0x68>
 8000ed0:	3104      	adds	r1, #4
 8000ed2:	014a      	lsls	r2, r1, #5
 8000ed4:	d502      	bpl.n	8000edc <__aeabi_ui2f+0x68>
 8000ed6:	239f      	movs	r3, #159	; 0x9f
 8000ed8:	4031      	ands	r1, r6
 8000eda:	1b1b      	subs	r3, r3, r4
 8000edc:	0189      	lsls	r1, r1, #6
 8000ede:	0a4d      	lsrs	r5, r1, #9
 8000ee0:	b2d8      	uxtb	r0, r3
 8000ee2:	e7db      	b.n	8000e9c <__aeabi_ui2f+0x28>
 8000ee4:	1f62      	subs	r2, r4, #5
 8000ee6:	4095      	lsls	r5, r2
 8000ee8:	0029      	movs	r1, r5
 8000eea:	4e02      	ldr	r6, [pc, #8]	; (8000ef4 <__aeabi_ui2f+0x80>)
 8000eec:	4031      	ands	r1, r6
 8000eee:	076a      	lsls	r2, r5, #29
 8000ef0:	d0f4      	beq.n	8000edc <__aeabi_ui2f+0x68>
 8000ef2:	e7e9      	b.n	8000ec8 <__aeabi_ui2f+0x54>
 8000ef4:	fbffffff 	.word	0xfbffffff

08000ef8 <__aeabi_dmul>:
 8000ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000efa:	4657      	mov	r7, sl
 8000efc:	464e      	mov	r6, r9
 8000efe:	4645      	mov	r5, r8
 8000f00:	46de      	mov	lr, fp
 8000f02:	b5e0      	push	{r5, r6, r7, lr}
 8000f04:	4698      	mov	r8, r3
 8000f06:	030c      	lsls	r4, r1, #12
 8000f08:	004b      	lsls	r3, r1, #1
 8000f0a:	0006      	movs	r6, r0
 8000f0c:	4692      	mov	sl, r2
 8000f0e:	b087      	sub	sp, #28
 8000f10:	0b24      	lsrs	r4, r4, #12
 8000f12:	0d5b      	lsrs	r3, r3, #21
 8000f14:	0fcf      	lsrs	r7, r1, #31
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d100      	bne.n	8000f1c <__aeabi_dmul+0x24>
 8000f1a:	e15c      	b.n	80011d6 <__aeabi_dmul+0x2de>
 8000f1c:	4ad9      	ldr	r2, [pc, #868]	; (8001284 <__aeabi_dmul+0x38c>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d100      	bne.n	8000f24 <__aeabi_dmul+0x2c>
 8000f22:	e175      	b.n	8001210 <__aeabi_dmul+0x318>
 8000f24:	0f42      	lsrs	r2, r0, #29
 8000f26:	00e4      	lsls	r4, r4, #3
 8000f28:	4314      	orrs	r4, r2
 8000f2a:	2280      	movs	r2, #128	; 0x80
 8000f2c:	0412      	lsls	r2, r2, #16
 8000f2e:	4314      	orrs	r4, r2
 8000f30:	4ad5      	ldr	r2, [pc, #852]	; (8001288 <__aeabi_dmul+0x390>)
 8000f32:	00c5      	lsls	r5, r0, #3
 8000f34:	4694      	mov	ip, r2
 8000f36:	4463      	add	r3, ip
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	4699      	mov	r9, r3
 8000f3e:	469b      	mov	fp, r3
 8000f40:	4643      	mov	r3, r8
 8000f42:	4642      	mov	r2, r8
 8000f44:	031e      	lsls	r6, r3, #12
 8000f46:	0fd2      	lsrs	r2, r2, #31
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	4650      	mov	r0, sl
 8000f4c:	4690      	mov	r8, r2
 8000f4e:	0b36      	lsrs	r6, r6, #12
 8000f50:	0d5b      	lsrs	r3, r3, #21
 8000f52:	d100      	bne.n	8000f56 <__aeabi_dmul+0x5e>
 8000f54:	e120      	b.n	8001198 <__aeabi_dmul+0x2a0>
 8000f56:	4acb      	ldr	r2, [pc, #812]	; (8001284 <__aeabi_dmul+0x38c>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_dmul+0x66>
 8000f5c:	e162      	b.n	8001224 <__aeabi_dmul+0x32c>
 8000f5e:	49ca      	ldr	r1, [pc, #808]	; (8001288 <__aeabi_dmul+0x390>)
 8000f60:	0f42      	lsrs	r2, r0, #29
 8000f62:	468c      	mov	ip, r1
 8000f64:	9900      	ldr	r1, [sp, #0]
 8000f66:	4463      	add	r3, ip
 8000f68:	00f6      	lsls	r6, r6, #3
 8000f6a:	468c      	mov	ip, r1
 8000f6c:	4316      	orrs	r6, r2
 8000f6e:	2280      	movs	r2, #128	; 0x80
 8000f70:	449c      	add	ip, r3
 8000f72:	0412      	lsls	r2, r2, #16
 8000f74:	4663      	mov	r3, ip
 8000f76:	4316      	orrs	r6, r2
 8000f78:	00c2      	lsls	r2, r0, #3
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	9900      	ldr	r1, [sp, #0]
 8000f80:	4643      	mov	r3, r8
 8000f82:	3101      	adds	r1, #1
 8000f84:	468c      	mov	ip, r1
 8000f86:	4649      	mov	r1, r9
 8000f88:	407b      	eors	r3, r7
 8000f8a:	9301      	str	r3, [sp, #4]
 8000f8c:	290f      	cmp	r1, #15
 8000f8e:	d826      	bhi.n	8000fde <__aeabi_dmul+0xe6>
 8000f90:	4bbe      	ldr	r3, [pc, #760]	; (800128c <__aeabi_dmul+0x394>)
 8000f92:	0089      	lsls	r1, r1, #2
 8000f94:	5859      	ldr	r1, [r3, r1]
 8000f96:	468f      	mov	pc, r1
 8000f98:	4643      	mov	r3, r8
 8000f9a:	9301      	str	r3, [sp, #4]
 8000f9c:	0034      	movs	r4, r6
 8000f9e:	0015      	movs	r5, r2
 8000fa0:	4683      	mov	fp, r0
 8000fa2:	465b      	mov	r3, fp
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d016      	beq.n	8000fd6 <__aeabi_dmul+0xde>
 8000fa8:	2b03      	cmp	r3, #3
 8000faa:	d100      	bne.n	8000fae <__aeabi_dmul+0xb6>
 8000fac:	e203      	b.n	80013b6 <__aeabi_dmul+0x4be>
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d000      	beq.n	8000fb4 <__aeabi_dmul+0xbc>
 8000fb2:	e0cd      	b.n	8001150 <__aeabi_dmul+0x258>
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2400      	movs	r4, #0
 8000fb8:	2500      	movs	r5, #0
 8000fba:	9b01      	ldr	r3, [sp, #4]
 8000fbc:	0512      	lsls	r2, r2, #20
 8000fbe:	4322      	orrs	r2, r4
 8000fc0:	07db      	lsls	r3, r3, #31
 8000fc2:	431a      	orrs	r2, r3
 8000fc4:	0028      	movs	r0, r5
 8000fc6:	0011      	movs	r1, r2
 8000fc8:	b007      	add	sp, #28
 8000fca:	bcf0      	pop	{r4, r5, r6, r7}
 8000fcc:	46bb      	mov	fp, r7
 8000fce:	46b2      	mov	sl, r6
 8000fd0:	46a9      	mov	r9, r5
 8000fd2:	46a0      	mov	r8, r4
 8000fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fd6:	2400      	movs	r4, #0
 8000fd8:	2500      	movs	r5, #0
 8000fda:	4aaa      	ldr	r2, [pc, #680]	; (8001284 <__aeabi_dmul+0x38c>)
 8000fdc:	e7ed      	b.n	8000fba <__aeabi_dmul+0xc2>
 8000fde:	0c28      	lsrs	r0, r5, #16
 8000fe0:	042d      	lsls	r5, r5, #16
 8000fe2:	0c2d      	lsrs	r5, r5, #16
 8000fe4:	002b      	movs	r3, r5
 8000fe6:	0c11      	lsrs	r1, r2, #16
 8000fe8:	0412      	lsls	r2, r2, #16
 8000fea:	0c12      	lsrs	r2, r2, #16
 8000fec:	4353      	muls	r3, r2
 8000fee:	4698      	mov	r8, r3
 8000ff0:	0013      	movs	r3, r2
 8000ff2:	002f      	movs	r7, r5
 8000ff4:	4343      	muls	r3, r0
 8000ff6:	4699      	mov	r9, r3
 8000ff8:	434f      	muls	r7, r1
 8000ffa:	444f      	add	r7, r9
 8000ffc:	46bb      	mov	fp, r7
 8000ffe:	4647      	mov	r7, r8
 8001000:	000b      	movs	r3, r1
 8001002:	0c3f      	lsrs	r7, r7, #16
 8001004:	46ba      	mov	sl, r7
 8001006:	4343      	muls	r3, r0
 8001008:	44da      	add	sl, fp
 800100a:	9302      	str	r3, [sp, #8]
 800100c:	45d1      	cmp	r9, sl
 800100e:	d904      	bls.n	800101a <__aeabi_dmul+0x122>
 8001010:	2780      	movs	r7, #128	; 0x80
 8001012:	027f      	lsls	r7, r7, #9
 8001014:	46b9      	mov	r9, r7
 8001016:	444b      	add	r3, r9
 8001018:	9302      	str	r3, [sp, #8]
 800101a:	4653      	mov	r3, sl
 800101c:	0c1b      	lsrs	r3, r3, #16
 800101e:	469b      	mov	fp, r3
 8001020:	4653      	mov	r3, sl
 8001022:	041f      	lsls	r7, r3, #16
 8001024:	4643      	mov	r3, r8
 8001026:	041b      	lsls	r3, r3, #16
 8001028:	0c1b      	lsrs	r3, r3, #16
 800102a:	4698      	mov	r8, r3
 800102c:	003b      	movs	r3, r7
 800102e:	4443      	add	r3, r8
 8001030:	9304      	str	r3, [sp, #16]
 8001032:	0c33      	lsrs	r3, r6, #16
 8001034:	0436      	lsls	r6, r6, #16
 8001036:	0c36      	lsrs	r6, r6, #16
 8001038:	4698      	mov	r8, r3
 800103a:	0033      	movs	r3, r6
 800103c:	4343      	muls	r3, r0
 800103e:	4699      	mov	r9, r3
 8001040:	4643      	mov	r3, r8
 8001042:	4343      	muls	r3, r0
 8001044:	002f      	movs	r7, r5
 8001046:	469a      	mov	sl, r3
 8001048:	4643      	mov	r3, r8
 800104a:	4377      	muls	r7, r6
 800104c:	435d      	muls	r5, r3
 800104e:	0c38      	lsrs	r0, r7, #16
 8001050:	444d      	add	r5, r9
 8001052:	1945      	adds	r5, r0, r5
 8001054:	45a9      	cmp	r9, r5
 8001056:	d903      	bls.n	8001060 <__aeabi_dmul+0x168>
 8001058:	2380      	movs	r3, #128	; 0x80
 800105a:	025b      	lsls	r3, r3, #9
 800105c:	4699      	mov	r9, r3
 800105e:	44ca      	add	sl, r9
 8001060:	043f      	lsls	r7, r7, #16
 8001062:	0c28      	lsrs	r0, r5, #16
 8001064:	0c3f      	lsrs	r7, r7, #16
 8001066:	042d      	lsls	r5, r5, #16
 8001068:	19ed      	adds	r5, r5, r7
 800106a:	0c27      	lsrs	r7, r4, #16
 800106c:	0424      	lsls	r4, r4, #16
 800106e:	0c24      	lsrs	r4, r4, #16
 8001070:	0003      	movs	r3, r0
 8001072:	0020      	movs	r0, r4
 8001074:	4350      	muls	r0, r2
 8001076:	437a      	muls	r2, r7
 8001078:	4691      	mov	r9, r2
 800107a:	003a      	movs	r2, r7
 800107c:	4453      	add	r3, sl
 800107e:	9305      	str	r3, [sp, #20]
 8001080:	0c03      	lsrs	r3, r0, #16
 8001082:	469a      	mov	sl, r3
 8001084:	434a      	muls	r2, r1
 8001086:	4361      	muls	r1, r4
 8001088:	4449      	add	r1, r9
 800108a:	4451      	add	r1, sl
 800108c:	44ab      	add	fp, r5
 800108e:	4589      	cmp	r9, r1
 8001090:	d903      	bls.n	800109a <__aeabi_dmul+0x1a2>
 8001092:	2380      	movs	r3, #128	; 0x80
 8001094:	025b      	lsls	r3, r3, #9
 8001096:	4699      	mov	r9, r3
 8001098:	444a      	add	r2, r9
 800109a:	0400      	lsls	r0, r0, #16
 800109c:	0c0b      	lsrs	r3, r1, #16
 800109e:	0c00      	lsrs	r0, r0, #16
 80010a0:	0409      	lsls	r1, r1, #16
 80010a2:	1809      	adds	r1, r1, r0
 80010a4:	0020      	movs	r0, r4
 80010a6:	4699      	mov	r9, r3
 80010a8:	4643      	mov	r3, r8
 80010aa:	4370      	muls	r0, r6
 80010ac:	435c      	muls	r4, r3
 80010ae:	437e      	muls	r6, r7
 80010b0:	435f      	muls	r7, r3
 80010b2:	0c03      	lsrs	r3, r0, #16
 80010b4:	4698      	mov	r8, r3
 80010b6:	19a4      	adds	r4, r4, r6
 80010b8:	4444      	add	r4, r8
 80010ba:	444a      	add	r2, r9
 80010bc:	9703      	str	r7, [sp, #12]
 80010be:	42a6      	cmp	r6, r4
 80010c0:	d904      	bls.n	80010cc <__aeabi_dmul+0x1d4>
 80010c2:	2380      	movs	r3, #128	; 0x80
 80010c4:	025b      	lsls	r3, r3, #9
 80010c6:	4698      	mov	r8, r3
 80010c8:	4447      	add	r7, r8
 80010ca:	9703      	str	r7, [sp, #12]
 80010cc:	0423      	lsls	r3, r4, #16
 80010ce:	9e02      	ldr	r6, [sp, #8]
 80010d0:	469a      	mov	sl, r3
 80010d2:	9b05      	ldr	r3, [sp, #20]
 80010d4:	445e      	add	r6, fp
 80010d6:	4698      	mov	r8, r3
 80010d8:	42ae      	cmp	r6, r5
 80010da:	41ad      	sbcs	r5, r5
 80010dc:	1876      	adds	r6, r6, r1
 80010de:	428e      	cmp	r6, r1
 80010e0:	4189      	sbcs	r1, r1
 80010e2:	0400      	lsls	r0, r0, #16
 80010e4:	0c00      	lsrs	r0, r0, #16
 80010e6:	4450      	add	r0, sl
 80010e8:	4440      	add	r0, r8
 80010ea:	426d      	negs	r5, r5
 80010ec:	1947      	adds	r7, r0, r5
 80010ee:	46b8      	mov	r8, r7
 80010f0:	4693      	mov	fp, r2
 80010f2:	4249      	negs	r1, r1
 80010f4:	4689      	mov	r9, r1
 80010f6:	44c3      	add	fp, r8
 80010f8:	44d9      	add	r9, fp
 80010fa:	4298      	cmp	r0, r3
 80010fc:	4180      	sbcs	r0, r0
 80010fe:	45a8      	cmp	r8, r5
 8001100:	41ad      	sbcs	r5, r5
 8001102:	4593      	cmp	fp, r2
 8001104:	4192      	sbcs	r2, r2
 8001106:	4589      	cmp	r9, r1
 8001108:	4189      	sbcs	r1, r1
 800110a:	426d      	negs	r5, r5
 800110c:	4240      	negs	r0, r0
 800110e:	4328      	orrs	r0, r5
 8001110:	0c24      	lsrs	r4, r4, #16
 8001112:	4252      	negs	r2, r2
 8001114:	4249      	negs	r1, r1
 8001116:	430a      	orrs	r2, r1
 8001118:	9b03      	ldr	r3, [sp, #12]
 800111a:	1900      	adds	r0, r0, r4
 800111c:	1880      	adds	r0, r0, r2
 800111e:	18c7      	adds	r7, r0, r3
 8001120:	464b      	mov	r3, r9
 8001122:	0ddc      	lsrs	r4, r3, #23
 8001124:	9b04      	ldr	r3, [sp, #16]
 8001126:	0275      	lsls	r5, r6, #9
 8001128:	431d      	orrs	r5, r3
 800112a:	1e6a      	subs	r2, r5, #1
 800112c:	4195      	sbcs	r5, r2
 800112e:	464b      	mov	r3, r9
 8001130:	0df6      	lsrs	r6, r6, #23
 8001132:	027f      	lsls	r7, r7, #9
 8001134:	4335      	orrs	r5, r6
 8001136:	025a      	lsls	r2, r3, #9
 8001138:	433c      	orrs	r4, r7
 800113a:	4315      	orrs	r5, r2
 800113c:	01fb      	lsls	r3, r7, #7
 800113e:	d400      	bmi.n	8001142 <__aeabi_dmul+0x24a>
 8001140:	e11c      	b.n	800137c <__aeabi_dmul+0x484>
 8001142:	2101      	movs	r1, #1
 8001144:	086a      	lsrs	r2, r5, #1
 8001146:	400d      	ands	r5, r1
 8001148:	4315      	orrs	r5, r2
 800114a:	07e2      	lsls	r2, r4, #31
 800114c:	4315      	orrs	r5, r2
 800114e:	0864      	lsrs	r4, r4, #1
 8001150:	494f      	ldr	r1, [pc, #316]	; (8001290 <__aeabi_dmul+0x398>)
 8001152:	4461      	add	r1, ip
 8001154:	2900      	cmp	r1, #0
 8001156:	dc00      	bgt.n	800115a <__aeabi_dmul+0x262>
 8001158:	e0b0      	b.n	80012bc <__aeabi_dmul+0x3c4>
 800115a:	076b      	lsls	r3, r5, #29
 800115c:	d009      	beq.n	8001172 <__aeabi_dmul+0x27a>
 800115e:	220f      	movs	r2, #15
 8001160:	402a      	ands	r2, r5
 8001162:	2a04      	cmp	r2, #4
 8001164:	d005      	beq.n	8001172 <__aeabi_dmul+0x27a>
 8001166:	1d2a      	adds	r2, r5, #4
 8001168:	42aa      	cmp	r2, r5
 800116a:	41ad      	sbcs	r5, r5
 800116c:	426d      	negs	r5, r5
 800116e:	1964      	adds	r4, r4, r5
 8001170:	0015      	movs	r5, r2
 8001172:	01e3      	lsls	r3, r4, #7
 8001174:	d504      	bpl.n	8001180 <__aeabi_dmul+0x288>
 8001176:	2180      	movs	r1, #128	; 0x80
 8001178:	4a46      	ldr	r2, [pc, #280]	; (8001294 <__aeabi_dmul+0x39c>)
 800117a:	00c9      	lsls	r1, r1, #3
 800117c:	4014      	ands	r4, r2
 800117e:	4461      	add	r1, ip
 8001180:	4a45      	ldr	r2, [pc, #276]	; (8001298 <__aeabi_dmul+0x3a0>)
 8001182:	4291      	cmp	r1, r2
 8001184:	dd00      	ble.n	8001188 <__aeabi_dmul+0x290>
 8001186:	e726      	b.n	8000fd6 <__aeabi_dmul+0xde>
 8001188:	0762      	lsls	r2, r4, #29
 800118a:	08ed      	lsrs	r5, r5, #3
 800118c:	0264      	lsls	r4, r4, #9
 800118e:	0549      	lsls	r1, r1, #21
 8001190:	4315      	orrs	r5, r2
 8001192:	0b24      	lsrs	r4, r4, #12
 8001194:	0d4a      	lsrs	r2, r1, #21
 8001196:	e710      	b.n	8000fba <__aeabi_dmul+0xc2>
 8001198:	4652      	mov	r2, sl
 800119a:	4332      	orrs	r2, r6
 800119c:	d100      	bne.n	80011a0 <__aeabi_dmul+0x2a8>
 800119e:	e07f      	b.n	80012a0 <__aeabi_dmul+0x3a8>
 80011a0:	2e00      	cmp	r6, #0
 80011a2:	d100      	bne.n	80011a6 <__aeabi_dmul+0x2ae>
 80011a4:	e0dc      	b.n	8001360 <__aeabi_dmul+0x468>
 80011a6:	0030      	movs	r0, r6
 80011a8:	f000 fd9a 	bl	8001ce0 <__clzsi2>
 80011ac:	0002      	movs	r2, r0
 80011ae:	3a0b      	subs	r2, #11
 80011b0:	231d      	movs	r3, #29
 80011b2:	0001      	movs	r1, r0
 80011b4:	1a9b      	subs	r3, r3, r2
 80011b6:	4652      	mov	r2, sl
 80011b8:	3908      	subs	r1, #8
 80011ba:	40da      	lsrs	r2, r3
 80011bc:	408e      	lsls	r6, r1
 80011be:	4316      	orrs	r6, r2
 80011c0:	4652      	mov	r2, sl
 80011c2:	408a      	lsls	r2, r1
 80011c4:	9b00      	ldr	r3, [sp, #0]
 80011c6:	4935      	ldr	r1, [pc, #212]	; (800129c <__aeabi_dmul+0x3a4>)
 80011c8:	1a18      	subs	r0, r3, r0
 80011ca:	0003      	movs	r3, r0
 80011cc:	468c      	mov	ip, r1
 80011ce:	4463      	add	r3, ip
 80011d0:	2000      	movs	r0, #0
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	e6d3      	b.n	8000f7e <__aeabi_dmul+0x86>
 80011d6:	0025      	movs	r5, r4
 80011d8:	4305      	orrs	r5, r0
 80011da:	d04a      	beq.n	8001272 <__aeabi_dmul+0x37a>
 80011dc:	2c00      	cmp	r4, #0
 80011de:	d100      	bne.n	80011e2 <__aeabi_dmul+0x2ea>
 80011e0:	e0b0      	b.n	8001344 <__aeabi_dmul+0x44c>
 80011e2:	0020      	movs	r0, r4
 80011e4:	f000 fd7c 	bl	8001ce0 <__clzsi2>
 80011e8:	0001      	movs	r1, r0
 80011ea:	0002      	movs	r2, r0
 80011ec:	390b      	subs	r1, #11
 80011ee:	231d      	movs	r3, #29
 80011f0:	0010      	movs	r0, r2
 80011f2:	1a5b      	subs	r3, r3, r1
 80011f4:	0031      	movs	r1, r6
 80011f6:	0035      	movs	r5, r6
 80011f8:	3808      	subs	r0, #8
 80011fa:	4084      	lsls	r4, r0
 80011fc:	40d9      	lsrs	r1, r3
 80011fe:	4085      	lsls	r5, r0
 8001200:	430c      	orrs	r4, r1
 8001202:	4826      	ldr	r0, [pc, #152]	; (800129c <__aeabi_dmul+0x3a4>)
 8001204:	1a83      	subs	r3, r0, r2
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	2300      	movs	r3, #0
 800120a:	4699      	mov	r9, r3
 800120c:	469b      	mov	fp, r3
 800120e:	e697      	b.n	8000f40 <__aeabi_dmul+0x48>
 8001210:	0005      	movs	r5, r0
 8001212:	4325      	orrs	r5, r4
 8001214:	d126      	bne.n	8001264 <__aeabi_dmul+0x36c>
 8001216:	2208      	movs	r2, #8
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	2302      	movs	r3, #2
 800121c:	2400      	movs	r4, #0
 800121e:	4691      	mov	r9, r2
 8001220:	469b      	mov	fp, r3
 8001222:	e68d      	b.n	8000f40 <__aeabi_dmul+0x48>
 8001224:	4652      	mov	r2, sl
 8001226:	9b00      	ldr	r3, [sp, #0]
 8001228:	4332      	orrs	r2, r6
 800122a:	d110      	bne.n	800124e <__aeabi_dmul+0x356>
 800122c:	4915      	ldr	r1, [pc, #84]	; (8001284 <__aeabi_dmul+0x38c>)
 800122e:	2600      	movs	r6, #0
 8001230:	468c      	mov	ip, r1
 8001232:	4463      	add	r3, ip
 8001234:	4649      	mov	r1, r9
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	2302      	movs	r3, #2
 800123a:	4319      	orrs	r1, r3
 800123c:	4689      	mov	r9, r1
 800123e:	2002      	movs	r0, #2
 8001240:	e69d      	b.n	8000f7e <__aeabi_dmul+0x86>
 8001242:	465b      	mov	r3, fp
 8001244:	9701      	str	r7, [sp, #4]
 8001246:	2b02      	cmp	r3, #2
 8001248:	d000      	beq.n	800124c <__aeabi_dmul+0x354>
 800124a:	e6ad      	b.n	8000fa8 <__aeabi_dmul+0xb0>
 800124c:	e6c3      	b.n	8000fd6 <__aeabi_dmul+0xde>
 800124e:	4a0d      	ldr	r2, [pc, #52]	; (8001284 <__aeabi_dmul+0x38c>)
 8001250:	2003      	movs	r0, #3
 8001252:	4694      	mov	ip, r2
 8001254:	4463      	add	r3, ip
 8001256:	464a      	mov	r2, r9
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	2303      	movs	r3, #3
 800125c:	431a      	orrs	r2, r3
 800125e:	4691      	mov	r9, r2
 8001260:	4652      	mov	r2, sl
 8001262:	e68c      	b.n	8000f7e <__aeabi_dmul+0x86>
 8001264:	220c      	movs	r2, #12
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	2303      	movs	r3, #3
 800126a:	0005      	movs	r5, r0
 800126c:	4691      	mov	r9, r2
 800126e:	469b      	mov	fp, r3
 8001270:	e666      	b.n	8000f40 <__aeabi_dmul+0x48>
 8001272:	2304      	movs	r3, #4
 8001274:	4699      	mov	r9, r3
 8001276:	2300      	movs	r3, #0
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	3301      	adds	r3, #1
 800127c:	2400      	movs	r4, #0
 800127e:	469b      	mov	fp, r3
 8001280:	e65e      	b.n	8000f40 <__aeabi_dmul+0x48>
 8001282:	46c0      	nop			; (mov r8, r8)
 8001284:	000007ff 	.word	0x000007ff
 8001288:	fffffc01 	.word	0xfffffc01
 800128c:	080057f8 	.word	0x080057f8
 8001290:	000003ff 	.word	0x000003ff
 8001294:	feffffff 	.word	0xfeffffff
 8001298:	000007fe 	.word	0x000007fe
 800129c:	fffffc0d 	.word	0xfffffc0d
 80012a0:	4649      	mov	r1, r9
 80012a2:	2301      	movs	r3, #1
 80012a4:	4319      	orrs	r1, r3
 80012a6:	4689      	mov	r9, r1
 80012a8:	2600      	movs	r6, #0
 80012aa:	2001      	movs	r0, #1
 80012ac:	e667      	b.n	8000f7e <__aeabi_dmul+0x86>
 80012ae:	2300      	movs	r3, #0
 80012b0:	2480      	movs	r4, #128	; 0x80
 80012b2:	2500      	movs	r5, #0
 80012b4:	4a43      	ldr	r2, [pc, #268]	; (80013c4 <__aeabi_dmul+0x4cc>)
 80012b6:	9301      	str	r3, [sp, #4]
 80012b8:	0324      	lsls	r4, r4, #12
 80012ba:	e67e      	b.n	8000fba <__aeabi_dmul+0xc2>
 80012bc:	2001      	movs	r0, #1
 80012be:	1a40      	subs	r0, r0, r1
 80012c0:	2838      	cmp	r0, #56	; 0x38
 80012c2:	dd00      	ble.n	80012c6 <__aeabi_dmul+0x3ce>
 80012c4:	e676      	b.n	8000fb4 <__aeabi_dmul+0xbc>
 80012c6:	281f      	cmp	r0, #31
 80012c8:	dd5b      	ble.n	8001382 <__aeabi_dmul+0x48a>
 80012ca:	221f      	movs	r2, #31
 80012cc:	0023      	movs	r3, r4
 80012ce:	4252      	negs	r2, r2
 80012d0:	1a51      	subs	r1, r2, r1
 80012d2:	40cb      	lsrs	r3, r1
 80012d4:	0019      	movs	r1, r3
 80012d6:	2820      	cmp	r0, #32
 80012d8:	d003      	beq.n	80012e2 <__aeabi_dmul+0x3ea>
 80012da:	4a3b      	ldr	r2, [pc, #236]	; (80013c8 <__aeabi_dmul+0x4d0>)
 80012dc:	4462      	add	r2, ip
 80012de:	4094      	lsls	r4, r2
 80012e0:	4325      	orrs	r5, r4
 80012e2:	1e6a      	subs	r2, r5, #1
 80012e4:	4195      	sbcs	r5, r2
 80012e6:	002a      	movs	r2, r5
 80012e8:	430a      	orrs	r2, r1
 80012ea:	2107      	movs	r1, #7
 80012ec:	000d      	movs	r5, r1
 80012ee:	2400      	movs	r4, #0
 80012f0:	4015      	ands	r5, r2
 80012f2:	4211      	tst	r1, r2
 80012f4:	d05b      	beq.n	80013ae <__aeabi_dmul+0x4b6>
 80012f6:	210f      	movs	r1, #15
 80012f8:	2400      	movs	r4, #0
 80012fa:	4011      	ands	r1, r2
 80012fc:	2904      	cmp	r1, #4
 80012fe:	d053      	beq.n	80013a8 <__aeabi_dmul+0x4b0>
 8001300:	1d11      	adds	r1, r2, #4
 8001302:	4291      	cmp	r1, r2
 8001304:	4192      	sbcs	r2, r2
 8001306:	4252      	negs	r2, r2
 8001308:	18a4      	adds	r4, r4, r2
 800130a:	000a      	movs	r2, r1
 800130c:	0223      	lsls	r3, r4, #8
 800130e:	d54b      	bpl.n	80013a8 <__aeabi_dmul+0x4b0>
 8001310:	2201      	movs	r2, #1
 8001312:	2400      	movs	r4, #0
 8001314:	2500      	movs	r5, #0
 8001316:	e650      	b.n	8000fba <__aeabi_dmul+0xc2>
 8001318:	2380      	movs	r3, #128	; 0x80
 800131a:	031b      	lsls	r3, r3, #12
 800131c:	421c      	tst	r4, r3
 800131e:	d009      	beq.n	8001334 <__aeabi_dmul+0x43c>
 8001320:	421e      	tst	r6, r3
 8001322:	d107      	bne.n	8001334 <__aeabi_dmul+0x43c>
 8001324:	4333      	orrs	r3, r6
 8001326:	031c      	lsls	r4, r3, #12
 8001328:	4643      	mov	r3, r8
 800132a:	0015      	movs	r5, r2
 800132c:	0b24      	lsrs	r4, r4, #12
 800132e:	4a25      	ldr	r2, [pc, #148]	; (80013c4 <__aeabi_dmul+0x4cc>)
 8001330:	9301      	str	r3, [sp, #4]
 8001332:	e642      	b.n	8000fba <__aeabi_dmul+0xc2>
 8001334:	2280      	movs	r2, #128	; 0x80
 8001336:	0312      	lsls	r2, r2, #12
 8001338:	4314      	orrs	r4, r2
 800133a:	0324      	lsls	r4, r4, #12
 800133c:	4a21      	ldr	r2, [pc, #132]	; (80013c4 <__aeabi_dmul+0x4cc>)
 800133e:	0b24      	lsrs	r4, r4, #12
 8001340:	9701      	str	r7, [sp, #4]
 8001342:	e63a      	b.n	8000fba <__aeabi_dmul+0xc2>
 8001344:	f000 fccc 	bl	8001ce0 <__clzsi2>
 8001348:	0001      	movs	r1, r0
 800134a:	0002      	movs	r2, r0
 800134c:	3115      	adds	r1, #21
 800134e:	3220      	adds	r2, #32
 8001350:	291c      	cmp	r1, #28
 8001352:	dc00      	bgt.n	8001356 <__aeabi_dmul+0x45e>
 8001354:	e74b      	b.n	80011ee <__aeabi_dmul+0x2f6>
 8001356:	0034      	movs	r4, r6
 8001358:	3808      	subs	r0, #8
 800135a:	2500      	movs	r5, #0
 800135c:	4084      	lsls	r4, r0
 800135e:	e750      	b.n	8001202 <__aeabi_dmul+0x30a>
 8001360:	f000 fcbe 	bl	8001ce0 <__clzsi2>
 8001364:	0003      	movs	r3, r0
 8001366:	001a      	movs	r2, r3
 8001368:	3215      	adds	r2, #21
 800136a:	3020      	adds	r0, #32
 800136c:	2a1c      	cmp	r2, #28
 800136e:	dc00      	bgt.n	8001372 <__aeabi_dmul+0x47a>
 8001370:	e71e      	b.n	80011b0 <__aeabi_dmul+0x2b8>
 8001372:	4656      	mov	r6, sl
 8001374:	3b08      	subs	r3, #8
 8001376:	2200      	movs	r2, #0
 8001378:	409e      	lsls	r6, r3
 800137a:	e723      	b.n	80011c4 <__aeabi_dmul+0x2cc>
 800137c:	9b00      	ldr	r3, [sp, #0]
 800137e:	469c      	mov	ip, r3
 8001380:	e6e6      	b.n	8001150 <__aeabi_dmul+0x258>
 8001382:	4912      	ldr	r1, [pc, #72]	; (80013cc <__aeabi_dmul+0x4d4>)
 8001384:	0022      	movs	r2, r4
 8001386:	4461      	add	r1, ip
 8001388:	002e      	movs	r6, r5
 800138a:	408d      	lsls	r5, r1
 800138c:	408a      	lsls	r2, r1
 800138e:	40c6      	lsrs	r6, r0
 8001390:	1e69      	subs	r1, r5, #1
 8001392:	418d      	sbcs	r5, r1
 8001394:	4332      	orrs	r2, r6
 8001396:	432a      	orrs	r2, r5
 8001398:	40c4      	lsrs	r4, r0
 800139a:	0753      	lsls	r3, r2, #29
 800139c:	d0b6      	beq.n	800130c <__aeabi_dmul+0x414>
 800139e:	210f      	movs	r1, #15
 80013a0:	4011      	ands	r1, r2
 80013a2:	2904      	cmp	r1, #4
 80013a4:	d1ac      	bne.n	8001300 <__aeabi_dmul+0x408>
 80013a6:	e7b1      	b.n	800130c <__aeabi_dmul+0x414>
 80013a8:	0765      	lsls	r5, r4, #29
 80013aa:	0264      	lsls	r4, r4, #9
 80013ac:	0b24      	lsrs	r4, r4, #12
 80013ae:	08d2      	lsrs	r2, r2, #3
 80013b0:	4315      	orrs	r5, r2
 80013b2:	2200      	movs	r2, #0
 80013b4:	e601      	b.n	8000fba <__aeabi_dmul+0xc2>
 80013b6:	2280      	movs	r2, #128	; 0x80
 80013b8:	0312      	lsls	r2, r2, #12
 80013ba:	4314      	orrs	r4, r2
 80013bc:	0324      	lsls	r4, r4, #12
 80013be:	4a01      	ldr	r2, [pc, #4]	; (80013c4 <__aeabi_dmul+0x4cc>)
 80013c0:	0b24      	lsrs	r4, r4, #12
 80013c2:	e5fa      	b.n	8000fba <__aeabi_dmul+0xc2>
 80013c4:	000007ff 	.word	0x000007ff
 80013c8:	0000043e 	.word	0x0000043e
 80013cc:	0000041e 	.word	0x0000041e

080013d0 <__aeabi_dsub>:
 80013d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013d2:	4657      	mov	r7, sl
 80013d4:	464e      	mov	r6, r9
 80013d6:	4645      	mov	r5, r8
 80013d8:	46de      	mov	lr, fp
 80013da:	b5e0      	push	{r5, r6, r7, lr}
 80013dc:	001e      	movs	r6, r3
 80013de:	0017      	movs	r7, r2
 80013e0:	004a      	lsls	r2, r1, #1
 80013e2:	030b      	lsls	r3, r1, #12
 80013e4:	0d52      	lsrs	r2, r2, #21
 80013e6:	0a5b      	lsrs	r3, r3, #9
 80013e8:	4690      	mov	r8, r2
 80013ea:	0f42      	lsrs	r2, r0, #29
 80013ec:	431a      	orrs	r2, r3
 80013ee:	0fcd      	lsrs	r5, r1, #31
 80013f0:	4ccd      	ldr	r4, [pc, #820]	; (8001728 <__aeabi_dsub+0x358>)
 80013f2:	0331      	lsls	r1, r6, #12
 80013f4:	00c3      	lsls	r3, r0, #3
 80013f6:	4694      	mov	ip, r2
 80013f8:	0070      	lsls	r0, r6, #1
 80013fa:	0f7a      	lsrs	r2, r7, #29
 80013fc:	0a49      	lsrs	r1, r1, #9
 80013fe:	00ff      	lsls	r7, r7, #3
 8001400:	469a      	mov	sl, r3
 8001402:	46b9      	mov	r9, r7
 8001404:	0d40      	lsrs	r0, r0, #21
 8001406:	0ff6      	lsrs	r6, r6, #31
 8001408:	4311      	orrs	r1, r2
 800140a:	42a0      	cmp	r0, r4
 800140c:	d100      	bne.n	8001410 <__aeabi_dsub+0x40>
 800140e:	e0b1      	b.n	8001574 <__aeabi_dsub+0x1a4>
 8001410:	2201      	movs	r2, #1
 8001412:	4056      	eors	r6, r2
 8001414:	46b3      	mov	fp, r6
 8001416:	42b5      	cmp	r5, r6
 8001418:	d100      	bne.n	800141c <__aeabi_dsub+0x4c>
 800141a:	e088      	b.n	800152e <__aeabi_dsub+0x15e>
 800141c:	4642      	mov	r2, r8
 800141e:	1a12      	subs	r2, r2, r0
 8001420:	2a00      	cmp	r2, #0
 8001422:	dc00      	bgt.n	8001426 <__aeabi_dsub+0x56>
 8001424:	e0ae      	b.n	8001584 <__aeabi_dsub+0x1b4>
 8001426:	2800      	cmp	r0, #0
 8001428:	d100      	bne.n	800142c <__aeabi_dsub+0x5c>
 800142a:	e0c1      	b.n	80015b0 <__aeabi_dsub+0x1e0>
 800142c:	48be      	ldr	r0, [pc, #760]	; (8001728 <__aeabi_dsub+0x358>)
 800142e:	4580      	cmp	r8, r0
 8001430:	d100      	bne.n	8001434 <__aeabi_dsub+0x64>
 8001432:	e151      	b.n	80016d8 <__aeabi_dsub+0x308>
 8001434:	2080      	movs	r0, #128	; 0x80
 8001436:	0400      	lsls	r0, r0, #16
 8001438:	4301      	orrs	r1, r0
 800143a:	2a38      	cmp	r2, #56	; 0x38
 800143c:	dd00      	ble.n	8001440 <__aeabi_dsub+0x70>
 800143e:	e17b      	b.n	8001738 <__aeabi_dsub+0x368>
 8001440:	2a1f      	cmp	r2, #31
 8001442:	dd00      	ble.n	8001446 <__aeabi_dsub+0x76>
 8001444:	e1ee      	b.n	8001824 <__aeabi_dsub+0x454>
 8001446:	2020      	movs	r0, #32
 8001448:	003e      	movs	r6, r7
 800144a:	1a80      	subs	r0, r0, r2
 800144c:	000c      	movs	r4, r1
 800144e:	40d6      	lsrs	r6, r2
 8001450:	40d1      	lsrs	r1, r2
 8001452:	4087      	lsls	r7, r0
 8001454:	4662      	mov	r2, ip
 8001456:	4084      	lsls	r4, r0
 8001458:	1a52      	subs	r2, r2, r1
 800145a:	1e78      	subs	r0, r7, #1
 800145c:	4187      	sbcs	r7, r0
 800145e:	4694      	mov	ip, r2
 8001460:	4334      	orrs	r4, r6
 8001462:	4327      	orrs	r7, r4
 8001464:	1bdc      	subs	r4, r3, r7
 8001466:	42a3      	cmp	r3, r4
 8001468:	419b      	sbcs	r3, r3
 800146a:	4662      	mov	r2, ip
 800146c:	425b      	negs	r3, r3
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	4699      	mov	r9, r3
 8001472:	464b      	mov	r3, r9
 8001474:	021b      	lsls	r3, r3, #8
 8001476:	d400      	bmi.n	800147a <__aeabi_dsub+0xaa>
 8001478:	e118      	b.n	80016ac <__aeabi_dsub+0x2dc>
 800147a:	464b      	mov	r3, r9
 800147c:	0258      	lsls	r0, r3, #9
 800147e:	0a43      	lsrs	r3, r0, #9
 8001480:	4699      	mov	r9, r3
 8001482:	464b      	mov	r3, r9
 8001484:	2b00      	cmp	r3, #0
 8001486:	d100      	bne.n	800148a <__aeabi_dsub+0xba>
 8001488:	e137      	b.n	80016fa <__aeabi_dsub+0x32a>
 800148a:	4648      	mov	r0, r9
 800148c:	f000 fc28 	bl	8001ce0 <__clzsi2>
 8001490:	0001      	movs	r1, r0
 8001492:	3908      	subs	r1, #8
 8001494:	2320      	movs	r3, #32
 8001496:	0022      	movs	r2, r4
 8001498:	4648      	mov	r0, r9
 800149a:	1a5b      	subs	r3, r3, r1
 800149c:	40da      	lsrs	r2, r3
 800149e:	4088      	lsls	r0, r1
 80014a0:	408c      	lsls	r4, r1
 80014a2:	4643      	mov	r3, r8
 80014a4:	4310      	orrs	r0, r2
 80014a6:	4588      	cmp	r8, r1
 80014a8:	dd00      	ble.n	80014ac <__aeabi_dsub+0xdc>
 80014aa:	e136      	b.n	800171a <__aeabi_dsub+0x34a>
 80014ac:	1ac9      	subs	r1, r1, r3
 80014ae:	1c4b      	adds	r3, r1, #1
 80014b0:	2b1f      	cmp	r3, #31
 80014b2:	dd00      	ble.n	80014b6 <__aeabi_dsub+0xe6>
 80014b4:	e0ea      	b.n	800168c <__aeabi_dsub+0x2bc>
 80014b6:	2220      	movs	r2, #32
 80014b8:	0026      	movs	r6, r4
 80014ba:	1ad2      	subs	r2, r2, r3
 80014bc:	0001      	movs	r1, r0
 80014be:	4094      	lsls	r4, r2
 80014c0:	40de      	lsrs	r6, r3
 80014c2:	40d8      	lsrs	r0, r3
 80014c4:	2300      	movs	r3, #0
 80014c6:	4091      	lsls	r1, r2
 80014c8:	1e62      	subs	r2, r4, #1
 80014ca:	4194      	sbcs	r4, r2
 80014cc:	4681      	mov	r9, r0
 80014ce:	4698      	mov	r8, r3
 80014d0:	4331      	orrs	r1, r6
 80014d2:	430c      	orrs	r4, r1
 80014d4:	0763      	lsls	r3, r4, #29
 80014d6:	d009      	beq.n	80014ec <__aeabi_dsub+0x11c>
 80014d8:	230f      	movs	r3, #15
 80014da:	4023      	ands	r3, r4
 80014dc:	2b04      	cmp	r3, #4
 80014de:	d005      	beq.n	80014ec <__aeabi_dsub+0x11c>
 80014e0:	1d23      	adds	r3, r4, #4
 80014e2:	42a3      	cmp	r3, r4
 80014e4:	41a4      	sbcs	r4, r4
 80014e6:	4264      	negs	r4, r4
 80014e8:	44a1      	add	r9, r4
 80014ea:	001c      	movs	r4, r3
 80014ec:	464b      	mov	r3, r9
 80014ee:	021b      	lsls	r3, r3, #8
 80014f0:	d400      	bmi.n	80014f4 <__aeabi_dsub+0x124>
 80014f2:	e0de      	b.n	80016b2 <__aeabi_dsub+0x2e2>
 80014f4:	4641      	mov	r1, r8
 80014f6:	4b8c      	ldr	r3, [pc, #560]	; (8001728 <__aeabi_dsub+0x358>)
 80014f8:	3101      	adds	r1, #1
 80014fa:	4299      	cmp	r1, r3
 80014fc:	d100      	bne.n	8001500 <__aeabi_dsub+0x130>
 80014fe:	e0e7      	b.n	80016d0 <__aeabi_dsub+0x300>
 8001500:	464b      	mov	r3, r9
 8001502:	488a      	ldr	r0, [pc, #552]	; (800172c <__aeabi_dsub+0x35c>)
 8001504:	08e4      	lsrs	r4, r4, #3
 8001506:	4003      	ands	r3, r0
 8001508:	0018      	movs	r0, r3
 800150a:	0549      	lsls	r1, r1, #21
 800150c:	075b      	lsls	r3, r3, #29
 800150e:	0240      	lsls	r0, r0, #9
 8001510:	4323      	orrs	r3, r4
 8001512:	0d4a      	lsrs	r2, r1, #21
 8001514:	0b04      	lsrs	r4, r0, #12
 8001516:	0512      	lsls	r2, r2, #20
 8001518:	07ed      	lsls	r5, r5, #31
 800151a:	4322      	orrs	r2, r4
 800151c:	432a      	orrs	r2, r5
 800151e:	0018      	movs	r0, r3
 8001520:	0011      	movs	r1, r2
 8001522:	bcf0      	pop	{r4, r5, r6, r7}
 8001524:	46bb      	mov	fp, r7
 8001526:	46b2      	mov	sl, r6
 8001528:	46a9      	mov	r9, r5
 800152a:	46a0      	mov	r8, r4
 800152c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800152e:	4642      	mov	r2, r8
 8001530:	1a12      	subs	r2, r2, r0
 8001532:	2a00      	cmp	r2, #0
 8001534:	dd52      	ble.n	80015dc <__aeabi_dsub+0x20c>
 8001536:	2800      	cmp	r0, #0
 8001538:	d100      	bne.n	800153c <__aeabi_dsub+0x16c>
 800153a:	e09c      	b.n	8001676 <__aeabi_dsub+0x2a6>
 800153c:	45a0      	cmp	r8, r4
 800153e:	d100      	bne.n	8001542 <__aeabi_dsub+0x172>
 8001540:	e0ca      	b.n	80016d8 <__aeabi_dsub+0x308>
 8001542:	2080      	movs	r0, #128	; 0x80
 8001544:	0400      	lsls	r0, r0, #16
 8001546:	4301      	orrs	r1, r0
 8001548:	2a38      	cmp	r2, #56	; 0x38
 800154a:	dd00      	ble.n	800154e <__aeabi_dsub+0x17e>
 800154c:	e149      	b.n	80017e2 <__aeabi_dsub+0x412>
 800154e:	2a1f      	cmp	r2, #31
 8001550:	dc00      	bgt.n	8001554 <__aeabi_dsub+0x184>
 8001552:	e197      	b.n	8001884 <__aeabi_dsub+0x4b4>
 8001554:	0010      	movs	r0, r2
 8001556:	000e      	movs	r6, r1
 8001558:	3820      	subs	r0, #32
 800155a:	40c6      	lsrs	r6, r0
 800155c:	2a20      	cmp	r2, #32
 800155e:	d004      	beq.n	800156a <__aeabi_dsub+0x19a>
 8001560:	2040      	movs	r0, #64	; 0x40
 8001562:	1a82      	subs	r2, r0, r2
 8001564:	4091      	lsls	r1, r2
 8001566:	430f      	orrs	r7, r1
 8001568:	46b9      	mov	r9, r7
 800156a:	464c      	mov	r4, r9
 800156c:	1e62      	subs	r2, r4, #1
 800156e:	4194      	sbcs	r4, r2
 8001570:	4334      	orrs	r4, r6
 8001572:	e13a      	b.n	80017ea <__aeabi_dsub+0x41a>
 8001574:	000a      	movs	r2, r1
 8001576:	433a      	orrs	r2, r7
 8001578:	d028      	beq.n	80015cc <__aeabi_dsub+0x1fc>
 800157a:	46b3      	mov	fp, r6
 800157c:	42b5      	cmp	r5, r6
 800157e:	d02b      	beq.n	80015d8 <__aeabi_dsub+0x208>
 8001580:	4a6b      	ldr	r2, [pc, #428]	; (8001730 <__aeabi_dsub+0x360>)
 8001582:	4442      	add	r2, r8
 8001584:	2a00      	cmp	r2, #0
 8001586:	d05d      	beq.n	8001644 <__aeabi_dsub+0x274>
 8001588:	4642      	mov	r2, r8
 800158a:	4644      	mov	r4, r8
 800158c:	1a82      	subs	r2, r0, r2
 800158e:	2c00      	cmp	r4, #0
 8001590:	d000      	beq.n	8001594 <__aeabi_dsub+0x1c4>
 8001592:	e0f5      	b.n	8001780 <__aeabi_dsub+0x3b0>
 8001594:	4665      	mov	r5, ip
 8001596:	431d      	orrs	r5, r3
 8001598:	d100      	bne.n	800159c <__aeabi_dsub+0x1cc>
 800159a:	e19c      	b.n	80018d6 <__aeabi_dsub+0x506>
 800159c:	1e55      	subs	r5, r2, #1
 800159e:	2a01      	cmp	r2, #1
 80015a0:	d100      	bne.n	80015a4 <__aeabi_dsub+0x1d4>
 80015a2:	e1fb      	b.n	800199c <__aeabi_dsub+0x5cc>
 80015a4:	4c60      	ldr	r4, [pc, #384]	; (8001728 <__aeabi_dsub+0x358>)
 80015a6:	42a2      	cmp	r2, r4
 80015a8:	d100      	bne.n	80015ac <__aeabi_dsub+0x1dc>
 80015aa:	e1bd      	b.n	8001928 <__aeabi_dsub+0x558>
 80015ac:	002a      	movs	r2, r5
 80015ae:	e0f0      	b.n	8001792 <__aeabi_dsub+0x3c2>
 80015b0:	0008      	movs	r0, r1
 80015b2:	4338      	orrs	r0, r7
 80015b4:	d100      	bne.n	80015b8 <__aeabi_dsub+0x1e8>
 80015b6:	e0c3      	b.n	8001740 <__aeabi_dsub+0x370>
 80015b8:	1e50      	subs	r0, r2, #1
 80015ba:	2a01      	cmp	r2, #1
 80015bc:	d100      	bne.n	80015c0 <__aeabi_dsub+0x1f0>
 80015be:	e1a8      	b.n	8001912 <__aeabi_dsub+0x542>
 80015c0:	4c59      	ldr	r4, [pc, #356]	; (8001728 <__aeabi_dsub+0x358>)
 80015c2:	42a2      	cmp	r2, r4
 80015c4:	d100      	bne.n	80015c8 <__aeabi_dsub+0x1f8>
 80015c6:	e087      	b.n	80016d8 <__aeabi_dsub+0x308>
 80015c8:	0002      	movs	r2, r0
 80015ca:	e736      	b.n	800143a <__aeabi_dsub+0x6a>
 80015cc:	2201      	movs	r2, #1
 80015ce:	4056      	eors	r6, r2
 80015d0:	46b3      	mov	fp, r6
 80015d2:	42b5      	cmp	r5, r6
 80015d4:	d000      	beq.n	80015d8 <__aeabi_dsub+0x208>
 80015d6:	e721      	b.n	800141c <__aeabi_dsub+0x4c>
 80015d8:	4a55      	ldr	r2, [pc, #340]	; (8001730 <__aeabi_dsub+0x360>)
 80015da:	4442      	add	r2, r8
 80015dc:	2a00      	cmp	r2, #0
 80015de:	d100      	bne.n	80015e2 <__aeabi_dsub+0x212>
 80015e0:	e0b5      	b.n	800174e <__aeabi_dsub+0x37e>
 80015e2:	4642      	mov	r2, r8
 80015e4:	4644      	mov	r4, r8
 80015e6:	1a82      	subs	r2, r0, r2
 80015e8:	2c00      	cmp	r4, #0
 80015ea:	d100      	bne.n	80015ee <__aeabi_dsub+0x21e>
 80015ec:	e138      	b.n	8001860 <__aeabi_dsub+0x490>
 80015ee:	4e4e      	ldr	r6, [pc, #312]	; (8001728 <__aeabi_dsub+0x358>)
 80015f0:	42b0      	cmp	r0, r6
 80015f2:	d100      	bne.n	80015f6 <__aeabi_dsub+0x226>
 80015f4:	e1de      	b.n	80019b4 <__aeabi_dsub+0x5e4>
 80015f6:	2680      	movs	r6, #128	; 0x80
 80015f8:	4664      	mov	r4, ip
 80015fa:	0436      	lsls	r6, r6, #16
 80015fc:	4334      	orrs	r4, r6
 80015fe:	46a4      	mov	ip, r4
 8001600:	2a38      	cmp	r2, #56	; 0x38
 8001602:	dd00      	ble.n	8001606 <__aeabi_dsub+0x236>
 8001604:	e196      	b.n	8001934 <__aeabi_dsub+0x564>
 8001606:	2a1f      	cmp	r2, #31
 8001608:	dd00      	ble.n	800160c <__aeabi_dsub+0x23c>
 800160a:	e224      	b.n	8001a56 <__aeabi_dsub+0x686>
 800160c:	2620      	movs	r6, #32
 800160e:	1ab4      	subs	r4, r6, r2
 8001610:	46a2      	mov	sl, r4
 8001612:	4664      	mov	r4, ip
 8001614:	4656      	mov	r6, sl
 8001616:	40b4      	lsls	r4, r6
 8001618:	46a1      	mov	r9, r4
 800161a:	001c      	movs	r4, r3
 800161c:	464e      	mov	r6, r9
 800161e:	40d4      	lsrs	r4, r2
 8001620:	4326      	orrs	r6, r4
 8001622:	0034      	movs	r4, r6
 8001624:	4656      	mov	r6, sl
 8001626:	40b3      	lsls	r3, r6
 8001628:	1e5e      	subs	r6, r3, #1
 800162a:	41b3      	sbcs	r3, r6
 800162c:	431c      	orrs	r4, r3
 800162e:	4663      	mov	r3, ip
 8001630:	40d3      	lsrs	r3, r2
 8001632:	18c9      	adds	r1, r1, r3
 8001634:	19e4      	adds	r4, r4, r7
 8001636:	42bc      	cmp	r4, r7
 8001638:	41bf      	sbcs	r7, r7
 800163a:	427f      	negs	r7, r7
 800163c:	46b9      	mov	r9, r7
 800163e:	4680      	mov	r8, r0
 8001640:	4489      	add	r9, r1
 8001642:	e0d8      	b.n	80017f6 <__aeabi_dsub+0x426>
 8001644:	4640      	mov	r0, r8
 8001646:	4c3b      	ldr	r4, [pc, #236]	; (8001734 <__aeabi_dsub+0x364>)
 8001648:	3001      	adds	r0, #1
 800164a:	4220      	tst	r0, r4
 800164c:	d000      	beq.n	8001650 <__aeabi_dsub+0x280>
 800164e:	e0b4      	b.n	80017ba <__aeabi_dsub+0x3ea>
 8001650:	4640      	mov	r0, r8
 8001652:	2800      	cmp	r0, #0
 8001654:	d000      	beq.n	8001658 <__aeabi_dsub+0x288>
 8001656:	e144      	b.n	80018e2 <__aeabi_dsub+0x512>
 8001658:	4660      	mov	r0, ip
 800165a:	4318      	orrs	r0, r3
 800165c:	d100      	bne.n	8001660 <__aeabi_dsub+0x290>
 800165e:	e190      	b.n	8001982 <__aeabi_dsub+0x5b2>
 8001660:	0008      	movs	r0, r1
 8001662:	4338      	orrs	r0, r7
 8001664:	d000      	beq.n	8001668 <__aeabi_dsub+0x298>
 8001666:	e1aa      	b.n	80019be <__aeabi_dsub+0x5ee>
 8001668:	4661      	mov	r1, ip
 800166a:	08db      	lsrs	r3, r3, #3
 800166c:	0749      	lsls	r1, r1, #29
 800166e:	430b      	orrs	r3, r1
 8001670:	4661      	mov	r1, ip
 8001672:	08cc      	lsrs	r4, r1, #3
 8001674:	e027      	b.n	80016c6 <__aeabi_dsub+0x2f6>
 8001676:	0008      	movs	r0, r1
 8001678:	4338      	orrs	r0, r7
 800167a:	d061      	beq.n	8001740 <__aeabi_dsub+0x370>
 800167c:	1e50      	subs	r0, r2, #1
 800167e:	2a01      	cmp	r2, #1
 8001680:	d100      	bne.n	8001684 <__aeabi_dsub+0x2b4>
 8001682:	e139      	b.n	80018f8 <__aeabi_dsub+0x528>
 8001684:	42a2      	cmp	r2, r4
 8001686:	d027      	beq.n	80016d8 <__aeabi_dsub+0x308>
 8001688:	0002      	movs	r2, r0
 800168a:	e75d      	b.n	8001548 <__aeabi_dsub+0x178>
 800168c:	0002      	movs	r2, r0
 800168e:	391f      	subs	r1, #31
 8001690:	40ca      	lsrs	r2, r1
 8001692:	0011      	movs	r1, r2
 8001694:	2b20      	cmp	r3, #32
 8001696:	d003      	beq.n	80016a0 <__aeabi_dsub+0x2d0>
 8001698:	2240      	movs	r2, #64	; 0x40
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	4098      	lsls	r0, r3
 800169e:	4304      	orrs	r4, r0
 80016a0:	1e63      	subs	r3, r4, #1
 80016a2:	419c      	sbcs	r4, r3
 80016a4:	2300      	movs	r3, #0
 80016a6:	4699      	mov	r9, r3
 80016a8:	4698      	mov	r8, r3
 80016aa:	430c      	orrs	r4, r1
 80016ac:	0763      	lsls	r3, r4, #29
 80016ae:	d000      	beq.n	80016b2 <__aeabi_dsub+0x2e2>
 80016b0:	e712      	b.n	80014d8 <__aeabi_dsub+0x108>
 80016b2:	464b      	mov	r3, r9
 80016b4:	464a      	mov	r2, r9
 80016b6:	08e4      	lsrs	r4, r4, #3
 80016b8:	075b      	lsls	r3, r3, #29
 80016ba:	4323      	orrs	r3, r4
 80016bc:	08d4      	lsrs	r4, r2, #3
 80016be:	4642      	mov	r2, r8
 80016c0:	4919      	ldr	r1, [pc, #100]	; (8001728 <__aeabi_dsub+0x358>)
 80016c2:	428a      	cmp	r2, r1
 80016c4:	d00e      	beq.n	80016e4 <__aeabi_dsub+0x314>
 80016c6:	0324      	lsls	r4, r4, #12
 80016c8:	0552      	lsls	r2, r2, #21
 80016ca:	0b24      	lsrs	r4, r4, #12
 80016cc:	0d52      	lsrs	r2, r2, #21
 80016ce:	e722      	b.n	8001516 <__aeabi_dsub+0x146>
 80016d0:	000a      	movs	r2, r1
 80016d2:	2400      	movs	r4, #0
 80016d4:	2300      	movs	r3, #0
 80016d6:	e71e      	b.n	8001516 <__aeabi_dsub+0x146>
 80016d8:	08db      	lsrs	r3, r3, #3
 80016da:	4662      	mov	r2, ip
 80016dc:	0752      	lsls	r2, r2, #29
 80016de:	4313      	orrs	r3, r2
 80016e0:	4662      	mov	r2, ip
 80016e2:	08d4      	lsrs	r4, r2, #3
 80016e4:	001a      	movs	r2, r3
 80016e6:	4322      	orrs	r2, r4
 80016e8:	d100      	bne.n	80016ec <__aeabi_dsub+0x31c>
 80016ea:	e1fc      	b.n	8001ae6 <__aeabi_dsub+0x716>
 80016ec:	2280      	movs	r2, #128	; 0x80
 80016ee:	0312      	lsls	r2, r2, #12
 80016f0:	4314      	orrs	r4, r2
 80016f2:	0324      	lsls	r4, r4, #12
 80016f4:	4a0c      	ldr	r2, [pc, #48]	; (8001728 <__aeabi_dsub+0x358>)
 80016f6:	0b24      	lsrs	r4, r4, #12
 80016f8:	e70d      	b.n	8001516 <__aeabi_dsub+0x146>
 80016fa:	0020      	movs	r0, r4
 80016fc:	f000 faf0 	bl	8001ce0 <__clzsi2>
 8001700:	0001      	movs	r1, r0
 8001702:	3118      	adds	r1, #24
 8001704:	291f      	cmp	r1, #31
 8001706:	dc00      	bgt.n	800170a <__aeabi_dsub+0x33a>
 8001708:	e6c4      	b.n	8001494 <__aeabi_dsub+0xc4>
 800170a:	3808      	subs	r0, #8
 800170c:	4084      	lsls	r4, r0
 800170e:	4643      	mov	r3, r8
 8001710:	0020      	movs	r0, r4
 8001712:	2400      	movs	r4, #0
 8001714:	4588      	cmp	r8, r1
 8001716:	dc00      	bgt.n	800171a <__aeabi_dsub+0x34a>
 8001718:	e6c8      	b.n	80014ac <__aeabi_dsub+0xdc>
 800171a:	4a04      	ldr	r2, [pc, #16]	; (800172c <__aeabi_dsub+0x35c>)
 800171c:	1a5b      	subs	r3, r3, r1
 800171e:	4010      	ands	r0, r2
 8001720:	4698      	mov	r8, r3
 8001722:	4681      	mov	r9, r0
 8001724:	e6d6      	b.n	80014d4 <__aeabi_dsub+0x104>
 8001726:	46c0      	nop			; (mov r8, r8)
 8001728:	000007ff 	.word	0x000007ff
 800172c:	ff7fffff 	.word	0xff7fffff
 8001730:	fffff801 	.word	0xfffff801
 8001734:	000007fe 	.word	0x000007fe
 8001738:	430f      	orrs	r7, r1
 800173a:	1e7a      	subs	r2, r7, #1
 800173c:	4197      	sbcs	r7, r2
 800173e:	e691      	b.n	8001464 <__aeabi_dsub+0x94>
 8001740:	4661      	mov	r1, ip
 8001742:	08db      	lsrs	r3, r3, #3
 8001744:	0749      	lsls	r1, r1, #29
 8001746:	430b      	orrs	r3, r1
 8001748:	4661      	mov	r1, ip
 800174a:	08cc      	lsrs	r4, r1, #3
 800174c:	e7b8      	b.n	80016c0 <__aeabi_dsub+0x2f0>
 800174e:	4640      	mov	r0, r8
 8001750:	4cd3      	ldr	r4, [pc, #844]	; (8001aa0 <__aeabi_dsub+0x6d0>)
 8001752:	3001      	adds	r0, #1
 8001754:	4220      	tst	r0, r4
 8001756:	d000      	beq.n	800175a <__aeabi_dsub+0x38a>
 8001758:	e0a2      	b.n	80018a0 <__aeabi_dsub+0x4d0>
 800175a:	4640      	mov	r0, r8
 800175c:	2800      	cmp	r0, #0
 800175e:	d000      	beq.n	8001762 <__aeabi_dsub+0x392>
 8001760:	e101      	b.n	8001966 <__aeabi_dsub+0x596>
 8001762:	4660      	mov	r0, ip
 8001764:	4318      	orrs	r0, r3
 8001766:	d100      	bne.n	800176a <__aeabi_dsub+0x39a>
 8001768:	e15e      	b.n	8001a28 <__aeabi_dsub+0x658>
 800176a:	0008      	movs	r0, r1
 800176c:	4338      	orrs	r0, r7
 800176e:	d000      	beq.n	8001772 <__aeabi_dsub+0x3a2>
 8001770:	e15f      	b.n	8001a32 <__aeabi_dsub+0x662>
 8001772:	4661      	mov	r1, ip
 8001774:	08db      	lsrs	r3, r3, #3
 8001776:	0749      	lsls	r1, r1, #29
 8001778:	430b      	orrs	r3, r1
 800177a:	4661      	mov	r1, ip
 800177c:	08cc      	lsrs	r4, r1, #3
 800177e:	e7a2      	b.n	80016c6 <__aeabi_dsub+0x2f6>
 8001780:	4dc8      	ldr	r5, [pc, #800]	; (8001aa4 <__aeabi_dsub+0x6d4>)
 8001782:	42a8      	cmp	r0, r5
 8001784:	d100      	bne.n	8001788 <__aeabi_dsub+0x3b8>
 8001786:	e0cf      	b.n	8001928 <__aeabi_dsub+0x558>
 8001788:	2580      	movs	r5, #128	; 0x80
 800178a:	4664      	mov	r4, ip
 800178c:	042d      	lsls	r5, r5, #16
 800178e:	432c      	orrs	r4, r5
 8001790:	46a4      	mov	ip, r4
 8001792:	2a38      	cmp	r2, #56	; 0x38
 8001794:	dc56      	bgt.n	8001844 <__aeabi_dsub+0x474>
 8001796:	2a1f      	cmp	r2, #31
 8001798:	dd00      	ble.n	800179c <__aeabi_dsub+0x3cc>
 800179a:	e0d1      	b.n	8001940 <__aeabi_dsub+0x570>
 800179c:	2520      	movs	r5, #32
 800179e:	001e      	movs	r6, r3
 80017a0:	1aad      	subs	r5, r5, r2
 80017a2:	4664      	mov	r4, ip
 80017a4:	40ab      	lsls	r3, r5
 80017a6:	40ac      	lsls	r4, r5
 80017a8:	40d6      	lsrs	r6, r2
 80017aa:	1e5d      	subs	r5, r3, #1
 80017ac:	41ab      	sbcs	r3, r5
 80017ae:	4334      	orrs	r4, r6
 80017b0:	4323      	orrs	r3, r4
 80017b2:	4664      	mov	r4, ip
 80017b4:	40d4      	lsrs	r4, r2
 80017b6:	1b09      	subs	r1, r1, r4
 80017b8:	e049      	b.n	800184e <__aeabi_dsub+0x47e>
 80017ba:	4660      	mov	r0, ip
 80017bc:	1bdc      	subs	r4, r3, r7
 80017be:	1a46      	subs	r6, r0, r1
 80017c0:	42a3      	cmp	r3, r4
 80017c2:	4180      	sbcs	r0, r0
 80017c4:	4240      	negs	r0, r0
 80017c6:	4681      	mov	r9, r0
 80017c8:	0030      	movs	r0, r6
 80017ca:	464e      	mov	r6, r9
 80017cc:	1b80      	subs	r0, r0, r6
 80017ce:	4681      	mov	r9, r0
 80017d0:	0200      	lsls	r0, r0, #8
 80017d2:	d476      	bmi.n	80018c2 <__aeabi_dsub+0x4f2>
 80017d4:	464b      	mov	r3, r9
 80017d6:	4323      	orrs	r3, r4
 80017d8:	d000      	beq.n	80017dc <__aeabi_dsub+0x40c>
 80017da:	e652      	b.n	8001482 <__aeabi_dsub+0xb2>
 80017dc:	2400      	movs	r4, #0
 80017de:	2500      	movs	r5, #0
 80017e0:	e771      	b.n	80016c6 <__aeabi_dsub+0x2f6>
 80017e2:	4339      	orrs	r1, r7
 80017e4:	000c      	movs	r4, r1
 80017e6:	1e62      	subs	r2, r4, #1
 80017e8:	4194      	sbcs	r4, r2
 80017ea:	18e4      	adds	r4, r4, r3
 80017ec:	429c      	cmp	r4, r3
 80017ee:	419b      	sbcs	r3, r3
 80017f0:	425b      	negs	r3, r3
 80017f2:	4463      	add	r3, ip
 80017f4:	4699      	mov	r9, r3
 80017f6:	464b      	mov	r3, r9
 80017f8:	021b      	lsls	r3, r3, #8
 80017fa:	d400      	bmi.n	80017fe <__aeabi_dsub+0x42e>
 80017fc:	e756      	b.n	80016ac <__aeabi_dsub+0x2dc>
 80017fe:	2301      	movs	r3, #1
 8001800:	469c      	mov	ip, r3
 8001802:	4ba8      	ldr	r3, [pc, #672]	; (8001aa4 <__aeabi_dsub+0x6d4>)
 8001804:	44e0      	add	r8, ip
 8001806:	4598      	cmp	r8, r3
 8001808:	d038      	beq.n	800187c <__aeabi_dsub+0x4ac>
 800180a:	464b      	mov	r3, r9
 800180c:	48a6      	ldr	r0, [pc, #664]	; (8001aa8 <__aeabi_dsub+0x6d8>)
 800180e:	2201      	movs	r2, #1
 8001810:	4003      	ands	r3, r0
 8001812:	0018      	movs	r0, r3
 8001814:	0863      	lsrs	r3, r4, #1
 8001816:	4014      	ands	r4, r2
 8001818:	431c      	orrs	r4, r3
 800181a:	07c3      	lsls	r3, r0, #31
 800181c:	431c      	orrs	r4, r3
 800181e:	0843      	lsrs	r3, r0, #1
 8001820:	4699      	mov	r9, r3
 8001822:	e657      	b.n	80014d4 <__aeabi_dsub+0x104>
 8001824:	0010      	movs	r0, r2
 8001826:	000e      	movs	r6, r1
 8001828:	3820      	subs	r0, #32
 800182a:	40c6      	lsrs	r6, r0
 800182c:	2a20      	cmp	r2, #32
 800182e:	d004      	beq.n	800183a <__aeabi_dsub+0x46a>
 8001830:	2040      	movs	r0, #64	; 0x40
 8001832:	1a82      	subs	r2, r0, r2
 8001834:	4091      	lsls	r1, r2
 8001836:	430f      	orrs	r7, r1
 8001838:	46b9      	mov	r9, r7
 800183a:	464f      	mov	r7, r9
 800183c:	1e7a      	subs	r2, r7, #1
 800183e:	4197      	sbcs	r7, r2
 8001840:	4337      	orrs	r7, r6
 8001842:	e60f      	b.n	8001464 <__aeabi_dsub+0x94>
 8001844:	4662      	mov	r2, ip
 8001846:	431a      	orrs	r2, r3
 8001848:	0013      	movs	r3, r2
 800184a:	1e5a      	subs	r2, r3, #1
 800184c:	4193      	sbcs	r3, r2
 800184e:	1afc      	subs	r4, r7, r3
 8001850:	42a7      	cmp	r7, r4
 8001852:	41bf      	sbcs	r7, r7
 8001854:	427f      	negs	r7, r7
 8001856:	1bcb      	subs	r3, r1, r7
 8001858:	4699      	mov	r9, r3
 800185a:	465d      	mov	r5, fp
 800185c:	4680      	mov	r8, r0
 800185e:	e608      	b.n	8001472 <__aeabi_dsub+0xa2>
 8001860:	4666      	mov	r6, ip
 8001862:	431e      	orrs	r6, r3
 8001864:	d100      	bne.n	8001868 <__aeabi_dsub+0x498>
 8001866:	e0be      	b.n	80019e6 <__aeabi_dsub+0x616>
 8001868:	1e56      	subs	r6, r2, #1
 800186a:	2a01      	cmp	r2, #1
 800186c:	d100      	bne.n	8001870 <__aeabi_dsub+0x4a0>
 800186e:	e109      	b.n	8001a84 <__aeabi_dsub+0x6b4>
 8001870:	4c8c      	ldr	r4, [pc, #560]	; (8001aa4 <__aeabi_dsub+0x6d4>)
 8001872:	42a2      	cmp	r2, r4
 8001874:	d100      	bne.n	8001878 <__aeabi_dsub+0x4a8>
 8001876:	e119      	b.n	8001aac <__aeabi_dsub+0x6dc>
 8001878:	0032      	movs	r2, r6
 800187a:	e6c1      	b.n	8001600 <__aeabi_dsub+0x230>
 800187c:	4642      	mov	r2, r8
 800187e:	2400      	movs	r4, #0
 8001880:	2300      	movs	r3, #0
 8001882:	e648      	b.n	8001516 <__aeabi_dsub+0x146>
 8001884:	2020      	movs	r0, #32
 8001886:	000c      	movs	r4, r1
 8001888:	1a80      	subs	r0, r0, r2
 800188a:	003e      	movs	r6, r7
 800188c:	4087      	lsls	r7, r0
 800188e:	4084      	lsls	r4, r0
 8001890:	40d6      	lsrs	r6, r2
 8001892:	1e78      	subs	r0, r7, #1
 8001894:	4187      	sbcs	r7, r0
 8001896:	40d1      	lsrs	r1, r2
 8001898:	4334      	orrs	r4, r6
 800189a:	433c      	orrs	r4, r7
 800189c:	448c      	add	ip, r1
 800189e:	e7a4      	b.n	80017ea <__aeabi_dsub+0x41a>
 80018a0:	4a80      	ldr	r2, [pc, #512]	; (8001aa4 <__aeabi_dsub+0x6d4>)
 80018a2:	4290      	cmp	r0, r2
 80018a4:	d100      	bne.n	80018a8 <__aeabi_dsub+0x4d8>
 80018a6:	e0e9      	b.n	8001a7c <__aeabi_dsub+0x6ac>
 80018a8:	19df      	adds	r7, r3, r7
 80018aa:	429f      	cmp	r7, r3
 80018ac:	419b      	sbcs	r3, r3
 80018ae:	4461      	add	r1, ip
 80018b0:	425b      	negs	r3, r3
 80018b2:	18c9      	adds	r1, r1, r3
 80018b4:	07cc      	lsls	r4, r1, #31
 80018b6:	087f      	lsrs	r7, r7, #1
 80018b8:	084b      	lsrs	r3, r1, #1
 80018ba:	4699      	mov	r9, r3
 80018bc:	4680      	mov	r8, r0
 80018be:	433c      	orrs	r4, r7
 80018c0:	e6f4      	b.n	80016ac <__aeabi_dsub+0x2dc>
 80018c2:	1afc      	subs	r4, r7, r3
 80018c4:	42a7      	cmp	r7, r4
 80018c6:	41bf      	sbcs	r7, r7
 80018c8:	4663      	mov	r3, ip
 80018ca:	427f      	negs	r7, r7
 80018cc:	1ac9      	subs	r1, r1, r3
 80018ce:	1bcb      	subs	r3, r1, r7
 80018d0:	4699      	mov	r9, r3
 80018d2:	465d      	mov	r5, fp
 80018d4:	e5d5      	b.n	8001482 <__aeabi_dsub+0xb2>
 80018d6:	08ff      	lsrs	r7, r7, #3
 80018d8:	074b      	lsls	r3, r1, #29
 80018da:	465d      	mov	r5, fp
 80018dc:	433b      	orrs	r3, r7
 80018de:	08cc      	lsrs	r4, r1, #3
 80018e0:	e6ee      	b.n	80016c0 <__aeabi_dsub+0x2f0>
 80018e2:	4662      	mov	r2, ip
 80018e4:	431a      	orrs	r2, r3
 80018e6:	d000      	beq.n	80018ea <__aeabi_dsub+0x51a>
 80018e8:	e082      	b.n	80019f0 <__aeabi_dsub+0x620>
 80018ea:	000b      	movs	r3, r1
 80018ec:	433b      	orrs	r3, r7
 80018ee:	d11b      	bne.n	8001928 <__aeabi_dsub+0x558>
 80018f0:	2480      	movs	r4, #128	; 0x80
 80018f2:	2500      	movs	r5, #0
 80018f4:	0324      	lsls	r4, r4, #12
 80018f6:	e6f9      	b.n	80016ec <__aeabi_dsub+0x31c>
 80018f8:	19dc      	adds	r4, r3, r7
 80018fa:	429c      	cmp	r4, r3
 80018fc:	419b      	sbcs	r3, r3
 80018fe:	4461      	add	r1, ip
 8001900:	4689      	mov	r9, r1
 8001902:	425b      	negs	r3, r3
 8001904:	4499      	add	r9, r3
 8001906:	464b      	mov	r3, r9
 8001908:	021b      	lsls	r3, r3, #8
 800190a:	d444      	bmi.n	8001996 <__aeabi_dsub+0x5c6>
 800190c:	2301      	movs	r3, #1
 800190e:	4698      	mov	r8, r3
 8001910:	e6cc      	b.n	80016ac <__aeabi_dsub+0x2dc>
 8001912:	1bdc      	subs	r4, r3, r7
 8001914:	4662      	mov	r2, ip
 8001916:	42a3      	cmp	r3, r4
 8001918:	419b      	sbcs	r3, r3
 800191a:	1a51      	subs	r1, r2, r1
 800191c:	425b      	negs	r3, r3
 800191e:	1acb      	subs	r3, r1, r3
 8001920:	4699      	mov	r9, r3
 8001922:	2301      	movs	r3, #1
 8001924:	4698      	mov	r8, r3
 8001926:	e5a4      	b.n	8001472 <__aeabi_dsub+0xa2>
 8001928:	08ff      	lsrs	r7, r7, #3
 800192a:	074b      	lsls	r3, r1, #29
 800192c:	465d      	mov	r5, fp
 800192e:	433b      	orrs	r3, r7
 8001930:	08cc      	lsrs	r4, r1, #3
 8001932:	e6d7      	b.n	80016e4 <__aeabi_dsub+0x314>
 8001934:	4662      	mov	r2, ip
 8001936:	431a      	orrs	r2, r3
 8001938:	0014      	movs	r4, r2
 800193a:	1e63      	subs	r3, r4, #1
 800193c:	419c      	sbcs	r4, r3
 800193e:	e679      	b.n	8001634 <__aeabi_dsub+0x264>
 8001940:	0015      	movs	r5, r2
 8001942:	4664      	mov	r4, ip
 8001944:	3d20      	subs	r5, #32
 8001946:	40ec      	lsrs	r4, r5
 8001948:	46a0      	mov	r8, r4
 800194a:	2a20      	cmp	r2, #32
 800194c:	d005      	beq.n	800195a <__aeabi_dsub+0x58a>
 800194e:	2540      	movs	r5, #64	; 0x40
 8001950:	4664      	mov	r4, ip
 8001952:	1aaa      	subs	r2, r5, r2
 8001954:	4094      	lsls	r4, r2
 8001956:	4323      	orrs	r3, r4
 8001958:	469a      	mov	sl, r3
 800195a:	4654      	mov	r4, sl
 800195c:	1e63      	subs	r3, r4, #1
 800195e:	419c      	sbcs	r4, r3
 8001960:	4643      	mov	r3, r8
 8001962:	4323      	orrs	r3, r4
 8001964:	e773      	b.n	800184e <__aeabi_dsub+0x47e>
 8001966:	4662      	mov	r2, ip
 8001968:	431a      	orrs	r2, r3
 800196a:	d023      	beq.n	80019b4 <__aeabi_dsub+0x5e4>
 800196c:	000a      	movs	r2, r1
 800196e:	433a      	orrs	r2, r7
 8001970:	d000      	beq.n	8001974 <__aeabi_dsub+0x5a4>
 8001972:	e0a0      	b.n	8001ab6 <__aeabi_dsub+0x6e6>
 8001974:	4662      	mov	r2, ip
 8001976:	08db      	lsrs	r3, r3, #3
 8001978:	0752      	lsls	r2, r2, #29
 800197a:	4313      	orrs	r3, r2
 800197c:	4662      	mov	r2, ip
 800197e:	08d4      	lsrs	r4, r2, #3
 8001980:	e6b0      	b.n	80016e4 <__aeabi_dsub+0x314>
 8001982:	000b      	movs	r3, r1
 8001984:	433b      	orrs	r3, r7
 8001986:	d100      	bne.n	800198a <__aeabi_dsub+0x5ba>
 8001988:	e728      	b.n	80017dc <__aeabi_dsub+0x40c>
 800198a:	08ff      	lsrs	r7, r7, #3
 800198c:	074b      	lsls	r3, r1, #29
 800198e:	465d      	mov	r5, fp
 8001990:	433b      	orrs	r3, r7
 8001992:	08cc      	lsrs	r4, r1, #3
 8001994:	e697      	b.n	80016c6 <__aeabi_dsub+0x2f6>
 8001996:	2302      	movs	r3, #2
 8001998:	4698      	mov	r8, r3
 800199a:	e736      	b.n	800180a <__aeabi_dsub+0x43a>
 800199c:	1afc      	subs	r4, r7, r3
 800199e:	42a7      	cmp	r7, r4
 80019a0:	41bf      	sbcs	r7, r7
 80019a2:	4663      	mov	r3, ip
 80019a4:	427f      	negs	r7, r7
 80019a6:	1ac9      	subs	r1, r1, r3
 80019a8:	1bcb      	subs	r3, r1, r7
 80019aa:	4699      	mov	r9, r3
 80019ac:	2301      	movs	r3, #1
 80019ae:	465d      	mov	r5, fp
 80019b0:	4698      	mov	r8, r3
 80019b2:	e55e      	b.n	8001472 <__aeabi_dsub+0xa2>
 80019b4:	074b      	lsls	r3, r1, #29
 80019b6:	08ff      	lsrs	r7, r7, #3
 80019b8:	433b      	orrs	r3, r7
 80019ba:	08cc      	lsrs	r4, r1, #3
 80019bc:	e692      	b.n	80016e4 <__aeabi_dsub+0x314>
 80019be:	1bdc      	subs	r4, r3, r7
 80019c0:	4660      	mov	r0, ip
 80019c2:	42a3      	cmp	r3, r4
 80019c4:	41b6      	sbcs	r6, r6
 80019c6:	1a40      	subs	r0, r0, r1
 80019c8:	4276      	negs	r6, r6
 80019ca:	1b80      	subs	r0, r0, r6
 80019cc:	4681      	mov	r9, r0
 80019ce:	0200      	lsls	r0, r0, #8
 80019d0:	d560      	bpl.n	8001a94 <__aeabi_dsub+0x6c4>
 80019d2:	1afc      	subs	r4, r7, r3
 80019d4:	42a7      	cmp	r7, r4
 80019d6:	41bf      	sbcs	r7, r7
 80019d8:	4663      	mov	r3, ip
 80019da:	427f      	negs	r7, r7
 80019dc:	1ac9      	subs	r1, r1, r3
 80019de:	1bcb      	subs	r3, r1, r7
 80019e0:	4699      	mov	r9, r3
 80019e2:	465d      	mov	r5, fp
 80019e4:	e576      	b.n	80014d4 <__aeabi_dsub+0x104>
 80019e6:	08ff      	lsrs	r7, r7, #3
 80019e8:	074b      	lsls	r3, r1, #29
 80019ea:	433b      	orrs	r3, r7
 80019ec:	08cc      	lsrs	r4, r1, #3
 80019ee:	e667      	b.n	80016c0 <__aeabi_dsub+0x2f0>
 80019f0:	000a      	movs	r2, r1
 80019f2:	08db      	lsrs	r3, r3, #3
 80019f4:	433a      	orrs	r2, r7
 80019f6:	d100      	bne.n	80019fa <__aeabi_dsub+0x62a>
 80019f8:	e66f      	b.n	80016da <__aeabi_dsub+0x30a>
 80019fa:	4662      	mov	r2, ip
 80019fc:	0752      	lsls	r2, r2, #29
 80019fe:	4313      	orrs	r3, r2
 8001a00:	4662      	mov	r2, ip
 8001a02:	08d4      	lsrs	r4, r2, #3
 8001a04:	2280      	movs	r2, #128	; 0x80
 8001a06:	0312      	lsls	r2, r2, #12
 8001a08:	4214      	tst	r4, r2
 8001a0a:	d007      	beq.n	8001a1c <__aeabi_dsub+0x64c>
 8001a0c:	08c8      	lsrs	r0, r1, #3
 8001a0e:	4210      	tst	r0, r2
 8001a10:	d104      	bne.n	8001a1c <__aeabi_dsub+0x64c>
 8001a12:	465d      	mov	r5, fp
 8001a14:	0004      	movs	r4, r0
 8001a16:	08fb      	lsrs	r3, r7, #3
 8001a18:	0749      	lsls	r1, r1, #29
 8001a1a:	430b      	orrs	r3, r1
 8001a1c:	0f5a      	lsrs	r2, r3, #29
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	08db      	lsrs	r3, r3, #3
 8001a22:	0752      	lsls	r2, r2, #29
 8001a24:	4313      	orrs	r3, r2
 8001a26:	e65d      	b.n	80016e4 <__aeabi_dsub+0x314>
 8001a28:	074b      	lsls	r3, r1, #29
 8001a2a:	08ff      	lsrs	r7, r7, #3
 8001a2c:	433b      	orrs	r3, r7
 8001a2e:	08cc      	lsrs	r4, r1, #3
 8001a30:	e649      	b.n	80016c6 <__aeabi_dsub+0x2f6>
 8001a32:	19dc      	adds	r4, r3, r7
 8001a34:	429c      	cmp	r4, r3
 8001a36:	419b      	sbcs	r3, r3
 8001a38:	4461      	add	r1, ip
 8001a3a:	4689      	mov	r9, r1
 8001a3c:	425b      	negs	r3, r3
 8001a3e:	4499      	add	r9, r3
 8001a40:	464b      	mov	r3, r9
 8001a42:	021b      	lsls	r3, r3, #8
 8001a44:	d400      	bmi.n	8001a48 <__aeabi_dsub+0x678>
 8001a46:	e631      	b.n	80016ac <__aeabi_dsub+0x2dc>
 8001a48:	464a      	mov	r2, r9
 8001a4a:	4b17      	ldr	r3, [pc, #92]	; (8001aa8 <__aeabi_dsub+0x6d8>)
 8001a4c:	401a      	ands	r2, r3
 8001a4e:	2301      	movs	r3, #1
 8001a50:	4691      	mov	r9, r2
 8001a52:	4698      	mov	r8, r3
 8001a54:	e62a      	b.n	80016ac <__aeabi_dsub+0x2dc>
 8001a56:	0016      	movs	r6, r2
 8001a58:	4664      	mov	r4, ip
 8001a5a:	3e20      	subs	r6, #32
 8001a5c:	40f4      	lsrs	r4, r6
 8001a5e:	46a0      	mov	r8, r4
 8001a60:	2a20      	cmp	r2, #32
 8001a62:	d005      	beq.n	8001a70 <__aeabi_dsub+0x6a0>
 8001a64:	2640      	movs	r6, #64	; 0x40
 8001a66:	4664      	mov	r4, ip
 8001a68:	1ab2      	subs	r2, r6, r2
 8001a6a:	4094      	lsls	r4, r2
 8001a6c:	4323      	orrs	r3, r4
 8001a6e:	469a      	mov	sl, r3
 8001a70:	4654      	mov	r4, sl
 8001a72:	1e63      	subs	r3, r4, #1
 8001a74:	419c      	sbcs	r4, r3
 8001a76:	4643      	mov	r3, r8
 8001a78:	431c      	orrs	r4, r3
 8001a7a:	e5db      	b.n	8001634 <__aeabi_dsub+0x264>
 8001a7c:	0002      	movs	r2, r0
 8001a7e:	2400      	movs	r4, #0
 8001a80:	2300      	movs	r3, #0
 8001a82:	e548      	b.n	8001516 <__aeabi_dsub+0x146>
 8001a84:	19dc      	adds	r4, r3, r7
 8001a86:	42bc      	cmp	r4, r7
 8001a88:	41bf      	sbcs	r7, r7
 8001a8a:	4461      	add	r1, ip
 8001a8c:	4689      	mov	r9, r1
 8001a8e:	427f      	negs	r7, r7
 8001a90:	44b9      	add	r9, r7
 8001a92:	e738      	b.n	8001906 <__aeabi_dsub+0x536>
 8001a94:	464b      	mov	r3, r9
 8001a96:	4323      	orrs	r3, r4
 8001a98:	d100      	bne.n	8001a9c <__aeabi_dsub+0x6cc>
 8001a9a:	e69f      	b.n	80017dc <__aeabi_dsub+0x40c>
 8001a9c:	e606      	b.n	80016ac <__aeabi_dsub+0x2dc>
 8001a9e:	46c0      	nop			; (mov r8, r8)
 8001aa0:	000007fe 	.word	0x000007fe
 8001aa4:	000007ff 	.word	0x000007ff
 8001aa8:	ff7fffff 	.word	0xff7fffff
 8001aac:	08ff      	lsrs	r7, r7, #3
 8001aae:	074b      	lsls	r3, r1, #29
 8001ab0:	433b      	orrs	r3, r7
 8001ab2:	08cc      	lsrs	r4, r1, #3
 8001ab4:	e616      	b.n	80016e4 <__aeabi_dsub+0x314>
 8001ab6:	4662      	mov	r2, ip
 8001ab8:	08db      	lsrs	r3, r3, #3
 8001aba:	0752      	lsls	r2, r2, #29
 8001abc:	4313      	orrs	r3, r2
 8001abe:	4662      	mov	r2, ip
 8001ac0:	08d4      	lsrs	r4, r2, #3
 8001ac2:	2280      	movs	r2, #128	; 0x80
 8001ac4:	0312      	lsls	r2, r2, #12
 8001ac6:	4214      	tst	r4, r2
 8001ac8:	d007      	beq.n	8001ada <__aeabi_dsub+0x70a>
 8001aca:	08c8      	lsrs	r0, r1, #3
 8001acc:	4210      	tst	r0, r2
 8001ace:	d104      	bne.n	8001ada <__aeabi_dsub+0x70a>
 8001ad0:	465d      	mov	r5, fp
 8001ad2:	0004      	movs	r4, r0
 8001ad4:	08fb      	lsrs	r3, r7, #3
 8001ad6:	0749      	lsls	r1, r1, #29
 8001ad8:	430b      	orrs	r3, r1
 8001ada:	0f5a      	lsrs	r2, r3, #29
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	0752      	lsls	r2, r2, #29
 8001ae0:	08db      	lsrs	r3, r3, #3
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	e5fe      	b.n	80016e4 <__aeabi_dsub+0x314>
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	4a01      	ldr	r2, [pc, #4]	; (8001af0 <__aeabi_dsub+0x720>)
 8001aea:	001c      	movs	r4, r3
 8001aec:	e513      	b.n	8001516 <__aeabi_dsub+0x146>
 8001aee:	46c0      	nop			; (mov r8, r8)
 8001af0:	000007ff 	.word	0x000007ff

08001af4 <__aeabi_d2iz>:
 8001af4:	000a      	movs	r2, r1
 8001af6:	b530      	push	{r4, r5, lr}
 8001af8:	4c13      	ldr	r4, [pc, #76]	; (8001b48 <__aeabi_d2iz+0x54>)
 8001afa:	0053      	lsls	r3, r2, #1
 8001afc:	0309      	lsls	r1, r1, #12
 8001afe:	0005      	movs	r5, r0
 8001b00:	0b09      	lsrs	r1, r1, #12
 8001b02:	2000      	movs	r0, #0
 8001b04:	0d5b      	lsrs	r3, r3, #21
 8001b06:	0fd2      	lsrs	r2, r2, #31
 8001b08:	42a3      	cmp	r3, r4
 8001b0a:	dd04      	ble.n	8001b16 <__aeabi_d2iz+0x22>
 8001b0c:	480f      	ldr	r0, [pc, #60]	; (8001b4c <__aeabi_d2iz+0x58>)
 8001b0e:	4283      	cmp	r3, r0
 8001b10:	dd02      	ble.n	8001b18 <__aeabi_d2iz+0x24>
 8001b12:	4b0f      	ldr	r3, [pc, #60]	; (8001b50 <__aeabi_d2iz+0x5c>)
 8001b14:	18d0      	adds	r0, r2, r3
 8001b16:	bd30      	pop	{r4, r5, pc}
 8001b18:	2080      	movs	r0, #128	; 0x80
 8001b1a:	0340      	lsls	r0, r0, #13
 8001b1c:	4301      	orrs	r1, r0
 8001b1e:	480d      	ldr	r0, [pc, #52]	; (8001b54 <__aeabi_d2iz+0x60>)
 8001b20:	1ac0      	subs	r0, r0, r3
 8001b22:	281f      	cmp	r0, #31
 8001b24:	dd08      	ble.n	8001b38 <__aeabi_d2iz+0x44>
 8001b26:	480c      	ldr	r0, [pc, #48]	; (8001b58 <__aeabi_d2iz+0x64>)
 8001b28:	1ac3      	subs	r3, r0, r3
 8001b2a:	40d9      	lsrs	r1, r3
 8001b2c:	000b      	movs	r3, r1
 8001b2e:	4258      	negs	r0, r3
 8001b30:	2a00      	cmp	r2, #0
 8001b32:	d1f0      	bne.n	8001b16 <__aeabi_d2iz+0x22>
 8001b34:	0018      	movs	r0, r3
 8001b36:	e7ee      	b.n	8001b16 <__aeabi_d2iz+0x22>
 8001b38:	4c08      	ldr	r4, [pc, #32]	; (8001b5c <__aeabi_d2iz+0x68>)
 8001b3a:	40c5      	lsrs	r5, r0
 8001b3c:	46a4      	mov	ip, r4
 8001b3e:	4463      	add	r3, ip
 8001b40:	4099      	lsls	r1, r3
 8001b42:	000b      	movs	r3, r1
 8001b44:	432b      	orrs	r3, r5
 8001b46:	e7f2      	b.n	8001b2e <__aeabi_d2iz+0x3a>
 8001b48:	000003fe 	.word	0x000003fe
 8001b4c:	0000041d 	.word	0x0000041d
 8001b50:	7fffffff 	.word	0x7fffffff
 8001b54:	00000433 	.word	0x00000433
 8001b58:	00000413 	.word	0x00000413
 8001b5c:	fffffbed 	.word	0xfffffbed

08001b60 <__aeabi_f2d>:
 8001b60:	b570      	push	{r4, r5, r6, lr}
 8001b62:	0043      	lsls	r3, r0, #1
 8001b64:	0246      	lsls	r6, r0, #9
 8001b66:	0fc4      	lsrs	r4, r0, #31
 8001b68:	20fe      	movs	r0, #254	; 0xfe
 8001b6a:	0e1b      	lsrs	r3, r3, #24
 8001b6c:	1c59      	adds	r1, r3, #1
 8001b6e:	0a75      	lsrs	r5, r6, #9
 8001b70:	4208      	tst	r0, r1
 8001b72:	d00c      	beq.n	8001b8e <__aeabi_f2d+0x2e>
 8001b74:	22e0      	movs	r2, #224	; 0xe0
 8001b76:	0092      	lsls	r2, r2, #2
 8001b78:	4694      	mov	ip, r2
 8001b7a:	076d      	lsls	r5, r5, #29
 8001b7c:	0b36      	lsrs	r6, r6, #12
 8001b7e:	4463      	add	r3, ip
 8001b80:	051b      	lsls	r3, r3, #20
 8001b82:	4333      	orrs	r3, r6
 8001b84:	07e4      	lsls	r4, r4, #31
 8001b86:	4323      	orrs	r3, r4
 8001b88:	0028      	movs	r0, r5
 8001b8a:	0019      	movs	r1, r3
 8001b8c:	bd70      	pop	{r4, r5, r6, pc}
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d114      	bne.n	8001bbc <__aeabi_f2d+0x5c>
 8001b92:	2d00      	cmp	r5, #0
 8001b94:	d01b      	beq.n	8001bce <__aeabi_f2d+0x6e>
 8001b96:	0028      	movs	r0, r5
 8001b98:	f000 f8a2 	bl	8001ce0 <__clzsi2>
 8001b9c:	280a      	cmp	r0, #10
 8001b9e:	dc1c      	bgt.n	8001bda <__aeabi_f2d+0x7a>
 8001ba0:	230b      	movs	r3, #11
 8001ba2:	002e      	movs	r6, r5
 8001ba4:	1a1b      	subs	r3, r3, r0
 8001ba6:	40de      	lsrs	r6, r3
 8001ba8:	0003      	movs	r3, r0
 8001baa:	3315      	adds	r3, #21
 8001bac:	409d      	lsls	r5, r3
 8001bae:	4a0e      	ldr	r2, [pc, #56]	; (8001be8 <__aeabi_f2d+0x88>)
 8001bb0:	0336      	lsls	r6, r6, #12
 8001bb2:	1a12      	subs	r2, r2, r0
 8001bb4:	0552      	lsls	r2, r2, #21
 8001bb6:	0b36      	lsrs	r6, r6, #12
 8001bb8:	0d53      	lsrs	r3, r2, #21
 8001bba:	e7e1      	b.n	8001b80 <__aeabi_f2d+0x20>
 8001bbc:	2d00      	cmp	r5, #0
 8001bbe:	d009      	beq.n	8001bd4 <__aeabi_f2d+0x74>
 8001bc0:	2280      	movs	r2, #128	; 0x80
 8001bc2:	0b36      	lsrs	r6, r6, #12
 8001bc4:	0312      	lsls	r2, r2, #12
 8001bc6:	4b09      	ldr	r3, [pc, #36]	; (8001bec <__aeabi_f2d+0x8c>)
 8001bc8:	076d      	lsls	r5, r5, #29
 8001bca:	4316      	orrs	r6, r2
 8001bcc:	e7d8      	b.n	8001b80 <__aeabi_f2d+0x20>
 8001bce:	2300      	movs	r3, #0
 8001bd0:	2600      	movs	r6, #0
 8001bd2:	e7d5      	b.n	8001b80 <__aeabi_f2d+0x20>
 8001bd4:	2600      	movs	r6, #0
 8001bd6:	4b05      	ldr	r3, [pc, #20]	; (8001bec <__aeabi_f2d+0x8c>)
 8001bd8:	e7d2      	b.n	8001b80 <__aeabi_f2d+0x20>
 8001bda:	0003      	movs	r3, r0
 8001bdc:	3b0b      	subs	r3, #11
 8001bde:	409d      	lsls	r5, r3
 8001be0:	002e      	movs	r6, r5
 8001be2:	2500      	movs	r5, #0
 8001be4:	e7e3      	b.n	8001bae <__aeabi_f2d+0x4e>
 8001be6:	46c0      	nop			; (mov r8, r8)
 8001be8:	00000389 	.word	0x00000389
 8001bec:	000007ff 	.word	0x000007ff

08001bf0 <__aeabi_cdrcmple>:
 8001bf0:	4684      	mov	ip, r0
 8001bf2:	0010      	movs	r0, r2
 8001bf4:	4662      	mov	r2, ip
 8001bf6:	468c      	mov	ip, r1
 8001bf8:	0019      	movs	r1, r3
 8001bfa:	4663      	mov	r3, ip
 8001bfc:	e000      	b.n	8001c00 <__aeabi_cdcmpeq>
 8001bfe:	46c0      	nop			; (mov r8, r8)

08001c00 <__aeabi_cdcmpeq>:
 8001c00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001c02:	f000 f9e3 	bl	8001fcc <__ledf2>
 8001c06:	2800      	cmp	r0, #0
 8001c08:	d401      	bmi.n	8001c0e <__aeabi_cdcmpeq+0xe>
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	42c8      	cmn	r0, r1
 8001c0e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001c10 <__aeabi_dcmpeq>:
 8001c10:	b510      	push	{r4, lr}
 8001c12:	f000 f933 	bl	8001e7c <__eqdf2>
 8001c16:	4240      	negs	r0, r0
 8001c18:	3001      	adds	r0, #1
 8001c1a:	bd10      	pop	{r4, pc}

08001c1c <__aeabi_dcmplt>:
 8001c1c:	b510      	push	{r4, lr}
 8001c1e:	f000 f9d5 	bl	8001fcc <__ledf2>
 8001c22:	2800      	cmp	r0, #0
 8001c24:	db01      	blt.n	8001c2a <__aeabi_dcmplt+0xe>
 8001c26:	2000      	movs	r0, #0
 8001c28:	bd10      	pop	{r4, pc}
 8001c2a:	2001      	movs	r0, #1
 8001c2c:	bd10      	pop	{r4, pc}
 8001c2e:	46c0      	nop			; (mov r8, r8)

08001c30 <__aeabi_dcmple>:
 8001c30:	b510      	push	{r4, lr}
 8001c32:	f000 f9cb 	bl	8001fcc <__ledf2>
 8001c36:	2800      	cmp	r0, #0
 8001c38:	dd01      	ble.n	8001c3e <__aeabi_dcmple+0xe>
 8001c3a:	2000      	movs	r0, #0
 8001c3c:	bd10      	pop	{r4, pc}
 8001c3e:	2001      	movs	r0, #1
 8001c40:	bd10      	pop	{r4, pc}
 8001c42:	46c0      	nop			; (mov r8, r8)

08001c44 <__aeabi_dcmpgt>:
 8001c44:	b510      	push	{r4, lr}
 8001c46:	f000 f95b 	bl	8001f00 <__gedf2>
 8001c4a:	2800      	cmp	r0, #0
 8001c4c:	dc01      	bgt.n	8001c52 <__aeabi_dcmpgt+0xe>
 8001c4e:	2000      	movs	r0, #0
 8001c50:	bd10      	pop	{r4, pc}
 8001c52:	2001      	movs	r0, #1
 8001c54:	bd10      	pop	{r4, pc}
 8001c56:	46c0      	nop			; (mov r8, r8)

08001c58 <__aeabi_dcmpge>:
 8001c58:	b510      	push	{r4, lr}
 8001c5a:	f000 f951 	bl	8001f00 <__gedf2>
 8001c5e:	2800      	cmp	r0, #0
 8001c60:	da01      	bge.n	8001c66 <__aeabi_dcmpge+0xe>
 8001c62:	2000      	movs	r0, #0
 8001c64:	bd10      	pop	{r4, pc}
 8001c66:	2001      	movs	r0, #1
 8001c68:	bd10      	pop	{r4, pc}
 8001c6a:	46c0      	nop			; (mov r8, r8)

08001c6c <__aeabi_cfrcmple>:
 8001c6c:	4684      	mov	ip, r0
 8001c6e:	0008      	movs	r0, r1
 8001c70:	4661      	mov	r1, ip
 8001c72:	e7ff      	b.n	8001c74 <__aeabi_cfcmpeq>

08001c74 <__aeabi_cfcmpeq>:
 8001c74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001c76:	f000 f8bd 	bl	8001df4 <__lesf2>
 8001c7a:	2800      	cmp	r0, #0
 8001c7c:	d401      	bmi.n	8001c82 <__aeabi_cfcmpeq+0xe>
 8001c7e:	2100      	movs	r1, #0
 8001c80:	42c8      	cmn	r0, r1
 8001c82:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001c84 <__aeabi_fcmpeq>:
 8001c84:	b510      	push	{r4, lr}
 8001c86:	f000 f849 	bl	8001d1c <__eqsf2>
 8001c8a:	4240      	negs	r0, r0
 8001c8c:	3001      	adds	r0, #1
 8001c8e:	bd10      	pop	{r4, pc}

08001c90 <__aeabi_fcmplt>:
 8001c90:	b510      	push	{r4, lr}
 8001c92:	f000 f8af 	bl	8001df4 <__lesf2>
 8001c96:	2800      	cmp	r0, #0
 8001c98:	db01      	blt.n	8001c9e <__aeabi_fcmplt+0xe>
 8001c9a:	2000      	movs	r0, #0
 8001c9c:	bd10      	pop	{r4, pc}
 8001c9e:	2001      	movs	r0, #1
 8001ca0:	bd10      	pop	{r4, pc}
 8001ca2:	46c0      	nop			; (mov r8, r8)

08001ca4 <__aeabi_fcmple>:
 8001ca4:	b510      	push	{r4, lr}
 8001ca6:	f000 f8a5 	bl	8001df4 <__lesf2>
 8001caa:	2800      	cmp	r0, #0
 8001cac:	dd01      	ble.n	8001cb2 <__aeabi_fcmple+0xe>
 8001cae:	2000      	movs	r0, #0
 8001cb0:	bd10      	pop	{r4, pc}
 8001cb2:	2001      	movs	r0, #1
 8001cb4:	bd10      	pop	{r4, pc}
 8001cb6:	46c0      	nop			; (mov r8, r8)

08001cb8 <__aeabi_fcmpgt>:
 8001cb8:	b510      	push	{r4, lr}
 8001cba:	f000 f855 	bl	8001d68 <__gesf2>
 8001cbe:	2800      	cmp	r0, #0
 8001cc0:	dc01      	bgt.n	8001cc6 <__aeabi_fcmpgt+0xe>
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	bd10      	pop	{r4, pc}
 8001cc6:	2001      	movs	r0, #1
 8001cc8:	bd10      	pop	{r4, pc}
 8001cca:	46c0      	nop			; (mov r8, r8)

08001ccc <__aeabi_fcmpge>:
 8001ccc:	b510      	push	{r4, lr}
 8001cce:	f000 f84b 	bl	8001d68 <__gesf2>
 8001cd2:	2800      	cmp	r0, #0
 8001cd4:	da01      	bge.n	8001cda <__aeabi_fcmpge+0xe>
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	bd10      	pop	{r4, pc}
 8001cda:	2001      	movs	r0, #1
 8001cdc:	bd10      	pop	{r4, pc}
 8001cde:	46c0      	nop			; (mov r8, r8)

08001ce0 <__clzsi2>:
 8001ce0:	211c      	movs	r1, #28
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	041b      	lsls	r3, r3, #16
 8001ce6:	4298      	cmp	r0, r3
 8001ce8:	d301      	bcc.n	8001cee <__clzsi2+0xe>
 8001cea:	0c00      	lsrs	r0, r0, #16
 8001cec:	3910      	subs	r1, #16
 8001cee:	0a1b      	lsrs	r3, r3, #8
 8001cf0:	4298      	cmp	r0, r3
 8001cf2:	d301      	bcc.n	8001cf8 <__clzsi2+0x18>
 8001cf4:	0a00      	lsrs	r0, r0, #8
 8001cf6:	3908      	subs	r1, #8
 8001cf8:	091b      	lsrs	r3, r3, #4
 8001cfa:	4298      	cmp	r0, r3
 8001cfc:	d301      	bcc.n	8001d02 <__clzsi2+0x22>
 8001cfe:	0900      	lsrs	r0, r0, #4
 8001d00:	3904      	subs	r1, #4
 8001d02:	a202      	add	r2, pc, #8	; (adr r2, 8001d0c <__clzsi2+0x2c>)
 8001d04:	5c10      	ldrb	r0, [r2, r0]
 8001d06:	1840      	adds	r0, r0, r1
 8001d08:	4770      	bx	lr
 8001d0a:	46c0      	nop			; (mov r8, r8)
 8001d0c:	02020304 	.word	0x02020304
 8001d10:	01010101 	.word	0x01010101
	...

08001d1c <__eqsf2>:
 8001d1c:	b570      	push	{r4, r5, r6, lr}
 8001d1e:	0042      	lsls	r2, r0, #1
 8001d20:	0245      	lsls	r5, r0, #9
 8001d22:	024e      	lsls	r6, r1, #9
 8001d24:	004c      	lsls	r4, r1, #1
 8001d26:	0fc3      	lsrs	r3, r0, #31
 8001d28:	0a6d      	lsrs	r5, r5, #9
 8001d2a:	2001      	movs	r0, #1
 8001d2c:	0e12      	lsrs	r2, r2, #24
 8001d2e:	0a76      	lsrs	r6, r6, #9
 8001d30:	0e24      	lsrs	r4, r4, #24
 8001d32:	0fc9      	lsrs	r1, r1, #31
 8001d34:	2aff      	cmp	r2, #255	; 0xff
 8001d36:	d006      	beq.n	8001d46 <__eqsf2+0x2a>
 8001d38:	2cff      	cmp	r4, #255	; 0xff
 8001d3a:	d003      	beq.n	8001d44 <__eqsf2+0x28>
 8001d3c:	42a2      	cmp	r2, r4
 8001d3e:	d101      	bne.n	8001d44 <__eqsf2+0x28>
 8001d40:	42b5      	cmp	r5, r6
 8001d42:	d006      	beq.n	8001d52 <__eqsf2+0x36>
 8001d44:	bd70      	pop	{r4, r5, r6, pc}
 8001d46:	2d00      	cmp	r5, #0
 8001d48:	d1fc      	bne.n	8001d44 <__eqsf2+0x28>
 8001d4a:	2cff      	cmp	r4, #255	; 0xff
 8001d4c:	d1fa      	bne.n	8001d44 <__eqsf2+0x28>
 8001d4e:	2e00      	cmp	r6, #0
 8001d50:	d1f8      	bne.n	8001d44 <__eqsf2+0x28>
 8001d52:	428b      	cmp	r3, r1
 8001d54:	d006      	beq.n	8001d64 <__eqsf2+0x48>
 8001d56:	2001      	movs	r0, #1
 8001d58:	2a00      	cmp	r2, #0
 8001d5a:	d1f3      	bne.n	8001d44 <__eqsf2+0x28>
 8001d5c:	0028      	movs	r0, r5
 8001d5e:	1e43      	subs	r3, r0, #1
 8001d60:	4198      	sbcs	r0, r3
 8001d62:	e7ef      	b.n	8001d44 <__eqsf2+0x28>
 8001d64:	2000      	movs	r0, #0
 8001d66:	e7ed      	b.n	8001d44 <__eqsf2+0x28>

08001d68 <__gesf2>:
 8001d68:	b570      	push	{r4, r5, r6, lr}
 8001d6a:	0042      	lsls	r2, r0, #1
 8001d6c:	0245      	lsls	r5, r0, #9
 8001d6e:	024e      	lsls	r6, r1, #9
 8001d70:	004c      	lsls	r4, r1, #1
 8001d72:	0fc3      	lsrs	r3, r0, #31
 8001d74:	0a6d      	lsrs	r5, r5, #9
 8001d76:	0e12      	lsrs	r2, r2, #24
 8001d78:	0a76      	lsrs	r6, r6, #9
 8001d7a:	0e24      	lsrs	r4, r4, #24
 8001d7c:	0fc8      	lsrs	r0, r1, #31
 8001d7e:	2aff      	cmp	r2, #255	; 0xff
 8001d80:	d01b      	beq.n	8001dba <__gesf2+0x52>
 8001d82:	2cff      	cmp	r4, #255	; 0xff
 8001d84:	d00e      	beq.n	8001da4 <__gesf2+0x3c>
 8001d86:	2a00      	cmp	r2, #0
 8001d88:	d11b      	bne.n	8001dc2 <__gesf2+0x5a>
 8001d8a:	2c00      	cmp	r4, #0
 8001d8c:	d101      	bne.n	8001d92 <__gesf2+0x2a>
 8001d8e:	2e00      	cmp	r6, #0
 8001d90:	d01c      	beq.n	8001dcc <__gesf2+0x64>
 8001d92:	2d00      	cmp	r5, #0
 8001d94:	d00c      	beq.n	8001db0 <__gesf2+0x48>
 8001d96:	4283      	cmp	r3, r0
 8001d98:	d01c      	beq.n	8001dd4 <__gesf2+0x6c>
 8001d9a:	2102      	movs	r1, #2
 8001d9c:	1e58      	subs	r0, r3, #1
 8001d9e:	4008      	ands	r0, r1
 8001da0:	3801      	subs	r0, #1
 8001da2:	bd70      	pop	{r4, r5, r6, pc}
 8001da4:	2e00      	cmp	r6, #0
 8001da6:	d122      	bne.n	8001dee <__gesf2+0x86>
 8001da8:	2a00      	cmp	r2, #0
 8001daa:	d1f4      	bne.n	8001d96 <__gesf2+0x2e>
 8001dac:	2d00      	cmp	r5, #0
 8001dae:	d1f2      	bne.n	8001d96 <__gesf2+0x2e>
 8001db0:	2800      	cmp	r0, #0
 8001db2:	d1f6      	bne.n	8001da2 <__gesf2+0x3a>
 8001db4:	2001      	movs	r0, #1
 8001db6:	4240      	negs	r0, r0
 8001db8:	e7f3      	b.n	8001da2 <__gesf2+0x3a>
 8001dba:	2d00      	cmp	r5, #0
 8001dbc:	d117      	bne.n	8001dee <__gesf2+0x86>
 8001dbe:	2cff      	cmp	r4, #255	; 0xff
 8001dc0:	d0f0      	beq.n	8001da4 <__gesf2+0x3c>
 8001dc2:	2c00      	cmp	r4, #0
 8001dc4:	d1e7      	bne.n	8001d96 <__gesf2+0x2e>
 8001dc6:	2e00      	cmp	r6, #0
 8001dc8:	d1e5      	bne.n	8001d96 <__gesf2+0x2e>
 8001dca:	e7e6      	b.n	8001d9a <__gesf2+0x32>
 8001dcc:	2000      	movs	r0, #0
 8001dce:	2d00      	cmp	r5, #0
 8001dd0:	d0e7      	beq.n	8001da2 <__gesf2+0x3a>
 8001dd2:	e7e2      	b.n	8001d9a <__gesf2+0x32>
 8001dd4:	42a2      	cmp	r2, r4
 8001dd6:	dc05      	bgt.n	8001de4 <__gesf2+0x7c>
 8001dd8:	dbea      	blt.n	8001db0 <__gesf2+0x48>
 8001dda:	42b5      	cmp	r5, r6
 8001ddc:	d802      	bhi.n	8001de4 <__gesf2+0x7c>
 8001dde:	d3e7      	bcc.n	8001db0 <__gesf2+0x48>
 8001de0:	2000      	movs	r0, #0
 8001de2:	e7de      	b.n	8001da2 <__gesf2+0x3a>
 8001de4:	4243      	negs	r3, r0
 8001de6:	4158      	adcs	r0, r3
 8001de8:	0040      	lsls	r0, r0, #1
 8001dea:	3801      	subs	r0, #1
 8001dec:	e7d9      	b.n	8001da2 <__gesf2+0x3a>
 8001dee:	2002      	movs	r0, #2
 8001df0:	4240      	negs	r0, r0
 8001df2:	e7d6      	b.n	8001da2 <__gesf2+0x3a>

08001df4 <__lesf2>:
 8001df4:	b570      	push	{r4, r5, r6, lr}
 8001df6:	0042      	lsls	r2, r0, #1
 8001df8:	0245      	lsls	r5, r0, #9
 8001dfa:	024e      	lsls	r6, r1, #9
 8001dfc:	004c      	lsls	r4, r1, #1
 8001dfe:	0fc3      	lsrs	r3, r0, #31
 8001e00:	0a6d      	lsrs	r5, r5, #9
 8001e02:	0e12      	lsrs	r2, r2, #24
 8001e04:	0a76      	lsrs	r6, r6, #9
 8001e06:	0e24      	lsrs	r4, r4, #24
 8001e08:	0fc8      	lsrs	r0, r1, #31
 8001e0a:	2aff      	cmp	r2, #255	; 0xff
 8001e0c:	d00b      	beq.n	8001e26 <__lesf2+0x32>
 8001e0e:	2cff      	cmp	r4, #255	; 0xff
 8001e10:	d00d      	beq.n	8001e2e <__lesf2+0x3a>
 8001e12:	2a00      	cmp	r2, #0
 8001e14:	d11f      	bne.n	8001e56 <__lesf2+0x62>
 8001e16:	2c00      	cmp	r4, #0
 8001e18:	d116      	bne.n	8001e48 <__lesf2+0x54>
 8001e1a:	2e00      	cmp	r6, #0
 8001e1c:	d114      	bne.n	8001e48 <__lesf2+0x54>
 8001e1e:	2000      	movs	r0, #0
 8001e20:	2d00      	cmp	r5, #0
 8001e22:	d010      	beq.n	8001e46 <__lesf2+0x52>
 8001e24:	e009      	b.n	8001e3a <__lesf2+0x46>
 8001e26:	2d00      	cmp	r5, #0
 8001e28:	d10c      	bne.n	8001e44 <__lesf2+0x50>
 8001e2a:	2cff      	cmp	r4, #255	; 0xff
 8001e2c:	d113      	bne.n	8001e56 <__lesf2+0x62>
 8001e2e:	2e00      	cmp	r6, #0
 8001e30:	d108      	bne.n	8001e44 <__lesf2+0x50>
 8001e32:	2a00      	cmp	r2, #0
 8001e34:	d008      	beq.n	8001e48 <__lesf2+0x54>
 8001e36:	4283      	cmp	r3, r0
 8001e38:	d012      	beq.n	8001e60 <__lesf2+0x6c>
 8001e3a:	2102      	movs	r1, #2
 8001e3c:	1e58      	subs	r0, r3, #1
 8001e3e:	4008      	ands	r0, r1
 8001e40:	3801      	subs	r0, #1
 8001e42:	e000      	b.n	8001e46 <__lesf2+0x52>
 8001e44:	2002      	movs	r0, #2
 8001e46:	bd70      	pop	{r4, r5, r6, pc}
 8001e48:	2d00      	cmp	r5, #0
 8001e4a:	d1f4      	bne.n	8001e36 <__lesf2+0x42>
 8001e4c:	2800      	cmp	r0, #0
 8001e4e:	d1fa      	bne.n	8001e46 <__lesf2+0x52>
 8001e50:	2001      	movs	r0, #1
 8001e52:	4240      	negs	r0, r0
 8001e54:	e7f7      	b.n	8001e46 <__lesf2+0x52>
 8001e56:	2c00      	cmp	r4, #0
 8001e58:	d1ed      	bne.n	8001e36 <__lesf2+0x42>
 8001e5a:	2e00      	cmp	r6, #0
 8001e5c:	d1eb      	bne.n	8001e36 <__lesf2+0x42>
 8001e5e:	e7ec      	b.n	8001e3a <__lesf2+0x46>
 8001e60:	42a2      	cmp	r2, r4
 8001e62:	dc05      	bgt.n	8001e70 <__lesf2+0x7c>
 8001e64:	dbf2      	blt.n	8001e4c <__lesf2+0x58>
 8001e66:	42b5      	cmp	r5, r6
 8001e68:	d802      	bhi.n	8001e70 <__lesf2+0x7c>
 8001e6a:	d3ef      	bcc.n	8001e4c <__lesf2+0x58>
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	e7ea      	b.n	8001e46 <__lesf2+0x52>
 8001e70:	4243      	negs	r3, r0
 8001e72:	4158      	adcs	r0, r3
 8001e74:	0040      	lsls	r0, r0, #1
 8001e76:	3801      	subs	r0, #1
 8001e78:	e7e5      	b.n	8001e46 <__lesf2+0x52>
 8001e7a:	46c0      	nop			; (mov r8, r8)

08001e7c <__eqdf2>:
 8001e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e7e:	464e      	mov	r6, r9
 8001e80:	4645      	mov	r5, r8
 8001e82:	46de      	mov	lr, fp
 8001e84:	4657      	mov	r7, sl
 8001e86:	4690      	mov	r8, r2
 8001e88:	b5e0      	push	{r5, r6, r7, lr}
 8001e8a:	0017      	movs	r7, r2
 8001e8c:	031a      	lsls	r2, r3, #12
 8001e8e:	0b12      	lsrs	r2, r2, #12
 8001e90:	0005      	movs	r5, r0
 8001e92:	4684      	mov	ip, r0
 8001e94:	4819      	ldr	r0, [pc, #100]	; (8001efc <__eqdf2+0x80>)
 8001e96:	030e      	lsls	r6, r1, #12
 8001e98:	004c      	lsls	r4, r1, #1
 8001e9a:	4691      	mov	r9, r2
 8001e9c:	005a      	lsls	r2, r3, #1
 8001e9e:	0fdb      	lsrs	r3, r3, #31
 8001ea0:	469b      	mov	fp, r3
 8001ea2:	0b36      	lsrs	r6, r6, #12
 8001ea4:	0d64      	lsrs	r4, r4, #21
 8001ea6:	0fc9      	lsrs	r1, r1, #31
 8001ea8:	0d52      	lsrs	r2, r2, #21
 8001eaa:	4284      	cmp	r4, r0
 8001eac:	d019      	beq.n	8001ee2 <__eqdf2+0x66>
 8001eae:	4282      	cmp	r2, r0
 8001eb0:	d010      	beq.n	8001ed4 <__eqdf2+0x58>
 8001eb2:	2001      	movs	r0, #1
 8001eb4:	4294      	cmp	r4, r2
 8001eb6:	d10e      	bne.n	8001ed6 <__eqdf2+0x5a>
 8001eb8:	454e      	cmp	r6, r9
 8001eba:	d10c      	bne.n	8001ed6 <__eqdf2+0x5a>
 8001ebc:	2001      	movs	r0, #1
 8001ebe:	45c4      	cmp	ip, r8
 8001ec0:	d109      	bne.n	8001ed6 <__eqdf2+0x5a>
 8001ec2:	4559      	cmp	r1, fp
 8001ec4:	d017      	beq.n	8001ef6 <__eqdf2+0x7a>
 8001ec6:	2c00      	cmp	r4, #0
 8001ec8:	d105      	bne.n	8001ed6 <__eqdf2+0x5a>
 8001eca:	0030      	movs	r0, r6
 8001ecc:	4328      	orrs	r0, r5
 8001ece:	1e43      	subs	r3, r0, #1
 8001ed0:	4198      	sbcs	r0, r3
 8001ed2:	e000      	b.n	8001ed6 <__eqdf2+0x5a>
 8001ed4:	2001      	movs	r0, #1
 8001ed6:	bcf0      	pop	{r4, r5, r6, r7}
 8001ed8:	46bb      	mov	fp, r7
 8001eda:	46b2      	mov	sl, r6
 8001edc:	46a9      	mov	r9, r5
 8001ede:	46a0      	mov	r8, r4
 8001ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ee2:	0033      	movs	r3, r6
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	432b      	orrs	r3, r5
 8001ee8:	d1f5      	bne.n	8001ed6 <__eqdf2+0x5a>
 8001eea:	42a2      	cmp	r2, r4
 8001eec:	d1f3      	bne.n	8001ed6 <__eqdf2+0x5a>
 8001eee:	464b      	mov	r3, r9
 8001ef0:	433b      	orrs	r3, r7
 8001ef2:	d1f0      	bne.n	8001ed6 <__eqdf2+0x5a>
 8001ef4:	e7e2      	b.n	8001ebc <__eqdf2+0x40>
 8001ef6:	2000      	movs	r0, #0
 8001ef8:	e7ed      	b.n	8001ed6 <__eqdf2+0x5a>
 8001efa:	46c0      	nop			; (mov r8, r8)
 8001efc:	000007ff 	.word	0x000007ff

08001f00 <__gedf2>:
 8001f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f02:	4647      	mov	r7, r8
 8001f04:	46ce      	mov	lr, r9
 8001f06:	0004      	movs	r4, r0
 8001f08:	0018      	movs	r0, r3
 8001f0a:	0016      	movs	r6, r2
 8001f0c:	031b      	lsls	r3, r3, #12
 8001f0e:	0b1b      	lsrs	r3, r3, #12
 8001f10:	4d2d      	ldr	r5, [pc, #180]	; (8001fc8 <__gedf2+0xc8>)
 8001f12:	004a      	lsls	r2, r1, #1
 8001f14:	4699      	mov	r9, r3
 8001f16:	b580      	push	{r7, lr}
 8001f18:	0043      	lsls	r3, r0, #1
 8001f1a:	030f      	lsls	r7, r1, #12
 8001f1c:	46a4      	mov	ip, r4
 8001f1e:	46b0      	mov	r8, r6
 8001f20:	0b3f      	lsrs	r7, r7, #12
 8001f22:	0d52      	lsrs	r2, r2, #21
 8001f24:	0fc9      	lsrs	r1, r1, #31
 8001f26:	0d5b      	lsrs	r3, r3, #21
 8001f28:	0fc0      	lsrs	r0, r0, #31
 8001f2a:	42aa      	cmp	r2, r5
 8001f2c:	d021      	beq.n	8001f72 <__gedf2+0x72>
 8001f2e:	42ab      	cmp	r3, r5
 8001f30:	d013      	beq.n	8001f5a <__gedf2+0x5a>
 8001f32:	2a00      	cmp	r2, #0
 8001f34:	d122      	bne.n	8001f7c <__gedf2+0x7c>
 8001f36:	433c      	orrs	r4, r7
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d102      	bne.n	8001f42 <__gedf2+0x42>
 8001f3c:	464d      	mov	r5, r9
 8001f3e:	432e      	orrs	r6, r5
 8001f40:	d022      	beq.n	8001f88 <__gedf2+0x88>
 8001f42:	2c00      	cmp	r4, #0
 8001f44:	d010      	beq.n	8001f68 <__gedf2+0x68>
 8001f46:	4281      	cmp	r1, r0
 8001f48:	d022      	beq.n	8001f90 <__gedf2+0x90>
 8001f4a:	2002      	movs	r0, #2
 8001f4c:	3901      	subs	r1, #1
 8001f4e:	4008      	ands	r0, r1
 8001f50:	3801      	subs	r0, #1
 8001f52:	bcc0      	pop	{r6, r7}
 8001f54:	46b9      	mov	r9, r7
 8001f56:	46b0      	mov	r8, r6
 8001f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f5a:	464d      	mov	r5, r9
 8001f5c:	432e      	orrs	r6, r5
 8001f5e:	d129      	bne.n	8001fb4 <__gedf2+0xb4>
 8001f60:	2a00      	cmp	r2, #0
 8001f62:	d1f0      	bne.n	8001f46 <__gedf2+0x46>
 8001f64:	433c      	orrs	r4, r7
 8001f66:	d1ee      	bne.n	8001f46 <__gedf2+0x46>
 8001f68:	2800      	cmp	r0, #0
 8001f6a:	d1f2      	bne.n	8001f52 <__gedf2+0x52>
 8001f6c:	2001      	movs	r0, #1
 8001f6e:	4240      	negs	r0, r0
 8001f70:	e7ef      	b.n	8001f52 <__gedf2+0x52>
 8001f72:	003d      	movs	r5, r7
 8001f74:	4325      	orrs	r5, r4
 8001f76:	d11d      	bne.n	8001fb4 <__gedf2+0xb4>
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d0ee      	beq.n	8001f5a <__gedf2+0x5a>
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1e2      	bne.n	8001f46 <__gedf2+0x46>
 8001f80:	464c      	mov	r4, r9
 8001f82:	4326      	orrs	r6, r4
 8001f84:	d1df      	bne.n	8001f46 <__gedf2+0x46>
 8001f86:	e7e0      	b.n	8001f4a <__gedf2+0x4a>
 8001f88:	2000      	movs	r0, #0
 8001f8a:	2c00      	cmp	r4, #0
 8001f8c:	d0e1      	beq.n	8001f52 <__gedf2+0x52>
 8001f8e:	e7dc      	b.n	8001f4a <__gedf2+0x4a>
 8001f90:	429a      	cmp	r2, r3
 8001f92:	dc0a      	bgt.n	8001faa <__gedf2+0xaa>
 8001f94:	dbe8      	blt.n	8001f68 <__gedf2+0x68>
 8001f96:	454f      	cmp	r7, r9
 8001f98:	d8d7      	bhi.n	8001f4a <__gedf2+0x4a>
 8001f9a:	d00e      	beq.n	8001fba <__gedf2+0xba>
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	454f      	cmp	r7, r9
 8001fa0:	d2d7      	bcs.n	8001f52 <__gedf2+0x52>
 8001fa2:	2900      	cmp	r1, #0
 8001fa4:	d0e2      	beq.n	8001f6c <__gedf2+0x6c>
 8001fa6:	0008      	movs	r0, r1
 8001fa8:	e7d3      	b.n	8001f52 <__gedf2+0x52>
 8001faa:	4243      	negs	r3, r0
 8001fac:	4158      	adcs	r0, r3
 8001fae:	0040      	lsls	r0, r0, #1
 8001fb0:	3801      	subs	r0, #1
 8001fb2:	e7ce      	b.n	8001f52 <__gedf2+0x52>
 8001fb4:	2002      	movs	r0, #2
 8001fb6:	4240      	negs	r0, r0
 8001fb8:	e7cb      	b.n	8001f52 <__gedf2+0x52>
 8001fba:	45c4      	cmp	ip, r8
 8001fbc:	d8c5      	bhi.n	8001f4a <__gedf2+0x4a>
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	45c4      	cmp	ip, r8
 8001fc2:	d2c6      	bcs.n	8001f52 <__gedf2+0x52>
 8001fc4:	e7ed      	b.n	8001fa2 <__gedf2+0xa2>
 8001fc6:	46c0      	nop			; (mov r8, r8)
 8001fc8:	000007ff 	.word	0x000007ff

08001fcc <__ledf2>:
 8001fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fce:	4647      	mov	r7, r8
 8001fd0:	46ce      	mov	lr, r9
 8001fd2:	0004      	movs	r4, r0
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	0016      	movs	r6, r2
 8001fd8:	031b      	lsls	r3, r3, #12
 8001fda:	0b1b      	lsrs	r3, r3, #12
 8001fdc:	4d2c      	ldr	r5, [pc, #176]	; (8002090 <__ledf2+0xc4>)
 8001fde:	004a      	lsls	r2, r1, #1
 8001fe0:	4699      	mov	r9, r3
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	0043      	lsls	r3, r0, #1
 8001fe6:	030f      	lsls	r7, r1, #12
 8001fe8:	46a4      	mov	ip, r4
 8001fea:	46b0      	mov	r8, r6
 8001fec:	0b3f      	lsrs	r7, r7, #12
 8001fee:	0d52      	lsrs	r2, r2, #21
 8001ff0:	0fc9      	lsrs	r1, r1, #31
 8001ff2:	0d5b      	lsrs	r3, r3, #21
 8001ff4:	0fc0      	lsrs	r0, r0, #31
 8001ff6:	42aa      	cmp	r2, r5
 8001ff8:	d00d      	beq.n	8002016 <__ledf2+0x4a>
 8001ffa:	42ab      	cmp	r3, r5
 8001ffc:	d010      	beq.n	8002020 <__ledf2+0x54>
 8001ffe:	2a00      	cmp	r2, #0
 8002000:	d127      	bne.n	8002052 <__ledf2+0x86>
 8002002:	433c      	orrs	r4, r7
 8002004:	2b00      	cmp	r3, #0
 8002006:	d111      	bne.n	800202c <__ledf2+0x60>
 8002008:	464d      	mov	r5, r9
 800200a:	432e      	orrs	r6, r5
 800200c:	d10e      	bne.n	800202c <__ledf2+0x60>
 800200e:	2000      	movs	r0, #0
 8002010:	2c00      	cmp	r4, #0
 8002012:	d015      	beq.n	8002040 <__ledf2+0x74>
 8002014:	e00e      	b.n	8002034 <__ledf2+0x68>
 8002016:	003d      	movs	r5, r7
 8002018:	4325      	orrs	r5, r4
 800201a:	d110      	bne.n	800203e <__ledf2+0x72>
 800201c:	4293      	cmp	r3, r2
 800201e:	d118      	bne.n	8002052 <__ledf2+0x86>
 8002020:	464d      	mov	r5, r9
 8002022:	432e      	orrs	r6, r5
 8002024:	d10b      	bne.n	800203e <__ledf2+0x72>
 8002026:	2a00      	cmp	r2, #0
 8002028:	d102      	bne.n	8002030 <__ledf2+0x64>
 800202a:	433c      	orrs	r4, r7
 800202c:	2c00      	cmp	r4, #0
 800202e:	d00b      	beq.n	8002048 <__ledf2+0x7c>
 8002030:	4281      	cmp	r1, r0
 8002032:	d014      	beq.n	800205e <__ledf2+0x92>
 8002034:	2002      	movs	r0, #2
 8002036:	3901      	subs	r1, #1
 8002038:	4008      	ands	r0, r1
 800203a:	3801      	subs	r0, #1
 800203c:	e000      	b.n	8002040 <__ledf2+0x74>
 800203e:	2002      	movs	r0, #2
 8002040:	bcc0      	pop	{r6, r7}
 8002042:	46b9      	mov	r9, r7
 8002044:	46b0      	mov	r8, r6
 8002046:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002048:	2800      	cmp	r0, #0
 800204a:	d1f9      	bne.n	8002040 <__ledf2+0x74>
 800204c:	2001      	movs	r0, #1
 800204e:	4240      	negs	r0, r0
 8002050:	e7f6      	b.n	8002040 <__ledf2+0x74>
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1ec      	bne.n	8002030 <__ledf2+0x64>
 8002056:	464c      	mov	r4, r9
 8002058:	4326      	orrs	r6, r4
 800205a:	d1e9      	bne.n	8002030 <__ledf2+0x64>
 800205c:	e7ea      	b.n	8002034 <__ledf2+0x68>
 800205e:	429a      	cmp	r2, r3
 8002060:	dd04      	ble.n	800206c <__ledf2+0xa0>
 8002062:	4243      	negs	r3, r0
 8002064:	4158      	adcs	r0, r3
 8002066:	0040      	lsls	r0, r0, #1
 8002068:	3801      	subs	r0, #1
 800206a:	e7e9      	b.n	8002040 <__ledf2+0x74>
 800206c:	429a      	cmp	r2, r3
 800206e:	dbeb      	blt.n	8002048 <__ledf2+0x7c>
 8002070:	454f      	cmp	r7, r9
 8002072:	d8df      	bhi.n	8002034 <__ledf2+0x68>
 8002074:	d006      	beq.n	8002084 <__ledf2+0xb8>
 8002076:	2000      	movs	r0, #0
 8002078:	454f      	cmp	r7, r9
 800207a:	d2e1      	bcs.n	8002040 <__ledf2+0x74>
 800207c:	2900      	cmp	r1, #0
 800207e:	d0e5      	beq.n	800204c <__ledf2+0x80>
 8002080:	0008      	movs	r0, r1
 8002082:	e7dd      	b.n	8002040 <__ledf2+0x74>
 8002084:	45c4      	cmp	ip, r8
 8002086:	d8d5      	bhi.n	8002034 <__ledf2+0x68>
 8002088:	2000      	movs	r0, #0
 800208a:	45c4      	cmp	ip, r8
 800208c:	d2d8      	bcs.n	8002040 <__ledf2+0x74>
 800208e:	e7f5      	b.n	800207c <__ledf2+0xb0>
 8002090:	000007ff 	.word	0x000007ff

08002094 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002098:	f001 fc16 	bl	80038c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800209c:	f000 f870 	bl	8002180 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020a0:	f000 f922 	bl	80022e8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80020a4:	f000 f8b4 	bl	8002210 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 80020a8:	4b33      	ldr	r3, [pc, #204]	; (8002178 <main+0xe4>)
 80020aa:	0018      	movs	r0, r3
 80020ac:	f001 ffa0 	bl	8003ff0 <HAL_ADC_Start_IT>
  HAL_Delay(1500);
 80020b0:	4b32      	ldr	r3, [pc, #200]	; (800217c <main+0xe8>)
 80020b2:	0018      	movs	r0, r3
 80020b4:	f001 fc8e 	bl	80039d4 <HAL_Delay>

  while (1)
  {


	  Barrido1(2,60,1500);Blink(2,1500);
 80020b8:	4b30      	ldr	r3, [pc, #192]	; (800217c <main+0xe8>)
 80020ba:	001a      	movs	r2, r3
 80020bc:	213c      	movs	r1, #60	; 0x3c
 80020be:	2002      	movs	r0, #2
 80020c0:	f000 fa72 	bl	80025a8 <Barrido1>
 80020c4:	4b2d      	ldr	r3, [pc, #180]	; (800217c <main+0xe8>)
 80020c6:	0019      	movs	r1, r3
 80020c8:	2002      	movs	r0, #2
 80020ca:	f001 faad 	bl	8003628 <Blink>
	  ArmarIzquierda(2,30,1000);Blink(2,1500);
 80020ce:	23fa      	movs	r3, #250	; 0xfa
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	001a      	movs	r2, r3
 80020d4:	211e      	movs	r1, #30
 80020d6:	2002      	movs	r0, #2
 80020d8:	f001 f862 	bl	80031a0 <ArmarIzquierda>
 80020dc:	4b27      	ldr	r3, [pc, #156]	; (800217c <main+0xe8>)
 80020de:	0019      	movs	r1, r3
 80020e0:	2002      	movs	r0, #2
 80020e2:	f001 faa1 	bl	8003628 <Blink>
	  VolumenAbrir(2,30,1000);Blink(2,1500);
 80020e6:	23fa      	movs	r3, #250	; 0xfa
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	001a      	movs	r2, r3
 80020ec:	211e      	movs	r1, #30
 80020ee:	2002      	movs	r0, #2
 80020f0:	f000 fec8 	bl	8002e84 <VolumenAbrir>
 80020f4:	4b21      	ldr	r3, [pc, #132]	; (800217c <main+0xe8>)
 80020f6:	0019      	movs	r1, r3
 80020f8:	2002      	movs	r0, #2
 80020fa:	f001 fa95 	bl	8003628 <Blink>
	  EncenderAleatorio(2,150,1500);Blink(2,1500);
 80020fe:	4b1f      	ldr	r3, [pc, #124]	; (800217c <main+0xe8>)
 8002100:	001a      	movs	r2, r3
 8002102:	2196      	movs	r1, #150	; 0x96
 8002104:	2002      	movs	r0, #2
 8002106:	f001 f931 	bl	800336c <EncenderAleatorio>
 800210a:	4b1c      	ldr	r3, [pc, #112]	; (800217c <main+0xe8>)
 800210c:	0019      	movs	r1, r3
 800210e:	2002      	movs	r0, #2
 8002110:	f001 fa8a 	bl	8003628 <Blink>
	  Girar(3,100);Blink(2,1500);
 8002114:	2164      	movs	r1, #100	; 0x64
 8002116:	2003      	movs	r0, #3
 8002118:	f000 fe64 	bl	8002de4 <Girar>
 800211c:	4b17      	ldr	r3, [pc, #92]	; (800217c <main+0xe8>)
 800211e:	0019      	movs	r1, r3
 8002120:	2002      	movs	r0, #2
 8002122:	f001 fa81 	bl	8003628 <Blink>
	  VolumenCerrar(2,30,1500);Blink(2,1500);
 8002126:	4b15      	ldr	r3, [pc, #84]	; (800217c <main+0xe8>)
 8002128:	001a      	movs	r2, r3
 800212a:	211e      	movs	r1, #30
 800212c:	2002      	movs	r0, #2
 800212e:	f000 ff71 	bl	8003014 <VolumenCerrar>
 8002132:	4b12      	ldr	r3, [pc, #72]	; (800217c <main+0xe8>)
 8002134:	0019      	movs	r1, r3
 8002136:	2002      	movs	r0, #2
 8002138:	f001 fa76 	bl	8003628 <Blink>

	  CerrarApagar(1,150,1500);
 800213c:	4b0f      	ldr	r3, [pc, #60]	; (800217c <main+0xe8>)
 800213e:	001a      	movs	r2, r3
 8002140:	2196      	movs	r1, #150	; 0x96
 8002142:	2001      	movs	r0, #1
 8002144:	f000 fcd4 	bl	8002af0 <CerrarApagar>
	  AbrirApagar(1,150,1500);
 8002148:	4b0c      	ldr	r3, [pc, #48]	; (800217c <main+0xe8>)
 800214a:	001a      	movs	r2, r3
 800214c:	2196      	movs	r1, #150	; 0x96
 800214e:	2001      	movs	r0, #1
 8002150:	f000 fb62 	bl	8002818 <AbrirApagar>
	  AbrirApagar(1,150,1500);
 8002154:	4b09      	ldr	r3, [pc, #36]	; (800217c <main+0xe8>)
 8002156:	001a      	movs	r2, r3
 8002158:	2196      	movs	r1, #150	; 0x96
 800215a:	2001      	movs	r0, #1
 800215c:	f000 fb5c 	bl	8002818 <AbrirApagar>
	  CerrarApagar(1,150,1500);
 8002160:	4b06      	ldr	r3, [pc, #24]	; (800217c <main+0xe8>)
 8002162:	001a      	movs	r2, r3
 8002164:	2196      	movs	r1, #150	; 0x96
 8002166:	2001      	movs	r0, #1
 8002168:	f000 fcc2 	bl	8002af0 <CerrarApagar>
	  Blink(2,1500);
 800216c:	4b03      	ldr	r3, [pc, #12]	; (800217c <main+0xe8>)
 800216e:	0019      	movs	r1, r3
 8002170:	2002      	movs	r0, #2
 8002172:	f001 fa59 	bl	8003628 <Blink>
	  Barrido1(2,60,1500);Blink(2,1500);
 8002176:	e79f      	b.n	80020b8 <main+0x24>
 8002178:	2000002c 	.word	0x2000002c
 800217c:	000005dc 	.word	0x000005dc

08002180 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002180:	b590      	push	{r4, r7, lr}
 8002182:	b093      	sub	sp, #76	; 0x4c
 8002184:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002186:	2414      	movs	r4, #20
 8002188:	193b      	adds	r3, r7, r4
 800218a:	0018      	movs	r0, r3
 800218c:	2334      	movs	r3, #52	; 0x34
 800218e:	001a      	movs	r2, r3
 8002190:	2100      	movs	r1, #0
 8002192:	f003 fab5 	bl	8005700 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002196:	1d3b      	adds	r3, r7, #4
 8002198:	0018      	movs	r0, r3
 800219a:	2310      	movs	r3, #16
 800219c:	001a      	movs	r2, r3
 800219e:	2100      	movs	r1, #0
 80021a0:	f003 faae 	bl	8005700 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021a4:	2380      	movs	r3, #128	; 0x80
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	0018      	movs	r0, r3
 80021aa:	f002 fdab 	bl	8004d04 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021ae:	193b      	adds	r3, r7, r4
 80021b0:	2202      	movs	r2, #2
 80021b2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021b4:	193b      	adds	r3, r7, r4
 80021b6:	2280      	movs	r2, #128	; 0x80
 80021b8:	0052      	lsls	r2, r2, #1
 80021ba:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80021bc:	193b      	adds	r3, r7, r4
 80021be:	2200      	movs	r2, #0
 80021c0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021c2:	193b      	adds	r3, r7, r4
 80021c4:	2240      	movs	r2, #64	; 0x40
 80021c6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80021c8:	193b      	adds	r3, r7, r4
 80021ca:	2200      	movs	r2, #0
 80021cc:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021ce:	193b      	adds	r3, r7, r4
 80021d0:	0018      	movs	r0, r3
 80021d2:	f002 fdd7 	bl	8004d84 <HAL_RCC_OscConfig>
 80021d6:	1e03      	subs	r3, r0, #0
 80021d8:	d001      	beq.n	80021de <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80021da:	f001 faab 	bl	8003734 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021de:	1d3b      	adds	r3, r7, #4
 80021e0:	2207      	movs	r2, #7
 80021e2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80021e4:	1d3b      	adds	r3, r7, #4
 80021e6:	2200      	movs	r2, #0
 80021e8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021ea:	1d3b      	adds	r3, r7, #4
 80021ec:	2200      	movs	r2, #0
 80021ee:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80021f0:	1d3b      	adds	r3, r7, #4
 80021f2:	2200      	movs	r2, #0
 80021f4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80021f6:	1d3b      	adds	r3, r7, #4
 80021f8:	2100      	movs	r1, #0
 80021fa:	0018      	movs	r0, r3
 80021fc:	f003 f8d2 	bl	80053a4 <HAL_RCC_ClockConfig>
 8002200:	1e03      	subs	r3, r0, #0
 8002202:	d001      	beq.n	8002208 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002204:	f001 fa96 	bl	8003734 <Error_Handler>
  }
}
 8002208:	46c0      	nop			; (mov r8, r8)
 800220a:	46bd      	mov	sp, r7
 800220c:	b013      	add	sp, #76	; 0x4c
 800220e:	bd90      	pop	{r4, r7, pc}

08002210 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002216:	1d3b      	adds	r3, r7, #4
 8002218:	0018      	movs	r0, r3
 800221a:	230c      	movs	r3, #12
 800221c:	001a      	movs	r2, r3
 800221e:	2100      	movs	r1, #0
 8002220:	f003 fa6e 	bl	8005700 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002224:	4b2d      	ldr	r3, [pc, #180]	; (80022dc <MX_ADC1_Init+0xcc>)
 8002226:	4a2e      	ldr	r2, [pc, #184]	; (80022e0 <MX_ADC1_Init+0xd0>)
 8002228:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800222a:	4b2c      	ldr	r3, [pc, #176]	; (80022dc <MX_ADC1_Init+0xcc>)
 800222c:	2280      	movs	r2, #128	; 0x80
 800222e:	05d2      	lsls	r2, r2, #23
 8002230:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002232:	4b2a      	ldr	r3, [pc, #168]	; (80022dc <MX_ADC1_Init+0xcc>)
 8002234:	2200      	movs	r2, #0
 8002236:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002238:	4b28      	ldr	r3, [pc, #160]	; (80022dc <MX_ADC1_Init+0xcc>)
 800223a:	2200      	movs	r2, #0
 800223c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800223e:	4b27      	ldr	r3, [pc, #156]	; (80022dc <MX_ADC1_Init+0xcc>)
 8002240:	2200      	movs	r2, #0
 8002242:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002244:	4b25      	ldr	r3, [pc, #148]	; (80022dc <MX_ADC1_Init+0xcc>)
 8002246:	2204      	movs	r2, #4
 8002248:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800224a:	4b24      	ldr	r3, [pc, #144]	; (80022dc <MX_ADC1_Init+0xcc>)
 800224c:	2200      	movs	r2, #0
 800224e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8002250:	4b22      	ldr	r3, [pc, #136]	; (80022dc <MX_ADC1_Init+0xcc>)
 8002252:	2200      	movs	r2, #0
 8002254:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002256:	4b21      	ldr	r3, [pc, #132]	; (80022dc <MX_ADC1_Init+0xcc>)
 8002258:	2200      	movs	r2, #0
 800225a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800225c:	4b1f      	ldr	r3, [pc, #124]	; (80022dc <MX_ADC1_Init+0xcc>)
 800225e:	2201      	movs	r2, #1
 8002260:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002262:	4b1e      	ldr	r3, [pc, #120]	; (80022dc <MX_ADC1_Init+0xcc>)
 8002264:	2220      	movs	r2, #32
 8002266:	2100      	movs	r1, #0
 8002268:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800226a:	4b1c      	ldr	r3, [pc, #112]	; (80022dc <MX_ADC1_Init+0xcc>)
 800226c:	2200      	movs	r2, #0
 800226e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002270:	4b1a      	ldr	r3, [pc, #104]	; (80022dc <MX_ADC1_Init+0xcc>)
 8002272:	2200      	movs	r2, #0
 8002274:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002276:	4b19      	ldr	r3, [pc, #100]	; (80022dc <MX_ADC1_Init+0xcc>)
 8002278:	222c      	movs	r2, #44	; 0x2c
 800227a:	2100      	movs	r1, #0
 800227c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800227e:	4b17      	ldr	r3, [pc, #92]	; (80022dc <MX_ADC1_Init+0xcc>)
 8002280:	2200      	movs	r2, #0
 8002282:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8002284:	4b15      	ldr	r3, [pc, #84]	; (80022dc <MX_ADC1_Init+0xcc>)
 8002286:	2207      	movs	r2, #7
 8002288:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 800228a:	4b14      	ldr	r3, [pc, #80]	; (80022dc <MX_ADC1_Init+0xcc>)
 800228c:	2207      	movs	r2, #7
 800228e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8002290:	4b12      	ldr	r3, [pc, #72]	; (80022dc <MX_ADC1_Init+0xcc>)
 8002292:	223c      	movs	r2, #60	; 0x3c
 8002294:	2100      	movs	r1, #0
 8002296:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002298:	4b10      	ldr	r3, [pc, #64]	; (80022dc <MX_ADC1_Init+0xcc>)
 800229a:	2200      	movs	r2, #0
 800229c:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800229e:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <MX_ADC1_Init+0xcc>)
 80022a0:	0018      	movs	r0, r3
 80022a2:	f001 fcfd 	bl	8003ca0 <HAL_ADC_Init>
 80022a6:	1e03      	subs	r3, r0, #0
 80022a8:	d001      	beq.n	80022ae <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80022aa:	f001 fa43 	bl	8003734 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80022ae:	1d3b      	adds	r3, r7, #4
 80022b0:	4a0c      	ldr	r2, [pc, #48]	; (80022e4 <MX_ADC1_Init+0xd4>)
 80022b2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80022b4:	1d3b      	adds	r3, r7, #4
 80022b6:	2200      	movs	r2, #0
 80022b8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80022ba:	1d3b      	adds	r3, r7, #4
 80022bc:	2200      	movs	r2, #0
 80022be:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022c0:	1d3a      	adds	r2, r7, #4
 80022c2:	4b06      	ldr	r3, [pc, #24]	; (80022dc <MX_ADC1_Init+0xcc>)
 80022c4:	0011      	movs	r1, r2
 80022c6:	0018      	movs	r0, r3
 80022c8:	f002 f83e 	bl	8004348 <HAL_ADC_ConfigChannel>
 80022cc:	1e03      	subs	r3, r0, #0
 80022ce:	d001      	beq.n	80022d4 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80022d0:	f001 fa30 	bl	8003734 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80022d4:	46c0      	nop			; (mov r8, r8)
 80022d6:	46bd      	mov	sp, r7
 80022d8:	b004      	add	sp, #16
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	2000002c 	.word	0x2000002c
 80022e0:	40012400 	.word	0x40012400
 80022e4:	2c000800 	.word	0x2c000800

080022e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022e8:	b590      	push	{r4, r7, lr}
 80022ea:	b089      	sub	sp, #36	; 0x24
 80022ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ee:	240c      	movs	r4, #12
 80022f0:	193b      	adds	r3, r7, r4
 80022f2:	0018      	movs	r0, r3
 80022f4:	2314      	movs	r3, #20
 80022f6:	001a      	movs	r2, r3
 80022f8:	2100      	movs	r1, #0
 80022fa:	f003 fa01 	bl	8005700 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022fe:	4b39      	ldr	r3, [pc, #228]	; (80023e4 <MX_GPIO_Init+0xfc>)
 8002300:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002302:	4b38      	ldr	r3, [pc, #224]	; (80023e4 <MX_GPIO_Init+0xfc>)
 8002304:	2102      	movs	r1, #2
 8002306:	430a      	orrs	r2, r1
 8002308:	635a      	str	r2, [r3, #52]	; 0x34
 800230a:	4b36      	ldr	r3, [pc, #216]	; (80023e4 <MX_GPIO_Init+0xfc>)
 800230c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800230e:	2202      	movs	r2, #2
 8002310:	4013      	ands	r3, r2
 8002312:	60bb      	str	r3, [r7, #8]
 8002314:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002316:	4b33      	ldr	r3, [pc, #204]	; (80023e4 <MX_GPIO_Init+0xfc>)
 8002318:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800231a:	4b32      	ldr	r3, [pc, #200]	; (80023e4 <MX_GPIO_Init+0xfc>)
 800231c:	2104      	movs	r1, #4
 800231e:	430a      	orrs	r2, r1
 8002320:	635a      	str	r2, [r3, #52]	; 0x34
 8002322:	4b30      	ldr	r3, [pc, #192]	; (80023e4 <MX_GPIO_Init+0xfc>)
 8002324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002326:	2204      	movs	r2, #4
 8002328:	4013      	ands	r3, r2
 800232a:	607b      	str	r3, [r7, #4]
 800232c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800232e:	4b2d      	ldr	r3, [pc, #180]	; (80023e4 <MX_GPIO_Init+0xfc>)
 8002330:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002332:	4b2c      	ldr	r3, [pc, #176]	; (80023e4 <MX_GPIO_Init+0xfc>)
 8002334:	2101      	movs	r1, #1
 8002336:	430a      	orrs	r2, r1
 8002338:	635a      	str	r2, [r3, #52]	; 0x34
 800233a:	4b2a      	ldr	r3, [pc, #168]	; (80023e4 <MX_GPIO_Init+0xfc>)
 800233c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800233e:	2201      	movs	r2, #1
 8002340:	4013      	ands	r3, r2
 8002342:	603b      	str	r3, [r7, #0]
 8002344:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED12_Pin|LED13_Pin|LED14_Pin
 8002346:	4928      	ldr	r1, [pc, #160]	; (80023e8 <MX_GPIO_Init+0x100>)
 8002348:	4b28      	ldr	r3, [pc, #160]	; (80023ec <MX_GPIO_Init+0x104>)
 800234a:	2200      	movs	r2, #0
 800234c:	0018      	movs	r0, r3
 800234e:	f002 fcbb 	bl	8004cc8 <HAL_GPIO_WritePin>
                          |LED22_Pin|LED23_Pin|LED24_Pin|LED25_Pin
                          |LED26_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_Pin|LED3_Pin|LED17_Pin, GPIO_PIN_RESET);
 8002352:	4927      	ldr	r1, [pc, #156]	; (80023f0 <MX_GPIO_Init+0x108>)
 8002354:	4b27      	ldr	r3, [pc, #156]	; (80023f4 <MX_GPIO_Init+0x10c>)
 8002356:	2200      	movs	r2, #0
 8002358:	0018      	movs	r0, r3
 800235a:	f002 fcb5 	bl	8004cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin
 800235e:	4926      	ldr	r1, [pc, #152]	; (80023f8 <MX_GPIO_Init+0x110>)
 8002360:	23a0      	movs	r3, #160	; 0xa0
 8002362:	05db      	lsls	r3, r3, #23
 8002364:	2200      	movs	r2, #0
 8002366:	0018      	movs	r0, r3
 8002368:	f002 fcae 	bl	8004cc8 <HAL_GPIO_WritePin>
                          |LED20_Pin|LED21_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED1_Pin LED12_Pin LED13_Pin LED14_Pin
                           LED22_Pin LED23_Pin LED24_Pin LED25_Pin
                           LED26_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED12_Pin|LED13_Pin|LED14_Pin
 800236c:	193b      	adds	r3, r7, r4
 800236e:	4a1e      	ldr	r2, [pc, #120]	; (80023e8 <MX_GPIO_Init+0x100>)
 8002370:	601a      	str	r2, [r3, #0]
                          |LED22_Pin|LED23_Pin|LED24_Pin|LED25_Pin
                          |LED26_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002372:	193b      	adds	r3, r7, r4
 8002374:	2211      	movs	r2, #17
 8002376:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002378:	193b      	adds	r3, r7, r4
 800237a:	2200      	movs	r2, #0
 800237c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237e:	193b      	adds	r3, r7, r4
 8002380:	2200      	movs	r2, #0
 8002382:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002384:	193b      	adds	r3, r7, r4
 8002386:	4a19      	ldr	r2, [pc, #100]	; (80023ec <MX_GPIO_Init+0x104>)
 8002388:	0019      	movs	r1, r3
 800238a:	0010      	movs	r0, r2
 800238c:	f002 fb38 	bl	8004a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED3_Pin LED17_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin|LED17_Pin;
 8002390:	193b      	adds	r3, r7, r4
 8002392:	4a17      	ldr	r2, [pc, #92]	; (80023f0 <MX_GPIO_Init+0x108>)
 8002394:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002396:	193b      	adds	r3, r7, r4
 8002398:	2211      	movs	r2, #17
 800239a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239c:	193b      	adds	r3, r7, r4
 800239e:	2200      	movs	r2, #0
 80023a0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a2:	193b      	adds	r3, r7, r4
 80023a4:	2200      	movs	r2, #0
 80023a6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023a8:	193b      	adds	r3, r7, r4
 80023aa:	4a12      	ldr	r2, [pc, #72]	; (80023f4 <MX_GPIO_Init+0x10c>)
 80023ac:	0019      	movs	r1, r3
 80023ae:	0010      	movs	r0, r2
 80023b0:	f002 fb26 	bl	8004a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED5_Pin LED6_Pin LED7_Pin
                           LED8_Pin LED9_Pin LED10_Pin LED11_Pin
                           LED15_Pin LED16_Pin LED18_Pin LED19_Pin
                           LED20_Pin LED21_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin
 80023b4:	0021      	movs	r1, r4
 80023b6:	187b      	adds	r3, r7, r1
 80023b8:	4a0f      	ldr	r2, [pc, #60]	; (80023f8 <MX_GPIO_Init+0x110>)
 80023ba:	601a      	str	r2, [r3, #0]
                          |LED8_Pin|LED9_Pin|LED10_Pin|LED11_Pin
                          |LED15_Pin|LED16_Pin|LED18_Pin|LED19_Pin
                          |LED20_Pin|LED21_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80023bc:	187b      	adds	r3, r7, r1
 80023be:	2211      	movs	r2, #17
 80023c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c2:	187b      	adds	r3, r7, r1
 80023c4:	2200      	movs	r2, #0
 80023c6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c8:	187b      	adds	r3, r7, r1
 80023ca:	2200      	movs	r2, #0
 80023cc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ce:	187a      	adds	r2, r7, r1
 80023d0:	23a0      	movs	r3, #160	; 0xa0
 80023d2:	05db      	lsls	r3, r3, #23
 80023d4:	0011      	movs	r1, r2
 80023d6:	0018      	movs	r0, r3
 80023d8:	f002 fb12 	bl	8004a00 <HAL_GPIO_Init>

}
 80023dc:	46c0      	nop			; (mov r8, r8)
 80023de:	46bd      	mov	sp, r7
 80023e0:	b009      	add	sp, #36	; 0x24
 80023e2:	bd90      	pop	{r4, r7, pc}
 80023e4:	40021000 	.word	0x40021000
 80023e8:	0000037f 	.word	0x0000037f
 80023ec:	50000400 	.word	0x50000400
 80023f0:	0000c040 	.word	0x0000c040
 80023f4:	50000800 	.word	0x50000800
 80023f8:	00009fff 	.word	0x00009fff

080023fc <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
	adc = HAL_ADC_GetValue(&hadc1);
 8002404:	4b0e      	ldr	r3, [pc, #56]	; (8002440 <HAL_ADC_ConvCpltCallback+0x44>)
 8002406:	0018      	movs	r0, r3
 8002408:	f001 fe6a 	bl	80040e0 <HAL_ADC_GetValue>
 800240c:	0003      	movs	r3, r0
 800240e:	b29a      	uxth	r2, r3
 8002410:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <HAL_ADC_ConvCpltCallback+0x48>)
 8002412:	801a      	strh	r2, [r3, #0]
	vel = (float)adc/1023;
 8002414:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <HAL_ADC_ConvCpltCallback+0x48>)
 8002416:	881b      	ldrh	r3, [r3, #0]
 8002418:	0018      	movs	r0, r3
 800241a:	f7fe fd2b 	bl	8000e74 <__aeabi_ui2f>
 800241e:	1c03      	adds	r3, r0, #0
 8002420:	4909      	ldr	r1, [pc, #36]	; (8002448 <HAL_ADC_ConvCpltCallback+0x4c>)
 8002422:	1c18      	adds	r0, r3, #0
 8002424:	f7fe f8cc 	bl	80005c0 <__aeabi_fdiv>
 8002428:	1c03      	adds	r3, r0, #0
 800242a:	1c1a      	adds	r2, r3, #0
 800242c:	4b07      	ldr	r3, [pc, #28]	; (800244c <HAL_ADC_ConvCpltCallback+0x50>)
 800242e:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_IT(&hadc1);
 8002430:	4b03      	ldr	r3, [pc, #12]	; (8002440 <HAL_ADC_ConvCpltCallback+0x44>)
 8002432:	0018      	movs	r0, r3
 8002434:	f001 fddc 	bl	8003ff0 <HAL_ADC_Start_IT>
}
 8002438:	46c0      	nop			; (mov r8, r8)
 800243a:	46bd      	mov	sp, r7
 800243c:	b002      	add	sp, #8
 800243e:	bd80      	pop	{r7, pc}
 8002440:	2000002c 	.word	0x2000002c
 8002444:	20000090 	.word	0x20000090
 8002448:	447fc000 	.word	0x447fc000
 800244c:	20000094 	.word	0x20000094

08002450 <Refresh_ADC_Value>:

float Refresh_ADC_Value(void){
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
	adc = HAL_ADC_GetValue(&hadc1);
 8002454:	4b0f      	ldr	r3, [pc, #60]	; (8002494 <Refresh_ADC_Value+0x44>)
 8002456:	0018      	movs	r0, r3
 8002458:	f001 fe42 	bl	80040e0 <HAL_ADC_GetValue>
 800245c:	0003      	movs	r3, r0
 800245e:	b29a      	uxth	r2, r3
 8002460:	4b0d      	ldr	r3, [pc, #52]	; (8002498 <Refresh_ADC_Value+0x48>)
 8002462:	801a      	strh	r2, [r3, #0]
	vel = (float)adc/1023;
 8002464:	4b0c      	ldr	r3, [pc, #48]	; (8002498 <Refresh_ADC_Value+0x48>)
 8002466:	881b      	ldrh	r3, [r3, #0]
 8002468:	0018      	movs	r0, r3
 800246a:	f7fe fd03 	bl	8000e74 <__aeabi_ui2f>
 800246e:	1c03      	adds	r3, r0, #0
 8002470:	490a      	ldr	r1, [pc, #40]	; (800249c <Refresh_ADC_Value+0x4c>)
 8002472:	1c18      	adds	r0, r3, #0
 8002474:	f7fe f8a4 	bl	80005c0 <__aeabi_fdiv>
 8002478:	1c03      	adds	r3, r0, #0
 800247a:	1c1a      	adds	r2, r3, #0
 800247c:	4b08      	ldr	r3, [pc, #32]	; (80024a0 <Refresh_ADC_Value+0x50>)
 800247e:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_IT(&hadc1);
 8002480:	4b04      	ldr	r3, [pc, #16]	; (8002494 <Refresh_ADC_Value+0x44>)
 8002482:	0018      	movs	r0, r3
 8002484:	f001 fdb4 	bl	8003ff0 <HAL_ADC_Start_IT>
	return vel;
 8002488:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <Refresh_ADC_Value+0x50>)
 800248a:	681b      	ldr	r3, [r3, #0]
}
 800248c:	1c18      	adds	r0, r3, #0
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	46c0      	nop			; (mov r8, r8)
 8002494:	2000002c 	.word	0x2000002c
 8002498:	20000090 	.word	0x20000090
 800249c:	447fc000 	.word	0x447fc000
 80024a0:	20000094 	.word	0x20000094

080024a4 <ControlLeds>:

void ControlLeds(uint8_t led, uint8_t state){
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	0002      	movs	r2, r0
 80024ac:	1dfb      	adds	r3, r7, #7
 80024ae:	701a      	strb	r2, [r3, #0]
 80024b0:	1dbb      	adds	r3, r7, #6
 80024b2:	1c0a      	adds	r2, r1, #0
 80024b4:	701a      	strb	r2, [r3, #0]
	switch(led){
 80024b6:	1dfb      	adds	r3, r7, #7
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b06      	cmp	r3, #6
 80024bc:	d869      	bhi.n	8002592 <ControlLeds+0xee>
 80024be:	009a      	lsls	r2, r3, #2
 80024c0:	4b36      	ldr	r3, [pc, #216]	; (800259c <ControlLeds+0xf8>)
 80024c2:	18d3      	adds	r3, r2, r3
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	469f      	mov	pc, r3
		case 1:  L1(state); break;
 80024c8:	1dbb      	adds	r3, r7, #6
 80024ca:	781a      	ldrb	r2, [r3, #0]
 80024cc:	2380      	movs	r3, #128	; 0x80
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4833      	ldr	r0, [pc, #204]	; (80025a0 <ControlLeds+0xfc>)
 80024d2:	0019      	movs	r1, r3
 80024d4:	f002 fbf8 	bl	8004cc8 <HAL_GPIO_WritePin>
 80024d8:	1dbb      	adds	r3, r7, #6
 80024da:	781a      	ldrb	r2, [r3, #0]
 80024dc:	23a0      	movs	r3, #160	; 0xa0
 80024de:	05db      	lsls	r3, r3, #23
 80024e0:	2108      	movs	r1, #8
 80024e2:	0018      	movs	r0, r3
 80024e4:	f002 fbf0 	bl	8004cc8 <HAL_GPIO_WritePin>
 80024e8:	e053      	b.n	8002592 <ControlLeds+0xee>
		case 2:  L2(state); break;
 80024ea:	1dbb      	adds	r3, r7, #6
 80024ec:	781a      	ldrb	r2, [r3, #0]
 80024ee:	2380      	movs	r3, #128	; 0x80
 80024f0:	01db      	lsls	r3, r3, #7
 80024f2:	482c      	ldr	r0, [pc, #176]	; (80025a4 <ControlLeds+0x100>)
 80024f4:	0019      	movs	r1, r3
 80024f6:	f002 fbe7 	bl	8004cc8 <HAL_GPIO_WritePin>
 80024fa:	1dbb      	adds	r3, r7, #6
 80024fc:	781a      	ldrb	r2, [r3, #0]
 80024fe:	23a0      	movs	r3, #160	; 0xa0
 8002500:	05db      	lsls	r3, r3, #23
 8002502:	2110      	movs	r1, #16
 8002504:	0018      	movs	r0, r3
 8002506:	f002 fbdf 	bl	8004cc8 <HAL_GPIO_WritePin>
 800250a:	e042      	b.n	8002592 <ControlLeds+0xee>
		case 3:  L3(state); break;
 800250c:	1dbb      	adds	r3, r7, #6
 800250e:	781a      	ldrb	r2, [r3, #0]
 8002510:	2380      	movs	r3, #128	; 0x80
 8002512:	021b      	lsls	r3, r3, #8
 8002514:	4823      	ldr	r0, [pc, #140]	; (80025a4 <ControlLeds+0x100>)
 8002516:	0019      	movs	r1, r3
 8002518:	f002 fbd6 	bl	8004cc8 <HAL_GPIO_WritePin>
 800251c:	1dbb      	adds	r3, r7, #6
 800251e:	781a      	ldrb	r2, [r3, #0]
 8002520:	23a0      	movs	r3, #160	; 0xa0
 8002522:	05db      	lsls	r3, r3, #23
 8002524:	2120      	movs	r1, #32
 8002526:	0018      	movs	r0, r3
 8002528:	f002 fbce 	bl	8004cc8 <HAL_GPIO_WritePin>
 800252c:	e031      	b.n	8002592 <ControlLeds+0xee>
		case 4:  L4(state); break;
 800252e:	1dbb      	adds	r3, r7, #6
 8002530:	781a      	ldrb	r2, [r3, #0]
 8002532:	23a0      	movs	r3, #160	; 0xa0
 8002534:	05db      	lsls	r3, r3, #23
 8002536:	2101      	movs	r1, #1
 8002538:	0018      	movs	r0, r3
 800253a:	f002 fbc5 	bl	8004cc8 <HAL_GPIO_WritePin>
 800253e:	1dbb      	adds	r3, r7, #6
 8002540:	781a      	ldrb	r2, [r3, #0]
 8002542:	23a0      	movs	r3, #160	; 0xa0
 8002544:	05db      	lsls	r3, r3, #23
 8002546:	2140      	movs	r1, #64	; 0x40
 8002548:	0018      	movs	r0, r3
 800254a:	f002 fbbd 	bl	8004cc8 <HAL_GPIO_WritePin>
 800254e:	e020      	b.n	8002592 <ControlLeds+0xee>
		case 5:  L5(state); break;
 8002550:	1dbb      	adds	r3, r7, #6
 8002552:	781a      	ldrb	r2, [r3, #0]
 8002554:	23a0      	movs	r3, #160	; 0xa0
 8002556:	05db      	lsls	r3, r3, #23
 8002558:	2102      	movs	r1, #2
 800255a:	0018      	movs	r0, r3
 800255c:	f002 fbb4 	bl	8004cc8 <HAL_GPIO_WritePin>
 8002560:	1dbb      	adds	r3, r7, #6
 8002562:	781a      	ldrb	r2, [r3, #0]
 8002564:	23a0      	movs	r3, #160	; 0xa0
 8002566:	05db      	lsls	r3, r3, #23
 8002568:	2180      	movs	r1, #128	; 0x80
 800256a:	0018      	movs	r0, r3
 800256c:	f002 fbac 	bl	8004cc8 <HAL_GPIO_WritePin>
 8002570:	e00f      	b.n	8002592 <ControlLeds+0xee>
		case 6:  L6(state); break;
 8002572:	1dbb      	adds	r3, r7, #6
 8002574:	781a      	ldrb	r2, [r3, #0]
 8002576:	23a0      	movs	r3, #160	; 0xa0
 8002578:	05db      	lsls	r3, r3, #23
 800257a:	2104      	movs	r1, #4
 800257c:	0018      	movs	r0, r3
 800257e:	f002 fba3 	bl	8004cc8 <HAL_GPIO_WritePin>
 8002582:	1dbb      	adds	r3, r7, #6
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	4806      	ldr	r0, [pc, #24]	; (80025a0 <ControlLeds+0xfc>)
 8002588:	001a      	movs	r2, r3
 800258a:	2101      	movs	r1, #1
 800258c:	f002 fb9c 	bl	8004cc8 <HAL_GPIO_WritePin>
 8002590:	46c0      	nop			; (mov r8, r8)
//		case 23: L23(state);break;
//		case 24: L24(state);break;
//		case 25: L25(state);break;
//		case 26: L26(state);break;
	}
}
 8002592:	46c0      	nop			; (mov r8, r8)
 8002594:	46bd      	mov	sp, r7
 8002596:	b002      	add	sp, #8
 8002598:	bd80      	pop	{r7, pc}
 800259a:	46c0      	nop			; (mov r8, r8)
 800259c:	08005838 	.word	0x08005838
 80025a0:	50000400 	.word	0x50000400
 80025a4:	50000800 	.word	0x50000800

080025a8 <Barrido1>:

void Barrido1(uint8_t veces, uint16_t tiempo, uint16_t tiempo2){
 80025a8:	b5b0      	push	{r4, r5, r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	0004      	movs	r4, r0
 80025b0:	0008      	movs	r0, r1
 80025b2:	0011      	movs	r1, r2
 80025b4:	1dfb      	adds	r3, r7, #7
 80025b6:	1c22      	adds	r2, r4, #0
 80025b8:	701a      	strb	r2, [r3, #0]
 80025ba:	1d3b      	adds	r3, r7, #4
 80025bc:	1c02      	adds	r2, r0, #0
 80025be:	801a      	strh	r2, [r3, #0]
 80025c0:	1cbb      	adds	r3, r7, #2
 80025c2:	1c0a      	adds	r2, r1, #0
 80025c4:	801a      	strh	r2, [r3, #0]
	for(uint8_t v=0;v<veces;v++){
 80025c6:	230f      	movs	r3, #15
 80025c8:	18fb      	adds	r3, r7, r3
 80025ca:	2200      	movs	r2, #0
 80025cc:	701a      	strb	r2, [r3, #0]
 80025ce:	e074      	b.n	80026ba <Barrido1+0x112>
		for(uint8_t i=1; i<=cantLeds; i++){ControlLeds(i,1);HAL_Delay(tiempo*Refresh_ADC_Value());}
 80025d0:	230e      	movs	r3, #14
 80025d2:	18fb      	adds	r3, r7, r3
 80025d4:	2201      	movs	r2, #1
 80025d6:	701a      	strb	r2, [r3, #0]
 80025d8:	e020      	b.n	800261c <Barrido1+0x74>
 80025da:	250e      	movs	r5, #14
 80025dc:	197b      	adds	r3, r7, r5
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2101      	movs	r1, #1
 80025e2:	0018      	movs	r0, r3
 80025e4:	f7ff ff5e 	bl	80024a4 <ControlLeds>
 80025e8:	1d3b      	adds	r3, r7, #4
 80025ea:	881b      	ldrh	r3, [r3, #0]
 80025ec:	0018      	movs	r0, r3
 80025ee:	f7fe fbf3 	bl	8000dd8 <__aeabi_i2f>
 80025f2:	1c04      	adds	r4, r0, #0
 80025f4:	f7ff ff2c 	bl	8002450 <Refresh_ADC_Value>
 80025f8:	1c03      	adds	r3, r0, #0
 80025fa:	1c19      	adds	r1, r3, #0
 80025fc:	1c20      	adds	r0, r4, #0
 80025fe:	f7fe f8f7 	bl	80007f0 <__aeabi_fmul>
 8002602:	1c03      	adds	r3, r0, #0
 8002604:	1c18      	adds	r0, r3, #0
 8002606:	f7fd fe07 	bl	8000218 <__aeabi_f2uiz>
 800260a:	0003      	movs	r3, r0
 800260c:	0018      	movs	r0, r3
 800260e:	f001 f9e1 	bl	80039d4 <HAL_Delay>
 8002612:	197b      	adds	r3, r7, r5
 8002614:	781a      	ldrb	r2, [r3, #0]
 8002616:	197b      	adds	r3, r7, r5
 8002618:	3201      	adds	r2, #1
 800261a:	701a      	strb	r2, [r3, #0]
 800261c:	4b2d      	ldr	r3, [pc, #180]	; (80026d4 <Barrido1+0x12c>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	220e      	movs	r2, #14
 8002622:	18ba      	adds	r2, r7, r2
 8002624:	7812      	ldrb	r2, [r2, #0]
 8002626:	429a      	cmp	r2, r3
 8002628:	d9d7      	bls.n	80025da <Barrido1+0x32>
		HAL_Delay(tiempo2*Refresh_ADC_Value());
 800262a:	1cbb      	adds	r3, r7, #2
 800262c:	881b      	ldrh	r3, [r3, #0]
 800262e:	0018      	movs	r0, r3
 8002630:	f7fe fbd2 	bl	8000dd8 <__aeabi_i2f>
 8002634:	1c04      	adds	r4, r0, #0
 8002636:	f7ff ff0b 	bl	8002450 <Refresh_ADC_Value>
 800263a:	1c03      	adds	r3, r0, #0
 800263c:	1c19      	adds	r1, r3, #0
 800263e:	1c20      	adds	r0, r4, #0
 8002640:	f7fe f8d6 	bl	80007f0 <__aeabi_fmul>
 8002644:	1c03      	adds	r3, r0, #0
 8002646:	1c18      	adds	r0, r3, #0
 8002648:	f7fd fde6 	bl	8000218 <__aeabi_f2uiz>
 800264c:	0003      	movs	r3, r0
 800264e:	0018      	movs	r0, r3
 8002650:	f001 f9c0 	bl	80039d4 <HAL_Delay>
		for(uint8_t i=1; i<=cantLeds; i++){ControlLeds(i,0);HAL_Delay(tiempo*Refresh_ADC_Value());}
 8002654:	230d      	movs	r3, #13
 8002656:	18fb      	adds	r3, r7, r3
 8002658:	2201      	movs	r2, #1
 800265a:	701a      	strb	r2, [r3, #0]
 800265c:	e020      	b.n	80026a0 <Barrido1+0xf8>
 800265e:	250d      	movs	r5, #13
 8002660:	197b      	adds	r3, r7, r5
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	2100      	movs	r1, #0
 8002666:	0018      	movs	r0, r3
 8002668:	f7ff ff1c 	bl	80024a4 <ControlLeds>
 800266c:	1d3b      	adds	r3, r7, #4
 800266e:	881b      	ldrh	r3, [r3, #0]
 8002670:	0018      	movs	r0, r3
 8002672:	f7fe fbb1 	bl	8000dd8 <__aeabi_i2f>
 8002676:	1c04      	adds	r4, r0, #0
 8002678:	f7ff feea 	bl	8002450 <Refresh_ADC_Value>
 800267c:	1c03      	adds	r3, r0, #0
 800267e:	1c19      	adds	r1, r3, #0
 8002680:	1c20      	adds	r0, r4, #0
 8002682:	f7fe f8b5 	bl	80007f0 <__aeabi_fmul>
 8002686:	1c03      	adds	r3, r0, #0
 8002688:	1c18      	adds	r0, r3, #0
 800268a:	f7fd fdc5 	bl	8000218 <__aeabi_f2uiz>
 800268e:	0003      	movs	r3, r0
 8002690:	0018      	movs	r0, r3
 8002692:	f001 f99f 	bl	80039d4 <HAL_Delay>
 8002696:	197b      	adds	r3, r7, r5
 8002698:	781a      	ldrb	r2, [r3, #0]
 800269a:	197b      	adds	r3, r7, r5
 800269c:	3201      	adds	r2, #1
 800269e:	701a      	strb	r2, [r3, #0]
 80026a0:	4b0c      	ldr	r3, [pc, #48]	; (80026d4 <Barrido1+0x12c>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	220d      	movs	r2, #13
 80026a6:	18ba      	adds	r2, r7, r2
 80026a8:	7812      	ldrb	r2, [r2, #0]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d9d7      	bls.n	800265e <Barrido1+0xb6>
	for(uint8_t v=0;v<veces;v++){
 80026ae:	210f      	movs	r1, #15
 80026b0:	187b      	adds	r3, r7, r1
 80026b2:	781a      	ldrb	r2, [r3, #0]
 80026b4:	187b      	adds	r3, r7, r1
 80026b6:	3201      	adds	r2, #1
 80026b8:	701a      	strb	r2, [r3, #0]
 80026ba:	230f      	movs	r3, #15
 80026bc:	18fa      	adds	r2, r7, r3
 80026be:	1dfb      	adds	r3, r7, #7
 80026c0:	7812      	ldrb	r2, [r2, #0]
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d383      	bcc.n	80025d0 <Barrido1+0x28>
	}
}
 80026c8:	46c0      	nop			; (mov r8, r8)
 80026ca:	46c0      	nop			; (mov r8, r8)
 80026cc:	46bd      	mov	sp, r7
 80026ce:	b004      	add	sp, #16
 80026d0:	bdb0      	pop	{r4, r5, r7, pc}
 80026d2:	46c0      	nop			; (mov r8, r8)
 80026d4:	20000000 	.word	0x20000000

080026d8 <Encender_1_Led_2>:
			ControlLeds(i,0);
		}
	}
}

void Encender_1_Led_2(uint8_t num_led){
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	0002      	movs	r2, r0
 80026e0:	1dfb      	adds	r3, r7, #7
 80026e2:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=1; i<=cantLeds; i++){
 80026e4:	230f      	movs	r3, #15
 80026e6:	18fb      	adds	r3, r7, r3
 80026e8:	2201      	movs	r2, #1
 80026ea:	701a      	strb	r2, [r3, #0]
 80026ec:	e01a      	b.n	8002724 <Encender_1_Led_2+0x4c>
		if(i<=num_led){
 80026ee:	210f      	movs	r1, #15
 80026f0:	187a      	adds	r2, r7, r1
 80026f2:	1dfb      	adds	r3, r7, #7
 80026f4:	7812      	ldrb	r2, [r2, #0]
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d806      	bhi.n	800270a <Encender_1_Led_2+0x32>
			ControlLeds(i,1);
 80026fc:	187b      	adds	r3, r7, r1
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2101      	movs	r1, #1
 8002702:	0018      	movs	r0, r3
 8002704:	f7ff fece 	bl	80024a4 <ControlLeds>
 8002708:	e006      	b.n	8002718 <Encender_1_Led_2+0x40>
		}else{
			ControlLeds(i,0);
 800270a:	230f      	movs	r3, #15
 800270c:	18fb      	adds	r3, r7, r3
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2100      	movs	r1, #0
 8002712:	0018      	movs	r0, r3
 8002714:	f7ff fec6 	bl	80024a4 <ControlLeds>
	for(uint8_t i=1; i<=cantLeds; i++){
 8002718:	210f      	movs	r1, #15
 800271a:	187b      	adds	r3, r7, r1
 800271c:	781a      	ldrb	r2, [r3, #0]
 800271e:	187b      	adds	r3, r7, r1
 8002720:	3201      	adds	r2, #1
 8002722:	701a      	strb	r2, [r3, #0]
 8002724:	4b05      	ldr	r3, [pc, #20]	; (800273c <Encender_1_Led_2+0x64>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	220f      	movs	r2, #15
 800272a:	18ba      	adds	r2, r7, r2
 800272c:	7812      	ldrb	r2, [r2, #0]
 800272e:	429a      	cmp	r2, r3
 8002730:	d9dd      	bls.n	80026ee <Encender_1_Led_2+0x16>
		}
	}
}
 8002732:	46c0      	nop			; (mov r8, r8)
 8002734:	46c0      	nop			; (mov r8, r8)
 8002736:	46bd      	mov	sp, r7
 8002738:	b004      	add	sp, #16
 800273a:	bd80      	pop	{r7, pc}
 800273c:	20000000 	.word	0x20000000

08002740 <Encender_1_Led_3>:

void Encender_1_Led_3(uint8_t num_led){
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	0002      	movs	r2, r0
 8002748:	1dfb      	adds	r3, r7, #7
 800274a:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=1; i<=cantLeds; i++){
 800274c:	230f      	movs	r3, #15
 800274e:	18fb      	adds	r3, r7, r3
 8002750:	2201      	movs	r2, #1
 8002752:	701a      	strb	r2, [r3, #0]
 8002754:	e01a      	b.n	800278c <Encender_1_Led_3+0x4c>
		if(i>=num_led){
 8002756:	210f      	movs	r1, #15
 8002758:	187a      	adds	r2, r7, r1
 800275a:	1dfb      	adds	r3, r7, #7
 800275c:	7812      	ldrb	r2, [r2, #0]
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	429a      	cmp	r2, r3
 8002762:	d306      	bcc.n	8002772 <Encender_1_Led_3+0x32>
			ControlLeds(i,1);
 8002764:	187b      	adds	r3, r7, r1
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	2101      	movs	r1, #1
 800276a:	0018      	movs	r0, r3
 800276c:	f7ff fe9a 	bl	80024a4 <ControlLeds>
 8002770:	e006      	b.n	8002780 <Encender_1_Led_3+0x40>
		}else{
			ControlLeds(i,0);
 8002772:	230f      	movs	r3, #15
 8002774:	18fb      	adds	r3, r7, r3
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	2100      	movs	r1, #0
 800277a:	0018      	movs	r0, r3
 800277c:	f7ff fe92 	bl	80024a4 <ControlLeds>
	for(uint8_t i=1; i<=cantLeds; i++){
 8002780:	210f      	movs	r1, #15
 8002782:	187b      	adds	r3, r7, r1
 8002784:	781a      	ldrb	r2, [r3, #0]
 8002786:	187b      	adds	r3, r7, r1
 8002788:	3201      	adds	r2, #1
 800278a:	701a      	strb	r2, [r3, #0]
 800278c:	4b05      	ldr	r3, [pc, #20]	; (80027a4 <Encender_1_Led_3+0x64>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	220f      	movs	r2, #15
 8002792:	18ba      	adds	r2, r7, r2
 8002794:	7812      	ldrb	r2, [r2, #0]
 8002796:	429a      	cmp	r2, r3
 8002798:	d9dd      	bls.n	8002756 <Encender_1_Led_3+0x16>
		}
	}
}
 800279a:	46c0      	nop			; (mov r8, r8)
 800279c:	46c0      	nop			; (mov r8, r8)
 800279e:	46bd      	mov	sp, r7
 80027a0:	b004      	add	sp, #16
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	20000000 	.word	0x20000000

080027a8 <Encender_1_Led_4>:

void Encender_1_Led_4(uint8_t num_led, uint8_t indice){
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	0002      	movs	r2, r0
 80027b0:	1dfb      	adds	r3, r7, #7
 80027b2:	701a      	strb	r2, [r3, #0]
 80027b4:	1dbb      	adds	r3, r7, #6
 80027b6:	1c0a      	adds	r2, r1, #0
 80027b8:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=cantLeds;i>=indice;i--){
 80027ba:	230f      	movs	r3, #15
 80027bc:	18fb      	adds	r3, r7, r3
 80027be:	4a15      	ldr	r2, [pc, #84]	; (8002814 <Encender_1_Led_4+0x6c>)
 80027c0:	7812      	ldrb	r2, [r2, #0]
 80027c2:	701a      	strb	r2, [r3, #0]
 80027c4:	e01a      	b.n	80027fc <Encender_1_Led_4+0x54>
		if(i == num_led){
 80027c6:	210f      	movs	r1, #15
 80027c8:	187a      	adds	r2, r7, r1
 80027ca:	1dfb      	adds	r3, r7, #7
 80027cc:	7812      	ldrb	r2, [r2, #0]
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d106      	bne.n	80027e2 <Encender_1_Led_4+0x3a>
			ControlLeds(i,1);
 80027d4:	187b      	adds	r3, r7, r1
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2101      	movs	r1, #1
 80027da:	0018      	movs	r0, r3
 80027dc:	f7ff fe62 	bl	80024a4 <ControlLeds>
 80027e0:	e006      	b.n	80027f0 <Encender_1_Led_4+0x48>
		}else{
			ControlLeds(i,0);
 80027e2:	230f      	movs	r3, #15
 80027e4:	18fb      	adds	r3, r7, r3
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2100      	movs	r1, #0
 80027ea:	0018      	movs	r0, r3
 80027ec:	f7ff fe5a 	bl	80024a4 <ControlLeds>
	for(uint8_t i=cantLeds;i>=indice;i--){
 80027f0:	210f      	movs	r1, #15
 80027f2:	187b      	adds	r3, r7, r1
 80027f4:	781a      	ldrb	r2, [r3, #0]
 80027f6:	187b      	adds	r3, r7, r1
 80027f8:	3a01      	subs	r2, #1
 80027fa:	701a      	strb	r2, [r3, #0]
 80027fc:	230f      	movs	r3, #15
 80027fe:	18fa      	adds	r2, r7, r3
 8002800:	1dbb      	adds	r3, r7, #6
 8002802:	7812      	ldrb	r2, [r2, #0]
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	429a      	cmp	r2, r3
 8002808:	d2dd      	bcs.n	80027c6 <Encender_1_Led_4+0x1e>
		}
	}
}
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	46c0      	nop			; (mov r8, r8)
 800280e:	46bd      	mov	sp, r7
 8002810:	b004      	add	sp, #16
 8002812:	bd80      	pop	{r7, pc}
 8002814:	20000000 	.word	0x20000000

08002818 <AbrirApagar>:

void AbrirApagar(uint8_t veces, uint16_t tiempo, uint16_t tiempo2){
 8002818:	b5b0      	push	{r4, r5, r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	0004      	movs	r4, r0
 8002820:	0008      	movs	r0, r1
 8002822:	0011      	movs	r1, r2
 8002824:	1dfb      	adds	r3, r7, #7
 8002826:	1c22      	adds	r2, r4, #0
 8002828:	701a      	strb	r2, [r3, #0]
 800282a:	1d3b      	adds	r3, r7, #4
 800282c:	1c02      	adds	r2, r0, #0
 800282e:	801a      	strh	r2, [r3, #0]
 8002830:	1cbb      	adds	r3, r7, #2
 8002832:	1c0a      	adds	r2, r1, #0
 8002834:	801a      	strh	r2, [r3, #0]

	for(uint8_t v=0;v<veces;v++){
 8002836:	230f      	movs	r3, #15
 8002838:	18fb      	adds	r3, r7, r3
 800283a:	2200      	movs	r2, #0
 800283c:	701a      	strb	r2, [r3, #0]
 800283e:	e148      	b.n	8002ad2 <AbrirApagar+0x2ba>
		uint8_t centro,impar=1,par=0;
 8002840:	230e      	movs	r3, #14
 8002842:	18fb      	adds	r3, r7, r3
 8002844:	2201      	movs	r2, #1
 8002846:	701a      	strb	r2, [r3, #0]
 8002848:	230d      	movs	r3, #13
 800284a:	18fb      	adds	r3, r7, r3
 800284c:	2200      	movs	r2, #0
 800284e:	701a      	strb	r2, [r3, #0]
		if(cantLeds%2==0){//si es par
 8002850:	4ba6      	ldr	r3, [pc, #664]	; (8002aec <AbrirApagar+0x2d4>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2201      	movs	r2, #1
 8002856:	4013      	ands	r3, r2
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d000      	beq.n	8002860 <AbrirApagar+0x48>
 800285e:	e098      	b.n	8002992 <AbrirApagar+0x17a>
			centro = cantLeds/2;
 8002860:	4ba2      	ldr	r3, [pc, #648]	; (8002aec <AbrirApagar+0x2d4>)
 8002862:	781a      	ldrb	r2, [r3, #0]
 8002864:	2108      	movs	r1, #8
 8002866:	187b      	adds	r3, r7, r1
 8002868:	0852      	lsrs	r2, r2, #1
 800286a:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=centro;i>=1;i--){
 800286c:	230c      	movs	r3, #12
 800286e:	18fb      	adds	r3, r7, r3
 8002870:	187a      	adds	r2, r7, r1
 8002872:	7812      	ldrb	r2, [r2, #0]
 8002874:	701a      	strb	r2, [r3, #0]
 8002876:	e030      	b.n	80028da <AbrirApagar+0xc2>
				ControlLeds(i, 1);
 8002878:	250c      	movs	r5, #12
 800287a:	197b      	adds	r3, r7, r5
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	2101      	movs	r1, #1
 8002880:	0018      	movs	r0, r3
 8002882:	f7ff fe0f 	bl	80024a4 <ControlLeds>
				ControlLeds(i+impar, 1);
 8002886:	197a      	adds	r2, r7, r5
 8002888:	240e      	movs	r4, #14
 800288a:	193b      	adds	r3, r7, r4
 800288c:	7812      	ldrb	r2, [r2, #0]
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	18d3      	adds	r3, r2, r3
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2101      	movs	r1, #1
 8002896:	0018      	movs	r0, r3
 8002898:	f7ff fe04 	bl	80024a4 <ControlLeds>
				impar=impar+2;
 800289c:	193b      	adds	r3, r7, r4
 800289e:	193a      	adds	r2, r7, r4
 80028a0:	7812      	ldrb	r2, [r2, #0]
 80028a2:	3202      	adds	r2, #2
 80028a4:	701a      	strb	r2, [r3, #0]
				HAL_Delay(tiempo*Refresh_ADC_Value());
 80028a6:	1d3b      	adds	r3, r7, #4
 80028a8:	881b      	ldrh	r3, [r3, #0]
 80028aa:	0018      	movs	r0, r3
 80028ac:	f7fe fa94 	bl	8000dd8 <__aeabi_i2f>
 80028b0:	1c04      	adds	r4, r0, #0
 80028b2:	f7ff fdcd 	bl	8002450 <Refresh_ADC_Value>
 80028b6:	1c03      	adds	r3, r0, #0
 80028b8:	1c19      	adds	r1, r3, #0
 80028ba:	1c20      	adds	r0, r4, #0
 80028bc:	f7fd ff98 	bl	80007f0 <__aeabi_fmul>
 80028c0:	1c03      	adds	r3, r0, #0
 80028c2:	1c18      	adds	r0, r3, #0
 80028c4:	f7fd fca8 	bl	8000218 <__aeabi_f2uiz>
 80028c8:	0003      	movs	r3, r0
 80028ca:	0018      	movs	r0, r3
 80028cc:	f001 f882 	bl	80039d4 <HAL_Delay>
			for(uint8_t i=centro;i>=1;i--){
 80028d0:	197b      	adds	r3, r7, r5
 80028d2:	781a      	ldrb	r2, [r3, #0]
 80028d4:	197b      	adds	r3, r7, r5
 80028d6:	3a01      	subs	r2, #1
 80028d8:	701a      	strb	r2, [r3, #0]
 80028da:	230c      	movs	r3, #12
 80028dc:	18fb      	adds	r3, r7, r3
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1c9      	bne.n	8002878 <AbrirApagar+0x60>
			}

			impar=1;
 80028e4:	230e      	movs	r3, #14
 80028e6:	18fb      	adds	r3, r7, r3
 80028e8:	2201      	movs	r2, #1
 80028ea:	701a      	strb	r2, [r3, #0]
			HAL_Delay(tiempo2*Refresh_ADC_Value());
 80028ec:	1cbb      	adds	r3, r7, #2
 80028ee:	881b      	ldrh	r3, [r3, #0]
 80028f0:	0018      	movs	r0, r3
 80028f2:	f7fe fa71 	bl	8000dd8 <__aeabi_i2f>
 80028f6:	1c04      	adds	r4, r0, #0
 80028f8:	f7ff fdaa 	bl	8002450 <Refresh_ADC_Value>
 80028fc:	1c03      	adds	r3, r0, #0
 80028fe:	1c19      	adds	r1, r3, #0
 8002900:	1c20      	adds	r0, r4, #0
 8002902:	f7fd ff75 	bl	80007f0 <__aeabi_fmul>
 8002906:	1c03      	adds	r3, r0, #0
 8002908:	1c18      	adds	r0, r3, #0
 800290a:	f7fd fc85 	bl	8000218 <__aeabi_f2uiz>
 800290e:	0003      	movs	r3, r0
 8002910:	0018      	movs	r0, r3
 8002912:	f001 f85f 	bl	80039d4 <HAL_Delay>

			for(uint8_t i=centro;i>=1;i--){
 8002916:	230b      	movs	r3, #11
 8002918:	18fb      	adds	r3, r7, r3
 800291a:	2208      	movs	r2, #8
 800291c:	18ba      	adds	r2, r7, r2
 800291e:	7812      	ldrb	r2, [r2, #0]
 8002920:	701a      	strb	r2, [r3, #0]
 8002922:	e030      	b.n	8002986 <AbrirApagar+0x16e>
				ControlLeds(i, 0);
 8002924:	250b      	movs	r5, #11
 8002926:	197b      	adds	r3, r7, r5
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	2100      	movs	r1, #0
 800292c:	0018      	movs	r0, r3
 800292e:	f7ff fdb9 	bl	80024a4 <ControlLeds>
				ControlLeds(i+impar, 0);
 8002932:	197a      	adds	r2, r7, r5
 8002934:	240e      	movs	r4, #14
 8002936:	193b      	adds	r3, r7, r4
 8002938:	7812      	ldrb	r2, [r2, #0]
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	18d3      	adds	r3, r2, r3
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2100      	movs	r1, #0
 8002942:	0018      	movs	r0, r3
 8002944:	f7ff fdae 	bl	80024a4 <ControlLeds>
				impar=impar+2;
 8002948:	193b      	adds	r3, r7, r4
 800294a:	193a      	adds	r2, r7, r4
 800294c:	7812      	ldrb	r2, [r2, #0]
 800294e:	3202      	adds	r2, #2
 8002950:	701a      	strb	r2, [r3, #0]
				HAL_Delay(tiempo*Refresh_ADC_Value());
 8002952:	1d3b      	adds	r3, r7, #4
 8002954:	881b      	ldrh	r3, [r3, #0]
 8002956:	0018      	movs	r0, r3
 8002958:	f7fe fa3e 	bl	8000dd8 <__aeabi_i2f>
 800295c:	1c04      	adds	r4, r0, #0
 800295e:	f7ff fd77 	bl	8002450 <Refresh_ADC_Value>
 8002962:	1c03      	adds	r3, r0, #0
 8002964:	1c19      	adds	r1, r3, #0
 8002966:	1c20      	adds	r0, r4, #0
 8002968:	f7fd ff42 	bl	80007f0 <__aeabi_fmul>
 800296c:	1c03      	adds	r3, r0, #0
 800296e:	1c18      	adds	r0, r3, #0
 8002970:	f7fd fc52 	bl	8000218 <__aeabi_f2uiz>
 8002974:	0003      	movs	r3, r0
 8002976:	0018      	movs	r0, r3
 8002978:	f001 f82c 	bl	80039d4 <HAL_Delay>
			for(uint8_t i=centro;i>=1;i--){
 800297c:	197b      	adds	r3, r7, r5
 800297e:	781a      	ldrb	r2, [r3, #0]
 8002980:	197b      	adds	r3, r7, r5
 8002982:	3a01      	subs	r2, #1
 8002984:	701a      	strb	r2, [r3, #0]
 8002986:	230b      	movs	r3, #11
 8002988:	18fb      	adds	r3, r7, r3
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d1c9      	bne.n	8002924 <AbrirApagar+0x10c>
 8002990:	e099      	b.n	8002ac6 <AbrirApagar+0x2ae>
			}

		}else{//si es impar
			centro = (cantLeds/2)+1;
 8002992:	4b56      	ldr	r3, [pc, #344]	; (8002aec <AbrirApagar+0x2d4>)
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	085b      	lsrs	r3, r3, #1
 8002998:	b2da      	uxtb	r2, r3
 800299a:	2108      	movs	r1, #8
 800299c:	187b      	adds	r3, r7, r1
 800299e:	3201      	adds	r2, #1
 80029a0:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=centro;i>=1;i--){
 80029a2:	230a      	movs	r3, #10
 80029a4:	18fb      	adds	r3, r7, r3
 80029a6:	187a      	adds	r2, r7, r1
 80029a8:	7812      	ldrb	r2, [r2, #0]
 80029aa:	701a      	strb	r2, [r3, #0]
 80029ac:	e030      	b.n	8002a10 <AbrirApagar+0x1f8>
				ControlLeds(i, 1);
 80029ae:	250a      	movs	r5, #10
 80029b0:	197b      	adds	r3, r7, r5
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	2101      	movs	r1, #1
 80029b6:	0018      	movs	r0, r3
 80029b8:	f7ff fd74 	bl	80024a4 <ControlLeds>
				ControlLeds(i+par, 1);
 80029bc:	197a      	adds	r2, r7, r5
 80029be:	240d      	movs	r4, #13
 80029c0:	193b      	adds	r3, r7, r4
 80029c2:	7812      	ldrb	r2, [r2, #0]
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	18d3      	adds	r3, r2, r3
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2101      	movs	r1, #1
 80029cc:	0018      	movs	r0, r3
 80029ce:	f7ff fd69 	bl	80024a4 <ControlLeds>
				par=par+2;
 80029d2:	193b      	adds	r3, r7, r4
 80029d4:	193a      	adds	r2, r7, r4
 80029d6:	7812      	ldrb	r2, [r2, #0]
 80029d8:	3202      	adds	r2, #2
 80029da:	701a      	strb	r2, [r3, #0]
				HAL_Delay(tiempo*Refresh_ADC_Value());
 80029dc:	1d3b      	adds	r3, r7, #4
 80029de:	881b      	ldrh	r3, [r3, #0]
 80029e0:	0018      	movs	r0, r3
 80029e2:	f7fe f9f9 	bl	8000dd8 <__aeabi_i2f>
 80029e6:	1c04      	adds	r4, r0, #0
 80029e8:	f7ff fd32 	bl	8002450 <Refresh_ADC_Value>
 80029ec:	1c03      	adds	r3, r0, #0
 80029ee:	1c19      	adds	r1, r3, #0
 80029f0:	1c20      	adds	r0, r4, #0
 80029f2:	f7fd fefd 	bl	80007f0 <__aeabi_fmul>
 80029f6:	1c03      	adds	r3, r0, #0
 80029f8:	1c18      	adds	r0, r3, #0
 80029fa:	f7fd fc0d 	bl	8000218 <__aeabi_f2uiz>
 80029fe:	0003      	movs	r3, r0
 8002a00:	0018      	movs	r0, r3
 8002a02:	f000 ffe7 	bl	80039d4 <HAL_Delay>
			for(uint8_t i=centro;i>=1;i--){
 8002a06:	197b      	adds	r3, r7, r5
 8002a08:	781a      	ldrb	r2, [r3, #0]
 8002a0a:	197b      	adds	r3, r7, r5
 8002a0c:	3a01      	subs	r2, #1
 8002a0e:	701a      	strb	r2, [r3, #0]
 8002a10:	230a      	movs	r3, #10
 8002a12:	18fb      	adds	r3, r7, r3
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1c9      	bne.n	80029ae <AbrirApagar+0x196>
			}

			par=0;
 8002a1a:	230d      	movs	r3, #13
 8002a1c:	18fb      	adds	r3, r7, r3
 8002a1e:	2200      	movs	r2, #0
 8002a20:	701a      	strb	r2, [r3, #0]
			HAL_Delay(tiempo2*Refresh_ADC_Value());
 8002a22:	1cbb      	adds	r3, r7, #2
 8002a24:	881b      	ldrh	r3, [r3, #0]
 8002a26:	0018      	movs	r0, r3
 8002a28:	f7fe f9d6 	bl	8000dd8 <__aeabi_i2f>
 8002a2c:	1c04      	adds	r4, r0, #0
 8002a2e:	f7ff fd0f 	bl	8002450 <Refresh_ADC_Value>
 8002a32:	1c03      	adds	r3, r0, #0
 8002a34:	1c19      	adds	r1, r3, #0
 8002a36:	1c20      	adds	r0, r4, #0
 8002a38:	f7fd feda 	bl	80007f0 <__aeabi_fmul>
 8002a3c:	1c03      	adds	r3, r0, #0
 8002a3e:	1c18      	adds	r0, r3, #0
 8002a40:	f7fd fbea 	bl	8000218 <__aeabi_f2uiz>
 8002a44:	0003      	movs	r3, r0
 8002a46:	0018      	movs	r0, r3
 8002a48:	f000 ffc4 	bl	80039d4 <HAL_Delay>

			for(uint8_t i=centro;i>=1;i--){
 8002a4c:	2309      	movs	r3, #9
 8002a4e:	18fb      	adds	r3, r7, r3
 8002a50:	2208      	movs	r2, #8
 8002a52:	18ba      	adds	r2, r7, r2
 8002a54:	7812      	ldrb	r2, [r2, #0]
 8002a56:	701a      	strb	r2, [r3, #0]
 8002a58:	e030      	b.n	8002abc <AbrirApagar+0x2a4>
				ControlLeds(i, 0);
 8002a5a:	2509      	movs	r5, #9
 8002a5c:	197b      	adds	r3, r7, r5
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2100      	movs	r1, #0
 8002a62:	0018      	movs	r0, r3
 8002a64:	f7ff fd1e 	bl	80024a4 <ControlLeds>
				ControlLeds(i+par, 0);
 8002a68:	197a      	adds	r2, r7, r5
 8002a6a:	240d      	movs	r4, #13
 8002a6c:	193b      	adds	r3, r7, r4
 8002a6e:	7812      	ldrb	r2, [r2, #0]
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	18d3      	adds	r3, r2, r3
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2100      	movs	r1, #0
 8002a78:	0018      	movs	r0, r3
 8002a7a:	f7ff fd13 	bl	80024a4 <ControlLeds>
				par=par+2;
 8002a7e:	193b      	adds	r3, r7, r4
 8002a80:	193a      	adds	r2, r7, r4
 8002a82:	7812      	ldrb	r2, [r2, #0]
 8002a84:	3202      	adds	r2, #2
 8002a86:	701a      	strb	r2, [r3, #0]
				HAL_Delay(tiempo*Refresh_ADC_Value());
 8002a88:	1d3b      	adds	r3, r7, #4
 8002a8a:	881b      	ldrh	r3, [r3, #0]
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	f7fe f9a3 	bl	8000dd8 <__aeabi_i2f>
 8002a92:	1c04      	adds	r4, r0, #0
 8002a94:	f7ff fcdc 	bl	8002450 <Refresh_ADC_Value>
 8002a98:	1c03      	adds	r3, r0, #0
 8002a9a:	1c19      	adds	r1, r3, #0
 8002a9c:	1c20      	adds	r0, r4, #0
 8002a9e:	f7fd fea7 	bl	80007f0 <__aeabi_fmul>
 8002aa2:	1c03      	adds	r3, r0, #0
 8002aa4:	1c18      	adds	r0, r3, #0
 8002aa6:	f7fd fbb7 	bl	8000218 <__aeabi_f2uiz>
 8002aaa:	0003      	movs	r3, r0
 8002aac:	0018      	movs	r0, r3
 8002aae:	f000 ff91 	bl	80039d4 <HAL_Delay>
			for(uint8_t i=centro;i>=1;i--){
 8002ab2:	197b      	adds	r3, r7, r5
 8002ab4:	781a      	ldrb	r2, [r3, #0]
 8002ab6:	197b      	adds	r3, r7, r5
 8002ab8:	3a01      	subs	r2, #1
 8002aba:	701a      	strb	r2, [r3, #0]
 8002abc:	2309      	movs	r3, #9
 8002abe:	18fb      	adds	r3, r7, r3
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1c9      	bne.n	8002a5a <AbrirApagar+0x242>
	for(uint8_t v=0;v<veces;v++){
 8002ac6:	210f      	movs	r1, #15
 8002ac8:	187b      	adds	r3, r7, r1
 8002aca:	781a      	ldrb	r2, [r3, #0]
 8002acc:	187b      	adds	r3, r7, r1
 8002ace:	3201      	adds	r2, #1
 8002ad0:	701a      	strb	r2, [r3, #0]
 8002ad2:	230f      	movs	r3, #15
 8002ad4:	18fa      	adds	r2, r7, r3
 8002ad6:	1dfb      	adds	r3, r7, #7
 8002ad8:	7812      	ldrb	r2, [r2, #0]
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d200      	bcs.n	8002ae2 <AbrirApagar+0x2ca>
 8002ae0:	e6ae      	b.n	8002840 <AbrirApagar+0x28>
			}
		}
	}
}
 8002ae2:	46c0      	nop			; (mov r8, r8)
 8002ae4:	46c0      	nop			; (mov r8, r8)
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	b004      	add	sp, #16
 8002aea:	bdb0      	pop	{r4, r5, r7, pc}
 8002aec:	20000000 	.word	0x20000000

08002af0 <CerrarApagar>:

void CerrarApagar(uint8_t veces, uint16_t tiempo, uint16_t tiempo2){
 8002af0:	b5b0      	push	{r4, r5, r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	0004      	movs	r4, r0
 8002af8:	0008      	movs	r0, r1
 8002afa:	0011      	movs	r1, r2
 8002afc:	1dfb      	adds	r3, r7, #7
 8002afe:	1c22      	adds	r2, r4, #0
 8002b00:	701a      	strb	r2, [r3, #0]
 8002b02:	1d3b      	adds	r3, r7, #4
 8002b04:	1c02      	adds	r2, r0, #0
 8002b06:	801a      	strh	r2, [r3, #0]
 8002b08:	1cbb      	adds	r3, r7, #2
 8002b0a:	1c0a      	adds	r2, r1, #0
 8002b0c:	801a      	strh	r2, [r3, #0]
	for(uint8_t v=0;v<veces;v++){
 8002b0e:	230f      	movs	r3, #15
 8002b10:	18fb      	adds	r3, r7, r3
 8002b12:	2200      	movs	r2, #0
 8002b14:	701a      	strb	r2, [r3, #0]
 8002b16:	e156      	b.n	8002dc6 <CerrarApagar+0x2d6>
		uint8_t limite,centro;
		if(cantLeds%2==0){//si es par
 8002b18:	4bb1      	ldr	r3, [pc, #708]	; (8002de0 <CerrarApagar+0x2f0>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	4013      	ands	r3, r2
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d000      	beq.n	8002b28 <CerrarApagar+0x38>
 8002b26:	e0a3      	b.n	8002c70 <CerrarApagar+0x180>

			centro = cantLeds/2;//5
 8002b28:	4bad      	ldr	r3, [pc, #692]	; (8002de0 <CerrarApagar+0x2f0>)
 8002b2a:	781a      	ldrb	r2, [r3, #0]
 8002b2c:	2309      	movs	r3, #9
 8002b2e:	18fb      	adds	r3, r7, r3
 8002b30:	0852      	lsrs	r2, r2, #1
 8002b32:	701a      	strb	r2, [r3, #0]
			limite = cantLeds-1;
 8002b34:	4baa      	ldr	r3, [pc, #680]	; (8002de0 <CerrarApagar+0x2f0>)
 8002b36:	781a      	ldrb	r2, [r3, #0]
 8002b38:	230e      	movs	r3, #14
 8002b3a:	18fb      	adds	r3, r7, r3
 8002b3c:	3a01      	subs	r2, #1
 8002b3e:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=1;i<=centro;i++){
 8002b40:	230d      	movs	r3, #13
 8002b42:	18fb      	adds	r3, r7, r3
 8002b44:	2201      	movs	r2, #1
 8002b46:	701a      	strb	r2, [r3, #0]
 8002b48:	e030      	b.n	8002bac <CerrarApagar+0xbc>
				ControlLeds(i, 1);
 8002b4a:	250d      	movs	r5, #13
 8002b4c:	197b      	adds	r3, r7, r5
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2101      	movs	r1, #1
 8002b52:	0018      	movs	r0, r3
 8002b54:	f7ff fca6 	bl	80024a4 <ControlLeds>
				ControlLeds(i+limite, 1);
 8002b58:	197a      	adds	r2, r7, r5
 8002b5a:	240e      	movs	r4, #14
 8002b5c:	193b      	adds	r3, r7, r4
 8002b5e:	7812      	ldrb	r2, [r2, #0]
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	18d3      	adds	r3, r2, r3
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2101      	movs	r1, #1
 8002b68:	0018      	movs	r0, r3
 8002b6a:	f7ff fc9b 	bl	80024a4 <ControlLeds>
				limite=limite-2;
 8002b6e:	193b      	adds	r3, r7, r4
 8002b70:	193a      	adds	r2, r7, r4
 8002b72:	7812      	ldrb	r2, [r2, #0]
 8002b74:	3a02      	subs	r2, #2
 8002b76:	701a      	strb	r2, [r3, #0]
				HAL_Delay(tiempo*Refresh_ADC_Value());
 8002b78:	1d3b      	adds	r3, r7, #4
 8002b7a:	881b      	ldrh	r3, [r3, #0]
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	f7fe f92b 	bl	8000dd8 <__aeabi_i2f>
 8002b82:	1c04      	adds	r4, r0, #0
 8002b84:	f7ff fc64 	bl	8002450 <Refresh_ADC_Value>
 8002b88:	1c03      	adds	r3, r0, #0
 8002b8a:	1c19      	adds	r1, r3, #0
 8002b8c:	1c20      	adds	r0, r4, #0
 8002b8e:	f7fd fe2f 	bl	80007f0 <__aeabi_fmul>
 8002b92:	1c03      	adds	r3, r0, #0
 8002b94:	1c18      	adds	r0, r3, #0
 8002b96:	f7fd fb3f 	bl	8000218 <__aeabi_f2uiz>
 8002b9a:	0003      	movs	r3, r0
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	f000 ff19 	bl	80039d4 <HAL_Delay>
			for(uint8_t i=1;i<=centro;i++){
 8002ba2:	197b      	adds	r3, r7, r5
 8002ba4:	781a      	ldrb	r2, [r3, #0]
 8002ba6:	197b      	adds	r3, r7, r5
 8002ba8:	3201      	adds	r2, #1
 8002baa:	701a      	strb	r2, [r3, #0]
 8002bac:	230d      	movs	r3, #13
 8002bae:	18fa      	adds	r2, r7, r3
 8002bb0:	2309      	movs	r3, #9
 8002bb2:	18fb      	adds	r3, r7, r3
 8002bb4:	7812      	ldrb	r2, [r2, #0]
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d9c6      	bls.n	8002b4a <CerrarApagar+0x5a>
			}
			limite = cantLeds-1;
 8002bbc:	4b88      	ldr	r3, [pc, #544]	; (8002de0 <CerrarApagar+0x2f0>)
 8002bbe:	781a      	ldrb	r2, [r3, #0]
 8002bc0:	230e      	movs	r3, #14
 8002bc2:	18fb      	adds	r3, r7, r3
 8002bc4:	3a01      	subs	r2, #1
 8002bc6:	701a      	strb	r2, [r3, #0]
			HAL_Delay(tiempo2*Refresh_ADC_Value());
 8002bc8:	1cbb      	adds	r3, r7, #2
 8002bca:	881b      	ldrh	r3, [r3, #0]
 8002bcc:	0018      	movs	r0, r3
 8002bce:	f7fe f903 	bl	8000dd8 <__aeabi_i2f>
 8002bd2:	1c04      	adds	r4, r0, #0
 8002bd4:	f7ff fc3c 	bl	8002450 <Refresh_ADC_Value>
 8002bd8:	1c03      	adds	r3, r0, #0
 8002bda:	1c19      	adds	r1, r3, #0
 8002bdc:	1c20      	adds	r0, r4, #0
 8002bde:	f7fd fe07 	bl	80007f0 <__aeabi_fmul>
 8002be2:	1c03      	adds	r3, r0, #0
 8002be4:	1c18      	adds	r0, r3, #0
 8002be6:	f7fd fb17 	bl	8000218 <__aeabi_f2uiz>
 8002bea:	0003      	movs	r3, r0
 8002bec:	0018      	movs	r0, r3
 8002bee:	f000 fef1 	bl	80039d4 <HAL_Delay>
			for(uint8_t i=1;i<=centro;i++){
 8002bf2:	230c      	movs	r3, #12
 8002bf4:	18fb      	adds	r3, r7, r3
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	701a      	strb	r2, [r3, #0]
 8002bfa:	e030      	b.n	8002c5e <CerrarApagar+0x16e>
				ControlLeds(i, 0);
 8002bfc:	250c      	movs	r5, #12
 8002bfe:	197b      	adds	r3, r7, r5
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	2100      	movs	r1, #0
 8002c04:	0018      	movs	r0, r3
 8002c06:	f7ff fc4d 	bl	80024a4 <ControlLeds>
				ControlLeds(i+limite, 0);
 8002c0a:	197a      	adds	r2, r7, r5
 8002c0c:	240e      	movs	r4, #14
 8002c0e:	193b      	adds	r3, r7, r4
 8002c10:	7812      	ldrb	r2, [r2, #0]
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	18d3      	adds	r3, r2, r3
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2100      	movs	r1, #0
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	f7ff fc42 	bl	80024a4 <ControlLeds>
				limite=limite-2;
 8002c20:	193b      	adds	r3, r7, r4
 8002c22:	193a      	adds	r2, r7, r4
 8002c24:	7812      	ldrb	r2, [r2, #0]
 8002c26:	3a02      	subs	r2, #2
 8002c28:	701a      	strb	r2, [r3, #0]
				HAL_Delay(tiempo*Refresh_ADC_Value());
 8002c2a:	1d3b      	adds	r3, r7, #4
 8002c2c:	881b      	ldrh	r3, [r3, #0]
 8002c2e:	0018      	movs	r0, r3
 8002c30:	f7fe f8d2 	bl	8000dd8 <__aeabi_i2f>
 8002c34:	1c04      	adds	r4, r0, #0
 8002c36:	f7ff fc0b 	bl	8002450 <Refresh_ADC_Value>
 8002c3a:	1c03      	adds	r3, r0, #0
 8002c3c:	1c19      	adds	r1, r3, #0
 8002c3e:	1c20      	adds	r0, r4, #0
 8002c40:	f7fd fdd6 	bl	80007f0 <__aeabi_fmul>
 8002c44:	1c03      	adds	r3, r0, #0
 8002c46:	1c18      	adds	r0, r3, #0
 8002c48:	f7fd fae6 	bl	8000218 <__aeabi_f2uiz>
 8002c4c:	0003      	movs	r3, r0
 8002c4e:	0018      	movs	r0, r3
 8002c50:	f000 fec0 	bl	80039d4 <HAL_Delay>
			for(uint8_t i=1;i<=centro;i++){
 8002c54:	197b      	adds	r3, r7, r5
 8002c56:	781a      	ldrb	r2, [r3, #0]
 8002c58:	197b      	adds	r3, r7, r5
 8002c5a:	3201      	adds	r2, #1
 8002c5c:	701a      	strb	r2, [r3, #0]
 8002c5e:	230c      	movs	r3, #12
 8002c60:	18fa      	adds	r2, r7, r3
 8002c62:	2309      	movs	r3, #9
 8002c64:	18fb      	adds	r3, r7, r3
 8002c66:	7812      	ldrb	r2, [r2, #0]
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d9c6      	bls.n	8002bfc <CerrarApagar+0x10c>
 8002c6e:	e0a4      	b.n	8002dba <CerrarApagar+0x2ca>
			}

		}else{//si es impar
			centro = (cantLeds/2)+1;//5
 8002c70:	4b5b      	ldr	r3, [pc, #364]	; (8002de0 <CerrarApagar+0x2f0>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	085b      	lsrs	r3, r3, #1
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	2309      	movs	r3, #9
 8002c7a:	18fb      	adds	r3, r7, r3
 8002c7c:	3201      	adds	r2, #1
 8002c7e:	701a      	strb	r2, [r3, #0]
			limite = cantLeds-1;
 8002c80:	4b57      	ldr	r3, [pc, #348]	; (8002de0 <CerrarApagar+0x2f0>)
 8002c82:	781a      	ldrb	r2, [r3, #0]
 8002c84:	230e      	movs	r3, #14
 8002c86:	18fb      	adds	r3, r7, r3
 8002c88:	3a01      	subs	r2, #1
 8002c8a:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=1;i<=centro;i++){
 8002c8c:	230b      	movs	r3, #11
 8002c8e:	18fb      	adds	r3, r7, r3
 8002c90:	2201      	movs	r2, #1
 8002c92:	701a      	strb	r2, [r3, #0]
 8002c94:	e030      	b.n	8002cf8 <CerrarApagar+0x208>
				ControlLeds(i, 1);
 8002c96:	250b      	movs	r5, #11
 8002c98:	197b      	adds	r3, r7, r5
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	0018      	movs	r0, r3
 8002ca0:	f7ff fc00 	bl	80024a4 <ControlLeds>
				ControlLeds(i+limite, 1);
 8002ca4:	197a      	adds	r2, r7, r5
 8002ca6:	240e      	movs	r4, #14
 8002ca8:	193b      	adds	r3, r7, r4
 8002caa:	7812      	ldrb	r2, [r2, #0]
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	18d3      	adds	r3, r2, r3
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	f7ff fbf5 	bl	80024a4 <ControlLeds>
				limite=limite-2;
 8002cba:	193b      	adds	r3, r7, r4
 8002cbc:	193a      	adds	r2, r7, r4
 8002cbe:	7812      	ldrb	r2, [r2, #0]
 8002cc0:	3a02      	subs	r2, #2
 8002cc2:	701a      	strb	r2, [r3, #0]
				HAL_Delay(tiempo*Refresh_ADC_Value());
 8002cc4:	1d3b      	adds	r3, r7, #4
 8002cc6:	881b      	ldrh	r3, [r3, #0]
 8002cc8:	0018      	movs	r0, r3
 8002cca:	f7fe f885 	bl	8000dd8 <__aeabi_i2f>
 8002cce:	1c04      	adds	r4, r0, #0
 8002cd0:	f7ff fbbe 	bl	8002450 <Refresh_ADC_Value>
 8002cd4:	1c03      	adds	r3, r0, #0
 8002cd6:	1c19      	adds	r1, r3, #0
 8002cd8:	1c20      	adds	r0, r4, #0
 8002cda:	f7fd fd89 	bl	80007f0 <__aeabi_fmul>
 8002cde:	1c03      	adds	r3, r0, #0
 8002ce0:	1c18      	adds	r0, r3, #0
 8002ce2:	f7fd fa99 	bl	8000218 <__aeabi_f2uiz>
 8002ce6:	0003      	movs	r3, r0
 8002ce8:	0018      	movs	r0, r3
 8002cea:	f000 fe73 	bl	80039d4 <HAL_Delay>
			for(uint8_t i=1;i<=centro;i++){
 8002cee:	197b      	adds	r3, r7, r5
 8002cf0:	781a      	ldrb	r2, [r3, #0]
 8002cf2:	197b      	adds	r3, r7, r5
 8002cf4:	3201      	adds	r2, #1
 8002cf6:	701a      	strb	r2, [r3, #0]
 8002cf8:	230b      	movs	r3, #11
 8002cfa:	18fa      	adds	r2, r7, r3
 8002cfc:	2309      	movs	r3, #9
 8002cfe:	18fb      	adds	r3, r7, r3
 8002d00:	7812      	ldrb	r2, [r2, #0]
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d9c6      	bls.n	8002c96 <CerrarApagar+0x1a6>
			}
			limite = cantLeds-1;
 8002d08:	4b35      	ldr	r3, [pc, #212]	; (8002de0 <CerrarApagar+0x2f0>)
 8002d0a:	781a      	ldrb	r2, [r3, #0]
 8002d0c:	230e      	movs	r3, #14
 8002d0e:	18fb      	adds	r3, r7, r3
 8002d10:	3a01      	subs	r2, #1
 8002d12:	701a      	strb	r2, [r3, #0]
			HAL_Delay(tiempo2*Refresh_ADC_Value());
 8002d14:	1cbb      	adds	r3, r7, #2
 8002d16:	881b      	ldrh	r3, [r3, #0]
 8002d18:	0018      	movs	r0, r3
 8002d1a:	f7fe f85d 	bl	8000dd8 <__aeabi_i2f>
 8002d1e:	1c04      	adds	r4, r0, #0
 8002d20:	f7ff fb96 	bl	8002450 <Refresh_ADC_Value>
 8002d24:	1c03      	adds	r3, r0, #0
 8002d26:	1c19      	adds	r1, r3, #0
 8002d28:	1c20      	adds	r0, r4, #0
 8002d2a:	f7fd fd61 	bl	80007f0 <__aeabi_fmul>
 8002d2e:	1c03      	adds	r3, r0, #0
 8002d30:	1c18      	adds	r0, r3, #0
 8002d32:	f7fd fa71 	bl	8000218 <__aeabi_f2uiz>
 8002d36:	0003      	movs	r3, r0
 8002d38:	0018      	movs	r0, r3
 8002d3a:	f000 fe4b 	bl	80039d4 <HAL_Delay>
			for(uint8_t i=1;i<=centro;i++){
 8002d3e:	230a      	movs	r3, #10
 8002d40:	18fb      	adds	r3, r7, r3
 8002d42:	2201      	movs	r2, #1
 8002d44:	701a      	strb	r2, [r3, #0]
 8002d46:	e030      	b.n	8002daa <CerrarApagar+0x2ba>
				ControlLeds(i, 0);
 8002d48:	250a      	movs	r5, #10
 8002d4a:	197b      	adds	r3, r7, r5
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	2100      	movs	r1, #0
 8002d50:	0018      	movs	r0, r3
 8002d52:	f7ff fba7 	bl	80024a4 <ControlLeds>
				ControlLeds(i+limite, 0);
 8002d56:	197a      	adds	r2, r7, r5
 8002d58:	240e      	movs	r4, #14
 8002d5a:	193b      	adds	r3, r7, r4
 8002d5c:	7812      	ldrb	r2, [r2, #0]
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	18d3      	adds	r3, r2, r3
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2100      	movs	r1, #0
 8002d66:	0018      	movs	r0, r3
 8002d68:	f7ff fb9c 	bl	80024a4 <ControlLeds>
				limite=limite-2;
 8002d6c:	193b      	adds	r3, r7, r4
 8002d6e:	193a      	adds	r2, r7, r4
 8002d70:	7812      	ldrb	r2, [r2, #0]
 8002d72:	3a02      	subs	r2, #2
 8002d74:	701a      	strb	r2, [r3, #0]
				HAL_Delay(tiempo*Refresh_ADC_Value());
 8002d76:	1d3b      	adds	r3, r7, #4
 8002d78:	881b      	ldrh	r3, [r3, #0]
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	f7fe f82c 	bl	8000dd8 <__aeabi_i2f>
 8002d80:	1c04      	adds	r4, r0, #0
 8002d82:	f7ff fb65 	bl	8002450 <Refresh_ADC_Value>
 8002d86:	1c03      	adds	r3, r0, #0
 8002d88:	1c19      	adds	r1, r3, #0
 8002d8a:	1c20      	adds	r0, r4, #0
 8002d8c:	f7fd fd30 	bl	80007f0 <__aeabi_fmul>
 8002d90:	1c03      	adds	r3, r0, #0
 8002d92:	1c18      	adds	r0, r3, #0
 8002d94:	f7fd fa40 	bl	8000218 <__aeabi_f2uiz>
 8002d98:	0003      	movs	r3, r0
 8002d9a:	0018      	movs	r0, r3
 8002d9c:	f000 fe1a 	bl	80039d4 <HAL_Delay>
			for(uint8_t i=1;i<=centro;i++){
 8002da0:	197b      	adds	r3, r7, r5
 8002da2:	781a      	ldrb	r2, [r3, #0]
 8002da4:	197b      	adds	r3, r7, r5
 8002da6:	3201      	adds	r2, #1
 8002da8:	701a      	strb	r2, [r3, #0]
 8002daa:	230a      	movs	r3, #10
 8002dac:	18fa      	adds	r2, r7, r3
 8002dae:	2309      	movs	r3, #9
 8002db0:	18fb      	adds	r3, r7, r3
 8002db2:	7812      	ldrb	r2, [r2, #0]
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d9c6      	bls.n	8002d48 <CerrarApagar+0x258>
	for(uint8_t v=0;v<veces;v++){
 8002dba:	210f      	movs	r1, #15
 8002dbc:	187b      	adds	r3, r7, r1
 8002dbe:	781a      	ldrb	r2, [r3, #0]
 8002dc0:	187b      	adds	r3, r7, r1
 8002dc2:	3201      	adds	r2, #1
 8002dc4:	701a      	strb	r2, [r3, #0]
 8002dc6:	230f      	movs	r3, #15
 8002dc8:	18fa      	adds	r2, r7, r3
 8002dca:	1dfb      	adds	r3, r7, #7
 8002dcc:	7812      	ldrb	r2, [r2, #0]
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d200      	bcs.n	8002dd6 <CerrarApagar+0x2e6>
 8002dd4:	e6a0      	b.n	8002b18 <CerrarApagar+0x28>
			}
		}
	}
}
 8002dd6:	46c0      	nop			; (mov r8, r8)
 8002dd8:	46c0      	nop			; (mov r8, r8)
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	b004      	add	sp, #16
 8002dde:	bdb0      	pop	{r4, r5, r7, pc}
 8002de0:	20000000 	.word	0x20000000

08002de4 <Girar>:

void Girar(uint8_t veces, uint16_t tiempo){
 8002de4:	b590      	push	{r4, r7, lr}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	0002      	movs	r2, r0
 8002dec:	1dfb      	adds	r3, r7, #7
 8002dee:	701a      	strb	r2, [r3, #0]
 8002df0:	1d3b      	adds	r3, r7, #4
 8002df2:	1c0a      	adds	r2, r1, #0
 8002df4:	801a      	strh	r2, [r3, #0]
	for(uint8_t v=0;v<veces;v++){
 8002df6:	230f      	movs	r3, #15
 8002df8:	18fb      	adds	r3, r7, r3
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	701a      	strb	r2, [r3, #0]
 8002dfe:	e035      	b.n	8002e6c <Girar+0x88>
		AbrirApagar(1,tiempo*Refresh_ADC_Value(),0);
 8002e00:	1d3b      	adds	r3, r7, #4
 8002e02:	881b      	ldrh	r3, [r3, #0]
 8002e04:	0018      	movs	r0, r3
 8002e06:	f7fd ffe7 	bl	8000dd8 <__aeabi_i2f>
 8002e0a:	1c04      	adds	r4, r0, #0
 8002e0c:	f7ff fb20 	bl	8002450 <Refresh_ADC_Value>
 8002e10:	1c03      	adds	r3, r0, #0
 8002e12:	1c19      	adds	r1, r3, #0
 8002e14:	1c20      	adds	r0, r4, #0
 8002e16:	f7fd fceb 	bl	80007f0 <__aeabi_fmul>
 8002e1a:	1c03      	adds	r3, r0, #0
 8002e1c:	1c18      	adds	r0, r3, #0
 8002e1e:	f7fd f9fb 	bl	8000218 <__aeabi_f2uiz>
 8002e22:	0003      	movs	r3, r0
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	2200      	movs	r2, #0
 8002e28:	0019      	movs	r1, r3
 8002e2a:	2001      	movs	r0, #1
 8002e2c:	f7ff fcf4 	bl	8002818 <AbrirApagar>
		CerrarApagar(1,tiempo*Refresh_ADC_Value(),0);
 8002e30:	1d3b      	adds	r3, r7, #4
 8002e32:	881b      	ldrh	r3, [r3, #0]
 8002e34:	0018      	movs	r0, r3
 8002e36:	f7fd ffcf 	bl	8000dd8 <__aeabi_i2f>
 8002e3a:	1c04      	adds	r4, r0, #0
 8002e3c:	f7ff fb08 	bl	8002450 <Refresh_ADC_Value>
 8002e40:	1c03      	adds	r3, r0, #0
 8002e42:	1c19      	adds	r1, r3, #0
 8002e44:	1c20      	adds	r0, r4, #0
 8002e46:	f7fd fcd3 	bl	80007f0 <__aeabi_fmul>
 8002e4a:	1c03      	adds	r3, r0, #0
 8002e4c:	1c18      	adds	r0, r3, #0
 8002e4e:	f7fd f9e3 	bl	8000218 <__aeabi_f2uiz>
 8002e52:	0003      	movs	r3, r0
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	2200      	movs	r2, #0
 8002e58:	0019      	movs	r1, r3
 8002e5a:	2001      	movs	r0, #1
 8002e5c:	f7ff fe48 	bl	8002af0 <CerrarApagar>
	for(uint8_t v=0;v<veces;v++){
 8002e60:	210f      	movs	r1, #15
 8002e62:	187b      	adds	r3, r7, r1
 8002e64:	781a      	ldrb	r2, [r3, #0]
 8002e66:	187b      	adds	r3, r7, r1
 8002e68:	3201      	adds	r2, #1
 8002e6a:	701a      	strb	r2, [r3, #0]
 8002e6c:	230f      	movs	r3, #15
 8002e6e:	18fa      	adds	r2, r7, r3
 8002e70:	1dfb      	adds	r3, r7, #7
 8002e72:	7812      	ldrb	r2, [r2, #0]
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d3c2      	bcc.n	8002e00 <Girar+0x1c>
	}
}
 8002e7a:	46c0      	nop			; (mov r8, r8)
 8002e7c:	46c0      	nop			; (mov r8, r8)
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	b005      	add	sp, #20
 8002e82:	bd90      	pop	{r4, r7, pc}

08002e84 <VolumenAbrir>:

void VolumenAbrir(uint8_t veces, uint16_t tiempo, uint16_t tiempo2){
 8002e84:	b5b0      	push	{r4, r5, r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	0004      	movs	r4, r0
 8002e8c:	0008      	movs	r0, r1
 8002e8e:	0011      	movs	r1, r2
 8002e90:	1dfb      	adds	r3, r7, #7
 8002e92:	1c22      	adds	r2, r4, #0
 8002e94:	701a      	strb	r2, [r3, #0]
 8002e96:	1d3b      	adds	r3, r7, #4
 8002e98:	1c02      	adds	r2, r0, #0
 8002e9a:	801a      	strh	r2, [r3, #0]
 8002e9c:	1cbb      	adds	r3, r7, #2
 8002e9e:	1c0a      	adds	r2, r1, #0
 8002ea0:	801a      	strh	r2, [r3, #0]
	for(uint8_t v=0;v<veces;v++){
 8002ea2:	230f      	movs	r3, #15
 8002ea4:	18fb      	adds	r3, r7, r3
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	701a      	strb	r2, [r3, #0]
 8002eaa:	e0a3      	b.n	8002ff4 <VolumenAbrir+0x170>
		uint8_t l;
		for(uint8_t i=1;i<=cantLeds;i++){
 8002eac:	230e      	movs	r3, #14
 8002eae:	18fb      	adds	r3, r7, r3
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	701a      	strb	r2, [r3, #0]
 8002eb4:	e07b      	b.n	8002fae <VolumenAbrir+0x12a>
			l=i;
 8002eb6:	250b      	movs	r5, #11
 8002eb8:	197b      	adds	r3, r7, r5
 8002eba:	220e      	movs	r2, #14
 8002ebc:	18ba      	adds	r2, r7, r2
 8002ebe:	7812      	ldrb	r2, [r2, #0]
 8002ec0:	701a      	strb	r2, [r3, #0]
			HAL_Delay(tiempo*Refresh_ADC_Value());
 8002ec2:	1d3b      	adds	r3, r7, #4
 8002ec4:	881b      	ldrh	r3, [r3, #0]
 8002ec6:	0018      	movs	r0, r3
 8002ec8:	f7fd ff86 	bl	8000dd8 <__aeabi_i2f>
 8002ecc:	1c04      	adds	r4, r0, #0
 8002ece:	f7ff fabf 	bl	8002450 <Refresh_ADC_Value>
 8002ed2:	1c03      	adds	r3, r0, #0
 8002ed4:	1c19      	adds	r1, r3, #0
 8002ed6:	1c20      	adds	r0, r4, #0
 8002ed8:	f7fd fc8a 	bl	80007f0 <__aeabi_fmul>
 8002edc:	1c03      	adds	r3, r0, #0
 8002ede:	1c18      	adds	r0, r3, #0
 8002ee0:	f7fd f99a 	bl	8000218 <__aeabi_f2uiz>
 8002ee4:	0003      	movs	r3, r0
 8002ee6:	0018      	movs	r0, r3
 8002ee8:	f000 fd74 	bl	80039d4 <HAL_Delay>
			for(uint8_t i=l;i<=cantLeds;i++){
 8002eec:	230d      	movs	r3, #13
 8002eee:	18fb      	adds	r3, r7, r3
 8002ef0:	197a      	adds	r2, r7, r5
 8002ef2:	7812      	ldrb	r2, [r2, #0]
 8002ef4:	701a      	strb	r2, [r3, #0]
 8002ef6:	e01f      	b.n	8002f38 <VolumenAbrir+0xb4>
				Encender_1_Led_2(i);
 8002ef8:	250d      	movs	r5, #13
 8002efa:	197b      	adds	r3, r7, r5
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	0018      	movs	r0, r3
 8002f00:	f7ff fbea 	bl	80026d8 <Encender_1_Led_2>
				HAL_Delay(tiempo*Refresh_ADC_Value());
 8002f04:	1d3b      	adds	r3, r7, #4
 8002f06:	881b      	ldrh	r3, [r3, #0]
 8002f08:	0018      	movs	r0, r3
 8002f0a:	f7fd ff65 	bl	8000dd8 <__aeabi_i2f>
 8002f0e:	1c04      	adds	r4, r0, #0
 8002f10:	f7ff fa9e 	bl	8002450 <Refresh_ADC_Value>
 8002f14:	1c03      	adds	r3, r0, #0
 8002f16:	1c19      	adds	r1, r3, #0
 8002f18:	1c20      	adds	r0, r4, #0
 8002f1a:	f7fd fc69 	bl	80007f0 <__aeabi_fmul>
 8002f1e:	1c03      	adds	r3, r0, #0
 8002f20:	1c18      	adds	r0, r3, #0
 8002f22:	f7fd f979 	bl	8000218 <__aeabi_f2uiz>
 8002f26:	0003      	movs	r3, r0
 8002f28:	0018      	movs	r0, r3
 8002f2a:	f000 fd53 	bl	80039d4 <HAL_Delay>
			for(uint8_t i=l;i<=cantLeds;i++){
 8002f2e:	197b      	adds	r3, r7, r5
 8002f30:	781a      	ldrb	r2, [r3, #0]
 8002f32:	197b      	adds	r3, r7, r5
 8002f34:	3201      	adds	r2, #1
 8002f36:	701a      	strb	r2, [r3, #0]
 8002f38:	4b35      	ldr	r3, [pc, #212]	; (8003010 <VolumenAbrir+0x18c>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	220d      	movs	r2, #13
 8002f3e:	18ba      	adds	r2, r7, r2
 8002f40:	7812      	ldrb	r2, [r2, #0]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d9d8      	bls.n	8002ef8 <VolumenAbrir+0x74>
			}
			for(uint8_t i=cantLeds;i>=l;i--){
 8002f46:	230c      	movs	r3, #12
 8002f48:	18fb      	adds	r3, r7, r3
 8002f4a:	4a31      	ldr	r2, [pc, #196]	; (8003010 <VolumenAbrir+0x18c>)
 8002f4c:	7812      	ldrb	r2, [r2, #0]
 8002f4e:	701a      	strb	r2, [r3, #0]
 8002f50:	e01f      	b.n	8002f92 <VolumenAbrir+0x10e>
				Encender_1_Led_2(i);
 8002f52:	250c      	movs	r5, #12
 8002f54:	197b      	adds	r3, r7, r5
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	0018      	movs	r0, r3
 8002f5a:	f7ff fbbd 	bl	80026d8 <Encender_1_Led_2>
				HAL_Delay(tiempo*Refresh_ADC_Value());
 8002f5e:	1d3b      	adds	r3, r7, #4
 8002f60:	881b      	ldrh	r3, [r3, #0]
 8002f62:	0018      	movs	r0, r3
 8002f64:	f7fd ff38 	bl	8000dd8 <__aeabi_i2f>
 8002f68:	1c04      	adds	r4, r0, #0
 8002f6a:	f7ff fa71 	bl	8002450 <Refresh_ADC_Value>
 8002f6e:	1c03      	adds	r3, r0, #0
 8002f70:	1c19      	adds	r1, r3, #0
 8002f72:	1c20      	adds	r0, r4, #0
 8002f74:	f7fd fc3c 	bl	80007f0 <__aeabi_fmul>
 8002f78:	1c03      	adds	r3, r0, #0
 8002f7a:	1c18      	adds	r0, r3, #0
 8002f7c:	f7fd f94c 	bl	8000218 <__aeabi_f2uiz>
 8002f80:	0003      	movs	r3, r0
 8002f82:	0018      	movs	r0, r3
 8002f84:	f000 fd26 	bl	80039d4 <HAL_Delay>
			for(uint8_t i=cantLeds;i>=l;i--){
 8002f88:	197b      	adds	r3, r7, r5
 8002f8a:	781a      	ldrb	r2, [r3, #0]
 8002f8c:	197b      	adds	r3, r7, r5
 8002f8e:	3a01      	subs	r2, #1
 8002f90:	701a      	strb	r2, [r3, #0]
 8002f92:	230c      	movs	r3, #12
 8002f94:	18fa      	adds	r2, r7, r3
 8002f96:	230b      	movs	r3, #11
 8002f98:	18fb      	adds	r3, r7, r3
 8002f9a:	7812      	ldrb	r2, [r2, #0]
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d2d7      	bcs.n	8002f52 <VolumenAbrir+0xce>
		for(uint8_t i=1;i<=cantLeds;i++){
 8002fa2:	210e      	movs	r1, #14
 8002fa4:	187b      	adds	r3, r7, r1
 8002fa6:	781a      	ldrb	r2, [r3, #0]
 8002fa8:	187b      	adds	r3, r7, r1
 8002faa:	3201      	adds	r2, #1
 8002fac:	701a      	strb	r2, [r3, #0]
 8002fae:	4b18      	ldr	r3, [pc, #96]	; (8003010 <VolumenAbrir+0x18c>)
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	220e      	movs	r2, #14
 8002fb4:	18ba      	adds	r2, r7, r2
 8002fb6:	7812      	ldrb	r2, [r2, #0]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d800      	bhi.n	8002fbe <VolumenAbrir+0x13a>
 8002fbc:	e77b      	b.n	8002eb6 <VolumenAbrir+0x32>
			}
		}
		HAL_Delay(tiempo2*Refresh_ADC_Value());
 8002fbe:	1cbb      	adds	r3, r7, #2
 8002fc0:	881b      	ldrh	r3, [r3, #0]
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	f7fd ff08 	bl	8000dd8 <__aeabi_i2f>
 8002fc8:	1c04      	adds	r4, r0, #0
 8002fca:	f7ff fa41 	bl	8002450 <Refresh_ADC_Value>
 8002fce:	1c03      	adds	r3, r0, #0
 8002fd0:	1c19      	adds	r1, r3, #0
 8002fd2:	1c20      	adds	r0, r4, #0
 8002fd4:	f7fd fc0c 	bl	80007f0 <__aeabi_fmul>
 8002fd8:	1c03      	adds	r3, r0, #0
 8002fda:	1c18      	adds	r0, r3, #0
 8002fdc:	f7fd f91c 	bl	8000218 <__aeabi_f2uiz>
 8002fe0:	0003      	movs	r3, r0
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	f000 fcf6 	bl	80039d4 <HAL_Delay>
	for(uint8_t v=0;v<veces;v++){
 8002fe8:	210f      	movs	r1, #15
 8002fea:	187b      	adds	r3, r7, r1
 8002fec:	781a      	ldrb	r2, [r3, #0]
 8002fee:	187b      	adds	r3, r7, r1
 8002ff0:	3201      	adds	r2, #1
 8002ff2:	701a      	strb	r2, [r3, #0]
 8002ff4:	230f      	movs	r3, #15
 8002ff6:	18fa      	adds	r2, r7, r3
 8002ff8:	1dfb      	adds	r3, r7, #7
 8002ffa:	7812      	ldrb	r2, [r2, #0]
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d200      	bcs.n	8003004 <VolumenAbrir+0x180>
 8003002:	e753      	b.n	8002eac <VolumenAbrir+0x28>
	}
}
 8003004:	46c0      	nop			; (mov r8, r8)
 8003006:	46c0      	nop			; (mov r8, r8)
 8003008:	46bd      	mov	sp, r7
 800300a:	b004      	add	sp, #16
 800300c:	bdb0      	pop	{r4, r5, r7, pc}
 800300e:	46c0      	nop			; (mov r8, r8)
 8003010:	20000000 	.word	0x20000000

08003014 <VolumenCerrar>:

void VolumenCerrar(uint8_t veces, uint16_t tiempo, uint16_t tiempo2){
 8003014:	b5b0      	push	{r4, r5, r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	0004      	movs	r4, r0
 800301c:	0008      	movs	r0, r1
 800301e:	0011      	movs	r1, r2
 8003020:	1dfb      	adds	r3, r7, #7
 8003022:	1c22      	adds	r2, r4, #0
 8003024:	701a      	strb	r2, [r3, #0]
 8003026:	1d3b      	adds	r3, r7, #4
 8003028:	1c02      	adds	r2, r0, #0
 800302a:	801a      	strh	r2, [r3, #0]
 800302c:	1cbb      	adds	r3, r7, #2
 800302e:	1c0a      	adds	r2, r1, #0
 8003030:	801a      	strh	r2, [r3, #0]
	for(uint8_t v=0;v<veces;v++){
 8003032:	230f      	movs	r3, #15
 8003034:	18fb      	adds	r3, r7, r3
 8003036:	2200      	movs	r2, #0
 8003038:	701a      	strb	r2, [r3, #0]
 800303a:	e0a2      	b.n	8003182 <VolumenCerrar+0x16e>
		uint8_t l;
		for(uint8_t i=cantLeds;i>=1;i--){
 800303c:	230e      	movs	r3, #14
 800303e:	18fb      	adds	r3, r7, r3
 8003040:	4a56      	ldr	r2, [pc, #344]	; (800319c <VolumenCerrar+0x188>)
 8003042:	7812      	ldrb	r2, [r2, #0]
 8003044:	701a      	strb	r2, [r3, #0]
 8003046:	e07b      	b.n	8003140 <VolumenCerrar+0x12c>
			l=i;
 8003048:	250b      	movs	r5, #11
 800304a:	197b      	adds	r3, r7, r5
 800304c:	220e      	movs	r2, #14
 800304e:	18ba      	adds	r2, r7, r2
 8003050:	7812      	ldrb	r2, [r2, #0]
 8003052:	701a      	strb	r2, [r3, #0]
			HAL_Delay(tiempo*Refresh_ADC_Value());
 8003054:	1d3b      	adds	r3, r7, #4
 8003056:	881b      	ldrh	r3, [r3, #0]
 8003058:	0018      	movs	r0, r3
 800305a:	f7fd febd 	bl	8000dd8 <__aeabi_i2f>
 800305e:	1c04      	adds	r4, r0, #0
 8003060:	f7ff f9f6 	bl	8002450 <Refresh_ADC_Value>
 8003064:	1c03      	adds	r3, r0, #0
 8003066:	1c19      	adds	r1, r3, #0
 8003068:	1c20      	adds	r0, r4, #0
 800306a:	f7fd fbc1 	bl	80007f0 <__aeabi_fmul>
 800306e:	1c03      	adds	r3, r0, #0
 8003070:	1c18      	adds	r0, r3, #0
 8003072:	f7fd f8d1 	bl	8000218 <__aeabi_f2uiz>
 8003076:	0003      	movs	r3, r0
 8003078:	0018      	movs	r0, r3
 800307a:	f000 fcab 	bl	80039d4 <HAL_Delay>
			for(uint8_t i=l;i<=cantLeds;i++){
 800307e:	230d      	movs	r3, #13
 8003080:	18fb      	adds	r3, r7, r3
 8003082:	197a      	adds	r2, r7, r5
 8003084:	7812      	ldrb	r2, [r2, #0]
 8003086:	701a      	strb	r2, [r3, #0]
 8003088:	e01f      	b.n	80030ca <VolumenCerrar+0xb6>
				Encender_1_Led_3(i);
 800308a:	250d      	movs	r5, #13
 800308c:	197b      	adds	r3, r7, r5
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	0018      	movs	r0, r3
 8003092:	f7ff fb55 	bl	8002740 <Encender_1_Led_3>
				HAL_Delay(tiempo*Refresh_ADC_Value());
 8003096:	1d3b      	adds	r3, r7, #4
 8003098:	881b      	ldrh	r3, [r3, #0]
 800309a:	0018      	movs	r0, r3
 800309c:	f7fd fe9c 	bl	8000dd8 <__aeabi_i2f>
 80030a0:	1c04      	adds	r4, r0, #0
 80030a2:	f7ff f9d5 	bl	8002450 <Refresh_ADC_Value>
 80030a6:	1c03      	adds	r3, r0, #0
 80030a8:	1c19      	adds	r1, r3, #0
 80030aa:	1c20      	adds	r0, r4, #0
 80030ac:	f7fd fba0 	bl	80007f0 <__aeabi_fmul>
 80030b0:	1c03      	adds	r3, r0, #0
 80030b2:	1c18      	adds	r0, r3, #0
 80030b4:	f7fd f8b0 	bl	8000218 <__aeabi_f2uiz>
 80030b8:	0003      	movs	r3, r0
 80030ba:	0018      	movs	r0, r3
 80030bc:	f000 fc8a 	bl	80039d4 <HAL_Delay>
			for(uint8_t i=l;i<=cantLeds;i++){
 80030c0:	197b      	adds	r3, r7, r5
 80030c2:	781a      	ldrb	r2, [r3, #0]
 80030c4:	197b      	adds	r3, r7, r5
 80030c6:	3201      	adds	r2, #1
 80030c8:	701a      	strb	r2, [r3, #0]
 80030ca:	4b34      	ldr	r3, [pc, #208]	; (800319c <VolumenCerrar+0x188>)
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	220d      	movs	r2, #13
 80030d0:	18ba      	adds	r2, r7, r2
 80030d2:	7812      	ldrb	r2, [r2, #0]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d9d8      	bls.n	800308a <VolumenCerrar+0x76>
			}
			for(uint8_t i=cantLeds;i>=l;i--){
 80030d8:	230c      	movs	r3, #12
 80030da:	18fb      	adds	r3, r7, r3
 80030dc:	4a2f      	ldr	r2, [pc, #188]	; (800319c <VolumenCerrar+0x188>)
 80030de:	7812      	ldrb	r2, [r2, #0]
 80030e0:	701a      	strb	r2, [r3, #0]
 80030e2:	e01f      	b.n	8003124 <VolumenCerrar+0x110>
				Encender_1_Led_3(i);
 80030e4:	250c      	movs	r5, #12
 80030e6:	197b      	adds	r3, r7, r5
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	0018      	movs	r0, r3
 80030ec:	f7ff fb28 	bl	8002740 <Encender_1_Led_3>
				HAL_Delay(tiempo*Refresh_ADC_Value());
 80030f0:	1d3b      	adds	r3, r7, #4
 80030f2:	881b      	ldrh	r3, [r3, #0]
 80030f4:	0018      	movs	r0, r3
 80030f6:	f7fd fe6f 	bl	8000dd8 <__aeabi_i2f>
 80030fa:	1c04      	adds	r4, r0, #0
 80030fc:	f7ff f9a8 	bl	8002450 <Refresh_ADC_Value>
 8003100:	1c03      	adds	r3, r0, #0
 8003102:	1c19      	adds	r1, r3, #0
 8003104:	1c20      	adds	r0, r4, #0
 8003106:	f7fd fb73 	bl	80007f0 <__aeabi_fmul>
 800310a:	1c03      	adds	r3, r0, #0
 800310c:	1c18      	adds	r0, r3, #0
 800310e:	f7fd f883 	bl	8000218 <__aeabi_f2uiz>
 8003112:	0003      	movs	r3, r0
 8003114:	0018      	movs	r0, r3
 8003116:	f000 fc5d 	bl	80039d4 <HAL_Delay>
			for(uint8_t i=cantLeds;i>=l;i--){
 800311a:	197b      	adds	r3, r7, r5
 800311c:	781a      	ldrb	r2, [r3, #0]
 800311e:	197b      	adds	r3, r7, r5
 8003120:	3a01      	subs	r2, #1
 8003122:	701a      	strb	r2, [r3, #0]
 8003124:	230c      	movs	r3, #12
 8003126:	18fa      	adds	r2, r7, r3
 8003128:	230b      	movs	r3, #11
 800312a:	18fb      	adds	r3, r7, r3
 800312c:	7812      	ldrb	r2, [r2, #0]
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	429a      	cmp	r2, r3
 8003132:	d2d7      	bcs.n	80030e4 <VolumenCerrar+0xd0>
		for(uint8_t i=cantLeds;i>=1;i--){
 8003134:	210e      	movs	r1, #14
 8003136:	187b      	adds	r3, r7, r1
 8003138:	781a      	ldrb	r2, [r3, #0]
 800313a:	187b      	adds	r3, r7, r1
 800313c:	3a01      	subs	r2, #1
 800313e:	701a      	strb	r2, [r3, #0]
 8003140:	230e      	movs	r3, #14
 8003142:	18fb      	adds	r3, r7, r3
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d000      	beq.n	800314c <VolumenCerrar+0x138>
 800314a:	e77d      	b.n	8003048 <VolumenCerrar+0x34>
			}
		}
		HAL_Delay(tiempo2*Refresh_ADC_Value());
 800314c:	1cbb      	adds	r3, r7, #2
 800314e:	881b      	ldrh	r3, [r3, #0]
 8003150:	0018      	movs	r0, r3
 8003152:	f7fd fe41 	bl	8000dd8 <__aeabi_i2f>
 8003156:	1c04      	adds	r4, r0, #0
 8003158:	f7ff f97a 	bl	8002450 <Refresh_ADC_Value>
 800315c:	1c03      	adds	r3, r0, #0
 800315e:	1c19      	adds	r1, r3, #0
 8003160:	1c20      	adds	r0, r4, #0
 8003162:	f7fd fb45 	bl	80007f0 <__aeabi_fmul>
 8003166:	1c03      	adds	r3, r0, #0
 8003168:	1c18      	adds	r0, r3, #0
 800316a:	f7fd f855 	bl	8000218 <__aeabi_f2uiz>
 800316e:	0003      	movs	r3, r0
 8003170:	0018      	movs	r0, r3
 8003172:	f000 fc2f 	bl	80039d4 <HAL_Delay>
	for(uint8_t v=0;v<veces;v++){
 8003176:	210f      	movs	r1, #15
 8003178:	187b      	adds	r3, r7, r1
 800317a:	781a      	ldrb	r2, [r3, #0]
 800317c:	187b      	adds	r3, r7, r1
 800317e:	3201      	adds	r2, #1
 8003180:	701a      	strb	r2, [r3, #0]
 8003182:	230f      	movs	r3, #15
 8003184:	18fa      	adds	r2, r7, r3
 8003186:	1dfb      	adds	r3, r7, #7
 8003188:	7812      	ldrb	r2, [r2, #0]
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d200      	bcs.n	8003192 <VolumenCerrar+0x17e>
 8003190:	e754      	b.n	800303c <VolumenCerrar+0x28>
	}
}
 8003192:	46c0      	nop			; (mov r8, r8)
 8003194:	46c0      	nop			; (mov r8, r8)
 8003196:	46bd      	mov	sp, r7
 8003198:	b004      	add	sp, #16
 800319a:	bdb0      	pop	{r4, r5, r7, pc}
 800319c:	20000000 	.word	0x20000000

080031a0 <ArmarIzquierda>:

void ArmarIzquierda(uint8_t veces, uint16_t tiempo, uint16_t tiempo2){
 80031a0:	b590      	push	{r4, r7, lr}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	0004      	movs	r4, r0
 80031a8:	0008      	movs	r0, r1
 80031aa:	0011      	movs	r1, r2
 80031ac:	1dfb      	adds	r3, r7, #7
 80031ae:	1c22      	adds	r2, r4, #0
 80031b0:	701a      	strb	r2, [r3, #0]
 80031b2:	1d3b      	adds	r3, r7, #4
 80031b4:	1c02      	adds	r2, r0, #0
 80031b6:	801a      	strh	r2, [r3, #0]
 80031b8:	1cbb      	adds	r3, r7, #2
 80031ba:	1c0a      	adds	r2, r1, #0
 80031bc:	801a      	strh	r2, [r3, #0]
	for(uint8_t v=0;v<veces;v++){
 80031be:	230f      	movs	r3, #15
 80031c0:	18fb      	adds	r3, r7, r3
 80031c2:	2200      	movs	r2, #0
 80031c4:	701a      	strb	r2, [r3, #0]
 80031c6:	e0c1      	b.n	800334c <ArmarIzquierda+0x1ac>

		uint8_t l=1;
 80031c8:	230e      	movs	r3, #14
 80031ca:	18fb      	adds	r3, r7, r3
 80031cc:	2201      	movs	r2, #1
 80031ce:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=cantLeds;i>=1;i--){
 80031d0:	230d      	movs	r3, #13
 80031d2:	18fb      	adds	r3, r7, r3
 80031d4:	4a64      	ldr	r2, [pc, #400]	; (8003368 <ArmarIzquierda+0x1c8>)
 80031d6:	7812      	ldrb	r2, [r2, #0]
 80031d8:	701a      	strb	r2, [r3, #0]
 80031da:	e096      	b.n	800330a <ArmarIzquierda+0x16a>
			for(uint8_t i=cantLeds;i>=l;i--){
 80031dc:	230c      	movs	r3, #12
 80031de:	18fb      	adds	r3, r7, r3
 80031e0:	4a61      	ldr	r2, [pc, #388]	; (8003368 <ArmarIzquierda+0x1c8>)
 80031e2:	7812      	ldrb	r2, [r2, #0]
 80031e4:	701a      	strb	r2, [r3, #0]
 80031e6:	e06b      	b.n	80032c0 <ArmarIzquierda+0x120>
				Encender_1_Led_4(i,l);
 80031e8:	240e      	movs	r4, #14
 80031ea:	193b      	adds	r3, r7, r4
 80031ec:	781a      	ldrb	r2, [r3, #0]
 80031ee:	230c      	movs	r3, #12
 80031f0:	18fb      	adds	r3, r7, r3
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	0011      	movs	r1, r2
 80031f6:	0018      	movs	r0, r3
 80031f8:	f7ff fad6 	bl	80027a8 <Encender_1_Led_4>
				if(l<cantLeds/2){
 80031fc:	4b5a      	ldr	r3, [pc, #360]	; (8003368 <ArmarIzquierda+0x1c8>)
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	085b      	lsrs	r3, r3, #1
 8003202:	b2db      	uxtb	r3, r3
 8003204:	193a      	adds	r2, r7, r4
 8003206:	7812      	ldrb	r2, [r2, #0]
 8003208:	429a      	cmp	r2, r3
 800320a:	d215      	bcs.n	8003238 <ArmarIzquierda+0x98>
					HAL_Delay(tiempo*Refresh_ADC_Value());
 800320c:	1d3b      	adds	r3, r7, #4
 800320e:	881b      	ldrh	r3, [r3, #0]
 8003210:	0018      	movs	r0, r3
 8003212:	f7fd fde1 	bl	8000dd8 <__aeabi_i2f>
 8003216:	1c04      	adds	r4, r0, #0
 8003218:	f7ff f91a 	bl	8002450 <Refresh_ADC_Value>
 800321c:	1c03      	adds	r3, r0, #0
 800321e:	1c19      	adds	r1, r3, #0
 8003220:	1c20      	adds	r0, r4, #0
 8003222:	f7fd fae5 	bl	80007f0 <__aeabi_fmul>
 8003226:	1c03      	adds	r3, r0, #0
 8003228:	1c18      	adds	r0, r3, #0
 800322a:	f7fc fff5 	bl	8000218 <__aeabi_f2uiz>
 800322e:	0003      	movs	r3, r0
 8003230:	0018      	movs	r0, r3
 8003232:	f000 fbcf 	bl	80039d4 <HAL_Delay>
 8003236:	e03d      	b.n	80032b4 <ArmarIzquierda+0x114>
				}else if(l>=cantLeds-2){
 8003238:	230e      	movs	r3, #14
 800323a:	18fb      	adds	r3, r7, r3
 800323c:	781a      	ldrb	r2, [r3, #0]
 800323e:	4b4a      	ldr	r3, [pc, #296]	; (8003368 <ArmarIzquierda+0x1c8>)
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	3b02      	subs	r3, #2
 8003244:	429a      	cmp	r2, r3
 8003246:	db1b      	blt.n	8003280 <ArmarIzquierda+0xe0>
					HAL_Delay(tiempo*Refresh_ADC_Value()*4);
 8003248:	1d3b      	adds	r3, r7, #4
 800324a:	881b      	ldrh	r3, [r3, #0]
 800324c:	0018      	movs	r0, r3
 800324e:	f7fd fdc3 	bl	8000dd8 <__aeabi_i2f>
 8003252:	1c04      	adds	r4, r0, #0
 8003254:	f7ff f8fc 	bl	8002450 <Refresh_ADC_Value>
 8003258:	1c03      	adds	r3, r0, #0
 800325a:	1c19      	adds	r1, r3, #0
 800325c:	1c20      	adds	r0, r4, #0
 800325e:	f7fd fac7 	bl	80007f0 <__aeabi_fmul>
 8003262:	1c03      	adds	r3, r0, #0
 8003264:	2181      	movs	r1, #129	; 0x81
 8003266:	05c9      	lsls	r1, r1, #23
 8003268:	1c18      	adds	r0, r3, #0
 800326a:	f7fd fac1 	bl	80007f0 <__aeabi_fmul>
 800326e:	1c03      	adds	r3, r0, #0
 8003270:	1c18      	adds	r0, r3, #0
 8003272:	f7fc ffd1 	bl	8000218 <__aeabi_f2uiz>
 8003276:	0003      	movs	r3, r0
 8003278:	0018      	movs	r0, r3
 800327a:	f000 fbab 	bl	80039d4 <HAL_Delay>
 800327e:	e019      	b.n	80032b4 <ArmarIzquierda+0x114>
				}else{
					HAL_Delay(tiempo*Refresh_ADC_Value()*2);
 8003280:	1d3b      	adds	r3, r7, #4
 8003282:	881b      	ldrh	r3, [r3, #0]
 8003284:	0018      	movs	r0, r3
 8003286:	f7fd fda7 	bl	8000dd8 <__aeabi_i2f>
 800328a:	1c04      	adds	r4, r0, #0
 800328c:	f7ff f8e0 	bl	8002450 <Refresh_ADC_Value>
 8003290:	1c03      	adds	r3, r0, #0
 8003292:	1c19      	adds	r1, r3, #0
 8003294:	1c20      	adds	r0, r4, #0
 8003296:	f7fd faab 	bl	80007f0 <__aeabi_fmul>
 800329a:	1c03      	adds	r3, r0, #0
 800329c:	1c19      	adds	r1, r3, #0
 800329e:	1c18      	adds	r0, r3, #0
 80032a0:	f7fc fff0 	bl	8000284 <__aeabi_fadd>
 80032a4:	1c03      	adds	r3, r0, #0
 80032a6:	1c18      	adds	r0, r3, #0
 80032a8:	f7fc ffb6 	bl	8000218 <__aeabi_f2uiz>
 80032ac:	0003      	movs	r3, r0
 80032ae:	0018      	movs	r0, r3
 80032b0:	f000 fb90 	bl	80039d4 <HAL_Delay>
			for(uint8_t i=cantLeds;i>=l;i--){
 80032b4:	210c      	movs	r1, #12
 80032b6:	187b      	adds	r3, r7, r1
 80032b8:	781a      	ldrb	r2, [r3, #0]
 80032ba:	187b      	adds	r3, r7, r1
 80032bc:	3a01      	subs	r2, #1
 80032be:	701a      	strb	r2, [r3, #0]
 80032c0:	230c      	movs	r3, #12
 80032c2:	18fa      	adds	r2, r7, r3
 80032c4:	210e      	movs	r1, #14
 80032c6:	187b      	adds	r3, r7, r1
 80032c8:	7812      	ldrb	r2, [r2, #0]
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d28b      	bcs.n	80031e8 <ArmarIzquierda+0x48>
				}
				//HAL_Delay(tiempo);
			}

			if(l>=cantLeds){
 80032d0:	4b25      	ldr	r3, [pc, #148]	; (8003368 <ArmarIzquierda+0x1c8>)
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	187a      	adds	r2, r7, r1
 80032d6:	7812      	ldrb	r2, [r2, #0]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d303      	bcc.n	80032e4 <ArmarIzquierda+0x144>
				l=1;
 80032dc:	187b      	adds	r3, r7, r1
 80032de:	2201      	movs	r2, #1
 80032e0:	701a      	strb	r2, [r3, #0]
 80032e2:	e00c      	b.n	80032fe <ArmarIzquierda+0x15e>
			}else{
				ControlLeds(l, 1);
 80032e4:	240e      	movs	r4, #14
 80032e6:	193b      	adds	r3, r7, r4
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	2101      	movs	r1, #1
 80032ec:	0018      	movs	r0, r3
 80032ee:	f7ff f8d9 	bl	80024a4 <ControlLeds>
				l++;
 80032f2:	0021      	movs	r1, r4
 80032f4:	187b      	adds	r3, r7, r1
 80032f6:	781a      	ldrb	r2, [r3, #0]
 80032f8:	187b      	adds	r3, r7, r1
 80032fa:	3201      	adds	r2, #1
 80032fc:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=cantLeds;i>=1;i--){
 80032fe:	210d      	movs	r1, #13
 8003300:	187b      	adds	r3, r7, r1
 8003302:	781a      	ldrb	r2, [r3, #0]
 8003304:	187b      	adds	r3, r7, r1
 8003306:	3a01      	subs	r2, #1
 8003308:	701a      	strb	r2, [r3, #0]
 800330a:	230d      	movs	r3, #13
 800330c:	18fb      	adds	r3, r7, r3
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d000      	beq.n	8003316 <ArmarIzquierda+0x176>
 8003314:	e762      	b.n	80031dc <ArmarIzquierda+0x3c>
			}
		}

		HAL_Delay(tiempo2*Refresh_ADC_Value());
 8003316:	1cbb      	adds	r3, r7, #2
 8003318:	881b      	ldrh	r3, [r3, #0]
 800331a:	0018      	movs	r0, r3
 800331c:	f7fd fd5c 	bl	8000dd8 <__aeabi_i2f>
 8003320:	1c04      	adds	r4, r0, #0
 8003322:	f7ff f895 	bl	8002450 <Refresh_ADC_Value>
 8003326:	1c03      	adds	r3, r0, #0
 8003328:	1c19      	adds	r1, r3, #0
 800332a:	1c20      	adds	r0, r4, #0
 800332c:	f7fd fa60 	bl	80007f0 <__aeabi_fmul>
 8003330:	1c03      	adds	r3, r0, #0
 8003332:	1c18      	adds	r0, r3, #0
 8003334:	f7fc ff70 	bl	8000218 <__aeabi_f2uiz>
 8003338:	0003      	movs	r3, r0
 800333a:	0018      	movs	r0, r3
 800333c:	f000 fb4a 	bl	80039d4 <HAL_Delay>
	for(uint8_t v=0;v<veces;v++){
 8003340:	210f      	movs	r1, #15
 8003342:	187b      	adds	r3, r7, r1
 8003344:	781a      	ldrb	r2, [r3, #0]
 8003346:	187b      	adds	r3, r7, r1
 8003348:	3201      	adds	r2, #1
 800334a:	701a      	strb	r2, [r3, #0]
 800334c:	230f      	movs	r3, #15
 800334e:	18fa      	adds	r2, r7, r3
 8003350:	1dfb      	adds	r3, r7, #7
 8003352:	7812      	ldrb	r2, [r2, #0]
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	429a      	cmp	r2, r3
 8003358:	d200      	bcs.n	800335c <ArmarIzquierda+0x1bc>
 800335a:	e735      	b.n	80031c8 <ArmarIzquierda+0x28>
	}
}
 800335c:	46c0      	nop			; (mov r8, r8)
 800335e:	46c0      	nop			; (mov r8, r8)
 8003360:	46bd      	mov	sp, r7
 8003362:	b005      	add	sp, #20
 8003364:	bd90      	pop	{r4, r7, pc}
 8003366:	46c0      	nop			; (mov r8, r8)
 8003368:	20000000 	.word	0x20000000

0800336c <EncenderAleatorio>:

void EncenderAleatorio(uint8_t veces, uint16_t tiempo, uint16_t tiempo2){
 800336c:	b5b0      	push	{r4, r5, r7, lr}
 800336e:	b088      	sub	sp, #32
 8003370:	af00      	add	r7, sp, #0
 8003372:	0004      	movs	r4, r0
 8003374:	0008      	movs	r0, r1
 8003376:	0011      	movs	r1, r2
 8003378:	1dfb      	adds	r3, r7, #7
 800337a:	1c22      	adds	r2, r4, #0
 800337c:	701a      	strb	r2, [r3, #0]
 800337e:	1d3b      	adds	r3, r7, #4
 8003380:	1c02      	adds	r2, r0, #0
 8003382:	801a      	strh	r2, [r3, #0]
 8003384:	1cbb      	adds	r3, r7, #2
 8003386:	1c0a      	adds	r2, r1, #0
 8003388:	801a      	strh	r2, [r3, #0]

	uint8_t secuencia1[6]={6,2,4,1,3,5};
 800338a:	2314      	movs	r3, #20
 800338c:	18fb      	adds	r3, r7, r3
 800338e:	4aa1      	ldr	r2, [pc, #644]	; (8003614 <EncenderAleatorio+0x2a8>)
 8003390:	6811      	ldr	r1, [r2, #0]
 8003392:	6019      	str	r1, [r3, #0]
 8003394:	8892      	ldrh	r2, [r2, #4]
 8003396:	809a      	strh	r2, [r3, #4]
	uint8_t secuencia2[6]={5,1,4,2,6,3};
 8003398:	230c      	movs	r3, #12
 800339a:	18fb      	adds	r3, r7, r3
 800339c:	4a9e      	ldr	r2, [pc, #632]	; (8003618 <EncenderAleatorio+0x2ac>)
 800339e:	6811      	ldr	r1, [r2, #0]
 80033a0:	6019      	str	r1, [r3, #0]
 80033a2:	8892      	ldrh	r2, [r2, #4]
 80033a4:	809a      	strh	r2, [r3, #4]


	for(uint8_t i=0;i<cantLeds;i++){
 80033a6:	231f      	movs	r3, #31
 80033a8:	18fb      	adds	r3, r7, r3
 80033aa:	2200      	movs	r2, #0
 80033ac:	701a      	strb	r2, [r3, #0]
 80033ae:	e023      	b.n	80033f8 <EncenderAleatorio+0x8c>
		ControlLeds(secuencia1[i], 1);
 80033b0:	251f      	movs	r5, #31
 80033b2:	197b      	adds	r3, r7, r5
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	2214      	movs	r2, #20
 80033b8:	18ba      	adds	r2, r7, r2
 80033ba:	5cd3      	ldrb	r3, [r2, r3]
 80033bc:	2101      	movs	r1, #1
 80033be:	0018      	movs	r0, r3
 80033c0:	f7ff f870 	bl	80024a4 <ControlLeds>
		HAL_Delay(tiempo*Refresh_ADC_Value());
 80033c4:	1d3b      	adds	r3, r7, #4
 80033c6:	881b      	ldrh	r3, [r3, #0]
 80033c8:	0018      	movs	r0, r3
 80033ca:	f7fd fd05 	bl	8000dd8 <__aeabi_i2f>
 80033ce:	1c04      	adds	r4, r0, #0
 80033d0:	f7ff f83e 	bl	8002450 <Refresh_ADC_Value>
 80033d4:	1c03      	adds	r3, r0, #0
 80033d6:	1c19      	adds	r1, r3, #0
 80033d8:	1c20      	adds	r0, r4, #0
 80033da:	f7fd fa09 	bl	80007f0 <__aeabi_fmul>
 80033de:	1c03      	adds	r3, r0, #0
 80033e0:	1c18      	adds	r0, r3, #0
 80033e2:	f7fc ff19 	bl	8000218 <__aeabi_f2uiz>
 80033e6:	0003      	movs	r3, r0
 80033e8:	0018      	movs	r0, r3
 80033ea:	f000 faf3 	bl	80039d4 <HAL_Delay>
	for(uint8_t i=0;i<cantLeds;i++){
 80033ee:	197b      	adds	r3, r7, r5
 80033f0:	781a      	ldrb	r2, [r3, #0]
 80033f2:	197b      	adds	r3, r7, r5
 80033f4:	3201      	adds	r2, #1
 80033f6:	701a      	strb	r2, [r3, #0]
 80033f8:	4b88      	ldr	r3, [pc, #544]	; (800361c <EncenderAleatorio+0x2b0>)
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	221f      	movs	r2, #31
 80033fe:	18ba      	adds	r2, r7, r2
 8003400:	7812      	ldrb	r2, [r2, #0]
 8003402:	429a      	cmp	r2, r3
 8003404:	d3d4      	bcc.n	80033b0 <EncenderAleatorio+0x44>
	}

	HAL_Delay(tiempo2*Refresh_ADC_Value());
 8003406:	1cbb      	adds	r3, r7, #2
 8003408:	881b      	ldrh	r3, [r3, #0]
 800340a:	0018      	movs	r0, r3
 800340c:	f7fd fce4 	bl	8000dd8 <__aeabi_i2f>
 8003410:	1c04      	adds	r4, r0, #0
 8003412:	f7ff f81d 	bl	8002450 <Refresh_ADC_Value>
 8003416:	1c03      	adds	r3, r0, #0
 8003418:	1c19      	adds	r1, r3, #0
 800341a:	1c20      	adds	r0, r4, #0
 800341c:	f7fd f9e8 	bl	80007f0 <__aeabi_fmul>
 8003420:	1c03      	adds	r3, r0, #0
 8003422:	1c18      	adds	r0, r3, #0
 8003424:	f7fc fef8 	bl	8000218 <__aeabi_f2uiz>
 8003428:	0003      	movs	r3, r0
 800342a:	0018      	movs	r0, r3
 800342c:	f000 fad2 	bl	80039d4 <HAL_Delay>

	for(int8_t i=cantLeds-1;i>=0;i--){
 8003430:	4b7a      	ldr	r3, [pc, #488]	; (800361c <EncenderAleatorio+0x2b0>)
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	3b01      	subs	r3, #1
 8003436:	b2da      	uxtb	r2, r3
 8003438:	231e      	movs	r3, #30
 800343a:	18fb      	adds	r3, r7, r3
 800343c:	701a      	strb	r2, [r3, #0]
 800343e:	e027      	b.n	8003490 <EncenderAleatorio+0x124>
		ControlLeds(secuencia1[i], 0);
 8003440:	251e      	movs	r5, #30
 8003442:	197b      	adds	r3, r7, r5
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	b25b      	sxtb	r3, r3
 8003448:	2214      	movs	r2, #20
 800344a:	18ba      	adds	r2, r7, r2
 800344c:	5cd3      	ldrb	r3, [r2, r3]
 800344e:	2100      	movs	r1, #0
 8003450:	0018      	movs	r0, r3
 8003452:	f7ff f827 	bl	80024a4 <ControlLeds>
		HAL_Delay(tiempo*Refresh_ADC_Value());
 8003456:	1d3b      	adds	r3, r7, #4
 8003458:	881b      	ldrh	r3, [r3, #0]
 800345a:	0018      	movs	r0, r3
 800345c:	f7fd fcbc 	bl	8000dd8 <__aeabi_i2f>
 8003460:	1c04      	adds	r4, r0, #0
 8003462:	f7fe fff5 	bl	8002450 <Refresh_ADC_Value>
 8003466:	1c03      	adds	r3, r0, #0
 8003468:	1c19      	adds	r1, r3, #0
 800346a:	1c20      	adds	r0, r4, #0
 800346c:	f7fd f9c0 	bl	80007f0 <__aeabi_fmul>
 8003470:	1c03      	adds	r3, r0, #0
 8003472:	1c18      	adds	r0, r3, #0
 8003474:	f7fc fed0 	bl	8000218 <__aeabi_f2uiz>
 8003478:	0003      	movs	r3, r0
 800347a:	0018      	movs	r0, r3
 800347c:	f000 faaa 	bl	80039d4 <HAL_Delay>
	for(int8_t i=cantLeds-1;i>=0;i--){
 8003480:	197b      	adds	r3, r7, r5
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	b25b      	sxtb	r3, r3
 8003486:	b2db      	uxtb	r3, r3
 8003488:	3b01      	subs	r3, #1
 800348a:	b2da      	uxtb	r2, r3
 800348c:	197b      	adds	r3, r7, r5
 800348e:	701a      	strb	r2, [r3, #0]
 8003490:	231e      	movs	r3, #30
 8003492:	18fb      	adds	r3, r7, r3
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	2b7f      	cmp	r3, #127	; 0x7f
 8003498:	d9d2      	bls.n	8003440 <EncenderAleatorio+0xd4>
	}

	HAL_Delay(tiempo2*Refresh_ADC_Value()*0.20);
 800349a:	1cbb      	adds	r3, r7, #2
 800349c:	881b      	ldrh	r3, [r3, #0]
 800349e:	0018      	movs	r0, r3
 80034a0:	f7fd fc9a 	bl	8000dd8 <__aeabi_i2f>
 80034a4:	1c04      	adds	r4, r0, #0
 80034a6:	f7fe ffd3 	bl	8002450 <Refresh_ADC_Value>
 80034aa:	1c03      	adds	r3, r0, #0
 80034ac:	1c19      	adds	r1, r3, #0
 80034ae:	1c20      	adds	r0, r4, #0
 80034b0:	f7fd f99e 	bl	80007f0 <__aeabi_fmul>
 80034b4:	1c03      	adds	r3, r0, #0
 80034b6:	1c18      	adds	r0, r3, #0
 80034b8:	f7fe fb52 	bl	8001b60 <__aeabi_f2d>
 80034bc:	4a58      	ldr	r2, [pc, #352]	; (8003620 <EncenderAleatorio+0x2b4>)
 80034be:	4b59      	ldr	r3, [pc, #356]	; (8003624 <EncenderAleatorio+0x2b8>)
 80034c0:	f7fd fd1a 	bl	8000ef8 <__aeabi_dmul>
 80034c4:	0002      	movs	r2, r0
 80034c6:	000b      	movs	r3, r1
 80034c8:	0010      	movs	r0, r2
 80034ca:	0019      	movs	r1, r3
 80034cc:	f7fc febc 	bl	8000248 <__aeabi_d2uiz>
 80034d0:	0003      	movs	r3, r0
 80034d2:	0018      	movs	r0, r3
 80034d4:	f000 fa7e 	bl	80039d4 <HAL_Delay>

	for(uint8_t i=0;i<cantLeds;i++){
 80034d8:	231d      	movs	r3, #29
 80034da:	18fb      	adds	r3, r7, r3
 80034dc:	2200      	movs	r2, #0
 80034de:	701a      	strb	r2, [r3, #0]
 80034e0:	e023      	b.n	800352a <EncenderAleatorio+0x1be>
		ControlLeds(secuencia2[i], 1);
 80034e2:	251d      	movs	r5, #29
 80034e4:	197b      	adds	r3, r7, r5
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	220c      	movs	r2, #12
 80034ea:	18ba      	adds	r2, r7, r2
 80034ec:	5cd3      	ldrb	r3, [r2, r3]
 80034ee:	2101      	movs	r1, #1
 80034f0:	0018      	movs	r0, r3
 80034f2:	f7fe ffd7 	bl	80024a4 <ControlLeds>
		HAL_Delay(tiempo*Refresh_ADC_Value());
 80034f6:	1d3b      	adds	r3, r7, #4
 80034f8:	881b      	ldrh	r3, [r3, #0]
 80034fa:	0018      	movs	r0, r3
 80034fc:	f7fd fc6c 	bl	8000dd8 <__aeabi_i2f>
 8003500:	1c04      	adds	r4, r0, #0
 8003502:	f7fe ffa5 	bl	8002450 <Refresh_ADC_Value>
 8003506:	1c03      	adds	r3, r0, #0
 8003508:	1c19      	adds	r1, r3, #0
 800350a:	1c20      	adds	r0, r4, #0
 800350c:	f7fd f970 	bl	80007f0 <__aeabi_fmul>
 8003510:	1c03      	adds	r3, r0, #0
 8003512:	1c18      	adds	r0, r3, #0
 8003514:	f7fc fe80 	bl	8000218 <__aeabi_f2uiz>
 8003518:	0003      	movs	r3, r0
 800351a:	0018      	movs	r0, r3
 800351c:	f000 fa5a 	bl	80039d4 <HAL_Delay>
	for(uint8_t i=0;i<cantLeds;i++){
 8003520:	197b      	adds	r3, r7, r5
 8003522:	781a      	ldrb	r2, [r3, #0]
 8003524:	197b      	adds	r3, r7, r5
 8003526:	3201      	adds	r2, #1
 8003528:	701a      	strb	r2, [r3, #0]
 800352a:	4b3c      	ldr	r3, [pc, #240]	; (800361c <EncenderAleatorio+0x2b0>)
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	221d      	movs	r2, #29
 8003530:	18ba      	adds	r2, r7, r2
 8003532:	7812      	ldrb	r2, [r2, #0]
 8003534:	429a      	cmp	r2, r3
 8003536:	d3d4      	bcc.n	80034e2 <EncenderAleatorio+0x176>
	}

	HAL_Delay(tiempo2*Refresh_ADC_Value());
 8003538:	1cbb      	adds	r3, r7, #2
 800353a:	881b      	ldrh	r3, [r3, #0]
 800353c:	0018      	movs	r0, r3
 800353e:	f7fd fc4b 	bl	8000dd8 <__aeabi_i2f>
 8003542:	1c04      	adds	r4, r0, #0
 8003544:	f7fe ff84 	bl	8002450 <Refresh_ADC_Value>
 8003548:	1c03      	adds	r3, r0, #0
 800354a:	1c19      	adds	r1, r3, #0
 800354c:	1c20      	adds	r0, r4, #0
 800354e:	f7fd f94f 	bl	80007f0 <__aeabi_fmul>
 8003552:	1c03      	adds	r3, r0, #0
 8003554:	1c18      	adds	r0, r3, #0
 8003556:	f7fc fe5f 	bl	8000218 <__aeabi_f2uiz>
 800355a:	0003      	movs	r3, r0
 800355c:	0018      	movs	r0, r3
 800355e:	f000 fa39 	bl	80039d4 <HAL_Delay>

	for(int8_t i=cantLeds-1;i>=0;i--){
 8003562:	4b2e      	ldr	r3, [pc, #184]	; (800361c <EncenderAleatorio+0x2b0>)
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	3b01      	subs	r3, #1
 8003568:	b2da      	uxtb	r2, r3
 800356a:	231c      	movs	r3, #28
 800356c:	18fb      	adds	r3, r7, r3
 800356e:	701a      	strb	r2, [r3, #0]
 8003570:	e027      	b.n	80035c2 <EncenderAleatorio+0x256>
		ControlLeds(secuencia2[i], 0);
 8003572:	251c      	movs	r5, #28
 8003574:	197b      	adds	r3, r7, r5
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	b25b      	sxtb	r3, r3
 800357a:	220c      	movs	r2, #12
 800357c:	18ba      	adds	r2, r7, r2
 800357e:	5cd3      	ldrb	r3, [r2, r3]
 8003580:	2100      	movs	r1, #0
 8003582:	0018      	movs	r0, r3
 8003584:	f7fe ff8e 	bl	80024a4 <ControlLeds>
		HAL_Delay(tiempo*Refresh_ADC_Value());
 8003588:	1d3b      	adds	r3, r7, #4
 800358a:	881b      	ldrh	r3, [r3, #0]
 800358c:	0018      	movs	r0, r3
 800358e:	f7fd fc23 	bl	8000dd8 <__aeabi_i2f>
 8003592:	1c04      	adds	r4, r0, #0
 8003594:	f7fe ff5c 	bl	8002450 <Refresh_ADC_Value>
 8003598:	1c03      	adds	r3, r0, #0
 800359a:	1c19      	adds	r1, r3, #0
 800359c:	1c20      	adds	r0, r4, #0
 800359e:	f7fd f927 	bl	80007f0 <__aeabi_fmul>
 80035a2:	1c03      	adds	r3, r0, #0
 80035a4:	1c18      	adds	r0, r3, #0
 80035a6:	f7fc fe37 	bl	8000218 <__aeabi_f2uiz>
 80035aa:	0003      	movs	r3, r0
 80035ac:	0018      	movs	r0, r3
 80035ae:	f000 fa11 	bl	80039d4 <HAL_Delay>
	for(int8_t i=cantLeds-1;i>=0;i--){
 80035b2:	197b      	adds	r3, r7, r5
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	b25b      	sxtb	r3, r3
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	3b01      	subs	r3, #1
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	197b      	adds	r3, r7, r5
 80035c0:	701a      	strb	r2, [r3, #0]
 80035c2:	231c      	movs	r3, #28
 80035c4:	18fb      	adds	r3, r7, r3
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	2b7f      	cmp	r3, #127	; 0x7f
 80035ca:	d9d2      	bls.n	8003572 <EncenderAleatorio+0x206>
	}

	HAL_Delay(tiempo2*Refresh_ADC_Value()*0.20);
 80035cc:	1cbb      	adds	r3, r7, #2
 80035ce:	881b      	ldrh	r3, [r3, #0]
 80035d0:	0018      	movs	r0, r3
 80035d2:	f7fd fc01 	bl	8000dd8 <__aeabi_i2f>
 80035d6:	1c04      	adds	r4, r0, #0
 80035d8:	f7fe ff3a 	bl	8002450 <Refresh_ADC_Value>
 80035dc:	1c03      	adds	r3, r0, #0
 80035de:	1c19      	adds	r1, r3, #0
 80035e0:	1c20      	adds	r0, r4, #0
 80035e2:	f7fd f905 	bl	80007f0 <__aeabi_fmul>
 80035e6:	1c03      	adds	r3, r0, #0
 80035e8:	1c18      	adds	r0, r3, #0
 80035ea:	f7fe fab9 	bl	8001b60 <__aeabi_f2d>
 80035ee:	4a0c      	ldr	r2, [pc, #48]	; (8003620 <EncenderAleatorio+0x2b4>)
 80035f0:	4b0c      	ldr	r3, [pc, #48]	; (8003624 <EncenderAleatorio+0x2b8>)
 80035f2:	f7fd fc81 	bl	8000ef8 <__aeabi_dmul>
 80035f6:	0002      	movs	r2, r0
 80035f8:	000b      	movs	r3, r1
 80035fa:	0010      	movs	r0, r2
 80035fc:	0019      	movs	r1, r3
 80035fe:	f7fc fe23 	bl	8000248 <__aeabi_d2uiz>
 8003602:	0003      	movs	r3, r0
 8003604:	0018      	movs	r0, r3
 8003606:	f000 f9e5 	bl	80039d4 <HAL_Delay>



}
 800360a:	46c0      	nop			; (mov r8, r8)
 800360c:	46bd      	mov	sp, r7
 800360e:	b008      	add	sp, #32
 8003610:	bdb0      	pop	{r4, r5, r7, pc}
 8003612:	46c0      	nop			; (mov r8, r8)
 8003614:	08005728 	.word	0x08005728
 8003618:	08005730 	.word	0x08005730
 800361c:	20000000 	.word	0x20000000
 8003620:	9999999a 	.word	0x9999999a
 8003624:	3fc99999 	.word	0x3fc99999

08003628 <Blink>:

void Blink(uint8_t veces, uint16_t tiempo){
 8003628:	b590      	push	{r4, r7, lr}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	0002      	movs	r2, r0
 8003630:	1dfb      	adds	r3, r7, #7
 8003632:	701a      	strb	r2, [r3, #0]
 8003634:	1d3b      	adds	r3, r7, #4
 8003636:	1c0a      	adds	r2, r1, #0
 8003638:	801a      	strh	r2, [r3, #0]
	for(uint8_t v=0;v<veces;v++){
 800363a:	230f      	movs	r3, #15
 800363c:	18fb      	adds	r3, r7, r3
 800363e:	2200      	movs	r2, #0
 8003640:	701a      	strb	r2, [r3, #0]
 8003642:	e066      	b.n	8003712 <Blink+0xea>
		for(uint8_t i=1;i<=cantLeds;i++){
 8003644:	230e      	movs	r3, #14
 8003646:	18fb      	adds	r3, r7, r3
 8003648:	2201      	movs	r2, #1
 800364a:	701a      	strb	r2, [r3, #0]
 800364c:	e00c      	b.n	8003668 <Blink+0x40>
			ControlLeds(i, 1);
 800364e:	240e      	movs	r4, #14
 8003650:	193b      	adds	r3, r7, r4
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2101      	movs	r1, #1
 8003656:	0018      	movs	r0, r3
 8003658:	f7fe ff24 	bl	80024a4 <ControlLeds>
		for(uint8_t i=1;i<=cantLeds;i++){
 800365c:	0021      	movs	r1, r4
 800365e:	187b      	adds	r3, r7, r1
 8003660:	781a      	ldrb	r2, [r3, #0]
 8003662:	187b      	adds	r3, r7, r1
 8003664:	3201      	adds	r2, #1
 8003666:	701a      	strb	r2, [r3, #0]
 8003668:	4b30      	ldr	r3, [pc, #192]	; (800372c <Blink+0x104>)
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	220e      	movs	r2, #14
 800366e:	18ba      	adds	r2, r7, r2
 8003670:	7812      	ldrb	r2, [r2, #0]
 8003672:	429a      	cmp	r2, r3
 8003674:	d9eb      	bls.n	800364e <Blink+0x26>
		}
		HAL_Delay(tiempo*Refresh_ADC_Value());
 8003676:	1d3b      	adds	r3, r7, #4
 8003678:	881b      	ldrh	r3, [r3, #0]
 800367a:	0018      	movs	r0, r3
 800367c:	f7fd fbac 	bl	8000dd8 <__aeabi_i2f>
 8003680:	1c04      	adds	r4, r0, #0
 8003682:	f7fe fee5 	bl	8002450 <Refresh_ADC_Value>
 8003686:	1c03      	adds	r3, r0, #0
 8003688:	1c19      	adds	r1, r3, #0
 800368a:	1c20      	adds	r0, r4, #0
 800368c:	f7fd f8b0 	bl	80007f0 <__aeabi_fmul>
 8003690:	1c03      	adds	r3, r0, #0
 8003692:	1c18      	adds	r0, r3, #0
 8003694:	f7fc fdc0 	bl	8000218 <__aeabi_f2uiz>
 8003698:	0003      	movs	r3, r0
 800369a:	0018      	movs	r0, r3
 800369c:	f000 f99a 	bl	80039d4 <HAL_Delay>
		for(uint8_t i=1;i<=cantLeds;i++){
 80036a0:	230d      	movs	r3, #13
 80036a2:	18fb      	adds	r3, r7, r3
 80036a4:	2201      	movs	r2, #1
 80036a6:	701a      	strb	r2, [r3, #0]
 80036a8:	e00c      	b.n	80036c4 <Blink+0x9c>
			ControlLeds(i, 0);
 80036aa:	240d      	movs	r4, #13
 80036ac:	193b      	adds	r3, r7, r4
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	2100      	movs	r1, #0
 80036b2:	0018      	movs	r0, r3
 80036b4:	f7fe fef6 	bl	80024a4 <ControlLeds>
		for(uint8_t i=1;i<=cantLeds;i++){
 80036b8:	0021      	movs	r1, r4
 80036ba:	187b      	adds	r3, r7, r1
 80036bc:	781a      	ldrb	r2, [r3, #0]
 80036be:	187b      	adds	r3, r7, r1
 80036c0:	3201      	adds	r2, #1
 80036c2:	701a      	strb	r2, [r3, #0]
 80036c4:	4b19      	ldr	r3, [pc, #100]	; (800372c <Blink+0x104>)
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	220d      	movs	r2, #13
 80036ca:	18ba      	adds	r2, r7, r2
 80036cc:	7812      	ldrb	r2, [r2, #0]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d9eb      	bls.n	80036aa <Blink+0x82>
		}
		HAL_Delay((tiempo*Refresh_ADC_Value())/5);
 80036d2:	1d3b      	adds	r3, r7, #4
 80036d4:	881b      	ldrh	r3, [r3, #0]
 80036d6:	0018      	movs	r0, r3
 80036d8:	f7fd fb7e 	bl	8000dd8 <__aeabi_i2f>
 80036dc:	1c04      	adds	r4, r0, #0
 80036de:	f7fe feb7 	bl	8002450 <Refresh_ADC_Value>
 80036e2:	1c03      	adds	r3, r0, #0
 80036e4:	1c19      	adds	r1, r3, #0
 80036e6:	1c20      	adds	r0, r4, #0
 80036e8:	f7fd f882 	bl	80007f0 <__aeabi_fmul>
 80036ec:	1c03      	adds	r3, r0, #0
 80036ee:	4910      	ldr	r1, [pc, #64]	; (8003730 <Blink+0x108>)
 80036f0:	1c18      	adds	r0, r3, #0
 80036f2:	f7fc ff65 	bl	80005c0 <__aeabi_fdiv>
 80036f6:	1c03      	adds	r3, r0, #0
 80036f8:	1c18      	adds	r0, r3, #0
 80036fa:	f7fc fd8d 	bl	8000218 <__aeabi_f2uiz>
 80036fe:	0003      	movs	r3, r0
 8003700:	0018      	movs	r0, r3
 8003702:	f000 f967 	bl	80039d4 <HAL_Delay>
	for(uint8_t v=0;v<veces;v++){
 8003706:	210f      	movs	r1, #15
 8003708:	187b      	adds	r3, r7, r1
 800370a:	781a      	ldrb	r2, [r3, #0]
 800370c:	187b      	adds	r3, r7, r1
 800370e:	3201      	adds	r2, #1
 8003710:	701a      	strb	r2, [r3, #0]
 8003712:	230f      	movs	r3, #15
 8003714:	18fa      	adds	r2, r7, r3
 8003716:	1dfb      	adds	r3, r7, #7
 8003718:	7812      	ldrb	r2, [r2, #0]
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	429a      	cmp	r2, r3
 800371e:	d391      	bcc.n	8003644 <Blink+0x1c>
	}
}
 8003720:	46c0      	nop			; (mov r8, r8)
 8003722:	46c0      	nop			; (mov r8, r8)
 8003724:	46bd      	mov	sp, r7
 8003726:	b005      	add	sp, #20
 8003728:	bd90      	pop	{r4, r7, pc}
 800372a:	46c0      	nop			; (mov r8, r8)
 800372c:	20000000 	.word	0x20000000
 8003730:	40a00000 	.word	0x40a00000

08003734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003738:	b672      	cpsid	i
}
 800373a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800373c:	e7fe      	b.n	800373c <Error_Handler+0x8>
	...

08003740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003746:	4b0f      	ldr	r3, [pc, #60]	; (8003784 <HAL_MspInit+0x44>)
 8003748:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800374a:	4b0e      	ldr	r3, [pc, #56]	; (8003784 <HAL_MspInit+0x44>)
 800374c:	2101      	movs	r1, #1
 800374e:	430a      	orrs	r2, r1
 8003750:	641a      	str	r2, [r3, #64]	; 0x40
 8003752:	4b0c      	ldr	r3, [pc, #48]	; (8003784 <HAL_MspInit+0x44>)
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	2201      	movs	r2, #1
 8003758:	4013      	ands	r3, r2
 800375a:	607b      	str	r3, [r7, #4]
 800375c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800375e:	4b09      	ldr	r3, [pc, #36]	; (8003784 <HAL_MspInit+0x44>)
 8003760:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003762:	4b08      	ldr	r3, [pc, #32]	; (8003784 <HAL_MspInit+0x44>)
 8003764:	2180      	movs	r1, #128	; 0x80
 8003766:	0549      	lsls	r1, r1, #21
 8003768:	430a      	orrs	r2, r1
 800376a:	63da      	str	r2, [r3, #60]	; 0x3c
 800376c:	4b05      	ldr	r3, [pc, #20]	; (8003784 <HAL_MspInit+0x44>)
 800376e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003770:	2380      	movs	r3, #128	; 0x80
 8003772:	055b      	lsls	r3, r3, #21
 8003774:	4013      	ands	r3, r2
 8003776:	603b      	str	r3, [r7, #0]
 8003778:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800377a:	46c0      	nop			; (mov r8, r8)
 800377c:	46bd      	mov	sp, r7
 800377e:	b002      	add	sp, #8
 8003780:	bd80      	pop	{r7, pc}
 8003782:	46c0      	nop			; (mov r8, r8)
 8003784:	40021000 	.word	0x40021000

08003788 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003788:	b590      	push	{r4, r7, lr}
 800378a:	b08b      	sub	sp, #44	; 0x2c
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003790:	2414      	movs	r4, #20
 8003792:	193b      	adds	r3, r7, r4
 8003794:	0018      	movs	r0, r3
 8003796:	2314      	movs	r3, #20
 8003798:	001a      	movs	r2, r3
 800379a:	2100      	movs	r1, #0
 800379c:	f001 ffb0 	bl	8005700 <memset>
  if(hadc->Instance==ADC1)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a1b      	ldr	r2, [pc, #108]	; (8003814 <HAL_ADC_MspInit+0x8c>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d130      	bne.n	800380c <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80037aa:	4b1b      	ldr	r3, [pc, #108]	; (8003818 <HAL_ADC_MspInit+0x90>)
 80037ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037ae:	4b1a      	ldr	r3, [pc, #104]	; (8003818 <HAL_ADC_MspInit+0x90>)
 80037b0:	2180      	movs	r1, #128	; 0x80
 80037b2:	0349      	lsls	r1, r1, #13
 80037b4:	430a      	orrs	r2, r1
 80037b6:	641a      	str	r2, [r3, #64]	; 0x40
 80037b8:	4b17      	ldr	r3, [pc, #92]	; (8003818 <HAL_ADC_MspInit+0x90>)
 80037ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037bc:	2380      	movs	r3, #128	; 0x80
 80037be:	035b      	lsls	r3, r3, #13
 80037c0:	4013      	ands	r3, r2
 80037c2:	613b      	str	r3, [r7, #16]
 80037c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037c6:	4b14      	ldr	r3, [pc, #80]	; (8003818 <HAL_ADC_MspInit+0x90>)
 80037c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037ca:	4b13      	ldr	r3, [pc, #76]	; (8003818 <HAL_ADC_MspInit+0x90>)
 80037cc:	2102      	movs	r1, #2
 80037ce:	430a      	orrs	r2, r1
 80037d0:	635a      	str	r2, [r3, #52]	; 0x34
 80037d2:	4b11      	ldr	r3, [pc, #68]	; (8003818 <HAL_ADC_MspInit+0x90>)
 80037d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037d6:	2202      	movs	r2, #2
 80037d8:	4013      	ands	r3, r2
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB7     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80037de:	193b      	adds	r3, r7, r4
 80037e0:	2280      	movs	r2, #128	; 0x80
 80037e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037e4:	193b      	adds	r3, r7, r4
 80037e6:	2203      	movs	r2, #3
 80037e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ea:	193b      	adds	r3, r7, r4
 80037ec:	2200      	movs	r2, #0
 80037ee:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037f0:	193b      	adds	r3, r7, r4
 80037f2:	4a0a      	ldr	r2, [pc, #40]	; (800381c <HAL_ADC_MspInit+0x94>)
 80037f4:	0019      	movs	r1, r3
 80037f6:	0010      	movs	r0, r2
 80037f8:	f001 f902 	bl	8004a00 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80037fc:	2200      	movs	r2, #0
 80037fe:	2100      	movs	r1, #0
 8003800:	200c      	movs	r0, #12
 8003802:	f001 f8cb 	bl	800499c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8003806:	200c      	movs	r0, #12
 8003808:	f001 f8dd 	bl	80049c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800380c:	46c0      	nop			; (mov r8, r8)
 800380e:	46bd      	mov	sp, r7
 8003810:	b00b      	add	sp, #44	; 0x2c
 8003812:	bd90      	pop	{r4, r7, pc}
 8003814:	40012400 	.word	0x40012400
 8003818:	40021000 	.word	0x40021000
 800381c:	50000400 	.word	0x50000400

08003820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003824:	e7fe      	b.n	8003824 <NMI_Handler+0x4>

08003826 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800382a:	e7fe      	b.n	800382a <HardFault_Handler+0x4>

0800382c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003830:	46c0      	nop			; (mov r8, r8)
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800383a:	46c0      	nop			; (mov r8, r8)
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003844:	f000 f8aa 	bl	800399c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003848:	46c0      	nop			; (mov r8, r8)
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
	...

08003850 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003854:	4b03      	ldr	r3, [pc, #12]	; (8003864 <ADC1_IRQHandler+0x14>)
 8003856:	0018      	movs	r0, r3
 8003858:	f000 fc4e 	bl	80040f8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800385c:	46c0      	nop			; (mov r8, r8)
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	46c0      	nop			; (mov r8, r8)
 8003864:	2000002c 	.word	0x2000002c

08003868 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800386c:	46c0      	nop			; (mov r8, r8)
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
	...

08003874 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003874:	480d      	ldr	r0, [pc, #52]	; (80038ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003876:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003878:	f7ff fff6 	bl	8003868 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800387c:	480c      	ldr	r0, [pc, #48]	; (80038b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800387e:	490d      	ldr	r1, [pc, #52]	; (80038b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003880:	4a0d      	ldr	r2, [pc, #52]	; (80038b8 <LoopForever+0xe>)
  movs r3, #0
 8003882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003884:	e002      	b.n	800388c <LoopCopyDataInit>

08003886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800388a:	3304      	adds	r3, #4

0800388c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800388c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800388e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003890:	d3f9      	bcc.n	8003886 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003892:	4a0a      	ldr	r2, [pc, #40]	; (80038bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8003894:	4c0a      	ldr	r4, [pc, #40]	; (80038c0 <LoopForever+0x16>)
  movs r3, #0
 8003896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003898:	e001      	b.n	800389e <LoopFillZerobss>

0800389a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800389a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800389c:	3204      	adds	r2, #4

0800389e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800389e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038a0:	d3fb      	bcc.n	800389a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80038a2:	f001 ff09 	bl	80056b8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80038a6:	f7fe fbf5 	bl	8002094 <main>

080038aa <LoopForever>:

LoopForever:
  b LoopForever
 80038aa:	e7fe      	b.n	80038aa <LoopForever>
  ldr   r0, =_estack
 80038ac:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80038b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038b4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80038b8:	0800589c 	.word	0x0800589c
  ldr r2, =_sbss
 80038bc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80038c0:	2000009c 	.word	0x2000009c

080038c4 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80038c4:	e7fe      	b.n	80038c4 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>
	...

080038c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80038ce:	1dfb      	adds	r3, r7, #7
 80038d0:	2200      	movs	r2, #0
 80038d2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038d4:	4b0b      	ldr	r3, [pc, #44]	; (8003904 <HAL_Init+0x3c>)
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	4b0a      	ldr	r3, [pc, #40]	; (8003904 <HAL_Init+0x3c>)
 80038da:	2180      	movs	r1, #128	; 0x80
 80038dc:	0049      	lsls	r1, r1, #1
 80038de:	430a      	orrs	r2, r1
 80038e0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80038e2:	2003      	movs	r0, #3
 80038e4:	f000 f810 	bl	8003908 <HAL_InitTick>
 80038e8:	1e03      	subs	r3, r0, #0
 80038ea:	d003      	beq.n	80038f4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80038ec:	1dfb      	adds	r3, r7, #7
 80038ee:	2201      	movs	r2, #1
 80038f0:	701a      	strb	r2, [r3, #0]
 80038f2:	e001      	b.n	80038f8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80038f4:	f7ff ff24 	bl	8003740 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80038f8:	1dfb      	adds	r3, r7, #7
 80038fa:	781b      	ldrb	r3, [r3, #0]
}
 80038fc:	0018      	movs	r0, r3
 80038fe:	46bd      	mov	sp, r7
 8003900:	b002      	add	sp, #8
 8003902:	bd80      	pop	{r7, pc}
 8003904:	40022000 	.word	0x40022000

08003908 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003908:	b590      	push	{r4, r7, lr}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003910:	230f      	movs	r3, #15
 8003912:	18fb      	adds	r3, r7, r3
 8003914:	2200      	movs	r2, #0
 8003916:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003918:	4b1d      	ldr	r3, [pc, #116]	; (8003990 <HAL_InitTick+0x88>)
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d02b      	beq.n	8003978 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003920:	4b1c      	ldr	r3, [pc, #112]	; (8003994 <HAL_InitTick+0x8c>)
 8003922:	681c      	ldr	r4, [r3, #0]
 8003924:	4b1a      	ldr	r3, [pc, #104]	; (8003990 <HAL_InitTick+0x88>)
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	0019      	movs	r1, r3
 800392a:	23fa      	movs	r3, #250	; 0xfa
 800392c:	0098      	lsls	r0, r3, #2
 800392e:	f7fc fbe7 	bl	8000100 <__udivsi3>
 8003932:	0003      	movs	r3, r0
 8003934:	0019      	movs	r1, r3
 8003936:	0020      	movs	r0, r4
 8003938:	f7fc fbe2 	bl	8000100 <__udivsi3>
 800393c:	0003      	movs	r3, r0
 800393e:	0018      	movs	r0, r3
 8003940:	f001 f851 	bl	80049e6 <HAL_SYSTICK_Config>
 8003944:	1e03      	subs	r3, r0, #0
 8003946:	d112      	bne.n	800396e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b03      	cmp	r3, #3
 800394c:	d80a      	bhi.n	8003964 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800394e:	6879      	ldr	r1, [r7, #4]
 8003950:	2301      	movs	r3, #1
 8003952:	425b      	negs	r3, r3
 8003954:	2200      	movs	r2, #0
 8003956:	0018      	movs	r0, r3
 8003958:	f001 f820 	bl	800499c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800395c:	4b0e      	ldr	r3, [pc, #56]	; (8003998 <HAL_InitTick+0x90>)
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	e00d      	b.n	8003980 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003964:	230f      	movs	r3, #15
 8003966:	18fb      	adds	r3, r7, r3
 8003968:	2201      	movs	r2, #1
 800396a:	701a      	strb	r2, [r3, #0]
 800396c:	e008      	b.n	8003980 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800396e:	230f      	movs	r3, #15
 8003970:	18fb      	adds	r3, r7, r3
 8003972:	2201      	movs	r2, #1
 8003974:	701a      	strb	r2, [r3, #0]
 8003976:	e003      	b.n	8003980 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003978:	230f      	movs	r3, #15
 800397a:	18fb      	adds	r3, r7, r3
 800397c:	2201      	movs	r2, #1
 800397e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003980:	230f      	movs	r3, #15
 8003982:	18fb      	adds	r3, r7, r3
 8003984:	781b      	ldrb	r3, [r3, #0]
}
 8003986:	0018      	movs	r0, r3
 8003988:	46bd      	mov	sp, r7
 800398a:	b005      	add	sp, #20
 800398c:	bd90      	pop	{r4, r7, pc}
 800398e:	46c0      	nop			; (mov r8, r8)
 8003990:	2000000c 	.word	0x2000000c
 8003994:	20000004 	.word	0x20000004
 8003998:	20000008 	.word	0x20000008

0800399c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80039a0:	4b05      	ldr	r3, [pc, #20]	; (80039b8 <HAL_IncTick+0x1c>)
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	001a      	movs	r2, r3
 80039a6:	4b05      	ldr	r3, [pc, #20]	; (80039bc <HAL_IncTick+0x20>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	18d2      	adds	r2, r2, r3
 80039ac:	4b03      	ldr	r3, [pc, #12]	; (80039bc <HAL_IncTick+0x20>)
 80039ae:	601a      	str	r2, [r3, #0]
}
 80039b0:	46c0      	nop			; (mov r8, r8)
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	46c0      	nop			; (mov r8, r8)
 80039b8:	2000000c 	.word	0x2000000c
 80039bc:	20000098 	.word	0x20000098

080039c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  return uwTick;
 80039c4:	4b02      	ldr	r3, [pc, #8]	; (80039d0 <HAL_GetTick+0x10>)
 80039c6:	681b      	ldr	r3, [r3, #0]
}
 80039c8:	0018      	movs	r0, r3
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	46c0      	nop			; (mov r8, r8)
 80039d0:	20000098 	.word	0x20000098

080039d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039dc:	f7ff fff0 	bl	80039c0 <HAL_GetTick>
 80039e0:	0003      	movs	r3, r0
 80039e2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	3301      	adds	r3, #1
 80039ec:	d005      	beq.n	80039fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039ee:	4b0a      	ldr	r3, [pc, #40]	; (8003a18 <HAL_Delay+0x44>)
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	001a      	movs	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	189b      	adds	r3, r3, r2
 80039f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80039fa:	46c0      	nop			; (mov r8, r8)
 80039fc:	f7ff ffe0 	bl	80039c0 <HAL_GetTick>
 8003a00:	0002      	movs	r2, r0
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d8f7      	bhi.n	80039fc <HAL_Delay+0x28>
  {
  }
}
 8003a0c:	46c0      	nop			; (mov r8, r8)
 8003a0e:	46c0      	nop			; (mov r8, r8)
 8003a10:	46bd      	mov	sp, r7
 8003a12:	b004      	add	sp, #16
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	46c0      	nop			; (mov r8, r8)
 8003a18:	2000000c 	.word	0x2000000c

08003a1c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a05      	ldr	r2, [pc, #20]	; (8003a40 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8003a2c:	401a      	ands	r2, r3
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	431a      	orrs	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	601a      	str	r2, [r3, #0]
}
 8003a36:	46c0      	nop			; (mov r8, r8)
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	b002      	add	sp, #8
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	46c0      	nop			; (mov r8, r8)
 8003a40:	fe3fffff 	.word	0xfe3fffff

08003a44 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	23e0      	movs	r3, #224	; 0xe0
 8003a52:	045b      	lsls	r3, r3, #17
 8003a54:	4013      	ands	r3, r2
}
 8003a56:	0018      	movs	r0, r3
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	b002      	add	sp, #8
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b084      	sub	sp, #16
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	60f8      	str	r0, [r7, #12]
 8003a66:	60b9      	str	r1, [r7, #8]
 8003a68:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	68ba      	ldr	r2, [r7, #8]
 8003a70:	2104      	movs	r1, #4
 8003a72:	400a      	ands	r2, r1
 8003a74:	2107      	movs	r1, #7
 8003a76:	4091      	lsls	r1, r2
 8003a78:	000a      	movs	r2, r1
 8003a7a:	43d2      	mvns	r2, r2
 8003a7c:	401a      	ands	r2, r3
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	2104      	movs	r1, #4
 8003a82:	400b      	ands	r3, r1
 8003a84:	6879      	ldr	r1, [r7, #4]
 8003a86:	4099      	lsls	r1, r3
 8003a88:	000b      	movs	r3, r1
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003a90:	46c0      	nop			; (mov r8, r8)
 8003a92:	46bd      	mov	sp, r7
 8003a94:	b004      	add	sp, #16
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	683a      	ldr	r2, [r7, #0]
 8003aa8:	2104      	movs	r1, #4
 8003aaa:	400a      	ands	r2, r1
 8003aac:	2107      	movs	r1, #7
 8003aae:	4091      	lsls	r1, r2
 8003ab0:	000a      	movs	r2, r1
 8003ab2:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	2104      	movs	r1, #4
 8003ab8:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003aba:	40da      	lsrs	r2, r3
 8003abc:	0013      	movs	r3, r2
}
 8003abe:	0018      	movs	r0, r3
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	b002      	add	sp, #8
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b082      	sub	sp, #8
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68da      	ldr	r2, [r3, #12]
 8003ad2:	23c0      	movs	r3, #192	; 0xc0
 8003ad4:	011b      	lsls	r3, r3, #4
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	d101      	bne.n	8003ade <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003ada:	2301      	movs	r3, #1
 8003adc:	e000      	b.n	8003ae0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	b002      	add	sp, #8
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af8:	68ba      	ldr	r2, [r7, #8]
 8003afa:	211f      	movs	r1, #31
 8003afc:	400a      	ands	r2, r1
 8003afe:	210f      	movs	r1, #15
 8003b00:	4091      	lsls	r1, r2
 8003b02:	000a      	movs	r2, r1
 8003b04:	43d2      	mvns	r2, r2
 8003b06:	401a      	ands	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	0e9b      	lsrs	r3, r3, #26
 8003b0c:	210f      	movs	r1, #15
 8003b0e:	4019      	ands	r1, r3
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	201f      	movs	r0, #31
 8003b14:	4003      	ands	r3, r0
 8003b16:	4099      	lsls	r1, r3
 8003b18:	000b      	movs	r3, r1
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003b20:	46c0      	nop			; (mov r8, r8)
 8003b22:	46bd      	mov	sp, r7
 8003b24:	b004      	add	sp, #16
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	035b      	lsls	r3, r3, #13
 8003b3a:	0b5b      	lsrs	r3, r3, #13
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b42:	46c0      	nop			; (mov r8, r8)
 8003b44:	46bd      	mov	sp, r7
 8003b46:	b002      	add	sp, #8
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b082      	sub	sp, #8
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
 8003b52:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	0352      	lsls	r2, r2, #13
 8003b5c:	0b52      	lsrs	r2, r2, #13
 8003b5e:	43d2      	mvns	r2, r2
 8003b60:	401a      	ands	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b66:	46c0      	nop			; (mov r8, r8)
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	b002      	add	sp, #8
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b082      	sub	sp, #8
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	2203      	movs	r2, #3
 8003b7c:	4013      	ands	r3, r2
}
 8003b7e:	0018      	movs	r0, r3
 8003b80:	46bd      	mov	sp, r7
 8003b82:	b002      	add	sp, #8
 8003b84:	bd80      	pop	{r7, pc}
	...

08003b88 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	68ba      	ldr	r2, [r7, #8]
 8003b9a:	0212      	lsls	r2, r2, #8
 8003b9c:	43d2      	mvns	r2, r2
 8003b9e:	401a      	ands	r2, r3
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	021b      	lsls	r3, r3, #8
 8003ba4:	6879      	ldr	r1, [r7, #4]
 8003ba6:	400b      	ands	r3, r1
 8003ba8:	4904      	ldr	r1, [pc, #16]	; (8003bbc <LL_ADC_SetChannelSamplingTime+0x34>)
 8003baa:	400b      	ands	r3, r1
 8003bac:	431a      	orrs	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003bb2:	46c0      	nop			; (mov r8, r8)
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	b004      	add	sp, #16
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	46c0      	nop			; (mov r8, r8)
 8003bbc:	07ffff00 	.word	0x07ffff00

08003bc0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	4a05      	ldr	r2, [pc, #20]	; (8003be4 <LL_ADC_EnableInternalRegulator+0x24>)
 8003bce:	4013      	ands	r3, r2
 8003bd0:	2280      	movs	r2, #128	; 0x80
 8003bd2:	0552      	lsls	r2, r2, #21
 8003bd4:	431a      	orrs	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003bda:	46c0      	nop			; (mov r8, r8)
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	b002      	add	sp, #8
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	46c0      	nop			; (mov r8, r8)
 8003be4:	6fffffe8 	.word	0x6fffffe8

08003be8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689a      	ldr	r2, [r3, #8]
 8003bf4:	2380      	movs	r3, #128	; 0x80
 8003bf6:	055b      	lsls	r3, r3, #21
 8003bf8:	401a      	ands	r2, r3
 8003bfa:	2380      	movs	r3, #128	; 0x80
 8003bfc:	055b      	lsls	r3, r3, #21
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d101      	bne.n	8003c06 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8003c02:	2301      	movs	r3, #1
 8003c04:	e000      	b.n	8003c08 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	0018      	movs	r0, r3
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	b002      	add	sp, #8
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	4a04      	ldr	r2, [pc, #16]	; (8003c30 <LL_ADC_Enable+0x20>)
 8003c1e:	4013      	ands	r3, r2
 8003c20:	2201      	movs	r2, #1
 8003c22:	431a      	orrs	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003c28:	46c0      	nop			; (mov r8, r8)
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	b002      	add	sp, #8
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	7fffffe8 	.word	0x7fffffe8

08003c34 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	2201      	movs	r2, #1
 8003c42:	4013      	ands	r3, r2
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d101      	bne.n	8003c4c <LL_ADC_IsEnabled+0x18>
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e000      	b.n	8003c4e <LL_ADC_IsEnabled+0x1a>
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	0018      	movs	r0, r3
 8003c50:	46bd      	mov	sp, r7
 8003c52:	b002      	add	sp, #8
 8003c54:	bd80      	pop	{r7, pc}
	...

08003c58 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	4a04      	ldr	r2, [pc, #16]	; (8003c78 <LL_ADC_REG_StartConversion+0x20>)
 8003c66:	4013      	ands	r3, r2
 8003c68:	2204      	movs	r2, #4
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003c70:	46c0      	nop			; (mov r8, r8)
 8003c72:	46bd      	mov	sp, r7
 8003c74:	b002      	add	sp, #8
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	7fffffe8 	.word	0x7fffffe8

08003c7c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	2204      	movs	r2, #4
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	2b04      	cmp	r3, #4
 8003c8e:	d101      	bne.n	8003c94 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c90:	2301      	movs	r3, #1
 8003c92:	e000      	b.n	8003c96 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	0018      	movs	r0, r3
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	b002      	add	sp, #8
 8003c9c:	bd80      	pop	{r7, pc}
	...

08003ca0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b088      	sub	sp, #32
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ca8:	231f      	movs	r3, #31
 8003caa:	18fb      	adds	r3, r7, r3
 8003cac:	2200      	movs	r2, #0
 8003cae:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e17f      	b.n	8003fc6 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10a      	bne.n	8003ce4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	f7ff fd59 	bl	8003788 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2254      	movs	r2, #84	; 0x54
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	0018      	movs	r0, r3
 8003cea:	f7ff ff7d 	bl	8003be8 <LL_ADC_IsInternalRegulatorEnabled>
 8003cee:	1e03      	subs	r3, r0, #0
 8003cf0:	d115      	bne.n	8003d1e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	0018      	movs	r0, r3
 8003cf8:	f7ff ff62 	bl	8003bc0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003cfc:	4bb4      	ldr	r3, [pc, #720]	; (8003fd0 <HAL_ADC_Init+0x330>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	49b4      	ldr	r1, [pc, #720]	; (8003fd4 <HAL_ADC_Init+0x334>)
 8003d02:	0018      	movs	r0, r3
 8003d04:	f7fc f9fc 	bl	8000100 <__udivsi3>
 8003d08:	0003      	movs	r3, r0
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003d10:	e002      	b.n	8003d18 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	3b01      	subs	r3, #1
 8003d16:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1f9      	bne.n	8003d12 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	0018      	movs	r0, r3
 8003d24:	f7ff ff60 	bl	8003be8 <LL_ADC_IsInternalRegulatorEnabled>
 8003d28:	1e03      	subs	r3, r0, #0
 8003d2a:	d10f      	bne.n	8003d4c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d30:	2210      	movs	r2, #16
 8003d32:	431a      	orrs	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003d44:	231f      	movs	r3, #31
 8003d46:	18fb      	adds	r3, r7, r3
 8003d48:	2201      	movs	r2, #1
 8003d4a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	0018      	movs	r0, r3
 8003d52:	f7ff ff93 	bl	8003c7c <LL_ADC_REG_IsConversionOngoing>
 8003d56:	0003      	movs	r3, r0
 8003d58:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d5e:	2210      	movs	r2, #16
 8003d60:	4013      	ands	r3, r2
 8003d62:	d000      	beq.n	8003d66 <HAL_ADC_Init+0xc6>
 8003d64:	e122      	b.n	8003fac <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d000      	beq.n	8003d6e <HAL_ADC_Init+0xce>
 8003d6c:	e11e      	b.n	8003fac <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d72:	4a99      	ldr	r2, [pc, #612]	; (8003fd8 <HAL_ADC_Init+0x338>)
 8003d74:	4013      	ands	r3, r2
 8003d76:	2202      	movs	r2, #2
 8003d78:	431a      	orrs	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	0018      	movs	r0, r3
 8003d84:	f7ff ff56 	bl	8003c34 <LL_ADC_IsEnabled>
 8003d88:	1e03      	subs	r3, r0, #0
 8003d8a:	d000      	beq.n	8003d8e <HAL_ADC_Init+0xee>
 8003d8c:	e0ad      	b.n	8003eea <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	7e1b      	ldrb	r3, [r3, #24]
 8003d96:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003d98:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	7e5b      	ldrb	r3, [r3, #25]
 8003d9e:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003da0:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	7e9b      	ldrb	r3, [r3, #26]
 8003da6:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003da8:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d002      	beq.n	8003db8 <HAL_ADC_Init+0x118>
 8003db2:	2380      	movs	r3, #128	; 0x80
 8003db4:	015b      	lsls	r3, r3, #5
 8003db6:	e000      	b.n	8003dba <HAL_ADC_Init+0x11a>
 8003db8:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003dba:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003dc0:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	da04      	bge.n	8003dd4 <HAL_ADC_Init+0x134>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	005b      	lsls	r3, r3, #1
 8003dd0:	085b      	lsrs	r3, r3, #1
 8003dd2:	e001      	b.n	8003dd8 <HAL_ADC_Init+0x138>
 8003dd4:	2380      	movs	r3, #128	; 0x80
 8003dd6:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8003dd8:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	212c      	movs	r1, #44	; 0x2c
 8003dde:	5c5b      	ldrb	r3, [r3, r1]
 8003de0:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003de2:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2220      	movs	r2, #32
 8003dee:	5c9b      	ldrb	r3, [r3, r2]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d115      	bne.n	8003e20 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	7e9b      	ldrb	r3, [r3, #26]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d105      	bne.n	8003e08 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	2280      	movs	r2, #128	; 0x80
 8003e00:	0252      	lsls	r2, r2, #9
 8003e02:	4313      	orrs	r3, r2
 8003e04:	61bb      	str	r3, [r7, #24]
 8003e06:	e00b      	b.n	8003e20 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e18:	2201      	movs	r2, #1
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00a      	beq.n	8003e3e <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e2c:	23e0      	movs	r3, #224	; 0xe0
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003e36:	4313      	orrs	r3, r2
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	4a65      	ldr	r2, [pc, #404]	; (8003fdc <HAL_ADC_Init+0x33c>)
 8003e46:	4013      	ands	r3, r2
 8003e48:	0019      	movs	r1, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	430a      	orrs	r2, r1
 8003e52:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	0f9b      	lsrs	r3, r3, #30
 8003e5a:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003e60:	4313      	orrs	r3, r2
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	223c      	movs	r2, #60	; 0x3c
 8003e6c:	5c9b      	ldrb	r3, [r3, r2]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d111      	bne.n	8003e96 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	0f9b      	lsrs	r3, r3, #30
 8003e78:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003e7e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003e84:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003e8a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	2201      	movs	r2, #1
 8003e92:	4313      	orrs	r3, r2
 8003e94:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	4a50      	ldr	r2, [pc, #320]	; (8003fe0 <HAL_ADC_Init+0x340>)
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	0019      	movs	r1, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685a      	ldr	r2, [r3, #4]
 8003eb0:	23c0      	movs	r3, #192	; 0xc0
 8003eb2:	061b      	lsls	r3, r3, #24
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d018      	beq.n	8003eea <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003ebc:	2380      	movs	r3, #128	; 0x80
 8003ebe:	05db      	lsls	r3, r3, #23
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d012      	beq.n	8003eea <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003ec8:	2380      	movs	r3, #128	; 0x80
 8003eca:	061b      	lsls	r3, r3, #24
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d00c      	beq.n	8003eea <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8003ed0:	4b44      	ldr	r3, [pc, #272]	; (8003fe4 <HAL_ADC_Init+0x344>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a44      	ldr	r2, [pc, #272]	; (8003fe8 <HAL_ADC_Init+0x348>)
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	0019      	movs	r1, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	23f0      	movs	r3, #240	; 0xf0
 8003ee0:	039b      	lsls	r3, r3, #14
 8003ee2:	401a      	ands	r2, r3
 8003ee4:	4b3f      	ldr	r3, [pc, #252]	; (8003fe4 <HAL_ADC_Init+0x344>)
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6818      	ldr	r0, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef2:	001a      	movs	r2, r3
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	f7ff fdb2 	bl	8003a5e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6818      	ldr	r0, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f02:	493a      	ldr	r1, [pc, #232]	; (8003fec <HAL_ADC_Init+0x34c>)
 8003f04:	001a      	movs	r2, r3
 8003f06:	f7ff fdaa 	bl	8003a5e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d109      	bne.n	8003f26 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2110      	movs	r1, #16
 8003f1e:	4249      	negs	r1, r1
 8003f20:	430a      	orrs	r2, r1
 8003f22:	629a      	str	r2, [r3, #40]	; 0x28
 8003f24:	e018      	b.n	8003f58 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	691a      	ldr	r2, [r3, #16]
 8003f2a:	2380      	movs	r3, #128	; 0x80
 8003f2c:	039b      	lsls	r3, r3, #14
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d112      	bne.n	8003f58 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	69db      	ldr	r3, [r3, #28]
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	221c      	movs	r2, #28
 8003f42:	4013      	ands	r3, r2
 8003f44:	2210      	movs	r2, #16
 8003f46:	4252      	negs	r2, r2
 8003f48:	409a      	lsls	r2, r3
 8003f4a:	0011      	movs	r1, r2
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	430a      	orrs	r2, r1
 8003f56:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	0018      	movs	r0, r3
 8003f60:	f7ff fd9a 	bl	8003a98 <LL_ADC_GetSamplingTimeCommonChannels>
 8003f64:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d10b      	bne.n	8003f86 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f78:	2203      	movs	r2, #3
 8003f7a:	4393      	bics	r3, r2
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003f84:	e01c      	b.n	8003fc0 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f8a:	2212      	movs	r2, #18
 8003f8c:	4393      	bics	r3, r2
 8003f8e:	2210      	movs	r2, #16
 8003f90:	431a      	orrs	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003fa2:	231f      	movs	r3, #31
 8003fa4:	18fb      	adds	r3, r7, r3
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003faa:	e009      	b.n	8003fc0 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb0:	2210      	movs	r2, #16
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003fb8:	231f      	movs	r3, #31
 8003fba:	18fb      	adds	r3, r7, r3
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003fc0:	231f      	movs	r3, #31
 8003fc2:	18fb      	adds	r3, r7, r3
 8003fc4:	781b      	ldrb	r3, [r3, #0]
}
 8003fc6:	0018      	movs	r0, r3
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	b008      	add	sp, #32
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	46c0      	nop			; (mov r8, r8)
 8003fd0:	20000004 	.word	0x20000004
 8003fd4:	00030d40 	.word	0x00030d40
 8003fd8:	fffffefd 	.word	0xfffffefd
 8003fdc:	fffe0201 	.word	0xfffe0201
 8003fe0:	1ffffc02 	.word	0x1ffffc02
 8003fe4:	40012708 	.word	0x40012708
 8003fe8:	ffc3ffff 	.word	0xffc3ffff
 8003fec:	07ffff04 	.word	0x07ffff04

08003ff0 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8003ff0:	b5b0      	push	{r4, r5, r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	0018      	movs	r0, r3
 8003ffe:	f7ff fe3d 	bl	8003c7c <LL_ADC_REG_IsConversionOngoing>
 8004002:	1e03      	subs	r3, r0, #0
 8004004:	d15f      	bne.n	80040c6 <HAL_ADC_Start_IT+0xd6>
  {
    __HAL_LOCK(hadc);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2254      	movs	r2, #84	; 0x54
 800400a:	5c9b      	ldrb	r3, [r3, r2]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d101      	bne.n	8004014 <HAL_ADC_Start_IT+0x24>
 8004010:	2302      	movs	r3, #2
 8004012:	e05f      	b.n	80040d4 <HAL_ADC_Start_IT+0xe4>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2254      	movs	r2, #84	; 0x54
 8004018:	2101      	movs	r1, #1
 800401a:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800401c:	250f      	movs	r5, #15
 800401e:	197c      	adds	r4, r7, r5
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	0018      	movs	r0, r3
 8004024:	f000 fb68 	bl	80046f8 <ADC_Enable>
 8004028:	0003      	movs	r3, r0
 800402a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800402c:	197b      	adds	r3, r7, r5
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d143      	bne.n	80040bc <HAL_ADC_Start_IT+0xcc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004038:	4a28      	ldr	r2, [pc, #160]	; (80040dc <HAL_ADC_Start_IT+0xec>)
 800403a:	4013      	ands	r3, r2
 800403c:	2280      	movs	r2, #128	; 0x80
 800403e:	0052      	lsls	r2, r2, #1
 8004040:	431a      	orrs	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY);


      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	221c      	movs	r2, #28
 8004052:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2254      	movs	r2, #84	; 0x54
 8004058:	2100      	movs	r1, #0
 800405a:	5499      	strb	r1, [r3, r2]

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	211c      	movs	r1, #28
 8004068:	438a      	bics	r2, r1
 800406a:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	695b      	ldr	r3, [r3, #20]
 8004070:	2b08      	cmp	r3, #8
 8004072:	d108      	bne.n	8004086 <HAL_ADC_Start_IT+0x96>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2108      	movs	r1, #8
 8004080:	430a      	orrs	r2, r1
 8004082:	605a      	str	r2, [r3, #4]
          break;
 8004084:	e008      	b.n	8004098 <HAL_ADC_Start_IT+0xa8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2104      	movs	r1, #4
 8004092:	430a      	orrs	r2, r1
 8004094:	605a      	str	r2, [r3, #4]
          break;
 8004096:	46c0      	nop			; (mov r8, r8)

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409c:	2b00      	cmp	r3, #0
 800409e:	d107      	bne.n	80040b0 <HAL_ADC_Start_IT+0xc0>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	685a      	ldr	r2, [r3, #4]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2110      	movs	r1, #16
 80040ac:	430a      	orrs	r2, r1
 80040ae:	605a      	str	r2, [r3, #4]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	0018      	movs	r0, r3
 80040b6:	f7ff fdcf 	bl	8003c58 <LL_ADC_REG_StartConversion>
 80040ba:	e008      	b.n	80040ce <HAL_ADC_Start_IT+0xde>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2254      	movs	r2, #84	; 0x54
 80040c0:	2100      	movs	r1, #0
 80040c2:	5499      	strb	r1, [r3, r2]
 80040c4:	e003      	b.n	80040ce <HAL_ADC_Start_IT+0xde>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80040c6:	230f      	movs	r3, #15
 80040c8:	18fb      	adds	r3, r7, r3
 80040ca:	2202      	movs	r2, #2
 80040cc:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80040ce:	230f      	movs	r3, #15
 80040d0:	18fb      	adds	r3, r7, r3
 80040d2:	781b      	ldrb	r3, [r3, #0]
}
 80040d4:	0018      	movs	r0, r3
 80040d6:	46bd      	mov	sp, r7
 80040d8:	b004      	add	sp, #16
 80040da:	bdb0      	pop	{r4, r5, r7, pc}
 80040dc:	fffff0fe 	.word	0xfffff0fe

080040e0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80040ee:	0018      	movs	r0, r3
 80040f0:	46bd      	mov	sp, r7
 80040f2:	b002      	add	sp, #8
 80040f4:	bd80      	pop	{r7, pc}
	...

080040f8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b086      	sub	sp, #24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004100:	2300      	movs	r3, #0
 8004102:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	2202      	movs	r2, #2
 8004118:	4013      	ands	r3, r2
 800411a:	d017      	beq.n	800414c <HAL_ADC_IRQHandler+0x54>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2202      	movs	r2, #2
 8004120:	4013      	ands	r3, r2
 8004122:	d013      	beq.n	800414c <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004128:	2210      	movs	r2, #16
 800412a:	4013      	ands	r3, r2
 800412c:	d106      	bne.n	800413c <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004132:	2280      	movs	r2, #128	; 0x80
 8004134:	0112      	lsls	r2, r2, #4
 8004136:	431a      	orrs	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	0018      	movs	r0, r3
 8004140:	f000 fb70 	bl	8004824 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2202      	movs	r2, #2
 800414a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	2204      	movs	r2, #4
 8004150:	4013      	ands	r3, r2
 8004152:	d003      	beq.n	800415c <HAL_ADC_IRQHandler+0x64>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2204      	movs	r2, #4
 8004158:	4013      	ands	r3, r2
 800415a:	d107      	bne.n	800416c <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	2208      	movs	r2, #8
 8004160:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004162:	d04d      	beq.n	8004200 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2208      	movs	r2, #8
 8004168:	4013      	ands	r3, r2
 800416a:	d049      	beq.n	8004200 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004170:	2210      	movs	r2, #16
 8004172:	4013      	ands	r3, r2
 8004174:	d106      	bne.n	8004184 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800417a:	2280      	movs	r2, #128	; 0x80
 800417c:	0092      	lsls	r2, r2, #2
 800417e:	431a      	orrs	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	0018      	movs	r0, r3
 800418a:	f7ff fc9c 	bl	8003ac6 <LL_ADC_REG_IsTriggerSourceSWStart>
 800418e:	1e03      	subs	r3, r0, #0
 8004190:	d02e      	beq.n	80041f0 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	7e9b      	ldrb	r3, [r3, #26]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d12a      	bne.n	80041f0 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2208      	movs	r2, #8
 80041a2:	4013      	ands	r3, r2
 80041a4:	2b08      	cmp	r3, #8
 80041a6:	d123      	bne.n	80041f0 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	0018      	movs	r0, r3
 80041ae:	f7ff fd65 	bl	8003c7c <LL_ADC_REG_IsConversionOngoing>
 80041b2:	1e03      	subs	r3, r0, #0
 80041b4:	d110      	bne.n	80041d8 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	210c      	movs	r1, #12
 80041c2:	438a      	bics	r2, r1
 80041c4:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ca:	4a56      	ldr	r2, [pc, #344]	; (8004324 <HAL_ADC_IRQHandler+0x22c>)
 80041cc:	4013      	ands	r3, r2
 80041ce:	2201      	movs	r2, #1
 80041d0:	431a      	orrs	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	659a      	str	r2, [r3, #88]	; 0x58
 80041d6:	e00b      	b.n	80041f0 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041dc:	2220      	movs	r2, #32
 80041de:	431a      	orrs	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e8:	2201      	movs	r2, #1
 80041ea:	431a      	orrs	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	0018      	movs	r0, r3
 80041f4:	f7fe f902 	bl	80023fc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	220c      	movs	r2, #12
 80041fe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	2280      	movs	r2, #128	; 0x80
 8004204:	4013      	ands	r3, r2
 8004206:	d012      	beq.n	800422e <HAL_ADC_IRQHandler+0x136>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2280      	movs	r2, #128	; 0x80
 800420c:	4013      	ands	r3, r2
 800420e:	d00e      	beq.n	800422e <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004214:	2280      	movs	r2, #128	; 0x80
 8004216:	0252      	lsls	r2, r2, #9
 8004218:	431a      	orrs	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	0018      	movs	r0, r3
 8004222:	f000 f881 	bl	8004328 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2280      	movs	r2, #128	; 0x80
 800422c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800422e:	693a      	ldr	r2, [r7, #16]
 8004230:	2380      	movs	r3, #128	; 0x80
 8004232:	005b      	lsls	r3, r3, #1
 8004234:	4013      	ands	r3, r2
 8004236:	d014      	beq.n	8004262 <HAL_ADC_IRQHandler+0x16a>
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	2380      	movs	r3, #128	; 0x80
 800423c:	005b      	lsls	r3, r3, #1
 800423e:	4013      	ands	r3, r2
 8004240:	d00f      	beq.n	8004262 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004246:	2280      	movs	r2, #128	; 0x80
 8004248:	0292      	lsls	r2, r2, #10
 800424a:	431a      	orrs	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	0018      	movs	r0, r3
 8004254:	f000 fad6 	bl	8004804 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2280      	movs	r2, #128	; 0x80
 800425e:	0052      	lsls	r2, r2, #1
 8004260:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	2380      	movs	r3, #128	; 0x80
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4013      	ands	r3, r2
 800426a:	d014      	beq.n	8004296 <HAL_ADC_IRQHandler+0x19e>
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	2380      	movs	r3, #128	; 0x80
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4013      	ands	r3, r2
 8004274:	d00f      	beq.n	8004296 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427a:	2280      	movs	r2, #128	; 0x80
 800427c:	02d2      	lsls	r2, r2, #11
 800427e:	431a      	orrs	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	0018      	movs	r0, r3
 8004288:	f000 fac4 	bl	8004814 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2280      	movs	r2, #128	; 0x80
 8004292:	0092      	lsls	r2, r2, #2
 8004294:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	2210      	movs	r2, #16
 800429a:	4013      	ands	r3, r2
 800429c:	d02b      	beq.n	80042f6 <HAL_ADC_IRQHandler+0x1fe>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2210      	movs	r2, #16
 80042a2:	4013      	ands	r3, r2
 80042a4:	d027      	beq.n	80042f6 <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d102      	bne.n	80042b4 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 80042ae:	2301      	movs	r3, #1
 80042b0:	617b      	str	r3, [r7, #20]
 80042b2:	e008      	b.n	80042c6 <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	0018      	movs	r0, r3
 80042ba:	f7ff fc58 	bl	8003b6e <LL_ADC_REG_GetDMATransfer>
 80042be:	1e03      	subs	r3, r0, #0
 80042c0:	d001      	beq.n	80042c6 <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 80042c2:	2301      	movs	r3, #1
 80042c4:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d110      	bne.n	80042ee <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d0:	2280      	movs	r2, #128	; 0x80
 80042d2:	00d2      	lsls	r2, r2, #3
 80042d4:	431a      	orrs	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042de:	2202      	movs	r2, #2
 80042e0:	431a      	orrs	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	0018      	movs	r0, r3
 80042ea:	f000 f825 	bl	8004338 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2210      	movs	r2, #16
 80042f4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	2380      	movs	r3, #128	; 0x80
 80042fa:	019b      	lsls	r3, r3, #6
 80042fc:	4013      	ands	r3, r2
 80042fe:	d00d      	beq.n	800431c <HAL_ADC_IRQHandler+0x224>
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	2380      	movs	r3, #128	; 0x80
 8004304:	019b      	lsls	r3, r3, #6
 8004306:	4013      	ands	r3, r2
 8004308:	d008      	beq.n	800431c <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	0018      	movs	r0, r3
 800430e:	f000 fa91 	bl	8004834 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2280      	movs	r2, #128	; 0x80
 8004318:	0192      	lsls	r2, r2, #6
 800431a:	601a      	str	r2, [r3, #0]
  }
}
 800431c:	46c0      	nop			; (mov r8, r8)
 800431e:	46bd      	mov	sp, r7
 8004320:	b006      	add	sp, #24
 8004322:	bd80      	pop	{r7, pc}
 8004324:	fffffefe 	.word	0xfffffefe

08004328 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004330:	46c0      	nop			; (mov r8, r8)
 8004332:	46bd      	mov	sp, r7
 8004334:	b002      	add	sp, #8
 8004336:	bd80      	pop	{r7, pc}

08004338 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004340:	46c0      	nop			; (mov r8, r8)
 8004342:	46bd      	mov	sp, r7
 8004344:	b002      	add	sp, #8
 8004346:	bd80      	pop	{r7, pc}

08004348 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004352:	2317      	movs	r3, #23
 8004354:	18fb      	adds	r3, r7, r3
 8004356:	2200      	movs	r2, #0
 8004358:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800435a:	2300      	movs	r3, #0
 800435c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2254      	movs	r2, #84	; 0x54
 8004362:	5c9b      	ldrb	r3, [r3, r2]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d101      	bne.n	800436c <HAL_ADC_ConfigChannel+0x24>
 8004368:	2302      	movs	r3, #2
 800436a:	e1c0      	b.n	80046ee <HAL_ADC_ConfigChannel+0x3a6>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2254      	movs	r2, #84	; 0x54
 8004370:	2101      	movs	r1, #1
 8004372:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	0018      	movs	r0, r3
 800437a:	f7ff fc7f 	bl	8003c7c <LL_ADC_REG_IsConversionOngoing>
 800437e:	1e03      	subs	r3, r0, #0
 8004380:	d000      	beq.n	8004384 <HAL_ADC_ConfigChannel+0x3c>
 8004382:	e1a3      	b.n	80046cc <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	2b02      	cmp	r3, #2
 800438a:	d100      	bne.n	800438e <HAL_ADC_ConfigChannel+0x46>
 800438c:	e143      	b.n	8004616 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	691a      	ldr	r2, [r3, #16]
 8004392:	2380      	movs	r3, #128	; 0x80
 8004394:	061b      	lsls	r3, r3, #24
 8004396:	429a      	cmp	r2, r3
 8004398:	d004      	beq.n	80043a4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800439e:	4ac1      	ldr	r2, [pc, #772]	; (80046a4 <HAL_ADC_ConfigChannel+0x35c>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d108      	bne.n	80043b6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	0019      	movs	r1, r3
 80043ae:	0010      	movs	r0, r2
 80043b0:	f7ff fbba 	bl	8003b28 <LL_ADC_REG_SetSequencerChAdd>
 80043b4:	e0c9      	b.n	800454a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	211f      	movs	r1, #31
 80043c0:	400b      	ands	r3, r1
 80043c2:	210f      	movs	r1, #15
 80043c4:	4099      	lsls	r1, r3
 80043c6:	000b      	movs	r3, r1
 80043c8:	43db      	mvns	r3, r3
 80043ca:	4013      	ands	r3, r2
 80043cc:	0019      	movs	r1, r3
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	035b      	lsls	r3, r3, #13
 80043d4:	0b5b      	lsrs	r3, r3, #13
 80043d6:	d105      	bne.n	80043e4 <HAL_ADC_ConfigChannel+0x9c>
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	0e9b      	lsrs	r3, r3, #26
 80043de:	221f      	movs	r2, #31
 80043e0:	4013      	ands	r3, r2
 80043e2:	e098      	b.n	8004516 <HAL_ADC_ConfigChannel+0x1ce>
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2201      	movs	r2, #1
 80043ea:	4013      	ands	r3, r2
 80043ec:	d000      	beq.n	80043f0 <HAL_ADC_ConfigChannel+0xa8>
 80043ee:	e091      	b.n	8004514 <HAL_ADC_ConfigChannel+0x1cc>
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2202      	movs	r2, #2
 80043f6:	4013      	ands	r3, r2
 80043f8:	d000      	beq.n	80043fc <HAL_ADC_ConfigChannel+0xb4>
 80043fa:	e089      	b.n	8004510 <HAL_ADC_ConfigChannel+0x1c8>
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2204      	movs	r2, #4
 8004402:	4013      	ands	r3, r2
 8004404:	d000      	beq.n	8004408 <HAL_ADC_ConfigChannel+0xc0>
 8004406:	e081      	b.n	800450c <HAL_ADC_ConfigChannel+0x1c4>
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2208      	movs	r2, #8
 800440e:	4013      	ands	r3, r2
 8004410:	d000      	beq.n	8004414 <HAL_ADC_ConfigChannel+0xcc>
 8004412:	e079      	b.n	8004508 <HAL_ADC_ConfigChannel+0x1c0>
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2210      	movs	r2, #16
 800441a:	4013      	ands	r3, r2
 800441c:	d000      	beq.n	8004420 <HAL_ADC_ConfigChannel+0xd8>
 800441e:	e071      	b.n	8004504 <HAL_ADC_ConfigChannel+0x1bc>
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2220      	movs	r2, #32
 8004426:	4013      	ands	r3, r2
 8004428:	d000      	beq.n	800442c <HAL_ADC_ConfigChannel+0xe4>
 800442a:	e069      	b.n	8004500 <HAL_ADC_ConfigChannel+0x1b8>
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2240      	movs	r2, #64	; 0x40
 8004432:	4013      	ands	r3, r2
 8004434:	d000      	beq.n	8004438 <HAL_ADC_ConfigChannel+0xf0>
 8004436:	e061      	b.n	80044fc <HAL_ADC_ConfigChannel+0x1b4>
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2280      	movs	r2, #128	; 0x80
 800443e:	4013      	ands	r3, r2
 8004440:	d000      	beq.n	8004444 <HAL_ADC_ConfigChannel+0xfc>
 8004442:	e059      	b.n	80044f8 <HAL_ADC_ConfigChannel+0x1b0>
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	2380      	movs	r3, #128	; 0x80
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	4013      	ands	r3, r2
 800444e:	d151      	bne.n	80044f4 <HAL_ADC_ConfigChannel+0x1ac>
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	2380      	movs	r3, #128	; 0x80
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	4013      	ands	r3, r2
 800445a:	d149      	bne.n	80044f0 <HAL_ADC_ConfigChannel+0x1a8>
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	2380      	movs	r3, #128	; 0x80
 8004462:	00db      	lsls	r3, r3, #3
 8004464:	4013      	ands	r3, r2
 8004466:	d141      	bne.n	80044ec <HAL_ADC_ConfigChannel+0x1a4>
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	2380      	movs	r3, #128	; 0x80
 800446e:	011b      	lsls	r3, r3, #4
 8004470:	4013      	ands	r3, r2
 8004472:	d139      	bne.n	80044e8 <HAL_ADC_ConfigChannel+0x1a0>
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	2380      	movs	r3, #128	; 0x80
 800447a:	015b      	lsls	r3, r3, #5
 800447c:	4013      	ands	r3, r2
 800447e:	d131      	bne.n	80044e4 <HAL_ADC_ConfigChannel+0x19c>
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	2380      	movs	r3, #128	; 0x80
 8004486:	019b      	lsls	r3, r3, #6
 8004488:	4013      	ands	r3, r2
 800448a:	d129      	bne.n	80044e0 <HAL_ADC_ConfigChannel+0x198>
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	2380      	movs	r3, #128	; 0x80
 8004492:	01db      	lsls	r3, r3, #7
 8004494:	4013      	ands	r3, r2
 8004496:	d121      	bne.n	80044dc <HAL_ADC_ConfigChannel+0x194>
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	2380      	movs	r3, #128	; 0x80
 800449e:	021b      	lsls	r3, r3, #8
 80044a0:	4013      	ands	r3, r2
 80044a2:	d119      	bne.n	80044d8 <HAL_ADC_ConfigChannel+0x190>
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	2380      	movs	r3, #128	; 0x80
 80044aa:	025b      	lsls	r3, r3, #9
 80044ac:	4013      	ands	r3, r2
 80044ae:	d111      	bne.n	80044d4 <HAL_ADC_ConfigChannel+0x18c>
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	2380      	movs	r3, #128	; 0x80
 80044b6:	029b      	lsls	r3, r3, #10
 80044b8:	4013      	ands	r3, r2
 80044ba:	d109      	bne.n	80044d0 <HAL_ADC_ConfigChannel+0x188>
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	2380      	movs	r3, #128	; 0x80
 80044c2:	02db      	lsls	r3, r3, #11
 80044c4:	4013      	ands	r3, r2
 80044c6:	d001      	beq.n	80044cc <HAL_ADC_ConfigChannel+0x184>
 80044c8:	2312      	movs	r3, #18
 80044ca:	e024      	b.n	8004516 <HAL_ADC_ConfigChannel+0x1ce>
 80044cc:	2300      	movs	r3, #0
 80044ce:	e022      	b.n	8004516 <HAL_ADC_ConfigChannel+0x1ce>
 80044d0:	2311      	movs	r3, #17
 80044d2:	e020      	b.n	8004516 <HAL_ADC_ConfigChannel+0x1ce>
 80044d4:	2310      	movs	r3, #16
 80044d6:	e01e      	b.n	8004516 <HAL_ADC_ConfigChannel+0x1ce>
 80044d8:	230f      	movs	r3, #15
 80044da:	e01c      	b.n	8004516 <HAL_ADC_ConfigChannel+0x1ce>
 80044dc:	230e      	movs	r3, #14
 80044de:	e01a      	b.n	8004516 <HAL_ADC_ConfigChannel+0x1ce>
 80044e0:	230d      	movs	r3, #13
 80044e2:	e018      	b.n	8004516 <HAL_ADC_ConfigChannel+0x1ce>
 80044e4:	230c      	movs	r3, #12
 80044e6:	e016      	b.n	8004516 <HAL_ADC_ConfigChannel+0x1ce>
 80044e8:	230b      	movs	r3, #11
 80044ea:	e014      	b.n	8004516 <HAL_ADC_ConfigChannel+0x1ce>
 80044ec:	230a      	movs	r3, #10
 80044ee:	e012      	b.n	8004516 <HAL_ADC_ConfigChannel+0x1ce>
 80044f0:	2309      	movs	r3, #9
 80044f2:	e010      	b.n	8004516 <HAL_ADC_ConfigChannel+0x1ce>
 80044f4:	2308      	movs	r3, #8
 80044f6:	e00e      	b.n	8004516 <HAL_ADC_ConfigChannel+0x1ce>
 80044f8:	2307      	movs	r3, #7
 80044fa:	e00c      	b.n	8004516 <HAL_ADC_ConfigChannel+0x1ce>
 80044fc:	2306      	movs	r3, #6
 80044fe:	e00a      	b.n	8004516 <HAL_ADC_ConfigChannel+0x1ce>
 8004500:	2305      	movs	r3, #5
 8004502:	e008      	b.n	8004516 <HAL_ADC_ConfigChannel+0x1ce>
 8004504:	2304      	movs	r3, #4
 8004506:	e006      	b.n	8004516 <HAL_ADC_ConfigChannel+0x1ce>
 8004508:	2303      	movs	r3, #3
 800450a:	e004      	b.n	8004516 <HAL_ADC_ConfigChannel+0x1ce>
 800450c:	2302      	movs	r3, #2
 800450e:	e002      	b.n	8004516 <HAL_ADC_ConfigChannel+0x1ce>
 8004510:	2301      	movs	r3, #1
 8004512:	e000      	b.n	8004516 <HAL_ADC_ConfigChannel+0x1ce>
 8004514:	2300      	movs	r3, #0
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	6852      	ldr	r2, [r2, #4]
 800451a:	201f      	movs	r0, #31
 800451c:	4002      	ands	r2, r0
 800451e:	4093      	lsls	r3, r2
 8004520:	000a      	movs	r2, r1
 8004522:	431a      	orrs	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	089b      	lsrs	r3, r3, #2
 800452e:	1c5a      	adds	r2, r3, #1
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	69db      	ldr	r3, [r3, #28]
 8004534:	429a      	cmp	r2, r3
 8004536:	d808      	bhi.n	800454a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6818      	ldr	r0, [r3, #0]
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	6859      	ldr	r1, [r3, #4]
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	001a      	movs	r2, r3
 8004546:	f7ff facf 	bl	8003ae8 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6818      	ldr	r0, [r3, #0]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	6819      	ldr	r1, [r3, #0]
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	001a      	movs	r2, r3
 8004558:	f7ff fb16 	bl	8003b88 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	db00      	blt.n	8004566 <HAL_ADC_ConfigChannel+0x21e>
 8004564:	e0bc      	b.n	80046e0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004566:	4b50      	ldr	r3, [pc, #320]	; (80046a8 <HAL_ADC_ConfigChannel+0x360>)
 8004568:	0018      	movs	r0, r3
 800456a:	f7ff fa6b 	bl	8003a44 <LL_ADC_GetCommonPathInternalCh>
 800456e:	0003      	movs	r3, r0
 8004570:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a4d      	ldr	r2, [pc, #308]	; (80046ac <HAL_ADC_ConfigChannel+0x364>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d122      	bne.n	80045c2 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	2380      	movs	r3, #128	; 0x80
 8004580:	041b      	lsls	r3, r3, #16
 8004582:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004584:	d11d      	bne.n	80045c2 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	2280      	movs	r2, #128	; 0x80
 800458a:	0412      	lsls	r2, r2, #16
 800458c:	4313      	orrs	r3, r2
 800458e:	4a46      	ldr	r2, [pc, #280]	; (80046a8 <HAL_ADC_ConfigChannel+0x360>)
 8004590:	0019      	movs	r1, r3
 8004592:	0010      	movs	r0, r2
 8004594:	f7ff fa42 	bl	8003a1c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004598:	4b45      	ldr	r3, [pc, #276]	; (80046b0 <HAL_ADC_ConfigChannel+0x368>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4945      	ldr	r1, [pc, #276]	; (80046b4 <HAL_ADC_ConfigChannel+0x36c>)
 800459e:	0018      	movs	r0, r3
 80045a0:	f7fb fdae 	bl	8000100 <__udivsi3>
 80045a4:	0003      	movs	r3, r0
 80045a6:	1c5a      	adds	r2, r3, #1
 80045a8:	0013      	movs	r3, r2
 80045aa:	005b      	lsls	r3, r3, #1
 80045ac:	189b      	adds	r3, r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80045b2:	e002      	b.n	80045ba <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	3b01      	subs	r3, #1
 80045b8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1f9      	bne.n	80045b4 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80045c0:	e08e      	b.n	80046e0 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a3c      	ldr	r2, [pc, #240]	; (80046b8 <HAL_ADC_ConfigChannel+0x370>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d10e      	bne.n	80045ea <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	2380      	movs	r3, #128	; 0x80
 80045d0:	045b      	lsls	r3, r3, #17
 80045d2:	4013      	ands	r3, r2
 80045d4:	d109      	bne.n	80045ea <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	2280      	movs	r2, #128	; 0x80
 80045da:	0452      	lsls	r2, r2, #17
 80045dc:	4313      	orrs	r3, r2
 80045de:	4a32      	ldr	r2, [pc, #200]	; (80046a8 <HAL_ADC_ConfigChannel+0x360>)
 80045e0:	0019      	movs	r1, r3
 80045e2:	0010      	movs	r0, r2
 80045e4:	f7ff fa1a 	bl	8003a1c <LL_ADC_SetCommonPathInternalCh>
 80045e8:	e07a      	b.n	80046e0 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a33      	ldr	r2, [pc, #204]	; (80046bc <HAL_ADC_ConfigChannel+0x374>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d000      	beq.n	80045f6 <HAL_ADC_ConfigChannel+0x2ae>
 80045f4:	e074      	b.n	80046e0 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	2380      	movs	r3, #128	; 0x80
 80045fa:	03db      	lsls	r3, r3, #15
 80045fc:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80045fe:	d000      	beq.n	8004602 <HAL_ADC_ConfigChannel+0x2ba>
 8004600:	e06e      	b.n	80046e0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	2280      	movs	r2, #128	; 0x80
 8004606:	03d2      	lsls	r2, r2, #15
 8004608:	4313      	orrs	r3, r2
 800460a:	4a27      	ldr	r2, [pc, #156]	; (80046a8 <HAL_ADC_ConfigChannel+0x360>)
 800460c:	0019      	movs	r1, r3
 800460e:	0010      	movs	r0, r2
 8004610:	f7ff fa04 	bl	8003a1c <LL_ADC_SetCommonPathInternalCh>
 8004614:	e064      	b.n	80046e0 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	691a      	ldr	r2, [r3, #16]
 800461a:	2380      	movs	r3, #128	; 0x80
 800461c:	061b      	lsls	r3, r3, #24
 800461e:	429a      	cmp	r2, r3
 8004620:	d004      	beq.n	800462c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004626:	4a1f      	ldr	r2, [pc, #124]	; (80046a4 <HAL_ADC_ConfigChannel+0x35c>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d107      	bne.n	800463c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	0019      	movs	r1, r3
 8004636:	0010      	movs	r0, r2
 8004638:	f7ff fa87 	bl	8003b4a <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	da4d      	bge.n	80046e0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004644:	4b18      	ldr	r3, [pc, #96]	; (80046a8 <HAL_ADC_ConfigChannel+0x360>)
 8004646:	0018      	movs	r0, r3
 8004648:	f7ff f9fc 	bl	8003a44 <LL_ADC_GetCommonPathInternalCh>
 800464c:	0003      	movs	r3, r0
 800464e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a15      	ldr	r2, [pc, #84]	; (80046ac <HAL_ADC_ConfigChannel+0x364>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d108      	bne.n	800466c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	4a18      	ldr	r2, [pc, #96]	; (80046c0 <HAL_ADC_ConfigChannel+0x378>)
 800465e:	4013      	ands	r3, r2
 8004660:	4a11      	ldr	r2, [pc, #68]	; (80046a8 <HAL_ADC_ConfigChannel+0x360>)
 8004662:	0019      	movs	r1, r3
 8004664:	0010      	movs	r0, r2
 8004666:	f7ff f9d9 	bl	8003a1c <LL_ADC_SetCommonPathInternalCh>
 800466a:	e039      	b.n	80046e0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a11      	ldr	r2, [pc, #68]	; (80046b8 <HAL_ADC_ConfigChannel+0x370>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d108      	bne.n	8004688 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	4a12      	ldr	r2, [pc, #72]	; (80046c4 <HAL_ADC_ConfigChannel+0x37c>)
 800467a:	4013      	ands	r3, r2
 800467c:	4a0a      	ldr	r2, [pc, #40]	; (80046a8 <HAL_ADC_ConfigChannel+0x360>)
 800467e:	0019      	movs	r1, r3
 8004680:	0010      	movs	r0, r2
 8004682:	f7ff f9cb 	bl	8003a1c <LL_ADC_SetCommonPathInternalCh>
 8004686:	e02b      	b.n	80046e0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a0b      	ldr	r2, [pc, #44]	; (80046bc <HAL_ADC_ConfigChannel+0x374>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d126      	bne.n	80046e0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	4a0c      	ldr	r2, [pc, #48]	; (80046c8 <HAL_ADC_ConfigChannel+0x380>)
 8004696:	4013      	ands	r3, r2
 8004698:	4a03      	ldr	r2, [pc, #12]	; (80046a8 <HAL_ADC_ConfigChannel+0x360>)
 800469a:	0019      	movs	r1, r3
 800469c:	0010      	movs	r0, r2
 800469e:	f7ff f9bd 	bl	8003a1c <LL_ADC_SetCommonPathInternalCh>
 80046a2:	e01d      	b.n	80046e0 <HAL_ADC_ConfigChannel+0x398>
 80046a4:	80000004 	.word	0x80000004
 80046a8:	40012708 	.word	0x40012708
 80046ac:	b0001000 	.word	0xb0001000
 80046b0:	20000004 	.word	0x20000004
 80046b4:	00030d40 	.word	0x00030d40
 80046b8:	b8004000 	.word	0xb8004000
 80046bc:	b4002000 	.word	0xb4002000
 80046c0:	ff7fffff 	.word	0xff7fffff
 80046c4:	feffffff 	.word	0xfeffffff
 80046c8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d0:	2220      	movs	r2, #32
 80046d2:	431a      	orrs	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80046d8:	2317      	movs	r3, #23
 80046da:	18fb      	adds	r3, r7, r3
 80046dc:	2201      	movs	r2, #1
 80046de:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2254      	movs	r2, #84	; 0x54
 80046e4:	2100      	movs	r1, #0
 80046e6:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80046e8:	2317      	movs	r3, #23
 80046ea:	18fb      	adds	r3, r7, r3
 80046ec:	781b      	ldrb	r3, [r3, #0]
}
 80046ee:	0018      	movs	r0, r3
 80046f0:	46bd      	mov	sp, r7
 80046f2:	b006      	add	sp, #24
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	46c0      	nop			; (mov r8, r8)

080046f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004700:	2300      	movs	r3, #0
 8004702:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	0018      	movs	r0, r3
 800470a:	f7ff fa93 	bl	8003c34 <LL_ADC_IsEnabled>
 800470e:	1e03      	subs	r3, r0, #0
 8004710:	d000      	beq.n	8004714 <ADC_Enable+0x1c>
 8004712:	e069      	b.n	80047e8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	4a36      	ldr	r2, [pc, #216]	; (80047f4 <ADC_Enable+0xfc>)
 800471c:	4013      	ands	r3, r2
 800471e:	d00d      	beq.n	800473c <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004724:	2210      	movs	r2, #16
 8004726:	431a      	orrs	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004730:	2201      	movs	r2, #1
 8004732:	431a      	orrs	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e056      	b.n	80047ea <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	0018      	movs	r0, r3
 8004742:	f7ff fa65 	bl	8003c10 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8004746:	4b2c      	ldr	r3, [pc, #176]	; (80047f8 <ADC_Enable+0x100>)
 8004748:	0018      	movs	r0, r3
 800474a:	f7ff f97b 	bl	8003a44 <LL_ADC_GetCommonPathInternalCh>
 800474e:	0002      	movs	r2, r0
 8004750:	2380      	movs	r3, #128	; 0x80
 8004752:	041b      	lsls	r3, r3, #16
 8004754:	4013      	ands	r3, r2
 8004756:	d00f      	beq.n	8004778 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004758:	4b28      	ldr	r3, [pc, #160]	; (80047fc <ADC_Enable+0x104>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4928      	ldr	r1, [pc, #160]	; (8004800 <ADC_Enable+0x108>)
 800475e:	0018      	movs	r0, r3
 8004760:	f7fb fcce 	bl	8000100 <__udivsi3>
 8004764:	0003      	movs	r3, r0
 8004766:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8004768:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800476a:	e002      	b.n	8004772 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	3b01      	subs	r3, #1
 8004770:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1f9      	bne.n	800476c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	7e5b      	ldrb	r3, [r3, #25]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d033      	beq.n	80047e8 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004780:	f7ff f91e 	bl	80039c0 <HAL_GetTick>
 8004784:	0003      	movs	r3, r0
 8004786:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004788:	e027      	b.n	80047da <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	0018      	movs	r0, r3
 8004790:	f7ff fa50 	bl	8003c34 <LL_ADC_IsEnabled>
 8004794:	1e03      	subs	r3, r0, #0
 8004796:	d104      	bne.n	80047a2 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	0018      	movs	r0, r3
 800479e:	f7ff fa37 	bl	8003c10 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80047a2:	f7ff f90d 	bl	80039c0 <HAL_GetTick>
 80047a6:	0002      	movs	r2, r0
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d914      	bls.n	80047da <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2201      	movs	r2, #1
 80047b8:	4013      	ands	r3, r2
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d00d      	beq.n	80047da <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c2:	2210      	movs	r2, #16
 80047c4:	431a      	orrs	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ce:	2201      	movs	r2, #1
 80047d0:	431a      	orrs	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e007      	b.n	80047ea <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2201      	movs	r2, #1
 80047e2:	4013      	ands	r3, r2
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d1d0      	bne.n	800478a <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	0018      	movs	r0, r3
 80047ec:	46bd      	mov	sp, r7
 80047ee:	b004      	add	sp, #16
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	46c0      	nop			; (mov r8, r8)
 80047f4:	80000017 	.word	0x80000017
 80047f8:	40012708 	.word	0x40012708
 80047fc:	20000004 	.word	0x20000004
 8004800:	00030d40 	.word	0x00030d40

08004804 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800480c:	46c0      	nop			; (mov r8, r8)
 800480e:	46bd      	mov	sp, r7
 8004810:	b002      	add	sp, #8
 8004812:	bd80      	pop	{r7, pc}

08004814 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800481c:	46c0      	nop			; (mov r8, r8)
 800481e:	46bd      	mov	sp, r7
 8004820:	b002      	add	sp, #8
 8004822:	bd80      	pop	{r7, pc}

08004824 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800482c:	46c0      	nop			; (mov r8, r8)
 800482e:	46bd      	mov	sp, r7
 8004830:	b002      	add	sp, #8
 8004832:	bd80      	pop	{r7, pc}

08004834 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 800483c:	46c0      	nop			; (mov r8, r8)
 800483e:	46bd      	mov	sp, r7
 8004840:	b002      	add	sp, #8
 8004842:	bd80      	pop	{r7, pc}

08004844 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	0002      	movs	r2, r0
 800484c:	1dfb      	adds	r3, r7, #7
 800484e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004850:	1dfb      	adds	r3, r7, #7
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	2b7f      	cmp	r3, #127	; 0x7f
 8004856:	d809      	bhi.n	800486c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004858:	1dfb      	adds	r3, r7, #7
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	001a      	movs	r2, r3
 800485e:	231f      	movs	r3, #31
 8004860:	401a      	ands	r2, r3
 8004862:	4b04      	ldr	r3, [pc, #16]	; (8004874 <__NVIC_EnableIRQ+0x30>)
 8004864:	2101      	movs	r1, #1
 8004866:	4091      	lsls	r1, r2
 8004868:	000a      	movs	r2, r1
 800486a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800486c:	46c0      	nop			; (mov r8, r8)
 800486e:	46bd      	mov	sp, r7
 8004870:	b002      	add	sp, #8
 8004872:	bd80      	pop	{r7, pc}
 8004874:	e000e100 	.word	0xe000e100

08004878 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004878:	b590      	push	{r4, r7, lr}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	0002      	movs	r2, r0
 8004880:	6039      	str	r1, [r7, #0]
 8004882:	1dfb      	adds	r3, r7, #7
 8004884:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004886:	1dfb      	adds	r3, r7, #7
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	2b7f      	cmp	r3, #127	; 0x7f
 800488c:	d828      	bhi.n	80048e0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800488e:	4a2f      	ldr	r2, [pc, #188]	; (800494c <__NVIC_SetPriority+0xd4>)
 8004890:	1dfb      	adds	r3, r7, #7
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	b25b      	sxtb	r3, r3
 8004896:	089b      	lsrs	r3, r3, #2
 8004898:	33c0      	adds	r3, #192	; 0xc0
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	589b      	ldr	r3, [r3, r2]
 800489e:	1dfa      	adds	r2, r7, #7
 80048a0:	7812      	ldrb	r2, [r2, #0]
 80048a2:	0011      	movs	r1, r2
 80048a4:	2203      	movs	r2, #3
 80048a6:	400a      	ands	r2, r1
 80048a8:	00d2      	lsls	r2, r2, #3
 80048aa:	21ff      	movs	r1, #255	; 0xff
 80048ac:	4091      	lsls	r1, r2
 80048ae:	000a      	movs	r2, r1
 80048b0:	43d2      	mvns	r2, r2
 80048b2:	401a      	ands	r2, r3
 80048b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	019b      	lsls	r3, r3, #6
 80048ba:	22ff      	movs	r2, #255	; 0xff
 80048bc:	401a      	ands	r2, r3
 80048be:	1dfb      	adds	r3, r7, #7
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	0018      	movs	r0, r3
 80048c4:	2303      	movs	r3, #3
 80048c6:	4003      	ands	r3, r0
 80048c8:	00db      	lsls	r3, r3, #3
 80048ca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80048cc:	481f      	ldr	r0, [pc, #124]	; (800494c <__NVIC_SetPriority+0xd4>)
 80048ce:	1dfb      	adds	r3, r7, #7
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	b25b      	sxtb	r3, r3
 80048d4:	089b      	lsrs	r3, r3, #2
 80048d6:	430a      	orrs	r2, r1
 80048d8:	33c0      	adds	r3, #192	; 0xc0
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80048de:	e031      	b.n	8004944 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80048e0:	4a1b      	ldr	r2, [pc, #108]	; (8004950 <__NVIC_SetPriority+0xd8>)
 80048e2:	1dfb      	adds	r3, r7, #7
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	0019      	movs	r1, r3
 80048e8:	230f      	movs	r3, #15
 80048ea:	400b      	ands	r3, r1
 80048ec:	3b08      	subs	r3, #8
 80048ee:	089b      	lsrs	r3, r3, #2
 80048f0:	3306      	adds	r3, #6
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	18d3      	adds	r3, r2, r3
 80048f6:	3304      	adds	r3, #4
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	1dfa      	adds	r2, r7, #7
 80048fc:	7812      	ldrb	r2, [r2, #0]
 80048fe:	0011      	movs	r1, r2
 8004900:	2203      	movs	r2, #3
 8004902:	400a      	ands	r2, r1
 8004904:	00d2      	lsls	r2, r2, #3
 8004906:	21ff      	movs	r1, #255	; 0xff
 8004908:	4091      	lsls	r1, r2
 800490a:	000a      	movs	r2, r1
 800490c:	43d2      	mvns	r2, r2
 800490e:	401a      	ands	r2, r3
 8004910:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	019b      	lsls	r3, r3, #6
 8004916:	22ff      	movs	r2, #255	; 0xff
 8004918:	401a      	ands	r2, r3
 800491a:	1dfb      	adds	r3, r7, #7
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	0018      	movs	r0, r3
 8004920:	2303      	movs	r3, #3
 8004922:	4003      	ands	r3, r0
 8004924:	00db      	lsls	r3, r3, #3
 8004926:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004928:	4809      	ldr	r0, [pc, #36]	; (8004950 <__NVIC_SetPriority+0xd8>)
 800492a:	1dfb      	adds	r3, r7, #7
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	001c      	movs	r4, r3
 8004930:	230f      	movs	r3, #15
 8004932:	4023      	ands	r3, r4
 8004934:	3b08      	subs	r3, #8
 8004936:	089b      	lsrs	r3, r3, #2
 8004938:	430a      	orrs	r2, r1
 800493a:	3306      	adds	r3, #6
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	18c3      	adds	r3, r0, r3
 8004940:	3304      	adds	r3, #4
 8004942:	601a      	str	r2, [r3, #0]
}
 8004944:	46c0      	nop			; (mov r8, r8)
 8004946:	46bd      	mov	sp, r7
 8004948:	b003      	add	sp, #12
 800494a:	bd90      	pop	{r4, r7, pc}
 800494c:	e000e100 	.word	0xe000e100
 8004950:	e000ed00 	.word	0xe000ed00

08004954 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	1e5a      	subs	r2, r3, #1
 8004960:	2380      	movs	r3, #128	; 0x80
 8004962:	045b      	lsls	r3, r3, #17
 8004964:	429a      	cmp	r2, r3
 8004966:	d301      	bcc.n	800496c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004968:	2301      	movs	r3, #1
 800496a:	e010      	b.n	800498e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800496c:	4b0a      	ldr	r3, [pc, #40]	; (8004998 <SysTick_Config+0x44>)
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	3a01      	subs	r2, #1
 8004972:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004974:	2301      	movs	r3, #1
 8004976:	425b      	negs	r3, r3
 8004978:	2103      	movs	r1, #3
 800497a:	0018      	movs	r0, r3
 800497c:	f7ff ff7c 	bl	8004878 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004980:	4b05      	ldr	r3, [pc, #20]	; (8004998 <SysTick_Config+0x44>)
 8004982:	2200      	movs	r2, #0
 8004984:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004986:	4b04      	ldr	r3, [pc, #16]	; (8004998 <SysTick_Config+0x44>)
 8004988:	2207      	movs	r2, #7
 800498a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800498c:	2300      	movs	r3, #0
}
 800498e:	0018      	movs	r0, r3
 8004990:	46bd      	mov	sp, r7
 8004992:	b002      	add	sp, #8
 8004994:	bd80      	pop	{r7, pc}
 8004996:	46c0      	nop			; (mov r8, r8)
 8004998:	e000e010 	.word	0xe000e010

0800499c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60b9      	str	r1, [r7, #8]
 80049a4:	607a      	str	r2, [r7, #4]
 80049a6:	210f      	movs	r1, #15
 80049a8:	187b      	adds	r3, r7, r1
 80049aa:	1c02      	adds	r2, r0, #0
 80049ac:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80049ae:	68ba      	ldr	r2, [r7, #8]
 80049b0:	187b      	adds	r3, r7, r1
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	b25b      	sxtb	r3, r3
 80049b6:	0011      	movs	r1, r2
 80049b8:	0018      	movs	r0, r3
 80049ba:	f7ff ff5d 	bl	8004878 <__NVIC_SetPriority>
}
 80049be:	46c0      	nop			; (mov r8, r8)
 80049c0:	46bd      	mov	sp, r7
 80049c2:	b004      	add	sp, #16
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b082      	sub	sp, #8
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	0002      	movs	r2, r0
 80049ce:	1dfb      	adds	r3, r7, #7
 80049d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049d2:	1dfb      	adds	r3, r7, #7
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	b25b      	sxtb	r3, r3
 80049d8:	0018      	movs	r0, r3
 80049da:	f7ff ff33 	bl	8004844 <__NVIC_EnableIRQ>
}
 80049de:	46c0      	nop			; (mov r8, r8)
 80049e0:	46bd      	mov	sp, r7
 80049e2:	b002      	add	sp, #8
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b082      	sub	sp, #8
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	0018      	movs	r0, r3
 80049f2:	f7ff ffaf 	bl	8004954 <SysTick_Config>
 80049f6:	0003      	movs	r3, r0
}
 80049f8:	0018      	movs	r0, r3
 80049fa:	46bd      	mov	sp, r7
 80049fc:	b002      	add	sp, #8
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b086      	sub	sp, #24
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a0e:	e147      	b.n	8004ca0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2101      	movs	r1, #1
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	4091      	lsls	r1, r2
 8004a1a:	000a      	movs	r2, r1
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d100      	bne.n	8004a28 <HAL_GPIO_Init+0x28>
 8004a26:	e138      	b.n	8004c9a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	2203      	movs	r2, #3
 8004a2e:	4013      	ands	r3, r2
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d005      	beq.n	8004a40 <HAL_GPIO_Init+0x40>
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	2203      	movs	r2, #3
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d130      	bne.n	8004aa2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	005b      	lsls	r3, r3, #1
 8004a4a:	2203      	movs	r2, #3
 8004a4c:	409a      	lsls	r2, r3
 8004a4e:	0013      	movs	r3, r2
 8004a50:	43da      	mvns	r2, r3
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	4013      	ands	r3, r2
 8004a56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	68da      	ldr	r2, [r3, #12]
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	005b      	lsls	r3, r3, #1
 8004a60:	409a      	lsls	r2, r3
 8004a62:	0013      	movs	r3, r2
 8004a64:	693a      	ldr	r2, [r7, #16]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	693a      	ldr	r2, [r7, #16]
 8004a6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a76:	2201      	movs	r2, #1
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	409a      	lsls	r2, r3
 8004a7c:	0013      	movs	r3, r2
 8004a7e:	43da      	mvns	r2, r3
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	4013      	ands	r3, r2
 8004a84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	091b      	lsrs	r3, r3, #4
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	401a      	ands	r2, r3
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	409a      	lsls	r2, r3
 8004a94:	0013      	movs	r3, r2
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	693a      	ldr	r2, [r7, #16]
 8004aa0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	2203      	movs	r2, #3
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	2b03      	cmp	r3, #3
 8004aac:	d017      	beq.n	8004ade <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	005b      	lsls	r3, r3, #1
 8004ab8:	2203      	movs	r2, #3
 8004aba:	409a      	lsls	r2, r3
 8004abc:	0013      	movs	r3, r2
 8004abe:	43da      	mvns	r2, r3
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	689a      	ldr	r2, [r3, #8]
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	005b      	lsls	r3, r3, #1
 8004ace:	409a      	lsls	r2, r3
 8004ad0:	0013      	movs	r3, r2
 8004ad2:	693a      	ldr	r2, [r7, #16]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	2203      	movs	r2, #3
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d123      	bne.n	8004b32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	08da      	lsrs	r2, r3, #3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	3208      	adds	r2, #8
 8004af2:	0092      	lsls	r2, r2, #2
 8004af4:	58d3      	ldr	r3, [r2, r3]
 8004af6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	2207      	movs	r2, #7
 8004afc:	4013      	ands	r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	220f      	movs	r2, #15
 8004b02:	409a      	lsls	r2, r3
 8004b04:	0013      	movs	r3, r2
 8004b06:	43da      	mvns	r2, r3
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	691a      	ldr	r2, [r3, #16]
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	2107      	movs	r1, #7
 8004b16:	400b      	ands	r3, r1
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	409a      	lsls	r2, r3
 8004b1c:	0013      	movs	r3, r2
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	08da      	lsrs	r2, r3, #3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	3208      	adds	r2, #8
 8004b2c:	0092      	lsls	r2, r2, #2
 8004b2e:	6939      	ldr	r1, [r7, #16]
 8004b30:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	005b      	lsls	r3, r3, #1
 8004b3c:	2203      	movs	r2, #3
 8004b3e:	409a      	lsls	r2, r3
 8004b40:	0013      	movs	r3, r2
 8004b42:	43da      	mvns	r2, r3
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	4013      	ands	r3, r2
 8004b48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	2203      	movs	r2, #3
 8004b50:	401a      	ands	r2, r3
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	005b      	lsls	r3, r3, #1
 8004b56:	409a      	lsls	r2, r3
 8004b58:	0013      	movs	r3, r2
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	685a      	ldr	r2, [r3, #4]
 8004b6a:	23c0      	movs	r3, #192	; 0xc0
 8004b6c:	029b      	lsls	r3, r3, #10
 8004b6e:	4013      	ands	r3, r2
 8004b70:	d100      	bne.n	8004b74 <HAL_GPIO_Init+0x174>
 8004b72:	e092      	b.n	8004c9a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004b74:	4a50      	ldr	r2, [pc, #320]	; (8004cb8 <HAL_GPIO_Init+0x2b8>)
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	089b      	lsrs	r3, r3, #2
 8004b7a:	3318      	adds	r3, #24
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	589b      	ldr	r3, [r3, r2]
 8004b80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	2203      	movs	r2, #3
 8004b86:	4013      	ands	r3, r2
 8004b88:	00db      	lsls	r3, r3, #3
 8004b8a:	220f      	movs	r2, #15
 8004b8c:	409a      	lsls	r2, r3
 8004b8e:	0013      	movs	r3, r2
 8004b90:	43da      	mvns	r2, r3
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	4013      	ands	r3, r2
 8004b96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	23a0      	movs	r3, #160	; 0xa0
 8004b9c:	05db      	lsls	r3, r3, #23
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d013      	beq.n	8004bca <HAL_GPIO_Init+0x1ca>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a45      	ldr	r2, [pc, #276]	; (8004cbc <HAL_GPIO_Init+0x2bc>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d00d      	beq.n	8004bc6 <HAL_GPIO_Init+0x1c6>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a44      	ldr	r2, [pc, #272]	; (8004cc0 <HAL_GPIO_Init+0x2c0>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d007      	beq.n	8004bc2 <HAL_GPIO_Init+0x1c2>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a43      	ldr	r2, [pc, #268]	; (8004cc4 <HAL_GPIO_Init+0x2c4>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d101      	bne.n	8004bbe <HAL_GPIO_Init+0x1be>
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e006      	b.n	8004bcc <HAL_GPIO_Init+0x1cc>
 8004bbe:	2305      	movs	r3, #5
 8004bc0:	e004      	b.n	8004bcc <HAL_GPIO_Init+0x1cc>
 8004bc2:	2302      	movs	r3, #2
 8004bc4:	e002      	b.n	8004bcc <HAL_GPIO_Init+0x1cc>
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e000      	b.n	8004bcc <HAL_GPIO_Init+0x1cc>
 8004bca:	2300      	movs	r3, #0
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	2103      	movs	r1, #3
 8004bd0:	400a      	ands	r2, r1
 8004bd2:	00d2      	lsls	r2, r2, #3
 8004bd4:	4093      	lsls	r3, r2
 8004bd6:	693a      	ldr	r2, [r7, #16]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004bdc:	4936      	ldr	r1, [pc, #216]	; (8004cb8 <HAL_GPIO_Init+0x2b8>)
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	089b      	lsrs	r3, r3, #2
 8004be2:	3318      	adds	r3, #24
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004bea:	4b33      	ldr	r3, [pc, #204]	; (8004cb8 <HAL_GPIO_Init+0x2b8>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	43da      	mvns	r2, r3
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	685a      	ldr	r2, [r3, #4]
 8004bfe:	2380      	movs	r3, #128	; 0x80
 8004c00:	035b      	lsls	r3, r3, #13
 8004c02:	4013      	ands	r3, r2
 8004c04:	d003      	beq.n	8004c0e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004c0e:	4b2a      	ldr	r3, [pc, #168]	; (8004cb8 <HAL_GPIO_Init+0x2b8>)
 8004c10:	693a      	ldr	r2, [r7, #16]
 8004c12:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004c14:	4b28      	ldr	r3, [pc, #160]	; (8004cb8 <HAL_GPIO_Init+0x2b8>)
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	43da      	mvns	r2, r3
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	4013      	ands	r3, r2
 8004c22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	685a      	ldr	r2, [r3, #4]
 8004c28:	2380      	movs	r3, #128	; 0x80
 8004c2a:	039b      	lsls	r3, r3, #14
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	d003      	beq.n	8004c38 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004c38:	4b1f      	ldr	r3, [pc, #124]	; (8004cb8 <HAL_GPIO_Init+0x2b8>)
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004c3e:	4a1e      	ldr	r2, [pc, #120]	; (8004cb8 <HAL_GPIO_Init+0x2b8>)
 8004c40:	2384      	movs	r3, #132	; 0x84
 8004c42:	58d3      	ldr	r3, [r2, r3]
 8004c44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	43da      	mvns	r2, r3
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	685a      	ldr	r2, [r3, #4]
 8004c54:	2380      	movs	r3, #128	; 0x80
 8004c56:	029b      	lsls	r3, r3, #10
 8004c58:	4013      	ands	r3, r2
 8004c5a:	d003      	beq.n	8004c64 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004c64:	4914      	ldr	r1, [pc, #80]	; (8004cb8 <HAL_GPIO_Init+0x2b8>)
 8004c66:	2284      	movs	r2, #132	; 0x84
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004c6c:	4a12      	ldr	r2, [pc, #72]	; (8004cb8 <HAL_GPIO_Init+0x2b8>)
 8004c6e:	2380      	movs	r3, #128	; 0x80
 8004c70:	58d3      	ldr	r3, [r2, r3]
 8004c72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	43da      	mvns	r2, r3
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	685a      	ldr	r2, [r3, #4]
 8004c82:	2380      	movs	r3, #128	; 0x80
 8004c84:	025b      	lsls	r3, r3, #9
 8004c86:	4013      	ands	r3, r2
 8004c88:	d003      	beq.n	8004c92 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004c92:	4909      	ldr	r1, [pc, #36]	; (8004cb8 <HAL_GPIO_Init+0x2b8>)
 8004c94:	2280      	movs	r2, #128	; 0x80
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	40da      	lsrs	r2, r3
 8004ca8:	1e13      	subs	r3, r2, #0
 8004caa:	d000      	beq.n	8004cae <HAL_GPIO_Init+0x2ae>
 8004cac:	e6b0      	b.n	8004a10 <HAL_GPIO_Init+0x10>
  }
}
 8004cae:	46c0      	nop			; (mov r8, r8)
 8004cb0:	46c0      	nop			; (mov r8, r8)
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	b006      	add	sp, #24
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	40021800 	.word	0x40021800
 8004cbc:	50000400 	.word	0x50000400
 8004cc0:	50000800 	.word	0x50000800
 8004cc4:	50000c00 	.word	0x50000c00

08004cc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	0008      	movs	r0, r1
 8004cd2:	0011      	movs	r1, r2
 8004cd4:	1cbb      	adds	r3, r7, #2
 8004cd6:	1c02      	adds	r2, r0, #0
 8004cd8:	801a      	strh	r2, [r3, #0]
 8004cda:	1c7b      	adds	r3, r7, #1
 8004cdc:	1c0a      	adds	r2, r1, #0
 8004cde:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ce0:	1c7b      	adds	r3, r7, #1
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d004      	beq.n	8004cf2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ce8:	1cbb      	adds	r3, r7, #2
 8004cea:	881a      	ldrh	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004cf0:	e003      	b.n	8004cfa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004cf2:	1cbb      	adds	r3, r7, #2
 8004cf4:	881a      	ldrh	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004cfa:	46c0      	nop			; (mov r8, r8)
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	b002      	add	sp, #8
 8004d00:	bd80      	pop	{r7, pc}
	...

08004d04 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004d0c:	4b19      	ldr	r3, [pc, #100]	; (8004d74 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a19      	ldr	r2, [pc, #100]	; (8004d78 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004d12:	4013      	ands	r3, r2
 8004d14:	0019      	movs	r1, r3
 8004d16:	4b17      	ldr	r3, [pc, #92]	; (8004d74 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	2380      	movs	r3, #128	; 0x80
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d11f      	bne.n	8004d68 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004d28:	4b14      	ldr	r3, [pc, #80]	; (8004d7c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	0013      	movs	r3, r2
 8004d2e:	005b      	lsls	r3, r3, #1
 8004d30:	189b      	adds	r3, r3, r2
 8004d32:	005b      	lsls	r3, r3, #1
 8004d34:	4912      	ldr	r1, [pc, #72]	; (8004d80 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004d36:	0018      	movs	r0, r3
 8004d38:	f7fb f9e2 	bl	8000100 <__udivsi3>
 8004d3c:	0003      	movs	r3, r0
 8004d3e:	3301      	adds	r3, #1
 8004d40:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d42:	e008      	b.n	8004d56 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d003      	beq.n	8004d52 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	60fb      	str	r3, [r7, #12]
 8004d50:	e001      	b.n	8004d56 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e009      	b.n	8004d6a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d56:	4b07      	ldr	r3, [pc, #28]	; (8004d74 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004d58:	695a      	ldr	r2, [r3, #20]
 8004d5a:	2380      	movs	r3, #128	; 0x80
 8004d5c:	00db      	lsls	r3, r3, #3
 8004d5e:	401a      	ands	r2, r3
 8004d60:	2380      	movs	r3, #128	; 0x80
 8004d62:	00db      	lsls	r3, r3, #3
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d0ed      	beq.n	8004d44 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	0018      	movs	r0, r3
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	b004      	add	sp, #16
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	46c0      	nop			; (mov r8, r8)
 8004d74:	40007000 	.word	0x40007000
 8004d78:	fffff9ff 	.word	0xfffff9ff
 8004d7c:	20000004 	.word	0x20000004
 8004d80:	000f4240 	.word	0x000f4240

08004d84 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b088      	sub	sp, #32
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e2f3      	b.n	800537e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	d100      	bne.n	8004da2 <HAL_RCC_OscConfig+0x1e>
 8004da0:	e07c      	b.n	8004e9c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004da2:	4bc3      	ldr	r3, [pc, #780]	; (80050b0 <HAL_RCC_OscConfig+0x32c>)
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	2238      	movs	r2, #56	; 0x38
 8004da8:	4013      	ands	r3, r2
 8004daa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004dac:	4bc0      	ldr	r3, [pc, #768]	; (80050b0 <HAL_RCC_OscConfig+0x32c>)
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	2203      	movs	r2, #3
 8004db2:	4013      	ands	r3, r2
 8004db4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	2b10      	cmp	r3, #16
 8004dba:	d102      	bne.n	8004dc2 <HAL_RCC_OscConfig+0x3e>
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	2b03      	cmp	r3, #3
 8004dc0:	d002      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	2b08      	cmp	r3, #8
 8004dc6:	d10b      	bne.n	8004de0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dc8:	4bb9      	ldr	r3, [pc, #740]	; (80050b0 <HAL_RCC_OscConfig+0x32c>)
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	2380      	movs	r3, #128	; 0x80
 8004dce:	029b      	lsls	r3, r3, #10
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	d062      	beq.n	8004e9a <HAL_RCC_OscConfig+0x116>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d15e      	bne.n	8004e9a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e2ce      	b.n	800537e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	2380      	movs	r3, #128	; 0x80
 8004de6:	025b      	lsls	r3, r3, #9
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d107      	bne.n	8004dfc <HAL_RCC_OscConfig+0x78>
 8004dec:	4bb0      	ldr	r3, [pc, #704]	; (80050b0 <HAL_RCC_OscConfig+0x32c>)
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	4baf      	ldr	r3, [pc, #700]	; (80050b0 <HAL_RCC_OscConfig+0x32c>)
 8004df2:	2180      	movs	r1, #128	; 0x80
 8004df4:	0249      	lsls	r1, r1, #9
 8004df6:	430a      	orrs	r2, r1
 8004df8:	601a      	str	r2, [r3, #0]
 8004dfa:	e020      	b.n	8004e3e <HAL_RCC_OscConfig+0xba>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685a      	ldr	r2, [r3, #4]
 8004e00:	23a0      	movs	r3, #160	; 0xa0
 8004e02:	02db      	lsls	r3, r3, #11
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d10e      	bne.n	8004e26 <HAL_RCC_OscConfig+0xa2>
 8004e08:	4ba9      	ldr	r3, [pc, #676]	; (80050b0 <HAL_RCC_OscConfig+0x32c>)
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	4ba8      	ldr	r3, [pc, #672]	; (80050b0 <HAL_RCC_OscConfig+0x32c>)
 8004e0e:	2180      	movs	r1, #128	; 0x80
 8004e10:	02c9      	lsls	r1, r1, #11
 8004e12:	430a      	orrs	r2, r1
 8004e14:	601a      	str	r2, [r3, #0]
 8004e16:	4ba6      	ldr	r3, [pc, #664]	; (80050b0 <HAL_RCC_OscConfig+0x32c>)
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	4ba5      	ldr	r3, [pc, #660]	; (80050b0 <HAL_RCC_OscConfig+0x32c>)
 8004e1c:	2180      	movs	r1, #128	; 0x80
 8004e1e:	0249      	lsls	r1, r1, #9
 8004e20:	430a      	orrs	r2, r1
 8004e22:	601a      	str	r2, [r3, #0]
 8004e24:	e00b      	b.n	8004e3e <HAL_RCC_OscConfig+0xba>
 8004e26:	4ba2      	ldr	r3, [pc, #648]	; (80050b0 <HAL_RCC_OscConfig+0x32c>)
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	4ba1      	ldr	r3, [pc, #644]	; (80050b0 <HAL_RCC_OscConfig+0x32c>)
 8004e2c:	49a1      	ldr	r1, [pc, #644]	; (80050b4 <HAL_RCC_OscConfig+0x330>)
 8004e2e:	400a      	ands	r2, r1
 8004e30:	601a      	str	r2, [r3, #0]
 8004e32:	4b9f      	ldr	r3, [pc, #636]	; (80050b0 <HAL_RCC_OscConfig+0x32c>)
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	4b9e      	ldr	r3, [pc, #632]	; (80050b0 <HAL_RCC_OscConfig+0x32c>)
 8004e38:	499f      	ldr	r1, [pc, #636]	; (80050b8 <HAL_RCC_OscConfig+0x334>)
 8004e3a:	400a      	ands	r2, r1
 8004e3c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d014      	beq.n	8004e70 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e46:	f7fe fdbb 	bl	80039c0 <HAL_GetTick>
 8004e4a:	0003      	movs	r3, r0
 8004e4c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e4e:	e008      	b.n	8004e62 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e50:	f7fe fdb6 	bl	80039c0 <HAL_GetTick>
 8004e54:	0002      	movs	r2, r0
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b64      	cmp	r3, #100	; 0x64
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e28d      	b.n	800537e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e62:	4b93      	ldr	r3, [pc, #588]	; (80050b0 <HAL_RCC_OscConfig+0x32c>)
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	2380      	movs	r3, #128	; 0x80
 8004e68:	029b      	lsls	r3, r3, #10
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	d0f0      	beq.n	8004e50 <HAL_RCC_OscConfig+0xcc>
 8004e6e:	e015      	b.n	8004e9c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e70:	f7fe fda6 	bl	80039c0 <HAL_GetTick>
 8004e74:	0003      	movs	r3, r0
 8004e76:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e78:	e008      	b.n	8004e8c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e7a:	f7fe fda1 	bl	80039c0 <HAL_GetTick>
 8004e7e:	0002      	movs	r2, r0
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	2b64      	cmp	r3, #100	; 0x64
 8004e86:	d901      	bls.n	8004e8c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e278      	b.n	800537e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e8c:	4b88      	ldr	r3, [pc, #544]	; (80050b0 <HAL_RCC_OscConfig+0x32c>)
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	2380      	movs	r3, #128	; 0x80
 8004e92:	029b      	lsls	r3, r3, #10
 8004e94:	4013      	ands	r3, r2
 8004e96:	d1f0      	bne.n	8004e7a <HAL_RCC_OscConfig+0xf6>
 8004e98:	e000      	b.n	8004e9c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e9a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2202      	movs	r2, #2
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	d100      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x124>
 8004ea6:	e099      	b.n	8004fdc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ea8:	4b81      	ldr	r3, [pc, #516]	; (80050b0 <HAL_RCC_OscConfig+0x32c>)
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	2238      	movs	r2, #56	; 0x38
 8004eae:	4013      	ands	r3, r2
 8004eb0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004eb2:	4b7f      	ldr	r3, [pc, #508]	; (80050b0 <HAL_RCC_OscConfig+0x32c>)
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	2203      	movs	r2, #3
 8004eb8:	4013      	ands	r3, r2
 8004eba:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	2b10      	cmp	r3, #16
 8004ec0:	d102      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x144>
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d002      	beq.n	8004ece <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d135      	bne.n	8004f3a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ece:	4b78      	ldr	r3, [pc, #480]	; (80050b0 <HAL_RCC_OscConfig+0x32c>)
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	2380      	movs	r3, #128	; 0x80
 8004ed4:	00db      	lsls	r3, r3, #3
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	d005      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x162>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e24b      	b.n	800537e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ee6:	4b72      	ldr	r3, [pc, #456]	; (80050b0 <HAL_RCC_OscConfig+0x32c>)
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	4a74      	ldr	r2, [pc, #464]	; (80050bc <HAL_RCC_OscConfig+0x338>)
 8004eec:	4013      	ands	r3, r2
 8004eee:	0019      	movs	r1, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	695b      	ldr	r3, [r3, #20]
 8004ef4:	021a      	lsls	r2, r3, #8
 8004ef6:	4b6e      	ldr	r3, [pc, #440]	; (80050b0 <HAL_RCC_OscConfig+0x32c>)
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d112      	bne.n	8004f28 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004f02:	4b6b      	ldr	r3, [pc, #428]	; (80050b0 <HAL_RCC_OscConfig+0x32c>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a6e      	ldr	r2, [pc, #440]	; (80050c0 <HAL_RCC_OscConfig+0x33c>)
 8004f08:	4013      	ands	r3, r2
 8004f0a:	0019      	movs	r1, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	691a      	ldr	r2, [r3, #16]
 8004f10:	4b67      	ldr	r3, [pc, #412]	; (80050b0 <HAL_RCC_OscConfig+0x32c>)
 8004f12:	430a      	orrs	r2, r1
 8004f14:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004f16:	4b66      	ldr	r3, [pc, #408]	; (80050b0 <HAL_RCC_OscConfig+0x32c>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	0adb      	lsrs	r3, r3, #11
 8004f1c:	2207      	movs	r2, #7
 8004f1e:	4013      	ands	r3, r2
 8004f20:	4a68      	ldr	r2, [pc, #416]	; (80050c4 <HAL_RCC_OscConfig+0x340>)
 8004f22:	40da      	lsrs	r2, r3
 8004f24:	4b68      	ldr	r3, [pc, #416]	; (80050c8 <HAL_RCC_OscConfig+0x344>)
 8004f26:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004f28:	4b68      	ldr	r3, [pc, #416]	; (80050cc <HAL_RCC_OscConfig+0x348>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	0018      	movs	r0, r3
 8004f2e:	f7fe fceb 	bl	8003908 <HAL_InitTick>
 8004f32:	1e03      	subs	r3, r0, #0
 8004f34:	d051      	beq.n	8004fda <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e221      	b.n	800537e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d030      	beq.n	8004fa4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004f42:	4b5b      	ldr	r3, [pc, #364]	; (80050b0 <HAL_RCC_OscConfig+0x32c>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a5e      	ldr	r2, [pc, #376]	; (80050c0 <HAL_RCC_OscConfig+0x33c>)
 8004f48:	4013      	ands	r3, r2
 8004f4a:	0019      	movs	r1, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	691a      	ldr	r2, [r3, #16]
 8004f50:	4b57      	ldr	r3, [pc, #348]	; (80050b0 <HAL_RCC_OscConfig+0x32c>)
 8004f52:	430a      	orrs	r2, r1
 8004f54:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004f56:	4b56      	ldr	r3, [pc, #344]	; (80050b0 <HAL_RCC_OscConfig+0x32c>)
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	4b55      	ldr	r3, [pc, #340]	; (80050b0 <HAL_RCC_OscConfig+0x32c>)
 8004f5c:	2180      	movs	r1, #128	; 0x80
 8004f5e:	0049      	lsls	r1, r1, #1
 8004f60:	430a      	orrs	r2, r1
 8004f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f64:	f7fe fd2c 	bl	80039c0 <HAL_GetTick>
 8004f68:	0003      	movs	r3, r0
 8004f6a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f6c:	e008      	b.n	8004f80 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f6e:	f7fe fd27 	bl	80039c0 <HAL_GetTick>
 8004f72:	0002      	movs	r2, r0
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d901      	bls.n	8004f80 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e1fe      	b.n	800537e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f80:	4b4b      	ldr	r3, [pc, #300]	; (80050b0 <HAL_RCC_OscConfig+0x32c>)
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	2380      	movs	r3, #128	; 0x80
 8004f86:	00db      	lsls	r3, r3, #3
 8004f88:	4013      	ands	r3, r2
 8004f8a:	d0f0      	beq.n	8004f6e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f8c:	4b48      	ldr	r3, [pc, #288]	; (80050b0 <HAL_RCC_OscConfig+0x32c>)
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	4a4a      	ldr	r2, [pc, #296]	; (80050bc <HAL_RCC_OscConfig+0x338>)
 8004f92:	4013      	ands	r3, r2
 8004f94:	0019      	movs	r1, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	021a      	lsls	r2, r3, #8
 8004f9c:	4b44      	ldr	r3, [pc, #272]	; (80050b0 <HAL_RCC_OscConfig+0x32c>)
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	605a      	str	r2, [r3, #4]
 8004fa2:	e01b      	b.n	8004fdc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004fa4:	4b42      	ldr	r3, [pc, #264]	; (80050b0 <HAL_RCC_OscConfig+0x32c>)
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	4b41      	ldr	r3, [pc, #260]	; (80050b0 <HAL_RCC_OscConfig+0x32c>)
 8004faa:	4949      	ldr	r1, [pc, #292]	; (80050d0 <HAL_RCC_OscConfig+0x34c>)
 8004fac:	400a      	ands	r2, r1
 8004fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb0:	f7fe fd06 	bl	80039c0 <HAL_GetTick>
 8004fb4:	0003      	movs	r3, r0
 8004fb6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004fb8:	e008      	b.n	8004fcc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fba:	f7fe fd01 	bl	80039c0 <HAL_GetTick>
 8004fbe:	0002      	movs	r2, r0
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d901      	bls.n	8004fcc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e1d8      	b.n	800537e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004fcc:	4b38      	ldr	r3, [pc, #224]	; (80050b0 <HAL_RCC_OscConfig+0x32c>)
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	2380      	movs	r3, #128	; 0x80
 8004fd2:	00db      	lsls	r3, r3, #3
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	d1f0      	bne.n	8004fba <HAL_RCC_OscConfig+0x236>
 8004fd8:	e000      	b.n	8004fdc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004fda:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2208      	movs	r2, #8
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	d047      	beq.n	8005076 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004fe6:	4b32      	ldr	r3, [pc, #200]	; (80050b0 <HAL_RCC_OscConfig+0x32c>)
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	2238      	movs	r2, #56	; 0x38
 8004fec:	4013      	ands	r3, r2
 8004fee:	2b18      	cmp	r3, #24
 8004ff0:	d10a      	bne.n	8005008 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004ff2:	4b2f      	ldr	r3, [pc, #188]	; (80050b0 <HAL_RCC_OscConfig+0x32c>)
 8004ff4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ff6:	2202      	movs	r2, #2
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	d03c      	beq.n	8005076 <HAL_RCC_OscConfig+0x2f2>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	699b      	ldr	r3, [r3, #24]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d138      	bne.n	8005076 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e1ba      	b.n	800537e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d019      	beq.n	8005044 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005010:	4b27      	ldr	r3, [pc, #156]	; (80050b0 <HAL_RCC_OscConfig+0x32c>)
 8005012:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005014:	4b26      	ldr	r3, [pc, #152]	; (80050b0 <HAL_RCC_OscConfig+0x32c>)
 8005016:	2101      	movs	r1, #1
 8005018:	430a      	orrs	r2, r1
 800501a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800501c:	f7fe fcd0 	bl	80039c0 <HAL_GetTick>
 8005020:	0003      	movs	r3, r0
 8005022:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005024:	e008      	b.n	8005038 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005026:	f7fe fccb 	bl	80039c0 <HAL_GetTick>
 800502a:	0002      	movs	r2, r0
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	2b02      	cmp	r3, #2
 8005032:	d901      	bls.n	8005038 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e1a2      	b.n	800537e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005038:	4b1d      	ldr	r3, [pc, #116]	; (80050b0 <HAL_RCC_OscConfig+0x32c>)
 800503a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800503c:	2202      	movs	r2, #2
 800503e:	4013      	ands	r3, r2
 8005040:	d0f1      	beq.n	8005026 <HAL_RCC_OscConfig+0x2a2>
 8005042:	e018      	b.n	8005076 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005044:	4b1a      	ldr	r3, [pc, #104]	; (80050b0 <HAL_RCC_OscConfig+0x32c>)
 8005046:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005048:	4b19      	ldr	r3, [pc, #100]	; (80050b0 <HAL_RCC_OscConfig+0x32c>)
 800504a:	2101      	movs	r1, #1
 800504c:	438a      	bics	r2, r1
 800504e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005050:	f7fe fcb6 	bl	80039c0 <HAL_GetTick>
 8005054:	0003      	movs	r3, r0
 8005056:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005058:	e008      	b.n	800506c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800505a:	f7fe fcb1 	bl	80039c0 <HAL_GetTick>
 800505e:	0002      	movs	r2, r0
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	2b02      	cmp	r3, #2
 8005066:	d901      	bls.n	800506c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e188      	b.n	800537e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800506c:	4b10      	ldr	r3, [pc, #64]	; (80050b0 <HAL_RCC_OscConfig+0x32c>)
 800506e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005070:	2202      	movs	r2, #2
 8005072:	4013      	ands	r3, r2
 8005074:	d1f1      	bne.n	800505a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2204      	movs	r2, #4
 800507c:	4013      	ands	r3, r2
 800507e:	d100      	bne.n	8005082 <HAL_RCC_OscConfig+0x2fe>
 8005080:	e0c6      	b.n	8005210 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005082:	231f      	movs	r3, #31
 8005084:	18fb      	adds	r3, r7, r3
 8005086:	2200      	movs	r2, #0
 8005088:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800508a:	4b09      	ldr	r3, [pc, #36]	; (80050b0 <HAL_RCC_OscConfig+0x32c>)
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	2238      	movs	r2, #56	; 0x38
 8005090:	4013      	ands	r3, r2
 8005092:	2b20      	cmp	r3, #32
 8005094:	d11e      	bne.n	80050d4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005096:	4b06      	ldr	r3, [pc, #24]	; (80050b0 <HAL_RCC_OscConfig+0x32c>)
 8005098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800509a:	2202      	movs	r2, #2
 800509c:	4013      	ands	r3, r2
 800509e:	d100      	bne.n	80050a2 <HAL_RCC_OscConfig+0x31e>
 80050a0:	e0b6      	b.n	8005210 <HAL_RCC_OscConfig+0x48c>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d000      	beq.n	80050ac <HAL_RCC_OscConfig+0x328>
 80050aa:	e0b1      	b.n	8005210 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e166      	b.n	800537e <HAL_RCC_OscConfig+0x5fa>
 80050b0:	40021000 	.word	0x40021000
 80050b4:	fffeffff 	.word	0xfffeffff
 80050b8:	fffbffff 	.word	0xfffbffff
 80050bc:	ffff80ff 	.word	0xffff80ff
 80050c0:	ffffc7ff 	.word	0xffffc7ff
 80050c4:	00f42400 	.word	0x00f42400
 80050c8:	20000004 	.word	0x20000004
 80050cc:	20000008 	.word	0x20000008
 80050d0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80050d4:	4bac      	ldr	r3, [pc, #688]	; (8005388 <HAL_RCC_OscConfig+0x604>)
 80050d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050d8:	2380      	movs	r3, #128	; 0x80
 80050da:	055b      	lsls	r3, r3, #21
 80050dc:	4013      	ands	r3, r2
 80050de:	d101      	bne.n	80050e4 <HAL_RCC_OscConfig+0x360>
 80050e0:	2301      	movs	r3, #1
 80050e2:	e000      	b.n	80050e6 <HAL_RCC_OscConfig+0x362>
 80050e4:	2300      	movs	r3, #0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d011      	beq.n	800510e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80050ea:	4ba7      	ldr	r3, [pc, #668]	; (8005388 <HAL_RCC_OscConfig+0x604>)
 80050ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050ee:	4ba6      	ldr	r3, [pc, #664]	; (8005388 <HAL_RCC_OscConfig+0x604>)
 80050f0:	2180      	movs	r1, #128	; 0x80
 80050f2:	0549      	lsls	r1, r1, #21
 80050f4:	430a      	orrs	r2, r1
 80050f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80050f8:	4ba3      	ldr	r3, [pc, #652]	; (8005388 <HAL_RCC_OscConfig+0x604>)
 80050fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050fc:	2380      	movs	r3, #128	; 0x80
 80050fe:	055b      	lsls	r3, r3, #21
 8005100:	4013      	ands	r3, r2
 8005102:	60fb      	str	r3, [r7, #12]
 8005104:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005106:	231f      	movs	r3, #31
 8005108:	18fb      	adds	r3, r7, r3
 800510a:	2201      	movs	r2, #1
 800510c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800510e:	4b9f      	ldr	r3, [pc, #636]	; (800538c <HAL_RCC_OscConfig+0x608>)
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	2380      	movs	r3, #128	; 0x80
 8005114:	005b      	lsls	r3, r3, #1
 8005116:	4013      	ands	r3, r2
 8005118:	d11a      	bne.n	8005150 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800511a:	4b9c      	ldr	r3, [pc, #624]	; (800538c <HAL_RCC_OscConfig+0x608>)
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	4b9b      	ldr	r3, [pc, #620]	; (800538c <HAL_RCC_OscConfig+0x608>)
 8005120:	2180      	movs	r1, #128	; 0x80
 8005122:	0049      	lsls	r1, r1, #1
 8005124:	430a      	orrs	r2, r1
 8005126:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005128:	f7fe fc4a 	bl	80039c0 <HAL_GetTick>
 800512c:	0003      	movs	r3, r0
 800512e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005130:	e008      	b.n	8005144 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005132:	f7fe fc45 	bl	80039c0 <HAL_GetTick>
 8005136:	0002      	movs	r2, r0
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	2b02      	cmp	r3, #2
 800513e:	d901      	bls.n	8005144 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e11c      	b.n	800537e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005144:	4b91      	ldr	r3, [pc, #580]	; (800538c <HAL_RCC_OscConfig+0x608>)
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	2380      	movs	r3, #128	; 0x80
 800514a:	005b      	lsls	r3, r3, #1
 800514c:	4013      	ands	r3, r2
 800514e:	d0f0      	beq.n	8005132 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d106      	bne.n	8005166 <HAL_RCC_OscConfig+0x3e2>
 8005158:	4b8b      	ldr	r3, [pc, #556]	; (8005388 <HAL_RCC_OscConfig+0x604>)
 800515a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800515c:	4b8a      	ldr	r3, [pc, #552]	; (8005388 <HAL_RCC_OscConfig+0x604>)
 800515e:	2101      	movs	r1, #1
 8005160:	430a      	orrs	r2, r1
 8005162:	65da      	str	r2, [r3, #92]	; 0x5c
 8005164:	e01c      	b.n	80051a0 <HAL_RCC_OscConfig+0x41c>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	2b05      	cmp	r3, #5
 800516c:	d10c      	bne.n	8005188 <HAL_RCC_OscConfig+0x404>
 800516e:	4b86      	ldr	r3, [pc, #536]	; (8005388 <HAL_RCC_OscConfig+0x604>)
 8005170:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005172:	4b85      	ldr	r3, [pc, #532]	; (8005388 <HAL_RCC_OscConfig+0x604>)
 8005174:	2104      	movs	r1, #4
 8005176:	430a      	orrs	r2, r1
 8005178:	65da      	str	r2, [r3, #92]	; 0x5c
 800517a:	4b83      	ldr	r3, [pc, #524]	; (8005388 <HAL_RCC_OscConfig+0x604>)
 800517c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800517e:	4b82      	ldr	r3, [pc, #520]	; (8005388 <HAL_RCC_OscConfig+0x604>)
 8005180:	2101      	movs	r1, #1
 8005182:	430a      	orrs	r2, r1
 8005184:	65da      	str	r2, [r3, #92]	; 0x5c
 8005186:	e00b      	b.n	80051a0 <HAL_RCC_OscConfig+0x41c>
 8005188:	4b7f      	ldr	r3, [pc, #508]	; (8005388 <HAL_RCC_OscConfig+0x604>)
 800518a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800518c:	4b7e      	ldr	r3, [pc, #504]	; (8005388 <HAL_RCC_OscConfig+0x604>)
 800518e:	2101      	movs	r1, #1
 8005190:	438a      	bics	r2, r1
 8005192:	65da      	str	r2, [r3, #92]	; 0x5c
 8005194:	4b7c      	ldr	r3, [pc, #496]	; (8005388 <HAL_RCC_OscConfig+0x604>)
 8005196:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005198:	4b7b      	ldr	r3, [pc, #492]	; (8005388 <HAL_RCC_OscConfig+0x604>)
 800519a:	2104      	movs	r1, #4
 800519c:	438a      	bics	r2, r1
 800519e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d014      	beq.n	80051d2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a8:	f7fe fc0a 	bl	80039c0 <HAL_GetTick>
 80051ac:	0003      	movs	r3, r0
 80051ae:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051b0:	e009      	b.n	80051c6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051b2:	f7fe fc05 	bl	80039c0 <HAL_GetTick>
 80051b6:	0002      	movs	r2, r0
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	4a74      	ldr	r2, [pc, #464]	; (8005390 <HAL_RCC_OscConfig+0x60c>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d901      	bls.n	80051c6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e0db      	b.n	800537e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051c6:	4b70      	ldr	r3, [pc, #448]	; (8005388 <HAL_RCC_OscConfig+0x604>)
 80051c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ca:	2202      	movs	r2, #2
 80051cc:	4013      	ands	r3, r2
 80051ce:	d0f0      	beq.n	80051b2 <HAL_RCC_OscConfig+0x42e>
 80051d0:	e013      	b.n	80051fa <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d2:	f7fe fbf5 	bl	80039c0 <HAL_GetTick>
 80051d6:	0003      	movs	r3, r0
 80051d8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80051da:	e009      	b.n	80051f0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051dc:	f7fe fbf0 	bl	80039c0 <HAL_GetTick>
 80051e0:	0002      	movs	r2, r0
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	4a6a      	ldr	r2, [pc, #424]	; (8005390 <HAL_RCC_OscConfig+0x60c>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d901      	bls.n	80051f0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e0c6      	b.n	800537e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80051f0:	4b65      	ldr	r3, [pc, #404]	; (8005388 <HAL_RCC_OscConfig+0x604>)
 80051f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051f4:	2202      	movs	r2, #2
 80051f6:	4013      	ands	r3, r2
 80051f8:	d1f0      	bne.n	80051dc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80051fa:	231f      	movs	r3, #31
 80051fc:	18fb      	adds	r3, r7, r3
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d105      	bne.n	8005210 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005204:	4b60      	ldr	r3, [pc, #384]	; (8005388 <HAL_RCC_OscConfig+0x604>)
 8005206:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005208:	4b5f      	ldr	r3, [pc, #380]	; (8005388 <HAL_RCC_OscConfig+0x604>)
 800520a:	4962      	ldr	r1, [pc, #392]	; (8005394 <HAL_RCC_OscConfig+0x610>)
 800520c:	400a      	ands	r2, r1
 800520e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	69db      	ldr	r3, [r3, #28]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d100      	bne.n	800521a <HAL_RCC_OscConfig+0x496>
 8005218:	e0b0      	b.n	800537c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800521a:	4b5b      	ldr	r3, [pc, #364]	; (8005388 <HAL_RCC_OscConfig+0x604>)
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	2238      	movs	r2, #56	; 0x38
 8005220:	4013      	ands	r3, r2
 8005222:	2b10      	cmp	r3, #16
 8005224:	d100      	bne.n	8005228 <HAL_RCC_OscConfig+0x4a4>
 8005226:	e078      	b.n	800531a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	69db      	ldr	r3, [r3, #28]
 800522c:	2b02      	cmp	r3, #2
 800522e:	d153      	bne.n	80052d8 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005230:	4b55      	ldr	r3, [pc, #340]	; (8005388 <HAL_RCC_OscConfig+0x604>)
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	4b54      	ldr	r3, [pc, #336]	; (8005388 <HAL_RCC_OscConfig+0x604>)
 8005236:	4958      	ldr	r1, [pc, #352]	; (8005398 <HAL_RCC_OscConfig+0x614>)
 8005238:	400a      	ands	r2, r1
 800523a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800523c:	f7fe fbc0 	bl	80039c0 <HAL_GetTick>
 8005240:	0003      	movs	r3, r0
 8005242:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005244:	e008      	b.n	8005258 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005246:	f7fe fbbb 	bl	80039c0 <HAL_GetTick>
 800524a:	0002      	movs	r2, r0
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	2b02      	cmp	r3, #2
 8005252:	d901      	bls.n	8005258 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e092      	b.n	800537e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005258:	4b4b      	ldr	r3, [pc, #300]	; (8005388 <HAL_RCC_OscConfig+0x604>)
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	2380      	movs	r3, #128	; 0x80
 800525e:	049b      	lsls	r3, r3, #18
 8005260:	4013      	ands	r3, r2
 8005262:	d1f0      	bne.n	8005246 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005264:	4b48      	ldr	r3, [pc, #288]	; (8005388 <HAL_RCC_OscConfig+0x604>)
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	4a4c      	ldr	r2, [pc, #304]	; (800539c <HAL_RCC_OscConfig+0x618>)
 800526a:	4013      	ands	r3, r2
 800526c:	0019      	movs	r1, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a1a      	ldr	r2, [r3, #32]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005276:	431a      	orrs	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800527c:	021b      	lsls	r3, r3, #8
 800527e:	431a      	orrs	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005284:	431a      	orrs	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800528a:	431a      	orrs	r2, r3
 800528c:	4b3e      	ldr	r3, [pc, #248]	; (8005388 <HAL_RCC_OscConfig+0x604>)
 800528e:	430a      	orrs	r2, r1
 8005290:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005292:	4b3d      	ldr	r3, [pc, #244]	; (8005388 <HAL_RCC_OscConfig+0x604>)
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	4b3c      	ldr	r3, [pc, #240]	; (8005388 <HAL_RCC_OscConfig+0x604>)
 8005298:	2180      	movs	r1, #128	; 0x80
 800529a:	0449      	lsls	r1, r1, #17
 800529c:	430a      	orrs	r2, r1
 800529e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80052a0:	4b39      	ldr	r3, [pc, #228]	; (8005388 <HAL_RCC_OscConfig+0x604>)
 80052a2:	68da      	ldr	r2, [r3, #12]
 80052a4:	4b38      	ldr	r3, [pc, #224]	; (8005388 <HAL_RCC_OscConfig+0x604>)
 80052a6:	2180      	movs	r1, #128	; 0x80
 80052a8:	0549      	lsls	r1, r1, #21
 80052aa:	430a      	orrs	r2, r1
 80052ac:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ae:	f7fe fb87 	bl	80039c0 <HAL_GetTick>
 80052b2:	0003      	movs	r3, r0
 80052b4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052b6:	e008      	b.n	80052ca <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052b8:	f7fe fb82 	bl	80039c0 <HAL_GetTick>
 80052bc:	0002      	movs	r2, r0
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d901      	bls.n	80052ca <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e059      	b.n	800537e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052ca:	4b2f      	ldr	r3, [pc, #188]	; (8005388 <HAL_RCC_OscConfig+0x604>)
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	2380      	movs	r3, #128	; 0x80
 80052d0:	049b      	lsls	r3, r3, #18
 80052d2:	4013      	ands	r3, r2
 80052d4:	d0f0      	beq.n	80052b8 <HAL_RCC_OscConfig+0x534>
 80052d6:	e051      	b.n	800537c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052d8:	4b2b      	ldr	r3, [pc, #172]	; (8005388 <HAL_RCC_OscConfig+0x604>)
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	4b2a      	ldr	r3, [pc, #168]	; (8005388 <HAL_RCC_OscConfig+0x604>)
 80052de:	492e      	ldr	r1, [pc, #184]	; (8005398 <HAL_RCC_OscConfig+0x614>)
 80052e0:	400a      	ands	r2, r1
 80052e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e4:	f7fe fb6c 	bl	80039c0 <HAL_GetTick>
 80052e8:	0003      	movs	r3, r0
 80052ea:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052ec:	e008      	b.n	8005300 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052ee:	f7fe fb67 	bl	80039c0 <HAL_GetTick>
 80052f2:	0002      	movs	r2, r0
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	d901      	bls.n	8005300 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	e03e      	b.n	800537e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005300:	4b21      	ldr	r3, [pc, #132]	; (8005388 <HAL_RCC_OscConfig+0x604>)
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	2380      	movs	r3, #128	; 0x80
 8005306:	049b      	lsls	r3, r3, #18
 8005308:	4013      	ands	r3, r2
 800530a:	d1f0      	bne.n	80052ee <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800530c:	4b1e      	ldr	r3, [pc, #120]	; (8005388 <HAL_RCC_OscConfig+0x604>)
 800530e:	68da      	ldr	r2, [r3, #12]
 8005310:	4b1d      	ldr	r3, [pc, #116]	; (8005388 <HAL_RCC_OscConfig+0x604>)
 8005312:	4923      	ldr	r1, [pc, #140]	; (80053a0 <HAL_RCC_OscConfig+0x61c>)
 8005314:	400a      	ands	r2, r1
 8005316:	60da      	str	r2, [r3, #12]
 8005318:	e030      	b.n	800537c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	2b01      	cmp	r3, #1
 8005320:	d101      	bne.n	8005326 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e02b      	b.n	800537e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005326:	4b18      	ldr	r3, [pc, #96]	; (8005388 <HAL_RCC_OscConfig+0x604>)
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	2203      	movs	r2, #3
 8005330:	401a      	ands	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	429a      	cmp	r2, r3
 8005338:	d11e      	bne.n	8005378 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	2270      	movs	r2, #112	; 0x70
 800533e:	401a      	ands	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005344:	429a      	cmp	r2, r3
 8005346:	d117      	bne.n	8005378 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	23fe      	movs	r3, #254	; 0xfe
 800534c:	01db      	lsls	r3, r3, #7
 800534e:	401a      	ands	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005354:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005356:	429a      	cmp	r2, r3
 8005358:	d10e      	bne.n	8005378 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	23f8      	movs	r3, #248	; 0xf8
 800535e:	039b      	lsls	r3, r3, #14
 8005360:	401a      	ands	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005366:	429a      	cmp	r2, r3
 8005368:	d106      	bne.n	8005378 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	0f5b      	lsrs	r3, r3, #29
 800536e:	075a      	lsls	r2, r3, #29
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005374:	429a      	cmp	r2, r3
 8005376:	d001      	beq.n	800537c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e000      	b.n	800537e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	0018      	movs	r0, r3
 8005380:	46bd      	mov	sp, r7
 8005382:	b008      	add	sp, #32
 8005384:	bd80      	pop	{r7, pc}
 8005386:	46c0      	nop			; (mov r8, r8)
 8005388:	40021000 	.word	0x40021000
 800538c:	40007000 	.word	0x40007000
 8005390:	00001388 	.word	0x00001388
 8005394:	efffffff 	.word	0xefffffff
 8005398:	feffffff 	.word	0xfeffffff
 800539c:	1fc1808c 	.word	0x1fc1808c
 80053a0:	effefffc 	.word	0xeffefffc

080053a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d101      	bne.n	80053b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e0e9      	b.n	800558c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80053b8:	4b76      	ldr	r3, [pc, #472]	; (8005594 <HAL_RCC_ClockConfig+0x1f0>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2207      	movs	r2, #7
 80053be:	4013      	ands	r3, r2
 80053c0:	683a      	ldr	r2, [r7, #0]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d91e      	bls.n	8005404 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053c6:	4b73      	ldr	r3, [pc, #460]	; (8005594 <HAL_RCC_ClockConfig+0x1f0>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2207      	movs	r2, #7
 80053cc:	4393      	bics	r3, r2
 80053ce:	0019      	movs	r1, r3
 80053d0:	4b70      	ldr	r3, [pc, #448]	; (8005594 <HAL_RCC_ClockConfig+0x1f0>)
 80053d2:	683a      	ldr	r2, [r7, #0]
 80053d4:	430a      	orrs	r2, r1
 80053d6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80053d8:	f7fe faf2 	bl	80039c0 <HAL_GetTick>
 80053dc:	0003      	movs	r3, r0
 80053de:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80053e0:	e009      	b.n	80053f6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053e2:	f7fe faed 	bl	80039c0 <HAL_GetTick>
 80053e6:	0002      	movs	r2, r0
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	4a6a      	ldr	r2, [pc, #424]	; (8005598 <HAL_RCC_ClockConfig+0x1f4>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d901      	bls.n	80053f6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e0ca      	b.n	800558c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80053f6:	4b67      	ldr	r3, [pc, #412]	; (8005594 <HAL_RCC_ClockConfig+0x1f0>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2207      	movs	r2, #7
 80053fc:	4013      	ands	r3, r2
 80053fe:	683a      	ldr	r2, [r7, #0]
 8005400:	429a      	cmp	r2, r3
 8005402:	d1ee      	bne.n	80053e2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2202      	movs	r2, #2
 800540a:	4013      	ands	r3, r2
 800540c:	d015      	beq.n	800543a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2204      	movs	r2, #4
 8005414:	4013      	ands	r3, r2
 8005416:	d006      	beq.n	8005426 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005418:	4b60      	ldr	r3, [pc, #384]	; (800559c <HAL_RCC_ClockConfig+0x1f8>)
 800541a:	689a      	ldr	r2, [r3, #8]
 800541c:	4b5f      	ldr	r3, [pc, #380]	; (800559c <HAL_RCC_ClockConfig+0x1f8>)
 800541e:	21e0      	movs	r1, #224	; 0xe0
 8005420:	01c9      	lsls	r1, r1, #7
 8005422:	430a      	orrs	r2, r1
 8005424:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005426:	4b5d      	ldr	r3, [pc, #372]	; (800559c <HAL_RCC_ClockConfig+0x1f8>)
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	4a5d      	ldr	r2, [pc, #372]	; (80055a0 <HAL_RCC_ClockConfig+0x1fc>)
 800542c:	4013      	ands	r3, r2
 800542e:	0019      	movs	r1, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	689a      	ldr	r2, [r3, #8]
 8005434:	4b59      	ldr	r3, [pc, #356]	; (800559c <HAL_RCC_ClockConfig+0x1f8>)
 8005436:	430a      	orrs	r2, r1
 8005438:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2201      	movs	r2, #1
 8005440:	4013      	ands	r3, r2
 8005442:	d057      	beq.n	80054f4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d107      	bne.n	800545c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800544c:	4b53      	ldr	r3, [pc, #332]	; (800559c <HAL_RCC_ClockConfig+0x1f8>)
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	2380      	movs	r3, #128	; 0x80
 8005452:	029b      	lsls	r3, r3, #10
 8005454:	4013      	ands	r3, r2
 8005456:	d12b      	bne.n	80054b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e097      	b.n	800558c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	2b02      	cmp	r3, #2
 8005462:	d107      	bne.n	8005474 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005464:	4b4d      	ldr	r3, [pc, #308]	; (800559c <HAL_RCC_ClockConfig+0x1f8>)
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	2380      	movs	r3, #128	; 0x80
 800546a:	049b      	lsls	r3, r3, #18
 800546c:	4013      	ands	r3, r2
 800546e:	d11f      	bne.n	80054b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e08b      	b.n	800558c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d107      	bne.n	800548c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800547c:	4b47      	ldr	r3, [pc, #284]	; (800559c <HAL_RCC_ClockConfig+0x1f8>)
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	2380      	movs	r3, #128	; 0x80
 8005482:	00db      	lsls	r3, r3, #3
 8005484:	4013      	ands	r3, r2
 8005486:	d113      	bne.n	80054b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e07f      	b.n	800558c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	2b03      	cmp	r3, #3
 8005492:	d106      	bne.n	80054a2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005494:	4b41      	ldr	r3, [pc, #260]	; (800559c <HAL_RCC_ClockConfig+0x1f8>)
 8005496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005498:	2202      	movs	r2, #2
 800549a:	4013      	ands	r3, r2
 800549c:	d108      	bne.n	80054b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e074      	b.n	800558c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054a2:	4b3e      	ldr	r3, [pc, #248]	; (800559c <HAL_RCC_ClockConfig+0x1f8>)
 80054a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054a6:	2202      	movs	r2, #2
 80054a8:	4013      	ands	r3, r2
 80054aa:	d101      	bne.n	80054b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e06d      	b.n	800558c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80054b0:	4b3a      	ldr	r3, [pc, #232]	; (800559c <HAL_RCC_ClockConfig+0x1f8>)
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	2207      	movs	r2, #7
 80054b6:	4393      	bics	r3, r2
 80054b8:	0019      	movs	r1, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685a      	ldr	r2, [r3, #4]
 80054be:	4b37      	ldr	r3, [pc, #220]	; (800559c <HAL_RCC_ClockConfig+0x1f8>)
 80054c0:	430a      	orrs	r2, r1
 80054c2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054c4:	f7fe fa7c 	bl	80039c0 <HAL_GetTick>
 80054c8:	0003      	movs	r3, r0
 80054ca:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054cc:	e009      	b.n	80054e2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054ce:	f7fe fa77 	bl	80039c0 <HAL_GetTick>
 80054d2:	0002      	movs	r2, r0
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	4a2f      	ldr	r2, [pc, #188]	; (8005598 <HAL_RCC_ClockConfig+0x1f4>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d901      	bls.n	80054e2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e054      	b.n	800558c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054e2:	4b2e      	ldr	r3, [pc, #184]	; (800559c <HAL_RCC_ClockConfig+0x1f8>)
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	2238      	movs	r2, #56	; 0x38
 80054e8:	401a      	ands	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	00db      	lsls	r3, r3, #3
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d1ec      	bne.n	80054ce <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054f4:	4b27      	ldr	r3, [pc, #156]	; (8005594 <HAL_RCC_ClockConfig+0x1f0>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2207      	movs	r2, #7
 80054fa:	4013      	ands	r3, r2
 80054fc:	683a      	ldr	r2, [r7, #0]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d21e      	bcs.n	8005540 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005502:	4b24      	ldr	r3, [pc, #144]	; (8005594 <HAL_RCC_ClockConfig+0x1f0>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2207      	movs	r2, #7
 8005508:	4393      	bics	r3, r2
 800550a:	0019      	movs	r1, r3
 800550c:	4b21      	ldr	r3, [pc, #132]	; (8005594 <HAL_RCC_ClockConfig+0x1f0>)
 800550e:	683a      	ldr	r2, [r7, #0]
 8005510:	430a      	orrs	r2, r1
 8005512:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005514:	f7fe fa54 	bl	80039c0 <HAL_GetTick>
 8005518:	0003      	movs	r3, r0
 800551a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800551c:	e009      	b.n	8005532 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800551e:	f7fe fa4f 	bl	80039c0 <HAL_GetTick>
 8005522:	0002      	movs	r2, r0
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	4a1b      	ldr	r2, [pc, #108]	; (8005598 <HAL_RCC_ClockConfig+0x1f4>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d901      	bls.n	8005532 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e02c      	b.n	800558c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005532:	4b18      	ldr	r3, [pc, #96]	; (8005594 <HAL_RCC_ClockConfig+0x1f0>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2207      	movs	r2, #7
 8005538:	4013      	ands	r3, r2
 800553a:	683a      	ldr	r2, [r7, #0]
 800553c:	429a      	cmp	r2, r3
 800553e:	d1ee      	bne.n	800551e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2204      	movs	r2, #4
 8005546:	4013      	ands	r3, r2
 8005548:	d009      	beq.n	800555e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800554a:	4b14      	ldr	r3, [pc, #80]	; (800559c <HAL_RCC_ClockConfig+0x1f8>)
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	4a15      	ldr	r2, [pc, #84]	; (80055a4 <HAL_RCC_ClockConfig+0x200>)
 8005550:	4013      	ands	r3, r2
 8005552:	0019      	movs	r1, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	68da      	ldr	r2, [r3, #12]
 8005558:	4b10      	ldr	r3, [pc, #64]	; (800559c <HAL_RCC_ClockConfig+0x1f8>)
 800555a:	430a      	orrs	r2, r1
 800555c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800555e:	f000 f829 	bl	80055b4 <HAL_RCC_GetSysClockFreq>
 8005562:	0001      	movs	r1, r0
 8005564:	4b0d      	ldr	r3, [pc, #52]	; (800559c <HAL_RCC_ClockConfig+0x1f8>)
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	0a1b      	lsrs	r3, r3, #8
 800556a:	220f      	movs	r2, #15
 800556c:	401a      	ands	r2, r3
 800556e:	4b0e      	ldr	r3, [pc, #56]	; (80055a8 <HAL_RCC_ClockConfig+0x204>)
 8005570:	0092      	lsls	r2, r2, #2
 8005572:	58d3      	ldr	r3, [r2, r3]
 8005574:	221f      	movs	r2, #31
 8005576:	4013      	ands	r3, r2
 8005578:	000a      	movs	r2, r1
 800557a:	40da      	lsrs	r2, r3
 800557c:	4b0b      	ldr	r3, [pc, #44]	; (80055ac <HAL_RCC_ClockConfig+0x208>)
 800557e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005580:	4b0b      	ldr	r3, [pc, #44]	; (80055b0 <HAL_RCC_ClockConfig+0x20c>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	0018      	movs	r0, r3
 8005586:	f7fe f9bf 	bl	8003908 <HAL_InitTick>
 800558a:	0003      	movs	r3, r0
}
 800558c:	0018      	movs	r0, r3
 800558e:	46bd      	mov	sp, r7
 8005590:	b004      	add	sp, #16
 8005592:	bd80      	pop	{r7, pc}
 8005594:	40022000 	.word	0x40022000
 8005598:	00001388 	.word	0x00001388
 800559c:	40021000 	.word	0x40021000
 80055a0:	fffff0ff 	.word	0xfffff0ff
 80055a4:	ffff8fff 	.word	0xffff8fff
 80055a8:	08005854 	.word	0x08005854
 80055ac:	20000004 	.word	0x20000004
 80055b0:	20000008 	.word	0x20000008

080055b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b086      	sub	sp, #24
 80055b8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80055ba:	4b3c      	ldr	r3, [pc, #240]	; (80056ac <HAL_RCC_GetSysClockFreq+0xf8>)
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	2238      	movs	r2, #56	; 0x38
 80055c0:	4013      	ands	r3, r2
 80055c2:	d10f      	bne.n	80055e4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80055c4:	4b39      	ldr	r3, [pc, #228]	; (80056ac <HAL_RCC_GetSysClockFreq+0xf8>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	0adb      	lsrs	r3, r3, #11
 80055ca:	2207      	movs	r2, #7
 80055cc:	4013      	ands	r3, r2
 80055ce:	2201      	movs	r2, #1
 80055d0:	409a      	lsls	r2, r3
 80055d2:	0013      	movs	r3, r2
 80055d4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80055d6:	6839      	ldr	r1, [r7, #0]
 80055d8:	4835      	ldr	r0, [pc, #212]	; (80056b0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80055da:	f7fa fd91 	bl	8000100 <__udivsi3>
 80055de:	0003      	movs	r3, r0
 80055e0:	613b      	str	r3, [r7, #16]
 80055e2:	e05d      	b.n	80056a0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80055e4:	4b31      	ldr	r3, [pc, #196]	; (80056ac <HAL_RCC_GetSysClockFreq+0xf8>)
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	2238      	movs	r2, #56	; 0x38
 80055ea:	4013      	ands	r3, r2
 80055ec:	2b08      	cmp	r3, #8
 80055ee:	d102      	bne.n	80055f6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80055f0:	4b30      	ldr	r3, [pc, #192]	; (80056b4 <HAL_RCC_GetSysClockFreq+0x100>)
 80055f2:	613b      	str	r3, [r7, #16]
 80055f4:	e054      	b.n	80056a0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055f6:	4b2d      	ldr	r3, [pc, #180]	; (80056ac <HAL_RCC_GetSysClockFreq+0xf8>)
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	2238      	movs	r2, #56	; 0x38
 80055fc:	4013      	ands	r3, r2
 80055fe:	2b10      	cmp	r3, #16
 8005600:	d138      	bne.n	8005674 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005602:	4b2a      	ldr	r3, [pc, #168]	; (80056ac <HAL_RCC_GetSysClockFreq+0xf8>)
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	2203      	movs	r2, #3
 8005608:	4013      	ands	r3, r2
 800560a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800560c:	4b27      	ldr	r3, [pc, #156]	; (80056ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	091b      	lsrs	r3, r3, #4
 8005612:	2207      	movs	r2, #7
 8005614:	4013      	ands	r3, r2
 8005616:	3301      	adds	r3, #1
 8005618:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2b03      	cmp	r3, #3
 800561e:	d10d      	bne.n	800563c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005620:	68b9      	ldr	r1, [r7, #8]
 8005622:	4824      	ldr	r0, [pc, #144]	; (80056b4 <HAL_RCC_GetSysClockFreq+0x100>)
 8005624:	f7fa fd6c 	bl	8000100 <__udivsi3>
 8005628:	0003      	movs	r3, r0
 800562a:	0019      	movs	r1, r3
 800562c:	4b1f      	ldr	r3, [pc, #124]	; (80056ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	0a1b      	lsrs	r3, r3, #8
 8005632:	227f      	movs	r2, #127	; 0x7f
 8005634:	4013      	ands	r3, r2
 8005636:	434b      	muls	r3, r1
 8005638:	617b      	str	r3, [r7, #20]
        break;
 800563a:	e00d      	b.n	8005658 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800563c:	68b9      	ldr	r1, [r7, #8]
 800563e:	481c      	ldr	r0, [pc, #112]	; (80056b0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005640:	f7fa fd5e 	bl	8000100 <__udivsi3>
 8005644:	0003      	movs	r3, r0
 8005646:	0019      	movs	r1, r3
 8005648:	4b18      	ldr	r3, [pc, #96]	; (80056ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	0a1b      	lsrs	r3, r3, #8
 800564e:	227f      	movs	r2, #127	; 0x7f
 8005650:	4013      	ands	r3, r2
 8005652:	434b      	muls	r3, r1
 8005654:	617b      	str	r3, [r7, #20]
        break;
 8005656:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005658:	4b14      	ldr	r3, [pc, #80]	; (80056ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	0f5b      	lsrs	r3, r3, #29
 800565e:	2207      	movs	r2, #7
 8005660:	4013      	ands	r3, r2
 8005662:	3301      	adds	r3, #1
 8005664:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005666:	6879      	ldr	r1, [r7, #4]
 8005668:	6978      	ldr	r0, [r7, #20]
 800566a:	f7fa fd49 	bl	8000100 <__udivsi3>
 800566e:	0003      	movs	r3, r0
 8005670:	613b      	str	r3, [r7, #16]
 8005672:	e015      	b.n	80056a0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005674:	4b0d      	ldr	r3, [pc, #52]	; (80056ac <HAL_RCC_GetSysClockFreq+0xf8>)
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	2238      	movs	r2, #56	; 0x38
 800567a:	4013      	ands	r3, r2
 800567c:	2b20      	cmp	r3, #32
 800567e:	d103      	bne.n	8005688 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005680:	2380      	movs	r3, #128	; 0x80
 8005682:	021b      	lsls	r3, r3, #8
 8005684:	613b      	str	r3, [r7, #16]
 8005686:	e00b      	b.n	80056a0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005688:	4b08      	ldr	r3, [pc, #32]	; (80056ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	2238      	movs	r2, #56	; 0x38
 800568e:	4013      	ands	r3, r2
 8005690:	2b18      	cmp	r3, #24
 8005692:	d103      	bne.n	800569c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005694:	23fa      	movs	r3, #250	; 0xfa
 8005696:	01db      	lsls	r3, r3, #7
 8005698:	613b      	str	r3, [r7, #16]
 800569a:	e001      	b.n	80056a0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800569c:	2300      	movs	r3, #0
 800569e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80056a0:	693b      	ldr	r3, [r7, #16]
}
 80056a2:	0018      	movs	r0, r3
 80056a4:	46bd      	mov	sp, r7
 80056a6:	b006      	add	sp, #24
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	46c0      	nop			; (mov r8, r8)
 80056ac:	40021000 	.word	0x40021000
 80056b0:	00f42400 	.word	0x00f42400
 80056b4:	007a1200 	.word	0x007a1200

080056b8 <__libc_init_array>:
 80056b8:	b570      	push	{r4, r5, r6, lr}
 80056ba:	2600      	movs	r6, #0
 80056bc:	4d0c      	ldr	r5, [pc, #48]	; (80056f0 <__libc_init_array+0x38>)
 80056be:	4c0d      	ldr	r4, [pc, #52]	; (80056f4 <__libc_init_array+0x3c>)
 80056c0:	1b64      	subs	r4, r4, r5
 80056c2:	10a4      	asrs	r4, r4, #2
 80056c4:	42a6      	cmp	r6, r4
 80056c6:	d109      	bne.n	80056dc <__libc_init_array+0x24>
 80056c8:	2600      	movs	r6, #0
 80056ca:	f000 f821 	bl	8005710 <_init>
 80056ce:	4d0a      	ldr	r5, [pc, #40]	; (80056f8 <__libc_init_array+0x40>)
 80056d0:	4c0a      	ldr	r4, [pc, #40]	; (80056fc <__libc_init_array+0x44>)
 80056d2:	1b64      	subs	r4, r4, r5
 80056d4:	10a4      	asrs	r4, r4, #2
 80056d6:	42a6      	cmp	r6, r4
 80056d8:	d105      	bne.n	80056e6 <__libc_init_array+0x2e>
 80056da:	bd70      	pop	{r4, r5, r6, pc}
 80056dc:	00b3      	lsls	r3, r6, #2
 80056de:	58eb      	ldr	r3, [r5, r3]
 80056e0:	4798      	blx	r3
 80056e2:	3601      	adds	r6, #1
 80056e4:	e7ee      	b.n	80056c4 <__libc_init_array+0xc>
 80056e6:	00b3      	lsls	r3, r6, #2
 80056e8:	58eb      	ldr	r3, [r5, r3]
 80056ea:	4798      	blx	r3
 80056ec:	3601      	adds	r6, #1
 80056ee:	e7f2      	b.n	80056d6 <__libc_init_array+0x1e>
 80056f0:	08005894 	.word	0x08005894
 80056f4:	08005894 	.word	0x08005894
 80056f8:	08005894 	.word	0x08005894
 80056fc:	08005898 	.word	0x08005898

08005700 <memset>:
 8005700:	0003      	movs	r3, r0
 8005702:	1882      	adds	r2, r0, r2
 8005704:	4293      	cmp	r3, r2
 8005706:	d100      	bne.n	800570a <memset+0xa>
 8005708:	4770      	bx	lr
 800570a:	7019      	strb	r1, [r3, #0]
 800570c:	3301      	adds	r3, #1
 800570e:	e7f9      	b.n	8005704 <memset+0x4>

08005710 <_init>:
 8005710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005712:	46c0      	nop			; (mov r8, r8)
 8005714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005716:	bc08      	pop	{r3}
 8005718:	469e      	mov	lr, r3
 800571a:	4770      	bx	lr

0800571c <_fini>:
 800571c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800571e:	46c0      	nop			; (mov r8, r8)
 8005720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005722:	bc08      	pop	{r3}
 8005724:	469e      	mov	lr, r3
 8005726:	4770      	bx	lr
