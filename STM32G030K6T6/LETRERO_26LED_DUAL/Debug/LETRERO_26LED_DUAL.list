
LETRERO_26LED_DUAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057d0  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08005888  08005888  00015888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005988  08005988  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005988  08005988  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005988  08005988  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005988  08005988  00015988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800598c  0800598c  0001598c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005990  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000010  080059a0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  080059a0  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   000072e6  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000179f  00000000  00000000  00027361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007a8  00000000  00000000  00028b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005b3  00000000  00000000  000292a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001427e  00000000  00000000  0002985b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000892c  00000000  00000000  0003dad9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000807e9  00000000  00000000  00046405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001e08  00000000  00000000  000c6bf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000c89f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000010 	.word	0x20000010
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08005870 	.word	0x08005870

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000014 	.word	0x20000014
 80000fc:	08005870 	.word	0x08005870

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <__aeabi_f2uiz>:
 8000218:	219e      	movs	r1, #158	; 0x9e
 800021a:	b510      	push	{r4, lr}
 800021c:	05c9      	lsls	r1, r1, #23
 800021e:	1c04      	adds	r4, r0, #0
 8000220:	f001 fdc2 	bl	8001da8 <__aeabi_fcmpge>
 8000224:	2800      	cmp	r0, #0
 8000226:	d103      	bne.n	8000230 <__aeabi_f2uiz+0x18>
 8000228:	1c20      	adds	r0, r4, #0
 800022a:	f000 fdd3 	bl	8000dd4 <__aeabi_f2iz>
 800022e:	bd10      	pop	{r4, pc}
 8000230:	219e      	movs	r1, #158	; 0x9e
 8000232:	1c20      	adds	r0, r4, #0
 8000234:	05c9      	lsls	r1, r1, #23
 8000236:	f000 fc2d 	bl	8000a94 <__aeabi_fsub>
 800023a:	f000 fdcb 	bl	8000dd4 <__aeabi_f2iz>
 800023e:	2380      	movs	r3, #128	; 0x80
 8000240:	061b      	lsls	r3, r3, #24
 8000242:	469c      	mov	ip, r3
 8000244:	4460      	add	r0, ip
 8000246:	e7f2      	b.n	800022e <__aeabi_f2uiz+0x16>

08000248 <__aeabi_d2uiz>:
 8000248:	b570      	push	{r4, r5, r6, lr}
 800024a:	2200      	movs	r2, #0
 800024c:	4b0c      	ldr	r3, [pc, #48]	; (8000280 <__aeabi_d2uiz+0x38>)
 800024e:	0004      	movs	r4, r0
 8000250:	000d      	movs	r5, r1
 8000252:	f001 fd6f 	bl	8001d34 <__aeabi_dcmpge>
 8000256:	2800      	cmp	r0, #0
 8000258:	d104      	bne.n	8000264 <__aeabi_d2uiz+0x1c>
 800025a:	0020      	movs	r0, r4
 800025c:	0029      	movs	r1, r5
 800025e:	f001 fcb7 	bl	8001bd0 <__aeabi_d2iz>
 8000262:	bd70      	pop	{r4, r5, r6, pc}
 8000264:	4b06      	ldr	r3, [pc, #24]	; (8000280 <__aeabi_d2uiz+0x38>)
 8000266:	2200      	movs	r2, #0
 8000268:	0020      	movs	r0, r4
 800026a:	0029      	movs	r1, r5
 800026c:	f001 f92e 	bl	80014cc <__aeabi_dsub>
 8000270:	f001 fcae 	bl	8001bd0 <__aeabi_d2iz>
 8000274:	2380      	movs	r3, #128	; 0x80
 8000276:	061b      	lsls	r3, r3, #24
 8000278:	469c      	mov	ip, r3
 800027a:	4460      	add	r0, ip
 800027c:	e7f1      	b.n	8000262 <__aeabi_d2uiz+0x1a>
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	41e00000 	.word	0x41e00000

08000284 <__aeabi_fadd>:
 8000284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000286:	4647      	mov	r7, r8
 8000288:	46ce      	mov	lr, r9
 800028a:	024a      	lsls	r2, r1, #9
 800028c:	0243      	lsls	r3, r0, #9
 800028e:	0045      	lsls	r5, r0, #1
 8000290:	0fc4      	lsrs	r4, r0, #31
 8000292:	0a50      	lsrs	r0, r2, #9
 8000294:	4680      	mov	r8, r0
 8000296:	0048      	lsls	r0, r1, #1
 8000298:	0a5b      	lsrs	r3, r3, #9
 800029a:	0e00      	lsrs	r0, r0, #24
 800029c:	0992      	lsrs	r2, r2, #6
 800029e:	4694      	mov	ip, r2
 80002a0:	b580      	push	{r7, lr}
 80002a2:	001e      	movs	r6, r3
 80002a4:	4681      	mov	r9, r0
 80002a6:	0002      	movs	r2, r0
 80002a8:	0e2d      	lsrs	r5, r5, #24
 80002aa:	00df      	lsls	r7, r3, #3
 80002ac:	0fc9      	lsrs	r1, r1, #31
 80002ae:	428c      	cmp	r4, r1
 80002b0:	d024      	beq.n	80002fc <__aeabi_fadd+0x78>
 80002b2:	1a28      	subs	r0, r5, r0
 80002b4:	2800      	cmp	r0, #0
 80002b6:	dd0e      	ble.n	80002d6 <__aeabi_fadd+0x52>
 80002b8:	2a00      	cmp	r2, #0
 80002ba:	d13e      	bne.n	800033a <__aeabi_fadd+0xb6>
 80002bc:	4662      	mov	r2, ip
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d100      	bne.n	80002c4 <__aeabi_fadd+0x40>
 80002c2:	e0fd      	b.n	80004c0 <__aeabi_fadd+0x23c>
 80002c4:	1e42      	subs	r2, r0, #1
 80002c6:	2801      	cmp	r0, #1
 80002c8:	d100      	bne.n	80002cc <__aeabi_fadd+0x48>
 80002ca:	e137      	b.n	800053c <__aeabi_fadd+0x2b8>
 80002cc:	28ff      	cmp	r0, #255	; 0xff
 80002ce:	d100      	bne.n	80002d2 <__aeabi_fadd+0x4e>
 80002d0:	e0a9      	b.n	8000426 <__aeabi_fadd+0x1a2>
 80002d2:	0010      	movs	r0, r2
 80002d4:	e039      	b.n	800034a <__aeabi_fadd+0xc6>
 80002d6:	2800      	cmp	r0, #0
 80002d8:	d063      	beq.n	80003a2 <__aeabi_fadd+0x11e>
 80002da:	464b      	mov	r3, r9
 80002dc:	1b52      	subs	r2, r2, r5
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d000      	beq.n	80002e4 <__aeabi_fadd+0x60>
 80002e2:	e0e0      	b.n	80004a6 <__aeabi_fadd+0x222>
 80002e4:	2f00      	cmp	r7, #0
 80002e6:	d100      	bne.n	80002ea <__aeabi_fadd+0x66>
 80002e8:	e0ce      	b.n	8000488 <__aeabi_fadd+0x204>
 80002ea:	1e53      	subs	r3, r2, #1
 80002ec:	2a01      	cmp	r2, #1
 80002ee:	d100      	bne.n	80002f2 <__aeabi_fadd+0x6e>
 80002f0:	e155      	b.n	800059e <__aeabi_fadd+0x31a>
 80002f2:	2aff      	cmp	r2, #255	; 0xff
 80002f4:	d100      	bne.n	80002f8 <__aeabi_fadd+0x74>
 80002f6:	e094      	b.n	8000422 <__aeabi_fadd+0x19e>
 80002f8:	001a      	movs	r2, r3
 80002fa:	e0d9      	b.n	80004b0 <__aeabi_fadd+0x22c>
 80002fc:	1a2a      	subs	r2, r5, r0
 80002fe:	2a00      	cmp	r2, #0
 8000300:	dc00      	bgt.n	8000304 <__aeabi_fadd+0x80>
 8000302:	e099      	b.n	8000438 <__aeabi_fadd+0x1b4>
 8000304:	2800      	cmp	r0, #0
 8000306:	d062      	beq.n	80003ce <__aeabi_fadd+0x14a>
 8000308:	2dff      	cmp	r5, #255	; 0xff
 800030a:	d100      	bne.n	800030e <__aeabi_fadd+0x8a>
 800030c:	e08b      	b.n	8000426 <__aeabi_fadd+0x1a2>
 800030e:	2380      	movs	r3, #128	; 0x80
 8000310:	4661      	mov	r1, ip
 8000312:	04db      	lsls	r3, r3, #19
 8000314:	4319      	orrs	r1, r3
 8000316:	468c      	mov	ip, r1
 8000318:	2a1b      	cmp	r2, #27
 800031a:	dc00      	bgt.n	800031e <__aeabi_fadd+0x9a>
 800031c:	e0d2      	b.n	80004c4 <__aeabi_fadd+0x240>
 800031e:	2301      	movs	r3, #1
 8000320:	19db      	adds	r3, r3, r7
 8000322:	015a      	lsls	r2, r3, #5
 8000324:	d56a      	bpl.n	80003fc <__aeabi_fadd+0x178>
 8000326:	3501      	adds	r5, #1
 8000328:	2dff      	cmp	r5, #255	; 0xff
 800032a:	d05b      	beq.n	80003e4 <__aeabi_fadd+0x160>
 800032c:	2201      	movs	r2, #1
 800032e:	49a3      	ldr	r1, [pc, #652]	; (80005bc <__aeabi_fadd+0x338>)
 8000330:	401a      	ands	r2, r3
 8000332:	085b      	lsrs	r3, r3, #1
 8000334:	400b      	ands	r3, r1
 8000336:	4313      	orrs	r3, r2
 8000338:	e01c      	b.n	8000374 <__aeabi_fadd+0xf0>
 800033a:	2dff      	cmp	r5, #255	; 0xff
 800033c:	d100      	bne.n	8000340 <__aeabi_fadd+0xbc>
 800033e:	e072      	b.n	8000426 <__aeabi_fadd+0x1a2>
 8000340:	2380      	movs	r3, #128	; 0x80
 8000342:	4662      	mov	r2, ip
 8000344:	04db      	lsls	r3, r3, #19
 8000346:	431a      	orrs	r2, r3
 8000348:	4694      	mov	ip, r2
 800034a:	281b      	cmp	r0, #27
 800034c:	dc00      	bgt.n	8000350 <__aeabi_fadd+0xcc>
 800034e:	e090      	b.n	8000472 <__aeabi_fadd+0x1ee>
 8000350:	2301      	movs	r3, #1
 8000352:	1afb      	subs	r3, r7, r3
 8000354:	015a      	lsls	r2, r3, #5
 8000356:	d551      	bpl.n	80003fc <__aeabi_fadd+0x178>
 8000358:	019b      	lsls	r3, r3, #6
 800035a:	099e      	lsrs	r6, r3, #6
 800035c:	0030      	movs	r0, r6
 800035e:	f001 fd2d 	bl	8001dbc <__clzsi2>
 8000362:	0033      	movs	r3, r6
 8000364:	3805      	subs	r0, #5
 8000366:	4083      	lsls	r3, r0
 8000368:	4285      	cmp	r5, r0
 800036a:	dc00      	bgt.n	800036e <__aeabi_fadd+0xea>
 800036c:	e075      	b.n	800045a <__aeabi_fadd+0x1d6>
 800036e:	4a94      	ldr	r2, [pc, #592]	; (80005c0 <__aeabi_fadd+0x33c>)
 8000370:	1a2d      	subs	r5, r5, r0
 8000372:	4013      	ands	r3, r2
 8000374:	075a      	lsls	r2, r3, #29
 8000376:	d004      	beq.n	8000382 <__aeabi_fadd+0xfe>
 8000378:	220f      	movs	r2, #15
 800037a:	401a      	ands	r2, r3
 800037c:	2a04      	cmp	r2, #4
 800037e:	d000      	beq.n	8000382 <__aeabi_fadd+0xfe>
 8000380:	3304      	adds	r3, #4
 8000382:	015a      	lsls	r2, r3, #5
 8000384:	d53c      	bpl.n	8000400 <__aeabi_fadd+0x17c>
 8000386:	1c68      	adds	r0, r5, #1
 8000388:	2dfe      	cmp	r5, #254	; 0xfe
 800038a:	d02b      	beq.n	80003e4 <__aeabi_fadd+0x160>
 800038c:	019b      	lsls	r3, r3, #6
 800038e:	0a5e      	lsrs	r6, r3, #9
 8000390:	b2c0      	uxtb	r0, r0
 8000392:	05c0      	lsls	r0, r0, #23
 8000394:	4330      	orrs	r0, r6
 8000396:	07e4      	lsls	r4, r4, #31
 8000398:	4320      	orrs	r0, r4
 800039a:	bcc0      	pop	{r6, r7}
 800039c:	46b9      	mov	r9, r7
 800039e:	46b0      	mov	r8, r6
 80003a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80003a2:	20fe      	movs	r0, #254	; 0xfe
 80003a4:	1c6a      	adds	r2, r5, #1
 80003a6:	4210      	tst	r0, r2
 80003a8:	d172      	bne.n	8000490 <__aeabi_fadd+0x20c>
 80003aa:	2d00      	cmp	r5, #0
 80003ac:	d000      	beq.n	80003b0 <__aeabi_fadd+0x12c>
 80003ae:	e0ae      	b.n	800050e <__aeabi_fadd+0x28a>
 80003b0:	2f00      	cmp	r7, #0
 80003b2:	d100      	bne.n	80003b6 <__aeabi_fadd+0x132>
 80003b4:	e0ec      	b.n	8000590 <__aeabi_fadd+0x30c>
 80003b6:	4663      	mov	r3, ip
 80003b8:	2000      	movs	r0, #0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d0e9      	beq.n	8000392 <__aeabi_fadd+0x10e>
 80003be:	1afb      	subs	r3, r7, r3
 80003c0:	015a      	lsls	r2, r3, #5
 80003c2:	d400      	bmi.n	80003c6 <__aeabi_fadd+0x142>
 80003c4:	e0f3      	b.n	80005ae <__aeabi_fadd+0x32a>
 80003c6:	4663      	mov	r3, ip
 80003c8:	000c      	movs	r4, r1
 80003ca:	1bdb      	subs	r3, r3, r7
 80003cc:	e7d2      	b.n	8000374 <__aeabi_fadd+0xf0>
 80003ce:	4661      	mov	r1, ip
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d05b      	beq.n	800048c <__aeabi_fadd+0x208>
 80003d4:	1e51      	subs	r1, r2, #1
 80003d6:	2a01      	cmp	r2, #1
 80003d8:	d100      	bne.n	80003dc <__aeabi_fadd+0x158>
 80003da:	e0a7      	b.n	800052c <__aeabi_fadd+0x2a8>
 80003dc:	2aff      	cmp	r2, #255	; 0xff
 80003de:	d022      	beq.n	8000426 <__aeabi_fadd+0x1a2>
 80003e0:	000a      	movs	r2, r1
 80003e2:	e799      	b.n	8000318 <__aeabi_fadd+0x94>
 80003e4:	20ff      	movs	r0, #255	; 0xff
 80003e6:	2600      	movs	r6, #0
 80003e8:	e7d3      	b.n	8000392 <__aeabi_fadd+0x10e>
 80003ea:	21fe      	movs	r1, #254	; 0xfe
 80003ec:	1c6a      	adds	r2, r5, #1
 80003ee:	4211      	tst	r1, r2
 80003f0:	d073      	beq.n	80004da <__aeabi_fadd+0x256>
 80003f2:	2aff      	cmp	r2, #255	; 0xff
 80003f4:	d0f6      	beq.n	80003e4 <__aeabi_fadd+0x160>
 80003f6:	0015      	movs	r5, r2
 80003f8:	4467      	add	r7, ip
 80003fa:	087b      	lsrs	r3, r7, #1
 80003fc:	075a      	lsls	r2, r3, #29
 80003fe:	d1bb      	bne.n	8000378 <__aeabi_fadd+0xf4>
 8000400:	08db      	lsrs	r3, r3, #3
 8000402:	2dff      	cmp	r5, #255	; 0xff
 8000404:	d00f      	beq.n	8000426 <__aeabi_fadd+0x1a2>
 8000406:	025b      	lsls	r3, r3, #9
 8000408:	0a5e      	lsrs	r6, r3, #9
 800040a:	b2e8      	uxtb	r0, r5
 800040c:	e7c1      	b.n	8000392 <__aeabi_fadd+0x10e>
 800040e:	4662      	mov	r2, ip
 8000410:	2a00      	cmp	r2, #0
 8000412:	d008      	beq.n	8000426 <__aeabi_fadd+0x1a2>
 8000414:	2280      	movs	r2, #128	; 0x80
 8000416:	03d2      	lsls	r2, r2, #15
 8000418:	4213      	tst	r3, r2
 800041a:	d004      	beq.n	8000426 <__aeabi_fadd+0x1a2>
 800041c:	4640      	mov	r0, r8
 800041e:	4210      	tst	r0, r2
 8000420:	d101      	bne.n	8000426 <__aeabi_fadd+0x1a2>
 8000422:	000c      	movs	r4, r1
 8000424:	4643      	mov	r3, r8
 8000426:	2b00      	cmp	r3, #0
 8000428:	d0dc      	beq.n	80003e4 <__aeabi_fadd+0x160>
 800042a:	2680      	movs	r6, #128	; 0x80
 800042c:	03f6      	lsls	r6, r6, #15
 800042e:	431e      	orrs	r6, r3
 8000430:	0276      	lsls	r6, r6, #9
 8000432:	20ff      	movs	r0, #255	; 0xff
 8000434:	0a76      	lsrs	r6, r6, #9
 8000436:	e7ac      	b.n	8000392 <__aeabi_fadd+0x10e>
 8000438:	2a00      	cmp	r2, #0
 800043a:	d0d6      	beq.n	80003ea <__aeabi_fadd+0x166>
 800043c:	1b42      	subs	r2, r0, r5
 800043e:	2d00      	cmp	r5, #0
 8000440:	d05c      	beq.n	80004fc <__aeabi_fadd+0x278>
 8000442:	28ff      	cmp	r0, #255	; 0xff
 8000444:	d0ee      	beq.n	8000424 <__aeabi_fadd+0x1a0>
 8000446:	2380      	movs	r3, #128	; 0x80
 8000448:	04db      	lsls	r3, r3, #19
 800044a:	431f      	orrs	r7, r3
 800044c:	2a1b      	cmp	r2, #27
 800044e:	dc00      	bgt.n	8000452 <__aeabi_fadd+0x1ce>
 8000450:	e082      	b.n	8000558 <__aeabi_fadd+0x2d4>
 8000452:	2301      	movs	r3, #1
 8000454:	464d      	mov	r5, r9
 8000456:	4463      	add	r3, ip
 8000458:	e763      	b.n	8000322 <__aeabi_fadd+0x9e>
 800045a:	2220      	movs	r2, #32
 800045c:	1b40      	subs	r0, r0, r5
 800045e:	3001      	adds	r0, #1
 8000460:	1a12      	subs	r2, r2, r0
 8000462:	0019      	movs	r1, r3
 8000464:	4093      	lsls	r3, r2
 8000466:	40c1      	lsrs	r1, r0
 8000468:	1e5a      	subs	r2, r3, #1
 800046a:	4193      	sbcs	r3, r2
 800046c:	2500      	movs	r5, #0
 800046e:	430b      	orrs	r3, r1
 8000470:	e780      	b.n	8000374 <__aeabi_fadd+0xf0>
 8000472:	2320      	movs	r3, #32
 8000474:	4661      	mov	r1, ip
 8000476:	1a1b      	subs	r3, r3, r0
 8000478:	4099      	lsls	r1, r3
 800047a:	4662      	mov	r2, ip
 800047c:	000b      	movs	r3, r1
 800047e:	40c2      	lsrs	r2, r0
 8000480:	1e59      	subs	r1, r3, #1
 8000482:	418b      	sbcs	r3, r1
 8000484:	4313      	orrs	r3, r2
 8000486:	e764      	b.n	8000352 <__aeabi_fadd+0xce>
 8000488:	000c      	movs	r4, r1
 800048a:	4643      	mov	r3, r8
 800048c:	0015      	movs	r5, r2
 800048e:	e7b8      	b.n	8000402 <__aeabi_fadd+0x17e>
 8000490:	4663      	mov	r3, ip
 8000492:	1afe      	subs	r6, r7, r3
 8000494:	0173      	lsls	r3, r6, #5
 8000496:	d445      	bmi.n	8000524 <__aeabi_fadd+0x2a0>
 8000498:	2e00      	cmp	r6, #0
 800049a:	d000      	beq.n	800049e <__aeabi_fadd+0x21a>
 800049c:	e75e      	b.n	800035c <__aeabi_fadd+0xd8>
 800049e:	2400      	movs	r4, #0
 80004a0:	2000      	movs	r0, #0
 80004a2:	2600      	movs	r6, #0
 80004a4:	e775      	b.n	8000392 <__aeabi_fadd+0x10e>
 80004a6:	2bff      	cmp	r3, #255	; 0xff
 80004a8:	d0bb      	beq.n	8000422 <__aeabi_fadd+0x19e>
 80004aa:	2380      	movs	r3, #128	; 0x80
 80004ac:	04db      	lsls	r3, r3, #19
 80004ae:	431f      	orrs	r7, r3
 80004b0:	2a1b      	cmp	r2, #27
 80004b2:	dd47      	ble.n	8000544 <__aeabi_fadd+0x2c0>
 80004b4:	2301      	movs	r3, #1
 80004b6:	4662      	mov	r2, ip
 80004b8:	000c      	movs	r4, r1
 80004ba:	464d      	mov	r5, r9
 80004bc:	1ad3      	subs	r3, r2, r3
 80004be:	e749      	b.n	8000354 <__aeabi_fadd+0xd0>
 80004c0:	0005      	movs	r5, r0
 80004c2:	e79e      	b.n	8000402 <__aeabi_fadd+0x17e>
 80004c4:	4661      	mov	r1, ip
 80004c6:	2320      	movs	r3, #32
 80004c8:	40d1      	lsrs	r1, r2
 80004ca:	1a9b      	subs	r3, r3, r2
 80004cc:	4662      	mov	r2, ip
 80004ce:	409a      	lsls	r2, r3
 80004d0:	0013      	movs	r3, r2
 80004d2:	1e5a      	subs	r2, r3, #1
 80004d4:	4193      	sbcs	r3, r2
 80004d6:	430b      	orrs	r3, r1
 80004d8:	e722      	b.n	8000320 <__aeabi_fadd+0x9c>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	d146      	bne.n	800056c <__aeabi_fadd+0x2e8>
 80004de:	2f00      	cmp	r7, #0
 80004e0:	d062      	beq.n	80005a8 <__aeabi_fadd+0x324>
 80004e2:	4663      	mov	r3, ip
 80004e4:	2000      	movs	r0, #0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d100      	bne.n	80004ec <__aeabi_fadd+0x268>
 80004ea:	e752      	b.n	8000392 <__aeabi_fadd+0x10e>
 80004ec:	003b      	movs	r3, r7
 80004ee:	4463      	add	r3, ip
 80004f0:	015a      	lsls	r2, r3, #5
 80004f2:	d583      	bpl.n	80003fc <__aeabi_fadd+0x178>
 80004f4:	4a32      	ldr	r2, [pc, #200]	; (80005c0 <__aeabi_fadd+0x33c>)
 80004f6:	3501      	adds	r5, #1
 80004f8:	4013      	ands	r3, r2
 80004fa:	e77f      	b.n	80003fc <__aeabi_fadd+0x178>
 80004fc:	2f00      	cmp	r7, #0
 80004fe:	d0c4      	beq.n	800048a <__aeabi_fadd+0x206>
 8000500:	1e53      	subs	r3, r2, #1
 8000502:	2a01      	cmp	r2, #1
 8000504:	d012      	beq.n	800052c <__aeabi_fadd+0x2a8>
 8000506:	2aff      	cmp	r2, #255	; 0xff
 8000508:	d08c      	beq.n	8000424 <__aeabi_fadd+0x1a0>
 800050a:	001a      	movs	r2, r3
 800050c:	e79e      	b.n	800044c <__aeabi_fadd+0x1c8>
 800050e:	2f00      	cmp	r7, #0
 8000510:	d000      	beq.n	8000514 <__aeabi_fadd+0x290>
 8000512:	e77c      	b.n	800040e <__aeabi_fadd+0x18a>
 8000514:	4663      	mov	r3, ip
 8000516:	2b00      	cmp	r3, #0
 8000518:	d183      	bne.n	8000422 <__aeabi_fadd+0x19e>
 800051a:	2680      	movs	r6, #128	; 0x80
 800051c:	2400      	movs	r4, #0
 800051e:	20ff      	movs	r0, #255	; 0xff
 8000520:	03f6      	lsls	r6, r6, #15
 8000522:	e736      	b.n	8000392 <__aeabi_fadd+0x10e>
 8000524:	4663      	mov	r3, ip
 8000526:	000c      	movs	r4, r1
 8000528:	1bde      	subs	r6, r3, r7
 800052a:	e717      	b.n	800035c <__aeabi_fadd+0xd8>
 800052c:	003b      	movs	r3, r7
 800052e:	4463      	add	r3, ip
 8000530:	2501      	movs	r5, #1
 8000532:	015a      	lsls	r2, r3, #5
 8000534:	d400      	bmi.n	8000538 <__aeabi_fadd+0x2b4>
 8000536:	e761      	b.n	80003fc <__aeabi_fadd+0x178>
 8000538:	2502      	movs	r5, #2
 800053a:	e6f7      	b.n	800032c <__aeabi_fadd+0xa8>
 800053c:	4663      	mov	r3, ip
 800053e:	2501      	movs	r5, #1
 8000540:	1afb      	subs	r3, r7, r3
 8000542:	e707      	b.n	8000354 <__aeabi_fadd+0xd0>
 8000544:	2320      	movs	r3, #32
 8000546:	1a9b      	subs	r3, r3, r2
 8000548:	0038      	movs	r0, r7
 800054a:	409f      	lsls	r7, r3
 800054c:	003b      	movs	r3, r7
 800054e:	40d0      	lsrs	r0, r2
 8000550:	1e5a      	subs	r2, r3, #1
 8000552:	4193      	sbcs	r3, r2
 8000554:	4303      	orrs	r3, r0
 8000556:	e7ae      	b.n	80004b6 <__aeabi_fadd+0x232>
 8000558:	2320      	movs	r3, #32
 800055a:	1a9b      	subs	r3, r3, r2
 800055c:	0039      	movs	r1, r7
 800055e:	409f      	lsls	r7, r3
 8000560:	003b      	movs	r3, r7
 8000562:	40d1      	lsrs	r1, r2
 8000564:	1e5a      	subs	r2, r3, #1
 8000566:	4193      	sbcs	r3, r2
 8000568:	430b      	orrs	r3, r1
 800056a:	e773      	b.n	8000454 <__aeabi_fadd+0x1d0>
 800056c:	2f00      	cmp	r7, #0
 800056e:	d100      	bne.n	8000572 <__aeabi_fadd+0x2ee>
 8000570:	e758      	b.n	8000424 <__aeabi_fadd+0x1a0>
 8000572:	4662      	mov	r2, ip
 8000574:	2a00      	cmp	r2, #0
 8000576:	d100      	bne.n	800057a <__aeabi_fadd+0x2f6>
 8000578:	e755      	b.n	8000426 <__aeabi_fadd+0x1a2>
 800057a:	2280      	movs	r2, #128	; 0x80
 800057c:	03d2      	lsls	r2, r2, #15
 800057e:	4213      	tst	r3, r2
 8000580:	d100      	bne.n	8000584 <__aeabi_fadd+0x300>
 8000582:	e750      	b.n	8000426 <__aeabi_fadd+0x1a2>
 8000584:	4641      	mov	r1, r8
 8000586:	4211      	tst	r1, r2
 8000588:	d000      	beq.n	800058c <__aeabi_fadd+0x308>
 800058a:	e74c      	b.n	8000426 <__aeabi_fadd+0x1a2>
 800058c:	4643      	mov	r3, r8
 800058e:	e74a      	b.n	8000426 <__aeabi_fadd+0x1a2>
 8000590:	4663      	mov	r3, ip
 8000592:	2b00      	cmp	r3, #0
 8000594:	d083      	beq.n	800049e <__aeabi_fadd+0x21a>
 8000596:	000c      	movs	r4, r1
 8000598:	4646      	mov	r6, r8
 800059a:	2000      	movs	r0, #0
 800059c:	e6f9      	b.n	8000392 <__aeabi_fadd+0x10e>
 800059e:	4663      	mov	r3, ip
 80005a0:	000c      	movs	r4, r1
 80005a2:	1bdb      	subs	r3, r3, r7
 80005a4:	3501      	adds	r5, #1
 80005a6:	e6d5      	b.n	8000354 <__aeabi_fadd+0xd0>
 80005a8:	4646      	mov	r6, r8
 80005aa:	2000      	movs	r0, #0
 80005ac:	e6f1      	b.n	8000392 <__aeabi_fadd+0x10e>
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d000      	beq.n	80005b4 <__aeabi_fadd+0x330>
 80005b2:	e723      	b.n	80003fc <__aeabi_fadd+0x178>
 80005b4:	2400      	movs	r4, #0
 80005b6:	2600      	movs	r6, #0
 80005b8:	e6eb      	b.n	8000392 <__aeabi_fadd+0x10e>
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	7dffffff 	.word	0x7dffffff
 80005c0:	fbffffff 	.word	0xfbffffff

080005c4 <__aeabi_fdiv>:
 80005c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c6:	464f      	mov	r7, r9
 80005c8:	4646      	mov	r6, r8
 80005ca:	46d6      	mov	lr, sl
 80005cc:	0245      	lsls	r5, r0, #9
 80005ce:	b5c0      	push	{r6, r7, lr}
 80005d0:	0047      	lsls	r7, r0, #1
 80005d2:	1c0c      	adds	r4, r1, #0
 80005d4:	0a6d      	lsrs	r5, r5, #9
 80005d6:	0e3f      	lsrs	r7, r7, #24
 80005d8:	0fc6      	lsrs	r6, r0, #31
 80005da:	2f00      	cmp	r7, #0
 80005dc:	d100      	bne.n	80005e0 <__aeabi_fdiv+0x1c>
 80005de:	e06f      	b.n	80006c0 <__aeabi_fdiv+0xfc>
 80005e0:	2fff      	cmp	r7, #255	; 0xff
 80005e2:	d100      	bne.n	80005e6 <__aeabi_fdiv+0x22>
 80005e4:	e074      	b.n	80006d0 <__aeabi_fdiv+0x10c>
 80005e6:	2300      	movs	r3, #0
 80005e8:	2280      	movs	r2, #128	; 0x80
 80005ea:	4699      	mov	r9, r3
 80005ec:	469a      	mov	sl, r3
 80005ee:	00ed      	lsls	r5, r5, #3
 80005f0:	04d2      	lsls	r2, r2, #19
 80005f2:	4315      	orrs	r5, r2
 80005f4:	3f7f      	subs	r7, #127	; 0x7f
 80005f6:	0263      	lsls	r3, r4, #9
 80005f8:	0a5b      	lsrs	r3, r3, #9
 80005fa:	4698      	mov	r8, r3
 80005fc:	0063      	lsls	r3, r4, #1
 80005fe:	0e1b      	lsrs	r3, r3, #24
 8000600:	0fe4      	lsrs	r4, r4, #31
 8000602:	2b00      	cmp	r3, #0
 8000604:	d04d      	beq.n	80006a2 <__aeabi_fdiv+0xde>
 8000606:	2bff      	cmp	r3, #255	; 0xff
 8000608:	d045      	beq.n	8000696 <__aeabi_fdiv+0xd2>
 800060a:	4642      	mov	r2, r8
 800060c:	2180      	movs	r1, #128	; 0x80
 800060e:	00d2      	lsls	r2, r2, #3
 8000610:	04c9      	lsls	r1, r1, #19
 8000612:	4311      	orrs	r1, r2
 8000614:	4688      	mov	r8, r1
 8000616:	2200      	movs	r2, #0
 8000618:	3b7f      	subs	r3, #127	; 0x7f
 800061a:	0031      	movs	r1, r6
 800061c:	1aff      	subs	r7, r7, r3
 800061e:	464b      	mov	r3, r9
 8000620:	4061      	eors	r1, r4
 8000622:	b2c9      	uxtb	r1, r1
 8000624:	2b0f      	cmp	r3, #15
 8000626:	d900      	bls.n	800062a <__aeabi_fdiv+0x66>
 8000628:	e0b8      	b.n	800079c <__aeabi_fdiv+0x1d8>
 800062a:	4870      	ldr	r0, [pc, #448]	; (80007ec <__aeabi_fdiv+0x228>)
 800062c:	009b      	lsls	r3, r3, #2
 800062e:	58c3      	ldr	r3, [r0, r3]
 8000630:	469f      	mov	pc, r3
 8000632:	2300      	movs	r3, #0
 8000634:	4698      	mov	r8, r3
 8000636:	0026      	movs	r6, r4
 8000638:	4645      	mov	r5, r8
 800063a:	4692      	mov	sl, r2
 800063c:	4653      	mov	r3, sl
 800063e:	2b02      	cmp	r3, #2
 8000640:	d100      	bne.n	8000644 <__aeabi_fdiv+0x80>
 8000642:	e08d      	b.n	8000760 <__aeabi_fdiv+0x19c>
 8000644:	2b03      	cmp	r3, #3
 8000646:	d100      	bne.n	800064a <__aeabi_fdiv+0x86>
 8000648:	e0a1      	b.n	800078e <__aeabi_fdiv+0x1ca>
 800064a:	2b01      	cmp	r3, #1
 800064c:	d018      	beq.n	8000680 <__aeabi_fdiv+0xbc>
 800064e:	003b      	movs	r3, r7
 8000650:	337f      	adds	r3, #127	; 0x7f
 8000652:	2b00      	cmp	r3, #0
 8000654:	dd6d      	ble.n	8000732 <__aeabi_fdiv+0x16e>
 8000656:	076a      	lsls	r2, r5, #29
 8000658:	d004      	beq.n	8000664 <__aeabi_fdiv+0xa0>
 800065a:	220f      	movs	r2, #15
 800065c:	402a      	ands	r2, r5
 800065e:	2a04      	cmp	r2, #4
 8000660:	d000      	beq.n	8000664 <__aeabi_fdiv+0xa0>
 8000662:	3504      	adds	r5, #4
 8000664:	012a      	lsls	r2, r5, #4
 8000666:	d503      	bpl.n	8000670 <__aeabi_fdiv+0xac>
 8000668:	4b61      	ldr	r3, [pc, #388]	; (80007f0 <__aeabi_fdiv+0x22c>)
 800066a:	401d      	ands	r5, r3
 800066c:	003b      	movs	r3, r7
 800066e:	3380      	adds	r3, #128	; 0x80
 8000670:	2bfe      	cmp	r3, #254	; 0xfe
 8000672:	dd00      	ble.n	8000676 <__aeabi_fdiv+0xb2>
 8000674:	e074      	b.n	8000760 <__aeabi_fdiv+0x19c>
 8000676:	01aa      	lsls	r2, r5, #6
 8000678:	0a52      	lsrs	r2, r2, #9
 800067a:	b2d8      	uxtb	r0, r3
 800067c:	e002      	b.n	8000684 <__aeabi_fdiv+0xc0>
 800067e:	000e      	movs	r6, r1
 8000680:	2000      	movs	r0, #0
 8000682:	2200      	movs	r2, #0
 8000684:	05c0      	lsls	r0, r0, #23
 8000686:	07f6      	lsls	r6, r6, #31
 8000688:	4310      	orrs	r0, r2
 800068a:	4330      	orrs	r0, r6
 800068c:	bce0      	pop	{r5, r6, r7}
 800068e:	46ba      	mov	sl, r7
 8000690:	46b1      	mov	r9, r6
 8000692:	46a8      	mov	r8, r5
 8000694:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000696:	4643      	mov	r3, r8
 8000698:	2b00      	cmp	r3, #0
 800069a:	d13f      	bne.n	800071c <__aeabi_fdiv+0x158>
 800069c:	2202      	movs	r2, #2
 800069e:	3fff      	subs	r7, #255	; 0xff
 80006a0:	e003      	b.n	80006aa <__aeabi_fdiv+0xe6>
 80006a2:	4643      	mov	r3, r8
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d12d      	bne.n	8000704 <__aeabi_fdiv+0x140>
 80006a8:	2201      	movs	r2, #1
 80006aa:	0031      	movs	r1, r6
 80006ac:	464b      	mov	r3, r9
 80006ae:	4061      	eors	r1, r4
 80006b0:	b2c9      	uxtb	r1, r1
 80006b2:	4313      	orrs	r3, r2
 80006b4:	2b0f      	cmp	r3, #15
 80006b6:	d838      	bhi.n	800072a <__aeabi_fdiv+0x166>
 80006b8:	484e      	ldr	r0, [pc, #312]	; (80007f4 <__aeabi_fdiv+0x230>)
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	58c3      	ldr	r3, [r0, r3]
 80006be:	469f      	mov	pc, r3
 80006c0:	2d00      	cmp	r5, #0
 80006c2:	d113      	bne.n	80006ec <__aeabi_fdiv+0x128>
 80006c4:	2304      	movs	r3, #4
 80006c6:	4699      	mov	r9, r3
 80006c8:	3b03      	subs	r3, #3
 80006ca:	2700      	movs	r7, #0
 80006cc:	469a      	mov	sl, r3
 80006ce:	e792      	b.n	80005f6 <__aeabi_fdiv+0x32>
 80006d0:	2d00      	cmp	r5, #0
 80006d2:	d105      	bne.n	80006e0 <__aeabi_fdiv+0x11c>
 80006d4:	2308      	movs	r3, #8
 80006d6:	4699      	mov	r9, r3
 80006d8:	3b06      	subs	r3, #6
 80006da:	27ff      	movs	r7, #255	; 0xff
 80006dc:	469a      	mov	sl, r3
 80006de:	e78a      	b.n	80005f6 <__aeabi_fdiv+0x32>
 80006e0:	230c      	movs	r3, #12
 80006e2:	4699      	mov	r9, r3
 80006e4:	3b09      	subs	r3, #9
 80006e6:	27ff      	movs	r7, #255	; 0xff
 80006e8:	469a      	mov	sl, r3
 80006ea:	e784      	b.n	80005f6 <__aeabi_fdiv+0x32>
 80006ec:	0028      	movs	r0, r5
 80006ee:	f001 fb65 	bl	8001dbc <__clzsi2>
 80006f2:	2776      	movs	r7, #118	; 0x76
 80006f4:	1f43      	subs	r3, r0, #5
 80006f6:	409d      	lsls	r5, r3
 80006f8:	2300      	movs	r3, #0
 80006fa:	427f      	negs	r7, r7
 80006fc:	4699      	mov	r9, r3
 80006fe:	469a      	mov	sl, r3
 8000700:	1a3f      	subs	r7, r7, r0
 8000702:	e778      	b.n	80005f6 <__aeabi_fdiv+0x32>
 8000704:	4640      	mov	r0, r8
 8000706:	f001 fb59 	bl	8001dbc <__clzsi2>
 800070a:	4642      	mov	r2, r8
 800070c:	1f43      	subs	r3, r0, #5
 800070e:	409a      	lsls	r2, r3
 8000710:	2376      	movs	r3, #118	; 0x76
 8000712:	425b      	negs	r3, r3
 8000714:	4690      	mov	r8, r2
 8000716:	1a1b      	subs	r3, r3, r0
 8000718:	2200      	movs	r2, #0
 800071a:	e77e      	b.n	800061a <__aeabi_fdiv+0x56>
 800071c:	2303      	movs	r3, #3
 800071e:	464a      	mov	r2, r9
 8000720:	431a      	orrs	r2, r3
 8000722:	4691      	mov	r9, r2
 8000724:	33fc      	adds	r3, #252	; 0xfc
 8000726:	2203      	movs	r2, #3
 8000728:	e777      	b.n	800061a <__aeabi_fdiv+0x56>
 800072a:	000e      	movs	r6, r1
 800072c:	20ff      	movs	r0, #255	; 0xff
 800072e:	2200      	movs	r2, #0
 8000730:	e7a8      	b.n	8000684 <__aeabi_fdiv+0xc0>
 8000732:	2201      	movs	r2, #1
 8000734:	1ad3      	subs	r3, r2, r3
 8000736:	2b1b      	cmp	r3, #27
 8000738:	dca2      	bgt.n	8000680 <__aeabi_fdiv+0xbc>
 800073a:	379e      	adds	r7, #158	; 0x9e
 800073c:	002a      	movs	r2, r5
 800073e:	40bd      	lsls	r5, r7
 8000740:	40da      	lsrs	r2, r3
 8000742:	1e6b      	subs	r3, r5, #1
 8000744:	419d      	sbcs	r5, r3
 8000746:	4315      	orrs	r5, r2
 8000748:	076a      	lsls	r2, r5, #29
 800074a:	d004      	beq.n	8000756 <__aeabi_fdiv+0x192>
 800074c:	220f      	movs	r2, #15
 800074e:	402a      	ands	r2, r5
 8000750:	2a04      	cmp	r2, #4
 8000752:	d000      	beq.n	8000756 <__aeabi_fdiv+0x192>
 8000754:	3504      	adds	r5, #4
 8000756:	016a      	lsls	r2, r5, #5
 8000758:	d544      	bpl.n	80007e4 <__aeabi_fdiv+0x220>
 800075a:	2001      	movs	r0, #1
 800075c:	2200      	movs	r2, #0
 800075e:	e791      	b.n	8000684 <__aeabi_fdiv+0xc0>
 8000760:	20ff      	movs	r0, #255	; 0xff
 8000762:	2200      	movs	r2, #0
 8000764:	e78e      	b.n	8000684 <__aeabi_fdiv+0xc0>
 8000766:	2280      	movs	r2, #128	; 0x80
 8000768:	2600      	movs	r6, #0
 800076a:	20ff      	movs	r0, #255	; 0xff
 800076c:	03d2      	lsls	r2, r2, #15
 800076e:	e789      	b.n	8000684 <__aeabi_fdiv+0xc0>
 8000770:	2300      	movs	r3, #0
 8000772:	4698      	mov	r8, r3
 8000774:	2280      	movs	r2, #128	; 0x80
 8000776:	03d2      	lsls	r2, r2, #15
 8000778:	4215      	tst	r5, r2
 800077a:	d008      	beq.n	800078e <__aeabi_fdiv+0x1ca>
 800077c:	4643      	mov	r3, r8
 800077e:	4213      	tst	r3, r2
 8000780:	d105      	bne.n	800078e <__aeabi_fdiv+0x1ca>
 8000782:	431a      	orrs	r2, r3
 8000784:	0252      	lsls	r2, r2, #9
 8000786:	0026      	movs	r6, r4
 8000788:	20ff      	movs	r0, #255	; 0xff
 800078a:	0a52      	lsrs	r2, r2, #9
 800078c:	e77a      	b.n	8000684 <__aeabi_fdiv+0xc0>
 800078e:	2280      	movs	r2, #128	; 0x80
 8000790:	03d2      	lsls	r2, r2, #15
 8000792:	432a      	orrs	r2, r5
 8000794:	0252      	lsls	r2, r2, #9
 8000796:	20ff      	movs	r0, #255	; 0xff
 8000798:	0a52      	lsrs	r2, r2, #9
 800079a:	e773      	b.n	8000684 <__aeabi_fdiv+0xc0>
 800079c:	4642      	mov	r2, r8
 800079e:	016b      	lsls	r3, r5, #5
 80007a0:	0155      	lsls	r5, r2, #5
 80007a2:	42ab      	cmp	r3, r5
 80007a4:	d21a      	bcs.n	80007dc <__aeabi_fdiv+0x218>
 80007a6:	201b      	movs	r0, #27
 80007a8:	2200      	movs	r2, #0
 80007aa:	3f01      	subs	r7, #1
 80007ac:	2601      	movs	r6, #1
 80007ae:	001c      	movs	r4, r3
 80007b0:	0052      	lsls	r2, r2, #1
 80007b2:	005b      	lsls	r3, r3, #1
 80007b4:	2c00      	cmp	r4, #0
 80007b6:	db01      	blt.n	80007bc <__aeabi_fdiv+0x1f8>
 80007b8:	429d      	cmp	r5, r3
 80007ba:	d801      	bhi.n	80007c0 <__aeabi_fdiv+0x1fc>
 80007bc:	1b5b      	subs	r3, r3, r5
 80007be:	4332      	orrs	r2, r6
 80007c0:	3801      	subs	r0, #1
 80007c2:	2800      	cmp	r0, #0
 80007c4:	d1f3      	bne.n	80007ae <__aeabi_fdiv+0x1ea>
 80007c6:	1e58      	subs	r0, r3, #1
 80007c8:	4183      	sbcs	r3, r0
 80007ca:	4313      	orrs	r3, r2
 80007cc:	001d      	movs	r5, r3
 80007ce:	003b      	movs	r3, r7
 80007d0:	337f      	adds	r3, #127	; 0x7f
 80007d2:	000e      	movs	r6, r1
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	dd00      	ble.n	80007da <__aeabi_fdiv+0x216>
 80007d8:	e73d      	b.n	8000656 <__aeabi_fdiv+0x92>
 80007da:	e7aa      	b.n	8000732 <__aeabi_fdiv+0x16e>
 80007dc:	201a      	movs	r0, #26
 80007de:	2201      	movs	r2, #1
 80007e0:	1b5b      	subs	r3, r3, r5
 80007e2:	e7e3      	b.n	80007ac <__aeabi_fdiv+0x1e8>
 80007e4:	01aa      	lsls	r2, r5, #6
 80007e6:	2000      	movs	r0, #0
 80007e8:	0a52      	lsrs	r2, r2, #9
 80007ea:	e74b      	b.n	8000684 <__aeabi_fdiv+0xc0>
 80007ec:	080058a0 	.word	0x080058a0
 80007f0:	f7ffffff 	.word	0xf7ffffff
 80007f4:	080058e0 	.word	0x080058e0

080007f8 <__aeabi_fmul>:
 80007f8:	0243      	lsls	r3, r0, #9
 80007fa:	0a5b      	lsrs	r3, r3, #9
 80007fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007fe:	464f      	mov	r7, r9
 8000800:	4646      	mov	r6, r8
 8000802:	4699      	mov	r9, r3
 8000804:	46d6      	mov	lr, sl
 8000806:	0fc3      	lsrs	r3, r0, #31
 8000808:	0045      	lsls	r5, r0, #1
 800080a:	4698      	mov	r8, r3
 800080c:	b5c0      	push	{r6, r7, lr}
 800080e:	464b      	mov	r3, r9
 8000810:	1c0f      	adds	r7, r1, #0
 8000812:	0e2d      	lsrs	r5, r5, #24
 8000814:	d100      	bne.n	8000818 <__aeabi_fmul+0x20>
 8000816:	e0cb      	b.n	80009b0 <__aeabi_fmul+0x1b8>
 8000818:	2dff      	cmp	r5, #255	; 0xff
 800081a:	d100      	bne.n	800081e <__aeabi_fmul+0x26>
 800081c:	e0cf      	b.n	80009be <__aeabi_fmul+0x1c6>
 800081e:	2280      	movs	r2, #128	; 0x80
 8000820:	00db      	lsls	r3, r3, #3
 8000822:	04d2      	lsls	r2, r2, #19
 8000824:	431a      	orrs	r2, r3
 8000826:	2300      	movs	r3, #0
 8000828:	4691      	mov	r9, r2
 800082a:	2600      	movs	r6, #0
 800082c:	469a      	mov	sl, r3
 800082e:	3d7f      	subs	r5, #127	; 0x7f
 8000830:	027c      	lsls	r4, r7, #9
 8000832:	007b      	lsls	r3, r7, #1
 8000834:	0a64      	lsrs	r4, r4, #9
 8000836:	0e1b      	lsrs	r3, r3, #24
 8000838:	0fff      	lsrs	r7, r7, #31
 800083a:	2b00      	cmp	r3, #0
 800083c:	d100      	bne.n	8000840 <__aeabi_fmul+0x48>
 800083e:	e0a9      	b.n	8000994 <__aeabi_fmul+0x19c>
 8000840:	2bff      	cmp	r3, #255	; 0xff
 8000842:	d011      	beq.n	8000868 <__aeabi_fmul+0x70>
 8000844:	2280      	movs	r2, #128	; 0x80
 8000846:	00e4      	lsls	r4, r4, #3
 8000848:	04d2      	lsls	r2, r2, #19
 800084a:	4314      	orrs	r4, r2
 800084c:	4642      	mov	r2, r8
 800084e:	3b7f      	subs	r3, #127	; 0x7f
 8000850:	195b      	adds	r3, r3, r5
 8000852:	407a      	eors	r2, r7
 8000854:	2000      	movs	r0, #0
 8000856:	b2d2      	uxtb	r2, r2
 8000858:	1c5d      	adds	r5, r3, #1
 800085a:	2e0a      	cmp	r6, #10
 800085c:	dd13      	ble.n	8000886 <__aeabi_fmul+0x8e>
 800085e:	003a      	movs	r2, r7
 8000860:	2e0b      	cmp	r6, #11
 8000862:	d047      	beq.n	80008f4 <__aeabi_fmul+0xfc>
 8000864:	4647      	mov	r7, r8
 8000866:	e03f      	b.n	80008e8 <__aeabi_fmul+0xf0>
 8000868:	002b      	movs	r3, r5
 800086a:	33ff      	adds	r3, #255	; 0xff
 800086c:	2c00      	cmp	r4, #0
 800086e:	d11e      	bne.n	80008ae <__aeabi_fmul+0xb6>
 8000870:	2202      	movs	r2, #2
 8000872:	4316      	orrs	r6, r2
 8000874:	4642      	mov	r2, r8
 8000876:	3501      	adds	r5, #1
 8000878:	407a      	eors	r2, r7
 800087a:	b2d2      	uxtb	r2, r2
 800087c:	35ff      	adds	r5, #255	; 0xff
 800087e:	2e0a      	cmp	r6, #10
 8000880:	dd00      	ble.n	8000884 <__aeabi_fmul+0x8c>
 8000882:	e0e4      	b.n	8000a4e <__aeabi_fmul+0x256>
 8000884:	2002      	movs	r0, #2
 8000886:	2e02      	cmp	r6, #2
 8000888:	dc1c      	bgt.n	80008c4 <__aeabi_fmul+0xcc>
 800088a:	3e01      	subs	r6, #1
 800088c:	2e01      	cmp	r6, #1
 800088e:	d842      	bhi.n	8000916 <__aeabi_fmul+0x11e>
 8000890:	2802      	cmp	r0, #2
 8000892:	d03d      	beq.n	8000910 <__aeabi_fmul+0x118>
 8000894:	2801      	cmp	r0, #1
 8000896:	d166      	bne.n	8000966 <__aeabi_fmul+0x16e>
 8000898:	2000      	movs	r0, #0
 800089a:	2100      	movs	r1, #0
 800089c:	05c0      	lsls	r0, r0, #23
 800089e:	4308      	orrs	r0, r1
 80008a0:	07d2      	lsls	r2, r2, #31
 80008a2:	4310      	orrs	r0, r2
 80008a4:	bce0      	pop	{r5, r6, r7}
 80008a6:	46ba      	mov	sl, r7
 80008a8:	46b1      	mov	r9, r6
 80008aa:	46a8      	mov	r8, r5
 80008ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008ae:	2203      	movs	r2, #3
 80008b0:	4316      	orrs	r6, r2
 80008b2:	4642      	mov	r2, r8
 80008b4:	3501      	adds	r5, #1
 80008b6:	407a      	eors	r2, r7
 80008b8:	b2d2      	uxtb	r2, r2
 80008ba:	35ff      	adds	r5, #255	; 0xff
 80008bc:	2e0a      	cmp	r6, #10
 80008be:	dd00      	ble.n	80008c2 <__aeabi_fmul+0xca>
 80008c0:	e0e4      	b.n	8000a8c <__aeabi_fmul+0x294>
 80008c2:	2003      	movs	r0, #3
 80008c4:	2101      	movs	r1, #1
 80008c6:	40b1      	lsls	r1, r6
 80008c8:	26a6      	movs	r6, #166	; 0xa6
 80008ca:	00f6      	lsls	r6, r6, #3
 80008cc:	4231      	tst	r1, r6
 80008ce:	d10a      	bne.n	80008e6 <__aeabi_fmul+0xee>
 80008d0:	2690      	movs	r6, #144	; 0x90
 80008d2:	00b6      	lsls	r6, r6, #2
 80008d4:	4231      	tst	r1, r6
 80008d6:	d116      	bne.n	8000906 <__aeabi_fmul+0x10e>
 80008d8:	3eb9      	subs	r6, #185	; 0xb9
 80008da:	3eff      	subs	r6, #255	; 0xff
 80008dc:	420e      	tst	r6, r1
 80008de:	d01a      	beq.n	8000916 <__aeabi_fmul+0x11e>
 80008e0:	46a1      	mov	r9, r4
 80008e2:	4682      	mov	sl, r0
 80008e4:	e000      	b.n	80008e8 <__aeabi_fmul+0xf0>
 80008e6:	0017      	movs	r7, r2
 80008e8:	4653      	mov	r3, sl
 80008ea:	003a      	movs	r2, r7
 80008ec:	2b02      	cmp	r3, #2
 80008ee:	d00f      	beq.n	8000910 <__aeabi_fmul+0x118>
 80008f0:	464c      	mov	r4, r9
 80008f2:	4650      	mov	r0, sl
 80008f4:	2803      	cmp	r0, #3
 80008f6:	d1cd      	bne.n	8000894 <__aeabi_fmul+0x9c>
 80008f8:	2180      	movs	r1, #128	; 0x80
 80008fa:	03c9      	lsls	r1, r1, #15
 80008fc:	4321      	orrs	r1, r4
 80008fe:	0249      	lsls	r1, r1, #9
 8000900:	20ff      	movs	r0, #255	; 0xff
 8000902:	0a49      	lsrs	r1, r1, #9
 8000904:	e7ca      	b.n	800089c <__aeabi_fmul+0xa4>
 8000906:	2180      	movs	r1, #128	; 0x80
 8000908:	2200      	movs	r2, #0
 800090a:	20ff      	movs	r0, #255	; 0xff
 800090c:	03c9      	lsls	r1, r1, #15
 800090e:	e7c5      	b.n	800089c <__aeabi_fmul+0xa4>
 8000910:	20ff      	movs	r0, #255	; 0xff
 8000912:	2100      	movs	r1, #0
 8000914:	e7c2      	b.n	800089c <__aeabi_fmul+0xa4>
 8000916:	0c20      	lsrs	r0, r4, #16
 8000918:	4649      	mov	r1, r9
 800091a:	0424      	lsls	r4, r4, #16
 800091c:	0c24      	lsrs	r4, r4, #16
 800091e:	0027      	movs	r7, r4
 8000920:	0c0e      	lsrs	r6, r1, #16
 8000922:	0409      	lsls	r1, r1, #16
 8000924:	0c09      	lsrs	r1, r1, #16
 8000926:	4374      	muls	r4, r6
 8000928:	434f      	muls	r7, r1
 800092a:	4346      	muls	r6, r0
 800092c:	4348      	muls	r0, r1
 800092e:	0c39      	lsrs	r1, r7, #16
 8000930:	1900      	adds	r0, r0, r4
 8000932:	1809      	adds	r1, r1, r0
 8000934:	428c      	cmp	r4, r1
 8000936:	d903      	bls.n	8000940 <__aeabi_fmul+0x148>
 8000938:	2080      	movs	r0, #128	; 0x80
 800093a:	0240      	lsls	r0, r0, #9
 800093c:	4684      	mov	ip, r0
 800093e:	4466      	add	r6, ip
 8000940:	043f      	lsls	r7, r7, #16
 8000942:	0408      	lsls	r0, r1, #16
 8000944:	0c3f      	lsrs	r7, r7, #16
 8000946:	19c0      	adds	r0, r0, r7
 8000948:	0184      	lsls	r4, r0, #6
 800094a:	1e67      	subs	r7, r4, #1
 800094c:	41bc      	sbcs	r4, r7
 800094e:	0c09      	lsrs	r1, r1, #16
 8000950:	0e80      	lsrs	r0, r0, #26
 8000952:	1989      	adds	r1, r1, r6
 8000954:	4304      	orrs	r4, r0
 8000956:	0189      	lsls	r1, r1, #6
 8000958:	430c      	orrs	r4, r1
 800095a:	0109      	lsls	r1, r1, #4
 800095c:	d571      	bpl.n	8000a42 <__aeabi_fmul+0x24a>
 800095e:	2301      	movs	r3, #1
 8000960:	0861      	lsrs	r1, r4, #1
 8000962:	401c      	ands	r4, r3
 8000964:	430c      	orrs	r4, r1
 8000966:	002b      	movs	r3, r5
 8000968:	337f      	adds	r3, #127	; 0x7f
 800096a:	2b00      	cmp	r3, #0
 800096c:	dd51      	ble.n	8000a12 <__aeabi_fmul+0x21a>
 800096e:	0761      	lsls	r1, r4, #29
 8000970:	d004      	beq.n	800097c <__aeabi_fmul+0x184>
 8000972:	210f      	movs	r1, #15
 8000974:	4021      	ands	r1, r4
 8000976:	2904      	cmp	r1, #4
 8000978:	d000      	beq.n	800097c <__aeabi_fmul+0x184>
 800097a:	3404      	adds	r4, #4
 800097c:	0121      	lsls	r1, r4, #4
 800097e:	d503      	bpl.n	8000988 <__aeabi_fmul+0x190>
 8000980:	4b43      	ldr	r3, [pc, #268]	; (8000a90 <__aeabi_fmul+0x298>)
 8000982:	401c      	ands	r4, r3
 8000984:	002b      	movs	r3, r5
 8000986:	3380      	adds	r3, #128	; 0x80
 8000988:	2bfe      	cmp	r3, #254	; 0xfe
 800098a:	dcc1      	bgt.n	8000910 <__aeabi_fmul+0x118>
 800098c:	01a1      	lsls	r1, r4, #6
 800098e:	0a49      	lsrs	r1, r1, #9
 8000990:	b2d8      	uxtb	r0, r3
 8000992:	e783      	b.n	800089c <__aeabi_fmul+0xa4>
 8000994:	2c00      	cmp	r4, #0
 8000996:	d12c      	bne.n	80009f2 <__aeabi_fmul+0x1fa>
 8000998:	2301      	movs	r3, #1
 800099a:	4642      	mov	r2, r8
 800099c:	431e      	orrs	r6, r3
 800099e:	002b      	movs	r3, r5
 80009a0:	407a      	eors	r2, r7
 80009a2:	2001      	movs	r0, #1
 80009a4:	b2d2      	uxtb	r2, r2
 80009a6:	1c5d      	adds	r5, r3, #1
 80009a8:	2e0a      	cmp	r6, #10
 80009aa:	dd00      	ble.n	80009ae <__aeabi_fmul+0x1b6>
 80009ac:	e757      	b.n	800085e <__aeabi_fmul+0x66>
 80009ae:	e76a      	b.n	8000886 <__aeabi_fmul+0x8e>
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d110      	bne.n	80009d6 <__aeabi_fmul+0x1de>
 80009b4:	2301      	movs	r3, #1
 80009b6:	2604      	movs	r6, #4
 80009b8:	2500      	movs	r5, #0
 80009ba:	469a      	mov	sl, r3
 80009bc:	e738      	b.n	8000830 <__aeabi_fmul+0x38>
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d104      	bne.n	80009cc <__aeabi_fmul+0x1d4>
 80009c2:	2302      	movs	r3, #2
 80009c4:	2608      	movs	r6, #8
 80009c6:	25ff      	movs	r5, #255	; 0xff
 80009c8:	469a      	mov	sl, r3
 80009ca:	e731      	b.n	8000830 <__aeabi_fmul+0x38>
 80009cc:	2303      	movs	r3, #3
 80009ce:	260c      	movs	r6, #12
 80009d0:	25ff      	movs	r5, #255	; 0xff
 80009d2:	469a      	mov	sl, r3
 80009d4:	e72c      	b.n	8000830 <__aeabi_fmul+0x38>
 80009d6:	4648      	mov	r0, r9
 80009d8:	f001 f9f0 	bl	8001dbc <__clzsi2>
 80009dc:	464a      	mov	r2, r9
 80009de:	1f43      	subs	r3, r0, #5
 80009e0:	2576      	movs	r5, #118	; 0x76
 80009e2:	409a      	lsls	r2, r3
 80009e4:	2300      	movs	r3, #0
 80009e6:	426d      	negs	r5, r5
 80009e8:	4691      	mov	r9, r2
 80009ea:	2600      	movs	r6, #0
 80009ec:	469a      	mov	sl, r3
 80009ee:	1a2d      	subs	r5, r5, r0
 80009f0:	e71e      	b.n	8000830 <__aeabi_fmul+0x38>
 80009f2:	0020      	movs	r0, r4
 80009f4:	f001 f9e2 	bl	8001dbc <__clzsi2>
 80009f8:	4642      	mov	r2, r8
 80009fa:	1f43      	subs	r3, r0, #5
 80009fc:	409c      	lsls	r4, r3
 80009fe:	1a2b      	subs	r3, r5, r0
 8000a00:	3b76      	subs	r3, #118	; 0x76
 8000a02:	407a      	eors	r2, r7
 8000a04:	2000      	movs	r0, #0
 8000a06:	b2d2      	uxtb	r2, r2
 8000a08:	1c5d      	adds	r5, r3, #1
 8000a0a:	2e0a      	cmp	r6, #10
 8000a0c:	dd00      	ble.n	8000a10 <__aeabi_fmul+0x218>
 8000a0e:	e726      	b.n	800085e <__aeabi_fmul+0x66>
 8000a10:	e739      	b.n	8000886 <__aeabi_fmul+0x8e>
 8000a12:	2101      	movs	r1, #1
 8000a14:	1acb      	subs	r3, r1, r3
 8000a16:	2b1b      	cmp	r3, #27
 8000a18:	dd00      	ble.n	8000a1c <__aeabi_fmul+0x224>
 8000a1a:	e73d      	b.n	8000898 <__aeabi_fmul+0xa0>
 8000a1c:	359e      	adds	r5, #158	; 0x9e
 8000a1e:	0021      	movs	r1, r4
 8000a20:	40ac      	lsls	r4, r5
 8000a22:	40d9      	lsrs	r1, r3
 8000a24:	1e63      	subs	r3, r4, #1
 8000a26:	419c      	sbcs	r4, r3
 8000a28:	4321      	orrs	r1, r4
 8000a2a:	074b      	lsls	r3, r1, #29
 8000a2c:	d004      	beq.n	8000a38 <__aeabi_fmul+0x240>
 8000a2e:	230f      	movs	r3, #15
 8000a30:	400b      	ands	r3, r1
 8000a32:	2b04      	cmp	r3, #4
 8000a34:	d000      	beq.n	8000a38 <__aeabi_fmul+0x240>
 8000a36:	3104      	adds	r1, #4
 8000a38:	014b      	lsls	r3, r1, #5
 8000a3a:	d504      	bpl.n	8000a46 <__aeabi_fmul+0x24e>
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	2100      	movs	r1, #0
 8000a40:	e72c      	b.n	800089c <__aeabi_fmul+0xa4>
 8000a42:	001d      	movs	r5, r3
 8000a44:	e78f      	b.n	8000966 <__aeabi_fmul+0x16e>
 8000a46:	0189      	lsls	r1, r1, #6
 8000a48:	2000      	movs	r0, #0
 8000a4a:	0a49      	lsrs	r1, r1, #9
 8000a4c:	e726      	b.n	800089c <__aeabi_fmul+0xa4>
 8000a4e:	2302      	movs	r3, #2
 8000a50:	2e0f      	cmp	r6, #15
 8000a52:	d10c      	bne.n	8000a6e <__aeabi_fmul+0x276>
 8000a54:	2180      	movs	r1, #128	; 0x80
 8000a56:	464b      	mov	r3, r9
 8000a58:	03c9      	lsls	r1, r1, #15
 8000a5a:	420b      	tst	r3, r1
 8000a5c:	d00d      	beq.n	8000a7a <__aeabi_fmul+0x282>
 8000a5e:	420c      	tst	r4, r1
 8000a60:	d10b      	bne.n	8000a7a <__aeabi_fmul+0x282>
 8000a62:	4321      	orrs	r1, r4
 8000a64:	0249      	lsls	r1, r1, #9
 8000a66:	003a      	movs	r2, r7
 8000a68:	20ff      	movs	r0, #255	; 0xff
 8000a6a:	0a49      	lsrs	r1, r1, #9
 8000a6c:	e716      	b.n	800089c <__aeabi_fmul+0xa4>
 8000a6e:	2e0b      	cmp	r6, #11
 8000a70:	d000      	beq.n	8000a74 <__aeabi_fmul+0x27c>
 8000a72:	e6f7      	b.n	8000864 <__aeabi_fmul+0x6c>
 8000a74:	46a1      	mov	r9, r4
 8000a76:	469a      	mov	sl, r3
 8000a78:	e736      	b.n	80008e8 <__aeabi_fmul+0xf0>
 8000a7a:	2180      	movs	r1, #128	; 0x80
 8000a7c:	464b      	mov	r3, r9
 8000a7e:	03c9      	lsls	r1, r1, #15
 8000a80:	4319      	orrs	r1, r3
 8000a82:	0249      	lsls	r1, r1, #9
 8000a84:	4642      	mov	r2, r8
 8000a86:	20ff      	movs	r0, #255	; 0xff
 8000a88:	0a49      	lsrs	r1, r1, #9
 8000a8a:	e707      	b.n	800089c <__aeabi_fmul+0xa4>
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	e7df      	b.n	8000a50 <__aeabi_fmul+0x258>
 8000a90:	f7ffffff 	.word	0xf7ffffff

08000a94 <__aeabi_fsub>:
 8000a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a96:	46c6      	mov	lr, r8
 8000a98:	0243      	lsls	r3, r0, #9
 8000a9a:	0a5b      	lsrs	r3, r3, #9
 8000a9c:	0045      	lsls	r5, r0, #1
 8000a9e:	00da      	lsls	r2, r3, #3
 8000aa0:	0fc4      	lsrs	r4, r0, #31
 8000aa2:	0248      	lsls	r0, r1, #9
 8000aa4:	004f      	lsls	r7, r1, #1
 8000aa6:	4694      	mov	ip, r2
 8000aa8:	0a42      	lsrs	r2, r0, #9
 8000aaa:	001e      	movs	r6, r3
 8000aac:	4690      	mov	r8, r2
 8000aae:	b500      	push	{lr}
 8000ab0:	0e2d      	lsrs	r5, r5, #24
 8000ab2:	0e3f      	lsrs	r7, r7, #24
 8000ab4:	0fc9      	lsrs	r1, r1, #31
 8000ab6:	0980      	lsrs	r0, r0, #6
 8000ab8:	2fff      	cmp	r7, #255	; 0xff
 8000aba:	d059      	beq.n	8000b70 <__aeabi_fsub+0xdc>
 8000abc:	2201      	movs	r2, #1
 8000abe:	4051      	eors	r1, r2
 8000ac0:	428c      	cmp	r4, r1
 8000ac2:	d039      	beq.n	8000b38 <__aeabi_fsub+0xa4>
 8000ac4:	1bea      	subs	r2, r5, r7
 8000ac6:	2a00      	cmp	r2, #0
 8000ac8:	dd58      	ble.n	8000b7c <__aeabi_fsub+0xe8>
 8000aca:	2f00      	cmp	r7, #0
 8000acc:	d068      	beq.n	8000ba0 <__aeabi_fsub+0x10c>
 8000ace:	2dff      	cmp	r5, #255	; 0xff
 8000ad0:	d100      	bne.n	8000ad4 <__aeabi_fsub+0x40>
 8000ad2:	e0d1      	b.n	8000c78 <__aeabi_fsub+0x1e4>
 8000ad4:	2380      	movs	r3, #128	; 0x80
 8000ad6:	04db      	lsls	r3, r3, #19
 8000ad8:	4318      	orrs	r0, r3
 8000ada:	2a1b      	cmp	r2, #27
 8000adc:	dc00      	bgt.n	8000ae0 <__aeabi_fsub+0x4c>
 8000ade:	e0e3      	b.n	8000ca8 <__aeabi_fsub+0x214>
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	4662      	mov	r2, ip
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	015a      	lsls	r2, r3, #5
 8000ae8:	d400      	bmi.n	8000aec <__aeabi_fsub+0x58>
 8000aea:	e0ac      	b.n	8000c46 <__aeabi_fsub+0x1b2>
 8000aec:	019b      	lsls	r3, r3, #6
 8000aee:	099e      	lsrs	r6, r3, #6
 8000af0:	0030      	movs	r0, r6
 8000af2:	f001 f963 	bl	8001dbc <__clzsi2>
 8000af6:	0033      	movs	r3, r6
 8000af8:	3805      	subs	r0, #5
 8000afa:	4083      	lsls	r3, r0
 8000afc:	4285      	cmp	r5, r0
 8000afe:	dc00      	bgt.n	8000b02 <__aeabi_fsub+0x6e>
 8000b00:	e0c6      	b.n	8000c90 <__aeabi_fsub+0x1fc>
 8000b02:	4ab2      	ldr	r2, [pc, #712]	; (8000dcc <__aeabi_fsub+0x338>)
 8000b04:	1a2d      	subs	r5, r5, r0
 8000b06:	4013      	ands	r3, r2
 8000b08:	075a      	lsls	r2, r3, #29
 8000b0a:	d004      	beq.n	8000b16 <__aeabi_fsub+0x82>
 8000b0c:	220f      	movs	r2, #15
 8000b0e:	401a      	ands	r2, r3
 8000b10:	2a04      	cmp	r2, #4
 8000b12:	d000      	beq.n	8000b16 <__aeabi_fsub+0x82>
 8000b14:	3304      	adds	r3, #4
 8000b16:	015a      	lsls	r2, r3, #5
 8000b18:	d400      	bmi.n	8000b1c <__aeabi_fsub+0x88>
 8000b1a:	e097      	b.n	8000c4c <__aeabi_fsub+0x1b8>
 8000b1c:	1c6a      	adds	r2, r5, #1
 8000b1e:	2dfe      	cmp	r5, #254	; 0xfe
 8000b20:	d100      	bne.n	8000b24 <__aeabi_fsub+0x90>
 8000b22:	e084      	b.n	8000c2e <__aeabi_fsub+0x19a>
 8000b24:	019b      	lsls	r3, r3, #6
 8000b26:	0a5e      	lsrs	r6, r3, #9
 8000b28:	b2d2      	uxtb	r2, r2
 8000b2a:	05d0      	lsls	r0, r2, #23
 8000b2c:	4330      	orrs	r0, r6
 8000b2e:	07e4      	lsls	r4, r4, #31
 8000b30:	4320      	orrs	r0, r4
 8000b32:	bc80      	pop	{r7}
 8000b34:	46b8      	mov	r8, r7
 8000b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b38:	1bea      	subs	r2, r5, r7
 8000b3a:	2a00      	cmp	r2, #0
 8000b3c:	dd41      	ble.n	8000bc2 <__aeabi_fsub+0x12e>
 8000b3e:	2f00      	cmp	r7, #0
 8000b40:	d06b      	beq.n	8000c1a <__aeabi_fsub+0x186>
 8000b42:	2dff      	cmp	r5, #255	; 0xff
 8000b44:	d100      	bne.n	8000b48 <__aeabi_fsub+0xb4>
 8000b46:	e097      	b.n	8000c78 <__aeabi_fsub+0x1e4>
 8000b48:	2380      	movs	r3, #128	; 0x80
 8000b4a:	04db      	lsls	r3, r3, #19
 8000b4c:	4318      	orrs	r0, r3
 8000b4e:	2a1b      	cmp	r2, #27
 8000b50:	dc00      	bgt.n	8000b54 <__aeabi_fsub+0xc0>
 8000b52:	e0cc      	b.n	8000cee <__aeabi_fsub+0x25a>
 8000b54:	2301      	movs	r3, #1
 8000b56:	4463      	add	r3, ip
 8000b58:	015a      	lsls	r2, r3, #5
 8000b5a:	d574      	bpl.n	8000c46 <__aeabi_fsub+0x1b2>
 8000b5c:	3501      	adds	r5, #1
 8000b5e:	2dff      	cmp	r5, #255	; 0xff
 8000b60:	d065      	beq.n	8000c2e <__aeabi_fsub+0x19a>
 8000b62:	2201      	movs	r2, #1
 8000b64:	499a      	ldr	r1, [pc, #616]	; (8000dd0 <__aeabi_fsub+0x33c>)
 8000b66:	401a      	ands	r2, r3
 8000b68:	085b      	lsrs	r3, r3, #1
 8000b6a:	400b      	ands	r3, r1
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	e7cb      	b.n	8000b08 <__aeabi_fsub+0x74>
 8000b70:	2800      	cmp	r0, #0
 8000b72:	d01f      	beq.n	8000bb4 <__aeabi_fsub+0x120>
 8000b74:	428c      	cmp	r4, r1
 8000b76:	d022      	beq.n	8000bbe <__aeabi_fsub+0x12a>
 8000b78:	002a      	movs	r2, r5
 8000b7a:	3aff      	subs	r2, #255	; 0xff
 8000b7c:	2a00      	cmp	r2, #0
 8000b7e:	d035      	beq.n	8000bec <__aeabi_fsub+0x158>
 8000b80:	1b7a      	subs	r2, r7, r5
 8000b82:	2d00      	cmp	r5, #0
 8000b84:	d000      	beq.n	8000b88 <__aeabi_fsub+0xf4>
 8000b86:	e099      	b.n	8000cbc <__aeabi_fsub+0x228>
 8000b88:	4663      	mov	r3, ip
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d100      	bne.n	8000b90 <__aeabi_fsub+0xfc>
 8000b8e:	e0dd      	b.n	8000d4c <__aeabi_fsub+0x2b8>
 8000b90:	1e53      	subs	r3, r2, #1
 8000b92:	2a01      	cmp	r2, #1
 8000b94:	d100      	bne.n	8000b98 <__aeabi_fsub+0x104>
 8000b96:	e105      	b.n	8000da4 <__aeabi_fsub+0x310>
 8000b98:	2aff      	cmp	r2, #255	; 0xff
 8000b9a:	d06b      	beq.n	8000c74 <__aeabi_fsub+0x1e0>
 8000b9c:	001a      	movs	r2, r3
 8000b9e:	e094      	b.n	8000cca <__aeabi_fsub+0x236>
 8000ba0:	2800      	cmp	r0, #0
 8000ba2:	d073      	beq.n	8000c8c <__aeabi_fsub+0x1f8>
 8000ba4:	1e51      	subs	r1, r2, #1
 8000ba6:	2a01      	cmp	r2, #1
 8000ba8:	d100      	bne.n	8000bac <__aeabi_fsub+0x118>
 8000baa:	e0df      	b.n	8000d6c <__aeabi_fsub+0x2d8>
 8000bac:	2aff      	cmp	r2, #255	; 0xff
 8000bae:	d063      	beq.n	8000c78 <__aeabi_fsub+0x1e4>
 8000bb0:	000a      	movs	r2, r1
 8000bb2:	e792      	b.n	8000ada <__aeabi_fsub+0x46>
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	4051      	eors	r1, r2
 8000bb8:	42a1      	cmp	r1, r4
 8000bba:	d000      	beq.n	8000bbe <__aeabi_fsub+0x12a>
 8000bbc:	e782      	b.n	8000ac4 <__aeabi_fsub+0x30>
 8000bbe:	002a      	movs	r2, r5
 8000bc0:	3aff      	subs	r2, #255	; 0xff
 8000bc2:	2a00      	cmp	r2, #0
 8000bc4:	d036      	beq.n	8000c34 <__aeabi_fsub+0x1a0>
 8000bc6:	1b7a      	subs	r2, r7, r5
 8000bc8:	2d00      	cmp	r5, #0
 8000bca:	d100      	bne.n	8000bce <__aeabi_fsub+0x13a>
 8000bcc:	e0aa      	b.n	8000d24 <__aeabi_fsub+0x290>
 8000bce:	2fff      	cmp	r7, #255	; 0xff
 8000bd0:	d100      	bne.n	8000bd4 <__aeabi_fsub+0x140>
 8000bd2:	e0da      	b.n	8000d8a <__aeabi_fsub+0x2f6>
 8000bd4:	2380      	movs	r3, #128	; 0x80
 8000bd6:	4661      	mov	r1, ip
 8000bd8:	04db      	lsls	r3, r3, #19
 8000bda:	4319      	orrs	r1, r3
 8000bdc:	468c      	mov	ip, r1
 8000bde:	2a1b      	cmp	r2, #27
 8000be0:	dc00      	bgt.n	8000be4 <__aeabi_fsub+0x150>
 8000be2:	e0d4      	b.n	8000d8e <__aeabi_fsub+0x2fa>
 8000be4:	2301      	movs	r3, #1
 8000be6:	003d      	movs	r5, r7
 8000be8:	181b      	adds	r3, r3, r0
 8000bea:	e7b5      	b.n	8000b58 <__aeabi_fsub+0xc4>
 8000bec:	27fe      	movs	r7, #254	; 0xfe
 8000bee:	1c6a      	adds	r2, r5, #1
 8000bf0:	4217      	tst	r7, r2
 8000bf2:	d171      	bne.n	8000cd8 <__aeabi_fsub+0x244>
 8000bf4:	2d00      	cmp	r5, #0
 8000bf6:	d000      	beq.n	8000bfa <__aeabi_fsub+0x166>
 8000bf8:	e09e      	b.n	8000d38 <__aeabi_fsub+0x2a4>
 8000bfa:	4663      	mov	r3, ip
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d100      	bne.n	8000c02 <__aeabi_fsub+0x16e>
 8000c00:	e0d5      	b.n	8000dae <__aeabi_fsub+0x31a>
 8000c02:	2200      	movs	r2, #0
 8000c04:	2800      	cmp	r0, #0
 8000c06:	d100      	bne.n	8000c0a <__aeabi_fsub+0x176>
 8000c08:	e78f      	b.n	8000b2a <__aeabi_fsub+0x96>
 8000c0a:	1a1b      	subs	r3, r3, r0
 8000c0c:	015e      	lsls	r6, r3, #5
 8000c0e:	d400      	bmi.n	8000c12 <__aeabi_fsub+0x17e>
 8000c10:	e0d6      	b.n	8000dc0 <__aeabi_fsub+0x32c>
 8000c12:	4663      	mov	r3, ip
 8000c14:	000c      	movs	r4, r1
 8000c16:	1ac3      	subs	r3, r0, r3
 8000c18:	e776      	b.n	8000b08 <__aeabi_fsub+0x74>
 8000c1a:	2800      	cmp	r0, #0
 8000c1c:	d036      	beq.n	8000c8c <__aeabi_fsub+0x1f8>
 8000c1e:	1e51      	subs	r1, r2, #1
 8000c20:	2a01      	cmp	r2, #1
 8000c22:	d100      	bne.n	8000c26 <__aeabi_fsub+0x192>
 8000c24:	e09a      	b.n	8000d5c <__aeabi_fsub+0x2c8>
 8000c26:	2aff      	cmp	r2, #255	; 0xff
 8000c28:	d026      	beq.n	8000c78 <__aeabi_fsub+0x1e4>
 8000c2a:	000a      	movs	r2, r1
 8000c2c:	e78f      	b.n	8000b4e <__aeabi_fsub+0xba>
 8000c2e:	22ff      	movs	r2, #255	; 0xff
 8000c30:	2600      	movs	r6, #0
 8000c32:	e77a      	b.n	8000b2a <__aeabi_fsub+0x96>
 8000c34:	27fe      	movs	r7, #254	; 0xfe
 8000c36:	1c6a      	adds	r2, r5, #1
 8000c38:	4217      	tst	r7, r2
 8000c3a:	d062      	beq.n	8000d02 <__aeabi_fsub+0x26e>
 8000c3c:	2aff      	cmp	r2, #255	; 0xff
 8000c3e:	d0f6      	beq.n	8000c2e <__aeabi_fsub+0x19a>
 8000c40:	0015      	movs	r5, r2
 8000c42:	4460      	add	r0, ip
 8000c44:	0843      	lsrs	r3, r0, #1
 8000c46:	075a      	lsls	r2, r3, #29
 8000c48:	d000      	beq.n	8000c4c <__aeabi_fsub+0x1b8>
 8000c4a:	e75f      	b.n	8000b0c <__aeabi_fsub+0x78>
 8000c4c:	08db      	lsrs	r3, r3, #3
 8000c4e:	2dff      	cmp	r5, #255	; 0xff
 8000c50:	d012      	beq.n	8000c78 <__aeabi_fsub+0x1e4>
 8000c52:	025b      	lsls	r3, r3, #9
 8000c54:	0a5e      	lsrs	r6, r3, #9
 8000c56:	b2ea      	uxtb	r2, r5
 8000c58:	e767      	b.n	8000b2a <__aeabi_fsub+0x96>
 8000c5a:	4662      	mov	r2, ip
 8000c5c:	2a00      	cmp	r2, #0
 8000c5e:	d100      	bne.n	8000c62 <__aeabi_fsub+0x1ce>
 8000c60:	e093      	b.n	8000d8a <__aeabi_fsub+0x2f6>
 8000c62:	2800      	cmp	r0, #0
 8000c64:	d008      	beq.n	8000c78 <__aeabi_fsub+0x1e4>
 8000c66:	2280      	movs	r2, #128	; 0x80
 8000c68:	03d2      	lsls	r2, r2, #15
 8000c6a:	4213      	tst	r3, r2
 8000c6c:	d004      	beq.n	8000c78 <__aeabi_fsub+0x1e4>
 8000c6e:	4640      	mov	r0, r8
 8000c70:	4210      	tst	r0, r2
 8000c72:	d101      	bne.n	8000c78 <__aeabi_fsub+0x1e4>
 8000c74:	000c      	movs	r4, r1
 8000c76:	4643      	mov	r3, r8
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d0d8      	beq.n	8000c2e <__aeabi_fsub+0x19a>
 8000c7c:	2680      	movs	r6, #128	; 0x80
 8000c7e:	03f6      	lsls	r6, r6, #15
 8000c80:	431e      	orrs	r6, r3
 8000c82:	0276      	lsls	r6, r6, #9
 8000c84:	22ff      	movs	r2, #255	; 0xff
 8000c86:	0a76      	lsrs	r6, r6, #9
 8000c88:	e74f      	b.n	8000b2a <__aeabi_fsub+0x96>
 8000c8a:	4643      	mov	r3, r8
 8000c8c:	0015      	movs	r5, r2
 8000c8e:	e7de      	b.n	8000c4e <__aeabi_fsub+0x1ba>
 8000c90:	2220      	movs	r2, #32
 8000c92:	1b40      	subs	r0, r0, r5
 8000c94:	3001      	adds	r0, #1
 8000c96:	1a12      	subs	r2, r2, r0
 8000c98:	0019      	movs	r1, r3
 8000c9a:	4093      	lsls	r3, r2
 8000c9c:	40c1      	lsrs	r1, r0
 8000c9e:	1e5a      	subs	r2, r3, #1
 8000ca0:	4193      	sbcs	r3, r2
 8000ca2:	2500      	movs	r5, #0
 8000ca4:	430b      	orrs	r3, r1
 8000ca6:	e72f      	b.n	8000b08 <__aeabi_fsub+0x74>
 8000ca8:	2320      	movs	r3, #32
 8000caa:	1a9b      	subs	r3, r3, r2
 8000cac:	0001      	movs	r1, r0
 8000cae:	4098      	lsls	r0, r3
 8000cb0:	0003      	movs	r3, r0
 8000cb2:	40d1      	lsrs	r1, r2
 8000cb4:	1e5a      	subs	r2, r3, #1
 8000cb6:	4193      	sbcs	r3, r2
 8000cb8:	430b      	orrs	r3, r1
 8000cba:	e712      	b.n	8000ae2 <__aeabi_fsub+0x4e>
 8000cbc:	2fff      	cmp	r7, #255	; 0xff
 8000cbe:	d0d9      	beq.n	8000c74 <__aeabi_fsub+0x1e0>
 8000cc0:	2380      	movs	r3, #128	; 0x80
 8000cc2:	4664      	mov	r4, ip
 8000cc4:	04db      	lsls	r3, r3, #19
 8000cc6:	431c      	orrs	r4, r3
 8000cc8:	46a4      	mov	ip, r4
 8000cca:	2a1b      	cmp	r2, #27
 8000ccc:	dd52      	ble.n	8000d74 <__aeabi_fsub+0x2e0>
 8000cce:	2301      	movs	r3, #1
 8000cd0:	000c      	movs	r4, r1
 8000cd2:	003d      	movs	r5, r7
 8000cd4:	1ac3      	subs	r3, r0, r3
 8000cd6:	e706      	b.n	8000ae6 <__aeabi_fsub+0x52>
 8000cd8:	4663      	mov	r3, ip
 8000cda:	1a1e      	subs	r6, r3, r0
 8000cdc:	0173      	lsls	r3, r6, #5
 8000cde:	d439      	bmi.n	8000d54 <__aeabi_fsub+0x2c0>
 8000ce0:	2e00      	cmp	r6, #0
 8000ce2:	d000      	beq.n	8000ce6 <__aeabi_fsub+0x252>
 8000ce4:	e704      	b.n	8000af0 <__aeabi_fsub+0x5c>
 8000ce6:	2400      	movs	r4, #0
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2600      	movs	r6, #0
 8000cec:	e71d      	b.n	8000b2a <__aeabi_fsub+0x96>
 8000cee:	2320      	movs	r3, #32
 8000cf0:	1a9b      	subs	r3, r3, r2
 8000cf2:	0001      	movs	r1, r0
 8000cf4:	4098      	lsls	r0, r3
 8000cf6:	0003      	movs	r3, r0
 8000cf8:	40d1      	lsrs	r1, r2
 8000cfa:	1e5a      	subs	r2, r3, #1
 8000cfc:	4193      	sbcs	r3, r2
 8000cfe:	430b      	orrs	r3, r1
 8000d00:	e729      	b.n	8000b56 <__aeabi_fsub+0xc2>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	d1a9      	bne.n	8000c5a <__aeabi_fsub+0x1c6>
 8000d06:	4663      	mov	r3, ip
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d056      	beq.n	8000dba <__aeabi_fsub+0x326>
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2800      	cmp	r0, #0
 8000d10:	d100      	bne.n	8000d14 <__aeabi_fsub+0x280>
 8000d12:	e70a      	b.n	8000b2a <__aeabi_fsub+0x96>
 8000d14:	0003      	movs	r3, r0
 8000d16:	4463      	add	r3, ip
 8000d18:	015a      	lsls	r2, r3, #5
 8000d1a:	d594      	bpl.n	8000c46 <__aeabi_fsub+0x1b2>
 8000d1c:	4a2b      	ldr	r2, [pc, #172]	; (8000dcc <__aeabi_fsub+0x338>)
 8000d1e:	3501      	adds	r5, #1
 8000d20:	4013      	ands	r3, r2
 8000d22:	e790      	b.n	8000c46 <__aeabi_fsub+0x1b2>
 8000d24:	4663      	mov	r3, ip
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d0af      	beq.n	8000c8a <__aeabi_fsub+0x1f6>
 8000d2a:	1e53      	subs	r3, r2, #1
 8000d2c:	2a01      	cmp	r2, #1
 8000d2e:	d015      	beq.n	8000d5c <__aeabi_fsub+0x2c8>
 8000d30:	2aff      	cmp	r2, #255	; 0xff
 8000d32:	d02a      	beq.n	8000d8a <__aeabi_fsub+0x2f6>
 8000d34:	001a      	movs	r2, r3
 8000d36:	e752      	b.n	8000bde <__aeabi_fsub+0x14a>
 8000d38:	4662      	mov	r2, ip
 8000d3a:	2a00      	cmp	r2, #0
 8000d3c:	d191      	bne.n	8000c62 <__aeabi_fsub+0x1ce>
 8000d3e:	2800      	cmp	r0, #0
 8000d40:	d198      	bne.n	8000c74 <__aeabi_fsub+0x1e0>
 8000d42:	2680      	movs	r6, #128	; 0x80
 8000d44:	2400      	movs	r4, #0
 8000d46:	22ff      	movs	r2, #255	; 0xff
 8000d48:	03f6      	lsls	r6, r6, #15
 8000d4a:	e6ee      	b.n	8000b2a <__aeabi_fsub+0x96>
 8000d4c:	000c      	movs	r4, r1
 8000d4e:	4643      	mov	r3, r8
 8000d50:	0015      	movs	r5, r2
 8000d52:	e77c      	b.n	8000c4e <__aeabi_fsub+0x1ba>
 8000d54:	4663      	mov	r3, ip
 8000d56:	000c      	movs	r4, r1
 8000d58:	1ac6      	subs	r6, r0, r3
 8000d5a:	e6c9      	b.n	8000af0 <__aeabi_fsub+0x5c>
 8000d5c:	0003      	movs	r3, r0
 8000d5e:	4463      	add	r3, ip
 8000d60:	2501      	movs	r5, #1
 8000d62:	015a      	lsls	r2, r3, #5
 8000d64:	d400      	bmi.n	8000d68 <__aeabi_fsub+0x2d4>
 8000d66:	e76e      	b.n	8000c46 <__aeabi_fsub+0x1b2>
 8000d68:	2502      	movs	r5, #2
 8000d6a:	e6fa      	b.n	8000b62 <__aeabi_fsub+0xce>
 8000d6c:	4663      	mov	r3, ip
 8000d6e:	2501      	movs	r5, #1
 8000d70:	1a1b      	subs	r3, r3, r0
 8000d72:	e6b8      	b.n	8000ae6 <__aeabi_fsub+0x52>
 8000d74:	4664      	mov	r4, ip
 8000d76:	2320      	movs	r3, #32
 8000d78:	40d4      	lsrs	r4, r2
 8000d7a:	1a9b      	subs	r3, r3, r2
 8000d7c:	4662      	mov	r2, ip
 8000d7e:	409a      	lsls	r2, r3
 8000d80:	0013      	movs	r3, r2
 8000d82:	1e5a      	subs	r2, r3, #1
 8000d84:	4193      	sbcs	r3, r2
 8000d86:	4323      	orrs	r3, r4
 8000d88:	e7a2      	b.n	8000cd0 <__aeabi_fsub+0x23c>
 8000d8a:	4643      	mov	r3, r8
 8000d8c:	e774      	b.n	8000c78 <__aeabi_fsub+0x1e4>
 8000d8e:	4661      	mov	r1, ip
 8000d90:	2320      	movs	r3, #32
 8000d92:	40d1      	lsrs	r1, r2
 8000d94:	1a9b      	subs	r3, r3, r2
 8000d96:	4662      	mov	r2, ip
 8000d98:	409a      	lsls	r2, r3
 8000d9a:	0013      	movs	r3, r2
 8000d9c:	1e5a      	subs	r2, r3, #1
 8000d9e:	4193      	sbcs	r3, r2
 8000da0:	430b      	orrs	r3, r1
 8000da2:	e720      	b.n	8000be6 <__aeabi_fsub+0x152>
 8000da4:	4663      	mov	r3, ip
 8000da6:	000c      	movs	r4, r1
 8000da8:	2501      	movs	r5, #1
 8000daa:	1ac3      	subs	r3, r0, r3
 8000dac:	e69b      	b.n	8000ae6 <__aeabi_fsub+0x52>
 8000dae:	2800      	cmp	r0, #0
 8000db0:	d099      	beq.n	8000ce6 <__aeabi_fsub+0x252>
 8000db2:	000c      	movs	r4, r1
 8000db4:	4646      	mov	r6, r8
 8000db6:	2200      	movs	r2, #0
 8000db8:	e6b7      	b.n	8000b2a <__aeabi_fsub+0x96>
 8000dba:	4646      	mov	r6, r8
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	e6b4      	b.n	8000b2a <__aeabi_fsub+0x96>
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d000      	beq.n	8000dc6 <__aeabi_fsub+0x332>
 8000dc4:	e73f      	b.n	8000c46 <__aeabi_fsub+0x1b2>
 8000dc6:	2400      	movs	r4, #0
 8000dc8:	2600      	movs	r6, #0
 8000dca:	e6ae      	b.n	8000b2a <__aeabi_fsub+0x96>
 8000dcc:	fbffffff 	.word	0xfbffffff
 8000dd0:	7dffffff 	.word	0x7dffffff

08000dd4 <__aeabi_f2iz>:
 8000dd4:	0241      	lsls	r1, r0, #9
 8000dd6:	0042      	lsls	r2, r0, #1
 8000dd8:	0fc3      	lsrs	r3, r0, #31
 8000dda:	0a49      	lsrs	r1, r1, #9
 8000ddc:	2000      	movs	r0, #0
 8000dde:	0e12      	lsrs	r2, r2, #24
 8000de0:	2a7e      	cmp	r2, #126	; 0x7e
 8000de2:	dd03      	ble.n	8000dec <__aeabi_f2iz+0x18>
 8000de4:	2a9d      	cmp	r2, #157	; 0x9d
 8000de6:	dd02      	ble.n	8000dee <__aeabi_f2iz+0x1a>
 8000de8:	4a09      	ldr	r2, [pc, #36]	; (8000e10 <__aeabi_f2iz+0x3c>)
 8000dea:	1898      	adds	r0, r3, r2
 8000dec:	4770      	bx	lr
 8000dee:	2080      	movs	r0, #128	; 0x80
 8000df0:	0400      	lsls	r0, r0, #16
 8000df2:	4301      	orrs	r1, r0
 8000df4:	2a95      	cmp	r2, #149	; 0x95
 8000df6:	dc07      	bgt.n	8000e08 <__aeabi_f2iz+0x34>
 8000df8:	2096      	movs	r0, #150	; 0x96
 8000dfa:	1a82      	subs	r2, r0, r2
 8000dfc:	40d1      	lsrs	r1, r2
 8000dfe:	4248      	negs	r0, r1
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d1f3      	bne.n	8000dec <__aeabi_f2iz+0x18>
 8000e04:	0008      	movs	r0, r1
 8000e06:	e7f1      	b.n	8000dec <__aeabi_f2iz+0x18>
 8000e08:	3a96      	subs	r2, #150	; 0x96
 8000e0a:	4091      	lsls	r1, r2
 8000e0c:	e7f7      	b.n	8000dfe <__aeabi_f2iz+0x2a>
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	7fffffff 	.word	0x7fffffff

08000e14 <__aeabi_i2f>:
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	2800      	cmp	r0, #0
 8000e18:	d013      	beq.n	8000e42 <__aeabi_i2f+0x2e>
 8000e1a:	17c3      	asrs	r3, r0, #31
 8000e1c:	18c5      	adds	r5, r0, r3
 8000e1e:	405d      	eors	r5, r3
 8000e20:	0fc4      	lsrs	r4, r0, #31
 8000e22:	0028      	movs	r0, r5
 8000e24:	f000 ffca 	bl	8001dbc <__clzsi2>
 8000e28:	239e      	movs	r3, #158	; 0x9e
 8000e2a:	0001      	movs	r1, r0
 8000e2c:	1a1b      	subs	r3, r3, r0
 8000e2e:	2b96      	cmp	r3, #150	; 0x96
 8000e30:	dc0f      	bgt.n	8000e52 <__aeabi_i2f+0x3e>
 8000e32:	2808      	cmp	r0, #8
 8000e34:	d031      	beq.n	8000e9a <__aeabi_i2f+0x86>
 8000e36:	3908      	subs	r1, #8
 8000e38:	408d      	lsls	r5, r1
 8000e3a:	026d      	lsls	r5, r5, #9
 8000e3c:	0a6d      	lsrs	r5, r5, #9
 8000e3e:	b2d8      	uxtb	r0, r3
 8000e40:	e002      	b.n	8000e48 <__aeabi_i2f+0x34>
 8000e42:	2400      	movs	r4, #0
 8000e44:	2000      	movs	r0, #0
 8000e46:	2500      	movs	r5, #0
 8000e48:	05c0      	lsls	r0, r0, #23
 8000e4a:	4328      	orrs	r0, r5
 8000e4c:	07e4      	lsls	r4, r4, #31
 8000e4e:	4320      	orrs	r0, r4
 8000e50:	bd70      	pop	{r4, r5, r6, pc}
 8000e52:	2b99      	cmp	r3, #153	; 0x99
 8000e54:	dd0c      	ble.n	8000e70 <__aeabi_i2f+0x5c>
 8000e56:	2205      	movs	r2, #5
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	0028      	movs	r0, r5
 8000e5c:	40d0      	lsrs	r0, r2
 8000e5e:	0002      	movs	r2, r0
 8000e60:	0008      	movs	r0, r1
 8000e62:	301b      	adds	r0, #27
 8000e64:	4085      	lsls	r5, r0
 8000e66:	0028      	movs	r0, r5
 8000e68:	1e45      	subs	r5, r0, #1
 8000e6a:	41a8      	sbcs	r0, r5
 8000e6c:	4302      	orrs	r2, r0
 8000e6e:	0015      	movs	r5, r2
 8000e70:	2905      	cmp	r1, #5
 8000e72:	dc16      	bgt.n	8000ea2 <__aeabi_i2f+0x8e>
 8000e74:	002a      	movs	r2, r5
 8000e76:	480f      	ldr	r0, [pc, #60]	; (8000eb4 <__aeabi_i2f+0xa0>)
 8000e78:	4002      	ands	r2, r0
 8000e7a:	076e      	lsls	r6, r5, #29
 8000e7c:	d009      	beq.n	8000e92 <__aeabi_i2f+0x7e>
 8000e7e:	260f      	movs	r6, #15
 8000e80:	4035      	ands	r5, r6
 8000e82:	2d04      	cmp	r5, #4
 8000e84:	d005      	beq.n	8000e92 <__aeabi_i2f+0x7e>
 8000e86:	3204      	adds	r2, #4
 8000e88:	0155      	lsls	r5, r2, #5
 8000e8a:	d502      	bpl.n	8000e92 <__aeabi_i2f+0x7e>
 8000e8c:	239f      	movs	r3, #159	; 0x9f
 8000e8e:	4002      	ands	r2, r0
 8000e90:	1a5b      	subs	r3, r3, r1
 8000e92:	0192      	lsls	r2, r2, #6
 8000e94:	0a55      	lsrs	r5, r2, #9
 8000e96:	b2d8      	uxtb	r0, r3
 8000e98:	e7d6      	b.n	8000e48 <__aeabi_i2f+0x34>
 8000e9a:	026d      	lsls	r5, r5, #9
 8000e9c:	2096      	movs	r0, #150	; 0x96
 8000e9e:	0a6d      	lsrs	r5, r5, #9
 8000ea0:	e7d2      	b.n	8000e48 <__aeabi_i2f+0x34>
 8000ea2:	1f4a      	subs	r2, r1, #5
 8000ea4:	4095      	lsls	r5, r2
 8000ea6:	002a      	movs	r2, r5
 8000ea8:	4802      	ldr	r0, [pc, #8]	; (8000eb4 <__aeabi_i2f+0xa0>)
 8000eaa:	4002      	ands	r2, r0
 8000eac:	076e      	lsls	r6, r5, #29
 8000eae:	d0f0      	beq.n	8000e92 <__aeabi_i2f+0x7e>
 8000eb0:	e7e5      	b.n	8000e7e <__aeabi_i2f+0x6a>
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	fbffffff 	.word	0xfbffffff

08000eb8 <__aeabi_ui2f>:
 8000eb8:	b570      	push	{r4, r5, r6, lr}
 8000eba:	1e04      	subs	r4, r0, #0
 8000ebc:	d00e      	beq.n	8000edc <__aeabi_ui2f+0x24>
 8000ebe:	f000 ff7d 	bl	8001dbc <__clzsi2>
 8000ec2:	239e      	movs	r3, #158	; 0x9e
 8000ec4:	0001      	movs	r1, r0
 8000ec6:	1a1b      	subs	r3, r3, r0
 8000ec8:	2b96      	cmp	r3, #150	; 0x96
 8000eca:	dc0c      	bgt.n	8000ee6 <__aeabi_ui2f+0x2e>
 8000ecc:	2808      	cmp	r0, #8
 8000ece:	d02c      	beq.n	8000f2a <__aeabi_ui2f+0x72>
 8000ed0:	3908      	subs	r1, #8
 8000ed2:	408c      	lsls	r4, r1
 8000ed4:	0264      	lsls	r4, r4, #9
 8000ed6:	0a64      	lsrs	r4, r4, #9
 8000ed8:	b2d8      	uxtb	r0, r3
 8000eda:	e001      	b.n	8000ee0 <__aeabi_ui2f+0x28>
 8000edc:	2000      	movs	r0, #0
 8000ede:	2400      	movs	r4, #0
 8000ee0:	05c0      	lsls	r0, r0, #23
 8000ee2:	4320      	orrs	r0, r4
 8000ee4:	bd70      	pop	{r4, r5, r6, pc}
 8000ee6:	2b99      	cmp	r3, #153	; 0x99
 8000ee8:	dd0a      	ble.n	8000f00 <__aeabi_ui2f+0x48>
 8000eea:	0002      	movs	r2, r0
 8000eec:	0020      	movs	r0, r4
 8000eee:	321b      	adds	r2, #27
 8000ef0:	4090      	lsls	r0, r2
 8000ef2:	0002      	movs	r2, r0
 8000ef4:	1e50      	subs	r0, r2, #1
 8000ef6:	4182      	sbcs	r2, r0
 8000ef8:	2005      	movs	r0, #5
 8000efa:	1a40      	subs	r0, r0, r1
 8000efc:	40c4      	lsrs	r4, r0
 8000efe:	4314      	orrs	r4, r2
 8000f00:	2905      	cmp	r1, #5
 8000f02:	dc16      	bgt.n	8000f32 <__aeabi_ui2f+0x7a>
 8000f04:	0022      	movs	r2, r4
 8000f06:	480f      	ldr	r0, [pc, #60]	; (8000f44 <__aeabi_ui2f+0x8c>)
 8000f08:	4002      	ands	r2, r0
 8000f0a:	0765      	lsls	r5, r4, #29
 8000f0c:	d009      	beq.n	8000f22 <__aeabi_ui2f+0x6a>
 8000f0e:	250f      	movs	r5, #15
 8000f10:	402c      	ands	r4, r5
 8000f12:	2c04      	cmp	r4, #4
 8000f14:	d005      	beq.n	8000f22 <__aeabi_ui2f+0x6a>
 8000f16:	3204      	adds	r2, #4
 8000f18:	0154      	lsls	r4, r2, #5
 8000f1a:	d502      	bpl.n	8000f22 <__aeabi_ui2f+0x6a>
 8000f1c:	239f      	movs	r3, #159	; 0x9f
 8000f1e:	4002      	ands	r2, r0
 8000f20:	1a5b      	subs	r3, r3, r1
 8000f22:	0192      	lsls	r2, r2, #6
 8000f24:	0a54      	lsrs	r4, r2, #9
 8000f26:	b2d8      	uxtb	r0, r3
 8000f28:	e7da      	b.n	8000ee0 <__aeabi_ui2f+0x28>
 8000f2a:	0264      	lsls	r4, r4, #9
 8000f2c:	2096      	movs	r0, #150	; 0x96
 8000f2e:	0a64      	lsrs	r4, r4, #9
 8000f30:	e7d6      	b.n	8000ee0 <__aeabi_ui2f+0x28>
 8000f32:	1f4a      	subs	r2, r1, #5
 8000f34:	4094      	lsls	r4, r2
 8000f36:	0022      	movs	r2, r4
 8000f38:	4802      	ldr	r0, [pc, #8]	; (8000f44 <__aeabi_ui2f+0x8c>)
 8000f3a:	4002      	ands	r2, r0
 8000f3c:	0765      	lsls	r5, r4, #29
 8000f3e:	d0f0      	beq.n	8000f22 <__aeabi_ui2f+0x6a>
 8000f40:	e7e5      	b.n	8000f0e <__aeabi_ui2f+0x56>
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	fbffffff 	.word	0xfbffffff

08000f48 <__aeabi_dmul>:
 8000f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f4a:	4645      	mov	r5, r8
 8000f4c:	46de      	mov	lr, fp
 8000f4e:	4657      	mov	r7, sl
 8000f50:	464e      	mov	r6, r9
 8000f52:	b5e0      	push	{r5, r6, r7, lr}
 8000f54:	001f      	movs	r7, r3
 8000f56:	030b      	lsls	r3, r1, #12
 8000f58:	0b1b      	lsrs	r3, r3, #12
 8000f5a:	469b      	mov	fp, r3
 8000f5c:	004d      	lsls	r5, r1, #1
 8000f5e:	0fcb      	lsrs	r3, r1, #31
 8000f60:	0004      	movs	r4, r0
 8000f62:	4691      	mov	r9, r2
 8000f64:	4698      	mov	r8, r3
 8000f66:	b087      	sub	sp, #28
 8000f68:	0d6d      	lsrs	r5, r5, #21
 8000f6a:	d100      	bne.n	8000f6e <__aeabi_dmul+0x26>
 8000f6c:	e1cd      	b.n	800130a <__aeabi_dmul+0x3c2>
 8000f6e:	4bce      	ldr	r3, [pc, #824]	; (80012a8 <__aeabi_dmul+0x360>)
 8000f70:	429d      	cmp	r5, r3
 8000f72:	d100      	bne.n	8000f76 <__aeabi_dmul+0x2e>
 8000f74:	e1e9      	b.n	800134a <__aeabi_dmul+0x402>
 8000f76:	465a      	mov	r2, fp
 8000f78:	0f43      	lsrs	r3, r0, #29
 8000f7a:	00d2      	lsls	r2, r2, #3
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	2280      	movs	r2, #128	; 0x80
 8000f80:	0412      	lsls	r2, r2, #16
 8000f82:	431a      	orrs	r2, r3
 8000f84:	00c3      	lsls	r3, r0, #3
 8000f86:	469a      	mov	sl, r3
 8000f88:	4bc8      	ldr	r3, [pc, #800]	; (80012ac <__aeabi_dmul+0x364>)
 8000f8a:	4693      	mov	fp, r2
 8000f8c:	469c      	mov	ip, r3
 8000f8e:	2300      	movs	r3, #0
 8000f90:	2600      	movs	r6, #0
 8000f92:	4465      	add	r5, ip
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	033c      	lsls	r4, r7, #12
 8000f98:	007b      	lsls	r3, r7, #1
 8000f9a:	4648      	mov	r0, r9
 8000f9c:	0b24      	lsrs	r4, r4, #12
 8000f9e:	0d5b      	lsrs	r3, r3, #21
 8000fa0:	0fff      	lsrs	r7, r7, #31
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d100      	bne.n	8000fa8 <__aeabi_dmul+0x60>
 8000fa6:	e189      	b.n	80012bc <__aeabi_dmul+0x374>
 8000fa8:	4abf      	ldr	r2, [pc, #764]	; (80012a8 <__aeabi_dmul+0x360>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d019      	beq.n	8000fe2 <__aeabi_dmul+0x9a>
 8000fae:	0f42      	lsrs	r2, r0, #29
 8000fb0:	00e4      	lsls	r4, r4, #3
 8000fb2:	4322      	orrs	r2, r4
 8000fb4:	2480      	movs	r4, #128	; 0x80
 8000fb6:	0424      	lsls	r4, r4, #16
 8000fb8:	4314      	orrs	r4, r2
 8000fba:	4abc      	ldr	r2, [pc, #752]	; (80012ac <__aeabi_dmul+0x364>)
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4694      	mov	ip, r2
 8000fc0:	4642      	mov	r2, r8
 8000fc2:	4463      	add	r3, ip
 8000fc4:	195b      	adds	r3, r3, r5
 8000fc6:	9301      	str	r3, [sp, #4]
 8000fc8:	9b01      	ldr	r3, [sp, #4]
 8000fca:	407a      	eors	r2, r7
 8000fcc:	3301      	adds	r3, #1
 8000fce:	00c0      	lsls	r0, r0, #3
 8000fd0:	b2d2      	uxtb	r2, r2
 8000fd2:	9302      	str	r3, [sp, #8]
 8000fd4:	2e0a      	cmp	r6, #10
 8000fd6:	dd1c      	ble.n	8001012 <__aeabi_dmul+0xca>
 8000fd8:	003a      	movs	r2, r7
 8000fda:	2e0b      	cmp	r6, #11
 8000fdc:	d05e      	beq.n	800109c <__aeabi_dmul+0x154>
 8000fde:	4647      	mov	r7, r8
 8000fe0:	e056      	b.n	8001090 <__aeabi_dmul+0x148>
 8000fe2:	4649      	mov	r1, r9
 8000fe4:	4bb0      	ldr	r3, [pc, #704]	; (80012a8 <__aeabi_dmul+0x360>)
 8000fe6:	4321      	orrs	r1, r4
 8000fe8:	18eb      	adds	r3, r5, r3
 8000fea:	9301      	str	r3, [sp, #4]
 8000fec:	2900      	cmp	r1, #0
 8000fee:	d12a      	bne.n	8001046 <__aeabi_dmul+0xfe>
 8000ff0:	2080      	movs	r0, #128	; 0x80
 8000ff2:	2202      	movs	r2, #2
 8000ff4:	0100      	lsls	r0, r0, #4
 8000ff6:	002b      	movs	r3, r5
 8000ff8:	4684      	mov	ip, r0
 8000ffa:	4316      	orrs	r6, r2
 8000ffc:	4642      	mov	r2, r8
 8000ffe:	4463      	add	r3, ip
 8001000:	407a      	eors	r2, r7
 8001002:	b2d2      	uxtb	r2, r2
 8001004:	9302      	str	r3, [sp, #8]
 8001006:	2e0a      	cmp	r6, #10
 8001008:	dd00      	ble.n	800100c <__aeabi_dmul+0xc4>
 800100a:	e231      	b.n	8001470 <__aeabi_dmul+0x528>
 800100c:	2000      	movs	r0, #0
 800100e:	2400      	movs	r4, #0
 8001010:	2102      	movs	r1, #2
 8001012:	2e02      	cmp	r6, #2
 8001014:	dc26      	bgt.n	8001064 <__aeabi_dmul+0x11c>
 8001016:	3e01      	subs	r6, #1
 8001018:	2e01      	cmp	r6, #1
 800101a:	d852      	bhi.n	80010c2 <__aeabi_dmul+0x17a>
 800101c:	2902      	cmp	r1, #2
 800101e:	d04c      	beq.n	80010ba <__aeabi_dmul+0x172>
 8001020:	2901      	cmp	r1, #1
 8001022:	d000      	beq.n	8001026 <__aeabi_dmul+0xde>
 8001024:	e118      	b.n	8001258 <__aeabi_dmul+0x310>
 8001026:	2300      	movs	r3, #0
 8001028:	2400      	movs	r4, #0
 800102a:	2500      	movs	r5, #0
 800102c:	051b      	lsls	r3, r3, #20
 800102e:	4323      	orrs	r3, r4
 8001030:	07d2      	lsls	r2, r2, #31
 8001032:	4313      	orrs	r3, r2
 8001034:	0028      	movs	r0, r5
 8001036:	0019      	movs	r1, r3
 8001038:	b007      	add	sp, #28
 800103a:	bcf0      	pop	{r4, r5, r6, r7}
 800103c:	46bb      	mov	fp, r7
 800103e:	46b2      	mov	sl, r6
 8001040:	46a9      	mov	r9, r5
 8001042:	46a0      	mov	r8, r4
 8001044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001046:	2180      	movs	r1, #128	; 0x80
 8001048:	2203      	movs	r2, #3
 800104a:	0109      	lsls	r1, r1, #4
 800104c:	002b      	movs	r3, r5
 800104e:	468c      	mov	ip, r1
 8001050:	4316      	orrs	r6, r2
 8001052:	4642      	mov	r2, r8
 8001054:	4463      	add	r3, ip
 8001056:	407a      	eors	r2, r7
 8001058:	b2d2      	uxtb	r2, r2
 800105a:	9302      	str	r3, [sp, #8]
 800105c:	2e0a      	cmp	r6, #10
 800105e:	dd00      	ble.n	8001062 <__aeabi_dmul+0x11a>
 8001060:	e228      	b.n	80014b4 <__aeabi_dmul+0x56c>
 8001062:	2103      	movs	r1, #3
 8001064:	2501      	movs	r5, #1
 8001066:	40b5      	lsls	r5, r6
 8001068:	46ac      	mov	ip, r5
 800106a:	26a6      	movs	r6, #166	; 0xa6
 800106c:	4663      	mov	r3, ip
 800106e:	00f6      	lsls	r6, r6, #3
 8001070:	4035      	ands	r5, r6
 8001072:	4233      	tst	r3, r6
 8001074:	d10b      	bne.n	800108e <__aeabi_dmul+0x146>
 8001076:	2690      	movs	r6, #144	; 0x90
 8001078:	00b6      	lsls	r6, r6, #2
 800107a:	4233      	tst	r3, r6
 800107c:	d118      	bne.n	80010b0 <__aeabi_dmul+0x168>
 800107e:	3eb9      	subs	r6, #185	; 0xb9
 8001080:	3eff      	subs	r6, #255	; 0xff
 8001082:	421e      	tst	r6, r3
 8001084:	d01d      	beq.n	80010c2 <__aeabi_dmul+0x17a>
 8001086:	46a3      	mov	fp, r4
 8001088:	4682      	mov	sl, r0
 800108a:	9100      	str	r1, [sp, #0]
 800108c:	e000      	b.n	8001090 <__aeabi_dmul+0x148>
 800108e:	0017      	movs	r7, r2
 8001090:	9900      	ldr	r1, [sp, #0]
 8001092:	003a      	movs	r2, r7
 8001094:	2902      	cmp	r1, #2
 8001096:	d010      	beq.n	80010ba <__aeabi_dmul+0x172>
 8001098:	465c      	mov	r4, fp
 800109a:	4650      	mov	r0, sl
 800109c:	2903      	cmp	r1, #3
 800109e:	d1bf      	bne.n	8001020 <__aeabi_dmul+0xd8>
 80010a0:	2380      	movs	r3, #128	; 0x80
 80010a2:	031b      	lsls	r3, r3, #12
 80010a4:	431c      	orrs	r4, r3
 80010a6:	0324      	lsls	r4, r4, #12
 80010a8:	0005      	movs	r5, r0
 80010aa:	4b7f      	ldr	r3, [pc, #508]	; (80012a8 <__aeabi_dmul+0x360>)
 80010ac:	0b24      	lsrs	r4, r4, #12
 80010ae:	e7bd      	b.n	800102c <__aeabi_dmul+0xe4>
 80010b0:	2480      	movs	r4, #128	; 0x80
 80010b2:	2200      	movs	r2, #0
 80010b4:	4b7c      	ldr	r3, [pc, #496]	; (80012a8 <__aeabi_dmul+0x360>)
 80010b6:	0324      	lsls	r4, r4, #12
 80010b8:	e7b8      	b.n	800102c <__aeabi_dmul+0xe4>
 80010ba:	2400      	movs	r4, #0
 80010bc:	2500      	movs	r5, #0
 80010be:	4b7a      	ldr	r3, [pc, #488]	; (80012a8 <__aeabi_dmul+0x360>)
 80010c0:	e7b4      	b.n	800102c <__aeabi_dmul+0xe4>
 80010c2:	4653      	mov	r3, sl
 80010c4:	041e      	lsls	r6, r3, #16
 80010c6:	0c36      	lsrs	r6, r6, #16
 80010c8:	0c1f      	lsrs	r7, r3, #16
 80010ca:	0033      	movs	r3, r6
 80010cc:	0c01      	lsrs	r1, r0, #16
 80010ce:	0400      	lsls	r0, r0, #16
 80010d0:	0c00      	lsrs	r0, r0, #16
 80010d2:	4343      	muls	r3, r0
 80010d4:	4698      	mov	r8, r3
 80010d6:	0003      	movs	r3, r0
 80010d8:	437b      	muls	r3, r7
 80010da:	4699      	mov	r9, r3
 80010dc:	0033      	movs	r3, r6
 80010de:	434b      	muls	r3, r1
 80010e0:	469c      	mov	ip, r3
 80010e2:	4643      	mov	r3, r8
 80010e4:	000d      	movs	r5, r1
 80010e6:	0c1b      	lsrs	r3, r3, #16
 80010e8:	469a      	mov	sl, r3
 80010ea:	437d      	muls	r5, r7
 80010ec:	44cc      	add	ip, r9
 80010ee:	44d4      	add	ip, sl
 80010f0:	9500      	str	r5, [sp, #0]
 80010f2:	45e1      	cmp	r9, ip
 80010f4:	d904      	bls.n	8001100 <__aeabi_dmul+0x1b8>
 80010f6:	2380      	movs	r3, #128	; 0x80
 80010f8:	025b      	lsls	r3, r3, #9
 80010fa:	4699      	mov	r9, r3
 80010fc:	444d      	add	r5, r9
 80010fe:	9500      	str	r5, [sp, #0]
 8001100:	4663      	mov	r3, ip
 8001102:	0c1b      	lsrs	r3, r3, #16
 8001104:	001d      	movs	r5, r3
 8001106:	4663      	mov	r3, ip
 8001108:	041b      	lsls	r3, r3, #16
 800110a:	469c      	mov	ip, r3
 800110c:	4643      	mov	r3, r8
 800110e:	041b      	lsls	r3, r3, #16
 8001110:	0c1b      	lsrs	r3, r3, #16
 8001112:	4698      	mov	r8, r3
 8001114:	4663      	mov	r3, ip
 8001116:	4443      	add	r3, r8
 8001118:	9303      	str	r3, [sp, #12]
 800111a:	0c23      	lsrs	r3, r4, #16
 800111c:	4698      	mov	r8, r3
 800111e:	0033      	movs	r3, r6
 8001120:	0424      	lsls	r4, r4, #16
 8001122:	0c24      	lsrs	r4, r4, #16
 8001124:	4363      	muls	r3, r4
 8001126:	469c      	mov	ip, r3
 8001128:	0023      	movs	r3, r4
 800112a:	437b      	muls	r3, r7
 800112c:	4699      	mov	r9, r3
 800112e:	4643      	mov	r3, r8
 8001130:	435e      	muls	r6, r3
 8001132:	435f      	muls	r7, r3
 8001134:	444e      	add	r6, r9
 8001136:	4663      	mov	r3, ip
 8001138:	46b2      	mov	sl, r6
 800113a:	0c1e      	lsrs	r6, r3, #16
 800113c:	4456      	add	r6, sl
 800113e:	45b1      	cmp	r9, r6
 8001140:	d903      	bls.n	800114a <__aeabi_dmul+0x202>
 8001142:	2380      	movs	r3, #128	; 0x80
 8001144:	025b      	lsls	r3, r3, #9
 8001146:	4699      	mov	r9, r3
 8001148:	444f      	add	r7, r9
 800114a:	0c33      	lsrs	r3, r6, #16
 800114c:	4699      	mov	r9, r3
 800114e:	003b      	movs	r3, r7
 8001150:	444b      	add	r3, r9
 8001152:	9305      	str	r3, [sp, #20]
 8001154:	4663      	mov	r3, ip
 8001156:	46ac      	mov	ip, r5
 8001158:	041f      	lsls	r7, r3, #16
 800115a:	0c3f      	lsrs	r7, r7, #16
 800115c:	0436      	lsls	r6, r6, #16
 800115e:	19f6      	adds	r6, r6, r7
 8001160:	44b4      	add	ip, r6
 8001162:	4663      	mov	r3, ip
 8001164:	9304      	str	r3, [sp, #16]
 8001166:	465b      	mov	r3, fp
 8001168:	0c1b      	lsrs	r3, r3, #16
 800116a:	469c      	mov	ip, r3
 800116c:	465b      	mov	r3, fp
 800116e:	041f      	lsls	r7, r3, #16
 8001170:	0c3f      	lsrs	r7, r7, #16
 8001172:	003b      	movs	r3, r7
 8001174:	4343      	muls	r3, r0
 8001176:	4699      	mov	r9, r3
 8001178:	4663      	mov	r3, ip
 800117a:	4343      	muls	r3, r0
 800117c:	469a      	mov	sl, r3
 800117e:	464b      	mov	r3, r9
 8001180:	4660      	mov	r0, ip
 8001182:	0c1b      	lsrs	r3, r3, #16
 8001184:	469b      	mov	fp, r3
 8001186:	4348      	muls	r0, r1
 8001188:	4379      	muls	r1, r7
 800118a:	4451      	add	r1, sl
 800118c:	4459      	add	r1, fp
 800118e:	458a      	cmp	sl, r1
 8001190:	d903      	bls.n	800119a <__aeabi_dmul+0x252>
 8001192:	2380      	movs	r3, #128	; 0x80
 8001194:	025b      	lsls	r3, r3, #9
 8001196:	469a      	mov	sl, r3
 8001198:	4450      	add	r0, sl
 800119a:	0c0b      	lsrs	r3, r1, #16
 800119c:	469a      	mov	sl, r3
 800119e:	464b      	mov	r3, r9
 80011a0:	041b      	lsls	r3, r3, #16
 80011a2:	0c1b      	lsrs	r3, r3, #16
 80011a4:	4699      	mov	r9, r3
 80011a6:	003b      	movs	r3, r7
 80011a8:	4363      	muls	r3, r4
 80011aa:	0409      	lsls	r1, r1, #16
 80011ac:	4645      	mov	r5, r8
 80011ae:	4449      	add	r1, r9
 80011b0:	4699      	mov	r9, r3
 80011b2:	4663      	mov	r3, ip
 80011b4:	435c      	muls	r4, r3
 80011b6:	436b      	muls	r3, r5
 80011b8:	469c      	mov	ip, r3
 80011ba:	464b      	mov	r3, r9
 80011bc:	0c1b      	lsrs	r3, r3, #16
 80011be:	4698      	mov	r8, r3
 80011c0:	436f      	muls	r7, r5
 80011c2:	193f      	adds	r7, r7, r4
 80011c4:	4447      	add	r7, r8
 80011c6:	4450      	add	r0, sl
 80011c8:	42bc      	cmp	r4, r7
 80011ca:	d903      	bls.n	80011d4 <__aeabi_dmul+0x28c>
 80011cc:	2380      	movs	r3, #128	; 0x80
 80011ce:	025b      	lsls	r3, r3, #9
 80011d0:	4698      	mov	r8, r3
 80011d2:	44c4      	add	ip, r8
 80011d4:	9b04      	ldr	r3, [sp, #16]
 80011d6:	9d00      	ldr	r5, [sp, #0]
 80011d8:	4698      	mov	r8, r3
 80011da:	4445      	add	r5, r8
 80011dc:	42b5      	cmp	r5, r6
 80011de:	41b6      	sbcs	r6, r6
 80011e0:	4273      	negs	r3, r6
 80011e2:	4698      	mov	r8, r3
 80011e4:	464b      	mov	r3, r9
 80011e6:	041e      	lsls	r6, r3, #16
 80011e8:	9b05      	ldr	r3, [sp, #20]
 80011ea:	043c      	lsls	r4, r7, #16
 80011ec:	4699      	mov	r9, r3
 80011ee:	0c36      	lsrs	r6, r6, #16
 80011f0:	19a4      	adds	r4, r4, r6
 80011f2:	444c      	add	r4, r9
 80011f4:	46a1      	mov	r9, r4
 80011f6:	4683      	mov	fp, r0
 80011f8:	186e      	adds	r6, r5, r1
 80011fa:	44c1      	add	r9, r8
 80011fc:	428e      	cmp	r6, r1
 80011fe:	4189      	sbcs	r1, r1
 8001200:	44cb      	add	fp, r9
 8001202:	465d      	mov	r5, fp
 8001204:	4249      	negs	r1, r1
 8001206:	186d      	adds	r5, r5, r1
 8001208:	429c      	cmp	r4, r3
 800120a:	41a4      	sbcs	r4, r4
 800120c:	45c1      	cmp	r9, r8
 800120e:	419b      	sbcs	r3, r3
 8001210:	4583      	cmp	fp, r0
 8001212:	4180      	sbcs	r0, r0
 8001214:	428d      	cmp	r5, r1
 8001216:	4189      	sbcs	r1, r1
 8001218:	425b      	negs	r3, r3
 800121a:	4264      	negs	r4, r4
 800121c:	431c      	orrs	r4, r3
 800121e:	4240      	negs	r0, r0
 8001220:	9b03      	ldr	r3, [sp, #12]
 8001222:	4249      	negs	r1, r1
 8001224:	4301      	orrs	r1, r0
 8001226:	0270      	lsls	r0, r6, #9
 8001228:	0c3f      	lsrs	r7, r7, #16
 800122a:	4318      	orrs	r0, r3
 800122c:	19e4      	adds	r4, r4, r7
 800122e:	1e47      	subs	r7, r0, #1
 8001230:	41b8      	sbcs	r0, r7
 8001232:	1864      	adds	r4, r4, r1
 8001234:	4464      	add	r4, ip
 8001236:	0df6      	lsrs	r6, r6, #23
 8001238:	0261      	lsls	r1, r4, #9
 800123a:	4330      	orrs	r0, r6
 800123c:	0dec      	lsrs	r4, r5, #23
 800123e:	026e      	lsls	r6, r5, #9
 8001240:	430c      	orrs	r4, r1
 8001242:	4330      	orrs	r0, r6
 8001244:	01c9      	lsls	r1, r1, #7
 8001246:	d400      	bmi.n	800124a <__aeabi_dmul+0x302>
 8001248:	e0f1      	b.n	800142e <__aeabi_dmul+0x4e6>
 800124a:	2101      	movs	r1, #1
 800124c:	0843      	lsrs	r3, r0, #1
 800124e:	4001      	ands	r1, r0
 8001250:	430b      	orrs	r3, r1
 8001252:	07e0      	lsls	r0, r4, #31
 8001254:	4318      	orrs	r0, r3
 8001256:	0864      	lsrs	r4, r4, #1
 8001258:	4915      	ldr	r1, [pc, #84]	; (80012b0 <__aeabi_dmul+0x368>)
 800125a:	9b02      	ldr	r3, [sp, #8]
 800125c:	468c      	mov	ip, r1
 800125e:	4463      	add	r3, ip
 8001260:	2b00      	cmp	r3, #0
 8001262:	dc00      	bgt.n	8001266 <__aeabi_dmul+0x31e>
 8001264:	e097      	b.n	8001396 <__aeabi_dmul+0x44e>
 8001266:	0741      	lsls	r1, r0, #29
 8001268:	d009      	beq.n	800127e <__aeabi_dmul+0x336>
 800126a:	210f      	movs	r1, #15
 800126c:	4001      	ands	r1, r0
 800126e:	2904      	cmp	r1, #4
 8001270:	d005      	beq.n	800127e <__aeabi_dmul+0x336>
 8001272:	1d01      	adds	r1, r0, #4
 8001274:	4281      	cmp	r1, r0
 8001276:	4180      	sbcs	r0, r0
 8001278:	4240      	negs	r0, r0
 800127a:	1824      	adds	r4, r4, r0
 800127c:	0008      	movs	r0, r1
 800127e:	01e1      	lsls	r1, r4, #7
 8001280:	d506      	bpl.n	8001290 <__aeabi_dmul+0x348>
 8001282:	2180      	movs	r1, #128	; 0x80
 8001284:	00c9      	lsls	r1, r1, #3
 8001286:	468c      	mov	ip, r1
 8001288:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <__aeabi_dmul+0x36c>)
 800128a:	401c      	ands	r4, r3
 800128c:	9b02      	ldr	r3, [sp, #8]
 800128e:	4463      	add	r3, ip
 8001290:	4909      	ldr	r1, [pc, #36]	; (80012b8 <__aeabi_dmul+0x370>)
 8001292:	428b      	cmp	r3, r1
 8001294:	dd00      	ble.n	8001298 <__aeabi_dmul+0x350>
 8001296:	e710      	b.n	80010ba <__aeabi_dmul+0x172>
 8001298:	0761      	lsls	r1, r4, #29
 800129a:	08c5      	lsrs	r5, r0, #3
 800129c:	0264      	lsls	r4, r4, #9
 800129e:	055b      	lsls	r3, r3, #21
 80012a0:	430d      	orrs	r5, r1
 80012a2:	0b24      	lsrs	r4, r4, #12
 80012a4:	0d5b      	lsrs	r3, r3, #21
 80012a6:	e6c1      	b.n	800102c <__aeabi_dmul+0xe4>
 80012a8:	000007ff 	.word	0x000007ff
 80012ac:	fffffc01 	.word	0xfffffc01
 80012b0:	000003ff 	.word	0x000003ff
 80012b4:	feffffff 	.word	0xfeffffff
 80012b8:	000007fe 	.word	0x000007fe
 80012bc:	464b      	mov	r3, r9
 80012be:	4323      	orrs	r3, r4
 80012c0:	d059      	beq.n	8001376 <__aeabi_dmul+0x42e>
 80012c2:	2c00      	cmp	r4, #0
 80012c4:	d100      	bne.n	80012c8 <__aeabi_dmul+0x380>
 80012c6:	e0a3      	b.n	8001410 <__aeabi_dmul+0x4c8>
 80012c8:	0020      	movs	r0, r4
 80012ca:	f000 fd77 	bl	8001dbc <__clzsi2>
 80012ce:	0001      	movs	r1, r0
 80012d0:	0003      	movs	r3, r0
 80012d2:	390b      	subs	r1, #11
 80012d4:	221d      	movs	r2, #29
 80012d6:	1a52      	subs	r2, r2, r1
 80012d8:	4649      	mov	r1, r9
 80012da:	0018      	movs	r0, r3
 80012dc:	40d1      	lsrs	r1, r2
 80012de:	464a      	mov	r2, r9
 80012e0:	3808      	subs	r0, #8
 80012e2:	4082      	lsls	r2, r0
 80012e4:	4084      	lsls	r4, r0
 80012e6:	0010      	movs	r0, r2
 80012e8:	430c      	orrs	r4, r1
 80012ea:	4a74      	ldr	r2, [pc, #464]	; (80014bc <__aeabi_dmul+0x574>)
 80012ec:	1aeb      	subs	r3, r5, r3
 80012ee:	4694      	mov	ip, r2
 80012f0:	4642      	mov	r2, r8
 80012f2:	4463      	add	r3, ip
 80012f4:	9301      	str	r3, [sp, #4]
 80012f6:	9b01      	ldr	r3, [sp, #4]
 80012f8:	407a      	eors	r2, r7
 80012fa:	3301      	adds	r3, #1
 80012fc:	2100      	movs	r1, #0
 80012fe:	b2d2      	uxtb	r2, r2
 8001300:	9302      	str	r3, [sp, #8]
 8001302:	2e0a      	cmp	r6, #10
 8001304:	dd00      	ble.n	8001308 <__aeabi_dmul+0x3c0>
 8001306:	e667      	b.n	8000fd8 <__aeabi_dmul+0x90>
 8001308:	e683      	b.n	8001012 <__aeabi_dmul+0xca>
 800130a:	465b      	mov	r3, fp
 800130c:	4303      	orrs	r3, r0
 800130e:	469a      	mov	sl, r3
 8001310:	d02a      	beq.n	8001368 <__aeabi_dmul+0x420>
 8001312:	465b      	mov	r3, fp
 8001314:	2b00      	cmp	r3, #0
 8001316:	d06d      	beq.n	80013f4 <__aeabi_dmul+0x4ac>
 8001318:	4658      	mov	r0, fp
 800131a:	f000 fd4f 	bl	8001dbc <__clzsi2>
 800131e:	0001      	movs	r1, r0
 8001320:	0003      	movs	r3, r0
 8001322:	390b      	subs	r1, #11
 8001324:	221d      	movs	r2, #29
 8001326:	1a52      	subs	r2, r2, r1
 8001328:	0021      	movs	r1, r4
 800132a:	0018      	movs	r0, r3
 800132c:	465d      	mov	r5, fp
 800132e:	40d1      	lsrs	r1, r2
 8001330:	3808      	subs	r0, #8
 8001332:	4085      	lsls	r5, r0
 8001334:	000a      	movs	r2, r1
 8001336:	4084      	lsls	r4, r0
 8001338:	432a      	orrs	r2, r5
 800133a:	4693      	mov	fp, r2
 800133c:	46a2      	mov	sl, r4
 800133e:	4d5f      	ldr	r5, [pc, #380]	; (80014bc <__aeabi_dmul+0x574>)
 8001340:	2600      	movs	r6, #0
 8001342:	1aed      	subs	r5, r5, r3
 8001344:	2300      	movs	r3, #0
 8001346:	9300      	str	r3, [sp, #0]
 8001348:	e625      	b.n	8000f96 <__aeabi_dmul+0x4e>
 800134a:	465b      	mov	r3, fp
 800134c:	4303      	orrs	r3, r0
 800134e:	469a      	mov	sl, r3
 8001350:	d105      	bne.n	800135e <__aeabi_dmul+0x416>
 8001352:	2300      	movs	r3, #0
 8001354:	469b      	mov	fp, r3
 8001356:	3302      	adds	r3, #2
 8001358:	2608      	movs	r6, #8
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	e61b      	b.n	8000f96 <__aeabi_dmul+0x4e>
 800135e:	2303      	movs	r3, #3
 8001360:	4682      	mov	sl, r0
 8001362:	260c      	movs	r6, #12
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	e616      	b.n	8000f96 <__aeabi_dmul+0x4e>
 8001368:	2300      	movs	r3, #0
 800136a:	469b      	mov	fp, r3
 800136c:	3301      	adds	r3, #1
 800136e:	2604      	movs	r6, #4
 8001370:	2500      	movs	r5, #0
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	e60f      	b.n	8000f96 <__aeabi_dmul+0x4e>
 8001376:	4642      	mov	r2, r8
 8001378:	3301      	adds	r3, #1
 800137a:	9501      	str	r5, [sp, #4]
 800137c:	431e      	orrs	r6, r3
 800137e:	9b01      	ldr	r3, [sp, #4]
 8001380:	407a      	eors	r2, r7
 8001382:	3301      	adds	r3, #1
 8001384:	2400      	movs	r4, #0
 8001386:	2000      	movs	r0, #0
 8001388:	2101      	movs	r1, #1
 800138a:	b2d2      	uxtb	r2, r2
 800138c:	9302      	str	r3, [sp, #8]
 800138e:	2e0a      	cmp	r6, #10
 8001390:	dd00      	ble.n	8001394 <__aeabi_dmul+0x44c>
 8001392:	e621      	b.n	8000fd8 <__aeabi_dmul+0x90>
 8001394:	e63d      	b.n	8001012 <__aeabi_dmul+0xca>
 8001396:	2101      	movs	r1, #1
 8001398:	1ac9      	subs	r1, r1, r3
 800139a:	2938      	cmp	r1, #56	; 0x38
 800139c:	dd00      	ble.n	80013a0 <__aeabi_dmul+0x458>
 800139e:	e642      	b.n	8001026 <__aeabi_dmul+0xde>
 80013a0:	291f      	cmp	r1, #31
 80013a2:	dd47      	ble.n	8001434 <__aeabi_dmul+0x4ec>
 80013a4:	261f      	movs	r6, #31
 80013a6:	0025      	movs	r5, r4
 80013a8:	4276      	negs	r6, r6
 80013aa:	1af3      	subs	r3, r6, r3
 80013ac:	40dd      	lsrs	r5, r3
 80013ae:	002b      	movs	r3, r5
 80013b0:	2920      	cmp	r1, #32
 80013b2:	d005      	beq.n	80013c0 <__aeabi_dmul+0x478>
 80013b4:	4942      	ldr	r1, [pc, #264]	; (80014c0 <__aeabi_dmul+0x578>)
 80013b6:	9d02      	ldr	r5, [sp, #8]
 80013b8:	468c      	mov	ip, r1
 80013ba:	4465      	add	r5, ip
 80013bc:	40ac      	lsls	r4, r5
 80013be:	4320      	orrs	r0, r4
 80013c0:	1e41      	subs	r1, r0, #1
 80013c2:	4188      	sbcs	r0, r1
 80013c4:	4318      	orrs	r0, r3
 80013c6:	2307      	movs	r3, #7
 80013c8:	001d      	movs	r5, r3
 80013ca:	2400      	movs	r4, #0
 80013cc:	4005      	ands	r5, r0
 80013ce:	4203      	tst	r3, r0
 80013d0:	d04a      	beq.n	8001468 <__aeabi_dmul+0x520>
 80013d2:	230f      	movs	r3, #15
 80013d4:	2400      	movs	r4, #0
 80013d6:	4003      	ands	r3, r0
 80013d8:	2b04      	cmp	r3, #4
 80013da:	d042      	beq.n	8001462 <__aeabi_dmul+0x51a>
 80013dc:	1d03      	adds	r3, r0, #4
 80013de:	4283      	cmp	r3, r0
 80013e0:	4180      	sbcs	r0, r0
 80013e2:	4240      	negs	r0, r0
 80013e4:	1824      	adds	r4, r4, r0
 80013e6:	0018      	movs	r0, r3
 80013e8:	0223      	lsls	r3, r4, #8
 80013ea:	d53a      	bpl.n	8001462 <__aeabi_dmul+0x51a>
 80013ec:	2301      	movs	r3, #1
 80013ee:	2400      	movs	r4, #0
 80013f0:	2500      	movs	r5, #0
 80013f2:	e61b      	b.n	800102c <__aeabi_dmul+0xe4>
 80013f4:	f000 fce2 	bl	8001dbc <__clzsi2>
 80013f8:	0001      	movs	r1, r0
 80013fa:	0003      	movs	r3, r0
 80013fc:	3115      	adds	r1, #21
 80013fe:	3320      	adds	r3, #32
 8001400:	291c      	cmp	r1, #28
 8001402:	dd8f      	ble.n	8001324 <__aeabi_dmul+0x3dc>
 8001404:	3808      	subs	r0, #8
 8001406:	2200      	movs	r2, #0
 8001408:	4084      	lsls	r4, r0
 800140a:	4692      	mov	sl, r2
 800140c:	46a3      	mov	fp, r4
 800140e:	e796      	b.n	800133e <__aeabi_dmul+0x3f6>
 8001410:	f000 fcd4 	bl	8001dbc <__clzsi2>
 8001414:	0001      	movs	r1, r0
 8001416:	0003      	movs	r3, r0
 8001418:	3115      	adds	r1, #21
 800141a:	3320      	adds	r3, #32
 800141c:	291c      	cmp	r1, #28
 800141e:	dc00      	bgt.n	8001422 <__aeabi_dmul+0x4da>
 8001420:	e758      	b.n	80012d4 <__aeabi_dmul+0x38c>
 8001422:	0002      	movs	r2, r0
 8001424:	464c      	mov	r4, r9
 8001426:	3a08      	subs	r2, #8
 8001428:	2000      	movs	r0, #0
 800142a:	4094      	lsls	r4, r2
 800142c:	e75d      	b.n	80012ea <__aeabi_dmul+0x3a2>
 800142e:	9b01      	ldr	r3, [sp, #4]
 8001430:	9302      	str	r3, [sp, #8]
 8001432:	e711      	b.n	8001258 <__aeabi_dmul+0x310>
 8001434:	4b23      	ldr	r3, [pc, #140]	; (80014c4 <__aeabi_dmul+0x57c>)
 8001436:	0026      	movs	r6, r4
 8001438:	469c      	mov	ip, r3
 800143a:	0003      	movs	r3, r0
 800143c:	9d02      	ldr	r5, [sp, #8]
 800143e:	40cb      	lsrs	r3, r1
 8001440:	4465      	add	r5, ip
 8001442:	40ae      	lsls	r6, r5
 8001444:	431e      	orrs	r6, r3
 8001446:	0003      	movs	r3, r0
 8001448:	40ab      	lsls	r3, r5
 800144a:	1e58      	subs	r0, r3, #1
 800144c:	4183      	sbcs	r3, r0
 800144e:	0030      	movs	r0, r6
 8001450:	4318      	orrs	r0, r3
 8001452:	40cc      	lsrs	r4, r1
 8001454:	0743      	lsls	r3, r0, #29
 8001456:	d0c7      	beq.n	80013e8 <__aeabi_dmul+0x4a0>
 8001458:	230f      	movs	r3, #15
 800145a:	4003      	ands	r3, r0
 800145c:	2b04      	cmp	r3, #4
 800145e:	d1bd      	bne.n	80013dc <__aeabi_dmul+0x494>
 8001460:	e7c2      	b.n	80013e8 <__aeabi_dmul+0x4a0>
 8001462:	0765      	lsls	r5, r4, #29
 8001464:	0264      	lsls	r4, r4, #9
 8001466:	0b24      	lsrs	r4, r4, #12
 8001468:	08c0      	lsrs	r0, r0, #3
 800146a:	2300      	movs	r3, #0
 800146c:	4305      	orrs	r5, r0
 800146e:	e5dd      	b.n	800102c <__aeabi_dmul+0xe4>
 8001470:	2500      	movs	r5, #0
 8001472:	2302      	movs	r3, #2
 8001474:	2e0f      	cmp	r6, #15
 8001476:	d10c      	bne.n	8001492 <__aeabi_dmul+0x54a>
 8001478:	2480      	movs	r4, #128	; 0x80
 800147a:	465b      	mov	r3, fp
 800147c:	0324      	lsls	r4, r4, #12
 800147e:	4223      	tst	r3, r4
 8001480:	d00e      	beq.n	80014a0 <__aeabi_dmul+0x558>
 8001482:	4221      	tst	r1, r4
 8001484:	d10c      	bne.n	80014a0 <__aeabi_dmul+0x558>
 8001486:	430c      	orrs	r4, r1
 8001488:	0324      	lsls	r4, r4, #12
 800148a:	003a      	movs	r2, r7
 800148c:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <__aeabi_dmul+0x580>)
 800148e:	0b24      	lsrs	r4, r4, #12
 8001490:	e5cc      	b.n	800102c <__aeabi_dmul+0xe4>
 8001492:	2e0b      	cmp	r6, #11
 8001494:	d000      	beq.n	8001498 <__aeabi_dmul+0x550>
 8001496:	e5a2      	b.n	8000fde <__aeabi_dmul+0x96>
 8001498:	468b      	mov	fp, r1
 800149a:	46aa      	mov	sl, r5
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	e5f7      	b.n	8001090 <__aeabi_dmul+0x148>
 80014a0:	2480      	movs	r4, #128	; 0x80
 80014a2:	465b      	mov	r3, fp
 80014a4:	0324      	lsls	r4, r4, #12
 80014a6:	431c      	orrs	r4, r3
 80014a8:	0324      	lsls	r4, r4, #12
 80014aa:	4642      	mov	r2, r8
 80014ac:	4655      	mov	r5, sl
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <__aeabi_dmul+0x580>)
 80014b0:	0b24      	lsrs	r4, r4, #12
 80014b2:	e5bb      	b.n	800102c <__aeabi_dmul+0xe4>
 80014b4:	464d      	mov	r5, r9
 80014b6:	0021      	movs	r1, r4
 80014b8:	2303      	movs	r3, #3
 80014ba:	e7db      	b.n	8001474 <__aeabi_dmul+0x52c>
 80014bc:	fffffc0d 	.word	0xfffffc0d
 80014c0:	0000043e 	.word	0x0000043e
 80014c4:	0000041e 	.word	0x0000041e
 80014c8:	000007ff 	.word	0x000007ff

080014cc <__aeabi_dsub>:
 80014cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ce:	4657      	mov	r7, sl
 80014d0:	464e      	mov	r6, r9
 80014d2:	4645      	mov	r5, r8
 80014d4:	46de      	mov	lr, fp
 80014d6:	b5e0      	push	{r5, r6, r7, lr}
 80014d8:	000d      	movs	r5, r1
 80014da:	0004      	movs	r4, r0
 80014dc:	0019      	movs	r1, r3
 80014de:	0010      	movs	r0, r2
 80014e0:	032b      	lsls	r3, r5, #12
 80014e2:	0a5b      	lsrs	r3, r3, #9
 80014e4:	0f62      	lsrs	r2, r4, #29
 80014e6:	431a      	orrs	r2, r3
 80014e8:	00e3      	lsls	r3, r4, #3
 80014ea:	030c      	lsls	r4, r1, #12
 80014ec:	0a64      	lsrs	r4, r4, #9
 80014ee:	0f47      	lsrs	r7, r0, #29
 80014f0:	4327      	orrs	r7, r4
 80014f2:	4cd0      	ldr	r4, [pc, #832]	; (8001834 <__aeabi_dsub+0x368>)
 80014f4:	006e      	lsls	r6, r5, #1
 80014f6:	4691      	mov	r9, r2
 80014f8:	b083      	sub	sp, #12
 80014fa:	004a      	lsls	r2, r1, #1
 80014fc:	00c0      	lsls	r0, r0, #3
 80014fe:	4698      	mov	r8, r3
 8001500:	46a2      	mov	sl, r4
 8001502:	0d76      	lsrs	r6, r6, #21
 8001504:	0fed      	lsrs	r5, r5, #31
 8001506:	0d52      	lsrs	r2, r2, #21
 8001508:	0fc9      	lsrs	r1, r1, #31
 800150a:	9001      	str	r0, [sp, #4]
 800150c:	42a2      	cmp	r2, r4
 800150e:	d100      	bne.n	8001512 <__aeabi_dsub+0x46>
 8001510:	e0b9      	b.n	8001686 <__aeabi_dsub+0x1ba>
 8001512:	2401      	movs	r4, #1
 8001514:	4061      	eors	r1, r4
 8001516:	468b      	mov	fp, r1
 8001518:	428d      	cmp	r5, r1
 800151a:	d100      	bne.n	800151e <__aeabi_dsub+0x52>
 800151c:	e08d      	b.n	800163a <__aeabi_dsub+0x16e>
 800151e:	1ab4      	subs	r4, r6, r2
 8001520:	46a4      	mov	ip, r4
 8001522:	2c00      	cmp	r4, #0
 8001524:	dc00      	bgt.n	8001528 <__aeabi_dsub+0x5c>
 8001526:	e0b7      	b.n	8001698 <__aeabi_dsub+0x1cc>
 8001528:	2a00      	cmp	r2, #0
 800152a:	d100      	bne.n	800152e <__aeabi_dsub+0x62>
 800152c:	e0cb      	b.n	80016c6 <__aeabi_dsub+0x1fa>
 800152e:	4ac1      	ldr	r2, [pc, #772]	; (8001834 <__aeabi_dsub+0x368>)
 8001530:	4296      	cmp	r6, r2
 8001532:	d100      	bne.n	8001536 <__aeabi_dsub+0x6a>
 8001534:	e186      	b.n	8001844 <__aeabi_dsub+0x378>
 8001536:	2280      	movs	r2, #128	; 0x80
 8001538:	0412      	lsls	r2, r2, #16
 800153a:	4317      	orrs	r7, r2
 800153c:	4662      	mov	r2, ip
 800153e:	2a38      	cmp	r2, #56	; 0x38
 8001540:	dd00      	ble.n	8001544 <__aeabi_dsub+0x78>
 8001542:	e1a4      	b.n	800188e <__aeabi_dsub+0x3c2>
 8001544:	2a1f      	cmp	r2, #31
 8001546:	dd00      	ble.n	800154a <__aeabi_dsub+0x7e>
 8001548:	e21d      	b.n	8001986 <__aeabi_dsub+0x4ba>
 800154a:	4661      	mov	r1, ip
 800154c:	2220      	movs	r2, #32
 800154e:	003c      	movs	r4, r7
 8001550:	1a52      	subs	r2, r2, r1
 8001552:	0001      	movs	r1, r0
 8001554:	4090      	lsls	r0, r2
 8001556:	4094      	lsls	r4, r2
 8001558:	1e42      	subs	r2, r0, #1
 800155a:	4190      	sbcs	r0, r2
 800155c:	4662      	mov	r2, ip
 800155e:	46a0      	mov	r8, r4
 8001560:	4664      	mov	r4, ip
 8001562:	40d7      	lsrs	r7, r2
 8001564:	464a      	mov	r2, r9
 8001566:	40e1      	lsrs	r1, r4
 8001568:	4644      	mov	r4, r8
 800156a:	1bd2      	subs	r2, r2, r7
 800156c:	4691      	mov	r9, r2
 800156e:	430c      	orrs	r4, r1
 8001570:	4304      	orrs	r4, r0
 8001572:	1b1c      	subs	r4, r3, r4
 8001574:	42a3      	cmp	r3, r4
 8001576:	4192      	sbcs	r2, r2
 8001578:	464b      	mov	r3, r9
 800157a:	4252      	negs	r2, r2
 800157c:	1a9b      	subs	r3, r3, r2
 800157e:	469a      	mov	sl, r3
 8001580:	4653      	mov	r3, sl
 8001582:	021b      	lsls	r3, r3, #8
 8001584:	d400      	bmi.n	8001588 <__aeabi_dsub+0xbc>
 8001586:	e12b      	b.n	80017e0 <__aeabi_dsub+0x314>
 8001588:	4653      	mov	r3, sl
 800158a:	025a      	lsls	r2, r3, #9
 800158c:	0a53      	lsrs	r3, r2, #9
 800158e:	469a      	mov	sl, r3
 8001590:	4653      	mov	r3, sl
 8001592:	2b00      	cmp	r3, #0
 8001594:	d100      	bne.n	8001598 <__aeabi_dsub+0xcc>
 8001596:	e166      	b.n	8001866 <__aeabi_dsub+0x39a>
 8001598:	4650      	mov	r0, sl
 800159a:	f000 fc0f 	bl	8001dbc <__clzsi2>
 800159e:	0003      	movs	r3, r0
 80015a0:	3b08      	subs	r3, #8
 80015a2:	2220      	movs	r2, #32
 80015a4:	0020      	movs	r0, r4
 80015a6:	1ad2      	subs	r2, r2, r3
 80015a8:	4651      	mov	r1, sl
 80015aa:	40d0      	lsrs	r0, r2
 80015ac:	4099      	lsls	r1, r3
 80015ae:	0002      	movs	r2, r0
 80015b0:	409c      	lsls	r4, r3
 80015b2:	430a      	orrs	r2, r1
 80015b4:	429e      	cmp	r6, r3
 80015b6:	dd00      	ble.n	80015ba <__aeabi_dsub+0xee>
 80015b8:	e164      	b.n	8001884 <__aeabi_dsub+0x3b8>
 80015ba:	1b9b      	subs	r3, r3, r6
 80015bc:	1c59      	adds	r1, r3, #1
 80015be:	291f      	cmp	r1, #31
 80015c0:	dd00      	ble.n	80015c4 <__aeabi_dsub+0xf8>
 80015c2:	e0fe      	b.n	80017c2 <__aeabi_dsub+0x2f6>
 80015c4:	2320      	movs	r3, #32
 80015c6:	0010      	movs	r0, r2
 80015c8:	0026      	movs	r6, r4
 80015ca:	1a5b      	subs	r3, r3, r1
 80015cc:	409c      	lsls	r4, r3
 80015ce:	4098      	lsls	r0, r3
 80015d0:	40ce      	lsrs	r6, r1
 80015d2:	40ca      	lsrs	r2, r1
 80015d4:	1e63      	subs	r3, r4, #1
 80015d6:	419c      	sbcs	r4, r3
 80015d8:	4330      	orrs	r0, r6
 80015da:	4692      	mov	sl, r2
 80015dc:	2600      	movs	r6, #0
 80015de:	4304      	orrs	r4, r0
 80015e0:	0763      	lsls	r3, r4, #29
 80015e2:	d009      	beq.n	80015f8 <__aeabi_dsub+0x12c>
 80015e4:	230f      	movs	r3, #15
 80015e6:	4023      	ands	r3, r4
 80015e8:	2b04      	cmp	r3, #4
 80015ea:	d005      	beq.n	80015f8 <__aeabi_dsub+0x12c>
 80015ec:	1d23      	adds	r3, r4, #4
 80015ee:	42a3      	cmp	r3, r4
 80015f0:	41a4      	sbcs	r4, r4
 80015f2:	4264      	negs	r4, r4
 80015f4:	44a2      	add	sl, r4
 80015f6:	001c      	movs	r4, r3
 80015f8:	4653      	mov	r3, sl
 80015fa:	021b      	lsls	r3, r3, #8
 80015fc:	d400      	bmi.n	8001600 <__aeabi_dsub+0x134>
 80015fe:	e0f2      	b.n	80017e6 <__aeabi_dsub+0x31a>
 8001600:	4b8c      	ldr	r3, [pc, #560]	; (8001834 <__aeabi_dsub+0x368>)
 8001602:	3601      	adds	r6, #1
 8001604:	429e      	cmp	r6, r3
 8001606:	d100      	bne.n	800160a <__aeabi_dsub+0x13e>
 8001608:	e10f      	b.n	800182a <__aeabi_dsub+0x35e>
 800160a:	4653      	mov	r3, sl
 800160c:	498a      	ldr	r1, [pc, #552]	; (8001838 <__aeabi_dsub+0x36c>)
 800160e:	08e4      	lsrs	r4, r4, #3
 8001610:	400b      	ands	r3, r1
 8001612:	0019      	movs	r1, r3
 8001614:	075b      	lsls	r3, r3, #29
 8001616:	4323      	orrs	r3, r4
 8001618:	0572      	lsls	r2, r6, #21
 800161a:	024c      	lsls	r4, r1, #9
 800161c:	0b24      	lsrs	r4, r4, #12
 800161e:	0d52      	lsrs	r2, r2, #21
 8001620:	0512      	lsls	r2, r2, #20
 8001622:	4322      	orrs	r2, r4
 8001624:	07ed      	lsls	r5, r5, #31
 8001626:	432a      	orrs	r2, r5
 8001628:	0018      	movs	r0, r3
 800162a:	0011      	movs	r1, r2
 800162c:	b003      	add	sp, #12
 800162e:	bcf0      	pop	{r4, r5, r6, r7}
 8001630:	46bb      	mov	fp, r7
 8001632:	46b2      	mov	sl, r6
 8001634:	46a9      	mov	r9, r5
 8001636:	46a0      	mov	r8, r4
 8001638:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800163a:	1ab4      	subs	r4, r6, r2
 800163c:	46a4      	mov	ip, r4
 800163e:	2c00      	cmp	r4, #0
 8001640:	dd59      	ble.n	80016f6 <__aeabi_dsub+0x22a>
 8001642:	2a00      	cmp	r2, #0
 8001644:	d100      	bne.n	8001648 <__aeabi_dsub+0x17c>
 8001646:	e0b0      	b.n	80017aa <__aeabi_dsub+0x2de>
 8001648:	4556      	cmp	r6, sl
 800164a:	d100      	bne.n	800164e <__aeabi_dsub+0x182>
 800164c:	e0fa      	b.n	8001844 <__aeabi_dsub+0x378>
 800164e:	2280      	movs	r2, #128	; 0x80
 8001650:	0412      	lsls	r2, r2, #16
 8001652:	4317      	orrs	r7, r2
 8001654:	4662      	mov	r2, ip
 8001656:	2a38      	cmp	r2, #56	; 0x38
 8001658:	dd00      	ble.n	800165c <__aeabi_dsub+0x190>
 800165a:	e0d4      	b.n	8001806 <__aeabi_dsub+0x33a>
 800165c:	2a1f      	cmp	r2, #31
 800165e:	dc00      	bgt.n	8001662 <__aeabi_dsub+0x196>
 8001660:	e1c0      	b.n	80019e4 <__aeabi_dsub+0x518>
 8001662:	0039      	movs	r1, r7
 8001664:	3a20      	subs	r2, #32
 8001666:	40d1      	lsrs	r1, r2
 8001668:	4662      	mov	r2, ip
 800166a:	2a20      	cmp	r2, #32
 800166c:	d006      	beq.n	800167c <__aeabi_dsub+0x1b0>
 800166e:	4664      	mov	r4, ip
 8001670:	2240      	movs	r2, #64	; 0x40
 8001672:	1b12      	subs	r2, r2, r4
 8001674:	003c      	movs	r4, r7
 8001676:	4094      	lsls	r4, r2
 8001678:	4304      	orrs	r4, r0
 800167a:	9401      	str	r4, [sp, #4]
 800167c:	9c01      	ldr	r4, [sp, #4]
 800167e:	1e62      	subs	r2, r4, #1
 8001680:	4194      	sbcs	r4, r2
 8001682:	430c      	orrs	r4, r1
 8001684:	e0c3      	b.n	800180e <__aeabi_dsub+0x342>
 8001686:	003c      	movs	r4, r7
 8001688:	4304      	orrs	r4, r0
 800168a:	d02b      	beq.n	80016e4 <__aeabi_dsub+0x218>
 800168c:	468b      	mov	fp, r1
 800168e:	428d      	cmp	r5, r1
 8001690:	d02e      	beq.n	80016f0 <__aeabi_dsub+0x224>
 8001692:	4c6a      	ldr	r4, [pc, #424]	; (800183c <__aeabi_dsub+0x370>)
 8001694:	46a4      	mov	ip, r4
 8001696:	44b4      	add	ip, r6
 8001698:	4664      	mov	r4, ip
 800169a:	2c00      	cmp	r4, #0
 800169c:	d05f      	beq.n	800175e <__aeabi_dsub+0x292>
 800169e:	1b94      	subs	r4, r2, r6
 80016a0:	46a4      	mov	ip, r4
 80016a2:	2e00      	cmp	r6, #0
 80016a4:	d000      	beq.n	80016a8 <__aeabi_dsub+0x1dc>
 80016a6:	e120      	b.n	80018ea <__aeabi_dsub+0x41e>
 80016a8:	464c      	mov	r4, r9
 80016aa:	431c      	orrs	r4, r3
 80016ac:	d100      	bne.n	80016b0 <__aeabi_dsub+0x1e4>
 80016ae:	e1c7      	b.n	8001a40 <__aeabi_dsub+0x574>
 80016b0:	4661      	mov	r1, ip
 80016b2:	1e4c      	subs	r4, r1, #1
 80016b4:	2901      	cmp	r1, #1
 80016b6:	d100      	bne.n	80016ba <__aeabi_dsub+0x1ee>
 80016b8:	e223      	b.n	8001b02 <__aeabi_dsub+0x636>
 80016ba:	4d5e      	ldr	r5, [pc, #376]	; (8001834 <__aeabi_dsub+0x368>)
 80016bc:	45ac      	cmp	ip, r5
 80016be:	d100      	bne.n	80016c2 <__aeabi_dsub+0x1f6>
 80016c0:	e1d8      	b.n	8001a74 <__aeabi_dsub+0x5a8>
 80016c2:	46a4      	mov	ip, r4
 80016c4:	e11a      	b.n	80018fc <__aeabi_dsub+0x430>
 80016c6:	003a      	movs	r2, r7
 80016c8:	4302      	orrs	r2, r0
 80016ca:	d100      	bne.n	80016ce <__aeabi_dsub+0x202>
 80016cc:	e0e4      	b.n	8001898 <__aeabi_dsub+0x3cc>
 80016ce:	0022      	movs	r2, r4
 80016d0:	3a01      	subs	r2, #1
 80016d2:	2c01      	cmp	r4, #1
 80016d4:	d100      	bne.n	80016d8 <__aeabi_dsub+0x20c>
 80016d6:	e1c3      	b.n	8001a60 <__aeabi_dsub+0x594>
 80016d8:	4956      	ldr	r1, [pc, #344]	; (8001834 <__aeabi_dsub+0x368>)
 80016da:	428c      	cmp	r4, r1
 80016dc:	d100      	bne.n	80016e0 <__aeabi_dsub+0x214>
 80016de:	e0b1      	b.n	8001844 <__aeabi_dsub+0x378>
 80016e0:	4694      	mov	ip, r2
 80016e2:	e72b      	b.n	800153c <__aeabi_dsub+0x70>
 80016e4:	2401      	movs	r4, #1
 80016e6:	4061      	eors	r1, r4
 80016e8:	468b      	mov	fp, r1
 80016ea:	428d      	cmp	r5, r1
 80016ec:	d000      	beq.n	80016f0 <__aeabi_dsub+0x224>
 80016ee:	e716      	b.n	800151e <__aeabi_dsub+0x52>
 80016f0:	4952      	ldr	r1, [pc, #328]	; (800183c <__aeabi_dsub+0x370>)
 80016f2:	468c      	mov	ip, r1
 80016f4:	44b4      	add	ip, r6
 80016f6:	4664      	mov	r4, ip
 80016f8:	2c00      	cmp	r4, #0
 80016fa:	d100      	bne.n	80016fe <__aeabi_dsub+0x232>
 80016fc:	e0d3      	b.n	80018a6 <__aeabi_dsub+0x3da>
 80016fe:	1b91      	subs	r1, r2, r6
 8001700:	468c      	mov	ip, r1
 8001702:	2e00      	cmp	r6, #0
 8001704:	d100      	bne.n	8001708 <__aeabi_dsub+0x23c>
 8001706:	e15e      	b.n	80019c6 <__aeabi_dsub+0x4fa>
 8001708:	494a      	ldr	r1, [pc, #296]	; (8001834 <__aeabi_dsub+0x368>)
 800170a:	428a      	cmp	r2, r1
 800170c:	d100      	bne.n	8001710 <__aeabi_dsub+0x244>
 800170e:	e1be      	b.n	8001a8e <__aeabi_dsub+0x5c2>
 8001710:	2180      	movs	r1, #128	; 0x80
 8001712:	464c      	mov	r4, r9
 8001714:	0409      	lsls	r1, r1, #16
 8001716:	430c      	orrs	r4, r1
 8001718:	46a1      	mov	r9, r4
 800171a:	4661      	mov	r1, ip
 800171c:	2938      	cmp	r1, #56	; 0x38
 800171e:	dd00      	ble.n	8001722 <__aeabi_dsub+0x256>
 8001720:	e1ba      	b.n	8001a98 <__aeabi_dsub+0x5cc>
 8001722:	291f      	cmp	r1, #31
 8001724:	dd00      	ble.n	8001728 <__aeabi_dsub+0x25c>
 8001726:	e227      	b.n	8001b78 <__aeabi_dsub+0x6ac>
 8001728:	2420      	movs	r4, #32
 800172a:	1a64      	subs	r4, r4, r1
 800172c:	4649      	mov	r1, r9
 800172e:	40a1      	lsls	r1, r4
 8001730:	001e      	movs	r6, r3
 8001732:	4688      	mov	r8, r1
 8001734:	4661      	mov	r1, ip
 8001736:	40a3      	lsls	r3, r4
 8001738:	40ce      	lsrs	r6, r1
 800173a:	4641      	mov	r1, r8
 800173c:	1e5c      	subs	r4, r3, #1
 800173e:	41a3      	sbcs	r3, r4
 8001740:	4331      	orrs	r1, r6
 8001742:	4319      	orrs	r1, r3
 8001744:	000c      	movs	r4, r1
 8001746:	4663      	mov	r3, ip
 8001748:	4649      	mov	r1, r9
 800174a:	40d9      	lsrs	r1, r3
 800174c:	187f      	adds	r7, r7, r1
 800174e:	1824      	adds	r4, r4, r0
 8001750:	4284      	cmp	r4, r0
 8001752:	419b      	sbcs	r3, r3
 8001754:	425b      	negs	r3, r3
 8001756:	469a      	mov	sl, r3
 8001758:	0016      	movs	r6, r2
 800175a:	44ba      	add	sl, r7
 800175c:	e05d      	b.n	800181a <__aeabi_dsub+0x34e>
 800175e:	4c38      	ldr	r4, [pc, #224]	; (8001840 <__aeabi_dsub+0x374>)
 8001760:	1c72      	adds	r2, r6, #1
 8001762:	4222      	tst	r2, r4
 8001764:	d000      	beq.n	8001768 <__aeabi_dsub+0x29c>
 8001766:	e0df      	b.n	8001928 <__aeabi_dsub+0x45c>
 8001768:	464a      	mov	r2, r9
 800176a:	431a      	orrs	r2, r3
 800176c:	2e00      	cmp	r6, #0
 800176e:	d000      	beq.n	8001772 <__aeabi_dsub+0x2a6>
 8001770:	e15c      	b.n	8001a2c <__aeabi_dsub+0x560>
 8001772:	2a00      	cmp	r2, #0
 8001774:	d100      	bne.n	8001778 <__aeabi_dsub+0x2ac>
 8001776:	e1cf      	b.n	8001b18 <__aeabi_dsub+0x64c>
 8001778:	003a      	movs	r2, r7
 800177a:	4302      	orrs	r2, r0
 800177c:	d100      	bne.n	8001780 <__aeabi_dsub+0x2b4>
 800177e:	e17f      	b.n	8001a80 <__aeabi_dsub+0x5b4>
 8001780:	1a1c      	subs	r4, r3, r0
 8001782:	464a      	mov	r2, r9
 8001784:	42a3      	cmp	r3, r4
 8001786:	4189      	sbcs	r1, r1
 8001788:	1bd2      	subs	r2, r2, r7
 800178a:	4249      	negs	r1, r1
 800178c:	1a52      	subs	r2, r2, r1
 800178e:	4692      	mov	sl, r2
 8001790:	0212      	lsls	r2, r2, #8
 8001792:	d400      	bmi.n	8001796 <__aeabi_dsub+0x2ca>
 8001794:	e20a      	b.n	8001bac <__aeabi_dsub+0x6e0>
 8001796:	1ac4      	subs	r4, r0, r3
 8001798:	42a0      	cmp	r0, r4
 800179a:	4180      	sbcs	r0, r0
 800179c:	464b      	mov	r3, r9
 800179e:	4240      	negs	r0, r0
 80017a0:	1aff      	subs	r7, r7, r3
 80017a2:	1a3b      	subs	r3, r7, r0
 80017a4:	469a      	mov	sl, r3
 80017a6:	465d      	mov	r5, fp
 80017a8:	e71a      	b.n	80015e0 <__aeabi_dsub+0x114>
 80017aa:	003a      	movs	r2, r7
 80017ac:	4302      	orrs	r2, r0
 80017ae:	d073      	beq.n	8001898 <__aeabi_dsub+0x3cc>
 80017b0:	0022      	movs	r2, r4
 80017b2:	3a01      	subs	r2, #1
 80017b4:	2c01      	cmp	r4, #1
 80017b6:	d100      	bne.n	80017ba <__aeabi_dsub+0x2ee>
 80017b8:	e0cb      	b.n	8001952 <__aeabi_dsub+0x486>
 80017ba:	4554      	cmp	r4, sl
 80017bc:	d042      	beq.n	8001844 <__aeabi_dsub+0x378>
 80017be:	4694      	mov	ip, r2
 80017c0:	e748      	b.n	8001654 <__aeabi_dsub+0x188>
 80017c2:	0010      	movs	r0, r2
 80017c4:	3b1f      	subs	r3, #31
 80017c6:	40d8      	lsrs	r0, r3
 80017c8:	2920      	cmp	r1, #32
 80017ca:	d003      	beq.n	80017d4 <__aeabi_dsub+0x308>
 80017cc:	2340      	movs	r3, #64	; 0x40
 80017ce:	1a5b      	subs	r3, r3, r1
 80017d0:	409a      	lsls	r2, r3
 80017d2:	4314      	orrs	r4, r2
 80017d4:	1e63      	subs	r3, r4, #1
 80017d6:	419c      	sbcs	r4, r3
 80017d8:	2300      	movs	r3, #0
 80017da:	2600      	movs	r6, #0
 80017dc:	469a      	mov	sl, r3
 80017de:	4304      	orrs	r4, r0
 80017e0:	0763      	lsls	r3, r4, #29
 80017e2:	d000      	beq.n	80017e6 <__aeabi_dsub+0x31a>
 80017e4:	e6fe      	b.n	80015e4 <__aeabi_dsub+0x118>
 80017e6:	4652      	mov	r2, sl
 80017e8:	08e3      	lsrs	r3, r4, #3
 80017ea:	0752      	lsls	r2, r2, #29
 80017ec:	4313      	orrs	r3, r2
 80017ee:	4652      	mov	r2, sl
 80017f0:	46b4      	mov	ip, r6
 80017f2:	08d2      	lsrs	r2, r2, #3
 80017f4:	490f      	ldr	r1, [pc, #60]	; (8001834 <__aeabi_dsub+0x368>)
 80017f6:	458c      	cmp	ip, r1
 80017f8:	d02a      	beq.n	8001850 <__aeabi_dsub+0x384>
 80017fa:	0312      	lsls	r2, r2, #12
 80017fc:	0b14      	lsrs	r4, r2, #12
 80017fe:	4662      	mov	r2, ip
 8001800:	0552      	lsls	r2, r2, #21
 8001802:	0d52      	lsrs	r2, r2, #21
 8001804:	e70c      	b.n	8001620 <__aeabi_dsub+0x154>
 8001806:	003c      	movs	r4, r7
 8001808:	4304      	orrs	r4, r0
 800180a:	1e62      	subs	r2, r4, #1
 800180c:	4194      	sbcs	r4, r2
 800180e:	18e4      	adds	r4, r4, r3
 8001810:	429c      	cmp	r4, r3
 8001812:	4192      	sbcs	r2, r2
 8001814:	4252      	negs	r2, r2
 8001816:	444a      	add	r2, r9
 8001818:	4692      	mov	sl, r2
 800181a:	4653      	mov	r3, sl
 800181c:	021b      	lsls	r3, r3, #8
 800181e:	d5df      	bpl.n	80017e0 <__aeabi_dsub+0x314>
 8001820:	4b04      	ldr	r3, [pc, #16]	; (8001834 <__aeabi_dsub+0x368>)
 8001822:	3601      	adds	r6, #1
 8001824:	429e      	cmp	r6, r3
 8001826:	d000      	beq.n	800182a <__aeabi_dsub+0x35e>
 8001828:	e0a0      	b.n	800196c <__aeabi_dsub+0x4a0>
 800182a:	0032      	movs	r2, r6
 800182c:	2400      	movs	r4, #0
 800182e:	2300      	movs	r3, #0
 8001830:	e6f6      	b.n	8001620 <__aeabi_dsub+0x154>
 8001832:	46c0      	nop			; (mov r8, r8)
 8001834:	000007ff 	.word	0x000007ff
 8001838:	ff7fffff 	.word	0xff7fffff
 800183c:	fffff801 	.word	0xfffff801
 8001840:	000007fe 	.word	0x000007fe
 8001844:	08db      	lsrs	r3, r3, #3
 8001846:	464a      	mov	r2, r9
 8001848:	0752      	lsls	r2, r2, #29
 800184a:	4313      	orrs	r3, r2
 800184c:	464a      	mov	r2, r9
 800184e:	08d2      	lsrs	r2, r2, #3
 8001850:	0019      	movs	r1, r3
 8001852:	4311      	orrs	r1, r2
 8001854:	d100      	bne.n	8001858 <__aeabi_dsub+0x38c>
 8001856:	e1b5      	b.n	8001bc4 <__aeabi_dsub+0x6f8>
 8001858:	2480      	movs	r4, #128	; 0x80
 800185a:	0324      	lsls	r4, r4, #12
 800185c:	4314      	orrs	r4, r2
 800185e:	0324      	lsls	r4, r4, #12
 8001860:	4ad5      	ldr	r2, [pc, #852]	; (8001bb8 <__aeabi_dsub+0x6ec>)
 8001862:	0b24      	lsrs	r4, r4, #12
 8001864:	e6dc      	b.n	8001620 <__aeabi_dsub+0x154>
 8001866:	0020      	movs	r0, r4
 8001868:	f000 faa8 	bl	8001dbc <__clzsi2>
 800186c:	0003      	movs	r3, r0
 800186e:	3318      	adds	r3, #24
 8001870:	2b1f      	cmp	r3, #31
 8001872:	dc00      	bgt.n	8001876 <__aeabi_dsub+0x3aa>
 8001874:	e695      	b.n	80015a2 <__aeabi_dsub+0xd6>
 8001876:	0022      	movs	r2, r4
 8001878:	3808      	subs	r0, #8
 800187a:	4082      	lsls	r2, r0
 800187c:	2400      	movs	r4, #0
 800187e:	429e      	cmp	r6, r3
 8001880:	dc00      	bgt.n	8001884 <__aeabi_dsub+0x3b8>
 8001882:	e69a      	b.n	80015ba <__aeabi_dsub+0xee>
 8001884:	1af6      	subs	r6, r6, r3
 8001886:	4bcd      	ldr	r3, [pc, #820]	; (8001bbc <__aeabi_dsub+0x6f0>)
 8001888:	401a      	ands	r2, r3
 800188a:	4692      	mov	sl, r2
 800188c:	e6a8      	b.n	80015e0 <__aeabi_dsub+0x114>
 800188e:	003c      	movs	r4, r7
 8001890:	4304      	orrs	r4, r0
 8001892:	1e62      	subs	r2, r4, #1
 8001894:	4194      	sbcs	r4, r2
 8001896:	e66c      	b.n	8001572 <__aeabi_dsub+0xa6>
 8001898:	464a      	mov	r2, r9
 800189a:	08db      	lsrs	r3, r3, #3
 800189c:	0752      	lsls	r2, r2, #29
 800189e:	4313      	orrs	r3, r2
 80018a0:	464a      	mov	r2, r9
 80018a2:	08d2      	lsrs	r2, r2, #3
 80018a4:	e7a6      	b.n	80017f4 <__aeabi_dsub+0x328>
 80018a6:	4cc6      	ldr	r4, [pc, #792]	; (8001bc0 <__aeabi_dsub+0x6f4>)
 80018a8:	1c72      	adds	r2, r6, #1
 80018aa:	4222      	tst	r2, r4
 80018ac:	d000      	beq.n	80018b0 <__aeabi_dsub+0x3e4>
 80018ae:	e0ac      	b.n	8001a0a <__aeabi_dsub+0x53e>
 80018b0:	464a      	mov	r2, r9
 80018b2:	431a      	orrs	r2, r3
 80018b4:	2e00      	cmp	r6, #0
 80018b6:	d000      	beq.n	80018ba <__aeabi_dsub+0x3ee>
 80018b8:	e105      	b.n	8001ac6 <__aeabi_dsub+0x5fa>
 80018ba:	2a00      	cmp	r2, #0
 80018bc:	d100      	bne.n	80018c0 <__aeabi_dsub+0x3f4>
 80018be:	e156      	b.n	8001b6e <__aeabi_dsub+0x6a2>
 80018c0:	003a      	movs	r2, r7
 80018c2:	4302      	orrs	r2, r0
 80018c4:	d100      	bne.n	80018c8 <__aeabi_dsub+0x3fc>
 80018c6:	e0db      	b.n	8001a80 <__aeabi_dsub+0x5b4>
 80018c8:	181c      	adds	r4, r3, r0
 80018ca:	429c      	cmp	r4, r3
 80018cc:	419b      	sbcs	r3, r3
 80018ce:	444f      	add	r7, r9
 80018d0:	46ba      	mov	sl, r7
 80018d2:	425b      	negs	r3, r3
 80018d4:	449a      	add	sl, r3
 80018d6:	4653      	mov	r3, sl
 80018d8:	021b      	lsls	r3, r3, #8
 80018da:	d400      	bmi.n	80018de <__aeabi_dsub+0x412>
 80018dc:	e780      	b.n	80017e0 <__aeabi_dsub+0x314>
 80018de:	4652      	mov	r2, sl
 80018e0:	4bb6      	ldr	r3, [pc, #728]	; (8001bbc <__aeabi_dsub+0x6f0>)
 80018e2:	2601      	movs	r6, #1
 80018e4:	401a      	ands	r2, r3
 80018e6:	4692      	mov	sl, r2
 80018e8:	e77a      	b.n	80017e0 <__aeabi_dsub+0x314>
 80018ea:	4cb3      	ldr	r4, [pc, #716]	; (8001bb8 <__aeabi_dsub+0x6ec>)
 80018ec:	42a2      	cmp	r2, r4
 80018ee:	d100      	bne.n	80018f2 <__aeabi_dsub+0x426>
 80018f0:	e0c0      	b.n	8001a74 <__aeabi_dsub+0x5a8>
 80018f2:	2480      	movs	r4, #128	; 0x80
 80018f4:	464d      	mov	r5, r9
 80018f6:	0424      	lsls	r4, r4, #16
 80018f8:	4325      	orrs	r5, r4
 80018fa:	46a9      	mov	r9, r5
 80018fc:	4664      	mov	r4, ip
 80018fe:	2c38      	cmp	r4, #56	; 0x38
 8001900:	dc53      	bgt.n	80019aa <__aeabi_dsub+0x4de>
 8001902:	4661      	mov	r1, ip
 8001904:	2c1f      	cmp	r4, #31
 8001906:	dd00      	ble.n	800190a <__aeabi_dsub+0x43e>
 8001908:	e0cd      	b.n	8001aa6 <__aeabi_dsub+0x5da>
 800190a:	2520      	movs	r5, #32
 800190c:	001e      	movs	r6, r3
 800190e:	1b2d      	subs	r5, r5, r4
 8001910:	464c      	mov	r4, r9
 8001912:	40ab      	lsls	r3, r5
 8001914:	40ac      	lsls	r4, r5
 8001916:	40ce      	lsrs	r6, r1
 8001918:	1e5d      	subs	r5, r3, #1
 800191a:	41ab      	sbcs	r3, r5
 800191c:	4334      	orrs	r4, r6
 800191e:	4323      	orrs	r3, r4
 8001920:	464c      	mov	r4, r9
 8001922:	40cc      	lsrs	r4, r1
 8001924:	1b3f      	subs	r7, r7, r4
 8001926:	e045      	b.n	80019b4 <__aeabi_dsub+0x4e8>
 8001928:	464a      	mov	r2, r9
 800192a:	1a1c      	subs	r4, r3, r0
 800192c:	1bd1      	subs	r1, r2, r7
 800192e:	42a3      	cmp	r3, r4
 8001930:	4192      	sbcs	r2, r2
 8001932:	4252      	negs	r2, r2
 8001934:	4692      	mov	sl, r2
 8001936:	000a      	movs	r2, r1
 8001938:	4651      	mov	r1, sl
 800193a:	1a52      	subs	r2, r2, r1
 800193c:	4692      	mov	sl, r2
 800193e:	0212      	lsls	r2, r2, #8
 8001940:	d500      	bpl.n	8001944 <__aeabi_dsub+0x478>
 8001942:	e083      	b.n	8001a4c <__aeabi_dsub+0x580>
 8001944:	4653      	mov	r3, sl
 8001946:	4323      	orrs	r3, r4
 8001948:	d000      	beq.n	800194c <__aeabi_dsub+0x480>
 800194a:	e621      	b.n	8001590 <__aeabi_dsub+0xc4>
 800194c:	2200      	movs	r2, #0
 800194e:	2500      	movs	r5, #0
 8001950:	e753      	b.n	80017fa <__aeabi_dsub+0x32e>
 8001952:	181c      	adds	r4, r3, r0
 8001954:	429c      	cmp	r4, r3
 8001956:	419b      	sbcs	r3, r3
 8001958:	444f      	add	r7, r9
 800195a:	46ba      	mov	sl, r7
 800195c:	425b      	negs	r3, r3
 800195e:	449a      	add	sl, r3
 8001960:	4653      	mov	r3, sl
 8001962:	2601      	movs	r6, #1
 8001964:	021b      	lsls	r3, r3, #8
 8001966:	d400      	bmi.n	800196a <__aeabi_dsub+0x49e>
 8001968:	e73a      	b.n	80017e0 <__aeabi_dsub+0x314>
 800196a:	2602      	movs	r6, #2
 800196c:	4652      	mov	r2, sl
 800196e:	4b93      	ldr	r3, [pc, #588]	; (8001bbc <__aeabi_dsub+0x6f0>)
 8001970:	2101      	movs	r1, #1
 8001972:	401a      	ands	r2, r3
 8001974:	0013      	movs	r3, r2
 8001976:	4021      	ands	r1, r4
 8001978:	0862      	lsrs	r2, r4, #1
 800197a:	430a      	orrs	r2, r1
 800197c:	07dc      	lsls	r4, r3, #31
 800197e:	085b      	lsrs	r3, r3, #1
 8001980:	469a      	mov	sl, r3
 8001982:	4314      	orrs	r4, r2
 8001984:	e62c      	b.n	80015e0 <__aeabi_dsub+0x114>
 8001986:	0039      	movs	r1, r7
 8001988:	3a20      	subs	r2, #32
 800198a:	40d1      	lsrs	r1, r2
 800198c:	4662      	mov	r2, ip
 800198e:	2a20      	cmp	r2, #32
 8001990:	d006      	beq.n	80019a0 <__aeabi_dsub+0x4d4>
 8001992:	4664      	mov	r4, ip
 8001994:	2240      	movs	r2, #64	; 0x40
 8001996:	1b12      	subs	r2, r2, r4
 8001998:	003c      	movs	r4, r7
 800199a:	4094      	lsls	r4, r2
 800199c:	4304      	orrs	r4, r0
 800199e:	9401      	str	r4, [sp, #4]
 80019a0:	9c01      	ldr	r4, [sp, #4]
 80019a2:	1e62      	subs	r2, r4, #1
 80019a4:	4194      	sbcs	r4, r2
 80019a6:	430c      	orrs	r4, r1
 80019a8:	e5e3      	b.n	8001572 <__aeabi_dsub+0xa6>
 80019aa:	4649      	mov	r1, r9
 80019ac:	4319      	orrs	r1, r3
 80019ae:	000b      	movs	r3, r1
 80019b0:	1e5c      	subs	r4, r3, #1
 80019b2:	41a3      	sbcs	r3, r4
 80019b4:	1ac4      	subs	r4, r0, r3
 80019b6:	42a0      	cmp	r0, r4
 80019b8:	419b      	sbcs	r3, r3
 80019ba:	425b      	negs	r3, r3
 80019bc:	1afb      	subs	r3, r7, r3
 80019be:	469a      	mov	sl, r3
 80019c0:	465d      	mov	r5, fp
 80019c2:	0016      	movs	r6, r2
 80019c4:	e5dc      	b.n	8001580 <__aeabi_dsub+0xb4>
 80019c6:	4649      	mov	r1, r9
 80019c8:	4319      	orrs	r1, r3
 80019ca:	d100      	bne.n	80019ce <__aeabi_dsub+0x502>
 80019cc:	e0ae      	b.n	8001b2c <__aeabi_dsub+0x660>
 80019ce:	4661      	mov	r1, ip
 80019d0:	4664      	mov	r4, ip
 80019d2:	3901      	subs	r1, #1
 80019d4:	2c01      	cmp	r4, #1
 80019d6:	d100      	bne.n	80019da <__aeabi_dsub+0x50e>
 80019d8:	e0e0      	b.n	8001b9c <__aeabi_dsub+0x6d0>
 80019da:	4c77      	ldr	r4, [pc, #476]	; (8001bb8 <__aeabi_dsub+0x6ec>)
 80019dc:	45a4      	cmp	ip, r4
 80019de:	d056      	beq.n	8001a8e <__aeabi_dsub+0x5c2>
 80019e0:	468c      	mov	ip, r1
 80019e2:	e69a      	b.n	800171a <__aeabi_dsub+0x24e>
 80019e4:	4661      	mov	r1, ip
 80019e6:	2220      	movs	r2, #32
 80019e8:	003c      	movs	r4, r7
 80019ea:	1a52      	subs	r2, r2, r1
 80019ec:	4094      	lsls	r4, r2
 80019ee:	0001      	movs	r1, r0
 80019f0:	4090      	lsls	r0, r2
 80019f2:	46a0      	mov	r8, r4
 80019f4:	4664      	mov	r4, ip
 80019f6:	1e42      	subs	r2, r0, #1
 80019f8:	4190      	sbcs	r0, r2
 80019fa:	4662      	mov	r2, ip
 80019fc:	40e1      	lsrs	r1, r4
 80019fe:	4644      	mov	r4, r8
 8001a00:	40d7      	lsrs	r7, r2
 8001a02:	430c      	orrs	r4, r1
 8001a04:	4304      	orrs	r4, r0
 8001a06:	44b9      	add	r9, r7
 8001a08:	e701      	b.n	800180e <__aeabi_dsub+0x342>
 8001a0a:	496b      	ldr	r1, [pc, #428]	; (8001bb8 <__aeabi_dsub+0x6ec>)
 8001a0c:	428a      	cmp	r2, r1
 8001a0e:	d100      	bne.n	8001a12 <__aeabi_dsub+0x546>
 8001a10:	e70c      	b.n	800182c <__aeabi_dsub+0x360>
 8001a12:	1818      	adds	r0, r3, r0
 8001a14:	4298      	cmp	r0, r3
 8001a16:	419b      	sbcs	r3, r3
 8001a18:	444f      	add	r7, r9
 8001a1a:	425b      	negs	r3, r3
 8001a1c:	18fb      	adds	r3, r7, r3
 8001a1e:	07dc      	lsls	r4, r3, #31
 8001a20:	0840      	lsrs	r0, r0, #1
 8001a22:	085b      	lsrs	r3, r3, #1
 8001a24:	469a      	mov	sl, r3
 8001a26:	0016      	movs	r6, r2
 8001a28:	4304      	orrs	r4, r0
 8001a2a:	e6d9      	b.n	80017e0 <__aeabi_dsub+0x314>
 8001a2c:	2a00      	cmp	r2, #0
 8001a2e:	d000      	beq.n	8001a32 <__aeabi_dsub+0x566>
 8001a30:	e081      	b.n	8001b36 <__aeabi_dsub+0x66a>
 8001a32:	003b      	movs	r3, r7
 8001a34:	4303      	orrs	r3, r0
 8001a36:	d11d      	bne.n	8001a74 <__aeabi_dsub+0x5a8>
 8001a38:	2280      	movs	r2, #128	; 0x80
 8001a3a:	2500      	movs	r5, #0
 8001a3c:	0312      	lsls	r2, r2, #12
 8001a3e:	e70b      	b.n	8001858 <__aeabi_dsub+0x38c>
 8001a40:	08c0      	lsrs	r0, r0, #3
 8001a42:	077b      	lsls	r3, r7, #29
 8001a44:	465d      	mov	r5, fp
 8001a46:	4303      	orrs	r3, r0
 8001a48:	08fa      	lsrs	r2, r7, #3
 8001a4a:	e6d3      	b.n	80017f4 <__aeabi_dsub+0x328>
 8001a4c:	1ac4      	subs	r4, r0, r3
 8001a4e:	42a0      	cmp	r0, r4
 8001a50:	4180      	sbcs	r0, r0
 8001a52:	464b      	mov	r3, r9
 8001a54:	4240      	negs	r0, r0
 8001a56:	1aff      	subs	r7, r7, r3
 8001a58:	1a3b      	subs	r3, r7, r0
 8001a5a:	469a      	mov	sl, r3
 8001a5c:	465d      	mov	r5, fp
 8001a5e:	e597      	b.n	8001590 <__aeabi_dsub+0xc4>
 8001a60:	1a1c      	subs	r4, r3, r0
 8001a62:	464a      	mov	r2, r9
 8001a64:	42a3      	cmp	r3, r4
 8001a66:	419b      	sbcs	r3, r3
 8001a68:	1bd7      	subs	r7, r2, r7
 8001a6a:	425b      	negs	r3, r3
 8001a6c:	1afb      	subs	r3, r7, r3
 8001a6e:	469a      	mov	sl, r3
 8001a70:	2601      	movs	r6, #1
 8001a72:	e585      	b.n	8001580 <__aeabi_dsub+0xb4>
 8001a74:	08c0      	lsrs	r0, r0, #3
 8001a76:	077b      	lsls	r3, r7, #29
 8001a78:	465d      	mov	r5, fp
 8001a7a:	4303      	orrs	r3, r0
 8001a7c:	08fa      	lsrs	r2, r7, #3
 8001a7e:	e6e7      	b.n	8001850 <__aeabi_dsub+0x384>
 8001a80:	464a      	mov	r2, r9
 8001a82:	08db      	lsrs	r3, r3, #3
 8001a84:	0752      	lsls	r2, r2, #29
 8001a86:	4313      	orrs	r3, r2
 8001a88:	464a      	mov	r2, r9
 8001a8a:	08d2      	lsrs	r2, r2, #3
 8001a8c:	e6b5      	b.n	80017fa <__aeabi_dsub+0x32e>
 8001a8e:	08c0      	lsrs	r0, r0, #3
 8001a90:	077b      	lsls	r3, r7, #29
 8001a92:	4303      	orrs	r3, r0
 8001a94:	08fa      	lsrs	r2, r7, #3
 8001a96:	e6db      	b.n	8001850 <__aeabi_dsub+0x384>
 8001a98:	4649      	mov	r1, r9
 8001a9a:	4319      	orrs	r1, r3
 8001a9c:	000b      	movs	r3, r1
 8001a9e:	1e59      	subs	r1, r3, #1
 8001aa0:	418b      	sbcs	r3, r1
 8001aa2:	001c      	movs	r4, r3
 8001aa4:	e653      	b.n	800174e <__aeabi_dsub+0x282>
 8001aa6:	464d      	mov	r5, r9
 8001aa8:	3c20      	subs	r4, #32
 8001aaa:	40e5      	lsrs	r5, r4
 8001aac:	2920      	cmp	r1, #32
 8001aae:	d005      	beq.n	8001abc <__aeabi_dsub+0x5f0>
 8001ab0:	2440      	movs	r4, #64	; 0x40
 8001ab2:	1a64      	subs	r4, r4, r1
 8001ab4:	4649      	mov	r1, r9
 8001ab6:	40a1      	lsls	r1, r4
 8001ab8:	430b      	orrs	r3, r1
 8001aba:	4698      	mov	r8, r3
 8001abc:	4643      	mov	r3, r8
 8001abe:	1e5c      	subs	r4, r3, #1
 8001ac0:	41a3      	sbcs	r3, r4
 8001ac2:	432b      	orrs	r3, r5
 8001ac4:	e776      	b.n	80019b4 <__aeabi_dsub+0x4e8>
 8001ac6:	2a00      	cmp	r2, #0
 8001ac8:	d0e1      	beq.n	8001a8e <__aeabi_dsub+0x5c2>
 8001aca:	003a      	movs	r2, r7
 8001acc:	08db      	lsrs	r3, r3, #3
 8001ace:	4302      	orrs	r2, r0
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dsub+0x608>
 8001ad2:	e6b8      	b.n	8001846 <__aeabi_dsub+0x37a>
 8001ad4:	464a      	mov	r2, r9
 8001ad6:	0752      	lsls	r2, r2, #29
 8001ad8:	2480      	movs	r4, #128	; 0x80
 8001ada:	4313      	orrs	r3, r2
 8001adc:	464a      	mov	r2, r9
 8001ade:	0324      	lsls	r4, r4, #12
 8001ae0:	08d2      	lsrs	r2, r2, #3
 8001ae2:	4222      	tst	r2, r4
 8001ae4:	d007      	beq.n	8001af6 <__aeabi_dsub+0x62a>
 8001ae6:	08fe      	lsrs	r6, r7, #3
 8001ae8:	4226      	tst	r6, r4
 8001aea:	d104      	bne.n	8001af6 <__aeabi_dsub+0x62a>
 8001aec:	465d      	mov	r5, fp
 8001aee:	0032      	movs	r2, r6
 8001af0:	08c3      	lsrs	r3, r0, #3
 8001af2:	077f      	lsls	r7, r7, #29
 8001af4:	433b      	orrs	r3, r7
 8001af6:	0f59      	lsrs	r1, r3, #29
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	0749      	lsls	r1, r1, #29
 8001afc:	08db      	lsrs	r3, r3, #3
 8001afe:	430b      	orrs	r3, r1
 8001b00:	e6a6      	b.n	8001850 <__aeabi_dsub+0x384>
 8001b02:	1ac4      	subs	r4, r0, r3
 8001b04:	42a0      	cmp	r0, r4
 8001b06:	4180      	sbcs	r0, r0
 8001b08:	464b      	mov	r3, r9
 8001b0a:	4240      	negs	r0, r0
 8001b0c:	1aff      	subs	r7, r7, r3
 8001b0e:	1a3b      	subs	r3, r7, r0
 8001b10:	469a      	mov	sl, r3
 8001b12:	465d      	mov	r5, fp
 8001b14:	2601      	movs	r6, #1
 8001b16:	e533      	b.n	8001580 <__aeabi_dsub+0xb4>
 8001b18:	003b      	movs	r3, r7
 8001b1a:	4303      	orrs	r3, r0
 8001b1c:	d100      	bne.n	8001b20 <__aeabi_dsub+0x654>
 8001b1e:	e715      	b.n	800194c <__aeabi_dsub+0x480>
 8001b20:	08c0      	lsrs	r0, r0, #3
 8001b22:	077b      	lsls	r3, r7, #29
 8001b24:	465d      	mov	r5, fp
 8001b26:	4303      	orrs	r3, r0
 8001b28:	08fa      	lsrs	r2, r7, #3
 8001b2a:	e666      	b.n	80017fa <__aeabi_dsub+0x32e>
 8001b2c:	08c0      	lsrs	r0, r0, #3
 8001b2e:	077b      	lsls	r3, r7, #29
 8001b30:	4303      	orrs	r3, r0
 8001b32:	08fa      	lsrs	r2, r7, #3
 8001b34:	e65e      	b.n	80017f4 <__aeabi_dsub+0x328>
 8001b36:	003a      	movs	r2, r7
 8001b38:	08db      	lsrs	r3, r3, #3
 8001b3a:	4302      	orrs	r2, r0
 8001b3c:	d100      	bne.n	8001b40 <__aeabi_dsub+0x674>
 8001b3e:	e682      	b.n	8001846 <__aeabi_dsub+0x37a>
 8001b40:	464a      	mov	r2, r9
 8001b42:	0752      	lsls	r2, r2, #29
 8001b44:	2480      	movs	r4, #128	; 0x80
 8001b46:	4313      	orrs	r3, r2
 8001b48:	464a      	mov	r2, r9
 8001b4a:	0324      	lsls	r4, r4, #12
 8001b4c:	08d2      	lsrs	r2, r2, #3
 8001b4e:	4222      	tst	r2, r4
 8001b50:	d007      	beq.n	8001b62 <__aeabi_dsub+0x696>
 8001b52:	08fe      	lsrs	r6, r7, #3
 8001b54:	4226      	tst	r6, r4
 8001b56:	d104      	bne.n	8001b62 <__aeabi_dsub+0x696>
 8001b58:	465d      	mov	r5, fp
 8001b5a:	0032      	movs	r2, r6
 8001b5c:	08c3      	lsrs	r3, r0, #3
 8001b5e:	077f      	lsls	r7, r7, #29
 8001b60:	433b      	orrs	r3, r7
 8001b62:	0f59      	lsrs	r1, r3, #29
 8001b64:	00db      	lsls	r3, r3, #3
 8001b66:	08db      	lsrs	r3, r3, #3
 8001b68:	0749      	lsls	r1, r1, #29
 8001b6a:	430b      	orrs	r3, r1
 8001b6c:	e670      	b.n	8001850 <__aeabi_dsub+0x384>
 8001b6e:	08c0      	lsrs	r0, r0, #3
 8001b70:	077b      	lsls	r3, r7, #29
 8001b72:	4303      	orrs	r3, r0
 8001b74:	08fa      	lsrs	r2, r7, #3
 8001b76:	e640      	b.n	80017fa <__aeabi_dsub+0x32e>
 8001b78:	464c      	mov	r4, r9
 8001b7a:	3920      	subs	r1, #32
 8001b7c:	40cc      	lsrs	r4, r1
 8001b7e:	4661      	mov	r1, ip
 8001b80:	2920      	cmp	r1, #32
 8001b82:	d006      	beq.n	8001b92 <__aeabi_dsub+0x6c6>
 8001b84:	4666      	mov	r6, ip
 8001b86:	2140      	movs	r1, #64	; 0x40
 8001b88:	1b89      	subs	r1, r1, r6
 8001b8a:	464e      	mov	r6, r9
 8001b8c:	408e      	lsls	r6, r1
 8001b8e:	4333      	orrs	r3, r6
 8001b90:	4698      	mov	r8, r3
 8001b92:	4643      	mov	r3, r8
 8001b94:	1e59      	subs	r1, r3, #1
 8001b96:	418b      	sbcs	r3, r1
 8001b98:	431c      	orrs	r4, r3
 8001b9a:	e5d8      	b.n	800174e <__aeabi_dsub+0x282>
 8001b9c:	181c      	adds	r4, r3, r0
 8001b9e:	4284      	cmp	r4, r0
 8001ba0:	4180      	sbcs	r0, r0
 8001ba2:	444f      	add	r7, r9
 8001ba4:	46ba      	mov	sl, r7
 8001ba6:	4240      	negs	r0, r0
 8001ba8:	4482      	add	sl, r0
 8001baa:	e6d9      	b.n	8001960 <__aeabi_dsub+0x494>
 8001bac:	4653      	mov	r3, sl
 8001bae:	4323      	orrs	r3, r4
 8001bb0:	d100      	bne.n	8001bb4 <__aeabi_dsub+0x6e8>
 8001bb2:	e6cb      	b.n	800194c <__aeabi_dsub+0x480>
 8001bb4:	e614      	b.n	80017e0 <__aeabi_dsub+0x314>
 8001bb6:	46c0      	nop			; (mov r8, r8)
 8001bb8:	000007ff 	.word	0x000007ff
 8001bbc:	ff7fffff 	.word	0xff7fffff
 8001bc0:	000007fe 	.word	0x000007fe
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	4a01      	ldr	r2, [pc, #4]	; (8001bcc <__aeabi_dsub+0x700>)
 8001bc8:	001c      	movs	r4, r3
 8001bca:	e529      	b.n	8001620 <__aeabi_dsub+0x154>
 8001bcc:	000007ff 	.word	0x000007ff

08001bd0 <__aeabi_d2iz>:
 8001bd0:	000a      	movs	r2, r1
 8001bd2:	b530      	push	{r4, r5, lr}
 8001bd4:	4c13      	ldr	r4, [pc, #76]	; (8001c24 <__aeabi_d2iz+0x54>)
 8001bd6:	0053      	lsls	r3, r2, #1
 8001bd8:	0309      	lsls	r1, r1, #12
 8001bda:	0005      	movs	r5, r0
 8001bdc:	0b09      	lsrs	r1, r1, #12
 8001bde:	2000      	movs	r0, #0
 8001be0:	0d5b      	lsrs	r3, r3, #21
 8001be2:	0fd2      	lsrs	r2, r2, #31
 8001be4:	42a3      	cmp	r3, r4
 8001be6:	dd04      	ble.n	8001bf2 <__aeabi_d2iz+0x22>
 8001be8:	480f      	ldr	r0, [pc, #60]	; (8001c28 <__aeabi_d2iz+0x58>)
 8001bea:	4283      	cmp	r3, r0
 8001bec:	dd02      	ble.n	8001bf4 <__aeabi_d2iz+0x24>
 8001bee:	4b0f      	ldr	r3, [pc, #60]	; (8001c2c <__aeabi_d2iz+0x5c>)
 8001bf0:	18d0      	adds	r0, r2, r3
 8001bf2:	bd30      	pop	{r4, r5, pc}
 8001bf4:	2080      	movs	r0, #128	; 0x80
 8001bf6:	0340      	lsls	r0, r0, #13
 8001bf8:	4301      	orrs	r1, r0
 8001bfa:	480d      	ldr	r0, [pc, #52]	; (8001c30 <__aeabi_d2iz+0x60>)
 8001bfc:	1ac0      	subs	r0, r0, r3
 8001bfe:	281f      	cmp	r0, #31
 8001c00:	dd08      	ble.n	8001c14 <__aeabi_d2iz+0x44>
 8001c02:	480c      	ldr	r0, [pc, #48]	; (8001c34 <__aeabi_d2iz+0x64>)
 8001c04:	1ac3      	subs	r3, r0, r3
 8001c06:	40d9      	lsrs	r1, r3
 8001c08:	000b      	movs	r3, r1
 8001c0a:	4258      	negs	r0, r3
 8001c0c:	2a00      	cmp	r2, #0
 8001c0e:	d1f0      	bne.n	8001bf2 <__aeabi_d2iz+0x22>
 8001c10:	0018      	movs	r0, r3
 8001c12:	e7ee      	b.n	8001bf2 <__aeabi_d2iz+0x22>
 8001c14:	4c08      	ldr	r4, [pc, #32]	; (8001c38 <__aeabi_d2iz+0x68>)
 8001c16:	40c5      	lsrs	r5, r0
 8001c18:	46a4      	mov	ip, r4
 8001c1a:	4463      	add	r3, ip
 8001c1c:	4099      	lsls	r1, r3
 8001c1e:	000b      	movs	r3, r1
 8001c20:	432b      	orrs	r3, r5
 8001c22:	e7f2      	b.n	8001c0a <__aeabi_d2iz+0x3a>
 8001c24:	000003fe 	.word	0x000003fe
 8001c28:	0000041d 	.word	0x0000041d
 8001c2c:	7fffffff 	.word	0x7fffffff
 8001c30:	00000433 	.word	0x00000433
 8001c34:	00000413 	.word	0x00000413
 8001c38:	fffffbed 	.word	0xfffffbed

08001c3c <__aeabi_f2d>:
 8001c3c:	b570      	push	{r4, r5, r6, lr}
 8001c3e:	0242      	lsls	r2, r0, #9
 8001c40:	0043      	lsls	r3, r0, #1
 8001c42:	0fc4      	lsrs	r4, r0, #31
 8001c44:	20fe      	movs	r0, #254	; 0xfe
 8001c46:	0e1b      	lsrs	r3, r3, #24
 8001c48:	1c59      	adds	r1, r3, #1
 8001c4a:	0a55      	lsrs	r5, r2, #9
 8001c4c:	4208      	tst	r0, r1
 8001c4e:	d00c      	beq.n	8001c6a <__aeabi_f2d+0x2e>
 8001c50:	21e0      	movs	r1, #224	; 0xe0
 8001c52:	0089      	lsls	r1, r1, #2
 8001c54:	468c      	mov	ip, r1
 8001c56:	076d      	lsls	r5, r5, #29
 8001c58:	0b12      	lsrs	r2, r2, #12
 8001c5a:	4463      	add	r3, ip
 8001c5c:	051b      	lsls	r3, r3, #20
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	07e4      	lsls	r4, r4, #31
 8001c62:	4323      	orrs	r3, r4
 8001c64:	0028      	movs	r0, r5
 8001c66:	0019      	movs	r1, r3
 8001c68:	bd70      	pop	{r4, r5, r6, pc}
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d114      	bne.n	8001c98 <__aeabi_f2d+0x5c>
 8001c6e:	2d00      	cmp	r5, #0
 8001c70:	d01b      	beq.n	8001caa <__aeabi_f2d+0x6e>
 8001c72:	0028      	movs	r0, r5
 8001c74:	f000 f8a2 	bl	8001dbc <__clzsi2>
 8001c78:	280a      	cmp	r0, #10
 8001c7a:	dc1c      	bgt.n	8001cb6 <__aeabi_f2d+0x7a>
 8001c7c:	230b      	movs	r3, #11
 8001c7e:	002a      	movs	r2, r5
 8001c80:	1a1b      	subs	r3, r3, r0
 8001c82:	40da      	lsrs	r2, r3
 8001c84:	0003      	movs	r3, r0
 8001c86:	3315      	adds	r3, #21
 8001c88:	409d      	lsls	r5, r3
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <__aeabi_f2d+0x88>)
 8001c8c:	0312      	lsls	r2, r2, #12
 8001c8e:	1a1b      	subs	r3, r3, r0
 8001c90:	055b      	lsls	r3, r3, #21
 8001c92:	0b12      	lsrs	r2, r2, #12
 8001c94:	0d5b      	lsrs	r3, r3, #21
 8001c96:	e7e1      	b.n	8001c5c <__aeabi_f2d+0x20>
 8001c98:	2d00      	cmp	r5, #0
 8001c9a:	d009      	beq.n	8001cb0 <__aeabi_f2d+0x74>
 8001c9c:	0b13      	lsrs	r3, r2, #12
 8001c9e:	2280      	movs	r2, #128	; 0x80
 8001ca0:	0312      	lsls	r2, r2, #12
 8001ca2:	431a      	orrs	r2, r3
 8001ca4:	076d      	lsls	r5, r5, #29
 8001ca6:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <__aeabi_f2d+0x8c>)
 8001ca8:	e7d8      	b.n	8001c5c <__aeabi_f2d+0x20>
 8001caa:	2300      	movs	r3, #0
 8001cac:	2200      	movs	r2, #0
 8001cae:	e7d5      	b.n	8001c5c <__aeabi_f2d+0x20>
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <__aeabi_f2d+0x8c>)
 8001cb4:	e7d2      	b.n	8001c5c <__aeabi_f2d+0x20>
 8001cb6:	0003      	movs	r3, r0
 8001cb8:	002a      	movs	r2, r5
 8001cba:	3b0b      	subs	r3, #11
 8001cbc:	409a      	lsls	r2, r3
 8001cbe:	2500      	movs	r5, #0
 8001cc0:	e7e3      	b.n	8001c8a <__aeabi_f2d+0x4e>
 8001cc2:	46c0      	nop			; (mov r8, r8)
 8001cc4:	00000389 	.word	0x00000389
 8001cc8:	000007ff 	.word	0x000007ff

08001ccc <__aeabi_cdrcmple>:
 8001ccc:	4684      	mov	ip, r0
 8001cce:	0010      	movs	r0, r2
 8001cd0:	4662      	mov	r2, ip
 8001cd2:	468c      	mov	ip, r1
 8001cd4:	0019      	movs	r1, r3
 8001cd6:	4663      	mov	r3, ip
 8001cd8:	e000      	b.n	8001cdc <__aeabi_cdcmpeq>
 8001cda:	46c0      	nop			; (mov r8, r8)

08001cdc <__aeabi_cdcmpeq>:
 8001cdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001cde:	f000 f9e3 	bl	80020a8 <__ledf2>
 8001ce2:	2800      	cmp	r0, #0
 8001ce4:	d401      	bmi.n	8001cea <__aeabi_cdcmpeq+0xe>
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	42c8      	cmn	r0, r1
 8001cea:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001cec <__aeabi_dcmpeq>:
 8001cec:	b510      	push	{r4, lr}
 8001cee:	f000 f933 	bl	8001f58 <__eqdf2>
 8001cf2:	4240      	negs	r0, r0
 8001cf4:	3001      	adds	r0, #1
 8001cf6:	bd10      	pop	{r4, pc}

08001cf8 <__aeabi_dcmplt>:
 8001cf8:	b510      	push	{r4, lr}
 8001cfa:	f000 f9d5 	bl	80020a8 <__ledf2>
 8001cfe:	2800      	cmp	r0, #0
 8001d00:	db01      	blt.n	8001d06 <__aeabi_dcmplt+0xe>
 8001d02:	2000      	movs	r0, #0
 8001d04:	bd10      	pop	{r4, pc}
 8001d06:	2001      	movs	r0, #1
 8001d08:	bd10      	pop	{r4, pc}
 8001d0a:	46c0      	nop			; (mov r8, r8)

08001d0c <__aeabi_dcmple>:
 8001d0c:	b510      	push	{r4, lr}
 8001d0e:	f000 f9cb 	bl	80020a8 <__ledf2>
 8001d12:	2800      	cmp	r0, #0
 8001d14:	dd01      	ble.n	8001d1a <__aeabi_dcmple+0xe>
 8001d16:	2000      	movs	r0, #0
 8001d18:	bd10      	pop	{r4, pc}
 8001d1a:	2001      	movs	r0, #1
 8001d1c:	bd10      	pop	{r4, pc}
 8001d1e:	46c0      	nop			; (mov r8, r8)

08001d20 <__aeabi_dcmpgt>:
 8001d20:	b510      	push	{r4, lr}
 8001d22:	f000 f95b 	bl	8001fdc <__gedf2>
 8001d26:	2800      	cmp	r0, #0
 8001d28:	dc01      	bgt.n	8001d2e <__aeabi_dcmpgt+0xe>
 8001d2a:	2000      	movs	r0, #0
 8001d2c:	bd10      	pop	{r4, pc}
 8001d2e:	2001      	movs	r0, #1
 8001d30:	bd10      	pop	{r4, pc}
 8001d32:	46c0      	nop			; (mov r8, r8)

08001d34 <__aeabi_dcmpge>:
 8001d34:	b510      	push	{r4, lr}
 8001d36:	f000 f951 	bl	8001fdc <__gedf2>
 8001d3a:	2800      	cmp	r0, #0
 8001d3c:	da01      	bge.n	8001d42 <__aeabi_dcmpge+0xe>
 8001d3e:	2000      	movs	r0, #0
 8001d40:	bd10      	pop	{r4, pc}
 8001d42:	2001      	movs	r0, #1
 8001d44:	bd10      	pop	{r4, pc}
 8001d46:	46c0      	nop			; (mov r8, r8)

08001d48 <__aeabi_cfrcmple>:
 8001d48:	4684      	mov	ip, r0
 8001d4a:	0008      	movs	r0, r1
 8001d4c:	4661      	mov	r1, ip
 8001d4e:	e7ff      	b.n	8001d50 <__aeabi_cfcmpeq>

08001d50 <__aeabi_cfcmpeq>:
 8001d50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001d52:	f000 f8bd 	bl	8001ed0 <__lesf2>
 8001d56:	2800      	cmp	r0, #0
 8001d58:	d401      	bmi.n	8001d5e <__aeabi_cfcmpeq+0xe>
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	42c8      	cmn	r0, r1
 8001d5e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001d60 <__aeabi_fcmpeq>:
 8001d60:	b510      	push	{r4, lr}
 8001d62:	f000 f849 	bl	8001df8 <__eqsf2>
 8001d66:	4240      	negs	r0, r0
 8001d68:	3001      	adds	r0, #1
 8001d6a:	bd10      	pop	{r4, pc}

08001d6c <__aeabi_fcmplt>:
 8001d6c:	b510      	push	{r4, lr}
 8001d6e:	f000 f8af 	bl	8001ed0 <__lesf2>
 8001d72:	2800      	cmp	r0, #0
 8001d74:	db01      	blt.n	8001d7a <__aeabi_fcmplt+0xe>
 8001d76:	2000      	movs	r0, #0
 8001d78:	bd10      	pop	{r4, pc}
 8001d7a:	2001      	movs	r0, #1
 8001d7c:	bd10      	pop	{r4, pc}
 8001d7e:	46c0      	nop			; (mov r8, r8)

08001d80 <__aeabi_fcmple>:
 8001d80:	b510      	push	{r4, lr}
 8001d82:	f000 f8a5 	bl	8001ed0 <__lesf2>
 8001d86:	2800      	cmp	r0, #0
 8001d88:	dd01      	ble.n	8001d8e <__aeabi_fcmple+0xe>
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	bd10      	pop	{r4, pc}
 8001d8e:	2001      	movs	r0, #1
 8001d90:	bd10      	pop	{r4, pc}
 8001d92:	46c0      	nop			; (mov r8, r8)

08001d94 <__aeabi_fcmpgt>:
 8001d94:	b510      	push	{r4, lr}
 8001d96:	f000 f855 	bl	8001e44 <__gesf2>
 8001d9a:	2800      	cmp	r0, #0
 8001d9c:	dc01      	bgt.n	8001da2 <__aeabi_fcmpgt+0xe>
 8001d9e:	2000      	movs	r0, #0
 8001da0:	bd10      	pop	{r4, pc}
 8001da2:	2001      	movs	r0, #1
 8001da4:	bd10      	pop	{r4, pc}
 8001da6:	46c0      	nop			; (mov r8, r8)

08001da8 <__aeabi_fcmpge>:
 8001da8:	b510      	push	{r4, lr}
 8001daa:	f000 f84b 	bl	8001e44 <__gesf2>
 8001dae:	2800      	cmp	r0, #0
 8001db0:	da01      	bge.n	8001db6 <__aeabi_fcmpge+0xe>
 8001db2:	2000      	movs	r0, #0
 8001db4:	bd10      	pop	{r4, pc}
 8001db6:	2001      	movs	r0, #1
 8001db8:	bd10      	pop	{r4, pc}
 8001dba:	46c0      	nop			; (mov r8, r8)

08001dbc <__clzsi2>:
 8001dbc:	211c      	movs	r1, #28
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	041b      	lsls	r3, r3, #16
 8001dc2:	4298      	cmp	r0, r3
 8001dc4:	d301      	bcc.n	8001dca <__clzsi2+0xe>
 8001dc6:	0c00      	lsrs	r0, r0, #16
 8001dc8:	3910      	subs	r1, #16
 8001dca:	0a1b      	lsrs	r3, r3, #8
 8001dcc:	4298      	cmp	r0, r3
 8001dce:	d301      	bcc.n	8001dd4 <__clzsi2+0x18>
 8001dd0:	0a00      	lsrs	r0, r0, #8
 8001dd2:	3908      	subs	r1, #8
 8001dd4:	091b      	lsrs	r3, r3, #4
 8001dd6:	4298      	cmp	r0, r3
 8001dd8:	d301      	bcc.n	8001dde <__clzsi2+0x22>
 8001dda:	0900      	lsrs	r0, r0, #4
 8001ddc:	3904      	subs	r1, #4
 8001dde:	a202      	add	r2, pc, #8	; (adr r2, 8001de8 <__clzsi2+0x2c>)
 8001de0:	5c10      	ldrb	r0, [r2, r0]
 8001de2:	1840      	adds	r0, r0, r1
 8001de4:	4770      	bx	lr
 8001de6:	46c0      	nop			; (mov r8, r8)
 8001de8:	02020304 	.word	0x02020304
 8001dec:	01010101 	.word	0x01010101
	...

08001df8 <__eqsf2>:
 8001df8:	b570      	push	{r4, r5, r6, lr}
 8001dfa:	0042      	lsls	r2, r0, #1
 8001dfc:	0245      	lsls	r5, r0, #9
 8001dfe:	024e      	lsls	r6, r1, #9
 8001e00:	004c      	lsls	r4, r1, #1
 8001e02:	0fc3      	lsrs	r3, r0, #31
 8001e04:	0a6d      	lsrs	r5, r5, #9
 8001e06:	2001      	movs	r0, #1
 8001e08:	0e12      	lsrs	r2, r2, #24
 8001e0a:	0a76      	lsrs	r6, r6, #9
 8001e0c:	0e24      	lsrs	r4, r4, #24
 8001e0e:	0fc9      	lsrs	r1, r1, #31
 8001e10:	2aff      	cmp	r2, #255	; 0xff
 8001e12:	d006      	beq.n	8001e22 <__eqsf2+0x2a>
 8001e14:	2cff      	cmp	r4, #255	; 0xff
 8001e16:	d003      	beq.n	8001e20 <__eqsf2+0x28>
 8001e18:	42a2      	cmp	r2, r4
 8001e1a:	d101      	bne.n	8001e20 <__eqsf2+0x28>
 8001e1c:	42b5      	cmp	r5, r6
 8001e1e:	d006      	beq.n	8001e2e <__eqsf2+0x36>
 8001e20:	bd70      	pop	{r4, r5, r6, pc}
 8001e22:	2d00      	cmp	r5, #0
 8001e24:	d1fc      	bne.n	8001e20 <__eqsf2+0x28>
 8001e26:	2cff      	cmp	r4, #255	; 0xff
 8001e28:	d1fa      	bne.n	8001e20 <__eqsf2+0x28>
 8001e2a:	2e00      	cmp	r6, #0
 8001e2c:	d1f8      	bne.n	8001e20 <__eqsf2+0x28>
 8001e2e:	428b      	cmp	r3, r1
 8001e30:	d006      	beq.n	8001e40 <__eqsf2+0x48>
 8001e32:	2001      	movs	r0, #1
 8001e34:	2a00      	cmp	r2, #0
 8001e36:	d1f3      	bne.n	8001e20 <__eqsf2+0x28>
 8001e38:	0028      	movs	r0, r5
 8001e3a:	1e43      	subs	r3, r0, #1
 8001e3c:	4198      	sbcs	r0, r3
 8001e3e:	e7ef      	b.n	8001e20 <__eqsf2+0x28>
 8001e40:	2000      	movs	r0, #0
 8001e42:	e7ed      	b.n	8001e20 <__eqsf2+0x28>

08001e44 <__gesf2>:
 8001e44:	b570      	push	{r4, r5, r6, lr}
 8001e46:	0042      	lsls	r2, r0, #1
 8001e48:	0245      	lsls	r5, r0, #9
 8001e4a:	024e      	lsls	r6, r1, #9
 8001e4c:	004c      	lsls	r4, r1, #1
 8001e4e:	0fc3      	lsrs	r3, r0, #31
 8001e50:	0a6d      	lsrs	r5, r5, #9
 8001e52:	0e12      	lsrs	r2, r2, #24
 8001e54:	0a76      	lsrs	r6, r6, #9
 8001e56:	0e24      	lsrs	r4, r4, #24
 8001e58:	0fc8      	lsrs	r0, r1, #31
 8001e5a:	2aff      	cmp	r2, #255	; 0xff
 8001e5c:	d01b      	beq.n	8001e96 <__gesf2+0x52>
 8001e5e:	2cff      	cmp	r4, #255	; 0xff
 8001e60:	d00e      	beq.n	8001e80 <__gesf2+0x3c>
 8001e62:	2a00      	cmp	r2, #0
 8001e64:	d11b      	bne.n	8001e9e <__gesf2+0x5a>
 8001e66:	2c00      	cmp	r4, #0
 8001e68:	d101      	bne.n	8001e6e <__gesf2+0x2a>
 8001e6a:	2e00      	cmp	r6, #0
 8001e6c:	d01c      	beq.n	8001ea8 <__gesf2+0x64>
 8001e6e:	2d00      	cmp	r5, #0
 8001e70:	d00c      	beq.n	8001e8c <__gesf2+0x48>
 8001e72:	4283      	cmp	r3, r0
 8001e74:	d01c      	beq.n	8001eb0 <__gesf2+0x6c>
 8001e76:	2102      	movs	r1, #2
 8001e78:	1e58      	subs	r0, r3, #1
 8001e7a:	4008      	ands	r0, r1
 8001e7c:	3801      	subs	r0, #1
 8001e7e:	bd70      	pop	{r4, r5, r6, pc}
 8001e80:	2e00      	cmp	r6, #0
 8001e82:	d122      	bne.n	8001eca <__gesf2+0x86>
 8001e84:	2a00      	cmp	r2, #0
 8001e86:	d1f4      	bne.n	8001e72 <__gesf2+0x2e>
 8001e88:	2d00      	cmp	r5, #0
 8001e8a:	d1f2      	bne.n	8001e72 <__gesf2+0x2e>
 8001e8c:	2800      	cmp	r0, #0
 8001e8e:	d1f6      	bne.n	8001e7e <__gesf2+0x3a>
 8001e90:	2001      	movs	r0, #1
 8001e92:	4240      	negs	r0, r0
 8001e94:	e7f3      	b.n	8001e7e <__gesf2+0x3a>
 8001e96:	2d00      	cmp	r5, #0
 8001e98:	d117      	bne.n	8001eca <__gesf2+0x86>
 8001e9a:	2cff      	cmp	r4, #255	; 0xff
 8001e9c:	d0f0      	beq.n	8001e80 <__gesf2+0x3c>
 8001e9e:	2c00      	cmp	r4, #0
 8001ea0:	d1e7      	bne.n	8001e72 <__gesf2+0x2e>
 8001ea2:	2e00      	cmp	r6, #0
 8001ea4:	d1e5      	bne.n	8001e72 <__gesf2+0x2e>
 8001ea6:	e7e6      	b.n	8001e76 <__gesf2+0x32>
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	2d00      	cmp	r5, #0
 8001eac:	d0e7      	beq.n	8001e7e <__gesf2+0x3a>
 8001eae:	e7e2      	b.n	8001e76 <__gesf2+0x32>
 8001eb0:	42a2      	cmp	r2, r4
 8001eb2:	dc05      	bgt.n	8001ec0 <__gesf2+0x7c>
 8001eb4:	dbea      	blt.n	8001e8c <__gesf2+0x48>
 8001eb6:	42b5      	cmp	r5, r6
 8001eb8:	d802      	bhi.n	8001ec0 <__gesf2+0x7c>
 8001eba:	d3e7      	bcc.n	8001e8c <__gesf2+0x48>
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	e7de      	b.n	8001e7e <__gesf2+0x3a>
 8001ec0:	4243      	negs	r3, r0
 8001ec2:	4158      	adcs	r0, r3
 8001ec4:	0040      	lsls	r0, r0, #1
 8001ec6:	3801      	subs	r0, #1
 8001ec8:	e7d9      	b.n	8001e7e <__gesf2+0x3a>
 8001eca:	2002      	movs	r0, #2
 8001ecc:	4240      	negs	r0, r0
 8001ece:	e7d6      	b.n	8001e7e <__gesf2+0x3a>

08001ed0 <__lesf2>:
 8001ed0:	b570      	push	{r4, r5, r6, lr}
 8001ed2:	0042      	lsls	r2, r0, #1
 8001ed4:	0245      	lsls	r5, r0, #9
 8001ed6:	024e      	lsls	r6, r1, #9
 8001ed8:	004c      	lsls	r4, r1, #1
 8001eda:	0fc3      	lsrs	r3, r0, #31
 8001edc:	0a6d      	lsrs	r5, r5, #9
 8001ede:	0e12      	lsrs	r2, r2, #24
 8001ee0:	0a76      	lsrs	r6, r6, #9
 8001ee2:	0e24      	lsrs	r4, r4, #24
 8001ee4:	0fc8      	lsrs	r0, r1, #31
 8001ee6:	2aff      	cmp	r2, #255	; 0xff
 8001ee8:	d00b      	beq.n	8001f02 <__lesf2+0x32>
 8001eea:	2cff      	cmp	r4, #255	; 0xff
 8001eec:	d00d      	beq.n	8001f0a <__lesf2+0x3a>
 8001eee:	2a00      	cmp	r2, #0
 8001ef0:	d11f      	bne.n	8001f32 <__lesf2+0x62>
 8001ef2:	2c00      	cmp	r4, #0
 8001ef4:	d116      	bne.n	8001f24 <__lesf2+0x54>
 8001ef6:	2e00      	cmp	r6, #0
 8001ef8:	d114      	bne.n	8001f24 <__lesf2+0x54>
 8001efa:	2000      	movs	r0, #0
 8001efc:	2d00      	cmp	r5, #0
 8001efe:	d010      	beq.n	8001f22 <__lesf2+0x52>
 8001f00:	e009      	b.n	8001f16 <__lesf2+0x46>
 8001f02:	2d00      	cmp	r5, #0
 8001f04:	d10c      	bne.n	8001f20 <__lesf2+0x50>
 8001f06:	2cff      	cmp	r4, #255	; 0xff
 8001f08:	d113      	bne.n	8001f32 <__lesf2+0x62>
 8001f0a:	2e00      	cmp	r6, #0
 8001f0c:	d108      	bne.n	8001f20 <__lesf2+0x50>
 8001f0e:	2a00      	cmp	r2, #0
 8001f10:	d008      	beq.n	8001f24 <__lesf2+0x54>
 8001f12:	4283      	cmp	r3, r0
 8001f14:	d012      	beq.n	8001f3c <__lesf2+0x6c>
 8001f16:	2102      	movs	r1, #2
 8001f18:	1e58      	subs	r0, r3, #1
 8001f1a:	4008      	ands	r0, r1
 8001f1c:	3801      	subs	r0, #1
 8001f1e:	e000      	b.n	8001f22 <__lesf2+0x52>
 8001f20:	2002      	movs	r0, #2
 8001f22:	bd70      	pop	{r4, r5, r6, pc}
 8001f24:	2d00      	cmp	r5, #0
 8001f26:	d1f4      	bne.n	8001f12 <__lesf2+0x42>
 8001f28:	2800      	cmp	r0, #0
 8001f2a:	d1fa      	bne.n	8001f22 <__lesf2+0x52>
 8001f2c:	2001      	movs	r0, #1
 8001f2e:	4240      	negs	r0, r0
 8001f30:	e7f7      	b.n	8001f22 <__lesf2+0x52>
 8001f32:	2c00      	cmp	r4, #0
 8001f34:	d1ed      	bne.n	8001f12 <__lesf2+0x42>
 8001f36:	2e00      	cmp	r6, #0
 8001f38:	d1eb      	bne.n	8001f12 <__lesf2+0x42>
 8001f3a:	e7ec      	b.n	8001f16 <__lesf2+0x46>
 8001f3c:	42a2      	cmp	r2, r4
 8001f3e:	dc05      	bgt.n	8001f4c <__lesf2+0x7c>
 8001f40:	dbf2      	blt.n	8001f28 <__lesf2+0x58>
 8001f42:	42b5      	cmp	r5, r6
 8001f44:	d802      	bhi.n	8001f4c <__lesf2+0x7c>
 8001f46:	d3ef      	bcc.n	8001f28 <__lesf2+0x58>
 8001f48:	2000      	movs	r0, #0
 8001f4a:	e7ea      	b.n	8001f22 <__lesf2+0x52>
 8001f4c:	4243      	negs	r3, r0
 8001f4e:	4158      	adcs	r0, r3
 8001f50:	0040      	lsls	r0, r0, #1
 8001f52:	3801      	subs	r0, #1
 8001f54:	e7e5      	b.n	8001f22 <__lesf2+0x52>
 8001f56:	46c0      	nop			; (mov r8, r8)

08001f58 <__eqdf2>:
 8001f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f5a:	464e      	mov	r6, r9
 8001f5c:	4645      	mov	r5, r8
 8001f5e:	46de      	mov	lr, fp
 8001f60:	4657      	mov	r7, sl
 8001f62:	4690      	mov	r8, r2
 8001f64:	b5e0      	push	{r5, r6, r7, lr}
 8001f66:	0017      	movs	r7, r2
 8001f68:	031a      	lsls	r2, r3, #12
 8001f6a:	0b12      	lsrs	r2, r2, #12
 8001f6c:	0005      	movs	r5, r0
 8001f6e:	4684      	mov	ip, r0
 8001f70:	4819      	ldr	r0, [pc, #100]	; (8001fd8 <__eqdf2+0x80>)
 8001f72:	030e      	lsls	r6, r1, #12
 8001f74:	004c      	lsls	r4, r1, #1
 8001f76:	4691      	mov	r9, r2
 8001f78:	005a      	lsls	r2, r3, #1
 8001f7a:	0fdb      	lsrs	r3, r3, #31
 8001f7c:	469b      	mov	fp, r3
 8001f7e:	0b36      	lsrs	r6, r6, #12
 8001f80:	0d64      	lsrs	r4, r4, #21
 8001f82:	0fc9      	lsrs	r1, r1, #31
 8001f84:	0d52      	lsrs	r2, r2, #21
 8001f86:	4284      	cmp	r4, r0
 8001f88:	d019      	beq.n	8001fbe <__eqdf2+0x66>
 8001f8a:	4282      	cmp	r2, r0
 8001f8c:	d010      	beq.n	8001fb0 <__eqdf2+0x58>
 8001f8e:	2001      	movs	r0, #1
 8001f90:	4294      	cmp	r4, r2
 8001f92:	d10e      	bne.n	8001fb2 <__eqdf2+0x5a>
 8001f94:	454e      	cmp	r6, r9
 8001f96:	d10c      	bne.n	8001fb2 <__eqdf2+0x5a>
 8001f98:	2001      	movs	r0, #1
 8001f9a:	45c4      	cmp	ip, r8
 8001f9c:	d109      	bne.n	8001fb2 <__eqdf2+0x5a>
 8001f9e:	4559      	cmp	r1, fp
 8001fa0:	d017      	beq.n	8001fd2 <__eqdf2+0x7a>
 8001fa2:	2c00      	cmp	r4, #0
 8001fa4:	d105      	bne.n	8001fb2 <__eqdf2+0x5a>
 8001fa6:	0030      	movs	r0, r6
 8001fa8:	4328      	orrs	r0, r5
 8001faa:	1e43      	subs	r3, r0, #1
 8001fac:	4198      	sbcs	r0, r3
 8001fae:	e000      	b.n	8001fb2 <__eqdf2+0x5a>
 8001fb0:	2001      	movs	r0, #1
 8001fb2:	bcf0      	pop	{r4, r5, r6, r7}
 8001fb4:	46bb      	mov	fp, r7
 8001fb6:	46b2      	mov	sl, r6
 8001fb8:	46a9      	mov	r9, r5
 8001fba:	46a0      	mov	r8, r4
 8001fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fbe:	0033      	movs	r3, r6
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	432b      	orrs	r3, r5
 8001fc4:	d1f5      	bne.n	8001fb2 <__eqdf2+0x5a>
 8001fc6:	42a2      	cmp	r2, r4
 8001fc8:	d1f3      	bne.n	8001fb2 <__eqdf2+0x5a>
 8001fca:	464b      	mov	r3, r9
 8001fcc:	433b      	orrs	r3, r7
 8001fce:	d1f0      	bne.n	8001fb2 <__eqdf2+0x5a>
 8001fd0:	e7e2      	b.n	8001f98 <__eqdf2+0x40>
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	e7ed      	b.n	8001fb2 <__eqdf2+0x5a>
 8001fd6:	46c0      	nop			; (mov r8, r8)
 8001fd8:	000007ff 	.word	0x000007ff

08001fdc <__gedf2>:
 8001fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fde:	4647      	mov	r7, r8
 8001fe0:	46ce      	mov	lr, r9
 8001fe2:	0004      	movs	r4, r0
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	0016      	movs	r6, r2
 8001fe8:	031b      	lsls	r3, r3, #12
 8001fea:	0b1b      	lsrs	r3, r3, #12
 8001fec:	4d2d      	ldr	r5, [pc, #180]	; (80020a4 <__gedf2+0xc8>)
 8001fee:	004a      	lsls	r2, r1, #1
 8001ff0:	4699      	mov	r9, r3
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	0043      	lsls	r3, r0, #1
 8001ff6:	030f      	lsls	r7, r1, #12
 8001ff8:	46a4      	mov	ip, r4
 8001ffa:	46b0      	mov	r8, r6
 8001ffc:	0b3f      	lsrs	r7, r7, #12
 8001ffe:	0d52      	lsrs	r2, r2, #21
 8002000:	0fc9      	lsrs	r1, r1, #31
 8002002:	0d5b      	lsrs	r3, r3, #21
 8002004:	0fc0      	lsrs	r0, r0, #31
 8002006:	42aa      	cmp	r2, r5
 8002008:	d021      	beq.n	800204e <__gedf2+0x72>
 800200a:	42ab      	cmp	r3, r5
 800200c:	d013      	beq.n	8002036 <__gedf2+0x5a>
 800200e:	2a00      	cmp	r2, #0
 8002010:	d122      	bne.n	8002058 <__gedf2+0x7c>
 8002012:	433c      	orrs	r4, r7
 8002014:	2b00      	cmp	r3, #0
 8002016:	d102      	bne.n	800201e <__gedf2+0x42>
 8002018:	464d      	mov	r5, r9
 800201a:	432e      	orrs	r6, r5
 800201c:	d022      	beq.n	8002064 <__gedf2+0x88>
 800201e:	2c00      	cmp	r4, #0
 8002020:	d010      	beq.n	8002044 <__gedf2+0x68>
 8002022:	4281      	cmp	r1, r0
 8002024:	d022      	beq.n	800206c <__gedf2+0x90>
 8002026:	2002      	movs	r0, #2
 8002028:	3901      	subs	r1, #1
 800202a:	4008      	ands	r0, r1
 800202c:	3801      	subs	r0, #1
 800202e:	bcc0      	pop	{r6, r7}
 8002030:	46b9      	mov	r9, r7
 8002032:	46b0      	mov	r8, r6
 8002034:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002036:	464d      	mov	r5, r9
 8002038:	432e      	orrs	r6, r5
 800203a:	d129      	bne.n	8002090 <__gedf2+0xb4>
 800203c:	2a00      	cmp	r2, #0
 800203e:	d1f0      	bne.n	8002022 <__gedf2+0x46>
 8002040:	433c      	orrs	r4, r7
 8002042:	d1ee      	bne.n	8002022 <__gedf2+0x46>
 8002044:	2800      	cmp	r0, #0
 8002046:	d1f2      	bne.n	800202e <__gedf2+0x52>
 8002048:	2001      	movs	r0, #1
 800204a:	4240      	negs	r0, r0
 800204c:	e7ef      	b.n	800202e <__gedf2+0x52>
 800204e:	003d      	movs	r5, r7
 8002050:	4325      	orrs	r5, r4
 8002052:	d11d      	bne.n	8002090 <__gedf2+0xb4>
 8002054:	4293      	cmp	r3, r2
 8002056:	d0ee      	beq.n	8002036 <__gedf2+0x5a>
 8002058:	2b00      	cmp	r3, #0
 800205a:	d1e2      	bne.n	8002022 <__gedf2+0x46>
 800205c:	464c      	mov	r4, r9
 800205e:	4326      	orrs	r6, r4
 8002060:	d1df      	bne.n	8002022 <__gedf2+0x46>
 8002062:	e7e0      	b.n	8002026 <__gedf2+0x4a>
 8002064:	2000      	movs	r0, #0
 8002066:	2c00      	cmp	r4, #0
 8002068:	d0e1      	beq.n	800202e <__gedf2+0x52>
 800206a:	e7dc      	b.n	8002026 <__gedf2+0x4a>
 800206c:	429a      	cmp	r2, r3
 800206e:	dc0a      	bgt.n	8002086 <__gedf2+0xaa>
 8002070:	dbe8      	blt.n	8002044 <__gedf2+0x68>
 8002072:	454f      	cmp	r7, r9
 8002074:	d8d7      	bhi.n	8002026 <__gedf2+0x4a>
 8002076:	d00e      	beq.n	8002096 <__gedf2+0xba>
 8002078:	2000      	movs	r0, #0
 800207a:	454f      	cmp	r7, r9
 800207c:	d2d7      	bcs.n	800202e <__gedf2+0x52>
 800207e:	2900      	cmp	r1, #0
 8002080:	d0e2      	beq.n	8002048 <__gedf2+0x6c>
 8002082:	0008      	movs	r0, r1
 8002084:	e7d3      	b.n	800202e <__gedf2+0x52>
 8002086:	4243      	negs	r3, r0
 8002088:	4158      	adcs	r0, r3
 800208a:	0040      	lsls	r0, r0, #1
 800208c:	3801      	subs	r0, #1
 800208e:	e7ce      	b.n	800202e <__gedf2+0x52>
 8002090:	2002      	movs	r0, #2
 8002092:	4240      	negs	r0, r0
 8002094:	e7cb      	b.n	800202e <__gedf2+0x52>
 8002096:	45c4      	cmp	ip, r8
 8002098:	d8c5      	bhi.n	8002026 <__gedf2+0x4a>
 800209a:	2000      	movs	r0, #0
 800209c:	45c4      	cmp	ip, r8
 800209e:	d2c6      	bcs.n	800202e <__gedf2+0x52>
 80020a0:	e7ed      	b.n	800207e <__gedf2+0xa2>
 80020a2:	46c0      	nop			; (mov r8, r8)
 80020a4:	000007ff 	.word	0x000007ff

080020a8 <__ledf2>:
 80020a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020aa:	4647      	mov	r7, r8
 80020ac:	46ce      	mov	lr, r9
 80020ae:	0004      	movs	r4, r0
 80020b0:	0018      	movs	r0, r3
 80020b2:	0016      	movs	r6, r2
 80020b4:	031b      	lsls	r3, r3, #12
 80020b6:	0b1b      	lsrs	r3, r3, #12
 80020b8:	4d2c      	ldr	r5, [pc, #176]	; (800216c <__ledf2+0xc4>)
 80020ba:	004a      	lsls	r2, r1, #1
 80020bc:	4699      	mov	r9, r3
 80020be:	b580      	push	{r7, lr}
 80020c0:	0043      	lsls	r3, r0, #1
 80020c2:	030f      	lsls	r7, r1, #12
 80020c4:	46a4      	mov	ip, r4
 80020c6:	46b0      	mov	r8, r6
 80020c8:	0b3f      	lsrs	r7, r7, #12
 80020ca:	0d52      	lsrs	r2, r2, #21
 80020cc:	0fc9      	lsrs	r1, r1, #31
 80020ce:	0d5b      	lsrs	r3, r3, #21
 80020d0:	0fc0      	lsrs	r0, r0, #31
 80020d2:	42aa      	cmp	r2, r5
 80020d4:	d00d      	beq.n	80020f2 <__ledf2+0x4a>
 80020d6:	42ab      	cmp	r3, r5
 80020d8:	d010      	beq.n	80020fc <__ledf2+0x54>
 80020da:	2a00      	cmp	r2, #0
 80020dc:	d127      	bne.n	800212e <__ledf2+0x86>
 80020de:	433c      	orrs	r4, r7
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d111      	bne.n	8002108 <__ledf2+0x60>
 80020e4:	464d      	mov	r5, r9
 80020e6:	432e      	orrs	r6, r5
 80020e8:	d10e      	bne.n	8002108 <__ledf2+0x60>
 80020ea:	2000      	movs	r0, #0
 80020ec:	2c00      	cmp	r4, #0
 80020ee:	d015      	beq.n	800211c <__ledf2+0x74>
 80020f0:	e00e      	b.n	8002110 <__ledf2+0x68>
 80020f2:	003d      	movs	r5, r7
 80020f4:	4325      	orrs	r5, r4
 80020f6:	d110      	bne.n	800211a <__ledf2+0x72>
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d118      	bne.n	800212e <__ledf2+0x86>
 80020fc:	464d      	mov	r5, r9
 80020fe:	432e      	orrs	r6, r5
 8002100:	d10b      	bne.n	800211a <__ledf2+0x72>
 8002102:	2a00      	cmp	r2, #0
 8002104:	d102      	bne.n	800210c <__ledf2+0x64>
 8002106:	433c      	orrs	r4, r7
 8002108:	2c00      	cmp	r4, #0
 800210a:	d00b      	beq.n	8002124 <__ledf2+0x7c>
 800210c:	4281      	cmp	r1, r0
 800210e:	d014      	beq.n	800213a <__ledf2+0x92>
 8002110:	2002      	movs	r0, #2
 8002112:	3901      	subs	r1, #1
 8002114:	4008      	ands	r0, r1
 8002116:	3801      	subs	r0, #1
 8002118:	e000      	b.n	800211c <__ledf2+0x74>
 800211a:	2002      	movs	r0, #2
 800211c:	bcc0      	pop	{r6, r7}
 800211e:	46b9      	mov	r9, r7
 8002120:	46b0      	mov	r8, r6
 8002122:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002124:	2800      	cmp	r0, #0
 8002126:	d1f9      	bne.n	800211c <__ledf2+0x74>
 8002128:	2001      	movs	r0, #1
 800212a:	4240      	negs	r0, r0
 800212c:	e7f6      	b.n	800211c <__ledf2+0x74>
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1ec      	bne.n	800210c <__ledf2+0x64>
 8002132:	464c      	mov	r4, r9
 8002134:	4326      	orrs	r6, r4
 8002136:	d1e9      	bne.n	800210c <__ledf2+0x64>
 8002138:	e7ea      	b.n	8002110 <__ledf2+0x68>
 800213a:	429a      	cmp	r2, r3
 800213c:	dd04      	ble.n	8002148 <__ledf2+0xa0>
 800213e:	4243      	negs	r3, r0
 8002140:	4158      	adcs	r0, r3
 8002142:	0040      	lsls	r0, r0, #1
 8002144:	3801      	subs	r0, #1
 8002146:	e7e9      	b.n	800211c <__ledf2+0x74>
 8002148:	429a      	cmp	r2, r3
 800214a:	dbeb      	blt.n	8002124 <__ledf2+0x7c>
 800214c:	454f      	cmp	r7, r9
 800214e:	d8df      	bhi.n	8002110 <__ledf2+0x68>
 8002150:	d006      	beq.n	8002160 <__ledf2+0xb8>
 8002152:	2000      	movs	r0, #0
 8002154:	454f      	cmp	r7, r9
 8002156:	d2e1      	bcs.n	800211c <__ledf2+0x74>
 8002158:	2900      	cmp	r1, #0
 800215a:	d0e5      	beq.n	8002128 <__ledf2+0x80>
 800215c:	0008      	movs	r0, r1
 800215e:	e7dd      	b.n	800211c <__ledf2+0x74>
 8002160:	45c4      	cmp	ip, r8
 8002162:	d8d5      	bhi.n	8002110 <__ledf2+0x68>
 8002164:	2000      	movs	r0, #0
 8002166:	45c4      	cmp	ip, r8
 8002168:	d2d8      	bcs.n	800211c <__ledf2+0x74>
 800216a:	e7f5      	b.n	8002158 <__ledf2+0xb0>
 800216c:	000007ff 	.word	0x000007ff

08002170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002174:	f001 fc58 	bl	8003a28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002178:	f000 f87e 	bl	8002278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800217c:	f000 f930 	bl	80023e0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002180:	f000 f8c2 	bl	8002308 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 8002184:	4b39      	ldr	r3, [pc, #228]	; (800226c <main+0xfc>)
 8002186:	0018      	movs	r0, r3
 8002188:	f001 ffe2 	bl	8004150 <HAL_ADC_Start_IT>
  HAL_Delay(1500);
 800218c:	4b38      	ldr	r3, [pc, #224]	; (8002270 <main+0x100>)
 800218e:	0018      	movs	r0, r3
 8002190:	f001 fcd0 	bl	8003b34 <HAL_Delay>

  while (1)
  {


	  Barrido1(2,60,2500);Blink(2,2000);
 8002194:	4b37      	ldr	r3, [pc, #220]	; (8002274 <main+0x104>)
 8002196:	001a      	movs	r2, r3
 8002198:	213c      	movs	r1, #60	; 0x3c
 800219a:	2002      	movs	r0, #2
 800219c:	f000 fab4 	bl	8002708 <Barrido1>
 80021a0:	23fa      	movs	r3, #250	; 0xfa
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	0019      	movs	r1, r3
 80021a6:	2002      	movs	r0, #2
 80021a8:	f001 faee 	bl	8003788 <Blink>
	  ArmarIzquierda(2,30,2000);Blink(2,2000);
 80021ac:	23fa      	movs	r3, #250	; 0xfa
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	001a      	movs	r2, r3
 80021b2:	211e      	movs	r1, #30
 80021b4:	2002      	movs	r0, #2
 80021b6:	f001 f8a3 	bl	8003300 <ArmarIzquierda>
 80021ba:	23fa      	movs	r3, #250	; 0xfa
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	0019      	movs	r1, r3
 80021c0:	2002      	movs	r0, #2
 80021c2:	f001 fae1 	bl	8003788 <Blink>
	  VolumenAbrir(2,30,2500);Blink(2,2000);
 80021c6:	4b2b      	ldr	r3, [pc, #172]	; (8002274 <main+0x104>)
 80021c8:	001a      	movs	r2, r3
 80021ca:	211e      	movs	r1, #30
 80021cc:	2002      	movs	r0, #2
 80021ce:	f000 ff09 	bl	8002fe4 <VolumenAbrir>
 80021d2:	23fa      	movs	r3, #250	; 0xfa
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	0019      	movs	r1, r3
 80021d8:	2002      	movs	r0, #2
 80021da:	f001 fad5 	bl	8003788 <Blink>
	  EncenderAleatorio(2,150,2000);Blink(2,2000);
 80021de:	23fa      	movs	r3, #250	; 0xfa
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	001a      	movs	r2, r3
 80021e4:	2196      	movs	r1, #150	; 0x96
 80021e6:	2002      	movs	r0, #2
 80021e8:	f001 f970 	bl	80034cc <EncenderAleatorio>
 80021ec:	23fa      	movs	r3, #250	; 0xfa
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	0019      	movs	r1, r3
 80021f2:	2002      	movs	r0, #2
 80021f4:	f001 fac8 	bl	8003788 <Blink>
	  Girar(4,100);Blink(2,2000);
 80021f8:	2164      	movs	r1, #100	; 0x64
 80021fa:	2004      	movs	r0, #4
 80021fc:	f000 fea2 	bl	8002f44 <Girar>
 8002200:	23fa      	movs	r3, #250	; 0xfa
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	0019      	movs	r1, r3
 8002206:	2002      	movs	r0, #2
 8002208:	f001 fabe 	bl	8003788 <Blink>
	  VolumenCerrar(2,30,2500);Blink(2,2000);
 800220c:	4b19      	ldr	r3, [pc, #100]	; (8002274 <main+0x104>)
 800220e:	001a      	movs	r2, r3
 8002210:	211e      	movs	r1, #30
 8002212:	2002      	movs	r0, #2
 8002214:	f000 ffae 	bl	8003174 <VolumenCerrar>
 8002218:	23fa      	movs	r3, #250	; 0xfa
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	0019      	movs	r1, r3
 800221e:	2002      	movs	r0, #2
 8002220:	f001 fab2 	bl	8003788 <Blink>

	  CerrarApagar(1,150,2000);
 8002224:	23fa      	movs	r3, #250	; 0xfa
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	001a      	movs	r2, r3
 800222a:	2196      	movs	r1, #150	; 0x96
 800222c:	2001      	movs	r0, #1
 800222e:	f000 fd0f 	bl	8002c50 <CerrarApagar>
	  AbrirApagar(1,150,2000);
 8002232:	23fa      	movs	r3, #250	; 0xfa
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	001a      	movs	r2, r3
 8002238:	2196      	movs	r1, #150	; 0x96
 800223a:	2001      	movs	r0, #1
 800223c:	f000 fb9c 	bl	8002978 <AbrirApagar>
	  AbrirApagar(1,150,2000);
 8002240:	23fa      	movs	r3, #250	; 0xfa
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	001a      	movs	r2, r3
 8002246:	2196      	movs	r1, #150	; 0x96
 8002248:	2001      	movs	r0, #1
 800224a:	f000 fb95 	bl	8002978 <AbrirApagar>
	  CerrarApagar(1,150,2000);
 800224e:	23fa      	movs	r3, #250	; 0xfa
 8002250:	00db      	lsls	r3, r3, #3
 8002252:	001a      	movs	r2, r3
 8002254:	2196      	movs	r1, #150	; 0x96
 8002256:	2001      	movs	r0, #1
 8002258:	f000 fcfa 	bl	8002c50 <CerrarApagar>
	  Blink(2,2000);
 800225c:	23fa      	movs	r3, #250	; 0xfa
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	0019      	movs	r1, r3
 8002262:	2002      	movs	r0, #2
 8002264:	f001 fa90 	bl	8003788 <Blink>
	  Barrido1(2,60,2500);Blink(2,2000);
 8002268:	e794      	b.n	8002194 <main+0x24>
 800226a:	46c0      	nop			; (mov r8, r8)
 800226c:	2000002c 	.word	0x2000002c
 8002270:	000005dc 	.word	0x000005dc
 8002274:	000009c4 	.word	0x000009c4

08002278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002278:	b590      	push	{r4, r7, lr}
 800227a:	b093      	sub	sp, #76	; 0x4c
 800227c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800227e:	2414      	movs	r4, #20
 8002280:	193b      	adds	r3, r7, r4
 8002282:	0018      	movs	r0, r3
 8002284:	2334      	movs	r3, #52	; 0x34
 8002286:	001a      	movs	r2, r3
 8002288:	2100      	movs	r1, #0
 800228a:	f003 fac5 	bl	8005818 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800228e:	1d3b      	adds	r3, r7, #4
 8002290:	0018      	movs	r0, r3
 8002292:	2310      	movs	r3, #16
 8002294:	001a      	movs	r2, r3
 8002296:	2100      	movs	r1, #0
 8002298:	f003 fabe 	bl	8005818 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800229c:	2380      	movs	r3, #128	; 0x80
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	0018      	movs	r0, r3
 80022a2:	f002 fddf 	bl	8004e64 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022a6:	193b      	adds	r3, r7, r4
 80022a8:	2202      	movs	r2, #2
 80022aa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022ac:	193b      	adds	r3, r7, r4
 80022ae:	2280      	movs	r2, #128	; 0x80
 80022b0:	0052      	lsls	r2, r2, #1
 80022b2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80022b4:	193b      	adds	r3, r7, r4
 80022b6:	2200      	movs	r2, #0
 80022b8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022ba:	193b      	adds	r3, r7, r4
 80022bc:	2240      	movs	r2, #64	; 0x40
 80022be:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80022c0:	193b      	adds	r3, r7, r4
 80022c2:	2200      	movs	r2, #0
 80022c4:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022c6:	193b      	adds	r3, r7, r4
 80022c8:	0018      	movs	r0, r3
 80022ca:	f002 fe0b 	bl	8004ee4 <HAL_RCC_OscConfig>
 80022ce:	1e03      	subs	r3, r0, #0
 80022d0:	d001      	beq.n	80022d6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80022d2:	f001 fadf 	bl	8003894 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022d6:	1d3b      	adds	r3, r7, #4
 80022d8:	2207      	movs	r2, #7
 80022da:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80022dc:	1d3b      	adds	r3, r7, #4
 80022de:	2200      	movs	r2, #0
 80022e0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022e2:	1d3b      	adds	r3, r7, #4
 80022e4:	2200      	movs	r2, #0
 80022e6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022e8:	1d3b      	adds	r3, r7, #4
 80022ea:	2200      	movs	r2, #0
 80022ec:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80022ee:	1d3b      	adds	r3, r7, #4
 80022f0:	2100      	movs	r1, #0
 80022f2:	0018      	movs	r0, r3
 80022f4:	f003 f906 	bl	8005504 <HAL_RCC_ClockConfig>
 80022f8:	1e03      	subs	r3, r0, #0
 80022fa:	d001      	beq.n	8002300 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80022fc:	f001 faca 	bl	8003894 <Error_Handler>
  }
}
 8002300:	46c0      	nop			; (mov r8, r8)
 8002302:	46bd      	mov	sp, r7
 8002304:	b013      	add	sp, #76	; 0x4c
 8002306:	bd90      	pop	{r4, r7, pc}

08002308 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800230e:	1d3b      	adds	r3, r7, #4
 8002310:	0018      	movs	r0, r3
 8002312:	230c      	movs	r3, #12
 8002314:	001a      	movs	r2, r3
 8002316:	2100      	movs	r1, #0
 8002318:	f003 fa7e 	bl	8005818 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800231c:	4b2d      	ldr	r3, [pc, #180]	; (80023d4 <MX_ADC1_Init+0xcc>)
 800231e:	4a2e      	ldr	r2, [pc, #184]	; (80023d8 <MX_ADC1_Init+0xd0>)
 8002320:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002322:	4b2c      	ldr	r3, [pc, #176]	; (80023d4 <MX_ADC1_Init+0xcc>)
 8002324:	2280      	movs	r2, #128	; 0x80
 8002326:	05d2      	lsls	r2, r2, #23
 8002328:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800232a:	4b2a      	ldr	r3, [pc, #168]	; (80023d4 <MX_ADC1_Init+0xcc>)
 800232c:	2200      	movs	r2, #0
 800232e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002330:	4b28      	ldr	r3, [pc, #160]	; (80023d4 <MX_ADC1_Init+0xcc>)
 8002332:	2200      	movs	r2, #0
 8002334:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002336:	4b27      	ldr	r3, [pc, #156]	; (80023d4 <MX_ADC1_Init+0xcc>)
 8002338:	2200      	movs	r2, #0
 800233a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800233c:	4b25      	ldr	r3, [pc, #148]	; (80023d4 <MX_ADC1_Init+0xcc>)
 800233e:	2204      	movs	r2, #4
 8002340:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002342:	4b24      	ldr	r3, [pc, #144]	; (80023d4 <MX_ADC1_Init+0xcc>)
 8002344:	2200      	movs	r2, #0
 8002346:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8002348:	4b22      	ldr	r3, [pc, #136]	; (80023d4 <MX_ADC1_Init+0xcc>)
 800234a:	2200      	movs	r2, #0
 800234c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800234e:	4b21      	ldr	r3, [pc, #132]	; (80023d4 <MX_ADC1_Init+0xcc>)
 8002350:	2200      	movs	r2, #0
 8002352:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8002354:	4b1f      	ldr	r3, [pc, #124]	; (80023d4 <MX_ADC1_Init+0xcc>)
 8002356:	2201      	movs	r2, #1
 8002358:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800235a:	4b1e      	ldr	r3, [pc, #120]	; (80023d4 <MX_ADC1_Init+0xcc>)
 800235c:	2220      	movs	r2, #32
 800235e:	2100      	movs	r1, #0
 8002360:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002362:	4b1c      	ldr	r3, [pc, #112]	; (80023d4 <MX_ADC1_Init+0xcc>)
 8002364:	2200      	movs	r2, #0
 8002366:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002368:	4b1a      	ldr	r3, [pc, #104]	; (80023d4 <MX_ADC1_Init+0xcc>)
 800236a:	2200      	movs	r2, #0
 800236c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800236e:	4b19      	ldr	r3, [pc, #100]	; (80023d4 <MX_ADC1_Init+0xcc>)
 8002370:	222c      	movs	r2, #44	; 0x2c
 8002372:	2100      	movs	r1, #0
 8002374:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002376:	4b17      	ldr	r3, [pc, #92]	; (80023d4 <MX_ADC1_Init+0xcc>)
 8002378:	2200      	movs	r2, #0
 800237a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 800237c:	4b15      	ldr	r3, [pc, #84]	; (80023d4 <MX_ADC1_Init+0xcc>)
 800237e:	2207      	movs	r2, #7
 8002380:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8002382:	4b14      	ldr	r3, [pc, #80]	; (80023d4 <MX_ADC1_Init+0xcc>)
 8002384:	2207      	movs	r2, #7
 8002386:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8002388:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <MX_ADC1_Init+0xcc>)
 800238a:	223c      	movs	r2, #60	; 0x3c
 800238c:	2100      	movs	r1, #0
 800238e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002390:	4b10      	ldr	r3, [pc, #64]	; (80023d4 <MX_ADC1_Init+0xcc>)
 8002392:	2200      	movs	r2, #0
 8002394:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002396:	4b0f      	ldr	r3, [pc, #60]	; (80023d4 <MX_ADC1_Init+0xcc>)
 8002398:	0018      	movs	r0, r3
 800239a:	f001 fd31 	bl	8003e00 <HAL_ADC_Init>
 800239e:	1e03      	subs	r3, r0, #0
 80023a0:	d001      	beq.n	80023a6 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80023a2:	f001 fa77 	bl	8003894 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80023a6:	1d3b      	adds	r3, r7, #4
 80023a8:	4a0c      	ldr	r2, [pc, #48]	; (80023dc <MX_ADC1_Init+0xd4>)
 80023aa:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80023ac:	1d3b      	adds	r3, r7, #4
 80023ae:	2200      	movs	r2, #0
 80023b0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80023b2:	1d3b      	adds	r3, r7, #4
 80023b4:	2200      	movs	r2, #0
 80023b6:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023b8:	1d3a      	adds	r2, r7, #4
 80023ba:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <MX_ADC1_Init+0xcc>)
 80023bc:	0011      	movs	r1, r2
 80023be:	0018      	movs	r0, r3
 80023c0:	f002 f872 	bl	80044a8 <HAL_ADC_ConfigChannel>
 80023c4:	1e03      	subs	r3, r0, #0
 80023c6:	d001      	beq.n	80023cc <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80023c8:	f001 fa64 	bl	8003894 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80023cc:	46c0      	nop			; (mov r8, r8)
 80023ce:	46bd      	mov	sp, r7
 80023d0:	b004      	add	sp, #16
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	2000002c 	.word	0x2000002c
 80023d8:	40012400 	.word	0x40012400
 80023dc:	2c000800 	.word	0x2c000800

080023e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023e0:	b590      	push	{r4, r7, lr}
 80023e2:	b089      	sub	sp, #36	; 0x24
 80023e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e6:	240c      	movs	r4, #12
 80023e8:	193b      	adds	r3, r7, r4
 80023ea:	0018      	movs	r0, r3
 80023ec:	2314      	movs	r3, #20
 80023ee:	001a      	movs	r2, r3
 80023f0:	2100      	movs	r1, #0
 80023f2:	f003 fa11 	bl	8005818 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f6:	4b39      	ldr	r3, [pc, #228]	; (80024dc <MX_GPIO_Init+0xfc>)
 80023f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023fa:	4b38      	ldr	r3, [pc, #224]	; (80024dc <MX_GPIO_Init+0xfc>)
 80023fc:	2102      	movs	r1, #2
 80023fe:	430a      	orrs	r2, r1
 8002400:	635a      	str	r2, [r3, #52]	; 0x34
 8002402:	4b36      	ldr	r3, [pc, #216]	; (80024dc <MX_GPIO_Init+0xfc>)
 8002404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002406:	2202      	movs	r2, #2
 8002408:	4013      	ands	r3, r2
 800240a:	60bb      	str	r3, [r7, #8]
 800240c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800240e:	4b33      	ldr	r3, [pc, #204]	; (80024dc <MX_GPIO_Init+0xfc>)
 8002410:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002412:	4b32      	ldr	r3, [pc, #200]	; (80024dc <MX_GPIO_Init+0xfc>)
 8002414:	2104      	movs	r1, #4
 8002416:	430a      	orrs	r2, r1
 8002418:	635a      	str	r2, [r3, #52]	; 0x34
 800241a:	4b30      	ldr	r3, [pc, #192]	; (80024dc <MX_GPIO_Init+0xfc>)
 800241c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800241e:	2204      	movs	r2, #4
 8002420:	4013      	ands	r3, r2
 8002422:	607b      	str	r3, [r7, #4]
 8002424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002426:	4b2d      	ldr	r3, [pc, #180]	; (80024dc <MX_GPIO_Init+0xfc>)
 8002428:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800242a:	4b2c      	ldr	r3, [pc, #176]	; (80024dc <MX_GPIO_Init+0xfc>)
 800242c:	2101      	movs	r1, #1
 800242e:	430a      	orrs	r2, r1
 8002430:	635a      	str	r2, [r3, #52]	; 0x34
 8002432:	4b2a      	ldr	r3, [pc, #168]	; (80024dc <MX_GPIO_Init+0xfc>)
 8002434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002436:	2201      	movs	r2, #1
 8002438:	4013      	ands	r3, r2
 800243a:	603b      	str	r3, [r7, #0]
 800243c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED12_Pin|LED13_Pin|LED14_Pin
 800243e:	4928      	ldr	r1, [pc, #160]	; (80024e0 <MX_GPIO_Init+0x100>)
 8002440:	4b28      	ldr	r3, [pc, #160]	; (80024e4 <MX_GPIO_Init+0x104>)
 8002442:	2200      	movs	r2, #0
 8002444:	0018      	movs	r0, r3
 8002446:	f002 fcef 	bl	8004e28 <HAL_GPIO_WritePin>
                          |LED22_Pin|LED23_Pin|LED24_Pin|LED25_Pin
                          |LED26_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_Pin|LED3_Pin|LED17_Pin, GPIO_PIN_RESET);
 800244a:	4927      	ldr	r1, [pc, #156]	; (80024e8 <MX_GPIO_Init+0x108>)
 800244c:	4b27      	ldr	r3, [pc, #156]	; (80024ec <MX_GPIO_Init+0x10c>)
 800244e:	2200      	movs	r2, #0
 8002450:	0018      	movs	r0, r3
 8002452:	f002 fce9 	bl	8004e28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin
 8002456:	4926      	ldr	r1, [pc, #152]	; (80024f0 <MX_GPIO_Init+0x110>)
 8002458:	23a0      	movs	r3, #160	; 0xa0
 800245a:	05db      	lsls	r3, r3, #23
 800245c:	2200      	movs	r2, #0
 800245e:	0018      	movs	r0, r3
 8002460:	f002 fce2 	bl	8004e28 <HAL_GPIO_WritePin>
                          |LED20_Pin|LED21_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED1_Pin LED12_Pin LED13_Pin LED14_Pin
                           LED22_Pin LED23_Pin LED24_Pin LED25_Pin
                           LED26_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED12_Pin|LED13_Pin|LED14_Pin
 8002464:	193b      	adds	r3, r7, r4
 8002466:	4a1e      	ldr	r2, [pc, #120]	; (80024e0 <MX_GPIO_Init+0x100>)
 8002468:	601a      	str	r2, [r3, #0]
                          |LED22_Pin|LED23_Pin|LED24_Pin|LED25_Pin
                          |LED26_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800246a:	193b      	adds	r3, r7, r4
 800246c:	2211      	movs	r2, #17
 800246e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002470:	193b      	adds	r3, r7, r4
 8002472:	2200      	movs	r2, #0
 8002474:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002476:	193b      	adds	r3, r7, r4
 8002478:	2200      	movs	r2, #0
 800247a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800247c:	193b      	adds	r3, r7, r4
 800247e:	4a19      	ldr	r2, [pc, #100]	; (80024e4 <MX_GPIO_Init+0x104>)
 8002480:	0019      	movs	r1, r3
 8002482:	0010      	movs	r0, r2
 8002484:	f002 fb6c 	bl	8004b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED3_Pin LED17_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin|LED17_Pin;
 8002488:	193b      	adds	r3, r7, r4
 800248a:	4a17      	ldr	r2, [pc, #92]	; (80024e8 <MX_GPIO_Init+0x108>)
 800248c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800248e:	193b      	adds	r3, r7, r4
 8002490:	2211      	movs	r2, #17
 8002492:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002494:	193b      	adds	r3, r7, r4
 8002496:	2200      	movs	r2, #0
 8002498:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249a:	193b      	adds	r3, r7, r4
 800249c:	2200      	movs	r2, #0
 800249e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024a0:	193b      	adds	r3, r7, r4
 80024a2:	4a12      	ldr	r2, [pc, #72]	; (80024ec <MX_GPIO_Init+0x10c>)
 80024a4:	0019      	movs	r1, r3
 80024a6:	0010      	movs	r0, r2
 80024a8:	f002 fb5a 	bl	8004b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED5_Pin LED6_Pin LED7_Pin
                           LED8_Pin LED9_Pin LED10_Pin LED11_Pin
                           LED15_Pin LED16_Pin LED18_Pin LED19_Pin
                           LED20_Pin LED21_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin
 80024ac:	0021      	movs	r1, r4
 80024ae:	187b      	adds	r3, r7, r1
 80024b0:	4a0f      	ldr	r2, [pc, #60]	; (80024f0 <MX_GPIO_Init+0x110>)
 80024b2:	601a      	str	r2, [r3, #0]
                          |LED8_Pin|LED9_Pin|LED10_Pin|LED11_Pin
                          |LED15_Pin|LED16_Pin|LED18_Pin|LED19_Pin
                          |LED20_Pin|LED21_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80024b4:	187b      	adds	r3, r7, r1
 80024b6:	2211      	movs	r2, #17
 80024b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ba:	187b      	adds	r3, r7, r1
 80024bc:	2200      	movs	r2, #0
 80024be:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c0:	187b      	adds	r3, r7, r1
 80024c2:	2200      	movs	r2, #0
 80024c4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c6:	187a      	adds	r2, r7, r1
 80024c8:	23a0      	movs	r3, #160	; 0xa0
 80024ca:	05db      	lsls	r3, r3, #23
 80024cc:	0011      	movs	r1, r2
 80024ce:	0018      	movs	r0, r3
 80024d0:	f002 fb46 	bl	8004b60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80024d4:	46c0      	nop			; (mov r8, r8)
 80024d6:	46bd      	mov	sp, r7
 80024d8:	b009      	add	sp, #36	; 0x24
 80024da:	bd90      	pop	{r4, r7, pc}
 80024dc:	40021000 	.word	0x40021000
 80024e0:	0000037f 	.word	0x0000037f
 80024e4:	50000400 	.word	0x50000400
 80024e8:	0000c040 	.word	0x0000c040
 80024ec:	50000800 	.word	0x50000800
 80024f0:	00009fff 	.word	0x00009fff

080024f4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
	adc = HAL_ADC_GetValue(&hadc1);
 80024fc:	4b0e      	ldr	r3, [pc, #56]	; (8002538 <HAL_ADC_ConvCpltCallback+0x44>)
 80024fe:	0018      	movs	r0, r3
 8002500:	f001 fe9e 	bl	8004240 <HAL_ADC_GetValue>
 8002504:	0003      	movs	r3, r0
 8002506:	b29a      	uxth	r2, r3
 8002508:	4b0c      	ldr	r3, [pc, #48]	; (800253c <HAL_ADC_ConvCpltCallback+0x48>)
 800250a:	801a      	strh	r2, [r3, #0]
	vel = (float)adc/1023;
 800250c:	4b0b      	ldr	r3, [pc, #44]	; (800253c <HAL_ADC_ConvCpltCallback+0x48>)
 800250e:	881b      	ldrh	r3, [r3, #0]
 8002510:	0018      	movs	r0, r3
 8002512:	f7fe fcd1 	bl	8000eb8 <__aeabi_ui2f>
 8002516:	1c03      	adds	r3, r0, #0
 8002518:	4909      	ldr	r1, [pc, #36]	; (8002540 <HAL_ADC_ConvCpltCallback+0x4c>)
 800251a:	1c18      	adds	r0, r3, #0
 800251c:	f7fe f852 	bl	80005c4 <__aeabi_fdiv>
 8002520:	1c03      	adds	r3, r0, #0
 8002522:	1c1a      	adds	r2, r3, #0
 8002524:	4b07      	ldr	r3, [pc, #28]	; (8002544 <HAL_ADC_ConvCpltCallback+0x50>)
 8002526:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_IT(&hadc1);
 8002528:	4b03      	ldr	r3, [pc, #12]	; (8002538 <HAL_ADC_ConvCpltCallback+0x44>)
 800252a:	0018      	movs	r0, r3
 800252c:	f001 fe10 	bl	8004150 <HAL_ADC_Start_IT>
}
 8002530:	46c0      	nop			; (mov r8, r8)
 8002532:	46bd      	mov	sp, r7
 8002534:	b002      	add	sp, #8
 8002536:	bd80      	pop	{r7, pc}
 8002538:	2000002c 	.word	0x2000002c
 800253c:	20000090 	.word	0x20000090
 8002540:	447fc000 	.word	0x447fc000
 8002544:	20000094 	.word	0x20000094

08002548 <Refresh_ADC_Value>:

float Refresh_ADC_Value(void){
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
	adc = HAL_ADC_GetValue(&hadc1);
 800254c:	4b0f      	ldr	r3, [pc, #60]	; (800258c <Refresh_ADC_Value+0x44>)
 800254e:	0018      	movs	r0, r3
 8002550:	f001 fe76 	bl	8004240 <HAL_ADC_GetValue>
 8002554:	0003      	movs	r3, r0
 8002556:	b29a      	uxth	r2, r3
 8002558:	4b0d      	ldr	r3, [pc, #52]	; (8002590 <Refresh_ADC_Value+0x48>)
 800255a:	801a      	strh	r2, [r3, #0]
	vel = (float)adc/1023;
 800255c:	4b0c      	ldr	r3, [pc, #48]	; (8002590 <Refresh_ADC_Value+0x48>)
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	0018      	movs	r0, r3
 8002562:	f7fe fca9 	bl	8000eb8 <__aeabi_ui2f>
 8002566:	1c03      	adds	r3, r0, #0
 8002568:	490a      	ldr	r1, [pc, #40]	; (8002594 <Refresh_ADC_Value+0x4c>)
 800256a:	1c18      	adds	r0, r3, #0
 800256c:	f7fe f82a 	bl	80005c4 <__aeabi_fdiv>
 8002570:	1c03      	adds	r3, r0, #0
 8002572:	1c1a      	adds	r2, r3, #0
 8002574:	4b08      	ldr	r3, [pc, #32]	; (8002598 <Refresh_ADC_Value+0x50>)
 8002576:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_IT(&hadc1);
 8002578:	4b04      	ldr	r3, [pc, #16]	; (800258c <Refresh_ADC_Value+0x44>)
 800257a:	0018      	movs	r0, r3
 800257c:	f001 fde8 	bl	8004150 <HAL_ADC_Start_IT>
	return vel;
 8002580:	4b05      	ldr	r3, [pc, #20]	; (8002598 <Refresh_ADC_Value+0x50>)
 8002582:	681b      	ldr	r3, [r3, #0]
}
 8002584:	1c18      	adds	r0, r3, #0
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	46c0      	nop			; (mov r8, r8)
 800258c:	2000002c 	.word	0x2000002c
 8002590:	20000090 	.word	0x20000090
 8002594:	447fc000 	.word	0x447fc000
 8002598:	20000094 	.word	0x20000094

0800259c <ControlLeds>:

void ControlLeds(uint8_t led, uint8_t state){
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	0002      	movs	r2, r0
 80025a4:	1dfb      	adds	r3, r7, #7
 80025a6:	701a      	strb	r2, [r3, #0]
 80025a8:	1dbb      	adds	r3, r7, #6
 80025aa:	1c0a      	adds	r2, r1, #0
 80025ac:	701a      	strb	r2, [r3, #0]
	switch(led){
 80025ae:	1dfb      	adds	r3, r7, #7
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2b09      	cmp	r3, #9
 80025b4:	d900      	bls.n	80025b8 <ControlLeds+0x1c>
 80025b6:	e09c      	b.n	80026f2 <ControlLeds+0x156>
 80025b8:	009a      	lsls	r2, r3, #2
 80025ba:	4b50      	ldr	r3, [pc, #320]	; (80026fc <ControlLeds+0x160>)
 80025bc:	18d3      	adds	r3, r2, r3
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	469f      	mov	pc, r3
		case 1:  L1(state); break;
 80025c2:	1dbb      	adds	r3, r7, #6
 80025c4:	781a      	ldrb	r2, [r3, #0]
 80025c6:	2380      	movs	r3, #128	; 0x80
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	484d      	ldr	r0, [pc, #308]	; (8002700 <ControlLeds+0x164>)
 80025cc:	0019      	movs	r1, r3
 80025ce:	f002 fc2b 	bl	8004e28 <HAL_GPIO_WritePin>
 80025d2:	1dbb      	adds	r3, r7, #6
 80025d4:	781a      	ldrb	r2, [r3, #0]
 80025d6:	23a0      	movs	r3, #160	; 0xa0
 80025d8:	05db      	lsls	r3, r3, #23
 80025da:	2140      	movs	r1, #64	; 0x40
 80025dc:	0018      	movs	r0, r3
 80025de:	f002 fc23 	bl	8004e28 <HAL_GPIO_WritePin>
 80025e2:	e086      	b.n	80026f2 <ControlLeds+0x156>
		case 2:  L2(state); break;
 80025e4:	1dbb      	adds	r3, r7, #6
 80025e6:	781a      	ldrb	r2, [r3, #0]
 80025e8:	2380      	movs	r3, #128	; 0x80
 80025ea:	01db      	lsls	r3, r3, #7
 80025ec:	4845      	ldr	r0, [pc, #276]	; (8002704 <ControlLeds+0x168>)
 80025ee:	0019      	movs	r1, r3
 80025f0:	f002 fc1a 	bl	8004e28 <HAL_GPIO_WritePin>
 80025f4:	1dbb      	adds	r3, r7, #6
 80025f6:	781a      	ldrb	r2, [r3, #0]
 80025f8:	23a0      	movs	r3, #160	; 0xa0
 80025fa:	05db      	lsls	r3, r3, #23
 80025fc:	2180      	movs	r1, #128	; 0x80
 80025fe:	0018      	movs	r0, r3
 8002600:	f002 fc12 	bl	8004e28 <HAL_GPIO_WritePin>
 8002604:	e075      	b.n	80026f2 <ControlLeds+0x156>
		case 3:  L3(state); break;
 8002606:	1dbb      	adds	r3, r7, #6
 8002608:	781a      	ldrb	r2, [r3, #0]
 800260a:	2380      	movs	r3, #128	; 0x80
 800260c:	021b      	lsls	r3, r3, #8
 800260e:	483d      	ldr	r0, [pc, #244]	; (8002704 <ControlLeds+0x168>)
 8002610:	0019      	movs	r1, r3
 8002612:	f002 fc09 	bl	8004e28 <HAL_GPIO_WritePin>
 8002616:	1dbb      	adds	r3, r7, #6
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	4839      	ldr	r0, [pc, #228]	; (8002700 <ControlLeds+0x164>)
 800261c:	001a      	movs	r2, r3
 800261e:	2101      	movs	r1, #1
 8002620:	f002 fc02 	bl	8004e28 <HAL_GPIO_WritePin>
 8002624:	e065      	b.n	80026f2 <ControlLeds+0x156>
		case 4:  L4(state); break;
 8002626:	1dbb      	adds	r3, r7, #6
 8002628:	781a      	ldrb	r2, [r3, #0]
 800262a:	23a0      	movs	r3, #160	; 0xa0
 800262c:	05db      	lsls	r3, r3, #23
 800262e:	2101      	movs	r1, #1
 8002630:	0018      	movs	r0, r3
 8002632:	f002 fbf9 	bl	8004e28 <HAL_GPIO_WritePin>
 8002636:	1dbb      	adds	r3, r7, #6
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	4831      	ldr	r0, [pc, #196]	; (8002700 <ControlLeds+0x164>)
 800263c:	001a      	movs	r2, r3
 800263e:	2102      	movs	r1, #2
 8002640:	f002 fbf2 	bl	8004e28 <HAL_GPIO_WritePin>
 8002644:	e055      	b.n	80026f2 <ControlLeds+0x156>
		case 5:  L5(state); break;
 8002646:	1dbb      	adds	r3, r7, #6
 8002648:	781a      	ldrb	r2, [r3, #0]
 800264a:	23a0      	movs	r3, #160	; 0xa0
 800264c:	05db      	lsls	r3, r3, #23
 800264e:	2102      	movs	r1, #2
 8002650:	0018      	movs	r0, r3
 8002652:	f002 fbe9 	bl	8004e28 <HAL_GPIO_WritePin>
 8002656:	1dbb      	adds	r3, r7, #6
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	4829      	ldr	r0, [pc, #164]	; (8002700 <ControlLeds+0x164>)
 800265c:	001a      	movs	r2, r3
 800265e:	2104      	movs	r1, #4
 8002660:	f002 fbe2 	bl	8004e28 <HAL_GPIO_WritePin>
 8002664:	e045      	b.n	80026f2 <ControlLeds+0x156>
		case 6:  L6(state); break;
 8002666:	1dbb      	adds	r3, r7, #6
 8002668:	781a      	ldrb	r2, [r3, #0]
 800266a:	23a0      	movs	r3, #160	; 0xa0
 800266c:	05db      	lsls	r3, r3, #23
 800266e:	2104      	movs	r1, #4
 8002670:	0018      	movs	r0, r3
 8002672:	f002 fbd9 	bl	8004e28 <HAL_GPIO_WritePin>
 8002676:	1dbb      	adds	r3, r7, #6
 8002678:	781a      	ldrb	r2, [r3, #0]
 800267a:	2380      	movs	r3, #128	; 0x80
 800267c:	0059      	lsls	r1, r3, #1
 800267e:	23a0      	movs	r3, #160	; 0xa0
 8002680:	05db      	lsls	r3, r3, #23
 8002682:	0018      	movs	r0, r3
 8002684:	f002 fbd0 	bl	8004e28 <HAL_GPIO_WritePin>
 8002688:	e033      	b.n	80026f2 <ControlLeds+0x156>
		case 7:  L7(state); break;
 800268a:	1dbb      	adds	r3, r7, #6
 800268c:	781a      	ldrb	r2, [r3, #0]
 800268e:	23a0      	movs	r3, #160	; 0xa0
 8002690:	05db      	lsls	r3, r3, #23
 8002692:	2108      	movs	r1, #8
 8002694:	0018      	movs	r0, r3
 8002696:	f002 fbc7 	bl	8004e28 <HAL_GPIO_WritePin>
 800269a:	1dbb      	adds	r3, r7, #6
 800269c:	781a      	ldrb	r2, [r3, #0]
 800269e:	2380      	movs	r3, #128	; 0x80
 80026a0:	0099      	lsls	r1, r3, #2
 80026a2:	23a0      	movs	r3, #160	; 0xa0
 80026a4:	05db      	lsls	r3, r3, #23
 80026a6:	0018      	movs	r0, r3
 80026a8:	f002 fbbe 	bl	8004e28 <HAL_GPIO_WritePin>
 80026ac:	e021      	b.n	80026f2 <ControlLeds+0x156>
		case 8:  L8(state); break;
 80026ae:	1dbb      	adds	r3, r7, #6
 80026b0:	781a      	ldrb	r2, [r3, #0]
 80026b2:	23a0      	movs	r3, #160	; 0xa0
 80026b4:	05db      	lsls	r3, r3, #23
 80026b6:	2110      	movs	r1, #16
 80026b8:	0018      	movs	r0, r3
 80026ba:	f002 fbb5 	bl	8004e28 <HAL_GPIO_WritePin>
 80026be:	1dbb      	adds	r3, r7, #6
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	4810      	ldr	r0, [pc, #64]	; (8002704 <ControlLeds+0x168>)
 80026c4:	001a      	movs	r2, r3
 80026c6:	2140      	movs	r1, #64	; 0x40
 80026c8:	f002 fbae 	bl	8004e28 <HAL_GPIO_WritePin>
 80026cc:	e011      	b.n	80026f2 <ControlLeds+0x156>
		case 9:  L9(state); break;
 80026ce:	1dbb      	adds	r3, r7, #6
 80026d0:	781a      	ldrb	r2, [r3, #0]
 80026d2:	23a0      	movs	r3, #160	; 0xa0
 80026d4:	05db      	lsls	r3, r3, #23
 80026d6:	2120      	movs	r1, #32
 80026d8:	0018      	movs	r0, r3
 80026da:	f002 fba5 	bl	8004e28 <HAL_GPIO_WritePin>
 80026de:	1dbb      	adds	r3, r7, #6
 80026e0:	781a      	ldrb	r2, [r3, #0]
 80026e2:	2380      	movs	r3, #128	; 0x80
 80026e4:	00d9      	lsls	r1, r3, #3
 80026e6:	23a0      	movs	r3, #160	; 0xa0
 80026e8:	05db      	lsls	r3, r3, #23
 80026ea:	0018      	movs	r0, r3
 80026ec:	f002 fb9c 	bl	8004e28 <HAL_GPIO_WritePin>
 80026f0:	46c0      	nop			; (mov r8, r8)
//		case 23: L23(state);break;
//		case 24: L24(state);break;
//		case 25: L25(state);break;
//		case 26: L26(state);break;
	}
}
 80026f2:	46c0      	nop			; (mov r8, r8)
 80026f4:	46bd      	mov	sp, r7
 80026f6:	b002      	add	sp, #8
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	46c0      	nop			; (mov r8, r8)
 80026fc:	08005920 	.word	0x08005920
 8002700:	50000400 	.word	0x50000400
 8002704:	50000800 	.word	0x50000800

08002708 <Barrido1>:

void Barrido1(uint8_t veces, uint16_t tiempo, uint16_t tiempo2){
 8002708:	b5b0      	push	{r4, r5, r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	0004      	movs	r4, r0
 8002710:	0008      	movs	r0, r1
 8002712:	0011      	movs	r1, r2
 8002714:	1dfb      	adds	r3, r7, #7
 8002716:	1c22      	adds	r2, r4, #0
 8002718:	701a      	strb	r2, [r3, #0]
 800271a:	1d3b      	adds	r3, r7, #4
 800271c:	1c02      	adds	r2, r0, #0
 800271e:	801a      	strh	r2, [r3, #0]
 8002720:	1cbb      	adds	r3, r7, #2
 8002722:	1c0a      	adds	r2, r1, #0
 8002724:	801a      	strh	r2, [r3, #0]
	for(uint8_t v=0;v<veces;v++){
 8002726:	230f      	movs	r3, #15
 8002728:	18fb      	adds	r3, r7, r3
 800272a:	2200      	movs	r2, #0
 800272c:	701a      	strb	r2, [r3, #0]
 800272e:	e074      	b.n	800281a <Barrido1+0x112>
		for(uint8_t i=1; i<=cantLeds; i++){ControlLeds(i,1);HAL_Delay(tiempo*Refresh_ADC_Value());}
 8002730:	230e      	movs	r3, #14
 8002732:	18fb      	adds	r3, r7, r3
 8002734:	2201      	movs	r2, #1
 8002736:	701a      	strb	r2, [r3, #0]
 8002738:	e020      	b.n	800277c <Barrido1+0x74>
 800273a:	250e      	movs	r5, #14
 800273c:	197b      	adds	r3, r7, r5
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2101      	movs	r1, #1
 8002742:	0018      	movs	r0, r3
 8002744:	f7ff ff2a 	bl	800259c <ControlLeds>
 8002748:	1d3b      	adds	r3, r7, #4
 800274a:	881b      	ldrh	r3, [r3, #0]
 800274c:	0018      	movs	r0, r3
 800274e:	f7fe fb61 	bl	8000e14 <__aeabi_i2f>
 8002752:	1c04      	adds	r4, r0, #0
 8002754:	f7ff fef8 	bl	8002548 <Refresh_ADC_Value>
 8002758:	1c03      	adds	r3, r0, #0
 800275a:	1c19      	adds	r1, r3, #0
 800275c:	1c20      	adds	r0, r4, #0
 800275e:	f7fe f84b 	bl	80007f8 <__aeabi_fmul>
 8002762:	1c03      	adds	r3, r0, #0
 8002764:	1c18      	adds	r0, r3, #0
 8002766:	f7fd fd57 	bl	8000218 <__aeabi_f2uiz>
 800276a:	0003      	movs	r3, r0
 800276c:	0018      	movs	r0, r3
 800276e:	f001 f9e1 	bl	8003b34 <HAL_Delay>
 8002772:	197b      	adds	r3, r7, r5
 8002774:	781a      	ldrb	r2, [r3, #0]
 8002776:	197b      	adds	r3, r7, r5
 8002778:	3201      	adds	r2, #1
 800277a:	701a      	strb	r2, [r3, #0]
 800277c:	4b2d      	ldr	r3, [pc, #180]	; (8002834 <Barrido1+0x12c>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	220e      	movs	r2, #14
 8002782:	18ba      	adds	r2, r7, r2
 8002784:	7812      	ldrb	r2, [r2, #0]
 8002786:	429a      	cmp	r2, r3
 8002788:	d9d7      	bls.n	800273a <Barrido1+0x32>
		HAL_Delay(tiempo2*Refresh_ADC_Value());
 800278a:	1cbb      	adds	r3, r7, #2
 800278c:	881b      	ldrh	r3, [r3, #0]
 800278e:	0018      	movs	r0, r3
 8002790:	f7fe fb40 	bl	8000e14 <__aeabi_i2f>
 8002794:	1c04      	adds	r4, r0, #0
 8002796:	f7ff fed7 	bl	8002548 <Refresh_ADC_Value>
 800279a:	1c03      	adds	r3, r0, #0
 800279c:	1c19      	adds	r1, r3, #0
 800279e:	1c20      	adds	r0, r4, #0
 80027a0:	f7fe f82a 	bl	80007f8 <__aeabi_fmul>
 80027a4:	1c03      	adds	r3, r0, #0
 80027a6:	1c18      	adds	r0, r3, #0
 80027a8:	f7fd fd36 	bl	8000218 <__aeabi_f2uiz>
 80027ac:	0003      	movs	r3, r0
 80027ae:	0018      	movs	r0, r3
 80027b0:	f001 f9c0 	bl	8003b34 <HAL_Delay>
		for(uint8_t i=1; i<=cantLeds; i++){ControlLeds(i,0);HAL_Delay(tiempo*Refresh_ADC_Value());}
 80027b4:	230d      	movs	r3, #13
 80027b6:	18fb      	adds	r3, r7, r3
 80027b8:	2201      	movs	r2, #1
 80027ba:	701a      	strb	r2, [r3, #0]
 80027bc:	e020      	b.n	8002800 <Barrido1+0xf8>
 80027be:	250d      	movs	r5, #13
 80027c0:	197b      	adds	r3, r7, r5
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	2100      	movs	r1, #0
 80027c6:	0018      	movs	r0, r3
 80027c8:	f7ff fee8 	bl	800259c <ControlLeds>
 80027cc:	1d3b      	adds	r3, r7, #4
 80027ce:	881b      	ldrh	r3, [r3, #0]
 80027d0:	0018      	movs	r0, r3
 80027d2:	f7fe fb1f 	bl	8000e14 <__aeabi_i2f>
 80027d6:	1c04      	adds	r4, r0, #0
 80027d8:	f7ff feb6 	bl	8002548 <Refresh_ADC_Value>
 80027dc:	1c03      	adds	r3, r0, #0
 80027de:	1c19      	adds	r1, r3, #0
 80027e0:	1c20      	adds	r0, r4, #0
 80027e2:	f7fe f809 	bl	80007f8 <__aeabi_fmul>
 80027e6:	1c03      	adds	r3, r0, #0
 80027e8:	1c18      	adds	r0, r3, #0
 80027ea:	f7fd fd15 	bl	8000218 <__aeabi_f2uiz>
 80027ee:	0003      	movs	r3, r0
 80027f0:	0018      	movs	r0, r3
 80027f2:	f001 f99f 	bl	8003b34 <HAL_Delay>
 80027f6:	197b      	adds	r3, r7, r5
 80027f8:	781a      	ldrb	r2, [r3, #0]
 80027fa:	197b      	adds	r3, r7, r5
 80027fc:	3201      	adds	r2, #1
 80027fe:	701a      	strb	r2, [r3, #0]
 8002800:	4b0c      	ldr	r3, [pc, #48]	; (8002834 <Barrido1+0x12c>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	220d      	movs	r2, #13
 8002806:	18ba      	adds	r2, r7, r2
 8002808:	7812      	ldrb	r2, [r2, #0]
 800280a:	429a      	cmp	r2, r3
 800280c:	d9d7      	bls.n	80027be <Barrido1+0xb6>
	for(uint8_t v=0;v<veces;v++){
 800280e:	210f      	movs	r1, #15
 8002810:	187b      	adds	r3, r7, r1
 8002812:	781a      	ldrb	r2, [r3, #0]
 8002814:	187b      	adds	r3, r7, r1
 8002816:	3201      	adds	r2, #1
 8002818:	701a      	strb	r2, [r3, #0]
 800281a:	230f      	movs	r3, #15
 800281c:	18fa      	adds	r2, r7, r3
 800281e:	1dfb      	adds	r3, r7, #7
 8002820:	7812      	ldrb	r2, [r2, #0]
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	429a      	cmp	r2, r3
 8002826:	d383      	bcc.n	8002730 <Barrido1+0x28>
	}
}
 8002828:	46c0      	nop			; (mov r8, r8)
 800282a:	46c0      	nop			; (mov r8, r8)
 800282c:	46bd      	mov	sp, r7
 800282e:	b004      	add	sp, #16
 8002830:	bdb0      	pop	{r4, r5, r7, pc}
 8002832:	46c0      	nop			; (mov r8, r8)
 8002834:	20000000 	.word	0x20000000

08002838 <Encender_1_Led_2>:
			ControlLeds(i,0);
		}
	}
}

void Encender_1_Led_2(uint8_t num_led){
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	0002      	movs	r2, r0
 8002840:	1dfb      	adds	r3, r7, #7
 8002842:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=1; i<=cantLeds; i++){
 8002844:	230f      	movs	r3, #15
 8002846:	18fb      	adds	r3, r7, r3
 8002848:	2201      	movs	r2, #1
 800284a:	701a      	strb	r2, [r3, #0]
 800284c:	e01a      	b.n	8002884 <Encender_1_Led_2+0x4c>
		if(i<=num_led){
 800284e:	210f      	movs	r1, #15
 8002850:	187a      	adds	r2, r7, r1
 8002852:	1dfb      	adds	r3, r7, #7
 8002854:	7812      	ldrb	r2, [r2, #0]
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	429a      	cmp	r2, r3
 800285a:	d806      	bhi.n	800286a <Encender_1_Led_2+0x32>
			ControlLeds(i,1);
 800285c:	187b      	adds	r3, r7, r1
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2101      	movs	r1, #1
 8002862:	0018      	movs	r0, r3
 8002864:	f7ff fe9a 	bl	800259c <ControlLeds>
 8002868:	e006      	b.n	8002878 <Encender_1_Led_2+0x40>
		}else{
			ControlLeds(i,0);
 800286a:	230f      	movs	r3, #15
 800286c:	18fb      	adds	r3, r7, r3
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2100      	movs	r1, #0
 8002872:	0018      	movs	r0, r3
 8002874:	f7ff fe92 	bl	800259c <ControlLeds>
	for(uint8_t i=1; i<=cantLeds; i++){
 8002878:	210f      	movs	r1, #15
 800287a:	187b      	adds	r3, r7, r1
 800287c:	781a      	ldrb	r2, [r3, #0]
 800287e:	187b      	adds	r3, r7, r1
 8002880:	3201      	adds	r2, #1
 8002882:	701a      	strb	r2, [r3, #0]
 8002884:	4b05      	ldr	r3, [pc, #20]	; (800289c <Encender_1_Led_2+0x64>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	220f      	movs	r2, #15
 800288a:	18ba      	adds	r2, r7, r2
 800288c:	7812      	ldrb	r2, [r2, #0]
 800288e:	429a      	cmp	r2, r3
 8002890:	d9dd      	bls.n	800284e <Encender_1_Led_2+0x16>
		}
	}
}
 8002892:	46c0      	nop			; (mov r8, r8)
 8002894:	46c0      	nop			; (mov r8, r8)
 8002896:	46bd      	mov	sp, r7
 8002898:	b004      	add	sp, #16
 800289a:	bd80      	pop	{r7, pc}
 800289c:	20000000 	.word	0x20000000

080028a0 <Encender_1_Led_3>:

void Encender_1_Led_3(uint8_t num_led){
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	0002      	movs	r2, r0
 80028a8:	1dfb      	adds	r3, r7, #7
 80028aa:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=1; i<=cantLeds; i++){
 80028ac:	230f      	movs	r3, #15
 80028ae:	18fb      	adds	r3, r7, r3
 80028b0:	2201      	movs	r2, #1
 80028b2:	701a      	strb	r2, [r3, #0]
 80028b4:	e01a      	b.n	80028ec <Encender_1_Led_3+0x4c>
		if(i>=num_led){
 80028b6:	210f      	movs	r1, #15
 80028b8:	187a      	adds	r2, r7, r1
 80028ba:	1dfb      	adds	r3, r7, #7
 80028bc:	7812      	ldrb	r2, [r2, #0]
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d306      	bcc.n	80028d2 <Encender_1_Led_3+0x32>
			ControlLeds(i,1);
 80028c4:	187b      	adds	r3, r7, r1
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2101      	movs	r1, #1
 80028ca:	0018      	movs	r0, r3
 80028cc:	f7ff fe66 	bl	800259c <ControlLeds>
 80028d0:	e006      	b.n	80028e0 <Encender_1_Led_3+0x40>
		}else{
			ControlLeds(i,0);
 80028d2:	230f      	movs	r3, #15
 80028d4:	18fb      	adds	r3, r7, r3
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	2100      	movs	r1, #0
 80028da:	0018      	movs	r0, r3
 80028dc:	f7ff fe5e 	bl	800259c <ControlLeds>
	for(uint8_t i=1; i<=cantLeds; i++){
 80028e0:	210f      	movs	r1, #15
 80028e2:	187b      	adds	r3, r7, r1
 80028e4:	781a      	ldrb	r2, [r3, #0]
 80028e6:	187b      	adds	r3, r7, r1
 80028e8:	3201      	adds	r2, #1
 80028ea:	701a      	strb	r2, [r3, #0]
 80028ec:	4b05      	ldr	r3, [pc, #20]	; (8002904 <Encender_1_Led_3+0x64>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	220f      	movs	r2, #15
 80028f2:	18ba      	adds	r2, r7, r2
 80028f4:	7812      	ldrb	r2, [r2, #0]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d9dd      	bls.n	80028b6 <Encender_1_Led_3+0x16>
		}
	}
}
 80028fa:	46c0      	nop			; (mov r8, r8)
 80028fc:	46c0      	nop			; (mov r8, r8)
 80028fe:	46bd      	mov	sp, r7
 8002900:	b004      	add	sp, #16
 8002902:	bd80      	pop	{r7, pc}
 8002904:	20000000 	.word	0x20000000

08002908 <Encender_1_Led_4>:

void Encender_1_Led_4(uint8_t num_led, uint8_t indice){
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	0002      	movs	r2, r0
 8002910:	1dfb      	adds	r3, r7, #7
 8002912:	701a      	strb	r2, [r3, #0]
 8002914:	1dbb      	adds	r3, r7, #6
 8002916:	1c0a      	adds	r2, r1, #0
 8002918:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=cantLeds;i>=indice;i--){
 800291a:	230f      	movs	r3, #15
 800291c:	18fb      	adds	r3, r7, r3
 800291e:	4a15      	ldr	r2, [pc, #84]	; (8002974 <Encender_1_Led_4+0x6c>)
 8002920:	7812      	ldrb	r2, [r2, #0]
 8002922:	701a      	strb	r2, [r3, #0]
 8002924:	e01a      	b.n	800295c <Encender_1_Led_4+0x54>
		if(i == num_led){
 8002926:	210f      	movs	r1, #15
 8002928:	187a      	adds	r2, r7, r1
 800292a:	1dfb      	adds	r3, r7, #7
 800292c:	7812      	ldrb	r2, [r2, #0]
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	429a      	cmp	r2, r3
 8002932:	d106      	bne.n	8002942 <Encender_1_Led_4+0x3a>
			ControlLeds(i,1);
 8002934:	187b      	adds	r3, r7, r1
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2101      	movs	r1, #1
 800293a:	0018      	movs	r0, r3
 800293c:	f7ff fe2e 	bl	800259c <ControlLeds>
 8002940:	e006      	b.n	8002950 <Encender_1_Led_4+0x48>
		}else{
			ControlLeds(i,0);
 8002942:	230f      	movs	r3, #15
 8002944:	18fb      	adds	r3, r7, r3
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2100      	movs	r1, #0
 800294a:	0018      	movs	r0, r3
 800294c:	f7ff fe26 	bl	800259c <ControlLeds>
	for(uint8_t i=cantLeds;i>=indice;i--){
 8002950:	210f      	movs	r1, #15
 8002952:	187b      	adds	r3, r7, r1
 8002954:	781a      	ldrb	r2, [r3, #0]
 8002956:	187b      	adds	r3, r7, r1
 8002958:	3a01      	subs	r2, #1
 800295a:	701a      	strb	r2, [r3, #0]
 800295c:	230f      	movs	r3, #15
 800295e:	18fa      	adds	r2, r7, r3
 8002960:	1dbb      	adds	r3, r7, #6
 8002962:	7812      	ldrb	r2, [r2, #0]
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	429a      	cmp	r2, r3
 8002968:	d2dd      	bcs.n	8002926 <Encender_1_Led_4+0x1e>
		}
	}
}
 800296a:	46c0      	nop			; (mov r8, r8)
 800296c:	46c0      	nop			; (mov r8, r8)
 800296e:	46bd      	mov	sp, r7
 8002970:	b004      	add	sp, #16
 8002972:	bd80      	pop	{r7, pc}
 8002974:	20000000 	.word	0x20000000

08002978 <AbrirApagar>:

void AbrirApagar(uint8_t veces, uint16_t tiempo, uint16_t tiempo2){
 8002978:	b5b0      	push	{r4, r5, r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	0004      	movs	r4, r0
 8002980:	0008      	movs	r0, r1
 8002982:	0011      	movs	r1, r2
 8002984:	1dfb      	adds	r3, r7, #7
 8002986:	1c22      	adds	r2, r4, #0
 8002988:	701a      	strb	r2, [r3, #0]
 800298a:	1d3b      	adds	r3, r7, #4
 800298c:	1c02      	adds	r2, r0, #0
 800298e:	801a      	strh	r2, [r3, #0]
 8002990:	1cbb      	adds	r3, r7, #2
 8002992:	1c0a      	adds	r2, r1, #0
 8002994:	801a      	strh	r2, [r3, #0]

	for(uint8_t v=0;v<veces;v++){
 8002996:	230f      	movs	r3, #15
 8002998:	18fb      	adds	r3, r7, r3
 800299a:	2200      	movs	r2, #0
 800299c:	701a      	strb	r2, [r3, #0]
 800299e:	e148      	b.n	8002c32 <AbrirApagar+0x2ba>
		uint8_t centro,impar=1,par=0;
 80029a0:	230e      	movs	r3, #14
 80029a2:	18fb      	adds	r3, r7, r3
 80029a4:	2201      	movs	r2, #1
 80029a6:	701a      	strb	r2, [r3, #0]
 80029a8:	230d      	movs	r3, #13
 80029aa:	18fb      	adds	r3, r7, r3
 80029ac:	2200      	movs	r2, #0
 80029ae:	701a      	strb	r2, [r3, #0]
		if(cantLeds%2==0){//si es par
 80029b0:	4ba6      	ldr	r3, [pc, #664]	; (8002c4c <AbrirApagar+0x2d4>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	2201      	movs	r2, #1
 80029b6:	4013      	ands	r3, r2
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d000      	beq.n	80029c0 <AbrirApagar+0x48>
 80029be:	e098      	b.n	8002af2 <AbrirApagar+0x17a>
			centro = cantLeds/2;
 80029c0:	4ba2      	ldr	r3, [pc, #648]	; (8002c4c <AbrirApagar+0x2d4>)
 80029c2:	781a      	ldrb	r2, [r3, #0]
 80029c4:	2108      	movs	r1, #8
 80029c6:	187b      	adds	r3, r7, r1
 80029c8:	0852      	lsrs	r2, r2, #1
 80029ca:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=centro;i>=1;i--){
 80029cc:	230c      	movs	r3, #12
 80029ce:	18fb      	adds	r3, r7, r3
 80029d0:	187a      	adds	r2, r7, r1
 80029d2:	7812      	ldrb	r2, [r2, #0]
 80029d4:	701a      	strb	r2, [r3, #0]
 80029d6:	e030      	b.n	8002a3a <AbrirApagar+0xc2>
				ControlLeds(i, 1);
 80029d8:	250c      	movs	r5, #12
 80029da:	197b      	adds	r3, r7, r5
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2101      	movs	r1, #1
 80029e0:	0018      	movs	r0, r3
 80029e2:	f7ff fddb 	bl	800259c <ControlLeds>
				ControlLeds(i+impar, 1);
 80029e6:	197a      	adds	r2, r7, r5
 80029e8:	240e      	movs	r4, #14
 80029ea:	193b      	adds	r3, r7, r4
 80029ec:	7812      	ldrb	r2, [r2, #0]
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	18d3      	adds	r3, r2, r3
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2101      	movs	r1, #1
 80029f6:	0018      	movs	r0, r3
 80029f8:	f7ff fdd0 	bl	800259c <ControlLeds>
				impar=impar+2;
 80029fc:	193b      	adds	r3, r7, r4
 80029fe:	193a      	adds	r2, r7, r4
 8002a00:	7812      	ldrb	r2, [r2, #0]
 8002a02:	3202      	adds	r2, #2
 8002a04:	701a      	strb	r2, [r3, #0]
				HAL_Delay(tiempo*Refresh_ADC_Value());
 8002a06:	1d3b      	adds	r3, r7, #4
 8002a08:	881b      	ldrh	r3, [r3, #0]
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	f7fe fa02 	bl	8000e14 <__aeabi_i2f>
 8002a10:	1c04      	adds	r4, r0, #0
 8002a12:	f7ff fd99 	bl	8002548 <Refresh_ADC_Value>
 8002a16:	1c03      	adds	r3, r0, #0
 8002a18:	1c19      	adds	r1, r3, #0
 8002a1a:	1c20      	adds	r0, r4, #0
 8002a1c:	f7fd feec 	bl	80007f8 <__aeabi_fmul>
 8002a20:	1c03      	adds	r3, r0, #0
 8002a22:	1c18      	adds	r0, r3, #0
 8002a24:	f7fd fbf8 	bl	8000218 <__aeabi_f2uiz>
 8002a28:	0003      	movs	r3, r0
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	f001 f882 	bl	8003b34 <HAL_Delay>
			for(uint8_t i=centro;i>=1;i--){
 8002a30:	197b      	adds	r3, r7, r5
 8002a32:	781a      	ldrb	r2, [r3, #0]
 8002a34:	197b      	adds	r3, r7, r5
 8002a36:	3a01      	subs	r2, #1
 8002a38:	701a      	strb	r2, [r3, #0]
 8002a3a:	230c      	movs	r3, #12
 8002a3c:	18fb      	adds	r3, r7, r3
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1c9      	bne.n	80029d8 <AbrirApagar+0x60>
			}

			impar=1;
 8002a44:	230e      	movs	r3, #14
 8002a46:	18fb      	adds	r3, r7, r3
 8002a48:	2201      	movs	r2, #1
 8002a4a:	701a      	strb	r2, [r3, #0]
			HAL_Delay(tiempo2*Refresh_ADC_Value());
 8002a4c:	1cbb      	adds	r3, r7, #2
 8002a4e:	881b      	ldrh	r3, [r3, #0]
 8002a50:	0018      	movs	r0, r3
 8002a52:	f7fe f9df 	bl	8000e14 <__aeabi_i2f>
 8002a56:	1c04      	adds	r4, r0, #0
 8002a58:	f7ff fd76 	bl	8002548 <Refresh_ADC_Value>
 8002a5c:	1c03      	adds	r3, r0, #0
 8002a5e:	1c19      	adds	r1, r3, #0
 8002a60:	1c20      	adds	r0, r4, #0
 8002a62:	f7fd fec9 	bl	80007f8 <__aeabi_fmul>
 8002a66:	1c03      	adds	r3, r0, #0
 8002a68:	1c18      	adds	r0, r3, #0
 8002a6a:	f7fd fbd5 	bl	8000218 <__aeabi_f2uiz>
 8002a6e:	0003      	movs	r3, r0
 8002a70:	0018      	movs	r0, r3
 8002a72:	f001 f85f 	bl	8003b34 <HAL_Delay>

			for(uint8_t i=centro;i>=1;i--){
 8002a76:	230b      	movs	r3, #11
 8002a78:	18fb      	adds	r3, r7, r3
 8002a7a:	2208      	movs	r2, #8
 8002a7c:	18ba      	adds	r2, r7, r2
 8002a7e:	7812      	ldrb	r2, [r2, #0]
 8002a80:	701a      	strb	r2, [r3, #0]
 8002a82:	e030      	b.n	8002ae6 <AbrirApagar+0x16e>
				ControlLeds(i, 0);
 8002a84:	250b      	movs	r5, #11
 8002a86:	197b      	adds	r3, r7, r5
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	f7ff fd85 	bl	800259c <ControlLeds>
				ControlLeds(i+impar, 0);
 8002a92:	197a      	adds	r2, r7, r5
 8002a94:	240e      	movs	r4, #14
 8002a96:	193b      	adds	r3, r7, r4
 8002a98:	7812      	ldrb	r2, [r2, #0]
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	18d3      	adds	r3, r2, r3
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	0018      	movs	r0, r3
 8002aa4:	f7ff fd7a 	bl	800259c <ControlLeds>
				impar=impar+2;
 8002aa8:	193b      	adds	r3, r7, r4
 8002aaa:	193a      	adds	r2, r7, r4
 8002aac:	7812      	ldrb	r2, [r2, #0]
 8002aae:	3202      	adds	r2, #2
 8002ab0:	701a      	strb	r2, [r3, #0]
				HAL_Delay(tiempo*Refresh_ADC_Value());
 8002ab2:	1d3b      	adds	r3, r7, #4
 8002ab4:	881b      	ldrh	r3, [r3, #0]
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	f7fe f9ac 	bl	8000e14 <__aeabi_i2f>
 8002abc:	1c04      	adds	r4, r0, #0
 8002abe:	f7ff fd43 	bl	8002548 <Refresh_ADC_Value>
 8002ac2:	1c03      	adds	r3, r0, #0
 8002ac4:	1c19      	adds	r1, r3, #0
 8002ac6:	1c20      	adds	r0, r4, #0
 8002ac8:	f7fd fe96 	bl	80007f8 <__aeabi_fmul>
 8002acc:	1c03      	adds	r3, r0, #0
 8002ace:	1c18      	adds	r0, r3, #0
 8002ad0:	f7fd fba2 	bl	8000218 <__aeabi_f2uiz>
 8002ad4:	0003      	movs	r3, r0
 8002ad6:	0018      	movs	r0, r3
 8002ad8:	f001 f82c 	bl	8003b34 <HAL_Delay>
			for(uint8_t i=centro;i>=1;i--){
 8002adc:	197b      	adds	r3, r7, r5
 8002ade:	781a      	ldrb	r2, [r3, #0]
 8002ae0:	197b      	adds	r3, r7, r5
 8002ae2:	3a01      	subs	r2, #1
 8002ae4:	701a      	strb	r2, [r3, #0]
 8002ae6:	230b      	movs	r3, #11
 8002ae8:	18fb      	adds	r3, r7, r3
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1c9      	bne.n	8002a84 <AbrirApagar+0x10c>
 8002af0:	e099      	b.n	8002c26 <AbrirApagar+0x2ae>
			}

		}else{//si es impar
			centro = (cantLeds/2)+1;
 8002af2:	4b56      	ldr	r3, [pc, #344]	; (8002c4c <AbrirApagar+0x2d4>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	085b      	lsrs	r3, r3, #1
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	2108      	movs	r1, #8
 8002afc:	187b      	adds	r3, r7, r1
 8002afe:	3201      	adds	r2, #1
 8002b00:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=centro;i>=1;i--){
 8002b02:	230a      	movs	r3, #10
 8002b04:	18fb      	adds	r3, r7, r3
 8002b06:	187a      	adds	r2, r7, r1
 8002b08:	7812      	ldrb	r2, [r2, #0]
 8002b0a:	701a      	strb	r2, [r3, #0]
 8002b0c:	e030      	b.n	8002b70 <AbrirApagar+0x1f8>
				ControlLeds(i, 1);
 8002b0e:	250a      	movs	r5, #10
 8002b10:	197b      	adds	r3, r7, r5
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	2101      	movs	r1, #1
 8002b16:	0018      	movs	r0, r3
 8002b18:	f7ff fd40 	bl	800259c <ControlLeds>
				ControlLeds(i+par, 1);
 8002b1c:	197a      	adds	r2, r7, r5
 8002b1e:	240d      	movs	r4, #13
 8002b20:	193b      	adds	r3, r7, r4
 8002b22:	7812      	ldrb	r2, [r2, #0]
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	18d3      	adds	r3, r2, r3
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f7ff fd35 	bl	800259c <ControlLeds>
				par=par+2;
 8002b32:	193b      	adds	r3, r7, r4
 8002b34:	193a      	adds	r2, r7, r4
 8002b36:	7812      	ldrb	r2, [r2, #0]
 8002b38:	3202      	adds	r2, #2
 8002b3a:	701a      	strb	r2, [r3, #0]
				HAL_Delay(tiempo*Refresh_ADC_Value());
 8002b3c:	1d3b      	adds	r3, r7, #4
 8002b3e:	881b      	ldrh	r3, [r3, #0]
 8002b40:	0018      	movs	r0, r3
 8002b42:	f7fe f967 	bl	8000e14 <__aeabi_i2f>
 8002b46:	1c04      	adds	r4, r0, #0
 8002b48:	f7ff fcfe 	bl	8002548 <Refresh_ADC_Value>
 8002b4c:	1c03      	adds	r3, r0, #0
 8002b4e:	1c19      	adds	r1, r3, #0
 8002b50:	1c20      	adds	r0, r4, #0
 8002b52:	f7fd fe51 	bl	80007f8 <__aeabi_fmul>
 8002b56:	1c03      	adds	r3, r0, #0
 8002b58:	1c18      	adds	r0, r3, #0
 8002b5a:	f7fd fb5d 	bl	8000218 <__aeabi_f2uiz>
 8002b5e:	0003      	movs	r3, r0
 8002b60:	0018      	movs	r0, r3
 8002b62:	f000 ffe7 	bl	8003b34 <HAL_Delay>
			for(uint8_t i=centro;i>=1;i--){
 8002b66:	197b      	adds	r3, r7, r5
 8002b68:	781a      	ldrb	r2, [r3, #0]
 8002b6a:	197b      	adds	r3, r7, r5
 8002b6c:	3a01      	subs	r2, #1
 8002b6e:	701a      	strb	r2, [r3, #0]
 8002b70:	230a      	movs	r3, #10
 8002b72:	18fb      	adds	r3, r7, r3
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1c9      	bne.n	8002b0e <AbrirApagar+0x196>
			}

			par=0;
 8002b7a:	230d      	movs	r3, #13
 8002b7c:	18fb      	adds	r3, r7, r3
 8002b7e:	2200      	movs	r2, #0
 8002b80:	701a      	strb	r2, [r3, #0]
			HAL_Delay(tiempo2*Refresh_ADC_Value());
 8002b82:	1cbb      	adds	r3, r7, #2
 8002b84:	881b      	ldrh	r3, [r3, #0]
 8002b86:	0018      	movs	r0, r3
 8002b88:	f7fe f944 	bl	8000e14 <__aeabi_i2f>
 8002b8c:	1c04      	adds	r4, r0, #0
 8002b8e:	f7ff fcdb 	bl	8002548 <Refresh_ADC_Value>
 8002b92:	1c03      	adds	r3, r0, #0
 8002b94:	1c19      	adds	r1, r3, #0
 8002b96:	1c20      	adds	r0, r4, #0
 8002b98:	f7fd fe2e 	bl	80007f8 <__aeabi_fmul>
 8002b9c:	1c03      	adds	r3, r0, #0
 8002b9e:	1c18      	adds	r0, r3, #0
 8002ba0:	f7fd fb3a 	bl	8000218 <__aeabi_f2uiz>
 8002ba4:	0003      	movs	r3, r0
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	f000 ffc4 	bl	8003b34 <HAL_Delay>

			for(uint8_t i=centro;i>=1;i--){
 8002bac:	2309      	movs	r3, #9
 8002bae:	18fb      	adds	r3, r7, r3
 8002bb0:	2208      	movs	r2, #8
 8002bb2:	18ba      	adds	r2, r7, r2
 8002bb4:	7812      	ldrb	r2, [r2, #0]
 8002bb6:	701a      	strb	r2, [r3, #0]
 8002bb8:	e030      	b.n	8002c1c <AbrirApagar+0x2a4>
				ControlLeds(i, 0);
 8002bba:	2509      	movs	r5, #9
 8002bbc:	197b      	adds	r3, r7, r5
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	f7ff fcea 	bl	800259c <ControlLeds>
				ControlLeds(i+par, 0);
 8002bc8:	197a      	adds	r2, r7, r5
 8002bca:	240d      	movs	r4, #13
 8002bcc:	193b      	adds	r3, r7, r4
 8002bce:	7812      	ldrb	r2, [r2, #0]
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	18d3      	adds	r3, r2, r3
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	0018      	movs	r0, r3
 8002bda:	f7ff fcdf 	bl	800259c <ControlLeds>
				par=par+2;
 8002bde:	193b      	adds	r3, r7, r4
 8002be0:	193a      	adds	r2, r7, r4
 8002be2:	7812      	ldrb	r2, [r2, #0]
 8002be4:	3202      	adds	r2, #2
 8002be6:	701a      	strb	r2, [r3, #0]
				HAL_Delay(tiempo*Refresh_ADC_Value());
 8002be8:	1d3b      	adds	r3, r7, #4
 8002bea:	881b      	ldrh	r3, [r3, #0]
 8002bec:	0018      	movs	r0, r3
 8002bee:	f7fe f911 	bl	8000e14 <__aeabi_i2f>
 8002bf2:	1c04      	adds	r4, r0, #0
 8002bf4:	f7ff fca8 	bl	8002548 <Refresh_ADC_Value>
 8002bf8:	1c03      	adds	r3, r0, #0
 8002bfa:	1c19      	adds	r1, r3, #0
 8002bfc:	1c20      	adds	r0, r4, #0
 8002bfe:	f7fd fdfb 	bl	80007f8 <__aeabi_fmul>
 8002c02:	1c03      	adds	r3, r0, #0
 8002c04:	1c18      	adds	r0, r3, #0
 8002c06:	f7fd fb07 	bl	8000218 <__aeabi_f2uiz>
 8002c0a:	0003      	movs	r3, r0
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	f000 ff91 	bl	8003b34 <HAL_Delay>
			for(uint8_t i=centro;i>=1;i--){
 8002c12:	197b      	adds	r3, r7, r5
 8002c14:	781a      	ldrb	r2, [r3, #0]
 8002c16:	197b      	adds	r3, r7, r5
 8002c18:	3a01      	subs	r2, #1
 8002c1a:	701a      	strb	r2, [r3, #0]
 8002c1c:	2309      	movs	r3, #9
 8002c1e:	18fb      	adds	r3, r7, r3
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1c9      	bne.n	8002bba <AbrirApagar+0x242>
	for(uint8_t v=0;v<veces;v++){
 8002c26:	210f      	movs	r1, #15
 8002c28:	187b      	adds	r3, r7, r1
 8002c2a:	781a      	ldrb	r2, [r3, #0]
 8002c2c:	187b      	adds	r3, r7, r1
 8002c2e:	3201      	adds	r2, #1
 8002c30:	701a      	strb	r2, [r3, #0]
 8002c32:	230f      	movs	r3, #15
 8002c34:	18fa      	adds	r2, r7, r3
 8002c36:	1dfb      	adds	r3, r7, #7
 8002c38:	7812      	ldrb	r2, [r2, #0]
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d200      	bcs.n	8002c42 <AbrirApagar+0x2ca>
 8002c40:	e6ae      	b.n	80029a0 <AbrirApagar+0x28>
			}
		}
	}
}
 8002c42:	46c0      	nop			; (mov r8, r8)
 8002c44:	46c0      	nop			; (mov r8, r8)
 8002c46:	46bd      	mov	sp, r7
 8002c48:	b004      	add	sp, #16
 8002c4a:	bdb0      	pop	{r4, r5, r7, pc}
 8002c4c:	20000000 	.word	0x20000000

08002c50 <CerrarApagar>:

void CerrarApagar(uint8_t veces, uint16_t tiempo, uint16_t tiempo2){
 8002c50:	b5b0      	push	{r4, r5, r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	0004      	movs	r4, r0
 8002c58:	0008      	movs	r0, r1
 8002c5a:	0011      	movs	r1, r2
 8002c5c:	1dfb      	adds	r3, r7, #7
 8002c5e:	1c22      	adds	r2, r4, #0
 8002c60:	701a      	strb	r2, [r3, #0]
 8002c62:	1d3b      	adds	r3, r7, #4
 8002c64:	1c02      	adds	r2, r0, #0
 8002c66:	801a      	strh	r2, [r3, #0]
 8002c68:	1cbb      	adds	r3, r7, #2
 8002c6a:	1c0a      	adds	r2, r1, #0
 8002c6c:	801a      	strh	r2, [r3, #0]
	for(uint8_t v=0;v<veces;v++){
 8002c6e:	230f      	movs	r3, #15
 8002c70:	18fb      	adds	r3, r7, r3
 8002c72:	2200      	movs	r2, #0
 8002c74:	701a      	strb	r2, [r3, #0]
 8002c76:	e156      	b.n	8002f26 <CerrarApagar+0x2d6>
		uint8_t limite,centro;
		if(cantLeds%2==0){//si es par
 8002c78:	4bb1      	ldr	r3, [pc, #708]	; (8002f40 <CerrarApagar+0x2f0>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	4013      	ands	r3, r2
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d000      	beq.n	8002c88 <CerrarApagar+0x38>
 8002c86:	e0a3      	b.n	8002dd0 <CerrarApagar+0x180>

			centro = cantLeds/2;//5
 8002c88:	4bad      	ldr	r3, [pc, #692]	; (8002f40 <CerrarApagar+0x2f0>)
 8002c8a:	781a      	ldrb	r2, [r3, #0]
 8002c8c:	2309      	movs	r3, #9
 8002c8e:	18fb      	adds	r3, r7, r3
 8002c90:	0852      	lsrs	r2, r2, #1
 8002c92:	701a      	strb	r2, [r3, #0]
			limite = cantLeds-1;
 8002c94:	4baa      	ldr	r3, [pc, #680]	; (8002f40 <CerrarApagar+0x2f0>)
 8002c96:	781a      	ldrb	r2, [r3, #0]
 8002c98:	230e      	movs	r3, #14
 8002c9a:	18fb      	adds	r3, r7, r3
 8002c9c:	3a01      	subs	r2, #1
 8002c9e:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=1;i<=centro;i++){
 8002ca0:	230d      	movs	r3, #13
 8002ca2:	18fb      	adds	r3, r7, r3
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	701a      	strb	r2, [r3, #0]
 8002ca8:	e030      	b.n	8002d0c <CerrarApagar+0xbc>
				ControlLeds(i, 1);
 8002caa:	250d      	movs	r5, #13
 8002cac:	197b      	adds	r3, r7, r5
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	0018      	movs	r0, r3
 8002cb4:	f7ff fc72 	bl	800259c <ControlLeds>
				ControlLeds(i+limite, 1);
 8002cb8:	197a      	adds	r2, r7, r5
 8002cba:	240e      	movs	r4, #14
 8002cbc:	193b      	adds	r3, r7, r4
 8002cbe:	7812      	ldrb	r2, [r2, #0]
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	18d3      	adds	r3, r2, r3
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	0018      	movs	r0, r3
 8002cca:	f7ff fc67 	bl	800259c <ControlLeds>
				limite=limite-2;
 8002cce:	193b      	adds	r3, r7, r4
 8002cd0:	193a      	adds	r2, r7, r4
 8002cd2:	7812      	ldrb	r2, [r2, #0]
 8002cd4:	3a02      	subs	r2, #2
 8002cd6:	701a      	strb	r2, [r3, #0]
				HAL_Delay(tiempo*Refresh_ADC_Value());
 8002cd8:	1d3b      	adds	r3, r7, #4
 8002cda:	881b      	ldrh	r3, [r3, #0]
 8002cdc:	0018      	movs	r0, r3
 8002cde:	f7fe f899 	bl	8000e14 <__aeabi_i2f>
 8002ce2:	1c04      	adds	r4, r0, #0
 8002ce4:	f7ff fc30 	bl	8002548 <Refresh_ADC_Value>
 8002ce8:	1c03      	adds	r3, r0, #0
 8002cea:	1c19      	adds	r1, r3, #0
 8002cec:	1c20      	adds	r0, r4, #0
 8002cee:	f7fd fd83 	bl	80007f8 <__aeabi_fmul>
 8002cf2:	1c03      	adds	r3, r0, #0
 8002cf4:	1c18      	adds	r0, r3, #0
 8002cf6:	f7fd fa8f 	bl	8000218 <__aeabi_f2uiz>
 8002cfa:	0003      	movs	r3, r0
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	f000 ff19 	bl	8003b34 <HAL_Delay>
			for(uint8_t i=1;i<=centro;i++){
 8002d02:	197b      	adds	r3, r7, r5
 8002d04:	781a      	ldrb	r2, [r3, #0]
 8002d06:	197b      	adds	r3, r7, r5
 8002d08:	3201      	adds	r2, #1
 8002d0a:	701a      	strb	r2, [r3, #0]
 8002d0c:	230d      	movs	r3, #13
 8002d0e:	18fa      	adds	r2, r7, r3
 8002d10:	2309      	movs	r3, #9
 8002d12:	18fb      	adds	r3, r7, r3
 8002d14:	7812      	ldrb	r2, [r2, #0]
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d9c6      	bls.n	8002caa <CerrarApagar+0x5a>
			}
			limite = cantLeds-1;
 8002d1c:	4b88      	ldr	r3, [pc, #544]	; (8002f40 <CerrarApagar+0x2f0>)
 8002d1e:	781a      	ldrb	r2, [r3, #0]
 8002d20:	230e      	movs	r3, #14
 8002d22:	18fb      	adds	r3, r7, r3
 8002d24:	3a01      	subs	r2, #1
 8002d26:	701a      	strb	r2, [r3, #0]
			HAL_Delay(tiempo2*Refresh_ADC_Value());
 8002d28:	1cbb      	adds	r3, r7, #2
 8002d2a:	881b      	ldrh	r3, [r3, #0]
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	f7fe f871 	bl	8000e14 <__aeabi_i2f>
 8002d32:	1c04      	adds	r4, r0, #0
 8002d34:	f7ff fc08 	bl	8002548 <Refresh_ADC_Value>
 8002d38:	1c03      	adds	r3, r0, #0
 8002d3a:	1c19      	adds	r1, r3, #0
 8002d3c:	1c20      	adds	r0, r4, #0
 8002d3e:	f7fd fd5b 	bl	80007f8 <__aeabi_fmul>
 8002d42:	1c03      	adds	r3, r0, #0
 8002d44:	1c18      	adds	r0, r3, #0
 8002d46:	f7fd fa67 	bl	8000218 <__aeabi_f2uiz>
 8002d4a:	0003      	movs	r3, r0
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	f000 fef1 	bl	8003b34 <HAL_Delay>
			for(uint8_t i=1;i<=centro;i++){
 8002d52:	230c      	movs	r3, #12
 8002d54:	18fb      	adds	r3, r7, r3
 8002d56:	2201      	movs	r2, #1
 8002d58:	701a      	strb	r2, [r3, #0]
 8002d5a:	e030      	b.n	8002dbe <CerrarApagar+0x16e>
				ControlLeds(i, 0);
 8002d5c:	250c      	movs	r5, #12
 8002d5e:	197b      	adds	r3, r7, r5
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2100      	movs	r1, #0
 8002d64:	0018      	movs	r0, r3
 8002d66:	f7ff fc19 	bl	800259c <ControlLeds>
				ControlLeds(i+limite, 0);
 8002d6a:	197a      	adds	r2, r7, r5
 8002d6c:	240e      	movs	r4, #14
 8002d6e:	193b      	adds	r3, r7, r4
 8002d70:	7812      	ldrb	r2, [r2, #0]
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	18d3      	adds	r3, r2, r3
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2100      	movs	r1, #0
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	f7ff fc0e 	bl	800259c <ControlLeds>
				limite=limite-2;
 8002d80:	193b      	adds	r3, r7, r4
 8002d82:	193a      	adds	r2, r7, r4
 8002d84:	7812      	ldrb	r2, [r2, #0]
 8002d86:	3a02      	subs	r2, #2
 8002d88:	701a      	strb	r2, [r3, #0]
				HAL_Delay(tiempo*Refresh_ADC_Value());
 8002d8a:	1d3b      	adds	r3, r7, #4
 8002d8c:	881b      	ldrh	r3, [r3, #0]
 8002d8e:	0018      	movs	r0, r3
 8002d90:	f7fe f840 	bl	8000e14 <__aeabi_i2f>
 8002d94:	1c04      	adds	r4, r0, #0
 8002d96:	f7ff fbd7 	bl	8002548 <Refresh_ADC_Value>
 8002d9a:	1c03      	adds	r3, r0, #0
 8002d9c:	1c19      	adds	r1, r3, #0
 8002d9e:	1c20      	adds	r0, r4, #0
 8002da0:	f7fd fd2a 	bl	80007f8 <__aeabi_fmul>
 8002da4:	1c03      	adds	r3, r0, #0
 8002da6:	1c18      	adds	r0, r3, #0
 8002da8:	f7fd fa36 	bl	8000218 <__aeabi_f2uiz>
 8002dac:	0003      	movs	r3, r0
 8002dae:	0018      	movs	r0, r3
 8002db0:	f000 fec0 	bl	8003b34 <HAL_Delay>
			for(uint8_t i=1;i<=centro;i++){
 8002db4:	197b      	adds	r3, r7, r5
 8002db6:	781a      	ldrb	r2, [r3, #0]
 8002db8:	197b      	adds	r3, r7, r5
 8002dba:	3201      	adds	r2, #1
 8002dbc:	701a      	strb	r2, [r3, #0]
 8002dbe:	230c      	movs	r3, #12
 8002dc0:	18fa      	adds	r2, r7, r3
 8002dc2:	2309      	movs	r3, #9
 8002dc4:	18fb      	adds	r3, r7, r3
 8002dc6:	7812      	ldrb	r2, [r2, #0]
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d9c6      	bls.n	8002d5c <CerrarApagar+0x10c>
 8002dce:	e0a4      	b.n	8002f1a <CerrarApagar+0x2ca>
			}

		}else{//si es impar
			centro = (cantLeds/2)+1;//5
 8002dd0:	4b5b      	ldr	r3, [pc, #364]	; (8002f40 <CerrarApagar+0x2f0>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	085b      	lsrs	r3, r3, #1
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	2309      	movs	r3, #9
 8002dda:	18fb      	adds	r3, r7, r3
 8002ddc:	3201      	adds	r2, #1
 8002dde:	701a      	strb	r2, [r3, #0]
			limite = cantLeds-1;
 8002de0:	4b57      	ldr	r3, [pc, #348]	; (8002f40 <CerrarApagar+0x2f0>)
 8002de2:	781a      	ldrb	r2, [r3, #0]
 8002de4:	230e      	movs	r3, #14
 8002de6:	18fb      	adds	r3, r7, r3
 8002de8:	3a01      	subs	r2, #1
 8002dea:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=1;i<=centro;i++){
 8002dec:	230b      	movs	r3, #11
 8002dee:	18fb      	adds	r3, r7, r3
 8002df0:	2201      	movs	r2, #1
 8002df2:	701a      	strb	r2, [r3, #0]
 8002df4:	e030      	b.n	8002e58 <CerrarApagar+0x208>
				ControlLeds(i, 1);
 8002df6:	250b      	movs	r5, #11
 8002df8:	197b      	adds	r3, r7, r5
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	0018      	movs	r0, r3
 8002e00:	f7ff fbcc 	bl	800259c <ControlLeds>
				ControlLeds(i+limite, 1);
 8002e04:	197a      	adds	r2, r7, r5
 8002e06:	240e      	movs	r4, #14
 8002e08:	193b      	adds	r3, r7, r4
 8002e0a:	7812      	ldrb	r2, [r2, #0]
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	18d3      	adds	r3, r2, r3
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2101      	movs	r1, #1
 8002e14:	0018      	movs	r0, r3
 8002e16:	f7ff fbc1 	bl	800259c <ControlLeds>
				limite=limite-2;
 8002e1a:	193b      	adds	r3, r7, r4
 8002e1c:	193a      	adds	r2, r7, r4
 8002e1e:	7812      	ldrb	r2, [r2, #0]
 8002e20:	3a02      	subs	r2, #2
 8002e22:	701a      	strb	r2, [r3, #0]
				HAL_Delay(tiempo*Refresh_ADC_Value());
 8002e24:	1d3b      	adds	r3, r7, #4
 8002e26:	881b      	ldrh	r3, [r3, #0]
 8002e28:	0018      	movs	r0, r3
 8002e2a:	f7fd fff3 	bl	8000e14 <__aeabi_i2f>
 8002e2e:	1c04      	adds	r4, r0, #0
 8002e30:	f7ff fb8a 	bl	8002548 <Refresh_ADC_Value>
 8002e34:	1c03      	adds	r3, r0, #0
 8002e36:	1c19      	adds	r1, r3, #0
 8002e38:	1c20      	adds	r0, r4, #0
 8002e3a:	f7fd fcdd 	bl	80007f8 <__aeabi_fmul>
 8002e3e:	1c03      	adds	r3, r0, #0
 8002e40:	1c18      	adds	r0, r3, #0
 8002e42:	f7fd f9e9 	bl	8000218 <__aeabi_f2uiz>
 8002e46:	0003      	movs	r3, r0
 8002e48:	0018      	movs	r0, r3
 8002e4a:	f000 fe73 	bl	8003b34 <HAL_Delay>
			for(uint8_t i=1;i<=centro;i++){
 8002e4e:	197b      	adds	r3, r7, r5
 8002e50:	781a      	ldrb	r2, [r3, #0]
 8002e52:	197b      	adds	r3, r7, r5
 8002e54:	3201      	adds	r2, #1
 8002e56:	701a      	strb	r2, [r3, #0]
 8002e58:	230b      	movs	r3, #11
 8002e5a:	18fa      	adds	r2, r7, r3
 8002e5c:	2309      	movs	r3, #9
 8002e5e:	18fb      	adds	r3, r7, r3
 8002e60:	7812      	ldrb	r2, [r2, #0]
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d9c6      	bls.n	8002df6 <CerrarApagar+0x1a6>
			}
			limite = cantLeds-1;
 8002e68:	4b35      	ldr	r3, [pc, #212]	; (8002f40 <CerrarApagar+0x2f0>)
 8002e6a:	781a      	ldrb	r2, [r3, #0]
 8002e6c:	230e      	movs	r3, #14
 8002e6e:	18fb      	adds	r3, r7, r3
 8002e70:	3a01      	subs	r2, #1
 8002e72:	701a      	strb	r2, [r3, #0]
			HAL_Delay(tiempo2*Refresh_ADC_Value());
 8002e74:	1cbb      	adds	r3, r7, #2
 8002e76:	881b      	ldrh	r3, [r3, #0]
 8002e78:	0018      	movs	r0, r3
 8002e7a:	f7fd ffcb 	bl	8000e14 <__aeabi_i2f>
 8002e7e:	1c04      	adds	r4, r0, #0
 8002e80:	f7ff fb62 	bl	8002548 <Refresh_ADC_Value>
 8002e84:	1c03      	adds	r3, r0, #0
 8002e86:	1c19      	adds	r1, r3, #0
 8002e88:	1c20      	adds	r0, r4, #0
 8002e8a:	f7fd fcb5 	bl	80007f8 <__aeabi_fmul>
 8002e8e:	1c03      	adds	r3, r0, #0
 8002e90:	1c18      	adds	r0, r3, #0
 8002e92:	f7fd f9c1 	bl	8000218 <__aeabi_f2uiz>
 8002e96:	0003      	movs	r3, r0
 8002e98:	0018      	movs	r0, r3
 8002e9a:	f000 fe4b 	bl	8003b34 <HAL_Delay>
			for(uint8_t i=1;i<=centro;i++){
 8002e9e:	230a      	movs	r3, #10
 8002ea0:	18fb      	adds	r3, r7, r3
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	701a      	strb	r2, [r3, #0]
 8002ea6:	e030      	b.n	8002f0a <CerrarApagar+0x2ba>
				ControlLeds(i, 0);
 8002ea8:	250a      	movs	r5, #10
 8002eaa:	197b      	adds	r3, r7, r5
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2100      	movs	r1, #0
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	f7ff fb73 	bl	800259c <ControlLeds>
				ControlLeds(i+limite, 0);
 8002eb6:	197a      	adds	r2, r7, r5
 8002eb8:	240e      	movs	r4, #14
 8002eba:	193b      	adds	r3, r7, r4
 8002ebc:	7812      	ldrb	r2, [r2, #0]
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	18d3      	adds	r3, r2, r3
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	0018      	movs	r0, r3
 8002ec8:	f7ff fb68 	bl	800259c <ControlLeds>
				limite=limite-2;
 8002ecc:	193b      	adds	r3, r7, r4
 8002ece:	193a      	adds	r2, r7, r4
 8002ed0:	7812      	ldrb	r2, [r2, #0]
 8002ed2:	3a02      	subs	r2, #2
 8002ed4:	701a      	strb	r2, [r3, #0]
				HAL_Delay(tiempo*Refresh_ADC_Value());
 8002ed6:	1d3b      	adds	r3, r7, #4
 8002ed8:	881b      	ldrh	r3, [r3, #0]
 8002eda:	0018      	movs	r0, r3
 8002edc:	f7fd ff9a 	bl	8000e14 <__aeabi_i2f>
 8002ee0:	1c04      	adds	r4, r0, #0
 8002ee2:	f7ff fb31 	bl	8002548 <Refresh_ADC_Value>
 8002ee6:	1c03      	adds	r3, r0, #0
 8002ee8:	1c19      	adds	r1, r3, #0
 8002eea:	1c20      	adds	r0, r4, #0
 8002eec:	f7fd fc84 	bl	80007f8 <__aeabi_fmul>
 8002ef0:	1c03      	adds	r3, r0, #0
 8002ef2:	1c18      	adds	r0, r3, #0
 8002ef4:	f7fd f990 	bl	8000218 <__aeabi_f2uiz>
 8002ef8:	0003      	movs	r3, r0
 8002efa:	0018      	movs	r0, r3
 8002efc:	f000 fe1a 	bl	8003b34 <HAL_Delay>
			for(uint8_t i=1;i<=centro;i++){
 8002f00:	197b      	adds	r3, r7, r5
 8002f02:	781a      	ldrb	r2, [r3, #0]
 8002f04:	197b      	adds	r3, r7, r5
 8002f06:	3201      	adds	r2, #1
 8002f08:	701a      	strb	r2, [r3, #0]
 8002f0a:	230a      	movs	r3, #10
 8002f0c:	18fa      	adds	r2, r7, r3
 8002f0e:	2309      	movs	r3, #9
 8002f10:	18fb      	adds	r3, r7, r3
 8002f12:	7812      	ldrb	r2, [r2, #0]
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d9c6      	bls.n	8002ea8 <CerrarApagar+0x258>
	for(uint8_t v=0;v<veces;v++){
 8002f1a:	210f      	movs	r1, #15
 8002f1c:	187b      	adds	r3, r7, r1
 8002f1e:	781a      	ldrb	r2, [r3, #0]
 8002f20:	187b      	adds	r3, r7, r1
 8002f22:	3201      	adds	r2, #1
 8002f24:	701a      	strb	r2, [r3, #0]
 8002f26:	230f      	movs	r3, #15
 8002f28:	18fa      	adds	r2, r7, r3
 8002f2a:	1dfb      	adds	r3, r7, #7
 8002f2c:	7812      	ldrb	r2, [r2, #0]
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d200      	bcs.n	8002f36 <CerrarApagar+0x2e6>
 8002f34:	e6a0      	b.n	8002c78 <CerrarApagar+0x28>
			}
		}
	}
}
 8002f36:	46c0      	nop			; (mov r8, r8)
 8002f38:	46c0      	nop			; (mov r8, r8)
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	b004      	add	sp, #16
 8002f3e:	bdb0      	pop	{r4, r5, r7, pc}
 8002f40:	20000000 	.word	0x20000000

08002f44 <Girar>:

void Girar(uint8_t veces, uint16_t tiempo){
 8002f44:	b590      	push	{r4, r7, lr}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	0002      	movs	r2, r0
 8002f4c:	1dfb      	adds	r3, r7, #7
 8002f4e:	701a      	strb	r2, [r3, #0]
 8002f50:	1d3b      	adds	r3, r7, #4
 8002f52:	1c0a      	adds	r2, r1, #0
 8002f54:	801a      	strh	r2, [r3, #0]
	for(uint8_t v=0;v<veces;v++){
 8002f56:	230f      	movs	r3, #15
 8002f58:	18fb      	adds	r3, r7, r3
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	701a      	strb	r2, [r3, #0]
 8002f5e:	e035      	b.n	8002fcc <Girar+0x88>
		AbrirApagar(1,tiempo*Refresh_ADC_Value(),0);
 8002f60:	1d3b      	adds	r3, r7, #4
 8002f62:	881b      	ldrh	r3, [r3, #0]
 8002f64:	0018      	movs	r0, r3
 8002f66:	f7fd ff55 	bl	8000e14 <__aeabi_i2f>
 8002f6a:	1c04      	adds	r4, r0, #0
 8002f6c:	f7ff faec 	bl	8002548 <Refresh_ADC_Value>
 8002f70:	1c03      	adds	r3, r0, #0
 8002f72:	1c19      	adds	r1, r3, #0
 8002f74:	1c20      	adds	r0, r4, #0
 8002f76:	f7fd fc3f 	bl	80007f8 <__aeabi_fmul>
 8002f7a:	1c03      	adds	r3, r0, #0
 8002f7c:	1c18      	adds	r0, r3, #0
 8002f7e:	f7fd f94b 	bl	8000218 <__aeabi_f2uiz>
 8002f82:	0003      	movs	r3, r0
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	2200      	movs	r2, #0
 8002f88:	0019      	movs	r1, r3
 8002f8a:	2001      	movs	r0, #1
 8002f8c:	f7ff fcf4 	bl	8002978 <AbrirApagar>
		CerrarApagar(1,tiempo*Refresh_ADC_Value(),0);
 8002f90:	1d3b      	adds	r3, r7, #4
 8002f92:	881b      	ldrh	r3, [r3, #0]
 8002f94:	0018      	movs	r0, r3
 8002f96:	f7fd ff3d 	bl	8000e14 <__aeabi_i2f>
 8002f9a:	1c04      	adds	r4, r0, #0
 8002f9c:	f7ff fad4 	bl	8002548 <Refresh_ADC_Value>
 8002fa0:	1c03      	adds	r3, r0, #0
 8002fa2:	1c19      	adds	r1, r3, #0
 8002fa4:	1c20      	adds	r0, r4, #0
 8002fa6:	f7fd fc27 	bl	80007f8 <__aeabi_fmul>
 8002faa:	1c03      	adds	r3, r0, #0
 8002fac:	1c18      	adds	r0, r3, #0
 8002fae:	f7fd f933 	bl	8000218 <__aeabi_f2uiz>
 8002fb2:	0003      	movs	r3, r0
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	0019      	movs	r1, r3
 8002fba:	2001      	movs	r0, #1
 8002fbc:	f7ff fe48 	bl	8002c50 <CerrarApagar>
	for(uint8_t v=0;v<veces;v++){
 8002fc0:	210f      	movs	r1, #15
 8002fc2:	187b      	adds	r3, r7, r1
 8002fc4:	781a      	ldrb	r2, [r3, #0]
 8002fc6:	187b      	adds	r3, r7, r1
 8002fc8:	3201      	adds	r2, #1
 8002fca:	701a      	strb	r2, [r3, #0]
 8002fcc:	230f      	movs	r3, #15
 8002fce:	18fa      	adds	r2, r7, r3
 8002fd0:	1dfb      	adds	r3, r7, #7
 8002fd2:	7812      	ldrb	r2, [r2, #0]
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d3c2      	bcc.n	8002f60 <Girar+0x1c>
	}
}
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	46c0      	nop			; (mov r8, r8)
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	b005      	add	sp, #20
 8002fe2:	bd90      	pop	{r4, r7, pc}

08002fe4 <VolumenAbrir>:

void VolumenAbrir(uint8_t veces, uint16_t tiempo, uint16_t tiempo2){
 8002fe4:	b5b0      	push	{r4, r5, r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	0004      	movs	r4, r0
 8002fec:	0008      	movs	r0, r1
 8002fee:	0011      	movs	r1, r2
 8002ff0:	1dfb      	adds	r3, r7, #7
 8002ff2:	1c22      	adds	r2, r4, #0
 8002ff4:	701a      	strb	r2, [r3, #0]
 8002ff6:	1d3b      	adds	r3, r7, #4
 8002ff8:	1c02      	adds	r2, r0, #0
 8002ffa:	801a      	strh	r2, [r3, #0]
 8002ffc:	1cbb      	adds	r3, r7, #2
 8002ffe:	1c0a      	adds	r2, r1, #0
 8003000:	801a      	strh	r2, [r3, #0]
	for(uint8_t v=0;v<veces;v++){
 8003002:	230f      	movs	r3, #15
 8003004:	18fb      	adds	r3, r7, r3
 8003006:	2200      	movs	r2, #0
 8003008:	701a      	strb	r2, [r3, #0]
 800300a:	e0a3      	b.n	8003154 <VolumenAbrir+0x170>
		uint8_t l;
		for(uint8_t i=1;i<=cantLeds;i++){
 800300c:	230e      	movs	r3, #14
 800300e:	18fb      	adds	r3, r7, r3
 8003010:	2201      	movs	r2, #1
 8003012:	701a      	strb	r2, [r3, #0]
 8003014:	e07b      	b.n	800310e <VolumenAbrir+0x12a>
			l=i;
 8003016:	250b      	movs	r5, #11
 8003018:	197b      	adds	r3, r7, r5
 800301a:	220e      	movs	r2, #14
 800301c:	18ba      	adds	r2, r7, r2
 800301e:	7812      	ldrb	r2, [r2, #0]
 8003020:	701a      	strb	r2, [r3, #0]
			HAL_Delay(tiempo*Refresh_ADC_Value());
 8003022:	1d3b      	adds	r3, r7, #4
 8003024:	881b      	ldrh	r3, [r3, #0]
 8003026:	0018      	movs	r0, r3
 8003028:	f7fd fef4 	bl	8000e14 <__aeabi_i2f>
 800302c:	1c04      	adds	r4, r0, #0
 800302e:	f7ff fa8b 	bl	8002548 <Refresh_ADC_Value>
 8003032:	1c03      	adds	r3, r0, #0
 8003034:	1c19      	adds	r1, r3, #0
 8003036:	1c20      	adds	r0, r4, #0
 8003038:	f7fd fbde 	bl	80007f8 <__aeabi_fmul>
 800303c:	1c03      	adds	r3, r0, #0
 800303e:	1c18      	adds	r0, r3, #0
 8003040:	f7fd f8ea 	bl	8000218 <__aeabi_f2uiz>
 8003044:	0003      	movs	r3, r0
 8003046:	0018      	movs	r0, r3
 8003048:	f000 fd74 	bl	8003b34 <HAL_Delay>
			for(uint8_t i=l;i<=cantLeds;i++){
 800304c:	230d      	movs	r3, #13
 800304e:	18fb      	adds	r3, r7, r3
 8003050:	197a      	adds	r2, r7, r5
 8003052:	7812      	ldrb	r2, [r2, #0]
 8003054:	701a      	strb	r2, [r3, #0]
 8003056:	e01f      	b.n	8003098 <VolumenAbrir+0xb4>
				Encender_1_Led_2(i);
 8003058:	250d      	movs	r5, #13
 800305a:	197b      	adds	r3, r7, r5
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	0018      	movs	r0, r3
 8003060:	f7ff fbea 	bl	8002838 <Encender_1_Led_2>
				HAL_Delay(tiempo*Refresh_ADC_Value());
 8003064:	1d3b      	adds	r3, r7, #4
 8003066:	881b      	ldrh	r3, [r3, #0]
 8003068:	0018      	movs	r0, r3
 800306a:	f7fd fed3 	bl	8000e14 <__aeabi_i2f>
 800306e:	1c04      	adds	r4, r0, #0
 8003070:	f7ff fa6a 	bl	8002548 <Refresh_ADC_Value>
 8003074:	1c03      	adds	r3, r0, #0
 8003076:	1c19      	adds	r1, r3, #0
 8003078:	1c20      	adds	r0, r4, #0
 800307a:	f7fd fbbd 	bl	80007f8 <__aeabi_fmul>
 800307e:	1c03      	adds	r3, r0, #0
 8003080:	1c18      	adds	r0, r3, #0
 8003082:	f7fd f8c9 	bl	8000218 <__aeabi_f2uiz>
 8003086:	0003      	movs	r3, r0
 8003088:	0018      	movs	r0, r3
 800308a:	f000 fd53 	bl	8003b34 <HAL_Delay>
			for(uint8_t i=l;i<=cantLeds;i++){
 800308e:	197b      	adds	r3, r7, r5
 8003090:	781a      	ldrb	r2, [r3, #0]
 8003092:	197b      	adds	r3, r7, r5
 8003094:	3201      	adds	r2, #1
 8003096:	701a      	strb	r2, [r3, #0]
 8003098:	4b35      	ldr	r3, [pc, #212]	; (8003170 <VolumenAbrir+0x18c>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	220d      	movs	r2, #13
 800309e:	18ba      	adds	r2, r7, r2
 80030a0:	7812      	ldrb	r2, [r2, #0]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d9d8      	bls.n	8003058 <VolumenAbrir+0x74>
			}
			for(uint8_t i=cantLeds;i>=l;i--){
 80030a6:	230c      	movs	r3, #12
 80030a8:	18fb      	adds	r3, r7, r3
 80030aa:	4a31      	ldr	r2, [pc, #196]	; (8003170 <VolumenAbrir+0x18c>)
 80030ac:	7812      	ldrb	r2, [r2, #0]
 80030ae:	701a      	strb	r2, [r3, #0]
 80030b0:	e01f      	b.n	80030f2 <VolumenAbrir+0x10e>
				Encender_1_Led_2(i);
 80030b2:	250c      	movs	r5, #12
 80030b4:	197b      	adds	r3, r7, r5
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	0018      	movs	r0, r3
 80030ba:	f7ff fbbd 	bl	8002838 <Encender_1_Led_2>
				HAL_Delay(tiempo*Refresh_ADC_Value());
 80030be:	1d3b      	adds	r3, r7, #4
 80030c0:	881b      	ldrh	r3, [r3, #0]
 80030c2:	0018      	movs	r0, r3
 80030c4:	f7fd fea6 	bl	8000e14 <__aeabi_i2f>
 80030c8:	1c04      	adds	r4, r0, #0
 80030ca:	f7ff fa3d 	bl	8002548 <Refresh_ADC_Value>
 80030ce:	1c03      	adds	r3, r0, #0
 80030d0:	1c19      	adds	r1, r3, #0
 80030d2:	1c20      	adds	r0, r4, #0
 80030d4:	f7fd fb90 	bl	80007f8 <__aeabi_fmul>
 80030d8:	1c03      	adds	r3, r0, #0
 80030da:	1c18      	adds	r0, r3, #0
 80030dc:	f7fd f89c 	bl	8000218 <__aeabi_f2uiz>
 80030e0:	0003      	movs	r3, r0
 80030e2:	0018      	movs	r0, r3
 80030e4:	f000 fd26 	bl	8003b34 <HAL_Delay>
			for(uint8_t i=cantLeds;i>=l;i--){
 80030e8:	197b      	adds	r3, r7, r5
 80030ea:	781a      	ldrb	r2, [r3, #0]
 80030ec:	197b      	adds	r3, r7, r5
 80030ee:	3a01      	subs	r2, #1
 80030f0:	701a      	strb	r2, [r3, #0]
 80030f2:	230c      	movs	r3, #12
 80030f4:	18fa      	adds	r2, r7, r3
 80030f6:	230b      	movs	r3, #11
 80030f8:	18fb      	adds	r3, r7, r3
 80030fa:	7812      	ldrb	r2, [r2, #0]
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d2d7      	bcs.n	80030b2 <VolumenAbrir+0xce>
		for(uint8_t i=1;i<=cantLeds;i++){
 8003102:	210e      	movs	r1, #14
 8003104:	187b      	adds	r3, r7, r1
 8003106:	781a      	ldrb	r2, [r3, #0]
 8003108:	187b      	adds	r3, r7, r1
 800310a:	3201      	adds	r2, #1
 800310c:	701a      	strb	r2, [r3, #0]
 800310e:	4b18      	ldr	r3, [pc, #96]	; (8003170 <VolumenAbrir+0x18c>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	220e      	movs	r2, #14
 8003114:	18ba      	adds	r2, r7, r2
 8003116:	7812      	ldrb	r2, [r2, #0]
 8003118:	429a      	cmp	r2, r3
 800311a:	d800      	bhi.n	800311e <VolumenAbrir+0x13a>
 800311c:	e77b      	b.n	8003016 <VolumenAbrir+0x32>
			}
		}
		HAL_Delay(tiempo2*Refresh_ADC_Value());
 800311e:	1cbb      	adds	r3, r7, #2
 8003120:	881b      	ldrh	r3, [r3, #0]
 8003122:	0018      	movs	r0, r3
 8003124:	f7fd fe76 	bl	8000e14 <__aeabi_i2f>
 8003128:	1c04      	adds	r4, r0, #0
 800312a:	f7ff fa0d 	bl	8002548 <Refresh_ADC_Value>
 800312e:	1c03      	adds	r3, r0, #0
 8003130:	1c19      	adds	r1, r3, #0
 8003132:	1c20      	adds	r0, r4, #0
 8003134:	f7fd fb60 	bl	80007f8 <__aeabi_fmul>
 8003138:	1c03      	adds	r3, r0, #0
 800313a:	1c18      	adds	r0, r3, #0
 800313c:	f7fd f86c 	bl	8000218 <__aeabi_f2uiz>
 8003140:	0003      	movs	r3, r0
 8003142:	0018      	movs	r0, r3
 8003144:	f000 fcf6 	bl	8003b34 <HAL_Delay>
	for(uint8_t v=0;v<veces;v++){
 8003148:	210f      	movs	r1, #15
 800314a:	187b      	adds	r3, r7, r1
 800314c:	781a      	ldrb	r2, [r3, #0]
 800314e:	187b      	adds	r3, r7, r1
 8003150:	3201      	adds	r2, #1
 8003152:	701a      	strb	r2, [r3, #0]
 8003154:	230f      	movs	r3, #15
 8003156:	18fa      	adds	r2, r7, r3
 8003158:	1dfb      	adds	r3, r7, #7
 800315a:	7812      	ldrb	r2, [r2, #0]
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	429a      	cmp	r2, r3
 8003160:	d200      	bcs.n	8003164 <VolumenAbrir+0x180>
 8003162:	e753      	b.n	800300c <VolumenAbrir+0x28>
	}
}
 8003164:	46c0      	nop			; (mov r8, r8)
 8003166:	46c0      	nop			; (mov r8, r8)
 8003168:	46bd      	mov	sp, r7
 800316a:	b004      	add	sp, #16
 800316c:	bdb0      	pop	{r4, r5, r7, pc}
 800316e:	46c0      	nop			; (mov r8, r8)
 8003170:	20000000 	.word	0x20000000

08003174 <VolumenCerrar>:

void VolumenCerrar(uint8_t veces, uint16_t tiempo, uint16_t tiempo2){
 8003174:	b5b0      	push	{r4, r5, r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	0004      	movs	r4, r0
 800317c:	0008      	movs	r0, r1
 800317e:	0011      	movs	r1, r2
 8003180:	1dfb      	adds	r3, r7, #7
 8003182:	1c22      	adds	r2, r4, #0
 8003184:	701a      	strb	r2, [r3, #0]
 8003186:	1d3b      	adds	r3, r7, #4
 8003188:	1c02      	adds	r2, r0, #0
 800318a:	801a      	strh	r2, [r3, #0]
 800318c:	1cbb      	adds	r3, r7, #2
 800318e:	1c0a      	adds	r2, r1, #0
 8003190:	801a      	strh	r2, [r3, #0]
	for(uint8_t v=0;v<veces;v++){
 8003192:	230f      	movs	r3, #15
 8003194:	18fb      	adds	r3, r7, r3
 8003196:	2200      	movs	r2, #0
 8003198:	701a      	strb	r2, [r3, #0]
 800319a:	e0a2      	b.n	80032e2 <VolumenCerrar+0x16e>
		uint8_t l;
		for(uint8_t i=cantLeds;i>=1;i--){
 800319c:	230e      	movs	r3, #14
 800319e:	18fb      	adds	r3, r7, r3
 80031a0:	4a56      	ldr	r2, [pc, #344]	; (80032fc <VolumenCerrar+0x188>)
 80031a2:	7812      	ldrb	r2, [r2, #0]
 80031a4:	701a      	strb	r2, [r3, #0]
 80031a6:	e07b      	b.n	80032a0 <VolumenCerrar+0x12c>
			l=i;
 80031a8:	250b      	movs	r5, #11
 80031aa:	197b      	adds	r3, r7, r5
 80031ac:	220e      	movs	r2, #14
 80031ae:	18ba      	adds	r2, r7, r2
 80031b0:	7812      	ldrb	r2, [r2, #0]
 80031b2:	701a      	strb	r2, [r3, #0]
			HAL_Delay(tiempo*Refresh_ADC_Value());
 80031b4:	1d3b      	adds	r3, r7, #4
 80031b6:	881b      	ldrh	r3, [r3, #0]
 80031b8:	0018      	movs	r0, r3
 80031ba:	f7fd fe2b 	bl	8000e14 <__aeabi_i2f>
 80031be:	1c04      	adds	r4, r0, #0
 80031c0:	f7ff f9c2 	bl	8002548 <Refresh_ADC_Value>
 80031c4:	1c03      	adds	r3, r0, #0
 80031c6:	1c19      	adds	r1, r3, #0
 80031c8:	1c20      	adds	r0, r4, #0
 80031ca:	f7fd fb15 	bl	80007f8 <__aeabi_fmul>
 80031ce:	1c03      	adds	r3, r0, #0
 80031d0:	1c18      	adds	r0, r3, #0
 80031d2:	f7fd f821 	bl	8000218 <__aeabi_f2uiz>
 80031d6:	0003      	movs	r3, r0
 80031d8:	0018      	movs	r0, r3
 80031da:	f000 fcab 	bl	8003b34 <HAL_Delay>
			for(uint8_t i=l;i<=cantLeds;i++){
 80031de:	230d      	movs	r3, #13
 80031e0:	18fb      	adds	r3, r7, r3
 80031e2:	197a      	adds	r2, r7, r5
 80031e4:	7812      	ldrb	r2, [r2, #0]
 80031e6:	701a      	strb	r2, [r3, #0]
 80031e8:	e01f      	b.n	800322a <VolumenCerrar+0xb6>
				Encender_1_Led_3(i);
 80031ea:	250d      	movs	r5, #13
 80031ec:	197b      	adds	r3, r7, r5
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	0018      	movs	r0, r3
 80031f2:	f7ff fb55 	bl	80028a0 <Encender_1_Led_3>
				HAL_Delay(tiempo*Refresh_ADC_Value());
 80031f6:	1d3b      	adds	r3, r7, #4
 80031f8:	881b      	ldrh	r3, [r3, #0]
 80031fa:	0018      	movs	r0, r3
 80031fc:	f7fd fe0a 	bl	8000e14 <__aeabi_i2f>
 8003200:	1c04      	adds	r4, r0, #0
 8003202:	f7ff f9a1 	bl	8002548 <Refresh_ADC_Value>
 8003206:	1c03      	adds	r3, r0, #0
 8003208:	1c19      	adds	r1, r3, #0
 800320a:	1c20      	adds	r0, r4, #0
 800320c:	f7fd faf4 	bl	80007f8 <__aeabi_fmul>
 8003210:	1c03      	adds	r3, r0, #0
 8003212:	1c18      	adds	r0, r3, #0
 8003214:	f7fd f800 	bl	8000218 <__aeabi_f2uiz>
 8003218:	0003      	movs	r3, r0
 800321a:	0018      	movs	r0, r3
 800321c:	f000 fc8a 	bl	8003b34 <HAL_Delay>
			for(uint8_t i=l;i<=cantLeds;i++){
 8003220:	197b      	adds	r3, r7, r5
 8003222:	781a      	ldrb	r2, [r3, #0]
 8003224:	197b      	adds	r3, r7, r5
 8003226:	3201      	adds	r2, #1
 8003228:	701a      	strb	r2, [r3, #0]
 800322a:	4b34      	ldr	r3, [pc, #208]	; (80032fc <VolumenCerrar+0x188>)
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	220d      	movs	r2, #13
 8003230:	18ba      	adds	r2, r7, r2
 8003232:	7812      	ldrb	r2, [r2, #0]
 8003234:	429a      	cmp	r2, r3
 8003236:	d9d8      	bls.n	80031ea <VolumenCerrar+0x76>
			}
			for(uint8_t i=cantLeds;i>=l;i--){
 8003238:	230c      	movs	r3, #12
 800323a:	18fb      	adds	r3, r7, r3
 800323c:	4a2f      	ldr	r2, [pc, #188]	; (80032fc <VolumenCerrar+0x188>)
 800323e:	7812      	ldrb	r2, [r2, #0]
 8003240:	701a      	strb	r2, [r3, #0]
 8003242:	e01f      	b.n	8003284 <VolumenCerrar+0x110>
				Encender_1_Led_3(i);
 8003244:	250c      	movs	r5, #12
 8003246:	197b      	adds	r3, r7, r5
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	0018      	movs	r0, r3
 800324c:	f7ff fb28 	bl	80028a0 <Encender_1_Led_3>
				HAL_Delay(tiempo*Refresh_ADC_Value());
 8003250:	1d3b      	adds	r3, r7, #4
 8003252:	881b      	ldrh	r3, [r3, #0]
 8003254:	0018      	movs	r0, r3
 8003256:	f7fd fddd 	bl	8000e14 <__aeabi_i2f>
 800325a:	1c04      	adds	r4, r0, #0
 800325c:	f7ff f974 	bl	8002548 <Refresh_ADC_Value>
 8003260:	1c03      	adds	r3, r0, #0
 8003262:	1c19      	adds	r1, r3, #0
 8003264:	1c20      	adds	r0, r4, #0
 8003266:	f7fd fac7 	bl	80007f8 <__aeabi_fmul>
 800326a:	1c03      	adds	r3, r0, #0
 800326c:	1c18      	adds	r0, r3, #0
 800326e:	f7fc ffd3 	bl	8000218 <__aeabi_f2uiz>
 8003272:	0003      	movs	r3, r0
 8003274:	0018      	movs	r0, r3
 8003276:	f000 fc5d 	bl	8003b34 <HAL_Delay>
			for(uint8_t i=cantLeds;i>=l;i--){
 800327a:	197b      	adds	r3, r7, r5
 800327c:	781a      	ldrb	r2, [r3, #0]
 800327e:	197b      	adds	r3, r7, r5
 8003280:	3a01      	subs	r2, #1
 8003282:	701a      	strb	r2, [r3, #0]
 8003284:	230c      	movs	r3, #12
 8003286:	18fa      	adds	r2, r7, r3
 8003288:	230b      	movs	r3, #11
 800328a:	18fb      	adds	r3, r7, r3
 800328c:	7812      	ldrb	r2, [r2, #0]
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	429a      	cmp	r2, r3
 8003292:	d2d7      	bcs.n	8003244 <VolumenCerrar+0xd0>
		for(uint8_t i=cantLeds;i>=1;i--){
 8003294:	210e      	movs	r1, #14
 8003296:	187b      	adds	r3, r7, r1
 8003298:	781a      	ldrb	r2, [r3, #0]
 800329a:	187b      	adds	r3, r7, r1
 800329c:	3a01      	subs	r2, #1
 800329e:	701a      	strb	r2, [r3, #0]
 80032a0:	230e      	movs	r3, #14
 80032a2:	18fb      	adds	r3, r7, r3
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d000      	beq.n	80032ac <VolumenCerrar+0x138>
 80032aa:	e77d      	b.n	80031a8 <VolumenCerrar+0x34>
			}
		}
		HAL_Delay(tiempo2*Refresh_ADC_Value());
 80032ac:	1cbb      	adds	r3, r7, #2
 80032ae:	881b      	ldrh	r3, [r3, #0]
 80032b0:	0018      	movs	r0, r3
 80032b2:	f7fd fdaf 	bl	8000e14 <__aeabi_i2f>
 80032b6:	1c04      	adds	r4, r0, #0
 80032b8:	f7ff f946 	bl	8002548 <Refresh_ADC_Value>
 80032bc:	1c03      	adds	r3, r0, #0
 80032be:	1c19      	adds	r1, r3, #0
 80032c0:	1c20      	adds	r0, r4, #0
 80032c2:	f7fd fa99 	bl	80007f8 <__aeabi_fmul>
 80032c6:	1c03      	adds	r3, r0, #0
 80032c8:	1c18      	adds	r0, r3, #0
 80032ca:	f7fc ffa5 	bl	8000218 <__aeabi_f2uiz>
 80032ce:	0003      	movs	r3, r0
 80032d0:	0018      	movs	r0, r3
 80032d2:	f000 fc2f 	bl	8003b34 <HAL_Delay>
	for(uint8_t v=0;v<veces;v++){
 80032d6:	210f      	movs	r1, #15
 80032d8:	187b      	adds	r3, r7, r1
 80032da:	781a      	ldrb	r2, [r3, #0]
 80032dc:	187b      	adds	r3, r7, r1
 80032de:	3201      	adds	r2, #1
 80032e0:	701a      	strb	r2, [r3, #0]
 80032e2:	230f      	movs	r3, #15
 80032e4:	18fa      	adds	r2, r7, r3
 80032e6:	1dfb      	adds	r3, r7, #7
 80032e8:	7812      	ldrb	r2, [r2, #0]
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d200      	bcs.n	80032f2 <VolumenCerrar+0x17e>
 80032f0:	e754      	b.n	800319c <VolumenCerrar+0x28>
	}
}
 80032f2:	46c0      	nop			; (mov r8, r8)
 80032f4:	46c0      	nop			; (mov r8, r8)
 80032f6:	46bd      	mov	sp, r7
 80032f8:	b004      	add	sp, #16
 80032fa:	bdb0      	pop	{r4, r5, r7, pc}
 80032fc:	20000000 	.word	0x20000000

08003300 <ArmarIzquierda>:

void ArmarIzquierda(uint8_t veces, uint16_t tiempo, uint16_t tiempo2){
 8003300:	b590      	push	{r4, r7, lr}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	0004      	movs	r4, r0
 8003308:	0008      	movs	r0, r1
 800330a:	0011      	movs	r1, r2
 800330c:	1dfb      	adds	r3, r7, #7
 800330e:	1c22      	adds	r2, r4, #0
 8003310:	701a      	strb	r2, [r3, #0]
 8003312:	1d3b      	adds	r3, r7, #4
 8003314:	1c02      	adds	r2, r0, #0
 8003316:	801a      	strh	r2, [r3, #0]
 8003318:	1cbb      	adds	r3, r7, #2
 800331a:	1c0a      	adds	r2, r1, #0
 800331c:	801a      	strh	r2, [r3, #0]
	for(uint8_t v=0;v<veces;v++){
 800331e:	230f      	movs	r3, #15
 8003320:	18fb      	adds	r3, r7, r3
 8003322:	2200      	movs	r2, #0
 8003324:	701a      	strb	r2, [r3, #0]
 8003326:	e0c1      	b.n	80034ac <ArmarIzquierda+0x1ac>

		uint8_t l=1;
 8003328:	230e      	movs	r3, #14
 800332a:	18fb      	adds	r3, r7, r3
 800332c:	2201      	movs	r2, #1
 800332e:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=cantLeds;i>=1;i--){
 8003330:	230d      	movs	r3, #13
 8003332:	18fb      	adds	r3, r7, r3
 8003334:	4a64      	ldr	r2, [pc, #400]	; (80034c8 <ArmarIzquierda+0x1c8>)
 8003336:	7812      	ldrb	r2, [r2, #0]
 8003338:	701a      	strb	r2, [r3, #0]
 800333a:	e096      	b.n	800346a <ArmarIzquierda+0x16a>
			for(uint8_t i=cantLeds;i>=l;i--){
 800333c:	230c      	movs	r3, #12
 800333e:	18fb      	adds	r3, r7, r3
 8003340:	4a61      	ldr	r2, [pc, #388]	; (80034c8 <ArmarIzquierda+0x1c8>)
 8003342:	7812      	ldrb	r2, [r2, #0]
 8003344:	701a      	strb	r2, [r3, #0]
 8003346:	e06b      	b.n	8003420 <ArmarIzquierda+0x120>
				Encender_1_Led_4(i,l);
 8003348:	240e      	movs	r4, #14
 800334a:	193b      	adds	r3, r7, r4
 800334c:	781a      	ldrb	r2, [r3, #0]
 800334e:	230c      	movs	r3, #12
 8003350:	18fb      	adds	r3, r7, r3
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	0011      	movs	r1, r2
 8003356:	0018      	movs	r0, r3
 8003358:	f7ff fad6 	bl	8002908 <Encender_1_Led_4>
				if(l<cantLeds/2){
 800335c:	4b5a      	ldr	r3, [pc, #360]	; (80034c8 <ArmarIzquierda+0x1c8>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	085b      	lsrs	r3, r3, #1
 8003362:	b2db      	uxtb	r3, r3
 8003364:	193a      	adds	r2, r7, r4
 8003366:	7812      	ldrb	r2, [r2, #0]
 8003368:	429a      	cmp	r2, r3
 800336a:	d215      	bcs.n	8003398 <ArmarIzquierda+0x98>
					HAL_Delay(tiempo*Refresh_ADC_Value());
 800336c:	1d3b      	adds	r3, r7, #4
 800336e:	881b      	ldrh	r3, [r3, #0]
 8003370:	0018      	movs	r0, r3
 8003372:	f7fd fd4f 	bl	8000e14 <__aeabi_i2f>
 8003376:	1c04      	adds	r4, r0, #0
 8003378:	f7ff f8e6 	bl	8002548 <Refresh_ADC_Value>
 800337c:	1c03      	adds	r3, r0, #0
 800337e:	1c19      	adds	r1, r3, #0
 8003380:	1c20      	adds	r0, r4, #0
 8003382:	f7fd fa39 	bl	80007f8 <__aeabi_fmul>
 8003386:	1c03      	adds	r3, r0, #0
 8003388:	1c18      	adds	r0, r3, #0
 800338a:	f7fc ff45 	bl	8000218 <__aeabi_f2uiz>
 800338e:	0003      	movs	r3, r0
 8003390:	0018      	movs	r0, r3
 8003392:	f000 fbcf 	bl	8003b34 <HAL_Delay>
 8003396:	e03d      	b.n	8003414 <ArmarIzquierda+0x114>
				}else if(l>=cantLeds-2){
 8003398:	230e      	movs	r3, #14
 800339a:	18fb      	adds	r3, r7, r3
 800339c:	781a      	ldrb	r2, [r3, #0]
 800339e:	4b4a      	ldr	r3, [pc, #296]	; (80034c8 <ArmarIzquierda+0x1c8>)
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	3b02      	subs	r3, #2
 80033a4:	429a      	cmp	r2, r3
 80033a6:	db1b      	blt.n	80033e0 <ArmarIzquierda+0xe0>
					HAL_Delay(tiempo*Refresh_ADC_Value()*4);
 80033a8:	1d3b      	adds	r3, r7, #4
 80033aa:	881b      	ldrh	r3, [r3, #0]
 80033ac:	0018      	movs	r0, r3
 80033ae:	f7fd fd31 	bl	8000e14 <__aeabi_i2f>
 80033b2:	1c04      	adds	r4, r0, #0
 80033b4:	f7ff f8c8 	bl	8002548 <Refresh_ADC_Value>
 80033b8:	1c03      	adds	r3, r0, #0
 80033ba:	1c19      	adds	r1, r3, #0
 80033bc:	1c20      	adds	r0, r4, #0
 80033be:	f7fd fa1b 	bl	80007f8 <__aeabi_fmul>
 80033c2:	1c03      	adds	r3, r0, #0
 80033c4:	2181      	movs	r1, #129	; 0x81
 80033c6:	05c9      	lsls	r1, r1, #23
 80033c8:	1c18      	adds	r0, r3, #0
 80033ca:	f7fd fa15 	bl	80007f8 <__aeabi_fmul>
 80033ce:	1c03      	adds	r3, r0, #0
 80033d0:	1c18      	adds	r0, r3, #0
 80033d2:	f7fc ff21 	bl	8000218 <__aeabi_f2uiz>
 80033d6:	0003      	movs	r3, r0
 80033d8:	0018      	movs	r0, r3
 80033da:	f000 fbab 	bl	8003b34 <HAL_Delay>
 80033de:	e019      	b.n	8003414 <ArmarIzquierda+0x114>
				}else{
					HAL_Delay(tiempo*Refresh_ADC_Value()*2);
 80033e0:	1d3b      	adds	r3, r7, #4
 80033e2:	881b      	ldrh	r3, [r3, #0]
 80033e4:	0018      	movs	r0, r3
 80033e6:	f7fd fd15 	bl	8000e14 <__aeabi_i2f>
 80033ea:	1c04      	adds	r4, r0, #0
 80033ec:	f7ff f8ac 	bl	8002548 <Refresh_ADC_Value>
 80033f0:	1c03      	adds	r3, r0, #0
 80033f2:	1c19      	adds	r1, r3, #0
 80033f4:	1c20      	adds	r0, r4, #0
 80033f6:	f7fd f9ff 	bl	80007f8 <__aeabi_fmul>
 80033fa:	1c03      	adds	r3, r0, #0
 80033fc:	1c19      	adds	r1, r3, #0
 80033fe:	1c18      	adds	r0, r3, #0
 8003400:	f7fc ff40 	bl	8000284 <__aeabi_fadd>
 8003404:	1c03      	adds	r3, r0, #0
 8003406:	1c18      	adds	r0, r3, #0
 8003408:	f7fc ff06 	bl	8000218 <__aeabi_f2uiz>
 800340c:	0003      	movs	r3, r0
 800340e:	0018      	movs	r0, r3
 8003410:	f000 fb90 	bl	8003b34 <HAL_Delay>
			for(uint8_t i=cantLeds;i>=l;i--){
 8003414:	210c      	movs	r1, #12
 8003416:	187b      	adds	r3, r7, r1
 8003418:	781a      	ldrb	r2, [r3, #0]
 800341a:	187b      	adds	r3, r7, r1
 800341c:	3a01      	subs	r2, #1
 800341e:	701a      	strb	r2, [r3, #0]
 8003420:	230c      	movs	r3, #12
 8003422:	18fa      	adds	r2, r7, r3
 8003424:	210e      	movs	r1, #14
 8003426:	187b      	adds	r3, r7, r1
 8003428:	7812      	ldrb	r2, [r2, #0]
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	429a      	cmp	r2, r3
 800342e:	d28b      	bcs.n	8003348 <ArmarIzquierda+0x48>
				}
				//HAL_Delay(tiempo);
			}

			if(l>=cantLeds){
 8003430:	4b25      	ldr	r3, [pc, #148]	; (80034c8 <ArmarIzquierda+0x1c8>)
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	187a      	adds	r2, r7, r1
 8003436:	7812      	ldrb	r2, [r2, #0]
 8003438:	429a      	cmp	r2, r3
 800343a:	d303      	bcc.n	8003444 <ArmarIzquierda+0x144>
				l=1;
 800343c:	187b      	adds	r3, r7, r1
 800343e:	2201      	movs	r2, #1
 8003440:	701a      	strb	r2, [r3, #0]
 8003442:	e00c      	b.n	800345e <ArmarIzquierda+0x15e>
			}else{
				ControlLeds(l, 1);
 8003444:	240e      	movs	r4, #14
 8003446:	193b      	adds	r3, r7, r4
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	2101      	movs	r1, #1
 800344c:	0018      	movs	r0, r3
 800344e:	f7ff f8a5 	bl	800259c <ControlLeds>
				l++;
 8003452:	0021      	movs	r1, r4
 8003454:	187b      	adds	r3, r7, r1
 8003456:	781a      	ldrb	r2, [r3, #0]
 8003458:	187b      	adds	r3, r7, r1
 800345a:	3201      	adds	r2, #1
 800345c:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=cantLeds;i>=1;i--){
 800345e:	210d      	movs	r1, #13
 8003460:	187b      	adds	r3, r7, r1
 8003462:	781a      	ldrb	r2, [r3, #0]
 8003464:	187b      	adds	r3, r7, r1
 8003466:	3a01      	subs	r2, #1
 8003468:	701a      	strb	r2, [r3, #0]
 800346a:	230d      	movs	r3, #13
 800346c:	18fb      	adds	r3, r7, r3
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d000      	beq.n	8003476 <ArmarIzquierda+0x176>
 8003474:	e762      	b.n	800333c <ArmarIzquierda+0x3c>
			}
		}

		HAL_Delay(tiempo2*Refresh_ADC_Value());
 8003476:	1cbb      	adds	r3, r7, #2
 8003478:	881b      	ldrh	r3, [r3, #0]
 800347a:	0018      	movs	r0, r3
 800347c:	f7fd fcca 	bl	8000e14 <__aeabi_i2f>
 8003480:	1c04      	adds	r4, r0, #0
 8003482:	f7ff f861 	bl	8002548 <Refresh_ADC_Value>
 8003486:	1c03      	adds	r3, r0, #0
 8003488:	1c19      	adds	r1, r3, #0
 800348a:	1c20      	adds	r0, r4, #0
 800348c:	f7fd f9b4 	bl	80007f8 <__aeabi_fmul>
 8003490:	1c03      	adds	r3, r0, #0
 8003492:	1c18      	adds	r0, r3, #0
 8003494:	f7fc fec0 	bl	8000218 <__aeabi_f2uiz>
 8003498:	0003      	movs	r3, r0
 800349a:	0018      	movs	r0, r3
 800349c:	f000 fb4a 	bl	8003b34 <HAL_Delay>
	for(uint8_t v=0;v<veces;v++){
 80034a0:	210f      	movs	r1, #15
 80034a2:	187b      	adds	r3, r7, r1
 80034a4:	781a      	ldrb	r2, [r3, #0]
 80034a6:	187b      	adds	r3, r7, r1
 80034a8:	3201      	adds	r2, #1
 80034aa:	701a      	strb	r2, [r3, #0]
 80034ac:	230f      	movs	r3, #15
 80034ae:	18fa      	adds	r2, r7, r3
 80034b0:	1dfb      	adds	r3, r7, #7
 80034b2:	7812      	ldrb	r2, [r2, #0]
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d200      	bcs.n	80034bc <ArmarIzquierda+0x1bc>
 80034ba:	e735      	b.n	8003328 <ArmarIzquierda+0x28>
	}
}
 80034bc:	46c0      	nop			; (mov r8, r8)
 80034be:	46c0      	nop			; (mov r8, r8)
 80034c0:	46bd      	mov	sp, r7
 80034c2:	b005      	add	sp, #20
 80034c4:	bd90      	pop	{r4, r7, pc}
 80034c6:	46c0      	nop			; (mov r8, r8)
 80034c8:	20000000 	.word	0x20000000

080034cc <EncenderAleatorio>:

void EncenderAleatorio(uint8_t veces, uint16_t tiempo, uint16_t tiempo2){
 80034cc:	b5b0      	push	{r4, r5, r7, lr}
 80034ce:	b08a      	sub	sp, #40	; 0x28
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	0004      	movs	r4, r0
 80034d4:	0008      	movs	r0, r1
 80034d6:	0011      	movs	r1, r2
 80034d8:	1dfb      	adds	r3, r7, #7
 80034da:	1c22      	adds	r2, r4, #0
 80034dc:	701a      	strb	r2, [r3, #0]
 80034de:	1d3b      	adds	r3, r7, #4
 80034e0:	1c02      	adds	r2, r0, #0
 80034e2:	801a      	strh	r2, [r3, #0]
 80034e4:	1cbb      	adds	r3, r7, #2
 80034e6:	1c0a      	adds	r2, r1, #0
 80034e8:	801a      	strh	r2, [r3, #0]

	//9 letras
	uint8_t secuencia1[9]={9,6,2,4,7,1,3,5,8};
 80034ea:	2318      	movs	r3, #24
 80034ec:	18fb      	adds	r3, r7, r3
 80034ee:	4aa1      	ldr	r2, [pc, #644]	; (8003774 <EncenderAleatorio+0x2a8>)
 80034f0:	ca03      	ldmia	r2!, {r0, r1}
 80034f2:	c303      	stmia	r3!, {r0, r1}
 80034f4:	7812      	ldrb	r2, [r2, #0]
 80034f6:	701a      	strb	r2, [r3, #0]
	uint8_t secuencia2[9]={7,5,1,8,4,2,6,3,9};
 80034f8:	230c      	movs	r3, #12
 80034fa:	18fb      	adds	r3, r7, r3
 80034fc:	4a9e      	ldr	r2, [pc, #632]	; (8003778 <EncenderAleatorio+0x2ac>)
 80034fe:	ca03      	ldmia	r2!, {r0, r1}
 8003500:	c303      	stmia	r3!, {r0, r1}
 8003502:	7812      	ldrb	r2, [r2, #0]
 8003504:	701a      	strb	r2, [r3, #0]
	//5 letras
	//uint8_t secuencia1[5]={4,3,5,1,2};
	//uint8_t secuencia2[5]={2,5,1,3,4};


	for(uint8_t i=0;i<cantLeds;i++){
 8003506:	2327      	movs	r3, #39	; 0x27
 8003508:	18fb      	adds	r3, r7, r3
 800350a:	2200      	movs	r2, #0
 800350c:	701a      	strb	r2, [r3, #0]
 800350e:	e023      	b.n	8003558 <EncenderAleatorio+0x8c>
		ControlLeds(secuencia1[i], 1);
 8003510:	2527      	movs	r5, #39	; 0x27
 8003512:	197b      	adds	r3, r7, r5
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	2218      	movs	r2, #24
 8003518:	18ba      	adds	r2, r7, r2
 800351a:	5cd3      	ldrb	r3, [r2, r3]
 800351c:	2101      	movs	r1, #1
 800351e:	0018      	movs	r0, r3
 8003520:	f7ff f83c 	bl	800259c <ControlLeds>
		HAL_Delay(tiempo*Refresh_ADC_Value());
 8003524:	1d3b      	adds	r3, r7, #4
 8003526:	881b      	ldrh	r3, [r3, #0]
 8003528:	0018      	movs	r0, r3
 800352a:	f7fd fc73 	bl	8000e14 <__aeabi_i2f>
 800352e:	1c04      	adds	r4, r0, #0
 8003530:	f7ff f80a 	bl	8002548 <Refresh_ADC_Value>
 8003534:	1c03      	adds	r3, r0, #0
 8003536:	1c19      	adds	r1, r3, #0
 8003538:	1c20      	adds	r0, r4, #0
 800353a:	f7fd f95d 	bl	80007f8 <__aeabi_fmul>
 800353e:	1c03      	adds	r3, r0, #0
 8003540:	1c18      	adds	r0, r3, #0
 8003542:	f7fc fe69 	bl	8000218 <__aeabi_f2uiz>
 8003546:	0003      	movs	r3, r0
 8003548:	0018      	movs	r0, r3
 800354a:	f000 faf3 	bl	8003b34 <HAL_Delay>
	for(uint8_t i=0;i<cantLeds;i++){
 800354e:	197b      	adds	r3, r7, r5
 8003550:	781a      	ldrb	r2, [r3, #0]
 8003552:	197b      	adds	r3, r7, r5
 8003554:	3201      	adds	r2, #1
 8003556:	701a      	strb	r2, [r3, #0]
 8003558:	4b88      	ldr	r3, [pc, #544]	; (800377c <EncenderAleatorio+0x2b0>)
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	2227      	movs	r2, #39	; 0x27
 800355e:	18ba      	adds	r2, r7, r2
 8003560:	7812      	ldrb	r2, [r2, #0]
 8003562:	429a      	cmp	r2, r3
 8003564:	d3d4      	bcc.n	8003510 <EncenderAleatorio+0x44>
	}

	HAL_Delay(tiempo2*Refresh_ADC_Value());
 8003566:	1cbb      	adds	r3, r7, #2
 8003568:	881b      	ldrh	r3, [r3, #0]
 800356a:	0018      	movs	r0, r3
 800356c:	f7fd fc52 	bl	8000e14 <__aeabi_i2f>
 8003570:	1c04      	adds	r4, r0, #0
 8003572:	f7fe ffe9 	bl	8002548 <Refresh_ADC_Value>
 8003576:	1c03      	adds	r3, r0, #0
 8003578:	1c19      	adds	r1, r3, #0
 800357a:	1c20      	adds	r0, r4, #0
 800357c:	f7fd f93c 	bl	80007f8 <__aeabi_fmul>
 8003580:	1c03      	adds	r3, r0, #0
 8003582:	1c18      	adds	r0, r3, #0
 8003584:	f7fc fe48 	bl	8000218 <__aeabi_f2uiz>
 8003588:	0003      	movs	r3, r0
 800358a:	0018      	movs	r0, r3
 800358c:	f000 fad2 	bl	8003b34 <HAL_Delay>

	for(int8_t i=cantLeds-1;i>=0;i--){
 8003590:	4b7a      	ldr	r3, [pc, #488]	; (800377c <EncenderAleatorio+0x2b0>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	3b01      	subs	r3, #1
 8003596:	b2da      	uxtb	r2, r3
 8003598:	2326      	movs	r3, #38	; 0x26
 800359a:	18fb      	adds	r3, r7, r3
 800359c:	701a      	strb	r2, [r3, #0]
 800359e:	e027      	b.n	80035f0 <EncenderAleatorio+0x124>
		ControlLeds(secuencia1[i], 0);
 80035a0:	2526      	movs	r5, #38	; 0x26
 80035a2:	197b      	adds	r3, r7, r5
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	b25b      	sxtb	r3, r3
 80035a8:	2218      	movs	r2, #24
 80035aa:	18ba      	adds	r2, r7, r2
 80035ac:	5cd3      	ldrb	r3, [r2, r3]
 80035ae:	2100      	movs	r1, #0
 80035b0:	0018      	movs	r0, r3
 80035b2:	f7fe fff3 	bl	800259c <ControlLeds>
		HAL_Delay(tiempo*Refresh_ADC_Value());
 80035b6:	1d3b      	adds	r3, r7, #4
 80035b8:	881b      	ldrh	r3, [r3, #0]
 80035ba:	0018      	movs	r0, r3
 80035bc:	f7fd fc2a 	bl	8000e14 <__aeabi_i2f>
 80035c0:	1c04      	adds	r4, r0, #0
 80035c2:	f7fe ffc1 	bl	8002548 <Refresh_ADC_Value>
 80035c6:	1c03      	adds	r3, r0, #0
 80035c8:	1c19      	adds	r1, r3, #0
 80035ca:	1c20      	adds	r0, r4, #0
 80035cc:	f7fd f914 	bl	80007f8 <__aeabi_fmul>
 80035d0:	1c03      	adds	r3, r0, #0
 80035d2:	1c18      	adds	r0, r3, #0
 80035d4:	f7fc fe20 	bl	8000218 <__aeabi_f2uiz>
 80035d8:	0003      	movs	r3, r0
 80035da:	0018      	movs	r0, r3
 80035dc:	f000 faaa 	bl	8003b34 <HAL_Delay>
	for(int8_t i=cantLeds-1;i>=0;i--){
 80035e0:	197b      	adds	r3, r7, r5
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	b25b      	sxtb	r3, r3
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	3b01      	subs	r3, #1
 80035ea:	b2da      	uxtb	r2, r3
 80035ec:	197b      	adds	r3, r7, r5
 80035ee:	701a      	strb	r2, [r3, #0]
 80035f0:	2326      	movs	r3, #38	; 0x26
 80035f2:	18fb      	adds	r3, r7, r3
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	2b7f      	cmp	r3, #127	; 0x7f
 80035f8:	d9d2      	bls.n	80035a0 <EncenderAleatorio+0xd4>
	}

	HAL_Delay(tiempo2*Refresh_ADC_Value()*0.20);
 80035fa:	1cbb      	adds	r3, r7, #2
 80035fc:	881b      	ldrh	r3, [r3, #0]
 80035fe:	0018      	movs	r0, r3
 8003600:	f7fd fc08 	bl	8000e14 <__aeabi_i2f>
 8003604:	1c04      	adds	r4, r0, #0
 8003606:	f7fe ff9f 	bl	8002548 <Refresh_ADC_Value>
 800360a:	1c03      	adds	r3, r0, #0
 800360c:	1c19      	adds	r1, r3, #0
 800360e:	1c20      	adds	r0, r4, #0
 8003610:	f7fd f8f2 	bl	80007f8 <__aeabi_fmul>
 8003614:	1c03      	adds	r3, r0, #0
 8003616:	1c18      	adds	r0, r3, #0
 8003618:	f7fe fb10 	bl	8001c3c <__aeabi_f2d>
 800361c:	4a58      	ldr	r2, [pc, #352]	; (8003780 <EncenderAleatorio+0x2b4>)
 800361e:	4b59      	ldr	r3, [pc, #356]	; (8003784 <EncenderAleatorio+0x2b8>)
 8003620:	f7fd fc92 	bl	8000f48 <__aeabi_dmul>
 8003624:	0002      	movs	r2, r0
 8003626:	000b      	movs	r3, r1
 8003628:	0010      	movs	r0, r2
 800362a:	0019      	movs	r1, r3
 800362c:	f7fc fe0c 	bl	8000248 <__aeabi_d2uiz>
 8003630:	0003      	movs	r3, r0
 8003632:	0018      	movs	r0, r3
 8003634:	f000 fa7e 	bl	8003b34 <HAL_Delay>

	for(uint8_t i=0;i<cantLeds;i++){
 8003638:	2325      	movs	r3, #37	; 0x25
 800363a:	18fb      	adds	r3, r7, r3
 800363c:	2200      	movs	r2, #0
 800363e:	701a      	strb	r2, [r3, #0]
 8003640:	e023      	b.n	800368a <EncenderAleatorio+0x1be>
		ControlLeds(secuencia2[i], 1);
 8003642:	2525      	movs	r5, #37	; 0x25
 8003644:	197b      	adds	r3, r7, r5
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	220c      	movs	r2, #12
 800364a:	18ba      	adds	r2, r7, r2
 800364c:	5cd3      	ldrb	r3, [r2, r3]
 800364e:	2101      	movs	r1, #1
 8003650:	0018      	movs	r0, r3
 8003652:	f7fe ffa3 	bl	800259c <ControlLeds>
		HAL_Delay(tiempo*Refresh_ADC_Value());
 8003656:	1d3b      	adds	r3, r7, #4
 8003658:	881b      	ldrh	r3, [r3, #0]
 800365a:	0018      	movs	r0, r3
 800365c:	f7fd fbda 	bl	8000e14 <__aeabi_i2f>
 8003660:	1c04      	adds	r4, r0, #0
 8003662:	f7fe ff71 	bl	8002548 <Refresh_ADC_Value>
 8003666:	1c03      	adds	r3, r0, #0
 8003668:	1c19      	adds	r1, r3, #0
 800366a:	1c20      	adds	r0, r4, #0
 800366c:	f7fd f8c4 	bl	80007f8 <__aeabi_fmul>
 8003670:	1c03      	adds	r3, r0, #0
 8003672:	1c18      	adds	r0, r3, #0
 8003674:	f7fc fdd0 	bl	8000218 <__aeabi_f2uiz>
 8003678:	0003      	movs	r3, r0
 800367a:	0018      	movs	r0, r3
 800367c:	f000 fa5a 	bl	8003b34 <HAL_Delay>
	for(uint8_t i=0;i<cantLeds;i++){
 8003680:	197b      	adds	r3, r7, r5
 8003682:	781a      	ldrb	r2, [r3, #0]
 8003684:	197b      	adds	r3, r7, r5
 8003686:	3201      	adds	r2, #1
 8003688:	701a      	strb	r2, [r3, #0]
 800368a:	4b3c      	ldr	r3, [pc, #240]	; (800377c <EncenderAleatorio+0x2b0>)
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	2225      	movs	r2, #37	; 0x25
 8003690:	18ba      	adds	r2, r7, r2
 8003692:	7812      	ldrb	r2, [r2, #0]
 8003694:	429a      	cmp	r2, r3
 8003696:	d3d4      	bcc.n	8003642 <EncenderAleatorio+0x176>
	}

	HAL_Delay(tiempo2*Refresh_ADC_Value());
 8003698:	1cbb      	adds	r3, r7, #2
 800369a:	881b      	ldrh	r3, [r3, #0]
 800369c:	0018      	movs	r0, r3
 800369e:	f7fd fbb9 	bl	8000e14 <__aeabi_i2f>
 80036a2:	1c04      	adds	r4, r0, #0
 80036a4:	f7fe ff50 	bl	8002548 <Refresh_ADC_Value>
 80036a8:	1c03      	adds	r3, r0, #0
 80036aa:	1c19      	adds	r1, r3, #0
 80036ac:	1c20      	adds	r0, r4, #0
 80036ae:	f7fd f8a3 	bl	80007f8 <__aeabi_fmul>
 80036b2:	1c03      	adds	r3, r0, #0
 80036b4:	1c18      	adds	r0, r3, #0
 80036b6:	f7fc fdaf 	bl	8000218 <__aeabi_f2uiz>
 80036ba:	0003      	movs	r3, r0
 80036bc:	0018      	movs	r0, r3
 80036be:	f000 fa39 	bl	8003b34 <HAL_Delay>

	for(int8_t i=cantLeds-1;i>=0;i--){
 80036c2:	4b2e      	ldr	r3, [pc, #184]	; (800377c <EncenderAleatorio+0x2b0>)
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	3b01      	subs	r3, #1
 80036c8:	b2da      	uxtb	r2, r3
 80036ca:	2324      	movs	r3, #36	; 0x24
 80036cc:	18fb      	adds	r3, r7, r3
 80036ce:	701a      	strb	r2, [r3, #0]
 80036d0:	e027      	b.n	8003722 <EncenderAleatorio+0x256>
		ControlLeds(secuencia2[i], 0);
 80036d2:	2524      	movs	r5, #36	; 0x24
 80036d4:	197b      	adds	r3, r7, r5
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	b25b      	sxtb	r3, r3
 80036da:	220c      	movs	r2, #12
 80036dc:	18ba      	adds	r2, r7, r2
 80036de:	5cd3      	ldrb	r3, [r2, r3]
 80036e0:	2100      	movs	r1, #0
 80036e2:	0018      	movs	r0, r3
 80036e4:	f7fe ff5a 	bl	800259c <ControlLeds>
		HAL_Delay(tiempo*Refresh_ADC_Value());
 80036e8:	1d3b      	adds	r3, r7, #4
 80036ea:	881b      	ldrh	r3, [r3, #0]
 80036ec:	0018      	movs	r0, r3
 80036ee:	f7fd fb91 	bl	8000e14 <__aeabi_i2f>
 80036f2:	1c04      	adds	r4, r0, #0
 80036f4:	f7fe ff28 	bl	8002548 <Refresh_ADC_Value>
 80036f8:	1c03      	adds	r3, r0, #0
 80036fa:	1c19      	adds	r1, r3, #0
 80036fc:	1c20      	adds	r0, r4, #0
 80036fe:	f7fd f87b 	bl	80007f8 <__aeabi_fmul>
 8003702:	1c03      	adds	r3, r0, #0
 8003704:	1c18      	adds	r0, r3, #0
 8003706:	f7fc fd87 	bl	8000218 <__aeabi_f2uiz>
 800370a:	0003      	movs	r3, r0
 800370c:	0018      	movs	r0, r3
 800370e:	f000 fa11 	bl	8003b34 <HAL_Delay>
	for(int8_t i=cantLeds-1;i>=0;i--){
 8003712:	197b      	adds	r3, r7, r5
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	b25b      	sxtb	r3, r3
 8003718:	b2db      	uxtb	r3, r3
 800371a:	3b01      	subs	r3, #1
 800371c:	b2da      	uxtb	r2, r3
 800371e:	197b      	adds	r3, r7, r5
 8003720:	701a      	strb	r2, [r3, #0]
 8003722:	2324      	movs	r3, #36	; 0x24
 8003724:	18fb      	adds	r3, r7, r3
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	2b7f      	cmp	r3, #127	; 0x7f
 800372a:	d9d2      	bls.n	80036d2 <EncenderAleatorio+0x206>
	}

	HAL_Delay(tiempo2*Refresh_ADC_Value()*0.20);
 800372c:	1cbb      	adds	r3, r7, #2
 800372e:	881b      	ldrh	r3, [r3, #0]
 8003730:	0018      	movs	r0, r3
 8003732:	f7fd fb6f 	bl	8000e14 <__aeabi_i2f>
 8003736:	1c04      	adds	r4, r0, #0
 8003738:	f7fe ff06 	bl	8002548 <Refresh_ADC_Value>
 800373c:	1c03      	adds	r3, r0, #0
 800373e:	1c19      	adds	r1, r3, #0
 8003740:	1c20      	adds	r0, r4, #0
 8003742:	f7fd f859 	bl	80007f8 <__aeabi_fmul>
 8003746:	1c03      	adds	r3, r0, #0
 8003748:	1c18      	adds	r0, r3, #0
 800374a:	f7fe fa77 	bl	8001c3c <__aeabi_f2d>
 800374e:	4a0c      	ldr	r2, [pc, #48]	; (8003780 <EncenderAleatorio+0x2b4>)
 8003750:	4b0c      	ldr	r3, [pc, #48]	; (8003784 <EncenderAleatorio+0x2b8>)
 8003752:	f7fd fbf9 	bl	8000f48 <__aeabi_dmul>
 8003756:	0002      	movs	r2, r0
 8003758:	000b      	movs	r3, r1
 800375a:	0010      	movs	r0, r2
 800375c:	0019      	movs	r1, r3
 800375e:	f7fc fd73 	bl	8000248 <__aeabi_d2uiz>
 8003762:	0003      	movs	r3, r0
 8003764:	0018      	movs	r0, r3
 8003766:	f000 f9e5 	bl	8003b34 <HAL_Delay>



}
 800376a:	46c0      	nop			; (mov r8, r8)
 800376c:	46bd      	mov	sp, r7
 800376e:	b00a      	add	sp, #40	; 0x28
 8003770:	bdb0      	pop	{r4, r5, r7, pc}
 8003772:	46c0      	nop			; (mov r8, r8)
 8003774:	08005888 	.word	0x08005888
 8003778:	08005894 	.word	0x08005894
 800377c:	20000000 	.word	0x20000000
 8003780:	9999999a 	.word	0x9999999a
 8003784:	3fc99999 	.word	0x3fc99999

08003788 <Blink>:

void Blink(uint8_t veces, uint16_t tiempo){
 8003788:	b590      	push	{r4, r7, lr}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
 800378e:	0002      	movs	r2, r0
 8003790:	1dfb      	adds	r3, r7, #7
 8003792:	701a      	strb	r2, [r3, #0]
 8003794:	1d3b      	adds	r3, r7, #4
 8003796:	1c0a      	adds	r2, r1, #0
 8003798:	801a      	strh	r2, [r3, #0]
	for(uint8_t v=0;v<veces;v++){
 800379a:	230f      	movs	r3, #15
 800379c:	18fb      	adds	r3, r7, r3
 800379e:	2200      	movs	r2, #0
 80037a0:	701a      	strb	r2, [r3, #0]
 80037a2:	e066      	b.n	8003872 <Blink+0xea>
		for(uint8_t i=1;i<=cantLeds;i++){
 80037a4:	230e      	movs	r3, #14
 80037a6:	18fb      	adds	r3, r7, r3
 80037a8:	2201      	movs	r2, #1
 80037aa:	701a      	strb	r2, [r3, #0]
 80037ac:	e00c      	b.n	80037c8 <Blink+0x40>
			ControlLeds(i, 1);
 80037ae:	240e      	movs	r4, #14
 80037b0:	193b      	adds	r3, r7, r4
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	2101      	movs	r1, #1
 80037b6:	0018      	movs	r0, r3
 80037b8:	f7fe fef0 	bl	800259c <ControlLeds>
		for(uint8_t i=1;i<=cantLeds;i++){
 80037bc:	0021      	movs	r1, r4
 80037be:	187b      	adds	r3, r7, r1
 80037c0:	781a      	ldrb	r2, [r3, #0]
 80037c2:	187b      	adds	r3, r7, r1
 80037c4:	3201      	adds	r2, #1
 80037c6:	701a      	strb	r2, [r3, #0]
 80037c8:	4b30      	ldr	r3, [pc, #192]	; (800388c <Blink+0x104>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	220e      	movs	r2, #14
 80037ce:	18ba      	adds	r2, r7, r2
 80037d0:	7812      	ldrb	r2, [r2, #0]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d9eb      	bls.n	80037ae <Blink+0x26>
		}
		HAL_Delay(tiempo*Refresh_ADC_Value());
 80037d6:	1d3b      	adds	r3, r7, #4
 80037d8:	881b      	ldrh	r3, [r3, #0]
 80037da:	0018      	movs	r0, r3
 80037dc:	f7fd fb1a 	bl	8000e14 <__aeabi_i2f>
 80037e0:	1c04      	adds	r4, r0, #0
 80037e2:	f7fe feb1 	bl	8002548 <Refresh_ADC_Value>
 80037e6:	1c03      	adds	r3, r0, #0
 80037e8:	1c19      	adds	r1, r3, #0
 80037ea:	1c20      	adds	r0, r4, #0
 80037ec:	f7fd f804 	bl	80007f8 <__aeabi_fmul>
 80037f0:	1c03      	adds	r3, r0, #0
 80037f2:	1c18      	adds	r0, r3, #0
 80037f4:	f7fc fd10 	bl	8000218 <__aeabi_f2uiz>
 80037f8:	0003      	movs	r3, r0
 80037fa:	0018      	movs	r0, r3
 80037fc:	f000 f99a 	bl	8003b34 <HAL_Delay>
		for(uint8_t i=1;i<=cantLeds;i++){
 8003800:	230d      	movs	r3, #13
 8003802:	18fb      	adds	r3, r7, r3
 8003804:	2201      	movs	r2, #1
 8003806:	701a      	strb	r2, [r3, #0]
 8003808:	e00c      	b.n	8003824 <Blink+0x9c>
			ControlLeds(i, 0);
 800380a:	240d      	movs	r4, #13
 800380c:	193b      	adds	r3, r7, r4
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	2100      	movs	r1, #0
 8003812:	0018      	movs	r0, r3
 8003814:	f7fe fec2 	bl	800259c <ControlLeds>
		for(uint8_t i=1;i<=cantLeds;i++){
 8003818:	0021      	movs	r1, r4
 800381a:	187b      	adds	r3, r7, r1
 800381c:	781a      	ldrb	r2, [r3, #0]
 800381e:	187b      	adds	r3, r7, r1
 8003820:	3201      	adds	r2, #1
 8003822:	701a      	strb	r2, [r3, #0]
 8003824:	4b19      	ldr	r3, [pc, #100]	; (800388c <Blink+0x104>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	220d      	movs	r2, #13
 800382a:	18ba      	adds	r2, r7, r2
 800382c:	7812      	ldrb	r2, [r2, #0]
 800382e:	429a      	cmp	r2, r3
 8003830:	d9eb      	bls.n	800380a <Blink+0x82>
		}
		HAL_Delay((tiempo*Refresh_ADC_Value())/5);
 8003832:	1d3b      	adds	r3, r7, #4
 8003834:	881b      	ldrh	r3, [r3, #0]
 8003836:	0018      	movs	r0, r3
 8003838:	f7fd faec 	bl	8000e14 <__aeabi_i2f>
 800383c:	1c04      	adds	r4, r0, #0
 800383e:	f7fe fe83 	bl	8002548 <Refresh_ADC_Value>
 8003842:	1c03      	adds	r3, r0, #0
 8003844:	1c19      	adds	r1, r3, #0
 8003846:	1c20      	adds	r0, r4, #0
 8003848:	f7fc ffd6 	bl	80007f8 <__aeabi_fmul>
 800384c:	1c03      	adds	r3, r0, #0
 800384e:	4910      	ldr	r1, [pc, #64]	; (8003890 <Blink+0x108>)
 8003850:	1c18      	adds	r0, r3, #0
 8003852:	f7fc feb7 	bl	80005c4 <__aeabi_fdiv>
 8003856:	1c03      	adds	r3, r0, #0
 8003858:	1c18      	adds	r0, r3, #0
 800385a:	f7fc fcdd 	bl	8000218 <__aeabi_f2uiz>
 800385e:	0003      	movs	r3, r0
 8003860:	0018      	movs	r0, r3
 8003862:	f000 f967 	bl	8003b34 <HAL_Delay>
	for(uint8_t v=0;v<veces;v++){
 8003866:	210f      	movs	r1, #15
 8003868:	187b      	adds	r3, r7, r1
 800386a:	781a      	ldrb	r2, [r3, #0]
 800386c:	187b      	adds	r3, r7, r1
 800386e:	3201      	adds	r2, #1
 8003870:	701a      	strb	r2, [r3, #0]
 8003872:	230f      	movs	r3, #15
 8003874:	18fa      	adds	r2, r7, r3
 8003876:	1dfb      	adds	r3, r7, #7
 8003878:	7812      	ldrb	r2, [r2, #0]
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	429a      	cmp	r2, r3
 800387e:	d391      	bcc.n	80037a4 <Blink+0x1c>
	}
}
 8003880:	46c0      	nop			; (mov r8, r8)
 8003882:	46c0      	nop			; (mov r8, r8)
 8003884:	46bd      	mov	sp, r7
 8003886:	b005      	add	sp, #20
 8003888:	bd90      	pop	{r4, r7, pc}
 800388a:	46c0      	nop			; (mov r8, r8)
 800388c:	20000000 	.word	0x20000000
 8003890:	40a00000 	.word	0x40a00000

08003894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003898:	b672      	cpsid	i
}
 800389a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800389c:	e7fe      	b.n	800389c <Error_Handler+0x8>
	...

080038a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038a6:	4b0f      	ldr	r3, [pc, #60]	; (80038e4 <HAL_MspInit+0x44>)
 80038a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038aa:	4b0e      	ldr	r3, [pc, #56]	; (80038e4 <HAL_MspInit+0x44>)
 80038ac:	2101      	movs	r1, #1
 80038ae:	430a      	orrs	r2, r1
 80038b0:	641a      	str	r2, [r3, #64]	; 0x40
 80038b2:	4b0c      	ldr	r3, [pc, #48]	; (80038e4 <HAL_MspInit+0x44>)
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	2201      	movs	r2, #1
 80038b8:	4013      	ands	r3, r2
 80038ba:	607b      	str	r3, [r7, #4]
 80038bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038be:	4b09      	ldr	r3, [pc, #36]	; (80038e4 <HAL_MspInit+0x44>)
 80038c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038c2:	4b08      	ldr	r3, [pc, #32]	; (80038e4 <HAL_MspInit+0x44>)
 80038c4:	2180      	movs	r1, #128	; 0x80
 80038c6:	0549      	lsls	r1, r1, #21
 80038c8:	430a      	orrs	r2, r1
 80038ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80038cc:	4b05      	ldr	r3, [pc, #20]	; (80038e4 <HAL_MspInit+0x44>)
 80038ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038d0:	2380      	movs	r3, #128	; 0x80
 80038d2:	055b      	lsls	r3, r3, #21
 80038d4:	4013      	ands	r3, r2
 80038d6:	603b      	str	r3, [r7, #0]
 80038d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038da:	46c0      	nop			; (mov r8, r8)
 80038dc:	46bd      	mov	sp, r7
 80038de:	b002      	add	sp, #8
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	46c0      	nop			; (mov r8, r8)
 80038e4:	40021000 	.word	0x40021000

080038e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80038e8:	b590      	push	{r4, r7, lr}
 80038ea:	b08b      	sub	sp, #44	; 0x2c
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038f0:	2414      	movs	r4, #20
 80038f2:	193b      	adds	r3, r7, r4
 80038f4:	0018      	movs	r0, r3
 80038f6:	2314      	movs	r3, #20
 80038f8:	001a      	movs	r2, r3
 80038fa:	2100      	movs	r1, #0
 80038fc:	f001 ff8c 	bl	8005818 <memset>
  if(hadc->Instance==ADC1)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a1b      	ldr	r2, [pc, #108]	; (8003974 <HAL_ADC_MspInit+0x8c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d130      	bne.n	800396c <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800390a:	4b1b      	ldr	r3, [pc, #108]	; (8003978 <HAL_ADC_MspInit+0x90>)
 800390c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800390e:	4b1a      	ldr	r3, [pc, #104]	; (8003978 <HAL_ADC_MspInit+0x90>)
 8003910:	2180      	movs	r1, #128	; 0x80
 8003912:	0349      	lsls	r1, r1, #13
 8003914:	430a      	orrs	r2, r1
 8003916:	641a      	str	r2, [r3, #64]	; 0x40
 8003918:	4b17      	ldr	r3, [pc, #92]	; (8003978 <HAL_ADC_MspInit+0x90>)
 800391a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800391c:	2380      	movs	r3, #128	; 0x80
 800391e:	035b      	lsls	r3, r3, #13
 8003920:	4013      	ands	r3, r2
 8003922:	613b      	str	r3, [r7, #16]
 8003924:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003926:	4b14      	ldr	r3, [pc, #80]	; (8003978 <HAL_ADC_MspInit+0x90>)
 8003928:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800392a:	4b13      	ldr	r3, [pc, #76]	; (8003978 <HAL_ADC_MspInit+0x90>)
 800392c:	2102      	movs	r1, #2
 800392e:	430a      	orrs	r2, r1
 8003930:	635a      	str	r2, [r3, #52]	; 0x34
 8003932:	4b11      	ldr	r3, [pc, #68]	; (8003978 <HAL_ADC_MspInit+0x90>)
 8003934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003936:	2202      	movs	r2, #2
 8003938:	4013      	ands	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]
 800393c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB7     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800393e:	193b      	adds	r3, r7, r4
 8003940:	2280      	movs	r2, #128	; 0x80
 8003942:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003944:	193b      	adds	r3, r7, r4
 8003946:	2203      	movs	r2, #3
 8003948:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800394a:	193b      	adds	r3, r7, r4
 800394c:	2200      	movs	r2, #0
 800394e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003950:	193b      	adds	r3, r7, r4
 8003952:	4a0a      	ldr	r2, [pc, #40]	; (800397c <HAL_ADC_MspInit+0x94>)
 8003954:	0019      	movs	r1, r3
 8003956:	0010      	movs	r0, r2
 8003958:	f001 f902 	bl	8004b60 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800395c:	2200      	movs	r2, #0
 800395e:	2100      	movs	r1, #0
 8003960:	200c      	movs	r0, #12
 8003962:	f001 f8cb 	bl	8004afc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8003966:	200c      	movs	r0, #12
 8003968:	f001 f8dd 	bl	8004b26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800396c:	46c0      	nop			; (mov r8, r8)
 800396e:	46bd      	mov	sp, r7
 8003970:	b00b      	add	sp, #44	; 0x2c
 8003972:	bd90      	pop	{r4, r7, pc}
 8003974:	40012400 	.word	0x40012400
 8003978:	40021000 	.word	0x40021000
 800397c:	50000400 	.word	0x50000400

08003980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003984:	e7fe      	b.n	8003984 <NMI_Handler+0x4>

08003986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800398a:	e7fe      	b.n	800398a <HardFault_Handler+0x4>

0800398c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003990:	46c0      	nop			; (mov r8, r8)
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800399a:	46c0      	nop			; (mov r8, r8)
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039a4:	f000 f8aa 	bl	8003afc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039a8:	46c0      	nop			; (mov r8, r8)
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
	...

080039b0 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80039b4:	4b03      	ldr	r3, [pc, #12]	; (80039c4 <ADC1_IRQHandler+0x14>)
 80039b6:	0018      	movs	r0, r3
 80039b8:	f000 fc4e 	bl	8004258 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80039bc:	46c0      	nop			; (mov r8, r8)
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	46c0      	nop			; (mov r8, r8)
 80039c4:	2000002c 	.word	0x2000002c

080039c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039cc:	46c0      	nop			; (mov r8, r8)
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
	...

080039d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80039d4:	480d      	ldr	r0, [pc, #52]	; (8003a0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80039d6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80039d8:	f7ff fff6 	bl	80039c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80039dc:	480c      	ldr	r0, [pc, #48]	; (8003a10 <LoopForever+0x6>)
  ldr r1, =_edata
 80039de:	490d      	ldr	r1, [pc, #52]	; (8003a14 <LoopForever+0xa>)
  ldr r2, =_sidata
 80039e0:	4a0d      	ldr	r2, [pc, #52]	; (8003a18 <LoopForever+0xe>)
  movs r3, #0
 80039e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039e4:	e002      	b.n	80039ec <LoopCopyDataInit>

080039e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039ea:	3304      	adds	r3, #4

080039ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039f0:	d3f9      	bcc.n	80039e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039f2:	4a0a      	ldr	r2, [pc, #40]	; (8003a1c <LoopForever+0x12>)
  ldr r4, =_ebss
 80039f4:	4c0a      	ldr	r4, [pc, #40]	; (8003a20 <LoopForever+0x16>)
  movs r3, #0
 80039f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039f8:	e001      	b.n	80039fe <LoopFillZerobss>

080039fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039fc:	3204      	adds	r2, #4

080039fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a00:	d3fb      	bcc.n	80039fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003a02:	f001 ff11 	bl	8005828 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003a06:	f7fe fbb3 	bl	8002170 <main>

08003a0a <LoopForever>:

LoopForever:
  b LoopForever
 8003a0a:	e7fe      	b.n	8003a0a <LoopForever>
  ldr   r0, =_estack
 8003a0c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003a10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a14:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8003a18:	08005990 	.word	0x08005990
  ldr r2, =_sbss
 8003a1c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8003a20:	2000009c 	.word	0x2000009c

08003a24 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003a24:	e7fe      	b.n	8003a24 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>
	...

08003a28 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003a2e:	1dfb      	adds	r3, r7, #7
 8003a30:	2200      	movs	r2, #0
 8003a32:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a34:	4b0b      	ldr	r3, [pc, #44]	; (8003a64 <HAL_Init+0x3c>)
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	4b0a      	ldr	r3, [pc, #40]	; (8003a64 <HAL_Init+0x3c>)
 8003a3a:	2180      	movs	r1, #128	; 0x80
 8003a3c:	0049      	lsls	r1, r1, #1
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a42:	2003      	movs	r0, #3
 8003a44:	f000 f810 	bl	8003a68 <HAL_InitTick>
 8003a48:	1e03      	subs	r3, r0, #0
 8003a4a:	d003      	beq.n	8003a54 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003a4c:	1dfb      	adds	r3, r7, #7
 8003a4e:	2201      	movs	r2, #1
 8003a50:	701a      	strb	r2, [r3, #0]
 8003a52:	e001      	b.n	8003a58 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003a54:	f7ff ff24 	bl	80038a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003a58:	1dfb      	adds	r3, r7, #7
 8003a5a:	781b      	ldrb	r3, [r3, #0]
}
 8003a5c:	0018      	movs	r0, r3
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	b002      	add	sp, #8
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	40022000 	.word	0x40022000

08003a68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a68:	b590      	push	{r4, r7, lr}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003a70:	230f      	movs	r3, #15
 8003a72:	18fb      	adds	r3, r7, r3
 8003a74:	2200      	movs	r2, #0
 8003a76:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003a78:	4b1d      	ldr	r3, [pc, #116]	; (8003af0 <HAL_InitTick+0x88>)
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d02b      	beq.n	8003ad8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003a80:	4b1c      	ldr	r3, [pc, #112]	; (8003af4 <HAL_InitTick+0x8c>)
 8003a82:	681c      	ldr	r4, [r3, #0]
 8003a84:	4b1a      	ldr	r3, [pc, #104]	; (8003af0 <HAL_InitTick+0x88>)
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	0019      	movs	r1, r3
 8003a8a:	23fa      	movs	r3, #250	; 0xfa
 8003a8c:	0098      	lsls	r0, r3, #2
 8003a8e:	f7fc fb37 	bl	8000100 <__udivsi3>
 8003a92:	0003      	movs	r3, r0
 8003a94:	0019      	movs	r1, r3
 8003a96:	0020      	movs	r0, r4
 8003a98:	f7fc fb32 	bl	8000100 <__udivsi3>
 8003a9c:	0003      	movs	r3, r0
 8003a9e:	0018      	movs	r0, r3
 8003aa0:	f001 f851 	bl	8004b46 <HAL_SYSTICK_Config>
 8003aa4:	1e03      	subs	r3, r0, #0
 8003aa6:	d112      	bne.n	8003ace <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2b03      	cmp	r3, #3
 8003aac:	d80a      	bhi.n	8003ac4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003aae:	6879      	ldr	r1, [r7, #4]
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	425b      	negs	r3, r3
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	0018      	movs	r0, r3
 8003ab8:	f001 f820 	bl	8004afc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003abc:	4b0e      	ldr	r3, [pc, #56]	; (8003af8 <HAL_InitTick+0x90>)
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	601a      	str	r2, [r3, #0]
 8003ac2:	e00d      	b.n	8003ae0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003ac4:	230f      	movs	r3, #15
 8003ac6:	18fb      	adds	r3, r7, r3
 8003ac8:	2201      	movs	r2, #1
 8003aca:	701a      	strb	r2, [r3, #0]
 8003acc:	e008      	b.n	8003ae0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003ace:	230f      	movs	r3, #15
 8003ad0:	18fb      	adds	r3, r7, r3
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	701a      	strb	r2, [r3, #0]
 8003ad6:	e003      	b.n	8003ae0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003ad8:	230f      	movs	r3, #15
 8003ada:	18fb      	adds	r3, r7, r3
 8003adc:	2201      	movs	r2, #1
 8003ade:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003ae0:	230f      	movs	r3, #15
 8003ae2:	18fb      	adds	r3, r7, r3
 8003ae4:	781b      	ldrb	r3, [r3, #0]
}
 8003ae6:	0018      	movs	r0, r3
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	b005      	add	sp, #20
 8003aec:	bd90      	pop	{r4, r7, pc}
 8003aee:	46c0      	nop			; (mov r8, r8)
 8003af0:	2000000c 	.word	0x2000000c
 8003af4:	20000004 	.word	0x20000004
 8003af8:	20000008 	.word	0x20000008

08003afc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003b00:	4b05      	ldr	r3, [pc, #20]	; (8003b18 <HAL_IncTick+0x1c>)
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	001a      	movs	r2, r3
 8003b06:	4b05      	ldr	r3, [pc, #20]	; (8003b1c <HAL_IncTick+0x20>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	18d2      	adds	r2, r2, r3
 8003b0c:	4b03      	ldr	r3, [pc, #12]	; (8003b1c <HAL_IncTick+0x20>)
 8003b0e:	601a      	str	r2, [r3, #0]
}
 8003b10:	46c0      	nop			; (mov r8, r8)
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	46c0      	nop			; (mov r8, r8)
 8003b18:	2000000c 	.word	0x2000000c
 8003b1c:	20000098 	.word	0x20000098

08003b20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  return uwTick;
 8003b24:	4b02      	ldr	r3, [pc, #8]	; (8003b30 <HAL_GetTick+0x10>)
 8003b26:	681b      	ldr	r3, [r3, #0]
}
 8003b28:	0018      	movs	r0, r3
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	46c0      	nop			; (mov r8, r8)
 8003b30:	20000098 	.word	0x20000098

08003b34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b3c:	f7ff fff0 	bl	8003b20 <HAL_GetTick>
 8003b40:	0003      	movs	r3, r0
 8003b42:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	d005      	beq.n	8003b5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b4e:	4b0a      	ldr	r3, [pc, #40]	; (8003b78 <HAL_Delay+0x44>)
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	001a      	movs	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	189b      	adds	r3, r3, r2
 8003b58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b5a:	46c0      	nop			; (mov r8, r8)
 8003b5c:	f7ff ffe0 	bl	8003b20 <HAL_GetTick>
 8003b60:	0002      	movs	r2, r0
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d8f7      	bhi.n	8003b5c <HAL_Delay+0x28>
  {
  }
}
 8003b6c:	46c0      	nop			; (mov r8, r8)
 8003b6e:	46c0      	nop			; (mov r8, r8)
 8003b70:	46bd      	mov	sp, r7
 8003b72:	b004      	add	sp, #16
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	46c0      	nop			; (mov r8, r8)
 8003b78:	2000000c 	.word	0x2000000c

08003b7c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a05      	ldr	r2, [pc, #20]	; (8003ba0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8003b8c:	401a      	ands	r2, r3
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	431a      	orrs	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	601a      	str	r2, [r3, #0]
}
 8003b96:	46c0      	nop			; (mov r8, r8)
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	b002      	add	sp, #8
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	46c0      	nop			; (mov r8, r8)
 8003ba0:	fe3fffff 	.word	0xfe3fffff

08003ba4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	23e0      	movs	r3, #224	; 0xe0
 8003bb2:	045b      	lsls	r3, r3, #17
 8003bb4:	4013      	ands	r3, r2
}
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	b002      	add	sp, #8
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b084      	sub	sp, #16
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	60f8      	str	r0, [r7, #12]
 8003bc6:	60b9      	str	r1, [r7, #8]
 8003bc8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	2104      	movs	r1, #4
 8003bd2:	400a      	ands	r2, r1
 8003bd4:	2107      	movs	r1, #7
 8003bd6:	4091      	lsls	r1, r2
 8003bd8:	000a      	movs	r2, r1
 8003bda:	43d2      	mvns	r2, r2
 8003bdc:	401a      	ands	r2, r3
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	2104      	movs	r1, #4
 8003be2:	400b      	ands	r3, r1
 8003be4:	6879      	ldr	r1, [r7, #4]
 8003be6:	4099      	lsls	r1, r3
 8003be8:	000b      	movs	r3, r1
 8003bea:	431a      	orrs	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003bf0:	46c0      	nop			; (mov r8, r8)
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	b004      	add	sp, #16
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	2104      	movs	r1, #4
 8003c0a:	400a      	ands	r2, r1
 8003c0c:	2107      	movs	r1, #7
 8003c0e:	4091      	lsls	r1, r2
 8003c10:	000a      	movs	r2, r1
 8003c12:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	2104      	movs	r1, #4
 8003c18:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003c1a:	40da      	lsrs	r2, r3
 8003c1c:	0013      	movs	r3, r2
}
 8003c1e:	0018      	movs	r0, r3
 8003c20:	46bd      	mov	sp, r7
 8003c22:	b002      	add	sp, #8
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b082      	sub	sp, #8
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	68da      	ldr	r2, [r3, #12]
 8003c32:	23c0      	movs	r3, #192	; 0xc0
 8003c34:	011b      	lsls	r3, r3, #4
 8003c36:	4013      	ands	r3, r2
 8003c38:	d101      	bne.n	8003c3e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e000      	b.n	8003c40 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	0018      	movs	r0, r3
 8003c42:	46bd      	mov	sp, r7
 8003c44:	b002      	add	sp, #8
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c58:	68ba      	ldr	r2, [r7, #8]
 8003c5a:	211f      	movs	r1, #31
 8003c5c:	400a      	ands	r2, r1
 8003c5e:	210f      	movs	r1, #15
 8003c60:	4091      	lsls	r1, r2
 8003c62:	000a      	movs	r2, r1
 8003c64:	43d2      	mvns	r2, r2
 8003c66:	401a      	ands	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	0e9b      	lsrs	r3, r3, #26
 8003c6c:	210f      	movs	r1, #15
 8003c6e:	4019      	ands	r1, r3
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	201f      	movs	r0, #31
 8003c74:	4003      	ands	r3, r0
 8003c76:	4099      	lsls	r1, r3
 8003c78:	000b      	movs	r3, r1
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003c80:	46c0      	nop			; (mov r8, r8)
 8003c82:	46bd      	mov	sp, r7
 8003c84:	b004      	add	sp, #16
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	035b      	lsls	r3, r3, #13
 8003c9a:	0b5b      	lsrs	r3, r3, #13
 8003c9c:	431a      	orrs	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ca2:	46c0      	nop			; (mov r8, r8)
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	b002      	add	sp, #8
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b082      	sub	sp, #8
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
 8003cb2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	0352      	lsls	r2, r2, #13
 8003cbc:	0b52      	lsrs	r2, r2, #13
 8003cbe:	43d2      	mvns	r2, r2
 8003cc0:	401a      	ands	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003cc6:	46c0      	nop			; (mov r8, r8)
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	b002      	add	sp, #8
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b082      	sub	sp, #8
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	2203      	movs	r2, #3
 8003cdc:	4013      	ands	r3, r2
}
 8003cde:	0018      	movs	r0, r3
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	b002      	add	sp, #8
 8003ce4:	bd80      	pop	{r7, pc}
	...

08003ce8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	68ba      	ldr	r2, [r7, #8]
 8003cfa:	0212      	lsls	r2, r2, #8
 8003cfc:	43d2      	mvns	r2, r2
 8003cfe:	401a      	ands	r2, r3
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	021b      	lsls	r3, r3, #8
 8003d04:	6879      	ldr	r1, [r7, #4]
 8003d06:	400b      	ands	r3, r1
 8003d08:	4904      	ldr	r1, [pc, #16]	; (8003d1c <LL_ADC_SetChannelSamplingTime+0x34>)
 8003d0a:	400b      	ands	r3, r1
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003d12:	46c0      	nop			; (mov r8, r8)
 8003d14:	46bd      	mov	sp, r7
 8003d16:	b004      	add	sp, #16
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	46c0      	nop			; (mov r8, r8)
 8003d1c:	07ffff00 	.word	0x07ffff00

08003d20 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	4a05      	ldr	r2, [pc, #20]	; (8003d44 <LL_ADC_EnableInternalRegulator+0x24>)
 8003d2e:	4013      	ands	r3, r2
 8003d30:	2280      	movs	r2, #128	; 0x80
 8003d32:	0552      	lsls	r2, r2, #21
 8003d34:	431a      	orrs	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003d3a:	46c0      	nop			; (mov r8, r8)
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	b002      	add	sp, #8
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	46c0      	nop			; (mov r8, r8)
 8003d44:	6fffffe8 	.word	0x6fffffe8

08003d48 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689a      	ldr	r2, [r3, #8]
 8003d54:	2380      	movs	r3, #128	; 0x80
 8003d56:	055b      	lsls	r3, r3, #21
 8003d58:	401a      	ands	r2, r3
 8003d5a:	2380      	movs	r3, #128	; 0x80
 8003d5c:	055b      	lsls	r3, r3, #21
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d101      	bne.n	8003d66 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8003d62:	2301      	movs	r3, #1
 8003d64:	e000      	b.n	8003d68 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	0018      	movs	r0, r3
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	b002      	add	sp, #8
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	4a04      	ldr	r2, [pc, #16]	; (8003d90 <LL_ADC_Enable+0x20>)
 8003d7e:	4013      	ands	r3, r2
 8003d80:	2201      	movs	r2, #1
 8003d82:	431a      	orrs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003d88:	46c0      	nop			; (mov r8, r8)
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	b002      	add	sp, #8
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	7fffffe8 	.word	0x7fffffe8

08003d94 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	2201      	movs	r2, #1
 8003da2:	4013      	ands	r3, r2
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d101      	bne.n	8003dac <LL_ADC_IsEnabled+0x18>
 8003da8:	2301      	movs	r3, #1
 8003daa:	e000      	b.n	8003dae <LL_ADC_IsEnabled+0x1a>
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	0018      	movs	r0, r3
 8003db0:	46bd      	mov	sp, r7
 8003db2:	b002      	add	sp, #8
 8003db4:	bd80      	pop	{r7, pc}
	...

08003db8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	4a04      	ldr	r2, [pc, #16]	; (8003dd8 <LL_ADC_REG_StartConversion+0x20>)
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	2204      	movs	r2, #4
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003dd0:	46c0      	nop			; (mov r8, r8)
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	b002      	add	sp, #8
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	7fffffe8 	.word	0x7fffffe8

08003ddc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	2204      	movs	r2, #4
 8003dea:	4013      	ands	r3, r2
 8003dec:	2b04      	cmp	r3, #4
 8003dee:	d101      	bne.n	8003df4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003df0:	2301      	movs	r3, #1
 8003df2:	e000      	b.n	8003df6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	0018      	movs	r0, r3
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	b002      	add	sp, #8
 8003dfc:	bd80      	pop	{r7, pc}
	...

08003e00 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b088      	sub	sp, #32
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e08:	231f      	movs	r3, #31
 8003e0a:	18fb      	adds	r3, r7, r3
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8003e10:	2300      	movs	r3, #0
 8003e12:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8003e14:	2300      	movs	r3, #0
 8003e16:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e17f      	b.n	8004126 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10a      	bne.n	8003e44 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	0018      	movs	r0, r3
 8003e32:	f7ff fd59 	bl	80038e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2254      	movs	r2, #84	; 0x54
 8003e40:	2100      	movs	r1, #0
 8003e42:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	0018      	movs	r0, r3
 8003e4a:	f7ff ff7d 	bl	8003d48 <LL_ADC_IsInternalRegulatorEnabled>
 8003e4e:	1e03      	subs	r3, r0, #0
 8003e50:	d115      	bne.n	8003e7e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	0018      	movs	r0, r3
 8003e58:	f7ff ff62 	bl	8003d20 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e5c:	4bb4      	ldr	r3, [pc, #720]	; (8004130 <HAL_ADC_Init+0x330>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	49b4      	ldr	r1, [pc, #720]	; (8004134 <HAL_ADC_Init+0x334>)
 8003e62:	0018      	movs	r0, r3
 8003e64:	f7fc f94c 	bl	8000100 <__udivsi3>
 8003e68:	0003      	movs	r3, r0
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003e70:	e002      	b.n	8003e78 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	3b01      	subs	r3, #1
 8003e76:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1f9      	bne.n	8003e72 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	0018      	movs	r0, r3
 8003e84:	f7ff ff60 	bl	8003d48 <LL_ADC_IsInternalRegulatorEnabled>
 8003e88:	1e03      	subs	r3, r0, #0
 8003e8a:	d10f      	bne.n	8003eac <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e90:	2210      	movs	r2, #16
 8003e92:	431a      	orrs	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003ea4:	231f      	movs	r3, #31
 8003ea6:	18fb      	adds	r3, r7, r3
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	f7ff ff93 	bl	8003ddc <LL_ADC_REG_IsConversionOngoing>
 8003eb6:	0003      	movs	r3, r0
 8003eb8:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ebe:	2210      	movs	r2, #16
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	d000      	beq.n	8003ec6 <HAL_ADC_Init+0xc6>
 8003ec4:	e122      	b.n	800410c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d000      	beq.n	8003ece <HAL_ADC_Init+0xce>
 8003ecc:	e11e      	b.n	800410c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed2:	4a99      	ldr	r2, [pc, #612]	; (8004138 <HAL_ADC_Init+0x338>)
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	0018      	movs	r0, r3
 8003ee4:	f7ff ff56 	bl	8003d94 <LL_ADC_IsEnabled>
 8003ee8:	1e03      	subs	r3, r0, #0
 8003eea:	d000      	beq.n	8003eee <HAL_ADC_Init+0xee>
 8003eec:	e0ad      	b.n	800404a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	7e1b      	ldrb	r3, [r3, #24]
 8003ef6:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8003ef8:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	7e5b      	ldrb	r3, [r3, #25]
 8003efe:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003f00:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	7e9b      	ldrb	r3, [r3, #26]
 8003f06:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003f08:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d002      	beq.n	8003f18 <HAL_ADC_Init+0x118>
 8003f12:	2380      	movs	r3, #128	; 0x80
 8003f14:	015b      	lsls	r3, r3, #5
 8003f16:	e000      	b.n	8003f1a <HAL_ADC_Init+0x11a>
 8003f18:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003f1a:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003f20:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	da04      	bge.n	8003f34 <HAL_ADC_Init+0x134>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	005b      	lsls	r3, r3, #1
 8003f30:	085b      	lsrs	r3, r3, #1
 8003f32:	e001      	b.n	8003f38 <HAL_ADC_Init+0x138>
 8003f34:	2380      	movs	r3, #128	; 0x80
 8003f36:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8003f38:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	212c      	movs	r1, #44	; 0x2c
 8003f3e:	5c5b      	ldrb	r3, [r3, r1]
 8003f40:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003f42:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2220      	movs	r2, #32
 8003f4e:	5c9b      	ldrb	r3, [r3, r2]
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d115      	bne.n	8003f80 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	7e9b      	ldrb	r3, [r3, #26]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d105      	bne.n	8003f68 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	2280      	movs	r2, #128	; 0x80
 8003f60:	0252      	lsls	r2, r2, #9
 8003f62:	4313      	orrs	r3, r2
 8003f64:	61bb      	str	r3, [r7, #24]
 8003f66:	e00b      	b.n	8003f80 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f6c:	2220      	movs	r2, #32
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f78:	2201      	movs	r2, #1
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00a      	beq.n	8003f9e <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f8c:	23e0      	movs	r3, #224	; 0xe0
 8003f8e:	005b      	lsls	r3, r3, #1
 8003f90:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003f96:	4313      	orrs	r3, r2
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	4a65      	ldr	r2, [pc, #404]	; (800413c <HAL_ADC_Init+0x33c>)
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	0019      	movs	r1, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	69ba      	ldr	r2, [r7, #24]
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	0f9b      	lsrs	r3, r3, #30
 8003fba:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	223c      	movs	r2, #60	; 0x3c
 8003fcc:	5c9b      	ldrb	r3, [r3, r2]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d111      	bne.n	8003ff6 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	0f9b      	lsrs	r3, r3, #30
 8003fd8:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003fde:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                      hadc->Init.Oversampling.Ratio         |
 8003fe4:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8003fea:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	4a50      	ldr	r2, [pc, #320]	; (8004140 <HAL_ADC_Init+0x340>)
 8003ffe:	4013      	ands	r3, r2
 8004000:	0019      	movs	r1, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	430a      	orrs	r2, r1
 800400a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	23c0      	movs	r3, #192	; 0xc0
 8004012:	061b      	lsls	r3, r3, #24
 8004014:	429a      	cmp	r2, r3
 8004016:	d018      	beq.n	800404a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800401c:	2380      	movs	r3, #128	; 0x80
 800401e:	05db      	lsls	r3, r3, #23
 8004020:	429a      	cmp	r2, r3
 8004022:	d012      	beq.n	800404a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004028:	2380      	movs	r3, #128	; 0x80
 800402a:	061b      	lsls	r3, r3, #24
 800402c:	429a      	cmp	r2, r3
 800402e:	d00c      	beq.n	800404a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8004030:	4b44      	ldr	r3, [pc, #272]	; (8004144 <HAL_ADC_Init+0x344>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a44      	ldr	r2, [pc, #272]	; (8004148 <HAL_ADC_Init+0x348>)
 8004036:	4013      	ands	r3, r2
 8004038:	0019      	movs	r1, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	23f0      	movs	r3, #240	; 0xf0
 8004040:	039b      	lsls	r3, r3, #14
 8004042:	401a      	ands	r2, r3
 8004044:	4b3f      	ldr	r3, [pc, #252]	; (8004144 <HAL_ADC_Init+0x344>)
 8004046:	430a      	orrs	r2, r1
 8004048:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6818      	ldr	r0, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004052:	001a      	movs	r2, r3
 8004054:	2100      	movs	r1, #0
 8004056:	f7ff fdb2 	bl	8003bbe <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6818      	ldr	r0, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004062:	493a      	ldr	r1, [pc, #232]	; (800414c <HAL_ADC_Init+0x34c>)
 8004064:	001a      	movs	r2, r3
 8004066:	f7ff fdaa 	bl	8003bbe <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d109      	bne.n	8004086 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2110      	movs	r1, #16
 800407e:	4249      	negs	r1, r1
 8004080:	430a      	orrs	r2, r1
 8004082:	629a      	str	r2, [r3, #40]	; 0x28
 8004084:	e018      	b.n	80040b8 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	691a      	ldr	r2, [r3, #16]
 800408a:	2380      	movs	r3, #128	; 0x80
 800408c:	039b      	lsls	r3, r3, #14
 800408e:	429a      	cmp	r2, r3
 8004090:	d112      	bne.n	80040b8 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	69db      	ldr	r3, [r3, #28]
 800409c:	3b01      	subs	r3, #1
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	221c      	movs	r2, #28
 80040a2:	4013      	ands	r3, r2
 80040a4:	2210      	movs	r2, #16
 80040a6:	4252      	negs	r2, r2
 80040a8:	409a      	lsls	r2, r3
 80040aa:	0011      	movs	r1, r2
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	430a      	orrs	r2, r1
 80040b6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2100      	movs	r1, #0
 80040be:	0018      	movs	r0, r3
 80040c0:	f7ff fd9a 	bl	8003bf8 <LL_ADC_GetSamplingTimeCommonChannels>
 80040c4:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d10b      	bne.n	80040e6 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d8:	2203      	movs	r2, #3
 80040da:	4393      	bics	r3, r2
 80040dc:	2201      	movs	r2, #1
 80040de:	431a      	orrs	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80040e4:	e01c      	b.n	8004120 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ea:	2212      	movs	r2, #18
 80040ec:	4393      	bics	r3, r2
 80040ee:	2210      	movs	r2, #16
 80040f0:	431a      	orrs	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040fa:	2201      	movs	r2, #1
 80040fc:	431a      	orrs	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8004102:	231f      	movs	r3, #31
 8004104:	18fb      	adds	r3, r7, r3
 8004106:	2201      	movs	r2, #1
 8004108:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800410a:	e009      	b.n	8004120 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004110:	2210      	movs	r2, #16
 8004112:	431a      	orrs	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004118:	231f      	movs	r3, #31
 800411a:	18fb      	adds	r3, r7, r3
 800411c:	2201      	movs	r2, #1
 800411e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8004120:	231f      	movs	r3, #31
 8004122:	18fb      	adds	r3, r7, r3
 8004124:	781b      	ldrb	r3, [r3, #0]
}
 8004126:	0018      	movs	r0, r3
 8004128:	46bd      	mov	sp, r7
 800412a:	b008      	add	sp, #32
 800412c:	bd80      	pop	{r7, pc}
 800412e:	46c0      	nop			; (mov r8, r8)
 8004130:	20000004 	.word	0x20000004
 8004134:	00030d40 	.word	0x00030d40
 8004138:	fffffefd 	.word	0xfffffefd
 800413c:	ffde0201 	.word	0xffde0201
 8004140:	1ffffc02 	.word	0x1ffffc02
 8004144:	40012708 	.word	0x40012708
 8004148:	ffc3ffff 	.word	0xffc3ffff
 800414c:	07ffff04 	.word	0x07ffff04

08004150 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8004150:	b5b0      	push	{r4, r5, r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	0018      	movs	r0, r3
 800415e:	f7ff fe3d 	bl	8003ddc <LL_ADC_REG_IsConversionOngoing>
 8004162:	1e03      	subs	r3, r0, #0
 8004164:	d15f      	bne.n	8004226 <HAL_ADC_Start_IT+0xd6>
  {
    __HAL_LOCK(hadc);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2254      	movs	r2, #84	; 0x54
 800416a:	5c9b      	ldrb	r3, [r3, r2]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d101      	bne.n	8004174 <HAL_ADC_Start_IT+0x24>
 8004170:	2302      	movs	r3, #2
 8004172:	e05f      	b.n	8004234 <HAL_ADC_Start_IT+0xe4>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2254      	movs	r2, #84	; 0x54
 8004178:	2101      	movs	r1, #1
 800417a:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800417c:	250f      	movs	r5, #15
 800417e:	197c      	adds	r4, r7, r5
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	0018      	movs	r0, r3
 8004184:	f000 fb68 	bl	8004858 <ADC_Enable>
 8004188:	0003      	movs	r3, r0
 800418a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800418c:	197b      	adds	r3, r7, r5
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d143      	bne.n	800421c <HAL_ADC_Start_IT+0xcc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004198:	4a28      	ldr	r2, [pc, #160]	; (800423c <HAL_ADC_Start_IT+0xec>)
 800419a:	4013      	ands	r3, r2
 800419c:	2280      	movs	r2, #128	; 0x80
 800419e:	0052      	lsls	r2, r2, #1
 80041a0:	431a      	orrs	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY);


      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	221c      	movs	r2, #28
 80041b2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2254      	movs	r2, #84	; 0x54
 80041b8:	2100      	movs	r1, #0
 80041ba:	5499      	strb	r1, [r3, r2]

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	685a      	ldr	r2, [r3, #4]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	211c      	movs	r1, #28
 80041c8:	438a      	bics	r2, r1
 80041ca:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	d108      	bne.n	80041e6 <HAL_ADC_Start_IT+0x96>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2108      	movs	r1, #8
 80041e0:	430a      	orrs	r2, r1
 80041e2:	605a      	str	r2, [r3, #4]
          break;
 80041e4:	e008      	b.n	80041f8 <HAL_ADC_Start_IT+0xa8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	685a      	ldr	r2, [r3, #4]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2104      	movs	r1, #4
 80041f2:	430a      	orrs	r2, r1
 80041f4:	605a      	str	r2, [r3, #4]
          break;
 80041f6:	46c0      	nop			; (mov r8, r8)

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d107      	bne.n	8004210 <HAL_ADC_Start_IT+0xc0>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2110      	movs	r1, #16
 800420c:	430a      	orrs	r2, r1
 800420e:	605a      	str	r2, [r3, #4]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	0018      	movs	r0, r3
 8004216:	f7ff fdcf 	bl	8003db8 <LL_ADC_REG_StartConversion>
 800421a:	e008      	b.n	800422e <HAL_ADC_Start_IT+0xde>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2254      	movs	r2, #84	; 0x54
 8004220:	2100      	movs	r1, #0
 8004222:	5499      	strb	r1, [r3, r2]
 8004224:	e003      	b.n	800422e <HAL_ADC_Start_IT+0xde>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004226:	230f      	movs	r3, #15
 8004228:	18fb      	adds	r3, r7, r3
 800422a:	2202      	movs	r2, #2
 800422c:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800422e:	230f      	movs	r3, #15
 8004230:	18fb      	adds	r3, r7, r3
 8004232:	781b      	ldrb	r3, [r3, #0]
}
 8004234:	0018      	movs	r0, r3
 8004236:	46bd      	mov	sp, r7
 8004238:	b004      	add	sp, #16
 800423a:	bdb0      	pop	{r4, r5, r7, pc}
 800423c:	fffff0fe 	.word	0xfffff0fe

08004240 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800424e:	0018      	movs	r0, r3
 8004250:	46bd      	mov	sp, r7
 8004252:	b002      	add	sp, #8
 8004254:	bd80      	pop	{r7, pc}
	...

08004258 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004260:	2300      	movs	r3, #0
 8004262:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	2202      	movs	r2, #2
 8004278:	4013      	ands	r3, r2
 800427a:	d017      	beq.n	80042ac <HAL_ADC_IRQHandler+0x54>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2202      	movs	r2, #2
 8004280:	4013      	ands	r3, r2
 8004282:	d013      	beq.n	80042ac <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004288:	2210      	movs	r2, #16
 800428a:	4013      	ands	r3, r2
 800428c:	d106      	bne.n	800429c <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004292:	2280      	movs	r2, #128	; 0x80
 8004294:	0112      	lsls	r2, r2, #4
 8004296:	431a      	orrs	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	0018      	movs	r0, r3
 80042a0:	f000 fb70 	bl	8004984 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2202      	movs	r2, #2
 80042aa:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	2204      	movs	r2, #4
 80042b0:	4013      	ands	r3, r2
 80042b2:	d003      	beq.n	80042bc <HAL_ADC_IRQHandler+0x64>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2204      	movs	r2, #4
 80042b8:	4013      	ands	r3, r2
 80042ba:	d107      	bne.n	80042cc <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	2208      	movs	r2, #8
 80042c0:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80042c2:	d04d      	beq.n	8004360 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2208      	movs	r2, #8
 80042c8:	4013      	ands	r3, r2
 80042ca:	d049      	beq.n	8004360 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d0:	2210      	movs	r2, #16
 80042d2:	4013      	ands	r3, r2
 80042d4:	d106      	bne.n	80042e4 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042da:	2280      	movs	r2, #128	; 0x80
 80042dc:	0092      	lsls	r2, r2, #2
 80042de:	431a      	orrs	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	0018      	movs	r0, r3
 80042ea:	f7ff fc9c 	bl	8003c26 <LL_ADC_REG_IsTriggerSourceSWStart>
 80042ee:	1e03      	subs	r3, r0, #0
 80042f0:	d02e      	beq.n	8004350 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	7e9b      	ldrb	r3, [r3, #26]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d12a      	bne.n	8004350 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2208      	movs	r2, #8
 8004302:	4013      	ands	r3, r2
 8004304:	2b08      	cmp	r3, #8
 8004306:	d123      	bne.n	8004350 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	0018      	movs	r0, r3
 800430e:	f7ff fd65 	bl	8003ddc <LL_ADC_REG_IsConversionOngoing>
 8004312:	1e03      	subs	r3, r0, #0
 8004314:	d110      	bne.n	8004338 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	685a      	ldr	r2, [r3, #4]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	210c      	movs	r1, #12
 8004322:	438a      	bics	r2, r1
 8004324:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800432a:	4a56      	ldr	r2, [pc, #344]	; (8004484 <HAL_ADC_IRQHandler+0x22c>)
 800432c:	4013      	ands	r3, r2
 800432e:	2201      	movs	r2, #1
 8004330:	431a      	orrs	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	659a      	str	r2, [r3, #88]	; 0x58
 8004336:	e00b      	b.n	8004350 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800433c:	2220      	movs	r2, #32
 800433e:	431a      	orrs	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004348:	2201      	movs	r2, #1
 800434a:	431a      	orrs	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	0018      	movs	r0, r3
 8004354:	f7fe f8ce 	bl	80024f4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	220c      	movs	r2, #12
 800435e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	2280      	movs	r2, #128	; 0x80
 8004364:	4013      	ands	r3, r2
 8004366:	d012      	beq.n	800438e <HAL_ADC_IRQHandler+0x136>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2280      	movs	r2, #128	; 0x80
 800436c:	4013      	ands	r3, r2
 800436e:	d00e      	beq.n	800438e <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004374:	2280      	movs	r2, #128	; 0x80
 8004376:	0252      	lsls	r2, r2, #9
 8004378:	431a      	orrs	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	0018      	movs	r0, r3
 8004382:	f000 f881 	bl	8004488 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2280      	movs	r2, #128	; 0x80
 800438c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	2380      	movs	r3, #128	; 0x80
 8004392:	005b      	lsls	r3, r3, #1
 8004394:	4013      	ands	r3, r2
 8004396:	d014      	beq.n	80043c2 <HAL_ADC_IRQHandler+0x16a>
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	2380      	movs	r3, #128	; 0x80
 800439c:	005b      	lsls	r3, r3, #1
 800439e:	4013      	ands	r3, r2
 80043a0:	d00f      	beq.n	80043c2 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a6:	2280      	movs	r2, #128	; 0x80
 80043a8:	0292      	lsls	r2, r2, #10
 80043aa:	431a      	orrs	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	0018      	movs	r0, r3
 80043b4:	f000 fad6 	bl	8004964 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2280      	movs	r2, #128	; 0x80
 80043be:	0052      	lsls	r2, r2, #1
 80043c0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	2380      	movs	r3, #128	; 0x80
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	4013      	ands	r3, r2
 80043ca:	d014      	beq.n	80043f6 <HAL_ADC_IRQHandler+0x19e>
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	2380      	movs	r3, #128	; 0x80
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4013      	ands	r3, r2
 80043d4:	d00f      	beq.n	80043f6 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043da:	2280      	movs	r2, #128	; 0x80
 80043dc:	02d2      	lsls	r2, r2, #11
 80043de:	431a      	orrs	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	0018      	movs	r0, r3
 80043e8:	f000 fac4 	bl	8004974 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2280      	movs	r2, #128	; 0x80
 80043f2:	0092      	lsls	r2, r2, #2
 80043f4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	2210      	movs	r2, #16
 80043fa:	4013      	ands	r3, r2
 80043fc:	d02b      	beq.n	8004456 <HAL_ADC_IRQHandler+0x1fe>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2210      	movs	r2, #16
 8004402:	4013      	ands	r3, r2
 8004404:	d027      	beq.n	8004456 <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440a:	2b00      	cmp	r3, #0
 800440c:	d102      	bne.n	8004414 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 800440e:	2301      	movs	r3, #1
 8004410:	617b      	str	r3, [r7, #20]
 8004412:	e008      	b.n	8004426 <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	0018      	movs	r0, r3
 800441a:	f7ff fc58 	bl	8003cce <LL_ADC_REG_GetDMATransfer>
 800441e:	1e03      	subs	r3, r0, #0
 8004420:	d001      	beq.n	8004426 <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8004422:	2301      	movs	r3, #1
 8004424:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d110      	bne.n	800444e <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004430:	2280      	movs	r2, #128	; 0x80
 8004432:	00d2      	lsls	r2, r2, #3
 8004434:	431a      	orrs	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800443e:	2202      	movs	r2, #2
 8004440:	431a      	orrs	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	0018      	movs	r0, r3
 800444a:	f000 f825 	bl	8004498 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2210      	movs	r2, #16
 8004454:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	2380      	movs	r3, #128	; 0x80
 800445a:	019b      	lsls	r3, r3, #6
 800445c:	4013      	ands	r3, r2
 800445e:	d00d      	beq.n	800447c <HAL_ADC_IRQHandler+0x224>
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	2380      	movs	r3, #128	; 0x80
 8004464:	019b      	lsls	r3, r3, #6
 8004466:	4013      	ands	r3, r2
 8004468:	d008      	beq.n	800447c <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	0018      	movs	r0, r3
 800446e:	f000 fa91 	bl	8004994 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2280      	movs	r2, #128	; 0x80
 8004478:	0192      	lsls	r2, r2, #6
 800447a:	601a      	str	r2, [r3, #0]
  }
}
 800447c:	46c0      	nop			; (mov r8, r8)
 800447e:	46bd      	mov	sp, r7
 8004480:	b006      	add	sp, #24
 8004482:	bd80      	pop	{r7, pc}
 8004484:	fffffefe 	.word	0xfffffefe

08004488 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004490:	46c0      	nop			; (mov r8, r8)
 8004492:	46bd      	mov	sp, r7
 8004494:	b002      	add	sp, #8
 8004496:	bd80      	pop	{r7, pc}

08004498 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80044a0:	46c0      	nop			; (mov r8, r8)
 80044a2:	46bd      	mov	sp, r7
 80044a4:	b002      	add	sp, #8
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044b2:	2317      	movs	r3, #23
 80044b4:	18fb      	adds	r3, r7, r3
 80044b6:	2200      	movs	r2, #0
 80044b8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80044ba:	2300      	movs	r3, #0
 80044bc:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2254      	movs	r2, #84	; 0x54
 80044c2:	5c9b      	ldrb	r3, [r3, r2]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d101      	bne.n	80044cc <HAL_ADC_ConfigChannel+0x24>
 80044c8:	2302      	movs	r3, #2
 80044ca:	e1c0      	b.n	800484e <HAL_ADC_ConfigChannel+0x3a6>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2254      	movs	r2, #84	; 0x54
 80044d0:	2101      	movs	r1, #1
 80044d2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	0018      	movs	r0, r3
 80044da:	f7ff fc7f 	bl	8003ddc <LL_ADC_REG_IsConversionOngoing>
 80044de:	1e03      	subs	r3, r0, #0
 80044e0:	d000      	beq.n	80044e4 <HAL_ADC_ConfigChannel+0x3c>
 80044e2:	e1a3      	b.n	800482c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d100      	bne.n	80044ee <HAL_ADC_ConfigChannel+0x46>
 80044ec:	e143      	b.n	8004776 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	691a      	ldr	r2, [r3, #16]
 80044f2:	2380      	movs	r3, #128	; 0x80
 80044f4:	061b      	lsls	r3, r3, #24
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d004      	beq.n	8004504 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80044fe:	4ac1      	ldr	r2, [pc, #772]	; (8004804 <HAL_ADC_ConfigChannel+0x35c>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d108      	bne.n	8004516 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	0019      	movs	r1, r3
 800450e:	0010      	movs	r0, r2
 8004510:	f7ff fbba 	bl	8003c88 <LL_ADC_REG_SetSequencerChAdd>
 8004514:	e0c9      	b.n	80046aa <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	211f      	movs	r1, #31
 8004520:	400b      	ands	r3, r1
 8004522:	210f      	movs	r1, #15
 8004524:	4099      	lsls	r1, r3
 8004526:	000b      	movs	r3, r1
 8004528:	43db      	mvns	r3, r3
 800452a:	4013      	ands	r3, r2
 800452c:	0019      	movs	r1, r3
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	035b      	lsls	r3, r3, #13
 8004534:	0b5b      	lsrs	r3, r3, #13
 8004536:	d105      	bne.n	8004544 <HAL_ADC_ConfigChannel+0x9c>
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	0e9b      	lsrs	r3, r3, #26
 800453e:	221f      	movs	r2, #31
 8004540:	4013      	ands	r3, r2
 8004542:	e098      	b.n	8004676 <HAL_ADC_ConfigChannel+0x1ce>
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2201      	movs	r2, #1
 800454a:	4013      	ands	r3, r2
 800454c:	d000      	beq.n	8004550 <HAL_ADC_ConfigChannel+0xa8>
 800454e:	e091      	b.n	8004674 <HAL_ADC_ConfigChannel+0x1cc>
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2202      	movs	r2, #2
 8004556:	4013      	ands	r3, r2
 8004558:	d000      	beq.n	800455c <HAL_ADC_ConfigChannel+0xb4>
 800455a:	e089      	b.n	8004670 <HAL_ADC_ConfigChannel+0x1c8>
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2204      	movs	r2, #4
 8004562:	4013      	ands	r3, r2
 8004564:	d000      	beq.n	8004568 <HAL_ADC_ConfigChannel+0xc0>
 8004566:	e081      	b.n	800466c <HAL_ADC_ConfigChannel+0x1c4>
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2208      	movs	r2, #8
 800456e:	4013      	ands	r3, r2
 8004570:	d000      	beq.n	8004574 <HAL_ADC_ConfigChannel+0xcc>
 8004572:	e079      	b.n	8004668 <HAL_ADC_ConfigChannel+0x1c0>
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2210      	movs	r2, #16
 800457a:	4013      	ands	r3, r2
 800457c:	d000      	beq.n	8004580 <HAL_ADC_ConfigChannel+0xd8>
 800457e:	e071      	b.n	8004664 <HAL_ADC_ConfigChannel+0x1bc>
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2220      	movs	r2, #32
 8004586:	4013      	ands	r3, r2
 8004588:	d000      	beq.n	800458c <HAL_ADC_ConfigChannel+0xe4>
 800458a:	e069      	b.n	8004660 <HAL_ADC_ConfigChannel+0x1b8>
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2240      	movs	r2, #64	; 0x40
 8004592:	4013      	ands	r3, r2
 8004594:	d000      	beq.n	8004598 <HAL_ADC_ConfigChannel+0xf0>
 8004596:	e061      	b.n	800465c <HAL_ADC_ConfigChannel+0x1b4>
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2280      	movs	r2, #128	; 0x80
 800459e:	4013      	ands	r3, r2
 80045a0:	d000      	beq.n	80045a4 <HAL_ADC_ConfigChannel+0xfc>
 80045a2:	e059      	b.n	8004658 <HAL_ADC_ConfigChannel+0x1b0>
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	2380      	movs	r3, #128	; 0x80
 80045aa:	005b      	lsls	r3, r3, #1
 80045ac:	4013      	ands	r3, r2
 80045ae:	d151      	bne.n	8004654 <HAL_ADC_ConfigChannel+0x1ac>
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	2380      	movs	r3, #128	; 0x80
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	4013      	ands	r3, r2
 80045ba:	d149      	bne.n	8004650 <HAL_ADC_ConfigChannel+0x1a8>
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	2380      	movs	r3, #128	; 0x80
 80045c2:	00db      	lsls	r3, r3, #3
 80045c4:	4013      	ands	r3, r2
 80045c6:	d141      	bne.n	800464c <HAL_ADC_ConfigChannel+0x1a4>
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	2380      	movs	r3, #128	; 0x80
 80045ce:	011b      	lsls	r3, r3, #4
 80045d0:	4013      	ands	r3, r2
 80045d2:	d139      	bne.n	8004648 <HAL_ADC_ConfigChannel+0x1a0>
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	2380      	movs	r3, #128	; 0x80
 80045da:	015b      	lsls	r3, r3, #5
 80045dc:	4013      	ands	r3, r2
 80045de:	d131      	bne.n	8004644 <HAL_ADC_ConfigChannel+0x19c>
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	2380      	movs	r3, #128	; 0x80
 80045e6:	019b      	lsls	r3, r3, #6
 80045e8:	4013      	ands	r3, r2
 80045ea:	d129      	bne.n	8004640 <HAL_ADC_ConfigChannel+0x198>
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	2380      	movs	r3, #128	; 0x80
 80045f2:	01db      	lsls	r3, r3, #7
 80045f4:	4013      	ands	r3, r2
 80045f6:	d121      	bne.n	800463c <HAL_ADC_ConfigChannel+0x194>
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	2380      	movs	r3, #128	; 0x80
 80045fe:	021b      	lsls	r3, r3, #8
 8004600:	4013      	ands	r3, r2
 8004602:	d119      	bne.n	8004638 <HAL_ADC_ConfigChannel+0x190>
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	2380      	movs	r3, #128	; 0x80
 800460a:	025b      	lsls	r3, r3, #9
 800460c:	4013      	ands	r3, r2
 800460e:	d111      	bne.n	8004634 <HAL_ADC_ConfigChannel+0x18c>
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	2380      	movs	r3, #128	; 0x80
 8004616:	029b      	lsls	r3, r3, #10
 8004618:	4013      	ands	r3, r2
 800461a:	d109      	bne.n	8004630 <HAL_ADC_ConfigChannel+0x188>
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	2380      	movs	r3, #128	; 0x80
 8004622:	02db      	lsls	r3, r3, #11
 8004624:	4013      	ands	r3, r2
 8004626:	d001      	beq.n	800462c <HAL_ADC_ConfigChannel+0x184>
 8004628:	2312      	movs	r3, #18
 800462a:	e024      	b.n	8004676 <HAL_ADC_ConfigChannel+0x1ce>
 800462c:	2300      	movs	r3, #0
 800462e:	e022      	b.n	8004676 <HAL_ADC_ConfigChannel+0x1ce>
 8004630:	2311      	movs	r3, #17
 8004632:	e020      	b.n	8004676 <HAL_ADC_ConfigChannel+0x1ce>
 8004634:	2310      	movs	r3, #16
 8004636:	e01e      	b.n	8004676 <HAL_ADC_ConfigChannel+0x1ce>
 8004638:	230f      	movs	r3, #15
 800463a:	e01c      	b.n	8004676 <HAL_ADC_ConfigChannel+0x1ce>
 800463c:	230e      	movs	r3, #14
 800463e:	e01a      	b.n	8004676 <HAL_ADC_ConfigChannel+0x1ce>
 8004640:	230d      	movs	r3, #13
 8004642:	e018      	b.n	8004676 <HAL_ADC_ConfigChannel+0x1ce>
 8004644:	230c      	movs	r3, #12
 8004646:	e016      	b.n	8004676 <HAL_ADC_ConfigChannel+0x1ce>
 8004648:	230b      	movs	r3, #11
 800464a:	e014      	b.n	8004676 <HAL_ADC_ConfigChannel+0x1ce>
 800464c:	230a      	movs	r3, #10
 800464e:	e012      	b.n	8004676 <HAL_ADC_ConfigChannel+0x1ce>
 8004650:	2309      	movs	r3, #9
 8004652:	e010      	b.n	8004676 <HAL_ADC_ConfigChannel+0x1ce>
 8004654:	2308      	movs	r3, #8
 8004656:	e00e      	b.n	8004676 <HAL_ADC_ConfigChannel+0x1ce>
 8004658:	2307      	movs	r3, #7
 800465a:	e00c      	b.n	8004676 <HAL_ADC_ConfigChannel+0x1ce>
 800465c:	2306      	movs	r3, #6
 800465e:	e00a      	b.n	8004676 <HAL_ADC_ConfigChannel+0x1ce>
 8004660:	2305      	movs	r3, #5
 8004662:	e008      	b.n	8004676 <HAL_ADC_ConfigChannel+0x1ce>
 8004664:	2304      	movs	r3, #4
 8004666:	e006      	b.n	8004676 <HAL_ADC_ConfigChannel+0x1ce>
 8004668:	2303      	movs	r3, #3
 800466a:	e004      	b.n	8004676 <HAL_ADC_ConfigChannel+0x1ce>
 800466c:	2302      	movs	r3, #2
 800466e:	e002      	b.n	8004676 <HAL_ADC_ConfigChannel+0x1ce>
 8004670:	2301      	movs	r3, #1
 8004672:	e000      	b.n	8004676 <HAL_ADC_ConfigChannel+0x1ce>
 8004674:	2300      	movs	r3, #0
 8004676:	683a      	ldr	r2, [r7, #0]
 8004678:	6852      	ldr	r2, [r2, #4]
 800467a:	201f      	movs	r0, #31
 800467c:	4002      	ands	r2, r0
 800467e:	4093      	lsls	r3, r2
 8004680:	000a      	movs	r2, r1
 8004682:	431a      	orrs	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	089b      	lsrs	r3, r3, #2
 800468e:	1c5a      	adds	r2, r3, #1
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	69db      	ldr	r3, [r3, #28]
 8004694:	429a      	cmp	r2, r3
 8004696:	d808      	bhi.n	80046aa <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6818      	ldr	r0, [r3, #0]
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	6859      	ldr	r1, [r3, #4]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	001a      	movs	r2, r3
 80046a6:	f7ff facf 	bl	8003c48 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6818      	ldr	r0, [r3, #0]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	6819      	ldr	r1, [r3, #0]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	001a      	movs	r2, r3
 80046b8:	f7ff fb16 	bl	8003ce8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	db00      	blt.n	80046c6 <HAL_ADC_ConfigChannel+0x21e>
 80046c4:	e0bc      	b.n	8004840 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80046c6:	4b50      	ldr	r3, [pc, #320]	; (8004808 <HAL_ADC_ConfigChannel+0x360>)
 80046c8:	0018      	movs	r0, r3
 80046ca:	f7ff fa6b 	bl	8003ba4 <LL_ADC_GetCommonPathInternalCh>
 80046ce:	0003      	movs	r3, r0
 80046d0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a4d      	ldr	r2, [pc, #308]	; (800480c <HAL_ADC_ConfigChannel+0x364>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d122      	bne.n	8004722 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	2380      	movs	r3, #128	; 0x80
 80046e0:	041b      	lsls	r3, r3, #16
 80046e2:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80046e4:	d11d      	bne.n	8004722 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	2280      	movs	r2, #128	; 0x80
 80046ea:	0412      	lsls	r2, r2, #16
 80046ec:	4313      	orrs	r3, r2
 80046ee:	4a46      	ldr	r2, [pc, #280]	; (8004808 <HAL_ADC_ConfigChannel+0x360>)
 80046f0:	0019      	movs	r1, r3
 80046f2:	0010      	movs	r0, r2
 80046f4:	f7ff fa42 	bl	8003b7c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80046f8:	4b45      	ldr	r3, [pc, #276]	; (8004810 <HAL_ADC_ConfigChannel+0x368>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4945      	ldr	r1, [pc, #276]	; (8004814 <HAL_ADC_ConfigChannel+0x36c>)
 80046fe:	0018      	movs	r0, r3
 8004700:	f7fb fcfe 	bl	8000100 <__udivsi3>
 8004704:	0003      	movs	r3, r0
 8004706:	1c5a      	adds	r2, r3, #1
 8004708:	0013      	movs	r3, r2
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	189b      	adds	r3, r3, r2
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004712:	e002      	b.n	800471a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	3b01      	subs	r3, #1
 8004718:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1f9      	bne.n	8004714 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004720:	e08e      	b.n	8004840 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a3c      	ldr	r2, [pc, #240]	; (8004818 <HAL_ADC_ConfigChannel+0x370>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d10e      	bne.n	800474a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	2380      	movs	r3, #128	; 0x80
 8004730:	045b      	lsls	r3, r3, #17
 8004732:	4013      	ands	r3, r2
 8004734:	d109      	bne.n	800474a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	2280      	movs	r2, #128	; 0x80
 800473a:	0452      	lsls	r2, r2, #17
 800473c:	4313      	orrs	r3, r2
 800473e:	4a32      	ldr	r2, [pc, #200]	; (8004808 <HAL_ADC_ConfigChannel+0x360>)
 8004740:	0019      	movs	r1, r3
 8004742:	0010      	movs	r0, r2
 8004744:	f7ff fa1a 	bl	8003b7c <LL_ADC_SetCommonPathInternalCh>
 8004748:	e07a      	b.n	8004840 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a33      	ldr	r2, [pc, #204]	; (800481c <HAL_ADC_ConfigChannel+0x374>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d000      	beq.n	8004756 <HAL_ADC_ConfigChannel+0x2ae>
 8004754:	e074      	b.n	8004840 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	2380      	movs	r3, #128	; 0x80
 800475a:	03db      	lsls	r3, r3, #15
 800475c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800475e:	d000      	beq.n	8004762 <HAL_ADC_ConfigChannel+0x2ba>
 8004760:	e06e      	b.n	8004840 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	2280      	movs	r2, #128	; 0x80
 8004766:	03d2      	lsls	r2, r2, #15
 8004768:	4313      	orrs	r3, r2
 800476a:	4a27      	ldr	r2, [pc, #156]	; (8004808 <HAL_ADC_ConfigChannel+0x360>)
 800476c:	0019      	movs	r1, r3
 800476e:	0010      	movs	r0, r2
 8004770:	f7ff fa04 	bl	8003b7c <LL_ADC_SetCommonPathInternalCh>
 8004774:	e064      	b.n	8004840 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	691a      	ldr	r2, [r3, #16]
 800477a:	2380      	movs	r3, #128	; 0x80
 800477c:	061b      	lsls	r3, r3, #24
 800477e:	429a      	cmp	r2, r3
 8004780:	d004      	beq.n	800478c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004786:	4a1f      	ldr	r2, [pc, #124]	; (8004804 <HAL_ADC_ConfigChannel+0x35c>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d107      	bne.n	800479c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	0019      	movs	r1, r3
 8004796:	0010      	movs	r0, r2
 8004798:	f7ff fa87 	bl	8003caa <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	da4d      	bge.n	8004840 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80047a4:	4b18      	ldr	r3, [pc, #96]	; (8004808 <HAL_ADC_ConfigChannel+0x360>)
 80047a6:	0018      	movs	r0, r3
 80047a8:	f7ff f9fc 	bl	8003ba4 <LL_ADC_GetCommonPathInternalCh>
 80047ac:	0003      	movs	r3, r0
 80047ae:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a15      	ldr	r2, [pc, #84]	; (800480c <HAL_ADC_ConfigChannel+0x364>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d108      	bne.n	80047cc <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	4a18      	ldr	r2, [pc, #96]	; (8004820 <HAL_ADC_ConfigChannel+0x378>)
 80047be:	4013      	ands	r3, r2
 80047c0:	4a11      	ldr	r2, [pc, #68]	; (8004808 <HAL_ADC_ConfigChannel+0x360>)
 80047c2:	0019      	movs	r1, r3
 80047c4:	0010      	movs	r0, r2
 80047c6:	f7ff f9d9 	bl	8003b7c <LL_ADC_SetCommonPathInternalCh>
 80047ca:	e039      	b.n	8004840 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a11      	ldr	r2, [pc, #68]	; (8004818 <HAL_ADC_ConfigChannel+0x370>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d108      	bne.n	80047e8 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	4a12      	ldr	r2, [pc, #72]	; (8004824 <HAL_ADC_ConfigChannel+0x37c>)
 80047da:	4013      	ands	r3, r2
 80047dc:	4a0a      	ldr	r2, [pc, #40]	; (8004808 <HAL_ADC_ConfigChannel+0x360>)
 80047de:	0019      	movs	r1, r3
 80047e0:	0010      	movs	r0, r2
 80047e2:	f7ff f9cb 	bl	8003b7c <LL_ADC_SetCommonPathInternalCh>
 80047e6:	e02b      	b.n	8004840 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a0b      	ldr	r2, [pc, #44]	; (800481c <HAL_ADC_ConfigChannel+0x374>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d126      	bne.n	8004840 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	4a0c      	ldr	r2, [pc, #48]	; (8004828 <HAL_ADC_ConfigChannel+0x380>)
 80047f6:	4013      	ands	r3, r2
 80047f8:	4a03      	ldr	r2, [pc, #12]	; (8004808 <HAL_ADC_ConfigChannel+0x360>)
 80047fa:	0019      	movs	r1, r3
 80047fc:	0010      	movs	r0, r2
 80047fe:	f7ff f9bd 	bl	8003b7c <LL_ADC_SetCommonPathInternalCh>
 8004802:	e01d      	b.n	8004840 <HAL_ADC_ConfigChannel+0x398>
 8004804:	80000004 	.word	0x80000004
 8004808:	40012708 	.word	0x40012708
 800480c:	b0001000 	.word	0xb0001000
 8004810:	20000004 	.word	0x20000004
 8004814:	00030d40 	.word	0x00030d40
 8004818:	b8004000 	.word	0xb8004000
 800481c:	b4002000 	.word	0xb4002000
 8004820:	ff7fffff 	.word	0xff7fffff
 8004824:	feffffff 	.word	0xfeffffff
 8004828:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004830:	2220      	movs	r2, #32
 8004832:	431a      	orrs	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004838:	2317      	movs	r3, #23
 800483a:	18fb      	adds	r3, r7, r3
 800483c:	2201      	movs	r2, #1
 800483e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2254      	movs	r2, #84	; 0x54
 8004844:	2100      	movs	r1, #0
 8004846:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004848:	2317      	movs	r3, #23
 800484a:	18fb      	adds	r3, r7, r3
 800484c:	781b      	ldrb	r3, [r3, #0]
}
 800484e:	0018      	movs	r0, r3
 8004850:	46bd      	mov	sp, r7
 8004852:	b006      	add	sp, #24
 8004854:	bd80      	pop	{r7, pc}
 8004856:	46c0      	nop			; (mov r8, r8)

08004858 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004860:	2300      	movs	r3, #0
 8004862:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	0018      	movs	r0, r3
 800486a:	f7ff fa93 	bl	8003d94 <LL_ADC_IsEnabled>
 800486e:	1e03      	subs	r3, r0, #0
 8004870:	d000      	beq.n	8004874 <ADC_Enable+0x1c>
 8004872:	e069      	b.n	8004948 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	4a36      	ldr	r2, [pc, #216]	; (8004954 <ADC_Enable+0xfc>)
 800487c:	4013      	ands	r3, r2
 800487e:	d00d      	beq.n	800489c <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004884:	2210      	movs	r2, #16
 8004886:	431a      	orrs	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004890:	2201      	movs	r2, #1
 8004892:	431a      	orrs	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e056      	b.n	800494a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	0018      	movs	r0, r3
 80048a2:	f7ff fa65 	bl	8003d70 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 80048a6:	4b2c      	ldr	r3, [pc, #176]	; (8004958 <ADC_Enable+0x100>)
 80048a8:	0018      	movs	r0, r3
 80048aa:	f7ff f97b 	bl	8003ba4 <LL_ADC_GetCommonPathInternalCh>
 80048ae:	0002      	movs	r2, r0
 80048b0:	2380      	movs	r3, #128	; 0x80
 80048b2:	041b      	lsls	r3, r3, #16
 80048b4:	4013      	ands	r3, r2
 80048b6:	d00f      	beq.n	80048d8 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80048b8:	4b28      	ldr	r3, [pc, #160]	; (800495c <ADC_Enable+0x104>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4928      	ldr	r1, [pc, #160]	; (8004960 <ADC_Enable+0x108>)
 80048be:	0018      	movs	r0, r3
 80048c0:	f7fb fc1e 	bl	8000100 <__udivsi3>
 80048c4:	0003      	movs	r3, r0
 80048c6:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 80048c8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80048ca:	e002      	b.n	80048d2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	3b01      	subs	r3, #1
 80048d0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1f9      	bne.n	80048cc <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	7e5b      	ldrb	r3, [r3, #25]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d033      	beq.n	8004948 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80048e0:	f7ff f91e 	bl	8003b20 <HAL_GetTick>
 80048e4:	0003      	movs	r3, r0
 80048e6:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048e8:	e027      	b.n	800493a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	0018      	movs	r0, r3
 80048f0:	f7ff fa50 	bl	8003d94 <LL_ADC_IsEnabled>
 80048f4:	1e03      	subs	r3, r0, #0
 80048f6:	d104      	bne.n	8004902 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	0018      	movs	r0, r3
 80048fe:	f7ff fa37 	bl	8003d70 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004902:	f7ff f90d 	bl	8003b20 <HAL_GetTick>
 8004906:	0002      	movs	r2, r0
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	2b02      	cmp	r3, #2
 800490e:	d914      	bls.n	800493a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2201      	movs	r2, #1
 8004918:	4013      	ands	r3, r2
 800491a:	2b01      	cmp	r3, #1
 800491c:	d00d      	beq.n	800493a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004922:	2210      	movs	r2, #16
 8004924:	431a      	orrs	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800492e:	2201      	movs	r2, #1
 8004930:	431a      	orrs	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e007      	b.n	800494a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2201      	movs	r2, #1
 8004942:	4013      	ands	r3, r2
 8004944:	2b01      	cmp	r3, #1
 8004946:	d1d0      	bne.n	80048ea <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	0018      	movs	r0, r3
 800494c:	46bd      	mov	sp, r7
 800494e:	b004      	add	sp, #16
 8004950:	bd80      	pop	{r7, pc}
 8004952:	46c0      	nop			; (mov r8, r8)
 8004954:	80000017 	.word	0x80000017
 8004958:	40012708 	.word	0x40012708
 800495c:	20000004 	.word	0x20000004
 8004960:	00030d40 	.word	0x00030d40

08004964 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800496c:	46c0      	nop			; (mov r8, r8)
 800496e:	46bd      	mov	sp, r7
 8004970:	b002      	add	sp, #8
 8004972:	bd80      	pop	{r7, pc}

08004974 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800497c:	46c0      	nop			; (mov r8, r8)
 800497e:	46bd      	mov	sp, r7
 8004980:	b002      	add	sp, #8
 8004982:	bd80      	pop	{r7, pc}

08004984 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800498c:	46c0      	nop			; (mov r8, r8)
 800498e:	46bd      	mov	sp, r7
 8004990:	b002      	add	sp, #8
 8004992:	bd80      	pop	{r7, pc}

08004994 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 800499c:	46c0      	nop			; (mov r8, r8)
 800499e:	46bd      	mov	sp, r7
 80049a0:	b002      	add	sp, #8
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	0002      	movs	r2, r0
 80049ac:	1dfb      	adds	r3, r7, #7
 80049ae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80049b0:	1dfb      	adds	r3, r7, #7
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	2b7f      	cmp	r3, #127	; 0x7f
 80049b6:	d809      	bhi.n	80049cc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049b8:	1dfb      	adds	r3, r7, #7
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	001a      	movs	r2, r3
 80049be:	231f      	movs	r3, #31
 80049c0:	401a      	ands	r2, r3
 80049c2:	4b04      	ldr	r3, [pc, #16]	; (80049d4 <__NVIC_EnableIRQ+0x30>)
 80049c4:	2101      	movs	r1, #1
 80049c6:	4091      	lsls	r1, r2
 80049c8:	000a      	movs	r2, r1
 80049ca:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80049cc:	46c0      	nop			; (mov r8, r8)
 80049ce:	46bd      	mov	sp, r7
 80049d0:	b002      	add	sp, #8
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	e000e100 	.word	0xe000e100

080049d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049d8:	b590      	push	{r4, r7, lr}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	0002      	movs	r2, r0
 80049e0:	6039      	str	r1, [r7, #0]
 80049e2:	1dfb      	adds	r3, r7, #7
 80049e4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80049e6:	1dfb      	adds	r3, r7, #7
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	2b7f      	cmp	r3, #127	; 0x7f
 80049ec:	d828      	bhi.n	8004a40 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80049ee:	4a2f      	ldr	r2, [pc, #188]	; (8004aac <__NVIC_SetPriority+0xd4>)
 80049f0:	1dfb      	adds	r3, r7, #7
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	b25b      	sxtb	r3, r3
 80049f6:	089b      	lsrs	r3, r3, #2
 80049f8:	33c0      	adds	r3, #192	; 0xc0
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	589b      	ldr	r3, [r3, r2]
 80049fe:	1dfa      	adds	r2, r7, #7
 8004a00:	7812      	ldrb	r2, [r2, #0]
 8004a02:	0011      	movs	r1, r2
 8004a04:	2203      	movs	r2, #3
 8004a06:	400a      	ands	r2, r1
 8004a08:	00d2      	lsls	r2, r2, #3
 8004a0a:	21ff      	movs	r1, #255	; 0xff
 8004a0c:	4091      	lsls	r1, r2
 8004a0e:	000a      	movs	r2, r1
 8004a10:	43d2      	mvns	r2, r2
 8004a12:	401a      	ands	r2, r3
 8004a14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	019b      	lsls	r3, r3, #6
 8004a1a:	22ff      	movs	r2, #255	; 0xff
 8004a1c:	401a      	ands	r2, r3
 8004a1e:	1dfb      	adds	r3, r7, #7
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	0018      	movs	r0, r3
 8004a24:	2303      	movs	r3, #3
 8004a26:	4003      	ands	r3, r0
 8004a28:	00db      	lsls	r3, r3, #3
 8004a2a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004a2c:	481f      	ldr	r0, [pc, #124]	; (8004aac <__NVIC_SetPriority+0xd4>)
 8004a2e:	1dfb      	adds	r3, r7, #7
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	b25b      	sxtb	r3, r3
 8004a34:	089b      	lsrs	r3, r3, #2
 8004a36:	430a      	orrs	r2, r1
 8004a38:	33c0      	adds	r3, #192	; 0xc0
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004a3e:	e031      	b.n	8004aa4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004a40:	4a1b      	ldr	r2, [pc, #108]	; (8004ab0 <__NVIC_SetPriority+0xd8>)
 8004a42:	1dfb      	adds	r3, r7, #7
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	0019      	movs	r1, r3
 8004a48:	230f      	movs	r3, #15
 8004a4a:	400b      	ands	r3, r1
 8004a4c:	3b08      	subs	r3, #8
 8004a4e:	089b      	lsrs	r3, r3, #2
 8004a50:	3306      	adds	r3, #6
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	18d3      	adds	r3, r2, r3
 8004a56:	3304      	adds	r3, #4
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	1dfa      	adds	r2, r7, #7
 8004a5c:	7812      	ldrb	r2, [r2, #0]
 8004a5e:	0011      	movs	r1, r2
 8004a60:	2203      	movs	r2, #3
 8004a62:	400a      	ands	r2, r1
 8004a64:	00d2      	lsls	r2, r2, #3
 8004a66:	21ff      	movs	r1, #255	; 0xff
 8004a68:	4091      	lsls	r1, r2
 8004a6a:	000a      	movs	r2, r1
 8004a6c:	43d2      	mvns	r2, r2
 8004a6e:	401a      	ands	r2, r3
 8004a70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	019b      	lsls	r3, r3, #6
 8004a76:	22ff      	movs	r2, #255	; 0xff
 8004a78:	401a      	ands	r2, r3
 8004a7a:	1dfb      	adds	r3, r7, #7
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	0018      	movs	r0, r3
 8004a80:	2303      	movs	r3, #3
 8004a82:	4003      	ands	r3, r0
 8004a84:	00db      	lsls	r3, r3, #3
 8004a86:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004a88:	4809      	ldr	r0, [pc, #36]	; (8004ab0 <__NVIC_SetPriority+0xd8>)
 8004a8a:	1dfb      	adds	r3, r7, #7
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	001c      	movs	r4, r3
 8004a90:	230f      	movs	r3, #15
 8004a92:	4023      	ands	r3, r4
 8004a94:	3b08      	subs	r3, #8
 8004a96:	089b      	lsrs	r3, r3, #2
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	3306      	adds	r3, #6
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	18c3      	adds	r3, r0, r3
 8004aa0:	3304      	adds	r3, #4
 8004aa2:	601a      	str	r2, [r3, #0]
}
 8004aa4:	46c0      	nop			; (mov r8, r8)
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	b003      	add	sp, #12
 8004aaa:	bd90      	pop	{r4, r7, pc}
 8004aac:	e000e100 	.word	0xe000e100
 8004ab0:	e000ed00 	.word	0xe000ed00

08004ab4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	1e5a      	subs	r2, r3, #1
 8004ac0:	2380      	movs	r3, #128	; 0x80
 8004ac2:	045b      	lsls	r3, r3, #17
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d301      	bcc.n	8004acc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e010      	b.n	8004aee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004acc:	4b0a      	ldr	r3, [pc, #40]	; (8004af8 <SysTick_Config+0x44>)
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	3a01      	subs	r2, #1
 8004ad2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	425b      	negs	r3, r3
 8004ad8:	2103      	movs	r1, #3
 8004ada:	0018      	movs	r0, r3
 8004adc:	f7ff ff7c 	bl	80049d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ae0:	4b05      	ldr	r3, [pc, #20]	; (8004af8 <SysTick_Config+0x44>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ae6:	4b04      	ldr	r3, [pc, #16]	; (8004af8 <SysTick_Config+0x44>)
 8004ae8:	2207      	movs	r2, #7
 8004aea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	0018      	movs	r0, r3
 8004af0:	46bd      	mov	sp, r7
 8004af2:	b002      	add	sp, #8
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	46c0      	nop			; (mov r8, r8)
 8004af8:	e000e010 	.word	0xe000e010

08004afc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60b9      	str	r1, [r7, #8]
 8004b04:	607a      	str	r2, [r7, #4]
 8004b06:	210f      	movs	r1, #15
 8004b08:	187b      	adds	r3, r7, r1
 8004b0a:	1c02      	adds	r2, r0, #0
 8004b0c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8004b0e:	68ba      	ldr	r2, [r7, #8]
 8004b10:	187b      	adds	r3, r7, r1
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	b25b      	sxtb	r3, r3
 8004b16:	0011      	movs	r1, r2
 8004b18:	0018      	movs	r0, r3
 8004b1a:	f7ff ff5d 	bl	80049d8 <__NVIC_SetPriority>
}
 8004b1e:	46c0      	nop			; (mov r8, r8)
 8004b20:	46bd      	mov	sp, r7
 8004b22:	b004      	add	sp, #16
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b082      	sub	sp, #8
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	0002      	movs	r2, r0
 8004b2e:	1dfb      	adds	r3, r7, #7
 8004b30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b32:	1dfb      	adds	r3, r7, #7
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	b25b      	sxtb	r3, r3
 8004b38:	0018      	movs	r0, r3
 8004b3a:	f7ff ff33 	bl	80049a4 <__NVIC_EnableIRQ>
}
 8004b3e:	46c0      	nop			; (mov r8, r8)
 8004b40:	46bd      	mov	sp, r7
 8004b42:	b002      	add	sp, #8
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b082      	sub	sp, #8
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	0018      	movs	r0, r3
 8004b52:	f7ff ffaf 	bl	8004ab4 <SysTick_Config>
 8004b56:	0003      	movs	r3, r0
}
 8004b58:	0018      	movs	r0, r3
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	b002      	add	sp, #8
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b6e:	e147      	b.n	8004e00 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2101      	movs	r1, #1
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	4091      	lsls	r1, r2
 8004b7a:	000a      	movs	r2, r1
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d100      	bne.n	8004b88 <HAL_GPIO_Init+0x28>
 8004b86:	e138      	b.n	8004dfa <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	2203      	movs	r2, #3
 8004b8e:	4013      	ands	r3, r2
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d005      	beq.n	8004ba0 <HAL_GPIO_Init+0x40>
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	2203      	movs	r2, #3
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d130      	bne.n	8004c02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	005b      	lsls	r3, r3, #1
 8004baa:	2203      	movs	r2, #3
 8004bac:	409a      	lsls	r2, r3
 8004bae:	0013      	movs	r3, r2
 8004bb0:	43da      	mvns	r2, r3
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	68da      	ldr	r2, [r3, #12]
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	005b      	lsls	r3, r3, #1
 8004bc0:	409a      	lsls	r2, r3
 8004bc2:	0013      	movs	r3, r2
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	693a      	ldr	r2, [r7, #16]
 8004bce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	409a      	lsls	r2, r3
 8004bdc:	0013      	movs	r3, r2
 8004bde:	43da      	mvns	r2, r3
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	4013      	ands	r3, r2
 8004be4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	091b      	lsrs	r3, r3, #4
 8004bec:	2201      	movs	r2, #1
 8004bee:	401a      	ands	r2, r3
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	409a      	lsls	r2, r3
 8004bf4:	0013      	movs	r3, r2
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	2203      	movs	r2, #3
 8004c08:	4013      	ands	r3, r2
 8004c0a:	2b03      	cmp	r3, #3
 8004c0c:	d017      	beq.n	8004c3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	005b      	lsls	r3, r3, #1
 8004c18:	2203      	movs	r2, #3
 8004c1a:	409a      	lsls	r2, r3
 8004c1c:	0013      	movs	r3, r2
 8004c1e:	43da      	mvns	r2, r3
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	4013      	ands	r3, r2
 8004c24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	689a      	ldr	r2, [r3, #8]
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	005b      	lsls	r3, r3, #1
 8004c2e:	409a      	lsls	r2, r3
 8004c30:	0013      	movs	r3, r2
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	2203      	movs	r2, #3
 8004c44:	4013      	ands	r3, r2
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d123      	bne.n	8004c92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	08da      	lsrs	r2, r3, #3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	3208      	adds	r2, #8
 8004c52:	0092      	lsls	r2, r2, #2
 8004c54:	58d3      	ldr	r3, [r2, r3]
 8004c56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	2207      	movs	r2, #7
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	220f      	movs	r2, #15
 8004c62:	409a      	lsls	r2, r3
 8004c64:	0013      	movs	r3, r2
 8004c66:	43da      	mvns	r2, r3
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	691a      	ldr	r2, [r3, #16]
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	2107      	movs	r1, #7
 8004c76:	400b      	ands	r3, r1
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	409a      	lsls	r2, r3
 8004c7c:	0013      	movs	r3, r2
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	08da      	lsrs	r2, r3, #3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	3208      	adds	r2, #8
 8004c8c:	0092      	lsls	r2, r2, #2
 8004c8e:	6939      	ldr	r1, [r7, #16]
 8004c90:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	005b      	lsls	r3, r3, #1
 8004c9c:	2203      	movs	r2, #3
 8004c9e:	409a      	lsls	r2, r3
 8004ca0:	0013      	movs	r3, r2
 8004ca2:	43da      	mvns	r2, r3
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	2203      	movs	r2, #3
 8004cb0:	401a      	ands	r2, r3
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	005b      	lsls	r3, r3, #1
 8004cb6:	409a      	lsls	r2, r3
 8004cb8:	0013      	movs	r3, r2
 8004cba:	693a      	ldr	r2, [r7, #16]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	685a      	ldr	r2, [r3, #4]
 8004cca:	23c0      	movs	r3, #192	; 0xc0
 8004ccc:	029b      	lsls	r3, r3, #10
 8004cce:	4013      	ands	r3, r2
 8004cd0:	d100      	bne.n	8004cd4 <HAL_GPIO_Init+0x174>
 8004cd2:	e092      	b.n	8004dfa <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004cd4:	4a50      	ldr	r2, [pc, #320]	; (8004e18 <HAL_GPIO_Init+0x2b8>)
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	089b      	lsrs	r3, r3, #2
 8004cda:	3318      	adds	r3, #24
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	589b      	ldr	r3, [r3, r2]
 8004ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	2203      	movs	r2, #3
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	00db      	lsls	r3, r3, #3
 8004cea:	220f      	movs	r2, #15
 8004cec:	409a      	lsls	r2, r3
 8004cee:	0013      	movs	r3, r2
 8004cf0:	43da      	mvns	r2, r3
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	23a0      	movs	r3, #160	; 0xa0
 8004cfc:	05db      	lsls	r3, r3, #23
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d013      	beq.n	8004d2a <HAL_GPIO_Init+0x1ca>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a45      	ldr	r2, [pc, #276]	; (8004e1c <HAL_GPIO_Init+0x2bc>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d00d      	beq.n	8004d26 <HAL_GPIO_Init+0x1c6>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a44      	ldr	r2, [pc, #272]	; (8004e20 <HAL_GPIO_Init+0x2c0>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d007      	beq.n	8004d22 <HAL_GPIO_Init+0x1c2>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a43      	ldr	r2, [pc, #268]	; (8004e24 <HAL_GPIO_Init+0x2c4>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d101      	bne.n	8004d1e <HAL_GPIO_Init+0x1be>
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e006      	b.n	8004d2c <HAL_GPIO_Init+0x1cc>
 8004d1e:	2305      	movs	r3, #5
 8004d20:	e004      	b.n	8004d2c <HAL_GPIO_Init+0x1cc>
 8004d22:	2302      	movs	r3, #2
 8004d24:	e002      	b.n	8004d2c <HAL_GPIO_Init+0x1cc>
 8004d26:	2301      	movs	r3, #1
 8004d28:	e000      	b.n	8004d2c <HAL_GPIO_Init+0x1cc>
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	2103      	movs	r1, #3
 8004d30:	400a      	ands	r2, r1
 8004d32:	00d2      	lsls	r2, r2, #3
 8004d34:	4093      	lsls	r3, r2
 8004d36:	693a      	ldr	r2, [r7, #16]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004d3c:	4936      	ldr	r1, [pc, #216]	; (8004e18 <HAL_GPIO_Init+0x2b8>)
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	089b      	lsrs	r3, r3, #2
 8004d42:	3318      	adds	r3, #24
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004d4a:	4b33      	ldr	r3, [pc, #204]	; (8004e18 <HAL_GPIO_Init+0x2b8>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	43da      	mvns	r2, r3
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	4013      	ands	r3, r2
 8004d58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	685a      	ldr	r2, [r3, #4]
 8004d5e:	2380      	movs	r3, #128	; 0x80
 8004d60:	035b      	lsls	r3, r3, #13
 8004d62:	4013      	ands	r3, r2
 8004d64:	d003      	beq.n	8004d6e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004d6e:	4b2a      	ldr	r3, [pc, #168]	; (8004e18 <HAL_GPIO_Init+0x2b8>)
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004d74:	4b28      	ldr	r3, [pc, #160]	; (8004e18 <HAL_GPIO_Init+0x2b8>)
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	43da      	mvns	r2, r3
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	4013      	ands	r3, r2
 8004d82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	685a      	ldr	r2, [r3, #4]
 8004d88:	2380      	movs	r3, #128	; 0x80
 8004d8a:	039b      	lsls	r3, r3, #14
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	d003      	beq.n	8004d98 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004d98:	4b1f      	ldr	r3, [pc, #124]	; (8004e18 <HAL_GPIO_Init+0x2b8>)
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004d9e:	4a1e      	ldr	r2, [pc, #120]	; (8004e18 <HAL_GPIO_Init+0x2b8>)
 8004da0:	2384      	movs	r3, #132	; 0x84
 8004da2:	58d3      	ldr	r3, [r2, r3]
 8004da4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	43da      	mvns	r2, r3
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	4013      	ands	r3, r2
 8004dae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	2380      	movs	r3, #128	; 0x80
 8004db6:	029b      	lsls	r3, r3, #10
 8004db8:	4013      	ands	r3, r2
 8004dba:	d003      	beq.n	8004dc4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004dc4:	4914      	ldr	r1, [pc, #80]	; (8004e18 <HAL_GPIO_Init+0x2b8>)
 8004dc6:	2284      	movs	r2, #132	; 0x84
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004dcc:	4a12      	ldr	r2, [pc, #72]	; (8004e18 <HAL_GPIO_Init+0x2b8>)
 8004dce:	2380      	movs	r3, #128	; 0x80
 8004dd0:	58d3      	ldr	r3, [r2, r3]
 8004dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	43da      	mvns	r2, r3
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	4013      	ands	r3, r2
 8004ddc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	685a      	ldr	r2, [r3, #4]
 8004de2:	2380      	movs	r3, #128	; 0x80
 8004de4:	025b      	lsls	r3, r3, #9
 8004de6:	4013      	ands	r3, r2
 8004de8:	d003      	beq.n	8004df2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004df2:	4909      	ldr	r1, [pc, #36]	; (8004e18 <HAL_GPIO_Init+0x2b8>)
 8004df4:	2280      	movs	r2, #128	; 0x80
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	40da      	lsrs	r2, r3
 8004e08:	1e13      	subs	r3, r2, #0
 8004e0a:	d000      	beq.n	8004e0e <HAL_GPIO_Init+0x2ae>
 8004e0c:	e6b0      	b.n	8004b70 <HAL_GPIO_Init+0x10>
  }
}
 8004e0e:	46c0      	nop			; (mov r8, r8)
 8004e10:	46c0      	nop			; (mov r8, r8)
 8004e12:	46bd      	mov	sp, r7
 8004e14:	b006      	add	sp, #24
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	40021800 	.word	0x40021800
 8004e1c:	50000400 	.word	0x50000400
 8004e20:	50000800 	.word	0x50000800
 8004e24:	50000c00 	.word	0x50000c00

08004e28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	0008      	movs	r0, r1
 8004e32:	0011      	movs	r1, r2
 8004e34:	1cbb      	adds	r3, r7, #2
 8004e36:	1c02      	adds	r2, r0, #0
 8004e38:	801a      	strh	r2, [r3, #0]
 8004e3a:	1c7b      	adds	r3, r7, #1
 8004e3c:	1c0a      	adds	r2, r1, #0
 8004e3e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e40:	1c7b      	adds	r3, r7, #1
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d004      	beq.n	8004e52 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e48:	1cbb      	adds	r3, r7, #2
 8004e4a:	881a      	ldrh	r2, [r3, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004e50:	e003      	b.n	8004e5a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e52:	1cbb      	adds	r3, r7, #2
 8004e54:	881a      	ldrh	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004e5a:	46c0      	nop			; (mov r8, r8)
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	b002      	add	sp, #8
 8004e60:	bd80      	pop	{r7, pc}
	...

08004e64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004e6c:	4b19      	ldr	r3, [pc, #100]	; (8004ed4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a19      	ldr	r2, [pc, #100]	; (8004ed8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004e72:	4013      	ands	r3, r2
 8004e74:	0019      	movs	r1, r3
 8004e76:	4b17      	ldr	r3, [pc, #92]	; (8004ed4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	2380      	movs	r3, #128	; 0x80
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d11f      	bne.n	8004ec8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004e88:	4b14      	ldr	r3, [pc, #80]	; (8004edc <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	0013      	movs	r3, r2
 8004e8e:	005b      	lsls	r3, r3, #1
 8004e90:	189b      	adds	r3, r3, r2
 8004e92:	005b      	lsls	r3, r3, #1
 8004e94:	4912      	ldr	r1, [pc, #72]	; (8004ee0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004e96:	0018      	movs	r0, r3
 8004e98:	f7fb f932 	bl	8000100 <__udivsi3>
 8004e9c:	0003      	movs	r3, r0
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ea2:	e008      	b.n	8004eb6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d003      	beq.n	8004eb2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	3b01      	subs	r3, #1
 8004eae:	60fb      	str	r3, [r7, #12]
 8004eb0:	e001      	b.n	8004eb6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e009      	b.n	8004eca <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004eb6:	4b07      	ldr	r3, [pc, #28]	; (8004ed4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004eb8:	695a      	ldr	r2, [r3, #20]
 8004eba:	2380      	movs	r3, #128	; 0x80
 8004ebc:	00db      	lsls	r3, r3, #3
 8004ebe:	401a      	ands	r2, r3
 8004ec0:	2380      	movs	r3, #128	; 0x80
 8004ec2:	00db      	lsls	r3, r3, #3
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d0ed      	beq.n	8004ea4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	0018      	movs	r0, r3
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	b004      	add	sp, #16
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	46c0      	nop			; (mov r8, r8)
 8004ed4:	40007000 	.word	0x40007000
 8004ed8:	fffff9ff 	.word	0xfffff9ff
 8004edc:	20000004 	.word	0x20000004
 8004ee0:	000f4240 	.word	0x000f4240

08004ee4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b088      	sub	sp, #32
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d101      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e2f3      	b.n	80054de <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2201      	movs	r2, #1
 8004efc:	4013      	ands	r3, r2
 8004efe:	d100      	bne.n	8004f02 <HAL_RCC_OscConfig+0x1e>
 8004f00:	e07c      	b.n	8004ffc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f02:	4bc3      	ldr	r3, [pc, #780]	; (8005210 <HAL_RCC_OscConfig+0x32c>)
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	2238      	movs	r2, #56	; 0x38
 8004f08:	4013      	ands	r3, r2
 8004f0a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f0c:	4bc0      	ldr	r3, [pc, #768]	; (8005210 <HAL_RCC_OscConfig+0x32c>)
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	2203      	movs	r2, #3
 8004f12:	4013      	ands	r3, r2
 8004f14:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	2b10      	cmp	r3, #16
 8004f1a:	d102      	bne.n	8004f22 <HAL_RCC_OscConfig+0x3e>
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	2b03      	cmp	r3, #3
 8004f20:	d002      	beq.n	8004f28 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	2b08      	cmp	r3, #8
 8004f26:	d10b      	bne.n	8004f40 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f28:	4bb9      	ldr	r3, [pc, #740]	; (8005210 <HAL_RCC_OscConfig+0x32c>)
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	2380      	movs	r3, #128	; 0x80
 8004f2e:	029b      	lsls	r3, r3, #10
 8004f30:	4013      	ands	r3, r2
 8004f32:	d062      	beq.n	8004ffa <HAL_RCC_OscConfig+0x116>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d15e      	bne.n	8004ffa <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e2ce      	b.n	80054de <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685a      	ldr	r2, [r3, #4]
 8004f44:	2380      	movs	r3, #128	; 0x80
 8004f46:	025b      	lsls	r3, r3, #9
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d107      	bne.n	8004f5c <HAL_RCC_OscConfig+0x78>
 8004f4c:	4bb0      	ldr	r3, [pc, #704]	; (8005210 <HAL_RCC_OscConfig+0x32c>)
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	4baf      	ldr	r3, [pc, #700]	; (8005210 <HAL_RCC_OscConfig+0x32c>)
 8004f52:	2180      	movs	r1, #128	; 0x80
 8004f54:	0249      	lsls	r1, r1, #9
 8004f56:	430a      	orrs	r2, r1
 8004f58:	601a      	str	r2, [r3, #0]
 8004f5a:	e020      	b.n	8004f9e <HAL_RCC_OscConfig+0xba>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	23a0      	movs	r3, #160	; 0xa0
 8004f62:	02db      	lsls	r3, r3, #11
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d10e      	bne.n	8004f86 <HAL_RCC_OscConfig+0xa2>
 8004f68:	4ba9      	ldr	r3, [pc, #676]	; (8005210 <HAL_RCC_OscConfig+0x32c>)
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	4ba8      	ldr	r3, [pc, #672]	; (8005210 <HAL_RCC_OscConfig+0x32c>)
 8004f6e:	2180      	movs	r1, #128	; 0x80
 8004f70:	02c9      	lsls	r1, r1, #11
 8004f72:	430a      	orrs	r2, r1
 8004f74:	601a      	str	r2, [r3, #0]
 8004f76:	4ba6      	ldr	r3, [pc, #664]	; (8005210 <HAL_RCC_OscConfig+0x32c>)
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	4ba5      	ldr	r3, [pc, #660]	; (8005210 <HAL_RCC_OscConfig+0x32c>)
 8004f7c:	2180      	movs	r1, #128	; 0x80
 8004f7e:	0249      	lsls	r1, r1, #9
 8004f80:	430a      	orrs	r2, r1
 8004f82:	601a      	str	r2, [r3, #0]
 8004f84:	e00b      	b.n	8004f9e <HAL_RCC_OscConfig+0xba>
 8004f86:	4ba2      	ldr	r3, [pc, #648]	; (8005210 <HAL_RCC_OscConfig+0x32c>)
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	4ba1      	ldr	r3, [pc, #644]	; (8005210 <HAL_RCC_OscConfig+0x32c>)
 8004f8c:	49a1      	ldr	r1, [pc, #644]	; (8005214 <HAL_RCC_OscConfig+0x330>)
 8004f8e:	400a      	ands	r2, r1
 8004f90:	601a      	str	r2, [r3, #0]
 8004f92:	4b9f      	ldr	r3, [pc, #636]	; (8005210 <HAL_RCC_OscConfig+0x32c>)
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	4b9e      	ldr	r3, [pc, #632]	; (8005210 <HAL_RCC_OscConfig+0x32c>)
 8004f98:	499f      	ldr	r1, [pc, #636]	; (8005218 <HAL_RCC_OscConfig+0x334>)
 8004f9a:	400a      	ands	r2, r1
 8004f9c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d014      	beq.n	8004fd0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa6:	f7fe fdbb 	bl	8003b20 <HAL_GetTick>
 8004faa:	0003      	movs	r3, r0
 8004fac:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fae:	e008      	b.n	8004fc2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fb0:	f7fe fdb6 	bl	8003b20 <HAL_GetTick>
 8004fb4:	0002      	movs	r2, r0
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	2b64      	cmp	r3, #100	; 0x64
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e28d      	b.n	80054de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fc2:	4b93      	ldr	r3, [pc, #588]	; (8005210 <HAL_RCC_OscConfig+0x32c>)
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	2380      	movs	r3, #128	; 0x80
 8004fc8:	029b      	lsls	r3, r3, #10
 8004fca:	4013      	ands	r3, r2
 8004fcc:	d0f0      	beq.n	8004fb0 <HAL_RCC_OscConfig+0xcc>
 8004fce:	e015      	b.n	8004ffc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd0:	f7fe fda6 	bl	8003b20 <HAL_GetTick>
 8004fd4:	0003      	movs	r3, r0
 8004fd6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fd8:	e008      	b.n	8004fec <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fda:	f7fe fda1 	bl	8003b20 <HAL_GetTick>
 8004fde:	0002      	movs	r2, r0
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	2b64      	cmp	r3, #100	; 0x64
 8004fe6:	d901      	bls.n	8004fec <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e278      	b.n	80054de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fec:	4b88      	ldr	r3, [pc, #544]	; (8005210 <HAL_RCC_OscConfig+0x32c>)
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	2380      	movs	r3, #128	; 0x80
 8004ff2:	029b      	lsls	r3, r3, #10
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	d1f0      	bne.n	8004fda <HAL_RCC_OscConfig+0xf6>
 8004ff8:	e000      	b.n	8004ffc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ffa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2202      	movs	r2, #2
 8005002:	4013      	ands	r3, r2
 8005004:	d100      	bne.n	8005008 <HAL_RCC_OscConfig+0x124>
 8005006:	e099      	b.n	800513c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005008:	4b81      	ldr	r3, [pc, #516]	; (8005210 <HAL_RCC_OscConfig+0x32c>)
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	2238      	movs	r2, #56	; 0x38
 800500e:	4013      	ands	r3, r2
 8005010:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005012:	4b7f      	ldr	r3, [pc, #508]	; (8005210 <HAL_RCC_OscConfig+0x32c>)
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	2203      	movs	r2, #3
 8005018:	4013      	ands	r3, r2
 800501a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	2b10      	cmp	r3, #16
 8005020:	d102      	bne.n	8005028 <HAL_RCC_OscConfig+0x144>
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	2b02      	cmp	r3, #2
 8005026:	d002      	beq.n	800502e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d135      	bne.n	800509a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800502e:	4b78      	ldr	r3, [pc, #480]	; (8005210 <HAL_RCC_OscConfig+0x32c>)
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	2380      	movs	r3, #128	; 0x80
 8005034:	00db      	lsls	r3, r3, #3
 8005036:	4013      	ands	r3, r2
 8005038:	d005      	beq.n	8005046 <HAL_RCC_OscConfig+0x162>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e24b      	b.n	80054de <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005046:	4b72      	ldr	r3, [pc, #456]	; (8005210 <HAL_RCC_OscConfig+0x32c>)
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	4a74      	ldr	r2, [pc, #464]	; (800521c <HAL_RCC_OscConfig+0x338>)
 800504c:	4013      	ands	r3, r2
 800504e:	0019      	movs	r1, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	695b      	ldr	r3, [r3, #20]
 8005054:	021a      	lsls	r2, r3, #8
 8005056:	4b6e      	ldr	r3, [pc, #440]	; (8005210 <HAL_RCC_OscConfig+0x32c>)
 8005058:	430a      	orrs	r2, r1
 800505a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d112      	bne.n	8005088 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005062:	4b6b      	ldr	r3, [pc, #428]	; (8005210 <HAL_RCC_OscConfig+0x32c>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a6e      	ldr	r2, [pc, #440]	; (8005220 <HAL_RCC_OscConfig+0x33c>)
 8005068:	4013      	ands	r3, r2
 800506a:	0019      	movs	r1, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	691a      	ldr	r2, [r3, #16]
 8005070:	4b67      	ldr	r3, [pc, #412]	; (8005210 <HAL_RCC_OscConfig+0x32c>)
 8005072:	430a      	orrs	r2, r1
 8005074:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005076:	4b66      	ldr	r3, [pc, #408]	; (8005210 <HAL_RCC_OscConfig+0x32c>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	0adb      	lsrs	r3, r3, #11
 800507c:	2207      	movs	r2, #7
 800507e:	4013      	ands	r3, r2
 8005080:	4a68      	ldr	r2, [pc, #416]	; (8005224 <HAL_RCC_OscConfig+0x340>)
 8005082:	40da      	lsrs	r2, r3
 8005084:	4b68      	ldr	r3, [pc, #416]	; (8005228 <HAL_RCC_OscConfig+0x344>)
 8005086:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005088:	4b68      	ldr	r3, [pc, #416]	; (800522c <HAL_RCC_OscConfig+0x348>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	0018      	movs	r0, r3
 800508e:	f7fe fceb 	bl	8003a68 <HAL_InitTick>
 8005092:	1e03      	subs	r3, r0, #0
 8005094:	d051      	beq.n	800513a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e221      	b.n	80054de <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d030      	beq.n	8005104 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80050a2:	4b5b      	ldr	r3, [pc, #364]	; (8005210 <HAL_RCC_OscConfig+0x32c>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a5e      	ldr	r2, [pc, #376]	; (8005220 <HAL_RCC_OscConfig+0x33c>)
 80050a8:	4013      	ands	r3, r2
 80050aa:	0019      	movs	r1, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	691a      	ldr	r2, [r3, #16]
 80050b0:	4b57      	ldr	r3, [pc, #348]	; (8005210 <HAL_RCC_OscConfig+0x32c>)
 80050b2:	430a      	orrs	r2, r1
 80050b4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80050b6:	4b56      	ldr	r3, [pc, #344]	; (8005210 <HAL_RCC_OscConfig+0x32c>)
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	4b55      	ldr	r3, [pc, #340]	; (8005210 <HAL_RCC_OscConfig+0x32c>)
 80050bc:	2180      	movs	r1, #128	; 0x80
 80050be:	0049      	lsls	r1, r1, #1
 80050c0:	430a      	orrs	r2, r1
 80050c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c4:	f7fe fd2c 	bl	8003b20 <HAL_GetTick>
 80050c8:	0003      	movs	r3, r0
 80050ca:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050cc:	e008      	b.n	80050e0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050ce:	f7fe fd27 	bl	8003b20 <HAL_GetTick>
 80050d2:	0002      	movs	r2, r0
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d901      	bls.n	80050e0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e1fe      	b.n	80054de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050e0:	4b4b      	ldr	r3, [pc, #300]	; (8005210 <HAL_RCC_OscConfig+0x32c>)
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	2380      	movs	r3, #128	; 0x80
 80050e6:	00db      	lsls	r3, r3, #3
 80050e8:	4013      	ands	r3, r2
 80050ea:	d0f0      	beq.n	80050ce <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050ec:	4b48      	ldr	r3, [pc, #288]	; (8005210 <HAL_RCC_OscConfig+0x32c>)
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	4a4a      	ldr	r2, [pc, #296]	; (800521c <HAL_RCC_OscConfig+0x338>)
 80050f2:	4013      	ands	r3, r2
 80050f4:	0019      	movs	r1, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	021a      	lsls	r2, r3, #8
 80050fc:	4b44      	ldr	r3, [pc, #272]	; (8005210 <HAL_RCC_OscConfig+0x32c>)
 80050fe:	430a      	orrs	r2, r1
 8005100:	605a      	str	r2, [r3, #4]
 8005102:	e01b      	b.n	800513c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005104:	4b42      	ldr	r3, [pc, #264]	; (8005210 <HAL_RCC_OscConfig+0x32c>)
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	4b41      	ldr	r3, [pc, #260]	; (8005210 <HAL_RCC_OscConfig+0x32c>)
 800510a:	4949      	ldr	r1, [pc, #292]	; (8005230 <HAL_RCC_OscConfig+0x34c>)
 800510c:	400a      	ands	r2, r1
 800510e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005110:	f7fe fd06 	bl	8003b20 <HAL_GetTick>
 8005114:	0003      	movs	r3, r0
 8005116:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005118:	e008      	b.n	800512c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800511a:	f7fe fd01 	bl	8003b20 <HAL_GetTick>
 800511e:	0002      	movs	r2, r0
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	2b02      	cmp	r3, #2
 8005126:	d901      	bls.n	800512c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e1d8      	b.n	80054de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800512c:	4b38      	ldr	r3, [pc, #224]	; (8005210 <HAL_RCC_OscConfig+0x32c>)
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	2380      	movs	r3, #128	; 0x80
 8005132:	00db      	lsls	r3, r3, #3
 8005134:	4013      	ands	r3, r2
 8005136:	d1f0      	bne.n	800511a <HAL_RCC_OscConfig+0x236>
 8005138:	e000      	b.n	800513c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800513a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2208      	movs	r2, #8
 8005142:	4013      	ands	r3, r2
 8005144:	d047      	beq.n	80051d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005146:	4b32      	ldr	r3, [pc, #200]	; (8005210 <HAL_RCC_OscConfig+0x32c>)
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	2238      	movs	r2, #56	; 0x38
 800514c:	4013      	ands	r3, r2
 800514e:	2b18      	cmp	r3, #24
 8005150:	d10a      	bne.n	8005168 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005152:	4b2f      	ldr	r3, [pc, #188]	; (8005210 <HAL_RCC_OscConfig+0x32c>)
 8005154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005156:	2202      	movs	r2, #2
 8005158:	4013      	ands	r3, r2
 800515a:	d03c      	beq.n	80051d6 <HAL_RCC_OscConfig+0x2f2>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d138      	bne.n	80051d6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e1ba      	b.n	80054de <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	699b      	ldr	r3, [r3, #24]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d019      	beq.n	80051a4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005170:	4b27      	ldr	r3, [pc, #156]	; (8005210 <HAL_RCC_OscConfig+0x32c>)
 8005172:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005174:	4b26      	ldr	r3, [pc, #152]	; (8005210 <HAL_RCC_OscConfig+0x32c>)
 8005176:	2101      	movs	r1, #1
 8005178:	430a      	orrs	r2, r1
 800517a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800517c:	f7fe fcd0 	bl	8003b20 <HAL_GetTick>
 8005180:	0003      	movs	r3, r0
 8005182:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005184:	e008      	b.n	8005198 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005186:	f7fe fccb 	bl	8003b20 <HAL_GetTick>
 800518a:	0002      	movs	r2, r0
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	2b02      	cmp	r3, #2
 8005192:	d901      	bls.n	8005198 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e1a2      	b.n	80054de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005198:	4b1d      	ldr	r3, [pc, #116]	; (8005210 <HAL_RCC_OscConfig+0x32c>)
 800519a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800519c:	2202      	movs	r2, #2
 800519e:	4013      	ands	r3, r2
 80051a0:	d0f1      	beq.n	8005186 <HAL_RCC_OscConfig+0x2a2>
 80051a2:	e018      	b.n	80051d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80051a4:	4b1a      	ldr	r3, [pc, #104]	; (8005210 <HAL_RCC_OscConfig+0x32c>)
 80051a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80051a8:	4b19      	ldr	r3, [pc, #100]	; (8005210 <HAL_RCC_OscConfig+0x32c>)
 80051aa:	2101      	movs	r1, #1
 80051ac:	438a      	bics	r2, r1
 80051ae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b0:	f7fe fcb6 	bl	8003b20 <HAL_GetTick>
 80051b4:	0003      	movs	r3, r0
 80051b6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051b8:	e008      	b.n	80051cc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051ba:	f7fe fcb1 	bl	8003b20 <HAL_GetTick>
 80051be:	0002      	movs	r2, r0
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d901      	bls.n	80051cc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	e188      	b.n	80054de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051cc:	4b10      	ldr	r3, [pc, #64]	; (8005210 <HAL_RCC_OscConfig+0x32c>)
 80051ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051d0:	2202      	movs	r2, #2
 80051d2:	4013      	ands	r3, r2
 80051d4:	d1f1      	bne.n	80051ba <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2204      	movs	r2, #4
 80051dc:	4013      	ands	r3, r2
 80051de:	d100      	bne.n	80051e2 <HAL_RCC_OscConfig+0x2fe>
 80051e0:	e0c6      	b.n	8005370 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051e2:	231f      	movs	r3, #31
 80051e4:	18fb      	adds	r3, r7, r3
 80051e6:	2200      	movs	r2, #0
 80051e8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80051ea:	4b09      	ldr	r3, [pc, #36]	; (8005210 <HAL_RCC_OscConfig+0x32c>)
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	2238      	movs	r2, #56	; 0x38
 80051f0:	4013      	ands	r3, r2
 80051f2:	2b20      	cmp	r3, #32
 80051f4:	d11e      	bne.n	8005234 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80051f6:	4b06      	ldr	r3, [pc, #24]	; (8005210 <HAL_RCC_OscConfig+0x32c>)
 80051f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051fa:	2202      	movs	r2, #2
 80051fc:	4013      	ands	r3, r2
 80051fe:	d100      	bne.n	8005202 <HAL_RCC_OscConfig+0x31e>
 8005200:	e0b6      	b.n	8005370 <HAL_RCC_OscConfig+0x48c>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d000      	beq.n	800520c <HAL_RCC_OscConfig+0x328>
 800520a:	e0b1      	b.n	8005370 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e166      	b.n	80054de <HAL_RCC_OscConfig+0x5fa>
 8005210:	40021000 	.word	0x40021000
 8005214:	fffeffff 	.word	0xfffeffff
 8005218:	fffbffff 	.word	0xfffbffff
 800521c:	ffff80ff 	.word	0xffff80ff
 8005220:	ffffc7ff 	.word	0xffffc7ff
 8005224:	00f42400 	.word	0x00f42400
 8005228:	20000004 	.word	0x20000004
 800522c:	20000008 	.word	0x20000008
 8005230:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005234:	4bac      	ldr	r3, [pc, #688]	; (80054e8 <HAL_RCC_OscConfig+0x604>)
 8005236:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005238:	2380      	movs	r3, #128	; 0x80
 800523a:	055b      	lsls	r3, r3, #21
 800523c:	4013      	ands	r3, r2
 800523e:	d101      	bne.n	8005244 <HAL_RCC_OscConfig+0x360>
 8005240:	2301      	movs	r3, #1
 8005242:	e000      	b.n	8005246 <HAL_RCC_OscConfig+0x362>
 8005244:	2300      	movs	r3, #0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d011      	beq.n	800526e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800524a:	4ba7      	ldr	r3, [pc, #668]	; (80054e8 <HAL_RCC_OscConfig+0x604>)
 800524c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800524e:	4ba6      	ldr	r3, [pc, #664]	; (80054e8 <HAL_RCC_OscConfig+0x604>)
 8005250:	2180      	movs	r1, #128	; 0x80
 8005252:	0549      	lsls	r1, r1, #21
 8005254:	430a      	orrs	r2, r1
 8005256:	63da      	str	r2, [r3, #60]	; 0x3c
 8005258:	4ba3      	ldr	r3, [pc, #652]	; (80054e8 <HAL_RCC_OscConfig+0x604>)
 800525a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800525c:	2380      	movs	r3, #128	; 0x80
 800525e:	055b      	lsls	r3, r3, #21
 8005260:	4013      	ands	r3, r2
 8005262:	60fb      	str	r3, [r7, #12]
 8005264:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005266:	231f      	movs	r3, #31
 8005268:	18fb      	adds	r3, r7, r3
 800526a:	2201      	movs	r2, #1
 800526c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800526e:	4b9f      	ldr	r3, [pc, #636]	; (80054ec <HAL_RCC_OscConfig+0x608>)
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	2380      	movs	r3, #128	; 0x80
 8005274:	005b      	lsls	r3, r3, #1
 8005276:	4013      	ands	r3, r2
 8005278:	d11a      	bne.n	80052b0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800527a:	4b9c      	ldr	r3, [pc, #624]	; (80054ec <HAL_RCC_OscConfig+0x608>)
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	4b9b      	ldr	r3, [pc, #620]	; (80054ec <HAL_RCC_OscConfig+0x608>)
 8005280:	2180      	movs	r1, #128	; 0x80
 8005282:	0049      	lsls	r1, r1, #1
 8005284:	430a      	orrs	r2, r1
 8005286:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005288:	f7fe fc4a 	bl	8003b20 <HAL_GetTick>
 800528c:	0003      	movs	r3, r0
 800528e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005290:	e008      	b.n	80052a4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005292:	f7fe fc45 	bl	8003b20 <HAL_GetTick>
 8005296:	0002      	movs	r2, r0
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	2b02      	cmp	r3, #2
 800529e:	d901      	bls.n	80052a4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e11c      	b.n	80054de <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052a4:	4b91      	ldr	r3, [pc, #580]	; (80054ec <HAL_RCC_OscConfig+0x608>)
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	2380      	movs	r3, #128	; 0x80
 80052aa:	005b      	lsls	r3, r3, #1
 80052ac:	4013      	ands	r3, r2
 80052ae:	d0f0      	beq.n	8005292 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d106      	bne.n	80052c6 <HAL_RCC_OscConfig+0x3e2>
 80052b8:	4b8b      	ldr	r3, [pc, #556]	; (80054e8 <HAL_RCC_OscConfig+0x604>)
 80052ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052bc:	4b8a      	ldr	r3, [pc, #552]	; (80054e8 <HAL_RCC_OscConfig+0x604>)
 80052be:	2101      	movs	r1, #1
 80052c0:	430a      	orrs	r2, r1
 80052c2:	65da      	str	r2, [r3, #92]	; 0x5c
 80052c4:	e01c      	b.n	8005300 <HAL_RCC_OscConfig+0x41c>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	2b05      	cmp	r3, #5
 80052cc:	d10c      	bne.n	80052e8 <HAL_RCC_OscConfig+0x404>
 80052ce:	4b86      	ldr	r3, [pc, #536]	; (80054e8 <HAL_RCC_OscConfig+0x604>)
 80052d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052d2:	4b85      	ldr	r3, [pc, #532]	; (80054e8 <HAL_RCC_OscConfig+0x604>)
 80052d4:	2104      	movs	r1, #4
 80052d6:	430a      	orrs	r2, r1
 80052d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80052da:	4b83      	ldr	r3, [pc, #524]	; (80054e8 <HAL_RCC_OscConfig+0x604>)
 80052dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052de:	4b82      	ldr	r3, [pc, #520]	; (80054e8 <HAL_RCC_OscConfig+0x604>)
 80052e0:	2101      	movs	r1, #1
 80052e2:	430a      	orrs	r2, r1
 80052e4:	65da      	str	r2, [r3, #92]	; 0x5c
 80052e6:	e00b      	b.n	8005300 <HAL_RCC_OscConfig+0x41c>
 80052e8:	4b7f      	ldr	r3, [pc, #508]	; (80054e8 <HAL_RCC_OscConfig+0x604>)
 80052ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052ec:	4b7e      	ldr	r3, [pc, #504]	; (80054e8 <HAL_RCC_OscConfig+0x604>)
 80052ee:	2101      	movs	r1, #1
 80052f0:	438a      	bics	r2, r1
 80052f2:	65da      	str	r2, [r3, #92]	; 0x5c
 80052f4:	4b7c      	ldr	r3, [pc, #496]	; (80054e8 <HAL_RCC_OscConfig+0x604>)
 80052f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052f8:	4b7b      	ldr	r3, [pc, #492]	; (80054e8 <HAL_RCC_OscConfig+0x604>)
 80052fa:	2104      	movs	r1, #4
 80052fc:	438a      	bics	r2, r1
 80052fe:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d014      	beq.n	8005332 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005308:	f7fe fc0a 	bl	8003b20 <HAL_GetTick>
 800530c:	0003      	movs	r3, r0
 800530e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005310:	e009      	b.n	8005326 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005312:	f7fe fc05 	bl	8003b20 <HAL_GetTick>
 8005316:	0002      	movs	r2, r0
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	4a74      	ldr	r2, [pc, #464]	; (80054f0 <HAL_RCC_OscConfig+0x60c>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d901      	bls.n	8005326 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e0db      	b.n	80054de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005326:	4b70      	ldr	r3, [pc, #448]	; (80054e8 <HAL_RCC_OscConfig+0x604>)
 8005328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800532a:	2202      	movs	r2, #2
 800532c:	4013      	ands	r3, r2
 800532e:	d0f0      	beq.n	8005312 <HAL_RCC_OscConfig+0x42e>
 8005330:	e013      	b.n	800535a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005332:	f7fe fbf5 	bl	8003b20 <HAL_GetTick>
 8005336:	0003      	movs	r3, r0
 8005338:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800533a:	e009      	b.n	8005350 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800533c:	f7fe fbf0 	bl	8003b20 <HAL_GetTick>
 8005340:	0002      	movs	r2, r0
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	4a6a      	ldr	r2, [pc, #424]	; (80054f0 <HAL_RCC_OscConfig+0x60c>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d901      	bls.n	8005350 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e0c6      	b.n	80054de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005350:	4b65      	ldr	r3, [pc, #404]	; (80054e8 <HAL_RCC_OscConfig+0x604>)
 8005352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005354:	2202      	movs	r2, #2
 8005356:	4013      	ands	r3, r2
 8005358:	d1f0      	bne.n	800533c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800535a:	231f      	movs	r3, #31
 800535c:	18fb      	adds	r3, r7, r3
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	2b01      	cmp	r3, #1
 8005362:	d105      	bne.n	8005370 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005364:	4b60      	ldr	r3, [pc, #384]	; (80054e8 <HAL_RCC_OscConfig+0x604>)
 8005366:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005368:	4b5f      	ldr	r3, [pc, #380]	; (80054e8 <HAL_RCC_OscConfig+0x604>)
 800536a:	4962      	ldr	r1, [pc, #392]	; (80054f4 <HAL_RCC_OscConfig+0x610>)
 800536c:	400a      	ands	r2, r1
 800536e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	69db      	ldr	r3, [r3, #28]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d100      	bne.n	800537a <HAL_RCC_OscConfig+0x496>
 8005378:	e0b0      	b.n	80054dc <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800537a:	4b5b      	ldr	r3, [pc, #364]	; (80054e8 <HAL_RCC_OscConfig+0x604>)
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	2238      	movs	r2, #56	; 0x38
 8005380:	4013      	ands	r3, r2
 8005382:	2b10      	cmp	r3, #16
 8005384:	d100      	bne.n	8005388 <HAL_RCC_OscConfig+0x4a4>
 8005386:	e078      	b.n	800547a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	69db      	ldr	r3, [r3, #28]
 800538c:	2b02      	cmp	r3, #2
 800538e:	d153      	bne.n	8005438 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005390:	4b55      	ldr	r3, [pc, #340]	; (80054e8 <HAL_RCC_OscConfig+0x604>)
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	4b54      	ldr	r3, [pc, #336]	; (80054e8 <HAL_RCC_OscConfig+0x604>)
 8005396:	4958      	ldr	r1, [pc, #352]	; (80054f8 <HAL_RCC_OscConfig+0x614>)
 8005398:	400a      	ands	r2, r1
 800539a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800539c:	f7fe fbc0 	bl	8003b20 <HAL_GetTick>
 80053a0:	0003      	movs	r3, r0
 80053a2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053a4:	e008      	b.n	80053b8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053a6:	f7fe fbbb 	bl	8003b20 <HAL_GetTick>
 80053aa:	0002      	movs	r2, r0
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d901      	bls.n	80053b8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e092      	b.n	80054de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053b8:	4b4b      	ldr	r3, [pc, #300]	; (80054e8 <HAL_RCC_OscConfig+0x604>)
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	2380      	movs	r3, #128	; 0x80
 80053be:	049b      	lsls	r3, r3, #18
 80053c0:	4013      	ands	r3, r2
 80053c2:	d1f0      	bne.n	80053a6 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053c4:	4b48      	ldr	r3, [pc, #288]	; (80054e8 <HAL_RCC_OscConfig+0x604>)
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	4a4c      	ldr	r2, [pc, #304]	; (80054fc <HAL_RCC_OscConfig+0x618>)
 80053ca:	4013      	ands	r3, r2
 80053cc:	0019      	movs	r1, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a1a      	ldr	r2, [r3, #32]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d6:	431a      	orrs	r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053dc:	021b      	lsls	r3, r3, #8
 80053de:	431a      	orrs	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e4:	431a      	orrs	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ea:	431a      	orrs	r2, r3
 80053ec:	4b3e      	ldr	r3, [pc, #248]	; (80054e8 <HAL_RCC_OscConfig+0x604>)
 80053ee:	430a      	orrs	r2, r1
 80053f0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053f2:	4b3d      	ldr	r3, [pc, #244]	; (80054e8 <HAL_RCC_OscConfig+0x604>)
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	4b3c      	ldr	r3, [pc, #240]	; (80054e8 <HAL_RCC_OscConfig+0x604>)
 80053f8:	2180      	movs	r1, #128	; 0x80
 80053fa:	0449      	lsls	r1, r1, #17
 80053fc:	430a      	orrs	r2, r1
 80053fe:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005400:	4b39      	ldr	r3, [pc, #228]	; (80054e8 <HAL_RCC_OscConfig+0x604>)
 8005402:	68da      	ldr	r2, [r3, #12]
 8005404:	4b38      	ldr	r3, [pc, #224]	; (80054e8 <HAL_RCC_OscConfig+0x604>)
 8005406:	2180      	movs	r1, #128	; 0x80
 8005408:	0549      	lsls	r1, r1, #21
 800540a:	430a      	orrs	r2, r1
 800540c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800540e:	f7fe fb87 	bl	8003b20 <HAL_GetTick>
 8005412:	0003      	movs	r3, r0
 8005414:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005416:	e008      	b.n	800542a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005418:	f7fe fb82 	bl	8003b20 <HAL_GetTick>
 800541c:	0002      	movs	r2, r0
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	2b02      	cmp	r3, #2
 8005424:	d901      	bls.n	800542a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e059      	b.n	80054de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800542a:	4b2f      	ldr	r3, [pc, #188]	; (80054e8 <HAL_RCC_OscConfig+0x604>)
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	2380      	movs	r3, #128	; 0x80
 8005430:	049b      	lsls	r3, r3, #18
 8005432:	4013      	ands	r3, r2
 8005434:	d0f0      	beq.n	8005418 <HAL_RCC_OscConfig+0x534>
 8005436:	e051      	b.n	80054dc <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005438:	4b2b      	ldr	r3, [pc, #172]	; (80054e8 <HAL_RCC_OscConfig+0x604>)
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	4b2a      	ldr	r3, [pc, #168]	; (80054e8 <HAL_RCC_OscConfig+0x604>)
 800543e:	492e      	ldr	r1, [pc, #184]	; (80054f8 <HAL_RCC_OscConfig+0x614>)
 8005440:	400a      	ands	r2, r1
 8005442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005444:	f7fe fb6c 	bl	8003b20 <HAL_GetTick>
 8005448:	0003      	movs	r3, r0
 800544a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800544c:	e008      	b.n	8005460 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800544e:	f7fe fb67 	bl	8003b20 <HAL_GetTick>
 8005452:	0002      	movs	r2, r0
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	2b02      	cmp	r3, #2
 800545a:	d901      	bls.n	8005460 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e03e      	b.n	80054de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005460:	4b21      	ldr	r3, [pc, #132]	; (80054e8 <HAL_RCC_OscConfig+0x604>)
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	2380      	movs	r3, #128	; 0x80
 8005466:	049b      	lsls	r3, r3, #18
 8005468:	4013      	ands	r3, r2
 800546a:	d1f0      	bne.n	800544e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800546c:	4b1e      	ldr	r3, [pc, #120]	; (80054e8 <HAL_RCC_OscConfig+0x604>)
 800546e:	68da      	ldr	r2, [r3, #12]
 8005470:	4b1d      	ldr	r3, [pc, #116]	; (80054e8 <HAL_RCC_OscConfig+0x604>)
 8005472:	4923      	ldr	r1, [pc, #140]	; (8005500 <HAL_RCC_OscConfig+0x61c>)
 8005474:	400a      	ands	r2, r1
 8005476:	60da      	str	r2, [r3, #12]
 8005478:	e030      	b.n	80054dc <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	69db      	ldr	r3, [r3, #28]
 800547e:	2b01      	cmp	r3, #1
 8005480:	d101      	bne.n	8005486 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e02b      	b.n	80054de <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005486:	4b18      	ldr	r3, [pc, #96]	; (80054e8 <HAL_RCC_OscConfig+0x604>)
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	2203      	movs	r2, #3
 8005490:	401a      	ands	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a1b      	ldr	r3, [r3, #32]
 8005496:	429a      	cmp	r2, r3
 8005498:	d11e      	bne.n	80054d8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	2270      	movs	r2, #112	; 0x70
 800549e:	401a      	ands	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d117      	bne.n	80054d8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80054a8:	697a      	ldr	r2, [r7, #20]
 80054aa:	23fe      	movs	r3, #254	; 0xfe
 80054ac:	01db      	lsls	r3, r3, #7
 80054ae:	401a      	ands	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d10e      	bne.n	80054d8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	23f8      	movs	r3, #248	; 0xf8
 80054be:	039b      	lsls	r3, r3, #14
 80054c0:	401a      	ands	r2, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d106      	bne.n	80054d8 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	0f5b      	lsrs	r3, r3, #29
 80054ce:	075a      	lsls	r2, r3, #29
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d001      	beq.n	80054dc <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e000      	b.n	80054de <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	0018      	movs	r0, r3
 80054e0:	46bd      	mov	sp, r7
 80054e2:	b008      	add	sp, #32
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	46c0      	nop			; (mov r8, r8)
 80054e8:	40021000 	.word	0x40021000
 80054ec:	40007000 	.word	0x40007000
 80054f0:	00001388 	.word	0x00001388
 80054f4:	efffffff 	.word	0xefffffff
 80054f8:	feffffff 	.word	0xfeffffff
 80054fc:	1fc1808c 	.word	0x1fc1808c
 8005500:	effefffc 	.word	0xeffefffc

08005504 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d101      	bne.n	8005518 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e0e9      	b.n	80056ec <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005518:	4b76      	ldr	r3, [pc, #472]	; (80056f4 <HAL_RCC_ClockConfig+0x1f0>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2207      	movs	r2, #7
 800551e:	4013      	ands	r3, r2
 8005520:	683a      	ldr	r2, [r7, #0]
 8005522:	429a      	cmp	r2, r3
 8005524:	d91e      	bls.n	8005564 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005526:	4b73      	ldr	r3, [pc, #460]	; (80056f4 <HAL_RCC_ClockConfig+0x1f0>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2207      	movs	r2, #7
 800552c:	4393      	bics	r3, r2
 800552e:	0019      	movs	r1, r3
 8005530:	4b70      	ldr	r3, [pc, #448]	; (80056f4 <HAL_RCC_ClockConfig+0x1f0>)
 8005532:	683a      	ldr	r2, [r7, #0]
 8005534:	430a      	orrs	r2, r1
 8005536:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005538:	f7fe faf2 	bl	8003b20 <HAL_GetTick>
 800553c:	0003      	movs	r3, r0
 800553e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005540:	e009      	b.n	8005556 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005542:	f7fe faed 	bl	8003b20 <HAL_GetTick>
 8005546:	0002      	movs	r2, r0
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	4a6a      	ldr	r2, [pc, #424]	; (80056f8 <HAL_RCC_ClockConfig+0x1f4>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d901      	bls.n	8005556 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e0ca      	b.n	80056ec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005556:	4b67      	ldr	r3, [pc, #412]	; (80056f4 <HAL_RCC_ClockConfig+0x1f0>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2207      	movs	r2, #7
 800555c:	4013      	ands	r3, r2
 800555e:	683a      	ldr	r2, [r7, #0]
 8005560:	429a      	cmp	r2, r3
 8005562:	d1ee      	bne.n	8005542 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2202      	movs	r2, #2
 800556a:	4013      	ands	r3, r2
 800556c:	d015      	beq.n	800559a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2204      	movs	r2, #4
 8005574:	4013      	ands	r3, r2
 8005576:	d006      	beq.n	8005586 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005578:	4b60      	ldr	r3, [pc, #384]	; (80056fc <HAL_RCC_ClockConfig+0x1f8>)
 800557a:	689a      	ldr	r2, [r3, #8]
 800557c:	4b5f      	ldr	r3, [pc, #380]	; (80056fc <HAL_RCC_ClockConfig+0x1f8>)
 800557e:	21e0      	movs	r1, #224	; 0xe0
 8005580:	01c9      	lsls	r1, r1, #7
 8005582:	430a      	orrs	r2, r1
 8005584:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005586:	4b5d      	ldr	r3, [pc, #372]	; (80056fc <HAL_RCC_ClockConfig+0x1f8>)
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	4a5d      	ldr	r2, [pc, #372]	; (8005700 <HAL_RCC_ClockConfig+0x1fc>)
 800558c:	4013      	ands	r3, r2
 800558e:	0019      	movs	r1, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	689a      	ldr	r2, [r3, #8]
 8005594:	4b59      	ldr	r3, [pc, #356]	; (80056fc <HAL_RCC_ClockConfig+0x1f8>)
 8005596:	430a      	orrs	r2, r1
 8005598:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2201      	movs	r2, #1
 80055a0:	4013      	ands	r3, r2
 80055a2:	d057      	beq.n	8005654 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d107      	bne.n	80055bc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055ac:	4b53      	ldr	r3, [pc, #332]	; (80056fc <HAL_RCC_ClockConfig+0x1f8>)
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	2380      	movs	r3, #128	; 0x80
 80055b2:	029b      	lsls	r3, r3, #10
 80055b4:	4013      	ands	r3, r2
 80055b6:	d12b      	bne.n	8005610 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e097      	b.n	80056ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d107      	bne.n	80055d4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055c4:	4b4d      	ldr	r3, [pc, #308]	; (80056fc <HAL_RCC_ClockConfig+0x1f8>)
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	2380      	movs	r3, #128	; 0x80
 80055ca:	049b      	lsls	r3, r3, #18
 80055cc:	4013      	ands	r3, r2
 80055ce:	d11f      	bne.n	8005610 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e08b      	b.n	80056ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d107      	bne.n	80055ec <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055dc:	4b47      	ldr	r3, [pc, #284]	; (80056fc <HAL_RCC_ClockConfig+0x1f8>)
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	2380      	movs	r3, #128	; 0x80
 80055e2:	00db      	lsls	r3, r3, #3
 80055e4:	4013      	ands	r3, r2
 80055e6:	d113      	bne.n	8005610 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e07f      	b.n	80056ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	2b03      	cmp	r3, #3
 80055f2:	d106      	bne.n	8005602 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055f4:	4b41      	ldr	r3, [pc, #260]	; (80056fc <HAL_RCC_ClockConfig+0x1f8>)
 80055f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055f8:	2202      	movs	r2, #2
 80055fa:	4013      	ands	r3, r2
 80055fc:	d108      	bne.n	8005610 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e074      	b.n	80056ec <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005602:	4b3e      	ldr	r3, [pc, #248]	; (80056fc <HAL_RCC_ClockConfig+0x1f8>)
 8005604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005606:	2202      	movs	r2, #2
 8005608:	4013      	ands	r3, r2
 800560a:	d101      	bne.n	8005610 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e06d      	b.n	80056ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005610:	4b3a      	ldr	r3, [pc, #232]	; (80056fc <HAL_RCC_ClockConfig+0x1f8>)
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	2207      	movs	r2, #7
 8005616:	4393      	bics	r3, r2
 8005618:	0019      	movs	r1, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685a      	ldr	r2, [r3, #4]
 800561e:	4b37      	ldr	r3, [pc, #220]	; (80056fc <HAL_RCC_ClockConfig+0x1f8>)
 8005620:	430a      	orrs	r2, r1
 8005622:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005624:	f7fe fa7c 	bl	8003b20 <HAL_GetTick>
 8005628:	0003      	movs	r3, r0
 800562a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800562c:	e009      	b.n	8005642 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800562e:	f7fe fa77 	bl	8003b20 <HAL_GetTick>
 8005632:	0002      	movs	r2, r0
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	4a2f      	ldr	r2, [pc, #188]	; (80056f8 <HAL_RCC_ClockConfig+0x1f4>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d901      	bls.n	8005642 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e054      	b.n	80056ec <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005642:	4b2e      	ldr	r3, [pc, #184]	; (80056fc <HAL_RCC_ClockConfig+0x1f8>)
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	2238      	movs	r2, #56	; 0x38
 8005648:	401a      	ands	r2, r3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	00db      	lsls	r3, r3, #3
 8005650:	429a      	cmp	r2, r3
 8005652:	d1ec      	bne.n	800562e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005654:	4b27      	ldr	r3, [pc, #156]	; (80056f4 <HAL_RCC_ClockConfig+0x1f0>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2207      	movs	r2, #7
 800565a:	4013      	ands	r3, r2
 800565c:	683a      	ldr	r2, [r7, #0]
 800565e:	429a      	cmp	r2, r3
 8005660:	d21e      	bcs.n	80056a0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005662:	4b24      	ldr	r3, [pc, #144]	; (80056f4 <HAL_RCC_ClockConfig+0x1f0>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2207      	movs	r2, #7
 8005668:	4393      	bics	r3, r2
 800566a:	0019      	movs	r1, r3
 800566c:	4b21      	ldr	r3, [pc, #132]	; (80056f4 <HAL_RCC_ClockConfig+0x1f0>)
 800566e:	683a      	ldr	r2, [r7, #0]
 8005670:	430a      	orrs	r2, r1
 8005672:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005674:	f7fe fa54 	bl	8003b20 <HAL_GetTick>
 8005678:	0003      	movs	r3, r0
 800567a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800567c:	e009      	b.n	8005692 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800567e:	f7fe fa4f 	bl	8003b20 <HAL_GetTick>
 8005682:	0002      	movs	r2, r0
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	4a1b      	ldr	r2, [pc, #108]	; (80056f8 <HAL_RCC_ClockConfig+0x1f4>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d901      	bls.n	8005692 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e02c      	b.n	80056ec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005692:	4b18      	ldr	r3, [pc, #96]	; (80056f4 <HAL_RCC_ClockConfig+0x1f0>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2207      	movs	r2, #7
 8005698:	4013      	ands	r3, r2
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	429a      	cmp	r2, r3
 800569e:	d1ee      	bne.n	800567e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2204      	movs	r2, #4
 80056a6:	4013      	ands	r3, r2
 80056a8:	d009      	beq.n	80056be <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80056aa:	4b14      	ldr	r3, [pc, #80]	; (80056fc <HAL_RCC_ClockConfig+0x1f8>)
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	4a15      	ldr	r2, [pc, #84]	; (8005704 <HAL_RCC_ClockConfig+0x200>)
 80056b0:	4013      	ands	r3, r2
 80056b2:	0019      	movs	r1, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	68da      	ldr	r2, [r3, #12]
 80056b8:	4b10      	ldr	r3, [pc, #64]	; (80056fc <HAL_RCC_ClockConfig+0x1f8>)
 80056ba:	430a      	orrs	r2, r1
 80056bc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80056be:	f000 f829 	bl	8005714 <HAL_RCC_GetSysClockFreq>
 80056c2:	0001      	movs	r1, r0
 80056c4:	4b0d      	ldr	r3, [pc, #52]	; (80056fc <HAL_RCC_ClockConfig+0x1f8>)
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	0a1b      	lsrs	r3, r3, #8
 80056ca:	220f      	movs	r2, #15
 80056cc:	401a      	ands	r2, r3
 80056ce:	4b0e      	ldr	r3, [pc, #56]	; (8005708 <HAL_RCC_ClockConfig+0x204>)
 80056d0:	0092      	lsls	r2, r2, #2
 80056d2:	58d3      	ldr	r3, [r2, r3]
 80056d4:	221f      	movs	r2, #31
 80056d6:	4013      	ands	r3, r2
 80056d8:	000a      	movs	r2, r1
 80056da:	40da      	lsrs	r2, r3
 80056dc:	4b0b      	ldr	r3, [pc, #44]	; (800570c <HAL_RCC_ClockConfig+0x208>)
 80056de:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80056e0:	4b0b      	ldr	r3, [pc, #44]	; (8005710 <HAL_RCC_ClockConfig+0x20c>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	0018      	movs	r0, r3
 80056e6:	f7fe f9bf 	bl	8003a68 <HAL_InitTick>
 80056ea:	0003      	movs	r3, r0
}
 80056ec:	0018      	movs	r0, r3
 80056ee:	46bd      	mov	sp, r7
 80056f0:	b004      	add	sp, #16
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	40022000 	.word	0x40022000
 80056f8:	00001388 	.word	0x00001388
 80056fc:	40021000 	.word	0x40021000
 8005700:	fffff0ff 	.word	0xfffff0ff
 8005704:	ffff8fff 	.word	0xffff8fff
 8005708:	08005948 	.word	0x08005948
 800570c:	20000004 	.word	0x20000004
 8005710:	20000008 	.word	0x20000008

08005714 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b086      	sub	sp, #24
 8005718:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800571a:	4b3c      	ldr	r3, [pc, #240]	; (800580c <HAL_RCC_GetSysClockFreq+0xf8>)
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	2238      	movs	r2, #56	; 0x38
 8005720:	4013      	ands	r3, r2
 8005722:	d10f      	bne.n	8005744 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005724:	4b39      	ldr	r3, [pc, #228]	; (800580c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	0adb      	lsrs	r3, r3, #11
 800572a:	2207      	movs	r2, #7
 800572c:	4013      	ands	r3, r2
 800572e:	2201      	movs	r2, #1
 8005730:	409a      	lsls	r2, r3
 8005732:	0013      	movs	r3, r2
 8005734:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005736:	6839      	ldr	r1, [r7, #0]
 8005738:	4835      	ldr	r0, [pc, #212]	; (8005810 <HAL_RCC_GetSysClockFreq+0xfc>)
 800573a:	f7fa fce1 	bl	8000100 <__udivsi3>
 800573e:	0003      	movs	r3, r0
 8005740:	613b      	str	r3, [r7, #16]
 8005742:	e05d      	b.n	8005800 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005744:	4b31      	ldr	r3, [pc, #196]	; (800580c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	2238      	movs	r2, #56	; 0x38
 800574a:	4013      	ands	r3, r2
 800574c:	2b08      	cmp	r3, #8
 800574e:	d102      	bne.n	8005756 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005750:	4b30      	ldr	r3, [pc, #192]	; (8005814 <HAL_RCC_GetSysClockFreq+0x100>)
 8005752:	613b      	str	r3, [r7, #16]
 8005754:	e054      	b.n	8005800 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005756:	4b2d      	ldr	r3, [pc, #180]	; (800580c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	2238      	movs	r2, #56	; 0x38
 800575c:	4013      	ands	r3, r2
 800575e:	2b10      	cmp	r3, #16
 8005760:	d138      	bne.n	80057d4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005762:	4b2a      	ldr	r3, [pc, #168]	; (800580c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	2203      	movs	r2, #3
 8005768:	4013      	ands	r3, r2
 800576a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800576c:	4b27      	ldr	r3, [pc, #156]	; (800580c <HAL_RCC_GetSysClockFreq+0xf8>)
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	091b      	lsrs	r3, r3, #4
 8005772:	2207      	movs	r2, #7
 8005774:	4013      	ands	r3, r2
 8005776:	3301      	adds	r3, #1
 8005778:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2b03      	cmp	r3, #3
 800577e:	d10d      	bne.n	800579c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005780:	68b9      	ldr	r1, [r7, #8]
 8005782:	4824      	ldr	r0, [pc, #144]	; (8005814 <HAL_RCC_GetSysClockFreq+0x100>)
 8005784:	f7fa fcbc 	bl	8000100 <__udivsi3>
 8005788:	0003      	movs	r3, r0
 800578a:	0019      	movs	r1, r3
 800578c:	4b1f      	ldr	r3, [pc, #124]	; (800580c <HAL_RCC_GetSysClockFreq+0xf8>)
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	0a1b      	lsrs	r3, r3, #8
 8005792:	227f      	movs	r2, #127	; 0x7f
 8005794:	4013      	ands	r3, r2
 8005796:	434b      	muls	r3, r1
 8005798:	617b      	str	r3, [r7, #20]
        break;
 800579a:	e00d      	b.n	80057b8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800579c:	68b9      	ldr	r1, [r7, #8]
 800579e:	481c      	ldr	r0, [pc, #112]	; (8005810 <HAL_RCC_GetSysClockFreq+0xfc>)
 80057a0:	f7fa fcae 	bl	8000100 <__udivsi3>
 80057a4:	0003      	movs	r3, r0
 80057a6:	0019      	movs	r1, r3
 80057a8:	4b18      	ldr	r3, [pc, #96]	; (800580c <HAL_RCC_GetSysClockFreq+0xf8>)
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	0a1b      	lsrs	r3, r3, #8
 80057ae:	227f      	movs	r2, #127	; 0x7f
 80057b0:	4013      	ands	r3, r2
 80057b2:	434b      	muls	r3, r1
 80057b4:	617b      	str	r3, [r7, #20]
        break;
 80057b6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80057b8:	4b14      	ldr	r3, [pc, #80]	; (800580c <HAL_RCC_GetSysClockFreq+0xf8>)
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	0f5b      	lsrs	r3, r3, #29
 80057be:	2207      	movs	r2, #7
 80057c0:	4013      	ands	r3, r2
 80057c2:	3301      	adds	r3, #1
 80057c4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80057c6:	6879      	ldr	r1, [r7, #4]
 80057c8:	6978      	ldr	r0, [r7, #20]
 80057ca:	f7fa fc99 	bl	8000100 <__udivsi3>
 80057ce:	0003      	movs	r3, r0
 80057d0:	613b      	str	r3, [r7, #16]
 80057d2:	e015      	b.n	8005800 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80057d4:	4b0d      	ldr	r3, [pc, #52]	; (800580c <HAL_RCC_GetSysClockFreq+0xf8>)
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	2238      	movs	r2, #56	; 0x38
 80057da:	4013      	ands	r3, r2
 80057dc:	2b20      	cmp	r3, #32
 80057de:	d103      	bne.n	80057e8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80057e0:	2380      	movs	r3, #128	; 0x80
 80057e2:	021b      	lsls	r3, r3, #8
 80057e4:	613b      	str	r3, [r7, #16]
 80057e6:	e00b      	b.n	8005800 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80057e8:	4b08      	ldr	r3, [pc, #32]	; (800580c <HAL_RCC_GetSysClockFreq+0xf8>)
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	2238      	movs	r2, #56	; 0x38
 80057ee:	4013      	ands	r3, r2
 80057f0:	2b18      	cmp	r3, #24
 80057f2:	d103      	bne.n	80057fc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80057f4:	23fa      	movs	r3, #250	; 0xfa
 80057f6:	01db      	lsls	r3, r3, #7
 80057f8:	613b      	str	r3, [r7, #16]
 80057fa:	e001      	b.n	8005800 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80057fc:	2300      	movs	r3, #0
 80057fe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005800:	693b      	ldr	r3, [r7, #16]
}
 8005802:	0018      	movs	r0, r3
 8005804:	46bd      	mov	sp, r7
 8005806:	b006      	add	sp, #24
 8005808:	bd80      	pop	{r7, pc}
 800580a:	46c0      	nop			; (mov r8, r8)
 800580c:	40021000 	.word	0x40021000
 8005810:	00f42400 	.word	0x00f42400
 8005814:	007a1200 	.word	0x007a1200

08005818 <memset>:
 8005818:	0003      	movs	r3, r0
 800581a:	1882      	adds	r2, r0, r2
 800581c:	4293      	cmp	r3, r2
 800581e:	d100      	bne.n	8005822 <memset+0xa>
 8005820:	4770      	bx	lr
 8005822:	7019      	strb	r1, [r3, #0]
 8005824:	3301      	adds	r3, #1
 8005826:	e7f9      	b.n	800581c <memset+0x4>

08005828 <__libc_init_array>:
 8005828:	b570      	push	{r4, r5, r6, lr}
 800582a:	2600      	movs	r6, #0
 800582c:	4c0c      	ldr	r4, [pc, #48]	; (8005860 <__libc_init_array+0x38>)
 800582e:	4d0d      	ldr	r5, [pc, #52]	; (8005864 <__libc_init_array+0x3c>)
 8005830:	1b64      	subs	r4, r4, r5
 8005832:	10a4      	asrs	r4, r4, #2
 8005834:	42a6      	cmp	r6, r4
 8005836:	d109      	bne.n	800584c <__libc_init_array+0x24>
 8005838:	2600      	movs	r6, #0
 800583a:	f000 f819 	bl	8005870 <_init>
 800583e:	4c0a      	ldr	r4, [pc, #40]	; (8005868 <__libc_init_array+0x40>)
 8005840:	4d0a      	ldr	r5, [pc, #40]	; (800586c <__libc_init_array+0x44>)
 8005842:	1b64      	subs	r4, r4, r5
 8005844:	10a4      	asrs	r4, r4, #2
 8005846:	42a6      	cmp	r6, r4
 8005848:	d105      	bne.n	8005856 <__libc_init_array+0x2e>
 800584a:	bd70      	pop	{r4, r5, r6, pc}
 800584c:	00b3      	lsls	r3, r6, #2
 800584e:	58eb      	ldr	r3, [r5, r3]
 8005850:	4798      	blx	r3
 8005852:	3601      	adds	r6, #1
 8005854:	e7ee      	b.n	8005834 <__libc_init_array+0xc>
 8005856:	00b3      	lsls	r3, r6, #2
 8005858:	58eb      	ldr	r3, [r5, r3]
 800585a:	4798      	blx	r3
 800585c:	3601      	adds	r6, #1
 800585e:	e7f2      	b.n	8005846 <__libc_init_array+0x1e>
 8005860:	08005988 	.word	0x08005988
 8005864:	08005988 	.word	0x08005988
 8005868:	0800598c 	.word	0x0800598c
 800586c:	08005988 	.word	0x08005988

08005870 <_init>:
 8005870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005872:	46c0      	nop			; (mov r8, r8)
 8005874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005876:	bc08      	pop	{r3}
 8005878:	469e      	mov	lr, r3
 800587a:	4770      	bx	lr

0800587c <_fini>:
 800587c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800587e:	46c0      	nop			; (mov r8, r8)
 8005880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005882:	bc08      	pop	{r3}
 8005884:	469e      	mov	lr, r3
 8005886:	4770      	bx	lr
