
PORTABLE DIGITAL SOURCE2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081b8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000239c  08008388  08008388  00018388  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a724  0800a724  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a724  0800a724  0001a724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a72c  0800a72c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a72c  0800a72c  0001a72c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a730  0800a730  0001a730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800a734  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  200001e4  0800a918  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  0800a918  0002033c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010463  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002529  00000000  00000000  00030677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  00032ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e10  00000000  00000000  00033ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024887  00000000  00000000  000348e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001387f  00000000  00000000  00059167  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df1df  00000000  00000000  0006c9e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014bbc5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005154  00000000  00000000  0014bc18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008370 	.word	0x08008370

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	08008370 	.word	0x08008370

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <ADS1115_Read>:
/* Private macros ------------------------------------------------------------*/
/* Variables -----------------------------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
/* Exported functions --------------------------------------------------------*/

int16_t ADS1115_Read(uint8_t canal){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af02      	add	r7, sp, #8
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
    int16_t dato;
    uint8_t MSB;

	uint8_t datos[3];

	datos[0]  = ADS1115_REG_CONFIG;//apunto al registro de configuracion
 8000f96:	2301      	movs	r3, #1
 8000f98:	723b      	strb	r3, [r7, #8]

    switch(canal){
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	2b03      	cmp	r3, #3
 8000f9e:	d817      	bhi.n	8000fd0 <ADS1115_Read+0x44>
 8000fa0:	a201      	add	r2, pc, #4	; (adr r2, 8000fa8 <ADS1115_Read+0x1c>)
 8000fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa6:	bf00      	nop
 8000fa8:	08000fb9 	.word	0x08000fb9
 8000fac:	08000fbf 	.word	0x08000fbf
 8000fb0:	08000fc5 	.word	0x08000fc5
 8000fb4:	08000fcb 	.word	0x08000fcb
        //  OS  CH PGA MODE
        //   1 100 000  1
        case 0: MSB = 0b11000101; break;  //AN0  PGA 2.048V  VOLTAJE
 8000fb8:	23c5      	movs	r3, #197	; 0xc5
 8000fba:	73fb      	strb	r3, [r7, #15]
 8000fbc:	e008      	b.n	8000fd0 <ADS1115_Read+0x44>
        case 1: MSB = 0b11011111; break;  //AN1  PGA 0.256V  CORRIENTE
 8000fbe:	23df      	movs	r3, #223	; 0xdf
 8000fc0:	73fb      	strb	r3, [r7, #15]
 8000fc2:	e005      	b.n	8000fd0 <ADS1115_Read+0x44>
        case 2: MSB = 0b11100101; break;  //AN2  PGA 2.048V  BATERIA
 8000fc4:	23e5      	movs	r3, #229	; 0xe5
 8000fc6:	73fb      	strb	r3, [r7, #15]
 8000fc8:	e002      	b.n	8000fd0 <ADS1115_Read+0x44>
        case 3: MSB = 0b11110101; break;} //AN3  PGA 6.144V
 8000fca:	23f5      	movs	r3, #245	; 0xf5
 8000fcc:	73fb      	strb	r3, [r7, #15]
 8000fce:	bf00      	nop

    //PGA: +-6.144V, AIN+ = AINX and AIN- = GND, MODO CONVERSION CONTINUA
    datos[1]  = MSB;//MSB del registro de connfiguracion
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
 8000fd2:	727b      	strb	r3, [r7, #9]

    //128 SPS, Traditional comparator, active low, nonlatching, dis. ALERT/RDY
    datos[2]  = 0b11100011;//LSB del registro de connfiguracion
 8000fd4:	23e3      	movs	r3, #227	; 0xe3
 8000fd6:	72bb      	strb	r3, [r7, #10]

    HAL_I2C_Master_Transmit (&hi2c1, ADS1115_I2C_ADDRESS_WRITE, (uint8_t*)datos, 3, 100);//mando la direccion 0x48 + el bit de escritura
 8000fd8:	f107 0208 	add.w	r2, r7, #8
 8000fdc:	2364      	movs	r3, #100	; 0x64
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	2190      	movs	r1, #144	; 0x90
 8000fe4:	4814      	ldr	r0, [pc, #80]	; (8001038 <ADS1115_Read+0xac>)
 8000fe6:	f002 fbed 	bl	80037c4 <HAL_I2C_Master_Transmit>

    HAL_Delay(8);  //tiempo minimo para volver a comunicarse
 8000fea:	2008      	movs	r0, #8
 8000fec:	f001 fd38 	bl	8002a60 <HAL_Delay>

    //Escribo o direcciono al registro de conversion
    datos[0] = ADS1115_REG_CONVER;//apunto al registro de conversion
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	723b      	strb	r3, [r7, #8]

    HAL_I2C_Master_Transmit (&hi2c1, ADS1115_I2C_ADDRESS_WRITE, (uint8_t*)datos, 1, 100);//mando la direccion 0x48 + el bit de escritura
 8000ff4:	f107 0208 	add.w	r2, r7, #8
 8000ff8:	2364      	movs	r3, #100	; 0x64
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	2190      	movs	r1, #144	; 0x90
 8001000:	480d      	ldr	r0, [pc, #52]	; (8001038 <ADS1115_Read+0xac>)
 8001002:	f002 fbdf 	bl	80037c4 <HAL_I2C_Master_Transmit>


    //Ya que estoy dentro del registro de conversion aqui LEO

    HAL_I2C_Master_Receive(&hi2c1, ADS1115_I2C_ADDRESS_READ, (uint8_t*)datos, 2, 100);//mando la direccion 0x48 + el bit de lectura
 8001006:	f107 0208 	add.w	r2, r7, #8
 800100a:	2364      	movs	r3, #100	; 0x64
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	2302      	movs	r3, #2
 8001010:	2191      	movs	r1, #145	; 0x91
 8001012:	4809      	ldr	r0, [pc, #36]	; (8001038 <ADS1115_Read+0xac>)
 8001014:	f002 fcd4 	bl	80039c0 <HAL_I2C_Master_Receive>


    dato = ((datos[0]<<8)|datos[1]);
 8001018:	7a3b      	ldrb	r3, [r7, #8]
 800101a:	021b      	lsls	r3, r3, #8
 800101c:	b21a      	sxth	r2, r3
 800101e:	7a7b      	ldrb	r3, [r7, #9]
 8001020:	b21b      	sxth	r3, r3
 8001022:	4313      	orrs	r3, r2
 8001024:	81bb      	strh	r3, [r7, #12]

    HAL_Delay(8);  //tiempo minimo para volver a comunicarse
 8001026:	2008      	movs	r0, #8
 8001028:	f001 fd1a 	bl	8002a60 <HAL_Delay>
    return dato;
 800102c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
}
 8001030:	4618      	mov	r0, r3
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000250 	.word	0x20000250

0800103c <Encoder_Run>:
float valor_Encoder   = 2040;//valor inicial del encoder 3100

/* Private functions ---------------------------------------------------------*/

/* Exported functions --------------------------------------------------------*/
float Encoder_Run(void){
 800103c:	b598      	push	{r3, r4, r7, lr}
 800103e:	af00      	add	r7, sp, #0
    //FUNCION PARA LEER EL ENCODER ROTATIVOS, me base de aqui: https://www.youtube.com/watch?v=6c5nL2tcCs0&t=607s
    bit_actual = ((HAL_GPIO_ReadPin(DT_GPIO_Port, DT_Pin) << 1) | HAL_GPIO_ReadPin(CLK_GPIO_Port, CLK_Pin));                  //convierto a 'uint8_t' el valor ya que al compilar me daba un warning "la conversión implícita pierde precisión entera: 'int' a 'uint8_t'"
 8001040:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001044:	4830      	ldr	r0, [pc, #192]	; (8001108 <Encoder_Run+0xcc>)
 8001046:	f002 fa47 	bl	80034d8 <HAL_GPIO_ReadPin>
 800104a:	4603      	mov	r3, r0
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	b25c      	sxtb	r4, r3
 8001050:	2110      	movs	r1, #16
 8001052:	482d      	ldr	r0, [pc, #180]	; (8001108 <Encoder_Run+0xcc>)
 8001054:	f002 fa40 	bl	80034d8 <HAL_GPIO_ReadPin>
 8001058:	4603      	mov	r3, r0
 800105a:	b25b      	sxtb	r3, r3
 800105c:	4323      	orrs	r3, r4
 800105e:	b25b      	sxtb	r3, r3
 8001060:	b2da      	uxtb	r2, r3
 8001062:	4b2a      	ldr	r3, [pc, #168]	; (800110c <Encoder_Run+0xd0>)
 8001064:	701a      	strb	r2, [r3, #0]
    bit_armado = ((bit_anterior << 2) | bit_actual);
 8001066:	4b2a      	ldr	r3, [pc, #168]	; (8001110 <Encoder_Run+0xd4>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	b25a      	sxtb	r2, r3
 800106e:	4b27      	ldr	r3, [pc, #156]	; (800110c <Encoder_Run+0xd0>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	b25b      	sxtb	r3, r3
 8001074:	4313      	orrs	r3, r2
 8001076:	b25b      	sxtb	r3, r3
 8001078:	b2da      	uxtb	r2, r3
 800107a:	4b26      	ldr	r3, [pc, #152]	; (8001114 <Encoder_Run+0xd8>)
 800107c:	701a      	strb	r2, [r3, #0]
    bit_anterior = bit_actual;
 800107e:	4b23      	ldr	r3, [pc, #140]	; (800110c <Encoder_Run+0xd0>)
 8001080:	781a      	ldrb	r2, [r3, #0]
 8001082:	4b23      	ldr	r3, [pc, #140]	; (8001110 <Encoder_Run+0xd4>)
 8001084:	701a      	strb	r2, [r3, #0]

    //Lectura de encoder rotativo de 20 posiciones
    if(bit_armado==14) valor_Encoder-=10;//horario
 8001086:	4b23      	ldr	r3, [pc, #140]	; (8001114 <Encoder_Run+0xd8>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b0e      	cmp	r3, #14
 800108c:	d109      	bne.n	80010a2 <Encoder_Run+0x66>
 800108e:	4b22      	ldr	r3, [pc, #136]	; (8001118 <Encoder_Run+0xdc>)
 8001090:	edd3 7a00 	vldr	s15, [r3]
 8001094:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001098:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800109c:	4b1e      	ldr	r3, [pc, #120]	; (8001118 <Encoder_Run+0xdc>)
 800109e:	edc3 7a00 	vstr	s15, [r3]
    if(bit_armado==4)  valor_Encoder+=10;//antihorario
 80010a2:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <Encoder_Run+0xd8>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b04      	cmp	r3, #4
 80010a8:	d109      	bne.n	80010be <Encoder_Run+0x82>
 80010aa:	4b1b      	ldr	r3, [pc, #108]	; (8001118 <Encoder_Run+0xdc>)
 80010ac:	edd3 7a00 	vldr	s15, [r3]
 80010b0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80010b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010b8:	4b17      	ldr	r3, [pc, #92]	; (8001118 <Encoder_Run+0xdc>)
 80010ba:	edc3 7a00 	vstr	s15, [r3]

    //Lectura de encoder rotativo de 30 posiciones
    //if( (bit_armado==14)||(bit_armado==7) ) valor_Encoder+=10;//horario
    //if( (bit_armado==4) ||(bit_armado==2) ) valor_Encoder-=10;//antihorario

    if(valor_Encoder <= val_Min_Encoder) valor_Encoder = val_Min_Encoder;
 80010be:	4b16      	ldr	r3, [pc, #88]	; (8001118 <Encoder_Run+0xdc>)
 80010c0:	ed93 7a00 	vldr	s14, [r3]
 80010c4:	4b15      	ldr	r3, [pc, #84]	; (800111c <Encoder_Run+0xe0>)
 80010c6:	edd3 7a00 	vldr	s15, [r3]
 80010ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d2:	d803      	bhi.n	80010dc <Encoder_Run+0xa0>
 80010d4:	4b11      	ldr	r3, [pc, #68]	; (800111c <Encoder_Run+0xe0>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a0f      	ldr	r2, [pc, #60]	; (8001118 <Encoder_Run+0xdc>)
 80010da:	6013      	str	r3, [r2, #0]
    if(valor_Encoder >= val_Max_Encoder) valor_Encoder = val_Max_Encoder;
 80010dc:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <Encoder_Run+0xdc>)
 80010de:	ed93 7a00 	vldr	s14, [r3]
 80010e2:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <Encoder_Run+0xe4>)
 80010e4:	edd3 7a00 	vldr	s15, [r3]
 80010e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f0:	db03      	blt.n	80010fa <Encoder_Run+0xbe>
 80010f2:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <Encoder_Run+0xe4>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a08      	ldr	r2, [pc, #32]	; (8001118 <Encoder_Run+0xdc>)
 80010f8:	6013      	str	r3, [r2, #0]

    return valor_Encoder;
 80010fa:	4b07      	ldr	r3, [pc, #28]	; (8001118 <Encoder_Run+0xdc>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	ee07 3a90 	vmov	s15, r3
}
 8001102:	eeb0 0a67 	vmov.f32	s0, s15
 8001106:	bd98      	pop	{r3, r4, r7, pc}
 8001108:	40020400 	.word	0x40020400
 800110c:	20000201 	.word	0x20000201
 8001110:	20000200 	.word	0x20000200
 8001114:	20000202 	.word	0x20000202
 8001118:	20000004 	.word	0x20000004
 800111c:	20000204 	.word	0x20000204
 8001120:	20000000 	.word	0x20000000

08001124 <MCP4725_Out>:
	datos[2]=( (uint8_t)((out & 0b1111)<<4) ); //byte armado = "11000000"

	HAL_I2C_Master_Transmit (&hi2c1, MCP4725_I2C_ADDRESS_WRITE, (uint8_t*)datos, 3, 100);//mando la direccion 0x48 + el bit de escritura
}

void MCP4725_Out(uint16_t out){
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af02      	add	r7, sp, #8
 800112a:	4603      	mov	r3, r0
 800112c:	80fb      	strh	r3, [r7, #6]
	uint8_t datos[3];

	//mando comando de escritura 010(C2=0, C1=1, C0=0) "Write DAC Register" para cargar bits de configuración y código de datos en el registro DAC
	//mando 00=XX + Modo Normal 00 (PD1=0, PD0=0) + 0=X
	datos[0]=0b01000000;
 800112e:	2340      	movs	r3, #64	; 0x40
 8001130:	733b      	strb	r3, [r7, #12]

	//mando el dato en formato de 12bits ejemplo: numero = 0b111100001100
	datos[1]=((uint8_t)(out >> 4));
 8001132:	88fb      	ldrh	r3, [r7, #6]
 8001134:	091b      	lsrs	r3, r3, #4
 8001136:	b29b      	uxth	r3, r3
 8001138:	b2db      	uxtb	r3, r3
 800113a:	737b      	strb	r3, [r7, #13]

	//mando los 4 bits restantes(del bit3 al bit0) "1100", y armo un byte(8bits) rellenando con ceros lo demas.
	datos[2]=( (uint8_t)((out & 0b1111)<<4) ); //byte armado = "11000000"
 800113c:	88fb      	ldrh	r3, [r7, #6]
 800113e:	b2db      	uxtb	r3, r3
 8001140:	011b      	lsls	r3, r3, #4
 8001142:	b2db      	uxtb	r3, r3
 8001144:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Master_Transmit (&hi2c1, MCP4725_I2C_ADDRESS_WRITE, (uint8_t*)datos, 3, 100);//mando la direccion 0x48 + el bit de escritura
 8001146:	f107 020c 	add.w	r2, r7, #12
 800114a:	2364      	movs	r3, #100	; 0x64
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	2303      	movs	r3, #3
 8001150:	21c0      	movs	r1, #192	; 0xc0
 8001152:	4803      	ldr	r0, [pc, #12]	; (8001160 <MCP4725_Out+0x3c>)
 8001154:	f002 fb36 	bl	80037c4 <HAL_I2C_Master_Transmit>
}
 8001158:	bf00      	nop
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000250 	.word	0x20000250

08001164 <OLED_Init>:
	//0b01000000 = 0x40

//Funcion para mandar un byte de datos que actuara como "comando" o "dato"


void OLED_Init(void){
 8001164:	b580      	push	{r7, lr}
 8001166:	b08a      	sub	sp, #40	; 0x28
 8001168:	af02      	add	r7, sp, #8

	uint8_t datos[26];

	datos[0]  = CMD;
 800116a:	2300      	movs	r3, #0
 800116c:	713b      	strb	r3, [r7, #4]
	datos[1]  = SSD1306_DISPLAYOFF;//0xAE
 800116e:	23ae      	movs	r3, #174	; 0xae
 8001170:	717b      	strb	r3, [r7, #5]
	datos[2]  = SSD1306_SETDISPLAYCLOCKDIV;   //0xD5;
 8001172:	23d5      	movs	r3, #213	; 0xd5
 8001174:	71bb      	strb	r3, [r7, #6]
	datos[3]  = 0x80;//0x80
 8001176:	2380      	movs	r3, #128	; 0x80
 8001178:	71fb      	strb	r3, [r7, #7]
	datos[4]  = SSD1306_SETMULTIPLEX;//0xA8
 800117a:	23a8      	movs	r3, #168	; 0xa8
 800117c:	723b      	strb	r3, [r7, #8]
	datos[5]  = (SSD1306_LCDHEIGHT-1);		   //0x3F  ----> 64 (0-63) valores 63=0x3F
 800117e:	231f      	movs	r3, #31
 8001180:	727b      	strb	r3, [r7, #9]
	datos[6]  = SSD1306_SETDISPLAYOFFSET;     //0xD3
 8001182:	23d3      	movs	r3, #211	; 0xd3
 8001184:	72bb      	strb	r3, [r7, #10]
	datos[7]  = 0x00;						   //0x00
 8001186:	2300      	movs	r3, #0
 8001188:	72fb      	strb	r3, [r7, #11]
	datos[8]  = (SSD1306_SETSTARTLINE | 0x00);  //0x40 ----> empezamos en la linea cero
 800118a:	2340      	movs	r3, #64	; 0x40
 800118c:	733b      	strb	r3, [r7, #12]
	datos[9]  = SSD1306_CHARGEPUMP;		   //0x8D
 800118e:	238d      	movs	r3, #141	; 0x8d
 8001190:	737b      	strb	r3, [r7, #13]
	datos[10] = 0x14;						   //0x14 ----> VCC generado por el circuito interno de step up que eleva el voltaje de alimentacion a 7.5V para los pixeles del oled
 8001192:	2314      	movs	r3, #20
 8001194:	73bb      	strb	r3, [r7, #14]
	datos[11] = SSD1306_MEMORYMODE;		   //0x20
 8001196:	2320      	movs	r3, #32
 8001198:	73fb      	strb	r3, [r7, #15]
	datos[12] = HORIZONTAL_ADDRESSING_MODE;   //Modo de direccionamiento horizontal
 800119a:	2300      	movs	r3, #0
 800119c:	743b      	strb	r3, [r7, #16]
	datos[13] = (SSD1306_SEGREMAP | COLUMN_ADDRESS_0_MAPPED_TO_SEG127);	   //0xA1
 800119e:	23a1      	movs	r3, #161	; 0xa1
 80011a0:	747b      	strb	r3, [r7, #17]
	datos[14] = (SET_COM_OUTPUT_SCAN_DIRECTION | SCAN_FROM_COM63_TO_0);	   //0xC8
 80011a2:	23c8      	movs	r3, #200	; 0xc8
 80011a4:	74bb      	strb	r3, [r7, #18]
	datos[15] = SSD1306_SETCOMPINS;		   //0xDA
 80011a6:	23da      	movs	r3, #218	; 0xda
 80011a8:	74fb      	strb	r3, [r7, #19]

	switch(SSD1306_LCDHEIGHT){			//0x12 ----> 128*64:0x12   128*32:0x02
		case 32: datos[16] = 0x02;break;
 80011aa:	2302      	movs	r3, #2
 80011ac:	753b      	strb	r3, [r7, #20]
 80011ae:	bf00      	nop
		case 64: datos[16] = 0x12;break;
	}

	datos[17] = SSD1306_SETCONTRAST;		   //0x81
 80011b0:	2381      	movs	r3, #129	; 0x81
 80011b2:	757b      	strb	r3, [r7, #21]
	datos[18] = 0xCF;						   //0xCF
 80011b4:	23cf      	movs	r3, #207	; 0xcf
 80011b6:	75bb      	strb	r3, [r7, #22]
	datos[19] = SSD1306_SETPRECHARGE;         //0xD9
 80011b8:	23d9      	movs	r3, #217	; 0xd9
 80011ba:	75fb      	strb	r3, [r7, #23]
	datos[20] = 0xF1;						   //0xF1
 80011bc:	23f1      	movs	r3, #241	; 0xf1
 80011be:	763b      	strb	r3, [r7, #24]
	datos[21] = SET_VCOMH_LEVEL;			   //0xDB
 80011c0:	23db      	movs	r3, #219	; 0xdb
 80011c2:	767b      	strb	r3, [r7, #25]
	datos[22] = 0x40;						   //0x40
 80011c4:	2340      	movs	r3, #64	; 0x40
 80011c6:	76bb      	strb	r3, [r7, #26]
	datos[23] = SET_ENTIRE_DISPLAY_ON;        //0xA4
 80011c8:	23a4      	movs	r3, #164	; 0xa4
 80011ca:	76fb      	strb	r3, [r7, #27]
	datos[24] = SSD1306_NORMALDISPLAY;	       //0xA6
 80011cc:	23a6      	movs	r3, #166	; 0xa6
 80011ce:	773b      	strb	r3, [r7, #28]
	datos[25] = SSD1306_DISPLAYON;			   //0xAF -----> enciendo el display
 80011d0:	23af      	movs	r3, #175	; 0xaf
 80011d2:	777b      	strb	r3, [r7, #29]

	HAL_Delay(100);
 80011d4:	2064      	movs	r0, #100	; 0x64
 80011d6:	f001 fc43 	bl	8002a60 <HAL_Delay>

	HAL_I2C_Master_Transmit (&hi2c1, SSD1306_I2C_ADDRESS, (uint8_t*)datos, 26, 100);
 80011da:	1d3a      	adds	r2, r7, #4
 80011dc:	2364      	movs	r3, #100	; 0x64
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	231a      	movs	r3, #26
 80011e2:	2178      	movs	r1, #120	; 0x78
 80011e4:	4804      	ldr	r0, [pc, #16]	; (80011f8 <OLED_Init+0x94>)
 80011e6:	f002 faed 	bl	80037c4 <HAL_I2C_Master_Transmit>

	OLED_Clear();
 80011ea:	f000 f83f 	bl	800126c <OLED_Clear>
}
 80011ee:	bf00      	nop
 80011f0:	3720      	adds	r7, #32
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000250 	.word	0x20000250

080011fc <OLED_Write_Command_3bytes>:

void OLED_Write_Command_3bytes(uint8_t byte1, uint8_t byte2, uint8_t byte3){
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af02      	add	r7, sp, #8
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
 8001206:	460b      	mov	r3, r1
 8001208:	71bb      	strb	r3, [r7, #6]
 800120a:	4613      	mov	r3, r2
 800120c:	717b      	strb	r3, [r7, #5]
	uint8_t datos[4] = {CMD, byte1, byte2, byte3};
 800120e:	2300      	movs	r3, #0
 8001210:	733b      	strb	r3, [r7, #12]
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	737b      	strb	r3, [r7, #13]
 8001216:	79bb      	ldrb	r3, [r7, #6]
 8001218:	73bb      	strb	r3, [r7, #14]
 800121a:	797b      	ldrb	r3, [r7, #5]
 800121c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SSD1306_I2C_ADDRESS, (uint8_t*)datos, 4, 100);
 800121e:	f107 020c 	add.w	r2, r7, #12
 8001222:	2364      	movs	r3, #100	; 0x64
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	2304      	movs	r3, #4
 8001228:	2178      	movs	r1, #120	; 0x78
 800122a:	4803      	ldr	r0, [pc, #12]	; (8001238 <OLED_Write_Command_3bytes+0x3c>)
 800122c:	f002 faca 	bl	80037c4 <HAL_I2C_Master_Transmit>
}
 8001230:	bf00      	nop
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000250 	.word	0x20000250

0800123c <OLED_Write_Data_1byte>:

void OLED_Write_Data_1byte(uint8_t byte1){
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af02      	add	r7, sp, #8
 8001242:	4603      	mov	r3, r0
 8001244:	71fb      	strb	r3, [r7, #7]
	uint8_t datos[2] = {DAT, byte1};
 8001246:	2340      	movs	r3, #64	; 0x40
 8001248:	733b      	strb	r3, [r7, #12]
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit (&hi2c1, SSD1306_I2C_ADDRESS, (uint8_t*)datos, 2, 100);
 800124e:	f107 020c 	add.w	r2, r7, #12
 8001252:	2364      	movs	r3, #100	; 0x64
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	2302      	movs	r3, #2
 8001258:	2178      	movs	r1, #120	; 0x78
 800125a:	4803      	ldr	r0, [pc, #12]	; (8001268 <OLED_Write_Data_1byte+0x2c>)
 800125c:	f002 fab2 	bl	80037c4 <HAL_I2C_Master_Transmit>
}
 8001260:	bf00      	nop
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000250 	.word	0x20000250

0800126c <OLED_Clear>:

//Para limpiar la pantalla oled, esta funcion va desde la pag 0 hasta la pag 7
//Para la columna el datasheet menciona (en modo de direccionamiento horizontal):
//Si el puntero de la dirección de la columna alcanza la dirección final de la columna, el puntero de la dirección de la columna se restablece a la dirección de inicio de la columna y el puntero de dirección de página aumenta en 1.
//Es por eso que pongo de la columna 0 hasta la columna 1023(128columnas*8paginas)
void OLED_Clear(void){
 800126c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001270:	b088      	sub	sp, #32
 8001272:	af02      	add	r7, sp, #8
 8001274:	466b      	mov	r3, sp
 8001276:	4698      	mov	r8, r3
	uint8_t  pag_inicio = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	74fb      	strb	r3, [r7, #19]
	uint8_t  pag_final = ((SSD1306_LCDHEIGHT/8)-1);//128x32:4paginas(0-3)    128x64:8paginas(0-7)
 800127c:	2303      	movs	r3, #3
 800127e:	74bb      	strb	r3, [r7, #18]
	uint8_t  col_inicio = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	747b      	strb	r3, [r7, #17]
	uint16_t col_final = ((SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8)-1);//128x32:512pixeles/pagina (0-511)   128x64:1024pixeles/pagina (0-1023)
 8001284:	f240 13ff 	movw	r3, #511	; 0x1ff
 8001288:	81fb      	strh	r3, [r7, #14]
	uint8_t  pixel = 0;//lleno de ceros todos los pixeles
 800128a:	2300      	movs	r3, #0
 800128c:	737b      	strb	r3, [r7, #13]
	//una pagina tiene 8pixeles de alto, entonces 128x8=1024, hay 1024 pixeles por pagina(cantidad de datos a enviar para limpiar la pantalla por cada pagina)
	//128x32: DAT +  512datos = 513
	//128x64: DAT + 1024datos = 1025
	//Es por eso que al tamaño de los datos[] a enviar le aumento 2
	uint8_t datos[col_final+2];
 800128e:	89fb      	ldrh	r3, [r7, #14]
 8001290:	1c9e      	adds	r6, r3, #2
 8001292:	1e73      	subs	r3, r6, #1
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	4632      	mov	r2, r6
 8001298:	2300      	movs	r3, #0
 800129a:	4614      	mov	r4, r2
 800129c:	461d      	mov	r5, r3
 800129e:	f04f 0200 	mov.w	r2, #0
 80012a2:	f04f 0300 	mov.w	r3, #0
 80012a6:	00eb      	lsls	r3, r5, #3
 80012a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80012ac:	00e2      	lsls	r2, r4, #3
 80012ae:	4632      	mov	r2, r6
 80012b0:	2300      	movs	r3, #0
 80012b2:	4610      	mov	r0, r2
 80012b4:	4619      	mov	r1, r3
 80012b6:	f04f 0200 	mov.w	r2, #0
 80012ba:	f04f 0300 	mov.w	r3, #0
 80012be:	00cb      	lsls	r3, r1, #3
 80012c0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80012c4:	00c2      	lsls	r2, r0, #3
 80012c6:	4633      	mov	r3, r6
 80012c8:	3307      	adds	r3, #7
 80012ca:	08db      	lsrs	r3, r3, #3
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	ebad 0d03 	sub.w	sp, sp, r3
 80012d2:	ab02      	add	r3, sp, #8
 80012d4:	3300      	adds	r3, #0
 80012d6:	607b      	str	r3, [r7, #4]

	OLED_Write_Command_3bytes(SSD1306_PAGEADDR,pag_inicio,pag_final);
 80012d8:	7cba      	ldrb	r2, [r7, #18]
 80012da:	7cfb      	ldrb	r3, [r7, #19]
 80012dc:	4619      	mov	r1, r3
 80012de:	2022      	movs	r0, #34	; 0x22
 80012e0:	f7ff ff8c 	bl	80011fc <OLED_Write_Command_3bytes>
	OLED_Write_Command_3bytes(SSD1306_COLUMNADDR,col_inicio,col_final);
 80012e4:	89fb      	ldrh	r3, [r7, #14]
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	7c7b      	ldrb	r3, [r7, #17]
 80012ea:	4619      	mov	r1, r3
 80012ec:	2021      	movs	r0, #33	; 0x21
 80012ee:	f7ff ff85 	bl	80011fc <OLED_Write_Command_3bytes>

	datos[0] = DAT;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2240      	movs	r2, #64	; 0x40
 80012f6:	701a      	strb	r2, [r3, #0]

	for(int j=col_inicio;j<=col_final;j++){
 80012f8:	7c7b      	ldrb	r3, [r7, #17]
 80012fa:	617b      	str	r3, [r7, #20]
 80012fc:	e007      	b.n	800130e <OLED_Clear+0xa2>
		datos[j+1] = pixel;//dato[1], dato[2], dato[3], .... , dato[1023]
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	3301      	adds	r3, #1
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	7b79      	ldrb	r1, [r7, #13]
 8001306:	54d1      	strb	r1, [r2, r3]
	for(int j=col_inicio;j<=col_final;j++){
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	3301      	adds	r3, #1
 800130c:	617b      	str	r3, [r7, #20]
 800130e:	89fb      	ldrh	r3, [r7, #14]
 8001310:	697a      	ldr	r2, [r7, #20]
 8001312:	429a      	cmp	r2, r3
 8001314:	ddf3      	ble.n	80012fe <OLED_Clear+0x92>
		//HAL_Delay(10); //descomentar para probar la libreria y ver la impresion de pixeles de manera lenta
	}

	HAL_I2C_Master_Transmit (&hi2c1, SSD1306_I2C_ADDRESS, (uint8_t*)datos, col_final+2, 100);
 8001316:	89fb      	ldrh	r3, [r7, #14]
 8001318:	3302      	adds	r3, #2
 800131a:	b29b      	uxth	r3, r3
 800131c:	2264      	movs	r2, #100	; 0x64
 800131e:	9200      	str	r2, [sp, #0]
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	2178      	movs	r1, #120	; 0x78
 8001324:	4804      	ldr	r0, [pc, #16]	; (8001338 <OLED_Clear+0xcc>)
 8001326:	f002 fa4d 	bl	80037c4 <HAL_I2C_Master_Transmit>
 800132a:	46c5      	mov	sp, r8
}
 800132c:	bf00      	nop
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001336:	bf00      	nop
 8001338:	20000250 	.word	0x20000250

0800133c <OLED_Draw_8_Pixel>:

void OLED_Draw_8_Pixel(uint8_t pag_inicio, uint8_t col_inicio, uint8_t pixel_8bits){
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
 8001346:	460b      	mov	r3, r1
 8001348:	71bb      	strb	r3, [r7, #6]
 800134a:	4613      	mov	r3, r2
 800134c:	717b      	strb	r3, [r7, #5]
	OLED_Write_Command_3bytes(SSD1306_PAGEADDR,pag_inicio,pag_inicio);
 800134e:	79fa      	ldrb	r2, [r7, #7]
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	4619      	mov	r1, r3
 8001354:	2022      	movs	r0, #34	; 0x22
 8001356:	f7ff ff51 	bl	80011fc <OLED_Write_Command_3bytes>
	OLED_Write_Command_3bytes(SSD1306_COLUMNADDR,col_inicio,col_inicio);
 800135a:	79ba      	ldrb	r2, [r7, #6]
 800135c:	79bb      	ldrb	r3, [r7, #6]
 800135e:	4619      	mov	r1, r3
 8001360:	2021      	movs	r0, #33	; 0x21
 8001362:	f7ff ff4b 	bl	80011fc <OLED_Write_Command_3bytes>
	OLED_Write_Data_1byte(pixel_8bits);
 8001366:	797b      	ldrb	r3, [r7, #5]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff ff67 	bl	800123c <OLED_Write_Data_1byte>
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
	...

08001378 <OLED_Print_Letra>:

void OLED_Print_Letra(uint8_t pag, uint8_t col, uint8_t font_size, char letra){ //pagina(0,7)  columna(0-127)    letra
 8001378:	b590      	push	{r4, r7, lr}
 800137a:	b08b      	sub	sp, #44	; 0x2c
 800137c:	af00      	add	r7, sp, #0
 800137e:	4604      	mov	r4, r0
 8001380:	4608      	mov	r0, r1
 8001382:	4611      	mov	r1, r2
 8001384:	461a      	mov	r2, r3
 8001386:	4623      	mov	r3, r4
 8001388:	71fb      	strb	r3, [r7, #7]
 800138a:	4603      	mov	r3, r0
 800138c:	71bb      	strb	r3, [r7, #6]
 800138e:	460b      	mov	r3, r1
 8001390:	717b      	strb	r3, [r7, #5]
 8001392:	4613      	mov	r3, r2
 8001394:	713b      	strb	r3, [r7, #4]
	uint16_t pos;     //variable para almacenar la posicion recuperada de la matriz o arreglo
	letra = letra-32; //resto menos 32 para tener el codigo ASCCI
 8001396:	793b      	ldrb	r3, [r7, #4]
 8001398:	3b20      	subs	r3, #32
 800139a:	713b      	strb	r3, [r7, #4]

	switch(font_size){
 800139c:	797b      	ldrb	r3, [r7, #5]
 800139e:	2b03      	cmp	r3, #3
 80013a0:	d05e      	beq.n	8001460 <OLED_Print_Letra+0xe8>
 80013a2:	2b03      	cmp	r3, #3
 80013a4:	f300 80bf 	bgt.w	8001526 <OLED_Print_Letra+0x1ae>
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d002      	beq.n	80013b2 <OLED_Print_Letra+0x3a>
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d01f      	beq.n	80013f0 <OLED_Print_Letra+0x78>
			OLED_Draw_8_Pixel(pag+2,i,FONT_3[pos3]);
			pos3+=3;
		}
		break;
    }
}
 80013b0:	e0b9      	b.n	8001526 <OLED_Print_Letra+0x1ae>
				pos = letra * FONT_1_WIDTH;  //me ubico en su array correcto multiplicando por 6
 80013b2:	793b      	ldrb	r3, [r7, #4]
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	461a      	mov	r2, r3
 80013b8:	0052      	lsls	r2, r2, #1
 80013ba:	4413      	add	r3, r2
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	84fb      	strh	r3, [r7, #38]	; 0x26
				for(int i=col; i<col+FONT_1_WIDTH; i++) {
 80013c0:	79bb      	ldrb	r3, [r7, #6]
 80013c2:	623b      	str	r3, [r7, #32]
 80013c4:	e00e      	b.n	80013e4 <OLED_Print_Letra+0x6c>
					OLED_Draw_8_Pixel(pag,i,FONT_1[pos]);
 80013c6:	6a3b      	ldr	r3, [r7, #32]
 80013c8:	b2d9      	uxtb	r1, r3
 80013ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80013cc:	4a58      	ldr	r2, [pc, #352]	; (8001530 <OLED_Print_Letra+0x1b8>)
 80013ce:	5cd2      	ldrb	r2, [r2, r3]
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff ffb2 	bl	800133c <OLED_Draw_8_Pixel>
					pos++;
 80013d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80013da:	3301      	adds	r3, #1
 80013dc:	84fb      	strh	r3, [r7, #38]	; 0x26
				for(int i=col; i<col+FONT_1_WIDTH; i++) {
 80013de:	6a3b      	ldr	r3, [r7, #32]
 80013e0:	3301      	adds	r3, #1
 80013e2:	623b      	str	r3, [r7, #32]
 80013e4:	79bb      	ldrb	r3, [r7, #6]
 80013e6:	3305      	adds	r3, #5
 80013e8:	6a3a      	ldr	r2, [r7, #32]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	ddeb      	ble.n	80013c6 <OLED_Print_Letra+0x4e>
			break;
 80013ee:	e09a      	b.n	8001526 <OLED_Print_Letra+0x1ae>
				pos = letra * (FONT_2_WIDTH*2);  //me ubico en su array correcto multiplico por 2 ya que la altura sera de 16pixeles utilizando 8pixles por pagina y en total usara 2 paginas
 80013f0:	793b      	ldrb	r3, [r7, #4]
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	461a      	mov	r2, r3
 80013f6:	00d2      	lsls	r2, r2, #3
 80013f8:	4413      	add	r3, r2
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	84fb      	strh	r3, [r7, #38]	; 0x26
				for(int i=col; i<col+FONT_2_WIDTH; i++) {       //9
 80013fe:	79bb      	ldrb	r3, [r7, #6]
 8001400:	61fb      	str	r3, [r7, #28]
 8001402:	e00e      	b.n	8001422 <OLED_Print_Letra+0xaa>
					OLED_Draw_8_Pixel(pag,i,FONT_2[pos]);
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	b2d9      	uxtb	r1, r3
 8001408:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800140a:	4a4a      	ldr	r2, [pc, #296]	; (8001534 <OLED_Print_Letra+0x1bc>)
 800140c:	5cd2      	ldrb	r2, [r2, r3]
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ff93 	bl	800133c <OLED_Draw_8_Pixel>
					pos++;
 8001416:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001418:	3301      	adds	r3, #1
 800141a:	84fb      	strh	r3, [r7, #38]	; 0x26
				for(int i=col; i<col+FONT_2_WIDTH; i++) {       //9
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	3301      	adds	r3, #1
 8001420:	61fb      	str	r3, [r7, #28]
 8001422:	79bb      	ldrb	r3, [r7, #6]
 8001424:	3308      	adds	r3, #8
 8001426:	69fa      	ldr	r2, [r7, #28]
 8001428:	429a      	cmp	r2, r3
 800142a:	ddeb      	ble.n	8001404 <OLED_Print_Letra+0x8c>
				for(int i=col; i<col+FONT_2_WIDTH; i++) {      //9
 800142c:	79bb      	ldrb	r3, [r7, #6]
 800142e:	61bb      	str	r3, [r7, #24]
 8001430:	e010      	b.n	8001454 <OLED_Print_Letra+0xdc>
					OLED_Draw_8_Pixel(pag+1,i,FONT_2[pos]);
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	3301      	adds	r3, #1
 8001436:	b2d8      	uxtb	r0, r3
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	b2d9      	uxtb	r1, r3
 800143c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800143e:	4a3d      	ldr	r2, [pc, #244]	; (8001534 <OLED_Print_Letra+0x1bc>)
 8001440:	5cd3      	ldrb	r3, [r2, r3]
 8001442:	461a      	mov	r2, r3
 8001444:	f7ff ff7a 	bl	800133c <OLED_Draw_8_Pixel>
					pos++;
 8001448:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800144a:	3301      	adds	r3, #1
 800144c:	84fb      	strh	r3, [r7, #38]	; 0x26
				for(int i=col; i<col+FONT_2_WIDTH; i++) {      //9
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	3301      	adds	r3, #1
 8001452:	61bb      	str	r3, [r7, #24]
 8001454:	79bb      	ldrb	r3, [r7, #6]
 8001456:	3308      	adds	r3, #8
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	429a      	cmp	r2, r3
 800145c:	dde9      	ble.n	8001432 <OLED_Print_Letra+0xba>
			break;
 800145e:	e062      	b.n	8001526 <OLED_Print_Letra+0x1ae>
		pos = letra * (FONT_3_WIDTH*3);  //me ubico en su array correcto multiplico por 2 ya que la altura sera de 16pixeles utilizando 8pixles por pagina y en total usara 2 paginas
 8001460:	793b      	ldrb	r3, [r7, #4]
 8001462:	b29b      	uxth	r3, r3
 8001464:	461a      	mov	r2, r3
 8001466:	0112      	lsls	r2, r2, #4
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	84fb      	strh	r3, [r7, #38]	; 0x26
		uint16_t pos2 = (letra * (FONT_3_WIDTH*3))+1;
 800146e:	793b      	ldrb	r3, [r7, #4]
 8001470:	b29b      	uxth	r3, r3
 8001472:	461a      	mov	r2, r3
 8001474:	0112      	lsls	r2, r2, #4
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	b29b      	uxth	r3, r3
 800147c:	3301      	adds	r3, #1
 800147e:	82fb      	strh	r3, [r7, #22]
		uint16_t pos3 = (letra * (FONT_3_WIDTH*3))+2;
 8001480:	793b      	ldrb	r3, [r7, #4]
 8001482:	b29b      	uxth	r3, r3
 8001484:	461a      	mov	r2, r3
 8001486:	0112      	lsls	r2, r2, #4
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	b29b      	uxth	r3, r3
 800148e:	3302      	adds	r3, #2
 8001490:	82bb      	strh	r3, [r7, #20]
		for(int i=col; i<col+FONT_3_WIDTH; i++) {
 8001492:	79bb      	ldrb	r3, [r7, #6]
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	e00e      	b.n	80014b6 <OLED_Print_Letra+0x13e>
			OLED_Draw_8_Pixel(pag,i,FONT_3[pos]);
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	b2d9      	uxtb	r1, r3
 800149c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800149e:	4a26      	ldr	r2, [pc, #152]	; (8001538 <OLED_Print_Letra+0x1c0>)
 80014a0:	5cd2      	ldrb	r2, [r2, r3]
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ff49 	bl	800133c <OLED_Draw_8_Pixel>
			pos+=3;
 80014aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014ac:	3303      	adds	r3, #3
 80014ae:	84fb      	strh	r3, [r7, #38]	; 0x26
		for(int i=col; i<col+FONT_3_WIDTH; i++) {
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	3301      	adds	r3, #1
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	79bb      	ldrb	r3, [r7, #6]
 80014b8:	3313      	adds	r3, #19
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	429a      	cmp	r2, r3
 80014be:	ddeb      	ble.n	8001498 <OLED_Print_Letra+0x120>
		for(int i=col; i<col+FONT_3_WIDTH; i++) {
 80014c0:	79bb      	ldrb	r3, [r7, #6]
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	e010      	b.n	80014e8 <OLED_Print_Letra+0x170>
			OLED_Draw_8_Pixel(pag+1,i,FONT_3[pos2]);
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	3301      	adds	r3, #1
 80014ca:	b2d8      	uxtb	r0, r3
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	b2d9      	uxtb	r1, r3
 80014d0:	8afb      	ldrh	r3, [r7, #22]
 80014d2:	4a19      	ldr	r2, [pc, #100]	; (8001538 <OLED_Print_Letra+0x1c0>)
 80014d4:	5cd3      	ldrb	r3, [r2, r3]
 80014d6:	461a      	mov	r2, r3
 80014d8:	f7ff ff30 	bl	800133c <OLED_Draw_8_Pixel>
			pos2+=3;
 80014dc:	8afb      	ldrh	r3, [r7, #22]
 80014de:	3303      	adds	r3, #3
 80014e0:	82fb      	strh	r3, [r7, #22]
		for(int i=col; i<col+FONT_3_WIDTH; i++) {
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	3301      	adds	r3, #1
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	79bb      	ldrb	r3, [r7, #6]
 80014ea:	3313      	adds	r3, #19
 80014ec:	68fa      	ldr	r2, [r7, #12]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	dde9      	ble.n	80014c6 <OLED_Print_Letra+0x14e>
		for(int i=col; i<col+FONT_3_WIDTH; i++) {
 80014f2:	79bb      	ldrb	r3, [r7, #6]
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	e010      	b.n	800151a <OLED_Print_Letra+0x1a2>
			OLED_Draw_8_Pixel(pag+2,i,FONT_3[pos3]);
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	3302      	adds	r3, #2
 80014fc:	b2d8      	uxtb	r0, r3
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	b2d9      	uxtb	r1, r3
 8001502:	8abb      	ldrh	r3, [r7, #20]
 8001504:	4a0c      	ldr	r2, [pc, #48]	; (8001538 <OLED_Print_Letra+0x1c0>)
 8001506:	5cd3      	ldrb	r3, [r2, r3]
 8001508:	461a      	mov	r2, r3
 800150a:	f7ff ff17 	bl	800133c <OLED_Draw_8_Pixel>
			pos3+=3;
 800150e:	8abb      	ldrh	r3, [r7, #20]
 8001510:	3303      	adds	r3, #3
 8001512:	82bb      	strh	r3, [r7, #20]
		for(int i=col; i<col+FONT_3_WIDTH; i++) {
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	3301      	adds	r3, #1
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	79bb      	ldrb	r3, [r7, #6]
 800151c:	3313      	adds	r3, #19
 800151e:	68ba      	ldr	r2, [r7, #8]
 8001520:	429a      	cmp	r2, r3
 8001522:	dde9      	ble.n	80014f8 <OLED_Print_Letra+0x180>
		break;
 8001524:	bf00      	nop
}
 8001526:	bf00      	nop
 8001528:	372c      	adds	r7, #44	; 0x2c
 800152a:	46bd      	mov	sp, r7
 800152c:	bd90      	pop	{r4, r7, pc}
 800152e:	bf00      	nop
 8001530:	080083d8 	.word	0x080083d8
 8001534:	08008600 	.word	0x08008600
 8001538:	08008cb0 	.word	0x08008cb0

0800153c <OLED_Print_Text>:


void OLED_Print_Text(uint8_t pag, uint8_t col, uint8_t font_size, char *texto){
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	603b      	str	r3, [r7, #0]
 8001544:	4603      	mov	r3, r0
 8001546:	71fb      	strb	r3, [r7, #7]
 8001548:	460b      	mov	r3, r1
 800154a:	71bb      	strb	r3, [r7, #6]
 800154c:	4613      	mov	r3, r2
 800154e:	717b      	strb	r3, [r7, #5]

	switch(font_size){
 8001550:	797b      	ldrb	r3, [r7, #5]
 8001552:	2b03      	cmp	r3, #3
 8001554:	d034      	beq.n	80015c0 <OLED_Print_Text+0x84>
 8001556:	2b03      	cmp	r3, #3
 8001558:	dc37      	bgt.n	80015ca <OLED_Print_Text+0x8e>
 800155a:	2b01      	cmp	r3, #1
 800155c:	d00e      	beq.n	800157c <OLED_Print_Text+0x40>
 800155e:	2b02      	cmp	r3, #2
 8001560:	d01d      	beq.n	800159e <OLED_Print_Text+0x62>
					col=col+FONT_3_WIDTH; //aumento la posicion de la columna 9/11
		}
		break;
		///////////////////////////////////////////////////////////////////////////
	}
}
 8001562:	e032      	b.n	80015ca <OLED_Print_Text+0x8e>
					OLED_Print_Letra(pag,col,1,*texto++);
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	1c5a      	adds	r2, r3, #1
 8001568:	603a      	str	r2, [r7, #0]
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	79b9      	ldrb	r1, [r7, #6]
 800156e:	79f8      	ldrb	r0, [r7, #7]
 8001570:	2201      	movs	r2, #1
 8001572:	f7ff ff01 	bl	8001378 <OLED_Print_Letra>
					col=col+FONT_1_WIDTH; //aumento la posicion de la columna
 8001576:	79bb      	ldrb	r3, [r7, #6]
 8001578:	3306      	adds	r3, #6
 800157a:	71bb      	strb	r3, [r7, #6]
				while(*texto != '\0'){
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1ef      	bne.n	8001564 <OLED_Print_Text+0x28>
			break;
 8001584:	e021      	b.n	80015ca <OLED_Print_Text+0x8e>
					OLED_Print_Letra(pag,col,2,*texto++);
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	1c5a      	adds	r2, r3, #1
 800158a:	603a      	str	r2, [r7, #0]
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	79b9      	ldrb	r1, [r7, #6]
 8001590:	79f8      	ldrb	r0, [r7, #7]
 8001592:	2202      	movs	r2, #2
 8001594:	f7ff fef0 	bl	8001378 <OLED_Print_Letra>
					col=col+FONT_2_WIDTH; //aumento la posicion de la columna 9/11
 8001598:	79bb      	ldrb	r3, [r7, #6]
 800159a:	3309      	adds	r3, #9
 800159c:	71bb      	strb	r3, [r7, #6]
				while(*texto != '\0'){
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1ef      	bne.n	8001586 <OLED_Print_Text+0x4a>
			break;
 80015a6:	e010      	b.n	80015ca <OLED_Print_Text+0x8e>
					OLED_Print_Letra(pag,col,3,*texto++);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	1c5a      	adds	r2, r3, #1
 80015ac:	603a      	str	r2, [r7, #0]
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	79b9      	ldrb	r1, [r7, #6]
 80015b2:	79f8      	ldrb	r0, [r7, #7]
 80015b4:	2203      	movs	r2, #3
 80015b6:	f7ff fedf 	bl	8001378 <OLED_Print_Letra>
					col=col+FONT_3_WIDTH; //aumento la posicion de la columna 9/11
 80015ba:	79bb      	ldrb	r3, [r7, #6]
 80015bc:	3314      	adds	r3, #20
 80015be:	71bb      	strb	r3, [r7, #6]
				while(*texto != '\0'){
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d1ef      	bne.n	80015a8 <OLED_Print_Text+0x6c>
		break;
 80015c8:	bf00      	nop
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	0000      	movs	r0, r0
 80015d4:	0000      	movs	r0, r0
	...

080015d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015dc:	f001 f9ce 	bl	800297c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015e0:	f000 fd76 	bl	80020d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015e4:	f000 fe96 	bl	8002314 <MX_GPIO_Init>
  MX_I2C1_Init();
 80015e8:	f000 fe30 	bl	800224c <MX_I2C1_Init>
  MX_TIM6_Init();
 80015ec:	f000 fe5c 	bl	80022a8 <MX_TIM6_Init>
  MX_ADC1_Init();
 80015f0:	f000 fdda 	bl	80021a8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 80015f4:	f7ff fdb6 	bl	8001164 <OLED_Init>
  HAL_TIM_Base_Start_IT(&htim6);
 80015f8:	48b5      	ldr	r0, [pc, #724]	; (80018d0 <main+0x2f8>)
 80015fa:	f003 fcd3 	bl	8004fa4 <HAL_TIM_Base_Start_IT>


  OLED_Print_Text(2,104,1,"OFF");
 80015fe:	4bb5      	ldr	r3, [pc, #724]	; (80018d4 <main+0x2fc>)
 8001600:	2201      	movs	r2, #1
 8001602:	2168      	movs	r1, #104	; 0x68
 8001604:	2002      	movs	r0, #2
 8001606:	f7ff ff99 	bl	800153c <OLED_Print_Text>
	  //adc0 = HAL_ADC_GetValue(&hadc1) * 3.3/4096;
	  //HAL_ADC_Stop(&hadc1);
	  //sprintf(buff,"%2.2fV",adc0);
	  //OLED_Print_Text(2,0,2,buff);

      if(!HAL_GPIO_ReadPin(SW_GPIO_Port, SW_Pin) && !mem){mem = 1;}
 800160a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800160e:	48b2      	ldr	r0, [pc, #712]	; (80018d8 <main+0x300>)
 8001610:	f001 ff62 	bl	80034d8 <HAL_GPIO_ReadPin>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d106      	bne.n	8001628 <main+0x50>
 800161a:	4bb0      	ldr	r3, [pc, #704]	; (80018dc <main+0x304>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d102      	bne.n	8001628 <main+0x50>
 8001622:	4bae      	ldr	r3, [pc, #696]	; (80018dc <main+0x304>)
 8001624:	2201      	movs	r2, #1
 8001626:	701a      	strb	r2, [r3, #0]
      if( HAL_GPIO_ReadPin(SW_GPIO_Port, SW_Pin) &&  mem){mem = 0; suma++;}
 8001628:	f44f 7180 	mov.w	r1, #256	; 0x100
 800162c:	48aa      	ldr	r0, [pc, #680]	; (80018d8 <main+0x300>)
 800162e:	f001 ff53 	bl	80034d8 <HAL_GPIO_ReadPin>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d00c      	beq.n	8001652 <main+0x7a>
 8001638:	4ba8      	ldr	r3, [pc, #672]	; (80018dc <main+0x304>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d008      	beq.n	8001652 <main+0x7a>
 8001640:	4ba6      	ldr	r3, [pc, #664]	; (80018dc <main+0x304>)
 8001642:	2200      	movs	r2, #0
 8001644:	701a      	strb	r2, [r3, #0]
 8001646:	4ba6      	ldr	r3, [pc, #664]	; (80018e0 <main+0x308>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	3301      	adds	r3, #1
 800164c:	b2da      	uxtb	r2, r3
 800164e:	4ba4      	ldr	r3, [pc, #656]	; (80018e0 <main+0x308>)
 8001650:	701a      	strb	r2, [r3, #0]
      if(suma==1){
 8001652:	4ba3      	ldr	r3, [pc, #652]	; (80018e0 <main+0x308>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d10d      	bne.n	8001676 <main+0x9e>
          suma=2;  //cambio el contador para que solo haga una vez todo lo que esta dentro del if
 800165a:	4ba1      	ldr	r3, [pc, #644]	; (80018e0 <main+0x308>)
 800165c:	2202      	movs	r2, #2
 800165e:	701a      	strb	r2, [r3, #0]
          HAL_GPIO_WritePin(EN_XL6009_GPIO_Port, EN_XL6009_Pin, SET);
 8001660:	2201      	movs	r2, #1
 8001662:	2180      	movs	r1, #128	; 0x80
 8001664:	489f      	ldr	r0, [pc, #636]	; (80018e4 <main+0x30c>)
 8001666:	f001 ff4f 	bl	8003508 <HAL_GPIO_WritePin>
          OLED_Print_Text(2,104,1,"ON ");
 800166a:	4b9f      	ldr	r3, [pc, #636]	; (80018e8 <main+0x310>)
 800166c:	2201      	movs	r2, #1
 800166e:	2168      	movs	r1, #104	; 0x68
 8001670:	2002      	movs	r0, #2
 8001672:	f7ff ff63 	bl	800153c <OLED_Print_Text>
      }
      if(suma==3){
 8001676:	4b9a      	ldr	r3, [pc, #616]	; (80018e0 <main+0x308>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b03      	cmp	r3, #3
 800167c:	d10d      	bne.n	800169a <main+0xc2>
          suma=0; //cambio el contador para que solo haga una vez todo lo que esta dentro del if
 800167e:	4b98      	ldr	r3, [pc, #608]	; (80018e0 <main+0x308>)
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]
          HAL_GPIO_WritePin(EN_XL6009_GPIO_Port, EN_XL6009_Pin, RESET);
 8001684:	2200      	movs	r2, #0
 8001686:	2180      	movs	r1, #128	; 0x80
 8001688:	4896      	ldr	r0, [pc, #600]	; (80018e4 <main+0x30c>)
 800168a:	f001 ff3d 	bl	8003508 <HAL_GPIO_WritePin>
          OLED_Print_Text(2,104,1,"OFF");
 800168e:	4b91      	ldr	r3, [pc, #580]	; (80018d4 <main+0x2fc>)
 8001690:	2201      	movs	r2, #1
 8001692:	2168      	movs	r1, #104	; 0x68
 8001694:	2002      	movs	r0, #2
 8001696:	f7ff ff51 	bl	800153c <OLED_Print_Text>
      }

      sprintf(buff,"SET:%4.0f",PWM);
 800169a:	4b94      	ldr	r3, [pc, #592]	; (80018ec <main+0x314>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7fe ff72 	bl	8000588 <__aeabi_f2d>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	4991      	ldr	r1, [pc, #580]	; (80018f0 <main+0x318>)
 80016aa:	4892      	ldr	r0, [pc, #584]	; (80018f4 <main+0x31c>)
 80016ac:	f004 fbe6 	bl	8005e7c <siprintf>
      OLED_Print_Text(1,70,1,buff);
 80016b0:	4b90      	ldr	r3, [pc, #576]	; (80018f4 <main+0x31c>)
 80016b2:	2201      	movs	r2, #1
 80016b4:	2146      	movs	r1, #70	; 0x46
 80016b6:	2001      	movs	r0, #1
 80016b8:	f7ff ff40 	bl	800153c <OLED_Print_Text>
      MCP4725_Out(encoder+ENCO);
 80016bc:	4b8e      	ldr	r3, [pc, #568]	; (80018f8 <main+0x320>)
 80016be:	ed93 7a00 	vldr	s14, [r3]
 80016c2:	4b8e      	ldr	r3, [pc, #568]	; (80018fc <main+0x324>)
 80016c4:	edd3 7a00 	vldr	s15, [r3]
 80016c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016d0:	ee17 3a90 	vmov	r3, s15
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff fd24 	bl	8001124 <MCP4725_Out>
      HAL_Delay(5);
 80016dc:	2005      	movs	r0, #5
 80016de:	f001 f9bf 	bl	8002a60 <HAL_Delay>


      Vdac = encoder*3.338/4096;
 80016e2:	4b85      	ldr	r3, [pc, #532]	; (80018f8 <main+0x320>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7fe ff4e 	bl	8000588 <__aeabi_f2d>
 80016ec:	a36e      	add	r3, pc, #440	; (adr r3, 80018a8 <main+0x2d0>)
 80016ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f2:	f7fe ffa1 	bl	8000638 <__aeabi_dmul>
 80016f6:	4602      	mov	r2, r0
 80016f8:	460b      	mov	r3, r1
 80016fa:	4610      	mov	r0, r2
 80016fc:	4619      	mov	r1, r3
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	4b7f      	ldr	r3, [pc, #508]	; (8001900 <main+0x328>)
 8001704:	f7ff f8c2 	bl	800088c <__aeabi_ddiv>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4610      	mov	r0, r2
 800170e:	4619      	mov	r1, r3
 8001710:	f7ff fa6a 	bl	8000be8 <__aeabi_d2f>
 8001714:	4603      	mov	r3, r0
 8001716:	4a7b      	ldr	r2, [pc, #492]	; (8001904 <main+0x32c>)
 8001718:	6013      	str	r3, [r2, #0]
      //sprintf(buff,"%1.3f",Vdac);
      //OLED_Print_Text(2,70,1,buff);

      VoutMath = Vref+(((Vref/R2)+((Vref-Vdac)/R3))*R1);
 800171a:	eddf 6a7b 	vldr	s13, [pc, #492]	; 8001908 <main+0x330>
 800171e:	eddf 7a7b 	vldr	s15, [pc, #492]	; 800190c <main+0x334>
 8001722:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001726:	eddf 6a78 	vldr	s13, [pc, #480]	; 8001908 <main+0x330>
 800172a:	4b76      	ldr	r3, [pc, #472]	; (8001904 <main+0x32c>)
 800172c:	edd3 7a00 	vldr	s15, [r3]
 8001730:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001734:	ed9f 6a76 	vldr	s12, [pc, #472]	; 8001910 <main+0x338>
 8001738:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800173c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001740:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8001914 <main+0x33c>
 8001744:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001748:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8001908 <main+0x330>
 800174c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001750:	4b71      	ldr	r3, [pc, #452]	; (8001918 <main+0x340>)
 8001752:	edc3 7a00 	vstr	s15, [r3]
      sprintf(buff,"%2.2f",VoutMath);
 8001756:	4b70      	ldr	r3, [pc, #448]	; (8001918 <main+0x340>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f7fe ff14 	bl	8000588 <__aeabi_f2d>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	496d      	ldr	r1, [pc, #436]	; (800191c <main+0x344>)
 8001766:	4863      	ldr	r0, [pc, #396]	; (80018f4 <main+0x31c>)
 8001768:	f004 fb88 	bl	8005e7c <siprintf>
      OLED_Print_Text(3,70,1,buff);
 800176c:	4b61      	ldr	r3, [pc, #388]	; (80018f4 <main+0x31c>)
 800176e:	2201      	movs	r2, #1
 8001770:	2146      	movs	r1, #70	; 0x46
 8001772:	2003      	movs	r0, #3
 8001774:	f7ff fee2 	bl	800153c <OLED_Print_Text>

	  out_voltage   = ADS1115_Read(0)*0.00117127;
 8001778:	2000      	movs	r0, #0
 800177a:	f7ff fc07 	bl	8000f8c <ADS1115_Read>
 800177e:	4603      	mov	r3, r0
 8001780:	4618      	mov	r0, r3
 8001782:	f7fe feef 	bl	8000564 <__aeabi_i2d>
 8001786:	a34a      	add	r3, pc, #296	; (adr r3, 80018b0 <main+0x2d8>)
 8001788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178c:	f7fe ff54 	bl	8000638 <__aeabi_dmul>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4610      	mov	r0, r2
 8001796:	4619      	mov	r1, r3
 8001798:	f7ff fa26 	bl	8000be8 <__aeabi_d2f>
 800179c:	4603      	mov	r3, r0
 800179e:	4a60      	ldr	r2, [pc, #384]	; (8001920 <main+0x348>)
 80017a0:	6013      	str	r3, [r2, #0]
	  //sprintf(buff,"%2.2fV ",out_voltage);
	  //OLED_Print_Text(0,0,2,buff);

	  ////////////////////////////////////////////////////////////////////////////////
	  if(VoutMath > out_voltage){
 80017a2:	4b5d      	ldr	r3, [pc, #372]	; (8001918 <main+0x340>)
 80017a4:	ed93 7a00 	vldr	s14, [r3]
 80017a8:	4b5d      	ldr	r3, [pc, #372]	; (8001920 <main+0x348>)
 80017aa:	edd3 7a00 	vldr	s15, [r3]
 80017ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b6:	f340 8130 	ble.w	8001a1a <main+0x442>
		  difference = VoutMath - out_voltage;
 80017ba:	4b57      	ldr	r3, [pc, #348]	; (8001918 <main+0x340>)
 80017bc:	ed93 7a00 	vldr	s14, [r3]
 80017c0:	4b57      	ldr	r3, [pc, #348]	; (8001920 <main+0x348>)
 80017c2:	edd3 7a00 	vldr	s15, [r3]
 80017c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017ca:	4b56      	ldr	r3, [pc, #344]	; (8001924 <main+0x34c>)
 80017cc:	edc3 7a00 	vstr	s15, [r3]
		  if(difference>=0.001 && difference<=0.150){
 80017d0:	4b54      	ldr	r3, [pc, #336]	; (8001924 <main+0x34c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7fe fed7 	bl	8000588 <__aeabi_f2d>
 80017da:	a337      	add	r3, pc, #220	; (adr r3, 80018b8 <main+0x2e0>)
 80017dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e0:	f7ff f9b0 	bl	8000b44 <__aeabi_dcmpge>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d017      	beq.n	800181a <main+0x242>
 80017ea:	4b4e      	ldr	r3, [pc, #312]	; (8001924 <main+0x34c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7fe feca 	bl	8000588 <__aeabi_f2d>
 80017f4:	a332      	add	r3, pc, #200	; (adr r3, 80018c0 <main+0x2e8>)
 80017f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fa:	f7ff f999 	bl	8000b30 <__aeabi_dcmple>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d00a      	beq.n	800181a <main+0x242>
			  ENCO=ENCO-1;
 8001804:	4b3d      	ldr	r3, [pc, #244]	; (80018fc <main+0x324>)
 8001806:	edd3 7a00 	vldr	s15, [r3]
 800180a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800180e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001812:	4b3a      	ldr	r3, [pc, #232]	; (80018fc <main+0x324>)
 8001814:	edc3 7a00 	vstr	s15, [r3]
 8001818:	e0f4      	b.n	8001a04 <main+0x42c>
		  }else if(difference>0.150 && difference<=0.250){
 800181a:	4b42      	ldr	r3, [pc, #264]	; (8001924 <main+0x34c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f7fe feb2 	bl	8000588 <__aeabi_f2d>
 8001824:	a326      	add	r3, pc, #152	; (adr r3, 80018c0 <main+0x2e8>)
 8001826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182a:	f7ff f995 	bl	8000b58 <__aeabi_dcmpgt>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d014      	beq.n	800185e <main+0x286>
 8001834:	4b3b      	ldr	r3, [pc, #236]	; (8001924 <main+0x34c>)
 8001836:	edd3 7a00 	vldr	s15, [r3]
 800183a:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 800183e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001846:	d80a      	bhi.n	800185e <main+0x286>
			  ENCO=ENCO-2;
 8001848:	4b2c      	ldr	r3, [pc, #176]	; (80018fc <main+0x324>)
 800184a:	edd3 7a00 	vldr	s15, [r3]
 800184e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001852:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001856:	4b29      	ldr	r3, [pc, #164]	; (80018fc <main+0x324>)
 8001858:	edc3 7a00 	vstr	s15, [r3]
 800185c:	e0d2      	b.n	8001a04 <main+0x42c>
		  }else if(difference>0.250 && difference<=0.350){
 800185e:	4b31      	ldr	r3, [pc, #196]	; (8001924 <main+0x34c>)
 8001860:	edd3 7a00 	vldr	s15, [r3]
 8001864:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8001868:	eef4 7ac7 	vcmpe.f32	s15, s14
 800186c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001870:	dd5a      	ble.n	8001928 <main+0x350>
 8001872:	4b2c      	ldr	r3, [pc, #176]	; (8001924 <main+0x34c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f7fe fe86 	bl	8000588 <__aeabi_f2d>
 800187c:	a312      	add	r3, pc, #72	; (adr r3, 80018c8 <main+0x2f0>)
 800187e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001882:	f7ff f955 	bl	8000b30 <__aeabi_dcmple>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d04d      	beq.n	8001928 <main+0x350>
			  ENCO=ENCO-3;
 800188c:	4b1b      	ldr	r3, [pc, #108]	; (80018fc <main+0x324>)
 800188e:	edd3 7a00 	vldr	s15, [r3]
 8001892:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001896:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800189a:	4b18      	ldr	r3, [pc, #96]	; (80018fc <main+0x324>)
 800189c:	edc3 7a00 	vstr	s15, [r3]
 80018a0:	e0b0      	b.n	8001a04 <main+0x42c>
 80018a2:	bf00      	nop
 80018a4:	f3af 8000 	nop.w
 80018a8:	5810624e 	.word	0x5810624e
 80018ac:	400ab439 	.word	0x400ab439
 80018b0:	9610f8f7 	.word	0x9610f8f7
 80018b4:	3f5330a9 	.word	0x3f5330a9
 80018b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80018bc:	3f50624d 	.word	0x3f50624d
 80018c0:	33333333 	.word	0x33333333
 80018c4:	3fc33333 	.word	0x3fc33333
 80018c8:	66666666 	.word	0x66666666
 80018cc:	3fd66666 	.word	0x3fd66666
 80018d0:	200002a4 	.word	0x200002a4
 80018d4:	08008388 	.word	0x08008388
 80018d8:	40020000 	.word	0x40020000
 80018dc:	20000318 	.word	0x20000318
 80018e0:	20000319 	.word	0x20000319
 80018e4:	40020800 	.word	0x40020800
 80018e8:	0800838c 	.word	0x0800838c
 80018ec:	20000310 	.word	0x20000310
 80018f0:	08008390 	.word	0x08008390
 80018f4:	200002ec 	.word	0x200002ec
 80018f8:	20000308 	.word	0x20000308
 80018fc:	2000030c 	.word	0x2000030c
 8001900:	40b00000 	.word	0x40b00000
 8001904:	2000031c 	.word	0x2000031c
 8001908:	3fa1a9fc 	.word	0x3fa1a9fc
 800190c:	4096147b 	.word	0x4096147b
 8001910:	409428f6 	.word	0x409428f6
 8001914:	423a70a4 	.word	0x423a70a4
 8001918:	20000320 	.word	0x20000320
 800191c:	0800839c 	.word	0x0800839c
 8001920:	200002fc 	.word	0x200002fc
 8001924:	20000314 	.word	0x20000314
		  }else if(difference>0.350 && difference<=0.450){
 8001928:	4bad      	ldr	r3, [pc, #692]	; (8001be0 <main+0x608>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f7fe fe2b 	bl	8000588 <__aeabi_f2d>
 8001932:	a39f      	add	r3, pc, #636	; (adr r3, 8001bb0 <main+0x5d8>)
 8001934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001938:	f7ff f90e 	bl	8000b58 <__aeabi_dcmpgt>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d017      	beq.n	8001972 <main+0x39a>
 8001942:	4ba7      	ldr	r3, [pc, #668]	; (8001be0 <main+0x608>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f7fe fe1e 	bl	8000588 <__aeabi_f2d>
 800194c:	a39a      	add	r3, pc, #616	; (adr r3, 8001bb8 <main+0x5e0>)
 800194e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001952:	f7ff f8ed 	bl	8000b30 <__aeabi_dcmple>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d00a      	beq.n	8001972 <main+0x39a>
			  ENCO=ENCO-4;
 800195c:	4ba1      	ldr	r3, [pc, #644]	; (8001be4 <main+0x60c>)
 800195e:	edd3 7a00 	vldr	s15, [r3]
 8001962:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001966:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800196a:	4b9e      	ldr	r3, [pc, #632]	; (8001be4 <main+0x60c>)
 800196c:	edc3 7a00 	vstr	s15, [r3]
 8001970:	e048      	b.n	8001a04 <main+0x42c>
		  }else if(difference>0.450 && difference<=0.550){
 8001972:	4b9b      	ldr	r3, [pc, #620]	; (8001be0 <main+0x608>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f7fe fe06 	bl	8000588 <__aeabi_f2d>
 800197c:	a38e      	add	r3, pc, #568	; (adr r3, 8001bb8 <main+0x5e0>)
 800197e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001982:	f7ff f8e9 	bl	8000b58 <__aeabi_dcmpgt>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d017      	beq.n	80019bc <main+0x3e4>
 800198c:	4b94      	ldr	r3, [pc, #592]	; (8001be0 <main+0x608>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4618      	mov	r0, r3
 8001992:	f7fe fdf9 	bl	8000588 <__aeabi_f2d>
 8001996:	a38a      	add	r3, pc, #552	; (adr r3, 8001bc0 <main+0x5e8>)
 8001998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199c:	f7ff f8c8 	bl	8000b30 <__aeabi_dcmple>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00a      	beq.n	80019bc <main+0x3e4>
			  ENCO=ENCO-5;
 80019a6:	4b8f      	ldr	r3, [pc, #572]	; (8001be4 <main+0x60c>)
 80019a8:	edd3 7a00 	vldr	s15, [r3]
 80019ac:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80019b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80019b4:	4b8b      	ldr	r3, [pc, #556]	; (8001be4 <main+0x60c>)
 80019b6:	edc3 7a00 	vstr	s15, [r3]
 80019ba:	e023      	b.n	8001a04 <main+0x42c>
		  }else if(difference>0.550 && difference<=0.650){
 80019bc:	4b88      	ldr	r3, [pc, #544]	; (8001be0 <main+0x608>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7fe fde1 	bl	8000588 <__aeabi_f2d>
 80019c6:	a37e      	add	r3, pc, #504	; (adr r3, 8001bc0 <main+0x5e8>)
 80019c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019cc:	f7ff f8c4 	bl	8000b58 <__aeabi_dcmpgt>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d016      	beq.n	8001a04 <main+0x42c>
 80019d6:	4b82      	ldr	r3, [pc, #520]	; (8001be0 <main+0x608>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7fe fdd4 	bl	8000588 <__aeabi_f2d>
 80019e0:	a379      	add	r3, pc, #484	; (adr r3, 8001bc8 <main+0x5f0>)
 80019e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e6:	f7ff f8a3 	bl	8000b30 <__aeabi_dcmple>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d009      	beq.n	8001a04 <main+0x42c>
			  ENCO=ENCO-6;
 80019f0:	4b7c      	ldr	r3, [pc, #496]	; (8001be4 <main+0x60c>)
 80019f2:	edd3 7a00 	vldr	s15, [r3]
 80019f6:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80019fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80019fe:	4b79      	ldr	r3, [pc, #484]	; (8001be4 <main+0x60c>)
 8001a00:	edc3 7a00 	vstr	s15, [r3]
		  }
		  PWM = encoder+ENCO;
 8001a04:	4b78      	ldr	r3, [pc, #480]	; (8001be8 <main+0x610>)
 8001a06:	ed93 7a00 	vldr	s14, [r3]
 8001a0a:	4b76      	ldr	r3, [pc, #472]	; (8001be4 <main+0x60c>)
 8001a0c:	edd3 7a00 	vldr	s15, [r3]
 8001a10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a14:	4b75      	ldr	r3, [pc, #468]	; (8001bec <main+0x614>)
 8001a16:	edc3 7a00 	vstr	s15, [r3]
	  }

	  if(VoutMath < out_voltage){
 8001a1a:	4b75      	ldr	r3, [pc, #468]	; (8001bf0 <main+0x618>)
 8001a1c:	ed93 7a00 	vldr	s14, [r3]
 8001a20:	4b74      	ldr	r3, [pc, #464]	; (8001bf4 <main+0x61c>)
 8001a22:	edd3 7a00 	vldr	s15, [r3]
 8001a26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a2e:	f140 8112 	bpl.w	8001c56 <main+0x67e>
		  difference = out_voltage - VoutMath;
 8001a32:	4b70      	ldr	r3, [pc, #448]	; (8001bf4 <main+0x61c>)
 8001a34:	ed93 7a00 	vldr	s14, [r3]
 8001a38:	4b6d      	ldr	r3, [pc, #436]	; (8001bf0 <main+0x618>)
 8001a3a:	edd3 7a00 	vldr	s15, [r3]
 8001a3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a42:	4b67      	ldr	r3, [pc, #412]	; (8001be0 <main+0x608>)
 8001a44:	edc3 7a00 	vstr	s15, [r3]
		  if(difference>=0.001 && difference<=0.150){
 8001a48:	4b65      	ldr	r3, [pc, #404]	; (8001be0 <main+0x608>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7fe fd9b 	bl	8000588 <__aeabi_f2d>
 8001a52:	a35f      	add	r3, pc, #380	; (adr r3, 8001bd0 <main+0x5f8>)
 8001a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a58:	f7ff f874 	bl	8000b44 <__aeabi_dcmpge>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d017      	beq.n	8001a92 <main+0x4ba>
 8001a62:	4b5f      	ldr	r3, [pc, #380]	; (8001be0 <main+0x608>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7fe fd8e 	bl	8000588 <__aeabi_f2d>
 8001a6c:	a35a      	add	r3, pc, #360	; (adr r3, 8001bd8 <main+0x600>)
 8001a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a72:	f7ff f85d 	bl	8000b30 <__aeabi_dcmple>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00a      	beq.n	8001a92 <main+0x4ba>
			  ENCO=ENCO+1;
 8001a7c:	4b59      	ldr	r3, [pc, #356]	; (8001be4 <main+0x60c>)
 8001a7e:	edd3 7a00 	vldr	s15, [r3]
 8001a82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a86:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a8a:	4b56      	ldr	r3, [pc, #344]	; (8001be4 <main+0x60c>)
 8001a8c:	edc3 7a00 	vstr	s15, [r3]
 8001a90:	e0d6      	b.n	8001c40 <main+0x668>
		  }else if(difference>0.150 && difference<=0.250){
 8001a92:	4b53      	ldr	r3, [pc, #332]	; (8001be0 <main+0x608>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7fe fd76 	bl	8000588 <__aeabi_f2d>
 8001a9c:	a34e      	add	r3, pc, #312	; (adr r3, 8001bd8 <main+0x600>)
 8001a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa2:	f7ff f859 	bl	8000b58 <__aeabi_dcmpgt>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d014      	beq.n	8001ad6 <main+0x4fe>
 8001aac:	4b4c      	ldr	r3, [pc, #304]	; (8001be0 <main+0x608>)
 8001aae:	edd3 7a00 	vldr	s15, [r3]
 8001ab2:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8001ab6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001abe:	d80a      	bhi.n	8001ad6 <main+0x4fe>
			  ENCO=ENCO+2;
 8001ac0:	4b48      	ldr	r3, [pc, #288]	; (8001be4 <main+0x60c>)
 8001ac2:	edd3 7a00 	vldr	s15, [r3]
 8001ac6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001aca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ace:	4b45      	ldr	r3, [pc, #276]	; (8001be4 <main+0x60c>)
 8001ad0:	edc3 7a00 	vstr	s15, [r3]
 8001ad4:	e0b4      	b.n	8001c40 <main+0x668>
		  }else if(difference>0.250 && difference<=0.350){
 8001ad6:	4b42      	ldr	r3, [pc, #264]	; (8001be0 <main+0x608>)
 8001ad8:	edd3 7a00 	vldr	s15, [r3]
 8001adc:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8001ae0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae8:	dd17      	ble.n	8001b1a <main+0x542>
 8001aea:	4b3d      	ldr	r3, [pc, #244]	; (8001be0 <main+0x608>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7fe fd4a 	bl	8000588 <__aeabi_f2d>
 8001af4:	a32e      	add	r3, pc, #184	; (adr r3, 8001bb0 <main+0x5d8>)
 8001af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afa:	f7ff f819 	bl	8000b30 <__aeabi_dcmple>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d00a      	beq.n	8001b1a <main+0x542>
			  ENCO=ENCO+3;
 8001b04:	4b37      	ldr	r3, [pc, #220]	; (8001be4 <main+0x60c>)
 8001b06:	edd3 7a00 	vldr	s15, [r3]
 8001b0a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001b0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b12:	4b34      	ldr	r3, [pc, #208]	; (8001be4 <main+0x60c>)
 8001b14:	edc3 7a00 	vstr	s15, [r3]
 8001b18:	e092      	b.n	8001c40 <main+0x668>
		  }else if(difference>0.350 && difference<=0.450){
 8001b1a:	4b31      	ldr	r3, [pc, #196]	; (8001be0 <main+0x608>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7fe fd32 	bl	8000588 <__aeabi_f2d>
 8001b24:	a322      	add	r3, pc, #136	; (adr r3, 8001bb0 <main+0x5d8>)
 8001b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2a:	f7ff f815 	bl	8000b58 <__aeabi_dcmpgt>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d017      	beq.n	8001b64 <main+0x58c>
 8001b34:	4b2a      	ldr	r3, [pc, #168]	; (8001be0 <main+0x608>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7fe fd25 	bl	8000588 <__aeabi_f2d>
 8001b3e:	a31e      	add	r3, pc, #120	; (adr r3, 8001bb8 <main+0x5e0>)
 8001b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b44:	f7fe fff4 	bl	8000b30 <__aeabi_dcmple>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d00a      	beq.n	8001b64 <main+0x58c>
			  ENCO=ENCO+4;
 8001b4e:	4b25      	ldr	r3, [pc, #148]	; (8001be4 <main+0x60c>)
 8001b50:	edd3 7a00 	vldr	s15, [r3]
 8001b54:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001b58:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b5c:	4b21      	ldr	r3, [pc, #132]	; (8001be4 <main+0x60c>)
 8001b5e:	edc3 7a00 	vstr	s15, [r3]
 8001b62:	e06d      	b.n	8001c40 <main+0x668>
		  }else if(difference>0.450 && difference<=0.550){
 8001b64:	4b1e      	ldr	r3, [pc, #120]	; (8001be0 <main+0x608>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7fe fd0d 	bl	8000588 <__aeabi_f2d>
 8001b6e:	a312      	add	r3, pc, #72	; (adr r3, 8001bb8 <main+0x5e0>)
 8001b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b74:	f7fe fff0 	bl	8000b58 <__aeabi_dcmpgt>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d03c      	beq.n	8001bf8 <main+0x620>
 8001b7e:	4b18      	ldr	r3, [pc, #96]	; (8001be0 <main+0x608>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7fe fd00 	bl	8000588 <__aeabi_f2d>
 8001b88:	a30d      	add	r3, pc, #52	; (adr r3, 8001bc0 <main+0x5e8>)
 8001b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b8e:	f7fe ffcf 	bl	8000b30 <__aeabi_dcmple>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d02f      	beq.n	8001bf8 <main+0x620>
			  ENCO=ENCO+5;
 8001b98:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <main+0x60c>)
 8001b9a:	edd3 7a00 	vldr	s15, [r3]
 8001b9e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001ba2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ba6:	4b0f      	ldr	r3, [pc, #60]	; (8001be4 <main+0x60c>)
 8001ba8:	edc3 7a00 	vstr	s15, [r3]
 8001bac:	e048      	b.n	8001c40 <main+0x668>
 8001bae:	bf00      	nop
 8001bb0:	66666666 	.word	0x66666666
 8001bb4:	3fd66666 	.word	0x3fd66666
 8001bb8:	cccccccd 	.word	0xcccccccd
 8001bbc:	3fdccccc 	.word	0x3fdccccc
 8001bc0:	9999999a 	.word	0x9999999a
 8001bc4:	3fe19999 	.word	0x3fe19999
 8001bc8:	cccccccd 	.word	0xcccccccd
 8001bcc:	3fe4cccc 	.word	0x3fe4cccc
 8001bd0:	d2f1a9fc 	.word	0xd2f1a9fc
 8001bd4:	3f50624d 	.word	0x3f50624d
 8001bd8:	33333333 	.word	0x33333333
 8001bdc:	3fc33333 	.word	0x3fc33333
 8001be0:	20000314 	.word	0x20000314
 8001be4:	2000030c 	.word	0x2000030c
 8001be8:	20000308 	.word	0x20000308
 8001bec:	20000310 	.word	0x20000310
 8001bf0:	20000320 	.word	0x20000320
 8001bf4:	200002fc 	.word	0x200002fc
		  }else if(difference>0.550 && difference<=0.650){
 8001bf8:	4ba3      	ldr	r3, [pc, #652]	; (8001e88 <main+0x8b0>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7fe fcc3 	bl	8000588 <__aeabi_f2d>
 8001c02:	a391      	add	r3, pc, #580	; (adr r3, 8001e48 <main+0x870>)
 8001c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c08:	f7fe ffa6 	bl	8000b58 <__aeabi_dcmpgt>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d016      	beq.n	8001c40 <main+0x668>
 8001c12:	4b9d      	ldr	r3, [pc, #628]	; (8001e88 <main+0x8b0>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7fe fcb6 	bl	8000588 <__aeabi_f2d>
 8001c1c:	a38c      	add	r3, pc, #560	; (adr r3, 8001e50 <main+0x878>)
 8001c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c22:	f7fe ff85 	bl	8000b30 <__aeabi_dcmple>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d009      	beq.n	8001c40 <main+0x668>
			  ENCO=ENCO+6;
 8001c2c:	4b97      	ldr	r3, [pc, #604]	; (8001e8c <main+0x8b4>)
 8001c2e:	edd3 7a00 	vldr	s15, [r3]
 8001c32:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001c36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c3a:	4b94      	ldr	r3, [pc, #592]	; (8001e8c <main+0x8b4>)
 8001c3c:	edc3 7a00 	vstr	s15, [r3]
		  }
		  PWM = encoder+ENCO;
 8001c40:	4b93      	ldr	r3, [pc, #588]	; (8001e90 <main+0x8b8>)
 8001c42:	ed93 7a00 	vldr	s14, [r3]
 8001c46:	4b91      	ldr	r3, [pc, #580]	; (8001e8c <main+0x8b4>)
 8001c48:	edd3 7a00 	vldr	s15, [r3]
 8001c4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c50:	4b90      	ldr	r3, [pc, #576]	; (8001e94 <main+0x8bc>)
 8001c52:	edc3 7a00 	vstr	s15, [r3]
	  }
	  /////////////////////////////////////////////////////////////////////////////////////

	  if(contMillis>=90){//cada 120ms imprimo en el oled
 8001c56:	4b90      	ldr	r3, [pc, #576]	; (8001e98 <main+0x8c0>)
 8001c58:	881b      	ldrh	r3, [r3, #0]
 8001c5a:	2b59      	cmp	r3, #89	; 0x59
 8001c5c:	f67f acd5 	bls.w	800160a <main+0x32>

		  difference = VoutMath - out_voltage;
 8001c60:	4b8e      	ldr	r3, [pc, #568]	; (8001e9c <main+0x8c4>)
 8001c62:	ed93 7a00 	vldr	s14, [r3]
 8001c66:	4b8e      	ldr	r3, [pc, #568]	; (8001ea0 <main+0x8c8>)
 8001c68:	edd3 7a00 	vldr	s15, [r3]
 8001c6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c70:	4b85      	ldr	r3, [pc, #532]	; (8001e88 <main+0x8b0>)
 8001c72:	edc3 7a00 	vstr	s15, [r3]

		  if(difference>0){
 8001c76:	4b84      	ldr	r3, [pc, #528]	; (8001e88 <main+0x8b0>)
 8001c78:	edd3 7a00 	vldr	s15, [r3]
 8001c7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c84:	f340 8112 	ble.w	8001eac <main+0x8d4>
			  if(difference>=0.01 && difference<=0.03){
 8001c88:	4b7f      	ldr	r3, [pc, #508]	; (8001e88 <main+0x8b0>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7fe fc7b 	bl	8000588 <__aeabi_f2d>
 8001c92:	a371      	add	r3, pc, #452	; (adr r3, 8001e58 <main+0x880>)
 8001c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c98:	f7fe ff54 	bl	8000b44 <__aeabi_dcmpge>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d01e      	beq.n	8001ce0 <main+0x708>
 8001ca2:	4b79      	ldr	r3, [pc, #484]	; (8001e88 <main+0x8b0>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7fe fc6e 	bl	8000588 <__aeabi_f2d>
 8001cac:	a36c      	add	r3, pc, #432	; (adr r3, 8001e60 <main+0x888>)
 8001cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb2:	f7fe ff3d 	bl	8000b30 <__aeabi_dcmple>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d011      	beq.n	8001ce0 <main+0x708>
				  sprintf(buff,"%2.2fV ",VoutMath);
 8001cbc:	4b77      	ldr	r3, [pc, #476]	; (8001e9c <main+0x8c4>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7fe fc61 	bl	8000588 <__aeabi_f2d>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	4976      	ldr	r1, [pc, #472]	; (8001ea4 <main+0x8cc>)
 8001ccc:	4876      	ldr	r0, [pc, #472]	; (8001ea8 <main+0x8d0>)
 8001cce:	f004 f8d5 	bl	8005e7c <siprintf>
				  OLED_Print_Text(0,0,2,buff);
 8001cd2:	4b75      	ldr	r3, [pc, #468]	; (8001ea8 <main+0x8d0>)
 8001cd4:	2202      	movs	r2, #2
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	2000      	movs	r0, #0
 8001cda:	f7ff fc2f 	bl	800153c <OLED_Print_Text>
 8001cde:	e1ca      	b.n	8002076 <main+0xa9e>
			  }else if(difference>0.03 && difference<=0.06){
 8001ce0:	4b69      	ldr	r3, [pc, #420]	; (8001e88 <main+0x8b0>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7fe fc4f 	bl	8000588 <__aeabi_f2d>
 8001cea:	a35d      	add	r3, pc, #372	; (adr r3, 8001e60 <main+0x888>)
 8001cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf0:	f7fe ff32 	bl	8000b58 <__aeabi_dcmpgt>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d023      	beq.n	8001d42 <main+0x76a>
 8001cfa:	4b63      	ldr	r3, [pc, #396]	; (8001e88 <main+0x8b0>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7fe fc42 	bl	8000588 <__aeabi_f2d>
 8001d04:	a358      	add	r3, pc, #352	; (adr r3, 8001e68 <main+0x890>)
 8001d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0a:	f7fe ff11 	bl	8000b30 <__aeabi_dcmple>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d016      	beq.n	8001d42 <main+0x76a>
				  sprintf(buff,"%2.2fV ",VoutMath-0.01);
 8001d14:	4b61      	ldr	r3, [pc, #388]	; (8001e9c <main+0x8c4>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7fe fc35 	bl	8000588 <__aeabi_f2d>
 8001d1e:	a34e      	add	r3, pc, #312	; (adr r3, 8001e58 <main+0x880>)
 8001d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d24:	f7fe fad0 	bl	80002c8 <__aeabi_dsub>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	495d      	ldr	r1, [pc, #372]	; (8001ea4 <main+0x8cc>)
 8001d2e:	485e      	ldr	r0, [pc, #376]	; (8001ea8 <main+0x8d0>)
 8001d30:	f004 f8a4 	bl	8005e7c <siprintf>
				  OLED_Print_Text(0,0,2,buff);
 8001d34:	4b5c      	ldr	r3, [pc, #368]	; (8001ea8 <main+0x8d0>)
 8001d36:	2202      	movs	r2, #2
 8001d38:	2100      	movs	r1, #0
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	f7ff fbfe 	bl	800153c <OLED_Print_Text>
 8001d40:	e199      	b.n	8002076 <main+0xa9e>
			  }else if(difference>0.06 && difference<=0.10){
 8001d42:	4b51      	ldr	r3, [pc, #324]	; (8001e88 <main+0x8b0>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7fe fc1e 	bl	8000588 <__aeabi_f2d>
 8001d4c:	a346      	add	r3, pc, #280	; (adr r3, 8001e68 <main+0x890>)
 8001d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d52:	f7fe ff01 	bl	8000b58 <__aeabi_dcmpgt>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d023      	beq.n	8001da4 <main+0x7cc>
 8001d5c:	4b4a      	ldr	r3, [pc, #296]	; (8001e88 <main+0x8b0>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7fe fc11 	bl	8000588 <__aeabi_f2d>
 8001d66:	a342      	add	r3, pc, #264	; (adr r3, 8001e70 <main+0x898>)
 8001d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d6c:	f7fe fee0 	bl	8000b30 <__aeabi_dcmple>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d016      	beq.n	8001da4 <main+0x7cc>
				  sprintf(buff,"%2.2fV ",VoutMath-0.02);
 8001d76:	4b49      	ldr	r3, [pc, #292]	; (8001e9c <main+0x8c4>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7fe fc04 	bl	8000588 <__aeabi_f2d>
 8001d80:	a33d      	add	r3, pc, #244	; (adr r3, 8001e78 <main+0x8a0>)
 8001d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d86:	f7fe fa9f 	bl	80002c8 <__aeabi_dsub>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	4945      	ldr	r1, [pc, #276]	; (8001ea4 <main+0x8cc>)
 8001d90:	4845      	ldr	r0, [pc, #276]	; (8001ea8 <main+0x8d0>)
 8001d92:	f004 f873 	bl	8005e7c <siprintf>
				  OLED_Print_Text(0,0,2,buff);
 8001d96:	4b44      	ldr	r3, [pc, #272]	; (8001ea8 <main+0x8d0>)
 8001d98:	2202      	movs	r2, #2
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	2000      	movs	r0, #0
 8001d9e:	f7ff fbcd 	bl	800153c <OLED_Print_Text>
 8001da2:	e168      	b.n	8002076 <main+0xa9e>
			  }else if(difference>0.10 && difference<=0.15){
 8001da4:	4b38      	ldr	r3, [pc, #224]	; (8001e88 <main+0x8b0>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7fe fbed 	bl	8000588 <__aeabi_f2d>
 8001dae:	a330      	add	r3, pc, #192	; (adr r3, 8001e70 <main+0x898>)
 8001db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db4:	f7fe fed0 	bl	8000b58 <__aeabi_dcmpgt>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d023      	beq.n	8001e06 <main+0x82e>
 8001dbe:	4b32      	ldr	r3, [pc, #200]	; (8001e88 <main+0x8b0>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7fe fbe0 	bl	8000588 <__aeabi_f2d>
 8001dc8:	a32d      	add	r3, pc, #180	; (adr r3, 8001e80 <main+0x8a8>)
 8001dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dce:	f7fe feaf 	bl	8000b30 <__aeabi_dcmple>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d016      	beq.n	8001e06 <main+0x82e>
				  sprintf(buff,"%2.2fV ",VoutMath-0.03);
 8001dd8:	4b30      	ldr	r3, [pc, #192]	; (8001e9c <main+0x8c4>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7fe fbd3 	bl	8000588 <__aeabi_f2d>
 8001de2:	a31f      	add	r3, pc, #124	; (adr r3, 8001e60 <main+0x888>)
 8001de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de8:	f7fe fa6e 	bl	80002c8 <__aeabi_dsub>
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	492c      	ldr	r1, [pc, #176]	; (8001ea4 <main+0x8cc>)
 8001df2:	482d      	ldr	r0, [pc, #180]	; (8001ea8 <main+0x8d0>)
 8001df4:	f004 f842 	bl	8005e7c <siprintf>
				  OLED_Print_Text(0,0,2,buff);
 8001df8:	4b2b      	ldr	r3, [pc, #172]	; (8001ea8 <main+0x8d0>)
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	2000      	movs	r0, #0
 8001e00:	f7ff fb9c 	bl	800153c <OLED_Print_Text>
 8001e04:	e137      	b.n	8002076 <main+0xa9e>
			  }else if(difference>0.15){
 8001e06:	4b20      	ldr	r3, [pc, #128]	; (8001e88 <main+0x8b0>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7fe fbbc 	bl	8000588 <__aeabi_f2d>
 8001e10:	a31b      	add	r3, pc, #108	; (adr r3, 8001e80 <main+0x8a8>)
 8001e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e16:	f7fe fe9f 	bl	8000b58 <__aeabi_dcmpgt>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f000 812a 	beq.w	8002076 <main+0xa9e>
				  sprintf(buff,"%2.2fV ",out_voltage);
 8001e22:	4b1f      	ldr	r3, [pc, #124]	; (8001ea0 <main+0x8c8>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7fe fbae 	bl	8000588 <__aeabi_f2d>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	491c      	ldr	r1, [pc, #112]	; (8001ea4 <main+0x8cc>)
 8001e32:	481d      	ldr	r0, [pc, #116]	; (8001ea8 <main+0x8d0>)
 8001e34:	f004 f822 	bl	8005e7c <siprintf>
				  OLED_Print_Text(0,0,2,buff);
 8001e38:	4b1b      	ldr	r3, [pc, #108]	; (8001ea8 <main+0x8d0>)
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	2000      	movs	r0, #0
 8001e40:	f7ff fb7c 	bl	800153c <OLED_Print_Text>
 8001e44:	e117      	b.n	8002076 <main+0xa9e>
 8001e46:	bf00      	nop
 8001e48:	9999999a 	.word	0x9999999a
 8001e4c:	3fe19999 	.word	0x3fe19999
 8001e50:	cccccccd 	.word	0xcccccccd
 8001e54:	3fe4cccc 	.word	0x3fe4cccc
 8001e58:	47ae147b 	.word	0x47ae147b
 8001e5c:	3f847ae1 	.word	0x3f847ae1
 8001e60:	eb851eb8 	.word	0xeb851eb8
 8001e64:	3f9eb851 	.word	0x3f9eb851
 8001e68:	eb851eb8 	.word	0xeb851eb8
 8001e6c:	3faeb851 	.word	0x3faeb851
 8001e70:	9999999a 	.word	0x9999999a
 8001e74:	3fb99999 	.word	0x3fb99999
 8001e78:	47ae147b 	.word	0x47ae147b
 8001e7c:	3f947ae1 	.word	0x3f947ae1
 8001e80:	33333333 	.word	0x33333333
 8001e84:	3fc33333 	.word	0x3fc33333
 8001e88:	20000314 	.word	0x20000314
 8001e8c:	2000030c 	.word	0x2000030c
 8001e90:	20000308 	.word	0x20000308
 8001e94:	20000310 	.word	0x20000310
 8001e98:	2000031a 	.word	0x2000031a
 8001e9c:	20000320 	.word	0x20000320
 8001ea0:	200002fc 	.word	0x200002fc
 8001ea4:	080083a4 	.word	0x080083a4
 8001ea8:	200002ec 	.word	0x200002ec
			  }

		  }else{
			  difference = difference*-1;
 8001eac:	4b82      	ldr	r3, [pc, #520]	; (80020b8 <main+0xae0>)
 8001eae:	edd3 7a00 	vldr	s15, [r3]
 8001eb2:	eef1 7a67 	vneg.f32	s15, s15
 8001eb6:	4b80      	ldr	r3, [pc, #512]	; (80020b8 <main+0xae0>)
 8001eb8:	edc3 7a00 	vstr	s15, [r3]
			  if(difference>=0.01 && difference<=0.03){
 8001ebc:	4b7e      	ldr	r3, [pc, #504]	; (80020b8 <main+0xae0>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7fe fb61 	bl	8000588 <__aeabi_f2d>
 8001ec6:	a370      	add	r3, pc, #448	; (adr r3, 8002088 <main+0xab0>)
 8001ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ecc:	f7fe fe3a 	bl	8000b44 <__aeabi_dcmpge>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d01e      	beq.n	8001f14 <main+0x93c>
 8001ed6:	4b78      	ldr	r3, [pc, #480]	; (80020b8 <main+0xae0>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7fe fb54 	bl	8000588 <__aeabi_f2d>
 8001ee0:	a36b      	add	r3, pc, #428	; (adr r3, 8002090 <main+0xab8>)
 8001ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee6:	f7fe fe23 	bl	8000b30 <__aeabi_dcmple>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d011      	beq.n	8001f14 <main+0x93c>
				  sprintf(buff,"%2.2fV ",VoutMath);
 8001ef0:	4b72      	ldr	r3, [pc, #456]	; (80020bc <main+0xae4>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7fe fb47 	bl	8000588 <__aeabi_f2d>
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	4970      	ldr	r1, [pc, #448]	; (80020c0 <main+0xae8>)
 8001f00:	4870      	ldr	r0, [pc, #448]	; (80020c4 <main+0xaec>)
 8001f02:	f003 ffbb 	bl	8005e7c <siprintf>
				  OLED_Print_Text(0,0,2,buff);
 8001f06:	4b6f      	ldr	r3, [pc, #444]	; (80020c4 <main+0xaec>)
 8001f08:	2202      	movs	r2, #2
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	f7ff fb15 	bl	800153c <OLED_Print_Text>
 8001f12:	e0b0      	b.n	8002076 <main+0xa9e>
			  }else if(difference>0.03 && difference<=0.06){
 8001f14:	4b68      	ldr	r3, [pc, #416]	; (80020b8 <main+0xae0>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7fe fb35 	bl	8000588 <__aeabi_f2d>
 8001f1e:	a35c      	add	r3, pc, #368	; (adr r3, 8002090 <main+0xab8>)
 8001f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f24:	f7fe fe18 	bl	8000b58 <__aeabi_dcmpgt>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d023      	beq.n	8001f76 <main+0x99e>
 8001f2e:	4b62      	ldr	r3, [pc, #392]	; (80020b8 <main+0xae0>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7fe fb28 	bl	8000588 <__aeabi_f2d>
 8001f38:	a357      	add	r3, pc, #348	; (adr r3, 8002098 <main+0xac0>)
 8001f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f3e:	f7fe fdf7 	bl	8000b30 <__aeabi_dcmple>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d016      	beq.n	8001f76 <main+0x99e>
				  sprintf(buff,"%2.2fV ",VoutMath+0.01);
 8001f48:	4b5c      	ldr	r3, [pc, #368]	; (80020bc <main+0xae4>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7fe fb1b 	bl	8000588 <__aeabi_f2d>
 8001f52:	a34d      	add	r3, pc, #308	; (adr r3, 8002088 <main+0xab0>)
 8001f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f58:	f7fe f9b8 	bl	80002cc <__adddf3>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	4957      	ldr	r1, [pc, #348]	; (80020c0 <main+0xae8>)
 8001f62:	4858      	ldr	r0, [pc, #352]	; (80020c4 <main+0xaec>)
 8001f64:	f003 ff8a 	bl	8005e7c <siprintf>
				  OLED_Print_Text(0,0,2,buff);
 8001f68:	4b56      	ldr	r3, [pc, #344]	; (80020c4 <main+0xaec>)
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	2000      	movs	r0, #0
 8001f70:	f7ff fae4 	bl	800153c <OLED_Print_Text>
 8001f74:	e07f      	b.n	8002076 <main+0xa9e>
			  }else if(difference>0.06 && difference<=0.10){
 8001f76:	4b50      	ldr	r3, [pc, #320]	; (80020b8 <main+0xae0>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7fe fb04 	bl	8000588 <__aeabi_f2d>
 8001f80:	a345      	add	r3, pc, #276	; (adr r3, 8002098 <main+0xac0>)
 8001f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f86:	f7fe fde7 	bl	8000b58 <__aeabi_dcmpgt>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d023      	beq.n	8001fd8 <main+0xa00>
 8001f90:	4b49      	ldr	r3, [pc, #292]	; (80020b8 <main+0xae0>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7fe faf7 	bl	8000588 <__aeabi_f2d>
 8001f9a:	a341      	add	r3, pc, #260	; (adr r3, 80020a0 <main+0xac8>)
 8001f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa0:	f7fe fdc6 	bl	8000b30 <__aeabi_dcmple>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d016      	beq.n	8001fd8 <main+0xa00>
				  sprintf(buff,"%2.2fV ",VoutMath+0.02);
 8001faa:	4b44      	ldr	r3, [pc, #272]	; (80020bc <main+0xae4>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7fe faea 	bl	8000588 <__aeabi_f2d>
 8001fb4:	a33c      	add	r3, pc, #240	; (adr r3, 80020a8 <main+0xad0>)
 8001fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fba:	f7fe f987 	bl	80002cc <__adddf3>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	493f      	ldr	r1, [pc, #252]	; (80020c0 <main+0xae8>)
 8001fc4:	483f      	ldr	r0, [pc, #252]	; (80020c4 <main+0xaec>)
 8001fc6:	f003 ff59 	bl	8005e7c <siprintf>
				  OLED_Print_Text(0,0,2,buff);
 8001fca:	4b3e      	ldr	r3, [pc, #248]	; (80020c4 <main+0xaec>)
 8001fcc:	2202      	movs	r2, #2
 8001fce:	2100      	movs	r1, #0
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	f7ff fab3 	bl	800153c <OLED_Print_Text>
 8001fd6:	e04e      	b.n	8002076 <main+0xa9e>
			  }else if(difference>0.10 && difference<=0.15){
 8001fd8:	4b37      	ldr	r3, [pc, #220]	; (80020b8 <main+0xae0>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7fe fad3 	bl	8000588 <__aeabi_f2d>
 8001fe2:	a32f      	add	r3, pc, #188	; (adr r3, 80020a0 <main+0xac8>)
 8001fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe8:	f7fe fdb6 	bl	8000b58 <__aeabi_dcmpgt>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d023      	beq.n	800203a <main+0xa62>
 8001ff2:	4b31      	ldr	r3, [pc, #196]	; (80020b8 <main+0xae0>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe fac6 	bl	8000588 <__aeabi_f2d>
 8001ffc:	a32c      	add	r3, pc, #176	; (adr r3, 80020b0 <main+0xad8>)
 8001ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002002:	f7fe fd95 	bl	8000b30 <__aeabi_dcmple>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d016      	beq.n	800203a <main+0xa62>
				  sprintf(buff,"%2.2fV ",VoutMath+0.03);
 800200c:	4b2b      	ldr	r3, [pc, #172]	; (80020bc <main+0xae4>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe fab9 	bl	8000588 <__aeabi_f2d>
 8002016:	a31e      	add	r3, pc, #120	; (adr r3, 8002090 <main+0xab8>)
 8002018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201c:	f7fe f956 	bl	80002cc <__adddf3>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	4926      	ldr	r1, [pc, #152]	; (80020c0 <main+0xae8>)
 8002026:	4827      	ldr	r0, [pc, #156]	; (80020c4 <main+0xaec>)
 8002028:	f003 ff28 	bl	8005e7c <siprintf>
				  OLED_Print_Text(0,0,2,buff);
 800202c:	4b25      	ldr	r3, [pc, #148]	; (80020c4 <main+0xaec>)
 800202e:	2202      	movs	r2, #2
 8002030:	2100      	movs	r1, #0
 8002032:	2000      	movs	r0, #0
 8002034:	f7ff fa82 	bl	800153c <OLED_Print_Text>
 8002038:	e01d      	b.n	8002076 <main+0xa9e>
			  }else if(difference>0.15){
 800203a:	4b1f      	ldr	r3, [pc, #124]	; (80020b8 <main+0xae0>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f7fe faa2 	bl	8000588 <__aeabi_f2d>
 8002044:	a31a      	add	r3, pc, #104	; (adr r3, 80020b0 <main+0xad8>)
 8002046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204a:	f7fe fd85 	bl	8000b58 <__aeabi_dcmpgt>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d010      	beq.n	8002076 <main+0xa9e>
				  sprintf(buff,"%2.2fV ",out_voltage);
 8002054:	4b1c      	ldr	r3, [pc, #112]	; (80020c8 <main+0xaf0>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f7fe fa95 	bl	8000588 <__aeabi_f2d>
 800205e:	4602      	mov	r2, r0
 8002060:	460b      	mov	r3, r1
 8002062:	4917      	ldr	r1, [pc, #92]	; (80020c0 <main+0xae8>)
 8002064:	4817      	ldr	r0, [pc, #92]	; (80020c4 <main+0xaec>)
 8002066:	f003 ff09 	bl	8005e7c <siprintf>
				  OLED_Print_Text(0,0,2,buff);
 800206a:	4b16      	ldr	r3, [pc, #88]	; (80020c4 <main+0xaec>)
 800206c:	2202      	movs	r2, #2
 800206e:	2100      	movs	r1, #0
 8002070:	2000      	movs	r0, #0
 8002072:	f7ff fa63 	bl	800153c <OLED_Print_Text>

		  //out_voltage   = ADS1115_Read(0)*0.00117127;
		  //sprintf(buff,"%2.2fV ",out_voltage);
		  //OLED_Print_Text(0,0,2,buff);

		  medirCorriente();
 8002076:	f000 f9ef 	bl	8002458 <medirCorriente>
		  //medirPotencia();
		  medirVoltBateria();
 800207a:	f000 fa31 	bl	80024e0 <medirVoltBateria>
		  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
		  contMillis=0;
 800207e:	4b13      	ldr	r3, [pc, #76]	; (80020cc <main+0xaf4>)
 8002080:	2200      	movs	r2, #0
 8002082:	801a      	strh	r2, [r3, #0]
      if(!HAL_GPIO_ReadPin(SW_GPIO_Port, SW_Pin) && !mem){mem = 1;}
 8002084:	f7ff bac1 	b.w	800160a <main+0x32>
 8002088:	47ae147b 	.word	0x47ae147b
 800208c:	3f847ae1 	.word	0x3f847ae1
 8002090:	eb851eb8 	.word	0xeb851eb8
 8002094:	3f9eb851 	.word	0x3f9eb851
 8002098:	eb851eb8 	.word	0xeb851eb8
 800209c:	3faeb851 	.word	0x3faeb851
 80020a0:	9999999a 	.word	0x9999999a
 80020a4:	3fb99999 	.word	0x3fb99999
 80020a8:	47ae147b 	.word	0x47ae147b
 80020ac:	3f947ae1 	.word	0x3f947ae1
 80020b0:	33333333 	.word	0x33333333
 80020b4:	3fc33333 	.word	0x3fc33333
 80020b8:	20000314 	.word	0x20000314
 80020bc:	20000320 	.word	0x20000320
 80020c0:	080083a4 	.word	0x080083a4
 80020c4:	200002ec 	.word	0x200002ec
 80020c8:	200002fc 	.word	0x200002fc
 80020cc:	2000031a 	.word	0x2000031a

080020d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b094      	sub	sp, #80	; 0x50
 80020d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020d6:	f107 031c 	add.w	r3, r7, #28
 80020da:	2234      	movs	r2, #52	; 0x34
 80020dc:	2100      	movs	r1, #0
 80020de:	4618      	mov	r0, r3
 80020e0:	f003 fa5a 	bl	8005598 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020e4:	f107 0308 	add.w	r3, r7, #8
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	60da      	str	r2, [r3, #12]
 80020f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020f4:	2300      	movs	r3, #0
 80020f6:	607b      	str	r3, [r7, #4]
 80020f8:	4b29      	ldr	r3, [pc, #164]	; (80021a0 <SystemClock_Config+0xd0>)
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	4a28      	ldr	r2, [pc, #160]	; (80021a0 <SystemClock_Config+0xd0>)
 80020fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002102:	6413      	str	r3, [r2, #64]	; 0x40
 8002104:	4b26      	ldr	r3, [pc, #152]	; (80021a0 <SystemClock_Config+0xd0>)
 8002106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210c:	607b      	str	r3, [r7, #4]
 800210e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002110:	2300      	movs	r3, #0
 8002112:	603b      	str	r3, [r7, #0]
 8002114:	4b23      	ldr	r3, [pc, #140]	; (80021a4 <SystemClock_Config+0xd4>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800211c:	4a21      	ldr	r2, [pc, #132]	; (80021a4 <SystemClock_Config+0xd4>)
 800211e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002122:	6013      	str	r3, [r2, #0]
 8002124:	4b1f      	ldr	r3, [pc, #124]	; (80021a4 <SystemClock_Config+0xd4>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800212c:	603b      	str	r3, [r7, #0]
 800212e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002130:	2302      	movs	r3, #2
 8002132:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002134:	2301      	movs	r3, #1
 8002136:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002138:	2310      	movs	r3, #16
 800213a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800213c:	2302      	movs	r3, #2
 800213e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002140:	2300      	movs	r3, #0
 8002142:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002144:	2308      	movs	r3, #8
 8002146:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 64;
 8002148:	2340      	movs	r3, #64	; 0x40
 800214a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800214c:	2302      	movs	r3, #2
 800214e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002150:	2302      	movs	r3, #2
 8002152:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002154:	2302      	movs	r3, #2
 8002156:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002158:	f107 031c 	add.w	r3, r7, #28
 800215c:	4618      	mov	r0, r3
 800215e:	f002 fc33 	bl	80049c8 <HAL_RCC_OscConfig>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002168:	f000 f9f0 	bl	800254c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800216c:	230f      	movs	r3, #15
 800216e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002170:	2302      	movs	r3, #2
 8002172:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002174:	2300      	movs	r3, #0
 8002176:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002178:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800217c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800217e:	2300      	movs	r3, #0
 8002180:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002182:	f107 0308 	add.w	r3, r7, #8
 8002186:	2102      	movs	r1, #2
 8002188:	4618      	mov	r0, r3
 800218a:	f002 f96d 	bl	8004468 <HAL_RCC_ClockConfig>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002194:	f000 f9da 	bl	800254c <Error_Handler>
  }
}
 8002198:	bf00      	nop
 800219a:	3750      	adds	r7, #80	; 0x50
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40023800 	.word	0x40023800
 80021a4:	40007000 	.word	0x40007000

080021a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80021ae:	463b      	mov	r3, r7
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80021ba:	4b21      	ldr	r3, [pc, #132]	; (8002240 <MX_ADC1_Init+0x98>)
 80021bc:	4a21      	ldr	r2, [pc, #132]	; (8002244 <MX_ADC1_Init+0x9c>)
 80021be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80021c0:	4b1f      	ldr	r3, [pc, #124]	; (8002240 <MX_ADC1_Init+0x98>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80021c6:	4b1e      	ldr	r3, [pc, #120]	; (8002240 <MX_ADC1_Init+0x98>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80021cc:	4b1c      	ldr	r3, [pc, #112]	; (8002240 <MX_ADC1_Init+0x98>)
 80021ce:	2201      	movs	r2, #1
 80021d0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80021d2:	4b1b      	ldr	r3, [pc, #108]	; (8002240 <MX_ADC1_Init+0x98>)
 80021d4:	2201      	movs	r2, #1
 80021d6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80021d8:	4b19      	ldr	r3, [pc, #100]	; (8002240 <MX_ADC1_Init+0x98>)
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80021e0:	4b17      	ldr	r3, [pc, #92]	; (8002240 <MX_ADC1_Init+0x98>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80021e6:	4b16      	ldr	r3, [pc, #88]	; (8002240 <MX_ADC1_Init+0x98>)
 80021e8:	4a17      	ldr	r2, [pc, #92]	; (8002248 <MX_ADC1_Init+0xa0>)
 80021ea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80021ec:	4b14      	ldr	r3, [pc, #80]	; (8002240 <MX_ADC1_Init+0x98>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80021f2:	4b13      	ldr	r3, [pc, #76]	; (8002240 <MX_ADC1_Init+0x98>)
 80021f4:	2201      	movs	r2, #1
 80021f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80021f8:	4b11      	ldr	r3, [pc, #68]	; (8002240 <MX_ADC1_Init+0x98>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002200:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <MX_ADC1_Init+0x98>)
 8002202:	2201      	movs	r2, #1
 8002204:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002206:	480e      	ldr	r0, [pc, #56]	; (8002240 <MX_ADC1_Init+0x98>)
 8002208:	f000 fc4e 	bl	8002aa8 <HAL_ADC_Init>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002212:	f000 f99b 	bl	800254c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002216:	2301      	movs	r3, #1
 8002218:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800221a:	2301      	movs	r3, #1
 800221c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800221e:	2300      	movs	r3, #0
 8002220:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002222:	463b      	mov	r3, r7
 8002224:	4619      	mov	r1, r3
 8002226:	4806      	ldr	r0, [pc, #24]	; (8002240 <MX_ADC1_Init+0x98>)
 8002228:	f000 fc82 	bl	8002b30 <HAL_ADC_ConfigChannel>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8002232:	f000 f98b 	bl	800254c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002236:	bf00      	nop
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	20000208 	.word	0x20000208
 8002244:	40012000 	.word	0x40012000
 8002248:	0f000001 	.word	0x0f000001

0800224c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002250:	4b12      	ldr	r3, [pc, #72]	; (800229c <MX_I2C1_Init+0x50>)
 8002252:	4a13      	ldr	r2, [pc, #76]	; (80022a0 <MX_I2C1_Init+0x54>)
 8002254:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002256:	4b11      	ldr	r3, [pc, #68]	; (800229c <MX_I2C1_Init+0x50>)
 8002258:	4a12      	ldr	r2, [pc, #72]	; (80022a4 <MX_I2C1_Init+0x58>)
 800225a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800225c:	4b0f      	ldr	r3, [pc, #60]	; (800229c <MX_I2C1_Init+0x50>)
 800225e:	2200      	movs	r2, #0
 8002260:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002262:	4b0e      	ldr	r3, [pc, #56]	; (800229c <MX_I2C1_Init+0x50>)
 8002264:	2200      	movs	r2, #0
 8002266:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002268:	4b0c      	ldr	r3, [pc, #48]	; (800229c <MX_I2C1_Init+0x50>)
 800226a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800226e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002270:	4b0a      	ldr	r3, [pc, #40]	; (800229c <MX_I2C1_Init+0x50>)
 8002272:	2200      	movs	r2, #0
 8002274:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002276:	4b09      	ldr	r3, [pc, #36]	; (800229c <MX_I2C1_Init+0x50>)
 8002278:	2200      	movs	r2, #0
 800227a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800227c:	4b07      	ldr	r3, [pc, #28]	; (800229c <MX_I2C1_Init+0x50>)
 800227e:	2200      	movs	r2, #0
 8002280:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002282:	4b06      	ldr	r3, [pc, #24]	; (800229c <MX_I2C1_Init+0x50>)
 8002284:	2200      	movs	r2, #0
 8002286:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002288:	4804      	ldr	r0, [pc, #16]	; (800229c <MX_I2C1_Init+0x50>)
 800228a:	f001 f957 	bl	800353c <HAL_I2C_Init>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002294:	f000 f95a 	bl	800254c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002298:	bf00      	nop
 800229a:	bd80      	pop	{r7, pc}
 800229c:	20000250 	.word	0x20000250
 80022a0:	40005400 	.word	0x40005400
 80022a4:	00061a80 	.word	0x00061a80

080022a8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022ae:	463b      	mov	r3, r7
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80022b6:	4b15      	ldr	r3, [pc, #84]	; (800230c <MX_TIM6_Init+0x64>)
 80022b8:	4a15      	ldr	r2, [pc, #84]	; (8002310 <MX_TIM6_Init+0x68>)
 80022ba:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 64000-1;
 80022bc:	4b13      	ldr	r3, [pc, #76]	; (800230c <MX_TIM6_Init+0x64>)
 80022be:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80022c2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c4:	4b11      	ldr	r3, [pc, #68]	; (800230c <MX_TIM6_Init+0x64>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 5-1;
 80022ca:	4b10      	ldr	r3, [pc, #64]	; (800230c <MX_TIM6_Init+0x64>)
 80022cc:	2204      	movs	r2, #4
 80022ce:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022d0:	4b0e      	ldr	r3, [pc, #56]	; (800230c <MX_TIM6_Init+0x64>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80022d6:	480d      	ldr	r0, [pc, #52]	; (800230c <MX_TIM6_Init+0x64>)
 80022d8:	f002 fe14 	bl	8004f04 <HAL_TIM_Base_Init>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80022e2:	f000 f933 	bl	800254c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022e6:	2300      	movs	r3, #0
 80022e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022ea:	2300      	movs	r3, #0
 80022ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80022ee:	463b      	mov	r3, r7
 80022f0:	4619      	mov	r1, r3
 80022f2:	4806      	ldr	r0, [pc, #24]	; (800230c <MX_TIM6_Init+0x64>)
 80022f4:	f003 f896 	bl	8005424 <HAL_TIMEx_MasterConfigSynchronization>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80022fe:	f000 f925 	bl	800254c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002302:	bf00      	nop
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	200002a4 	.word	0x200002a4
 8002310:	40001000 	.word	0x40001000

08002314 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b088      	sub	sp, #32
 8002318:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800231a:	f107 030c 	add.w	r3, r7, #12
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	605a      	str	r2, [r3, #4]
 8002324:	609a      	str	r2, [r3, #8]
 8002326:	60da      	str	r2, [r3, #12]
 8002328:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	60bb      	str	r3, [r7, #8]
 800232e:	4b36      	ldr	r3, [pc, #216]	; (8002408 <MX_GPIO_Init+0xf4>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	4a35      	ldr	r2, [pc, #212]	; (8002408 <MX_GPIO_Init+0xf4>)
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	6313      	str	r3, [r2, #48]	; 0x30
 800233a:	4b33      	ldr	r3, [pc, #204]	; (8002408 <MX_GPIO_Init+0xf4>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	60bb      	str	r3, [r7, #8]
 8002344:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	607b      	str	r3, [r7, #4]
 800234a:	4b2f      	ldr	r3, [pc, #188]	; (8002408 <MX_GPIO_Init+0xf4>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	4a2e      	ldr	r2, [pc, #184]	; (8002408 <MX_GPIO_Init+0xf4>)
 8002350:	f043 0302 	orr.w	r3, r3, #2
 8002354:	6313      	str	r3, [r2, #48]	; 0x30
 8002356:	4b2c      	ldr	r3, [pc, #176]	; (8002408 <MX_GPIO_Init+0xf4>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	607b      	str	r3, [r7, #4]
 8002360:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002362:	2300      	movs	r3, #0
 8002364:	603b      	str	r3, [r7, #0]
 8002366:	4b28      	ldr	r3, [pc, #160]	; (8002408 <MX_GPIO_Init+0xf4>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	4a27      	ldr	r2, [pc, #156]	; (8002408 <MX_GPIO_Init+0xf4>)
 800236c:	f043 0304 	orr.w	r3, r3, #4
 8002370:	6313      	str	r3, [r2, #48]	; 0x30
 8002372:	4b25      	ldr	r3, [pc, #148]	; (8002408 <MX_GPIO_Init+0xf4>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	f003 0304 	and.w	r3, r3, #4
 800237a:	603b      	str	r3, [r7, #0]
 800237c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_XL6009_GPIO_Port, EN_XL6009_Pin, GPIO_PIN_RESET);
 800237e:	2200      	movs	r2, #0
 8002380:	2180      	movs	r1, #128	; 0x80
 8002382:	4822      	ldr	r0, [pc, #136]	; (800240c <MX_GPIO_Init+0xf8>)
 8002384:	f001 f8c0 	bl	8003508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8002388:	2201      	movs	r2, #1
 800238a:	2140      	movs	r1, #64	; 0x40
 800238c:	4820      	ldr	r0, [pc, #128]	; (8002410 <MX_GPIO_Init+0xfc>)
 800238e:	f001 f8bb 	bl	8003508 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DT_Pin CLK_Pin */
  GPIO_InitStruct.Pin = DT_Pin|CLK_Pin;
 8002392:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8002396:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002398:	2300      	movs	r3, #0
 800239a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239c:	2300      	movs	r3, #0
 800239e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a0:	f107 030c 	add.w	r3, r7, #12
 80023a4:	4619      	mov	r1, r3
 80023a6:	481a      	ldr	r0, [pc, #104]	; (8002410 <MX_GPIO_Init+0xfc>)
 80023a8:	f000 ff02 	bl	80031b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_XL6009_Pin */
  GPIO_InitStruct.Pin = EN_XL6009_Pin;
 80023ac:	2380      	movs	r3, #128	; 0x80
 80023ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023b0:	2301      	movs	r3, #1
 80023b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b8:	2300      	movs	r3, #0
 80023ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EN_XL6009_GPIO_Port, &GPIO_InitStruct);
 80023bc:	f107 030c 	add.w	r3, r7, #12
 80023c0:	4619      	mov	r1, r3
 80023c2:	4812      	ldr	r0, [pc, #72]	; (800240c <MX_GPIO_Init+0xf8>)
 80023c4:	f000 fef4 	bl	80031b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_Pin */
  GPIO_InitStruct.Pin = SW_Pin;
 80023c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023ce:	2300      	movs	r3, #0
 80023d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 80023d6:	f107 030c 	add.w	r3, r7, #12
 80023da:	4619      	mov	r1, r3
 80023dc:	480d      	ldr	r0, [pc, #52]	; (8002414 <MX_GPIO_Init+0x100>)
 80023de:	f000 fee7 	bl	80031b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 80023e2:	2340      	movs	r3, #64	; 0x40
 80023e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023e6:	2301      	movs	r3, #1
 80023e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023ee:	2302      	movs	r3, #2
 80023f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80023f2:	f107 030c 	add.w	r3, r7, #12
 80023f6:	4619      	mov	r1, r3
 80023f8:	4805      	ldr	r0, [pc, #20]	; (8002410 <MX_GPIO_Init+0xfc>)
 80023fa:	f000 fed9 	bl	80031b0 <HAL_GPIO_Init>

}
 80023fe:	bf00      	nop
 8002400:	3720      	adds	r7, #32
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	40023800 	.word	0x40023800
 800240c:	40020800 	.word	0x40020800
 8002410:	40020400 	.word	0x40020400
 8002414:	40020000 	.word	0x40020000

08002418 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {//Leemos el encoder cada 5ms
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a09      	ldr	r2, [pc, #36]	; (800244c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d10c      	bne.n	8002444 <HAL_TIM_PeriodElapsedCallback+0x2c>
		encoder = Encoder_Run();
 800242a:	f7fe fe07 	bl	800103c <Encoder_Run>
 800242e:	eef0 7a40 	vmov.f32	s15, s0
 8002432:	4b07      	ldr	r3, [pc, #28]	; (8002450 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002434:	edc3 7a00 	vstr	s15, [r3]
		contMillis++;
 8002438:	4b06      	ldr	r3, [pc, #24]	; (8002454 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800243a:	881b      	ldrh	r3, [r3, #0]
 800243c:	3301      	adds	r3, #1
 800243e:	b29a      	uxth	r2, r3
 8002440:	4b04      	ldr	r3, [pc, #16]	; (8002454 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002442:	801a      	strh	r2, [r3, #0]
	}
}
 8002444:	bf00      	nop
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40001000 	.word	0x40001000
 8002450:	20000308 	.word	0x20000308
 8002454:	2000031a 	.word	0x2000031a

08002458 <medirCorriente>:

void medirCorriente(void){
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  corriente = ADS1115_Read(1)*0.078125;
 800245c:	2001      	movs	r0, #1
 800245e:	f7fe fd95 	bl	8000f8c <ADS1115_Read>
 8002462:	4603      	mov	r3, r0
 8002464:	4618      	mov	r0, r3
 8002466:	f7fe f87d 	bl	8000564 <__aeabi_i2d>
 800246a:	f04f 0200 	mov.w	r2, #0
 800246e:	4b17      	ldr	r3, [pc, #92]	; (80024cc <medirCorriente+0x74>)
 8002470:	f7fe f8e2 	bl	8000638 <__aeabi_dmul>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	4610      	mov	r0, r2
 800247a:	4619      	mov	r1, r3
 800247c:	f7fe fbb4 	bl	8000be8 <__aeabi_d2f>
 8002480:	4603      	mov	r3, r0
 8002482:	4a13      	ldr	r2, [pc, #76]	; (80024d0 <medirCorriente+0x78>)
 8002484:	6013      	str	r3, [r2, #0]
  if(corriente>=0){
 8002486:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <medirCorriente+0x78>)
 8002488:	edd3 7a00 	vldr	s15, [r3]
 800248c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002494:	db11      	blt.n	80024ba <medirCorriente+0x62>
	  sprintf(buff,"%4.0fmA",corriente);
 8002496:	4b0e      	ldr	r3, [pc, #56]	; (80024d0 <medirCorriente+0x78>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe f874 	bl	8000588 <__aeabi_f2d>
 80024a0:	4602      	mov	r2, r0
 80024a2:	460b      	mov	r3, r1
 80024a4:	490b      	ldr	r1, [pc, #44]	; (80024d4 <medirCorriente+0x7c>)
 80024a6:	480c      	ldr	r0, [pc, #48]	; (80024d8 <medirCorriente+0x80>)
 80024a8:	f003 fce8 	bl	8005e7c <siprintf>
	  OLED_Print_Text(2,0,2,buff);
 80024ac:	4b0a      	ldr	r3, [pc, #40]	; (80024d8 <medirCorriente+0x80>)
 80024ae:	2202      	movs	r2, #2
 80024b0:	2100      	movs	r1, #0
 80024b2:	2002      	movs	r0, #2
 80024b4:	f7ff f842 	bl	800153c <OLED_Print_Text>
  }else{
	  OLED_Print_Text(2,0,2,"   0mA");
  }
}
 80024b8:	e005      	b.n	80024c6 <medirCorriente+0x6e>
	  OLED_Print_Text(2,0,2,"   0mA");
 80024ba:	4b08      	ldr	r3, [pc, #32]	; (80024dc <medirCorriente+0x84>)
 80024bc:	2202      	movs	r2, #2
 80024be:	2100      	movs	r1, #0
 80024c0:	2002      	movs	r0, #2
 80024c2:	f7ff f83b 	bl	800153c <OLED_Print_Text>
}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	3fb40000 	.word	0x3fb40000
 80024d0:	20000304 	.word	0x20000304
 80024d4:	080083ac 	.word	0x080083ac
 80024d8:	200002ec 	.word	0x200002ec
 80024dc:	080083b4 	.word	0x080083b4

080024e0 <medirVoltBateria>:
  }else{
	  OLED_Print_Text(2,70,2,"0.00W ");
  }
}

void medirVoltBateria(void){
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  in_voltage   = ADS1115_Read(2)*0.00049449;
 80024e4:	2002      	movs	r0, #2
 80024e6:	f7fe fd51 	bl	8000f8c <ADS1115_Read>
 80024ea:	4603      	mov	r3, r0
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7fe f839 	bl	8000564 <__aeabi_i2d>
 80024f2:	a314      	add	r3, pc, #80	; (adr r3, 8002544 <medirVoltBateria+0x64>)
 80024f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f8:	f7fe f89e 	bl	8000638 <__aeabi_dmul>
 80024fc:	4602      	mov	r2, r0
 80024fe:	460b      	mov	r3, r1
 8002500:	4610      	mov	r0, r2
 8002502:	4619      	mov	r1, r3
 8002504:	f7fe fb70 	bl	8000be8 <__aeabi_d2f>
 8002508:	4603      	mov	r3, r0
 800250a:	4a0b      	ldr	r2, [pc, #44]	; (8002538 <medirVoltBateria+0x58>)
 800250c:	6013      	str	r3, [r2, #0]
  sprintf(buff,"VIN:%2.1fV",in_voltage);
 800250e:	4b0a      	ldr	r3, [pc, #40]	; (8002538 <medirVoltBateria+0x58>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f7fe f838 	bl	8000588 <__aeabi_f2d>
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	4907      	ldr	r1, [pc, #28]	; (800253c <medirVoltBateria+0x5c>)
 800251e:	4808      	ldr	r0, [pc, #32]	; (8002540 <medirVoltBateria+0x60>)
 8002520:	f003 fcac 	bl	8005e7c <siprintf>
  OLED_Print_Text(0,70,1,buff);
 8002524:	4b06      	ldr	r3, [pc, #24]	; (8002540 <medirVoltBateria+0x60>)
 8002526:	2201      	movs	r2, #1
 8002528:	2146      	movs	r1, #70	; 0x46
 800252a:	2000      	movs	r0, #0
 800252c:	f7ff f806 	bl	800153c <OLED_Print_Text>
}
 8002530:	bf00      	nop
 8002532:	bd80      	pop	{r7, pc}
 8002534:	f3af 8000 	nop.w
 8002538:	20000300 	.word	0x20000300
 800253c:	080083cc 	.word	0x080083cc
 8002540:	200002ec 	.word	0x200002ec
 8002544:	3068d37e 	.word	0x3068d37e
 8002548:	3f403415 	.word	0x3f403415

0800254c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002550:	b672      	cpsid	i
}
 8002552:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002554:	e7fe      	b.n	8002554 <Error_Handler+0x8>
	...

08002558 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	607b      	str	r3, [r7, #4]
 8002562:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <HAL_MspInit+0x4c>)
 8002564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002566:	4a0f      	ldr	r2, [pc, #60]	; (80025a4 <HAL_MspInit+0x4c>)
 8002568:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800256c:	6453      	str	r3, [r2, #68]	; 0x44
 800256e:	4b0d      	ldr	r3, [pc, #52]	; (80025a4 <HAL_MspInit+0x4c>)
 8002570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002576:	607b      	str	r3, [r7, #4]
 8002578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	603b      	str	r3, [r7, #0]
 800257e:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <HAL_MspInit+0x4c>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	4a08      	ldr	r2, [pc, #32]	; (80025a4 <HAL_MspInit+0x4c>)
 8002584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002588:	6413      	str	r3, [r2, #64]	; 0x40
 800258a:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <HAL_MspInit+0x4c>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002592:	603b      	str	r3, [r7, #0]
 8002594:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	40023800 	.word	0x40023800

080025a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b08a      	sub	sp, #40	; 0x28
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b0:	f107 0314 	add.w	r3, r7, #20
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	605a      	str	r2, [r3, #4]
 80025ba:	609a      	str	r2, [r3, #8]
 80025bc:	60da      	str	r2, [r3, #12]
 80025be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a17      	ldr	r2, [pc, #92]	; (8002624 <HAL_ADC_MspInit+0x7c>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d127      	bne.n	800261a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	613b      	str	r3, [r7, #16]
 80025ce:	4b16      	ldr	r3, [pc, #88]	; (8002628 <HAL_ADC_MspInit+0x80>)
 80025d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d2:	4a15      	ldr	r2, [pc, #84]	; (8002628 <HAL_ADC_MspInit+0x80>)
 80025d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d8:	6453      	str	r3, [r2, #68]	; 0x44
 80025da:	4b13      	ldr	r3, [pc, #76]	; (8002628 <HAL_ADC_MspInit+0x80>)
 80025dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e2:	613b      	str	r3, [r7, #16]
 80025e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	4b0f      	ldr	r3, [pc, #60]	; (8002628 <HAL_ADC_MspInit+0x80>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	4a0e      	ldr	r2, [pc, #56]	; (8002628 <HAL_ADC_MspInit+0x80>)
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	6313      	str	r3, [r2, #48]	; 0x30
 80025f6:	4b0c      	ldr	r3, [pc, #48]	; (8002628 <HAL_ADC_MspInit+0x80>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002602:	2302      	movs	r3, #2
 8002604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002606:	2303      	movs	r3, #3
 8002608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260a:	2300      	movs	r3, #0
 800260c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800260e:	f107 0314 	add.w	r3, r7, #20
 8002612:	4619      	mov	r1, r3
 8002614:	4805      	ldr	r0, [pc, #20]	; (800262c <HAL_ADC_MspInit+0x84>)
 8002616:	f000 fdcb 	bl	80031b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800261a:	bf00      	nop
 800261c:	3728      	adds	r7, #40	; 0x28
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40012000 	.word	0x40012000
 8002628:	40023800 	.word	0x40023800
 800262c:	40020000 	.word	0x40020000

08002630 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b08a      	sub	sp, #40	; 0x28
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002638:	f107 0314 	add.w	r3, r7, #20
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	605a      	str	r2, [r3, #4]
 8002642:	609a      	str	r2, [r3, #8]
 8002644:	60da      	str	r2, [r3, #12]
 8002646:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a19      	ldr	r2, [pc, #100]	; (80026b4 <HAL_I2C_MspInit+0x84>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d12c      	bne.n	80026ac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002652:	2300      	movs	r3, #0
 8002654:	613b      	str	r3, [r7, #16]
 8002656:	4b18      	ldr	r3, [pc, #96]	; (80026b8 <HAL_I2C_MspInit+0x88>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	4a17      	ldr	r2, [pc, #92]	; (80026b8 <HAL_I2C_MspInit+0x88>)
 800265c:	f043 0302 	orr.w	r3, r3, #2
 8002660:	6313      	str	r3, [r2, #48]	; 0x30
 8002662:	4b15      	ldr	r3, [pc, #84]	; (80026b8 <HAL_I2C_MspInit+0x88>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	613b      	str	r3, [r7, #16]
 800266c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800266e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002672:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002674:	2312      	movs	r3, #18
 8002676:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002678:	2300      	movs	r3, #0
 800267a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800267c:	2303      	movs	r3, #3
 800267e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002680:	2304      	movs	r3, #4
 8002682:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002684:	f107 0314 	add.w	r3, r7, #20
 8002688:	4619      	mov	r1, r3
 800268a:	480c      	ldr	r0, [pc, #48]	; (80026bc <HAL_I2C_MspInit+0x8c>)
 800268c:	f000 fd90 	bl	80031b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002690:	2300      	movs	r3, #0
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	4b08      	ldr	r3, [pc, #32]	; (80026b8 <HAL_I2C_MspInit+0x88>)
 8002696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002698:	4a07      	ldr	r2, [pc, #28]	; (80026b8 <HAL_I2C_MspInit+0x88>)
 800269a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800269e:	6413      	str	r3, [r2, #64]	; 0x40
 80026a0:	4b05      	ldr	r3, [pc, #20]	; (80026b8 <HAL_I2C_MspInit+0x88>)
 80026a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80026ac:	bf00      	nop
 80026ae:	3728      	adds	r7, #40	; 0x28
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40005400 	.word	0x40005400
 80026b8:	40023800 	.word	0x40023800
 80026bc:	40020400 	.word	0x40020400

080026c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a0e      	ldr	r2, [pc, #56]	; (8002708 <HAL_TIM_Base_MspInit+0x48>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d115      	bne.n	80026fe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80026d2:	2300      	movs	r3, #0
 80026d4:	60fb      	str	r3, [r7, #12]
 80026d6:	4b0d      	ldr	r3, [pc, #52]	; (800270c <HAL_TIM_Base_MspInit+0x4c>)
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	4a0c      	ldr	r2, [pc, #48]	; (800270c <HAL_TIM_Base_MspInit+0x4c>)
 80026dc:	f043 0310 	orr.w	r3, r3, #16
 80026e0:	6413      	str	r3, [r2, #64]	; 0x40
 80026e2:	4b0a      	ldr	r3, [pc, #40]	; (800270c <HAL_TIM_Base_MspInit+0x4c>)
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	f003 0310 	and.w	r3, r3, #16
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80026ee:	2200      	movs	r2, #0
 80026f0:	2100      	movs	r1, #0
 80026f2:	2036      	movs	r0, #54	; 0x36
 80026f4:	f000 fd25 	bl	8003142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80026f8:	2036      	movs	r0, #54	; 0x36
 80026fa:	f000 fd3e 	bl	800317a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80026fe:	bf00      	nop
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40001000 	.word	0x40001000
 800270c:	40023800 	.word	0x40023800

08002710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002714:	e7fe      	b.n	8002714 <NMI_Handler+0x4>

08002716 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002716:	b480      	push	{r7}
 8002718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800271a:	e7fe      	b.n	800271a <HardFault_Handler+0x4>

0800271c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002720:	e7fe      	b.n	8002720 <MemManage_Handler+0x4>

08002722 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002722:	b480      	push	{r7}
 8002724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002726:	e7fe      	b.n	8002726 <BusFault_Handler+0x4>

08002728 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800272c:	e7fe      	b.n	800272c <UsageFault_Handler+0x4>

0800272e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800272e:	b480      	push	{r7}
 8002730:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002732:	bf00      	nop
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002740:	bf00      	nop
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800274a:	b480      	push	{r7}
 800274c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800274e:	bf00      	nop
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800275c:	f000 f960 	bl	8002a20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002760:	bf00      	nop
 8002762:	bd80      	pop	{r7, pc}

08002764 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002768:	4802      	ldr	r0, [pc, #8]	; (8002774 <TIM6_DAC_IRQHandler+0x10>)
 800276a:	f002 fc8b 	bl	8005084 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800276e:	bf00      	nop
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	200002a4 	.word	0x200002a4

08002778 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
	return 1;
 800277c:	2301      	movs	r3, #1
}
 800277e:	4618      	mov	r0, r3
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <_kill>:

int _kill(int pid, int sig)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002792:	f002 fed7 	bl	8005544 <__errno>
 8002796:	4603      	mov	r3, r0
 8002798:	2216      	movs	r2, #22
 800279a:	601a      	str	r2, [r3, #0]
	return -1;
 800279c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <_exit>:

void _exit (int status)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80027b0:	f04f 31ff 	mov.w	r1, #4294967295
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f7ff ffe7 	bl	8002788 <_kill>
	while (1) {}		/* Make sure we hang here */
 80027ba:	e7fe      	b.n	80027ba <_exit+0x12>

080027bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027c8:	2300      	movs	r3, #0
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	e00a      	b.n	80027e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80027ce:	f3af 8000 	nop.w
 80027d2:	4601      	mov	r1, r0
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	1c5a      	adds	r2, r3, #1
 80027d8:	60ba      	str	r2, [r7, #8]
 80027da:	b2ca      	uxtb	r2, r1
 80027dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	3301      	adds	r3, #1
 80027e2:	617b      	str	r3, [r7, #20]
 80027e4:	697a      	ldr	r2, [r7, #20]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	dbf0      	blt.n	80027ce <_read+0x12>
	}

return len;
 80027ec:	687b      	ldr	r3, [r7, #4]
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b086      	sub	sp, #24
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	60f8      	str	r0, [r7, #12]
 80027fe:	60b9      	str	r1, [r7, #8]
 8002800:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002802:	2300      	movs	r3, #0
 8002804:	617b      	str	r3, [r7, #20]
 8002806:	e009      	b.n	800281c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	1c5a      	adds	r2, r3, #1
 800280c:	60ba      	str	r2, [r7, #8]
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	4618      	mov	r0, r3
 8002812:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	3301      	adds	r3, #1
 800281a:	617b      	str	r3, [r7, #20]
 800281c:	697a      	ldr	r2, [r7, #20]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	429a      	cmp	r2, r3
 8002822:	dbf1      	blt.n	8002808 <_write+0x12>
	}
	return len;
 8002824:	687b      	ldr	r3, [r7, #4]
}
 8002826:	4618      	mov	r0, r3
 8002828:	3718      	adds	r7, #24
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <_close>:

int _close(int file)
{
 800282e:	b480      	push	{r7}
 8002830:	b083      	sub	sp, #12
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
	return -1;
 8002836:	f04f 33ff 	mov.w	r3, #4294967295
}
 800283a:	4618      	mov	r0, r3
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002846:	b480      	push	{r7}
 8002848:	b083      	sub	sp, #12
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
 800284e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002856:	605a      	str	r2, [r3, #4]
	return 0;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <_isatty>:

int _isatty(int file)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
	return 1;
 800286e:	2301      	movs	r3, #1
}
 8002870:	4618      	mov	r0, r3
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
	return 0;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3714      	adds	r7, #20
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
	...

08002898 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028a0:	4a14      	ldr	r2, [pc, #80]	; (80028f4 <_sbrk+0x5c>)
 80028a2:	4b15      	ldr	r3, [pc, #84]	; (80028f8 <_sbrk+0x60>)
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028ac:	4b13      	ldr	r3, [pc, #76]	; (80028fc <_sbrk+0x64>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d102      	bne.n	80028ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028b4:	4b11      	ldr	r3, [pc, #68]	; (80028fc <_sbrk+0x64>)
 80028b6:	4a12      	ldr	r2, [pc, #72]	; (8002900 <_sbrk+0x68>)
 80028b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028ba:	4b10      	ldr	r3, [pc, #64]	; (80028fc <_sbrk+0x64>)
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4413      	add	r3, r2
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d207      	bcs.n	80028d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028c8:	f002 fe3c 	bl	8005544 <__errno>
 80028cc:	4603      	mov	r3, r0
 80028ce:	220c      	movs	r2, #12
 80028d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028d2:	f04f 33ff 	mov.w	r3, #4294967295
 80028d6:	e009      	b.n	80028ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028d8:	4b08      	ldr	r3, [pc, #32]	; (80028fc <_sbrk+0x64>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028de:	4b07      	ldr	r3, [pc, #28]	; (80028fc <_sbrk+0x64>)
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4413      	add	r3, r2
 80028e6:	4a05      	ldr	r2, [pc, #20]	; (80028fc <_sbrk+0x64>)
 80028e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028ea:	68fb      	ldr	r3, [r7, #12]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3718      	adds	r7, #24
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	20020000 	.word	0x20020000
 80028f8:	00000400 	.word	0x00000400
 80028fc:	20000324 	.word	0x20000324
 8002900:	20000340 	.word	0x20000340

08002904 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002908:	4b06      	ldr	r3, [pc, #24]	; (8002924 <SystemInit+0x20>)
 800290a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290e:	4a05      	ldr	r2, [pc, #20]	; (8002924 <SystemInit+0x20>)
 8002910:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002914:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002918:	bf00      	nop
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	e000ed00 	.word	0xe000ed00

08002928 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002928:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002960 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800292c:	480d      	ldr	r0, [pc, #52]	; (8002964 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800292e:	490e      	ldr	r1, [pc, #56]	; (8002968 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002930:	4a0e      	ldr	r2, [pc, #56]	; (800296c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002934:	e002      	b.n	800293c <LoopCopyDataInit>

08002936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800293a:	3304      	adds	r3, #4

0800293c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800293c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800293e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002940:	d3f9      	bcc.n	8002936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002942:	4a0b      	ldr	r2, [pc, #44]	; (8002970 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002944:	4c0b      	ldr	r4, [pc, #44]	; (8002974 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002948:	e001      	b.n	800294e <LoopFillZerobss>

0800294a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800294a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800294c:	3204      	adds	r2, #4

0800294e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800294e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002950:	d3fb      	bcc.n	800294a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002952:	f7ff ffd7 	bl	8002904 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002956:	f002 fdfb 	bl	8005550 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800295a:	f7fe fe3d 	bl	80015d8 <main>
  bx  lr    
 800295e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002960:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002968:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 800296c:	0800a734 	.word	0x0800a734
  ldr r2, =_sbss
 8002970:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002974:	2000033c 	.word	0x2000033c

08002978 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002978:	e7fe      	b.n	8002978 <ADC_IRQHandler>
	...

0800297c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002980:	4b0e      	ldr	r3, [pc, #56]	; (80029bc <HAL_Init+0x40>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a0d      	ldr	r2, [pc, #52]	; (80029bc <HAL_Init+0x40>)
 8002986:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800298a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800298c:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <HAL_Init+0x40>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a0a      	ldr	r2, [pc, #40]	; (80029bc <HAL_Init+0x40>)
 8002992:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002996:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002998:	4b08      	ldr	r3, [pc, #32]	; (80029bc <HAL_Init+0x40>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a07      	ldr	r2, [pc, #28]	; (80029bc <HAL_Init+0x40>)
 800299e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029a4:	2003      	movs	r0, #3
 80029a6:	f000 fbc1 	bl	800312c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029aa:	200f      	movs	r0, #15
 80029ac:	f000 f808 	bl	80029c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029b0:	f7ff fdd2 	bl	8002558 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	40023c00 	.word	0x40023c00

080029c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029c8:	4b12      	ldr	r3, [pc, #72]	; (8002a14 <HAL_InitTick+0x54>)
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	4b12      	ldr	r3, [pc, #72]	; (8002a18 <HAL_InitTick+0x58>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	4619      	mov	r1, r3
 80029d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80029da:	fbb2 f3f3 	udiv	r3, r2, r3
 80029de:	4618      	mov	r0, r3
 80029e0:	f000 fbd9 	bl	8003196 <HAL_SYSTICK_Config>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e00e      	b.n	8002a0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2b0f      	cmp	r3, #15
 80029f2:	d80a      	bhi.n	8002a0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029f4:	2200      	movs	r2, #0
 80029f6:	6879      	ldr	r1, [r7, #4]
 80029f8:	f04f 30ff 	mov.w	r0, #4294967295
 80029fc:	f000 fba1 	bl	8003142 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a00:	4a06      	ldr	r2, [pc, #24]	; (8002a1c <HAL_InitTick+0x5c>)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
 8002a08:	e000      	b.n	8002a0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3708      	adds	r7, #8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	20000008 	.word	0x20000008
 8002a18:	20000010 	.word	0x20000010
 8002a1c:	2000000c 	.word	0x2000000c

08002a20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a24:	4b06      	ldr	r3, [pc, #24]	; (8002a40 <HAL_IncTick+0x20>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	461a      	mov	r2, r3
 8002a2a:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <HAL_IncTick+0x24>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4413      	add	r3, r2
 8002a30:	4a04      	ldr	r2, [pc, #16]	; (8002a44 <HAL_IncTick+0x24>)
 8002a32:	6013      	str	r3, [r2, #0]
}
 8002a34:	bf00      	nop
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	20000010 	.word	0x20000010
 8002a44:	20000328 	.word	0x20000328

08002a48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a4c:	4b03      	ldr	r3, [pc, #12]	; (8002a5c <HAL_GetTick+0x14>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	20000328 	.word	0x20000328

08002a60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a68:	f7ff ffee 	bl	8002a48 <HAL_GetTick>
 8002a6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a78:	d005      	beq.n	8002a86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a7a:	4b0a      	ldr	r3, [pc, #40]	; (8002aa4 <HAL_Delay+0x44>)
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	4413      	add	r3, r2
 8002a84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a86:	bf00      	nop
 8002a88:	f7ff ffde 	bl	8002a48 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d8f7      	bhi.n	8002a88 <HAL_Delay+0x28>
  {
  }
}
 8002a98:	bf00      	nop
 8002a9a:	bf00      	nop
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	20000010 	.word	0x20000010

08002aa8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e033      	b.n	8002b26 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d109      	bne.n	8002ada <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7ff fd6e 	bl	80025a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	f003 0310 	and.w	r3, r3, #16
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d118      	bne.n	8002b18 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002aee:	f023 0302 	bic.w	r3, r3, #2
 8002af2:	f043 0202 	orr.w	r2, r3, #2
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f94a 	bl	8002d94 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	f023 0303 	bic.w	r3, r3, #3
 8002b0e:	f043 0201 	orr.w	r2, r3, #1
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	641a      	str	r2, [r3, #64]	; 0x40
 8002b16:	e001      	b.n	8002b1c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
	...

08002b30 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d101      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0x1c>
 8002b48:	2302      	movs	r3, #2
 8002b4a:	e113      	b.n	8002d74 <HAL_ADC_ConfigChannel+0x244>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2b09      	cmp	r3, #9
 8002b5a:	d925      	bls.n	8002ba8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68d9      	ldr	r1, [r3, #12]
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	461a      	mov	r2, r3
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	4413      	add	r3, r2
 8002b70:	3b1e      	subs	r3, #30
 8002b72:	2207      	movs	r2, #7
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	43da      	mvns	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	400a      	ands	r2, r1
 8002b80:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68d9      	ldr	r1, [r3, #12]
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	4618      	mov	r0, r3
 8002b94:	4603      	mov	r3, r0
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	4403      	add	r3, r0
 8002b9a:	3b1e      	subs	r3, #30
 8002b9c:	409a      	lsls	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	60da      	str	r2, [r3, #12]
 8002ba6:	e022      	b.n	8002bee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6919      	ldr	r1, [r3, #16]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	4413      	add	r3, r2
 8002bbc:	2207      	movs	r2, #7
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	43da      	mvns	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	400a      	ands	r2, r1
 8002bca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6919      	ldr	r1, [r3, #16]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	689a      	ldr	r2, [r3, #8]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	4618      	mov	r0, r3
 8002bde:	4603      	mov	r3, r0
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	4403      	add	r3, r0
 8002be4:	409a      	lsls	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	430a      	orrs	r2, r1
 8002bec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b06      	cmp	r3, #6
 8002bf4:	d824      	bhi.n	8002c40 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685a      	ldr	r2, [r3, #4]
 8002c00:	4613      	mov	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4413      	add	r3, r2
 8002c06:	3b05      	subs	r3, #5
 8002c08:	221f      	movs	r2, #31
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	43da      	mvns	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	400a      	ands	r2, r1
 8002c16:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	4618      	mov	r0, r3
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	4413      	add	r3, r2
 8002c30:	3b05      	subs	r3, #5
 8002c32:	fa00 f203 	lsl.w	r2, r0, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	635a      	str	r2, [r3, #52]	; 0x34
 8002c3e:	e04c      	b.n	8002cda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	2b0c      	cmp	r3, #12
 8002c46:	d824      	bhi.n	8002c92 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685a      	ldr	r2, [r3, #4]
 8002c52:	4613      	mov	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4413      	add	r3, r2
 8002c58:	3b23      	subs	r3, #35	; 0x23
 8002c5a:	221f      	movs	r2, #31
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	43da      	mvns	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	400a      	ands	r2, r1
 8002c68:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	4618      	mov	r0, r3
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4413      	add	r3, r2
 8002c82:	3b23      	subs	r3, #35	; 0x23
 8002c84:	fa00 f203 	lsl.w	r2, r0, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	631a      	str	r2, [r3, #48]	; 0x30
 8002c90:	e023      	b.n	8002cda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4413      	add	r3, r2
 8002ca2:	3b41      	subs	r3, #65	; 0x41
 8002ca4:	221f      	movs	r2, #31
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	43da      	mvns	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	400a      	ands	r2, r1
 8002cb2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	4413      	add	r3, r2
 8002ccc:	3b41      	subs	r3, #65	; 0x41
 8002cce:	fa00 f203 	lsl.w	r2, r0, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cda:	4b29      	ldr	r3, [pc, #164]	; (8002d80 <HAL_ADC_ConfigChannel+0x250>)
 8002cdc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a28      	ldr	r2, [pc, #160]	; (8002d84 <HAL_ADC_ConfigChannel+0x254>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d10f      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x1d8>
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2b12      	cmp	r3, #18
 8002cee:	d10b      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a1d      	ldr	r2, [pc, #116]	; (8002d84 <HAL_ADC_ConfigChannel+0x254>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d12b      	bne.n	8002d6a <HAL_ADC_ConfigChannel+0x23a>
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a1c      	ldr	r2, [pc, #112]	; (8002d88 <HAL_ADC_ConfigChannel+0x258>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d003      	beq.n	8002d24 <HAL_ADC_ConfigChannel+0x1f4>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2b11      	cmp	r3, #17
 8002d22:	d122      	bne.n	8002d6a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a11      	ldr	r2, [pc, #68]	; (8002d88 <HAL_ADC_ConfigChannel+0x258>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d111      	bne.n	8002d6a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d46:	4b11      	ldr	r3, [pc, #68]	; (8002d8c <HAL_ADC_ConfigChannel+0x25c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a11      	ldr	r2, [pc, #68]	; (8002d90 <HAL_ADC_ConfigChannel+0x260>)
 8002d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d50:	0c9a      	lsrs	r2, r3, #18
 8002d52:	4613      	mov	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d5c:	e002      	b.n	8002d64 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	3b01      	subs	r3, #1
 8002d62:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f9      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3714      	adds	r7, #20
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	40012300 	.word	0x40012300
 8002d84:	40012000 	.word	0x40012000
 8002d88:	10000012 	.word	0x10000012
 8002d8c:	20000008 	.word	0x20000008
 8002d90:	431bde83 	.word	0x431bde83

08002d94 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d9c:	4b79      	ldr	r3, [pc, #484]	; (8002f84 <ADC_Init+0x1f0>)
 8002d9e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	685a      	ldr	r2, [r3, #4]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	431a      	orrs	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6859      	ldr	r1, [r3, #4]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	021a      	lsls	r2, r3, #8
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	685a      	ldr	r2, [r3, #4]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002dec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6859      	ldr	r1, [r3, #4]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	689a      	ldr	r2, [r3, #8]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6899      	ldr	r1, [r3, #8]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68da      	ldr	r2, [r3, #12]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e26:	4a58      	ldr	r2, [pc, #352]	; (8002f88 <ADC_Init+0x1f4>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d022      	beq.n	8002e72 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689a      	ldr	r2, [r3, #8]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e3a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6899      	ldr	r1, [r3, #8]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6899      	ldr	r1, [r3, #8]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	609a      	str	r2, [r3, #8]
 8002e70:	e00f      	b.n	8002e92 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e90:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 0202 	bic.w	r2, r2, #2
 8002ea0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6899      	ldr	r1, [r3, #8]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	7e1b      	ldrb	r3, [r3, #24]
 8002eac:	005a      	lsls	r2, r3, #1
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d01b      	beq.n	8002ef8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ece:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	685a      	ldr	r2, [r3, #4]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002ede:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6859      	ldr	r1, [r3, #4]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	3b01      	subs	r3, #1
 8002eec:	035a      	lsls	r2, r3, #13
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	605a      	str	r2, [r3, #4]
 8002ef6:	e007      	b.n	8002f08 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f06:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	3b01      	subs	r3, #1
 8002f24:	051a      	lsls	r2, r3, #20
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	6899      	ldr	r1, [r3, #8]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f4a:	025a      	lsls	r2, r3, #9
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	430a      	orrs	r2, r1
 8002f52:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689a      	ldr	r2, [r3, #8]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6899      	ldr	r1, [r3, #8]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	029a      	lsls	r2, r3, #10
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	430a      	orrs	r2, r1
 8002f76:	609a      	str	r2, [r3, #8]
}
 8002f78:	bf00      	nop
 8002f7a:	3714      	adds	r7, #20
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	40012300 	.word	0x40012300
 8002f88:	0f000001 	.word	0x0f000001

08002f8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f003 0307 	and.w	r3, r3, #7
 8002f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f9c:	4b0c      	ldr	r3, [pc, #48]	; (8002fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fa2:	68ba      	ldr	r2, [r7, #8]
 8002fa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fa8:	4013      	ands	r3, r2
 8002faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fbe:	4a04      	ldr	r2, [pc, #16]	; (8002fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	60d3      	str	r3, [r2, #12]
}
 8002fc4:	bf00      	nop
 8002fc6:	3714      	adds	r7, #20
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	e000ed00 	.word	0xe000ed00

08002fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fd8:	4b04      	ldr	r3, [pc, #16]	; (8002fec <__NVIC_GetPriorityGrouping+0x18>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	0a1b      	lsrs	r3, r3, #8
 8002fde:	f003 0307 	and.w	r3, r3, #7
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	e000ed00 	.word	0xe000ed00

08002ff0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	db0b      	blt.n	800301a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003002:	79fb      	ldrb	r3, [r7, #7]
 8003004:	f003 021f 	and.w	r2, r3, #31
 8003008:	4907      	ldr	r1, [pc, #28]	; (8003028 <__NVIC_EnableIRQ+0x38>)
 800300a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300e:	095b      	lsrs	r3, r3, #5
 8003010:	2001      	movs	r0, #1
 8003012:	fa00 f202 	lsl.w	r2, r0, r2
 8003016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800301a:	bf00      	nop
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	e000e100 	.word	0xe000e100

0800302c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	4603      	mov	r3, r0
 8003034:	6039      	str	r1, [r7, #0]
 8003036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303c:	2b00      	cmp	r3, #0
 800303e:	db0a      	blt.n	8003056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	b2da      	uxtb	r2, r3
 8003044:	490c      	ldr	r1, [pc, #48]	; (8003078 <__NVIC_SetPriority+0x4c>)
 8003046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304a:	0112      	lsls	r2, r2, #4
 800304c:	b2d2      	uxtb	r2, r2
 800304e:	440b      	add	r3, r1
 8003050:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003054:	e00a      	b.n	800306c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	b2da      	uxtb	r2, r3
 800305a:	4908      	ldr	r1, [pc, #32]	; (800307c <__NVIC_SetPriority+0x50>)
 800305c:	79fb      	ldrb	r3, [r7, #7]
 800305e:	f003 030f 	and.w	r3, r3, #15
 8003062:	3b04      	subs	r3, #4
 8003064:	0112      	lsls	r2, r2, #4
 8003066:	b2d2      	uxtb	r2, r2
 8003068:	440b      	add	r3, r1
 800306a:	761a      	strb	r2, [r3, #24]
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	e000e100 	.word	0xe000e100
 800307c:	e000ed00 	.word	0xe000ed00

08003080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003080:	b480      	push	{r7}
 8003082:	b089      	sub	sp, #36	; 0x24
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f003 0307 	and.w	r3, r3, #7
 8003092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	f1c3 0307 	rsb	r3, r3, #7
 800309a:	2b04      	cmp	r3, #4
 800309c:	bf28      	it	cs
 800309e:	2304      	movcs	r3, #4
 80030a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	3304      	adds	r3, #4
 80030a6:	2b06      	cmp	r3, #6
 80030a8:	d902      	bls.n	80030b0 <NVIC_EncodePriority+0x30>
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	3b03      	subs	r3, #3
 80030ae:	e000      	b.n	80030b2 <NVIC_EncodePriority+0x32>
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b4:	f04f 32ff 	mov.w	r2, #4294967295
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	43da      	mvns	r2, r3
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	401a      	ands	r2, r3
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030c8:	f04f 31ff 	mov.w	r1, #4294967295
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	fa01 f303 	lsl.w	r3, r1, r3
 80030d2:	43d9      	mvns	r1, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d8:	4313      	orrs	r3, r2
         );
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3724      	adds	r7, #36	; 0x24
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
	...

080030e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3b01      	subs	r3, #1
 80030f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030f8:	d301      	bcc.n	80030fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030fa:	2301      	movs	r3, #1
 80030fc:	e00f      	b.n	800311e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030fe:	4a0a      	ldr	r2, [pc, #40]	; (8003128 <SysTick_Config+0x40>)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3b01      	subs	r3, #1
 8003104:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003106:	210f      	movs	r1, #15
 8003108:	f04f 30ff 	mov.w	r0, #4294967295
 800310c:	f7ff ff8e 	bl	800302c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003110:	4b05      	ldr	r3, [pc, #20]	; (8003128 <SysTick_Config+0x40>)
 8003112:	2200      	movs	r2, #0
 8003114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003116:	4b04      	ldr	r3, [pc, #16]	; (8003128 <SysTick_Config+0x40>)
 8003118:	2207      	movs	r2, #7
 800311a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	e000e010 	.word	0xe000e010

0800312c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f7ff ff29 	bl	8002f8c <__NVIC_SetPriorityGrouping>
}
 800313a:	bf00      	nop
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003142:	b580      	push	{r7, lr}
 8003144:	b086      	sub	sp, #24
 8003146:	af00      	add	r7, sp, #0
 8003148:	4603      	mov	r3, r0
 800314a:	60b9      	str	r1, [r7, #8]
 800314c:	607a      	str	r2, [r7, #4]
 800314e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003150:	2300      	movs	r3, #0
 8003152:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003154:	f7ff ff3e 	bl	8002fd4 <__NVIC_GetPriorityGrouping>
 8003158:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	68b9      	ldr	r1, [r7, #8]
 800315e:	6978      	ldr	r0, [r7, #20]
 8003160:	f7ff ff8e 	bl	8003080 <NVIC_EncodePriority>
 8003164:	4602      	mov	r2, r0
 8003166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800316a:	4611      	mov	r1, r2
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff ff5d 	bl	800302c <__NVIC_SetPriority>
}
 8003172:	bf00      	nop
 8003174:	3718      	adds	r7, #24
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b082      	sub	sp, #8
 800317e:	af00      	add	r7, sp, #0
 8003180:	4603      	mov	r3, r0
 8003182:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff ff31 	bl	8002ff0 <__NVIC_EnableIRQ>
}
 800318e:	bf00      	nop
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b082      	sub	sp, #8
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7ff ffa2 	bl	80030e8 <SysTick_Config>
 80031a4:	4603      	mov	r3, r0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
	...

080031b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b089      	sub	sp, #36	; 0x24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031ba:	2300      	movs	r3, #0
 80031bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031be:	2300      	movs	r3, #0
 80031c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031c2:	2300      	movs	r3, #0
 80031c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031c6:	2300      	movs	r3, #0
 80031c8:	61fb      	str	r3, [r7, #28]
 80031ca:	e165      	b.n	8003498 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031cc:	2201      	movs	r2, #1
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	4013      	ands	r3, r2
 80031de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	f040 8154 	bne.w	8003492 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f003 0303 	and.w	r3, r3, #3
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d005      	beq.n	8003202 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d130      	bne.n	8003264 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	2203      	movs	r2, #3
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	43db      	mvns	r3, r3
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	4013      	ands	r3, r2
 8003218:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	fa02 f303 	lsl.w	r3, r2, r3
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	4313      	orrs	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003238:	2201      	movs	r2, #1
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	43db      	mvns	r3, r3
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	4013      	ands	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	091b      	lsrs	r3, r3, #4
 800324e:	f003 0201 	and.w	r2, r3, #1
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	4313      	orrs	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f003 0303 	and.w	r3, r3, #3
 800326c:	2b03      	cmp	r3, #3
 800326e:	d017      	beq.n	80032a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	2203      	movs	r2, #3
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	43db      	mvns	r3, r3
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	4013      	ands	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	4313      	orrs	r3, r2
 8003298:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f003 0303 	and.w	r3, r3, #3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d123      	bne.n	80032f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	08da      	lsrs	r2, r3, #3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3208      	adds	r2, #8
 80032b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	220f      	movs	r2, #15
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	43db      	mvns	r3, r3
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	4013      	ands	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	691a      	ldr	r2, [r3, #16]
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	f003 0307 	and.w	r3, r3, #7
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	08da      	lsrs	r2, r3, #3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	3208      	adds	r2, #8
 80032ee:	69b9      	ldr	r1, [r7, #24]
 80032f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	2203      	movs	r2, #3
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	43db      	mvns	r3, r3
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	4013      	ands	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f003 0203 	and.w	r2, r3, #3
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	4313      	orrs	r3, r2
 8003320:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 80ae 	beq.w	8003492 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003336:	2300      	movs	r3, #0
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	4b5d      	ldr	r3, [pc, #372]	; (80034b0 <HAL_GPIO_Init+0x300>)
 800333c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333e:	4a5c      	ldr	r2, [pc, #368]	; (80034b0 <HAL_GPIO_Init+0x300>)
 8003340:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003344:	6453      	str	r3, [r2, #68]	; 0x44
 8003346:	4b5a      	ldr	r3, [pc, #360]	; (80034b0 <HAL_GPIO_Init+0x300>)
 8003348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003352:	4a58      	ldr	r2, [pc, #352]	; (80034b4 <HAL_GPIO_Init+0x304>)
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	089b      	lsrs	r3, r3, #2
 8003358:	3302      	adds	r3, #2
 800335a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800335e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	f003 0303 	and.w	r3, r3, #3
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	220f      	movs	r2, #15
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	43db      	mvns	r3, r3
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	4013      	ands	r3, r2
 8003374:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a4f      	ldr	r2, [pc, #316]	; (80034b8 <HAL_GPIO_Init+0x308>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d025      	beq.n	80033ca <HAL_GPIO_Init+0x21a>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a4e      	ldr	r2, [pc, #312]	; (80034bc <HAL_GPIO_Init+0x30c>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d01f      	beq.n	80033c6 <HAL_GPIO_Init+0x216>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a4d      	ldr	r2, [pc, #308]	; (80034c0 <HAL_GPIO_Init+0x310>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d019      	beq.n	80033c2 <HAL_GPIO_Init+0x212>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a4c      	ldr	r2, [pc, #304]	; (80034c4 <HAL_GPIO_Init+0x314>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d013      	beq.n	80033be <HAL_GPIO_Init+0x20e>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a4b      	ldr	r2, [pc, #300]	; (80034c8 <HAL_GPIO_Init+0x318>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d00d      	beq.n	80033ba <HAL_GPIO_Init+0x20a>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a4a      	ldr	r2, [pc, #296]	; (80034cc <HAL_GPIO_Init+0x31c>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d007      	beq.n	80033b6 <HAL_GPIO_Init+0x206>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a49      	ldr	r2, [pc, #292]	; (80034d0 <HAL_GPIO_Init+0x320>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d101      	bne.n	80033b2 <HAL_GPIO_Init+0x202>
 80033ae:	2306      	movs	r3, #6
 80033b0:	e00c      	b.n	80033cc <HAL_GPIO_Init+0x21c>
 80033b2:	2307      	movs	r3, #7
 80033b4:	e00a      	b.n	80033cc <HAL_GPIO_Init+0x21c>
 80033b6:	2305      	movs	r3, #5
 80033b8:	e008      	b.n	80033cc <HAL_GPIO_Init+0x21c>
 80033ba:	2304      	movs	r3, #4
 80033bc:	e006      	b.n	80033cc <HAL_GPIO_Init+0x21c>
 80033be:	2303      	movs	r3, #3
 80033c0:	e004      	b.n	80033cc <HAL_GPIO_Init+0x21c>
 80033c2:	2302      	movs	r3, #2
 80033c4:	e002      	b.n	80033cc <HAL_GPIO_Init+0x21c>
 80033c6:	2301      	movs	r3, #1
 80033c8:	e000      	b.n	80033cc <HAL_GPIO_Init+0x21c>
 80033ca:	2300      	movs	r3, #0
 80033cc:	69fa      	ldr	r2, [r7, #28]
 80033ce:	f002 0203 	and.w	r2, r2, #3
 80033d2:	0092      	lsls	r2, r2, #2
 80033d4:	4093      	lsls	r3, r2
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	4313      	orrs	r3, r2
 80033da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033dc:	4935      	ldr	r1, [pc, #212]	; (80034b4 <HAL_GPIO_Init+0x304>)
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	089b      	lsrs	r3, r3, #2
 80033e2:	3302      	adds	r3, #2
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033ea:	4b3a      	ldr	r3, [pc, #232]	; (80034d4 <HAL_GPIO_Init+0x324>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	43db      	mvns	r3, r3
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	4013      	ands	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	4313      	orrs	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800340e:	4a31      	ldr	r2, [pc, #196]	; (80034d4 <HAL_GPIO_Init+0x324>)
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003414:	4b2f      	ldr	r3, [pc, #188]	; (80034d4 <HAL_GPIO_Init+0x324>)
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	43db      	mvns	r3, r3
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	4013      	ands	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d003      	beq.n	8003438 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	4313      	orrs	r3, r2
 8003436:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003438:	4a26      	ldr	r2, [pc, #152]	; (80034d4 <HAL_GPIO_Init+0x324>)
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800343e:	4b25      	ldr	r3, [pc, #148]	; (80034d4 <HAL_GPIO_Init+0x324>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	43db      	mvns	r3, r3
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	4013      	ands	r3, r2
 800344c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	4313      	orrs	r3, r2
 8003460:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003462:	4a1c      	ldr	r2, [pc, #112]	; (80034d4 <HAL_GPIO_Init+0x324>)
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003468:	4b1a      	ldr	r3, [pc, #104]	; (80034d4 <HAL_GPIO_Init+0x324>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	43db      	mvns	r3, r3
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	4013      	ands	r3, r2
 8003476:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d003      	beq.n	800348c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	4313      	orrs	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800348c:	4a11      	ldr	r2, [pc, #68]	; (80034d4 <HAL_GPIO_Init+0x324>)
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	3301      	adds	r3, #1
 8003496:	61fb      	str	r3, [r7, #28]
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	2b0f      	cmp	r3, #15
 800349c:	f67f ae96 	bls.w	80031cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034a0:	bf00      	nop
 80034a2:	bf00      	nop
 80034a4:	3724      	adds	r7, #36	; 0x24
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	40023800 	.word	0x40023800
 80034b4:	40013800 	.word	0x40013800
 80034b8:	40020000 	.word	0x40020000
 80034bc:	40020400 	.word	0x40020400
 80034c0:	40020800 	.word	0x40020800
 80034c4:	40020c00 	.word	0x40020c00
 80034c8:	40021000 	.word	0x40021000
 80034cc:	40021400 	.word	0x40021400
 80034d0:	40021800 	.word	0x40021800
 80034d4:	40013c00 	.word	0x40013c00

080034d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	460b      	mov	r3, r1
 80034e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	691a      	ldr	r2, [r3, #16]
 80034e8:	887b      	ldrh	r3, [r7, #2]
 80034ea:	4013      	ands	r3, r2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d002      	beq.n	80034f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034f0:	2301      	movs	r3, #1
 80034f2:	73fb      	strb	r3, [r7, #15]
 80034f4:	e001      	b.n	80034fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034f6:	2300      	movs	r3, #0
 80034f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3714      	adds	r7, #20
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	460b      	mov	r3, r1
 8003512:	807b      	strh	r3, [r7, #2]
 8003514:	4613      	mov	r3, r2
 8003516:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003518:	787b      	ldrb	r3, [r7, #1]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800351e:	887a      	ldrh	r2, [r7, #2]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003524:	e003      	b.n	800352e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003526:	887b      	ldrh	r3, [r7, #2]
 8003528:	041a      	lsls	r2, r3, #16
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	619a      	str	r2, [r3, #24]
}
 800352e:	bf00      	nop
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
	...

0800353c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e12b      	b.n	80037a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d106      	bne.n	8003568 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f7ff f864 	bl	8002630 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2224      	movs	r2, #36	; 0x24
 800356c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f022 0201 	bic.w	r2, r2, #1
 800357e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800358e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800359e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035a0:	f001 f854 	bl	800464c <HAL_RCC_GetPCLK1Freq>
 80035a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	4a81      	ldr	r2, [pc, #516]	; (80037b0 <HAL_I2C_Init+0x274>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d807      	bhi.n	80035c0 <HAL_I2C_Init+0x84>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	4a80      	ldr	r2, [pc, #512]	; (80037b4 <HAL_I2C_Init+0x278>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	bf94      	ite	ls
 80035b8:	2301      	movls	r3, #1
 80035ba:	2300      	movhi	r3, #0
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	e006      	b.n	80035ce <HAL_I2C_Init+0x92>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	4a7d      	ldr	r2, [pc, #500]	; (80037b8 <HAL_I2C_Init+0x27c>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	bf94      	ite	ls
 80035c8:	2301      	movls	r3, #1
 80035ca:	2300      	movhi	r3, #0
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e0e7      	b.n	80037a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	4a78      	ldr	r2, [pc, #480]	; (80037bc <HAL_I2C_Init+0x280>)
 80035da:	fba2 2303 	umull	r2, r3, r2, r3
 80035de:	0c9b      	lsrs	r3, r3, #18
 80035e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68ba      	ldr	r2, [r7, #8]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6a1b      	ldr	r3, [r3, #32]
 80035fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	4a6a      	ldr	r2, [pc, #424]	; (80037b0 <HAL_I2C_Init+0x274>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d802      	bhi.n	8003610 <HAL_I2C_Init+0xd4>
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	3301      	adds	r3, #1
 800360e:	e009      	b.n	8003624 <HAL_I2C_Init+0xe8>
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003616:	fb02 f303 	mul.w	r3, r2, r3
 800361a:	4a69      	ldr	r2, [pc, #420]	; (80037c0 <HAL_I2C_Init+0x284>)
 800361c:	fba2 2303 	umull	r2, r3, r2, r3
 8003620:	099b      	lsrs	r3, r3, #6
 8003622:	3301      	adds	r3, #1
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6812      	ldr	r2, [r2, #0]
 8003628:	430b      	orrs	r3, r1
 800362a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003636:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	495c      	ldr	r1, [pc, #368]	; (80037b0 <HAL_I2C_Init+0x274>)
 8003640:	428b      	cmp	r3, r1
 8003642:	d819      	bhi.n	8003678 <HAL_I2C_Init+0x13c>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	1e59      	subs	r1, r3, #1
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003652:	1c59      	adds	r1, r3, #1
 8003654:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003658:	400b      	ands	r3, r1
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00a      	beq.n	8003674 <HAL_I2C_Init+0x138>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	1e59      	subs	r1, r3, #1
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	fbb1 f3f3 	udiv	r3, r1, r3
 800366c:	3301      	adds	r3, #1
 800366e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003672:	e051      	b.n	8003718 <HAL_I2C_Init+0x1dc>
 8003674:	2304      	movs	r3, #4
 8003676:	e04f      	b.n	8003718 <HAL_I2C_Init+0x1dc>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d111      	bne.n	80036a4 <HAL_I2C_Init+0x168>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	1e58      	subs	r0, r3, #1
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6859      	ldr	r1, [r3, #4]
 8003688:	460b      	mov	r3, r1
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	440b      	add	r3, r1
 800368e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003692:	3301      	adds	r3, #1
 8003694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003698:	2b00      	cmp	r3, #0
 800369a:	bf0c      	ite	eq
 800369c:	2301      	moveq	r3, #1
 800369e:	2300      	movne	r3, #0
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	e012      	b.n	80036ca <HAL_I2C_Init+0x18e>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	1e58      	subs	r0, r3, #1
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6859      	ldr	r1, [r3, #4]
 80036ac:	460b      	mov	r3, r1
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	440b      	add	r3, r1
 80036b2:	0099      	lsls	r1, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ba:	3301      	adds	r3, #1
 80036bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	bf0c      	ite	eq
 80036c4:	2301      	moveq	r3, #1
 80036c6:	2300      	movne	r3, #0
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <HAL_I2C_Init+0x196>
 80036ce:	2301      	movs	r3, #1
 80036d0:	e022      	b.n	8003718 <HAL_I2C_Init+0x1dc>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10e      	bne.n	80036f8 <HAL_I2C_Init+0x1bc>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	1e58      	subs	r0, r3, #1
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6859      	ldr	r1, [r3, #4]
 80036e2:	460b      	mov	r3, r1
 80036e4:	005b      	lsls	r3, r3, #1
 80036e6:	440b      	add	r3, r1
 80036e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ec:	3301      	adds	r3, #1
 80036ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036f6:	e00f      	b.n	8003718 <HAL_I2C_Init+0x1dc>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	1e58      	subs	r0, r3, #1
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6859      	ldr	r1, [r3, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	440b      	add	r3, r1
 8003706:	0099      	lsls	r1, r3, #2
 8003708:	440b      	add	r3, r1
 800370a:	fbb0 f3f3 	udiv	r3, r0, r3
 800370e:	3301      	adds	r3, #1
 8003710:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003714:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003718:	6879      	ldr	r1, [r7, #4]
 800371a:	6809      	ldr	r1, [r1, #0]
 800371c:	4313      	orrs	r3, r2
 800371e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	69da      	ldr	r2, [r3, #28]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	431a      	orrs	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	430a      	orrs	r2, r1
 800373a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003746:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6911      	ldr	r1, [r2, #16]
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	68d2      	ldr	r2, [r2, #12]
 8003752:	4311      	orrs	r1, r2
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6812      	ldr	r2, [r2, #0]
 8003758:	430b      	orrs	r3, r1
 800375a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	695a      	ldr	r2, [r3, #20]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	431a      	orrs	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	430a      	orrs	r2, r1
 8003776:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f042 0201 	orr.w	r2, r2, #1
 8003786:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2220      	movs	r2, #32
 8003792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	000186a0 	.word	0x000186a0
 80037b4:	001e847f 	.word	0x001e847f
 80037b8:	003d08ff 	.word	0x003d08ff
 80037bc:	431bde83 	.word	0x431bde83
 80037c0:	10624dd3 	.word	0x10624dd3

080037c4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b088      	sub	sp, #32
 80037c8:	af02      	add	r7, sp, #8
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	607a      	str	r2, [r7, #4]
 80037ce:	461a      	mov	r2, r3
 80037d0:	460b      	mov	r3, r1
 80037d2:	817b      	strh	r3, [r7, #10]
 80037d4:	4613      	mov	r3, r2
 80037d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037d8:	f7ff f936 	bl	8002a48 <HAL_GetTick>
 80037dc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b20      	cmp	r3, #32
 80037e8:	f040 80e0 	bne.w	80039ac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	2319      	movs	r3, #25
 80037f2:	2201      	movs	r2, #1
 80037f4:	4970      	ldr	r1, [pc, #448]	; (80039b8 <HAL_I2C_Master_Transmit+0x1f4>)
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f000 fc58 	bl	80040ac <I2C_WaitOnFlagUntilTimeout>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003802:	2302      	movs	r3, #2
 8003804:	e0d3      	b.n	80039ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800380c:	2b01      	cmp	r3, #1
 800380e:	d101      	bne.n	8003814 <HAL_I2C_Master_Transmit+0x50>
 8003810:	2302      	movs	r3, #2
 8003812:	e0cc      	b.n	80039ae <HAL_I2C_Master_Transmit+0x1ea>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b01      	cmp	r3, #1
 8003828:	d007      	beq.n	800383a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f042 0201 	orr.w	r2, r2, #1
 8003838:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003848:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2221      	movs	r2, #33	; 0x21
 800384e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2210      	movs	r2, #16
 8003856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	893a      	ldrh	r2, [r7, #8]
 800386a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003870:	b29a      	uxth	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	4a50      	ldr	r2, [pc, #320]	; (80039bc <HAL_I2C_Master_Transmit+0x1f8>)
 800387a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800387c:	8979      	ldrh	r1, [r7, #10]
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	6a3a      	ldr	r2, [r7, #32]
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 fac2 	bl	8003e0c <I2C_MasterRequestWrite>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e08d      	b.n	80039ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003892:	2300      	movs	r3, #0
 8003894:	613b      	str	r3, [r7, #16]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	613b      	str	r3, [r7, #16]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	613b      	str	r3, [r7, #16]
 80038a6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80038a8:	e066      	b.n	8003978 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	6a39      	ldr	r1, [r7, #32]
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f000 fcd2 	bl	8004258 <I2C_WaitOnTXEFlagUntilTimeout>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00d      	beq.n	80038d6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	2b04      	cmp	r3, #4
 80038c0:	d107      	bne.n	80038d2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e06b      	b.n	80039ae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038da:	781a      	ldrb	r2, [r3, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e6:	1c5a      	adds	r2, r3, #1
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	3b01      	subs	r3, #1
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038fe:	3b01      	subs	r3, #1
 8003900:	b29a      	uxth	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	2b04      	cmp	r3, #4
 8003912:	d11b      	bne.n	800394c <HAL_I2C_Master_Transmit+0x188>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003918:	2b00      	cmp	r3, #0
 800391a:	d017      	beq.n	800394c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	781a      	ldrb	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	1c5a      	adds	r2, r3, #1
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003936:	b29b      	uxth	r3, r3
 8003938:	3b01      	subs	r3, #1
 800393a:	b29a      	uxth	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003944:	3b01      	subs	r3, #1
 8003946:	b29a      	uxth	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	6a39      	ldr	r1, [r7, #32]
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f000 fcc2 	bl	80042da <I2C_WaitOnBTFFlagUntilTimeout>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00d      	beq.n	8003978 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003960:	2b04      	cmp	r3, #4
 8003962:	d107      	bne.n	8003974 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003972:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e01a      	b.n	80039ae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800397c:	2b00      	cmp	r3, #0
 800397e:	d194      	bne.n	80038aa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800398e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2220      	movs	r2, #32
 8003994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039a8:	2300      	movs	r3, #0
 80039aa:	e000      	b.n	80039ae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80039ac:	2302      	movs	r3, #2
  }
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3718      	adds	r7, #24
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	00100002 	.word	0x00100002
 80039bc:	ffff0000 	.word	0xffff0000

080039c0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b08c      	sub	sp, #48	; 0x30
 80039c4:	af02      	add	r7, sp, #8
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	607a      	str	r2, [r7, #4]
 80039ca:	461a      	mov	r2, r3
 80039cc:	460b      	mov	r3, r1
 80039ce:	817b      	strh	r3, [r7, #10]
 80039d0:	4613      	mov	r3, r2
 80039d2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039d4:	f7ff f838 	bl	8002a48 <HAL_GetTick>
 80039d8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b20      	cmp	r3, #32
 80039e4:	f040 820b 	bne.w	8003dfe <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	2319      	movs	r3, #25
 80039ee:	2201      	movs	r2, #1
 80039f0:	497c      	ldr	r1, [pc, #496]	; (8003be4 <HAL_I2C_Master_Receive+0x224>)
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f000 fb5a 	bl	80040ac <I2C_WaitOnFlagUntilTimeout>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80039fe:	2302      	movs	r3, #2
 8003a00:	e1fe      	b.n	8003e00 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d101      	bne.n	8003a10 <HAL_I2C_Master_Receive+0x50>
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	e1f7      	b.n	8003e00 <HAL_I2C_Master_Receive+0x440>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d007      	beq.n	8003a36 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f042 0201 	orr.w	r2, r2, #1
 8003a34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a44:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2222      	movs	r2, #34	; 0x22
 8003a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2210      	movs	r2, #16
 8003a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	893a      	ldrh	r2, [r7, #8]
 8003a66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	4a5c      	ldr	r2, [pc, #368]	; (8003be8 <HAL_I2C_Master_Receive+0x228>)
 8003a76:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a78:	8979      	ldrh	r1, [r7, #10]
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f000 fa46 	bl	8003f10 <I2C_MasterRequestRead>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e1b8      	b.n	8003e00 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d113      	bne.n	8003abe <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a96:	2300      	movs	r3, #0
 8003a98:	623b      	str	r3, [r7, #32]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	623b      	str	r3, [r7, #32]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	623b      	str	r3, [r7, #32]
 8003aaa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	e18c      	b.n	8003dd8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d11b      	bne.n	8003afe <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ad4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	61fb      	str	r3, [r7, #28]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	61fb      	str	r3, [r7, #28]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	61fb      	str	r3, [r7, #28]
 8003aea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003afa:	601a      	str	r2, [r3, #0]
 8003afc:	e16c      	b.n	8003dd8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d11b      	bne.n	8003b3e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b14:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b26:	2300      	movs	r3, #0
 8003b28:	61bb      	str	r3, [r7, #24]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	61bb      	str	r3, [r7, #24]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	61bb      	str	r3, [r7, #24]
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	e14c      	b.n	8003dd8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b4e:	2300      	movs	r3, #0
 8003b50:	617b      	str	r3, [r7, #20]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	617b      	str	r3, [r7, #20]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	617b      	str	r3, [r7, #20]
 8003b62:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003b64:	e138      	b.n	8003dd8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b6a:	2b03      	cmp	r3, #3
 8003b6c:	f200 80f1 	bhi.w	8003d52 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d123      	bne.n	8003bc0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 fbed 	bl	800435c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e139      	b.n	8003e00 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	691a      	ldr	r2, [r3, #16]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b96:	b2d2      	uxtb	r2, r2
 8003b98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9e:	1c5a      	adds	r2, r3, #1
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003bbe:	e10b      	b.n	8003dd8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d14e      	bne.n	8003c66 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bca:	9300      	str	r3, [sp, #0]
 8003bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bce:	2200      	movs	r2, #0
 8003bd0:	4906      	ldr	r1, [pc, #24]	; (8003bec <HAL_I2C_Master_Receive+0x22c>)
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f000 fa6a 	bl	80040ac <I2C_WaitOnFlagUntilTimeout>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d008      	beq.n	8003bf0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e10e      	b.n	8003e00 <HAL_I2C_Master_Receive+0x440>
 8003be2:	bf00      	nop
 8003be4:	00100002 	.word	0x00100002
 8003be8:	ffff0000 	.word	0xffff0000
 8003bec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	691a      	ldr	r2, [r3, #16]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0a:	b2d2      	uxtb	r2, r2
 8003c0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c12:	1c5a      	adds	r2, r3, #1
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	691a      	ldr	r2, [r3, #16]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3c:	b2d2      	uxtb	r2, r2
 8003c3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	1c5a      	adds	r2, r3, #1
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c64:	e0b8      	b.n	8003dd8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	4966      	ldr	r1, [pc, #408]	; (8003e08 <HAL_I2C_Master_Receive+0x448>)
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f000 fa1b 	bl	80040ac <I2C_WaitOnFlagUntilTimeout>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d001      	beq.n	8003c80 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e0bf      	b.n	8003e00 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	691a      	ldr	r2, [r3, #16]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9a:	b2d2      	uxtb	r2, r2
 8003c9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca2:	1c5a      	adds	r2, r3, #1
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cac:	3b01      	subs	r3, #1
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc4:	9300      	str	r3, [sp, #0]
 8003cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc8:	2200      	movs	r2, #0
 8003cca:	494f      	ldr	r1, [pc, #316]	; (8003e08 <HAL_I2C_Master_Receive+0x448>)
 8003ccc:	68f8      	ldr	r0, [r7, #12]
 8003cce:	f000 f9ed 	bl	80040ac <I2C_WaitOnFlagUntilTimeout>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e091      	b.n	8003e00 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	691a      	ldr	r2, [r3, #16]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf6:	b2d2      	uxtb	r2, r2
 8003cf8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfe:	1c5a      	adds	r2, r3, #1
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	3b01      	subs	r3, #1
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	691a      	ldr	r2, [r3, #16]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d28:	b2d2      	uxtb	r2, r2
 8003d2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d30:	1c5a      	adds	r2, r3, #1
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d50:	e042      	b.n	8003dd8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f000 fb00 	bl	800435c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d001      	beq.n	8003d66 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e04c      	b.n	8003e00 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	691a      	ldr	r2, [r3, #16]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d70:	b2d2      	uxtb	r2, r2
 8003d72:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d78:	1c5a      	adds	r2, r3, #1
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d82:	3b01      	subs	r3, #1
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	3b01      	subs	r3, #1
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	f003 0304 	and.w	r3, r3, #4
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	d118      	bne.n	8003dd8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	691a      	ldr	r2, [r3, #16]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db0:	b2d2      	uxtb	r2, r2
 8003db2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db8:	1c5a      	adds	r2, r3, #1
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f47f aec2 	bne.w	8003b66 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2220      	movs	r2, #32
 8003de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	e000      	b.n	8003e00 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003dfe:	2302      	movs	r3, #2
  }
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3728      	adds	r7, #40	; 0x28
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	00010004 	.word	0x00010004

08003e0c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b088      	sub	sp, #32
 8003e10:	af02      	add	r7, sp, #8
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	607a      	str	r2, [r7, #4]
 8003e16:	603b      	str	r3, [r7, #0]
 8003e18:	460b      	mov	r3, r1
 8003e1a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e20:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	2b08      	cmp	r3, #8
 8003e26:	d006      	beq.n	8003e36 <I2C_MasterRequestWrite+0x2a>
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d003      	beq.n	8003e36 <I2C_MasterRequestWrite+0x2a>
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e34:	d108      	bne.n	8003e48 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e44:	601a      	str	r2, [r3, #0]
 8003e46:	e00b      	b.n	8003e60 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4c:	2b12      	cmp	r3, #18
 8003e4e:	d107      	bne.n	8003e60 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e5e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f000 f91d 	bl	80040ac <I2C_WaitOnFlagUntilTimeout>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00d      	beq.n	8003e94 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e86:	d103      	bne.n	8003e90 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e035      	b.n	8003f00 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e9c:	d108      	bne.n	8003eb0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e9e:	897b      	ldrh	r3, [r7, #10]
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003eac:	611a      	str	r2, [r3, #16]
 8003eae:	e01b      	b.n	8003ee8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003eb0:	897b      	ldrh	r3, [r7, #10]
 8003eb2:	11db      	asrs	r3, r3, #7
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	f003 0306 	and.w	r3, r3, #6
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	f063 030f 	orn	r3, r3, #15
 8003ec0:	b2da      	uxtb	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	490e      	ldr	r1, [pc, #56]	; (8003f08 <I2C_MasterRequestWrite+0xfc>)
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 f943 	bl	800415a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e010      	b.n	8003f00 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003ede:	897b      	ldrh	r3, [r7, #10]
 8003ee0:	b2da      	uxtb	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	4907      	ldr	r1, [pc, #28]	; (8003f0c <I2C_MasterRequestWrite+0x100>)
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f000 f933 	bl	800415a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e000      	b.n	8003f00 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3718      	adds	r7, #24
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	00010008 	.word	0x00010008
 8003f0c:	00010002 	.word	0x00010002

08003f10 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b088      	sub	sp, #32
 8003f14:	af02      	add	r7, sp, #8
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	607a      	str	r2, [r7, #4]
 8003f1a:	603b      	str	r3, [r7, #0]
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f24:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f34:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	2b08      	cmp	r3, #8
 8003f3a:	d006      	beq.n	8003f4a <I2C_MasterRequestRead+0x3a>
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d003      	beq.n	8003f4a <I2C_MasterRequestRead+0x3a>
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f48:	d108      	bne.n	8003f5c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f58:	601a      	str	r2, [r3, #0]
 8003f5a:	e00b      	b.n	8003f74 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f60:	2b11      	cmp	r3, #17
 8003f62:	d107      	bne.n	8003f74 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f000 f893 	bl	80040ac <I2C_WaitOnFlagUntilTimeout>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00d      	beq.n	8003fa8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f9a:	d103      	bne.n	8003fa4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fa2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e079      	b.n	800409c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fb0:	d108      	bne.n	8003fc4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003fb2:	897b      	ldrh	r3, [r7, #10]
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	f043 0301 	orr.w	r3, r3, #1
 8003fba:	b2da      	uxtb	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	611a      	str	r2, [r3, #16]
 8003fc2:	e05f      	b.n	8004084 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003fc4:	897b      	ldrh	r3, [r7, #10]
 8003fc6:	11db      	asrs	r3, r3, #7
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	f003 0306 	and.w	r3, r3, #6
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	f063 030f 	orn	r3, r3, #15
 8003fd4:	b2da      	uxtb	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	4930      	ldr	r1, [pc, #192]	; (80040a4 <I2C_MasterRequestRead+0x194>)
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f000 f8b9 	bl	800415a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e054      	b.n	800409c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003ff2:	897b      	ldrh	r3, [r7, #10]
 8003ff4:	b2da      	uxtb	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	4929      	ldr	r1, [pc, #164]	; (80040a8 <I2C_MasterRequestRead+0x198>)
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f000 f8a9 	bl	800415a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e044      	b.n	800409c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004012:	2300      	movs	r3, #0
 8004014:	613b      	str	r3, [r7, #16]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	695b      	ldr	r3, [r3, #20]
 800401c:	613b      	str	r3, [r7, #16]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	613b      	str	r3, [r7, #16]
 8004026:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004036:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f000 f831 	bl	80040ac <I2C_WaitOnFlagUntilTimeout>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00d      	beq.n	800406c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800405e:	d103      	bne.n	8004068 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004066:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e017      	b.n	800409c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800406c:	897b      	ldrh	r3, [r7, #10]
 800406e:	11db      	asrs	r3, r3, #7
 8004070:	b2db      	uxtb	r3, r3
 8004072:	f003 0306 	and.w	r3, r3, #6
 8004076:	b2db      	uxtb	r3, r3
 8004078:	f063 030e 	orn	r3, r3, #14
 800407c:	b2da      	uxtb	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	4907      	ldr	r1, [pc, #28]	; (80040a8 <I2C_MasterRequestRead+0x198>)
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	f000 f865 	bl	800415a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d001      	beq.n	800409a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e000      	b.n	800409c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3718      	adds	r7, #24
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	00010008 	.word	0x00010008
 80040a8:	00010002 	.word	0x00010002

080040ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	603b      	str	r3, [r7, #0]
 80040b8:	4613      	mov	r3, r2
 80040ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040bc:	e025      	b.n	800410a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c4:	d021      	beq.n	800410a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040c6:	f7fe fcbf 	bl	8002a48 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d302      	bcc.n	80040dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d116      	bne.n	800410a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2220      	movs	r2, #32
 80040e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f6:	f043 0220 	orr.w	r2, r3, #32
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e023      	b.n	8004152 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	0c1b      	lsrs	r3, r3, #16
 800410e:	b2db      	uxtb	r3, r3
 8004110:	2b01      	cmp	r3, #1
 8004112:	d10d      	bne.n	8004130 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	43da      	mvns	r2, r3
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	4013      	ands	r3, r2
 8004120:	b29b      	uxth	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	bf0c      	ite	eq
 8004126:	2301      	moveq	r3, #1
 8004128:	2300      	movne	r3, #0
 800412a:	b2db      	uxtb	r3, r3
 800412c:	461a      	mov	r2, r3
 800412e:	e00c      	b.n	800414a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	43da      	mvns	r2, r3
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	4013      	ands	r3, r2
 800413c:	b29b      	uxth	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	bf0c      	ite	eq
 8004142:	2301      	moveq	r3, #1
 8004144:	2300      	movne	r3, #0
 8004146:	b2db      	uxtb	r3, r3
 8004148:	461a      	mov	r2, r3
 800414a:	79fb      	ldrb	r3, [r7, #7]
 800414c:	429a      	cmp	r2, r3
 800414e:	d0b6      	beq.n	80040be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b084      	sub	sp, #16
 800415e:	af00      	add	r7, sp, #0
 8004160:	60f8      	str	r0, [r7, #12]
 8004162:	60b9      	str	r1, [r7, #8]
 8004164:	607a      	str	r2, [r7, #4]
 8004166:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004168:	e051      	b.n	800420e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004178:	d123      	bne.n	80041c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004188:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004192:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2220      	movs	r2, #32
 800419e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ae:	f043 0204 	orr.w	r2, r3, #4
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e046      	b.n	8004250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c8:	d021      	beq.n	800420e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ca:	f7fe fc3d 	bl	8002a48 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d302      	bcc.n	80041e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d116      	bne.n	800420e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2220      	movs	r2, #32
 80041ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	f043 0220 	orr.w	r2, r3, #32
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e020      	b.n	8004250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	0c1b      	lsrs	r3, r3, #16
 8004212:	b2db      	uxtb	r3, r3
 8004214:	2b01      	cmp	r3, #1
 8004216:	d10c      	bne.n	8004232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	43da      	mvns	r2, r3
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	4013      	ands	r3, r2
 8004224:	b29b      	uxth	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	bf14      	ite	ne
 800422a:	2301      	movne	r3, #1
 800422c:	2300      	moveq	r3, #0
 800422e:	b2db      	uxtb	r3, r3
 8004230:	e00b      	b.n	800424a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	43da      	mvns	r2, r3
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	4013      	ands	r3, r2
 800423e:	b29b      	uxth	r3, r3
 8004240:	2b00      	cmp	r3, #0
 8004242:	bf14      	ite	ne
 8004244:	2301      	movne	r3, #1
 8004246:	2300      	moveq	r3, #0
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d18d      	bne.n	800416a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004264:	e02d      	b.n	80042c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	f000 f8ce 	bl	8004408 <I2C_IsAcknowledgeFailed>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e02d      	b.n	80042d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800427c:	d021      	beq.n	80042c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800427e:	f7fe fbe3 	bl	8002a48 <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	68ba      	ldr	r2, [r7, #8]
 800428a:	429a      	cmp	r2, r3
 800428c:	d302      	bcc.n	8004294 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d116      	bne.n	80042c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2220      	movs	r2, #32
 800429e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	f043 0220 	orr.w	r2, r3, #32
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e007      	b.n	80042d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042cc:	2b80      	cmp	r3, #128	; 0x80
 80042ce:	d1ca      	bne.n	8004266 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042da:	b580      	push	{r7, lr}
 80042dc:	b084      	sub	sp, #16
 80042de:	af00      	add	r7, sp, #0
 80042e0:	60f8      	str	r0, [r7, #12]
 80042e2:	60b9      	str	r1, [r7, #8]
 80042e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042e6:	e02d      	b.n	8004344 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f000 f88d 	bl	8004408 <I2C_IsAcknowledgeFailed>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d001      	beq.n	80042f8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e02d      	b.n	8004354 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042fe:	d021      	beq.n	8004344 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004300:	f7fe fba2 	bl	8002a48 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	429a      	cmp	r2, r3
 800430e:	d302      	bcc.n	8004316 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d116      	bne.n	8004344 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2220      	movs	r2, #32
 8004320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004330:	f043 0220 	orr.w	r2, r3, #32
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e007      	b.n	8004354 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	f003 0304 	and.w	r3, r3, #4
 800434e:	2b04      	cmp	r3, #4
 8004350:	d1ca      	bne.n	80042e8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	3710      	adds	r7, #16
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004368:	e042      	b.n	80043f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	695b      	ldr	r3, [r3, #20]
 8004370:	f003 0310 	and.w	r3, r3, #16
 8004374:	2b10      	cmp	r3, #16
 8004376:	d119      	bne.n	80043ac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f06f 0210 	mvn.w	r2, #16
 8004380:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2220      	movs	r2, #32
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e029      	b.n	8004400 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ac:	f7fe fb4c 	bl	8002a48 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d302      	bcc.n	80043c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d116      	bne.n	80043f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2220      	movs	r2, #32
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043dc:	f043 0220 	orr.w	r2, r3, #32
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e007      	b.n	8004400 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043fa:	2b40      	cmp	r3, #64	; 0x40
 80043fc:	d1b5      	bne.n	800436a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800441a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800441e:	d11b      	bne.n	8004458 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004428:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2220      	movs	r2, #32
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004444:	f043 0204 	orr.w	r2, r3, #4
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e000      	b.n	800445a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
	...

08004468 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d101      	bne.n	800447c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e0cc      	b.n	8004616 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800447c:	4b68      	ldr	r3, [pc, #416]	; (8004620 <HAL_RCC_ClockConfig+0x1b8>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 030f 	and.w	r3, r3, #15
 8004484:	683a      	ldr	r2, [r7, #0]
 8004486:	429a      	cmp	r2, r3
 8004488:	d90c      	bls.n	80044a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800448a:	4b65      	ldr	r3, [pc, #404]	; (8004620 <HAL_RCC_ClockConfig+0x1b8>)
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	b2d2      	uxtb	r2, r2
 8004490:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004492:	4b63      	ldr	r3, [pc, #396]	; (8004620 <HAL_RCC_ClockConfig+0x1b8>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 030f 	and.w	r3, r3, #15
 800449a:	683a      	ldr	r2, [r7, #0]
 800449c:	429a      	cmp	r2, r3
 800449e:	d001      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e0b8      	b.n	8004616 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0302 	and.w	r3, r3, #2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d020      	beq.n	80044f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0304 	and.w	r3, r3, #4
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d005      	beq.n	80044c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044bc:	4b59      	ldr	r3, [pc, #356]	; (8004624 <HAL_RCC_ClockConfig+0x1bc>)
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	4a58      	ldr	r2, [pc, #352]	; (8004624 <HAL_RCC_ClockConfig+0x1bc>)
 80044c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0308 	and.w	r3, r3, #8
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d005      	beq.n	80044e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044d4:	4b53      	ldr	r3, [pc, #332]	; (8004624 <HAL_RCC_ClockConfig+0x1bc>)
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	4a52      	ldr	r2, [pc, #328]	; (8004624 <HAL_RCC_ClockConfig+0x1bc>)
 80044da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044e0:	4b50      	ldr	r3, [pc, #320]	; (8004624 <HAL_RCC_ClockConfig+0x1bc>)
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	494d      	ldr	r1, [pc, #308]	; (8004624 <HAL_RCC_ClockConfig+0x1bc>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d044      	beq.n	8004588 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d107      	bne.n	8004516 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004506:	4b47      	ldr	r3, [pc, #284]	; (8004624 <HAL_RCC_ClockConfig+0x1bc>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d119      	bne.n	8004546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e07f      	b.n	8004616 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	2b02      	cmp	r3, #2
 800451c:	d003      	beq.n	8004526 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004522:	2b03      	cmp	r3, #3
 8004524:	d107      	bne.n	8004536 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004526:	4b3f      	ldr	r3, [pc, #252]	; (8004624 <HAL_RCC_ClockConfig+0x1bc>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d109      	bne.n	8004546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e06f      	b.n	8004616 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004536:	4b3b      	ldr	r3, [pc, #236]	; (8004624 <HAL_RCC_ClockConfig+0x1bc>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e067      	b.n	8004616 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004546:	4b37      	ldr	r3, [pc, #220]	; (8004624 <HAL_RCC_ClockConfig+0x1bc>)
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f023 0203 	bic.w	r2, r3, #3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	4934      	ldr	r1, [pc, #208]	; (8004624 <HAL_RCC_ClockConfig+0x1bc>)
 8004554:	4313      	orrs	r3, r2
 8004556:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004558:	f7fe fa76 	bl	8002a48 <HAL_GetTick>
 800455c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800455e:	e00a      	b.n	8004576 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004560:	f7fe fa72 	bl	8002a48 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	f241 3288 	movw	r2, #5000	; 0x1388
 800456e:	4293      	cmp	r3, r2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e04f      	b.n	8004616 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004576:	4b2b      	ldr	r3, [pc, #172]	; (8004624 <HAL_RCC_ClockConfig+0x1bc>)
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f003 020c 	and.w	r2, r3, #12
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	429a      	cmp	r2, r3
 8004586:	d1eb      	bne.n	8004560 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004588:	4b25      	ldr	r3, [pc, #148]	; (8004620 <HAL_RCC_ClockConfig+0x1b8>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 030f 	and.w	r3, r3, #15
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	429a      	cmp	r2, r3
 8004594:	d20c      	bcs.n	80045b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004596:	4b22      	ldr	r3, [pc, #136]	; (8004620 <HAL_RCC_ClockConfig+0x1b8>)
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	b2d2      	uxtb	r2, r2
 800459c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800459e:	4b20      	ldr	r3, [pc, #128]	; (8004620 <HAL_RCC_ClockConfig+0x1b8>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 030f 	and.w	r3, r3, #15
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d001      	beq.n	80045b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e032      	b.n	8004616 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0304 	and.w	r3, r3, #4
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d008      	beq.n	80045ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045bc:	4b19      	ldr	r3, [pc, #100]	; (8004624 <HAL_RCC_ClockConfig+0x1bc>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	4916      	ldr	r1, [pc, #88]	; (8004624 <HAL_RCC_ClockConfig+0x1bc>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0308 	and.w	r3, r3, #8
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d009      	beq.n	80045ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045da:	4b12      	ldr	r3, [pc, #72]	; (8004624 <HAL_RCC_ClockConfig+0x1bc>)
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	490e      	ldr	r1, [pc, #56]	; (8004624 <HAL_RCC_ClockConfig+0x1bc>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045ee:	f000 f841 	bl	8004674 <HAL_RCC_GetSysClockFreq>
 80045f2:	4602      	mov	r2, r0
 80045f4:	4b0b      	ldr	r3, [pc, #44]	; (8004624 <HAL_RCC_ClockConfig+0x1bc>)
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	091b      	lsrs	r3, r3, #4
 80045fa:	f003 030f 	and.w	r3, r3, #15
 80045fe:	490a      	ldr	r1, [pc, #40]	; (8004628 <HAL_RCC_ClockConfig+0x1c0>)
 8004600:	5ccb      	ldrb	r3, [r1, r3]
 8004602:	fa22 f303 	lsr.w	r3, r2, r3
 8004606:	4a09      	ldr	r2, [pc, #36]	; (800462c <HAL_RCC_ClockConfig+0x1c4>)
 8004608:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800460a:	4b09      	ldr	r3, [pc, #36]	; (8004630 <HAL_RCC_ClockConfig+0x1c8>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4618      	mov	r0, r3
 8004610:	f7fe f9d6 	bl	80029c0 <HAL_InitTick>

  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	40023c00 	.word	0x40023c00
 8004624:	40023800 	.word	0x40023800
 8004628:	0800a330 	.word	0x0800a330
 800462c:	20000008 	.word	0x20000008
 8004630:	2000000c 	.word	0x2000000c

08004634 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004634:	b480      	push	{r7}
 8004636:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004638:	4b03      	ldr	r3, [pc, #12]	; (8004648 <HAL_RCC_GetHCLKFreq+0x14>)
 800463a:	681b      	ldr	r3, [r3, #0]
}
 800463c:	4618      	mov	r0, r3
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	20000008 	.word	0x20000008

0800464c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004650:	f7ff fff0 	bl	8004634 <HAL_RCC_GetHCLKFreq>
 8004654:	4602      	mov	r2, r0
 8004656:	4b05      	ldr	r3, [pc, #20]	; (800466c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	0a9b      	lsrs	r3, r3, #10
 800465c:	f003 0307 	and.w	r3, r3, #7
 8004660:	4903      	ldr	r1, [pc, #12]	; (8004670 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004662:	5ccb      	ldrb	r3, [r1, r3]
 8004664:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004668:	4618      	mov	r0, r3
 800466a:	bd80      	pop	{r7, pc}
 800466c:	40023800 	.word	0x40023800
 8004670:	0800a340 	.word	0x0800a340

08004674 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004674:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004678:	b0a6      	sub	sp, #152	; 0x98
 800467a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800467c:	2300      	movs	r3, #0
 800467e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8004682:	2300      	movs	r3, #0
 8004684:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8004688:	2300      	movs	r3, #0
 800468a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800468e:	2300      	movs	r3, #0
 8004690:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8004694:	2300      	movs	r3, #0
 8004696:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800469a:	4bc8      	ldr	r3, [pc, #800]	; (80049bc <HAL_RCC_GetSysClockFreq+0x348>)
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f003 030c 	and.w	r3, r3, #12
 80046a2:	2b0c      	cmp	r3, #12
 80046a4:	f200 817e 	bhi.w	80049a4 <HAL_RCC_GetSysClockFreq+0x330>
 80046a8:	a201      	add	r2, pc, #4	; (adr r2, 80046b0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80046aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ae:	bf00      	nop
 80046b0:	080046e5 	.word	0x080046e5
 80046b4:	080049a5 	.word	0x080049a5
 80046b8:	080049a5 	.word	0x080049a5
 80046bc:	080049a5 	.word	0x080049a5
 80046c0:	080046ed 	.word	0x080046ed
 80046c4:	080049a5 	.word	0x080049a5
 80046c8:	080049a5 	.word	0x080049a5
 80046cc:	080049a5 	.word	0x080049a5
 80046d0:	080046f5 	.word	0x080046f5
 80046d4:	080049a5 	.word	0x080049a5
 80046d8:	080049a5 	.word	0x080049a5
 80046dc:	080049a5 	.word	0x080049a5
 80046e0:	0800485f 	.word	0x0800485f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046e4:	4bb6      	ldr	r3, [pc, #728]	; (80049c0 <HAL_RCC_GetSysClockFreq+0x34c>)
 80046e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80046ea:	e15f      	b.n	80049ac <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046ec:	4bb5      	ldr	r3, [pc, #724]	; (80049c4 <HAL_RCC_GetSysClockFreq+0x350>)
 80046ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80046f2:	e15b      	b.n	80049ac <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046f4:	4bb1      	ldr	r3, [pc, #708]	; (80049bc <HAL_RCC_GetSysClockFreq+0x348>)
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004700:	4bae      	ldr	r3, [pc, #696]	; (80049bc <HAL_RCC_GetSysClockFreq+0x348>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d031      	beq.n	8004770 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800470c:	4bab      	ldr	r3, [pc, #684]	; (80049bc <HAL_RCC_GetSysClockFreq+0x348>)
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	099b      	lsrs	r3, r3, #6
 8004712:	2200      	movs	r2, #0
 8004714:	66bb      	str	r3, [r7, #104]	; 0x68
 8004716:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004718:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800471a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800471e:	663b      	str	r3, [r7, #96]	; 0x60
 8004720:	2300      	movs	r3, #0
 8004722:	667b      	str	r3, [r7, #100]	; 0x64
 8004724:	4ba7      	ldr	r3, [pc, #668]	; (80049c4 <HAL_RCC_GetSysClockFreq+0x350>)
 8004726:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800472a:	462a      	mov	r2, r5
 800472c:	fb03 f202 	mul.w	r2, r3, r2
 8004730:	2300      	movs	r3, #0
 8004732:	4621      	mov	r1, r4
 8004734:	fb01 f303 	mul.w	r3, r1, r3
 8004738:	4413      	add	r3, r2
 800473a:	4aa2      	ldr	r2, [pc, #648]	; (80049c4 <HAL_RCC_GetSysClockFreq+0x350>)
 800473c:	4621      	mov	r1, r4
 800473e:	fba1 1202 	umull	r1, r2, r1, r2
 8004742:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004744:	460a      	mov	r2, r1
 8004746:	67ba      	str	r2, [r7, #120]	; 0x78
 8004748:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800474a:	4413      	add	r3, r2
 800474c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800474e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004752:	2200      	movs	r2, #0
 8004754:	65bb      	str	r3, [r7, #88]	; 0x58
 8004756:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004758:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800475c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8004760:	f7fc fa92 	bl	8000c88 <__aeabi_uldivmod>
 8004764:	4602      	mov	r2, r0
 8004766:	460b      	mov	r3, r1
 8004768:	4613      	mov	r3, r2
 800476a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800476e:	e064      	b.n	800483a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004770:	4b92      	ldr	r3, [pc, #584]	; (80049bc <HAL_RCC_GetSysClockFreq+0x348>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	099b      	lsrs	r3, r3, #6
 8004776:	2200      	movs	r2, #0
 8004778:	653b      	str	r3, [r7, #80]	; 0x50
 800477a:	657a      	str	r2, [r7, #84]	; 0x54
 800477c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800477e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004782:	64bb      	str	r3, [r7, #72]	; 0x48
 8004784:	2300      	movs	r3, #0
 8004786:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004788:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800478c:	4622      	mov	r2, r4
 800478e:	462b      	mov	r3, r5
 8004790:	f04f 0000 	mov.w	r0, #0
 8004794:	f04f 0100 	mov.w	r1, #0
 8004798:	0159      	lsls	r1, r3, #5
 800479a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800479e:	0150      	lsls	r0, r2, #5
 80047a0:	4602      	mov	r2, r0
 80047a2:	460b      	mov	r3, r1
 80047a4:	4621      	mov	r1, r4
 80047a6:	1a51      	subs	r1, r2, r1
 80047a8:	6139      	str	r1, [r7, #16]
 80047aa:	4629      	mov	r1, r5
 80047ac:	eb63 0301 	sbc.w	r3, r3, r1
 80047b0:	617b      	str	r3, [r7, #20]
 80047b2:	f04f 0200 	mov.w	r2, #0
 80047b6:	f04f 0300 	mov.w	r3, #0
 80047ba:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047be:	4659      	mov	r1, fp
 80047c0:	018b      	lsls	r3, r1, #6
 80047c2:	4651      	mov	r1, sl
 80047c4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047c8:	4651      	mov	r1, sl
 80047ca:	018a      	lsls	r2, r1, #6
 80047cc:	4651      	mov	r1, sl
 80047ce:	ebb2 0801 	subs.w	r8, r2, r1
 80047d2:	4659      	mov	r1, fp
 80047d4:	eb63 0901 	sbc.w	r9, r3, r1
 80047d8:	f04f 0200 	mov.w	r2, #0
 80047dc:	f04f 0300 	mov.w	r3, #0
 80047e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047ec:	4690      	mov	r8, r2
 80047ee:	4699      	mov	r9, r3
 80047f0:	4623      	mov	r3, r4
 80047f2:	eb18 0303 	adds.w	r3, r8, r3
 80047f6:	60bb      	str	r3, [r7, #8]
 80047f8:	462b      	mov	r3, r5
 80047fa:	eb49 0303 	adc.w	r3, r9, r3
 80047fe:	60fb      	str	r3, [r7, #12]
 8004800:	f04f 0200 	mov.w	r2, #0
 8004804:	f04f 0300 	mov.w	r3, #0
 8004808:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800480c:	4629      	mov	r1, r5
 800480e:	028b      	lsls	r3, r1, #10
 8004810:	4621      	mov	r1, r4
 8004812:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004816:	4621      	mov	r1, r4
 8004818:	028a      	lsls	r2, r1, #10
 800481a:	4610      	mov	r0, r2
 800481c:	4619      	mov	r1, r3
 800481e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004822:	2200      	movs	r2, #0
 8004824:	643b      	str	r3, [r7, #64]	; 0x40
 8004826:	647a      	str	r2, [r7, #68]	; 0x44
 8004828:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800482c:	f7fc fa2c 	bl	8000c88 <__aeabi_uldivmod>
 8004830:	4602      	mov	r2, r0
 8004832:	460b      	mov	r3, r1
 8004834:	4613      	mov	r3, r2
 8004836:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800483a:	4b60      	ldr	r3, [pc, #384]	; (80049bc <HAL_RCC_GetSysClockFreq+0x348>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	0c1b      	lsrs	r3, r3, #16
 8004840:	f003 0303 	and.w	r3, r3, #3
 8004844:	3301      	adds	r3, #1
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 800484c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004850:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004854:	fbb2 f3f3 	udiv	r3, r2, r3
 8004858:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800485c:	e0a6      	b.n	80049ac <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800485e:	4b57      	ldr	r3, [pc, #348]	; (80049bc <HAL_RCC_GetSysClockFreq+0x348>)
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004866:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800486a:	4b54      	ldr	r3, [pc, #336]	; (80049bc <HAL_RCC_GetSysClockFreq+0x348>)
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d02a      	beq.n	80048cc <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004876:	4b51      	ldr	r3, [pc, #324]	; (80049bc <HAL_RCC_GetSysClockFreq+0x348>)
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	099b      	lsrs	r3, r3, #6
 800487c:	2200      	movs	r2, #0
 800487e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004880:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004884:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004888:	2100      	movs	r1, #0
 800488a:	4b4e      	ldr	r3, [pc, #312]	; (80049c4 <HAL_RCC_GetSysClockFreq+0x350>)
 800488c:	fb03 f201 	mul.w	r2, r3, r1
 8004890:	2300      	movs	r3, #0
 8004892:	fb00 f303 	mul.w	r3, r0, r3
 8004896:	4413      	add	r3, r2
 8004898:	4a4a      	ldr	r2, [pc, #296]	; (80049c4 <HAL_RCC_GetSysClockFreq+0x350>)
 800489a:	fba0 1202 	umull	r1, r2, r0, r2
 800489e:	677a      	str	r2, [r7, #116]	; 0x74
 80048a0:	460a      	mov	r2, r1
 80048a2:	673a      	str	r2, [r7, #112]	; 0x70
 80048a4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80048a6:	4413      	add	r3, r2
 80048a8:	677b      	str	r3, [r7, #116]	; 0x74
 80048aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048ae:	2200      	movs	r2, #0
 80048b0:	633b      	str	r3, [r7, #48]	; 0x30
 80048b2:	637a      	str	r2, [r7, #52]	; 0x34
 80048b4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80048b8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80048bc:	f7fc f9e4 	bl	8000c88 <__aeabi_uldivmod>
 80048c0:	4602      	mov	r2, r0
 80048c2:	460b      	mov	r3, r1
 80048c4:	4613      	mov	r3, r2
 80048c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80048ca:	e05b      	b.n	8004984 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048cc:	4b3b      	ldr	r3, [pc, #236]	; (80049bc <HAL_RCC_GetSysClockFreq+0x348>)
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	099b      	lsrs	r3, r3, #6
 80048d2:	2200      	movs	r2, #0
 80048d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80048d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048de:	623b      	str	r3, [r7, #32]
 80048e0:	2300      	movs	r3, #0
 80048e2:	627b      	str	r3, [r7, #36]	; 0x24
 80048e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80048e8:	4642      	mov	r2, r8
 80048ea:	464b      	mov	r3, r9
 80048ec:	f04f 0000 	mov.w	r0, #0
 80048f0:	f04f 0100 	mov.w	r1, #0
 80048f4:	0159      	lsls	r1, r3, #5
 80048f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048fa:	0150      	lsls	r0, r2, #5
 80048fc:	4602      	mov	r2, r0
 80048fe:	460b      	mov	r3, r1
 8004900:	4641      	mov	r1, r8
 8004902:	ebb2 0a01 	subs.w	sl, r2, r1
 8004906:	4649      	mov	r1, r9
 8004908:	eb63 0b01 	sbc.w	fp, r3, r1
 800490c:	f04f 0200 	mov.w	r2, #0
 8004910:	f04f 0300 	mov.w	r3, #0
 8004914:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004918:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800491c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004920:	ebb2 040a 	subs.w	r4, r2, sl
 8004924:	eb63 050b 	sbc.w	r5, r3, fp
 8004928:	f04f 0200 	mov.w	r2, #0
 800492c:	f04f 0300 	mov.w	r3, #0
 8004930:	00eb      	lsls	r3, r5, #3
 8004932:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004936:	00e2      	lsls	r2, r4, #3
 8004938:	4614      	mov	r4, r2
 800493a:	461d      	mov	r5, r3
 800493c:	4643      	mov	r3, r8
 800493e:	18e3      	adds	r3, r4, r3
 8004940:	603b      	str	r3, [r7, #0]
 8004942:	464b      	mov	r3, r9
 8004944:	eb45 0303 	adc.w	r3, r5, r3
 8004948:	607b      	str	r3, [r7, #4]
 800494a:	f04f 0200 	mov.w	r2, #0
 800494e:	f04f 0300 	mov.w	r3, #0
 8004952:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004956:	4629      	mov	r1, r5
 8004958:	028b      	lsls	r3, r1, #10
 800495a:	4621      	mov	r1, r4
 800495c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004960:	4621      	mov	r1, r4
 8004962:	028a      	lsls	r2, r1, #10
 8004964:	4610      	mov	r0, r2
 8004966:	4619      	mov	r1, r3
 8004968:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800496c:	2200      	movs	r2, #0
 800496e:	61bb      	str	r3, [r7, #24]
 8004970:	61fa      	str	r2, [r7, #28]
 8004972:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004976:	f7fc f987 	bl	8000c88 <__aeabi_uldivmod>
 800497a:	4602      	mov	r2, r0
 800497c:	460b      	mov	r3, r1
 800497e:	4613      	mov	r3, r2
 8004980:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004984:	4b0d      	ldr	r3, [pc, #52]	; (80049bc <HAL_RCC_GetSysClockFreq+0x348>)
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	0f1b      	lsrs	r3, r3, #28
 800498a:	f003 0307 	and.w	r3, r3, #7
 800498e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8004992:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004996:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800499a:	fbb2 f3f3 	udiv	r3, r2, r3
 800499e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80049a2:	e003      	b.n	80049ac <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049a4:	4b06      	ldr	r3, [pc, #24]	; (80049c0 <HAL_RCC_GetSysClockFreq+0x34c>)
 80049a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80049aa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3798      	adds	r7, #152	; 0x98
 80049b4:	46bd      	mov	sp, r7
 80049b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049ba:	bf00      	nop
 80049bc:	40023800 	.word	0x40023800
 80049c0:	00f42400 	.word	0x00f42400
 80049c4:	017d7840 	.word	0x017d7840

080049c8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e28d      	b.n	8004ef6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f000 8083 	beq.w	8004aee <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80049e8:	4b94      	ldr	r3, [pc, #592]	; (8004c3c <HAL_RCC_OscConfig+0x274>)
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f003 030c 	and.w	r3, r3, #12
 80049f0:	2b04      	cmp	r3, #4
 80049f2:	d019      	beq.n	8004a28 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80049f4:	4b91      	ldr	r3, [pc, #580]	; (8004c3c <HAL_RCC_OscConfig+0x274>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80049fc:	2b08      	cmp	r3, #8
 80049fe:	d106      	bne.n	8004a0e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004a00:	4b8e      	ldr	r3, [pc, #568]	; (8004c3c <HAL_RCC_OscConfig+0x274>)
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a0c:	d00c      	beq.n	8004a28 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a0e:	4b8b      	ldr	r3, [pc, #556]	; (8004c3c <HAL_RCC_OscConfig+0x274>)
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004a16:	2b0c      	cmp	r3, #12
 8004a18:	d112      	bne.n	8004a40 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a1a:	4b88      	ldr	r3, [pc, #544]	; (8004c3c <HAL_RCC_OscConfig+0x274>)
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a26:	d10b      	bne.n	8004a40 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a28:	4b84      	ldr	r3, [pc, #528]	; (8004c3c <HAL_RCC_OscConfig+0x274>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d05b      	beq.n	8004aec <HAL_RCC_OscConfig+0x124>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d157      	bne.n	8004aec <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e25a      	b.n	8004ef6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a48:	d106      	bne.n	8004a58 <HAL_RCC_OscConfig+0x90>
 8004a4a:	4b7c      	ldr	r3, [pc, #496]	; (8004c3c <HAL_RCC_OscConfig+0x274>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a7b      	ldr	r2, [pc, #492]	; (8004c3c <HAL_RCC_OscConfig+0x274>)
 8004a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a54:	6013      	str	r3, [r2, #0]
 8004a56:	e01d      	b.n	8004a94 <HAL_RCC_OscConfig+0xcc>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a60:	d10c      	bne.n	8004a7c <HAL_RCC_OscConfig+0xb4>
 8004a62:	4b76      	ldr	r3, [pc, #472]	; (8004c3c <HAL_RCC_OscConfig+0x274>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a75      	ldr	r2, [pc, #468]	; (8004c3c <HAL_RCC_OscConfig+0x274>)
 8004a68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a6c:	6013      	str	r3, [r2, #0]
 8004a6e:	4b73      	ldr	r3, [pc, #460]	; (8004c3c <HAL_RCC_OscConfig+0x274>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a72      	ldr	r2, [pc, #456]	; (8004c3c <HAL_RCC_OscConfig+0x274>)
 8004a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a78:	6013      	str	r3, [r2, #0]
 8004a7a:	e00b      	b.n	8004a94 <HAL_RCC_OscConfig+0xcc>
 8004a7c:	4b6f      	ldr	r3, [pc, #444]	; (8004c3c <HAL_RCC_OscConfig+0x274>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a6e      	ldr	r2, [pc, #440]	; (8004c3c <HAL_RCC_OscConfig+0x274>)
 8004a82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a86:	6013      	str	r3, [r2, #0]
 8004a88:	4b6c      	ldr	r3, [pc, #432]	; (8004c3c <HAL_RCC_OscConfig+0x274>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a6b      	ldr	r2, [pc, #428]	; (8004c3c <HAL_RCC_OscConfig+0x274>)
 8004a8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d013      	beq.n	8004ac4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a9c:	f7fd ffd4 	bl	8002a48 <HAL_GetTick>
 8004aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aa2:	e008      	b.n	8004ab6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004aa4:	f7fd ffd0 	bl	8002a48 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	2b64      	cmp	r3, #100	; 0x64
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e21f      	b.n	8004ef6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ab6:	4b61      	ldr	r3, [pc, #388]	; (8004c3c <HAL_RCC_OscConfig+0x274>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d0f0      	beq.n	8004aa4 <HAL_RCC_OscConfig+0xdc>
 8004ac2:	e014      	b.n	8004aee <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac4:	f7fd ffc0 	bl	8002a48 <HAL_GetTick>
 8004ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aca:	e008      	b.n	8004ade <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004acc:	f7fd ffbc 	bl	8002a48 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	2b64      	cmp	r3, #100	; 0x64
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e20b      	b.n	8004ef6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ade:	4b57      	ldr	r3, [pc, #348]	; (8004c3c <HAL_RCC_OscConfig+0x274>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1f0      	bne.n	8004acc <HAL_RCC_OscConfig+0x104>
 8004aea:	e000      	b.n	8004aee <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d06f      	beq.n	8004bda <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004afa:	4b50      	ldr	r3, [pc, #320]	; (8004c3c <HAL_RCC_OscConfig+0x274>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f003 030c 	and.w	r3, r3, #12
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d017      	beq.n	8004b36 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004b06:	4b4d      	ldr	r3, [pc, #308]	; (8004c3c <HAL_RCC_OscConfig+0x274>)
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004b0e:	2b08      	cmp	r3, #8
 8004b10:	d105      	bne.n	8004b1e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004b12:	4b4a      	ldr	r3, [pc, #296]	; (8004c3c <HAL_RCC_OscConfig+0x274>)
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00b      	beq.n	8004b36 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b1e:	4b47      	ldr	r3, [pc, #284]	; (8004c3c <HAL_RCC_OscConfig+0x274>)
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004b26:	2b0c      	cmp	r3, #12
 8004b28:	d11c      	bne.n	8004b64 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b2a:	4b44      	ldr	r3, [pc, #272]	; (8004c3c <HAL_RCC_OscConfig+0x274>)
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d116      	bne.n	8004b64 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b36:	4b41      	ldr	r3, [pc, #260]	; (8004c3c <HAL_RCC_OscConfig+0x274>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d005      	beq.n	8004b4e <HAL_RCC_OscConfig+0x186>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d001      	beq.n	8004b4e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e1d3      	b.n	8004ef6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b4e:	4b3b      	ldr	r3, [pc, #236]	; (8004c3c <HAL_RCC_OscConfig+0x274>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	00db      	lsls	r3, r3, #3
 8004b5c:	4937      	ldr	r1, [pc, #220]	; (8004c3c <HAL_RCC_OscConfig+0x274>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b62:	e03a      	b.n	8004bda <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d020      	beq.n	8004bae <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b6c:	4b34      	ldr	r3, [pc, #208]	; (8004c40 <HAL_RCC_OscConfig+0x278>)
 8004b6e:	2201      	movs	r2, #1
 8004b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b72:	f7fd ff69 	bl	8002a48 <HAL_GetTick>
 8004b76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b78:	e008      	b.n	8004b8c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b7a:	f7fd ff65 	bl	8002a48 <HAL_GetTick>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d901      	bls.n	8004b8c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e1b4      	b.n	8004ef6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b8c:	4b2b      	ldr	r3, [pc, #172]	; (8004c3c <HAL_RCC_OscConfig+0x274>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0302 	and.w	r3, r3, #2
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d0f0      	beq.n	8004b7a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b98:	4b28      	ldr	r3, [pc, #160]	; (8004c3c <HAL_RCC_OscConfig+0x274>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	00db      	lsls	r3, r3, #3
 8004ba6:	4925      	ldr	r1, [pc, #148]	; (8004c3c <HAL_RCC_OscConfig+0x274>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	600b      	str	r3, [r1, #0]
 8004bac:	e015      	b.n	8004bda <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bae:	4b24      	ldr	r3, [pc, #144]	; (8004c40 <HAL_RCC_OscConfig+0x278>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb4:	f7fd ff48 	bl	8002a48 <HAL_GetTick>
 8004bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bba:	e008      	b.n	8004bce <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bbc:	f7fd ff44 	bl	8002a48 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e193      	b.n	8004ef6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bce:	4b1b      	ldr	r3, [pc, #108]	; (8004c3c <HAL_RCC_OscConfig+0x274>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1f0      	bne.n	8004bbc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0308 	and.w	r3, r3, #8
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d036      	beq.n	8004c54 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d016      	beq.n	8004c1c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bee:	4b15      	ldr	r3, [pc, #84]	; (8004c44 <HAL_RCC_OscConfig+0x27c>)
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf4:	f7fd ff28 	bl	8002a48 <HAL_GetTick>
 8004bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bfa:	e008      	b.n	8004c0e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bfc:	f7fd ff24 	bl	8002a48 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e173      	b.n	8004ef6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c0e:	4b0b      	ldr	r3, [pc, #44]	; (8004c3c <HAL_RCC_OscConfig+0x274>)
 8004c10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d0f0      	beq.n	8004bfc <HAL_RCC_OscConfig+0x234>
 8004c1a:	e01b      	b.n	8004c54 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c1c:	4b09      	ldr	r3, [pc, #36]	; (8004c44 <HAL_RCC_OscConfig+0x27c>)
 8004c1e:	2200      	movs	r2, #0
 8004c20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c22:	f7fd ff11 	bl	8002a48 <HAL_GetTick>
 8004c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c28:	e00e      	b.n	8004c48 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c2a:	f7fd ff0d 	bl	8002a48 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d907      	bls.n	8004c48 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e15c      	b.n	8004ef6 <HAL_RCC_OscConfig+0x52e>
 8004c3c:	40023800 	.word	0x40023800
 8004c40:	42470000 	.word	0x42470000
 8004c44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c48:	4b8a      	ldr	r3, [pc, #552]	; (8004e74 <HAL_RCC_OscConfig+0x4ac>)
 8004c4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1ea      	bne.n	8004c2a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0304 	and.w	r3, r3, #4
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f000 8097 	beq.w	8004d90 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c62:	2300      	movs	r3, #0
 8004c64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c66:	4b83      	ldr	r3, [pc, #524]	; (8004e74 <HAL_RCC_OscConfig+0x4ac>)
 8004c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10f      	bne.n	8004c92 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c72:	2300      	movs	r3, #0
 8004c74:	60bb      	str	r3, [r7, #8]
 8004c76:	4b7f      	ldr	r3, [pc, #508]	; (8004e74 <HAL_RCC_OscConfig+0x4ac>)
 8004c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7a:	4a7e      	ldr	r2, [pc, #504]	; (8004e74 <HAL_RCC_OscConfig+0x4ac>)
 8004c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c80:	6413      	str	r3, [r2, #64]	; 0x40
 8004c82:	4b7c      	ldr	r3, [pc, #496]	; (8004e74 <HAL_RCC_OscConfig+0x4ac>)
 8004c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c8a:	60bb      	str	r3, [r7, #8]
 8004c8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c92:	4b79      	ldr	r3, [pc, #484]	; (8004e78 <HAL_RCC_OscConfig+0x4b0>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d118      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c9e:	4b76      	ldr	r3, [pc, #472]	; (8004e78 <HAL_RCC_OscConfig+0x4b0>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a75      	ldr	r2, [pc, #468]	; (8004e78 <HAL_RCC_OscConfig+0x4b0>)
 8004ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ca8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004caa:	f7fd fecd 	bl	8002a48 <HAL_GetTick>
 8004cae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cb0:	e008      	b.n	8004cc4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cb2:	f7fd fec9 	bl	8002a48 <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d901      	bls.n	8004cc4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e118      	b.n	8004ef6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cc4:	4b6c      	ldr	r3, [pc, #432]	; (8004e78 <HAL_RCC_OscConfig+0x4b0>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d0f0      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d106      	bne.n	8004ce6 <HAL_RCC_OscConfig+0x31e>
 8004cd8:	4b66      	ldr	r3, [pc, #408]	; (8004e74 <HAL_RCC_OscConfig+0x4ac>)
 8004cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cdc:	4a65      	ldr	r2, [pc, #404]	; (8004e74 <HAL_RCC_OscConfig+0x4ac>)
 8004cde:	f043 0301 	orr.w	r3, r3, #1
 8004ce2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ce4:	e01c      	b.n	8004d20 <HAL_RCC_OscConfig+0x358>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	2b05      	cmp	r3, #5
 8004cec:	d10c      	bne.n	8004d08 <HAL_RCC_OscConfig+0x340>
 8004cee:	4b61      	ldr	r3, [pc, #388]	; (8004e74 <HAL_RCC_OscConfig+0x4ac>)
 8004cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf2:	4a60      	ldr	r2, [pc, #384]	; (8004e74 <HAL_RCC_OscConfig+0x4ac>)
 8004cf4:	f043 0304 	orr.w	r3, r3, #4
 8004cf8:	6713      	str	r3, [r2, #112]	; 0x70
 8004cfa:	4b5e      	ldr	r3, [pc, #376]	; (8004e74 <HAL_RCC_OscConfig+0x4ac>)
 8004cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cfe:	4a5d      	ldr	r2, [pc, #372]	; (8004e74 <HAL_RCC_OscConfig+0x4ac>)
 8004d00:	f043 0301 	orr.w	r3, r3, #1
 8004d04:	6713      	str	r3, [r2, #112]	; 0x70
 8004d06:	e00b      	b.n	8004d20 <HAL_RCC_OscConfig+0x358>
 8004d08:	4b5a      	ldr	r3, [pc, #360]	; (8004e74 <HAL_RCC_OscConfig+0x4ac>)
 8004d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d0c:	4a59      	ldr	r2, [pc, #356]	; (8004e74 <HAL_RCC_OscConfig+0x4ac>)
 8004d0e:	f023 0301 	bic.w	r3, r3, #1
 8004d12:	6713      	str	r3, [r2, #112]	; 0x70
 8004d14:	4b57      	ldr	r3, [pc, #348]	; (8004e74 <HAL_RCC_OscConfig+0x4ac>)
 8004d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d18:	4a56      	ldr	r2, [pc, #344]	; (8004e74 <HAL_RCC_OscConfig+0x4ac>)
 8004d1a:	f023 0304 	bic.w	r3, r3, #4
 8004d1e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d015      	beq.n	8004d54 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d28:	f7fd fe8e 	bl	8002a48 <HAL_GetTick>
 8004d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d2e:	e00a      	b.n	8004d46 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d30:	f7fd fe8a 	bl	8002a48 <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d901      	bls.n	8004d46 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e0d7      	b.n	8004ef6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d46:	4b4b      	ldr	r3, [pc, #300]	; (8004e74 <HAL_RCC_OscConfig+0x4ac>)
 8004d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d0ee      	beq.n	8004d30 <HAL_RCC_OscConfig+0x368>
 8004d52:	e014      	b.n	8004d7e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d54:	f7fd fe78 	bl	8002a48 <HAL_GetTick>
 8004d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d5a:	e00a      	b.n	8004d72 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d5c:	f7fd fe74 	bl	8002a48 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d901      	bls.n	8004d72 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e0c1      	b.n	8004ef6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d72:	4b40      	ldr	r3, [pc, #256]	; (8004e74 <HAL_RCC_OscConfig+0x4ac>)
 8004d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1ee      	bne.n	8004d5c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d7e:	7dfb      	ldrb	r3, [r7, #23]
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d105      	bne.n	8004d90 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d84:	4b3b      	ldr	r3, [pc, #236]	; (8004e74 <HAL_RCC_OscConfig+0x4ac>)
 8004d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d88:	4a3a      	ldr	r2, [pc, #232]	; (8004e74 <HAL_RCC_OscConfig+0x4ac>)
 8004d8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d8e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f000 80ad 	beq.w	8004ef4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d9a:	4b36      	ldr	r3, [pc, #216]	; (8004e74 <HAL_RCC_OscConfig+0x4ac>)
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f003 030c 	and.w	r3, r3, #12
 8004da2:	2b08      	cmp	r3, #8
 8004da4:	d060      	beq.n	8004e68 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d145      	bne.n	8004e3a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dae:	4b33      	ldr	r3, [pc, #204]	; (8004e7c <HAL_RCC_OscConfig+0x4b4>)
 8004db0:	2200      	movs	r2, #0
 8004db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db4:	f7fd fe48 	bl	8002a48 <HAL_GetTick>
 8004db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dba:	e008      	b.n	8004dce <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dbc:	f7fd fe44 	bl	8002a48 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d901      	bls.n	8004dce <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e093      	b.n	8004ef6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dce:	4b29      	ldr	r3, [pc, #164]	; (8004e74 <HAL_RCC_OscConfig+0x4ac>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1f0      	bne.n	8004dbc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	69da      	ldr	r2, [r3, #28]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	431a      	orrs	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de8:	019b      	lsls	r3, r3, #6
 8004dea:	431a      	orrs	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df0:	085b      	lsrs	r3, r3, #1
 8004df2:	3b01      	subs	r3, #1
 8004df4:	041b      	lsls	r3, r3, #16
 8004df6:	431a      	orrs	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfc:	061b      	lsls	r3, r3, #24
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e04:	071b      	lsls	r3, r3, #28
 8004e06:	491b      	ldr	r1, [pc, #108]	; (8004e74 <HAL_RCC_OscConfig+0x4ac>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e0c:	4b1b      	ldr	r3, [pc, #108]	; (8004e7c <HAL_RCC_OscConfig+0x4b4>)
 8004e0e:	2201      	movs	r2, #1
 8004e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e12:	f7fd fe19 	bl	8002a48 <HAL_GetTick>
 8004e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e18:	e008      	b.n	8004e2c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e1a:	f7fd fe15 	bl	8002a48 <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d901      	bls.n	8004e2c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e064      	b.n	8004ef6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e2c:	4b11      	ldr	r3, [pc, #68]	; (8004e74 <HAL_RCC_OscConfig+0x4ac>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d0f0      	beq.n	8004e1a <HAL_RCC_OscConfig+0x452>
 8004e38:	e05c      	b.n	8004ef4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e3a:	4b10      	ldr	r3, [pc, #64]	; (8004e7c <HAL_RCC_OscConfig+0x4b4>)
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e40:	f7fd fe02 	bl	8002a48 <HAL_GetTick>
 8004e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e46:	e008      	b.n	8004e5a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e48:	f7fd fdfe 	bl	8002a48 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d901      	bls.n	8004e5a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e04d      	b.n	8004ef6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e5a:	4b06      	ldr	r3, [pc, #24]	; (8004e74 <HAL_RCC_OscConfig+0x4ac>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1f0      	bne.n	8004e48 <HAL_RCC_OscConfig+0x480>
 8004e66:	e045      	b.n	8004ef4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d107      	bne.n	8004e80 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e040      	b.n	8004ef6 <HAL_RCC_OscConfig+0x52e>
 8004e74:	40023800 	.word	0x40023800
 8004e78:	40007000 	.word	0x40007000
 8004e7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e80:	4b1f      	ldr	r3, [pc, #124]	; (8004f00 <HAL_RCC_OscConfig+0x538>)
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d030      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d129      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d122      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004eb6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d119      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec6:	085b      	lsrs	r3, r3, #1
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d10f      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d107      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eea:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d001      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e000      	b.n	8004ef6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3718      	adds	r7, #24
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	40023800 	.word	0x40023800

08004f04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d101      	bne.n	8004f16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e041      	b.n	8004f9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d106      	bne.n	8004f30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f7fd fbc8 	bl	80026c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2202      	movs	r2, #2
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	3304      	adds	r3, #4
 8004f40:	4619      	mov	r1, r3
 8004f42:	4610      	mov	r0, r2
 8004f44:	f000 f9ce 	bl	80052e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3708      	adds	r7, #8
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
	...

08004fa4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d001      	beq.n	8004fbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e04e      	b.n	800505a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2202      	movs	r2, #2
 8004fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68da      	ldr	r2, [r3, #12]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f042 0201 	orr.w	r2, r2, #1
 8004fd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a23      	ldr	r2, [pc, #140]	; (8005068 <HAL_TIM_Base_Start_IT+0xc4>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d022      	beq.n	8005024 <HAL_TIM_Base_Start_IT+0x80>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fe6:	d01d      	beq.n	8005024 <HAL_TIM_Base_Start_IT+0x80>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a1f      	ldr	r2, [pc, #124]	; (800506c <HAL_TIM_Base_Start_IT+0xc8>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d018      	beq.n	8005024 <HAL_TIM_Base_Start_IT+0x80>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a1e      	ldr	r2, [pc, #120]	; (8005070 <HAL_TIM_Base_Start_IT+0xcc>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d013      	beq.n	8005024 <HAL_TIM_Base_Start_IT+0x80>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a1c      	ldr	r2, [pc, #112]	; (8005074 <HAL_TIM_Base_Start_IT+0xd0>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d00e      	beq.n	8005024 <HAL_TIM_Base_Start_IT+0x80>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a1b      	ldr	r2, [pc, #108]	; (8005078 <HAL_TIM_Base_Start_IT+0xd4>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d009      	beq.n	8005024 <HAL_TIM_Base_Start_IT+0x80>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a19      	ldr	r2, [pc, #100]	; (800507c <HAL_TIM_Base_Start_IT+0xd8>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d004      	beq.n	8005024 <HAL_TIM_Base_Start_IT+0x80>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a18      	ldr	r2, [pc, #96]	; (8005080 <HAL_TIM_Base_Start_IT+0xdc>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d111      	bne.n	8005048 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f003 0307 	and.w	r3, r3, #7
 800502e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2b06      	cmp	r3, #6
 8005034:	d010      	beq.n	8005058 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f042 0201 	orr.w	r2, r2, #1
 8005044:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005046:	e007      	b.n	8005058 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f042 0201 	orr.w	r2, r2, #1
 8005056:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3714      	adds	r7, #20
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	40010000 	.word	0x40010000
 800506c:	40000400 	.word	0x40000400
 8005070:	40000800 	.word	0x40000800
 8005074:	40000c00 	.word	0x40000c00
 8005078:	40010400 	.word	0x40010400
 800507c:	40014000 	.word	0x40014000
 8005080:	40001800 	.word	0x40001800

08005084 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	f003 0302 	and.w	r3, r3, #2
 8005096:	2b02      	cmp	r3, #2
 8005098:	d122      	bne.n	80050e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d11b      	bne.n	80050e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f06f 0202 	mvn.w	r2, #2
 80050b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	f003 0303 	and.w	r3, r3, #3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d003      	beq.n	80050ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 f8ee 	bl	80052a8 <HAL_TIM_IC_CaptureCallback>
 80050cc:	e005      	b.n	80050da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 f8e0 	bl	8005294 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f000 f8f1 	bl	80052bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	f003 0304 	and.w	r3, r3, #4
 80050ea:	2b04      	cmp	r3, #4
 80050ec:	d122      	bne.n	8005134 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	f003 0304 	and.w	r3, r3, #4
 80050f8:	2b04      	cmp	r3, #4
 80050fa:	d11b      	bne.n	8005134 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f06f 0204 	mvn.w	r2, #4
 8005104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2202      	movs	r2, #2
 800510a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005116:	2b00      	cmp	r3, #0
 8005118:	d003      	beq.n	8005122 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 f8c4 	bl	80052a8 <HAL_TIM_IC_CaptureCallback>
 8005120:	e005      	b.n	800512e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f8b6 	bl	8005294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 f8c7 	bl	80052bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	f003 0308 	and.w	r3, r3, #8
 800513e:	2b08      	cmp	r3, #8
 8005140:	d122      	bne.n	8005188 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	f003 0308 	and.w	r3, r3, #8
 800514c:	2b08      	cmp	r3, #8
 800514e:	d11b      	bne.n	8005188 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f06f 0208 	mvn.w	r2, #8
 8005158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2204      	movs	r2, #4
 800515e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	69db      	ldr	r3, [r3, #28]
 8005166:	f003 0303 	and.w	r3, r3, #3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d003      	beq.n	8005176 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 f89a 	bl	80052a8 <HAL_TIM_IC_CaptureCallback>
 8005174:	e005      	b.n	8005182 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 f88c 	bl	8005294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 f89d 	bl	80052bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	f003 0310 	and.w	r3, r3, #16
 8005192:	2b10      	cmp	r3, #16
 8005194:	d122      	bne.n	80051dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	f003 0310 	and.w	r3, r3, #16
 80051a0:	2b10      	cmp	r3, #16
 80051a2:	d11b      	bne.n	80051dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f06f 0210 	mvn.w	r2, #16
 80051ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2208      	movs	r2, #8
 80051b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	69db      	ldr	r3, [r3, #28]
 80051ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d003      	beq.n	80051ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 f870 	bl	80052a8 <HAL_TIM_IC_CaptureCallback>
 80051c8:	e005      	b.n	80051d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 f862 	bl	8005294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 f873 	bl	80052bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d10e      	bne.n	8005208 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	f003 0301 	and.w	r3, r3, #1
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d107      	bne.n	8005208 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f06f 0201 	mvn.w	r2, #1
 8005200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f7fd f908 	bl	8002418 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005212:	2b80      	cmp	r3, #128	; 0x80
 8005214:	d10e      	bne.n	8005234 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005220:	2b80      	cmp	r3, #128	; 0x80
 8005222:	d107      	bne.n	8005234 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800522c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f97e 	bl	8005530 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800523e:	2b40      	cmp	r3, #64	; 0x40
 8005240:	d10e      	bne.n	8005260 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800524c:	2b40      	cmp	r3, #64	; 0x40
 800524e:	d107      	bne.n	8005260 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 f838 	bl	80052d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	f003 0320 	and.w	r3, r3, #32
 800526a:	2b20      	cmp	r3, #32
 800526c:	d10e      	bne.n	800528c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	f003 0320 	and.w	r3, r3, #32
 8005278:	2b20      	cmp	r3, #32
 800527a:	d107      	bne.n	800528c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f06f 0220 	mvn.w	r2, #32
 8005284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 f948 	bl	800551c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800528c:	bf00      	nop
 800528e:	3708      	adds	r7, #8
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a40      	ldr	r2, [pc, #256]	; (80053f8 <TIM_Base_SetConfig+0x114>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d013      	beq.n	8005324 <TIM_Base_SetConfig+0x40>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005302:	d00f      	beq.n	8005324 <TIM_Base_SetConfig+0x40>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a3d      	ldr	r2, [pc, #244]	; (80053fc <TIM_Base_SetConfig+0x118>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d00b      	beq.n	8005324 <TIM_Base_SetConfig+0x40>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a3c      	ldr	r2, [pc, #240]	; (8005400 <TIM_Base_SetConfig+0x11c>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d007      	beq.n	8005324 <TIM_Base_SetConfig+0x40>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a3b      	ldr	r2, [pc, #236]	; (8005404 <TIM_Base_SetConfig+0x120>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d003      	beq.n	8005324 <TIM_Base_SetConfig+0x40>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a3a      	ldr	r2, [pc, #232]	; (8005408 <TIM_Base_SetConfig+0x124>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d108      	bne.n	8005336 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800532a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	4313      	orrs	r3, r2
 8005334:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a2f      	ldr	r2, [pc, #188]	; (80053f8 <TIM_Base_SetConfig+0x114>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d02b      	beq.n	8005396 <TIM_Base_SetConfig+0xb2>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005344:	d027      	beq.n	8005396 <TIM_Base_SetConfig+0xb2>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a2c      	ldr	r2, [pc, #176]	; (80053fc <TIM_Base_SetConfig+0x118>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d023      	beq.n	8005396 <TIM_Base_SetConfig+0xb2>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a2b      	ldr	r2, [pc, #172]	; (8005400 <TIM_Base_SetConfig+0x11c>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d01f      	beq.n	8005396 <TIM_Base_SetConfig+0xb2>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a2a      	ldr	r2, [pc, #168]	; (8005404 <TIM_Base_SetConfig+0x120>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d01b      	beq.n	8005396 <TIM_Base_SetConfig+0xb2>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a29      	ldr	r2, [pc, #164]	; (8005408 <TIM_Base_SetConfig+0x124>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d017      	beq.n	8005396 <TIM_Base_SetConfig+0xb2>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a28      	ldr	r2, [pc, #160]	; (800540c <TIM_Base_SetConfig+0x128>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d013      	beq.n	8005396 <TIM_Base_SetConfig+0xb2>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a27      	ldr	r2, [pc, #156]	; (8005410 <TIM_Base_SetConfig+0x12c>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d00f      	beq.n	8005396 <TIM_Base_SetConfig+0xb2>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a26      	ldr	r2, [pc, #152]	; (8005414 <TIM_Base_SetConfig+0x130>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d00b      	beq.n	8005396 <TIM_Base_SetConfig+0xb2>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a25      	ldr	r2, [pc, #148]	; (8005418 <TIM_Base_SetConfig+0x134>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d007      	beq.n	8005396 <TIM_Base_SetConfig+0xb2>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a24      	ldr	r2, [pc, #144]	; (800541c <TIM_Base_SetConfig+0x138>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d003      	beq.n	8005396 <TIM_Base_SetConfig+0xb2>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a23      	ldr	r2, [pc, #140]	; (8005420 <TIM_Base_SetConfig+0x13c>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d108      	bne.n	80053a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800539c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	689a      	ldr	r2, [r3, #8]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a0a      	ldr	r2, [pc, #40]	; (80053f8 <TIM_Base_SetConfig+0x114>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d003      	beq.n	80053dc <TIM_Base_SetConfig+0xf8>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a0c      	ldr	r2, [pc, #48]	; (8005408 <TIM_Base_SetConfig+0x124>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d103      	bne.n	80053e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	691a      	ldr	r2, [r3, #16]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	615a      	str	r2, [r3, #20]
}
 80053ea:	bf00      	nop
 80053ec:	3714      	adds	r7, #20
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	40010000 	.word	0x40010000
 80053fc:	40000400 	.word	0x40000400
 8005400:	40000800 	.word	0x40000800
 8005404:	40000c00 	.word	0x40000c00
 8005408:	40010400 	.word	0x40010400
 800540c:	40014000 	.word	0x40014000
 8005410:	40014400 	.word	0x40014400
 8005414:	40014800 	.word	0x40014800
 8005418:	40001800 	.word	0x40001800
 800541c:	40001c00 	.word	0x40001c00
 8005420:	40002000 	.word	0x40002000

08005424 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005434:	2b01      	cmp	r3, #1
 8005436:	d101      	bne.n	800543c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005438:	2302      	movs	r3, #2
 800543a:	e05a      	b.n	80054f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2202      	movs	r2, #2
 8005448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005462:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	4313      	orrs	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a21      	ldr	r2, [pc, #132]	; (8005500 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d022      	beq.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005488:	d01d      	beq.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a1d      	ldr	r2, [pc, #116]	; (8005504 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d018      	beq.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a1b      	ldr	r2, [pc, #108]	; (8005508 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d013      	beq.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a1a      	ldr	r2, [pc, #104]	; (800550c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d00e      	beq.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a18      	ldr	r2, [pc, #96]	; (8005510 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d009      	beq.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a17      	ldr	r2, [pc, #92]	; (8005514 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d004      	beq.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a15      	ldr	r2, [pc, #84]	; (8005518 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d10c      	bne.n	80054e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3714      	adds	r7, #20
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	40010000 	.word	0x40010000
 8005504:	40000400 	.word	0x40000400
 8005508:	40000800 	.word	0x40000800
 800550c:	40000c00 	.word	0x40000c00
 8005510:	40010400 	.word	0x40010400
 8005514:	40014000 	.word	0x40014000
 8005518:	40001800 	.word	0x40001800

0800551c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005524:	bf00      	nop
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005538:	bf00      	nop
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <__errno>:
 8005544:	4b01      	ldr	r3, [pc, #4]	; (800554c <__errno+0x8>)
 8005546:	6818      	ldr	r0, [r3, #0]
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	20000014 	.word	0x20000014

08005550 <__libc_init_array>:
 8005550:	b570      	push	{r4, r5, r6, lr}
 8005552:	4d0d      	ldr	r5, [pc, #52]	; (8005588 <__libc_init_array+0x38>)
 8005554:	4c0d      	ldr	r4, [pc, #52]	; (800558c <__libc_init_array+0x3c>)
 8005556:	1b64      	subs	r4, r4, r5
 8005558:	10a4      	asrs	r4, r4, #2
 800555a:	2600      	movs	r6, #0
 800555c:	42a6      	cmp	r6, r4
 800555e:	d109      	bne.n	8005574 <__libc_init_array+0x24>
 8005560:	4d0b      	ldr	r5, [pc, #44]	; (8005590 <__libc_init_array+0x40>)
 8005562:	4c0c      	ldr	r4, [pc, #48]	; (8005594 <__libc_init_array+0x44>)
 8005564:	f002 ff04 	bl	8008370 <_init>
 8005568:	1b64      	subs	r4, r4, r5
 800556a:	10a4      	asrs	r4, r4, #2
 800556c:	2600      	movs	r6, #0
 800556e:	42a6      	cmp	r6, r4
 8005570:	d105      	bne.n	800557e <__libc_init_array+0x2e>
 8005572:	bd70      	pop	{r4, r5, r6, pc}
 8005574:	f855 3b04 	ldr.w	r3, [r5], #4
 8005578:	4798      	blx	r3
 800557a:	3601      	adds	r6, #1
 800557c:	e7ee      	b.n	800555c <__libc_init_array+0xc>
 800557e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005582:	4798      	blx	r3
 8005584:	3601      	adds	r6, #1
 8005586:	e7f2      	b.n	800556e <__libc_init_array+0x1e>
 8005588:	0800a72c 	.word	0x0800a72c
 800558c:	0800a72c 	.word	0x0800a72c
 8005590:	0800a72c 	.word	0x0800a72c
 8005594:	0800a730 	.word	0x0800a730

08005598 <memset>:
 8005598:	4402      	add	r2, r0
 800559a:	4603      	mov	r3, r0
 800559c:	4293      	cmp	r3, r2
 800559e:	d100      	bne.n	80055a2 <memset+0xa>
 80055a0:	4770      	bx	lr
 80055a2:	f803 1b01 	strb.w	r1, [r3], #1
 80055a6:	e7f9      	b.n	800559c <memset+0x4>

080055a8 <__cvt>:
 80055a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055ac:	ec55 4b10 	vmov	r4, r5, d0
 80055b0:	2d00      	cmp	r5, #0
 80055b2:	460e      	mov	r6, r1
 80055b4:	4619      	mov	r1, r3
 80055b6:	462b      	mov	r3, r5
 80055b8:	bfbb      	ittet	lt
 80055ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80055be:	461d      	movlt	r5, r3
 80055c0:	2300      	movge	r3, #0
 80055c2:	232d      	movlt	r3, #45	; 0x2d
 80055c4:	700b      	strb	r3, [r1, #0]
 80055c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80055cc:	4691      	mov	r9, r2
 80055ce:	f023 0820 	bic.w	r8, r3, #32
 80055d2:	bfbc      	itt	lt
 80055d4:	4622      	movlt	r2, r4
 80055d6:	4614      	movlt	r4, r2
 80055d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80055dc:	d005      	beq.n	80055ea <__cvt+0x42>
 80055de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80055e2:	d100      	bne.n	80055e6 <__cvt+0x3e>
 80055e4:	3601      	adds	r6, #1
 80055e6:	2102      	movs	r1, #2
 80055e8:	e000      	b.n	80055ec <__cvt+0x44>
 80055ea:	2103      	movs	r1, #3
 80055ec:	ab03      	add	r3, sp, #12
 80055ee:	9301      	str	r3, [sp, #4]
 80055f0:	ab02      	add	r3, sp, #8
 80055f2:	9300      	str	r3, [sp, #0]
 80055f4:	ec45 4b10 	vmov	d0, r4, r5
 80055f8:	4653      	mov	r3, sl
 80055fa:	4632      	mov	r2, r6
 80055fc:	f000 fcec 	bl	8005fd8 <_dtoa_r>
 8005600:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005604:	4607      	mov	r7, r0
 8005606:	d102      	bne.n	800560e <__cvt+0x66>
 8005608:	f019 0f01 	tst.w	r9, #1
 800560c:	d022      	beq.n	8005654 <__cvt+0xac>
 800560e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005612:	eb07 0906 	add.w	r9, r7, r6
 8005616:	d110      	bne.n	800563a <__cvt+0x92>
 8005618:	783b      	ldrb	r3, [r7, #0]
 800561a:	2b30      	cmp	r3, #48	; 0x30
 800561c:	d10a      	bne.n	8005634 <__cvt+0x8c>
 800561e:	2200      	movs	r2, #0
 8005620:	2300      	movs	r3, #0
 8005622:	4620      	mov	r0, r4
 8005624:	4629      	mov	r1, r5
 8005626:	f7fb fa6f 	bl	8000b08 <__aeabi_dcmpeq>
 800562a:	b918      	cbnz	r0, 8005634 <__cvt+0x8c>
 800562c:	f1c6 0601 	rsb	r6, r6, #1
 8005630:	f8ca 6000 	str.w	r6, [sl]
 8005634:	f8da 3000 	ldr.w	r3, [sl]
 8005638:	4499      	add	r9, r3
 800563a:	2200      	movs	r2, #0
 800563c:	2300      	movs	r3, #0
 800563e:	4620      	mov	r0, r4
 8005640:	4629      	mov	r1, r5
 8005642:	f7fb fa61 	bl	8000b08 <__aeabi_dcmpeq>
 8005646:	b108      	cbz	r0, 800564c <__cvt+0xa4>
 8005648:	f8cd 900c 	str.w	r9, [sp, #12]
 800564c:	2230      	movs	r2, #48	; 0x30
 800564e:	9b03      	ldr	r3, [sp, #12]
 8005650:	454b      	cmp	r3, r9
 8005652:	d307      	bcc.n	8005664 <__cvt+0xbc>
 8005654:	9b03      	ldr	r3, [sp, #12]
 8005656:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005658:	1bdb      	subs	r3, r3, r7
 800565a:	4638      	mov	r0, r7
 800565c:	6013      	str	r3, [r2, #0]
 800565e:	b004      	add	sp, #16
 8005660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005664:	1c59      	adds	r1, r3, #1
 8005666:	9103      	str	r1, [sp, #12]
 8005668:	701a      	strb	r2, [r3, #0]
 800566a:	e7f0      	b.n	800564e <__cvt+0xa6>

0800566c <__exponent>:
 800566c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800566e:	4603      	mov	r3, r0
 8005670:	2900      	cmp	r1, #0
 8005672:	bfb8      	it	lt
 8005674:	4249      	neglt	r1, r1
 8005676:	f803 2b02 	strb.w	r2, [r3], #2
 800567a:	bfb4      	ite	lt
 800567c:	222d      	movlt	r2, #45	; 0x2d
 800567e:	222b      	movge	r2, #43	; 0x2b
 8005680:	2909      	cmp	r1, #9
 8005682:	7042      	strb	r2, [r0, #1]
 8005684:	dd2a      	ble.n	80056dc <__exponent+0x70>
 8005686:	f10d 0407 	add.w	r4, sp, #7
 800568a:	46a4      	mov	ip, r4
 800568c:	270a      	movs	r7, #10
 800568e:	46a6      	mov	lr, r4
 8005690:	460a      	mov	r2, r1
 8005692:	fb91 f6f7 	sdiv	r6, r1, r7
 8005696:	fb07 1516 	mls	r5, r7, r6, r1
 800569a:	3530      	adds	r5, #48	; 0x30
 800569c:	2a63      	cmp	r2, #99	; 0x63
 800569e:	f104 34ff 	add.w	r4, r4, #4294967295
 80056a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80056a6:	4631      	mov	r1, r6
 80056a8:	dcf1      	bgt.n	800568e <__exponent+0x22>
 80056aa:	3130      	adds	r1, #48	; 0x30
 80056ac:	f1ae 0502 	sub.w	r5, lr, #2
 80056b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80056b4:	1c44      	adds	r4, r0, #1
 80056b6:	4629      	mov	r1, r5
 80056b8:	4561      	cmp	r1, ip
 80056ba:	d30a      	bcc.n	80056d2 <__exponent+0x66>
 80056bc:	f10d 0209 	add.w	r2, sp, #9
 80056c0:	eba2 020e 	sub.w	r2, r2, lr
 80056c4:	4565      	cmp	r5, ip
 80056c6:	bf88      	it	hi
 80056c8:	2200      	movhi	r2, #0
 80056ca:	4413      	add	r3, r2
 80056cc:	1a18      	subs	r0, r3, r0
 80056ce:	b003      	add	sp, #12
 80056d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80056da:	e7ed      	b.n	80056b8 <__exponent+0x4c>
 80056dc:	2330      	movs	r3, #48	; 0x30
 80056de:	3130      	adds	r1, #48	; 0x30
 80056e0:	7083      	strb	r3, [r0, #2]
 80056e2:	70c1      	strb	r1, [r0, #3]
 80056e4:	1d03      	adds	r3, r0, #4
 80056e6:	e7f1      	b.n	80056cc <__exponent+0x60>

080056e8 <_printf_float>:
 80056e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056ec:	ed2d 8b02 	vpush	{d8}
 80056f0:	b08d      	sub	sp, #52	; 0x34
 80056f2:	460c      	mov	r4, r1
 80056f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80056f8:	4616      	mov	r6, r2
 80056fa:	461f      	mov	r7, r3
 80056fc:	4605      	mov	r5, r0
 80056fe:	f001 fa59 	bl	8006bb4 <_localeconv_r>
 8005702:	f8d0 a000 	ldr.w	sl, [r0]
 8005706:	4650      	mov	r0, sl
 8005708:	f7fa fd82 	bl	8000210 <strlen>
 800570c:	2300      	movs	r3, #0
 800570e:	930a      	str	r3, [sp, #40]	; 0x28
 8005710:	6823      	ldr	r3, [r4, #0]
 8005712:	9305      	str	r3, [sp, #20]
 8005714:	f8d8 3000 	ldr.w	r3, [r8]
 8005718:	f894 b018 	ldrb.w	fp, [r4, #24]
 800571c:	3307      	adds	r3, #7
 800571e:	f023 0307 	bic.w	r3, r3, #7
 8005722:	f103 0208 	add.w	r2, r3, #8
 8005726:	f8c8 2000 	str.w	r2, [r8]
 800572a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005732:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005736:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800573a:	9307      	str	r3, [sp, #28]
 800573c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005740:	ee08 0a10 	vmov	s16, r0
 8005744:	4b9f      	ldr	r3, [pc, #636]	; (80059c4 <_printf_float+0x2dc>)
 8005746:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800574a:	f04f 32ff 	mov.w	r2, #4294967295
 800574e:	f7fb fa0d 	bl	8000b6c <__aeabi_dcmpun>
 8005752:	bb88      	cbnz	r0, 80057b8 <_printf_float+0xd0>
 8005754:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005758:	4b9a      	ldr	r3, [pc, #616]	; (80059c4 <_printf_float+0x2dc>)
 800575a:	f04f 32ff 	mov.w	r2, #4294967295
 800575e:	f7fb f9e7 	bl	8000b30 <__aeabi_dcmple>
 8005762:	bb48      	cbnz	r0, 80057b8 <_printf_float+0xd0>
 8005764:	2200      	movs	r2, #0
 8005766:	2300      	movs	r3, #0
 8005768:	4640      	mov	r0, r8
 800576a:	4649      	mov	r1, r9
 800576c:	f7fb f9d6 	bl	8000b1c <__aeabi_dcmplt>
 8005770:	b110      	cbz	r0, 8005778 <_printf_float+0x90>
 8005772:	232d      	movs	r3, #45	; 0x2d
 8005774:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005778:	4b93      	ldr	r3, [pc, #588]	; (80059c8 <_printf_float+0x2e0>)
 800577a:	4894      	ldr	r0, [pc, #592]	; (80059cc <_printf_float+0x2e4>)
 800577c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005780:	bf94      	ite	ls
 8005782:	4698      	movls	r8, r3
 8005784:	4680      	movhi	r8, r0
 8005786:	2303      	movs	r3, #3
 8005788:	6123      	str	r3, [r4, #16]
 800578a:	9b05      	ldr	r3, [sp, #20]
 800578c:	f023 0204 	bic.w	r2, r3, #4
 8005790:	6022      	str	r2, [r4, #0]
 8005792:	f04f 0900 	mov.w	r9, #0
 8005796:	9700      	str	r7, [sp, #0]
 8005798:	4633      	mov	r3, r6
 800579a:	aa0b      	add	r2, sp, #44	; 0x2c
 800579c:	4621      	mov	r1, r4
 800579e:	4628      	mov	r0, r5
 80057a0:	f000 f9d8 	bl	8005b54 <_printf_common>
 80057a4:	3001      	adds	r0, #1
 80057a6:	f040 8090 	bne.w	80058ca <_printf_float+0x1e2>
 80057aa:	f04f 30ff 	mov.w	r0, #4294967295
 80057ae:	b00d      	add	sp, #52	; 0x34
 80057b0:	ecbd 8b02 	vpop	{d8}
 80057b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057b8:	4642      	mov	r2, r8
 80057ba:	464b      	mov	r3, r9
 80057bc:	4640      	mov	r0, r8
 80057be:	4649      	mov	r1, r9
 80057c0:	f7fb f9d4 	bl	8000b6c <__aeabi_dcmpun>
 80057c4:	b140      	cbz	r0, 80057d8 <_printf_float+0xf0>
 80057c6:	464b      	mov	r3, r9
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	bfbc      	itt	lt
 80057cc:	232d      	movlt	r3, #45	; 0x2d
 80057ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80057d2:	487f      	ldr	r0, [pc, #508]	; (80059d0 <_printf_float+0x2e8>)
 80057d4:	4b7f      	ldr	r3, [pc, #508]	; (80059d4 <_printf_float+0x2ec>)
 80057d6:	e7d1      	b.n	800577c <_printf_float+0x94>
 80057d8:	6863      	ldr	r3, [r4, #4]
 80057da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80057de:	9206      	str	r2, [sp, #24]
 80057e0:	1c5a      	adds	r2, r3, #1
 80057e2:	d13f      	bne.n	8005864 <_printf_float+0x17c>
 80057e4:	2306      	movs	r3, #6
 80057e6:	6063      	str	r3, [r4, #4]
 80057e8:	9b05      	ldr	r3, [sp, #20]
 80057ea:	6861      	ldr	r1, [r4, #4]
 80057ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80057f0:	2300      	movs	r3, #0
 80057f2:	9303      	str	r3, [sp, #12]
 80057f4:	ab0a      	add	r3, sp, #40	; 0x28
 80057f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80057fa:	ab09      	add	r3, sp, #36	; 0x24
 80057fc:	ec49 8b10 	vmov	d0, r8, r9
 8005800:	9300      	str	r3, [sp, #0]
 8005802:	6022      	str	r2, [r4, #0]
 8005804:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005808:	4628      	mov	r0, r5
 800580a:	f7ff fecd 	bl	80055a8 <__cvt>
 800580e:	9b06      	ldr	r3, [sp, #24]
 8005810:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005812:	2b47      	cmp	r3, #71	; 0x47
 8005814:	4680      	mov	r8, r0
 8005816:	d108      	bne.n	800582a <_printf_float+0x142>
 8005818:	1cc8      	adds	r0, r1, #3
 800581a:	db02      	blt.n	8005822 <_printf_float+0x13a>
 800581c:	6863      	ldr	r3, [r4, #4]
 800581e:	4299      	cmp	r1, r3
 8005820:	dd41      	ble.n	80058a6 <_printf_float+0x1be>
 8005822:	f1ab 0b02 	sub.w	fp, fp, #2
 8005826:	fa5f fb8b 	uxtb.w	fp, fp
 800582a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800582e:	d820      	bhi.n	8005872 <_printf_float+0x18a>
 8005830:	3901      	subs	r1, #1
 8005832:	465a      	mov	r2, fp
 8005834:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005838:	9109      	str	r1, [sp, #36]	; 0x24
 800583a:	f7ff ff17 	bl	800566c <__exponent>
 800583e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005840:	1813      	adds	r3, r2, r0
 8005842:	2a01      	cmp	r2, #1
 8005844:	4681      	mov	r9, r0
 8005846:	6123      	str	r3, [r4, #16]
 8005848:	dc02      	bgt.n	8005850 <_printf_float+0x168>
 800584a:	6822      	ldr	r2, [r4, #0]
 800584c:	07d2      	lsls	r2, r2, #31
 800584e:	d501      	bpl.n	8005854 <_printf_float+0x16c>
 8005850:	3301      	adds	r3, #1
 8005852:	6123      	str	r3, [r4, #16]
 8005854:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005858:	2b00      	cmp	r3, #0
 800585a:	d09c      	beq.n	8005796 <_printf_float+0xae>
 800585c:	232d      	movs	r3, #45	; 0x2d
 800585e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005862:	e798      	b.n	8005796 <_printf_float+0xae>
 8005864:	9a06      	ldr	r2, [sp, #24]
 8005866:	2a47      	cmp	r2, #71	; 0x47
 8005868:	d1be      	bne.n	80057e8 <_printf_float+0x100>
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1bc      	bne.n	80057e8 <_printf_float+0x100>
 800586e:	2301      	movs	r3, #1
 8005870:	e7b9      	b.n	80057e6 <_printf_float+0xfe>
 8005872:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005876:	d118      	bne.n	80058aa <_printf_float+0x1c2>
 8005878:	2900      	cmp	r1, #0
 800587a:	6863      	ldr	r3, [r4, #4]
 800587c:	dd0b      	ble.n	8005896 <_printf_float+0x1ae>
 800587e:	6121      	str	r1, [r4, #16]
 8005880:	b913      	cbnz	r3, 8005888 <_printf_float+0x1a0>
 8005882:	6822      	ldr	r2, [r4, #0]
 8005884:	07d0      	lsls	r0, r2, #31
 8005886:	d502      	bpl.n	800588e <_printf_float+0x1a6>
 8005888:	3301      	adds	r3, #1
 800588a:	440b      	add	r3, r1
 800588c:	6123      	str	r3, [r4, #16]
 800588e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005890:	f04f 0900 	mov.w	r9, #0
 8005894:	e7de      	b.n	8005854 <_printf_float+0x16c>
 8005896:	b913      	cbnz	r3, 800589e <_printf_float+0x1b6>
 8005898:	6822      	ldr	r2, [r4, #0]
 800589a:	07d2      	lsls	r2, r2, #31
 800589c:	d501      	bpl.n	80058a2 <_printf_float+0x1ba>
 800589e:	3302      	adds	r3, #2
 80058a0:	e7f4      	b.n	800588c <_printf_float+0x1a4>
 80058a2:	2301      	movs	r3, #1
 80058a4:	e7f2      	b.n	800588c <_printf_float+0x1a4>
 80058a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80058aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058ac:	4299      	cmp	r1, r3
 80058ae:	db05      	blt.n	80058bc <_printf_float+0x1d4>
 80058b0:	6823      	ldr	r3, [r4, #0]
 80058b2:	6121      	str	r1, [r4, #16]
 80058b4:	07d8      	lsls	r0, r3, #31
 80058b6:	d5ea      	bpl.n	800588e <_printf_float+0x1a6>
 80058b8:	1c4b      	adds	r3, r1, #1
 80058ba:	e7e7      	b.n	800588c <_printf_float+0x1a4>
 80058bc:	2900      	cmp	r1, #0
 80058be:	bfd4      	ite	le
 80058c0:	f1c1 0202 	rsble	r2, r1, #2
 80058c4:	2201      	movgt	r2, #1
 80058c6:	4413      	add	r3, r2
 80058c8:	e7e0      	b.n	800588c <_printf_float+0x1a4>
 80058ca:	6823      	ldr	r3, [r4, #0]
 80058cc:	055a      	lsls	r2, r3, #21
 80058ce:	d407      	bmi.n	80058e0 <_printf_float+0x1f8>
 80058d0:	6923      	ldr	r3, [r4, #16]
 80058d2:	4642      	mov	r2, r8
 80058d4:	4631      	mov	r1, r6
 80058d6:	4628      	mov	r0, r5
 80058d8:	47b8      	blx	r7
 80058da:	3001      	adds	r0, #1
 80058dc:	d12c      	bne.n	8005938 <_printf_float+0x250>
 80058de:	e764      	b.n	80057aa <_printf_float+0xc2>
 80058e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80058e4:	f240 80e0 	bls.w	8005aa8 <_printf_float+0x3c0>
 80058e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80058ec:	2200      	movs	r2, #0
 80058ee:	2300      	movs	r3, #0
 80058f0:	f7fb f90a 	bl	8000b08 <__aeabi_dcmpeq>
 80058f4:	2800      	cmp	r0, #0
 80058f6:	d034      	beq.n	8005962 <_printf_float+0x27a>
 80058f8:	4a37      	ldr	r2, [pc, #220]	; (80059d8 <_printf_float+0x2f0>)
 80058fa:	2301      	movs	r3, #1
 80058fc:	4631      	mov	r1, r6
 80058fe:	4628      	mov	r0, r5
 8005900:	47b8      	blx	r7
 8005902:	3001      	adds	r0, #1
 8005904:	f43f af51 	beq.w	80057aa <_printf_float+0xc2>
 8005908:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800590c:	429a      	cmp	r2, r3
 800590e:	db02      	blt.n	8005916 <_printf_float+0x22e>
 8005910:	6823      	ldr	r3, [r4, #0]
 8005912:	07d8      	lsls	r0, r3, #31
 8005914:	d510      	bpl.n	8005938 <_printf_float+0x250>
 8005916:	ee18 3a10 	vmov	r3, s16
 800591a:	4652      	mov	r2, sl
 800591c:	4631      	mov	r1, r6
 800591e:	4628      	mov	r0, r5
 8005920:	47b8      	blx	r7
 8005922:	3001      	adds	r0, #1
 8005924:	f43f af41 	beq.w	80057aa <_printf_float+0xc2>
 8005928:	f04f 0800 	mov.w	r8, #0
 800592c:	f104 091a 	add.w	r9, r4, #26
 8005930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005932:	3b01      	subs	r3, #1
 8005934:	4543      	cmp	r3, r8
 8005936:	dc09      	bgt.n	800594c <_printf_float+0x264>
 8005938:	6823      	ldr	r3, [r4, #0]
 800593a:	079b      	lsls	r3, r3, #30
 800593c:	f100 8105 	bmi.w	8005b4a <_printf_float+0x462>
 8005940:	68e0      	ldr	r0, [r4, #12]
 8005942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005944:	4298      	cmp	r0, r3
 8005946:	bfb8      	it	lt
 8005948:	4618      	movlt	r0, r3
 800594a:	e730      	b.n	80057ae <_printf_float+0xc6>
 800594c:	2301      	movs	r3, #1
 800594e:	464a      	mov	r2, r9
 8005950:	4631      	mov	r1, r6
 8005952:	4628      	mov	r0, r5
 8005954:	47b8      	blx	r7
 8005956:	3001      	adds	r0, #1
 8005958:	f43f af27 	beq.w	80057aa <_printf_float+0xc2>
 800595c:	f108 0801 	add.w	r8, r8, #1
 8005960:	e7e6      	b.n	8005930 <_printf_float+0x248>
 8005962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005964:	2b00      	cmp	r3, #0
 8005966:	dc39      	bgt.n	80059dc <_printf_float+0x2f4>
 8005968:	4a1b      	ldr	r2, [pc, #108]	; (80059d8 <_printf_float+0x2f0>)
 800596a:	2301      	movs	r3, #1
 800596c:	4631      	mov	r1, r6
 800596e:	4628      	mov	r0, r5
 8005970:	47b8      	blx	r7
 8005972:	3001      	adds	r0, #1
 8005974:	f43f af19 	beq.w	80057aa <_printf_float+0xc2>
 8005978:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800597c:	4313      	orrs	r3, r2
 800597e:	d102      	bne.n	8005986 <_printf_float+0x29e>
 8005980:	6823      	ldr	r3, [r4, #0]
 8005982:	07d9      	lsls	r1, r3, #31
 8005984:	d5d8      	bpl.n	8005938 <_printf_float+0x250>
 8005986:	ee18 3a10 	vmov	r3, s16
 800598a:	4652      	mov	r2, sl
 800598c:	4631      	mov	r1, r6
 800598e:	4628      	mov	r0, r5
 8005990:	47b8      	blx	r7
 8005992:	3001      	adds	r0, #1
 8005994:	f43f af09 	beq.w	80057aa <_printf_float+0xc2>
 8005998:	f04f 0900 	mov.w	r9, #0
 800599c:	f104 0a1a 	add.w	sl, r4, #26
 80059a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059a2:	425b      	negs	r3, r3
 80059a4:	454b      	cmp	r3, r9
 80059a6:	dc01      	bgt.n	80059ac <_printf_float+0x2c4>
 80059a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059aa:	e792      	b.n	80058d2 <_printf_float+0x1ea>
 80059ac:	2301      	movs	r3, #1
 80059ae:	4652      	mov	r2, sl
 80059b0:	4631      	mov	r1, r6
 80059b2:	4628      	mov	r0, r5
 80059b4:	47b8      	blx	r7
 80059b6:	3001      	adds	r0, #1
 80059b8:	f43f aef7 	beq.w	80057aa <_printf_float+0xc2>
 80059bc:	f109 0901 	add.w	r9, r9, #1
 80059c0:	e7ee      	b.n	80059a0 <_printf_float+0x2b8>
 80059c2:	bf00      	nop
 80059c4:	7fefffff 	.word	0x7fefffff
 80059c8:	0800a34c 	.word	0x0800a34c
 80059cc:	0800a350 	.word	0x0800a350
 80059d0:	0800a358 	.word	0x0800a358
 80059d4:	0800a354 	.word	0x0800a354
 80059d8:	0800a35c 	.word	0x0800a35c
 80059dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80059e0:	429a      	cmp	r2, r3
 80059e2:	bfa8      	it	ge
 80059e4:	461a      	movge	r2, r3
 80059e6:	2a00      	cmp	r2, #0
 80059e8:	4691      	mov	r9, r2
 80059ea:	dc37      	bgt.n	8005a5c <_printf_float+0x374>
 80059ec:	f04f 0b00 	mov.w	fp, #0
 80059f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80059f4:	f104 021a 	add.w	r2, r4, #26
 80059f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80059fa:	9305      	str	r3, [sp, #20]
 80059fc:	eba3 0309 	sub.w	r3, r3, r9
 8005a00:	455b      	cmp	r3, fp
 8005a02:	dc33      	bgt.n	8005a6c <_printf_float+0x384>
 8005a04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	db3b      	blt.n	8005a84 <_printf_float+0x39c>
 8005a0c:	6823      	ldr	r3, [r4, #0]
 8005a0e:	07da      	lsls	r2, r3, #31
 8005a10:	d438      	bmi.n	8005a84 <_printf_float+0x39c>
 8005a12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a14:	9a05      	ldr	r2, [sp, #20]
 8005a16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a18:	1a9a      	subs	r2, r3, r2
 8005a1a:	eba3 0901 	sub.w	r9, r3, r1
 8005a1e:	4591      	cmp	r9, r2
 8005a20:	bfa8      	it	ge
 8005a22:	4691      	movge	r9, r2
 8005a24:	f1b9 0f00 	cmp.w	r9, #0
 8005a28:	dc35      	bgt.n	8005a96 <_printf_float+0x3ae>
 8005a2a:	f04f 0800 	mov.w	r8, #0
 8005a2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a32:	f104 0a1a 	add.w	sl, r4, #26
 8005a36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a3a:	1a9b      	subs	r3, r3, r2
 8005a3c:	eba3 0309 	sub.w	r3, r3, r9
 8005a40:	4543      	cmp	r3, r8
 8005a42:	f77f af79 	ble.w	8005938 <_printf_float+0x250>
 8005a46:	2301      	movs	r3, #1
 8005a48:	4652      	mov	r2, sl
 8005a4a:	4631      	mov	r1, r6
 8005a4c:	4628      	mov	r0, r5
 8005a4e:	47b8      	blx	r7
 8005a50:	3001      	adds	r0, #1
 8005a52:	f43f aeaa 	beq.w	80057aa <_printf_float+0xc2>
 8005a56:	f108 0801 	add.w	r8, r8, #1
 8005a5a:	e7ec      	b.n	8005a36 <_printf_float+0x34e>
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	4631      	mov	r1, r6
 8005a60:	4642      	mov	r2, r8
 8005a62:	4628      	mov	r0, r5
 8005a64:	47b8      	blx	r7
 8005a66:	3001      	adds	r0, #1
 8005a68:	d1c0      	bne.n	80059ec <_printf_float+0x304>
 8005a6a:	e69e      	b.n	80057aa <_printf_float+0xc2>
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	4631      	mov	r1, r6
 8005a70:	4628      	mov	r0, r5
 8005a72:	9205      	str	r2, [sp, #20]
 8005a74:	47b8      	blx	r7
 8005a76:	3001      	adds	r0, #1
 8005a78:	f43f ae97 	beq.w	80057aa <_printf_float+0xc2>
 8005a7c:	9a05      	ldr	r2, [sp, #20]
 8005a7e:	f10b 0b01 	add.w	fp, fp, #1
 8005a82:	e7b9      	b.n	80059f8 <_printf_float+0x310>
 8005a84:	ee18 3a10 	vmov	r3, s16
 8005a88:	4652      	mov	r2, sl
 8005a8a:	4631      	mov	r1, r6
 8005a8c:	4628      	mov	r0, r5
 8005a8e:	47b8      	blx	r7
 8005a90:	3001      	adds	r0, #1
 8005a92:	d1be      	bne.n	8005a12 <_printf_float+0x32a>
 8005a94:	e689      	b.n	80057aa <_printf_float+0xc2>
 8005a96:	9a05      	ldr	r2, [sp, #20]
 8005a98:	464b      	mov	r3, r9
 8005a9a:	4442      	add	r2, r8
 8005a9c:	4631      	mov	r1, r6
 8005a9e:	4628      	mov	r0, r5
 8005aa0:	47b8      	blx	r7
 8005aa2:	3001      	adds	r0, #1
 8005aa4:	d1c1      	bne.n	8005a2a <_printf_float+0x342>
 8005aa6:	e680      	b.n	80057aa <_printf_float+0xc2>
 8005aa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005aaa:	2a01      	cmp	r2, #1
 8005aac:	dc01      	bgt.n	8005ab2 <_printf_float+0x3ca>
 8005aae:	07db      	lsls	r3, r3, #31
 8005ab0:	d538      	bpl.n	8005b24 <_printf_float+0x43c>
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	4642      	mov	r2, r8
 8005ab6:	4631      	mov	r1, r6
 8005ab8:	4628      	mov	r0, r5
 8005aba:	47b8      	blx	r7
 8005abc:	3001      	adds	r0, #1
 8005abe:	f43f ae74 	beq.w	80057aa <_printf_float+0xc2>
 8005ac2:	ee18 3a10 	vmov	r3, s16
 8005ac6:	4652      	mov	r2, sl
 8005ac8:	4631      	mov	r1, r6
 8005aca:	4628      	mov	r0, r5
 8005acc:	47b8      	blx	r7
 8005ace:	3001      	adds	r0, #1
 8005ad0:	f43f ae6b 	beq.w	80057aa <_printf_float+0xc2>
 8005ad4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ad8:	2200      	movs	r2, #0
 8005ada:	2300      	movs	r3, #0
 8005adc:	f7fb f814 	bl	8000b08 <__aeabi_dcmpeq>
 8005ae0:	b9d8      	cbnz	r0, 8005b1a <_printf_float+0x432>
 8005ae2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ae4:	f108 0201 	add.w	r2, r8, #1
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	4631      	mov	r1, r6
 8005aec:	4628      	mov	r0, r5
 8005aee:	47b8      	blx	r7
 8005af0:	3001      	adds	r0, #1
 8005af2:	d10e      	bne.n	8005b12 <_printf_float+0x42a>
 8005af4:	e659      	b.n	80057aa <_printf_float+0xc2>
 8005af6:	2301      	movs	r3, #1
 8005af8:	4652      	mov	r2, sl
 8005afa:	4631      	mov	r1, r6
 8005afc:	4628      	mov	r0, r5
 8005afe:	47b8      	blx	r7
 8005b00:	3001      	adds	r0, #1
 8005b02:	f43f ae52 	beq.w	80057aa <_printf_float+0xc2>
 8005b06:	f108 0801 	add.w	r8, r8, #1
 8005b0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b0c:	3b01      	subs	r3, #1
 8005b0e:	4543      	cmp	r3, r8
 8005b10:	dcf1      	bgt.n	8005af6 <_printf_float+0x40e>
 8005b12:	464b      	mov	r3, r9
 8005b14:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005b18:	e6dc      	b.n	80058d4 <_printf_float+0x1ec>
 8005b1a:	f04f 0800 	mov.w	r8, #0
 8005b1e:	f104 0a1a 	add.w	sl, r4, #26
 8005b22:	e7f2      	b.n	8005b0a <_printf_float+0x422>
 8005b24:	2301      	movs	r3, #1
 8005b26:	4642      	mov	r2, r8
 8005b28:	e7df      	b.n	8005aea <_printf_float+0x402>
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	464a      	mov	r2, r9
 8005b2e:	4631      	mov	r1, r6
 8005b30:	4628      	mov	r0, r5
 8005b32:	47b8      	blx	r7
 8005b34:	3001      	adds	r0, #1
 8005b36:	f43f ae38 	beq.w	80057aa <_printf_float+0xc2>
 8005b3a:	f108 0801 	add.w	r8, r8, #1
 8005b3e:	68e3      	ldr	r3, [r4, #12]
 8005b40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b42:	1a5b      	subs	r3, r3, r1
 8005b44:	4543      	cmp	r3, r8
 8005b46:	dcf0      	bgt.n	8005b2a <_printf_float+0x442>
 8005b48:	e6fa      	b.n	8005940 <_printf_float+0x258>
 8005b4a:	f04f 0800 	mov.w	r8, #0
 8005b4e:	f104 0919 	add.w	r9, r4, #25
 8005b52:	e7f4      	b.n	8005b3e <_printf_float+0x456>

08005b54 <_printf_common>:
 8005b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b58:	4616      	mov	r6, r2
 8005b5a:	4699      	mov	r9, r3
 8005b5c:	688a      	ldr	r2, [r1, #8]
 8005b5e:	690b      	ldr	r3, [r1, #16]
 8005b60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b64:	4293      	cmp	r3, r2
 8005b66:	bfb8      	it	lt
 8005b68:	4613      	movlt	r3, r2
 8005b6a:	6033      	str	r3, [r6, #0]
 8005b6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b70:	4607      	mov	r7, r0
 8005b72:	460c      	mov	r4, r1
 8005b74:	b10a      	cbz	r2, 8005b7a <_printf_common+0x26>
 8005b76:	3301      	adds	r3, #1
 8005b78:	6033      	str	r3, [r6, #0]
 8005b7a:	6823      	ldr	r3, [r4, #0]
 8005b7c:	0699      	lsls	r1, r3, #26
 8005b7e:	bf42      	ittt	mi
 8005b80:	6833      	ldrmi	r3, [r6, #0]
 8005b82:	3302      	addmi	r3, #2
 8005b84:	6033      	strmi	r3, [r6, #0]
 8005b86:	6825      	ldr	r5, [r4, #0]
 8005b88:	f015 0506 	ands.w	r5, r5, #6
 8005b8c:	d106      	bne.n	8005b9c <_printf_common+0x48>
 8005b8e:	f104 0a19 	add.w	sl, r4, #25
 8005b92:	68e3      	ldr	r3, [r4, #12]
 8005b94:	6832      	ldr	r2, [r6, #0]
 8005b96:	1a9b      	subs	r3, r3, r2
 8005b98:	42ab      	cmp	r3, r5
 8005b9a:	dc26      	bgt.n	8005bea <_printf_common+0x96>
 8005b9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ba0:	1e13      	subs	r3, r2, #0
 8005ba2:	6822      	ldr	r2, [r4, #0]
 8005ba4:	bf18      	it	ne
 8005ba6:	2301      	movne	r3, #1
 8005ba8:	0692      	lsls	r2, r2, #26
 8005baa:	d42b      	bmi.n	8005c04 <_printf_common+0xb0>
 8005bac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bb0:	4649      	mov	r1, r9
 8005bb2:	4638      	mov	r0, r7
 8005bb4:	47c0      	blx	r8
 8005bb6:	3001      	adds	r0, #1
 8005bb8:	d01e      	beq.n	8005bf8 <_printf_common+0xa4>
 8005bba:	6823      	ldr	r3, [r4, #0]
 8005bbc:	68e5      	ldr	r5, [r4, #12]
 8005bbe:	6832      	ldr	r2, [r6, #0]
 8005bc0:	f003 0306 	and.w	r3, r3, #6
 8005bc4:	2b04      	cmp	r3, #4
 8005bc6:	bf08      	it	eq
 8005bc8:	1aad      	subeq	r5, r5, r2
 8005bca:	68a3      	ldr	r3, [r4, #8]
 8005bcc:	6922      	ldr	r2, [r4, #16]
 8005bce:	bf0c      	ite	eq
 8005bd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bd4:	2500      	movne	r5, #0
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	bfc4      	itt	gt
 8005bda:	1a9b      	subgt	r3, r3, r2
 8005bdc:	18ed      	addgt	r5, r5, r3
 8005bde:	2600      	movs	r6, #0
 8005be0:	341a      	adds	r4, #26
 8005be2:	42b5      	cmp	r5, r6
 8005be4:	d11a      	bne.n	8005c1c <_printf_common+0xc8>
 8005be6:	2000      	movs	r0, #0
 8005be8:	e008      	b.n	8005bfc <_printf_common+0xa8>
 8005bea:	2301      	movs	r3, #1
 8005bec:	4652      	mov	r2, sl
 8005bee:	4649      	mov	r1, r9
 8005bf0:	4638      	mov	r0, r7
 8005bf2:	47c0      	blx	r8
 8005bf4:	3001      	adds	r0, #1
 8005bf6:	d103      	bne.n	8005c00 <_printf_common+0xac>
 8005bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c00:	3501      	adds	r5, #1
 8005c02:	e7c6      	b.n	8005b92 <_printf_common+0x3e>
 8005c04:	18e1      	adds	r1, r4, r3
 8005c06:	1c5a      	adds	r2, r3, #1
 8005c08:	2030      	movs	r0, #48	; 0x30
 8005c0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c0e:	4422      	add	r2, r4
 8005c10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c18:	3302      	adds	r3, #2
 8005c1a:	e7c7      	b.n	8005bac <_printf_common+0x58>
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	4622      	mov	r2, r4
 8005c20:	4649      	mov	r1, r9
 8005c22:	4638      	mov	r0, r7
 8005c24:	47c0      	blx	r8
 8005c26:	3001      	adds	r0, #1
 8005c28:	d0e6      	beq.n	8005bf8 <_printf_common+0xa4>
 8005c2a:	3601      	adds	r6, #1
 8005c2c:	e7d9      	b.n	8005be2 <_printf_common+0x8e>
	...

08005c30 <_printf_i>:
 8005c30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c34:	7e0f      	ldrb	r7, [r1, #24]
 8005c36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c38:	2f78      	cmp	r7, #120	; 0x78
 8005c3a:	4691      	mov	r9, r2
 8005c3c:	4680      	mov	r8, r0
 8005c3e:	460c      	mov	r4, r1
 8005c40:	469a      	mov	sl, r3
 8005c42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c46:	d807      	bhi.n	8005c58 <_printf_i+0x28>
 8005c48:	2f62      	cmp	r7, #98	; 0x62
 8005c4a:	d80a      	bhi.n	8005c62 <_printf_i+0x32>
 8005c4c:	2f00      	cmp	r7, #0
 8005c4e:	f000 80d8 	beq.w	8005e02 <_printf_i+0x1d2>
 8005c52:	2f58      	cmp	r7, #88	; 0x58
 8005c54:	f000 80a3 	beq.w	8005d9e <_printf_i+0x16e>
 8005c58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c60:	e03a      	b.n	8005cd8 <_printf_i+0xa8>
 8005c62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c66:	2b15      	cmp	r3, #21
 8005c68:	d8f6      	bhi.n	8005c58 <_printf_i+0x28>
 8005c6a:	a101      	add	r1, pc, #4	; (adr r1, 8005c70 <_printf_i+0x40>)
 8005c6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c70:	08005cc9 	.word	0x08005cc9
 8005c74:	08005cdd 	.word	0x08005cdd
 8005c78:	08005c59 	.word	0x08005c59
 8005c7c:	08005c59 	.word	0x08005c59
 8005c80:	08005c59 	.word	0x08005c59
 8005c84:	08005c59 	.word	0x08005c59
 8005c88:	08005cdd 	.word	0x08005cdd
 8005c8c:	08005c59 	.word	0x08005c59
 8005c90:	08005c59 	.word	0x08005c59
 8005c94:	08005c59 	.word	0x08005c59
 8005c98:	08005c59 	.word	0x08005c59
 8005c9c:	08005de9 	.word	0x08005de9
 8005ca0:	08005d0d 	.word	0x08005d0d
 8005ca4:	08005dcb 	.word	0x08005dcb
 8005ca8:	08005c59 	.word	0x08005c59
 8005cac:	08005c59 	.word	0x08005c59
 8005cb0:	08005e0b 	.word	0x08005e0b
 8005cb4:	08005c59 	.word	0x08005c59
 8005cb8:	08005d0d 	.word	0x08005d0d
 8005cbc:	08005c59 	.word	0x08005c59
 8005cc0:	08005c59 	.word	0x08005c59
 8005cc4:	08005dd3 	.word	0x08005dd3
 8005cc8:	682b      	ldr	r3, [r5, #0]
 8005cca:	1d1a      	adds	r2, r3, #4
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	602a      	str	r2, [r5, #0]
 8005cd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e0a3      	b.n	8005e24 <_printf_i+0x1f4>
 8005cdc:	6820      	ldr	r0, [r4, #0]
 8005cde:	6829      	ldr	r1, [r5, #0]
 8005ce0:	0606      	lsls	r6, r0, #24
 8005ce2:	f101 0304 	add.w	r3, r1, #4
 8005ce6:	d50a      	bpl.n	8005cfe <_printf_i+0xce>
 8005ce8:	680e      	ldr	r6, [r1, #0]
 8005cea:	602b      	str	r3, [r5, #0]
 8005cec:	2e00      	cmp	r6, #0
 8005cee:	da03      	bge.n	8005cf8 <_printf_i+0xc8>
 8005cf0:	232d      	movs	r3, #45	; 0x2d
 8005cf2:	4276      	negs	r6, r6
 8005cf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cf8:	485e      	ldr	r0, [pc, #376]	; (8005e74 <_printf_i+0x244>)
 8005cfa:	230a      	movs	r3, #10
 8005cfc:	e019      	b.n	8005d32 <_printf_i+0x102>
 8005cfe:	680e      	ldr	r6, [r1, #0]
 8005d00:	602b      	str	r3, [r5, #0]
 8005d02:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d06:	bf18      	it	ne
 8005d08:	b236      	sxthne	r6, r6
 8005d0a:	e7ef      	b.n	8005cec <_printf_i+0xbc>
 8005d0c:	682b      	ldr	r3, [r5, #0]
 8005d0e:	6820      	ldr	r0, [r4, #0]
 8005d10:	1d19      	adds	r1, r3, #4
 8005d12:	6029      	str	r1, [r5, #0]
 8005d14:	0601      	lsls	r1, r0, #24
 8005d16:	d501      	bpl.n	8005d1c <_printf_i+0xec>
 8005d18:	681e      	ldr	r6, [r3, #0]
 8005d1a:	e002      	b.n	8005d22 <_printf_i+0xf2>
 8005d1c:	0646      	lsls	r6, r0, #25
 8005d1e:	d5fb      	bpl.n	8005d18 <_printf_i+0xe8>
 8005d20:	881e      	ldrh	r6, [r3, #0]
 8005d22:	4854      	ldr	r0, [pc, #336]	; (8005e74 <_printf_i+0x244>)
 8005d24:	2f6f      	cmp	r7, #111	; 0x6f
 8005d26:	bf0c      	ite	eq
 8005d28:	2308      	moveq	r3, #8
 8005d2a:	230a      	movne	r3, #10
 8005d2c:	2100      	movs	r1, #0
 8005d2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d32:	6865      	ldr	r5, [r4, #4]
 8005d34:	60a5      	str	r5, [r4, #8]
 8005d36:	2d00      	cmp	r5, #0
 8005d38:	bfa2      	ittt	ge
 8005d3a:	6821      	ldrge	r1, [r4, #0]
 8005d3c:	f021 0104 	bicge.w	r1, r1, #4
 8005d40:	6021      	strge	r1, [r4, #0]
 8005d42:	b90e      	cbnz	r6, 8005d48 <_printf_i+0x118>
 8005d44:	2d00      	cmp	r5, #0
 8005d46:	d04d      	beq.n	8005de4 <_printf_i+0x1b4>
 8005d48:	4615      	mov	r5, r2
 8005d4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d4e:	fb03 6711 	mls	r7, r3, r1, r6
 8005d52:	5dc7      	ldrb	r7, [r0, r7]
 8005d54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d58:	4637      	mov	r7, r6
 8005d5a:	42bb      	cmp	r3, r7
 8005d5c:	460e      	mov	r6, r1
 8005d5e:	d9f4      	bls.n	8005d4a <_printf_i+0x11a>
 8005d60:	2b08      	cmp	r3, #8
 8005d62:	d10b      	bne.n	8005d7c <_printf_i+0x14c>
 8005d64:	6823      	ldr	r3, [r4, #0]
 8005d66:	07de      	lsls	r6, r3, #31
 8005d68:	d508      	bpl.n	8005d7c <_printf_i+0x14c>
 8005d6a:	6923      	ldr	r3, [r4, #16]
 8005d6c:	6861      	ldr	r1, [r4, #4]
 8005d6e:	4299      	cmp	r1, r3
 8005d70:	bfde      	ittt	le
 8005d72:	2330      	movle	r3, #48	; 0x30
 8005d74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d7c:	1b52      	subs	r2, r2, r5
 8005d7e:	6122      	str	r2, [r4, #16]
 8005d80:	f8cd a000 	str.w	sl, [sp]
 8005d84:	464b      	mov	r3, r9
 8005d86:	aa03      	add	r2, sp, #12
 8005d88:	4621      	mov	r1, r4
 8005d8a:	4640      	mov	r0, r8
 8005d8c:	f7ff fee2 	bl	8005b54 <_printf_common>
 8005d90:	3001      	adds	r0, #1
 8005d92:	d14c      	bne.n	8005e2e <_printf_i+0x1fe>
 8005d94:	f04f 30ff 	mov.w	r0, #4294967295
 8005d98:	b004      	add	sp, #16
 8005d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d9e:	4835      	ldr	r0, [pc, #212]	; (8005e74 <_printf_i+0x244>)
 8005da0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005da4:	6829      	ldr	r1, [r5, #0]
 8005da6:	6823      	ldr	r3, [r4, #0]
 8005da8:	f851 6b04 	ldr.w	r6, [r1], #4
 8005dac:	6029      	str	r1, [r5, #0]
 8005dae:	061d      	lsls	r5, r3, #24
 8005db0:	d514      	bpl.n	8005ddc <_printf_i+0x1ac>
 8005db2:	07df      	lsls	r7, r3, #31
 8005db4:	bf44      	itt	mi
 8005db6:	f043 0320 	orrmi.w	r3, r3, #32
 8005dba:	6023      	strmi	r3, [r4, #0]
 8005dbc:	b91e      	cbnz	r6, 8005dc6 <_printf_i+0x196>
 8005dbe:	6823      	ldr	r3, [r4, #0]
 8005dc0:	f023 0320 	bic.w	r3, r3, #32
 8005dc4:	6023      	str	r3, [r4, #0]
 8005dc6:	2310      	movs	r3, #16
 8005dc8:	e7b0      	b.n	8005d2c <_printf_i+0xfc>
 8005dca:	6823      	ldr	r3, [r4, #0]
 8005dcc:	f043 0320 	orr.w	r3, r3, #32
 8005dd0:	6023      	str	r3, [r4, #0]
 8005dd2:	2378      	movs	r3, #120	; 0x78
 8005dd4:	4828      	ldr	r0, [pc, #160]	; (8005e78 <_printf_i+0x248>)
 8005dd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005dda:	e7e3      	b.n	8005da4 <_printf_i+0x174>
 8005ddc:	0659      	lsls	r1, r3, #25
 8005dde:	bf48      	it	mi
 8005de0:	b2b6      	uxthmi	r6, r6
 8005de2:	e7e6      	b.n	8005db2 <_printf_i+0x182>
 8005de4:	4615      	mov	r5, r2
 8005de6:	e7bb      	b.n	8005d60 <_printf_i+0x130>
 8005de8:	682b      	ldr	r3, [r5, #0]
 8005dea:	6826      	ldr	r6, [r4, #0]
 8005dec:	6961      	ldr	r1, [r4, #20]
 8005dee:	1d18      	adds	r0, r3, #4
 8005df0:	6028      	str	r0, [r5, #0]
 8005df2:	0635      	lsls	r5, r6, #24
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	d501      	bpl.n	8005dfc <_printf_i+0x1cc>
 8005df8:	6019      	str	r1, [r3, #0]
 8005dfa:	e002      	b.n	8005e02 <_printf_i+0x1d2>
 8005dfc:	0670      	lsls	r0, r6, #25
 8005dfe:	d5fb      	bpl.n	8005df8 <_printf_i+0x1c8>
 8005e00:	8019      	strh	r1, [r3, #0]
 8005e02:	2300      	movs	r3, #0
 8005e04:	6123      	str	r3, [r4, #16]
 8005e06:	4615      	mov	r5, r2
 8005e08:	e7ba      	b.n	8005d80 <_printf_i+0x150>
 8005e0a:	682b      	ldr	r3, [r5, #0]
 8005e0c:	1d1a      	adds	r2, r3, #4
 8005e0e:	602a      	str	r2, [r5, #0]
 8005e10:	681d      	ldr	r5, [r3, #0]
 8005e12:	6862      	ldr	r2, [r4, #4]
 8005e14:	2100      	movs	r1, #0
 8005e16:	4628      	mov	r0, r5
 8005e18:	f7fa fa02 	bl	8000220 <memchr>
 8005e1c:	b108      	cbz	r0, 8005e22 <_printf_i+0x1f2>
 8005e1e:	1b40      	subs	r0, r0, r5
 8005e20:	6060      	str	r0, [r4, #4]
 8005e22:	6863      	ldr	r3, [r4, #4]
 8005e24:	6123      	str	r3, [r4, #16]
 8005e26:	2300      	movs	r3, #0
 8005e28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e2c:	e7a8      	b.n	8005d80 <_printf_i+0x150>
 8005e2e:	6923      	ldr	r3, [r4, #16]
 8005e30:	462a      	mov	r2, r5
 8005e32:	4649      	mov	r1, r9
 8005e34:	4640      	mov	r0, r8
 8005e36:	47d0      	blx	sl
 8005e38:	3001      	adds	r0, #1
 8005e3a:	d0ab      	beq.n	8005d94 <_printf_i+0x164>
 8005e3c:	6823      	ldr	r3, [r4, #0]
 8005e3e:	079b      	lsls	r3, r3, #30
 8005e40:	d413      	bmi.n	8005e6a <_printf_i+0x23a>
 8005e42:	68e0      	ldr	r0, [r4, #12]
 8005e44:	9b03      	ldr	r3, [sp, #12]
 8005e46:	4298      	cmp	r0, r3
 8005e48:	bfb8      	it	lt
 8005e4a:	4618      	movlt	r0, r3
 8005e4c:	e7a4      	b.n	8005d98 <_printf_i+0x168>
 8005e4e:	2301      	movs	r3, #1
 8005e50:	4632      	mov	r2, r6
 8005e52:	4649      	mov	r1, r9
 8005e54:	4640      	mov	r0, r8
 8005e56:	47d0      	blx	sl
 8005e58:	3001      	adds	r0, #1
 8005e5a:	d09b      	beq.n	8005d94 <_printf_i+0x164>
 8005e5c:	3501      	adds	r5, #1
 8005e5e:	68e3      	ldr	r3, [r4, #12]
 8005e60:	9903      	ldr	r1, [sp, #12]
 8005e62:	1a5b      	subs	r3, r3, r1
 8005e64:	42ab      	cmp	r3, r5
 8005e66:	dcf2      	bgt.n	8005e4e <_printf_i+0x21e>
 8005e68:	e7eb      	b.n	8005e42 <_printf_i+0x212>
 8005e6a:	2500      	movs	r5, #0
 8005e6c:	f104 0619 	add.w	r6, r4, #25
 8005e70:	e7f5      	b.n	8005e5e <_printf_i+0x22e>
 8005e72:	bf00      	nop
 8005e74:	0800a35e 	.word	0x0800a35e
 8005e78:	0800a36f 	.word	0x0800a36f

08005e7c <siprintf>:
 8005e7c:	b40e      	push	{r1, r2, r3}
 8005e7e:	b500      	push	{lr}
 8005e80:	b09c      	sub	sp, #112	; 0x70
 8005e82:	ab1d      	add	r3, sp, #116	; 0x74
 8005e84:	9002      	str	r0, [sp, #8]
 8005e86:	9006      	str	r0, [sp, #24]
 8005e88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005e8c:	4809      	ldr	r0, [pc, #36]	; (8005eb4 <siprintf+0x38>)
 8005e8e:	9107      	str	r1, [sp, #28]
 8005e90:	9104      	str	r1, [sp, #16]
 8005e92:	4909      	ldr	r1, [pc, #36]	; (8005eb8 <siprintf+0x3c>)
 8005e94:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e98:	9105      	str	r1, [sp, #20]
 8005e9a:	6800      	ldr	r0, [r0, #0]
 8005e9c:	9301      	str	r3, [sp, #4]
 8005e9e:	a902      	add	r1, sp, #8
 8005ea0:	f001 fb78 	bl	8007594 <_svfiprintf_r>
 8005ea4:	9b02      	ldr	r3, [sp, #8]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	701a      	strb	r2, [r3, #0]
 8005eaa:	b01c      	add	sp, #112	; 0x70
 8005eac:	f85d eb04 	ldr.w	lr, [sp], #4
 8005eb0:	b003      	add	sp, #12
 8005eb2:	4770      	bx	lr
 8005eb4:	20000014 	.word	0x20000014
 8005eb8:	ffff0208 	.word	0xffff0208

08005ebc <quorem>:
 8005ebc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ec0:	6903      	ldr	r3, [r0, #16]
 8005ec2:	690c      	ldr	r4, [r1, #16]
 8005ec4:	42a3      	cmp	r3, r4
 8005ec6:	4607      	mov	r7, r0
 8005ec8:	f2c0 8081 	blt.w	8005fce <quorem+0x112>
 8005ecc:	3c01      	subs	r4, #1
 8005ece:	f101 0814 	add.w	r8, r1, #20
 8005ed2:	f100 0514 	add.w	r5, r0, #20
 8005ed6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005eda:	9301      	str	r3, [sp, #4]
 8005edc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005ee0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005eec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005ef0:	fbb2 f6f3 	udiv	r6, r2, r3
 8005ef4:	d331      	bcc.n	8005f5a <quorem+0x9e>
 8005ef6:	f04f 0e00 	mov.w	lr, #0
 8005efa:	4640      	mov	r0, r8
 8005efc:	46ac      	mov	ip, r5
 8005efe:	46f2      	mov	sl, lr
 8005f00:	f850 2b04 	ldr.w	r2, [r0], #4
 8005f04:	b293      	uxth	r3, r2
 8005f06:	fb06 e303 	mla	r3, r6, r3, lr
 8005f0a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	ebaa 0303 	sub.w	r3, sl, r3
 8005f14:	f8dc a000 	ldr.w	sl, [ip]
 8005f18:	0c12      	lsrs	r2, r2, #16
 8005f1a:	fa13 f38a 	uxtah	r3, r3, sl
 8005f1e:	fb06 e202 	mla	r2, r6, r2, lr
 8005f22:	9300      	str	r3, [sp, #0]
 8005f24:	9b00      	ldr	r3, [sp, #0]
 8005f26:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005f2a:	b292      	uxth	r2, r2
 8005f2c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005f30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f34:	f8bd 3000 	ldrh.w	r3, [sp]
 8005f38:	4581      	cmp	r9, r0
 8005f3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f3e:	f84c 3b04 	str.w	r3, [ip], #4
 8005f42:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005f46:	d2db      	bcs.n	8005f00 <quorem+0x44>
 8005f48:	f855 300b 	ldr.w	r3, [r5, fp]
 8005f4c:	b92b      	cbnz	r3, 8005f5a <quorem+0x9e>
 8005f4e:	9b01      	ldr	r3, [sp, #4]
 8005f50:	3b04      	subs	r3, #4
 8005f52:	429d      	cmp	r5, r3
 8005f54:	461a      	mov	r2, r3
 8005f56:	d32e      	bcc.n	8005fb6 <quorem+0xfa>
 8005f58:	613c      	str	r4, [r7, #16]
 8005f5a:	4638      	mov	r0, r7
 8005f5c:	f001 f8c6 	bl	80070ec <__mcmp>
 8005f60:	2800      	cmp	r0, #0
 8005f62:	db24      	blt.n	8005fae <quorem+0xf2>
 8005f64:	3601      	adds	r6, #1
 8005f66:	4628      	mov	r0, r5
 8005f68:	f04f 0c00 	mov.w	ip, #0
 8005f6c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005f70:	f8d0 e000 	ldr.w	lr, [r0]
 8005f74:	b293      	uxth	r3, r2
 8005f76:	ebac 0303 	sub.w	r3, ip, r3
 8005f7a:	0c12      	lsrs	r2, r2, #16
 8005f7c:	fa13 f38e 	uxtah	r3, r3, lr
 8005f80:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005f84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f8e:	45c1      	cmp	r9, r8
 8005f90:	f840 3b04 	str.w	r3, [r0], #4
 8005f94:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005f98:	d2e8      	bcs.n	8005f6c <quorem+0xb0>
 8005f9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005fa2:	b922      	cbnz	r2, 8005fae <quorem+0xf2>
 8005fa4:	3b04      	subs	r3, #4
 8005fa6:	429d      	cmp	r5, r3
 8005fa8:	461a      	mov	r2, r3
 8005faa:	d30a      	bcc.n	8005fc2 <quorem+0x106>
 8005fac:	613c      	str	r4, [r7, #16]
 8005fae:	4630      	mov	r0, r6
 8005fb0:	b003      	add	sp, #12
 8005fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fb6:	6812      	ldr	r2, [r2, #0]
 8005fb8:	3b04      	subs	r3, #4
 8005fba:	2a00      	cmp	r2, #0
 8005fbc:	d1cc      	bne.n	8005f58 <quorem+0x9c>
 8005fbe:	3c01      	subs	r4, #1
 8005fc0:	e7c7      	b.n	8005f52 <quorem+0x96>
 8005fc2:	6812      	ldr	r2, [r2, #0]
 8005fc4:	3b04      	subs	r3, #4
 8005fc6:	2a00      	cmp	r2, #0
 8005fc8:	d1f0      	bne.n	8005fac <quorem+0xf0>
 8005fca:	3c01      	subs	r4, #1
 8005fcc:	e7eb      	b.n	8005fa6 <quorem+0xea>
 8005fce:	2000      	movs	r0, #0
 8005fd0:	e7ee      	b.n	8005fb0 <quorem+0xf4>
 8005fd2:	0000      	movs	r0, r0
 8005fd4:	0000      	movs	r0, r0
	...

08005fd8 <_dtoa_r>:
 8005fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fdc:	ed2d 8b04 	vpush	{d8-d9}
 8005fe0:	ec57 6b10 	vmov	r6, r7, d0
 8005fe4:	b093      	sub	sp, #76	; 0x4c
 8005fe6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005fe8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005fec:	9106      	str	r1, [sp, #24]
 8005fee:	ee10 aa10 	vmov	sl, s0
 8005ff2:	4604      	mov	r4, r0
 8005ff4:	9209      	str	r2, [sp, #36]	; 0x24
 8005ff6:	930c      	str	r3, [sp, #48]	; 0x30
 8005ff8:	46bb      	mov	fp, r7
 8005ffa:	b975      	cbnz	r5, 800601a <_dtoa_r+0x42>
 8005ffc:	2010      	movs	r0, #16
 8005ffe:	f000 fddd 	bl	8006bbc <malloc>
 8006002:	4602      	mov	r2, r0
 8006004:	6260      	str	r0, [r4, #36]	; 0x24
 8006006:	b920      	cbnz	r0, 8006012 <_dtoa_r+0x3a>
 8006008:	4ba7      	ldr	r3, [pc, #668]	; (80062a8 <_dtoa_r+0x2d0>)
 800600a:	21ea      	movs	r1, #234	; 0xea
 800600c:	48a7      	ldr	r0, [pc, #668]	; (80062ac <_dtoa_r+0x2d4>)
 800600e:	f001 fbd1 	bl	80077b4 <__assert_func>
 8006012:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006016:	6005      	str	r5, [r0, #0]
 8006018:	60c5      	str	r5, [r0, #12]
 800601a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800601c:	6819      	ldr	r1, [r3, #0]
 800601e:	b151      	cbz	r1, 8006036 <_dtoa_r+0x5e>
 8006020:	685a      	ldr	r2, [r3, #4]
 8006022:	604a      	str	r2, [r1, #4]
 8006024:	2301      	movs	r3, #1
 8006026:	4093      	lsls	r3, r2
 8006028:	608b      	str	r3, [r1, #8]
 800602a:	4620      	mov	r0, r4
 800602c:	f000 fe1c 	bl	8006c68 <_Bfree>
 8006030:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006032:	2200      	movs	r2, #0
 8006034:	601a      	str	r2, [r3, #0]
 8006036:	1e3b      	subs	r3, r7, #0
 8006038:	bfaa      	itet	ge
 800603a:	2300      	movge	r3, #0
 800603c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006040:	f8c8 3000 	strge.w	r3, [r8]
 8006044:	4b9a      	ldr	r3, [pc, #616]	; (80062b0 <_dtoa_r+0x2d8>)
 8006046:	bfbc      	itt	lt
 8006048:	2201      	movlt	r2, #1
 800604a:	f8c8 2000 	strlt.w	r2, [r8]
 800604e:	ea33 030b 	bics.w	r3, r3, fp
 8006052:	d11b      	bne.n	800608c <_dtoa_r+0xb4>
 8006054:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006056:	f242 730f 	movw	r3, #9999	; 0x270f
 800605a:	6013      	str	r3, [r2, #0]
 800605c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006060:	4333      	orrs	r3, r6
 8006062:	f000 8592 	beq.w	8006b8a <_dtoa_r+0xbb2>
 8006066:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006068:	b963      	cbnz	r3, 8006084 <_dtoa_r+0xac>
 800606a:	4b92      	ldr	r3, [pc, #584]	; (80062b4 <_dtoa_r+0x2dc>)
 800606c:	e022      	b.n	80060b4 <_dtoa_r+0xdc>
 800606e:	4b92      	ldr	r3, [pc, #584]	; (80062b8 <_dtoa_r+0x2e0>)
 8006070:	9301      	str	r3, [sp, #4]
 8006072:	3308      	adds	r3, #8
 8006074:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006076:	6013      	str	r3, [r2, #0]
 8006078:	9801      	ldr	r0, [sp, #4]
 800607a:	b013      	add	sp, #76	; 0x4c
 800607c:	ecbd 8b04 	vpop	{d8-d9}
 8006080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006084:	4b8b      	ldr	r3, [pc, #556]	; (80062b4 <_dtoa_r+0x2dc>)
 8006086:	9301      	str	r3, [sp, #4]
 8006088:	3303      	adds	r3, #3
 800608a:	e7f3      	b.n	8006074 <_dtoa_r+0x9c>
 800608c:	2200      	movs	r2, #0
 800608e:	2300      	movs	r3, #0
 8006090:	4650      	mov	r0, sl
 8006092:	4659      	mov	r1, fp
 8006094:	f7fa fd38 	bl	8000b08 <__aeabi_dcmpeq>
 8006098:	ec4b ab19 	vmov	d9, sl, fp
 800609c:	4680      	mov	r8, r0
 800609e:	b158      	cbz	r0, 80060b8 <_dtoa_r+0xe0>
 80060a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80060a2:	2301      	movs	r3, #1
 80060a4:	6013      	str	r3, [r2, #0]
 80060a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f000 856b 	beq.w	8006b84 <_dtoa_r+0xbac>
 80060ae:	4883      	ldr	r0, [pc, #524]	; (80062bc <_dtoa_r+0x2e4>)
 80060b0:	6018      	str	r0, [r3, #0]
 80060b2:	1e43      	subs	r3, r0, #1
 80060b4:	9301      	str	r3, [sp, #4]
 80060b6:	e7df      	b.n	8006078 <_dtoa_r+0xa0>
 80060b8:	ec4b ab10 	vmov	d0, sl, fp
 80060bc:	aa10      	add	r2, sp, #64	; 0x40
 80060be:	a911      	add	r1, sp, #68	; 0x44
 80060c0:	4620      	mov	r0, r4
 80060c2:	f001 f8b9 	bl	8007238 <__d2b>
 80060c6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80060ca:	ee08 0a10 	vmov	s16, r0
 80060ce:	2d00      	cmp	r5, #0
 80060d0:	f000 8084 	beq.w	80061dc <_dtoa_r+0x204>
 80060d4:	ee19 3a90 	vmov	r3, s19
 80060d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060dc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80060e0:	4656      	mov	r6, sl
 80060e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80060e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80060ea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80060ee:	4b74      	ldr	r3, [pc, #464]	; (80062c0 <_dtoa_r+0x2e8>)
 80060f0:	2200      	movs	r2, #0
 80060f2:	4630      	mov	r0, r6
 80060f4:	4639      	mov	r1, r7
 80060f6:	f7fa f8e7 	bl	80002c8 <__aeabi_dsub>
 80060fa:	a365      	add	r3, pc, #404	; (adr r3, 8006290 <_dtoa_r+0x2b8>)
 80060fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006100:	f7fa fa9a 	bl	8000638 <__aeabi_dmul>
 8006104:	a364      	add	r3, pc, #400	; (adr r3, 8006298 <_dtoa_r+0x2c0>)
 8006106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610a:	f7fa f8df 	bl	80002cc <__adddf3>
 800610e:	4606      	mov	r6, r0
 8006110:	4628      	mov	r0, r5
 8006112:	460f      	mov	r7, r1
 8006114:	f7fa fa26 	bl	8000564 <__aeabi_i2d>
 8006118:	a361      	add	r3, pc, #388	; (adr r3, 80062a0 <_dtoa_r+0x2c8>)
 800611a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800611e:	f7fa fa8b 	bl	8000638 <__aeabi_dmul>
 8006122:	4602      	mov	r2, r0
 8006124:	460b      	mov	r3, r1
 8006126:	4630      	mov	r0, r6
 8006128:	4639      	mov	r1, r7
 800612a:	f7fa f8cf 	bl	80002cc <__adddf3>
 800612e:	4606      	mov	r6, r0
 8006130:	460f      	mov	r7, r1
 8006132:	f7fa fd31 	bl	8000b98 <__aeabi_d2iz>
 8006136:	2200      	movs	r2, #0
 8006138:	9000      	str	r0, [sp, #0]
 800613a:	2300      	movs	r3, #0
 800613c:	4630      	mov	r0, r6
 800613e:	4639      	mov	r1, r7
 8006140:	f7fa fcec 	bl	8000b1c <__aeabi_dcmplt>
 8006144:	b150      	cbz	r0, 800615c <_dtoa_r+0x184>
 8006146:	9800      	ldr	r0, [sp, #0]
 8006148:	f7fa fa0c 	bl	8000564 <__aeabi_i2d>
 800614c:	4632      	mov	r2, r6
 800614e:	463b      	mov	r3, r7
 8006150:	f7fa fcda 	bl	8000b08 <__aeabi_dcmpeq>
 8006154:	b910      	cbnz	r0, 800615c <_dtoa_r+0x184>
 8006156:	9b00      	ldr	r3, [sp, #0]
 8006158:	3b01      	subs	r3, #1
 800615a:	9300      	str	r3, [sp, #0]
 800615c:	9b00      	ldr	r3, [sp, #0]
 800615e:	2b16      	cmp	r3, #22
 8006160:	d85a      	bhi.n	8006218 <_dtoa_r+0x240>
 8006162:	9a00      	ldr	r2, [sp, #0]
 8006164:	4b57      	ldr	r3, [pc, #348]	; (80062c4 <_dtoa_r+0x2ec>)
 8006166:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800616a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616e:	ec51 0b19 	vmov	r0, r1, d9
 8006172:	f7fa fcd3 	bl	8000b1c <__aeabi_dcmplt>
 8006176:	2800      	cmp	r0, #0
 8006178:	d050      	beq.n	800621c <_dtoa_r+0x244>
 800617a:	9b00      	ldr	r3, [sp, #0]
 800617c:	3b01      	subs	r3, #1
 800617e:	9300      	str	r3, [sp, #0]
 8006180:	2300      	movs	r3, #0
 8006182:	930b      	str	r3, [sp, #44]	; 0x2c
 8006184:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006186:	1b5d      	subs	r5, r3, r5
 8006188:	1e6b      	subs	r3, r5, #1
 800618a:	9305      	str	r3, [sp, #20]
 800618c:	bf45      	ittet	mi
 800618e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006192:	9304      	strmi	r3, [sp, #16]
 8006194:	2300      	movpl	r3, #0
 8006196:	2300      	movmi	r3, #0
 8006198:	bf4c      	ite	mi
 800619a:	9305      	strmi	r3, [sp, #20]
 800619c:	9304      	strpl	r3, [sp, #16]
 800619e:	9b00      	ldr	r3, [sp, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	db3d      	blt.n	8006220 <_dtoa_r+0x248>
 80061a4:	9b05      	ldr	r3, [sp, #20]
 80061a6:	9a00      	ldr	r2, [sp, #0]
 80061a8:	920a      	str	r2, [sp, #40]	; 0x28
 80061aa:	4413      	add	r3, r2
 80061ac:	9305      	str	r3, [sp, #20]
 80061ae:	2300      	movs	r3, #0
 80061b0:	9307      	str	r3, [sp, #28]
 80061b2:	9b06      	ldr	r3, [sp, #24]
 80061b4:	2b09      	cmp	r3, #9
 80061b6:	f200 8089 	bhi.w	80062cc <_dtoa_r+0x2f4>
 80061ba:	2b05      	cmp	r3, #5
 80061bc:	bfc4      	itt	gt
 80061be:	3b04      	subgt	r3, #4
 80061c0:	9306      	strgt	r3, [sp, #24]
 80061c2:	9b06      	ldr	r3, [sp, #24]
 80061c4:	f1a3 0302 	sub.w	r3, r3, #2
 80061c8:	bfcc      	ite	gt
 80061ca:	2500      	movgt	r5, #0
 80061cc:	2501      	movle	r5, #1
 80061ce:	2b03      	cmp	r3, #3
 80061d0:	f200 8087 	bhi.w	80062e2 <_dtoa_r+0x30a>
 80061d4:	e8df f003 	tbb	[pc, r3]
 80061d8:	59383a2d 	.word	0x59383a2d
 80061dc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80061e0:	441d      	add	r5, r3
 80061e2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80061e6:	2b20      	cmp	r3, #32
 80061e8:	bfc1      	itttt	gt
 80061ea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80061ee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80061f2:	fa0b f303 	lslgt.w	r3, fp, r3
 80061f6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80061fa:	bfda      	itte	le
 80061fc:	f1c3 0320 	rsble	r3, r3, #32
 8006200:	fa06 f003 	lslle.w	r0, r6, r3
 8006204:	4318      	orrgt	r0, r3
 8006206:	f7fa f99d 	bl	8000544 <__aeabi_ui2d>
 800620a:	2301      	movs	r3, #1
 800620c:	4606      	mov	r6, r0
 800620e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006212:	3d01      	subs	r5, #1
 8006214:	930e      	str	r3, [sp, #56]	; 0x38
 8006216:	e76a      	b.n	80060ee <_dtoa_r+0x116>
 8006218:	2301      	movs	r3, #1
 800621a:	e7b2      	b.n	8006182 <_dtoa_r+0x1aa>
 800621c:	900b      	str	r0, [sp, #44]	; 0x2c
 800621e:	e7b1      	b.n	8006184 <_dtoa_r+0x1ac>
 8006220:	9b04      	ldr	r3, [sp, #16]
 8006222:	9a00      	ldr	r2, [sp, #0]
 8006224:	1a9b      	subs	r3, r3, r2
 8006226:	9304      	str	r3, [sp, #16]
 8006228:	4253      	negs	r3, r2
 800622a:	9307      	str	r3, [sp, #28]
 800622c:	2300      	movs	r3, #0
 800622e:	930a      	str	r3, [sp, #40]	; 0x28
 8006230:	e7bf      	b.n	80061b2 <_dtoa_r+0x1da>
 8006232:	2300      	movs	r3, #0
 8006234:	9308      	str	r3, [sp, #32]
 8006236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006238:	2b00      	cmp	r3, #0
 800623a:	dc55      	bgt.n	80062e8 <_dtoa_r+0x310>
 800623c:	2301      	movs	r3, #1
 800623e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006242:	461a      	mov	r2, r3
 8006244:	9209      	str	r2, [sp, #36]	; 0x24
 8006246:	e00c      	b.n	8006262 <_dtoa_r+0x28a>
 8006248:	2301      	movs	r3, #1
 800624a:	e7f3      	b.n	8006234 <_dtoa_r+0x25c>
 800624c:	2300      	movs	r3, #0
 800624e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006250:	9308      	str	r3, [sp, #32]
 8006252:	9b00      	ldr	r3, [sp, #0]
 8006254:	4413      	add	r3, r2
 8006256:	9302      	str	r3, [sp, #8]
 8006258:	3301      	adds	r3, #1
 800625a:	2b01      	cmp	r3, #1
 800625c:	9303      	str	r3, [sp, #12]
 800625e:	bfb8      	it	lt
 8006260:	2301      	movlt	r3, #1
 8006262:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006264:	2200      	movs	r2, #0
 8006266:	6042      	str	r2, [r0, #4]
 8006268:	2204      	movs	r2, #4
 800626a:	f102 0614 	add.w	r6, r2, #20
 800626e:	429e      	cmp	r6, r3
 8006270:	6841      	ldr	r1, [r0, #4]
 8006272:	d93d      	bls.n	80062f0 <_dtoa_r+0x318>
 8006274:	4620      	mov	r0, r4
 8006276:	f000 fcb7 	bl	8006be8 <_Balloc>
 800627a:	9001      	str	r0, [sp, #4]
 800627c:	2800      	cmp	r0, #0
 800627e:	d13b      	bne.n	80062f8 <_dtoa_r+0x320>
 8006280:	4b11      	ldr	r3, [pc, #68]	; (80062c8 <_dtoa_r+0x2f0>)
 8006282:	4602      	mov	r2, r0
 8006284:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006288:	e6c0      	b.n	800600c <_dtoa_r+0x34>
 800628a:	2301      	movs	r3, #1
 800628c:	e7df      	b.n	800624e <_dtoa_r+0x276>
 800628e:	bf00      	nop
 8006290:	636f4361 	.word	0x636f4361
 8006294:	3fd287a7 	.word	0x3fd287a7
 8006298:	8b60c8b3 	.word	0x8b60c8b3
 800629c:	3fc68a28 	.word	0x3fc68a28
 80062a0:	509f79fb 	.word	0x509f79fb
 80062a4:	3fd34413 	.word	0x3fd34413
 80062a8:	0800a38d 	.word	0x0800a38d
 80062ac:	0800a3a4 	.word	0x0800a3a4
 80062b0:	7ff00000 	.word	0x7ff00000
 80062b4:	0800a389 	.word	0x0800a389
 80062b8:	0800a380 	.word	0x0800a380
 80062bc:	0800a35d 	.word	0x0800a35d
 80062c0:	3ff80000 	.word	0x3ff80000
 80062c4:	0800a498 	.word	0x0800a498
 80062c8:	0800a3ff 	.word	0x0800a3ff
 80062cc:	2501      	movs	r5, #1
 80062ce:	2300      	movs	r3, #0
 80062d0:	9306      	str	r3, [sp, #24]
 80062d2:	9508      	str	r5, [sp, #32]
 80062d4:	f04f 33ff 	mov.w	r3, #4294967295
 80062d8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80062dc:	2200      	movs	r2, #0
 80062de:	2312      	movs	r3, #18
 80062e0:	e7b0      	b.n	8006244 <_dtoa_r+0x26c>
 80062e2:	2301      	movs	r3, #1
 80062e4:	9308      	str	r3, [sp, #32]
 80062e6:	e7f5      	b.n	80062d4 <_dtoa_r+0x2fc>
 80062e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80062ee:	e7b8      	b.n	8006262 <_dtoa_r+0x28a>
 80062f0:	3101      	adds	r1, #1
 80062f2:	6041      	str	r1, [r0, #4]
 80062f4:	0052      	lsls	r2, r2, #1
 80062f6:	e7b8      	b.n	800626a <_dtoa_r+0x292>
 80062f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062fa:	9a01      	ldr	r2, [sp, #4]
 80062fc:	601a      	str	r2, [r3, #0]
 80062fe:	9b03      	ldr	r3, [sp, #12]
 8006300:	2b0e      	cmp	r3, #14
 8006302:	f200 809d 	bhi.w	8006440 <_dtoa_r+0x468>
 8006306:	2d00      	cmp	r5, #0
 8006308:	f000 809a 	beq.w	8006440 <_dtoa_r+0x468>
 800630c:	9b00      	ldr	r3, [sp, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	dd32      	ble.n	8006378 <_dtoa_r+0x3a0>
 8006312:	4ab7      	ldr	r2, [pc, #732]	; (80065f0 <_dtoa_r+0x618>)
 8006314:	f003 030f 	and.w	r3, r3, #15
 8006318:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800631c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006320:	9b00      	ldr	r3, [sp, #0]
 8006322:	05d8      	lsls	r0, r3, #23
 8006324:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006328:	d516      	bpl.n	8006358 <_dtoa_r+0x380>
 800632a:	4bb2      	ldr	r3, [pc, #712]	; (80065f4 <_dtoa_r+0x61c>)
 800632c:	ec51 0b19 	vmov	r0, r1, d9
 8006330:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006334:	f7fa faaa 	bl	800088c <__aeabi_ddiv>
 8006338:	f007 070f 	and.w	r7, r7, #15
 800633c:	4682      	mov	sl, r0
 800633e:	468b      	mov	fp, r1
 8006340:	2503      	movs	r5, #3
 8006342:	4eac      	ldr	r6, [pc, #688]	; (80065f4 <_dtoa_r+0x61c>)
 8006344:	b957      	cbnz	r7, 800635c <_dtoa_r+0x384>
 8006346:	4642      	mov	r2, r8
 8006348:	464b      	mov	r3, r9
 800634a:	4650      	mov	r0, sl
 800634c:	4659      	mov	r1, fp
 800634e:	f7fa fa9d 	bl	800088c <__aeabi_ddiv>
 8006352:	4682      	mov	sl, r0
 8006354:	468b      	mov	fp, r1
 8006356:	e028      	b.n	80063aa <_dtoa_r+0x3d2>
 8006358:	2502      	movs	r5, #2
 800635a:	e7f2      	b.n	8006342 <_dtoa_r+0x36a>
 800635c:	07f9      	lsls	r1, r7, #31
 800635e:	d508      	bpl.n	8006372 <_dtoa_r+0x39a>
 8006360:	4640      	mov	r0, r8
 8006362:	4649      	mov	r1, r9
 8006364:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006368:	f7fa f966 	bl	8000638 <__aeabi_dmul>
 800636c:	3501      	adds	r5, #1
 800636e:	4680      	mov	r8, r0
 8006370:	4689      	mov	r9, r1
 8006372:	107f      	asrs	r7, r7, #1
 8006374:	3608      	adds	r6, #8
 8006376:	e7e5      	b.n	8006344 <_dtoa_r+0x36c>
 8006378:	f000 809b 	beq.w	80064b2 <_dtoa_r+0x4da>
 800637c:	9b00      	ldr	r3, [sp, #0]
 800637e:	4f9d      	ldr	r7, [pc, #628]	; (80065f4 <_dtoa_r+0x61c>)
 8006380:	425e      	negs	r6, r3
 8006382:	4b9b      	ldr	r3, [pc, #620]	; (80065f0 <_dtoa_r+0x618>)
 8006384:	f006 020f 	and.w	r2, r6, #15
 8006388:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800638c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006390:	ec51 0b19 	vmov	r0, r1, d9
 8006394:	f7fa f950 	bl	8000638 <__aeabi_dmul>
 8006398:	1136      	asrs	r6, r6, #4
 800639a:	4682      	mov	sl, r0
 800639c:	468b      	mov	fp, r1
 800639e:	2300      	movs	r3, #0
 80063a0:	2502      	movs	r5, #2
 80063a2:	2e00      	cmp	r6, #0
 80063a4:	d17a      	bne.n	800649c <_dtoa_r+0x4c4>
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d1d3      	bne.n	8006352 <_dtoa_r+0x37a>
 80063aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f000 8082 	beq.w	80064b6 <_dtoa_r+0x4de>
 80063b2:	4b91      	ldr	r3, [pc, #580]	; (80065f8 <_dtoa_r+0x620>)
 80063b4:	2200      	movs	r2, #0
 80063b6:	4650      	mov	r0, sl
 80063b8:	4659      	mov	r1, fp
 80063ba:	f7fa fbaf 	bl	8000b1c <__aeabi_dcmplt>
 80063be:	2800      	cmp	r0, #0
 80063c0:	d079      	beq.n	80064b6 <_dtoa_r+0x4de>
 80063c2:	9b03      	ldr	r3, [sp, #12]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d076      	beq.n	80064b6 <_dtoa_r+0x4de>
 80063c8:	9b02      	ldr	r3, [sp, #8]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	dd36      	ble.n	800643c <_dtoa_r+0x464>
 80063ce:	9b00      	ldr	r3, [sp, #0]
 80063d0:	4650      	mov	r0, sl
 80063d2:	4659      	mov	r1, fp
 80063d4:	1e5f      	subs	r7, r3, #1
 80063d6:	2200      	movs	r2, #0
 80063d8:	4b88      	ldr	r3, [pc, #544]	; (80065fc <_dtoa_r+0x624>)
 80063da:	f7fa f92d 	bl	8000638 <__aeabi_dmul>
 80063de:	9e02      	ldr	r6, [sp, #8]
 80063e0:	4682      	mov	sl, r0
 80063e2:	468b      	mov	fp, r1
 80063e4:	3501      	adds	r5, #1
 80063e6:	4628      	mov	r0, r5
 80063e8:	f7fa f8bc 	bl	8000564 <__aeabi_i2d>
 80063ec:	4652      	mov	r2, sl
 80063ee:	465b      	mov	r3, fp
 80063f0:	f7fa f922 	bl	8000638 <__aeabi_dmul>
 80063f4:	4b82      	ldr	r3, [pc, #520]	; (8006600 <_dtoa_r+0x628>)
 80063f6:	2200      	movs	r2, #0
 80063f8:	f7f9 ff68 	bl	80002cc <__adddf3>
 80063fc:	46d0      	mov	r8, sl
 80063fe:	46d9      	mov	r9, fp
 8006400:	4682      	mov	sl, r0
 8006402:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006406:	2e00      	cmp	r6, #0
 8006408:	d158      	bne.n	80064bc <_dtoa_r+0x4e4>
 800640a:	4b7e      	ldr	r3, [pc, #504]	; (8006604 <_dtoa_r+0x62c>)
 800640c:	2200      	movs	r2, #0
 800640e:	4640      	mov	r0, r8
 8006410:	4649      	mov	r1, r9
 8006412:	f7f9 ff59 	bl	80002c8 <__aeabi_dsub>
 8006416:	4652      	mov	r2, sl
 8006418:	465b      	mov	r3, fp
 800641a:	4680      	mov	r8, r0
 800641c:	4689      	mov	r9, r1
 800641e:	f7fa fb9b 	bl	8000b58 <__aeabi_dcmpgt>
 8006422:	2800      	cmp	r0, #0
 8006424:	f040 8295 	bne.w	8006952 <_dtoa_r+0x97a>
 8006428:	4652      	mov	r2, sl
 800642a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800642e:	4640      	mov	r0, r8
 8006430:	4649      	mov	r1, r9
 8006432:	f7fa fb73 	bl	8000b1c <__aeabi_dcmplt>
 8006436:	2800      	cmp	r0, #0
 8006438:	f040 8289 	bne.w	800694e <_dtoa_r+0x976>
 800643c:	ec5b ab19 	vmov	sl, fp, d9
 8006440:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006442:	2b00      	cmp	r3, #0
 8006444:	f2c0 8148 	blt.w	80066d8 <_dtoa_r+0x700>
 8006448:	9a00      	ldr	r2, [sp, #0]
 800644a:	2a0e      	cmp	r2, #14
 800644c:	f300 8144 	bgt.w	80066d8 <_dtoa_r+0x700>
 8006450:	4b67      	ldr	r3, [pc, #412]	; (80065f0 <_dtoa_r+0x618>)
 8006452:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006456:	e9d3 8900 	ldrd	r8, r9, [r3]
 800645a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800645c:	2b00      	cmp	r3, #0
 800645e:	f280 80d5 	bge.w	800660c <_dtoa_r+0x634>
 8006462:	9b03      	ldr	r3, [sp, #12]
 8006464:	2b00      	cmp	r3, #0
 8006466:	f300 80d1 	bgt.w	800660c <_dtoa_r+0x634>
 800646a:	f040 826f 	bne.w	800694c <_dtoa_r+0x974>
 800646e:	4b65      	ldr	r3, [pc, #404]	; (8006604 <_dtoa_r+0x62c>)
 8006470:	2200      	movs	r2, #0
 8006472:	4640      	mov	r0, r8
 8006474:	4649      	mov	r1, r9
 8006476:	f7fa f8df 	bl	8000638 <__aeabi_dmul>
 800647a:	4652      	mov	r2, sl
 800647c:	465b      	mov	r3, fp
 800647e:	f7fa fb61 	bl	8000b44 <__aeabi_dcmpge>
 8006482:	9e03      	ldr	r6, [sp, #12]
 8006484:	4637      	mov	r7, r6
 8006486:	2800      	cmp	r0, #0
 8006488:	f040 8245 	bne.w	8006916 <_dtoa_r+0x93e>
 800648c:	9d01      	ldr	r5, [sp, #4]
 800648e:	2331      	movs	r3, #49	; 0x31
 8006490:	f805 3b01 	strb.w	r3, [r5], #1
 8006494:	9b00      	ldr	r3, [sp, #0]
 8006496:	3301      	adds	r3, #1
 8006498:	9300      	str	r3, [sp, #0]
 800649a:	e240      	b.n	800691e <_dtoa_r+0x946>
 800649c:	07f2      	lsls	r2, r6, #31
 800649e:	d505      	bpl.n	80064ac <_dtoa_r+0x4d4>
 80064a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064a4:	f7fa f8c8 	bl	8000638 <__aeabi_dmul>
 80064a8:	3501      	adds	r5, #1
 80064aa:	2301      	movs	r3, #1
 80064ac:	1076      	asrs	r6, r6, #1
 80064ae:	3708      	adds	r7, #8
 80064b0:	e777      	b.n	80063a2 <_dtoa_r+0x3ca>
 80064b2:	2502      	movs	r5, #2
 80064b4:	e779      	b.n	80063aa <_dtoa_r+0x3d2>
 80064b6:	9f00      	ldr	r7, [sp, #0]
 80064b8:	9e03      	ldr	r6, [sp, #12]
 80064ba:	e794      	b.n	80063e6 <_dtoa_r+0x40e>
 80064bc:	9901      	ldr	r1, [sp, #4]
 80064be:	4b4c      	ldr	r3, [pc, #304]	; (80065f0 <_dtoa_r+0x618>)
 80064c0:	4431      	add	r1, r6
 80064c2:	910d      	str	r1, [sp, #52]	; 0x34
 80064c4:	9908      	ldr	r1, [sp, #32]
 80064c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80064ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80064ce:	2900      	cmp	r1, #0
 80064d0:	d043      	beq.n	800655a <_dtoa_r+0x582>
 80064d2:	494d      	ldr	r1, [pc, #308]	; (8006608 <_dtoa_r+0x630>)
 80064d4:	2000      	movs	r0, #0
 80064d6:	f7fa f9d9 	bl	800088c <__aeabi_ddiv>
 80064da:	4652      	mov	r2, sl
 80064dc:	465b      	mov	r3, fp
 80064de:	f7f9 fef3 	bl	80002c8 <__aeabi_dsub>
 80064e2:	9d01      	ldr	r5, [sp, #4]
 80064e4:	4682      	mov	sl, r0
 80064e6:	468b      	mov	fp, r1
 80064e8:	4649      	mov	r1, r9
 80064ea:	4640      	mov	r0, r8
 80064ec:	f7fa fb54 	bl	8000b98 <__aeabi_d2iz>
 80064f0:	4606      	mov	r6, r0
 80064f2:	f7fa f837 	bl	8000564 <__aeabi_i2d>
 80064f6:	4602      	mov	r2, r0
 80064f8:	460b      	mov	r3, r1
 80064fa:	4640      	mov	r0, r8
 80064fc:	4649      	mov	r1, r9
 80064fe:	f7f9 fee3 	bl	80002c8 <__aeabi_dsub>
 8006502:	3630      	adds	r6, #48	; 0x30
 8006504:	f805 6b01 	strb.w	r6, [r5], #1
 8006508:	4652      	mov	r2, sl
 800650a:	465b      	mov	r3, fp
 800650c:	4680      	mov	r8, r0
 800650e:	4689      	mov	r9, r1
 8006510:	f7fa fb04 	bl	8000b1c <__aeabi_dcmplt>
 8006514:	2800      	cmp	r0, #0
 8006516:	d163      	bne.n	80065e0 <_dtoa_r+0x608>
 8006518:	4642      	mov	r2, r8
 800651a:	464b      	mov	r3, r9
 800651c:	4936      	ldr	r1, [pc, #216]	; (80065f8 <_dtoa_r+0x620>)
 800651e:	2000      	movs	r0, #0
 8006520:	f7f9 fed2 	bl	80002c8 <__aeabi_dsub>
 8006524:	4652      	mov	r2, sl
 8006526:	465b      	mov	r3, fp
 8006528:	f7fa faf8 	bl	8000b1c <__aeabi_dcmplt>
 800652c:	2800      	cmp	r0, #0
 800652e:	f040 80b5 	bne.w	800669c <_dtoa_r+0x6c4>
 8006532:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006534:	429d      	cmp	r5, r3
 8006536:	d081      	beq.n	800643c <_dtoa_r+0x464>
 8006538:	4b30      	ldr	r3, [pc, #192]	; (80065fc <_dtoa_r+0x624>)
 800653a:	2200      	movs	r2, #0
 800653c:	4650      	mov	r0, sl
 800653e:	4659      	mov	r1, fp
 8006540:	f7fa f87a 	bl	8000638 <__aeabi_dmul>
 8006544:	4b2d      	ldr	r3, [pc, #180]	; (80065fc <_dtoa_r+0x624>)
 8006546:	4682      	mov	sl, r0
 8006548:	468b      	mov	fp, r1
 800654a:	4640      	mov	r0, r8
 800654c:	4649      	mov	r1, r9
 800654e:	2200      	movs	r2, #0
 8006550:	f7fa f872 	bl	8000638 <__aeabi_dmul>
 8006554:	4680      	mov	r8, r0
 8006556:	4689      	mov	r9, r1
 8006558:	e7c6      	b.n	80064e8 <_dtoa_r+0x510>
 800655a:	4650      	mov	r0, sl
 800655c:	4659      	mov	r1, fp
 800655e:	f7fa f86b 	bl	8000638 <__aeabi_dmul>
 8006562:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006564:	9d01      	ldr	r5, [sp, #4]
 8006566:	930f      	str	r3, [sp, #60]	; 0x3c
 8006568:	4682      	mov	sl, r0
 800656a:	468b      	mov	fp, r1
 800656c:	4649      	mov	r1, r9
 800656e:	4640      	mov	r0, r8
 8006570:	f7fa fb12 	bl	8000b98 <__aeabi_d2iz>
 8006574:	4606      	mov	r6, r0
 8006576:	f7f9 fff5 	bl	8000564 <__aeabi_i2d>
 800657a:	3630      	adds	r6, #48	; 0x30
 800657c:	4602      	mov	r2, r0
 800657e:	460b      	mov	r3, r1
 8006580:	4640      	mov	r0, r8
 8006582:	4649      	mov	r1, r9
 8006584:	f7f9 fea0 	bl	80002c8 <__aeabi_dsub>
 8006588:	f805 6b01 	strb.w	r6, [r5], #1
 800658c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800658e:	429d      	cmp	r5, r3
 8006590:	4680      	mov	r8, r0
 8006592:	4689      	mov	r9, r1
 8006594:	f04f 0200 	mov.w	r2, #0
 8006598:	d124      	bne.n	80065e4 <_dtoa_r+0x60c>
 800659a:	4b1b      	ldr	r3, [pc, #108]	; (8006608 <_dtoa_r+0x630>)
 800659c:	4650      	mov	r0, sl
 800659e:	4659      	mov	r1, fp
 80065a0:	f7f9 fe94 	bl	80002cc <__adddf3>
 80065a4:	4602      	mov	r2, r0
 80065a6:	460b      	mov	r3, r1
 80065a8:	4640      	mov	r0, r8
 80065aa:	4649      	mov	r1, r9
 80065ac:	f7fa fad4 	bl	8000b58 <__aeabi_dcmpgt>
 80065b0:	2800      	cmp	r0, #0
 80065b2:	d173      	bne.n	800669c <_dtoa_r+0x6c4>
 80065b4:	4652      	mov	r2, sl
 80065b6:	465b      	mov	r3, fp
 80065b8:	4913      	ldr	r1, [pc, #76]	; (8006608 <_dtoa_r+0x630>)
 80065ba:	2000      	movs	r0, #0
 80065bc:	f7f9 fe84 	bl	80002c8 <__aeabi_dsub>
 80065c0:	4602      	mov	r2, r0
 80065c2:	460b      	mov	r3, r1
 80065c4:	4640      	mov	r0, r8
 80065c6:	4649      	mov	r1, r9
 80065c8:	f7fa faa8 	bl	8000b1c <__aeabi_dcmplt>
 80065cc:	2800      	cmp	r0, #0
 80065ce:	f43f af35 	beq.w	800643c <_dtoa_r+0x464>
 80065d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80065d4:	1e6b      	subs	r3, r5, #1
 80065d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80065d8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80065dc:	2b30      	cmp	r3, #48	; 0x30
 80065de:	d0f8      	beq.n	80065d2 <_dtoa_r+0x5fa>
 80065e0:	9700      	str	r7, [sp, #0]
 80065e2:	e049      	b.n	8006678 <_dtoa_r+0x6a0>
 80065e4:	4b05      	ldr	r3, [pc, #20]	; (80065fc <_dtoa_r+0x624>)
 80065e6:	f7fa f827 	bl	8000638 <__aeabi_dmul>
 80065ea:	4680      	mov	r8, r0
 80065ec:	4689      	mov	r9, r1
 80065ee:	e7bd      	b.n	800656c <_dtoa_r+0x594>
 80065f0:	0800a498 	.word	0x0800a498
 80065f4:	0800a470 	.word	0x0800a470
 80065f8:	3ff00000 	.word	0x3ff00000
 80065fc:	40240000 	.word	0x40240000
 8006600:	401c0000 	.word	0x401c0000
 8006604:	40140000 	.word	0x40140000
 8006608:	3fe00000 	.word	0x3fe00000
 800660c:	9d01      	ldr	r5, [sp, #4]
 800660e:	4656      	mov	r6, sl
 8006610:	465f      	mov	r7, fp
 8006612:	4642      	mov	r2, r8
 8006614:	464b      	mov	r3, r9
 8006616:	4630      	mov	r0, r6
 8006618:	4639      	mov	r1, r7
 800661a:	f7fa f937 	bl	800088c <__aeabi_ddiv>
 800661e:	f7fa fabb 	bl	8000b98 <__aeabi_d2iz>
 8006622:	4682      	mov	sl, r0
 8006624:	f7f9 ff9e 	bl	8000564 <__aeabi_i2d>
 8006628:	4642      	mov	r2, r8
 800662a:	464b      	mov	r3, r9
 800662c:	f7fa f804 	bl	8000638 <__aeabi_dmul>
 8006630:	4602      	mov	r2, r0
 8006632:	460b      	mov	r3, r1
 8006634:	4630      	mov	r0, r6
 8006636:	4639      	mov	r1, r7
 8006638:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800663c:	f7f9 fe44 	bl	80002c8 <__aeabi_dsub>
 8006640:	f805 6b01 	strb.w	r6, [r5], #1
 8006644:	9e01      	ldr	r6, [sp, #4]
 8006646:	9f03      	ldr	r7, [sp, #12]
 8006648:	1bae      	subs	r6, r5, r6
 800664a:	42b7      	cmp	r7, r6
 800664c:	4602      	mov	r2, r0
 800664e:	460b      	mov	r3, r1
 8006650:	d135      	bne.n	80066be <_dtoa_r+0x6e6>
 8006652:	f7f9 fe3b 	bl	80002cc <__adddf3>
 8006656:	4642      	mov	r2, r8
 8006658:	464b      	mov	r3, r9
 800665a:	4606      	mov	r6, r0
 800665c:	460f      	mov	r7, r1
 800665e:	f7fa fa7b 	bl	8000b58 <__aeabi_dcmpgt>
 8006662:	b9d0      	cbnz	r0, 800669a <_dtoa_r+0x6c2>
 8006664:	4642      	mov	r2, r8
 8006666:	464b      	mov	r3, r9
 8006668:	4630      	mov	r0, r6
 800666a:	4639      	mov	r1, r7
 800666c:	f7fa fa4c 	bl	8000b08 <__aeabi_dcmpeq>
 8006670:	b110      	cbz	r0, 8006678 <_dtoa_r+0x6a0>
 8006672:	f01a 0f01 	tst.w	sl, #1
 8006676:	d110      	bne.n	800669a <_dtoa_r+0x6c2>
 8006678:	4620      	mov	r0, r4
 800667a:	ee18 1a10 	vmov	r1, s16
 800667e:	f000 faf3 	bl	8006c68 <_Bfree>
 8006682:	2300      	movs	r3, #0
 8006684:	9800      	ldr	r0, [sp, #0]
 8006686:	702b      	strb	r3, [r5, #0]
 8006688:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800668a:	3001      	adds	r0, #1
 800668c:	6018      	str	r0, [r3, #0]
 800668e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006690:	2b00      	cmp	r3, #0
 8006692:	f43f acf1 	beq.w	8006078 <_dtoa_r+0xa0>
 8006696:	601d      	str	r5, [r3, #0]
 8006698:	e4ee      	b.n	8006078 <_dtoa_r+0xa0>
 800669a:	9f00      	ldr	r7, [sp, #0]
 800669c:	462b      	mov	r3, r5
 800669e:	461d      	mov	r5, r3
 80066a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80066a4:	2a39      	cmp	r2, #57	; 0x39
 80066a6:	d106      	bne.n	80066b6 <_dtoa_r+0x6de>
 80066a8:	9a01      	ldr	r2, [sp, #4]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d1f7      	bne.n	800669e <_dtoa_r+0x6c6>
 80066ae:	9901      	ldr	r1, [sp, #4]
 80066b0:	2230      	movs	r2, #48	; 0x30
 80066b2:	3701      	adds	r7, #1
 80066b4:	700a      	strb	r2, [r1, #0]
 80066b6:	781a      	ldrb	r2, [r3, #0]
 80066b8:	3201      	adds	r2, #1
 80066ba:	701a      	strb	r2, [r3, #0]
 80066bc:	e790      	b.n	80065e0 <_dtoa_r+0x608>
 80066be:	4ba6      	ldr	r3, [pc, #664]	; (8006958 <_dtoa_r+0x980>)
 80066c0:	2200      	movs	r2, #0
 80066c2:	f7f9 ffb9 	bl	8000638 <__aeabi_dmul>
 80066c6:	2200      	movs	r2, #0
 80066c8:	2300      	movs	r3, #0
 80066ca:	4606      	mov	r6, r0
 80066cc:	460f      	mov	r7, r1
 80066ce:	f7fa fa1b 	bl	8000b08 <__aeabi_dcmpeq>
 80066d2:	2800      	cmp	r0, #0
 80066d4:	d09d      	beq.n	8006612 <_dtoa_r+0x63a>
 80066d6:	e7cf      	b.n	8006678 <_dtoa_r+0x6a0>
 80066d8:	9a08      	ldr	r2, [sp, #32]
 80066da:	2a00      	cmp	r2, #0
 80066dc:	f000 80d7 	beq.w	800688e <_dtoa_r+0x8b6>
 80066e0:	9a06      	ldr	r2, [sp, #24]
 80066e2:	2a01      	cmp	r2, #1
 80066e4:	f300 80ba 	bgt.w	800685c <_dtoa_r+0x884>
 80066e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80066ea:	2a00      	cmp	r2, #0
 80066ec:	f000 80b2 	beq.w	8006854 <_dtoa_r+0x87c>
 80066f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80066f4:	9e07      	ldr	r6, [sp, #28]
 80066f6:	9d04      	ldr	r5, [sp, #16]
 80066f8:	9a04      	ldr	r2, [sp, #16]
 80066fa:	441a      	add	r2, r3
 80066fc:	9204      	str	r2, [sp, #16]
 80066fe:	9a05      	ldr	r2, [sp, #20]
 8006700:	2101      	movs	r1, #1
 8006702:	441a      	add	r2, r3
 8006704:	4620      	mov	r0, r4
 8006706:	9205      	str	r2, [sp, #20]
 8006708:	f000 fb66 	bl	8006dd8 <__i2b>
 800670c:	4607      	mov	r7, r0
 800670e:	2d00      	cmp	r5, #0
 8006710:	dd0c      	ble.n	800672c <_dtoa_r+0x754>
 8006712:	9b05      	ldr	r3, [sp, #20]
 8006714:	2b00      	cmp	r3, #0
 8006716:	dd09      	ble.n	800672c <_dtoa_r+0x754>
 8006718:	42ab      	cmp	r3, r5
 800671a:	9a04      	ldr	r2, [sp, #16]
 800671c:	bfa8      	it	ge
 800671e:	462b      	movge	r3, r5
 8006720:	1ad2      	subs	r2, r2, r3
 8006722:	9204      	str	r2, [sp, #16]
 8006724:	9a05      	ldr	r2, [sp, #20]
 8006726:	1aed      	subs	r5, r5, r3
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	9305      	str	r3, [sp, #20]
 800672c:	9b07      	ldr	r3, [sp, #28]
 800672e:	b31b      	cbz	r3, 8006778 <_dtoa_r+0x7a0>
 8006730:	9b08      	ldr	r3, [sp, #32]
 8006732:	2b00      	cmp	r3, #0
 8006734:	f000 80af 	beq.w	8006896 <_dtoa_r+0x8be>
 8006738:	2e00      	cmp	r6, #0
 800673a:	dd13      	ble.n	8006764 <_dtoa_r+0x78c>
 800673c:	4639      	mov	r1, r7
 800673e:	4632      	mov	r2, r6
 8006740:	4620      	mov	r0, r4
 8006742:	f000 fc09 	bl	8006f58 <__pow5mult>
 8006746:	ee18 2a10 	vmov	r2, s16
 800674a:	4601      	mov	r1, r0
 800674c:	4607      	mov	r7, r0
 800674e:	4620      	mov	r0, r4
 8006750:	f000 fb58 	bl	8006e04 <__multiply>
 8006754:	ee18 1a10 	vmov	r1, s16
 8006758:	4680      	mov	r8, r0
 800675a:	4620      	mov	r0, r4
 800675c:	f000 fa84 	bl	8006c68 <_Bfree>
 8006760:	ee08 8a10 	vmov	s16, r8
 8006764:	9b07      	ldr	r3, [sp, #28]
 8006766:	1b9a      	subs	r2, r3, r6
 8006768:	d006      	beq.n	8006778 <_dtoa_r+0x7a0>
 800676a:	ee18 1a10 	vmov	r1, s16
 800676e:	4620      	mov	r0, r4
 8006770:	f000 fbf2 	bl	8006f58 <__pow5mult>
 8006774:	ee08 0a10 	vmov	s16, r0
 8006778:	2101      	movs	r1, #1
 800677a:	4620      	mov	r0, r4
 800677c:	f000 fb2c 	bl	8006dd8 <__i2b>
 8006780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006782:	2b00      	cmp	r3, #0
 8006784:	4606      	mov	r6, r0
 8006786:	f340 8088 	ble.w	800689a <_dtoa_r+0x8c2>
 800678a:	461a      	mov	r2, r3
 800678c:	4601      	mov	r1, r0
 800678e:	4620      	mov	r0, r4
 8006790:	f000 fbe2 	bl	8006f58 <__pow5mult>
 8006794:	9b06      	ldr	r3, [sp, #24]
 8006796:	2b01      	cmp	r3, #1
 8006798:	4606      	mov	r6, r0
 800679a:	f340 8081 	ble.w	80068a0 <_dtoa_r+0x8c8>
 800679e:	f04f 0800 	mov.w	r8, #0
 80067a2:	6933      	ldr	r3, [r6, #16]
 80067a4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80067a8:	6918      	ldr	r0, [r3, #16]
 80067aa:	f000 fac5 	bl	8006d38 <__hi0bits>
 80067ae:	f1c0 0020 	rsb	r0, r0, #32
 80067b2:	9b05      	ldr	r3, [sp, #20]
 80067b4:	4418      	add	r0, r3
 80067b6:	f010 001f 	ands.w	r0, r0, #31
 80067ba:	f000 8092 	beq.w	80068e2 <_dtoa_r+0x90a>
 80067be:	f1c0 0320 	rsb	r3, r0, #32
 80067c2:	2b04      	cmp	r3, #4
 80067c4:	f340 808a 	ble.w	80068dc <_dtoa_r+0x904>
 80067c8:	f1c0 001c 	rsb	r0, r0, #28
 80067cc:	9b04      	ldr	r3, [sp, #16]
 80067ce:	4403      	add	r3, r0
 80067d0:	9304      	str	r3, [sp, #16]
 80067d2:	9b05      	ldr	r3, [sp, #20]
 80067d4:	4403      	add	r3, r0
 80067d6:	4405      	add	r5, r0
 80067d8:	9305      	str	r3, [sp, #20]
 80067da:	9b04      	ldr	r3, [sp, #16]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	dd07      	ble.n	80067f0 <_dtoa_r+0x818>
 80067e0:	ee18 1a10 	vmov	r1, s16
 80067e4:	461a      	mov	r2, r3
 80067e6:	4620      	mov	r0, r4
 80067e8:	f000 fc10 	bl	800700c <__lshift>
 80067ec:	ee08 0a10 	vmov	s16, r0
 80067f0:	9b05      	ldr	r3, [sp, #20]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	dd05      	ble.n	8006802 <_dtoa_r+0x82a>
 80067f6:	4631      	mov	r1, r6
 80067f8:	461a      	mov	r2, r3
 80067fa:	4620      	mov	r0, r4
 80067fc:	f000 fc06 	bl	800700c <__lshift>
 8006800:	4606      	mov	r6, r0
 8006802:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006804:	2b00      	cmp	r3, #0
 8006806:	d06e      	beq.n	80068e6 <_dtoa_r+0x90e>
 8006808:	ee18 0a10 	vmov	r0, s16
 800680c:	4631      	mov	r1, r6
 800680e:	f000 fc6d 	bl	80070ec <__mcmp>
 8006812:	2800      	cmp	r0, #0
 8006814:	da67      	bge.n	80068e6 <_dtoa_r+0x90e>
 8006816:	9b00      	ldr	r3, [sp, #0]
 8006818:	3b01      	subs	r3, #1
 800681a:	ee18 1a10 	vmov	r1, s16
 800681e:	9300      	str	r3, [sp, #0]
 8006820:	220a      	movs	r2, #10
 8006822:	2300      	movs	r3, #0
 8006824:	4620      	mov	r0, r4
 8006826:	f000 fa41 	bl	8006cac <__multadd>
 800682a:	9b08      	ldr	r3, [sp, #32]
 800682c:	ee08 0a10 	vmov	s16, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	f000 81b1 	beq.w	8006b98 <_dtoa_r+0xbc0>
 8006836:	2300      	movs	r3, #0
 8006838:	4639      	mov	r1, r7
 800683a:	220a      	movs	r2, #10
 800683c:	4620      	mov	r0, r4
 800683e:	f000 fa35 	bl	8006cac <__multadd>
 8006842:	9b02      	ldr	r3, [sp, #8]
 8006844:	2b00      	cmp	r3, #0
 8006846:	4607      	mov	r7, r0
 8006848:	f300 808e 	bgt.w	8006968 <_dtoa_r+0x990>
 800684c:	9b06      	ldr	r3, [sp, #24]
 800684e:	2b02      	cmp	r3, #2
 8006850:	dc51      	bgt.n	80068f6 <_dtoa_r+0x91e>
 8006852:	e089      	b.n	8006968 <_dtoa_r+0x990>
 8006854:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006856:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800685a:	e74b      	b.n	80066f4 <_dtoa_r+0x71c>
 800685c:	9b03      	ldr	r3, [sp, #12]
 800685e:	1e5e      	subs	r6, r3, #1
 8006860:	9b07      	ldr	r3, [sp, #28]
 8006862:	42b3      	cmp	r3, r6
 8006864:	bfbf      	itttt	lt
 8006866:	9b07      	ldrlt	r3, [sp, #28]
 8006868:	9607      	strlt	r6, [sp, #28]
 800686a:	1af2      	sublt	r2, r6, r3
 800686c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800686e:	bfb6      	itet	lt
 8006870:	189b      	addlt	r3, r3, r2
 8006872:	1b9e      	subge	r6, r3, r6
 8006874:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006876:	9b03      	ldr	r3, [sp, #12]
 8006878:	bfb8      	it	lt
 800687a:	2600      	movlt	r6, #0
 800687c:	2b00      	cmp	r3, #0
 800687e:	bfb7      	itett	lt
 8006880:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006884:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006888:	1a9d      	sublt	r5, r3, r2
 800688a:	2300      	movlt	r3, #0
 800688c:	e734      	b.n	80066f8 <_dtoa_r+0x720>
 800688e:	9e07      	ldr	r6, [sp, #28]
 8006890:	9d04      	ldr	r5, [sp, #16]
 8006892:	9f08      	ldr	r7, [sp, #32]
 8006894:	e73b      	b.n	800670e <_dtoa_r+0x736>
 8006896:	9a07      	ldr	r2, [sp, #28]
 8006898:	e767      	b.n	800676a <_dtoa_r+0x792>
 800689a:	9b06      	ldr	r3, [sp, #24]
 800689c:	2b01      	cmp	r3, #1
 800689e:	dc18      	bgt.n	80068d2 <_dtoa_r+0x8fa>
 80068a0:	f1ba 0f00 	cmp.w	sl, #0
 80068a4:	d115      	bne.n	80068d2 <_dtoa_r+0x8fa>
 80068a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80068aa:	b993      	cbnz	r3, 80068d2 <_dtoa_r+0x8fa>
 80068ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80068b0:	0d1b      	lsrs	r3, r3, #20
 80068b2:	051b      	lsls	r3, r3, #20
 80068b4:	b183      	cbz	r3, 80068d8 <_dtoa_r+0x900>
 80068b6:	9b04      	ldr	r3, [sp, #16]
 80068b8:	3301      	adds	r3, #1
 80068ba:	9304      	str	r3, [sp, #16]
 80068bc:	9b05      	ldr	r3, [sp, #20]
 80068be:	3301      	adds	r3, #1
 80068c0:	9305      	str	r3, [sp, #20]
 80068c2:	f04f 0801 	mov.w	r8, #1
 80068c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f47f af6a 	bne.w	80067a2 <_dtoa_r+0x7ca>
 80068ce:	2001      	movs	r0, #1
 80068d0:	e76f      	b.n	80067b2 <_dtoa_r+0x7da>
 80068d2:	f04f 0800 	mov.w	r8, #0
 80068d6:	e7f6      	b.n	80068c6 <_dtoa_r+0x8ee>
 80068d8:	4698      	mov	r8, r3
 80068da:	e7f4      	b.n	80068c6 <_dtoa_r+0x8ee>
 80068dc:	f43f af7d 	beq.w	80067da <_dtoa_r+0x802>
 80068e0:	4618      	mov	r0, r3
 80068e2:	301c      	adds	r0, #28
 80068e4:	e772      	b.n	80067cc <_dtoa_r+0x7f4>
 80068e6:	9b03      	ldr	r3, [sp, #12]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	dc37      	bgt.n	800695c <_dtoa_r+0x984>
 80068ec:	9b06      	ldr	r3, [sp, #24]
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	dd34      	ble.n	800695c <_dtoa_r+0x984>
 80068f2:	9b03      	ldr	r3, [sp, #12]
 80068f4:	9302      	str	r3, [sp, #8]
 80068f6:	9b02      	ldr	r3, [sp, #8]
 80068f8:	b96b      	cbnz	r3, 8006916 <_dtoa_r+0x93e>
 80068fa:	4631      	mov	r1, r6
 80068fc:	2205      	movs	r2, #5
 80068fe:	4620      	mov	r0, r4
 8006900:	f000 f9d4 	bl	8006cac <__multadd>
 8006904:	4601      	mov	r1, r0
 8006906:	4606      	mov	r6, r0
 8006908:	ee18 0a10 	vmov	r0, s16
 800690c:	f000 fbee 	bl	80070ec <__mcmp>
 8006910:	2800      	cmp	r0, #0
 8006912:	f73f adbb 	bgt.w	800648c <_dtoa_r+0x4b4>
 8006916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006918:	9d01      	ldr	r5, [sp, #4]
 800691a:	43db      	mvns	r3, r3
 800691c:	9300      	str	r3, [sp, #0]
 800691e:	f04f 0800 	mov.w	r8, #0
 8006922:	4631      	mov	r1, r6
 8006924:	4620      	mov	r0, r4
 8006926:	f000 f99f 	bl	8006c68 <_Bfree>
 800692a:	2f00      	cmp	r7, #0
 800692c:	f43f aea4 	beq.w	8006678 <_dtoa_r+0x6a0>
 8006930:	f1b8 0f00 	cmp.w	r8, #0
 8006934:	d005      	beq.n	8006942 <_dtoa_r+0x96a>
 8006936:	45b8      	cmp	r8, r7
 8006938:	d003      	beq.n	8006942 <_dtoa_r+0x96a>
 800693a:	4641      	mov	r1, r8
 800693c:	4620      	mov	r0, r4
 800693e:	f000 f993 	bl	8006c68 <_Bfree>
 8006942:	4639      	mov	r1, r7
 8006944:	4620      	mov	r0, r4
 8006946:	f000 f98f 	bl	8006c68 <_Bfree>
 800694a:	e695      	b.n	8006678 <_dtoa_r+0x6a0>
 800694c:	2600      	movs	r6, #0
 800694e:	4637      	mov	r7, r6
 8006950:	e7e1      	b.n	8006916 <_dtoa_r+0x93e>
 8006952:	9700      	str	r7, [sp, #0]
 8006954:	4637      	mov	r7, r6
 8006956:	e599      	b.n	800648c <_dtoa_r+0x4b4>
 8006958:	40240000 	.word	0x40240000
 800695c:	9b08      	ldr	r3, [sp, #32]
 800695e:	2b00      	cmp	r3, #0
 8006960:	f000 80ca 	beq.w	8006af8 <_dtoa_r+0xb20>
 8006964:	9b03      	ldr	r3, [sp, #12]
 8006966:	9302      	str	r3, [sp, #8]
 8006968:	2d00      	cmp	r5, #0
 800696a:	dd05      	ble.n	8006978 <_dtoa_r+0x9a0>
 800696c:	4639      	mov	r1, r7
 800696e:	462a      	mov	r2, r5
 8006970:	4620      	mov	r0, r4
 8006972:	f000 fb4b 	bl	800700c <__lshift>
 8006976:	4607      	mov	r7, r0
 8006978:	f1b8 0f00 	cmp.w	r8, #0
 800697c:	d05b      	beq.n	8006a36 <_dtoa_r+0xa5e>
 800697e:	6879      	ldr	r1, [r7, #4]
 8006980:	4620      	mov	r0, r4
 8006982:	f000 f931 	bl	8006be8 <_Balloc>
 8006986:	4605      	mov	r5, r0
 8006988:	b928      	cbnz	r0, 8006996 <_dtoa_r+0x9be>
 800698a:	4b87      	ldr	r3, [pc, #540]	; (8006ba8 <_dtoa_r+0xbd0>)
 800698c:	4602      	mov	r2, r0
 800698e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006992:	f7ff bb3b 	b.w	800600c <_dtoa_r+0x34>
 8006996:	693a      	ldr	r2, [r7, #16]
 8006998:	3202      	adds	r2, #2
 800699a:	0092      	lsls	r2, r2, #2
 800699c:	f107 010c 	add.w	r1, r7, #12
 80069a0:	300c      	adds	r0, #12
 80069a2:	f000 f913 	bl	8006bcc <memcpy>
 80069a6:	2201      	movs	r2, #1
 80069a8:	4629      	mov	r1, r5
 80069aa:	4620      	mov	r0, r4
 80069ac:	f000 fb2e 	bl	800700c <__lshift>
 80069b0:	9b01      	ldr	r3, [sp, #4]
 80069b2:	f103 0901 	add.w	r9, r3, #1
 80069b6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80069ba:	4413      	add	r3, r2
 80069bc:	9305      	str	r3, [sp, #20]
 80069be:	f00a 0301 	and.w	r3, sl, #1
 80069c2:	46b8      	mov	r8, r7
 80069c4:	9304      	str	r3, [sp, #16]
 80069c6:	4607      	mov	r7, r0
 80069c8:	4631      	mov	r1, r6
 80069ca:	ee18 0a10 	vmov	r0, s16
 80069ce:	f7ff fa75 	bl	8005ebc <quorem>
 80069d2:	4641      	mov	r1, r8
 80069d4:	9002      	str	r0, [sp, #8]
 80069d6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80069da:	ee18 0a10 	vmov	r0, s16
 80069de:	f000 fb85 	bl	80070ec <__mcmp>
 80069e2:	463a      	mov	r2, r7
 80069e4:	9003      	str	r0, [sp, #12]
 80069e6:	4631      	mov	r1, r6
 80069e8:	4620      	mov	r0, r4
 80069ea:	f000 fb9b 	bl	8007124 <__mdiff>
 80069ee:	68c2      	ldr	r2, [r0, #12]
 80069f0:	f109 3bff 	add.w	fp, r9, #4294967295
 80069f4:	4605      	mov	r5, r0
 80069f6:	bb02      	cbnz	r2, 8006a3a <_dtoa_r+0xa62>
 80069f8:	4601      	mov	r1, r0
 80069fa:	ee18 0a10 	vmov	r0, s16
 80069fe:	f000 fb75 	bl	80070ec <__mcmp>
 8006a02:	4602      	mov	r2, r0
 8006a04:	4629      	mov	r1, r5
 8006a06:	4620      	mov	r0, r4
 8006a08:	9207      	str	r2, [sp, #28]
 8006a0a:	f000 f92d 	bl	8006c68 <_Bfree>
 8006a0e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006a12:	ea43 0102 	orr.w	r1, r3, r2
 8006a16:	9b04      	ldr	r3, [sp, #16]
 8006a18:	430b      	orrs	r3, r1
 8006a1a:	464d      	mov	r5, r9
 8006a1c:	d10f      	bne.n	8006a3e <_dtoa_r+0xa66>
 8006a1e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006a22:	d02a      	beq.n	8006a7a <_dtoa_r+0xaa2>
 8006a24:	9b03      	ldr	r3, [sp, #12]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	dd02      	ble.n	8006a30 <_dtoa_r+0xa58>
 8006a2a:	9b02      	ldr	r3, [sp, #8]
 8006a2c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006a30:	f88b a000 	strb.w	sl, [fp]
 8006a34:	e775      	b.n	8006922 <_dtoa_r+0x94a>
 8006a36:	4638      	mov	r0, r7
 8006a38:	e7ba      	b.n	80069b0 <_dtoa_r+0x9d8>
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	e7e2      	b.n	8006a04 <_dtoa_r+0xa2c>
 8006a3e:	9b03      	ldr	r3, [sp, #12]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	db04      	blt.n	8006a4e <_dtoa_r+0xa76>
 8006a44:	9906      	ldr	r1, [sp, #24]
 8006a46:	430b      	orrs	r3, r1
 8006a48:	9904      	ldr	r1, [sp, #16]
 8006a4a:	430b      	orrs	r3, r1
 8006a4c:	d122      	bne.n	8006a94 <_dtoa_r+0xabc>
 8006a4e:	2a00      	cmp	r2, #0
 8006a50:	ddee      	ble.n	8006a30 <_dtoa_r+0xa58>
 8006a52:	ee18 1a10 	vmov	r1, s16
 8006a56:	2201      	movs	r2, #1
 8006a58:	4620      	mov	r0, r4
 8006a5a:	f000 fad7 	bl	800700c <__lshift>
 8006a5e:	4631      	mov	r1, r6
 8006a60:	ee08 0a10 	vmov	s16, r0
 8006a64:	f000 fb42 	bl	80070ec <__mcmp>
 8006a68:	2800      	cmp	r0, #0
 8006a6a:	dc03      	bgt.n	8006a74 <_dtoa_r+0xa9c>
 8006a6c:	d1e0      	bne.n	8006a30 <_dtoa_r+0xa58>
 8006a6e:	f01a 0f01 	tst.w	sl, #1
 8006a72:	d0dd      	beq.n	8006a30 <_dtoa_r+0xa58>
 8006a74:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006a78:	d1d7      	bne.n	8006a2a <_dtoa_r+0xa52>
 8006a7a:	2339      	movs	r3, #57	; 0x39
 8006a7c:	f88b 3000 	strb.w	r3, [fp]
 8006a80:	462b      	mov	r3, r5
 8006a82:	461d      	mov	r5, r3
 8006a84:	3b01      	subs	r3, #1
 8006a86:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006a8a:	2a39      	cmp	r2, #57	; 0x39
 8006a8c:	d071      	beq.n	8006b72 <_dtoa_r+0xb9a>
 8006a8e:	3201      	adds	r2, #1
 8006a90:	701a      	strb	r2, [r3, #0]
 8006a92:	e746      	b.n	8006922 <_dtoa_r+0x94a>
 8006a94:	2a00      	cmp	r2, #0
 8006a96:	dd07      	ble.n	8006aa8 <_dtoa_r+0xad0>
 8006a98:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006a9c:	d0ed      	beq.n	8006a7a <_dtoa_r+0xaa2>
 8006a9e:	f10a 0301 	add.w	r3, sl, #1
 8006aa2:	f88b 3000 	strb.w	r3, [fp]
 8006aa6:	e73c      	b.n	8006922 <_dtoa_r+0x94a>
 8006aa8:	9b05      	ldr	r3, [sp, #20]
 8006aaa:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006aae:	4599      	cmp	r9, r3
 8006ab0:	d047      	beq.n	8006b42 <_dtoa_r+0xb6a>
 8006ab2:	ee18 1a10 	vmov	r1, s16
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	220a      	movs	r2, #10
 8006aba:	4620      	mov	r0, r4
 8006abc:	f000 f8f6 	bl	8006cac <__multadd>
 8006ac0:	45b8      	cmp	r8, r7
 8006ac2:	ee08 0a10 	vmov	s16, r0
 8006ac6:	f04f 0300 	mov.w	r3, #0
 8006aca:	f04f 020a 	mov.w	r2, #10
 8006ace:	4641      	mov	r1, r8
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	d106      	bne.n	8006ae2 <_dtoa_r+0xb0a>
 8006ad4:	f000 f8ea 	bl	8006cac <__multadd>
 8006ad8:	4680      	mov	r8, r0
 8006ada:	4607      	mov	r7, r0
 8006adc:	f109 0901 	add.w	r9, r9, #1
 8006ae0:	e772      	b.n	80069c8 <_dtoa_r+0x9f0>
 8006ae2:	f000 f8e3 	bl	8006cac <__multadd>
 8006ae6:	4639      	mov	r1, r7
 8006ae8:	4680      	mov	r8, r0
 8006aea:	2300      	movs	r3, #0
 8006aec:	220a      	movs	r2, #10
 8006aee:	4620      	mov	r0, r4
 8006af0:	f000 f8dc 	bl	8006cac <__multadd>
 8006af4:	4607      	mov	r7, r0
 8006af6:	e7f1      	b.n	8006adc <_dtoa_r+0xb04>
 8006af8:	9b03      	ldr	r3, [sp, #12]
 8006afa:	9302      	str	r3, [sp, #8]
 8006afc:	9d01      	ldr	r5, [sp, #4]
 8006afe:	ee18 0a10 	vmov	r0, s16
 8006b02:	4631      	mov	r1, r6
 8006b04:	f7ff f9da 	bl	8005ebc <quorem>
 8006b08:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006b0c:	9b01      	ldr	r3, [sp, #4]
 8006b0e:	f805 ab01 	strb.w	sl, [r5], #1
 8006b12:	1aea      	subs	r2, r5, r3
 8006b14:	9b02      	ldr	r3, [sp, #8]
 8006b16:	4293      	cmp	r3, r2
 8006b18:	dd09      	ble.n	8006b2e <_dtoa_r+0xb56>
 8006b1a:	ee18 1a10 	vmov	r1, s16
 8006b1e:	2300      	movs	r3, #0
 8006b20:	220a      	movs	r2, #10
 8006b22:	4620      	mov	r0, r4
 8006b24:	f000 f8c2 	bl	8006cac <__multadd>
 8006b28:	ee08 0a10 	vmov	s16, r0
 8006b2c:	e7e7      	b.n	8006afe <_dtoa_r+0xb26>
 8006b2e:	9b02      	ldr	r3, [sp, #8]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	bfc8      	it	gt
 8006b34:	461d      	movgt	r5, r3
 8006b36:	9b01      	ldr	r3, [sp, #4]
 8006b38:	bfd8      	it	le
 8006b3a:	2501      	movle	r5, #1
 8006b3c:	441d      	add	r5, r3
 8006b3e:	f04f 0800 	mov.w	r8, #0
 8006b42:	ee18 1a10 	vmov	r1, s16
 8006b46:	2201      	movs	r2, #1
 8006b48:	4620      	mov	r0, r4
 8006b4a:	f000 fa5f 	bl	800700c <__lshift>
 8006b4e:	4631      	mov	r1, r6
 8006b50:	ee08 0a10 	vmov	s16, r0
 8006b54:	f000 faca 	bl	80070ec <__mcmp>
 8006b58:	2800      	cmp	r0, #0
 8006b5a:	dc91      	bgt.n	8006a80 <_dtoa_r+0xaa8>
 8006b5c:	d102      	bne.n	8006b64 <_dtoa_r+0xb8c>
 8006b5e:	f01a 0f01 	tst.w	sl, #1
 8006b62:	d18d      	bne.n	8006a80 <_dtoa_r+0xaa8>
 8006b64:	462b      	mov	r3, r5
 8006b66:	461d      	mov	r5, r3
 8006b68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b6c:	2a30      	cmp	r2, #48	; 0x30
 8006b6e:	d0fa      	beq.n	8006b66 <_dtoa_r+0xb8e>
 8006b70:	e6d7      	b.n	8006922 <_dtoa_r+0x94a>
 8006b72:	9a01      	ldr	r2, [sp, #4]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d184      	bne.n	8006a82 <_dtoa_r+0xaaa>
 8006b78:	9b00      	ldr	r3, [sp, #0]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	9300      	str	r3, [sp, #0]
 8006b7e:	2331      	movs	r3, #49	; 0x31
 8006b80:	7013      	strb	r3, [r2, #0]
 8006b82:	e6ce      	b.n	8006922 <_dtoa_r+0x94a>
 8006b84:	4b09      	ldr	r3, [pc, #36]	; (8006bac <_dtoa_r+0xbd4>)
 8006b86:	f7ff ba95 	b.w	80060b4 <_dtoa_r+0xdc>
 8006b8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	f47f aa6e 	bne.w	800606e <_dtoa_r+0x96>
 8006b92:	4b07      	ldr	r3, [pc, #28]	; (8006bb0 <_dtoa_r+0xbd8>)
 8006b94:	f7ff ba8e 	b.w	80060b4 <_dtoa_r+0xdc>
 8006b98:	9b02      	ldr	r3, [sp, #8]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	dcae      	bgt.n	8006afc <_dtoa_r+0xb24>
 8006b9e:	9b06      	ldr	r3, [sp, #24]
 8006ba0:	2b02      	cmp	r3, #2
 8006ba2:	f73f aea8 	bgt.w	80068f6 <_dtoa_r+0x91e>
 8006ba6:	e7a9      	b.n	8006afc <_dtoa_r+0xb24>
 8006ba8:	0800a3ff 	.word	0x0800a3ff
 8006bac:	0800a35c 	.word	0x0800a35c
 8006bb0:	0800a380 	.word	0x0800a380

08006bb4 <_localeconv_r>:
 8006bb4:	4800      	ldr	r0, [pc, #0]	; (8006bb8 <_localeconv_r+0x4>)
 8006bb6:	4770      	bx	lr
 8006bb8:	20000168 	.word	0x20000168

08006bbc <malloc>:
 8006bbc:	4b02      	ldr	r3, [pc, #8]	; (8006bc8 <malloc+0xc>)
 8006bbe:	4601      	mov	r1, r0
 8006bc0:	6818      	ldr	r0, [r3, #0]
 8006bc2:	f000 bc17 	b.w	80073f4 <_malloc_r>
 8006bc6:	bf00      	nop
 8006bc8:	20000014 	.word	0x20000014

08006bcc <memcpy>:
 8006bcc:	440a      	add	r2, r1
 8006bce:	4291      	cmp	r1, r2
 8006bd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006bd4:	d100      	bne.n	8006bd8 <memcpy+0xc>
 8006bd6:	4770      	bx	lr
 8006bd8:	b510      	push	{r4, lr}
 8006bda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006be2:	4291      	cmp	r1, r2
 8006be4:	d1f9      	bne.n	8006bda <memcpy+0xe>
 8006be6:	bd10      	pop	{r4, pc}

08006be8 <_Balloc>:
 8006be8:	b570      	push	{r4, r5, r6, lr}
 8006bea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006bec:	4604      	mov	r4, r0
 8006bee:	460d      	mov	r5, r1
 8006bf0:	b976      	cbnz	r6, 8006c10 <_Balloc+0x28>
 8006bf2:	2010      	movs	r0, #16
 8006bf4:	f7ff ffe2 	bl	8006bbc <malloc>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	6260      	str	r0, [r4, #36]	; 0x24
 8006bfc:	b920      	cbnz	r0, 8006c08 <_Balloc+0x20>
 8006bfe:	4b18      	ldr	r3, [pc, #96]	; (8006c60 <_Balloc+0x78>)
 8006c00:	4818      	ldr	r0, [pc, #96]	; (8006c64 <_Balloc+0x7c>)
 8006c02:	2166      	movs	r1, #102	; 0x66
 8006c04:	f000 fdd6 	bl	80077b4 <__assert_func>
 8006c08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c0c:	6006      	str	r6, [r0, #0]
 8006c0e:	60c6      	str	r6, [r0, #12]
 8006c10:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006c12:	68f3      	ldr	r3, [r6, #12]
 8006c14:	b183      	cbz	r3, 8006c38 <_Balloc+0x50>
 8006c16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006c1e:	b9b8      	cbnz	r0, 8006c50 <_Balloc+0x68>
 8006c20:	2101      	movs	r1, #1
 8006c22:	fa01 f605 	lsl.w	r6, r1, r5
 8006c26:	1d72      	adds	r2, r6, #5
 8006c28:	0092      	lsls	r2, r2, #2
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	f000 fb60 	bl	80072f0 <_calloc_r>
 8006c30:	b160      	cbz	r0, 8006c4c <_Balloc+0x64>
 8006c32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006c36:	e00e      	b.n	8006c56 <_Balloc+0x6e>
 8006c38:	2221      	movs	r2, #33	; 0x21
 8006c3a:	2104      	movs	r1, #4
 8006c3c:	4620      	mov	r0, r4
 8006c3e:	f000 fb57 	bl	80072f0 <_calloc_r>
 8006c42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c44:	60f0      	str	r0, [r6, #12]
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1e4      	bne.n	8006c16 <_Balloc+0x2e>
 8006c4c:	2000      	movs	r0, #0
 8006c4e:	bd70      	pop	{r4, r5, r6, pc}
 8006c50:	6802      	ldr	r2, [r0, #0]
 8006c52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006c56:	2300      	movs	r3, #0
 8006c58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006c5c:	e7f7      	b.n	8006c4e <_Balloc+0x66>
 8006c5e:	bf00      	nop
 8006c60:	0800a38d 	.word	0x0800a38d
 8006c64:	0800a410 	.word	0x0800a410

08006c68 <_Bfree>:
 8006c68:	b570      	push	{r4, r5, r6, lr}
 8006c6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006c6c:	4605      	mov	r5, r0
 8006c6e:	460c      	mov	r4, r1
 8006c70:	b976      	cbnz	r6, 8006c90 <_Bfree+0x28>
 8006c72:	2010      	movs	r0, #16
 8006c74:	f7ff ffa2 	bl	8006bbc <malloc>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	6268      	str	r0, [r5, #36]	; 0x24
 8006c7c:	b920      	cbnz	r0, 8006c88 <_Bfree+0x20>
 8006c7e:	4b09      	ldr	r3, [pc, #36]	; (8006ca4 <_Bfree+0x3c>)
 8006c80:	4809      	ldr	r0, [pc, #36]	; (8006ca8 <_Bfree+0x40>)
 8006c82:	218a      	movs	r1, #138	; 0x8a
 8006c84:	f000 fd96 	bl	80077b4 <__assert_func>
 8006c88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c8c:	6006      	str	r6, [r0, #0]
 8006c8e:	60c6      	str	r6, [r0, #12]
 8006c90:	b13c      	cbz	r4, 8006ca2 <_Bfree+0x3a>
 8006c92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006c94:	6862      	ldr	r2, [r4, #4]
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c9c:	6021      	str	r1, [r4, #0]
 8006c9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006ca2:	bd70      	pop	{r4, r5, r6, pc}
 8006ca4:	0800a38d 	.word	0x0800a38d
 8006ca8:	0800a410 	.word	0x0800a410

08006cac <__multadd>:
 8006cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cb0:	690d      	ldr	r5, [r1, #16]
 8006cb2:	4607      	mov	r7, r0
 8006cb4:	460c      	mov	r4, r1
 8006cb6:	461e      	mov	r6, r3
 8006cb8:	f101 0c14 	add.w	ip, r1, #20
 8006cbc:	2000      	movs	r0, #0
 8006cbe:	f8dc 3000 	ldr.w	r3, [ip]
 8006cc2:	b299      	uxth	r1, r3
 8006cc4:	fb02 6101 	mla	r1, r2, r1, r6
 8006cc8:	0c1e      	lsrs	r6, r3, #16
 8006cca:	0c0b      	lsrs	r3, r1, #16
 8006ccc:	fb02 3306 	mla	r3, r2, r6, r3
 8006cd0:	b289      	uxth	r1, r1
 8006cd2:	3001      	adds	r0, #1
 8006cd4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006cd8:	4285      	cmp	r5, r0
 8006cda:	f84c 1b04 	str.w	r1, [ip], #4
 8006cde:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006ce2:	dcec      	bgt.n	8006cbe <__multadd+0x12>
 8006ce4:	b30e      	cbz	r6, 8006d2a <__multadd+0x7e>
 8006ce6:	68a3      	ldr	r3, [r4, #8]
 8006ce8:	42ab      	cmp	r3, r5
 8006cea:	dc19      	bgt.n	8006d20 <__multadd+0x74>
 8006cec:	6861      	ldr	r1, [r4, #4]
 8006cee:	4638      	mov	r0, r7
 8006cf0:	3101      	adds	r1, #1
 8006cf2:	f7ff ff79 	bl	8006be8 <_Balloc>
 8006cf6:	4680      	mov	r8, r0
 8006cf8:	b928      	cbnz	r0, 8006d06 <__multadd+0x5a>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	4b0c      	ldr	r3, [pc, #48]	; (8006d30 <__multadd+0x84>)
 8006cfe:	480d      	ldr	r0, [pc, #52]	; (8006d34 <__multadd+0x88>)
 8006d00:	21b5      	movs	r1, #181	; 0xb5
 8006d02:	f000 fd57 	bl	80077b4 <__assert_func>
 8006d06:	6922      	ldr	r2, [r4, #16]
 8006d08:	3202      	adds	r2, #2
 8006d0a:	f104 010c 	add.w	r1, r4, #12
 8006d0e:	0092      	lsls	r2, r2, #2
 8006d10:	300c      	adds	r0, #12
 8006d12:	f7ff ff5b 	bl	8006bcc <memcpy>
 8006d16:	4621      	mov	r1, r4
 8006d18:	4638      	mov	r0, r7
 8006d1a:	f7ff ffa5 	bl	8006c68 <_Bfree>
 8006d1e:	4644      	mov	r4, r8
 8006d20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006d24:	3501      	adds	r5, #1
 8006d26:	615e      	str	r6, [r3, #20]
 8006d28:	6125      	str	r5, [r4, #16]
 8006d2a:	4620      	mov	r0, r4
 8006d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d30:	0800a3ff 	.word	0x0800a3ff
 8006d34:	0800a410 	.word	0x0800a410

08006d38 <__hi0bits>:
 8006d38:	0c03      	lsrs	r3, r0, #16
 8006d3a:	041b      	lsls	r3, r3, #16
 8006d3c:	b9d3      	cbnz	r3, 8006d74 <__hi0bits+0x3c>
 8006d3e:	0400      	lsls	r0, r0, #16
 8006d40:	2310      	movs	r3, #16
 8006d42:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006d46:	bf04      	itt	eq
 8006d48:	0200      	lsleq	r0, r0, #8
 8006d4a:	3308      	addeq	r3, #8
 8006d4c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006d50:	bf04      	itt	eq
 8006d52:	0100      	lsleq	r0, r0, #4
 8006d54:	3304      	addeq	r3, #4
 8006d56:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006d5a:	bf04      	itt	eq
 8006d5c:	0080      	lsleq	r0, r0, #2
 8006d5e:	3302      	addeq	r3, #2
 8006d60:	2800      	cmp	r0, #0
 8006d62:	db05      	blt.n	8006d70 <__hi0bits+0x38>
 8006d64:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006d68:	f103 0301 	add.w	r3, r3, #1
 8006d6c:	bf08      	it	eq
 8006d6e:	2320      	moveq	r3, #32
 8006d70:	4618      	mov	r0, r3
 8006d72:	4770      	bx	lr
 8006d74:	2300      	movs	r3, #0
 8006d76:	e7e4      	b.n	8006d42 <__hi0bits+0xa>

08006d78 <__lo0bits>:
 8006d78:	6803      	ldr	r3, [r0, #0]
 8006d7a:	f013 0207 	ands.w	r2, r3, #7
 8006d7e:	4601      	mov	r1, r0
 8006d80:	d00b      	beq.n	8006d9a <__lo0bits+0x22>
 8006d82:	07da      	lsls	r2, r3, #31
 8006d84:	d423      	bmi.n	8006dce <__lo0bits+0x56>
 8006d86:	0798      	lsls	r0, r3, #30
 8006d88:	bf49      	itett	mi
 8006d8a:	085b      	lsrmi	r3, r3, #1
 8006d8c:	089b      	lsrpl	r3, r3, #2
 8006d8e:	2001      	movmi	r0, #1
 8006d90:	600b      	strmi	r3, [r1, #0]
 8006d92:	bf5c      	itt	pl
 8006d94:	600b      	strpl	r3, [r1, #0]
 8006d96:	2002      	movpl	r0, #2
 8006d98:	4770      	bx	lr
 8006d9a:	b298      	uxth	r0, r3
 8006d9c:	b9a8      	cbnz	r0, 8006dca <__lo0bits+0x52>
 8006d9e:	0c1b      	lsrs	r3, r3, #16
 8006da0:	2010      	movs	r0, #16
 8006da2:	b2da      	uxtb	r2, r3
 8006da4:	b90a      	cbnz	r2, 8006daa <__lo0bits+0x32>
 8006da6:	3008      	adds	r0, #8
 8006da8:	0a1b      	lsrs	r3, r3, #8
 8006daa:	071a      	lsls	r2, r3, #28
 8006dac:	bf04      	itt	eq
 8006dae:	091b      	lsreq	r3, r3, #4
 8006db0:	3004      	addeq	r0, #4
 8006db2:	079a      	lsls	r2, r3, #30
 8006db4:	bf04      	itt	eq
 8006db6:	089b      	lsreq	r3, r3, #2
 8006db8:	3002      	addeq	r0, #2
 8006dba:	07da      	lsls	r2, r3, #31
 8006dbc:	d403      	bmi.n	8006dc6 <__lo0bits+0x4e>
 8006dbe:	085b      	lsrs	r3, r3, #1
 8006dc0:	f100 0001 	add.w	r0, r0, #1
 8006dc4:	d005      	beq.n	8006dd2 <__lo0bits+0x5a>
 8006dc6:	600b      	str	r3, [r1, #0]
 8006dc8:	4770      	bx	lr
 8006dca:	4610      	mov	r0, r2
 8006dcc:	e7e9      	b.n	8006da2 <__lo0bits+0x2a>
 8006dce:	2000      	movs	r0, #0
 8006dd0:	4770      	bx	lr
 8006dd2:	2020      	movs	r0, #32
 8006dd4:	4770      	bx	lr
	...

08006dd8 <__i2b>:
 8006dd8:	b510      	push	{r4, lr}
 8006dda:	460c      	mov	r4, r1
 8006ddc:	2101      	movs	r1, #1
 8006dde:	f7ff ff03 	bl	8006be8 <_Balloc>
 8006de2:	4602      	mov	r2, r0
 8006de4:	b928      	cbnz	r0, 8006df2 <__i2b+0x1a>
 8006de6:	4b05      	ldr	r3, [pc, #20]	; (8006dfc <__i2b+0x24>)
 8006de8:	4805      	ldr	r0, [pc, #20]	; (8006e00 <__i2b+0x28>)
 8006dea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006dee:	f000 fce1 	bl	80077b4 <__assert_func>
 8006df2:	2301      	movs	r3, #1
 8006df4:	6144      	str	r4, [r0, #20]
 8006df6:	6103      	str	r3, [r0, #16]
 8006df8:	bd10      	pop	{r4, pc}
 8006dfa:	bf00      	nop
 8006dfc:	0800a3ff 	.word	0x0800a3ff
 8006e00:	0800a410 	.word	0x0800a410

08006e04 <__multiply>:
 8006e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e08:	4691      	mov	r9, r2
 8006e0a:	690a      	ldr	r2, [r1, #16]
 8006e0c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006e10:	429a      	cmp	r2, r3
 8006e12:	bfb8      	it	lt
 8006e14:	460b      	movlt	r3, r1
 8006e16:	460c      	mov	r4, r1
 8006e18:	bfbc      	itt	lt
 8006e1a:	464c      	movlt	r4, r9
 8006e1c:	4699      	movlt	r9, r3
 8006e1e:	6927      	ldr	r7, [r4, #16]
 8006e20:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006e24:	68a3      	ldr	r3, [r4, #8]
 8006e26:	6861      	ldr	r1, [r4, #4]
 8006e28:	eb07 060a 	add.w	r6, r7, sl
 8006e2c:	42b3      	cmp	r3, r6
 8006e2e:	b085      	sub	sp, #20
 8006e30:	bfb8      	it	lt
 8006e32:	3101      	addlt	r1, #1
 8006e34:	f7ff fed8 	bl	8006be8 <_Balloc>
 8006e38:	b930      	cbnz	r0, 8006e48 <__multiply+0x44>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	4b44      	ldr	r3, [pc, #272]	; (8006f50 <__multiply+0x14c>)
 8006e3e:	4845      	ldr	r0, [pc, #276]	; (8006f54 <__multiply+0x150>)
 8006e40:	f240 115d 	movw	r1, #349	; 0x15d
 8006e44:	f000 fcb6 	bl	80077b4 <__assert_func>
 8006e48:	f100 0514 	add.w	r5, r0, #20
 8006e4c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006e50:	462b      	mov	r3, r5
 8006e52:	2200      	movs	r2, #0
 8006e54:	4543      	cmp	r3, r8
 8006e56:	d321      	bcc.n	8006e9c <__multiply+0x98>
 8006e58:	f104 0314 	add.w	r3, r4, #20
 8006e5c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006e60:	f109 0314 	add.w	r3, r9, #20
 8006e64:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006e68:	9202      	str	r2, [sp, #8]
 8006e6a:	1b3a      	subs	r2, r7, r4
 8006e6c:	3a15      	subs	r2, #21
 8006e6e:	f022 0203 	bic.w	r2, r2, #3
 8006e72:	3204      	adds	r2, #4
 8006e74:	f104 0115 	add.w	r1, r4, #21
 8006e78:	428f      	cmp	r7, r1
 8006e7a:	bf38      	it	cc
 8006e7c:	2204      	movcc	r2, #4
 8006e7e:	9201      	str	r2, [sp, #4]
 8006e80:	9a02      	ldr	r2, [sp, #8]
 8006e82:	9303      	str	r3, [sp, #12]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d80c      	bhi.n	8006ea2 <__multiply+0x9e>
 8006e88:	2e00      	cmp	r6, #0
 8006e8a:	dd03      	ble.n	8006e94 <__multiply+0x90>
 8006e8c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d05a      	beq.n	8006f4a <__multiply+0x146>
 8006e94:	6106      	str	r6, [r0, #16]
 8006e96:	b005      	add	sp, #20
 8006e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e9c:	f843 2b04 	str.w	r2, [r3], #4
 8006ea0:	e7d8      	b.n	8006e54 <__multiply+0x50>
 8006ea2:	f8b3 a000 	ldrh.w	sl, [r3]
 8006ea6:	f1ba 0f00 	cmp.w	sl, #0
 8006eaa:	d024      	beq.n	8006ef6 <__multiply+0xf2>
 8006eac:	f104 0e14 	add.w	lr, r4, #20
 8006eb0:	46a9      	mov	r9, r5
 8006eb2:	f04f 0c00 	mov.w	ip, #0
 8006eb6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006eba:	f8d9 1000 	ldr.w	r1, [r9]
 8006ebe:	fa1f fb82 	uxth.w	fp, r2
 8006ec2:	b289      	uxth	r1, r1
 8006ec4:	fb0a 110b 	mla	r1, sl, fp, r1
 8006ec8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006ecc:	f8d9 2000 	ldr.w	r2, [r9]
 8006ed0:	4461      	add	r1, ip
 8006ed2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006ed6:	fb0a c20b 	mla	r2, sl, fp, ip
 8006eda:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006ede:	b289      	uxth	r1, r1
 8006ee0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006ee4:	4577      	cmp	r7, lr
 8006ee6:	f849 1b04 	str.w	r1, [r9], #4
 8006eea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006eee:	d8e2      	bhi.n	8006eb6 <__multiply+0xb2>
 8006ef0:	9a01      	ldr	r2, [sp, #4]
 8006ef2:	f845 c002 	str.w	ip, [r5, r2]
 8006ef6:	9a03      	ldr	r2, [sp, #12]
 8006ef8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006efc:	3304      	adds	r3, #4
 8006efe:	f1b9 0f00 	cmp.w	r9, #0
 8006f02:	d020      	beq.n	8006f46 <__multiply+0x142>
 8006f04:	6829      	ldr	r1, [r5, #0]
 8006f06:	f104 0c14 	add.w	ip, r4, #20
 8006f0a:	46ae      	mov	lr, r5
 8006f0c:	f04f 0a00 	mov.w	sl, #0
 8006f10:	f8bc b000 	ldrh.w	fp, [ip]
 8006f14:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006f18:	fb09 220b 	mla	r2, r9, fp, r2
 8006f1c:	4492      	add	sl, r2
 8006f1e:	b289      	uxth	r1, r1
 8006f20:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006f24:	f84e 1b04 	str.w	r1, [lr], #4
 8006f28:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006f2c:	f8be 1000 	ldrh.w	r1, [lr]
 8006f30:	0c12      	lsrs	r2, r2, #16
 8006f32:	fb09 1102 	mla	r1, r9, r2, r1
 8006f36:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006f3a:	4567      	cmp	r7, ip
 8006f3c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006f40:	d8e6      	bhi.n	8006f10 <__multiply+0x10c>
 8006f42:	9a01      	ldr	r2, [sp, #4]
 8006f44:	50a9      	str	r1, [r5, r2]
 8006f46:	3504      	adds	r5, #4
 8006f48:	e79a      	b.n	8006e80 <__multiply+0x7c>
 8006f4a:	3e01      	subs	r6, #1
 8006f4c:	e79c      	b.n	8006e88 <__multiply+0x84>
 8006f4e:	bf00      	nop
 8006f50:	0800a3ff 	.word	0x0800a3ff
 8006f54:	0800a410 	.word	0x0800a410

08006f58 <__pow5mult>:
 8006f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f5c:	4615      	mov	r5, r2
 8006f5e:	f012 0203 	ands.w	r2, r2, #3
 8006f62:	4606      	mov	r6, r0
 8006f64:	460f      	mov	r7, r1
 8006f66:	d007      	beq.n	8006f78 <__pow5mult+0x20>
 8006f68:	4c25      	ldr	r4, [pc, #148]	; (8007000 <__pow5mult+0xa8>)
 8006f6a:	3a01      	subs	r2, #1
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006f72:	f7ff fe9b 	bl	8006cac <__multadd>
 8006f76:	4607      	mov	r7, r0
 8006f78:	10ad      	asrs	r5, r5, #2
 8006f7a:	d03d      	beq.n	8006ff8 <__pow5mult+0xa0>
 8006f7c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006f7e:	b97c      	cbnz	r4, 8006fa0 <__pow5mult+0x48>
 8006f80:	2010      	movs	r0, #16
 8006f82:	f7ff fe1b 	bl	8006bbc <malloc>
 8006f86:	4602      	mov	r2, r0
 8006f88:	6270      	str	r0, [r6, #36]	; 0x24
 8006f8a:	b928      	cbnz	r0, 8006f98 <__pow5mult+0x40>
 8006f8c:	4b1d      	ldr	r3, [pc, #116]	; (8007004 <__pow5mult+0xac>)
 8006f8e:	481e      	ldr	r0, [pc, #120]	; (8007008 <__pow5mult+0xb0>)
 8006f90:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006f94:	f000 fc0e 	bl	80077b4 <__assert_func>
 8006f98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f9c:	6004      	str	r4, [r0, #0]
 8006f9e:	60c4      	str	r4, [r0, #12]
 8006fa0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006fa4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006fa8:	b94c      	cbnz	r4, 8006fbe <__pow5mult+0x66>
 8006faa:	f240 2171 	movw	r1, #625	; 0x271
 8006fae:	4630      	mov	r0, r6
 8006fb0:	f7ff ff12 	bl	8006dd8 <__i2b>
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	f8c8 0008 	str.w	r0, [r8, #8]
 8006fba:	4604      	mov	r4, r0
 8006fbc:	6003      	str	r3, [r0, #0]
 8006fbe:	f04f 0900 	mov.w	r9, #0
 8006fc2:	07eb      	lsls	r3, r5, #31
 8006fc4:	d50a      	bpl.n	8006fdc <__pow5mult+0x84>
 8006fc6:	4639      	mov	r1, r7
 8006fc8:	4622      	mov	r2, r4
 8006fca:	4630      	mov	r0, r6
 8006fcc:	f7ff ff1a 	bl	8006e04 <__multiply>
 8006fd0:	4639      	mov	r1, r7
 8006fd2:	4680      	mov	r8, r0
 8006fd4:	4630      	mov	r0, r6
 8006fd6:	f7ff fe47 	bl	8006c68 <_Bfree>
 8006fda:	4647      	mov	r7, r8
 8006fdc:	106d      	asrs	r5, r5, #1
 8006fde:	d00b      	beq.n	8006ff8 <__pow5mult+0xa0>
 8006fe0:	6820      	ldr	r0, [r4, #0]
 8006fe2:	b938      	cbnz	r0, 8006ff4 <__pow5mult+0x9c>
 8006fe4:	4622      	mov	r2, r4
 8006fe6:	4621      	mov	r1, r4
 8006fe8:	4630      	mov	r0, r6
 8006fea:	f7ff ff0b 	bl	8006e04 <__multiply>
 8006fee:	6020      	str	r0, [r4, #0]
 8006ff0:	f8c0 9000 	str.w	r9, [r0]
 8006ff4:	4604      	mov	r4, r0
 8006ff6:	e7e4      	b.n	8006fc2 <__pow5mult+0x6a>
 8006ff8:	4638      	mov	r0, r7
 8006ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ffe:	bf00      	nop
 8007000:	0800a560 	.word	0x0800a560
 8007004:	0800a38d 	.word	0x0800a38d
 8007008:	0800a410 	.word	0x0800a410

0800700c <__lshift>:
 800700c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007010:	460c      	mov	r4, r1
 8007012:	6849      	ldr	r1, [r1, #4]
 8007014:	6923      	ldr	r3, [r4, #16]
 8007016:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800701a:	68a3      	ldr	r3, [r4, #8]
 800701c:	4607      	mov	r7, r0
 800701e:	4691      	mov	r9, r2
 8007020:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007024:	f108 0601 	add.w	r6, r8, #1
 8007028:	42b3      	cmp	r3, r6
 800702a:	db0b      	blt.n	8007044 <__lshift+0x38>
 800702c:	4638      	mov	r0, r7
 800702e:	f7ff fddb 	bl	8006be8 <_Balloc>
 8007032:	4605      	mov	r5, r0
 8007034:	b948      	cbnz	r0, 800704a <__lshift+0x3e>
 8007036:	4602      	mov	r2, r0
 8007038:	4b2a      	ldr	r3, [pc, #168]	; (80070e4 <__lshift+0xd8>)
 800703a:	482b      	ldr	r0, [pc, #172]	; (80070e8 <__lshift+0xdc>)
 800703c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007040:	f000 fbb8 	bl	80077b4 <__assert_func>
 8007044:	3101      	adds	r1, #1
 8007046:	005b      	lsls	r3, r3, #1
 8007048:	e7ee      	b.n	8007028 <__lshift+0x1c>
 800704a:	2300      	movs	r3, #0
 800704c:	f100 0114 	add.w	r1, r0, #20
 8007050:	f100 0210 	add.w	r2, r0, #16
 8007054:	4618      	mov	r0, r3
 8007056:	4553      	cmp	r3, sl
 8007058:	db37      	blt.n	80070ca <__lshift+0xbe>
 800705a:	6920      	ldr	r0, [r4, #16]
 800705c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007060:	f104 0314 	add.w	r3, r4, #20
 8007064:	f019 091f 	ands.w	r9, r9, #31
 8007068:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800706c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007070:	d02f      	beq.n	80070d2 <__lshift+0xc6>
 8007072:	f1c9 0e20 	rsb	lr, r9, #32
 8007076:	468a      	mov	sl, r1
 8007078:	f04f 0c00 	mov.w	ip, #0
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	fa02 f209 	lsl.w	r2, r2, r9
 8007082:	ea42 020c 	orr.w	r2, r2, ip
 8007086:	f84a 2b04 	str.w	r2, [sl], #4
 800708a:	f853 2b04 	ldr.w	r2, [r3], #4
 800708e:	4298      	cmp	r0, r3
 8007090:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007094:	d8f2      	bhi.n	800707c <__lshift+0x70>
 8007096:	1b03      	subs	r3, r0, r4
 8007098:	3b15      	subs	r3, #21
 800709a:	f023 0303 	bic.w	r3, r3, #3
 800709e:	3304      	adds	r3, #4
 80070a0:	f104 0215 	add.w	r2, r4, #21
 80070a4:	4290      	cmp	r0, r2
 80070a6:	bf38      	it	cc
 80070a8:	2304      	movcc	r3, #4
 80070aa:	f841 c003 	str.w	ip, [r1, r3]
 80070ae:	f1bc 0f00 	cmp.w	ip, #0
 80070b2:	d001      	beq.n	80070b8 <__lshift+0xac>
 80070b4:	f108 0602 	add.w	r6, r8, #2
 80070b8:	3e01      	subs	r6, #1
 80070ba:	4638      	mov	r0, r7
 80070bc:	612e      	str	r6, [r5, #16]
 80070be:	4621      	mov	r1, r4
 80070c0:	f7ff fdd2 	bl	8006c68 <_Bfree>
 80070c4:	4628      	mov	r0, r5
 80070c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80070ce:	3301      	adds	r3, #1
 80070d0:	e7c1      	b.n	8007056 <__lshift+0x4a>
 80070d2:	3904      	subs	r1, #4
 80070d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80070d8:	f841 2f04 	str.w	r2, [r1, #4]!
 80070dc:	4298      	cmp	r0, r3
 80070de:	d8f9      	bhi.n	80070d4 <__lshift+0xc8>
 80070e0:	e7ea      	b.n	80070b8 <__lshift+0xac>
 80070e2:	bf00      	nop
 80070e4:	0800a3ff 	.word	0x0800a3ff
 80070e8:	0800a410 	.word	0x0800a410

080070ec <__mcmp>:
 80070ec:	b530      	push	{r4, r5, lr}
 80070ee:	6902      	ldr	r2, [r0, #16]
 80070f0:	690c      	ldr	r4, [r1, #16]
 80070f2:	1b12      	subs	r2, r2, r4
 80070f4:	d10e      	bne.n	8007114 <__mcmp+0x28>
 80070f6:	f100 0314 	add.w	r3, r0, #20
 80070fa:	3114      	adds	r1, #20
 80070fc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007100:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007104:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007108:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800710c:	42a5      	cmp	r5, r4
 800710e:	d003      	beq.n	8007118 <__mcmp+0x2c>
 8007110:	d305      	bcc.n	800711e <__mcmp+0x32>
 8007112:	2201      	movs	r2, #1
 8007114:	4610      	mov	r0, r2
 8007116:	bd30      	pop	{r4, r5, pc}
 8007118:	4283      	cmp	r3, r0
 800711a:	d3f3      	bcc.n	8007104 <__mcmp+0x18>
 800711c:	e7fa      	b.n	8007114 <__mcmp+0x28>
 800711e:	f04f 32ff 	mov.w	r2, #4294967295
 8007122:	e7f7      	b.n	8007114 <__mcmp+0x28>

08007124 <__mdiff>:
 8007124:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007128:	460c      	mov	r4, r1
 800712a:	4606      	mov	r6, r0
 800712c:	4611      	mov	r1, r2
 800712e:	4620      	mov	r0, r4
 8007130:	4690      	mov	r8, r2
 8007132:	f7ff ffdb 	bl	80070ec <__mcmp>
 8007136:	1e05      	subs	r5, r0, #0
 8007138:	d110      	bne.n	800715c <__mdiff+0x38>
 800713a:	4629      	mov	r1, r5
 800713c:	4630      	mov	r0, r6
 800713e:	f7ff fd53 	bl	8006be8 <_Balloc>
 8007142:	b930      	cbnz	r0, 8007152 <__mdiff+0x2e>
 8007144:	4b3a      	ldr	r3, [pc, #232]	; (8007230 <__mdiff+0x10c>)
 8007146:	4602      	mov	r2, r0
 8007148:	f240 2132 	movw	r1, #562	; 0x232
 800714c:	4839      	ldr	r0, [pc, #228]	; (8007234 <__mdiff+0x110>)
 800714e:	f000 fb31 	bl	80077b4 <__assert_func>
 8007152:	2301      	movs	r3, #1
 8007154:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007158:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800715c:	bfa4      	itt	ge
 800715e:	4643      	movge	r3, r8
 8007160:	46a0      	movge	r8, r4
 8007162:	4630      	mov	r0, r6
 8007164:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007168:	bfa6      	itte	ge
 800716a:	461c      	movge	r4, r3
 800716c:	2500      	movge	r5, #0
 800716e:	2501      	movlt	r5, #1
 8007170:	f7ff fd3a 	bl	8006be8 <_Balloc>
 8007174:	b920      	cbnz	r0, 8007180 <__mdiff+0x5c>
 8007176:	4b2e      	ldr	r3, [pc, #184]	; (8007230 <__mdiff+0x10c>)
 8007178:	4602      	mov	r2, r0
 800717a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800717e:	e7e5      	b.n	800714c <__mdiff+0x28>
 8007180:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007184:	6926      	ldr	r6, [r4, #16]
 8007186:	60c5      	str	r5, [r0, #12]
 8007188:	f104 0914 	add.w	r9, r4, #20
 800718c:	f108 0514 	add.w	r5, r8, #20
 8007190:	f100 0e14 	add.w	lr, r0, #20
 8007194:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007198:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800719c:	f108 0210 	add.w	r2, r8, #16
 80071a0:	46f2      	mov	sl, lr
 80071a2:	2100      	movs	r1, #0
 80071a4:	f859 3b04 	ldr.w	r3, [r9], #4
 80071a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80071ac:	fa1f f883 	uxth.w	r8, r3
 80071b0:	fa11 f18b 	uxtah	r1, r1, fp
 80071b4:	0c1b      	lsrs	r3, r3, #16
 80071b6:	eba1 0808 	sub.w	r8, r1, r8
 80071ba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80071be:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80071c2:	fa1f f888 	uxth.w	r8, r8
 80071c6:	1419      	asrs	r1, r3, #16
 80071c8:	454e      	cmp	r6, r9
 80071ca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80071ce:	f84a 3b04 	str.w	r3, [sl], #4
 80071d2:	d8e7      	bhi.n	80071a4 <__mdiff+0x80>
 80071d4:	1b33      	subs	r3, r6, r4
 80071d6:	3b15      	subs	r3, #21
 80071d8:	f023 0303 	bic.w	r3, r3, #3
 80071dc:	3304      	adds	r3, #4
 80071de:	3415      	adds	r4, #21
 80071e0:	42a6      	cmp	r6, r4
 80071e2:	bf38      	it	cc
 80071e4:	2304      	movcc	r3, #4
 80071e6:	441d      	add	r5, r3
 80071e8:	4473      	add	r3, lr
 80071ea:	469e      	mov	lr, r3
 80071ec:	462e      	mov	r6, r5
 80071ee:	4566      	cmp	r6, ip
 80071f0:	d30e      	bcc.n	8007210 <__mdiff+0xec>
 80071f2:	f10c 0203 	add.w	r2, ip, #3
 80071f6:	1b52      	subs	r2, r2, r5
 80071f8:	f022 0203 	bic.w	r2, r2, #3
 80071fc:	3d03      	subs	r5, #3
 80071fe:	45ac      	cmp	ip, r5
 8007200:	bf38      	it	cc
 8007202:	2200      	movcc	r2, #0
 8007204:	441a      	add	r2, r3
 8007206:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800720a:	b17b      	cbz	r3, 800722c <__mdiff+0x108>
 800720c:	6107      	str	r7, [r0, #16]
 800720e:	e7a3      	b.n	8007158 <__mdiff+0x34>
 8007210:	f856 8b04 	ldr.w	r8, [r6], #4
 8007214:	fa11 f288 	uxtah	r2, r1, r8
 8007218:	1414      	asrs	r4, r2, #16
 800721a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800721e:	b292      	uxth	r2, r2
 8007220:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007224:	f84e 2b04 	str.w	r2, [lr], #4
 8007228:	1421      	asrs	r1, r4, #16
 800722a:	e7e0      	b.n	80071ee <__mdiff+0xca>
 800722c:	3f01      	subs	r7, #1
 800722e:	e7ea      	b.n	8007206 <__mdiff+0xe2>
 8007230:	0800a3ff 	.word	0x0800a3ff
 8007234:	0800a410 	.word	0x0800a410

08007238 <__d2b>:
 8007238:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800723c:	4689      	mov	r9, r1
 800723e:	2101      	movs	r1, #1
 8007240:	ec57 6b10 	vmov	r6, r7, d0
 8007244:	4690      	mov	r8, r2
 8007246:	f7ff fccf 	bl	8006be8 <_Balloc>
 800724a:	4604      	mov	r4, r0
 800724c:	b930      	cbnz	r0, 800725c <__d2b+0x24>
 800724e:	4602      	mov	r2, r0
 8007250:	4b25      	ldr	r3, [pc, #148]	; (80072e8 <__d2b+0xb0>)
 8007252:	4826      	ldr	r0, [pc, #152]	; (80072ec <__d2b+0xb4>)
 8007254:	f240 310a 	movw	r1, #778	; 0x30a
 8007258:	f000 faac 	bl	80077b4 <__assert_func>
 800725c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007260:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007264:	bb35      	cbnz	r5, 80072b4 <__d2b+0x7c>
 8007266:	2e00      	cmp	r6, #0
 8007268:	9301      	str	r3, [sp, #4]
 800726a:	d028      	beq.n	80072be <__d2b+0x86>
 800726c:	4668      	mov	r0, sp
 800726e:	9600      	str	r6, [sp, #0]
 8007270:	f7ff fd82 	bl	8006d78 <__lo0bits>
 8007274:	9900      	ldr	r1, [sp, #0]
 8007276:	b300      	cbz	r0, 80072ba <__d2b+0x82>
 8007278:	9a01      	ldr	r2, [sp, #4]
 800727a:	f1c0 0320 	rsb	r3, r0, #32
 800727e:	fa02 f303 	lsl.w	r3, r2, r3
 8007282:	430b      	orrs	r3, r1
 8007284:	40c2      	lsrs	r2, r0
 8007286:	6163      	str	r3, [r4, #20]
 8007288:	9201      	str	r2, [sp, #4]
 800728a:	9b01      	ldr	r3, [sp, #4]
 800728c:	61a3      	str	r3, [r4, #24]
 800728e:	2b00      	cmp	r3, #0
 8007290:	bf14      	ite	ne
 8007292:	2202      	movne	r2, #2
 8007294:	2201      	moveq	r2, #1
 8007296:	6122      	str	r2, [r4, #16]
 8007298:	b1d5      	cbz	r5, 80072d0 <__d2b+0x98>
 800729a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800729e:	4405      	add	r5, r0
 80072a0:	f8c9 5000 	str.w	r5, [r9]
 80072a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80072a8:	f8c8 0000 	str.w	r0, [r8]
 80072ac:	4620      	mov	r0, r4
 80072ae:	b003      	add	sp, #12
 80072b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80072b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80072b8:	e7d5      	b.n	8007266 <__d2b+0x2e>
 80072ba:	6161      	str	r1, [r4, #20]
 80072bc:	e7e5      	b.n	800728a <__d2b+0x52>
 80072be:	a801      	add	r0, sp, #4
 80072c0:	f7ff fd5a 	bl	8006d78 <__lo0bits>
 80072c4:	9b01      	ldr	r3, [sp, #4]
 80072c6:	6163      	str	r3, [r4, #20]
 80072c8:	2201      	movs	r2, #1
 80072ca:	6122      	str	r2, [r4, #16]
 80072cc:	3020      	adds	r0, #32
 80072ce:	e7e3      	b.n	8007298 <__d2b+0x60>
 80072d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80072d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80072d8:	f8c9 0000 	str.w	r0, [r9]
 80072dc:	6918      	ldr	r0, [r3, #16]
 80072de:	f7ff fd2b 	bl	8006d38 <__hi0bits>
 80072e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80072e6:	e7df      	b.n	80072a8 <__d2b+0x70>
 80072e8:	0800a3ff 	.word	0x0800a3ff
 80072ec:	0800a410 	.word	0x0800a410

080072f0 <_calloc_r>:
 80072f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072f2:	fba1 2402 	umull	r2, r4, r1, r2
 80072f6:	b94c      	cbnz	r4, 800730c <_calloc_r+0x1c>
 80072f8:	4611      	mov	r1, r2
 80072fa:	9201      	str	r2, [sp, #4]
 80072fc:	f000 f87a 	bl	80073f4 <_malloc_r>
 8007300:	9a01      	ldr	r2, [sp, #4]
 8007302:	4605      	mov	r5, r0
 8007304:	b930      	cbnz	r0, 8007314 <_calloc_r+0x24>
 8007306:	4628      	mov	r0, r5
 8007308:	b003      	add	sp, #12
 800730a:	bd30      	pop	{r4, r5, pc}
 800730c:	220c      	movs	r2, #12
 800730e:	6002      	str	r2, [r0, #0]
 8007310:	2500      	movs	r5, #0
 8007312:	e7f8      	b.n	8007306 <_calloc_r+0x16>
 8007314:	4621      	mov	r1, r4
 8007316:	f7fe f93f 	bl	8005598 <memset>
 800731a:	e7f4      	b.n	8007306 <_calloc_r+0x16>

0800731c <_free_r>:
 800731c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800731e:	2900      	cmp	r1, #0
 8007320:	d044      	beq.n	80073ac <_free_r+0x90>
 8007322:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007326:	9001      	str	r0, [sp, #4]
 8007328:	2b00      	cmp	r3, #0
 800732a:	f1a1 0404 	sub.w	r4, r1, #4
 800732e:	bfb8      	it	lt
 8007330:	18e4      	addlt	r4, r4, r3
 8007332:	f000 fa9b 	bl	800786c <__malloc_lock>
 8007336:	4a1e      	ldr	r2, [pc, #120]	; (80073b0 <_free_r+0x94>)
 8007338:	9801      	ldr	r0, [sp, #4]
 800733a:	6813      	ldr	r3, [r2, #0]
 800733c:	b933      	cbnz	r3, 800734c <_free_r+0x30>
 800733e:	6063      	str	r3, [r4, #4]
 8007340:	6014      	str	r4, [r2, #0]
 8007342:	b003      	add	sp, #12
 8007344:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007348:	f000 ba96 	b.w	8007878 <__malloc_unlock>
 800734c:	42a3      	cmp	r3, r4
 800734e:	d908      	bls.n	8007362 <_free_r+0x46>
 8007350:	6825      	ldr	r5, [r4, #0]
 8007352:	1961      	adds	r1, r4, r5
 8007354:	428b      	cmp	r3, r1
 8007356:	bf01      	itttt	eq
 8007358:	6819      	ldreq	r1, [r3, #0]
 800735a:	685b      	ldreq	r3, [r3, #4]
 800735c:	1949      	addeq	r1, r1, r5
 800735e:	6021      	streq	r1, [r4, #0]
 8007360:	e7ed      	b.n	800733e <_free_r+0x22>
 8007362:	461a      	mov	r2, r3
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	b10b      	cbz	r3, 800736c <_free_r+0x50>
 8007368:	42a3      	cmp	r3, r4
 800736a:	d9fa      	bls.n	8007362 <_free_r+0x46>
 800736c:	6811      	ldr	r1, [r2, #0]
 800736e:	1855      	adds	r5, r2, r1
 8007370:	42a5      	cmp	r5, r4
 8007372:	d10b      	bne.n	800738c <_free_r+0x70>
 8007374:	6824      	ldr	r4, [r4, #0]
 8007376:	4421      	add	r1, r4
 8007378:	1854      	adds	r4, r2, r1
 800737a:	42a3      	cmp	r3, r4
 800737c:	6011      	str	r1, [r2, #0]
 800737e:	d1e0      	bne.n	8007342 <_free_r+0x26>
 8007380:	681c      	ldr	r4, [r3, #0]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	6053      	str	r3, [r2, #4]
 8007386:	4421      	add	r1, r4
 8007388:	6011      	str	r1, [r2, #0]
 800738a:	e7da      	b.n	8007342 <_free_r+0x26>
 800738c:	d902      	bls.n	8007394 <_free_r+0x78>
 800738e:	230c      	movs	r3, #12
 8007390:	6003      	str	r3, [r0, #0]
 8007392:	e7d6      	b.n	8007342 <_free_r+0x26>
 8007394:	6825      	ldr	r5, [r4, #0]
 8007396:	1961      	adds	r1, r4, r5
 8007398:	428b      	cmp	r3, r1
 800739a:	bf04      	itt	eq
 800739c:	6819      	ldreq	r1, [r3, #0]
 800739e:	685b      	ldreq	r3, [r3, #4]
 80073a0:	6063      	str	r3, [r4, #4]
 80073a2:	bf04      	itt	eq
 80073a4:	1949      	addeq	r1, r1, r5
 80073a6:	6021      	streq	r1, [r4, #0]
 80073a8:	6054      	str	r4, [r2, #4]
 80073aa:	e7ca      	b.n	8007342 <_free_r+0x26>
 80073ac:	b003      	add	sp, #12
 80073ae:	bd30      	pop	{r4, r5, pc}
 80073b0:	2000032c 	.word	0x2000032c

080073b4 <sbrk_aligned>:
 80073b4:	b570      	push	{r4, r5, r6, lr}
 80073b6:	4e0e      	ldr	r6, [pc, #56]	; (80073f0 <sbrk_aligned+0x3c>)
 80073b8:	460c      	mov	r4, r1
 80073ba:	6831      	ldr	r1, [r6, #0]
 80073bc:	4605      	mov	r5, r0
 80073be:	b911      	cbnz	r1, 80073c6 <sbrk_aligned+0x12>
 80073c0:	f000 f9e8 	bl	8007794 <_sbrk_r>
 80073c4:	6030      	str	r0, [r6, #0]
 80073c6:	4621      	mov	r1, r4
 80073c8:	4628      	mov	r0, r5
 80073ca:	f000 f9e3 	bl	8007794 <_sbrk_r>
 80073ce:	1c43      	adds	r3, r0, #1
 80073d0:	d00a      	beq.n	80073e8 <sbrk_aligned+0x34>
 80073d2:	1cc4      	adds	r4, r0, #3
 80073d4:	f024 0403 	bic.w	r4, r4, #3
 80073d8:	42a0      	cmp	r0, r4
 80073da:	d007      	beq.n	80073ec <sbrk_aligned+0x38>
 80073dc:	1a21      	subs	r1, r4, r0
 80073de:	4628      	mov	r0, r5
 80073e0:	f000 f9d8 	bl	8007794 <_sbrk_r>
 80073e4:	3001      	adds	r0, #1
 80073e6:	d101      	bne.n	80073ec <sbrk_aligned+0x38>
 80073e8:	f04f 34ff 	mov.w	r4, #4294967295
 80073ec:	4620      	mov	r0, r4
 80073ee:	bd70      	pop	{r4, r5, r6, pc}
 80073f0:	20000330 	.word	0x20000330

080073f4 <_malloc_r>:
 80073f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073f8:	1ccd      	adds	r5, r1, #3
 80073fa:	f025 0503 	bic.w	r5, r5, #3
 80073fe:	3508      	adds	r5, #8
 8007400:	2d0c      	cmp	r5, #12
 8007402:	bf38      	it	cc
 8007404:	250c      	movcc	r5, #12
 8007406:	2d00      	cmp	r5, #0
 8007408:	4607      	mov	r7, r0
 800740a:	db01      	blt.n	8007410 <_malloc_r+0x1c>
 800740c:	42a9      	cmp	r1, r5
 800740e:	d905      	bls.n	800741c <_malloc_r+0x28>
 8007410:	230c      	movs	r3, #12
 8007412:	603b      	str	r3, [r7, #0]
 8007414:	2600      	movs	r6, #0
 8007416:	4630      	mov	r0, r6
 8007418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800741c:	4e2e      	ldr	r6, [pc, #184]	; (80074d8 <_malloc_r+0xe4>)
 800741e:	f000 fa25 	bl	800786c <__malloc_lock>
 8007422:	6833      	ldr	r3, [r6, #0]
 8007424:	461c      	mov	r4, r3
 8007426:	bb34      	cbnz	r4, 8007476 <_malloc_r+0x82>
 8007428:	4629      	mov	r1, r5
 800742a:	4638      	mov	r0, r7
 800742c:	f7ff ffc2 	bl	80073b4 <sbrk_aligned>
 8007430:	1c43      	adds	r3, r0, #1
 8007432:	4604      	mov	r4, r0
 8007434:	d14d      	bne.n	80074d2 <_malloc_r+0xde>
 8007436:	6834      	ldr	r4, [r6, #0]
 8007438:	4626      	mov	r6, r4
 800743a:	2e00      	cmp	r6, #0
 800743c:	d140      	bne.n	80074c0 <_malloc_r+0xcc>
 800743e:	6823      	ldr	r3, [r4, #0]
 8007440:	4631      	mov	r1, r6
 8007442:	4638      	mov	r0, r7
 8007444:	eb04 0803 	add.w	r8, r4, r3
 8007448:	f000 f9a4 	bl	8007794 <_sbrk_r>
 800744c:	4580      	cmp	r8, r0
 800744e:	d13a      	bne.n	80074c6 <_malloc_r+0xd2>
 8007450:	6821      	ldr	r1, [r4, #0]
 8007452:	3503      	adds	r5, #3
 8007454:	1a6d      	subs	r5, r5, r1
 8007456:	f025 0503 	bic.w	r5, r5, #3
 800745a:	3508      	adds	r5, #8
 800745c:	2d0c      	cmp	r5, #12
 800745e:	bf38      	it	cc
 8007460:	250c      	movcc	r5, #12
 8007462:	4629      	mov	r1, r5
 8007464:	4638      	mov	r0, r7
 8007466:	f7ff ffa5 	bl	80073b4 <sbrk_aligned>
 800746a:	3001      	adds	r0, #1
 800746c:	d02b      	beq.n	80074c6 <_malloc_r+0xd2>
 800746e:	6823      	ldr	r3, [r4, #0]
 8007470:	442b      	add	r3, r5
 8007472:	6023      	str	r3, [r4, #0]
 8007474:	e00e      	b.n	8007494 <_malloc_r+0xa0>
 8007476:	6822      	ldr	r2, [r4, #0]
 8007478:	1b52      	subs	r2, r2, r5
 800747a:	d41e      	bmi.n	80074ba <_malloc_r+0xc6>
 800747c:	2a0b      	cmp	r2, #11
 800747e:	d916      	bls.n	80074ae <_malloc_r+0xba>
 8007480:	1961      	adds	r1, r4, r5
 8007482:	42a3      	cmp	r3, r4
 8007484:	6025      	str	r5, [r4, #0]
 8007486:	bf18      	it	ne
 8007488:	6059      	strne	r1, [r3, #4]
 800748a:	6863      	ldr	r3, [r4, #4]
 800748c:	bf08      	it	eq
 800748e:	6031      	streq	r1, [r6, #0]
 8007490:	5162      	str	r2, [r4, r5]
 8007492:	604b      	str	r3, [r1, #4]
 8007494:	4638      	mov	r0, r7
 8007496:	f104 060b 	add.w	r6, r4, #11
 800749a:	f000 f9ed 	bl	8007878 <__malloc_unlock>
 800749e:	f026 0607 	bic.w	r6, r6, #7
 80074a2:	1d23      	adds	r3, r4, #4
 80074a4:	1af2      	subs	r2, r6, r3
 80074a6:	d0b6      	beq.n	8007416 <_malloc_r+0x22>
 80074a8:	1b9b      	subs	r3, r3, r6
 80074aa:	50a3      	str	r3, [r4, r2]
 80074ac:	e7b3      	b.n	8007416 <_malloc_r+0x22>
 80074ae:	6862      	ldr	r2, [r4, #4]
 80074b0:	42a3      	cmp	r3, r4
 80074b2:	bf0c      	ite	eq
 80074b4:	6032      	streq	r2, [r6, #0]
 80074b6:	605a      	strne	r2, [r3, #4]
 80074b8:	e7ec      	b.n	8007494 <_malloc_r+0xa0>
 80074ba:	4623      	mov	r3, r4
 80074bc:	6864      	ldr	r4, [r4, #4]
 80074be:	e7b2      	b.n	8007426 <_malloc_r+0x32>
 80074c0:	4634      	mov	r4, r6
 80074c2:	6876      	ldr	r6, [r6, #4]
 80074c4:	e7b9      	b.n	800743a <_malloc_r+0x46>
 80074c6:	230c      	movs	r3, #12
 80074c8:	603b      	str	r3, [r7, #0]
 80074ca:	4638      	mov	r0, r7
 80074cc:	f000 f9d4 	bl	8007878 <__malloc_unlock>
 80074d0:	e7a1      	b.n	8007416 <_malloc_r+0x22>
 80074d2:	6025      	str	r5, [r4, #0]
 80074d4:	e7de      	b.n	8007494 <_malloc_r+0xa0>
 80074d6:	bf00      	nop
 80074d8:	2000032c 	.word	0x2000032c

080074dc <__ssputs_r>:
 80074dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074e0:	688e      	ldr	r6, [r1, #8]
 80074e2:	429e      	cmp	r6, r3
 80074e4:	4682      	mov	sl, r0
 80074e6:	460c      	mov	r4, r1
 80074e8:	4690      	mov	r8, r2
 80074ea:	461f      	mov	r7, r3
 80074ec:	d838      	bhi.n	8007560 <__ssputs_r+0x84>
 80074ee:	898a      	ldrh	r2, [r1, #12]
 80074f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80074f4:	d032      	beq.n	800755c <__ssputs_r+0x80>
 80074f6:	6825      	ldr	r5, [r4, #0]
 80074f8:	6909      	ldr	r1, [r1, #16]
 80074fa:	eba5 0901 	sub.w	r9, r5, r1
 80074fe:	6965      	ldr	r5, [r4, #20]
 8007500:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007504:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007508:	3301      	adds	r3, #1
 800750a:	444b      	add	r3, r9
 800750c:	106d      	asrs	r5, r5, #1
 800750e:	429d      	cmp	r5, r3
 8007510:	bf38      	it	cc
 8007512:	461d      	movcc	r5, r3
 8007514:	0553      	lsls	r3, r2, #21
 8007516:	d531      	bpl.n	800757c <__ssputs_r+0xa0>
 8007518:	4629      	mov	r1, r5
 800751a:	f7ff ff6b 	bl	80073f4 <_malloc_r>
 800751e:	4606      	mov	r6, r0
 8007520:	b950      	cbnz	r0, 8007538 <__ssputs_r+0x5c>
 8007522:	230c      	movs	r3, #12
 8007524:	f8ca 3000 	str.w	r3, [sl]
 8007528:	89a3      	ldrh	r3, [r4, #12]
 800752a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800752e:	81a3      	strh	r3, [r4, #12]
 8007530:	f04f 30ff 	mov.w	r0, #4294967295
 8007534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007538:	6921      	ldr	r1, [r4, #16]
 800753a:	464a      	mov	r2, r9
 800753c:	f7ff fb46 	bl	8006bcc <memcpy>
 8007540:	89a3      	ldrh	r3, [r4, #12]
 8007542:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800754a:	81a3      	strh	r3, [r4, #12]
 800754c:	6126      	str	r6, [r4, #16]
 800754e:	6165      	str	r5, [r4, #20]
 8007550:	444e      	add	r6, r9
 8007552:	eba5 0509 	sub.w	r5, r5, r9
 8007556:	6026      	str	r6, [r4, #0]
 8007558:	60a5      	str	r5, [r4, #8]
 800755a:	463e      	mov	r6, r7
 800755c:	42be      	cmp	r6, r7
 800755e:	d900      	bls.n	8007562 <__ssputs_r+0x86>
 8007560:	463e      	mov	r6, r7
 8007562:	6820      	ldr	r0, [r4, #0]
 8007564:	4632      	mov	r2, r6
 8007566:	4641      	mov	r1, r8
 8007568:	f000 f966 	bl	8007838 <memmove>
 800756c:	68a3      	ldr	r3, [r4, #8]
 800756e:	1b9b      	subs	r3, r3, r6
 8007570:	60a3      	str	r3, [r4, #8]
 8007572:	6823      	ldr	r3, [r4, #0]
 8007574:	4433      	add	r3, r6
 8007576:	6023      	str	r3, [r4, #0]
 8007578:	2000      	movs	r0, #0
 800757a:	e7db      	b.n	8007534 <__ssputs_r+0x58>
 800757c:	462a      	mov	r2, r5
 800757e:	f000 f981 	bl	8007884 <_realloc_r>
 8007582:	4606      	mov	r6, r0
 8007584:	2800      	cmp	r0, #0
 8007586:	d1e1      	bne.n	800754c <__ssputs_r+0x70>
 8007588:	6921      	ldr	r1, [r4, #16]
 800758a:	4650      	mov	r0, sl
 800758c:	f7ff fec6 	bl	800731c <_free_r>
 8007590:	e7c7      	b.n	8007522 <__ssputs_r+0x46>
	...

08007594 <_svfiprintf_r>:
 8007594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007598:	4698      	mov	r8, r3
 800759a:	898b      	ldrh	r3, [r1, #12]
 800759c:	061b      	lsls	r3, r3, #24
 800759e:	b09d      	sub	sp, #116	; 0x74
 80075a0:	4607      	mov	r7, r0
 80075a2:	460d      	mov	r5, r1
 80075a4:	4614      	mov	r4, r2
 80075a6:	d50e      	bpl.n	80075c6 <_svfiprintf_r+0x32>
 80075a8:	690b      	ldr	r3, [r1, #16]
 80075aa:	b963      	cbnz	r3, 80075c6 <_svfiprintf_r+0x32>
 80075ac:	2140      	movs	r1, #64	; 0x40
 80075ae:	f7ff ff21 	bl	80073f4 <_malloc_r>
 80075b2:	6028      	str	r0, [r5, #0]
 80075b4:	6128      	str	r0, [r5, #16]
 80075b6:	b920      	cbnz	r0, 80075c2 <_svfiprintf_r+0x2e>
 80075b8:	230c      	movs	r3, #12
 80075ba:	603b      	str	r3, [r7, #0]
 80075bc:	f04f 30ff 	mov.w	r0, #4294967295
 80075c0:	e0d1      	b.n	8007766 <_svfiprintf_r+0x1d2>
 80075c2:	2340      	movs	r3, #64	; 0x40
 80075c4:	616b      	str	r3, [r5, #20]
 80075c6:	2300      	movs	r3, #0
 80075c8:	9309      	str	r3, [sp, #36]	; 0x24
 80075ca:	2320      	movs	r3, #32
 80075cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80075d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80075d4:	2330      	movs	r3, #48	; 0x30
 80075d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007780 <_svfiprintf_r+0x1ec>
 80075da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075de:	f04f 0901 	mov.w	r9, #1
 80075e2:	4623      	mov	r3, r4
 80075e4:	469a      	mov	sl, r3
 80075e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075ea:	b10a      	cbz	r2, 80075f0 <_svfiprintf_r+0x5c>
 80075ec:	2a25      	cmp	r2, #37	; 0x25
 80075ee:	d1f9      	bne.n	80075e4 <_svfiprintf_r+0x50>
 80075f0:	ebba 0b04 	subs.w	fp, sl, r4
 80075f4:	d00b      	beq.n	800760e <_svfiprintf_r+0x7a>
 80075f6:	465b      	mov	r3, fp
 80075f8:	4622      	mov	r2, r4
 80075fa:	4629      	mov	r1, r5
 80075fc:	4638      	mov	r0, r7
 80075fe:	f7ff ff6d 	bl	80074dc <__ssputs_r>
 8007602:	3001      	adds	r0, #1
 8007604:	f000 80aa 	beq.w	800775c <_svfiprintf_r+0x1c8>
 8007608:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800760a:	445a      	add	r2, fp
 800760c:	9209      	str	r2, [sp, #36]	; 0x24
 800760e:	f89a 3000 	ldrb.w	r3, [sl]
 8007612:	2b00      	cmp	r3, #0
 8007614:	f000 80a2 	beq.w	800775c <_svfiprintf_r+0x1c8>
 8007618:	2300      	movs	r3, #0
 800761a:	f04f 32ff 	mov.w	r2, #4294967295
 800761e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007622:	f10a 0a01 	add.w	sl, sl, #1
 8007626:	9304      	str	r3, [sp, #16]
 8007628:	9307      	str	r3, [sp, #28]
 800762a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800762e:	931a      	str	r3, [sp, #104]	; 0x68
 8007630:	4654      	mov	r4, sl
 8007632:	2205      	movs	r2, #5
 8007634:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007638:	4851      	ldr	r0, [pc, #324]	; (8007780 <_svfiprintf_r+0x1ec>)
 800763a:	f7f8 fdf1 	bl	8000220 <memchr>
 800763e:	9a04      	ldr	r2, [sp, #16]
 8007640:	b9d8      	cbnz	r0, 800767a <_svfiprintf_r+0xe6>
 8007642:	06d0      	lsls	r0, r2, #27
 8007644:	bf44      	itt	mi
 8007646:	2320      	movmi	r3, #32
 8007648:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800764c:	0711      	lsls	r1, r2, #28
 800764e:	bf44      	itt	mi
 8007650:	232b      	movmi	r3, #43	; 0x2b
 8007652:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007656:	f89a 3000 	ldrb.w	r3, [sl]
 800765a:	2b2a      	cmp	r3, #42	; 0x2a
 800765c:	d015      	beq.n	800768a <_svfiprintf_r+0xf6>
 800765e:	9a07      	ldr	r2, [sp, #28]
 8007660:	4654      	mov	r4, sl
 8007662:	2000      	movs	r0, #0
 8007664:	f04f 0c0a 	mov.w	ip, #10
 8007668:	4621      	mov	r1, r4
 800766a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800766e:	3b30      	subs	r3, #48	; 0x30
 8007670:	2b09      	cmp	r3, #9
 8007672:	d94e      	bls.n	8007712 <_svfiprintf_r+0x17e>
 8007674:	b1b0      	cbz	r0, 80076a4 <_svfiprintf_r+0x110>
 8007676:	9207      	str	r2, [sp, #28]
 8007678:	e014      	b.n	80076a4 <_svfiprintf_r+0x110>
 800767a:	eba0 0308 	sub.w	r3, r0, r8
 800767e:	fa09 f303 	lsl.w	r3, r9, r3
 8007682:	4313      	orrs	r3, r2
 8007684:	9304      	str	r3, [sp, #16]
 8007686:	46a2      	mov	sl, r4
 8007688:	e7d2      	b.n	8007630 <_svfiprintf_r+0x9c>
 800768a:	9b03      	ldr	r3, [sp, #12]
 800768c:	1d19      	adds	r1, r3, #4
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	9103      	str	r1, [sp, #12]
 8007692:	2b00      	cmp	r3, #0
 8007694:	bfbb      	ittet	lt
 8007696:	425b      	neglt	r3, r3
 8007698:	f042 0202 	orrlt.w	r2, r2, #2
 800769c:	9307      	strge	r3, [sp, #28]
 800769e:	9307      	strlt	r3, [sp, #28]
 80076a0:	bfb8      	it	lt
 80076a2:	9204      	strlt	r2, [sp, #16]
 80076a4:	7823      	ldrb	r3, [r4, #0]
 80076a6:	2b2e      	cmp	r3, #46	; 0x2e
 80076a8:	d10c      	bne.n	80076c4 <_svfiprintf_r+0x130>
 80076aa:	7863      	ldrb	r3, [r4, #1]
 80076ac:	2b2a      	cmp	r3, #42	; 0x2a
 80076ae:	d135      	bne.n	800771c <_svfiprintf_r+0x188>
 80076b0:	9b03      	ldr	r3, [sp, #12]
 80076b2:	1d1a      	adds	r2, r3, #4
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	9203      	str	r2, [sp, #12]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	bfb8      	it	lt
 80076bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80076c0:	3402      	adds	r4, #2
 80076c2:	9305      	str	r3, [sp, #20]
 80076c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007790 <_svfiprintf_r+0x1fc>
 80076c8:	7821      	ldrb	r1, [r4, #0]
 80076ca:	2203      	movs	r2, #3
 80076cc:	4650      	mov	r0, sl
 80076ce:	f7f8 fda7 	bl	8000220 <memchr>
 80076d2:	b140      	cbz	r0, 80076e6 <_svfiprintf_r+0x152>
 80076d4:	2340      	movs	r3, #64	; 0x40
 80076d6:	eba0 000a 	sub.w	r0, r0, sl
 80076da:	fa03 f000 	lsl.w	r0, r3, r0
 80076de:	9b04      	ldr	r3, [sp, #16]
 80076e0:	4303      	orrs	r3, r0
 80076e2:	3401      	adds	r4, #1
 80076e4:	9304      	str	r3, [sp, #16]
 80076e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076ea:	4826      	ldr	r0, [pc, #152]	; (8007784 <_svfiprintf_r+0x1f0>)
 80076ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076f0:	2206      	movs	r2, #6
 80076f2:	f7f8 fd95 	bl	8000220 <memchr>
 80076f6:	2800      	cmp	r0, #0
 80076f8:	d038      	beq.n	800776c <_svfiprintf_r+0x1d8>
 80076fa:	4b23      	ldr	r3, [pc, #140]	; (8007788 <_svfiprintf_r+0x1f4>)
 80076fc:	bb1b      	cbnz	r3, 8007746 <_svfiprintf_r+0x1b2>
 80076fe:	9b03      	ldr	r3, [sp, #12]
 8007700:	3307      	adds	r3, #7
 8007702:	f023 0307 	bic.w	r3, r3, #7
 8007706:	3308      	adds	r3, #8
 8007708:	9303      	str	r3, [sp, #12]
 800770a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800770c:	4433      	add	r3, r6
 800770e:	9309      	str	r3, [sp, #36]	; 0x24
 8007710:	e767      	b.n	80075e2 <_svfiprintf_r+0x4e>
 8007712:	fb0c 3202 	mla	r2, ip, r2, r3
 8007716:	460c      	mov	r4, r1
 8007718:	2001      	movs	r0, #1
 800771a:	e7a5      	b.n	8007668 <_svfiprintf_r+0xd4>
 800771c:	2300      	movs	r3, #0
 800771e:	3401      	adds	r4, #1
 8007720:	9305      	str	r3, [sp, #20]
 8007722:	4619      	mov	r1, r3
 8007724:	f04f 0c0a 	mov.w	ip, #10
 8007728:	4620      	mov	r0, r4
 800772a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800772e:	3a30      	subs	r2, #48	; 0x30
 8007730:	2a09      	cmp	r2, #9
 8007732:	d903      	bls.n	800773c <_svfiprintf_r+0x1a8>
 8007734:	2b00      	cmp	r3, #0
 8007736:	d0c5      	beq.n	80076c4 <_svfiprintf_r+0x130>
 8007738:	9105      	str	r1, [sp, #20]
 800773a:	e7c3      	b.n	80076c4 <_svfiprintf_r+0x130>
 800773c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007740:	4604      	mov	r4, r0
 8007742:	2301      	movs	r3, #1
 8007744:	e7f0      	b.n	8007728 <_svfiprintf_r+0x194>
 8007746:	ab03      	add	r3, sp, #12
 8007748:	9300      	str	r3, [sp, #0]
 800774a:	462a      	mov	r2, r5
 800774c:	4b0f      	ldr	r3, [pc, #60]	; (800778c <_svfiprintf_r+0x1f8>)
 800774e:	a904      	add	r1, sp, #16
 8007750:	4638      	mov	r0, r7
 8007752:	f7fd ffc9 	bl	80056e8 <_printf_float>
 8007756:	1c42      	adds	r2, r0, #1
 8007758:	4606      	mov	r6, r0
 800775a:	d1d6      	bne.n	800770a <_svfiprintf_r+0x176>
 800775c:	89ab      	ldrh	r3, [r5, #12]
 800775e:	065b      	lsls	r3, r3, #25
 8007760:	f53f af2c 	bmi.w	80075bc <_svfiprintf_r+0x28>
 8007764:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007766:	b01d      	add	sp, #116	; 0x74
 8007768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800776c:	ab03      	add	r3, sp, #12
 800776e:	9300      	str	r3, [sp, #0]
 8007770:	462a      	mov	r2, r5
 8007772:	4b06      	ldr	r3, [pc, #24]	; (800778c <_svfiprintf_r+0x1f8>)
 8007774:	a904      	add	r1, sp, #16
 8007776:	4638      	mov	r0, r7
 8007778:	f7fe fa5a 	bl	8005c30 <_printf_i>
 800777c:	e7eb      	b.n	8007756 <_svfiprintf_r+0x1c2>
 800777e:	bf00      	nop
 8007780:	0800a56c 	.word	0x0800a56c
 8007784:	0800a576 	.word	0x0800a576
 8007788:	080056e9 	.word	0x080056e9
 800778c:	080074dd 	.word	0x080074dd
 8007790:	0800a572 	.word	0x0800a572

08007794 <_sbrk_r>:
 8007794:	b538      	push	{r3, r4, r5, lr}
 8007796:	4d06      	ldr	r5, [pc, #24]	; (80077b0 <_sbrk_r+0x1c>)
 8007798:	2300      	movs	r3, #0
 800779a:	4604      	mov	r4, r0
 800779c:	4608      	mov	r0, r1
 800779e:	602b      	str	r3, [r5, #0]
 80077a0:	f7fb f87a 	bl	8002898 <_sbrk>
 80077a4:	1c43      	adds	r3, r0, #1
 80077a6:	d102      	bne.n	80077ae <_sbrk_r+0x1a>
 80077a8:	682b      	ldr	r3, [r5, #0]
 80077aa:	b103      	cbz	r3, 80077ae <_sbrk_r+0x1a>
 80077ac:	6023      	str	r3, [r4, #0]
 80077ae:	bd38      	pop	{r3, r4, r5, pc}
 80077b0:	20000334 	.word	0x20000334

080077b4 <__assert_func>:
 80077b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80077b6:	4614      	mov	r4, r2
 80077b8:	461a      	mov	r2, r3
 80077ba:	4b09      	ldr	r3, [pc, #36]	; (80077e0 <__assert_func+0x2c>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4605      	mov	r5, r0
 80077c0:	68d8      	ldr	r0, [r3, #12]
 80077c2:	b14c      	cbz	r4, 80077d8 <__assert_func+0x24>
 80077c4:	4b07      	ldr	r3, [pc, #28]	; (80077e4 <__assert_func+0x30>)
 80077c6:	9100      	str	r1, [sp, #0]
 80077c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80077cc:	4906      	ldr	r1, [pc, #24]	; (80077e8 <__assert_func+0x34>)
 80077ce:	462b      	mov	r3, r5
 80077d0:	f000 f80e 	bl	80077f0 <fiprintf>
 80077d4:	f000 faac 	bl	8007d30 <abort>
 80077d8:	4b04      	ldr	r3, [pc, #16]	; (80077ec <__assert_func+0x38>)
 80077da:	461c      	mov	r4, r3
 80077dc:	e7f3      	b.n	80077c6 <__assert_func+0x12>
 80077de:	bf00      	nop
 80077e0:	20000014 	.word	0x20000014
 80077e4:	0800a57d 	.word	0x0800a57d
 80077e8:	0800a58a 	.word	0x0800a58a
 80077ec:	0800a5b8 	.word	0x0800a5b8

080077f0 <fiprintf>:
 80077f0:	b40e      	push	{r1, r2, r3}
 80077f2:	b503      	push	{r0, r1, lr}
 80077f4:	4601      	mov	r1, r0
 80077f6:	ab03      	add	r3, sp, #12
 80077f8:	4805      	ldr	r0, [pc, #20]	; (8007810 <fiprintf+0x20>)
 80077fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80077fe:	6800      	ldr	r0, [r0, #0]
 8007800:	9301      	str	r3, [sp, #4]
 8007802:	f000 f897 	bl	8007934 <_vfiprintf_r>
 8007806:	b002      	add	sp, #8
 8007808:	f85d eb04 	ldr.w	lr, [sp], #4
 800780c:	b003      	add	sp, #12
 800780e:	4770      	bx	lr
 8007810:	20000014 	.word	0x20000014

08007814 <__ascii_mbtowc>:
 8007814:	b082      	sub	sp, #8
 8007816:	b901      	cbnz	r1, 800781a <__ascii_mbtowc+0x6>
 8007818:	a901      	add	r1, sp, #4
 800781a:	b142      	cbz	r2, 800782e <__ascii_mbtowc+0x1a>
 800781c:	b14b      	cbz	r3, 8007832 <__ascii_mbtowc+0x1e>
 800781e:	7813      	ldrb	r3, [r2, #0]
 8007820:	600b      	str	r3, [r1, #0]
 8007822:	7812      	ldrb	r2, [r2, #0]
 8007824:	1e10      	subs	r0, r2, #0
 8007826:	bf18      	it	ne
 8007828:	2001      	movne	r0, #1
 800782a:	b002      	add	sp, #8
 800782c:	4770      	bx	lr
 800782e:	4610      	mov	r0, r2
 8007830:	e7fb      	b.n	800782a <__ascii_mbtowc+0x16>
 8007832:	f06f 0001 	mvn.w	r0, #1
 8007836:	e7f8      	b.n	800782a <__ascii_mbtowc+0x16>

08007838 <memmove>:
 8007838:	4288      	cmp	r0, r1
 800783a:	b510      	push	{r4, lr}
 800783c:	eb01 0402 	add.w	r4, r1, r2
 8007840:	d902      	bls.n	8007848 <memmove+0x10>
 8007842:	4284      	cmp	r4, r0
 8007844:	4623      	mov	r3, r4
 8007846:	d807      	bhi.n	8007858 <memmove+0x20>
 8007848:	1e43      	subs	r3, r0, #1
 800784a:	42a1      	cmp	r1, r4
 800784c:	d008      	beq.n	8007860 <memmove+0x28>
 800784e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007852:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007856:	e7f8      	b.n	800784a <memmove+0x12>
 8007858:	4402      	add	r2, r0
 800785a:	4601      	mov	r1, r0
 800785c:	428a      	cmp	r2, r1
 800785e:	d100      	bne.n	8007862 <memmove+0x2a>
 8007860:	bd10      	pop	{r4, pc}
 8007862:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007866:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800786a:	e7f7      	b.n	800785c <memmove+0x24>

0800786c <__malloc_lock>:
 800786c:	4801      	ldr	r0, [pc, #4]	; (8007874 <__malloc_lock+0x8>)
 800786e:	f000 bc1f 	b.w	80080b0 <__retarget_lock_acquire_recursive>
 8007872:	bf00      	nop
 8007874:	20000338 	.word	0x20000338

08007878 <__malloc_unlock>:
 8007878:	4801      	ldr	r0, [pc, #4]	; (8007880 <__malloc_unlock+0x8>)
 800787a:	f000 bc1a 	b.w	80080b2 <__retarget_lock_release_recursive>
 800787e:	bf00      	nop
 8007880:	20000338 	.word	0x20000338

08007884 <_realloc_r>:
 8007884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007888:	4680      	mov	r8, r0
 800788a:	4614      	mov	r4, r2
 800788c:	460e      	mov	r6, r1
 800788e:	b921      	cbnz	r1, 800789a <_realloc_r+0x16>
 8007890:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007894:	4611      	mov	r1, r2
 8007896:	f7ff bdad 	b.w	80073f4 <_malloc_r>
 800789a:	b92a      	cbnz	r2, 80078a8 <_realloc_r+0x24>
 800789c:	f7ff fd3e 	bl	800731c <_free_r>
 80078a0:	4625      	mov	r5, r4
 80078a2:	4628      	mov	r0, r5
 80078a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078a8:	f000 fc6a 	bl	8008180 <_malloc_usable_size_r>
 80078ac:	4284      	cmp	r4, r0
 80078ae:	4607      	mov	r7, r0
 80078b0:	d802      	bhi.n	80078b8 <_realloc_r+0x34>
 80078b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80078b6:	d812      	bhi.n	80078de <_realloc_r+0x5a>
 80078b8:	4621      	mov	r1, r4
 80078ba:	4640      	mov	r0, r8
 80078bc:	f7ff fd9a 	bl	80073f4 <_malloc_r>
 80078c0:	4605      	mov	r5, r0
 80078c2:	2800      	cmp	r0, #0
 80078c4:	d0ed      	beq.n	80078a2 <_realloc_r+0x1e>
 80078c6:	42bc      	cmp	r4, r7
 80078c8:	4622      	mov	r2, r4
 80078ca:	4631      	mov	r1, r6
 80078cc:	bf28      	it	cs
 80078ce:	463a      	movcs	r2, r7
 80078d0:	f7ff f97c 	bl	8006bcc <memcpy>
 80078d4:	4631      	mov	r1, r6
 80078d6:	4640      	mov	r0, r8
 80078d8:	f7ff fd20 	bl	800731c <_free_r>
 80078dc:	e7e1      	b.n	80078a2 <_realloc_r+0x1e>
 80078de:	4635      	mov	r5, r6
 80078e0:	e7df      	b.n	80078a2 <_realloc_r+0x1e>

080078e2 <__sfputc_r>:
 80078e2:	6893      	ldr	r3, [r2, #8]
 80078e4:	3b01      	subs	r3, #1
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	b410      	push	{r4}
 80078ea:	6093      	str	r3, [r2, #8]
 80078ec:	da08      	bge.n	8007900 <__sfputc_r+0x1e>
 80078ee:	6994      	ldr	r4, [r2, #24]
 80078f0:	42a3      	cmp	r3, r4
 80078f2:	db01      	blt.n	80078f8 <__sfputc_r+0x16>
 80078f4:	290a      	cmp	r1, #10
 80078f6:	d103      	bne.n	8007900 <__sfputc_r+0x1e>
 80078f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078fc:	f000 b94a 	b.w	8007b94 <__swbuf_r>
 8007900:	6813      	ldr	r3, [r2, #0]
 8007902:	1c58      	adds	r0, r3, #1
 8007904:	6010      	str	r0, [r2, #0]
 8007906:	7019      	strb	r1, [r3, #0]
 8007908:	4608      	mov	r0, r1
 800790a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800790e:	4770      	bx	lr

08007910 <__sfputs_r>:
 8007910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007912:	4606      	mov	r6, r0
 8007914:	460f      	mov	r7, r1
 8007916:	4614      	mov	r4, r2
 8007918:	18d5      	adds	r5, r2, r3
 800791a:	42ac      	cmp	r4, r5
 800791c:	d101      	bne.n	8007922 <__sfputs_r+0x12>
 800791e:	2000      	movs	r0, #0
 8007920:	e007      	b.n	8007932 <__sfputs_r+0x22>
 8007922:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007926:	463a      	mov	r2, r7
 8007928:	4630      	mov	r0, r6
 800792a:	f7ff ffda 	bl	80078e2 <__sfputc_r>
 800792e:	1c43      	adds	r3, r0, #1
 8007930:	d1f3      	bne.n	800791a <__sfputs_r+0xa>
 8007932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007934 <_vfiprintf_r>:
 8007934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007938:	460d      	mov	r5, r1
 800793a:	b09d      	sub	sp, #116	; 0x74
 800793c:	4614      	mov	r4, r2
 800793e:	4698      	mov	r8, r3
 8007940:	4606      	mov	r6, r0
 8007942:	b118      	cbz	r0, 800794c <_vfiprintf_r+0x18>
 8007944:	6983      	ldr	r3, [r0, #24]
 8007946:	b90b      	cbnz	r3, 800794c <_vfiprintf_r+0x18>
 8007948:	f000 fb14 	bl	8007f74 <__sinit>
 800794c:	4b89      	ldr	r3, [pc, #548]	; (8007b74 <_vfiprintf_r+0x240>)
 800794e:	429d      	cmp	r5, r3
 8007950:	d11b      	bne.n	800798a <_vfiprintf_r+0x56>
 8007952:	6875      	ldr	r5, [r6, #4]
 8007954:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007956:	07d9      	lsls	r1, r3, #31
 8007958:	d405      	bmi.n	8007966 <_vfiprintf_r+0x32>
 800795a:	89ab      	ldrh	r3, [r5, #12]
 800795c:	059a      	lsls	r2, r3, #22
 800795e:	d402      	bmi.n	8007966 <_vfiprintf_r+0x32>
 8007960:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007962:	f000 fba5 	bl	80080b0 <__retarget_lock_acquire_recursive>
 8007966:	89ab      	ldrh	r3, [r5, #12]
 8007968:	071b      	lsls	r3, r3, #28
 800796a:	d501      	bpl.n	8007970 <_vfiprintf_r+0x3c>
 800796c:	692b      	ldr	r3, [r5, #16]
 800796e:	b9eb      	cbnz	r3, 80079ac <_vfiprintf_r+0x78>
 8007970:	4629      	mov	r1, r5
 8007972:	4630      	mov	r0, r6
 8007974:	f000 f96e 	bl	8007c54 <__swsetup_r>
 8007978:	b1c0      	cbz	r0, 80079ac <_vfiprintf_r+0x78>
 800797a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800797c:	07dc      	lsls	r4, r3, #31
 800797e:	d50e      	bpl.n	800799e <_vfiprintf_r+0x6a>
 8007980:	f04f 30ff 	mov.w	r0, #4294967295
 8007984:	b01d      	add	sp, #116	; 0x74
 8007986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800798a:	4b7b      	ldr	r3, [pc, #492]	; (8007b78 <_vfiprintf_r+0x244>)
 800798c:	429d      	cmp	r5, r3
 800798e:	d101      	bne.n	8007994 <_vfiprintf_r+0x60>
 8007990:	68b5      	ldr	r5, [r6, #8]
 8007992:	e7df      	b.n	8007954 <_vfiprintf_r+0x20>
 8007994:	4b79      	ldr	r3, [pc, #484]	; (8007b7c <_vfiprintf_r+0x248>)
 8007996:	429d      	cmp	r5, r3
 8007998:	bf08      	it	eq
 800799a:	68f5      	ldreq	r5, [r6, #12]
 800799c:	e7da      	b.n	8007954 <_vfiprintf_r+0x20>
 800799e:	89ab      	ldrh	r3, [r5, #12]
 80079a0:	0598      	lsls	r0, r3, #22
 80079a2:	d4ed      	bmi.n	8007980 <_vfiprintf_r+0x4c>
 80079a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079a6:	f000 fb84 	bl	80080b2 <__retarget_lock_release_recursive>
 80079aa:	e7e9      	b.n	8007980 <_vfiprintf_r+0x4c>
 80079ac:	2300      	movs	r3, #0
 80079ae:	9309      	str	r3, [sp, #36]	; 0x24
 80079b0:	2320      	movs	r3, #32
 80079b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80079b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80079ba:	2330      	movs	r3, #48	; 0x30
 80079bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007b80 <_vfiprintf_r+0x24c>
 80079c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079c4:	f04f 0901 	mov.w	r9, #1
 80079c8:	4623      	mov	r3, r4
 80079ca:	469a      	mov	sl, r3
 80079cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079d0:	b10a      	cbz	r2, 80079d6 <_vfiprintf_r+0xa2>
 80079d2:	2a25      	cmp	r2, #37	; 0x25
 80079d4:	d1f9      	bne.n	80079ca <_vfiprintf_r+0x96>
 80079d6:	ebba 0b04 	subs.w	fp, sl, r4
 80079da:	d00b      	beq.n	80079f4 <_vfiprintf_r+0xc0>
 80079dc:	465b      	mov	r3, fp
 80079de:	4622      	mov	r2, r4
 80079e0:	4629      	mov	r1, r5
 80079e2:	4630      	mov	r0, r6
 80079e4:	f7ff ff94 	bl	8007910 <__sfputs_r>
 80079e8:	3001      	adds	r0, #1
 80079ea:	f000 80aa 	beq.w	8007b42 <_vfiprintf_r+0x20e>
 80079ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079f0:	445a      	add	r2, fp
 80079f2:	9209      	str	r2, [sp, #36]	; 0x24
 80079f4:	f89a 3000 	ldrb.w	r3, [sl]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	f000 80a2 	beq.w	8007b42 <_vfiprintf_r+0x20e>
 80079fe:	2300      	movs	r3, #0
 8007a00:	f04f 32ff 	mov.w	r2, #4294967295
 8007a04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a08:	f10a 0a01 	add.w	sl, sl, #1
 8007a0c:	9304      	str	r3, [sp, #16]
 8007a0e:	9307      	str	r3, [sp, #28]
 8007a10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a14:	931a      	str	r3, [sp, #104]	; 0x68
 8007a16:	4654      	mov	r4, sl
 8007a18:	2205      	movs	r2, #5
 8007a1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a1e:	4858      	ldr	r0, [pc, #352]	; (8007b80 <_vfiprintf_r+0x24c>)
 8007a20:	f7f8 fbfe 	bl	8000220 <memchr>
 8007a24:	9a04      	ldr	r2, [sp, #16]
 8007a26:	b9d8      	cbnz	r0, 8007a60 <_vfiprintf_r+0x12c>
 8007a28:	06d1      	lsls	r1, r2, #27
 8007a2a:	bf44      	itt	mi
 8007a2c:	2320      	movmi	r3, #32
 8007a2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a32:	0713      	lsls	r3, r2, #28
 8007a34:	bf44      	itt	mi
 8007a36:	232b      	movmi	r3, #43	; 0x2b
 8007a38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a3c:	f89a 3000 	ldrb.w	r3, [sl]
 8007a40:	2b2a      	cmp	r3, #42	; 0x2a
 8007a42:	d015      	beq.n	8007a70 <_vfiprintf_r+0x13c>
 8007a44:	9a07      	ldr	r2, [sp, #28]
 8007a46:	4654      	mov	r4, sl
 8007a48:	2000      	movs	r0, #0
 8007a4a:	f04f 0c0a 	mov.w	ip, #10
 8007a4e:	4621      	mov	r1, r4
 8007a50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a54:	3b30      	subs	r3, #48	; 0x30
 8007a56:	2b09      	cmp	r3, #9
 8007a58:	d94e      	bls.n	8007af8 <_vfiprintf_r+0x1c4>
 8007a5a:	b1b0      	cbz	r0, 8007a8a <_vfiprintf_r+0x156>
 8007a5c:	9207      	str	r2, [sp, #28]
 8007a5e:	e014      	b.n	8007a8a <_vfiprintf_r+0x156>
 8007a60:	eba0 0308 	sub.w	r3, r0, r8
 8007a64:	fa09 f303 	lsl.w	r3, r9, r3
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	9304      	str	r3, [sp, #16]
 8007a6c:	46a2      	mov	sl, r4
 8007a6e:	e7d2      	b.n	8007a16 <_vfiprintf_r+0xe2>
 8007a70:	9b03      	ldr	r3, [sp, #12]
 8007a72:	1d19      	adds	r1, r3, #4
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	9103      	str	r1, [sp, #12]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	bfbb      	ittet	lt
 8007a7c:	425b      	neglt	r3, r3
 8007a7e:	f042 0202 	orrlt.w	r2, r2, #2
 8007a82:	9307      	strge	r3, [sp, #28]
 8007a84:	9307      	strlt	r3, [sp, #28]
 8007a86:	bfb8      	it	lt
 8007a88:	9204      	strlt	r2, [sp, #16]
 8007a8a:	7823      	ldrb	r3, [r4, #0]
 8007a8c:	2b2e      	cmp	r3, #46	; 0x2e
 8007a8e:	d10c      	bne.n	8007aaa <_vfiprintf_r+0x176>
 8007a90:	7863      	ldrb	r3, [r4, #1]
 8007a92:	2b2a      	cmp	r3, #42	; 0x2a
 8007a94:	d135      	bne.n	8007b02 <_vfiprintf_r+0x1ce>
 8007a96:	9b03      	ldr	r3, [sp, #12]
 8007a98:	1d1a      	adds	r2, r3, #4
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	9203      	str	r2, [sp, #12]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	bfb8      	it	lt
 8007aa2:	f04f 33ff 	movlt.w	r3, #4294967295
 8007aa6:	3402      	adds	r4, #2
 8007aa8:	9305      	str	r3, [sp, #20]
 8007aaa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007b90 <_vfiprintf_r+0x25c>
 8007aae:	7821      	ldrb	r1, [r4, #0]
 8007ab0:	2203      	movs	r2, #3
 8007ab2:	4650      	mov	r0, sl
 8007ab4:	f7f8 fbb4 	bl	8000220 <memchr>
 8007ab8:	b140      	cbz	r0, 8007acc <_vfiprintf_r+0x198>
 8007aba:	2340      	movs	r3, #64	; 0x40
 8007abc:	eba0 000a 	sub.w	r0, r0, sl
 8007ac0:	fa03 f000 	lsl.w	r0, r3, r0
 8007ac4:	9b04      	ldr	r3, [sp, #16]
 8007ac6:	4303      	orrs	r3, r0
 8007ac8:	3401      	adds	r4, #1
 8007aca:	9304      	str	r3, [sp, #16]
 8007acc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ad0:	482c      	ldr	r0, [pc, #176]	; (8007b84 <_vfiprintf_r+0x250>)
 8007ad2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ad6:	2206      	movs	r2, #6
 8007ad8:	f7f8 fba2 	bl	8000220 <memchr>
 8007adc:	2800      	cmp	r0, #0
 8007ade:	d03f      	beq.n	8007b60 <_vfiprintf_r+0x22c>
 8007ae0:	4b29      	ldr	r3, [pc, #164]	; (8007b88 <_vfiprintf_r+0x254>)
 8007ae2:	bb1b      	cbnz	r3, 8007b2c <_vfiprintf_r+0x1f8>
 8007ae4:	9b03      	ldr	r3, [sp, #12]
 8007ae6:	3307      	adds	r3, #7
 8007ae8:	f023 0307 	bic.w	r3, r3, #7
 8007aec:	3308      	adds	r3, #8
 8007aee:	9303      	str	r3, [sp, #12]
 8007af0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007af2:	443b      	add	r3, r7
 8007af4:	9309      	str	r3, [sp, #36]	; 0x24
 8007af6:	e767      	b.n	80079c8 <_vfiprintf_r+0x94>
 8007af8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007afc:	460c      	mov	r4, r1
 8007afe:	2001      	movs	r0, #1
 8007b00:	e7a5      	b.n	8007a4e <_vfiprintf_r+0x11a>
 8007b02:	2300      	movs	r3, #0
 8007b04:	3401      	adds	r4, #1
 8007b06:	9305      	str	r3, [sp, #20]
 8007b08:	4619      	mov	r1, r3
 8007b0a:	f04f 0c0a 	mov.w	ip, #10
 8007b0e:	4620      	mov	r0, r4
 8007b10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b14:	3a30      	subs	r2, #48	; 0x30
 8007b16:	2a09      	cmp	r2, #9
 8007b18:	d903      	bls.n	8007b22 <_vfiprintf_r+0x1ee>
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d0c5      	beq.n	8007aaa <_vfiprintf_r+0x176>
 8007b1e:	9105      	str	r1, [sp, #20]
 8007b20:	e7c3      	b.n	8007aaa <_vfiprintf_r+0x176>
 8007b22:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b26:	4604      	mov	r4, r0
 8007b28:	2301      	movs	r3, #1
 8007b2a:	e7f0      	b.n	8007b0e <_vfiprintf_r+0x1da>
 8007b2c:	ab03      	add	r3, sp, #12
 8007b2e:	9300      	str	r3, [sp, #0]
 8007b30:	462a      	mov	r2, r5
 8007b32:	4b16      	ldr	r3, [pc, #88]	; (8007b8c <_vfiprintf_r+0x258>)
 8007b34:	a904      	add	r1, sp, #16
 8007b36:	4630      	mov	r0, r6
 8007b38:	f7fd fdd6 	bl	80056e8 <_printf_float>
 8007b3c:	4607      	mov	r7, r0
 8007b3e:	1c78      	adds	r0, r7, #1
 8007b40:	d1d6      	bne.n	8007af0 <_vfiprintf_r+0x1bc>
 8007b42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b44:	07d9      	lsls	r1, r3, #31
 8007b46:	d405      	bmi.n	8007b54 <_vfiprintf_r+0x220>
 8007b48:	89ab      	ldrh	r3, [r5, #12]
 8007b4a:	059a      	lsls	r2, r3, #22
 8007b4c:	d402      	bmi.n	8007b54 <_vfiprintf_r+0x220>
 8007b4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b50:	f000 faaf 	bl	80080b2 <__retarget_lock_release_recursive>
 8007b54:	89ab      	ldrh	r3, [r5, #12]
 8007b56:	065b      	lsls	r3, r3, #25
 8007b58:	f53f af12 	bmi.w	8007980 <_vfiprintf_r+0x4c>
 8007b5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b5e:	e711      	b.n	8007984 <_vfiprintf_r+0x50>
 8007b60:	ab03      	add	r3, sp, #12
 8007b62:	9300      	str	r3, [sp, #0]
 8007b64:	462a      	mov	r2, r5
 8007b66:	4b09      	ldr	r3, [pc, #36]	; (8007b8c <_vfiprintf_r+0x258>)
 8007b68:	a904      	add	r1, sp, #16
 8007b6a:	4630      	mov	r0, r6
 8007b6c:	f7fe f860 	bl	8005c30 <_printf_i>
 8007b70:	e7e4      	b.n	8007b3c <_vfiprintf_r+0x208>
 8007b72:	bf00      	nop
 8007b74:	0800a6e4 	.word	0x0800a6e4
 8007b78:	0800a704 	.word	0x0800a704
 8007b7c:	0800a6c4 	.word	0x0800a6c4
 8007b80:	0800a56c 	.word	0x0800a56c
 8007b84:	0800a576 	.word	0x0800a576
 8007b88:	080056e9 	.word	0x080056e9
 8007b8c:	08007911 	.word	0x08007911
 8007b90:	0800a572 	.word	0x0800a572

08007b94 <__swbuf_r>:
 8007b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b96:	460e      	mov	r6, r1
 8007b98:	4614      	mov	r4, r2
 8007b9a:	4605      	mov	r5, r0
 8007b9c:	b118      	cbz	r0, 8007ba6 <__swbuf_r+0x12>
 8007b9e:	6983      	ldr	r3, [r0, #24]
 8007ba0:	b90b      	cbnz	r3, 8007ba6 <__swbuf_r+0x12>
 8007ba2:	f000 f9e7 	bl	8007f74 <__sinit>
 8007ba6:	4b21      	ldr	r3, [pc, #132]	; (8007c2c <__swbuf_r+0x98>)
 8007ba8:	429c      	cmp	r4, r3
 8007baa:	d12b      	bne.n	8007c04 <__swbuf_r+0x70>
 8007bac:	686c      	ldr	r4, [r5, #4]
 8007bae:	69a3      	ldr	r3, [r4, #24]
 8007bb0:	60a3      	str	r3, [r4, #8]
 8007bb2:	89a3      	ldrh	r3, [r4, #12]
 8007bb4:	071a      	lsls	r2, r3, #28
 8007bb6:	d52f      	bpl.n	8007c18 <__swbuf_r+0x84>
 8007bb8:	6923      	ldr	r3, [r4, #16]
 8007bba:	b36b      	cbz	r3, 8007c18 <__swbuf_r+0x84>
 8007bbc:	6923      	ldr	r3, [r4, #16]
 8007bbe:	6820      	ldr	r0, [r4, #0]
 8007bc0:	1ac0      	subs	r0, r0, r3
 8007bc2:	6963      	ldr	r3, [r4, #20]
 8007bc4:	b2f6      	uxtb	r6, r6
 8007bc6:	4283      	cmp	r3, r0
 8007bc8:	4637      	mov	r7, r6
 8007bca:	dc04      	bgt.n	8007bd6 <__swbuf_r+0x42>
 8007bcc:	4621      	mov	r1, r4
 8007bce:	4628      	mov	r0, r5
 8007bd0:	f000 f93c 	bl	8007e4c <_fflush_r>
 8007bd4:	bb30      	cbnz	r0, 8007c24 <__swbuf_r+0x90>
 8007bd6:	68a3      	ldr	r3, [r4, #8]
 8007bd8:	3b01      	subs	r3, #1
 8007bda:	60a3      	str	r3, [r4, #8]
 8007bdc:	6823      	ldr	r3, [r4, #0]
 8007bde:	1c5a      	adds	r2, r3, #1
 8007be0:	6022      	str	r2, [r4, #0]
 8007be2:	701e      	strb	r6, [r3, #0]
 8007be4:	6963      	ldr	r3, [r4, #20]
 8007be6:	3001      	adds	r0, #1
 8007be8:	4283      	cmp	r3, r0
 8007bea:	d004      	beq.n	8007bf6 <__swbuf_r+0x62>
 8007bec:	89a3      	ldrh	r3, [r4, #12]
 8007bee:	07db      	lsls	r3, r3, #31
 8007bf0:	d506      	bpl.n	8007c00 <__swbuf_r+0x6c>
 8007bf2:	2e0a      	cmp	r6, #10
 8007bf4:	d104      	bne.n	8007c00 <__swbuf_r+0x6c>
 8007bf6:	4621      	mov	r1, r4
 8007bf8:	4628      	mov	r0, r5
 8007bfa:	f000 f927 	bl	8007e4c <_fflush_r>
 8007bfe:	b988      	cbnz	r0, 8007c24 <__swbuf_r+0x90>
 8007c00:	4638      	mov	r0, r7
 8007c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c04:	4b0a      	ldr	r3, [pc, #40]	; (8007c30 <__swbuf_r+0x9c>)
 8007c06:	429c      	cmp	r4, r3
 8007c08:	d101      	bne.n	8007c0e <__swbuf_r+0x7a>
 8007c0a:	68ac      	ldr	r4, [r5, #8]
 8007c0c:	e7cf      	b.n	8007bae <__swbuf_r+0x1a>
 8007c0e:	4b09      	ldr	r3, [pc, #36]	; (8007c34 <__swbuf_r+0xa0>)
 8007c10:	429c      	cmp	r4, r3
 8007c12:	bf08      	it	eq
 8007c14:	68ec      	ldreq	r4, [r5, #12]
 8007c16:	e7ca      	b.n	8007bae <__swbuf_r+0x1a>
 8007c18:	4621      	mov	r1, r4
 8007c1a:	4628      	mov	r0, r5
 8007c1c:	f000 f81a 	bl	8007c54 <__swsetup_r>
 8007c20:	2800      	cmp	r0, #0
 8007c22:	d0cb      	beq.n	8007bbc <__swbuf_r+0x28>
 8007c24:	f04f 37ff 	mov.w	r7, #4294967295
 8007c28:	e7ea      	b.n	8007c00 <__swbuf_r+0x6c>
 8007c2a:	bf00      	nop
 8007c2c:	0800a6e4 	.word	0x0800a6e4
 8007c30:	0800a704 	.word	0x0800a704
 8007c34:	0800a6c4 	.word	0x0800a6c4

08007c38 <__ascii_wctomb>:
 8007c38:	b149      	cbz	r1, 8007c4e <__ascii_wctomb+0x16>
 8007c3a:	2aff      	cmp	r2, #255	; 0xff
 8007c3c:	bf85      	ittet	hi
 8007c3e:	238a      	movhi	r3, #138	; 0x8a
 8007c40:	6003      	strhi	r3, [r0, #0]
 8007c42:	700a      	strbls	r2, [r1, #0]
 8007c44:	f04f 30ff 	movhi.w	r0, #4294967295
 8007c48:	bf98      	it	ls
 8007c4a:	2001      	movls	r0, #1
 8007c4c:	4770      	bx	lr
 8007c4e:	4608      	mov	r0, r1
 8007c50:	4770      	bx	lr
	...

08007c54 <__swsetup_r>:
 8007c54:	4b32      	ldr	r3, [pc, #200]	; (8007d20 <__swsetup_r+0xcc>)
 8007c56:	b570      	push	{r4, r5, r6, lr}
 8007c58:	681d      	ldr	r5, [r3, #0]
 8007c5a:	4606      	mov	r6, r0
 8007c5c:	460c      	mov	r4, r1
 8007c5e:	b125      	cbz	r5, 8007c6a <__swsetup_r+0x16>
 8007c60:	69ab      	ldr	r3, [r5, #24]
 8007c62:	b913      	cbnz	r3, 8007c6a <__swsetup_r+0x16>
 8007c64:	4628      	mov	r0, r5
 8007c66:	f000 f985 	bl	8007f74 <__sinit>
 8007c6a:	4b2e      	ldr	r3, [pc, #184]	; (8007d24 <__swsetup_r+0xd0>)
 8007c6c:	429c      	cmp	r4, r3
 8007c6e:	d10f      	bne.n	8007c90 <__swsetup_r+0x3c>
 8007c70:	686c      	ldr	r4, [r5, #4]
 8007c72:	89a3      	ldrh	r3, [r4, #12]
 8007c74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c78:	0719      	lsls	r1, r3, #28
 8007c7a:	d42c      	bmi.n	8007cd6 <__swsetup_r+0x82>
 8007c7c:	06dd      	lsls	r5, r3, #27
 8007c7e:	d411      	bmi.n	8007ca4 <__swsetup_r+0x50>
 8007c80:	2309      	movs	r3, #9
 8007c82:	6033      	str	r3, [r6, #0]
 8007c84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007c88:	81a3      	strh	r3, [r4, #12]
 8007c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c8e:	e03e      	b.n	8007d0e <__swsetup_r+0xba>
 8007c90:	4b25      	ldr	r3, [pc, #148]	; (8007d28 <__swsetup_r+0xd4>)
 8007c92:	429c      	cmp	r4, r3
 8007c94:	d101      	bne.n	8007c9a <__swsetup_r+0x46>
 8007c96:	68ac      	ldr	r4, [r5, #8]
 8007c98:	e7eb      	b.n	8007c72 <__swsetup_r+0x1e>
 8007c9a:	4b24      	ldr	r3, [pc, #144]	; (8007d2c <__swsetup_r+0xd8>)
 8007c9c:	429c      	cmp	r4, r3
 8007c9e:	bf08      	it	eq
 8007ca0:	68ec      	ldreq	r4, [r5, #12]
 8007ca2:	e7e6      	b.n	8007c72 <__swsetup_r+0x1e>
 8007ca4:	0758      	lsls	r0, r3, #29
 8007ca6:	d512      	bpl.n	8007cce <__swsetup_r+0x7a>
 8007ca8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007caa:	b141      	cbz	r1, 8007cbe <__swsetup_r+0x6a>
 8007cac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007cb0:	4299      	cmp	r1, r3
 8007cb2:	d002      	beq.n	8007cba <__swsetup_r+0x66>
 8007cb4:	4630      	mov	r0, r6
 8007cb6:	f7ff fb31 	bl	800731c <_free_r>
 8007cba:	2300      	movs	r3, #0
 8007cbc:	6363      	str	r3, [r4, #52]	; 0x34
 8007cbe:	89a3      	ldrh	r3, [r4, #12]
 8007cc0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007cc4:	81a3      	strh	r3, [r4, #12]
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	6063      	str	r3, [r4, #4]
 8007cca:	6923      	ldr	r3, [r4, #16]
 8007ccc:	6023      	str	r3, [r4, #0]
 8007cce:	89a3      	ldrh	r3, [r4, #12]
 8007cd0:	f043 0308 	orr.w	r3, r3, #8
 8007cd4:	81a3      	strh	r3, [r4, #12]
 8007cd6:	6923      	ldr	r3, [r4, #16]
 8007cd8:	b94b      	cbnz	r3, 8007cee <__swsetup_r+0x9a>
 8007cda:	89a3      	ldrh	r3, [r4, #12]
 8007cdc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007ce0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ce4:	d003      	beq.n	8007cee <__swsetup_r+0x9a>
 8007ce6:	4621      	mov	r1, r4
 8007ce8:	4630      	mov	r0, r6
 8007cea:	f000 fa09 	bl	8008100 <__smakebuf_r>
 8007cee:	89a0      	ldrh	r0, [r4, #12]
 8007cf0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007cf4:	f010 0301 	ands.w	r3, r0, #1
 8007cf8:	d00a      	beq.n	8007d10 <__swsetup_r+0xbc>
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	60a3      	str	r3, [r4, #8]
 8007cfe:	6963      	ldr	r3, [r4, #20]
 8007d00:	425b      	negs	r3, r3
 8007d02:	61a3      	str	r3, [r4, #24]
 8007d04:	6923      	ldr	r3, [r4, #16]
 8007d06:	b943      	cbnz	r3, 8007d1a <__swsetup_r+0xc6>
 8007d08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007d0c:	d1ba      	bne.n	8007c84 <__swsetup_r+0x30>
 8007d0e:	bd70      	pop	{r4, r5, r6, pc}
 8007d10:	0781      	lsls	r1, r0, #30
 8007d12:	bf58      	it	pl
 8007d14:	6963      	ldrpl	r3, [r4, #20]
 8007d16:	60a3      	str	r3, [r4, #8]
 8007d18:	e7f4      	b.n	8007d04 <__swsetup_r+0xb0>
 8007d1a:	2000      	movs	r0, #0
 8007d1c:	e7f7      	b.n	8007d0e <__swsetup_r+0xba>
 8007d1e:	bf00      	nop
 8007d20:	20000014 	.word	0x20000014
 8007d24:	0800a6e4 	.word	0x0800a6e4
 8007d28:	0800a704 	.word	0x0800a704
 8007d2c:	0800a6c4 	.word	0x0800a6c4

08007d30 <abort>:
 8007d30:	b508      	push	{r3, lr}
 8007d32:	2006      	movs	r0, #6
 8007d34:	f000 fa54 	bl	80081e0 <raise>
 8007d38:	2001      	movs	r0, #1
 8007d3a:	f7fa fd35 	bl	80027a8 <_exit>
	...

08007d40 <__sflush_r>:
 8007d40:	898a      	ldrh	r2, [r1, #12]
 8007d42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d46:	4605      	mov	r5, r0
 8007d48:	0710      	lsls	r0, r2, #28
 8007d4a:	460c      	mov	r4, r1
 8007d4c:	d458      	bmi.n	8007e00 <__sflush_r+0xc0>
 8007d4e:	684b      	ldr	r3, [r1, #4]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	dc05      	bgt.n	8007d60 <__sflush_r+0x20>
 8007d54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	dc02      	bgt.n	8007d60 <__sflush_r+0x20>
 8007d5a:	2000      	movs	r0, #0
 8007d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d62:	2e00      	cmp	r6, #0
 8007d64:	d0f9      	beq.n	8007d5a <__sflush_r+0x1a>
 8007d66:	2300      	movs	r3, #0
 8007d68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d6c:	682f      	ldr	r7, [r5, #0]
 8007d6e:	602b      	str	r3, [r5, #0]
 8007d70:	d032      	beq.n	8007dd8 <__sflush_r+0x98>
 8007d72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d74:	89a3      	ldrh	r3, [r4, #12]
 8007d76:	075a      	lsls	r2, r3, #29
 8007d78:	d505      	bpl.n	8007d86 <__sflush_r+0x46>
 8007d7a:	6863      	ldr	r3, [r4, #4]
 8007d7c:	1ac0      	subs	r0, r0, r3
 8007d7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d80:	b10b      	cbz	r3, 8007d86 <__sflush_r+0x46>
 8007d82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d84:	1ac0      	subs	r0, r0, r3
 8007d86:	2300      	movs	r3, #0
 8007d88:	4602      	mov	r2, r0
 8007d8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d8c:	6a21      	ldr	r1, [r4, #32]
 8007d8e:	4628      	mov	r0, r5
 8007d90:	47b0      	blx	r6
 8007d92:	1c43      	adds	r3, r0, #1
 8007d94:	89a3      	ldrh	r3, [r4, #12]
 8007d96:	d106      	bne.n	8007da6 <__sflush_r+0x66>
 8007d98:	6829      	ldr	r1, [r5, #0]
 8007d9a:	291d      	cmp	r1, #29
 8007d9c:	d82c      	bhi.n	8007df8 <__sflush_r+0xb8>
 8007d9e:	4a2a      	ldr	r2, [pc, #168]	; (8007e48 <__sflush_r+0x108>)
 8007da0:	40ca      	lsrs	r2, r1
 8007da2:	07d6      	lsls	r6, r2, #31
 8007da4:	d528      	bpl.n	8007df8 <__sflush_r+0xb8>
 8007da6:	2200      	movs	r2, #0
 8007da8:	6062      	str	r2, [r4, #4]
 8007daa:	04d9      	lsls	r1, r3, #19
 8007dac:	6922      	ldr	r2, [r4, #16]
 8007dae:	6022      	str	r2, [r4, #0]
 8007db0:	d504      	bpl.n	8007dbc <__sflush_r+0x7c>
 8007db2:	1c42      	adds	r2, r0, #1
 8007db4:	d101      	bne.n	8007dba <__sflush_r+0x7a>
 8007db6:	682b      	ldr	r3, [r5, #0]
 8007db8:	b903      	cbnz	r3, 8007dbc <__sflush_r+0x7c>
 8007dba:	6560      	str	r0, [r4, #84]	; 0x54
 8007dbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dbe:	602f      	str	r7, [r5, #0]
 8007dc0:	2900      	cmp	r1, #0
 8007dc2:	d0ca      	beq.n	8007d5a <__sflush_r+0x1a>
 8007dc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007dc8:	4299      	cmp	r1, r3
 8007dca:	d002      	beq.n	8007dd2 <__sflush_r+0x92>
 8007dcc:	4628      	mov	r0, r5
 8007dce:	f7ff faa5 	bl	800731c <_free_r>
 8007dd2:	2000      	movs	r0, #0
 8007dd4:	6360      	str	r0, [r4, #52]	; 0x34
 8007dd6:	e7c1      	b.n	8007d5c <__sflush_r+0x1c>
 8007dd8:	6a21      	ldr	r1, [r4, #32]
 8007dda:	2301      	movs	r3, #1
 8007ddc:	4628      	mov	r0, r5
 8007dde:	47b0      	blx	r6
 8007de0:	1c41      	adds	r1, r0, #1
 8007de2:	d1c7      	bne.n	8007d74 <__sflush_r+0x34>
 8007de4:	682b      	ldr	r3, [r5, #0]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d0c4      	beq.n	8007d74 <__sflush_r+0x34>
 8007dea:	2b1d      	cmp	r3, #29
 8007dec:	d001      	beq.n	8007df2 <__sflush_r+0xb2>
 8007dee:	2b16      	cmp	r3, #22
 8007df0:	d101      	bne.n	8007df6 <__sflush_r+0xb6>
 8007df2:	602f      	str	r7, [r5, #0]
 8007df4:	e7b1      	b.n	8007d5a <__sflush_r+0x1a>
 8007df6:	89a3      	ldrh	r3, [r4, #12]
 8007df8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dfc:	81a3      	strh	r3, [r4, #12]
 8007dfe:	e7ad      	b.n	8007d5c <__sflush_r+0x1c>
 8007e00:	690f      	ldr	r7, [r1, #16]
 8007e02:	2f00      	cmp	r7, #0
 8007e04:	d0a9      	beq.n	8007d5a <__sflush_r+0x1a>
 8007e06:	0793      	lsls	r3, r2, #30
 8007e08:	680e      	ldr	r6, [r1, #0]
 8007e0a:	bf08      	it	eq
 8007e0c:	694b      	ldreq	r3, [r1, #20]
 8007e0e:	600f      	str	r7, [r1, #0]
 8007e10:	bf18      	it	ne
 8007e12:	2300      	movne	r3, #0
 8007e14:	eba6 0807 	sub.w	r8, r6, r7
 8007e18:	608b      	str	r3, [r1, #8]
 8007e1a:	f1b8 0f00 	cmp.w	r8, #0
 8007e1e:	dd9c      	ble.n	8007d5a <__sflush_r+0x1a>
 8007e20:	6a21      	ldr	r1, [r4, #32]
 8007e22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e24:	4643      	mov	r3, r8
 8007e26:	463a      	mov	r2, r7
 8007e28:	4628      	mov	r0, r5
 8007e2a:	47b0      	blx	r6
 8007e2c:	2800      	cmp	r0, #0
 8007e2e:	dc06      	bgt.n	8007e3e <__sflush_r+0xfe>
 8007e30:	89a3      	ldrh	r3, [r4, #12]
 8007e32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e36:	81a3      	strh	r3, [r4, #12]
 8007e38:	f04f 30ff 	mov.w	r0, #4294967295
 8007e3c:	e78e      	b.n	8007d5c <__sflush_r+0x1c>
 8007e3e:	4407      	add	r7, r0
 8007e40:	eba8 0800 	sub.w	r8, r8, r0
 8007e44:	e7e9      	b.n	8007e1a <__sflush_r+0xda>
 8007e46:	bf00      	nop
 8007e48:	20400001 	.word	0x20400001

08007e4c <_fflush_r>:
 8007e4c:	b538      	push	{r3, r4, r5, lr}
 8007e4e:	690b      	ldr	r3, [r1, #16]
 8007e50:	4605      	mov	r5, r0
 8007e52:	460c      	mov	r4, r1
 8007e54:	b913      	cbnz	r3, 8007e5c <_fflush_r+0x10>
 8007e56:	2500      	movs	r5, #0
 8007e58:	4628      	mov	r0, r5
 8007e5a:	bd38      	pop	{r3, r4, r5, pc}
 8007e5c:	b118      	cbz	r0, 8007e66 <_fflush_r+0x1a>
 8007e5e:	6983      	ldr	r3, [r0, #24]
 8007e60:	b90b      	cbnz	r3, 8007e66 <_fflush_r+0x1a>
 8007e62:	f000 f887 	bl	8007f74 <__sinit>
 8007e66:	4b14      	ldr	r3, [pc, #80]	; (8007eb8 <_fflush_r+0x6c>)
 8007e68:	429c      	cmp	r4, r3
 8007e6a:	d11b      	bne.n	8007ea4 <_fflush_r+0x58>
 8007e6c:	686c      	ldr	r4, [r5, #4]
 8007e6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d0ef      	beq.n	8007e56 <_fflush_r+0xa>
 8007e76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e78:	07d0      	lsls	r0, r2, #31
 8007e7a:	d404      	bmi.n	8007e86 <_fflush_r+0x3a>
 8007e7c:	0599      	lsls	r1, r3, #22
 8007e7e:	d402      	bmi.n	8007e86 <_fflush_r+0x3a>
 8007e80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e82:	f000 f915 	bl	80080b0 <__retarget_lock_acquire_recursive>
 8007e86:	4628      	mov	r0, r5
 8007e88:	4621      	mov	r1, r4
 8007e8a:	f7ff ff59 	bl	8007d40 <__sflush_r>
 8007e8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e90:	07da      	lsls	r2, r3, #31
 8007e92:	4605      	mov	r5, r0
 8007e94:	d4e0      	bmi.n	8007e58 <_fflush_r+0xc>
 8007e96:	89a3      	ldrh	r3, [r4, #12]
 8007e98:	059b      	lsls	r3, r3, #22
 8007e9a:	d4dd      	bmi.n	8007e58 <_fflush_r+0xc>
 8007e9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e9e:	f000 f908 	bl	80080b2 <__retarget_lock_release_recursive>
 8007ea2:	e7d9      	b.n	8007e58 <_fflush_r+0xc>
 8007ea4:	4b05      	ldr	r3, [pc, #20]	; (8007ebc <_fflush_r+0x70>)
 8007ea6:	429c      	cmp	r4, r3
 8007ea8:	d101      	bne.n	8007eae <_fflush_r+0x62>
 8007eaa:	68ac      	ldr	r4, [r5, #8]
 8007eac:	e7df      	b.n	8007e6e <_fflush_r+0x22>
 8007eae:	4b04      	ldr	r3, [pc, #16]	; (8007ec0 <_fflush_r+0x74>)
 8007eb0:	429c      	cmp	r4, r3
 8007eb2:	bf08      	it	eq
 8007eb4:	68ec      	ldreq	r4, [r5, #12]
 8007eb6:	e7da      	b.n	8007e6e <_fflush_r+0x22>
 8007eb8:	0800a6e4 	.word	0x0800a6e4
 8007ebc:	0800a704 	.word	0x0800a704
 8007ec0:	0800a6c4 	.word	0x0800a6c4

08007ec4 <std>:
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	b510      	push	{r4, lr}
 8007ec8:	4604      	mov	r4, r0
 8007eca:	e9c0 3300 	strd	r3, r3, [r0]
 8007ece:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ed2:	6083      	str	r3, [r0, #8]
 8007ed4:	8181      	strh	r1, [r0, #12]
 8007ed6:	6643      	str	r3, [r0, #100]	; 0x64
 8007ed8:	81c2      	strh	r2, [r0, #14]
 8007eda:	6183      	str	r3, [r0, #24]
 8007edc:	4619      	mov	r1, r3
 8007ede:	2208      	movs	r2, #8
 8007ee0:	305c      	adds	r0, #92	; 0x5c
 8007ee2:	f7fd fb59 	bl	8005598 <memset>
 8007ee6:	4b05      	ldr	r3, [pc, #20]	; (8007efc <std+0x38>)
 8007ee8:	6263      	str	r3, [r4, #36]	; 0x24
 8007eea:	4b05      	ldr	r3, [pc, #20]	; (8007f00 <std+0x3c>)
 8007eec:	62a3      	str	r3, [r4, #40]	; 0x28
 8007eee:	4b05      	ldr	r3, [pc, #20]	; (8007f04 <std+0x40>)
 8007ef0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ef2:	4b05      	ldr	r3, [pc, #20]	; (8007f08 <std+0x44>)
 8007ef4:	6224      	str	r4, [r4, #32]
 8007ef6:	6323      	str	r3, [r4, #48]	; 0x30
 8007ef8:	bd10      	pop	{r4, pc}
 8007efa:	bf00      	nop
 8007efc:	08008219 	.word	0x08008219
 8007f00:	0800823b 	.word	0x0800823b
 8007f04:	08008273 	.word	0x08008273
 8007f08:	08008297 	.word	0x08008297

08007f0c <_cleanup_r>:
 8007f0c:	4901      	ldr	r1, [pc, #4]	; (8007f14 <_cleanup_r+0x8>)
 8007f0e:	f000 b8af 	b.w	8008070 <_fwalk_reent>
 8007f12:	bf00      	nop
 8007f14:	08007e4d 	.word	0x08007e4d

08007f18 <__sfmoreglue>:
 8007f18:	b570      	push	{r4, r5, r6, lr}
 8007f1a:	2268      	movs	r2, #104	; 0x68
 8007f1c:	1e4d      	subs	r5, r1, #1
 8007f1e:	4355      	muls	r5, r2
 8007f20:	460e      	mov	r6, r1
 8007f22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007f26:	f7ff fa65 	bl	80073f4 <_malloc_r>
 8007f2a:	4604      	mov	r4, r0
 8007f2c:	b140      	cbz	r0, 8007f40 <__sfmoreglue+0x28>
 8007f2e:	2100      	movs	r1, #0
 8007f30:	e9c0 1600 	strd	r1, r6, [r0]
 8007f34:	300c      	adds	r0, #12
 8007f36:	60a0      	str	r0, [r4, #8]
 8007f38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007f3c:	f7fd fb2c 	bl	8005598 <memset>
 8007f40:	4620      	mov	r0, r4
 8007f42:	bd70      	pop	{r4, r5, r6, pc}

08007f44 <__sfp_lock_acquire>:
 8007f44:	4801      	ldr	r0, [pc, #4]	; (8007f4c <__sfp_lock_acquire+0x8>)
 8007f46:	f000 b8b3 	b.w	80080b0 <__retarget_lock_acquire_recursive>
 8007f4a:	bf00      	nop
 8007f4c:	20000339 	.word	0x20000339

08007f50 <__sfp_lock_release>:
 8007f50:	4801      	ldr	r0, [pc, #4]	; (8007f58 <__sfp_lock_release+0x8>)
 8007f52:	f000 b8ae 	b.w	80080b2 <__retarget_lock_release_recursive>
 8007f56:	bf00      	nop
 8007f58:	20000339 	.word	0x20000339

08007f5c <__sinit_lock_acquire>:
 8007f5c:	4801      	ldr	r0, [pc, #4]	; (8007f64 <__sinit_lock_acquire+0x8>)
 8007f5e:	f000 b8a7 	b.w	80080b0 <__retarget_lock_acquire_recursive>
 8007f62:	bf00      	nop
 8007f64:	2000033a 	.word	0x2000033a

08007f68 <__sinit_lock_release>:
 8007f68:	4801      	ldr	r0, [pc, #4]	; (8007f70 <__sinit_lock_release+0x8>)
 8007f6a:	f000 b8a2 	b.w	80080b2 <__retarget_lock_release_recursive>
 8007f6e:	bf00      	nop
 8007f70:	2000033a 	.word	0x2000033a

08007f74 <__sinit>:
 8007f74:	b510      	push	{r4, lr}
 8007f76:	4604      	mov	r4, r0
 8007f78:	f7ff fff0 	bl	8007f5c <__sinit_lock_acquire>
 8007f7c:	69a3      	ldr	r3, [r4, #24]
 8007f7e:	b11b      	cbz	r3, 8007f88 <__sinit+0x14>
 8007f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f84:	f7ff bff0 	b.w	8007f68 <__sinit_lock_release>
 8007f88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007f8c:	6523      	str	r3, [r4, #80]	; 0x50
 8007f8e:	4b13      	ldr	r3, [pc, #76]	; (8007fdc <__sinit+0x68>)
 8007f90:	4a13      	ldr	r2, [pc, #76]	; (8007fe0 <__sinit+0x6c>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	62a2      	str	r2, [r4, #40]	; 0x28
 8007f96:	42a3      	cmp	r3, r4
 8007f98:	bf04      	itt	eq
 8007f9a:	2301      	moveq	r3, #1
 8007f9c:	61a3      	streq	r3, [r4, #24]
 8007f9e:	4620      	mov	r0, r4
 8007fa0:	f000 f820 	bl	8007fe4 <__sfp>
 8007fa4:	6060      	str	r0, [r4, #4]
 8007fa6:	4620      	mov	r0, r4
 8007fa8:	f000 f81c 	bl	8007fe4 <__sfp>
 8007fac:	60a0      	str	r0, [r4, #8]
 8007fae:	4620      	mov	r0, r4
 8007fb0:	f000 f818 	bl	8007fe4 <__sfp>
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	60e0      	str	r0, [r4, #12]
 8007fb8:	2104      	movs	r1, #4
 8007fba:	6860      	ldr	r0, [r4, #4]
 8007fbc:	f7ff ff82 	bl	8007ec4 <std>
 8007fc0:	68a0      	ldr	r0, [r4, #8]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	2109      	movs	r1, #9
 8007fc6:	f7ff ff7d 	bl	8007ec4 <std>
 8007fca:	68e0      	ldr	r0, [r4, #12]
 8007fcc:	2202      	movs	r2, #2
 8007fce:	2112      	movs	r1, #18
 8007fd0:	f7ff ff78 	bl	8007ec4 <std>
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	61a3      	str	r3, [r4, #24]
 8007fd8:	e7d2      	b.n	8007f80 <__sinit+0xc>
 8007fda:	bf00      	nop
 8007fdc:	0800a348 	.word	0x0800a348
 8007fe0:	08007f0d 	.word	0x08007f0d

08007fe4 <__sfp>:
 8007fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fe6:	4607      	mov	r7, r0
 8007fe8:	f7ff ffac 	bl	8007f44 <__sfp_lock_acquire>
 8007fec:	4b1e      	ldr	r3, [pc, #120]	; (8008068 <__sfp+0x84>)
 8007fee:	681e      	ldr	r6, [r3, #0]
 8007ff0:	69b3      	ldr	r3, [r6, #24]
 8007ff2:	b913      	cbnz	r3, 8007ffa <__sfp+0x16>
 8007ff4:	4630      	mov	r0, r6
 8007ff6:	f7ff ffbd 	bl	8007f74 <__sinit>
 8007ffa:	3648      	adds	r6, #72	; 0x48
 8007ffc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008000:	3b01      	subs	r3, #1
 8008002:	d503      	bpl.n	800800c <__sfp+0x28>
 8008004:	6833      	ldr	r3, [r6, #0]
 8008006:	b30b      	cbz	r3, 800804c <__sfp+0x68>
 8008008:	6836      	ldr	r6, [r6, #0]
 800800a:	e7f7      	b.n	8007ffc <__sfp+0x18>
 800800c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008010:	b9d5      	cbnz	r5, 8008048 <__sfp+0x64>
 8008012:	4b16      	ldr	r3, [pc, #88]	; (800806c <__sfp+0x88>)
 8008014:	60e3      	str	r3, [r4, #12]
 8008016:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800801a:	6665      	str	r5, [r4, #100]	; 0x64
 800801c:	f000 f847 	bl	80080ae <__retarget_lock_init_recursive>
 8008020:	f7ff ff96 	bl	8007f50 <__sfp_lock_release>
 8008024:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008028:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800802c:	6025      	str	r5, [r4, #0]
 800802e:	61a5      	str	r5, [r4, #24]
 8008030:	2208      	movs	r2, #8
 8008032:	4629      	mov	r1, r5
 8008034:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008038:	f7fd faae 	bl	8005598 <memset>
 800803c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008040:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008044:	4620      	mov	r0, r4
 8008046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008048:	3468      	adds	r4, #104	; 0x68
 800804a:	e7d9      	b.n	8008000 <__sfp+0x1c>
 800804c:	2104      	movs	r1, #4
 800804e:	4638      	mov	r0, r7
 8008050:	f7ff ff62 	bl	8007f18 <__sfmoreglue>
 8008054:	4604      	mov	r4, r0
 8008056:	6030      	str	r0, [r6, #0]
 8008058:	2800      	cmp	r0, #0
 800805a:	d1d5      	bne.n	8008008 <__sfp+0x24>
 800805c:	f7ff ff78 	bl	8007f50 <__sfp_lock_release>
 8008060:	230c      	movs	r3, #12
 8008062:	603b      	str	r3, [r7, #0]
 8008064:	e7ee      	b.n	8008044 <__sfp+0x60>
 8008066:	bf00      	nop
 8008068:	0800a348 	.word	0x0800a348
 800806c:	ffff0001 	.word	0xffff0001

08008070 <_fwalk_reent>:
 8008070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008074:	4606      	mov	r6, r0
 8008076:	4688      	mov	r8, r1
 8008078:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800807c:	2700      	movs	r7, #0
 800807e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008082:	f1b9 0901 	subs.w	r9, r9, #1
 8008086:	d505      	bpl.n	8008094 <_fwalk_reent+0x24>
 8008088:	6824      	ldr	r4, [r4, #0]
 800808a:	2c00      	cmp	r4, #0
 800808c:	d1f7      	bne.n	800807e <_fwalk_reent+0xe>
 800808e:	4638      	mov	r0, r7
 8008090:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008094:	89ab      	ldrh	r3, [r5, #12]
 8008096:	2b01      	cmp	r3, #1
 8008098:	d907      	bls.n	80080aa <_fwalk_reent+0x3a>
 800809a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800809e:	3301      	adds	r3, #1
 80080a0:	d003      	beq.n	80080aa <_fwalk_reent+0x3a>
 80080a2:	4629      	mov	r1, r5
 80080a4:	4630      	mov	r0, r6
 80080a6:	47c0      	blx	r8
 80080a8:	4307      	orrs	r7, r0
 80080aa:	3568      	adds	r5, #104	; 0x68
 80080ac:	e7e9      	b.n	8008082 <_fwalk_reent+0x12>

080080ae <__retarget_lock_init_recursive>:
 80080ae:	4770      	bx	lr

080080b0 <__retarget_lock_acquire_recursive>:
 80080b0:	4770      	bx	lr

080080b2 <__retarget_lock_release_recursive>:
 80080b2:	4770      	bx	lr

080080b4 <__swhatbuf_r>:
 80080b4:	b570      	push	{r4, r5, r6, lr}
 80080b6:	460e      	mov	r6, r1
 80080b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080bc:	2900      	cmp	r1, #0
 80080be:	b096      	sub	sp, #88	; 0x58
 80080c0:	4614      	mov	r4, r2
 80080c2:	461d      	mov	r5, r3
 80080c4:	da08      	bge.n	80080d8 <__swhatbuf_r+0x24>
 80080c6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80080ca:	2200      	movs	r2, #0
 80080cc:	602a      	str	r2, [r5, #0]
 80080ce:	061a      	lsls	r2, r3, #24
 80080d0:	d410      	bmi.n	80080f4 <__swhatbuf_r+0x40>
 80080d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080d6:	e00e      	b.n	80080f6 <__swhatbuf_r+0x42>
 80080d8:	466a      	mov	r2, sp
 80080da:	f000 f903 	bl	80082e4 <_fstat_r>
 80080de:	2800      	cmp	r0, #0
 80080e0:	dbf1      	blt.n	80080c6 <__swhatbuf_r+0x12>
 80080e2:	9a01      	ldr	r2, [sp, #4]
 80080e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80080e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80080ec:	425a      	negs	r2, r3
 80080ee:	415a      	adcs	r2, r3
 80080f0:	602a      	str	r2, [r5, #0]
 80080f2:	e7ee      	b.n	80080d2 <__swhatbuf_r+0x1e>
 80080f4:	2340      	movs	r3, #64	; 0x40
 80080f6:	2000      	movs	r0, #0
 80080f8:	6023      	str	r3, [r4, #0]
 80080fa:	b016      	add	sp, #88	; 0x58
 80080fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08008100 <__smakebuf_r>:
 8008100:	898b      	ldrh	r3, [r1, #12]
 8008102:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008104:	079d      	lsls	r5, r3, #30
 8008106:	4606      	mov	r6, r0
 8008108:	460c      	mov	r4, r1
 800810a:	d507      	bpl.n	800811c <__smakebuf_r+0x1c>
 800810c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008110:	6023      	str	r3, [r4, #0]
 8008112:	6123      	str	r3, [r4, #16]
 8008114:	2301      	movs	r3, #1
 8008116:	6163      	str	r3, [r4, #20]
 8008118:	b002      	add	sp, #8
 800811a:	bd70      	pop	{r4, r5, r6, pc}
 800811c:	ab01      	add	r3, sp, #4
 800811e:	466a      	mov	r2, sp
 8008120:	f7ff ffc8 	bl	80080b4 <__swhatbuf_r>
 8008124:	9900      	ldr	r1, [sp, #0]
 8008126:	4605      	mov	r5, r0
 8008128:	4630      	mov	r0, r6
 800812a:	f7ff f963 	bl	80073f4 <_malloc_r>
 800812e:	b948      	cbnz	r0, 8008144 <__smakebuf_r+0x44>
 8008130:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008134:	059a      	lsls	r2, r3, #22
 8008136:	d4ef      	bmi.n	8008118 <__smakebuf_r+0x18>
 8008138:	f023 0303 	bic.w	r3, r3, #3
 800813c:	f043 0302 	orr.w	r3, r3, #2
 8008140:	81a3      	strh	r3, [r4, #12]
 8008142:	e7e3      	b.n	800810c <__smakebuf_r+0xc>
 8008144:	4b0d      	ldr	r3, [pc, #52]	; (800817c <__smakebuf_r+0x7c>)
 8008146:	62b3      	str	r3, [r6, #40]	; 0x28
 8008148:	89a3      	ldrh	r3, [r4, #12]
 800814a:	6020      	str	r0, [r4, #0]
 800814c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008150:	81a3      	strh	r3, [r4, #12]
 8008152:	9b00      	ldr	r3, [sp, #0]
 8008154:	6163      	str	r3, [r4, #20]
 8008156:	9b01      	ldr	r3, [sp, #4]
 8008158:	6120      	str	r0, [r4, #16]
 800815a:	b15b      	cbz	r3, 8008174 <__smakebuf_r+0x74>
 800815c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008160:	4630      	mov	r0, r6
 8008162:	f000 f8d1 	bl	8008308 <_isatty_r>
 8008166:	b128      	cbz	r0, 8008174 <__smakebuf_r+0x74>
 8008168:	89a3      	ldrh	r3, [r4, #12]
 800816a:	f023 0303 	bic.w	r3, r3, #3
 800816e:	f043 0301 	orr.w	r3, r3, #1
 8008172:	81a3      	strh	r3, [r4, #12]
 8008174:	89a0      	ldrh	r0, [r4, #12]
 8008176:	4305      	orrs	r5, r0
 8008178:	81a5      	strh	r5, [r4, #12]
 800817a:	e7cd      	b.n	8008118 <__smakebuf_r+0x18>
 800817c:	08007f0d 	.word	0x08007f0d

08008180 <_malloc_usable_size_r>:
 8008180:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008184:	1f18      	subs	r0, r3, #4
 8008186:	2b00      	cmp	r3, #0
 8008188:	bfbc      	itt	lt
 800818a:	580b      	ldrlt	r3, [r1, r0]
 800818c:	18c0      	addlt	r0, r0, r3
 800818e:	4770      	bx	lr

08008190 <_raise_r>:
 8008190:	291f      	cmp	r1, #31
 8008192:	b538      	push	{r3, r4, r5, lr}
 8008194:	4604      	mov	r4, r0
 8008196:	460d      	mov	r5, r1
 8008198:	d904      	bls.n	80081a4 <_raise_r+0x14>
 800819a:	2316      	movs	r3, #22
 800819c:	6003      	str	r3, [r0, #0]
 800819e:	f04f 30ff 	mov.w	r0, #4294967295
 80081a2:	bd38      	pop	{r3, r4, r5, pc}
 80081a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80081a6:	b112      	cbz	r2, 80081ae <_raise_r+0x1e>
 80081a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80081ac:	b94b      	cbnz	r3, 80081c2 <_raise_r+0x32>
 80081ae:	4620      	mov	r0, r4
 80081b0:	f000 f830 	bl	8008214 <_getpid_r>
 80081b4:	462a      	mov	r2, r5
 80081b6:	4601      	mov	r1, r0
 80081b8:	4620      	mov	r0, r4
 80081ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081be:	f000 b817 	b.w	80081f0 <_kill_r>
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d00a      	beq.n	80081dc <_raise_r+0x4c>
 80081c6:	1c59      	adds	r1, r3, #1
 80081c8:	d103      	bne.n	80081d2 <_raise_r+0x42>
 80081ca:	2316      	movs	r3, #22
 80081cc:	6003      	str	r3, [r0, #0]
 80081ce:	2001      	movs	r0, #1
 80081d0:	e7e7      	b.n	80081a2 <_raise_r+0x12>
 80081d2:	2400      	movs	r4, #0
 80081d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80081d8:	4628      	mov	r0, r5
 80081da:	4798      	blx	r3
 80081dc:	2000      	movs	r0, #0
 80081de:	e7e0      	b.n	80081a2 <_raise_r+0x12>

080081e0 <raise>:
 80081e0:	4b02      	ldr	r3, [pc, #8]	; (80081ec <raise+0xc>)
 80081e2:	4601      	mov	r1, r0
 80081e4:	6818      	ldr	r0, [r3, #0]
 80081e6:	f7ff bfd3 	b.w	8008190 <_raise_r>
 80081ea:	bf00      	nop
 80081ec:	20000014 	.word	0x20000014

080081f0 <_kill_r>:
 80081f0:	b538      	push	{r3, r4, r5, lr}
 80081f2:	4d07      	ldr	r5, [pc, #28]	; (8008210 <_kill_r+0x20>)
 80081f4:	2300      	movs	r3, #0
 80081f6:	4604      	mov	r4, r0
 80081f8:	4608      	mov	r0, r1
 80081fa:	4611      	mov	r1, r2
 80081fc:	602b      	str	r3, [r5, #0]
 80081fe:	f7fa fac3 	bl	8002788 <_kill>
 8008202:	1c43      	adds	r3, r0, #1
 8008204:	d102      	bne.n	800820c <_kill_r+0x1c>
 8008206:	682b      	ldr	r3, [r5, #0]
 8008208:	b103      	cbz	r3, 800820c <_kill_r+0x1c>
 800820a:	6023      	str	r3, [r4, #0]
 800820c:	bd38      	pop	{r3, r4, r5, pc}
 800820e:	bf00      	nop
 8008210:	20000334 	.word	0x20000334

08008214 <_getpid_r>:
 8008214:	f7fa bab0 	b.w	8002778 <_getpid>

08008218 <__sread>:
 8008218:	b510      	push	{r4, lr}
 800821a:	460c      	mov	r4, r1
 800821c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008220:	f000 f894 	bl	800834c <_read_r>
 8008224:	2800      	cmp	r0, #0
 8008226:	bfab      	itete	ge
 8008228:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800822a:	89a3      	ldrhlt	r3, [r4, #12]
 800822c:	181b      	addge	r3, r3, r0
 800822e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008232:	bfac      	ite	ge
 8008234:	6563      	strge	r3, [r4, #84]	; 0x54
 8008236:	81a3      	strhlt	r3, [r4, #12]
 8008238:	bd10      	pop	{r4, pc}

0800823a <__swrite>:
 800823a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800823e:	461f      	mov	r7, r3
 8008240:	898b      	ldrh	r3, [r1, #12]
 8008242:	05db      	lsls	r3, r3, #23
 8008244:	4605      	mov	r5, r0
 8008246:	460c      	mov	r4, r1
 8008248:	4616      	mov	r6, r2
 800824a:	d505      	bpl.n	8008258 <__swrite+0x1e>
 800824c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008250:	2302      	movs	r3, #2
 8008252:	2200      	movs	r2, #0
 8008254:	f000 f868 	bl	8008328 <_lseek_r>
 8008258:	89a3      	ldrh	r3, [r4, #12]
 800825a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800825e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008262:	81a3      	strh	r3, [r4, #12]
 8008264:	4632      	mov	r2, r6
 8008266:	463b      	mov	r3, r7
 8008268:	4628      	mov	r0, r5
 800826a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800826e:	f000 b817 	b.w	80082a0 <_write_r>

08008272 <__sseek>:
 8008272:	b510      	push	{r4, lr}
 8008274:	460c      	mov	r4, r1
 8008276:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800827a:	f000 f855 	bl	8008328 <_lseek_r>
 800827e:	1c43      	adds	r3, r0, #1
 8008280:	89a3      	ldrh	r3, [r4, #12]
 8008282:	bf15      	itete	ne
 8008284:	6560      	strne	r0, [r4, #84]	; 0x54
 8008286:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800828a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800828e:	81a3      	strheq	r3, [r4, #12]
 8008290:	bf18      	it	ne
 8008292:	81a3      	strhne	r3, [r4, #12]
 8008294:	bd10      	pop	{r4, pc}

08008296 <__sclose>:
 8008296:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800829a:	f000 b813 	b.w	80082c4 <_close_r>
	...

080082a0 <_write_r>:
 80082a0:	b538      	push	{r3, r4, r5, lr}
 80082a2:	4d07      	ldr	r5, [pc, #28]	; (80082c0 <_write_r+0x20>)
 80082a4:	4604      	mov	r4, r0
 80082a6:	4608      	mov	r0, r1
 80082a8:	4611      	mov	r1, r2
 80082aa:	2200      	movs	r2, #0
 80082ac:	602a      	str	r2, [r5, #0]
 80082ae:	461a      	mov	r2, r3
 80082b0:	f7fa faa1 	bl	80027f6 <_write>
 80082b4:	1c43      	adds	r3, r0, #1
 80082b6:	d102      	bne.n	80082be <_write_r+0x1e>
 80082b8:	682b      	ldr	r3, [r5, #0]
 80082ba:	b103      	cbz	r3, 80082be <_write_r+0x1e>
 80082bc:	6023      	str	r3, [r4, #0]
 80082be:	bd38      	pop	{r3, r4, r5, pc}
 80082c0:	20000334 	.word	0x20000334

080082c4 <_close_r>:
 80082c4:	b538      	push	{r3, r4, r5, lr}
 80082c6:	4d06      	ldr	r5, [pc, #24]	; (80082e0 <_close_r+0x1c>)
 80082c8:	2300      	movs	r3, #0
 80082ca:	4604      	mov	r4, r0
 80082cc:	4608      	mov	r0, r1
 80082ce:	602b      	str	r3, [r5, #0]
 80082d0:	f7fa faad 	bl	800282e <_close>
 80082d4:	1c43      	adds	r3, r0, #1
 80082d6:	d102      	bne.n	80082de <_close_r+0x1a>
 80082d8:	682b      	ldr	r3, [r5, #0]
 80082da:	b103      	cbz	r3, 80082de <_close_r+0x1a>
 80082dc:	6023      	str	r3, [r4, #0]
 80082de:	bd38      	pop	{r3, r4, r5, pc}
 80082e0:	20000334 	.word	0x20000334

080082e4 <_fstat_r>:
 80082e4:	b538      	push	{r3, r4, r5, lr}
 80082e6:	4d07      	ldr	r5, [pc, #28]	; (8008304 <_fstat_r+0x20>)
 80082e8:	2300      	movs	r3, #0
 80082ea:	4604      	mov	r4, r0
 80082ec:	4608      	mov	r0, r1
 80082ee:	4611      	mov	r1, r2
 80082f0:	602b      	str	r3, [r5, #0]
 80082f2:	f7fa faa8 	bl	8002846 <_fstat>
 80082f6:	1c43      	adds	r3, r0, #1
 80082f8:	d102      	bne.n	8008300 <_fstat_r+0x1c>
 80082fa:	682b      	ldr	r3, [r5, #0]
 80082fc:	b103      	cbz	r3, 8008300 <_fstat_r+0x1c>
 80082fe:	6023      	str	r3, [r4, #0]
 8008300:	bd38      	pop	{r3, r4, r5, pc}
 8008302:	bf00      	nop
 8008304:	20000334 	.word	0x20000334

08008308 <_isatty_r>:
 8008308:	b538      	push	{r3, r4, r5, lr}
 800830a:	4d06      	ldr	r5, [pc, #24]	; (8008324 <_isatty_r+0x1c>)
 800830c:	2300      	movs	r3, #0
 800830e:	4604      	mov	r4, r0
 8008310:	4608      	mov	r0, r1
 8008312:	602b      	str	r3, [r5, #0]
 8008314:	f7fa faa7 	bl	8002866 <_isatty>
 8008318:	1c43      	adds	r3, r0, #1
 800831a:	d102      	bne.n	8008322 <_isatty_r+0x1a>
 800831c:	682b      	ldr	r3, [r5, #0]
 800831e:	b103      	cbz	r3, 8008322 <_isatty_r+0x1a>
 8008320:	6023      	str	r3, [r4, #0]
 8008322:	bd38      	pop	{r3, r4, r5, pc}
 8008324:	20000334 	.word	0x20000334

08008328 <_lseek_r>:
 8008328:	b538      	push	{r3, r4, r5, lr}
 800832a:	4d07      	ldr	r5, [pc, #28]	; (8008348 <_lseek_r+0x20>)
 800832c:	4604      	mov	r4, r0
 800832e:	4608      	mov	r0, r1
 8008330:	4611      	mov	r1, r2
 8008332:	2200      	movs	r2, #0
 8008334:	602a      	str	r2, [r5, #0]
 8008336:	461a      	mov	r2, r3
 8008338:	f7fa faa0 	bl	800287c <_lseek>
 800833c:	1c43      	adds	r3, r0, #1
 800833e:	d102      	bne.n	8008346 <_lseek_r+0x1e>
 8008340:	682b      	ldr	r3, [r5, #0]
 8008342:	b103      	cbz	r3, 8008346 <_lseek_r+0x1e>
 8008344:	6023      	str	r3, [r4, #0]
 8008346:	bd38      	pop	{r3, r4, r5, pc}
 8008348:	20000334 	.word	0x20000334

0800834c <_read_r>:
 800834c:	b538      	push	{r3, r4, r5, lr}
 800834e:	4d07      	ldr	r5, [pc, #28]	; (800836c <_read_r+0x20>)
 8008350:	4604      	mov	r4, r0
 8008352:	4608      	mov	r0, r1
 8008354:	4611      	mov	r1, r2
 8008356:	2200      	movs	r2, #0
 8008358:	602a      	str	r2, [r5, #0]
 800835a:	461a      	mov	r2, r3
 800835c:	f7fa fa2e 	bl	80027bc <_read>
 8008360:	1c43      	adds	r3, r0, #1
 8008362:	d102      	bne.n	800836a <_read_r+0x1e>
 8008364:	682b      	ldr	r3, [r5, #0]
 8008366:	b103      	cbz	r3, 800836a <_read_r+0x1e>
 8008368:	6023      	str	r3, [r4, #0]
 800836a:	bd38      	pop	{r3, r4, r5, pc}
 800836c:	20000334 	.word	0x20000334

08008370 <_init>:
 8008370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008372:	bf00      	nop
 8008374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008376:	bc08      	pop	{r3}
 8008378:	469e      	mov	lr, r3
 800837a:	4770      	bx	lr

0800837c <_fini>:
 800837c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800837e:	bf00      	nop
 8008380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008382:	bc08      	pop	{r3}
 8008384:	469e      	mov	lr, r3
 8008386:	4770      	bx	lr
