
BRAZO ROBOTICO PRUEBA 1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004860  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800496c  0800496c  0001496c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049f0  080049f0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080049f0  080049f0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080049f0  080049f0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049f0  080049f0  000149f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049f4  080049f4  000149f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080049f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  20000070  08004a68  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  08004a68  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bd16  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001da1  00000000  00000000  0002bdaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ce8  00000000  00000000  0002db50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bf0  00000000  00000000  0002e838  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015076  00000000  00000000  0002f428  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000097dc  00000000  00000000  0004449e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00077002  00000000  00000000  0004dc7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c4c7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a34  00000000  00000000  000c4cf8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004954 	.word	0x08004954

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004954 	.word	0x08004954

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028a:	f1a4 0401 	sub.w	r4, r4, #1
 800028e:	d1e9      	bne.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_d2uiz>:
 80004c4:	004a      	lsls	r2, r1, #1
 80004c6:	d211      	bcs.n	80004ec <__aeabi_d2uiz+0x28>
 80004c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80004cc:	d211      	bcs.n	80004f2 <__aeabi_d2uiz+0x2e>
 80004ce:	d50d      	bpl.n	80004ec <__aeabi_d2uiz+0x28>
 80004d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80004d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80004d8:	d40e      	bmi.n	80004f8 <__aeabi_d2uiz+0x34>
 80004da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80004de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80004e6:	fa23 f002 	lsr.w	r0, r3, r2
 80004ea:	4770      	bx	lr
 80004ec:	f04f 0000 	mov.w	r0, #0
 80004f0:	4770      	bx	lr
 80004f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80004f6:	d102      	bne.n	80004fe <__aeabi_d2uiz+0x3a>
 80004f8:	f04f 30ff 	mov.w	r0, #4294967295
 80004fc:	4770      	bx	lr
 80004fe:	f04f 0000 	mov.w	r0, #0
 8000502:	4770      	bx	lr

08000504 <__aeabi_frsub>:
 8000504:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000508:	e002      	b.n	8000510 <__addsf3>
 800050a:	bf00      	nop

0800050c <__aeabi_fsub>:
 800050c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000510 <__addsf3>:
 8000510:	0042      	lsls	r2, r0, #1
 8000512:	bf1f      	itttt	ne
 8000514:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000518:	ea92 0f03 	teqne	r2, r3
 800051c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000520:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000524:	d06a      	beq.n	80005fc <__addsf3+0xec>
 8000526:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800052a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800052e:	bfc1      	itttt	gt
 8000530:	18d2      	addgt	r2, r2, r3
 8000532:	4041      	eorgt	r1, r0
 8000534:	4048      	eorgt	r0, r1
 8000536:	4041      	eorgt	r1, r0
 8000538:	bfb8      	it	lt
 800053a:	425b      	neglt	r3, r3
 800053c:	2b19      	cmp	r3, #25
 800053e:	bf88      	it	hi
 8000540:	4770      	bxhi	lr
 8000542:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000546:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800054a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800054e:	bf18      	it	ne
 8000550:	4240      	negne	r0, r0
 8000552:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000556:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800055a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800055e:	bf18      	it	ne
 8000560:	4249      	negne	r1, r1
 8000562:	ea92 0f03 	teq	r2, r3
 8000566:	d03f      	beq.n	80005e8 <__addsf3+0xd8>
 8000568:	f1a2 0201 	sub.w	r2, r2, #1
 800056c:	fa41 fc03 	asr.w	ip, r1, r3
 8000570:	eb10 000c 	adds.w	r0, r0, ip
 8000574:	f1c3 0320 	rsb	r3, r3, #32
 8000578:	fa01 f103 	lsl.w	r1, r1, r3
 800057c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000580:	d502      	bpl.n	8000588 <__addsf3+0x78>
 8000582:	4249      	negs	r1, r1
 8000584:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000588:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800058c:	d313      	bcc.n	80005b6 <__addsf3+0xa6>
 800058e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000592:	d306      	bcc.n	80005a2 <__addsf3+0x92>
 8000594:	0840      	lsrs	r0, r0, #1
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	f102 0201 	add.w	r2, r2, #1
 800059e:	2afe      	cmp	r2, #254	; 0xfe
 80005a0:	d251      	bcs.n	8000646 <__addsf3+0x136>
 80005a2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80005a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80005aa:	bf08      	it	eq
 80005ac:	f020 0001 	biceq.w	r0, r0, #1
 80005b0:	ea40 0003 	orr.w	r0, r0, r3
 80005b4:	4770      	bx	lr
 80005b6:	0049      	lsls	r1, r1, #1
 80005b8:	eb40 0000 	adc.w	r0, r0, r0
 80005bc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80005c0:	f1a2 0201 	sub.w	r2, r2, #1
 80005c4:	d1ed      	bne.n	80005a2 <__addsf3+0x92>
 80005c6:	fab0 fc80 	clz	ip, r0
 80005ca:	f1ac 0c08 	sub.w	ip, ip, #8
 80005ce:	ebb2 020c 	subs.w	r2, r2, ip
 80005d2:	fa00 f00c 	lsl.w	r0, r0, ip
 80005d6:	bfaa      	itet	ge
 80005d8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80005dc:	4252      	neglt	r2, r2
 80005de:	4318      	orrge	r0, r3
 80005e0:	bfbc      	itt	lt
 80005e2:	40d0      	lsrlt	r0, r2
 80005e4:	4318      	orrlt	r0, r3
 80005e6:	4770      	bx	lr
 80005e8:	f092 0f00 	teq	r2, #0
 80005ec:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80005f0:	bf06      	itte	eq
 80005f2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80005f6:	3201      	addeq	r2, #1
 80005f8:	3b01      	subne	r3, #1
 80005fa:	e7b5      	b.n	8000568 <__addsf3+0x58>
 80005fc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000600:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000604:	bf18      	it	ne
 8000606:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800060a:	d021      	beq.n	8000650 <__addsf3+0x140>
 800060c:	ea92 0f03 	teq	r2, r3
 8000610:	d004      	beq.n	800061c <__addsf3+0x10c>
 8000612:	f092 0f00 	teq	r2, #0
 8000616:	bf08      	it	eq
 8000618:	4608      	moveq	r0, r1
 800061a:	4770      	bx	lr
 800061c:	ea90 0f01 	teq	r0, r1
 8000620:	bf1c      	itt	ne
 8000622:	2000      	movne	r0, #0
 8000624:	4770      	bxne	lr
 8000626:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800062a:	d104      	bne.n	8000636 <__addsf3+0x126>
 800062c:	0040      	lsls	r0, r0, #1
 800062e:	bf28      	it	cs
 8000630:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000634:	4770      	bx	lr
 8000636:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800063a:	bf3c      	itt	cc
 800063c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000640:	4770      	bxcc	lr
 8000642:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000646:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800064a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800064e:	4770      	bx	lr
 8000650:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000654:	bf16      	itet	ne
 8000656:	4608      	movne	r0, r1
 8000658:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800065c:	4601      	movne	r1, r0
 800065e:	0242      	lsls	r2, r0, #9
 8000660:	bf06      	itte	eq
 8000662:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000666:	ea90 0f01 	teqeq	r0, r1
 800066a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800066e:	4770      	bx	lr

08000670 <__aeabi_ui2f>:
 8000670:	f04f 0300 	mov.w	r3, #0
 8000674:	e004      	b.n	8000680 <__aeabi_i2f+0x8>
 8000676:	bf00      	nop

08000678 <__aeabi_i2f>:
 8000678:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	ea5f 0c00 	movs.w	ip, r0
 8000684:	bf08      	it	eq
 8000686:	4770      	bxeq	lr
 8000688:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800068c:	4601      	mov	r1, r0
 800068e:	f04f 0000 	mov.w	r0, #0
 8000692:	e01c      	b.n	80006ce <__aeabi_l2f+0x2a>

08000694 <__aeabi_ul2f>:
 8000694:	ea50 0201 	orrs.w	r2, r0, r1
 8000698:	bf08      	it	eq
 800069a:	4770      	bxeq	lr
 800069c:	f04f 0300 	mov.w	r3, #0
 80006a0:	e00a      	b.n	80006b8 <__aeabi_l2f+0x14>
 80006a2:	bf00      	nop

080006a4 <__aeabi_l2f>:
 80006a4:	ea50 0201 	orrs.w	r2, r0, r1
 80006a8:	bf08      	it	eq
 80006aa:	4770      	bxeq	lr
 80006ac:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80006b0:	d502      	bpl.n	80006b8 <__aeabi_l2f+0x14>
 80006b2:	4240      	negs	r0, r0
 80006b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b8:	ea5f 0c01 	movs.w	ip, r1
 80006bc:	bf02      	ittt	eq
 80006be:	4684      	moveq	ip, r0
 80006c0:	4601      	moveq	r1, r0
 80006c2:	2000      	moveq	r0, #0
 80006c4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80006c8:	bf08      	it	eq
 80006ca:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80006ce:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80006d2:	fabc f28c 	clz	r2, ip
 80006d6:	3a08      	subs	r2, #8
 80006d8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80006dc:	db10      	blt.n	8000700 <__aeabi_l2f+0x5c>
 80006de:	fa01 fc02 	lsl.w	ip, r1, r2
 80006e2:	4463      	add	r3, ip
 80006e4:	fa00 fc02 	lsl.w	ip, r0, r2
 80006e8:	f1c2 0220 	rsb	r2, r2, #32
 80006ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80006f0:	fa20 f202 	lsr.w	r2, r0, r2
 80006f4:	eb43 0002 	adc.w	r0, r3, r2
 80006f8:	bf08      	it	eq
 80006fa:	f020 0001 	biceq.w	r0, r0, #1
 80006fe:	4770      	bx	lr
 8000700:	f102 0220 	add.w	r2, r2, #32
 8000704:	fa01 fc02 	lsl.w	ip, r1, r2
 8000708:	f1c2 0220 	rsb	r2, r2, #32
 800070c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000710:	fa21 f202 	lsr.w	r2, r1, r2
 8000714:	eb43 0002 	adc.w	r0, r3, r2
 8000718:	bf08      	it	eq
 800071a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800071e:	4770      	bx	lr

08000720 <__aeabi_fmul>:
 8000720:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000724:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000728:	bf1e      	ittt	ne
 800072a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800072e:	ea92 0f0c 	teqne	r2, ip
 8000732:	ea93 0f0c 	teqne	r3, ip
 8000736:	d06f      	beq.n	8000818 <__aeabi_fmul+0xf8>
 8000738:	441a      	add	r2, r3
 800073a:	ea80 0c01 	eor.w	ip, r0, r1
 800073e:	0240      	lsls	r0, r0, #9
 8000740:	bf18      	it	ne
 8000742:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000746:	d01e      	beq.n	8000786 <__aeabi_fmul+0x66>
 8000748:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800074c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000750:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000754:	fba0 3101 	umull	r3, r1, r0, r1
 8000758:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800075c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000760:	bf3e      	ittt	cc
 8000762:	0049      	lslcc	r1, r1, #1
 8000764:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000768:	005b      	lslcc	r3, r3, #1
 800076a:	ea40 0001 	orr.w	r0, r0, r1
 800076e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000772:	2afd      	cmp	r2, #253	; 0xfd
 8000774:	d81d      	bhi.n	80007b2 <__aeabi_fmul+0x92>
 8000776:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800077a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800077e:	bf08      	it	eq
 8000780:	f020 0001 	biceq.w	r0, r0, #1
 8000784:	4770      	bx	lr
 8000786:	f090 0f00 	teq	r0, #0
 800078a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800078e:	bf08      	it	eq
 8000790:	0249      	lsleq	r1, r1, #9
 8000792:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000796:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800079a:	3a7f      	subs	r2, #127	; 0x7f
 800079c:	bfc2      	ittt	gt
 800079e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80007a2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80007a6:	4770      	bxgt	lr
 80007a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007ac:	f04f 0300 	mov.w	r3, #0
 80007b0:	3a01      	subs	r2, #1
 80007b2:	dc5d      	bgt.n	8000870 <__aeabi_fmul+0x150>
 80007b4:	f112 0f19 	cmn.w	r2, #25
 80007b8:	bfdc      	itt	le
 80007ba:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80007be:	4770      	bxle	lr
 80007c0:	f1c2 0200 	rsb	r2, r2, #0
 80007c4:	0041      	lsls	r1, r0, #1
 80007c6:	fa21 f102 	lsr.w	r1, r1, r2
 80007ca:	f1c2 0220 	rsb	r2, r2, #32
 80007ce:	fa00 fc02 	lsl.w	ip, r0, r2
 80007d2:	ea5f 0031 	movs.w	r0, r1, rrx
 80007d6:	f140 0000 	adc.w	r0, r0, #0
 80007da:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80007de:	bf08      	it	eq
 80007e0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007e4:	4770      	bx	lr
 80007e6:	f092 0f00 	teq	r2, #0
 80007ea:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80007ee:	bf02      	ittt	eq
 80007f0:	0040      	lsleq	r0, r0, #1
 80007f2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80007f6:	3a01      	subeq	r2, #1
 80007f8:	d0f9      	beq.n	80007ee <__aeabi_fmul+0xce>
 80007fa:	ea40 000c 	orr.w	r0, r0, ip
 80007fe:	f093 0f00 	teq	r3, #0
 8000802:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000806:	bf02      	ittt	eq
 8000808:	0049      	lsleq	r1, r1, #1
 800080a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800080e:	3b01      	subeq	r3, #1
 8000810:	d0f9      	beq.n	8000806 <__aeabi_fmul+0xe6>
 8000812:	ea41 010c 	orr.w	r1, r1, ip
 8000816:	e78f      	b.n	8000738 <__aeabi_fmul+0x18>
 8000818:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800081c:	ea92 0f0c 	teq	r2, ip
 8000820:	bf18      	it	ne
 8000822:	ea93 0f0c 	teqne	r3, ip
 8000826:	d00a      	beq.n	800083e <__aeabi_fmul+0x11e>
 8000828:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800082c:	bf18      	it	ne
 800082e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000832:	d1d8      	bne.n	80007e6 <__aeabi_fmul+0xc6>
 8000834:	ea80 0001 	eor.w	r0, r0, r1
 8000838:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800083c:	4770      	bx	lr
 800083e:	f090 0f00 	teq	r0, #0
 8000842:	bf17      	itett	ne
 8000844:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000848:	4608      	moveq	r0, r1
 800084a:	f091 0f00 	teqne	r1, #0
 800084e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000852:	d014      	beq.n	800087e <__aeabi_fmul+0x15e>
 8000854:	ea92 0f0c 	teq	r2, ip
 8000858:	d101      	bne.n	800085e <__aeabi_fmul+0x13e>
 800085a:	0242      	lsls	r2, r0, #9
 800085c:	d10f      	bne.n	800087e <__aeabi_fmul+0x15e>
 800085e:	ea93 0f0c 	teq	r3, ip
 8000862:	d103      	bne.n	800086c <__aeabi_fmul+0x14c>
 8000864:	024b      	lsls	r3, r1, #9
 8000866:	bf18      	it	ne
 8000868:	4608      	movne	r0, r1
 800086a:	d108      	bne.n	800087e <__aeabi_fmul+0x15e>
 800086c:	ea80 0001 	eor.w	r0, r0, r1
 8000870:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000874:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000878:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800087c:	4770      	bx	lr
 800087e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000882:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000886:	4770      	bx	lr

08000888 <__aeabi_fdiv>:
 8000888:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000890:	bf1e      	ittt	ne
 8000892:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000896:	ea92 0f0c 	teqne	r2, ip
 800089a:	ea93 0f0c 	teqne	r3, ip
 800089e:	d069      	beq.n	8000974 <__aeabi_fdiv+0xec>
 80008a0:	eba2 0203 	sub.w	r2, r2, r3
 80008a4:	ea80 0c01 	eor.w	ip, r0, r1
 80008a8:	0249      	lsls	r1, r1, #9
 80008aa:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80008ae:	d037      	beq.n	8000920 <__aeabi_fdiv+0x98>
 80008b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80008b4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80008b8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80008bc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008c0:	428b      	cmp	r3, r1
 80008c2:	bf38      	it	cc
 80008c4:	005b      	lslcc	r3, r3, #1
 80008c6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80008ca:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80008ce:	428b      	cmp	r3, r1
 80008d0:	bf24      	itt	cs
 80008d2:	1a5b      	subcs	r3, r3, r1
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80008dc:	bf24      	itt	cs
 80008de:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80008e2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80008ea:	bf24      	itt	cs
 80008ec:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80008f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008f4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80008f8:	bf24      	itt	cs
 80008fa:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80008fe:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000902:	011b      	lsls	r3, r3, #4
 8000904:	bf18      	it	ne
 8000906:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800090a:	d1e0      	bne.n	80008ce <__aeabi_fdiv+0x46>
 800090c:	2afd      	cmp	r2, #253	; 0xfd
 800090e:	f63f af50 	bhi.w	80007b2 <__aeabi_fmul+0x92>
 8000912:	428b      	cmp	r3, r1
 8000914:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000918:	bf08      	it	eq
 800091a:	f020 0001 	biceq.w	r0, r0, #1
 800091e:	4770      	bx	lr
 8000920:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000924:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000928:	327f      	adds	r2, #127	; 0x7f
 800092a:	bfc2      	ittt	gt
 800092c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000930:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000934:	4770      	bxgt	lr
 8000936:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800093a:	f04f 0300 	mov.w	r3, #0
 800093e:	3a01      	subs	r2, #1
 8000940:	e737      	b.n	80007b2 <__aeabi_fmul+0x92>
 8000942:	f092 0f00 	teq	r2, #0
 8000946:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800094a:	bf02      	ittt	eq
 800094c:	0040      	lsleq	r0, r0, #1
 800094e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000952:	3a01      	subeq	r2, #1
 8000954:	d0f9      	beq.n	800094a <__aeabi_fdiv+0xc2>
 8000956:	ea40 000c 	orr.w	r0, r0, ip
 800095a:	f093 0f00 	teq	r3, #0
 800095e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000962:	bf02      	ittt	eq
 8000964:	0049      	lsleq	r1, r1, #1
 8000966:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800096a:	3b01      	subeq	r3, #1
 800096c:	d0f9      	beq.n	8000962 <__aeabi_fdiv+0xda>
 800096e:	ea41 010c 	orr.w	r1, r1, ip
 8000972:	e795      	b.n	80008a0 <__aeabi_fdiv+0x18>
 8000974:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	d108      	bne.n	8000990 <__aeabi_fdiv+0x108>
 800097e:	0242      	lsls	r2, r0, #9
 8000980:	f47f af7d 	bne.w	800087e <__aeabi_fmul+0x15e>
 8000984:	ea93 0f0c 	teq	r3, ip
 8000988:	f47f af70 	bne.w	800086c <__aeabi_fmul+0x14c>
 800098c:	4608      	mov	r0, r1
 800098e:	e776      	b.n	800087e <__aeabi_fmul+0x15e>
 8000990:	ea93 0f0c 	teq	r3, ip
 8000994:	d104      	bne.n	80009a0 <__aeabi_fdiv+0x118>
 8000996:	024b      	lsls	r3, r1, #9
 8000998:	f43f af4c 	beq.w	8000834 <__aeabi_fmul+0x114>
 800099c:	4608      	mov	r0, r1
 800099e:	e76e      	b.n	800087e <__aeabi_fmul+0x15e>
 80009a0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80009a4:	bf18      	it	ne
 80009a6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80009aa:	d1ca      	bne.n	8000942 <__aeabi_fdiv+0xba>
 80009ac:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80009b0:	f47f af5c 	bne.w	800086c <__aeabi_fmul+0x14c>
 80009b4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80009b8:	f47f af3c 	bne.w	8000834 <__aeabi_fmul+0x114>
 80009bc:	e75f      	b.n	800087e <__aeabi_fmul+0x15e>
 80009be:	bf00      	nop

080009c0 <map>:
static void MX_USART1_UART_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM4_Init(void);
/* USER CODE BEGIN PFP */
//////////////////////// Function map/////////////////////////////////////////////////////////////
double map(float valor, float entradaMin, float entradaMax, float salidaMin, float salidaMax){
 80009c0:	b590      	push	{r4, r7, lr}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
 80009cc:	603b      	str	r3, [r7, #0]
	   return ((((valor-entradaMin)*(salidaMax-salidaMin))/(entradaMax-entradaMin))+salidaMin);}
 80009ce:	68b9      	ldr	r1, [r7, #8]
 80009d0:	68f8      	ldr	r0, [r7, #12]
 80009d2:	f7ff fd9b 	bl	800050c <__aeabi_fsub>
 80009d6:	4603      	mov	r3, r0
 80009d8:	461c      	mov	r4, r3
 80009da:	6839      	ldr	r1, [r7, #0]
 80009dc:	6a38      	ldr	r0, [r7, #32]
 80009de:	f7ff fd95 	bl	800050c <__aeabi_fsub>
 80009e2:	4603      	mov	r3, r0
 80009e4:	4619      	mov	r1, r3
 80009e6:	4620      	mov	r0, r4
 80009e8:	f7ff fe9a 	bl	8000720 <__aeabi_fmul>
 80009ec:	4603      	mov	r3, r0
 80009ee:	461c      	mov	r4, r3
 80009f0:	68b9      	ldr	r1, [r7, #8]
 80009f2:	6878      	ldr	r0, [r7, #4]
 80009f4:	f7ff fd8a 	bl	800050c <__aeabi_fsub>
 80009f8:	4603      	mov	r3, r0
 80009fa:	4619      	mov	r1, r3
 80009fc:	4620      	mov	r0, r4
 80009fe:	f7ff ff43 	bl	8000888 <__aeabi_fdiv>
 8000a02:	4603      	mov	r3, r0
 8000a04:	6839      	ldr	r1, [r7, #0]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff fd82 	bl	8000510 <__addsf3>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff fd00 	bl	8000414 <__aeabi_f2d>
 8000a14:	4603      	mov	r3, r0
 8000a16:	460c      	mov	r4, r1
 8000a18:	4618      	mov	r0, r3
 8000a1a:	4621      	mov	r1, r4
 8000a1c:	3714      	adds	r7, #20
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd90      	pop	{r4, r7, pc}
	...

08000a24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a24:	b590      	push	{r4, r7, lr}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a2a:	f000 fecd 	bl	80017c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a2e:	f000 f9c7 	bl	8000dc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a32:	f000 fc23 	bl	800127c <MX_GPIO_Init>
  MX_DMA_Init();
 8000a36:	f000 fc03 	bl	8001240 <MX_DMA_Init>
  MX_ADC1_Init();
 8000a3a:	f000 fa1d 	bl	8000e78 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000a3e:	f000 fbd5 	bl	80011ec <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000a42:	f000 faad 	bl	8000fa0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000a46:	f000 fb43 	bl	80010d0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcSamples, 7);
 8000a4a:	2207      	movs	r2, #7
 8000a4c:	49a9      	ldr	r1, [pc, #676]	; (8000cf4 <main+0x2d0>)
 8000a4e:	48aa      	ldr	r0, [pc, #680]	; (8000cf8 <main+0x2d4>)
 8000a50:	f001 f816 	bl	8001a80 <HAL_ADC_Start_DMA>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);//PB4 - base
 8000a54:	2100      	movs	r1, #0
 8000a56:	48a9      	ldr	r0, [pc, #676]	; (8000cfc <main+0x2d8>)
 8000a58:	f002 fc96 	bl	8003388 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);//PB5 -
 8000a5c:	2104      	movs	r1, #4
 8000a5e:	48a7      	ldr	r0, [pc, #668]	; (8000cfc <main+0x2d8>)
 8000a60:	f002 fc92 	bl	8003388 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);//PB0 -
 8000a64:	2108      	movs	r1, #8
 8000a66:	48a5      	ldr	r0, [pc, #660]	; (8000cfc <main+0x2d8>)
 8000a68:	f002 fc8e 	bl	8003388 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);//PB1 -
 8000a6c:	210c      	movs	r1, #12
 8000a6e:	48a3      	ldr	r0, [pc, #652]	; (8000cfc <main+0x2d8>)
 8000a70:	f002 fc8a 	bl	8003388 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);//PB6 -
 8000a74:	2100      	movs	r1, #0
 8000a76:	48a2      	ldr	r0, [pc, #648]	; (8000d00 <main+0x2dc>)
 8000a78:	f002 fc86 	bl	8003388 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);//PB7 - wrist
 8000a7c:	2104      	movs	r1, #4
 8000a7e:	48a0      	ldr	r0, [pc, #640]	; (8000d00 <main+0x2dc>)
 8000a80:	f002 fc82 	bl	8003388 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);//PB8 - gripper
 8000a84:	2108      	movs	r1, #8
 8000a86:	489e      	ldr	r0, [pc, #632]	; (8000d00 <main+0x2dc>)
 8000a88:	f002 fc7e 	bl	8003388 <HAL_TIM_PWM_Start>

  while (1)
  {


	  servos[0] = map(adcSamples[0], 0, 4095, 44, 115);                        //mapeo la lectura del pot1
 8000a8c:	4b99      	ldr	r3, [pc, #612]	; (8000cf4 <main+0x2d0>)
 8000a8e:	881b      	ldrh	r3, [r3, #0]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff fded 	bl	8000670 <__aeabi_ui2f>
 8000a96:	4b9b      	ldr	r3, [pc, #620]	; (8000d04 <main+0x2e0>)
 8000a98:	9300      	str	r3, [sp, #0]
 8000a9a:	4b9b      	ldr	r3, [pc, #620]	; (8000d08 <main+0x2e4>)
 8000a9c:	4a9b      	ldr	r2, [pc, #620]	; (8000d0c <main+0x2e8>)
 8000a9e:	f04f 0100 	mov.w	r1, #0
 8000aa2:	f7ff ff8d 	bl	80009c0 <map>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	460c      	mov	r4, r1
 8000aaa:	4618      	mov	r0, r3
 8000aac:	4621      	mov	r1, r4
 8000aae:	f7ff fd09 	bl	80004c4 <__aeabi_d2uiz>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	b29a      	uxth	r2, r3
 8000ab6:	4b96      	ldr	r3, [pc, #600]	; (8000d10 <main+0x2ec>)
 8000ab8:	801a      	strh	r2, [r3, #0]
	  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,servos[0]); 				    //escribo los grados del servo 0-180
 8000aba:	4b95      	ldr	r3, [pc, #596]	; (8000d10 <main+0x2ec>)
 8000abc:	881a      	ldrh	r2, [r3, #0]
 8000abe:	4b8f      	ldr	r3, [pc, #572]	; (8000cfc <main+0x2d8>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	635a      	str	r2, [r3, #52]	; 0x34
	  stringSize[0] = sprintf(adc1Buffer,"todosServos(%u,",servos[0]);			//convierto a cadena para mandar al UART
 8000ac4:	4b92      	ldr	r3, [pc, #584]	; (8000d10 <main+0x2ec>)
 8000ac6:	881b      	ldrh	r3, [r3, #0]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	4992      	ldr	r1, [pc, #584]	; (8000d14 <main+0x2f0>)
 8000acc:	4892      	ldr	r0, [pc, #584]	; (8000d18 <main+0x2f4>)
 8000ace:	f003 fb2f 	bl	8004130 <siprintf>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	4b91      	ldr	r3, [pc, #580]	; (8000d1c <main+0x2f8>)
 8000ad8:	701a      	strb	r2, [r3, #0]

	  servos[1] = map(adcSamples[1], 0, 4095, 115, 44);                        //mapeo la lectura del pot1
 8000ada:	4b86      	ldr	r3, [pc, #536]	; (8000cf4 <main+0x2d0>)
 8000adc:	885b      	ldrh	r3, [r3, #2]
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff fdc6 	bl	8000670 <__aeabi_ui2f>
 8000ae4:	4b88      	ldr	r3, [pc, #544]	; (8000d08 <main+0x2e4>)
 8000ae6:	9300      	str	r3, [sp, #0]
 8000ae8:	4b86      	ldr	r3, [pc, #536]	; (8000d04 <main+0x2e0>)
 8000aea:	4a88      	ldr	r2, [pc, #544]	; (8000d0c <main+0x2e8>)
 8000aec:	f04f 0100 	mov.w	r1, #0
 8000af0:	f7ff ff66 	bl	80009c0 <map>
 8000af4:	4603      	mov	r3, r0
 8000af6:	460c      	mov	r4, r1
 8000af8:	4618      	mov	r0, r3
 8000afa:	4621      	mov	r1, r4
 8000afc:	f7ff fce2 	bl	80004c4 <__aeabi_d2uiz>
 8000b00:	4603      	mov	r3, r0
 8000b02:	b29a      	uxth	r2, r3
 8000b04:	4b82      	ldr	r3, [pc, #520]	; (8000d10 <main+0x2ec>)
 8000b06:	805a      	strh	r2, [r3, #2]
	  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,servos[1]); 				    //escribo los grados del servo 0-180
 8000b08:	4b81      	ldr	r3, [pc, #516]	; (8000d10 <main+0x2ec>)
 8000b0a:	885a      	ldrh	r2, [r3, #2]
 8000b0c:	4b7b      	ldr	r3, [pc, #492]	; (8000cfc <main+0x2d8>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	639a      	str	r2, [r3, #56]	; 0x38
	  stringSize[1] = sprintf(adc2Buffer,"%u,",servos[1]);			//convierto a cadena para mandar al UART
 8000b12:	4b7f      	ldr	r3, [pc, #508]	; (8000d10 <main+0x2ec>)
 8000b14:	885b      	ldrh	r3, [r3, #2]
 8000b16:	461a      	mov	r2, r3
 8000b18:	4981      	ldr	r1, [pc, #516]	; (8000d20 <main+0x2fc>)
 8000b1a:	4882      	ldr	r0, [pc, #520]	; (8000d24 <main+0x300>)
 8000b1c:	f003 fb08 	bl	8004130 <siprintf>
 8000b20:	4603      	mov	r3, r0
 8000b22:	b2da      	uxtb	r2, r3
 8000b24:	4b7d      	ldr	r3, [pc, #500]	; (8000d1c <main+0x2f8>)
 8000b26:	705a      	strb	r2, [r3, #1]

  	  servos[2] = map(adcSamples[2], 0, 4095, 115, 44);                        //mapeo la lectura del pot1
 8000b28:	4b72      	ldr	r3, [pc, #456]	; (8000cf4 <main+0x2d0>)
 8000b2a:	889b      	ldrh	r3, [r3, #4]
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff fd9f 	bl	8000670 <__aeabi_ui2f>
 8000b32:	4b75      	ldr	r3, [pc, #468]	; (8000d08 <main+0x2e4>)
 8000b34:	9300      	str	r3, [sp, #0]
 8000b36:	4b73      	ldr	r3, [pc, #460]	; (8000d04 <main+0x2e0>)
 8000b38:	4a74      	ldr	r2, [pc, #464]	; (8000d0c <main+0x2e8>)
 8000b3a:	f04f 0100 	mov.w	r1, #0
 8000b3e:	f7ff ff3f 	bl	80009c0 <map>
 8000b42:	4603      	mov	r3, r0
 8000b44:	460c      	mov	r4, r1
 8000b46:	4618      	mov	r0, r3
 8000b48:	4621      	mov	r1, r4
 8000b4a:	f7ff fcbb 	bl	80004c4 <__aeabi_d2uiz>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	b29a      	uxth	r2, r3
 8000b52:	4b6f      	ldr	r3, [pc, #444]	; (8000d10 <main+0x2ec>)
 8000b54:	809a      	strh	r2, [r3, #4]
  	  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,servos[2]); 				    //escribo los grados del servo 0-180
 8000b56:	4b6e      	ldr	r3, [pc, #440]	; (8000d10 <main+0x2ec>)
 8000b58:	889a      	ldrh	r2, [r3, #4]
 8000b5a:	4b68      	ldr	r3, [pc, #416]	; (8000cfc <main+0x2d8>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	63da      	str	r2, [r3, #60]	; 0x3c
  	  stringSize[2] = sprintf(adc3Buffer,"%u,",servos[2]);			//convierto a cadena para mandar al UART
 8000b60:	4b6b      	ldr	r3, [pc, #428]	; (8000d10 <main+0x2ec>)
 8000b62:	889b      	ldrh	r3, [r3, #4]
 8000b64:	461a      	mov	r2, r3
 8000b66:	496e      	ldr	r1, [pc, #440]	; (8000d20 <main+0x2fc>)
 8000b68:	486f      	ldr	r0, [pc, #444]	; (8000d28 <main+0x304>)
 8000b6a:	f003 fae1 	bl	8004130 <siprintf>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	4b6a      	ldr	r3, [pc, #424]	; (8000d1c <main+0x2f8>)
 8000b74:	709a      	strb	r2, [r3, #2]

  	  servos[3] = map(adcSamples[3], 0, 4095, 115, 44);                        //mapeo la lectura del pot1
 8000b76:	4b5f      	ldr	r3, [pc, #380]	; (8000cf4 <main+0x2d0>)
 8000b78:	88db      	ldrh	r3, [r3, #6]
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff fd78 	bl	8000670 <__aeabi_ui2f>
 8000b80:	4b61      	ldr	r3, [pc, #388]	; (8000d08 <main+0x2e4>)
 8000b82:	9300      	str	r3, [sp, #0]
 8000b84:	4b5f      	ldr	r3, [pc, #380]	; (8000d04 <main+0x2e0>)
 8000b86:	4a61      	ldr	r2, [pc, #388]	; (8000d0c <main+0x2e8>)
 8000b88:	f04f 0100 	mov.w	r1, #0
 8000b8c:	f7ff ff18 	bl	80009c0 <map>
 8000b90:	4603      	mov	r3, r0
 8000b92:	460c      	mov	r4, r1
 8000b94:	4618      	mov	r0, r3
 8000b96:	4621      	mov	r1, r4
 8000b98:	f7ff fc94 	bl	80004c4 <__aeabi_d2uiz>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	b29a      	uxth	r2, r3
 8000ba0:	4b5b      	ldr	r3, [pc, #364]	; (8000d10 <main+0x2ec>)
 8000ba2:	80da      	strh	r2, [r3, #6]
  	  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,servos[3]); 				    //escribo los grados del servo 0-180
 8000ba4:	4b5a      	ldr	r3, [pc, #360]	; (8000d10 <main+0x2ec>)
 8000ba6:	88da      	ldrh	r2, [r3, #6]
 8000ba8:	4b54      	ldr	r3, [pc, #336]	; (8000cfc <main+0x2d8>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	641a      	str	r2, [r3, #64]	; 0x40
  	  stringSize[3] = sprintf(adc4Buffer,"%u,",servos[3]);			//convierto a cadena para mandar al UART
 8000bae:	4b58      	ldr	r3, [pc, #352]	; (8000d10 <main+0x2ec>)
 8000bb0:	88db      	ldrh	r3, [r3, #6]
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	495a      	ldr	r1, [pc, #360]	; (8000d20 <main+0x2fc>)
 8000bb6:	485d      	ldr	r0, [pc, #372]	; (8000d2c <main+0x308>)
 8000bb8:	f003 faba 	bl	8004130 <siprintf>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	4b56      	ldr	r3, [pc, #344]	; (8000d1c <main+0x2f8>)
 8000bc2:	70da      	strb	r2, [r3, #3]

  	  servos[4] = map(adcSamples[4], 0, 4095, 115, 44);                        //mapeo la lectura del pot1
 8000bc4:	4b4b      	ldr	r3, [pc, #300]	; (8000cf4 <main+0x2d0>)
 8000bc6:	891b      	ldrh	r3, [r3, #8]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff fd51 	bl	8000670 <__aeabi_ui2f>
 8000bce:	4b4e      	ldr	r3, [pc, #312]	; (8000d08 <main+0x2e4>)
 8000bd0:	9300      	str	r3, [sp, #0]
 8000bd2:	4b4c      	ldr	r3, [pc, #304]	; (8000d04 <main+0x2e0>)
 8000bd4:	4a4d      	ldr	r2, [pc, #308]	; (8000d0c <main+0x2e8>)
 8000bd6:	f04f 0100 	mov.w	r1, #0
 8000bda:	f7ff fef1 	bl	80009c0 <map>
 8000bde:	4603      	mov	r3, r0
 8000be0:	460c      	mov	r4, r1
 8000be2:	4618      	mov	r0, r3
 8000be4:	4621      	mov	r1, r4
 8000be6:	f7ff fc6d 	bl	80004c4 <__aeabi_d2uiz>
 8000bea:	4603      	mov	r3, r0
 8000bec:	b29a      	uxth	r2, r3
 8000bee:	4b48      	ldr	r3, [pc, #288]	; (8000d10 <main+0x2ec>)
 8000bf0:	811a      	strh	r2, [r3, #8]
  	  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,servos[4]); 				    //escribo los grados del servo 0-180
 8000bf2:	4b47      	ldr	r3, [pc, #284]	; (8000d10 <main+0x2ec>)
 8000bf4:	891a      	ldrh	r2, [r3, #8]
 8000bf6:	4b42      	ldr	r3, [pc, #264]	; (8000d00 <main+0x2dc>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	635a      	str	r2, [r3, #52]	; 0x34
  	  stringSize[4] = sprintf(adc5Buffer,"%u,",servos[4]);			//convierto a cadena para mandar al UART
 8000bfc:	4b44      	ldr	r3, [pc, #272]	; (8000d10 <main+0x2ec>)
 8000bfe:	891b      	ldrh	r3, [r3, #8]
 8000c00:	461a      	mov	r2, r3
 8000c02:	4947      	ldr	r1, [pc, #284]	; (8000d20 <main+0x2fc>)
 8000c04:	484a      	ldr	r0, [pc, #296]	; (8000d30 <main+0x30c>)
 8000c06:	f003 fa93 	bl	8004130 <siprintf>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	4b43      	ldr	r3, [pc, #268]	; (8000d1c <main+0x2f8>)
 8000c10:	711a      	strb	r2, [r3, #4]

  	  servos[5] = map(adcSamples[5], 0, 4095, 115, 44);                        //mapeo la lectura del pot1
 8000c12:	4b38      	ldr	r3, [pc, #224]	; (8000cf4 <main+0x2d0>)
 8000c14:	895b      	ldrh	r3, [r3, #10]
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff fd2a 	bl	8000670 <__aeabi_ui2f>
 8000c1c:	4b3a      	ldr	r3, [pc, #232]	; (8000d08 <main+0x2e4>)
 8000c1e:	9300      	str	r3, [sp, #0]
 8000c20:	4b38      	ldr	r3, [pc, #224]	; (8000d04 <main+0x2e0>)
 8000c22:	4a3a      	ldr	r2, [pc, #232]	; (8000d0c <main+0x2e8>)
 8000c24:	f04f 0100 	mov.w	r1, #0
 8000c28:	f7ff feca 	bl	80009c0 <map>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	460c      	mov	r4, r1
 8000c30:	4618      	mov	r0, r3
 8000c32:	4621      	mov	r1, r4
 8000c34:	f7ff fc46 	bl	80004c4 <__aeabi_d2uiz>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	b29a      	uxth	r2, r3
 8000c3c:	4b34      	ldr	r3, [pc, #208]	; (8000d10 <main+0x2ec>)
 8000c3e:	815a      	strh	r2, [r3, #10]
  	  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,servos[5]); 				    //escribo los grados del servo 0-180
 8000c40:	4b33      	ldr	r3, [pc, #204]	; (8000d10 <main+0x2ec>)
 8000c42:	895a      	ldrh	r2, [r3, #10]
 8000c44:	4b2e      	ldr	r3, [pc, #184]	; (8000d00 <main+0x2dc>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	639a      	str	r2, [r3, #56]	; 0x38
  	  stringSize[5] = sprintf(adc6Buffer,"%u,",servos[5]);			//convierto a cadena para mandar al UART
 8000c4a:	4b31      	ldr	r3, [pc, #196]	; (8000d10 <main+0x2ec>)
 8000c4c:	895b      	ldrh	r3, [r3, #10]
 8000c4e:	461a      	mov	r2, r3
 8000c50:	4933      	ldr	r1, [pc, #204]	; (8000d20 <main+0x2fc>)
 8000c52:	4838      	ldr	r0, [pc, #224]	; (8000d34 <main+0x310>)
 8000c54:	f003 fa6c 	bl	8004130 <siprintf>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	b2da      	uxtb	r2, r3
 8000c5c:	4b2f      	ldr	r3, [pc, #188]	; (8000d1c <main+0x2f8>)
 8000c5e:	715a      	strb	r2, [r3, #5]

  	  servos[6] = map(adcSamples[6], 0, 4095, 58, 84);                        //mapeo la lectura del pot1
 8000c60:	4b24      	ldr	r3, [pc, #144]	; (8000cf4 <main+0x2d0>)
 8000c62:	899b      	ldrh	r3, [r3, #12]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fd03 	bl	8000670 <__aeabi_ui2f>
 8000c6a:	4b33      	ldr	r3, [pc, #204]	; (8000d38 <main+0x314>)
 8000c6c:	9300      	str	r3, [sp, #0]
 8000c6e:	4b33      	ldr	r3, [pc, #204]	; (8000d3c <main+0x318>)
 8000c70:	4a26      	ldr	r2, [pc, #152]	; (8000d0c <main+0x2e8>)
 8000c72:	f04f 0100 	mov.w	r1, #0
 8000c76:	f7ff fea3 	bl	80009c0 <map>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	460c      	mov	r4, r1
 8000c7e:	4618      	mov	r0, r3
 8000c80:	4621      	mov	r1, r4
 8000c82:	f7ff fc1f 	bl	80004c4 <__aeabi_d2uiz>
 8000c86:	4603      	mov	r3, r0
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	4b21      	ldr	r3, [pc, #132]	; (8000d10 <main+0x2ec>)
 8000c8c:	819a      	strh	r2, [r3, #12]
  	  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,servos[6]); 				    //escribo los grados del servo 0-180
 8000c8e:	4b20      	ldr	r3, [pc, #128]	; (8000d10 <main+0x2ec>)
 8000c90:	899a      	ldrh	r2, [r3, #12]
 8000c92:	4b1b      	ldr	r3, [pc, #108]	; (8000d00 <main+0x2dc>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	63da      	str	r2, [r3, #60]	; 0x3c
  	  stringSize[6] = sprintf(adc7Buffer,"%u,tiempo);\r\n",servos[6]);			//convierto a cadena para mandar al UART
 8000c98:	4b1d      	ldr	r3, [pc, #116]	; (8000d10 <main+0x2ec>)
 8000c9a:	899b      	ldrh	r3, [r3, #12]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	4928      	ldr	r1, [pc, #160]	; (8000d40 <main+0x31c>)
 8000ca0:	4828      	ldr	r0, [pc, #160]	; (8000d44 <main+0x320>)
 8000ca2:	f003 fa45 	bl	8004130 <siprintf>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <main+0x2f8>)
 8000cac:	719a      	strb	r2, [r3, #6]

      HAL_Delay(10);
 8000cae:	200a      	movs	r0, #10
 8000cb0:	f000 fdec 	bl	800188c <HAL_Delay>

  	  contServos++;
 8000cb4:	4b24      	ldr	r3, [pc, #144]	; (8000d48 <main+0x324>)
 8000cb6:	881b      	ldrh	r3, [r3, #0]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	b29a      	uxth	r2, r3
 8000cbc:	4b22      	ldr	r3, [pc, #136]	; (8000d48 <main+0x324>)
 8000cbe:	801a      	strh	r2, [r3, #0]

  	  if(contServos==10){
 8000cc0:	4b21      	ldr	r3, [pc, #132]	; (8000d48 <main+0x324>)
 8000cc2:	881b      	ldrh	r3, [r3, #0]
 8000cc4:	2b0a      	cmp	r3, #10
 8000cc6:	f47f aee1 	bne.w	8000a8c <main+0x68>
  		HAL_UART_Transmit(&huart1, (uint8_t *)adc1Buffer, stringSize[0], 100);    	//mando al puerto serial
 8000cca:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <main+0x2f8>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	b29a      	uxth	r2, r3
 8000cd0:	2364      	movs	r3, #100	; 0x64
 8000cd2:	4911      	ldr	r1, [pc, #68]	; (8000d18 <main+0x2f4>)
 8000cd4:	481d      	ldr	r0, [pc, #116]	; (8000d4c <main+0x328>)
 8000cd6:	f003 f83c 	bl	8003d52 <HAL_UART_Transmit>
  	  	HAL_UART_Transmit(&huart1, (uint8_t *)adc2Buffer, stringSize[1], 100);    	//mando al puerto serial
 8000cda:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <main+0x2f8>)
 8000cdc:	785b      	ldrb	r3, [r3, #1]
 8000cde:	b29a      	uxth	r2, r3
 8000ce0:	2364      	movs	r3, #100	; 0x64
 8000ce2:	4910      	ldr	r1, [pc, #64]	; (8000d24 <main+0x300>)
 8000ce4:	4819      	ldr	r0, [pc, #100]	; (8000d4c <main+0x328>)
 8000ce6:	f003 f834 	bl	8003d52 <HAL_UART_Transmit>
  	  	HAL_UART_Transmit(&huart1, (uint8_t *)adc3Buffer, stringSize[2], 100);    	//mando al puerto serial
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <main+0x2f8>)
 8000cec:	789b      	ldrb	r3, [r3, #2]
 8000cee:	b29a      	uxth	r2, r3
 8000cf0:	2364      	movs	r3, #100	; 0x64
 8000cf2:	e02d      	b.n	8000d50 <main+0x32c>
 8000cf4:	20000264 	.word	0x20000264
 8000cf8:	20000120 	.word	0x20000120
 8000cfc:	200000e0 	.word	0x200000e0
 8000d00:	2000009c 	.word	0x2000009c
 8000d04:	42e60000 	.word	0x42e60000
 8000d08:	42300000 	.word	0x42300000
 8000d0c:	457ff000 	.word	0x457ff000
 8000d10:	20000210 	.word	0x20000210
 8000d14:	0800496c 	.word	0x0800496c
 8000d18:	20000220 	.word	0x20000220
 8000d1c:	20000234 	.word	0x20000234
 8000d20:	0800497c 	.word	0x0800497c
 8000d24:	2000023c 	.word	0x2000023c
 8000d28:	200001e8 	.word	0x200001e8
 8000d2c:	20000274 	.word	0x20000274
 8000d30:	20000250 	.word	0x20000250
 8000d34:	200001fc 	.word	0x200001fc
 8000d38:	42a80000 	.word	0x42a80000
 8000d3c:	42680000 	.word	0x42680000
 8000d40:	08004980 	.word	0x08004980
 8000d44:	20000190 	.word	0x20000190
 8000d48:	2000008c 	.word	0x2000008c
 8000d4c:	20000150 	.word	0x20000150
 8000d50:	4913      	ldr	r1, [pc, #76]	; (8000da0 <main+0x37c>)
 8000d52:	4814      	ldr	r0, [pc, #80]	; (8000da4 <main+0x380>)
 8000d54:	f002 fffd 	bl	8003d52 <HAL_UART_Transmit>
  	  	HAL_UART_Transmit(&huart1, (uint8_t *)adc4Buffer, stringSize[3], 100);    	//mando al puerto serial
 8000d58:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <main+0x384>)
 8000d5a:	78db      	ldrb	r3, [r3, #3]
 8000d5c:	b29a      	uxth	r2, r3
 8000d5e:	2364      	movs	r3, #100	; 0x64
 8000d60:	4912      	ldr	r1, [pc, #72]	; (8000dac <main+0x388>)
 8000d62:	4810      	ldr	r0, [pc, #64]	; (8000da4 <main+0x380>)
 8000d64:	f002 fff5 	bl	8003d52 <HAL_UART_Transmit>
  	  	HAL_UART_Transmit(&huart1, (uint8_t *)adc5Buffer, stringSize[4], 100);    	//mando al puerto serial
 8000d68:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <main+0x384>)
 8000d6a:	791b      	ldrb	r3, [r3, #4]
 8000d6c:	b29a      	uxth	r2, r3
 8000d6e:	2364      	movs	r3, #100	; 0x64
 8000d70:	490f      	ldr	r1, [pc, #60]	; (8000db0 <main+0x38c>)
 8000d72:	480c      	ldr	r0, [pc, #48]	; (8000da4 <main+0x380>)
 8000d74:	f002 ffed 	bl	8003d52 <HAL_UART_Transmit>
  	    HAL_UART_Transmit(&huart1, (uint8_t *)adc6Buffer, stringSize[5], 100);    	//mando al puerto serial
 8000d78:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <main+0x384>)
 8000d7a:	795b      	ldrb	r3, [r3, #5]
 8000d7c:	b29a      	uxth	r2, r3
 8000d7e:	2364      	movs	r3, #100	; 0x64
 8000d80:	490c      	ldr	r1, [pc, #48]	; (8000db4 <main+0x390>)
 8000d82:	4808      	ldr	r0, [pc, #32]	; (8000da4 <main+0x380>)
 8000d84:	f002 ffe5 	bl	8003d52 <HAL_UART_Transmit>
  	    HAL_UART_Transmit(&huart1, (uint8_t *)adc7Buffer, stringSize[6], 100);    	//mando al puerto serial
 8000d88:	4b07      	ldr	r3, [pc, #28]	; (8000da8 <main+0x384>)
 8000d8a:	799b      	ldrb	r3, [r3, #6]
 8000d8c:	b29a      	uxth	r2, r3
 8000d8e:	2364      	movs	r3, #100	; 0x64
 8000d90:	4909      	ldr	r1, [pc, #36]	; (8000db8 <main+0x394>)
 8000d92:	4804      	ldr	r0, [pc, #16]	; (8000da4 <main+0x380>)
 8000d94:	f002 ffdd 	bl	8003d52 <HAL_UART_Transmit>
        contServos=0;}
 8000d98:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <main+0x398>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	801a      	strh	r2, [r3, #0]
	  servos[0] = map(adcSamples[0], 0, 4095, 44, 115);                        //mapeo la lectura del pot1
 8000d9e:	e675      	b.n	8000a8c <main+0x68>
 8000da0:	200001e8 	.word	0x200001e8
 8000da4:	20000150 	.word	0x20000150
 8000da8:	20000234 	.word	0x20000234
 8000dac:	20000274 	.word	0x20000274
 8000db0:	20000250 	.word	0x20000250
 8000db4:	200001fc 	.word	0x200001fc
 8000db8:	20000190 	.word	0x20000190
 8000dbc:	2000008c 	.word	0x2000008c

08000dc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b094      	sub	sp, #80	; 0x50
 8000dc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dca:	2228      	movs	r2, #40	; 0x28
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f003 f9a6 	bl	8004120 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000de4:	1d3b      	adds	r3, r7, #4
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000df0:	2301      	movs	r3, #1
 8000df2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000df4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e02:	2302      	movs	r3, #2
 8000e04:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e0c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e10:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e16:	4618      	mov	r0, r3
 8000e18:	f001 fd84 	bl	8002924 <HAL_RCC_OscConfig>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000e22:	f000 fa91 	bl	8001348 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e26:	230f      	movs	r3, #15
 8000e28:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e36:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	2102      	movs	r1, #2
 8000e42:	4618      	mov	r0, r3
 8000e44:	f001 ffee 	bl	8002e24 <HAL_RCC_ClockConfig>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000e4e:	f000 fa7b 	bl	8001348 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e52:	2302      	movs	r3, #2
 8000e54:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000e56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e5a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e5c:	1d3b      	adds	r3, r7, #4
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f002 f97c 	bl	800315c <HAL_RCCEx_PeriphCLKConfig>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000e6a:	f000 fa6d 	bl	8001348 <Error_Handler>
  }
}
 8000e6e:	bf00      	nop
 8000e70:	3750      	adds	r7, #80	; 0x50
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000e88:	4b43      	ldr	r3, [pc, #268]	; (8000f98 <MX_ADC1_Init+0x120>)
 8000e8a:	4a44      	ldr	r2, [pc, #272]	; (8000f9c <MX_ADC1_Init+0x124>)
 8000e8c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e8e:	4b42      	ldr	r3, [pc, #264]	; (8000f98 <MX_ADC1_Init+0x120>)
 8000e90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e94:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e96:	4b40      	ldr	r3, [pc, #256]	; (8000f98 <MX_ADC1_Init+0x120>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e9c:	4b3e      	ldr	r3, [pc, #248]	; (8000f98 <MX_ADC1_Init+0x120>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ea2:	4b3d      	ldr	r3, [pc, #244]	; (8000f98 <MX_ADC1_Init+0x120>)
 8000ea4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000ea8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eaa:	4b3b      	ldr	r3, [pc, #236]	; (8000f98 <MX_ADC1_Init+0x120>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 7;
 8000eb0:	4b39      	ldr	r3, [pc, #228]	; (8000f98 <MX_ADC1_Init+0x120>)
 8000eb2:	2207      	movs	r2, #7
 8000eb4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000eb6:	4838      	ldr	r0, [pc, #224]	; (8000f98 <MX_ADC1_Init+0x120>)
 8000eb8:	f000 fd0a 	bl	80018d0 <HAL_ADC_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000ec2:	f000 fa41 	bl	8001348 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ed2:	1d3b      	adds	r3, r7, #4
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4830      	ldr	r0, [pc, #192]	; (8000f98 <MX_ADC1_Init+0x120>)
 8000ed8:	f000 fecc 	bl	8001c74 <HAL_ADC_ConfigChannel>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000ee2:	f000 fa31 	bl	8001348 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000eea:	2302      	movs	r3, #2
 8000eec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eee:	1d3b      	adds	r3, r7, #4
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4829      	ldr	r0, [pc, #164]	; (8000f98 <MX_ADC1_Init+0x120>)
 8000ef4:	f000 febe 	bl	8001c74 <HAL_ADC_ConfigChannel>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000efe:	f000 fa23 	bl	8001348 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000f02:	2302      	movs	r3, #2
 8000f04:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000f06:	2303      	movs	r3, #3
 8000f08:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4822      	ldr	r0, [pc, #136]	; (8000f98 <MX_ADC1_Init+0x120>)
 8000f10:	f000 feb0 	bl	8001c74 <HAL_ADC_ConfigChannel>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000f1a:	f000 fa15 	bl	8001348 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000f22:	2304      	movs	r3, #4
 8000f24:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	4619      	mov	r1, r3
 8000f2a:	481b      	ldr	r0, [pc, #108]	; (8000f98 <MX_ADC1_Init+0x120>)
 8000f2c:	f000 fea2 	bl	8001c74 <HAL_ADC_ConfigChannel>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000f36:	f000 fa07 	bl	8001348 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000f3e:	2305      	movs	r3, #5
 8000f40:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	4619      	mov	r1, r3
 8000f46:	4814      	ldr	r0, [pc, #80]	; (8000f98 <MX_ADC1_Init+0x120>)
 8000f48:	f000 fe94 	bl	8001c74 <HAL_ADC_ConfigChannel>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000f52:	f000 f9f9 	bl	8001348 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000f56:	2305      	movs	r3, #5
 8000f58:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000f5a:	2306      	movs	r3, #6
 8000f5c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	4619      	mov	r1, r3
 8000f62:	480d      	ldr	r0, [pc, #52]	; (8000f98 <MX_ADC1_Init+0x120>)
 8000f64:	f000 fe86 	bl	8001c74 <HAL_ADC_ConfigChannel>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000f6e:	f000 f9eb 	bl	8001348 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000f72:	2306      	movs	r3, #6
 8000f74:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000f76:	2307      	movs	r3, #7
 8000f78:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4806      	ldr	r0, [pc, #24]	; (8000f98 <MX_ADC1_Init+0x120>)
 8000f80:	f000 fe78 	bl	8001c74 <HAL_ADC_ConfigChannel>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000f8a:	f000 f9dd 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f8e:	bf00      	nop
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000120 	.word	0x20000120
 8000f9c:	40012400 	.word	0x40012400

08000fa0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08e      	sub	sp, #56	; 0x38
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fa6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb4:	f107 0320 	add.w	r3, r7, #32
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
 8000fcc:	615a      	str	r2, [r3, #20]
 8000fce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fd0:	4b3d      	ldr	r3, [pc, #244]	; (80010c8 <MX_TIM3_Init+0x128>)
 8000fd2:	4a3e      	ldr	r2, [pc, #248]	; (80010cc <MX_TIM3_Init+0x12c>)
 8000fd4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1400;
 8000fd6:	4b3c      	ldr	r3, [pc, #240]	; (80010c8 <MX_TIM3_Init+0x128>)
 8000fd8:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8000fdc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fde:	4b3a      	ldr	r3, [pc, #232]	; (80010c8 <MX_TIM3_Init+0x128>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000fe4:	4b38      	ldr	r3, [pc, #224]	; (80010c8 <MX_TIM3_Init+0x128>)
 8000fe6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fec:	4b36      	ldr	r3, [pc, #216]	; (80010c8 <MX_TIM3_Init+0x128>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff2:	4b35      	ldr	r3, [pc, #212]	; (80010c8 <MX_TIM3_Init+0x128>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ff8:	4833      	ldr	r0, [pc, #204]	; (80010c8 <MX_TIM3_Init+0x128>)
 8000ffa:	f002 f965 	bl	80032c8 <HAL_TIM_Base_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001004:	f000 f9a0 	bl	8001348 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001008:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800100c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800100e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001012:	4619      	mov	r1, r3
 8001014:	482c      	ldr	r0, [pc, #176]	; (80010c8 <MX_TIM3_Init+0x128>)
 8001016:	f002 faaf 	bl	8003578 <HAL_TIM_ConfigClockSource>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001020:	f000 f992 	bl	8001348 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001024:	4828      	ldr	r0, [pc, #160]	; (80010c8 <MX_TIM3_Init+0x128>)
 8001026:	f002 f97a 	bl	800331e <HAL_TIM_PWM_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001030:	f000 f98a 	bl	8001348 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001034:	2300      	movs	r3, #0
 8001036:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001038:	2300      	movs	r3, #0
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800103c:	f107 0320 	add.w	r3, r7, #32
 8001040:	4619      	mov	r1, r3
 8001042:	4821      	ldr	r0, [pc, #132]	; (80010c8 <MX_TIM3_Init+0x128>)
 8001044:	f002 fdf4 	bl	8003c30 <HAL_TIMEx_MasterConfigSynchronization>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800104e:	f000 f97b 	bl	8001348 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001052:	2360      	movs	r3, #96	; 0x60
 8001054:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	2200      	movs	r2, #0
 8001066:	4619      	mov	r1, r3
 8001068:	4817      	ldr	r0, [pc, #92]	; (80010c8 <MX_TIM3_Init+0x128>)
 800106a:	f002 f9bf 	bl	80033ec <HAL_TIM_PWM_ConfigChannel>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001074:	f000 f968 	bl	8001348 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001078:	1d3b      	adds	r3, r7, #4
 800107a:	2204      	movs	r2, #4
 800107c:	4619      	mov	r1, r3
 800107e:	4812      	ldr	r0, [pc, #72]	; (80010c8 <MX_TIM3_Init+0x128>)
 8001080:	f002 f9b4 	bl	80033ec <HAL_TIM_PWM_ConfigChannel>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800108a:	f000 f95d 	bl	8001348 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	2208      	movs	r2, #8
 8001092:	4619      	mov	r1, r3
 8001094:	480c      	ldr	r0, [pc, #48]	; (80010c8 <MX_TIM3_Init+0x128>)
 8001096:	f002 f9a9 	bl	80033ec <HAL_TIM_PWM_ConfigChannel>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 80010a0:	f000 f952 	bl	8001348 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80010a4:	1d3b      	adds	r3, r7, #4
 80010a6:	220c      	movs	r2, #12
 80010a8:	4619      	mov	r1, r3
 80010aa:	4807      	ldr	r0, [pc, #28]	; (80010c8 <MX_TIM3_Init+0x128>)
 80010ac:	f002 f99e 	bl	80033ec <HAL_TIM_PWM_ConfigChannel>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 80010b6:	f000 f947 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80010ba:	4803      	ldr	r0, [pc, #12]	; (80010c8 <MX_TIM3_Init+0x128>)
 80010bc:	f000 fa16 	bl	80014ec <HAL_TIM_MspPostInit>

}
 80010c0:	bf00      	nop
 80010c2:	3738      	adds	r7, #56	; 0x38
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	200000e0 	.word	0x200000e0
 80010cc:	40000400 	.word	0x40000400

080010d0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08e      	sub	sp, #56	; 0x38
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e4:	f107 0320 	add.w	r3, r7, #32
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
 80010fc:	615a      	str	r2, [r3, #20]
 80010fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001100:	4b38      	ldr	r3, [pc, #224]	; (80011e4 <MX_TIM4_Init+0x114>)
 8001102:	4a39      	ldr	r2, [pc, #228]	; (80011e8 <MX_TIM4_Init+0x118>)
 8001104:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1400;
 8001106:	4b37      	ldr	r3, [pc, #220]	; (80011e4 <MX_TIM4_Init+0x114>)
 8001108:	f44f 62af 	mov.w	r2, #1400	; 0x578
 800110c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800110e:	4b35      	ldr	r3, [pc, #212]	; (80011e4 <MX_TIM4_Init+0x114>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8001114:	4b33      	ldr	r3, [pc, #204]	; (80011e4 <MX_TIM4_Init+0x114>)
 8001116:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800111a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800111c:	4b31      	ldr	r3, [pc, #196]	; (80011e4 <MX_TIM4_Init+0x114>)
 800111e:	2200      	movs	r2, #0
 8001120:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001122:	4b30      	ldr	r3, [pc, #192]	; (80011e4 <MX_TIM4_Init+0x114>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001128:	482e      	ldr	r0, [pc, #184]	; (80011e4 <MX_TIM4_Init+0x114>)
 800112a:	f002 f8cd 	bl	80032c8 <HAL_TIM_Base_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001134:	f000 f908 	bl	8001348 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001138:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800113c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800113e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001142:	4619      	mov	r1, r3
 8001144:	4827      	ldr	r0, [pc, #156]	; (80011e4 <MX_TIM4_Init+0x114>)
 8001146:	f002 fa17 	bl	8003578 <HAL_TIM_ConfigClockSource>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001150:	f000 f8fa 	bl	8001348 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001154:	4823      	ldr	r0, [pc, #140]	; (80011e4 <MX_TIM4_Init+0x114>)
 8001156:	f002 f8e2 	bl	800331e <HAL_TIM_PWM_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001160:	f000 f8f2 	bl	8001348 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001164:	2300      	movs	r3, #0
 8001166:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001168:	2300      	movs	r3, #0
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800116c:	f107 0320 	add.w	r3, r7, #32
 8001170:	4619      	mov	r1, r3
 8001172:	481c      	ldr	r0, [pc, #112]	; (80011e4 <MX_TIM4_Init+0x114>)
 8001174:	f002 fd5c 	bl	8003c30 <HAL_TIMEx_MasterConfigSynchronization>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800117e:	f000 f8e3 	bl	8001348 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001182:	2360      	movs	r3, #96	; 0x60
 8001184:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	2200      	movs	r2, #0
 8001196:	4619      	mov	r1, r3
 8001198:	4812      	ldr	r0, [pc, #72]	; (80011e4 <MX_TIM4_Init+0x114>)
 800119a:	f002 f927 	bl	80033ec <HAL_TIM_PWM_ConfigChannel>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80011a4:	f000 f8d0 	bl	8001348 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	2204      	movs	r2, #4
 80011ac:	4619      	mov	r1, r3
 80011ae:	480d      	ldr	r0, [pc, #52]	; (80011e4 <MX_TIM4_Init+0x114>)
 80011b0:	f002 f91c 	bl	80033ec <HAL_TIM_PWM_ConfigChannel>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 80011ba:	f000 f8c5 	bl	8001348 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	2208      	movs	r2, #8
 80011c2:	4619      	mov	r1, r3
 80011c4:	4807      	ldr	r0, [pc, #28]	; (80011e4 <MX_TIM4_Init+0x114>)
 80011c6:	f002 f911 	bl	80033ec <HAL_TIM_PWM_ConfigChannel>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 80011d0:	f000 f8ba 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80011d4:	4803      	ldr	r0, [pc, #12]	; (80011e4 <MX_TIM4_Init+0x114>)
 80011d6:	f000 f989 	bl	80014ec <HAL_TIM_MspPostInit>

}
 80011da:	bf00      	nop
 80011dc:	3738      	adds	r7, #56	; 0x38
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	2000009c 	.word	0x2000009c
 80011e8:	40000800 	.word	0x40000800

080011ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011f0:	4b11      	ldr	r3, [pc, #68]	; (8001238 <MX_USART1_UART_Init+0x4c>)
 80011f2:	4a12      	ldr	r2, [pc, #72]	; (800123c <MX_USART1_UART_Init+0x50>)
 80011f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011f6:	4b10      	ldr	r3, [pc, #64]	; (8001238 <MX_USART1_UART_Init+0x4c>)
 80011f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011fe:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <MX_USART1_UART_Init+0x4c>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001204:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <MX_USART1_UART_Init+0x4c>)
 8001206:	2200      	movs	r2, #0
 8001208:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800120a:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <MX_USART1_UART_Init+0x4c>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001210:	4b09      	ldr	r3, [pc, #36]	; (8001238 <MX_USART1_UART_Init+0x4c>)
 8001212:	220c      	movs	r2, #12
 8001214:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001216:	4b08      	ldr	r3, [pc, #32]	; (8001238 <MX_USART1_UART_Init+0x4c>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <MX_USART1_UART_Init+0x4c>)
 800121e:	2200      	movs	r2, #0
 8001220:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001222:	4805      	ldr	r0, [pc, #20]	; (8001238 <MX_USART1_UART_Init+0x4c>)
 8001224:	f002 fd48 	bl	8003cb8 <HAL_UART_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800122e:	f000 f88b 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000150 	.word	0x20000150
 800123c:	40013800 	.word	0x40013800

08001240 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001246:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <MX_DMA_Init+0x38>)
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	4a0b      	ldr	r2, [pc, #44]	; (8001278 <MX_DMA_Init+0x38>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	6153      	str	r3, [r2, #20]
 8001252:	4b09      	ldr	r3, [pc, #36]	; (8001278 <MX_DMA_Init+0x38>)
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	2100      	movs	r1, #0
 8001262:	200b      	movs	r0, #11
 8001264:	f000 ffc7 	bl	80021f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001268:	200b      	movs	r0, #11
 800126a:	f000 ffe0 	bl	800222e <HAL_NVIC_EnableIRQ>

}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40021000 	.word	0x40021000

0800127c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b088      	sub	sp, #32
 8001280:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001282:	f107 0310 	add.w	r3, r7, #16
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001290:	4b2a      	ldr	r3, [pc, #168]	; (800133c <MX_GPIO_Init+0xc0>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	4a29      	ldr	r2, [pc, #164]	; (800133c <MX_GPIO_Init+0xc0>)
 8001296:	f043 0310 	orr.w	r3, r3, #16
 800129a:	6193      	str	r3, [r2, #24]
 800129c:	4b27      	ldr	r3, [pc, #156]	; (800133c <MX_GPIO_Init+0xc0>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	f003 0310 	and.w	r3, r3, #16
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012a8:	4b24      	ldr	r3, [pc, #144]	; (800133c <MX_GPIO_Init+0xc0>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	4a23      	ldr	r2, [pc, #140]	; (800133c <MX_GPIO_Init+0xc0>)
 80012ae:	f043 0320 	orr.w	r3, r3, #32
 80012b2:	6193      	str	r3, [r2, #24]
 80012b4:	4b21      	ldr	r3, [pc, #132]	; (800133c <MX_GPIO_Init+0xc0>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	f003 0320 	and.w	r3, r3, #32
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c0:	4b1e      	ldr	r3, [pc, #120]	; (800133c <MX_GPIO_Init+0xc0>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	4a1d      	ldr	r2, [pc, #116]	; (800133c <MX_GPIO_Init+0xc0>)
 80012c6:	f043 0304 	orr.w	r3, r3, #4
 80012ca:	6193      	str	r3, [r2, #24]
 80012cc:	4b1b      	ldr	r3, [pc, #108]	; (800133c <MX_GPIO_Init+0xc0>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	f003 0304 	and.w	r3, r3, #4
 80012d4:	607b      	str	r3, [r7, #4]
 80012d6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d8:	4b18      	ldr	r3, [pc, #96]	; (800133c <MX_GPIO_Init+0xc0>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	4a17      	ldr	r2, [pc, #92]	; (800133c <MX_GPIO_Init+0xc0>)
 80012de:	f043 0308 	orr.w	r3, r3, #8
 80012e2:	6193      	str	r3, [r2, #24]
 80012e4:	4b15      	ldr	r3, [pc, #84]	; (800133c <MX_GPIO_Init+0xc0>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	f003 0308 	and.w	r3, r3, #8
 80012ec:	603b      	str	r3, [r7, #0]
 80012ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 80012f0:	2200      	movs	r2, #0
 80012f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012f6:	4812      	ldr	r0, [pc, #72]	; (8001340 <MX_GPIO_Init+0xc4>)
 80012f8:	f001 fafc 	bl	80028f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led1_Pin */
  GPIO_InitStruct.Pin = led1_Pin;
 80012fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001300:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001302:	2301      	movs	r3, #1
 8001304:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	2302      	movs	r3, #2
 800130c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(led1_GPIO_Port, &GPIO_InitStruct);
 800130e:	f107 0310 	add.w	r3, r7, #16
 8001312:	4619      	mov	r1, r3
 8001314:	480a      	ldr	r0, [pc, #40]	; (8001340 <MX_GPIO_Init+0xc4>)
 8001316:	f001 f993 	bl	8002640 <HAL_GPIO_Init>

  /*Configure GPIO pin : boton1_Pin */
  GPIO_InitStruct.Pin = boton1_Pin;
 800131a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800131e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001324:	2301      	movs	r3, #1
 8001326:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(boton1_GPIO_Port, &GPIO_InitStruct);
 8001328:	f107 0310 	add.w	r3, r7, #16
 800132c:	4619      	mov	r1, r3
 800132e:	4805      	ldr	r0, [pc, #20]	; (8001344 <MX_GPIO_Init+0xc8>)
 8001330:	f001 f986 	bl	8002640 <HAL_GPIO_Init>

}
 8001334:	bf00      	nop
 8001336:	3720      	adds	r7, #32
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40021000 	.word	0x40021000
 8001340:	40011000 	.word	0x40011000
 8001344:	40010c00 	.word	0x40010c00

08001348 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr

08001354 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800135a:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <HAL_MspInit+0x5c>)
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	4a14      	ldr	r2, [pc, #80]	; (80013b0 <HAL_MspInit+0x5c>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	6193      	str	r3, [r2, #24]
 8001366:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <HAL_MspInit+0x5c>)
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	60bb      	str	r3, [r7, #8]
 8001370:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001372:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <HAL_MspInit+0x5c>)
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	4a0e      	ldr	r2, [pc, #56]	; (80013b0 <HAL_MspInit+0x5c>)
 8001378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800137c:	61d3      	str	r3, [r2, #28]
 800137e:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <HAL_MspInit+0x5c>)
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001386:	607b      	str	r3, [r7, #4]
 8001388:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800138a:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <HAL_MspInit+0x60>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	4a04      	ldr	r2, [pc, #16]	; (80013b4 <HAL_MspInit+0x60>)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013a6:	bf00      	nop
 80013a8:	3714      	adds	r7, #20
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr
 80013b0:	40021000 	.word	0x40021000
 80013b4:	40010000 	.word	0x40010000

080013b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b088      	sub	sp, #32
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	f107 0310 	add.w	r3, r7, #16
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a28      	ldr	r2, [pc, #160]	; (8001474 <HAL_ADC_MspInit+0xbc>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d149      	bne.n	800146c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013d8:	4b27      	ldr	r3, [pc, #156]	; (8001478 <HAL_ADC_MspInit+0xc0>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	4a26      	ldr	r2, [pc, #152]	; (8001478 <HAL_ADC_MspInit+0xc0>)
 80013de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013e2:	6193      	str	r3, [r2, #24]
 80013e4:	4b24      	ldr	r3, [pc, #144]	; (8001478 <HAL_ADC_MspInit+0xc0>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f0:	4b21      	ldr	r3, [pc, #132]	; (8001478 <HAL_ADC_MspInit+0xc0>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	4a20      	ldr	r2, [pc, #128]	; (8001478 <HAL_ADC_MspInit+0xc0>)
 80013f6:	f043 0304 	orr.w	r3, r3, #4
 80013fa:	6193      	str	r3, [r2, #24]
 80013fc:	4b1e      	ldr	r3, [pc, #120]	; (8001478 <HAL_ADC_MspInit+0xc0>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	f003 0304 	and.w	r3, r3, #4
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001408:	237f      	movs	r3, #127	; 0x7f
 800140a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800140c:	2303      	movs	r3, #3
 800140e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001410:	f107 0310 	add.w	r3, r7, #16
 8001414:	4619      	mov	r1, r3
 8001416:	4819      	ldr	r0, [pc, #100]	; (800147c <HAL_ADC_MspInit+0xc4>)
 8001418:	f001 f912 	bl	8002640 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800141c:	4b18      	ldr	r3, [pc, #96]	; (8001480 <HAL_ADC_MspInit+0xc8>)
 800141e:	4a19      	ldr	r2, [pc, #100]	; (8001484 <HAL_ADC_MspInit+0xcc>)
 8001420:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001422:	4b17      	ldr	r3, [pc, #92]	; (8001480 <HAL_ADC_MspInit+0xc8>)
 8001424:	2200      	movs	r2, #0
 8001426:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001428:	4b15      	ldr	r3, [pc, #84]	; (8001480 <HAL_ADC_MspInit+0xc8>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800142e:	4b14      	ldr	r3, [pc, #80]	; (8001480 <HAL_ADC_MspInit+0xc8>)
 8001430:	2280      	movs	r2, #128	; 0x80
 8001432:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001434:	4b12      	ldr	r3, [pc, #72]	; (8001480 <HAL_ADC_MspInit+0xc8>)
 8001436:	f44f 7280 	mov.w	r2, #256	; 0x100
 800143a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800143c:	4b10      	ldr	r3, [pc, #64]	; (8001480 <HAL_ADC_MspInit+0xc8>)
 800143e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001442:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001444:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <HAL_ADC_MspInit+0xc8>)
 8001446:	2220      	movs	r2, #32
 8001448:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800144a:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <HAL_ADC_MspInit+0xc8>)
 800144c:	2200      	movs	r2, #0
 800144e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001450:	480b      	ldr	r0, [pc, #44]	; (8001480 <HAL_ADC_MspInit+0xc8>)
 8001452:	f000 ff07 	bl	8002264 <HAL_DMA_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800145c:	f7ff ff74 	bl	8001348 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4a07      	ldr	r2, [pc, #28]	; (8001480 <HAL_ADC_MspInit+0xc8>)
 8001464:	621a      	str	r2, [r3, #32]
 8001466:	4a06      	ldr	r2, [pc, #24]	; (8001480 <HAL_ADC_MspInit+0xc8>)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800146c:	bf00      	nop
 800146e:	3720      	adds	r7, #32
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40012400 	.word	0x40012400
 8001478:	40021000 	.word	0x40021000
 800147c:	40010800 	.word	0x40010800
 8001480:	200001a4 	.word	0x200001a4
 8001484:	40020008 	.word	0x40020008

08001488 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a12      	ldr	r2, [pc, #72]	; (80014e0 <HAL_TIM_Base_MspInit+0x58>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d10c      	bne.n	80014b4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800149a:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <HAL_TIM_Base_MspInit+0x5c>)
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	4a11      	ldr	r2, [pc, #68]	; (80014e4 <HAL_TIM_Base_MspInit+0x5c>)
 80014a0:	f043 0302 	orr.w	r3, r3, #2
 80014a4:	61d3      	str	r3, [r2, #28]
 80014a6:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <HAL_TIM_Base_MspInit+0x5c>)
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80014b2:	e010      	b.n	80014d6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a0b      	ldr	r2, [pc, #44]	; (80014e8 <HAL_TIM_Base_MspInit+0x60>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d10b      	bne.n	80014d6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80014be:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <HAL_TIM_Base_MspInit+0x5c>)
 80014c0:	69db      	ldr	r3, [r3, #28]
 80014c2:	4a08      	ldr	r2, [pc, #32]	; (80014e4 <HAL_TIM_Base_MspInit+0x5c>)
 80014c4:	f043 0304 	orr.w	r3, r3, #4
 80014c8:	61d3      	str	r3, [r2, #28]
 80014ca:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <HAL_TIM_Base_MspInit+0x5c>)
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	f003 0304 	and.w	r3, r3, #4
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	68bb      	ldr	r3, [r7, #8]
}
 80014d6:	bf00      	nop
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr
 80014e0:	40000400 	.word	0x40000400
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40000800 	.word	0x40000800

080014ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	; 0x28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a28      	ldr	r2, [pc, #160]	; (80015a8 <HAL_TIM_MspPostInit+0xbc>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d12a      	bne.n	8001562 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800150c:	4b27      	ldr	r3, [pc, #156]	; (80015ac <HAL_TIM_MspPostInit+0xc0>)
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	4a26      	ldr	r2, [pc, #152]	; (80015ac <HAL_TIM_MspPostInit+0xc0>)
 8001512:	f043 0308 	orr.w	r3, r3, #8
 8001516:	6193      	str	r3, [r2, #24]
 8001518:	4b24      	ldr	r3, [pc, #144]	; (80015ac <HAL_TIM_MspPostInit+0xc0>)
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	f003 0308 	and.w	r3, r3, #8
 8001520:	613b      	str	r3, [r7, #16]
 8001522:	693b      	ldr	r3, [r7, #16]
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001524:	2333      	movs	r3, #51	; 0x33
 8001526:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001528:	2302      	movs	r3, #2
 800152a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152c:	2302      	movs	r3, #2
 800152e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	4619      	mov	r1, r3
 8001536:	481e      	ldr	r0, [pc, #120]	; (80015b0 <HAL_TIM_MspPostInit+0xc4>)
 8001538:	f001 f882 	bl	8002640 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 800153c:	4b1d      	ldr	r3, [pc, #116]	; (80015b4 <HAL_TIM_MspPostInit+0xc8>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
 8001542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001544:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
 800154a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001550:	627b      	str	r3, [r7, #36]	; 0x24
 8001552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001554:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
 800155a:	4a16      	ldr	r2, [pc, #88]	; (80015b4 <HAL_TIM_MspPostInit+0xc8>)
 800155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001560:	e01d      	b.n	800159e <HAL_TIM_MspPostInit+0xb2>
  else if(htim->Instance==TIM4)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a14      	ldr	r2, [pc, #80]	; (80015b8 <HAL_TIM_MspPostInit+0xcc>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d118      	bne.n	800159e <HAL_TIM_MspPostInit+0xb2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800156c:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <HAL_TIM_MspPostInit+0xc0>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	4a0e      	ldr	r2, [pc, #56]	; (80015ac <HAL_TIM_MspPostInit+0xc0>)
 8001572:	f043 0308 	orr.w	r3, r3, #8
 8001576:	6193      	str	r3, [r2, #24]
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <HAL_TIM_MspPostInit+0xc0>)
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	f003 0308 	and.w	r3, r3, #8
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001584:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001588:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158a:	2302      	movs	r3, #2
 800158c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158e:	2302      	movs	r3, #2
 8001590:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001592:	f107 0314 	add.w	r3, r7, #20
 8001596:	4619      	mov	r1, r3
 8001598:	4805      	ldr	r0, [pc, #20]	; (80015b0 <HAL_TIM_MspPostInit+0xc4>)
 800159a:	f001 f851 	bl	8002640 <HAL_GPIO_Init>
}
 800159e:	bf00      	nop
 80015a0:	3728      	adds	r7, #40	; 0x28
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40000400 	.word	0x40000400
 80015ac:	40021000 	.word	0x40021000
 80015b0:	40010c00 	.word	0x40010c00
 80015b4:	40010000 	.word	0x40010000
 80015b8:	40000800 	.word	0x40000800

080015bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b088      	sub	sp, #32
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 0310 	add.w	r3, r7, #16
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a1c      	ldr	r2, [pc, #112]	; (8001648 <HAL_UART_MspInit+0x8c>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d131      	bne.n	8001640 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015dc:	4b1b      	ldr	r3, [pc, #108]	; (800164c <HAL_UART_MspInit+0x90>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	4a1a      	ldr	r2, [pc, #104]	; (800164c <HAL_UART_MspInit+0x90>)
 80015e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015e6:	6193      	str	r3, [r2, #24]
 80015e8:	4b18      	ldr	r3, [pc, #96]	; (800164c <HAL_UART_MspInit+0x90>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f4:	4b15      	ldr	r3, [pc, #84]	; (800164c <HAL_UART_MspInit+0x90>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	4a14      	ldr	r2, [pc, #80]	; (800164c <HAL_UART_MspInit+0x90>)
 80015fa:	f043 0304 	orr.w	r3, r3, #4
 80015fe:	6193      	str	r3, [r2, #24]
 8001600:	4b12      	ldr	r3, [pc, #72]	; (800164c <HAL_UART_MspInit+0x90>)
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	f003 0304 	and.w	r3, r3, #4
 8001608:	60bb      	str	r3, [r7, #8]
 800160a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800160c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001610:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001612:	2302      	movs	r3, #2
 8001614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001616:	2303      	movs	r3, #3
 8001618:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161a:	f107 0310 	add.w	r3, r7, #16
 800161e:	4619      	mov	r1, r3
 8001620:	480b      	ldr	r0, [pc, #44]	; (8001650 <HAL_UART_MspInit+0x94>)
 8001622:	f001 f80d 	bl	8002640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001626:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800162a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001634:	f107 0310 	add.w	r3, r7, #16
 8001638:	4619      	mov	r1, r3
 800163a:	4805      	ldr	r0, [pc, #20]	; (8001650 <HAL_UART_MspInit+0x94>)
 800163c:	f001 f800 	bl	8002640 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001640:	bf00      	nop
 8001642:	3720      	adds	r7, #32
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40013800 	.word	0x40013800
 800164c:	40021000 	.word	0x40021000
 8001650:	40010800 	.word	0x40010800

08001654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr

08001660 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001664:	e7fe      	b.n	8001664 <HardFault_Handler+0x4>

08001666 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800166a:	e7fe      	b.n	800166a <MemManage_Handler+0x4>

0800166c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001670:	e7fe      	b.n	8001670 <BusFault_Handler+0x4>

08001672 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001672:	b480      	push	{r7}
 8001674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001676:	e7fe      	b.n	8001676 <UsageFault_Handler+0x4>

08001678 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr

08001684 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr

08001690 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr

0800169c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016a0:	f000 f8d8 	bl	8001854 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a4:	bf00      	nop
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016ac:	4802      	ldr	r0, [pc, #8]	; (80016b8 <DMA1_Channel1_IRQHandler+0x10>)
 80016ae:	f000 fe93 	bl	80023d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	200001a4 	.word	0x200001a4

080016bc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80016c4:	4b11      	ldr	r3, [pc, #68]	; (800170c <_sbrk+0x50>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d102      	bne.n	80016d2 <_sbrk+0x16>
		heap_end = &end;
 80016cc:	4b0f      	ldr	r3, [pc, #60]	; (800170c <_sbrk+0x50>)
 80016ce:	4a10      	ldr	r2, [pc, #64]	; (8001710 <_sbrk+0x54>)
 80016d0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80016d2:	4b0e      	ldr	r3, [pc, #56]	; (800170c <_sbrk+0x50>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <_sbrk+0x50>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4413      	add	r3, r2
 80016e0:	466a      	mov	r2, sp
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d907      	bls.n	80016f6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80016e6:	f002 fcf1 	bl	80040cc <__errno>
 80016ea:	4602      	mov	r2, r0
 80016ec:	230c      	movs	r3, #12
 80016ee:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80016f0:	f04f 33ff 	mov.w	r3, #4294967295
 80016f4:	e006      	b.n	8001704 <_sbrk+0x48>
	}

	heap_end += incr;
 80016f6:	4b05      	ldr	r3, [pc, #20]	; (800170c <_sbrk+0x50>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4413      	add	r3, r2
 80016fe:	4a03      	ldr	r2, [pc, #12]	; (800170c <_sbrk+0x50>)
 8001700:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001702:	68fb      	ldr	r3, [r7, #12]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20000090 	.word	0x20000090
 8001710:	20000290 	.word	0x20000290

08001714 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001718:	4b15      	ldr	r3, [pc, #84]	; (8001770 <SystemInit+0x5c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a14      	ldr	r2, [pc, #80]	; (8001770 <SystemInit+0x5c>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001724:	4b12      	ldr	r3, [pc, #72]	; (8001770 <SystemInit+0x5c>)
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	4911      	ldr	r1, [pc, #68]	; (8001770 <SystemInit+0x5c>)
 800172a:	4b12      	ldr	r3, [pc, #72]	; (8001774 <SystemInit+0x60>)
 800172c:	4013      	ands	r3, r2
 800172e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001730:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <SystemInit+0x5c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a0e      	ldr	r2, [pc, #56]	; (8001770 <SystemInit+0x5c>)
 8001736:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800173a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800173e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001740:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <SystemInit+0x5c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a0a      	ldr	r2, [pc, #40]	; (8001770 <SystemInit+0x5c>)
 8001746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800174a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800174c:	4b08      	ldr	r3, [pc, #32]	; (8001770 <SystemInit+0x5c>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	4a07      	ldr	r2, [pc, #28]	; (8001770 <SystemInit+0x5c>)
 8001752:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001756:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001758:	4b05      	ldr	r3, [pc, #20]	; (8001770 <SystemInit+0x5c>)
 800175a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800175e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <SystemInit+0x64>)
 8001762:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001766:	609a      	str	r2, [r3, #8]
#endif 
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr
 8001770:	40021000 	.word	0x40021000
 8001774:	f8ff0000 	.word	0xf8ff0000
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800177c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800177e:	e003      	b.n	8001788 <LoopCopyDataInit>

08001780 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001780:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001782:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001784:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001786:	3104      	adds	r1, #4

08001788 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001788:	480a      	ldr	r0, [pc, #40]	; (80017b4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800178a:	4b0b      	ldr	r3, [pc, #44]	; (80017b8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800178c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800178e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001790:	d3f6      	bcc.n	8001780 <CopyDataInit>
  ldr r2, =_sbss
 8001792:	4a0a      	ldr	r2, [pc, #40]	; (80017bc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001794:	e002      	b.n	800179c <LoopFillZerobss>

08001796 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001796:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001798:	f842 3b04 	str.w	r3, [r2], #4

0800179c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800179c:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800179e:	429a      	cmp	r2, r3
  bcc FillZerobss
 80017a0:	d3f9      	bcc.n	8001796 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017a2:	f7ff ffb7 	bl	8001714 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017a6:	f002 fc97 	bl	80040d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017aa:	f7ff f93b 	bl	8000a24 <main>
  bx lr
 80017ae:	4770      	bx	lr
  ldr r3, =_sidata
 80017b0:	080049f8 	.word	0x080049f8
  ldr r0, =_sdata
 80017b4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80017b8:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80017bc:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80017c0:	20000290 	.word	0x20000290

080017c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017c4:	e7fe      	b.n	80017c4 <ADC1_2_IRQHandler>
	...

080017c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017cc:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <HAL_Init+0x28>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a07      	ldr	r2, [pc, #28]	; (80017f0 <HAL_Init+0x28>)
 80017d2:	f043 0310 	orr.w	r3, r3, #16
 80017d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017d8:	2003      	movs	r0, #3
 80017da:	f000 fd01 	bl	80021e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017de:	2000      	movs	r0, #0
 80017e0:	f000 f808 	bl	80017f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017e4:	f7ff fdb6 	bl	8001354 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40022000 	.word	0x40022000

080017f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017fc:	4b12      	ldr	r3, [pc, #72]	; (8001848 <HAL_InitTick+0x54>)
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	4b12      	ldr	r3, [pc, #72]	; (800184c <HAL_InitTick+0x58>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	4619      	mov	r1, r3
 8001806:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800180a:	fbb3 f3f1 	udiv	r3, r3, r1
 800180e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001812:	4618      	mov	r0, r3
 8001814:	f000 fd19 	bl	800224a <HAL_SYSTICK_Config>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e00e      	b.n	8001840 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2b0f      	cmp	r3, #15
 8001826:	d80a      	bhi.n	800183e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001828:	2200      	movs	r2, #0
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	f04f 30ff 	mov.w	r0, #4294967295
 8001830:	f000 fce1 	bl	80021f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001834:	4a06      	ldr	r2, [pc, #24]	; (8001850 <HAL_InitTick+0x5c>)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800183a:	2300      	movs	r3, #0
 800183c:	e000      	b.n	8001840 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
}
 8001840:	4618      	mov	r0, r3
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20000000 	.word	0x20000000
 800184c:	20000008 	.word	0x20000008
 8001850:	20000004 	.word	0x20000004

08001854 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001858:	4b05      	ldr	r3, [pc, #20]	; (8001870 <HAL_IncTick+0x1c>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	461a      	mov	r2, r3
 800185e:	4b05      	ldr	r3, [pc, #20]	; (8001874 <HAL_IncTick+0x20>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4413      	add	r3, r2
 8001864:	4a03      	ldr	r2, [pc, #12]	; (8001874 <HAL_IncTick+0x20>)
 8001866:	6013      	str	r3, [r2, #0]
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr
 8001870:	20000008 	.word	0x20000008
 8001874:	20000288 	.word	0x20000288

08001878 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  return uwTick;
 800187c:	4b02      	ldr	r3, [pc, #8]	; (8001888 <HAL_GetTick+0x10>)
 800187e:	681b      	ldr	r3, [r3, #0]
}
 8001880:	4618      	mov	r0, r3
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr
 8001888:	20000288 	.word	0x20000288

0800188c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001894:	f7ff fff0 	bl	8001878 <HAL_GetTick>
 8001898:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a4:	d005      	beq.n	80018b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018a6:	4b09      	ldr	r3, [pc, #36]	; (80018cc <HAL_Delay+0x40>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	461a      	mov	r2, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	4413      	add	r3, r2
 80018b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018b2:	bf00      	nop
 80018b4:	f7ff ffe0 	bl	8001878 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d8f7      	bhi.n	80018b4 <HAL_Delay+0x28>
  {
  }
}
 80018c4:	bf00      	nop
 80018c6:	3710      	adds	r7, #16
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000008 	.word	0x20000008

080018d0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018d8:	2300      	movs	r3, #0
 80018da:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80018dc:	2300      	movs	r3, #0
 80018de:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80018e0:	2300      	movs	r3, #0
 80018e2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80018e4:	2300      	movs	r3, #0
 80018e6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e0be      	b.n	8001a70 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d109      	bne.n	8001914 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff fd52 	bl	80013b8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f000 faf7 	bl	8001f08 <ADC_ConversionStop_Disable>
 800191a:	4603      	mov	r3, r0
 800191c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001922:	f003 0310 	and.w	r3, r3, #16
 8001926:	2b00      	cmp	r3, #0
 8001928:	f040 8099 	bne.w	8001a5e <HAL_ADC_Init+0x18e>
 800192c:	7dfb      	ldrb	r3, [r7, #23]
 800192e:	2b00      	cmp	r3, #0
 8001930:	f040 8095 	bne.w	8001a5e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001938:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800193c:	f023 0302 	bic.w	r3, r3, #2
 8001940:	f043 0202 	orr.w	r2, r3, #2
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001950:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	7b1b      	ldrb	r3, [r3, #12]
 8001956:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001958:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800195a:	68ba      	ldr	r2, [r7, #8]
 800195c:	4313      	orrs	r3, r2
 800195e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001968:	d003      	beq.n	8001972 <HAL_ADC_Init+0xa2>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d102      	bne.n	8001978 <HAL_ADC_Init+0xa8>
 8001972:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001976:	e000      	b.n	800197a <HAL_ADC_Init+0xaa>
 8001978:	2300      	movs	r3, #0
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	4313      	orrs	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	7d1b      	ldrb	r3, [r3, #20]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d119      	bne.n	80019bc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	7b1b      	ldrb	r3, [r3, #12]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d109      	bne.n	80019a4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	3b01      	subs	r3, #1
 8001996:	035a      	lsls	r2, r3, #13
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	4313      	orrs	r3, r2
 800199c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019a0:	613b      	str	r3, [r7, #16]
 80019a2:	e00b      	b.n	80019bc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a8:	f043 0220 	orr.w	r2, r3, #32
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b4:	f043 0201 	orr.w	r2, r3, #1
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	430a      	orrs	r2, r1
 80019ce:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	689a      	ldr	r2, [r3, #8]
 80019d6:	4b28      	ldr	r3, [pc, #160]	; (8001a78 <HAL_ADC_Init+0x1a8>)
 80019d8:	4013      	ands	r3, r2
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	6812      	ldr	r2, [r2, #0]
 80019de:	68b9      	ldr	r1, [r7, #8]
 80019e0:	430b      	orrs	r3, r1
 80019e2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019ec:	d003      	beq.n	80019f6 <HAL_ADC_Init+0x126>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d104      	bne.n	8001a00 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	3b01      	subs	r3, #1
 80019fc:	051b      	lsls	r3, r3, #20
 80019fe:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a06:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	430a      	orrs	r2, r1
 8001a12:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	689a      	ldr	r2, [r3, #8]
 8001a1a:	4b18      	ldr	r3, [pc, #96]	; (8001a7c <HAL_ADC_Init+0x1ac>)
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	68ba      	ldr	r2, [r7, #8]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d10b      	bne.n	8001a3c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2e:	f023 0303 	bic.w	r3, r3, #3
 8001a32:	f043 0201 	orr.w	r2, r3, #1
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a3a:	e018      	b.n	8001a6e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a40:	f023 0312 	bic.w	r3, r3, #18
 8001a44:	f043 0210 	orr.w	r2, r3, #16
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a50:	f043 0201 	orr.w	r2, r3, #1
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a5c:	e007      	b.n	8001a6e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a62:	f043 0210 	orr.w	r2, r3, #16
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	ffe1f7fd 	.word	0xffe1f7fd
 8001a7c:	ff1f0efe 	.word	0xff1f0efe

08001a80 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a64      	ldr	r2, [pc, #400]	; (8001c28 <HAL_ADC_Start_DMA+0x1a8>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d004      	beq.n	8001aa4 <HAL_ADC_Start_DMA+0x24>
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a63      	ldr	r2, [pc, #396]	; (8001c2c <HAL_ADC_Start_DMA+0x1ac>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d106      	bne.n	8001ab2 <HAL_ADC_Start_DMA+0x32>
 8001aa4:	4b60      	ldr	r3, [pc, #384]	; (8001c28 <HAL_ADC_Start_DMA+0x1a8>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f040 80b3 	bne.w	8001c18 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d101      	bne.n	8001ac0 <HAL_ADC_Start_DMA+0x40>
 8001abc:	2302      	movs	r3, #2
 8001abe:	e0ae      	b.n	8001c1e <HAL_ADC_Start_DMA+0x19e>
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001ac8:	68f8      	ldr	r0, [r7, #12]
 8001aca:	f000 f9cb 	bl	8001e64 <ADC_Enable>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ad2:	7dfb      	ldrb	r3, [r7, #23]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f040 809a 	bne.w	8001c0e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ade:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ae2:	f023 0301 	bic.w	r3, r3, #1
 8001ae6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a4e      	ldr	r2, [pc, #312]	; (8001c2c <HAL_ADC_Start_DMA+0x1ac>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d105      	bne.n	8001b04 <HAL_ADC_Start_DMA+0x84>
 8001af8:	4b4b      	ldr	r3, [pc, #300]	; (8001c28 <HAL_ADC_Start_DMA+0x1a8>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d115      	bne.n	8001b30 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b08:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d026      	beq.n	8001b6c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b22:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b26:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b2e:	e01d      	b.n	8001b6c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b34:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a39      	ldr	r2, [pc, #228]	; (8001c28 <HAL_ADC_Start_DMA+0x1a8>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d004      	beq.n	8001b50 <HAL_ADC_Start_DMA+0xd0>
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a38      	ldr	r2, [pc, #224]	; (8001c2c <HAL_ADC_Start_DMA+0x1ac>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d10d      	bne.n	8001b6c <HAL_ADC_Start_DMA+0xec>
 8001b50:	4b35      	ldr	r3, [pc, #212]	; (8001c28 <HAL_ADC_Start_DMA+0x1a8>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d007      	beq.n	8001b6c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b60:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b64:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d006      	beq.n	8001b86 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7c:	f023 0206 	bic.w	r2, r3, #6
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b84:	e002      	b.n	8001b8c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	4a25      	ldr	r2, [pc, #148]	; (8001c30 <HAL_ADC_Start_DMA+0x1b0>)
 8001b9a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	4a24      	ldr	r2, [pc, #144]	; (8001c34 <HAL_ADC_Start_DMA+0x1b4>)
 8001ba2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6a1b      	ldr	r3, [r3, #32]
 8001ba8:	4a23      	ldr	r2, [pc, #140]	; (8001c38 <HAL_ADC_Start_DMA+0x1b8>)
 8001baa:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f06f 0202 	mvn.w	r2, #2
 8001bb4:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bc4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6a18      	ldr	r0, [r3, #32]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	334c      	adds	r3, #76	; 0x4c
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f000 fb9f 	bl	8002318 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001be4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001be8:	d108      	bne.n	8001bfc <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001bf8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001bfa:	e00f      	b.n	8001c1c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689a      	ldr	r2, [r3, #8]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001c0a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001c0c:	e006      	b.n	8001c1c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001c16:	e001      	b.n	8001c1c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40012400 	.word	0x40012400
 8001c2c:	40012800 	.word	0x40012800
 8001c30:	08001f7d 	.word	0x08001f7d
 8001c34:	08001ff9 	.word	0x08001ff9
 8001c38:	08002015 	.word	0x08002015

08001c3c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bc80      	pop	{r7}
 8001c4c:	4770      	bx	lr

08001c4e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	b083      	sub	sp, #12
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr

08001c60 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr
	...

08001c74 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d101      	bne.n	8001c94 <HAL_ADC_ConfigChannel+0x20>
 8001c90:	2302      	movs	r3, #2
 8001c92:	e0dc      	b.n	8001e4e <HAL_ADC_ConfigChannel+0x1da>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	2b06      	cmp	r3, #6
 8001ca2:	d81c      	bhi.n	8001cde <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	3b05      	subs	r3, #5
 8001cb6:	221f      	movs	r2, #31
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	4019      	ands	r1, r3
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	6818      	ldr	r0, [r3, #0]
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4413      	add	r3, r2
 8001cce:	3b05      	subs	r3, #5
 8001cd0:	fa00 f203 	lsl.w	r2, r0, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	635a      	str	r2, [r3, #52]	; 0x34
 8001cdc:	e03c      	b.n	8001d58 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b0c      	cmp	r3, #12
 8001ce4:	d81c      	bhi.n	8001d20 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	3b23      	subs	r3, #35	; 0x23
 8001cf8:	221f      	movs	r2, #31
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	4019      	ands	r1, r3
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	6818      	ldr	r0, [r3, #0]
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685a      	ldr	r2, [r3, #4]
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	4413      	add	r3, r2
 8001d10:	3b23      	subs	r3, #35	; 0x23
 8001d12:	fa00 f203 	lsl.w	r2, r0, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	631a      	str	r2, [r3, #48]	; 0x30
 8001d1e:	e01b      	b.n	8001d58 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	3b41      	subs	r3, #65	; 0x41
 8001d32:	221f      	movs	r2, #31
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	4019      	ands	r1, r3
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	6818      	ldr	r0, [r3, #0]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685a      	ldr	r2, [r3, #4]
 8001d44:	4613      	mov	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	3b41      	subs	r3, #65	; 0x41
 8001d4c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	430a      	orrs	r2, r1
 8001d56:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2b09      	cmp	r3, #9
 8001d5e:	d91c      	bls.n	8001d9a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68d9      	ldr	r1, [r3, #12]
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	4413      	add	r3, r2
 8001d70:	3b1e      	subs	r3, #30
 8001d72:	2207      	movs	r2, #7
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	4019      	ands	r1, r3
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	6898      	ldr	r0, [r3, #8]
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	4613      	mov	r3, r2
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	4413      	add	r3, r2
 8001d8a:	3b1e      	subs	r3, #30
 8001d8c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	430a      	orrs	r2, r1
 8001d96:	60da      	str	r2, [r3, #12]
 8001d98:	e019      	b.n	8001dce <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	6919      	ldr	r1, [r3, #16]
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	4613      	mov	r3, r2
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	4413      	add	r3, r2
 8001daa:	2207      	movs	r2, #7
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	43db      	mvns	r3, r3
 8001db2:	4019      	ands	r1, r3
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	6898      	ldr	r0, [r3, #8]
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	4413      	add	r3, r2
 8001dc2:	fa00 f203 	lsl.w	r2, r0, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2b10      	cmp	r3, #16
 8001dd4:	d003      	beq.n	8001dde <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001dda:	2b11      	cmp	r3, #17
 8001ddc:	d132      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a1d      	ldr	r2, [pc, #116]	; (8001e58 <HAL_ADC_ConfigChannel+0x1e4>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d125      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d126      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001e04:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2b10      	cmp	r3, #16
 8001e0c:	d11a      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e0e:	4b13      	ldr	r3, [pc, #76]	; (8001e5c <HAL_ADC_ConfigChannel+0x1e8>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a13      	ldr	r2, [pc, #76]	; (8001e60 <HAL_ADC_ConfigChannel+0x1ec>)
 8001e14:	fba2 2303 	umull	r2, r3, r2, r3
 8001e18:	0c9a      	lsrs	r2, r3, #18
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4413      	add	r3, r2
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e24:	e002      	b.n	8001e2c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1f9      	bne.n	8001e26 <HAL_ADC_ConfigChannel+0x1b2>
 8001e32:	e007      	b.n	8001e44 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e38:	f043 0220 	orr.w	r2, r3, #32
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3714      	adds	r7, #20
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr
 8001e58:	40012400 	.word	0x40012400
 8001e5c:	20000000 	.word	0x20000000
 8001e60:	431bde83 	.word	0x431bde83

08001e64 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001e70:	2300      	movs	r3, #0
 8001e72:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d039      	beq.n	8001ef6 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f042 0201 	orr.w	r2, r2, #1
 8001e90:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e92:	4b1b      	ldr	r3, [pc, #108]	; (8001f00 <ADC_Enable+0x9c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a1b      	ldr	r2, [pc, #108]	; (8001f04 <ADC_Enable+0xa0>)
 8001e98:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9c:	0c9b      	lsrs	r3, r3, #18
 8001e9e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ea0:	e002      	b.n	8001ea8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1f9      	bne.n	8001ea2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001eae:	f7ff fce3 	bl	8001878 <HAL_GetTick>
 8001eb2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001eb4:	e018      	b.n	8001ee8 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001eb6:	f7ff fcdf 	bl	8001878 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d911      	bls.n	8001ee8 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec8:	f043 0210 	orr.w	r2, r3, #16
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed4:	f043 0201 	orr.w	r2, r3, #1
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e007      	b.n	8001ef8 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d1df      	bne.n	8001eb6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20000000 	.word	0x20000000
 8001f04:	431bde83 	.word	0x431bde83

08001f08 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f10:	2300      	movs	r3, #0
 8001f12:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d127      	bne.n	8001f72 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 0201 	bic.w	r2, r2, #1
 8001f30:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f32:	f7ff fca1 	bl	8001878 <HAL_GetTick>
 8001f36:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f38:	e014      	b.n	8001f64 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f3a:	f7ff fc9d 	bl	8001878 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d90d      	bls.n	8001f64 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4c:	f043 0210 	orr.w	r2, r3, #16
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f58:	f043 0201 	orr.w	r2, r3, #1
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e007      	b.n	8001f74 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d0e3      	beq.n	8001f3a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f88:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d127      	bne.n	8001fe6 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001fac:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001fb0:	d115      	bne.n	8001fde <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d111      	bne.n	8001fde <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fbe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d105      	bne.n	8001fde <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd6:	f043 0201 	orr.w	r2, r3, #1
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	f7ff fe2c 	bl	8001c3c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001fe4:	e004      	b.n	8001ff0 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	4798      	blx	r3
}
 8001ff0:	bf00      	nop
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002004:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002006:	68f8      	ldr	r0, [r7, #12]
 8002008:	f7ff fe21 	bl	8001c4e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800200c:	bf00      	nop
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002020:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002026:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002032:	f043 0204 	orr.w	r2, r3, #4
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f7ff fe10 	bl	8001c60 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002040:	bf00      	nop
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f003 0307 	and.w	r3, r3, #7
 8002056:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002058:	4b0c      	ldr	r3, [pc, #48]	; (800208c <__NVIC_SetPriorityGrouping+0x44>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800205e:	68ba      	ldr	r2, [r7, #8]
 8002060:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002064:	4013      	ands	r3, r2
 8002066:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002070:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800207a:	4a04      	ldr	r2, [pc, #16]	; (800208c <__NVIC_SetPriorityGrouping+0x44>)
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	60d3      	str	r3, [r2, #12]
}
 8002080:	bf00      	nop
 8002082:	3714      	adds	r7, #20
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002094:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	0a1b      	lsrs	r3, r3, #8
 800209a:	f003 0307 	and.w	r3, r3, #7
}
 800209e:	4618      	mov	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bc80      	pop	{r7}
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	db0b      	blt.n	80020d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020be:	79fb      	ldrb	r3, [r7, #7]
 80020c0:	f003 021f 	and.w	r2, r3, #31
 80020c4:	4906      	ldr	r1, [pc, #24]	; (80020e0 <__NVIC_EnableIRQ+0x34>)
 80020c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ca:	095b      	lsrs	r3, r3, #5
 80020cc:	2001      	movs	r0, #1
 80020ce:	fa00 f202 	lsl.w	r2, r0, r2
 80020d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr
 80020e0:	e000e100 	.word	0xe000e100

080020e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	6039      	str	r1, [r7, #0]
 80020ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	db0a      	blt.n	800210e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	490c      	ldr	r1, [pc, #48]	; (8002130 <__NVIC_SetPriority+0x4c>)
 80020fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002102:	0112      	lsls	r2, r2, #4
 8002104:	b2d2      	uxtb	r2, r2
 8002106:	440b      	add	r3, r1
 8002108:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800210c:	e00a      	b.n	8002124 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	b2da      	uxtb	r2, r3
 8002112:	4908      	ldr	r1, [pc, #32]	; (8002134 <__NVIC_SetPriority+0x50>)
 8002114:	79fb      	ldrb	r3, [r7, #7]
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	3b04      	subs	r3, #4
 800211c:	0112      	lsls	r2, r2, #4
 800211e:	b2d2      	uxtb	r2, r2
 8002120:	440b      	add	r3, r1
 8002122:	761a      	strb	r2, [r3, #24]
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	bc80      	pop	{r7}
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	e000e100 	.word	0xe000e100
 8002134:	e000ed00 	.word	0xe000ed00

08002138 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002138:	b480      	push	{r7}
 800213a:	b089      	sub	sp, #36	; 0x24
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	f1c3 0307 	rsb	r3, r3, #7
 8002152:	2b04      	cmp	r3, #4
 8002154:	bf28      	it	cs
 8002156:	2304      	movcs	r3, #4
 8002158:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	3304      	adds	r3, #4
 800215e:	2b06      	cmp	r3, #6
 8002160:	d902      	bls.n	8002168 <NVIC_EncodePriority+0x30>
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	3b03      	subs	r3, #3
 8002166:	e000      	b.n	800216a <NVIC_EncodePriority+0x32>
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800216c:	f04f 32ff 	mov.w	r2, #4294967295
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43da      	mvns	r2, r3
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	401a      	ands	r2, r3
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002180:	f04f 31ff 	mov.w	r1, #4294967295
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	fa01 f303 	lsl.w	r3, r1, r3
 800218a:	43d9      	mvns	r1, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002190:	4313      	orrs	r3, r2
         );
}
 8002192:	4618      	mov	r0, r3
 8002194:	3724      	adds	r7, #36	; 0x24
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr

0800219c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3b01      	subs	r3, #1
 80021a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021ac:	d301      	bcc.n	80021b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ae:	2301      	movs	r3, #1
 80021b0:	e00f      	b.n	80021d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021b2:	4a0a      	ldr	r2, [pc, #40]	; (80021dc <SysTick_Config+0x40>)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3b01      	subs	r3, #1
 80021b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ba:	210f      	movs	r1, #15
 80021bc:	f04f 30ff 	mov.w	r0, #4294967295
 80021c0:	f7ff ff90 	bl	80020e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021c4:	4b05      	ldr	r3, [pc, #20]	; (80021dc <SysTick_Config+0x40>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ca:	4b04      	ldr	r3, [pc, #16]	; (80021dc <SysTick_Config+0x40>)
 80021cc:	2207      	movs	r2, #7
 80021ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	e000e010 	.word	0xe000e010

080021e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f7ff ff2d 	bl	8002048 <__NVIC_SetPriorityGrouping>
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b086      	sub	sp, #24
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	4603      	mov	r3, r0
 80021fe:	60b9      	str	r1, [r7, #8]
 8002200:	607a      	str	r2, [r7, #4]
 8002202:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002208:	f7ff ff42 	bl	8002090 <__NVIC_GetPriorityGrouping>
 800220c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	68b9      	ldr	r1, [r7, #8]
 8002212:	6978      	ldr	r0, [r7, #20]
 8002214:	f7ff ff90 	bl	8002138 <NVIC_EncodePriority>
 8002218:	4602      	mov	r2, r0
 800221a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800221e:	4611      	mov	r1, r2
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff ff5f 	bl	80020e4 <__NVIC_SetPriority>
}
 8002226:	bf00      	nop
 8002228:	3718      	adds	r7, #24
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b082      	sub	sp, #8
 8002232:	af00      	add	r7, sp, #0
 8002234:	4603      	mov	r3, r0
 8002236:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff ff35 	bl	80020ac <__NVIC_EnableIRQ>
}
 8002242:	bf00      	nop
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b082      	sub	sp, #8
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7ff ffa2 	bl	800219c <SysTick_Config>
 8002258:	4603      	mov	r3, r0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
	...

08002264 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800226c:	2300      	movs	r3, #0
 800226e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e043      	b.n	8002302 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	461a      	mov	r2, r3
 8002280:	4b22      	ldr	r3, [pc, #136]	; (800230c <HAL_DMA_Init+0xa8>)
 8002282:	4413      	add	r3, r2
 8002284:	4a22      	ldr	r2, [pc, #136]	; (8002310 <HAL_DMA_Init+0xac>)
 8002286:	fba2 2303 	umull	r2, r3, r2, r3
 800228a:	091b      	lsrs	r3, r3, #4
 800228c:	009a      	lsls	r2, r3, #2
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a1f      	ldr	r2, [pc, #124]	; (8002314 <HAL_DMA_Init+0xb0>)
 8002296:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2202      	movs	r2, #2
 800229c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80022ae:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80022b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80022bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	4313      	orrs	r3, r2
 80022e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	bc80      	pop	{r7}
 800230a:	4770      	bx	lr
 800230c:	bffdfff8 	.word	0xbffdfff8
 8002310:	cccccccd 	.word	0xcccccccd
 8002314:	40020000 	.word	0x40020000

08002318 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
 8002324:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002326:	2300      	movs	r3, #0
 8002328:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d101      	bne.n	8002338 <HAL_DMA_Start_IT+0x20>
 8002334:	2302      	movs	r3, #2
 8002336:	e04a      	b.n	80023ce <HAL_DMA_Start_IT+0xb6>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002346:	2b01      	cmp	r3, #1
 8002348:	d13a      	bne.n	80023c0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2202      	movs	r2, #2
 800234e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 0201 	bic.w	r2, r2, #1
 8002366:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	68b9      	ldr	r1, [r7, #8]
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f000 f938 	bl	80025e4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002378:	2b00      	cmp	r3, #0
 800237a:	d008      	beq.n	800238e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f042 020e 	orr.w	r2, r2, #14
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	e00f      	b.n	80023ae <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 0204 	bic.w	r2, r2, #4
 800239c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f042 020a 	orr.w	r2, r2, #10
 80023ac:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f042 0201 	orr.w	r2, r2, #1
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	e005      	b.n	80023cc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80023c8:	2302      	movs	r3, #2
 80023ca:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80023cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
	...

080023d8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f4:	2204      	movs	r2, #4
 80023f6:	409a      	lsls	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	4013      	ands	r3, r2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d04f      	beq.n	80024a0 <HAL_DMA_IRQHandler+0xc8>
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	f003 0304 	and.w	r3, r3, #4
 8002406:	2b00      	cmp	r3, #0
 8002408:	d04a      	beq.n	80024a0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0320 	and.w	r3, r3, #32
 8002414:	2b00      	cmp	r3, #0
 8002416:	d107      	bne.n	8002428 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 0204 	bic.w	r2, r2, #4
 8002426:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a66      	ldr	r2, [pc, #408]	; (80025c8 <HAL_DMA_IRQHandler+0x1f0>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d029      	beq.n	8002486 <HAL_DMA_IRQHandler+0xae>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a65      	ldr	r2, [pc, #404]	; (80025cc <HAL_DMA_IRQHandler+0x1f4>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d022      	beq.n	8002482 <HAL_DMA_IRQHandler+0xaa>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a63      	ldr	r2, [pc, #396]	; (80025d0 <HAL_DMA_IRQHandler+0x1f8>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d01a      	beq.n	800247c <HAL_DMA_IRQHandler+0xa4>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a62      	ldr	r2, [pc, #392]	; (80025d4 <HAL_DMA_IRQHandler+0x1fc>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d012      	beq.n	8002476 <HAL_DMA_IRQHandler+0x9e>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a60      	ldr	r2, [pc, #384]	; (80025d8 <HAL_DMA_IRQHandler+0x200>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d00a      	beq.n	8002470 <HAL_DMA_IRQHandler+0x98>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a5f      	ldr	r2, [pc, #380]	; (80025dc <HAL_DMA_IRQHandler+0x204>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d102      	bne.n	800246a <HAL_DMA_IRQHandler+0x92>
 8002464:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002468:	e00e      	b.n	8002488 <HAL_DMA_IRQHandler+0xb0>
 800246a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800246e:	e00b      	b.n	8002488 <HAL_DMA_IRQHandler+0xb0>
 8002470:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002474:	e008      	b.n	8002488 <HAL_DMA_IRQHandler+0xb0>
 8002476:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800247a:	e005      	b.n	8002488 <HAL_DMA_IRQHandler+0xb0>
 800247c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002480:	e002      	b.n	8002488 <HAL_DMA_IRQHandler+0xb0>
 8002482:	2340      	movs	r3, #64	; 0x40
 8002484:	e000      	b.n	8002488 <HAL_DMA_IRQHandler+0xb0>
 8002486:	2304      	movs	r3, #4
 8002488:	4a55      	ldr	r2, [pc, #340]	; (80025e0 <HAL_DMA_IRQHandler+0x208>)
 800248a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 8094 	beq.w	80025be <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800249e:	e08e      	b.n	80025be <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	2202      	movs	r2, #2
 80024a6:	409a      	lsls	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	4013      	ands	r3, r2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d056      	beq.n	800255e <HAL_DMA_IRQHandler+0x186>
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d051      	beq.n	800255e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0320 	and.w	r3, r3, #32
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d10b      	bne.n	80024e0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 020a 	bic.w	r2, r2, #10
 80024d6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a38      	ldr	r2, [pc, #224]	; (80025c8 <HAL_DMA_IRQHandler+0x1f0>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d029      	beq.n	800253e <HAL_DMA_IRQHandler+0x166>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a37      	ldr	r2, [pc, #220]	; (80025cc <HAL_DMA_IRQHandler+0x1f4>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d022      	beq.n	800253a <HAL_DMA_IRQHandler+0x162>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a35      	ldr	r2, [pc, #212]	; (80025d0 <HAL_DMA_IRQHandler+0x1f8>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d01a      	beq.n	8002534 <HAL_DMA_IRQHandler+0x15c>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a34      	ldr	r2, [pc, #208]	; (80025d4 <HAL_DMA_IRQHandler+0x1fc>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d012      	beq.n	800252e <HAL_DMA_IRQHandler+0x156>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a32      	ldr	r2, [pc, #200]	; (80025d8 <HAL_DMA_IRQHandler+0x200>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d00a      	beq.n	8002528 <HAL_DMA_IRQHandler+0x150>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a31      	ldr	r2, [pc, #196]	; (80025dc <HAL_DMA_IRQHandler+0x204>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d102      	bne.n	8002522 <HAL_DMA_IRQHandler+0x14a>
 800251c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002520:	e00e      	b.n	8002540 <HAL_DMA_IRQHandler+0x168>
 8002522:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002526:	e00b      	b.n	8002540 <HAL_DMA_IRQHandler+0x168>
 8002528:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800252c:	e008      	b.n	8002540 <HAL_DMA_IRQHandler+0x168>
 800252e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002532:	e005      	b.n	8002540 <HAL_DMA_IRQHandler+0x168>
 8002534:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002538:	e002      	b.n	8002540 <HAL_DMA_IRQHandler+0x168>
 800253a:	2320      	movs	r3, #32
 800253c:	e000      	b.n	8002540 <HAL_DMA_IRQHandler+0x168>
 800253e:	2302      	movs	r3, #2
 8002540:	4a27      	ldr	r2, [pc, #156]	; (80025e0 <HAL_DMA_IRQHandler+0x208>)
 8002542:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002550:	2b00      	cmp	r3, #0
 8002552:	d034      	beq.n	80025be <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800255c:	e02f      	b.n	80025be <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	2208      	movs	r2, #8
 8002564:	409a      	lsls	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	4013      	ands	r3, r2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d028      	beq.n	80025c0 <HAL_DMA_IRQHandler+0x1e8>
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	f003 0308 	and.w	r3, r3, #8
 8002574:	2b00      	cmp	r3, #0
 8002576:	d023      	beq.n	80025c0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 020e 	bic.w	r2, r2, #14
 8002586:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002590:	2101      	movs	r1, #1
 8002592:	fa01 f202 	lsl.w	r2, r1, r2
 8002596:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d004      	beq.n	80025c0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	4798      	blx	r3
    }
  }
  return;
 80025be:	bf00      	nop
 80025c0:	bf00      	nop
}
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40020008 	.word	0x40020008
 80025cc:	4002001c 	.word	0x4002001c
 80025d0:	40020030 	.word	0x40020030
 80025d4:	40020044 	.word	0x40020044
 80025d8:	40020058 	.word	0x40020058
 80025dc:	4002006c 	.word	0x4002006c
 80025e0:	40020000 	.word	0x40020000

080025e4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
 80025f0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025fa:	2101      	movs	r1, #1
 80025fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002600:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b10      	cmp	r3, #16
 8002610:	d108      	bne.n	8002624 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68ba      	ldr	r2, [r7, #8]
 8002620:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002622:	e007      	b.n	8002634 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68ba      	ldr	r2, [r7, #8]
 800262a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	60da      	str	r2, [r3, #12]
}
 8002634:	bf00      	nop
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	bc80      	pop	{r7}
 800263c:	4770      	bx	lr
	...

08002640 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002640:	b480      	push	{r7}
 8002642:	b08b      	sub	sp, #44	; 0x2c
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800264a:	2300      	movs	r3, #0
 800264c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800264e:	2300      	movs	r3, #0
 8002650:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002652:	e127      	b.n	80028a4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002654:	2201      	movs	r2, #1
 8002656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	69fa      	ldr	r2, [r7, #28]
 8002664:	4013      	ands	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	429a      	cmp	r2, r3
 800266e:	f040 8116 	bne.w	800289e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2b12      	cmp	r3, #18
 8002678:	d034      	beq.n	80026e4 <HAL_GPIO_Init+0xa4>
 800267a:	2b12      	cmp	r3, #18
 800267c:	d80d      	bhi.n	800269a <HAL_GPIO_Init+0x5a>
 800267e:	2b02      	cmp	r3, #2
 8002680:	d02b      	beq.n	80026da <HAL_GPIO_Init+0x9a>
 8002682:	2b02      	cmp	r3, #2
 8002684:	d804      	bhi.n	8002690 <HAL_GPIO_Init+0x50>
 8002686:	2b00      	cmp	r3, #0
 8002688:	d031      	beq.n	80026ee <HAL_GPIO_Init+0xae>
 800268a:	2b01      	cmp	r3, #1
 800268c:	d01c      	beq.n	80026c8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800268e:	e048      	b.n	8002722 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002690:	2b03      	cmp	r3, #3
 8002692:	d043      	beq.n	800271c <HAL_GPIO_Init+0xdc>
 8002694:	2b11      	cmp	r3, #17
 8002696:	d01b      	beq.n	80026d0 <HAL_GPIO_Init+0x90>
          break;
 8002698:	e043      	b.n	8002722 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800269a:	4a89      	ldr	r2, [pc, #548]	; (80028c0 <HAL_GPIO_Init+0x280>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d026      	beq.n	80026ee <HAL_GPIO_Init+0xae>
 80026a0:	4a87      	ldr	r2, [pc, #540]	; (80028c0 <HAL_GPIO_Init+0x280>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d806      	bhi.n	80026b4 <HAL_GPIO_Init+0x74>
 80026a6:	4a87      	ldr	r2, [pc, #540]	; (80028c4 <HAL_GPIO_Init+0x284>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d020      	beq.n	80026ee <HAL_GPIO_Init+0xae>
 80026ac:	4a86      	ldr	r2, [pc, #536]	; (80028c8 <HAL_GPIO_Init+0x288>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d01d      	beq.n	80026ee <HAL_GPIO_Init+0xae>
          break;
 80026b2:	e036      	b.n	8002722 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80026b4:	4a85      	ldr	r2, [pc, #532]	; (80028cc <HAL_GPIO_Init+0x28c>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d019      	beq.n	80026ee <HAL_GPIO_Init+0xae>
 80026ba:	4a85      	ldr	r2, [pc, #532]	; (80028d0 <HAL_GPIO_Init+0x290>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d016      	beq.n	80026ee <HAL_GPIO_Init+0xae>
 80026c0:	4a84      	ldr	r2, [pc, #528]	; (80028d4 <HAL_GPIO_Init+0x294>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d013      	beq.n	80026ee <HAL_GPIO_Init+0xae>
          break;
 80026c6:	e02c      	b.n	8002722 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	623b      	str	r3, [r7, #32]
          break;
 80026ce:	e028      	b.n	8002722 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	3304      	adds	r3, #4
 80026d6:	623b      	str	r3, [r7, #32]
          break;
 80026d8:	e023      	b.n	8002722 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	3308      	adds	r3, #8
 80026e0:	623b      	str	r3, [r7, #32]
          break;
 80026e2:	e01e      	b.n	8002722 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	330c      	adds	r3, #12
 80026ea:	623b      	str	r3, [r7, #32]
          break;
 80026ec:	e019      	b.n	8002722 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d102      	bne.n	80026fc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026f6:	2304      	movs	r3, #4
 80026f8:	623b      	str	r3, [r7, #32]
          break;
 80026fa:	e012      	b.n	8002722 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d105      	bne.n	8002710 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002704:	2308      	movs	r3, #8
 8002706:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	69fa      	ldr	r2, [r7, #28]
 800270c:	611a      	str	r2, [r3, #16]
          break;
 800270e:	e008      	b.n	8002722 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002710:	2308      	movs	r3, #8
 8002712:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	69fa      	ldr	r2, [r7, #28]
 8002718:	615a      	str	r2, [r3, #20]
          break;
 800271a:	e002      	b.n	8002722 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800271c:	2300      	movs	r3, #0
 800271e:	623b      	str	r3, [r7, #32]
          break;
 8002720:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	2bff      	cmp	r3, #255	; 0xff
 8002726:	d801      	bhi.n	800272c <HAL_GPIO_Init+0xec>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	e001      	b.n	8002730 <HAL_GPIO_Init+0xf0>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	3304      	adds	r3, #4
 8002730:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	2bff      	cmp	r3, #255	; 0xff
 8002736:	d802      	bhi.n	800273e <HAL_GPIO_Init+0xfe>
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	e002      	b.n	8002744 <HAL_GPIO_Init+0x104>
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	3b08      	subs	r3, #8
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	210f      	movs	r1, #15
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	fa01 f303 	lsl.w	r3, r1, r3
 8002752:	43db      	mvns	r3, r3
 8002754:	401a      	ands	r2, r3
 8002756:	6a39      	ldr	r1, [r7, #32]
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	fa01 f303 	lsl.w	r3, r1, r3
 800275e:	431a      	orrs	r2, r3
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	f000 8096 	beq.w	800289e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002772:	4b59      	ldr	r3, [pc, #356]	; (80028d8 <HAL_GPIO_Init+0x298>)
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	4a58      	ldr	r2, [pc, #352]	; (80028d8 <HAL_GPIO_Init+0x298>)
 8002778:	f043 0301 	orr.w	r3, r3, #1
 800277c:	6193      	str	r3, [r2, #24]
 800277e:	4b56      	ldr	r3, [pc, #344]	; (80028d8 <HAL_GPIO_Init+0x298>)
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	60bb      	str	r3, [r7, #8]
 8002788:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800278a:	4a54      	ldr	r2, [pc, #336]	; (80028dc <HAL_GPIO_Init+0x29c>)
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	089b      	lsrs	r3, r3, #2
 8002790:	3302      	adds	r3, #2
 8002792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002796:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	f003 0303 	and.w	r3, r3, #3
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	220f      	movs	r2, #15
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	43db      	mvns	r3, r3
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	4013      	ands	r3, r2
 80027ac:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a4b      	ldr	r2, [pc, #300]	; (80028e0 <HAL_GPIO_Init+0x2a0>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d013      	beq.n	80027de <HAL_GPIO_Init+0x19e>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a4a      	ldr	r2, [pc, #296]	; (80028e4 <HAL_GPIO_Init+0x2a4>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d00d      	beq.n	80027da <HAL_GPIO_Init+0x19a>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a49      	ldr	r2, [pc, #292]	; (80028e8 <HAL_GPIO_Init+0x2a8>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d007      	beq.n	80027d6 <HAL_GPIO_Init+0x196>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a48      	ldr	r2, [pc, #288]	; (80028ec <HAL_GPIO_Init+0x2ac>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d101      	bne.n	80027d2 <HAL_GPIO_Init+0x192>
 80027ce:	2303      	movs	r3, #3
 80027d0:	e006      	b.n	80027e0 <HAL_GPIO_Init+0x1a0>
 80027d2:	2304      	movs	r3, #4
 80027d4:	e004      	b.n	80027e0 <HAL_GPIO_Init+0x1a0>
 80027d6:	2302      	movs	r3, #2
 80027d8:	e002      	b.n	80027e0 <HAL_GPIO_Init+0x1a0>
 80027da:	2301      	movs	r3, #1
 80027dc:	e000      	b.n	80027e0 <HAL_GPIO_Init+0x1a0>
 80027de:	2300      	movs	r3, #0
 80027e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e2:	f002 0203 	and.w	r2, r2, #3
 80027e6:	0092      	lsls	r2, r2, #2
 80027e8:	4093      	lsls	r3, r2
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80027f0:	493a      	ldr	r1, [pc, #232]	; (80028dc <HAL_GPIO_Init+0x29c>)
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	089b      	lsrs	r3, r3, #2
 80027f6:	3302      	adds	r3, #2
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d006      	beq.n	8002818 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800280a:	4b39      	ldr	r3, [pc, #228]	; (80028f0 <HAL_GPIO_Init+0x2b0>)
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	4938      	ldr	r1, [pc, #224]	; (80028f0 <HAL_GPIO_Init+0x2b0>)
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	4313      	orrs	r3, r2
 8002814:	600b      	str	r3, [r1, #0]
 8002816:	e006      	b.n	8002826 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002818:	4b35      	ldr	r3, [pc, #212]	; (80028f0 <HAL_GPIO_Init+0x2b0>)
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	43db      	mvns	r3, r3
 8002820:	4933      	ldr	r1, [pc, #204]	; (80028f0 <HAL_GPIO_Init+0x2b0>)
 8002822:	4013      	ands	r3, r2
 8002824:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d006      	beq.n	8002840 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002832:	4b2f      	ldr	r3, [pc, #188]	; (80028f0 <HAL_GPIO_Init+0x2b0>)
 8002834:	685a      	ldr	r2, [r3, #4]
 8002836:	492e      	ldr	r1, [pc, #184]	; (80028f0 <HAL_GPIO_Init+0x2b0>)
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	4313      	orrs	r3, r2
 800283c:	604b      	str	r3, [r1, #4]
 800283e:	e006      	b.n	800284e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002840:	4b2b      	ldr	r3, [pc, #172]	; (80028f0 <HAL_GPIO_Init+0x2b0>)
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	43db      	mvns	r3, r3
 8002848:	4929      	ldr	r1, [pc, #164]	; (80028f0 <HAL_GPIO_Init+0x2b0>)
 800284a:	4013      	ands	r3, r2
 800284c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d006      	beq.n	8002868 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800285a:	4b25      	ldr	r3, [pc, #148]	; (80028f0 <HAL_GPIO_Init+0x2b0>)
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	4924      	ldr	r1, [pc, #144]	; (80028f0 <HAL_GPIO_Init+0x2b0>)
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	4313      	orrs	r3, r2
 8002864:	608b      	str	r3, [r1, #8]
 8002866:	e006      	b.n	8002876 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002868:	4b21      	ldr	r3, [pc, #132]	; (80028f0 <HAL_GPIO_Init+0x2b0>)
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	43db      	mvns	r3, r3
 8002870:	491f      	ldr	r1, [pc, #124]	; (80028f0 <HAL_GPIO_Init+0x2b0>)
 8002872:	4013      	ands	r3, r2
 8002874:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d006      	beq.n	8002890 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002882:	4b1b      	ldr	r3, [pc, #108]	; (80028f0 <HAL_GPIO_Init+0x2b0>)
 8002884:	68da      	ldr	r2, [r3, #12]
 8002886:	491a      	ldr	r1, [pc, #104]	; (80028f0 <HAL_GPIO_Init+0x2b0>)
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	4313      	orrs	r3, r2
 800288c:	60cb      	str	r3, [r1, #12]
 800288e:	e006      	b.n	800289e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002890:	4b17      	ldr	r3, [pc, #92]	; (80028f0 <HAL_GPIO_Init+0x2b0>)
 8002892:	68da      	ldr	r2, [r3, #12]
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	43db      	mvns	r3, r3
 8002898:	4915      	ldr	r1, [pc, #84]	; (80028f0 <HAL_GPIO_Init+0x2b0>)
 800289a:	4013      	ands	r3, r2
 800289c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	3301      	adds	r3, #1
 80028a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028aa:	fa22 f303 	lsr.w	r3, r2, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f47f aed0 	bne.w	8002654 <HAL_GPIO_Init+0x14>
  }
}
 80028b4:	bf00      	nop
 80028b6:	372c      	adds	r7, #44	; 0x2c
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	10210000 	.word	0x10210000
 80028c4:	10110000 	.word	0x10110000
 80028c8:	10120000 	.word	0x10120000
 80028cc:	10310000 	.word	0x10310000
 80028d0:	10320000 	.word	0x10320000
 80028d4:	10220000 	.word	0x10220000
 80028d8:	40021000 	.word	0x40021000
 80028dc:	40010000 	.word	0x40010000
 80028e0:	40010800 	.word	0x40010800
 80028e4:	40010c00 	.word	0x40010c00
 80028e8:	40011000 	.word	0x40011000
 80028ec:	40011400 	.word	0x40011400
 80028f0:	40010400 	.word	0x40010400

080028f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	460b      	mov	r3, r1
 80028fe:	807b      	strh	r3, [r7, #2]
 8002900:	4613      	mov	r3, r2
 8002902:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002904:	787b      	ldrb	r3, [r7, #1]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d003      	beq.n	8002912 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800290a:	887a      	ldrh	r2, [r7, #2]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002910:	e003      	b.n	800291a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002912:	887b      	ldrh	r3, [r7, #2]
 8002914:	041a      	lsls	r2, r3, #16
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	611a      	str	r2, [r3, #16]
}
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	bc80      	pop	{r7}
 8002922:	4770      	bx	lr

08002924 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e26c      	b.n	8002e10 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 8087 	beq.w	8002a52 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002944:	4b92      	ldr	r3, [pc, #584]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f003 030c 	and.w	r3, r3, #12
 800294c:	2b04      	cmp	r3, #4
 800294e:	d00c      	beq.n	800296a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002950:	4b8f      	ldr	r3, [pc, #572]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f003 030c 	and.w	r3, r3, #12
 8002958:	2b08      	cmp	r3, #8
 800295a:	d112      	bne.n	8002982 <HAL_RCC_OscConfig+0x5e>
 800295c:	4b8c      	ldr	r3, [pc, #560]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002968:	d10b      	bne.n	8002982 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800296a:	4b89      	ldr	r3, [pc, #548]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d06c      	beq.n	8002a50 <HAL_RCC_OscConfig+0x12c>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d168      	bne.n	8002a50 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e246      	b.n	8002e10 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800298a:	d106      	bne.n	800299a <HAL_RCC_OscConfig+0x76>
 800298c:	4b80      	ldr	r3, [pc, #512]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a7f      	ldr	r2, [pc, #508]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 8002992:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002996:	6013      	str	r3, [r2, #0]
 8002998:	e02e      	b.n	80029f8 <HAL_RCC_OscConfig+0xd4>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10c      	bne.n	80029bc <HAL_RCC_OscConfig+0x98>
 80029a2:	4b7b      	ldr	r3, [pc, #492]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a7a      	ldr	r2, [pc, #488]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 80029a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ac:	6013      	str	r3, [r2, #0]
 80029ae:	4b78      	ldr	r3, [pc, #480]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a77      	ldr	r2, [pc, #476]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 80029b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029b8:	6013      	str	r3, [r2, #0]
 80029ba:	e01d      	b.n	80029f8 <HAL_RCC_OscConfig+0xd4>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029c4:	d10c      	bne.n	80029e0 <HAL_RCC_OscConfig+0xbc>
 80029c6:	4b72      	ldr	r3, [pc, #456]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a71      	ldr	r2, [pc, #452]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 80029cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029d0:	6013      	str	r3, [r2, #0]
 80029d2:	4b6f      	ldr	r3, [pc, #444]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a6e      	ldr	r2, [pc, #440]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 80029d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029dc:	6013      	str	r3, [r2, #0]
 80029de:	e00b      	b.n	80029f8 <HAL_RCC_OscConfig+0xd4>
 80029e0:	4b6b      	ldr	r3, [pc, #428]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a6a      	ldr	r2, [pc, #424]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 80029e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ea:	6013      	str	r3, [r2, #0]
 80029ec:	4b68      	ldr	r3, [pc, #416]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a67      	ldr	r2, [pc, #412]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 80029f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d013      	beq.n	8002a28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a00:	f7fe ff3a 	bl	8001878 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a08:	f7fe ff36 	bl	8001878 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b64      	cmp	r3, #100	; 0x64
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e1fa      	b.n	8002e10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1a:	4b5d      	ldr	r3, [pc, #372]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d0f0      	beq.n	8002a08 <HAL_RCC_OscConfig+0xe4>
 8002a26:	e014      	b.n	8002a52 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a28:	f7fe ff26 	bl	8001878 <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a30:	f7fe ff22 	bl	8001878 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b64      	cmp	r3, #100	; 0x64
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e1e6      	b.n	8002e10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a42:	4b53      	ldr	r3, [pc, #332]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1f0      	bne.n	8002a30 <HAL_RCC_OscConfig+0x10c>
 8002a4e:	e000      	b.n	8002a52 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d063      	beq.n	8002b26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a5e:	4b4c      	ldr	r3, [pc, #304]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f003 030c 	and.w	r3, r3, #12
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00b      	beq.n	8002a82 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a6a:	4b49      	ldr	r3, [pc, #292]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f003 030c 	and.w	r3, r3, #12
 8002a72:	2b08      	cmp	r3, #8
 8002a74:	d11c      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x18c>
 8002a76:	4b46      	ldr	r3, [pc, #280]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d116      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a82:	4b43      	ldr	r3, [pc, #268]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d005      	beq.n	8002a9a <HAL_RCC_OscConfig+0x176>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d001      	beq.n	8002a9a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e1ba      	b.n	8002e10 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a9a:	4b3d      	ldr	r3, [pc, #244]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	4939      	ldr	r1, [pc, #228]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aae:	e03a      	b.n	8002b26 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d020      	beq.n	8002afa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ab8:	4b36      	ldr	r3, [pc, #216]	; (8002b94 <HAL_RCC_OscConfig+0x270>)
 8002aba:	2201      	movs	r2, #1
 8002abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002abe:	f7fe fedb 	bl	8001878 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ac6:	f7fe fed7 	bl	8001878 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e19b      	b.n	8002e10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad8:	4b2d      	ldr	r3, [pc, #180]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0f0      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae4:	4b2a      	ldr	r3, [pc, #168]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	4927      	ldr	r1, [pc, #156]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	600b      	str	r3, [r1, #0]
 8002af8:	e015      	b.n	8002b26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002afa:	4b26      	ldr	r3, [pc, #152]	; (8002b94 <HAL_RCC_OscConfig+0x270>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b00:	f7fe feba 	bl	8001878 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b08:	f7fe feb6 	bl	8001878 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e17a      	b.n	8002e10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b1a:	4b1d      	ldr	r3, [pc, #116]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1f0      	bne.n	8002b08 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d03a      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d019      	beq.n	8002b6e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b3a:	4b17      	ldr	r3, [pc, #92]	; (8002b98 <HAL_RCC_OscConfig+0x274>)
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b40:	f7fe fe9a 	bl	8001878 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b48:	f7fe fe96 	bl	8001878 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e15a      	b.n	8002e10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b5a:	4b0d      	ldr	r3, [pc, #52]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d0f0      	beq.n	8002b48 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b66:	2001      	movs	r0, #1
 8002b68:	f000 fada 	bl	8003120 <RCC_Delay>
 8002b6c:	e01c      	b.n	8002ba8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b6e:	4b0a      	ldr	r3, [pc, #40]	; (8002b98 <HAL_RCC_OscConfig+0x274>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b74:	f7fe fe80 	bl	8001878 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b7a:	e00f      	b.n	8002b9c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b7c:	f7fe fe7c 	bl	8001878 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d908      	bls.n	8002b9c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e140      	b.n	8002e10 <HAL_RCC_OscConfig+0x4ec>
 8002b8e:	bf00      	nop
 8002b90:	40021000 	.word	0x40021000
 8002b94:	42420000 	.word	0x42420000
 8002b98:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b9c:	4b9e      	ldr	r3, [pc, #632]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1e9      	bne.n	8002b7c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f000 80a6 	beq.w	8002d02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bba:	4b97      	ldr	r3, [pc, #604]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10d      	bne.n	8002be2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bc6:	4b94      	ldr	r3, [pc, #592]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	4a93      	ldr	r2, [pc, #588]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bd0:	61d3      	str	r3, [r2, #28]
 8002bd2:	4b91      	ldr	r3, [pc, #580]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002bd4:	69db      	ldr	r3, [r3, #28]
 8002bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bda:	60bb      	str	r3, [r7, #8]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bde:	2301      	movs	r3, #1
 8002be0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be2:	4b8e      	ldr	r3, [pc, #568]	; (8002e1c <HAL_RCC_OscConfig+0x4f8>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d118      	bne.n	8002c20 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bee:	4b8b      	ldr	r3, [pc, #556]	; (8002e1c <HAL_RCC_OscConfig+0x4f8>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a8a      	ldr	r2, [pc, #552]	; (8002e1c <HAL_RCC_OscConfig+0x4f8>)
 8002bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bfa:	f7fe fe3d 	bl	8001878 <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c00:	e008      	b.n	8002c14 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c02:	f7fe fe39 	bl	8001878 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b64      	cmp	r3, #100	; 0x64
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e0fd      	b.n	8002e10 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c14:	4b81      	ldr	r3, [pc, #516]	; (8002e1c <HAL_RCC_OscConfig+0x4f8>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0f0      	beq.n	8002c02 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d106      	bne.n	8002c36 <HAL_RCC_OscConfig+0x312>
 8002c28:	4b7b      	ldr	r3, [pc, #492]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	4a7a      	ldr	r2, [pc, #488]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002c2e:	f043 0301 	orr.w	r3, r3, #1
 8002c32:	6213      	str	r3, [r2, #32]
 8002c34:	e02d      	b.n	8002c92 <HAL_RCC_OscConfig+0x36e>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10c      	bne.n	8002c58 <HAL_RCC_OscConfig+0x334>
 8002c3e:	4b76      	ldr	r3, [pc, #472]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	4a75      	ldr	r2, [pc, #468]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002c44:	f023 0301 	bic.w	r3, r3, #1
 8002c48:	6213      	str	r3, [r2, #32]
 8002c4a:	4b73      	ldr	r3, [pc, #460]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	4a72      	ldr	r2, [pc, #456]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002c50:	f023 0304 	bic.w	r3, r3, #4
 8002c54:	6213      	str	r3, [r2, #32]
 8002c56:	e01c      	b.n	8002c92 <HAL_RCC_OscConfig+0x36e>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	2b05      	cmp	r3, #5
 8002c5e:	d10c      	bne.n	8002c7a <HAL_RCC_OscConfig+0x356>
 8002c60:	4b6d      	ldr	r3, [pc, #436]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	4a6c      	ldr	r2, [pc, #432]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002c66:	f043 0304 	orr.w	r3, r3, #4
 8002c6a:	6213      	str	r3, [r2, #32]
 8002c6c:	4b6a      	ldr	r3, [pc, #424]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	4a69      	ldr	r2, [pc, #420]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002c72:	f043 0301 	orr.w	r3, r3, #1
 8002c76:	6213      	str	r3, [r2, #32]
 8002c78:	e00b      	b.n	8002c92 <HAL_RCC_OscConfig+0x36e>
 8002c7a:	4b67      	ldr	r3, [pc, #412]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	4a66      	ldr	r2, [pc, #408]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002c80:	f023 0301 	bic.w	r3, r3, #1
 8002c84:	6213      	str	r3, [r2, #32]
 8002c86:	4b64      	ldr	r3, [pc, #400]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	4a63      	ldr	r2, [pc, #396]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002c8c:	f023 0304 	bic.w	r3, r3, #4
 8002c90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d015      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c9a:	f7fe fded 	bl	8001878 <HAL_GetTick>
 8002c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca0:	e00a      	b.n	8002cb8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca2:	f7fe fde9 	bl	8001878 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e0ab      	b.n	8002e10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cb8:	4b57      	ldr	r3, [pc, #348]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0ee      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x37e>
 8002cc4:	e014      	b.n	8002cf0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc6:	f7fe fdd7 	bl	8001878 <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ccc:	e00a      	b.n	8002ce4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cce:	f7fe fdd3 	bl	8001878 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e095      	b.n	8002e10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ce4:	4b4c      	ldr	r3, [pc, #304]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1ee      	bne.n	8002cce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002cf0:	7dfb      	ldrb	r3, [r7, #23]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d105      	bne.n	8002d02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cf6:	4b48      	ldr	r3, [pc, #288]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	4a47      	ldr	r2, [pc, #284]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002cfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	69db      	ldr	r3, [r3, #28]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 8081 	beq.w	8002e0e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d0c:	4b42      	ldr	r3, [pc, #264]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f003 030c 	and.w	r3, r3, #12
 8002d14:	2b08      	cmp	r3, #8
 8002d16:	d061      	beq.n	8002ddc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	69db      	ldr	r3, [r3, #28]
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d146      	bne.n	8002dae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d20:	4b3f      	ldr	r3, [pc, #252]	; (8002e20 <HAL_RCC_OscConfig+0x4fc>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d26:	f7fe fda7 	bl	8001878 <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d2c:	e008      	b.n	8002d40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d2e:	f7fe fda3 	bl	8001878 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e067      	b.n	8002e10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d40:	4b35      	ldr	r3, [pc, #212]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1f0      	bne.n	8002d2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d54:	d108      	bne.n	8002d68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d56:	4b30      	ldr	r3, [pc, #192]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	492d      	ldr	r1, [pc, #180]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d68:	4b2b      	ldr	r3, [pc, #172]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a19      	ldr	r1, [r3, #32]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	430b      	orrs	r3, r1
 8002d7a:	4927      	ldr	r1, [pc, #156]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d80:	4b27      	ldr	r3, [pc, #156]	; (8002e20 <HAL_RCC_OscConfig+0x4fc>)
 8002d82:	2201      	movs	r2, #1
 8002d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d86:	f7fe fd77 	bl	8001878 <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d8c:	e008      	b.n	8002da0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d8e:	f7fe fd73 	bl	8001878 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e037      	b.n	8002e10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002da0:	4b1d      	ldr	r3, [pc, #116]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0f0      	beq.n	8002d8e <HAL_RCC_OscConfig+0x46a>
 8002dac:	e02f      	b.n	8002e0e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dae:	4b1c      	ldr	r3, [pc, #112]	; (8002e20 <HAL_RCC_OscConfig+0x4fc>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db4:	f7fe fd60 	bl	8001878 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dbc:	f7fe fd5c 	bl	8001878 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e020      	b.n	8002e10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dce:	4b12      	ldr	r3, [pc, #72]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1f0      	bne.n	8002dbc <HAL_RCC_OscConfig+0x498>
 8002dda:	e018      	b.n	8002e0e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	69db      	ldr	r3, [r3, #28]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d101      	bne.n	8002de8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e013      	b.n	8002e10 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002de8:	4b0b      	ldr	r3, [pc, #44]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d106      	bne.n	8002e0a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d001      	beq.n	8002e0e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	40007000 	.word	0x40007000
 8002e20:	42420060 	.word	0x42420060

08002e24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e0d0      	b.n	8002fda <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e38:	4b6a      	ldr	r3, [pc, #424]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d910      	bls.n	8002e68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e46:	4b67      	ldr	r3, [pc, #412]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f023 0207 	bic.w	r2, r3, #7
 8002e4e:	4965      	ldr	r1, [pc, #404]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e56:	4b63      	ldr	r3, [pc, #396]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0307 	and.w	r3, r3, #7
 8002e5e:	683a      	ldr	r2, [r7, #0]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d001      	beq.n	8002e68 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e0b8      	b.n	8002fda <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d020      	beq.n	8002eb6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d005      	beq.n	8002e8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e80:	4b59      	ldr	r3, [pc, #356]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	4a58      	ldr	r2, [pc, #352]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e86:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e8a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0308 	and.w	r3, r3, #8
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d005      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e98:	4b53      	ldr	r3, [pc, #332]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	4a52      	ldr	r2, [pc, #328]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e9e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ea2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ea4:	4b50      	ldr	r3, [pc, #320]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	494d      	ldr	r1, [pc, #308]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d040      	beq.n	8002f44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d107      	bne.n	8002eda <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eca:	4b47      	ldr	r3, [pc, #284]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d115      	bne.n	8002f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e07f      	b.n	8002fda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d107      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ee2:	4b41      	ldr	r3, [pc, #260]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d109      	bne.n	8002f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e073      	b.n	8002fda <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef2:	4b3d      	ldr	r3, [pc, #244]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e06b      	b.n	8002fda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f02:	4b39      	ldr	r3, [pc, #228]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f023 0203 	bic.w	r2, r3, #3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	4936      	ldr	r1, [pc, #216]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f14:	f7fe fcb0 	bl	8001878 <HAL_GetTick>
 8002f18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f1a:	e00a      	b.n	8002f32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f1c:	f7fe fcac 	bl	8001878 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e053      	b.n	8002fda <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f32:	4b2d      	ldr	r3, [pc, #180]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f003 020c 	and.w	r2, r3, #12
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d1eb      	bne.n	8002f1c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f44:	4b27      	ldr	r3, [pc, #156]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0307 	and.w	r3, r3, #7
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d210      	bcs.n	8002f74 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f52:	4b24      	ldr	r3, [pc, #144]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f023 0207 	bic.w	r2, r3, #7
 8002f5a:	4922      	ldr	r1, [pc, #136]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f62:	4b20      	ldr	r3, [pc, #128]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0307 	and.w	r3, r3, #7
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d001      	beq.n	8002f74 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e032      	b.n	8002fda <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0304 	and.w	r3, r3, #4
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d008      	beq.n	8002f92 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f80:	4b19      	ldr	r3, [pc, #100]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	4916      	ldr	r1, [pc, #88]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0308 	and.w	r3, r3, #8
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d009      	beq.n	8002fb2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f9e:	4b12      	ldr	r3, [pc, #72]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	490e      	ldr	r1, [pc, #56]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fb2:	f000 f821 	bl	8002ff8 <HAL_RCC_GetSysClockFreq>
 8002fb6:	4601      	mov	r1, r0
 8002fb8:	4b0b      	ldr	r3, [pc, #44]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	091b      	lsrs	r3, r3, #4
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	4a0a      	ldr	r2, [pc, #40]	; (8002fec <HAL_RCC_ClockConfig+0x1c8>)
 8002fc4:	5cd3      	ldrb	r3, [r2, r3]
 8002fc6:	fa21 f303 	lsr.w	r3, r1, r3
 8002fca:	4a09      	ldr	r2, [pc, #36]	; (8002ff0 <HAL_RCC_ClockConfig+0x1cc>)
 8002fcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002fce:	4b09      	ldr	r3, [pc, #36]	; (8002ff4 <HAL_RCC_ClockConfig+0x1d0>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7fe fc0e 	bl	80017f4 <HAL_InitTick>

  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40022000 	.word	0x40022000
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	080049a4 	.word	0x080049a4
 8002ff0:	20000000 	.word	0x20000000
 8002ff4:	20000004 	.word	0x20000004

08002ff8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ff8:	b490      	push	{r4, r7}
 8002ffa:	b08a      	sub	sp, #40	; 0x28
 8002ffc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002ffe:	4b2a      	ldr	r3, [pc, #168]	; (80030a8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003000:	1d3c      	adds	r4, r7, #4
 8003002:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003004:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003008:	4b28      	ldr	r3, [pc, #160]	; (80030ac <HAL_RCC_GetSysClockFreq+0xb4>)
 800300a:	881b      	ldrh	r3, [r3, #0]
 800300c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800300e:	2300      	movs	r3, #0
 8003010:	61fb      	str	r3, [r7, #28]
 8003012:	2300      	movs	r3, #0
 8003014:	61bb      	str	r3, [r7, #24]
 8003016:	2300      	movs	r3, #0
 8003018:	627b      	str	r3, [r7, #36]	; 0x24
 800301a:	2300      	movs	r3, #0
 800301c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800301e:	2300      	movs	r3, #0
 8003020:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003022:	4b23      	ldr	r3, [pc, #140]	; (80030b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	f003 030c 	and.w	r3, r3, #12
 800302e:	2b04      	cmp	r3, #4
 8003030:	d002      	beq.n	8003038 <HAL_RCC_GetSysClockFreq+0x40>
 8003032:	2b08      	cmp	r3, #8
 8003034:	d003      	beq.n	800303e <HAL_RCC_GetSysClockFreq+0x46>
 8003036:	e02d      	b.n	8003094 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003038:	4b1e      	ldr	r3, [pc, #120]	; (80030b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800303a:	623b      	str	r3, [r7, #32]
      break;
 800303c:	e02d      	b.n	800309a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	0c9b      	lsrs	r3, r3, #18
 8003042:	f003 030f 	and.w	r3, r3, #15
 8003046:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800304a:	4413      	add	r3, r2
 800304c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003050:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d013      	beq.n	8003084 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800305c:	4b14      	ldr	r3, [pc, #80]	; (80030b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	0c5b      	lsrs	r3, r3, #17
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800306a:	4413      	add	r3, r2
 800306c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003070:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	4a0f      	ldr	r2, [pc, #60]	; (80030b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003076:	fb02 f203 	mul.w	r2, r2, r3
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003080:	627b      	str	r3, [r7, #36]	; 0x24
 8003082:	e004      	b.n	800308e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	4a0c      	ldr	r2, [pc, #48]	; (80030b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003088:	fb02 f303 	mul.w	r3, r2, r3
 800308c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800308e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003090:	623b      	str	r3, [r7, #32]
      break;
 8003092:	e002      	b.n	800309a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003094:	4b07      	ldr	r3, [pc, #28]	; (80030b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003096:	623b      	str	r3, [r7, #32]
      break;
 8003098:	bf00      	nop
    }
  }
  return sysclockfreq;
 800309a:	6a3b      	ldr	r3, [r7, #32]
}
 800309c:	4618      	mov	r0, r3
 800309e:	3728      	adds	r7, #40	; 0x28
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bc90      	pop	{r4, r7}
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	08004990 	.word	0x08004990
 80030ac:	080049a0 	.word	0x080049a0
 80030b0:	40021000 	.word	0x40021000
 80030b4:	007a1200 	.word	0x007a1200
 80030b8:	003d0900 	.word	0x003d0900

080030bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030c0:	4b02      	ldr	r3, [pc, #8]	; (80030cc <HAL_RCC_GetHCLKFreq+0x10>)
 80030c2:	681b      	ldr	r3, [r3, #0]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bc80      	pop	{r7}
 80030ca:	4770      	bx	lr
 80030cc:	20000000 	.word	0x20000000

080030d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030d4:	f7ff fff2 	bl	80030bc <HAL_RCC_GetHCLKFreq>
 80030d8:	4601      	mov	r1, r0
 80030da:	4b05      	ldr	r3, [pc, #20]	; (80030f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	0a1b      	lsrs	r3, r3, #8
 80030e0:	f003 0307 	and.w	r3, r3, #7
 80030e4:	4a03      	ldr	r2, [pc, #12]	; (80030f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030e6:	5cd3      	ldrb	r3, [r2, r3]
 80030e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	40021000 	.word	0x40021000
 80030f4:	080049b4 	.word	0x080049b4

080030f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030fc:	f7ff ffde 	bl	80030bc <HAL_RCC_GetHCLKFreq>
 8003100:	4601      	mov	r1, r0
 8003102:	4b05      	ldr	r3, [pc, #20]	; (8003118 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	0adb      	lsrs	r3, r3, #11
 8003108:	f003 0307 	and.w	r3, r3, #7
 800310c:	4a03      	ldr	r2, [pc, #12]	; (800311c <HAL_RCC_GetPCLK2Freq+0x24>)
 800310e:	5cd3      	ldrb	r3, [r2, r3]
 8003110:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003114:	4618      	mov	r0, r3
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40021000 	.word	0x40021000
 800311c:	080049b4 	.word	0x080049b4

08003120 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003128:	4b0a      	ldr	r3, [pc, #40]	; (8003154 <RCC_Delay+0x34>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a0a      	ldr	r2, [pc, #40]	; (8003158 <RCC_Delay+0x38>)
 800312e:	fba2 2303 	umull	r2, r3, r2, r3
 8003132:	0a5b      	lsrs	r3, r3, #9
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	fb02 f303 	mul.w	r3, r2, r3
 800313a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800313c:	bf00      	nop
  }
  while (Delay --);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	1e5a      	subs	r2, r3, #1
 8003142:	60fa      	str	r2, [r7, #12]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1f9      	bne.n	800313c <RCC_Delay+0x1c>
}
 8003148:	bf00      	nop
 800314a:	3714      	adds	r7, #20
 800314c:	46bd      	mov	sp, r7
 800314e:	bc80      	pop	{r7}
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	20000000 	.word	0x20000000
 8003158:	10624dd3 	.word	0x10624dd3

0800315c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003164:	2300      	movs	r3, #0
 8003166:	613b      	str	r3, [r7, #16]
 8003168:	2300      	movs	r3, #0
 800316a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	2b00      	cmp	r3, #0
 8003176:	d07d      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003178:	2300      	movs	r3, #0
 800317a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800317c:	4b4f      	ldr	r3, [pc, #316]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10d      	bne.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003188:	4b4c      	ldr	r3, [pc, #304]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800318a:	69db      	ldr	r3, [r3, #28]
 800318c:	4a4b      	ldr	r2, [pc, #300]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800318e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003192:	61d3      	str	r3, [r2, #28]
 8003194:	4b49      	ldr	r3, [pc, #292]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003196:	69db      	ldr	r3, [r3, #28]
 8003198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319c:	60bb      	str	r3, [r7, #8]
 800319e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031a0:	2301      	movs	r3, #1
 80031a2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a4:	4b46      	ldr	r3, [pc, #280]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d118      	bne.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031b0:	4b43      	ldr	r3, [pc, #268]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a42      	ldr	r2, [pc, #264]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031bc:	f7fe fb5c 	bl	8001878 <HAL_GetTick>
 80031c0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c2:	e008      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031c4:	f7fe fb58 	bl	8001878 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b64      	cmp	r3, #100	; 0x64
 80031d0:	d901      	bls.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e06d      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d6:	4b3a      	ldr	r3, [pc, #232]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d0f0      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031e2:	4b36      	ldr	r3, [pc, #216]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d02e      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d027      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003200:	4b2e      	ldr	r3, [pc, #184]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003208:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800320a:	4b2e      	ldr	r3, [pc, #184]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800320c:	2201      	movs	r2, #1
 800320e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003210:	4b2c      	ldr	r3, [pc, #176]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003212:	2200      	movs	r2, #0
 8003214:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003216:	4a29      	ldr	r2, [pc, #164]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b00      	cmp	r3, #0
 8003224:	d014      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003226:	f7fe fb27 	bl	8001878 <HAL_GetTick>
 800322a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800322c:	e00a      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800322e:	f7fe fb23 	bl	8001878 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	f241 3288 	movw	r2, #5000	; 0x1388
 800323c:	4293      	cmp	r3, r2
 800323e:	d901      	bls.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e036      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003244:	4b1d      	ldr	r3, [pc, #116]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003246:	6a1b      	ldr	r3, [r3, #32]
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0ee      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003250:	4b1a      	ldr	r3, [pc, #104]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	4917      	ldr	r1, [pc, #92]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800325e:	4313      	orrs	r3, r2
 8003260:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003262:	7dfb      	ldrb	r3, [r7, #23]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d105      	bne.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003268:	4b14      	ldr	r3, [pc, #80]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800326a:	69db      	ldr	r3, [r3, #28]
 800326c:	4a13      	ldr	r2, [pc, #76]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800326e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003272:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d008      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003280:	4b0e      	ldr	r3, [pc, #56]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	490b      	ldr	r1, [pc, #44]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800328e:	4313      	orrs	r3, r2
 8003290:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0310 	and.w	r3, r3, #16
 800329a:	2b00      	cmp	r3, #0
 800329c:	d008      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800329e:	4b07      	ldr	r3, [pc, #28]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	4904      	ldr	r1, [pc, #16]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3718      	adds	r7, #24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40021000 	.word	0x40021000
 80032c0:	40007000 	.word	0x40007000
 80032c4:	42420440 	.word	0x42420440

080032c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e01d      	b.n	8003316 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d106      	bne.n	80032f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f7fe f8ca 	bl	8001488 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2202      	movs	r2, #2
 80032f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	3304      	adds	r3, #4
 8003304:	4619      	mov	r1, r3
 8003306:	4610      	mov	r0, r2
 8003308:	f000 f9ee 	bl	80036e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b082      	sub	sp, #8
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d101      	bne.n	8003330 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e01d      	b.n	800336c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b00      	cmp	r3, #0
 800333a:	d106      	bne.n	800334a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 f815 	bl	8003374 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2202      	movs	r2, #2
 800334e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	3304      	adds	r3, #4
 800335a:	4619      	mov	r1, r3
 800335c:	4610      	mov	r0, r2
 800335e:	f000 f9c3 	bl	80036e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	bc80      	pop	{r7}
 8003384:	4770      	bx	lr
	...

08003388 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2201      	movs	r2, #1
 8003398:	6839      	ldr	r1, [r7, #0]
 800339a:	4618      	mov	r0, r3
 800339c:	f000 fc24 	bl	8003be8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a10      	ldr	r2, [pc, #64]	; (80033e8 <HAL_TIM_PWM_Start+0x60>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d107      	bne.n	80033ba <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f003 0307 	and.w	r3, r3, #7
 80033c4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2b06      	cmp	r3, #6
 80033ca:	d007      	beq.n	80033dc <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f042 0201 	orr.w	r2, r2, #1
 80033da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	40012c00 	.word	0x40012c00

080033ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d101      	bne.n	8003406 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003402:	2302      	movs	r3, #2
 8003404:	e0b4      	b.n	8003570 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2202      	movs	r2, #2
 8003412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b0c      	cmp	r3, #12
 800341a:	f200 809f 	bhi.w	800355c <HAL_TIM_PWM_ConfigChannel+0x170>
 800341e:	a201      	add	r2, pc, #4	; (adr r2, 8003424 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003424:	08003459 	.word	0x08003459
 8003428:	0800355d 	.word	0x0800355d
 800342c:	0800355d 	.word	0x0800355d
 8003430:	0800355d 	.word	0x0800355d
 8003434:	08003499 	.word	0x08003499
 8003438:	0800355d 	.word	0x0800355d
 800343c:	0800355d 	.word	0x0800355d
 8003440:	0800355d 	.word	0x0800355d
 8003444:	080034db 	.word	0x080034db
 8003448:	0800355d 	.word	0x0800355d
 800344c:	0800355d 	.word	0x0800355d
 8003450:	0800355d 	.word	0x0800355d
 8003454:	0800351b 	.word	0x0800351b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68b9      	ldr	r1, [r7, #8]
 800345e:	4618      	mov	r0, r3
 8003460:	f000 f9a4 	bl	80037ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	699a      	ldr	r2, [r3, #24]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 0208 	orr.w	r2, r2, #8
 8003472:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	699a      	ldr	r2, [r3, #24]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 0204 	bic.w	r2, r2, #4
 8003482:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6999      	ldr	r1, [r3, #24]
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	691a      	ldr	r2, [r3, #16]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	619a      	str	r2, [r3, #24]
      break;
 8003496:	e062      	b.n	800355e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68b9      	ldr	r1, [r7, #8]
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 f9ea 	bl	8003878 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	699a      	ldr	r2, [r3, #24]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	699a      	ldr	r2, [r3, #24]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6999      	ldr	r1, [r3, #24]
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	021a      	lsls	r2, r3, #8
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	619a      	str	r2, [r3, #24]
      break;
 80034d8:	e041      	b.n	800355e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68b9      	ldr	r1, [r7, #8]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f000 fa33 	bl	800394c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	69da      	ldr	r2, [r3, #28]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f042 0208 	orr.w	r2, r2, #8
 80034f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	69da      	ldr	r2, [r3, #28]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 0204 	bic.w	r2, r2, #4
 8003504:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	69d9      	ldr	r1, [r3, #28]
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	691a      	ldr	r2, [r3, #16]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	430a      	orrs	r2, r1
 8003516:	61da      	str	r2, [r3, #28]
      break;
 8003518:	e021      	b.n	800355e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68b9      	ldr	r1, [r7, #8]
 8003520:	4618      	mov	r0, r3
 8003522:	f000 fa7d 	bl	8003a20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	69da      	ldr	r2, [r3, #28]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003534:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	69da      	ldr	r2, [r3, #28]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003544:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	69d9      	ldr	r1, [r3, #28]
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	021a      	lsls	r2, r3, #8
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	61da      	str	r2, [r3, #28]
      break;
 800355a:	e000      	b.n	800355e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800355c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003588:	2b01      	cmp	r3, #1
 800358a:	d101      	bne.n	8003590 <HAL_TIM_ConfigClockSource+0x18>
 800358c:	2302      	movs	r3, #2
 800358e:	e0a6      	b.n	80036de <HAL_TIM_ConfigClockSource+0x166>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2202      	movs	r2, #2
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80035ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035b6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2b40      	cmp	r3, #64	; 0x40
 80035c6:	d067      	beq.n	8003698 <HAL_TIM_ConfigClockSource+0x120>
 80035c8:	2b40      	cmp	r3, #64	; 0x40
 80035ca:	d80b      	bhi.n	80035e4 <HAL_TIM_ConfigClockSource+0x6c>
 80035cc:	2b10      	cmp	r3, #16
 80035ce:	d073      	beq.n	80036b8 <HAL_TIM_ConfigClockSource+0x140>
 80035d0:	2b10      	cmp	r3, #16
 80035d2:	d802      	bhi.n	80035da <HAL_TIM_ConfigClockSource+0x62>
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d06f      	beq.n	80036b8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80035d8:	e078      	b.n	80036cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80035da:	2b20      	cmp	r3, #32
 80035dc:	d06c      	beq.n	80036b8 <HAL_TIM_ConfigClockSource+0x140>
 80035de:	2b30      	cmp	r3, #48	; 0x30
 80035e0:	d06a      	beq.n	80036b8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80035e2:	e073      	b.n	80036cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80035e4:	2b70      	cmp	r3, #112	; 0x70
 80035e6:	d00d      	beq.n	8003604 <HAL_TIM_ConfigClockSource+0x8c>
 80035e8:	2b70      	cmp	r3, #112	; 0x70
 80035ea:	d804      	bhi.n	80035f6 <HAL_TIM_ConfigClockSource+0x7e>
 80035ec:	2b50      	cmp	r3, #80	; 0x50
 80035ee:	d033      	beq.n	8003658 <HAL_TIM_ConfigClockSource+0xe0>
 80035f0:	2b60      	cmp	r3, #96	; 0x60
 80035f2:	d041      	beq.n	8003678 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80035f4:	e06a      	b.n	80036cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80035f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035fa:	d066      	beq.n	80036ca <HAL_TIM_ConfigClockSource+0x152>
 80035fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003600:	d017      	beq.n	8003632 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003602:	e063      	b.n	80036cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6818      	ldr	r0, [r3, #0]
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	6899      	ldr	r1, [r3, #8]
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	f000 fac9 	bl	8003baa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003626:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	609a      	str	r2, [r3, #8]
      break;
 8003630:	e04c      	b.n	80036cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6818      	ldr	r0, [r3, #0]
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	6899      	ldr	r1, [r3, #8]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	f000 fab2 	bl	8003baa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003654:	609a      	str	r2, [r3, #8]
      break;
 8003656:	e039      	b.n	80036cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6818      	ldr	r0, [r3, #0]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	6859      	ldr	r1, [r3, #4]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	461a      	mov	r2, r3
 8003666:	f000 fa29 	bl	8003abc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2150      	movs	r1, #80	; 0x50
 8003670:	4618      	mov	r0, r3
 8003672:	f000 fa80 	bl	8003b76 <TIM_ITRx_SetConfig>
      break;
 8003676:	e029      	b.n	80036cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6818      	ldr	r0, [r3, #0]
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	6859      	ldr	r1, [r3, #4]
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	461a      	mov	r2, r3
 8003686:	f000 fa47 	bl	8003b18 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2160      	movs	r1, #96	; 0x60
 8003690:	4618      	mov	r0, r3
 8003692:	f000 fa70 	bl	8003b76 <TIM_ITRx_SetConfig>
      break;
 8003696:	e019      	b.n	80036cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6818      	ldr	r0, [r3, #0]
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	6859      	ldr	r1, [r3, #4]
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	461a      	mov	r2, r3
 80036a6:	f000 fa09 	bl	8003abc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2140      	movs	r1, #64	; 0x40
 80036b0:	4618      	mov	r0, r3
 80036b2:	f000 fa60 	bl	8003b76 <TIM_ITRx_SetConfig>
      break;
 80036b6:	e009      	b.n	80036cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4619      	mov	r1, r3
 80036c2:	4610      	mov	r0, r2
 80036c4:	f000 fa57 	bl	8003b76 <TIM_ITRx_SetConfig>
      break;
 80036c8:	e000      	b.n	80036cc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80036ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
	...

080036e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a29      	ldr	r2, [pc, #164]	; (80037a0 <TIM_Base_SetConfig+0xb8>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d00b      	beq.n	8003718 <TIM_Base_SetConfig+0x30>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003706:	d007      	beq.n	8003718 <TIM_Base_SetConfig+0x30>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a26      	ldr	r2, [pc, #152]	; (80037a4 <TIM_Base_SetConfig+0xbc>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d003      	beq.n	8003718 <TIM_Base_SetConfig+0x30>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a25      	ldr	r2, [pc, #148]	; (80037a8 <TIM_Base_SetConfig+0xc0>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d108      	bne.n	800372a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800371e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	4313      	orrs	r3, r2
 8003728:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a1c      	ldr	r2, [pc, #112]	; (80037a0 <TIM_Base_SetConfig+0xb8>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d00b      	beq.n	800374a <TIM_Base_SetConfig+0x62>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003738:	d007      	beq.n	800374a <TIM_Base_SetConfig+0x62>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a19      	ldr	r2, [pc, #100]	; (80037a4 <TIM_Base_SetConfig+0xbc>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d003      	beq.n	800374a <TIM_Base_SetConfig+0x62>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a18      	ldr	r2, [pc, #96]	; (80037a8 <TIM_Base_SetConfig+0xc0>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d108      	bne.n	800375c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003750:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	4313      	orrs	r3, r2
 800375a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	4313      	orrs	r3, r2
 8003768:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a07      	ldr	r2, [pc, #28]	; (80037a0 <TIM_Base_SetConfig+0xb8>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d103      	bne.n	8003790 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	691a      	ldr	r2, [r3, #16]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	615a      	str	r2, [r3, #20]
}
 8003796:	bf00      	nop
 8003798:	3714      	adds	r7, #20
 800379a:	46bd      	mov	sp, r7
 800379c:	bc80      	pop	{r7}
 800379e:	4770      	bx	lr
 80037a0:	40012c00 	.word	0x40012c00
 80037a4:	40000400 	.word	0x40000400
 80037a8:	40000800 	.word	0x40000800

080037ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b087      	sub	sp, #28
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	f023 0201 	bic.w	r2, r3, #1
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f023 0303 	bic.w	r3, r3, #3
 80037e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	f023 0302 	bic.w	r3, r3, #2
 80037f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a1c      	ldr	r2, [pc, #112]	; (8003874 <TIM_OC1_SetConfig+0xc8>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d10c      	bne.n	8003822 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	f023 0308 	bic.w	r3, r3, #8
 800380e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	4313      	orrs	r3, r2
 8003818:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	f023 0304 	bic.w	r3, r3, #4
 8003820:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a13      	ldr	r2, [pc, #76]	; (8003874 <TIM_OC1_SetConfig+0xc8>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d111      	bne.n	800384e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003830:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003838:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	4313      	orrs	r3, r2
 8003842:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	4313      	orrs	r3, r2
 800384c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	621a      	str	r2, [r3, #32]
}
 8003868:	bf00      	nop
 800386a:	371c      	adds	r7, #28
 800386c:	46bd      	mov	sp, r7
 800386e:	bc80      	pop	{r7}
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	40012c00 	.word	0x40012c00

08003878 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003878:	b480      	push	{r7}
 800387a:	b087      	sub	sp, #28
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	f023 0210 	bic.w	r2, r3, #16
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	021b      	lsls	r3, r3, #8
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	f023 0320 	bic.w	r3, r3, #32
 80038c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	011b      	lsls	r3, r3, #4
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a1d      	ldr	r2, [pc, #116]	; (8003948 <TIM_OC2_SetConfig+0xd0>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d10d      	bne.n	80038f4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	011b      	lsls	r3, r3, #4
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a14      	ldr	r2, [pc, #80]	; (8003948 <TIM_OC2_SetConfig+0xd0>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d113      	bne.n	8003924 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003902:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800390a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	4313      	orrs	r3, r2
 8003916:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	4313      	orrs	r3, r2
 8003922:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685a      	ldr	r2, [r3, #4]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	621a      	str	r2, [r3, #32]
}
 800393e:	bf00      	nop
 8003940:	371c      	adds	r7, #28
 8003942:	46bd      	mov	sp, r7
 8003944:	bc80      	pop	{r7}
 8003946:	4770      	bx	lr
 8003948:	40012c00 	.word	0x40012c00

0800394c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800394c:	b480      	push	{r7}
 800394e:	b087      	sub	sp, #28
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800397a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f023 0303 	bic.w	r3, r3, #3
 8003982:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	4313      	orrs	r3, r2
 800398c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003994:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	021b      	lsls	r3, r3, #8
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	4313      	orrs	r3, r2
 80039a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a1d      	ldr	r2, [pc, #116]	; (8003a1c <TIM_OC3_SetConfig+0xd0>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d10d      	bne.n	80039c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	021b      	lsls	r3, r3, #8
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a14      	ldr	r2, [pc, #80]	; (8003a1c <TIM_OC3_SetConfig+0xd0>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d113      	bne.n	80039f6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	011b      	lsls	r3, r3, #4
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	011b      	lsls	r3, r3, #4
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	621a      	str	r2, [r3, #32]
}
 8003a10:	bf00      	nop
 8003a12:	371c      	adds	r7, #28
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bc80      	pop	{r7}
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	40012c00 	.word	0x40012c00

08003a20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b087      	sub	sp, #28
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	69db      	ldr	r3, [r3, #28]
 8003a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	021b      	lsls	r3, r3, #8
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	031b      	lsls	r3, r3, #12
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a0f      	ldr	r2, [pc, #60]	; (8003ab8 <TIM_OC4_SetConfig+0x98>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d109      	bne.n	8003a94 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	019b      	lsls	r3, r3, #6
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685a      	ldr	r2, [r3, #4]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	621a      	str	r2, [r3, #32]
}
 8003aae:	bf00      	nop
 8003ab0:	371c      	adds	r7, #28
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bc80      	pop	{r7}
 8003ab6:	4770      	bx	lr
 8003ab8:	40012c00 	.word	0x40012c00

08003abc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b087      	sub	sp, #28
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	f023 0201 	bic.w	r2, r3, #1
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ae6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	011b      	lsls	r3, r3, #4
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f023 030a 	bic.w	r3, r3, #10
 8003af8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	621a      	str	r2, [r3, #32]
}
 8003b0e:	bf00      	nop
 8003b10:	371c      	adds	r7, #28
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bc80      	pop	{r7}
 8003b16:	4770      	bx	lr

08003b18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b087      	sub	sp, #28
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	f023 0210 	bic.w	r2, r3, #16
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b42:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	031b      	lsls	r3, r3, #12
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b54:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	011b      	lsls	r3, r3, #4
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	621a      	str	r2, [r3, #32]
}
 8003b6c:	bf00      	nop
 8003b6e:	371c      	adds	r7, #28
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bc80      	pop	{r7}
 8003b74:	4770      	bx	lr

08003b76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b76:	b480      	push	{r7}
 8003b78:	b085      	sub	sp, #20
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
 8003b7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	f043 0307 	orr.w	r3, r3, #7
 8003b98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	609a      	str	r2, [r3, #8]
}
 8003ba0:	bf00      	nop
 8003ba2:	3714      	adds	r7, #20
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bc80      	pop	{r7}
 8003ba8:	4770      	bx	lr

08003baa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003baa:	b480      	push	{r7}
 8003bac:	b087      	sub	sp, #28
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	60f8      	str	r0, [r7, #12]
 8003bb2:	60b9      	str	r1, [r7, #8]
 8003bb4:	607a      	str	r2, [r7, #4]
 8003bb6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bc4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	021a      	lsls	r2, r3, #8
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	431a      	orrs	r2, r3
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	609a      	str	r2, [r3, #8]
}
 8003bde:	bf00      	nop
 8003be0:	371c      	adds	r7, #28
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bc80      	pop	{r7}
 8003be6:	4770      	bx	lr

08003be8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b087      	sub	sp, #28
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	f003 031f 	and.w	r3, r3, #31
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6a1a      	ldr	r2, [r3, #32]
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	43db      	mvns	r3, r3
 8003c0a:	401a      	ands	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6a1a      	ldr	r2, [r3, #32]
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	f003 031f 	and.w	r3, r3, #31
 8003c1a:	6879      	ldr	r1, [r7, #4]
 8003c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c20:	431a      	orrs	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	621a      	str	r2, [r3, #32]
}
 8003c26:	bf00      	nop
 8003c28:	371c      	adds	r7, #28
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bc80      	pop	{r7}
 8003c2e:	4770      	bx	lr

08003c30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d101      	bne.n	8003c48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c44:	2302      	movs	r3, #2
 8003c46:	e032      	b.n	8003cae <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2202      	movs	r2, #2
 8003c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c80:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	68ba      	ldr	r2, [r7, #8]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3714      	adds	r7, #20
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bc80      	pop	{r7}
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e03f      	b.n	8003d4a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d106      	bne.n	8003ce4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f7fd fc6c 	bl	80015bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2224      	movs	r2, #36	; 0x24
 8003ce8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68da      	ldr	r2, [r3, #12]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cfa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 f90b 	bl	8003f18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	691a      	ldr	r2, [r3, #16]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	695a      	ldr	r2, [r3, #20]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68da      	ldr	r2, [r3, #12]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2220      	movs	r2, #32
 8003d44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b088      	sub	sp, #32
 8003d56:	af02      	add	r7, sp, #8
 8003d58:	60f8      	str	r0, [r7, #12]
 8003d5a:	60b9      	str	r1, [r7, #8]
 8003d5c:	603b      	str	r3, [r7, #0]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003d62:	2300      	movs	r3, #0
 8003d64:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b20      	cmp	r3, #32
 8003d70:	f040 8083 	bne.w	8003e7a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d002      	beq.n	8003d80 <HAL_UART_Transmit+0x2e>
 8003d7a:	88fb      	ldrh	r3, [r7, #6]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d101      	bne.n	8003d84 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e07b      	b.n	8003e7c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d101      	bne.n	8003d92 <HAL_UART_Transmit+0x40>
 8003d8e:	2302      	movs	r3, #2
 8003d90:	e074      	b.n	8003e7c <HAL_UART_Transmit+0x12a>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2221      	movs	r2, #33	; 0x21
 8003da4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003da8:	f7fd fd66 	bl	8001878 <HAL_GetTick>
 8003dac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	88fa      	ldrh	r2, [r7, #6]
 8003db2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	88fa      	ldrh	r2, [r7, #6]
 8003db8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003dba:	e042      	b.n	8003e42 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd2:	d122      	bne.n	8003e1a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	9300      	str	r3, [sp, #0]
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	2180      	movs	r1, #128	; 0x80
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f000 f850 	bl	8003e84 <UART_WaitOnFlagUntilTimeout>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d001      	beq.n	8003dee <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e046      	b.n	8003e7c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	881b      	ldrh	r3, [r3, #0]
 8003df6:	461a      	mov	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e00:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d103      	bne.n	8003e12 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	3302      	adds	r3, #2
 8003e0e:	60bb      	str	r3, [r7, #8]
 8003e10:	e017      	b.n	8003e42 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	3301      	adds	r3, #1
 8003e16:	60bb      	str	r3, [r7, #8]
 8003e18:	e013      	b.n	8003e42 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	2200      	movs	r2, #0
 8003e22:	2180      	movs	r1, #128	; 0x80
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f000 f82d 	bl	8003e84 <UART_WaitOnFlagUntilTimeout>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d001      	beq.n	8003e34 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e023      	b.n	8003e7c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	1c5a      	adds	r2, r3, #1
 8003e38:	60ba      	str	r2, [r7, #8]
 8003e3a:	781a      	ldrb	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1b7      	bne.n	8003dbc <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	9300      	str	r3, [sp, #0]
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	2200      	movs	r2, #0
 8003e54:	2140      	movs	r1, #64	; 0x40
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f000 f814 	bl	8003e84 <UART_WaitOnFlagUntilTimeout>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e00a      	b.n	8003e7c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2220      	movs	r2, #32
 8003e6a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003e76:	2300      	movs	r3, #0
 8003e78:	e000      	b.n	8003e7c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003e7a:	2302      	movs	r3, #2
  }
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3718      	adds	r7, #24
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	603b      	str	r3, [r7, #0]
 8003e90:	4613      	mov	r3, r2
 8003e92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e94:	e02c      	b.n	8003ef0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e9c:	d028      	beq.n	8003ef0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d007      	beq.n	8003eb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ea4:	f7fd fce8 	bl	8001878 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d21d      	bcs.n	8003ef0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68da      	ldr	r2, [r3, #12]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ec2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	695a      	ldr	r2, [r3, #20]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f022 0201 	bic.w	r2, r2, #1
 8003ed2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e00f      	b.n	8003f10 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	4013      	ands	r3, r2
 8003efa:	68ba      	ldr	r2, [r7, #8]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	bf0c      	ite	eq
 8003f00:	2301      	moveq	r3, #1
 8003f02:	2300      	movne	r3, #0
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	461a      	mov	r2, r3
 8003f08:	79fb      	ldrb	r3, [r7, #7]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d0c3      	beq.n	8003e96 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68da      	ldr	r2, [r3, #12]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	430a      	orrs	r2, r1
 8003f34:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	689a      	ldr	r2, [r3, #8]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003f52:	f023 030c 	bic.w	r3, r3, #12
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	6812      	ldr	r2, [r2, #0]
 8003f5a:	68f9      	ldr	r1, [r7, #12]
 8003f5c:	430b      	orrs	r3, r1
 8003f5e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	699a      	ldr	r2, [r3, #24]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	430a      	orrs	r2, r1
 8003f74:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a52      	ldr	r2, [pc, #328]	; (80040c4 <UART_SetConfig+0x1ac>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d14e      	bne.n	800401e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003f80:	f7ff f8ba 	bl	80030f8 <HAL_RCC_GetPCLK2Freq>
 8003f84:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f86:	68ba      	ldr	r2, [r7, #8]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	4413      	add	r3, r2
 8003f8e:	009a      	lsls	r2, r3, #2
 8003f90:	441a      	add	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f9c:	4a4a      	ldr	r2, [pc, #296]	; (80040c8 <UART_SetConfig+0x1b0>)
 8003f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa2:	095b      	lsrs	r3, r3, #5
 8003fa4:	0119      	lsls	r1, r3, #4
 8003fa6:	68ba      	ldr	r2, [r7, #8]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4413      	add	r3, r2
 8003fae:	009a      	lsls	r2, r3, #2
 8003fb0:	441a      	add	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fbc:	4b42      	ldr	r3, [pc, #264]	; (80040c8 <UART_SetConfig+0x1b0>)
 8003fbe:	fba3 0302 	umull	r0, r3, r3, r2
 8003fc2:	095b      	lsrs	r3, r3, #5
 8003fc4:	2064      	movs	r0, #100	; 0x64
 8003fc6:	fb00 f303 	mul.w	r3, r0, r3
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	011b      	lsls	r3, r3, #4
 8003fce:	3332      	adds	r3, #50	; 0x32
 8003fd0:	4a3d      	ldr	r2, [pc, #244]	; (80040c8 <UART_SetConfig+0x1b0>)
 8003fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd6:	095b      	lsrs	r3, r3, #5
 8003fd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fdc:	4419      	add	r1, r3
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	4413      	add	r3, r2
 8003fe6:	009a      	lsls	r2, r3, #2
 8003fe8:	441a      	add	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ff4:	4b34      	ldr	r3, [pc, #208]	; (80040c8 <UART_SetConfig+0x1b0>)
 8003ff6:	fba3 0302 	umull	r0, r3, r3, r2
 8003ffa:	095b      	lsrs	r3, r3, #5
 8003ffc:	2064      	movs	r0, #100	; 0x64
 8003ffe:	fb00 f303 	mul.w	r3, r0, r3
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	011b      	lsls	r3, r3, #4
 8004006:	3332      	adds	r3, #50	; 0x32
 8004008:	4a2f      	ldr	r2, [pc, #188]	; (80040c8 <UART_SetConfig+0x1b0>)
 800400a:	fba2 2303 	umull	r2, r3, r2, r3
 800400e:	095b      	lsrs	r3, r3, #5
 8004010:	f003 020f 	and.w	r2, r3, #15
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	440a      	add	r2, r1
 800401a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800401c:	e04d      	b.n	80040ba <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800401e:	f7ff f857 	bl	80030d0 <HAL_RCC_GetPCLK1Freq>
 8004022:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	4613      	mov	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4413      	add	r3, r2
 800402c:	009a      	lsls	r2, r3, #2
 800402e:	441a      	add	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	fbb2 f3f3 	udiv	r3, r2, r3
 800403a:	4a23      	ldr	r2, [pc, #140]	; (80040c8 <UART_SetConfig+0x1b0>)
 800403c:	fba2 2303 	umull	r2, r3, r2, r3
 8004040:	095b      	lsrs	r3, r3, #5
 8004042:	0119      	lsls	r1, r3, #4
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	4613      	mov	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4413      	add	r3, r2
 800404c:	009a      	lsls	r2, r3, #2
 800404e:	441a      	add	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	fbb2 f2f3 	udiv	r2, r2, r3
 800405a:	4b1b      	ldr	r3, [pc, #108]	; (80040c8 <UART_SetConfig+0x1b0>)
 800405c:	fba3 0302 	umull	r0, r3, r3, r2
 8004060:	095b      	lsrs	r3, r3, #5
 8004062:	2064      	movs	r0, #100	; 0x64
 8004064:	fb00 f303 	mul.w	r3, r0, r3
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	011b      	lsls	r3, r3, #4
 800406c:	3332      	adds	r3, #50	; 0x32
 800406e:	4a16      	ldr	r2, [pc, #88]	; (80040c8 <UART_SetConfig+0x1b0>)
 8004070:	fba2 2303 	umull	r2, r3, r2, r3
 8004074:	095b      	lsrs	r3, r3, #5
 8004076:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800407a:	4419      	add	r1, r3
 800407c:	68ba      	ldr	r2, [r7, #8]
 800407e:	4613      	mov	r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	4413      	add	r3, r2
 8004084:	009a      	lsls	r2, r3, #2
 8004086:	441a      	add	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004092:	4b0d      	ldr	r3, [pc, #52]	; (80040c8 <UART_SetConfig+0x1b0>)
 8004094:	fba3 0302 	umull	r0, r3, r3, r2
 8004098:	095b      	lsrs	r3, r3, #5
 800409a:	2064      	movs	r0, #100	; 0x64
 800409c:	fb00 f303 	mul.w	r3, r0, r3
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	011b      	lsls	r3, r3, #4
 80040a4:	3332      	adds	r3, #50	; 0x32
 80040a6:	4a08      	ldr	r2, [pc, #32]	; (80040c8 <UART_SetConfig+0x1b0>)
 80040a8:	fba2 2303 	umull	r2, r3, r2, r3
 80040ac:	095b      	lsrs	r3, r3, #5
 80040ae:	f003 020f 	and.w	r2, r3, #15
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	440a      	add	r2, r1
 80040b8:	609a      	str	r2, [r3, #8]
}
 80040ba:	bf00      	nop
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	40013800 	.word	0x40013800
 80040c8:	51eb851f 	.word	0x51eb851f

080040cc <__errno>:
 80040cc:	4b01      	ldr	r3, [pc, #4]	; (80040d4 <__errno+0x8>)
 80040ce:	6818      	ldr	r0, [r3, #0]
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	2000000c 	.word	0x2000000c

080040d8 <__libc_init_array>:
 80040d8:	b570      	push	{r4, r5, r6, lr}
 80040da:	2500      	movs	r5, #0
 80040dc:	4e0c      	ldr	r6, [pc, #48]	; (8004110 <__libc_init_array+0x38>)
 80040de:	4c0d      	ldr	r4, [pc, #52]	; (8004114 <__libc_init_array+0x3c>)
 80040e0:	1ba4      	subs	r4, r4, r6
 80040e2:	10a4      	asrs	r4, r4, #2
 80040e4:	42a5      	cmp	r5, r4
 80040e6:	d109      	bne.n	80040fc <__libc_init_array+0x24>
 80040e8:	f000 fc34 	bl	8004954 <_init>
 80040ec:	2500      	movs	r5, #0
 80040ee:	4e0a      	ldr	r6, [pc, #40]	; (8004118 <__libc_init_array+0x40>)
 80040f0:	4c0a      	ldr	r4, [pc, #40]	; (800411c <__libc_init_array+0x44>)
 80040f2:	1ba4      	subs	r4, r4, r6
 80040f4:	10a4      	asrs	r4, r4, #2
 80040f6:	42a5      	cmp	r5, r4
 80040f8:	d105      	bne.n	8004106 <__libc_init_array+0x2e>
 80040fa:	bd70      	pop	{r4, r5, r6, pc}
 80040fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004100:	4798      	blx	r3
 8004102:	3501      	adds	r5, #1
 8004104:	e7ee      	b.n	80040e4 <__libc_init_array+0xc>
 8004106:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800410a:	4798      	blx	r3
 800410c:	3501      	adds	r5, #1
 800410e:	e7f2      	b.n	80040f6 <__libc_init_array+0x1e>
 8004110:	080049f0 	.word	0x080049f0
 8004114:	080049f0 	.word	0x080049f0
 8004118:	080049f0 	.word	0x080049f0
 800411c:	080049f4 	.word	0x080049f4

08004120 <memset>:
 8004120:	4603      	mov	r3, r0
 8004122:	4402      	add	r2, r0
 8004124:	4293      	cmp	r3, r2
 8004126:	d100      	bne.n	800412a <memset+0xa>
 8004128:	4770      	bx	lr
 800412a:	f803 1b01 	strb.w	r1, [r3], #1
 800412e:	e7f9      	b.n	8004124 <memset+0x4>

08004130 <siprintf>:
 8004130:	b40e      	push	{r1, r2, r3}
 8004132:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004136:	b500      	push	{lr}
 8004138:	b09c      	sub	sp, #112	; 0x70
 800413a:	ab1d      	add	r3, sp, #116	; 0x74
 800413c:	9002      	str	r0, [sp, #8]
 800413e:	9006      	str	r0, [sp, #24]
 8004140:	9107      	str	r1, [sp, #28]
 8004142:	9104      	str	r1, [sp, #16]
 8004144:	4808      	ldr	r0, [pc, #32]	; (8004168 <siprintf+0x38>)
 8004146:	4909      	ldr	r1, [pc, #36]	; (800416c <siprintf+0x3c>)
 8004148:	f853 2b04 	ldr.w	r2, [r3], #4
 800414c:	9105      	str	r1, [sp, #20]
 800414e:	6800      	ldr	r0, [r0, #0]
 8004150:	a902      	add	r1, sp, #8
 8004152:	9301      	str	r3, [sp, #4]
 8004154:	f000 f866 	bl	8004224 <_svfiprintf_r>
 8004158:	2200      	movs	r2, #0
 800415a:	9b02      	ldr	r3, [sp, #8]
 800415c:	701a      	strb	r2, [r3, #0]
 800415e:	b01c      	add	sp, #112	; 0x70
 8004160:	f85d eb04 	ldr.w	lr, [sp], #4
 8004164:	b003      	add	sp, #12
 8004166:	4770      	bx	lr
 8004168:	2000000c 	.word	0x2000000c
 800416c:	ffff0208 	.word	0xffff0208

08004170 <__ssputs_r>:
 8004170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004174:	688e      	ldr	r6, [r1, #8]
 8004176:	4682      	mov	sl, r0
 8004178:	429e      	cmp	r6, r3
 800417a:	460c      	mov	r4, r1
 800417c:	4690      	mov	r8, r2
 800417e:	4699      	mov	r9, r3
 8004180:	d837      	bhi.n	80041f2 <__ssputs_r+0x82>
 8004182:	898a      	ldrh	r2, [r1, #12]
 8004184:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004188:	d031      	beq.n	80041ee <__ssputs_r+0x7e>
 800418a:	2302      	movs	r3, #2
 800418c:	6825      	ldr	r5, [r4, #0]
 800418e:	6909      	ldr	r1, [r1, #16]
 8004190:	1a6f      	subs	r7, r5, r1
 8004192:	6965      	ldr	r5, [r4, #20]
 8004194:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004198:	fb95 f5f3 	sdiv	r5, r5, r3
 800419c:	f109 0301 	add.w	r3, r9, #1
 80041a0:	443b      	add	r3, r7
 80041a2:	429d      	cmp	r5, r3
 80041a4:	bf38      	it	cc
 80041a6:	461d      	movcc	r5, r3
 80041a8:	0553      	lsls	r3, r2, #21
 80041aa:	d530      	bpl.n	800420e <__ssputs_r+0x9e>
 80041ac:	4629      	mov	r1, r5
 80041ae:	f000 fb37 	bl	8004820 <_malloc_r>
 80041b2:	4606      	mov	r6, r0
 80041b4:	b950      	cbnz	r0, 80041cc <__ssputs_r+0x5c>
 80041b6:	230c      	movs	r3, #12
 80041b8:	f04f 30ff 	mov.w	r0, #4294967295
 80041bc:	f8ca 3000 	str.w	r3, [sl]
 80041c0:	89a3      	ldrh	r3, [r4, #12]
 80041c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041c6:	81a3      	strh	r3, [r4, #12]
 80041c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041cc:	463a      	mov	r2, r7
 80041ce:	6921      	ldr	r1, [r4, #16]
 80041d0:	f000 fab6 	bl	8004740 <memcpy>
 80041d4:	89a3      	ldrh	r3, [r4, #12]
 80041d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80041da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041de:	81a3      	strh	r3, [r4, #12]
 80041e0:	6126      	str	r6, [r4, #16]
 80041e2:	443e      	add	r6, r7
 80041e4:	6026      	str	r6, [r4, #0]
 80041e6:	464e      	mov	r6, r9
 80041e8:	6165      	str	r5, [r4, #20]
 80041ea:	1bed      	subs	r5, r5, r7
 80041ec:	60a5      	str	r5, [r4, #8]
 80041ee:	454e      	cmp	r6, r9
 80041f0:	d900      	bls.n	80041f4 <__ssputs_r+0x84>
 80041f2:	464e      	mov	r6, r9
 80041f4:	4632      	mov	r2, r6
 80041f6:	4641      	mov	r1, r8
 80041f8:	6820      	ldr	r0, [r4, #0]
 80041fa:	f000 faac 	bl	8004756 <memmove>
 80041fe:	68a3      	ldr	r3, [r4, #8]
 8004200:	2000      	movs	r0, #0
 8004202:	1b9b      	subs	r3, r3, r6
 8004204:	60a3      	str	r3, [r4, #8]
 8004206:	6823      	ldr	r3, [r4, #0]
 8004208:	441e      	add	r6, r3
 800420a:	6026      	str	r6, [r4, #0]
 800420c:	e7dc      	b.n	80041c8 <__ssputs_r+0x58>
 800420e:	462a      	mov	r2, r5
 8004210:	f000 fb60 	bl	80048d4 <_realloc_r>
 8004214:	4606      	mov	r6, r0
 8004216:	2800      	cmp	r0, #0
 8004218:	d1e2      	bne.n	80041e0 <__ssputs_r+0x70>
 800421a:	6921      	ldr	r1, [r4, #16]
 800421c:	4650      	mov	r0, sl
 800421e:	f000 fab3 	bl	8004788 <_free_r>
 8004222:	e7c8      	b.n	80041b6 <__ssputs_r+0x46>

08004224 <_svfiprintf_r>:
 8004224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004228:	461d      	mov	r5, r3
 800422a:	898b      	ldrh	r3, [r1, #12]
 800422c:	b09d      	sub	sp, #116	; 0x74
 800422e:	061f      	lsls	r7, r3, #24
 8004230:	4680      	mov	r8, r0
 8004232:	460c      	mov	r4, r1
 8004234:	4616      	mov	r6, r2
 8004236:	d50f      	bpl.n	8004258 <_svfiprintf_r+0x34>
 8004238:	690b      	ldr	r3, [r1, #16]
 800423a:	b96b      	cbnz	r3, 8004258 <_svfiprintf_r+0x34>
 800423c:	2140      	movs	r1, #64	; 0x40
 800423e:	f000 faef 	bl	8004820 <_malloc_r>
 8004242:	6020      	str	r0, [r4, #0]
 8004244:	6120      	str	r0, [r4, #16]
 8004246:	b928      	cbnz	r0, 8004254 <_svfiprintf_r+0x30>
 8004248:	230c      	movs	r3, #12
 800424a:	f8c8 3000 	str.w	r3, [r8]
 800424e:	f04f 30ff 	mov.w	r0, #4294967295
 8004252:	e0c8      	b.n	80043e6 <_svfiprintf_r+0x1c2>
 8004254:	2340      	movs	r3, #64	; 0x40
 8004256:	6163      	str	r3, [r4, #20]
 8004258:	2300      	movs	r3, #0
 800425a:	9309      	str	r3, [sp, #36]	; 0x24
 800425c:	2320      	movs	r3, #32
 800425e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004262:	2330      	movs	r3, #48	; 0x30
 8004264:	f04f 0b01 	mov.w	fp, #1
 8004268:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800426c:	9503      	str	r5, [sp, #12]
 800426e:	4637      	mov	r7, r6
 8004270:	463d      	mov	r5, r7
 8004272:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004276:	b10b      	cbz	r3, 800427c <_svfiprintf_r+0x58>
 8004278:	2b25      	cmp	r3, #37	; 0x25
 800427a:	d13e      	bne.n	80042fa <_svfiprintf_r+0xd6>
 800427c:	ebb7 0a06 	subs.w	sl, r7, r6
 8004280:	d00b      	beq.n	800429a <_svfiprintf_r+0x76>
 8004282:	4653      	mov	r3, sl
 8004284:	4632      	mov	r2, r6
 8004286:	4621      	mov	r1, r4
 8004288:	4640      	mov	r0, r8
 800428a:	f7ff ff71 	bl	8004170 <__ssputs_r>
 800428e:	3001      	adds	r0, #1
 8004290:	f000 80a4 	beq.w	80043dc <_svfiprintf_r+0x1b8>
 8004294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004296:	4453      	add	r3, sl
 8004298:	9309      	str	r3, [sp, #36]	; 0x24
 800429a:	783b      	ldrb	r3, [r7, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 809d 	beq.w	80043dc <_svfiprintf_r+0x1b8>
 80042a2:	2300      	movs	r3, #0
 80042a4:	f04f 32ff 	mov.w	r2, #4294967295
 80042a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042ac:	9304      	str	r3, [sp, #16]
 80042ae:	9307      	str	r3, [sp, #28]
 80042b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80042b4:	931a      	str	r3, [sp, #104]	; 0x68
 80042b6:	462f      	mov	r7, r5
 80042b8:	2205      	movs	r2, #5
 80042ba:	f817 1b01 	ldrb.w	r1, [r7], #1
 80042be:	4850      	ldr	r0, [pc, #320]	; (8004400 <_svfiprintf_r+0x1dc>)
 80042c0:	f000 fa30 	bl	8004724 <memchr>
 80042c4:	9b04      	ldr	r3, [sp, #16]
 80042c6:	b9d0      	cbnz	r0, 80042fe <_svfiprintf_r+0xda>
 80042c8:	06d9      	lsls	r1, r3, #27
 80042ca:	bf44      	itt	mi
 80042cc:	2220      	movmi	r2, #32
 80042ce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80042d2:	071a      	lsls	r2, r3, #28
 80042d4:	bf44      	itt	mi
 80042d6:	222b      	movmi	r2, #43	; 0x2b
 80042d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80042dc:	782a      	ldrb	r2, [r5, #0]
 80042de:	2a2a      	cmp	r2, #42	; 0x2a
 80042e0:	d015      	beq.n	800430e <_svfiprintf_r+0xea>
 80042e2:	462f      	mov	r7, r5
 80042e4:	2000      	movs	r0, #0
 80042e6:	250a      	movs	r5, #10
 80042e8:	9a07      	ldr	r2, [sp, #28]
 80042ea:	4639      	mov	r1, r7
 80042ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042f0:	3b30      	subs	r3, #48	; 0x30
 80042f2:	2b09      	cmp	r3, #9
 80042f4:	d94d      	bls.n	8004392 <_svfiprintf_r+0x16e>
 80042f6:	b1b8      	cbz	r0, 8004328 <_svfiprintf_r+0x104>
 80042f8:	e00f      	b.n	800431a <_svfiprintf_r+0xf6>
 80042fa:	462f      	mov	r7, r5
 80042fc:	e7b8      	b.n	8004270 <_svfiprintf_r+0x4c>
 80042fe:	4a40      	ldr	r2, [pc, #256]	; (8004400 <_svfiprintf_r+0x1dc>)
 8004300:	463d      	mov	r5, r7
 8004302:	1a80      	subs	r0, r0, r2
 8004304:	fa0b f000 	lsl.w	r0, fp, r0
 8004308:	4318      	orrs	r0, r3
 800430a:	9004      	str	r0, [sp, #16]
 800430c:	e7d3      	b.n	80042b6 <_svfiprintf_r+0x92>
 800430e:	9a03      	ldr	r2, [sp, #12]
 8004310:	1d11      	adds	r1, r2, #4
 8004312:	6812      	ldr	r2, [r2, #0]
 8004314:	9103      	str	r1, [sp, #12]
 8004316:	2a00      	cmp	r2, #0
 8004318:	db01      	blt.n	800431e <_svfiprintf_r+0xfa>
 800431a:	9207      	str	r2, [sp, #28]
 800431c:	e004      	b.n	8004328 <_svfiprintf_r+0x104>
 800431e:	4252      	negs	r2, r2
 8004320:	f043 0302 	orr.w	r3, r3, #2
 8004324:	9207      	str	r2, [sp, #28]
 8004326:	9304      	str	r3, [sp, #16]
 8004328:	783b      	ldrb	r3, [r7, #0]
 800432a:	2b2e      	cmp	r3, #46	; 0x2e
 800432c:	d10c      	bne.n	8004348 <_svfiprintf_r+0x124>
 800432e:	787b      	ldrb	r3, [r7, #1]
 8004330:	2b2a      	cmp	r3, #42	; 0x2a
 8004332:	d133      	bne.n	800439c <_svfiprintf_r+0x178>
 8004334:	9b03      	ldr	r3, [sp, #12]
 8004336:	3702      	adds	r7, #2
 8004338:	1d1a      	adds	r2, r3, #4
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	9203      	str	r2, [sp, #12]
 800433e:	2b00      	cmp	r3, #0
 8004340:	bfb8      	it	lt
 8004342:	f04f 33ff 	movlt.w	r3, #4294967295
 8004346:	9305      	str	r3, [sp, #20]
 8004348:	4d2e      	ldr	r5, [pc, #184]	; (8004404 <_svfiprintf_r+0x1e0>)
 800434a:	2203      	movs	r2, #3
 800434c:	7839      	ldrb	r1, [r7, #0]
 800434e:	4628      	mov	r0, r5
 8004350:	f000 f9e8 	bl	8004724 <memchr>
 8004354:	b138      	cbz	r0, 8004366 <_svfiprintf_r+0x142>
 8004356:	2340      	movs	r3, #64	; 0x40
 8004358:	1b40      	subs	r0, r0, r5
 800435a:	fa03 f000 	lsl.w	r0, r3, r0
 800435e:	9b04      	ldr	r3, [sp, #16]
 8004360:	3701      	adds	r7, #1
 8004362:	4303      	orrs	r3, r0
 8004364:	9304      	str	r3, [sp, #16]
 8004366:	7839      	ldrb	r1, [r7, #0]
 8004368:	2206      	movs	r2, #6
 800436a:	4827      	ldr	r0, [pc, #156]	; (8004408 <_svfiprintf_r+0x1e4>)
 800436c:	1c7e      	adds	r6, r7, #1
 800436e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004372:	f000 f9d7 	bl	8004724 <memchr>
 8004376:	2800      	cmp	r0, #0
 8004378:	d038      	beq.n	80043ec <_svfiprintf_r+0x1c8>
 800437a:	4b24      	ldr	r3, [pc, #144]	; (800440c <_svfiprintf_r+0x1e8>)
 800437c:	bb13      	cbnz	r3, 80043c4 <_svfiprintf_r+0x1a0>
 800437e:	9b03      	ldr	r3, [sp, #12]
 8004380:	3307      	adds	r3, #7
 8004382:	f023 0307 	bic.w	r3, r3, #7
 8004386:	3308      	adds	r3, #8
 8004388:	9303      	str	r3, [sp, #12]
 800438a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800438c:	444b      	add	r3, r9
 800438e:	9309      	str	r3, [sp, #36]	; 0x24
 8004390:	e76d      	b.n	800426e <_svfiprintf_r+0x4a>
 8004392:	fb05 3202 	mla	r2, r5, r2, r3
 8004396:	2001      	movs	r0, #1
 8004398:	460f      	mov	r7, r1
 800439a:	e7a6      	b.n	80042ea <_svfiprintf_r+0xc6>
 800439c:	2300      	movs	r3, #0
 800439e:	250a      	movs	r5, #10
 80043a0:	4619      	mov	r1, r3
 80043a2:	3701      	adds	r7, #1
 80043a4:	9305      	str	r3, [sp, #20]
 80043a6:	4638      	mov	r0, r7
 80043a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043ac:	3a30      	subs	r2, #48	; 0x30
 80043ae:	2a09      	cmp	r2, #9
 80043b0:	d903      	bls.n	80043ba <_svfiprintf_r+0x196>
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d0c8      	beq.n	8004348 <_svfiprintf_r+0x124>
 80043b6:	9105      	str	r1, [sp, #20]
 80043b8:	e7c6      	b.n	8004348 <_svfiprintf_r+0x124>
 80043ba:	fb05 2101 	mla	r1, r5, r1, r2
 80043be:	2301      	movs	r3, #1
 80043c0:	4607      	mov	r7, r0
 80043c2:	e7f0      	b.n	80043a6 <_svfiprintf_r+0x182>
 80043c4:	ab03      	add	r3, sp, #12
 80043c6:	9300      	str	r3, [sp, #0]
 80043c8:	4622      	mov	r2, r4
 80043ca:	4b11      	ldr	r3, [pc, #68]	; (8004410 <_svfiprintf_r+0x1ec>)
 80043cc:	a904      	add	r1, sp, #16
 80043ce:	4640      	mov	r0, r8
 80043d0:	f3af 8000 	nop.w
 80043d4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80043d8:	4681      	mov	r9, r0
 80043da:	d1d6      	bne.n	800438a <_svfiprintf_r+0x166>
 80043dc:	89a3      	ldrh	r3, [r4, #12]
 80043de:	065b      	lsls	r3, r3, #25
 80043e0:	f53f af35 	bmi.w	800424e <_svfiprintf_r+0x2a>
 80043e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80043e6:	b01d      	add	sp, #116	; 0x74
 80043e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043ec:	ab03      	add	r3, sp, #12
 80043ee:	9300      	str	r3, [sp, #0]
 80043f0:	4622      	mov	r2, r4
 80043f2:	4b07      	ldr	r3, [pc, #28]	; (8004410 <_svfiprintf_r+0x1ec>)
 80043f4:	a904      	add	r1, sp, #16
 80043f6:	4640      	mov	r0, r8
 80043f8:	f000 f882 	bl	8004500 <_printf_i>
 80043fc:	e7ea      	b.n	80043d4 <_svfiprintf_r+0x1b0>
 80043fe:	bf00      	nop
 8004400:	080049bc 	.word	0x080049bc
 8004404:	080049c2 	.word	0x080049c2
 8004408:	080049c6 	.word	0x080049c6
 800440c:	00000000 	.word	0x00000000
 8004410:	08004171 	.word	0x08004171

08004414 <_printf_common>:
 8004414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004418:	4691      	mov	r9, r2
 800441a:	461f      	mov	r7, r3
 800441c:	688a      	ldr	r2, [r1, #8]
 800441e:	690b      	ldr	r3, [r1, #16]
 8004420:	4606      	mov	r6, r0
 8004422:	4293      	cmp	r3, r2
 8004424:	bfb8      	it	lt
 8004426:	4613      	movlt	r3, r2
 8004428:	f8c9 3000 	str.w	r3, [r9]
 800442c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004430:	460c      	mov	r4, r1
 8004432:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004436:	b112      	cbz	r2, 800443e <_printf_common+0x2a>
 8004438:	3301      	adds	r3, #1
 800443a:	f8c9 3000 	str.w	r3, [r9]
 800443e:	6823      	ldr	r3, [r4, #0]
 8004440:	0699      	lsls	r1, r3, #26
 8004442:	bf42      	ittt	mi
 8004444:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004448:	3302      	addmi	r3, #2
 800444a:	f8c9 3000 	strmi.w	r3, [r9]
 800444e:	6825      	ldr	r5, [r4, #0]
 8004450:	f015 0506 	ands.w	r5, r5, #6
 8004454:	d107      	bne.n	8004466 <_printf_common+0x52>
 8004456:	f104 0a19 	add.w	sl, r4, #25
 800445a:	68e3      	ldr	r3, [r4, #12]
 800445c:	f8d9 2000 	ldr.w	r2, [r9]
 8004460:	1a9b      	subs	r3, r3, r2
 8004462:	42ab      	cmp	r3, r5
 8004464:	dc29      	bgt.n	80044ba <_printf_common+0xa6>
 8004466:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800446a:	6822      	ldr	r2, [r4, #0]
 800446c:	3300      	adds	r3, #0
 800446e:	bf18      	it	ne
 8004470:	2301      	movne	r3, #1
 8004472:	0692      	lsls	r2, r2, #26
 8004474:	d42e      	bmi.n	80044d4 <_printf_common+0xc0>
 8004476:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800447a:	4639      	mov	r1, r7
 800447c:	4630      	mov	r0, r6
 800447e:	47c0      	blx	r8
 8004480:	3001      	adds	r0, #1
 8004482:	d021      	beq.n	80044c8 <_printf_common+0xb4>
 8004484:	6823      	ldr	r3, [r4, #0]
 8004486:	68e5      	ldr	r5, [r4, #12]
 8004488:	f003 0306 	and.w	r3, r3, #6
 800448c:	2b04      	cmp	r3, #4
 800448e:	bf18      	it	ne
 8004490:	2500      	movne	r5, #0
 8004492:	f8d9 2000 	ldr.w	r2, [r9]
 8004496:	f04f 0900 	mov.w	r9, #0
 800449a:	bf08      	it	eq
 800449c:	1aad      	subeq	r5, r5, r2
 800449e:	68a3      	ldr	r3, [r4, #8]
 80044a0:	6922      	ldr	r2, [r4, #16]
 80044a2:	bf08      	it	eq
 80044a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044a8:	4293      	cmp	r3, r2
 80044aa:	bfc4      	itt	gt
 80044ac:	1a9b      	subgt	r3, r3, r2
 80044ae:	18ed      	addgt	r5, r5, r3
 80044b0:	341a      	adds	r4, #26
 80044b2:	454d      	cmp	r5, r9
 80044b4:	d11a      	bne.n	80044ec <_printf_common+0xd8>
 80044b6:	2000      	movs	r0, #0
 80044b8:	e008      	b.n	80044cc <_printf_common+0xb8>
 80044ba:	2301      	movs	r3, #1
 80044bc:	4652      	mov	r2, sl
 80044be:	4639      	mov	r1, r7
 80044c0:	4630      	mov	r0, r6
 80044c2:	47c0      	blx	r8
 80044c4:	3001      	adds	r0, #1
 80044c6:	d103      	bne.n	80044d0 <_printf_common+0xbc>
 80044c8:	f04f 30ff 	mov.w	r0, #4294967295
 80044cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044d0:	3501      	adds	r5, #1
 80044d2:	e7c2      	b.n	800445a <_printf_common+0x46>
 80044d4:	2030      	movs	r0, #48	; 0x30
 80044d6:	18e1      	adds	r1, r4, r3
 80044d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044dc:	1c5a      	adds	r2, r3, #1
 80044de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044e2:	4422      	add	r2, r4
 80044e4:	3302      	adds	r3, #2
 80044e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044ea:	e7c4      	b.n	8004476 <_printf_common+0x62>
 80044ec:	2301      	movs	r3, #1
 80044ee:	4622      	mov	r2, r4
 80044f0:	4639      	mov	r1, r7
 80044f2:	4630      	mov	r0, r6
 80044f4:	47c0      	blx	r8
 80044f6:	3001      	adds	r0, #1
 80044f8:	d0e6      	beq.n	80044c8 <_printf_common+0xb4>
 80044fa:	f109 0901 	add.w	r9, r9, #1
 80044fe:	e7d8      	b.n	80044b2 <_printf_common+0x9e>

08004500 <_printf_i>:
 8004500:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004504:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004508:	460c      	mov	r4, r1
 800450a:	7e09      	ldrb	r1, [r1, #24]
 800450c:	b085      	sub	sp, #20
 800450e:	296e      	cmp	r1, #110	; 0x6e
 8004510:	4617      	mov	r7, r2
 8004512:	4606      	mov	r6, r0
 8004514:	4698      	mov	r8, r3
 8004516:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004518:	f000 80b3 	beq.w	8004682 <_printf_i+0x182>
 800451c:	d822      	bhi.n	8004564 <_printf_i+0x64>
 800451e:	2963      	cmp	r1, #99	; 0x63
 8004520:	d036      	beq.n	8004590 <_printf_i+0x90>
 8004522:	d80a      	bhi.n	800453a <_printf_i+0x3a>
 8004524:	2900      	cmp	r1, #0
 8004526:	f000 80b9 	beq.w	800469c <_printf_i+0x19c>
 800452a:	2958      	cmp	r1, #88	; 0x58
 800452c:	f000 8083 	beq.w	8004636 <_printf_i+0x136>
 8004530:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004534:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004538:	e032      	b.n	80045a0 <_printf_i+0xa0>
 800453a:	2964      	cmp	r1, #100	; 0x64
 800453c:	d001      	beq.n	8004542 <_printf_i+0x42>
 800453e:	2969      	cmp	r1, #105	; 0x69
 8004540:	d1f6      	bne.n	8004530 <_printf_i+0x30>
 8004542:	6820      	ldr	r0, [r4, #0]
 8004544:	6813      	ldr	r3, [r2, #0]
 8004546:	0605      	lsls	r5, r0, #24
 8004548:	f103 0104 	add.w	r1, r3, #4
 800454c:	d52a      	bpl.n	80045a4 <_printf_i+0xa4>
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	6011      	str	r1, [r2, #0]
 8004552:	2b00      	cmp	r3, #0
 8004554:	da03      	bge.n	800455e <_printf_i+0x5e>
 8004556:	222d      	movs	r2, #45	; 0x2d
 8004558:	425b      	negs	r3, r3
 800455a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800455e:	486f      	ldr	r0, [pc, #444]	; (800471c <_printf_i+0x21c>)
 8004560:	220a      	movs	r2, #10
 8004562:	e039      	b.n	80045d8 <_printf_i+0xd8>
 8004564:	2973      	cmp	r1, #115	; 0x73
 8004566:	f000 809d 	beq.w	80046a4 <_printf_i+0x1a4>
 800456a:	d808      	bhi.n	800457e <_printf_i+0x7e>
 800456c:	296f      	cmp	r1, #111	; 0x6f
 800456e:	d020      	beq.n	80045b2 <_printf_i+0xb2>
 8004570:	2970      	cmp	r1, #112	; 0x70
 8004572:	d1dd      	bne.n	8004530 <_printf_i+0x30>
 8004574:	6823      	ldr	r3, [r4, #0]
 8004576:	f043 0320 	orr.w	r3, r3, #32
 800457a:	6023      	str	r3, [r4, #0]
 800457c:	e003      	b.n	8004586 <_printf_i+0x86>
 800457e:	2975      	cmp	r1, #117	; 0x75
 8004580:	d017      	beq.n	80045b2 <_printf_i+0xb2>
 8004582:	2978      	cmp	r1, #120	; 0x78
 8004584:	d1d4      	bne.n	8004530 <_printf_i+0x30>
 8004586:	2378      	movs	r3, #120	; 0x78
 8004588:	4865      	ldr	r0, [pc, #404]	; (8004720 <_printf_i+0x220>)
 800458a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800458e:	e055      	b.n	800463c <_printf_i+0x13c>
 8004590:	6813      	ldr	r3, [r2, #0]
 8004592:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004596:	1d19      	adds	r1, r3, #4
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	6011      	str	r1, [r2, #0]
 800459c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045a0:	2301      	movs	r3, #1
 80045a2:	e08c      	b.n	80046be <_printf_i+0x1be>
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80045aa:	6011      	str	r1, [r2, #0]
 80045ac:	bf18      	it	ne
 80045ae:	b21b      	sxthne	r3, r3
 80045b0:	e7cf      	b.n	8004552 <_printf_i+0x52>
 80045b2:	6813      	ldr	r3, [r2, #0]
 80045b4:	6825      	ldr	r5, [r4, #0]
 80045b6:	1d18      	adds	r0, r3, #4
 80045b8:	6010      	str	r0, [r2, #0]
 80045ba:	0628      	lsls	r0, r5, #24
 80045bc:	d501      	bpl.n	80045c2 <_printf_i+0xc2>
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	e002      	b.n	80045c8 <_printf_i+0xc8>
 80045c2:	0668      	lsls	r0, r5, #25
 80045c4:	d5fb      	bpl.n	80045be <_printf_i+0xbe>
 80045c6:	881b      	ldrh	r3, [r3, #0]
 80045c8:	296f      	cmp	r1, #111	; 0x6f
 80045ca:	bf14      	ite	ne
 80045cc:	220a      	movne	r2, #10
 80045ce:	2208      	moveq	r2, #8
 80045d0:	4852      	ldr	r0, [pc, #328]	; (800471c <_printf_i+0x21c>)
 80045d2:	2100      	movs	r1, #0
 80045d4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80045d8:	6865      	ldr	r5, [r4, #4]
 80045da:	2d00      	cmp	r5, #0
 80045dc:	60a5      	str	r5, [r4, #8]
 80045de:	f2c0 8095 	blt.w	800470c <_printf_i+0x20c>
 80045e2:	6821      	ldr	r1, [r4, #0]
 80045e4:	f021 0104 	bic.w	r1, r1, #4
 80045e8:	6021      	str	r1, [r4, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d13d      	bne.n	800466a <_printf_i+0x16a>
 80045ee:	2d00      	cmp	r5, #0
 80045f0:	f040 808e 	bne.w	8004710 <_printf_i+0x210>
 80045f4:	4665      	mov	r5, ip
 80045f6:	2a08      	cmp	r2, #8
 80045f8:	d10b      	bne.n	8004612 <_printf_i+0x112>
 80045fa:	6823      	ldr	r3, [r4, #0]
 80045fc:	07db      	lsls	r3, r3, #31
 80045fe:	d508      	bpl.n	8004612 <_printf_i+0x112>
 8004600:	6923      	ldr	r3, [r4, #16]
 8004602:	6862      	ldr	r2, [r4, #4]
 8004604:	429a      	cmp	r2, r3
 8004606:	bfde      	ittt	le
 8004608:	2330      	movle	r3, #48	; 0x30
 800460a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800460e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004612:	ebac 0305 	sub.w	r3, ip, r5
 8004616:	6123      	str	r3, [r4, #16]
 8004618:	f8cd 8000 	str.w	r8, [sp]
 800461c:	463b      	mov	r3, r7
 800461e:	aa03      	add	r2, sp, #12
 8004620:	4621      	mov	r1, r4
 8004622:	4630      	mov	r0, r6
 8004624:	f7ff fef6 	bl	8004414 <_printf_common>
 8004628:	3001      	adds	r0, #1
 800462a:	d14d      	bne.n	80046c8 <_printf_i+0x1c8>
 800462c:	f04f 30ff 	mov.w	r0, #4294967295
 8004630:	b005      	add	sp, #20
 8004632:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004636:	4839      	ldr	r0, [pc, #228]	; (800471c <_printf_i+0x21c>)
 8004638:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800463c:	6813      	ldr	r3, [r2, #0]
 800463e:	6821      	ldr	r1, [r4, #0]
 8004640:	1d1d      	adds	r5, r3, #4
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	6015      	str	r5, [r2, #0]
 8004646:	060a      	lsls	r2, r1, #24
 8004648:	d50b      	bpl.n	8004662 <_printf_i+0x162>
 800464a:	07ca      	lsls	r2, r1, #31
 800464c:	bf44      	itt	mi
 800464e:	f041 0120 	orrmi.w	r1, r1, #32
 8004652:	6021      	strmi	r1, [r4, #0]
 8004654:	b91b      	cbnz	r3, 800465e <_printf_i+0x15e>
 8004656:	6822      	ldr	r2, [r4, #0]
 8004658:	f022 0220 	bic.w	r2, r2, #32
 800465c:	6022      	str	r2, [r4, #0]
 800465e:	2210      	movs	r2, #16
 8004660:	e7b7      	b.n	80045d2 <_printf_i+0xd2>
 8004662:	064d      	lsls	r5, r1, #25
 8004664:	bf48      	it	mi
 8004666:	b29b      	uxthmi	r3, r3
 8004668:	e7ef      	b.n	800464a <_printf_i+0x14a>
 800466a:	4665      	mov	r5, ip
 800466c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004670:	fb02 3311 	mls	r3, r2, r1, r3
 8004674:	5cc3      	ldrb	r3, [r0, r3]
 8004676:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800467a:	460b      	mov	r3, r1
 800467c:	2900      	cmp	r1, #0
 800467e:	d1f5      	bne.n	800466c <_printf_i+0x16c>
 8004680:	e7b9      	b.n	80045f6 <_printf_i+0xf6>
 8004682:	6813      	ldr	r3, [r2, #0]
 8004684:	6825      	ldr	r5, [r4, #0]
 8004686:	1d18      	adds	r0, r3, #4
 8004688:	6961      	ldr	r1, [r4, #20]
 800468a:	6010      	str	r0, [r2, #0]
 800468c:	0628      	lsls	r0, r5, #24
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	d501      	bpl.n	8004696 <_printf_i+0x196>
 8004692:	6019      	str	r1, [r3, #0]
 8004694:	e002      	b.n	800469c <_printf_i+0x19c>
 8004696:	066a      	lsls	r2, r5, #25
 8004698:	d5fb      	bpl.n	8004692 <_printf_i+0x192>
 800469a:	8019      	strh	r1, [r3, #0]
 800469c:	2300      	movs	r3, #0
 800469e:	4665      	mov	r5, ip
 80046a0:	6123      	str	r3, [r4, #16]
 80046a2:	e7b9      	b.n	8004618 <_printf_i+0x118>
 80046a4:	6813      	ldr	r3, [r2, #0]
 80046a6:	1d19      	adds	r1, r3, #4
 80046a8:	6011      	str	r1, [r2, #0]
 80046aa:	681d      	ldr	r5, [r3, #0]
 80046ac:	6862      	ldr	r2, [r4, #4]
 80046ae:	2100      	movs	r1, #0
 80046b0:	4628      	mov	r0, r5
 80046b2:	f000 f837 	bl	8004724 <memchr>
 80046b6:	b108      	cbz	r0, 80046bc <_printf_i+0x1bc>
 80046b8:	1b40      	subs	r0, r0, r5
 80046ba:	6060      	str	r0, [r4, #4]
 80046bc:	6863      	ldr	r3, [r4, #4]
 80046be:	6123      	str	r3, [r4, #16]
 80046c0:	2300      	movs	r3, #0
 80046c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046c6:	e7a7      	b.n	8004618 <_printf_i+0x118>
 80046c8:	6923      	ldr	r3, [r4, #16]
 80046ca:	462a      	mov	r2, r5
 80046cc:	4639      	mov	r1, r7
 80046ce:	4630      	mov	r0, r6
 80046d0:	47c0      	blx	r8
 80046d2:	3001      	adds	r0, #1
 80046d4:	d0aa      	beq.n	800462c <_printf_i+0x12c>
 80046d6:	6823      	ldr	r3, [r4, #0]
 80046d8:	079b      	lsls	r3, r3, #30
 80046da:	d413      	bmi.n	8004704 <_printf_i+0x204>
 80046dc:	68e0      	ldr	r0, [r4, #12]
 80046de:	9b03      	ldr	r3, [sp, #12]
 80046e0:	4298      	cmp	r0, r3
 80046e2:	bfb8      	it	lt
 80046e4:	4618      	movlt	r0, r3
 80046e6:	e7a3      	b.n	8004630 <_printf_i+0x130>
 80046e8:	2301      	movs	r3, #1
 80046ea:	464a      	mov	r2, r9
 80046ec:	4639      	mov	r1, r7
 80046ee:	4630      	mov	r0, r6
 80046f0:	47c0      	blx	r8
 80046f2:	3001      	adds	r0, #1
 80046f4:	d09a      	beq.n	800462c <_printf_i+0x12c>
 80046f6:	3501      	adds	r5, #1
 80046f8:	68e3      	ldr	r3, [r4, #12]
 80046fa:	9a03      	ldr	r2, [sp, #12]
 80046fc:	1a9b      	subs	r3, r3, r2
 80046fe:	42ab      	cmp	r3, r5
 8004700:	dcf2      	bgt.n	80046e8 <_printf_i+0x1e8>
 8004702:	e7eb      	b.n	80046dc <_printf_i+0x1dc>
 8004704:	2500      	movs	r5, #0
 8004706:	f104 0919 	add.w	r9, r4, #25
 800470a:	e7f5      	b.n	80046f8 <_printf_i+0x1f8>
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1ac      	bne.n	800466a <_printf_i+0x16a>
 8004710:	7803      	ldrb	r3, [r0, #0]
 8004712:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004716:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800471a:	e76c      	b.n	80045f6 <_printf_i+0xf6>
 800471c:	080049cd 	.word	0x080049cd
 8004720:	080049de 	.word	0x080049de

08004724 <memchr>:
 8004724:	b510      	push	{r4, lr}
 8004726:	b2c9      	uxtb	r1, r1
 8004728:	4402      	add	r2, r0
 800472a:	4290      	cmp	r0, r2
 800472c:	4603      	mov	r3, r0
 800472e:	d101      	bne.n	8004734 <memchr+0x10>
 8004730:	2300      	movs	r3, #0
 8004732:	e003      	b.n	800473c <memchr+0x18>
 8004734:	781c      	ldrb	r4, [r3, #0]
 8004736:	3001      	adds	r0, #1
 8004738:	428c      	cmp	r4, r1
 800473a:	d1f6      	bne.n	800472a <memchr+0x6>
 800473c:	4618      	mov	r0, r3
 800473e:	bd10      	pop	{r4, pc}

08004740 <memcpy>:
 8004740:	b510      	push	{r4, lr}
 8004742:	1e43      	subs	r3, r0, #1
 8004744:	440a      	add	r2, r1
 8004746:	4291      	cmp	r1, r2
 8004748:	d100      	bne.n	800474c <memcpy+0xc>
 800474a:	bd10      	pop	{r4, pc}
 800474c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004750:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004754:	e7f7      	b.n	8004746 <memcpy+0x6>

08004756 <memmove>:
 8004756:	4288      	cmp	r0, r1
 8004758:	b510      	push	{r4, lr}
 800475a:	eb01 0302 	add.w	r3, r1, r2
 800475e:	d807      	bhi.n	8004770 <memmove+0x1a>
 8004760:	1e42      	subs	r2, r0, #1
 8004762:	4299      	cmp	r1, r3
 8004764:	d00a      	beq.n	800477c <memmove+0x26>
 8004766:	f811 4b01 	ldrb.w	r4, [r1], #1
 800476a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800476e:	e7f8      	b.n	8004762 <memmove+0xc>
 8004770:	4283      	cmp	r3, r0
 8004772:	d9f5      	bls.n	8004760 <memmove+0xa>
 8004774:	1881      	adds	r1, r0, r2
 8004776:	1ad2      	subs	r2, r2, r3
 8004778:	42d3      	cmn	r3, r2
 800477a:	d100      	bne.n	800477e <memmove+0x28>
 800477c:	bd10      	pop	{r4, pc}
 800477e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004782:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004786:	e7f7      	b.n	8004778 <memmove+0x22>

08004788 <_free_r>:
 8004788:	b538      	push	{r3, r4, r5, lr}
 800478a:	4605      	mov	r5, r0
 800478c:	2900      	cmp	r1, #0
 800478e:	d043      	beq.n	8004818 <_free_r+0x90>
 8004790:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004794:	1f0c      	subs	r4, r1, #4
 8004796:	2b00      	cmp	r3, #0
 8004798:	bfb8      	it	lt
 800479a:	18e4      	addlt	r4, r4, r3
 800479c:	f000 f8d0 	bl	8004940 <__malloc_lock>
 80047a0:	4a1e      	ldr	r2, [pc, #120]	; (800481c <_free_r+0x94>)
 80047a2:	6813      	ldr	r3, [r2, #0]
 80047a4:	4610      	mov	r0, r2
 80047a6:	b933      	cbnz	r3, 80047b6 <_free_r+0x2e>
 80047a8:	6063      	str	r3, [r4, #4]
 80047aa:	6014      	str	r4, [r2, #0]
 80047ac:	4628      	mov	r0, r5
 80047ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047b2:	f000 b8c6 	b.w	8004942 <__malloc_unlock>
 80047b6:	42a3      	cmp	r3, r4
 80047b8:	d90b      	bls.n	80047d2 <_free_r+0x4a>
 80047ba:	6821      	ldr	r1, [r4, #0]
 80047bc:	1862      	adds	r2, r4, r1
 80047be:	4293      	cmp	r3, r2
 80047c0:	bf01      	itttt	eq
 80047c2:	681a      	ldreq	r2, [r3, #0]
 80047c4:	685b      	ldreq	r3, [r3, #4]
 80047c6:	1852      	addeq	r2, r2, r1
 80047c8:	6022      	streq	r2, [r4, #0]
 80047ca:	6063      	str	r3, [r4, #4]
 80047cc:	6004      	str	r4, [r0, #0]
 80047ce:	e7ed      	b.n	80047ac <_free_r+0x24>
 80047d0:	4613      	mov	r3, r2
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	b10a      	cbz	r2, 80047da <_free_r+0x52>
 80047d6:	42a2      	cmp	r2, r4
 80047d8:	d9fa      	bls.n	80047d0 <_free_r+0x48>
 80047da:	6819      	ldr	r1, [r3, #0]
 80047dc:	1858      	adds	r0, r3, r1
 80047de:	42a0      	cmp	r0, r4
 80047e0:	d10b      	bne.n	80047fa <_free_r+0x72>
 80047e2:	6820      	ldr	r0, [r4, #0]
 80047e4:	4401      	add	r1, r0
 80047e6:	1858      	adds	r0, r3, r1
 80047e8:	4282      	cmp	r2, r0
 80047ea:	6019      	str	r1, [r3, #0]
 80047ec:	d1de      	bne.n	80047ac <_free_r+0x24>
 80047ee:	6810      	ldr	r0, [r2, #0]
 80047f0:	6852      	ldr	r2, [r2, #4]
 80047f2:	4401      	add	r1, r0
 80047f4:	6019      	str	r1, [r3, #0]
 80047f6:	605a      	str	r2, [r3, #4]
 80047f8:	e7d8      	b.n	80047ac <_free_r+0x24>
 80047fa:	d902      	bls.n	8004802 <_free_r+0x7a>
 80047fc:	230c      	movs	r3, #12
 80047fe:	602b      	str	r3, [r5, #0]
 8004800:	e7d4      	b.n	80047ac <_free_r+0x24>
 8004802:	6820      	ldr	r0, [r4, #0]
 8004804:	1821      	adds	r1, r4, r0
 8004806:	428a      	cmp	r2, r1
 8004808:	bf01      	itttt	eq
 800480a:	6811      	ldreq	r1, [r2, #0]
 800480c:	6852      	ldreq	r2, [r2, #4]
 800480e:	1809      	addeq	r1, r1, r0
 8004810:	6021      	streq	r1, [r4, #0]
 8004812:	6062      	str	r2, [r4, #4]
 8004814:	605c      	str	r4, [r3, #4]
 8004816:	e7c9      	b.n	80047ac <_free_r+0x24>
 8004818:	bd38      	pop	{r3, r4, r5, pc}
 800481a:	bf00      	nop
 800481c:	20000094 	.word	0x20000094

08004820 <_malloc_r>:
 8004820:	b570      	push	{r4, r5, r6, lr}
 8004822:	1ccd      	adds	r5, r1, #3
 8004824:	f025 0503 	bic.w	r5, r5, #3
 8004828:	3508      	adds	r5, #8
 800482a:	2d0c      	cmp	r5, #12
 800482c:	bf38      	it	cc
 800482e:	250c      	movcc	r5, #12
 8004830:	2d00      	cmp	r5, #0
 8004832:	4606      	mov	r6, r0
 8004834:	db01      	blt.n	800483a <_malloc_r+0x1a>
 8004836:	42a9      	cmp	r1, r5
 8004838:	d903      	bls.n	8004842 <_malloc_r+0x22>
 800483a:	230c      	movs	r3, #12
 800483c:	6033      	str	r3, [r6, #0]
 800483e:	2000      	movs	r0, #0
 8004840:	bd70      	pop	{r4, r5, r6, pc}
 8004842:	f000 f87d 	bl	8004940 <__malloc_lock>
 8004846:	4a21      	ldr	r2, [pc, #132]	; (80048cc <_malloc_r+0xac>)
 8004848:	6814      	ldr	r4, [r2, #0]
 800484a:	4621      	mov	r1, r4
 800484c:	b991      	cbnz	r1, 8004874 <_malloc_r+0x54>
 800484e:	4c20      	ldr	r4, [pc, #128]	; (80048d0 <_malloc_r+0xb0>)
 8004850:	6823      	ldr	r3, [r4, #0]
 8004852:	b91b      	cbnz	r3, 800485c <_malloc_r+0x3c>
 8004854:	4630      	mov	r0, r6
 8004856:	f000 f863 	bl	8004920 <_sbrk_r>
 800485a:	6020      	str	r0, [r4, #0]
 800485c:	4629      	mov	r1, r5
 800485e:	4630      	mov	r0, r6
 8004860:	f000 f85e 	bl	8004920 <_sbrk_r>
 8004864:	1c43      	adds	r3, r0, #1
 8004866:	d124      	bne.n	80048b2 <_malloc_r+0x92>
 8004868:	230c      	movs	r3, #12
 800486a:	4630      	mov	r0, r6
 800486c:	6033      	str	r3, [r6, #0]
 800486e:	f000 f868 	bl	8004942 <__malloc_unlock>
 8004872:	e7e4      	b.n	800483e <_malloc_r+0x1e>
 8004874:	680b      	ldr	r3, [r1, #0]
 8004876:	1b5b      	subs	r3, r3, r5
 8004878:	d418      	bmi.n	80048ac <_malloc_r+0x8c>
 800487a:	2b0b      	cmp	r3, #11
 800487c:	d90f      	bls.n	800489e <_malloc_r+0x7e>
 800487e:	600b      	str	r3, [r1, #0]
 8004880:	18cc      	adds	r4, r1, r3
 8004882:	50cd      	str	r5, [r1, r3]
 8004884:	4630      	mov	r0, r6
 8004886:	f000 f85c 	bl	8004942 <__malloc_unlock>
 800488a:	f104 000b 	add.w	r0, r4, #11
 800488e:	1d23      	adds	r3, r4, #4
 8004890:	f020 0007 	bic.w	r0, r0, #7
 8004894:	1ac3      	subs	r3, r0, r3
 8004896:	d0d3      	beq.n	8004840 <_malloc_r+0x20>
 8004898:	425a      	negs	r2, r3
 800489a:	50e2      	str	r2, [r4, r3]
 800489c:	e7d0      	b.n	8004840 <_malloc_r+0x20>
 800489e:	684b      	ldr	r3, [r1, #4]
 80048a0:	428c      	cmp	r4, r1
 80048a2:	bf16      	itet	ne
 80048a4:	6063      	strne	r3, [r4, #4]
 80048a6:	6013      	streq	r3, [r2, #0]
 80048a8:	460c      	movne	r4, r1
 80048aa:	e7eb      	b.n	8004884 <_malloc_r+0x64>
 80048ac:	460c      	mov	r4, r1
 80048ae:	6849      	ldr	r1, [r1, #4]
 80048b0:	e7cc      	b.n	800484c <_malloc_r+0x2c>
 80048b2:	1cc4      	adds	r4, r0, #3
 80048b4:	f024 0403 	bic.w	r4, r4, #3
 80048b8:	42a0      	cmp	r0, r4
 80048ba:	d005      	beq.n	80048c8 <_malloc_r+0xa8>
 80048bc:	1a21      	subs	r1, r4, r0
 80048be:	4630      	mov	r0, r6
 80048c0:	f000 f82e 	bl	8004920 <_sbrk_r>
 80048c4:	3001      	adds	r0, #1
 80048c6:	d0cf      	beq.n	8004868 <_malloc_r+0x48>
 80048c8:	6025      	str	r5, [r4, #0]
 80048ca:	e7db      	b.n	8004884 <_malloc_r+0x64>
 80048cc:	20000094 	.word	0x20000094
 80048d0:	20000098 	.word	0x20000098

080048d4 <_realloc_r>:
 80048d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048d6:	4607      	mov	r7, r0
 80048d8:	4614      	mov	r4, r2
 80048da:	460e      	mov	r6, r1
 80048dc:	b921      	cbnz	r1, 80048e8 <_realloc_r+0x14>
 80048de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80048e2:	4611      	mov	r1, r2
 80048e4:	f7ff bf9c 	b.w	8004820 <_malloc_r>
 80048e8:	b922      	cbnz	r2, 80048f4 <_realloc_r+0x20>
 80048ea:	f7ff ff4d 	bl	8004788 <_free_r>
 80048ee:	4625      	mov	r5, r4
 80048f0:	4628      	mov	r0, r5
 80048f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048f4:	f000 f826 	bl	8004944 <_malloc_usable_size_r>
 80048f8:	42a0      	cmp	r0, r4
 80048fa:	d20f      	bcs.n	800491c <_realloc_r+0x48>
 80048fc:	4621      	mov	r1, r4
 80048fe:	4638      	mov	r0, r7
 8004900:	f7ff ff8e 	bl	8004820 <_malloc_r>
 8004904:	4605      	mov	r5, r0
 8004906:	2800      	cmp	r0, #0
 8004908:	d0f2      	beq.n	80048f0 <_realloc_r+0x1c>
 800490a:	4631      	mov	r1, r6
 800490c:	4622      	mov	r2, r4
 800490e:	f7ff ff17 	bl	8004740 <memcpy>
 8004912:	4631      	mov	r1, r6
 8004914:	4638      	mov	r0, r7
 8004916:	f7ff ff37 	bl	8004788 <_free_r>
 800491a:	e7e9      	b.n	80048f0 <_realloc_r+0x1c>
 800491c:	4635      	mov	r5, r6
 800491e:	e7e7      	b.n	80048f0 <_realloc_r+0x1c>

08004920 <_sbrk_r>:
 8004920:	b538      	push	{r3, r4, r5, lr}
 8004922:	2300      	movs	r3, #0
 8004924:	4c05      	ldr	r4, [pc, #20]	; (800493c <_sbrk_r+0x1c>)
 8004926:	4605      	mov	r5, r0
 8004928:	4608      	mov	r0, r1
 800492a:	6023      	str	r3, [r4, #0]
 800492c:	f7fc fec6 	bl	80016bc <_sbrk>
 8004930:	1c43      	adds	r3, r0, #1
 8004932:	d102      	bne.n	800493a <_sbrk_r+0x1a>
 8004934:	6823      	ldr	r3, [r4, #0]
 8004936:	b103      	cbz	r3, 800493a <_sbrk_r+0x1a>
 8004938:	602b      	str	r3, [r5, #0]
 800493a:	bd38      	pop	{r3, r4, r5, pc}
 800493c:	2000028c 	.word	0x2000028c

08004940 <__malloc_lock>:
 8004940:	4770      	bx	lr

08004942 <__malloc_unlock>:
 8004942:	4770      	bx	lr

08004944 <_malloc_usable_size_r>:
 8004944:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004948:	1f18      	subs	r0, r3, #4
 800494a:	2b00      	cmp	r3, #0
 800494c:	bfbc      	itt	lt
 800494e:	580b      	ldrlt	r3, [r1, r0]
 8004950:	18c0      	addlt	r0, r0, r3
 8004952:	4770      	bx	lr

08004954 <_init>:
 8004954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004956:	bf00      	nop
 8004958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800495a:	bc08      	pop	{r3}
 800495c:	469e      	mov	lr, r3
 800495e:	4770      	bx	lr

08004960 <_fini>:
 8004960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004962:	bf00      	nop
 8004964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004966:	bc08      	pop	{r3}
 8004968:	469e      	mov	lr, r3
 800496a:	4770      	bx	lr
