
DMA_ADC4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ee0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08002fec  08002fec  00012fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003094  08003094  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003094  08003094  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003094  08003094  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003094  08003094  00013094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003098  08003098  00013098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800309c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000070  0800310c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  0800310c  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000074bc  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000183d  00000000  00000000  00027555  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007a0  00000000  00000000  00028d98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006c8  00000000  00000000  00029538  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000137be  00000000  00000000  00029c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006ec4  00000000  00000000  0003d3be  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006f86e  00000000  00000000  00044282  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b3af0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020c0  00000000  00000000  000b3b6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002fd4 	.word	0x08002fd4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002fd4 	.word	0x08002fd4

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fb8a 	bl	8000868 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f8ae 	bl	80002b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f9ca 	bl	80004f0 <MX_GPIO_Init>
  MX_DMA_Init();
 800015c:	f000 f9aa 	bl	80004b4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000160:	f000 f8f8 	bl	8000354 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000164:	f000 f97c 	bl	8000460 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adcSamples, 6);
 8000168:	2206      	movs	r2, #6
 800016a:	493d      	ldr	r1, [pc, #244]	; (8000260 <main+0x114>)
 800016c:	483d      	ldr	r0, [pc, #244]	; (8000264 <main+0x118>)
 800016e:	f000 fcd7 	bl	8000b20 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  stringSize1 = sprintf(buffer1,"ADC1: %u ",adcSamples[0]);
 8000172:	4b3b      	ldr	r3, [pc, #236]	; (8000260 <main+0x114>)
 8000174:	881b      	ldrh	r3, [r3, #0]
 8000176:	461a      	mov	r2, r3
 8000178:	493b      	ldr	r1, [pc, #236]	; (8000268 <main+0x11c>)
 800017a:	483c      	ldr	r0, [pc, #240]	; (800026c <main+0x120>)
 800017c:	f002 fb18 	bl	80027b0 <siprintf>
 8000180:	4603      	mov	r3, r0
 8000182:	b2da      	uxtb	r2, r3
 8000184:	4b3a      	ldr	r3, [pc, #232]	; (8000270 <main+0x124>)
 8000186:	701a      	strb	r2, [r3, #0]
	  stringSize2 = sprintf(buffer2,"ADC2: %u ",adcSamples[1]);
 8000188:	4b35      	ldr	r3, [pc, #212]	; (8000260 <main+0x114>)
 800018a:	885b      	ldrh	r3, [r3, #2]
 800018c:	461a      	mov	r2, r3
 800018e:	4939      	ldr	r1, [pc, #228]	; (8000274 <main+0x128>)
 8000190:	4839      	ldr	r0, [pc, #228]	; (8000278 <main+0x12c>)
 8000192:	f002 fb0d 	bl	80027b0 <siprintf>
 8000196:	4603      	mov	r3, r0
 8000198:	b2da      	uxtb	r2, r3
 800019a:	4b38      	ldr	r3, [pc, #224]	; (800027c <main+0x130>)
 800019c:	701a      	strb	r2, [r3, #0]
	  stringSize3 = sprintf(buffer3,"ADC3: %u ",adcSamples[2]);
 800019e:	4b30      	ldr	r3, [pc, #192]	; (8000260 <main+0x114>)
 80001a0:	889b      	ldrh	r3, [r3, #4]
 80001a2:	461a      	mov	r2, r3
 80001a4:	4936      	ldr	r1, [pc, #216]	; (8000280 <main+0x134>)
 80001a6:	4837      	ldr	r0, [pc, #220]	; (8000284 <main+0x138>)
 80001a8:	f002 fb02 	bl	80027b0 <siprintf>
 80001ac:	4603      	mov	r3, r0
 80001ae:	b2da      	uxtb	r2, r3
 80001b0:	4b35      	ldr	r3, [pc, #212]	; (8000288 <main+0x13c>)
 80001b2:	701a      	strb	r2, [r3, #0]
	  stringSize4 = sprintf(buffer4,"ADC4: %u ",adcSamples[3]);
 80001b4:	4b2a      	ldr	r3, [pc, #168]	; (8000260 <main+0x114>)
 80001b6:	88db      	ldrh	r3, [r3, #6]
 80001b8:	461a      	mov	r2, r3
 80001ba:	4934      	ldr	r1, [pc, #208]	; (800028c <main+0x140>)
 80001bc:	4834      	ldr	r0, [pc, #208]	; (8000290 <main+0x144>)
 80001be:	f002 faf7 	bl	80027b0 <siprintf>
 80001c2:	4603      	mov	r3, r0
 80001c4:	b2da      	uxtb	r2, r3
 80001c6:	4b33      	ldr	r3, [pc, #204]	; (8000294 <main+0x148>)
 80001c8:	701a      	strb	r2, [r3, #0]
	  stringSize5 = sprintf(buffer5,"ADC5: %u ",adcSamples[4]);
 80001ca:	4b25      	ldr	r3, [pc, #148]	; (8000260 <main+0x114>)
 80001cc:	891b      	ldrh	r3, [r3, #8]
 80001ce:	461a      	mov	r2, r3
 80001d0:	4931      	ldr	r1, [pc, #196]	; (8000298 <main+0x14c>)
 80001d2:	4832      	ldr	r0, [pc, #200]	; (800029c <main+0x150>)
 80001d4:	f002 faec 	bl	80027b0 <siprintf>
 80001d8:	4603      	mov	r3, r0
 80001da:	b2da      	uxtb	r2, r3
 80001dc:	4b30      	ldr	r3, [pc, #192]	; (80002a0 <main+0x154>)
 80001de:	701a      	strb	r2, [r3, #0]
	  stringSize6 = sprintf(buffer6,"ADC6: %u\r\n",adcSamples[5]);
 80001e0:	4b1f      	ldr	r3, [pc, #124]	; (8000260 <main+0x114>)
 80001e2:	895b      	ldrh	r3, [r3, #10]
 80001e4:	461a      	mov	r2, r3
 80001e6:	492f      	ldr	r1, [pc, #188]	; (80002a4 <main+0x158>)
 80001e8:	482f      	ldr	r0, [pc, #188]	; (80002a8 <main+0x15c>)
 80001ea:	f002 fae1 	bl	80027b0 <siprintf>
 80001ee:	4603      	mov	r3, r0
 80001f0:	b2da      	uxtb	r2, r3
 80001f2:	4b2e      	ldr	r3, [pc, #184]	; (80002ac <main+0x160>)
 80001f4:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, buffer1, stringSize1, 100);
 80001f6:	4b1e      	ldr	r3, [pc, #120]	; (8000270 <main+0x124>)
 80001f8:	781b      	ldrb	r3, [r3, #0]
 80001fa:	b29a      	uxth	r2, r3
 80001fc:	2364      	movs	r3, #100	; 0x64
 80001fe:	491b      	ldr	r1, [pc, #108]	; (800026c <main+0x120>)
 8000200:	482b      	ldr	r0, [pc, #172]	; (80002b0 <main+0x164>)
 8000202:	f002 f8e6 	bl	80023d2 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, buffer2, stringSize2, 100);
 8000206:	4b1d      	ldr	r3, [pc, #116]	; (800027c <main+0x130>)
 8000208:	781b      	ldrb	r3, [r3, #0]
 800020a:	b29a      	uxth	r2, r3
 800020c:	2364      	movs	r3, #100	; 0x64
 800020e:	491a      	ldr	r1, [pc, #104]	; (8000278 <main+0x12c>)
 8000210:	4827      	ldr	r0, [pc, #156]	; (80002b0 <main+0x164>)
 8000212:	f002 f8de 	bl	80023d2 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, buffer3, stringSize3, 100);
 8000216:	4b1c      	ldr	r3, [pc, #112]	; (8000288 <main+0x13c>)
 8000218:	781b      	ldrb	r3, [r3, #0]
 800021a:	b29a      	uxth	r2, r3
 800021c:	2364      	movs	r3, #100	; 0x64
 800021e:	4919      	ldr	r1, [pc, #100]	; (8000284 <main+0x138>)
 8000220:	4823      	ldr	r0, [pc, #140]	; (80002b0 <main+0x164>)
 8000222:	f002 f8d6 	bl	80023d2 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, buffer4, stringSize4, 100);
 8000226:	4b1b      	ldr	r3, [pc, #108]	; (8000294 <main+0x148>)
 8000228:	781b      	ldrb	r3, [r3, #0]
 800022a:	b29a      	uxth	r2, r3
 800022c:	2364      	movs	r3, #100	; 0x64
 800022e:	4918      	ldr	r1, [pc, #96]	; (8000290 <main+0x144>)
 8000230:	481f      	ldr	r0, [pc, #124]	; (80002b0 <main+0x164>)
 8000232:	f002 f8ce 	bl	80023d2 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, buffer5, stringSize5, 100);
 8000236:	4b1a      	ldr	r3, [pc, #104]	; (80002a0 <main+0x154>)
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	b29a      	uxth	r2, r3
 800023c:	2364      	movs	r3, #100	; 0x64
 800023e:	4917      	ldr	r1, [pc, #92]	; (800029c <main+0x150>)
 8000240:	481b      	ldr	r0, [pc, #108]	; (80002b0 <main+0x164>)
 8000242:	f002 f8c6 	bl	80023d2 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, buffer6, stringSize6, 100);
 8000246:	4b19      	ldr	r3, [pc, #100]	; (80002ac <main+0x160>)
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	b29a      	uxth	r2, r3
 800024c:	2364      	movs	r3, #100	; 0x64
 800024e:	4916      	ldr	r1, [pc, #88]	; (80002a8 <main+0x15c>)
 8000250:	4817      	ldr	r0, [pc, #92]	; (80002b0 <main+0x164>)
 8000252:	f002 f8be 	bl	80023d2 <HAL_UART_Transmit>
	  HAL_Delay(50);
 8000256:	2032      	movs	r0, #50	; 0x32
 8000258:	f000 fb68 	bl	800092c <HAL_Delay>
  {
 800025c:	e789      	b.n	8000172 <main+0x26>
 800025e:	bf00      	nop
 8000260:	20000190 	.word	0x20000190
 8000264:	200000a8 	.word	0x200000a8
 8000268:	08002fec 	.word	0x08002fec
 800026c:	200001a0 	.word	0x200001a0
 8000270:	200000a7 	.word	0x200000a7
 8000274:	08002ff8 	.word	0x08002ff8
 8000278:	200000d8 	.word	0x200000d8
 800027c:	2000017f 	.word	0x2000017f
 8000280:	08003004 	.word	0x08003004
 8000284:	200001b0 	.word	0x200001b0
 8000288:	2000019c 	.word	0x2000019c
 800028c:	08003010 	.word	0x08003010
 8000290:	20000180 	.word	0x20000180
 8000294:	200001bf 	.word	0x200001bf
 8000298:	0800301c 	.word	0x0800301c
 800029c:	20000170 	.word	0x20000170
 80002a0:	2000016d 	.word	0x2000016d
 80002a4:	08003028 	.word	0x08003028
 80002a8:	20000098 	.word	0x20000098
 80002ac:	2000016c 	.word	0x2000016c
 80002b0:	200000e8 	.word	0x200000e8

080002b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b094      	sub	sp, #80	; 0x50
 80002b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002be:	2228      	movs	r2, #40	; 0x28
 80002c0:	2100      	movs	r1, #0
 80002c2:	4618      	mov	r0, r3
 80002c4:	f002 fa6c 	bl	80027a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c8:	f107 0314 	add.w	r3, r7, #20
 80002cc:	2200      	movs	r2, #0
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	605a      	str	r2, [r3, #4]
 80002d2:	609a      	str	r2, [r3, #8]
 80002d4:	60da      	str	r2, [r3, #12]
 80002d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	2200      	movs	r2, #0
 80002dc:	601a      	str	r2, [r3, #0]
 80002de:	605a      	str	r2, [r3, #4]
 80002e0:	609a      	str	r2, [r3, #8]
 80002e2:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002e4:	2302      	movs	r3, #2
 80002e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e8:	2301      	movs	r3, #1
 80002ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ec:	2310      	movs	r3, #16
 80002ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002f0:	2300      	movs	r3, #0
 80002f2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002f8:	4618      	mov	r0, r3
 80002fa:	f001 fb4b 	bl	8001994 <HAL_RCC_OscConfig>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000304:	f000 f90a 	bl	800051c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000308:	230f      	movs	r3, #15
 800030a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800030c:	2300      	movs	r3, #0
 800030e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000310:	2300      	movs	r3, #0
 8000312:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000314:	2300      	movs	r3, #0
 8000316:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000318:	2300      	movs	r3, #0
 800031a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800031c:	f107 0314 	add.w	r3, r7, #20
 8000320:	2100      	movs	r1, #0
 8000322:	4618      	mov	r0, r3
 8000324:	f001 fdb6 	bl	8001e94 <HAL_RCC_ClockConfig>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800032e:	f000 f8f5 	bl	800051c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000332:	2302      	movs	r3, #2
 8000334:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000336:	2300      	movs	r3, #0
 8000338:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	4618      	mov	r0, r3
 800033e:	f001 ff45 	bl	80021cc <HAL_RCCEx_PeriphCLKConfig>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000348:	f000 f8e8 	bl	800051c <Error_Handler>
  }
}
 800034c:	bf00      	nop
 800034e:	3750      	adds	r7, #80	; 0x50
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}

08000354 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b084      	sub	sp, #16
 8000358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	2200      	movs	r2, #0
 800035e:	601a      	str	r2, [r3, #0]
 8000360:	605a      	str	r2, [r3, #4]
 8000362:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000364:	4b3c      	ldr	r3, [pc, #240]	; (8000458 <MX_ADC1_Init+0x104>)
 8000366:	4a3d      	ldr	r2, [pc, #244]	; (800045c <MX_ADC1_Init+0x108>)
 8000368:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800036a:	4b3b      	ldr	r3, [pc, #236]	; (8000458 <MX_ADC1_Init+0x104>)
 800036c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000370:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000372:	4b39      	ldr	r3, [pc, #228]	; (8000458 <MX_ADC1_Init+0x104>)
 8000374:	2201      	movs	r2, #1
 8000376:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000378:	4b37      	ldr	r3, [pc, #220]	; (8000458 <MX_ADC1_Init+0x104>)
 800037a:	2200      	movs	r2, #0
 800037c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800037e:	4b36      	ldr	r3, [pc, #216]	; (8000458 <MX_ADC1_Init+0x104>)
 8000380:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000384:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000386:	4b34      	ldr	r3, [pc, #208]	; (8000458 <MX_ADC1_Init+0x104>)
 8000388:	2200      	movs	r2, #0
 800038a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 6;
 800038c:	4b32      	ldr	r3, [pc, #200]	; (8000458 <MX_ADC1_Init+0x104>)
 800038e:	2206      	movs	r2, #6
 8000390:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000392:	4831      	ldr	r0, [pc, #196]	; (8000458 <MX_ADC1_Init+0x104>)
 8000394:	f000 faec 	bl	8000970 <HAL_ADC_Init>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800039e:	f000 f8bd 	bl	800051c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003a2:	2301      	movs	r3, #1
 80003a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003a6:	2301      	movs	r3, #1
 80003a8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80003aa:	2307      	movs	r3, #7
 80003ac:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003ae:	1d3b      	adds	r3, r7, #4
 80003b0:	4619      	mov	r1, r3
 80003b2:	4829      	ldr	r0, [pc, #164]	; (8000458 <MX_ADC1_Init+0x104>)
 80003b4:	f000 fcae 	bl	8000d14 <HAL_ADC_ConfigChannel>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80003be:	f000 f8ad 	bl	800051c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80003c2:	2302      	movs	r3, #2
 80003c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80003c6:	2302      	movs	r3, #2
 80003c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003ca:	1d3b      	adds	r3, r7, #4
 80003cc:	4619      	mov	r1, r3
 80003ce:	4822      	ldr	r0, [pc, #136]	; (8000458 <MX_ADC1_Init+0x104>)
 80003d0:	f000 fca0 	bl	8000d14 <HAL_ADC_ConfigChannel>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80003da:	f000 f89f 	bl	800051c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80003de:	2303      	movs	r3, #3
 80003e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80003e2:	2303      	movs	r3, #3
 80003e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003e6:	1d3b      	adds	r3, r7, #4
 80003e8:	4619      	mov	r1, r3
 80003ea:	481b      	ldr	r0, [pc, #108]	; (8000458 <MX_ADC1_Init+0x104>)
 80003ec:	f000 fc92 	bl	8000d14 <HAL_ADC_ConfigChannel>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80003f6:	f000 f891 	bl	800051c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80003fa:	2304      	movs	r3, #4
 80003fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80003fe:	2304      	movs	r3, #4
 8000400:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000402:	1d3b      	adds	r3, r7, #4
 8000404:	4619      	mov	r1, r3
 8000406:	4814      	ldr	r0, [pc, #80]	; (8000458 <MX_ADC1_Init+0x104>)
 8000408:	f000 fc84 	bl	8000d14 <HAL_ADC_ConfigChannel>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000412:	f000 f883 	bl	800051c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000416:	2305      	movs	r3, #5
 8000418:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800041a:	2305      	movs	r3, #5
 800041c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800041e:	1d3b      	adds	r3, r7, #4
 8000420:	4619      	mov	r1, r3
 8000422:	480d      	ldr	r0, [pc, #52]	; (8000458 <MX_ADC1_Init+0x104>)
 8000424:	f000 fc76 	bl	8000d14 <HAL_ADC_ConfigChannel>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800042e:	f000 f875 	bl	800051c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000432:	2306      	movs	r3, #6
 8000434:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000436:	2306      	movs	r3, #6
 8000438:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800043a:	1d3b      	adds	r3, r7, #4
 800043c:	4619      	mov	r1, r3
 800043e:	4806      	ldr	r0, [pc, #24]	; (8000458 <MX_ADC1_Init+0x104>)
 8000440:	f000 fc68 	bl	8000d14 <HAL_ADC_ConfigChannel>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800044a:	f000 f867 	bl	800051c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800044e:	bf00      	nop
 8000450:	3710      	adds	r7, #16
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	200000a8 	.word	0x200000a8
 800045c:	40012400 	.word	0x40012400

08000460 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000464:	4b11      	ldr	r3, [pc, #68]	; (80004ac <MX_USART1_UART_Init+0x4c>)
 8000466:	4a12      	ldr	r2, [pc, #72]	; (80004b0 <MX_USART1_UART_Init+0x50>)
 8000468:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800046a:	4b10      	ldr	r3, [pc, #64]	; (80004ac <MX_USART1_UART_Init+0x4c>)
 800046c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000470:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000472:	4b0e      	ldr	r3, [pc, #56]	; (80004ac <MX_USART1_UART_Init+0x4c>)
 8000474:	2200      	movs	r2, #0
 8000476:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000478:	4b0c      	ldr	r3, [pc, #48]	; (80004ac <MX_USART1_UART_Init+0x4c>)
 800047a:	2200      	movs	r2, #0
 800047c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800047e:	4b0b      	ldr	r3, [pc, #44]	; (80004ac <MX_USART1_UART_Init+0x4c>)
 8000480:	2200      	movs	r2, #0
 8000482:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000484:	4b09      	ldr	r3, [pc, #36]	; (80004ac <MX_USART1_UART_Init+0x4c>)
 8000486:	220c      	movs	r2, #12
 8000488:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800048a:	4b08      	ldr	r3, [pc, #32]	; (80004ac <MX_USART1_UART_Init+0x4c>)
 800048c:	2200      	movs	r2, #0
 800048e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000490:	4b06      	ldr	r3, [pc, #24]	; (80004ac <MX_USART1_UART_Init+0x4c>)
 8000492:	2200      	movs	r2, #0
 8000494:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000496:	4805      	ldr	r0, [pc, #20]	; (80004ac <MX_USART1_UART_Init+0x4c>)
 8000498:	f001 ff4e 	bl	8002338 <HAL_UART_Init>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80004a2:	f000 f83b 	bl	800051c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004a6:	bf00      	nop
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	200000e8 	.word	0x200000e8
 80004b0:	40013800 	.word	0x40013800

080004b4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004ba:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <MX_DMA_Init+0x38>)
 80004bc:	695b      	ldr	r3, [r3, #20]
 80004be:	4a0b      	ldr	r2, [pc, #44]	; (80004ec <MX_DMA_Init+0x38>)
 80004c0:	f043 0301 	orr.w	r3, r3, #1
 80004c4:	6153      	str	r3, [r2, #20]
 80004c6:	4b09      	ldr	r3, [pc, #36]	; (80004ec <MX_DMA_Init+0x38>)
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	f003 0301 	and.w	r3, r3, #1
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80004d2:	2200      	movs	r2, #0
 80004d4:	2100      	movs	r1, #0
 80004d6:	200b      	movs	r0, #11
 80004d8:	f000 fedd 	bl	8001296 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80004dc:	200b      	movs	r0, #11
 80004de:	f000 fef6 	bl	80012ce <HAL_NVIC_EnableIRQ>

}
 80004e2:	bf00      	nop
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	40021000 	.word	0x40021000

080004f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f6:	4b08      	ldr	r3, [pc, #32]	; (8000518 <MX_GPIO_Init+0x28>)
 80004f8:	699b      	ldr	r3, [r3, #24]
 80004fa:	4a07      	ldr	r2, [pc, #28]	; (8000518 <MX_GPIO_Init+0x28>)
 80004fc:	f043 0304 	orr.w	r3, r3, #4
 8000500:	6193      	str	r3, [r2, #24]
 8000502:	4b05      	ldr	r3, [pc, #20]	; (8000518 <MX_GPIO_Init+0x28>)
 8000504:	699b      	ldr	r3, [r3, #24]
 8000506:	f003 0304 	and.w	r3, r3, #4
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	687b      	ldr	r3, [r7, #4]

}
 800050e:	bf00      	nop
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	bc80      	pop	{r7}
 8000516:	4770      	bx	lr
 8000518:	40021000 	.word	0x40021000

0800051c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr

08000528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800052e:	4b15      	ldr	r3, [pc, #84]	; (8000584 <HAL_MspInit+0x5c>)
 8000530:	699b      	ldr	r3, [r3, #24]
 8000532:	4a14      	ldr	r2, [pc, #80]	; (8000584 <HAL_MspInit+0x5c>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	6193      	str	r3, [r2, #24]
 800053a:	4b12      	ldr	r3, [pc, #72]	; (8000584 <HAL_MspInit+0x5c>)
 800053c:	699b      	ldr	r3, [r3, #24]
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000546:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <HAL_MspInit+0x5c>)
 8000548:	69db      	ldr	r3, [r3, #28]
 800054a:	4a0e      	ldr	r2, [pc, #56]	; (8000584 <HAL_MspInit+0x5c>)
 800054c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000550:	61d3      	str	r3, [r2, #28]
 8000552:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <HAL_MspInit+0x5c>)
 8000554:	69db      	ldr	r3, [r3, #28]
 8000556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800055e:	4b0a      	ldr	r3, [pc, #40]	; (8000588 <HAL_MspInit+0x60>)
 8000560:	685b      	ldr	r3, [r3, #4]
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000572:	60fb      	str	r3, [r7, #12]
 8000574:	4a04      	ldr	r2, [pc, #16]	; (8000588 <HAL_MspInit+0x60>)
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800057a:	bf00      	nop
 800057c:	3714      	adds	r7, #20
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr
 8000584:	40021000 	.word	0x40021000
 8000588:	40010000 	.word	0x40010000

0800058c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b088      	sub	sp, #32
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000594:	f107 0310 	add.w	r3, r7, #16
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a28      	ldr	r2, [pc, #160]	; (8000648 <HAL_ADC_MspInit+0xbc>)
 80005a8:	4293      	cmp	r3, r2
 80005aa:	d149      	bne.n	8000640 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005ac:	4b27      	ldr	r3, [pc, #156]	; (800064c <HAL_ADC_MspInit+0xc0>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	4a26      	ldr	r2, [pc, #152]	; (800064c <HAL_ADC_MspInit+0xc0>)
 80005b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005b6:	6193      	str	r3, [r2, #24]
 80005b8:	4b24      	ldr	r3, [pc, #144]	; (800064c <HAL_ADC_MspInit+0xc0>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80005c0:	60fb      	str	r3, [r7, #12]
 80005c2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c4:	4b21      	ldr	r3, [pc, #132]	; (800064c <HAL_ADC_MspInit+0xc0>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	4a20      	ldr	r2, [pc, #128]	; (800064c <HAL_ADC_MspInit+0xc0>)
 80005ca:	f043 0304 	orr.w	r3, r3, #4
 80005ce:	6193      	str	r3, [r2, #24]
 80005d0:	4b1e      	ldr	r3, [pc, #120]	; (800064c <HAL_ADC_MspInit+0xc0>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	f003 0304 	and.w	r3, r3, #4
 80005d8:	60bb      	str	r3, [r7, #8]
 80005da:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 80005dc:	237e      	movs	r3, #126	; 0x7e
 80005de:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005e0:	2303      	movs	r3, #3
 80005e2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e4:	f107 0310 	add.w	r3, r7, #16
 80005e8:	4619      	mov	r1, r3
 80005ea:	4819      	ldr	r0, [pc, #100]	; (8000650 <HAL_ADC_MspInit+0xc4>)
 80005ec:	f001 f878 	bl	80016e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80005f0:	4b18      	ldr	r3, [pc, #96]	; (8000654 <HAL_ADC_MspInit+0xc8>)
 80005f2:	4a19      	ldr	r2, [pc, #100]	; (8000658 <HAL_ADC_MspInit+0xcc>)
 80005f4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005f6:	4b17      	ldr	r3, [pc, #92]	; (8000654 <HAL_ADC_MspInit+0xc8>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005fc:	4b15      	ldr	r3, [pc, #84]	; (8000654 <HAL_ADC_MspInit+0xc8>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000602:	4b14      	ldr	r3, [pc, #80]	; (8000654 <HAL_ADC_MspInit+0xc8>)
 8000604:	2280      	movs	r2, #128	; 0x80
 8000606:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <HAL_ADC_MspInit+0xc8>)
 800060a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800060e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000610:	4b10      	ldr	r3, [pc, #64]	; (8000654 <HAL_ADC_MspInit+0xc8>)
 8000612:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000616:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000618:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <HAL_ADC_MspInit+0xc8>)
 800061a:	2220      	movs	r2, #32
 800061c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800061e:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <HAL_ADC_MspInit+0xc8>)
 8000620:	2200      	movs	r2, #0
 8000622:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000624:	480b      	ldr	r0, [pc, #44]	; (8000654 <HAL_ADC_MspInit+0xc8>)
 8000626:	f000 fe6d 	bl	8001304 <HAL_DMA_Init>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000630:	f7ff ff74 	bl	800051c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a07      	ldr	r2, [pc, #28]	; (8000654 <HAL_ADC_MspInit+0xc8>)
 8000638:	621a      	str	r2, [r3, #32]
 800063a:	4a06      	ldr	r2, [pc, #24]	; (8000654 <HAL_ADC_MspInit+0xc8>)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000640:	bf00      	nop
 8000642:	3720      	adds	r7, #32
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40012400 	.word	0x40012400
 800064c:	40021000 	.word	0x40021000
 8000650:	40010800 	.word	0x40010800
 8000654:	20000128 	.word	0x20000128
 8000658:	40020008 	.word	0x40020008

0800065c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b088      	sub	sp, #32
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000664:	f107 0310 	add.w	r3, r7, #16
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <HAL_UART_MspInit+0x8c>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d131      	bne.n	80006e0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800067c:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <HAL_UART_MspInit+0x90>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	4a1a      	ldr	r2, [pc, #104]	; (80006ec <HAL_UART_MspInit+0x90>)
 8000682:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000686:	6193      	str	r3, [r2, #24]
 8000688:	4b18      	ldr	r3, [pc, #96]	; (80006ec <HAL_UART_MspInit+0x90>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000690:	60fb      	str	r3, [r7, #12]
 8000692:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000694:	4b15      	ldr	r3, [pc, #84]	; (80006ec <HAL_UART_MspInit+0x90>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	4a14      	ldr	r2, [pc, #80]	; (80006ec <HAL_UART_MspInit+0x90>)
 800069a:	f043 0304 	orr.w	r3, r3, #4
 800069e:	6193      	str	r3, [r2, #24]
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <HAL_UART_MspInit+0x90>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	f003 0304 	and.w	r3, r3, #4
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b2:	2302      	movs	r3, #2
 80006b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006b6:	2303      	movs	r3, #3
 80006b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ba:	f107 0310 	add.w	r3, r7, #16
 80006be:	4619      	mov	r1, r3
 80006c0:	480b      	ldr	r0, [pc, #44]	; (80006f0 <HAL_UART_MspInit+0x94>)
 80006c2:	f001 f80d 	bl	80016e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d4:	f107 0310 	add.w	r3, r7, #16
 80006d8:	4619      	mov	r1, r3
 80006da:	4805      	ldr	r0, [pc, #20]	; (80006f0 <HAL_UART_MspInit+0x94>)
 80006dc:	f001 f800 	bl	80016e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80006e0:	bf00      	nop
 80006e2:	3720      	adds	r7, #32
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40013800 	.word	0x40013800
 80006ec:	40021000 	.word	0x40021000
 80006f0:	40010800 	.word	0x40010800

080006f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr

08000700 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000704:	e7fe      	b.n	8000704 <HardFault_Handler+0x4>

08000706 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800070a:	e7fe      	b.n	800070a <MemManage_Handler+0x4>

0800070c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000710:	e7fe      	b.n	8000710 <BusFault_Handler+0x4>

08000712 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000716:	e7fe      	b.n	8000716 <UsageFault_Handler+0x4>

08000718 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800071c:	bf00      	nop
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr

08000724 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr

08000730 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr

0800073c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000740:	f000 f8d8 	bl	80008f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}

08000748 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800074c:	4802      	ldr	r0, [pc, #8]	; (8000758 <DMA1_Channel1_IRQHandler+0x10>)
 800074e:	f000 fe93 	bl	8001478 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000128 	.word	0x20000128

0800075c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <_sbrk+0x50>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d102      	bne.n	8000772 <_sbrk+0x16>
		heap_end = &end;
 800076c:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <_sbrk+0x50>)
 800076e:	4a10      	ldr	r2, [pc, #64]	; (80007b0 <_sbrk+0x54>)
 8000770:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <_sbrk+0x50>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <_sbrk+0x50>)
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	4413      	add	r3, r2
 8000780:	466a      	mov	r2, sp
 8000782:	4293      	cmp	r3, r2
 8000784:	d907      	bls.n	8000796 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000786:	f001 ffe1 	bl	800274c <__errno>
 800078a:	4602      	mov	r2, r0
 800078c:	230c      	movs	r3, #12
 800078e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000790:	f04f 33ff 	mov.w	r3, #4294967295
 8000794:	e006      	b.n	80007a4 <_sbrk+0x48>
	}

	heap_end += incr;
 8000796:	4b05      	ldr	r3, [pc, #20]	; (80007ac <_sbrk+0x50>)
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4413      	add	r3, r2
 800079e:	4a03      	ldr	r2, [pc, #12]	; (80007ac <_sbrk+0x50>)
 80007a0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80007a2:	68fb      	ldr	r3, [r7, #12]
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3710      	adds	r7, #16
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	2000008c 	.word	0x2000008c
 80007b0:	200001c8 	.word	0x200001c8

080007b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80007b8:	4b15      	ldr	r3, [pc, #84]	; (8000810 <SystemInit+0x5c>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a14      	ldr	r2, [pc, #80]	; (8000810 <SystemInit+0x5c>)
 80007be:	f043 0301 	orr.w	r3, r3, #1
 80007c2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80007c4:	4b12      	ldr	r3, [pc, #72]	; (8000810 <SystemInit+0x5c>)
 80007c6:	685a      	ldr	r2, [r3, #4]
 80007c8:	4911      	ldr	r1, [pc, #68]	; (8000810 <SystemInit+0x5c>)
 80007ca:	4b12      	ldr	r3, [pc, #72]	; (8000814 <SystemInit+0x60>)
 80007cc:	4013      	ands	r3, r2
 80007ce:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <SystemInit+0x5c>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a0e      	ldr	r2, [pc, #56]	; (8000810 <SystemInit+0x5c>)
 80007d6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80007da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007de:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007e0:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <SystemInit+0x5c>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a0a      	ldr	r2, [pc, #40]	; (8000810 <SystemInit+0x5c>)
 80007e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007ea:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80007ec:	4b08      	ldr	r3, [pc, #32]	; (8000810 <SystemInit+0x5c>)
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	4a07      	ldr	r2, [pc, #28]	; (8000810 <SystemInit+0x5c>)
 80007f2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80007f6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80007f8:	4b05      	ldr	r3, [pc, #20]	; (8000810 <SystemInit+0x5c>)
 80007fa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80007fe:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000800:	4b05      	ldr	r3, [pc, #20]	; (8000818 <SystemInit+0x64>)
 8000802:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000806:	609a      	str	r2, [r3, #8]
#endif 
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr
 8000810:	40021000 	.word	0x40021000
 8000814:	f8ff0000 	.word	0xf8ff0000
 8000818:	e000ed00 	.word	0xe000ed00

0800081c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800081c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800081e:	e003      	b.n	8000828 <LoopCopyDataInit>

08000820 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000820:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000822:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000824:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000826:	3104      	adds	r1, #4

08000828 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000828:	480a      	ldr	r0, [pc, #40]	; (8000854 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800082a:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800082c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800082e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000830:	d3f6      	bcc.n	8000820 <CopyDataInit>
  ldr r2, =_sbss
 8000832:	4a0a      	ldr	r2, [pc, #40]	; (800085c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000834:	e002      	b.n	800083c <LoopFillZerobss>

08000836 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000836:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000838:	f842 3b04 	str.w	r3, [r2], #4

0800083c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800083c:	4b08      	ldr	r3, [pc, #32]	; (8000860 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800083e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000840:	d3f9      	bcc.n	8000836 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000842:	f7ff ffb7 	bl	80007b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000846:	f001 ff87 	bl	8002758 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800084a:	f7ff fc7f 	bl	800014c <main>
  bx lr
 800084e:	4770      	bx	lr
  ldr r3, =_sidata
 8000850:	0800309c 	.word	0x0800309c
  ldr r0, =_sdata
 8000854:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000858:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 800085c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000860:	200001c8 	.word	0x200001c8

08000864 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000864:	e7fe      	b.n	8000864 <ADC1_2_IRQHandler>
	...

08000868 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800086c:	4b08      	ldr	r3, [pc, #32]	; (8000890 <HAL_Init+0x28>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a07      	ldr	r2, [pc, #28]	; (8000890 <HAL_Init+0x28>)
 8000872:	f043 0310 	orr.w	r3, r3, #16
 8000876:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000878:	2003      	movs	r0, #3
 800087a:	f000 fd01 	bl	8001280 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800087e:	2000      	movs	r0, #0
 8000880:	f000 f808 	bl	8000894 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000884:	f7ff fe50 	bl	8000528 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000888:	2300      	movs	r3, #0
}
 800088a:	4618      	mov	r0, r3
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40022000 	.word	0x40022000

08000894 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <HAL_InitTick+0x54>)
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <HAL_InitTick+0x58>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	4619      	mov	r1, r3
 80008a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 fd19 	bl	80012ea <HAL_SYSTICK_Config>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008be:	2301      	movs	r3, #1
 80008c0:	e00e      	b.n	80008e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2b0f      	cmp	r3, #15
 80008c6:	d80a      	bhi.n	80008de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008c8:	2200      	movs	r2, #0
 80008ca:	6879      	ldr	r1, [r7, #4]
 80008cc:	f04f 30ff 	mov.w	r0, #4294967295
 80008d0:	f000 fce1 	bl	8001296 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008d4:	4a06      	ldr	r2, [pc, #24]	; (80008f0 <HAL_InitTick+0x5c>)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008da:	2300      	movs	r3, #0
 80008dc:	e000      	b.n	80008e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008de:	2301      	movs	r3, #1
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000000 	.word	0x20000000
 80008ec:	20000008 	.word	0x20000008
 80008f0:	20000004 	.word	0x20000004

080008f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008f8:	4b05      	ldr	r3, [pc, #20]	; (8000910 <HAL_IncTick+0x1c>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	461a      	mov	r2, r3
 80008fe:	4b05      	ldr	r3, [pc, #20]	; (8000914 <HAL_IncTick+0x20>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4413      	add	r3, r2
 8000904:	4a03      	ldr	r2, [pc, #12]	; (8000914 <HAL_IncTick+0x20>)
 8000906:	6013      	str	r3, [r2, #0]
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr
 8000910:	20000008 	.word	0x20000008
 8000914:	200001c0 	.word	0x200001c0

08000918 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  return uwTick;
 800091c:	4b02      	ldr	r3, [pc, #8]	; (8000928 <HAL_GetTick+0x10>)
 800091e:	681b      	ldr	r3, [r3, #0]
}
 8000920:	4618      	mov	r0, r3
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr
 8000928:	200001c0 	.word	0x200001c0

0800092c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000934:	f7ff fff0 	bl	8000918 <HAL_GetTick>
 8000938:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000944:	d005      	beq.n	8000952 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <HAL_Delay+0x40>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	461a      	mov	r2, r3
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	4413      	add	r3, r2
 8000950:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000952:	bf00      	nop
 8000954:	f7ff ffe0 	bl	8000918 <HAL_GetTick>
 8000958:	4602      	mov	r2, r0
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	68fa      	ldr	r2, [r7, #12]
 8000960:	429a      	cmp	r2, r3
 8000962:	d8f7      	bhi.n	8000954 <HAL_Delay+0x28>
  {
  }
}
 8000964:	bf00      	nop
 8000966:	3710      	adds	r7, #16
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000008 	.word	0x20000008

08000970 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000978:	2300      	movs	r3, #0
 800097a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800097c:	2300      	movs	r3, #0
 800097e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000980:	2300      	movs	r3, #0
 8000982:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000984:	2300      	movs	r3, #0
 8000986:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d101      	bne.n	8000992 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800098e:	2301      	movs	r3, #1
 8000990:	e0be      	b.n	8000b10 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	689b      	ldr	r3, [r3, #8]
 8000996:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800099c:	2b00      	cmp	r3, #0
 800099e:	d109      	bne.n	80009b4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2200      	movs	r2, #0
 80009a4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2200      	movs	r2, #0
 80009aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f7ff fdec 	bl	800058c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f000 faf7 	bl	8000fa8 <ADC_ConversionStop_Disable>
 80009ba:	4603      	mov	r3, r0
 80009bc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009c2:	f003 0310 	and.w	r3, r3, #16
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	f040 8099 	bne.w	8000afe <HAL_ADC_Init+0x18e>
 80009cc:	7dfb      	ldrb	r3, [r7, #23]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	f040 8095 	bne.w	8000afe <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009d8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80009dc:	f023 0302 	bic.w	r3, r3, #2
 80009e0:	f043 0202 	orr.w	r2, r3, #2
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009f0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	7b1b      	ldrb	r3, [r3, #12]
 80009f6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80009f8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009fa:	68ba      	ldr	r2, [r7, #8]
 80009fc:	4313      	orrs	r3, r2
 80009fe:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	689b      	ldr	r3, [r3, #8]
 8000a04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a08:	d003      	beq.n	8000a12 <HAL_ADC_Init+0xa2>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	689b      	ldr	r3, [r3, #8]
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d102      	bne.n	8000a18 <HAL_ADC_Init+0xa8>
 8000a12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a16:	e000      	b.n	8000a1a <HAL_ADC_Init+0xaa>
 8000a18:	2300      	movs	r3, #0
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	7d1b      	ldrb	r3, [r3, #20]
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d119      	bne.n	8000a5c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	7b1b      	ldrb	r3, [r3, #12]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d109      	bne.n	8000a44 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	3b01      	subs	r3, #1
 8000a36:	035a      	lsls	r2, r3, #13
 8000a38:	693b      	ldr	r3, [r7, #16]
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	e00b      	b.n	8000a5c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a48:	f043 0220 	orr.w	r2, r3, #32
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a54:	f043 0201 	orr.w	r2, r3, #1
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	693a      	ldr	r2, [r7, #16]
 8000a6c:	430a      	orrs	r2, r1
 8000a6e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	689a      	ldr	r2, [r3, #8]
 8000a76:	4b28      	ldr	r3, [pc, #160]	; (8000b18 <HAL_ADC_Init+0x1a8>)
 8000a78:	4013      	ands	r3, r2
 8000a7a:	687a      	ldr	r2, [r7, #4]
 8000a7c:	6812      	ldr	r2, [r2, #0]
 8000a7e:	68b9      	ldr	r1, [r7, #8]
 8000a80:	430b      	orrs	r3, r1
 8000a82:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a8c:	d003      	beq.n	8000a96 <HAL_ADC_Init+0x126>
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	689b      	ldr	r3, [r3, #8]
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d104      	bne.n	8000aa0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	691b      	ldr	r3, [r3, #16]
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	051b      	lsls	r3, r3, #20
 8000a9e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aa6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	68fa      	ldr	r2, [r7, #12]
 8000ab0:	430a      	orrs	r2, r1
 8000ab2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	689a      	ldr	r2, [r3, #8]
 8000aba:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <HAL_ADC_Init+0x1ac>)
 8000abc:	4013      	ands	r3, r2
 8000abe:	68ba      	ldr	r2, [r7, #8]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d10b      	bne.n	8000adc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ace:	f023 0303 	bic.w	r3, r3, #3
 8000ad2:	f043 0201 	orr.w	r2, r3, #1
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ada:	e018      	b.n	8000b0e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ae0:	f023 0312 	bic.w	r3, r3, #18
 8000ae4:	f043 0210 	orr.w	r2, r3, #16
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000af0:	f043 0201 	orr.w	r2, r3, #1
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000af8:	2301      	movs	r3, #1
 8000afa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000afc:	e007      	b.n	8000b0e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b02:	f043 0210 	orr.w	r2, r3, #16
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3718      	adds	r7, #24
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	ffe1f7fd 	.word	0xffe1f7fd
 8000b1c:	ff1f0efe 	.word	0xff1f0efe

08000b20 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a64      	ldr	r2, [pc, #400]	; (8000cc8 <HAL_ADC_Start_DMA+0x1a8>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d004      	beq.n	8000b44 <HAL_ADC_Start_DMA+0x24>
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a63      	ldr	r2, [pc, #396]	; (8000ccc <HAL_ADC_Start_DMA+0x1ac>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d106      	bne.n	8000b52 <HAL_ADC_Start_DMA+0x32>
 8000b44:	4b60      	ldr	r3, [pc, #384]	; (8000cc8 <HAL_ADC_Start_DMA+0x1a8>)
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	f040 80b3 	bne.w	8000cb8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d101      	bne.n	8000b60 <HAL_ADC_Start_DMA+0x40>
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	e0ae      	b.n	8000cbe <HAL_ADC_Start_DMA+0x19e>
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	2201      	movs	r2, #1
 8000b64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000b68:	68f8      	ldr	r0, [r7, #12]
 8000b6a:	f000 f9cb 	bl	8000f04 <ADC_Enable>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000b72:	7dfb      	ldrb	r3, [r7, #23]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	f040 809a 	bne.w	8000cae <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b7e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000b82:	f023 0301 	bic.w	r3, r3, #1
 8000b86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a4e      	ldr	r2, [pc, #312]	; (8000ccc <HAL_ADC_Start_DMA+0x1ac>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d105      	bne.n	8000ba4 <HAL_ADC_Start_DMA+0x84>
 8000b98:	4b4b      	ldr	r3, [pc, #300]	; (8000cc8 <HAL_ADC_Start_DMA+0x1a8>)
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d115      	bne.n	8000bd0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ba8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d026      	beq.n	8000c0c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000bc6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000bce:	e01d      	b.n	8000c0c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a39      	ldr	r2, [pc, #228]	; (8000cc8 <HAL_ADC_Start_DMA+0x1a8>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d004      	beq.n	8000bf0 <HAL_ADC_Start_DMA+0xd0>
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a38      	ldr	r2, [pc, #224]	; (8000ccc <HAL_ADC_Start_DMA+0x1ac>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d10d      	bne.n	8000c0c <HAL_ADC_Start_DMA+0xec>
 8000bf0:	4b35      	ldr	r3, [pc, #212]	; (8000cc8 <HAL_ADC_Start_DMA+0x1a8>)
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d007      	beq.n	8000c0c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c00:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c04:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d006      	beq.n	8000c26 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c1c:	f023 0206 	bic.w	r2, r3, #6
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c24:	e002      	b.n	8000c2c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	2200      	movs	r2, #0
 8000c2a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	2200      	movs	r2, #0
 8000c30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	6a1b      	ldr	r3, [r3, #32]
 8000c38:	4a25      	ldr	r2, [pc, #148]	; (8000cd0 <HAL_ADC_Start_DMA+0x1b0>)
 8000c3a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	6a1b      	ldr	r3, [r3, #32]
 8000c40:	4a24      	ldr	r2, [pc, #144]	; (8000cd4 <HAL_ADC_Start_DMA+0x1b4>)
 8000c42:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	6a1b      	ldr	r3, [r3, #32]
 8000c48:	4a23      	ldr	r2, [pc, #140]	; (8000cd8 <HAL_ADC_Start_DMA+0x1b8>)
 8000c4a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f06f 0202 	mvn.w	r2, #2
 8000c54:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	689a      	ldr	r2, [r3, #8]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000c64:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	6a18      	ldr	r0, [r3, #32]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	334c      	adds	r3, #76	; 0x4c
 8000c70:	4619      	mov	r1, r3
 8000c72:	68ba      	ldr	r2, [r7, #8]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f000 fb9f 	bl	80013b8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000c84:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000c88:	d108      	bne.n	8000c9c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	689a      	ldr	r2, [r3, #8]
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000c98:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000c9a:	e00f      	b.n	8000cbc <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	689a      	ldr	r2, [r3, #8]
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000caa:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000cac:	e006      	b.n	8000cbc <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000cb6:	e001      	b.n	8000cbc <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000cbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3718      	adds	r7, #24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40012400 	.word	0x40012400
 8000ccc:	40012800 	.word	0x40012800
 8000cd0:	0800101d 	.word	0x0800101d
 8000cd4:	08001099 	.word	0x08001099
 8000cd8:	080010b5 	.word	0x080010b5

08000cdc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000ce4:	bf00      	nop
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bc80      	pop	{r7}
 8000cec:	4770      	bx	lr

08000cee <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	b083      	sub	sp, #12
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bc80      	pop	{r7}
 8000cfe:	4770      	bx	lr

08000d00 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr
	...

08000d14 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000d22:	2300      	movs	r3, #0
 8000d24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d101      	bne.n	8000d34 <HAL_ADC_ConfigChannel+0x20>
 8000d30:	2302      	movs	r3, #2
 8000d32:	e0dc      	b.n	8000eee <HAL_ADC_ConfigChannel+0x1da>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2201      	movs	r2, #1
 8000d38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	2b06      	cmp	r3, #6
 8000d42:	d81c      	bhi.n	8000d7e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685a      	ldr	r2, [r3, #4]
 8000d4e:	4613      	mov	r3, r2
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	4413      	add	r3, r2
 8000d54:	3b05      	subs	r3, #5
 8000d56:	221f      	movs	r2, #31
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	4019      	ands	r1, r3
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	6818      	ldr	r0, [r3, #0]
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685a      	ldr	r2, [r3, #4]
 8000d68:	4613      	mov	r3, r2
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	4413      	add	r3, r2
 8000d6e:	3b05      	subs	r3, #5
 8000d70:	fa00 f203 	lsl.w	r2, r0, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	635a      	str	r2, [r3, #52]	; 0x34
 8000d7c:	e03c      	b.n	8000df8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	2b0c      	cmp	r3, #12
 8000d84:	d81c      	bhi.n	8000dc0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685a      	ldr	r2, [r3, #4]
 8000d90:	4613      	mov	r3, r2
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	4413      	add	r3, r2
 8000d96:	3b23      	subs	r3, #35	; 0x23
 8000d98:	221f      	movs	r2, #31
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	4019      	ands	r1, r3
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	6818      	ldr	r0, [r3, #0]
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685a      	ldr	r2, [r3, #4]
 8000daa:	4613      	mov	r3, r2
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	4413      	add	r3, r2
 8000db0:	3b23      	subs	r3, #35	; 0x23
 8000db2:	fa00 f203 	lsl.w	r2, r0, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	631a      	str	r2, [r3, #48]	; 0x30
 8000dbe:	e01b      	b.n	8000df8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685a      	ldr	r2, [r3, #4]
 8000dca:	4613      	mov	r3, r2
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	4413      	add	r3, r2
 8000dd0:	3b41      	subs	r3, #65	; 0x41
 8000dd2:	221f      	movs	r2, #31
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	4019      	ands	r1, r3
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	6818      	ldr	r0, [r3, #0]
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685a      	ldr	r2, [r3, #4]
 8000de4:	4613      	mov	r3, r2
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	4413      	add	r3, r2
 8000dea:	3b41      	subs	r3, #65	; 0x41
 8000dec:	fa00 f203 	lsl.w	r2, r0, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	430a      	orrs	r2, r1
 8000df6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2b09      	cmp	r3, #9
 8000dfe:	d91c      	bls.n	8000e3a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	68d9      	ldr	r1, [r3, #12]
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	4413      	add	r3, r2
 8000e10:	3b1e      	subs	r3, #30
 8000e12:	2207      	movs	r2, #7
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	4019      	ands	r1, r3
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	6898      	ldr	r0, [r3, #8]
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4613      	mov	r3, r2
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	4413      	add	r3, r2
 8000e2a:	3b1e      	subs	r3, #30
 8000e2c:	fa00 f203 	lsl.w	r2, r0, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	430a      	orrs	r2, r1
 8000e36:	60da      	str	r2, [r3, #12]
 8000e38:	e019      	b.n	8000e6e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	6919      	ldr	r1, [r3, #16]
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4613      	mov	r3, r2
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	4413      	add	r3, r2
 8000e4a:	2207      	movs	r2, #7
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	4019      	ands	r1, r3
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	6898      	ldr	r0, [r3, #8]
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	4413      	add	r3, r2
 8000e62:	fa00 f203 	lsl.w	r2, r0, r3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	430a      	orrs	r2, r1
 8000e6c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2b10      	cmp	r3, #16
 8000e74:	d003      	beq.n	8000e7e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e7a:	2b11      	cmp	r3, #17
 8000e7c:	d132      	bne.n	8000ee4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a1d      	ldr	r2, [pc, #116]	; (8000ef8 <HAL_ADC_ConfigChannel+0x1e4>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d125      	bne.n	8000ed4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d126      	bne.n	8000ee4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	689a      	ldr	r2, [r3, #8]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000ea4:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2b10      	cmp	r3, #16
 8000eac:	d11a      	bne.n	8000ee4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000eae:	4b13      	ldr	r3, [pc, #76]	; (8000efc <HAL_ADC_ConfigChannel+0x1e8>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a13      	ldr	r2, [pc, #76]	; (8000f00 <HAL_ADC_ConfigChannel+0x1ec>)
 8000eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb8:	0c9a      	lsrs	r2, r3, #18
 8000eba:	4613      	mov	r3, r2
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	4413      	add	r3, r2
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ec4:	e002      	b.n	8000ecc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	3b01      	subs	r3, #1
 8000eca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d1f9      	bne.n	8000ec6 <HAL_ADC_ConfigChannel+0x1b2>
 8000ed2:	e007      	b.n	8000ee4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed8:	f043 0220 	orr.w	r2, r3, #32
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr
 8000ef8:	40012400 	.word	0x40012400
 8000efc:	20000000 	.word	0x20000000
 8000f00:	431bde83 	.word	0x431bde83

08000f04 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000f10:	2300      	movs	r3, #0
 8000f12:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d039      	beq.n	8000f96 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	689a      	ldr	r2, [r3, #8]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f042 0201 	orr.w	r2, r2, #1
 8000f30:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f32:	4b1b      	ldr	r3, [pc, #108]	; (8000fa0 <ADC_Enable+0x9c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a1b      	ldr	r2, [pc, #108]	; (8000fa4 <ADC_Enable+0xa0>)
 8000f38:	fba2 2303 	umull	r2, r3, r2, r3
 8000f3c:	0c9b      	lsrs	r3, r3, #18
 8000f3e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000f40:	e002      	b.n	8000f48 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	3b01      	subs	r3, #1
 8000f46:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d1f9      	bne.n	8000f42 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f4e:	f7ff fce3 	bl	8000918 <HAL_GetTick>
 8000f52:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000f54:	e018      	b.n	8000f88 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000f56:	f7ff fcdf 	bl	8000918 <HAL_GetTick>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d911      	bls.n	8000f88 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f68:	f043 0210 	orr.w	r2, r3, #16
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f74:	f043 0201 	orr.w	r2, r3, #1
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e007      	b.n	8000f98 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d1df      	bne.n	8000f56 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000f96:	2300      	movs	r3, #0
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000000 	.word	0x20000000
 8000fa4:	431bde83 	.word	0x431bde83

08000fa8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d127      	bne.n	8001012 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	689a      	ldr	r2, [r3, #8]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f022 0201 	bic.w	r2, r2, #1
 8000fd0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000fd2:	f7ff fca1 	bl	8000918 <HAL_GetTick>
 8000fd6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000fd8:	e014      	b.n	8001004 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000fda:	f7ff fc9d 	bl	8000918 <HAL_GetTick>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d90d      	bls.n	8001004 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fec:	f043 0210 	orr.w	r2, r3, #16
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff8:	f043 0201 	orr.w	r2, r3, #1
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	e007      	b.n	8001014 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	2b01      	cmp	r3, #1
 8001010:	d0e3      	beq.n	8000fda <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001012:	2300      	movs	r3, #0
}
 8001014:	4618      	mov	r0, r3
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001028:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800102e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001032:	2b00      	cmp	r3, #0
 8001034:	d127      	bne.n	8001086 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800104c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001050:	d115      	bne.n	800107e <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001056:	2b00      	cmp	r3, #0
 8001058:	d111      	bne.n	800107e <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800105e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800106a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d105      	bne.n	800107e <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001076:	f043 0201 	orr.w	r2, r3, #1
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800107e:	68f8      	ldr	r0, [r7, #12]
 8001080:	f7ff fe2c 	bl	8000cdc <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001084:	e004      	b.n	8001090 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	6a1b      	ldr	r3, [r3, #32]
 800108a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	4798      	blx	r3
}
 8001090:	bf00      	nop
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a4:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80010a6:	68f8      	ldr	r0, [r7, #12]
 80010a8:	f7ff fe21 	bl	8000cee <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80010ac:	bf00      	nop
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c0:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d2:	f043 0204 	orr.w	r2, r3, #4
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80010da:	68f8      	ldr	r0, [r7, #12]
 80010dc:	f7ff fe10 	bl	8000d00 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80010e0:	bf00      	nop
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <__NVIC_SetPriorityGrouping+0x44>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010fe:	68ba      	ldr	r2, [r7, #8]
 8001100:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001104:	4013      	ands	r3, r2
 8001106:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001110:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001118:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800111a:	4a04      	ldr	r2, [pc, #16]	; (800112c <__NVIC_SetPriorityGrouping+0x44>)
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	60d3      	str	r3, [r2, #12]
}
 8001120:	bf00      	nop
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	bc80      	pop	{r7}
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001134:	4b04      	ldr	r3, [pc, #16]	; (8001148 <__NVIC_GetPriorityGrouping+0x18>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	0a1b      	lsrs	r3, r3, #8
 800113a:	f003 0307 	and.w	r3, r3, #7
}
 800113e:	4618      	mov	r0, r3
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	2b00      	cmp	r3, #0
 800115c:	db0b      	blt.n	8001176 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	f003 021f 	and.w	r2, r3, #31
 8001164:	4906      	ldr	r1, [pc, #24]	; (8001180 <__NVIC_EnableIRQ+0x34>)
 8001166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116a:	095b      	lsrs	r3, r3, #5
 800116c:	2001      	movs	r0, #1
 800116e:	fa00 f202 	lsl.w	r2, r0, r2
 8001172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr
 8001180:	e000e100 	.word	0xe000e100

08001184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	6039      	str	r1, [r7, #0]
 800118e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001194:	2b00      	cmp	r3, #0
 8001196:	db0a      	blt.n	80011ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	b2da      	uxtb	r2, r3
 800119c:	490c      	ldr	r1, [pc, #48]	; (80011d0 <__NVIC_SetPriority+0x4c>)
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	0112      	lsls	r2, r2, #4
 80011a4:	b2d2      	uxtb	r2, r2
 80011a6:	440b      	add	r3, r1
 80011a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011ac:	e00a      	b.n	80011c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	4908      	ldr	r1, [pc, #32]	; (80011d4 <__NVIC_SetPriority+0x50>)
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	f003 030f 	and.w	r3, r3, #15
 80011ba:	3b04      	subs	r3, #4
 80011bc:	0112      	lsls	r2, r2, #4
 80011be:	b2d2      	uxtb	r2, r2
 80011c0:	440b      	add	r3, r1
 80011c2:	761a      	strb	r2, [r3, #24]
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000e100 	.word	0xe000e100
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d8:	b480      	push	{r7}
 80011da:	b089      	sub	sp, #36	; 0x24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	f1c3 0307 	rsb	r3, r3, #7
 80011f2:	2b04      	cmp	r3, #4
 80011f4:	bf28      	it	cs
 80011f6:	2304      	movcs	r3, #4
 80011f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3304      	adds	r3, #4
 80011fe:	2b06      	cmp	r3, #6
 8001200:	d902      	bls.n	8001208 <NVIC_EncodePriority+0x30>
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3b03      	subs	r3, #3
 8001206:	e000      	b.n	800120a <NVIC_EncodePriority+0x32>
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	f04f 32ff 	mov.w	r2, #4294967295
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43da      	mvns	r2, r3
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	401a      	ands	r2, r3
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001220:	f04f 31ff 	mov.w	r1, #4294967295
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	fa01 f303 	lsl.w	r3, r1, r3
 800122a:	43d9      	mvns	r1, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001230:	4313      	orrs	r3, r2
         );
}
 8001232:	4618      	mov	r0, r3
 8001234:	3724      	adds	r7, #36	; 0x24
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr

0800123c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3b01      	subs	r3, #1
 8001248:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800124c:	d301      	bcc.n	8001252 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800124e:	2301      	movs	r3, #1
 8001250:	e00f      	b.n	8001272 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001252:	4a0a      	ldr	r2, [pc, #40]	; (800127c <SysTick_Config+0x40>)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3b01      	subs	r3, #1
 8001258:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800125a:	210f      	movs	r1, #15
 800125c:	f04f 30ff 	mov.w	r0, #4294967295
 8001260:	f7ff ff90 	bl	8001184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <SysTick_Config+0x40>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800126a:	4b04      	ldr	r3, [pc, #16]	; (800127c <SysTick_Config+0x40>)
 800126c:	2207      	movs	r2, #7
 800126e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	e000e010 	.word	0xe000e010

08001280 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7ff ff2d 	bl	80010e8 <__NVIC_SetPriorityGrouping>
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001296:	b580      	push	{r7, lr}
 8001298:	b086      	sub	sp, #24
 800129a:	af00      	add	r7, sp, #0
 800129c:	4603      	mov	r3, r0
 800129e:	60b9      	str	r1, [r7, #8]
 80012a0:	607a      	str	r2, [r7, #4]
 80012a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012a8:	f7ff ff42 	bl	8001130 <__NVIC_GetPriorityGrouping>
 80012ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	68b9      	ldr	r1, [r7, #8]
 80012b2:	6978      	ldr	r0, [r7, #20]
 80012b4:	f7ff ff90 	bl	80011d8 <NVIC_EncodePriority>
 80012b8:	4602      	mov	r2, r0
 80012ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012be:	4611      	mov	r1, r2
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff5f 	bl	8001184 <__NVIC_SetPriority>
}
 80012c6:	bf00      	nop
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	4603      	mov	r3, r0
 80012d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff ff35 	bl	800114c <__NVIC_EnableIRQ>
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff ffa2 	bl	800123c <SysTick_Config>
 80012f8:	4603      	mov	r3, r0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
	...

08001304 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800130c:	2300      	movs	r3, #0
 800130e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d101      	bne.n	800131a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e043      	b.n	80013a2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	461a      	mov	r2, r3
 8001320:	4b22      	ldr	r3, [pc, #136]	; (80013ac <HAL_DMA_Init+0xa8>)
 8001322:	4413      	add	r3, r2
 8001324:	4a22      	ldr	r2, [pc, #136]	; (80013b0 <HAL_DMA_Init+0xac>)
 8001326:	fba2 2303 	umull	r2, r3, r2, r3
 800132a:	091b      	lsrs	r3, r3, #4
 800132c:	009a      	lsls	r2, r3, #2
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a1f      	ldr	r2, [pc, #124]	; (80013b4 <HAL_DMA_Init+0xb0>)
 8001336:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2202      	movs	r2, #2
 800133c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800134e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001352:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800135c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001368:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001374:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800137c:	68fa      	ldr	r2, [r7, #12]
 800137e:	4313      	orrs	r3, r2
 8001380:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2201      	movs	r2, #1
 8001394:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3714      	adds	r7, #20
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr
 80013ac:	bffdfff8 	.word	0xbffdfff8
 80013b0:	cccccccd 	.word	0xcccccccd
 80013b4:	40020000 	.word	0x40020000

080013b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
 80013c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013c6:	2300      	movs	r3, #0
 80013c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d101      	bne.n	80013d8 <HAL_DMA_Start_IT+0x20>
 80013d4:	2302      	movs	r3, #2
 80013d6:	e04a      	b.n	800146e <HAL_DMA_Start_IT+0xb6>
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2201      	movs	r2, #1
 80013dc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d13a      	bne.n	8001460 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2202      	movs	r2, #2
 80013ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2200      	movs	r2, #0
 80013f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 0201 	bic.w	r2, r2, #1
 8001406:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	68b9      	ldr	r1, [r7, #8]
 800140e:	68f8      	ldr	r0, [r7, #12]
 8001410:	f000 f938 	bl	8001684 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001418:	2b00      	cmp	r3, #0
 800141a:	d008      	beq.n	800142e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f042 020e 	orr.w	r2, r2, #14
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	e00f      	b.n	800144e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f022 0204 	bic.w	r2, r2, #4
 800143c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f042 020a 	orr.w	r2, r2, #10
 800144c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f042 0201 	orr.w	r2, r2, #1
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	e005      	b.n	800146c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2200      	movs	r2, #0
 8001464:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001468:	2302      	movs	r3, #2
 800146a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800146c:	7dfb      	ldrb	r3, [r7, #23]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001494:	2204      	movs	r2, #4
 8001496:	409a      	lsls	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	4013      	ands	r3, r2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d04f      	beq.n	8001540 <HAL_DMA_IRQHandler+0xc8>
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	f003 0304 	and.w	r3, r3, #4
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d04a      	beq.n	8001540 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0320 	and.w	r3, r3, #32
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d107      	bne.n	80014c8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f022 0204 	bic.w	r2, r2, #4
 80014c6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a66      	ldr	r2, [pc, #408]	; (8001668 <HAL_DMA_IRQHandler+0x1f0>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d029      	beq.n	8001526 <HAL_DMA_IRQHandler+0xae>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a65      	ldr	r2, [pc, #404]	; (800166c <HAL_DMA_IRQHandler+0x1f4>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d022      	beq.n	8001522 <HAL_DMA_IRQHandler+0xaa>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a63      	ldr	r2, [pc, #396]	; (8001670 <HAL_DMA_IRQHandler+0x1f8>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d01a      	beq.n	800151c <HAL_DMA_IRQHandler+0xa4>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a62      	ldr	r2, [pc, #392]	; (8001674 <HAL_DMA_IRQHandler+0x1fc>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d012      	beq.n	8001516 <HAL_DMA_IRQHandler+0x9e>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a60      	ldr	r2, [pc, #384]	; (8001678 <HAL_DMA_IRQHandler+0x200>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d00a      	beq.n	8001510 <HAL_DMA_IRQHandler+0x98>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a5f      	ldr	r2, [pc, #380]	; (800167c <HAL_DMA_IRQHandler+0x204>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d102      	bne.n	800150a <HAL_DMA_IRQHandler+0x92>
 8001504:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001508:	e00e      	b.n	8001528 <HAL_DMA_IRQHandler+0xb0>
 800150a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800150e:	e00b      	b.n	8001528 <HAL_DMA_IRQHandler+0xb0>
 8001510:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001514:	e008      	b.n	8001528 <HAL_DMA_IRQHandler+0xb0>
 8001516:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800151a:	e005      	b.n	8001528 <HAL_DMA_IRQHandler+0xb0>
 800151c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001520:	e002      	b.n	8001528 <HAL_DMA_IRQHandler+0xb0>
 8001522:	2340      	movs	r3, #64	; 0x40
 8001524:	e000      	b.n	8001528 <HAL_DMA_IRQHandler+0xb0>
 8001526:	2304      	movs	r3, #4
 8001528:	4a55      	ldr	r2, [pc, #340]	; (8001680 <HAL_DMA_IRQHandler+0x208>)
 800152a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001530:	2b00      	cmp	r3, #0
 8001532:	f000 8094 	beq.w	800165e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800153e:	e08e      	b.n	800165e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001544:	2202      	movs	r2, #2
 8001546:	409a      	lsls	r2, r3
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	4013      	ands	r3, r2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d056      	beq.n	80015fe <HAL_DMA_IRQHandler+0x186>
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d051      	beq.n	80015fe <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0320 	and.w	r3, r3, #32
 8001564:	2b00      	cmp	r3, #0
 8001566:	d10b      	bne.n	8001580 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f022 020a 	bic.w	r2, r2, #10
 8001576:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a38      	ldr	r2, [pc, #224]	; (8001668 <HAL_DMA_IRQHandler+0x1f0>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d029      	beq.n	80015de <HAL_DMA_IRQHandler+0x166>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a37      	ldr	r2, [pc, #220]	; (800166c <HAL_DMA_IRQHandler+0x1f4>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d022      	beq.n	80015da <HAL_DMA_IRQHandler+0x162>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a35      	ldr	r2, [pc, #212]	; (8001670 <HAL_DMA_IRQHandler+0x1f8>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d01a      	beq.n	80015d4 <HAL_DMA_IRQHandler+0x15c>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a34      	ldr	r2, [pc, #208]	; (8001674 <HAL_DMA_IRQHandler+0x1fc>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d012      	beq.n	80015ce <HAL_DMA_IRQHandler+0x156>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a32      	ldr	r2, [pc, #200]	; (8001678 <HAL_DMA_IRQHandler+0x200>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d00a      	beq.n	80015c8 <HAL_DMA_IRQHandler+0x150>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a31      	ldr	r2, [pc, #196]	; (800167c <HAL_DMA_IRQHandler+0x204>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d102      	bne.n	80015c2 <HAL_DMA_IRQHandler+0x14a>
 80015bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80015c0:	e00e      	b.n	80015e0 <HAL_DMA_IRQHandler+0x168>
 80015c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015c6:	e00b      	b.n	80015e0 <HAL_DMA_IRQHandler+0x168>
 80015c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015cc:	e008      	b.n	80015e0 <HAL_DMA_IRQHandler+0x168>
 80015ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015d2:	e005      	b.n	80015e0 <HAL_DMA_IRQHandler+0x168>
 80015d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015d8:	e002      	b.n	80015e0 <HAL_DMA_IRQHandler+0x168>
 80015da:	2320      	movs	r3, #32
 80015dc:	e000      	b.n	80015e0 <HAL_DMA_IRQHandler+0x168>
 80015de:	2302      	movs	r3, #2
 80015e0:	4a27      	ldr	r2, [pc, #156]	; (8001680 <HAL_DMA_IRQHandler+0x208>)
 80015e2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d034      	beq.n	800165e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80015fc:	e02f      	b.n	800165e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	2208      	movs	r2, #8
 8001604:	409a      	lsls	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	4013      	ands	r3, r2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d028      	beq.n	8001660 <HAL_DMA_IRQHandler+0x1e8>
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	f003 0308 	and.w	r3, r3, #8
 8001614:	2b00      	cmp	r3, #0
 8001616:	d023      	beq.n	8001660 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f022 020e 	bic.w	r2, r2, #14
 8001626:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001630:	2101      	movs	r1, #1
 8001632:	fa01 f202 	lsl.w	r2, r1, r2
 8001636:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2201      	movs	r2, #1
 8001642:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	2b00      	cmp	r3, #0
 8001654:	d004      	beq.n	8001660 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	4798      	blx	r3
    }
  }
  return;
 800165e:	bf00      	nop
 8001660:	bf00      	nop
}
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40020008 	.word	0x40020008
 800166c:	4002001c 	.word	0x4002001c
 8001670:	40020030 	.word	0x40020030
 8001674:	40020044 	.word	0x40020044
 8001678:	40020058 	.word	0x40020058
 800167c:	4002006c 	.word	0x4002006c
 8001680:	40020000 	.word	0x40020000

08001684 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
 8001690:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800169a:	2101      	movs	r1, #1
 800169c:	fa01 f202 	lsl.w	r2, r1, r2
 80016a0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	683a      	ldr	r2, [r7, #0]
 80016a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	2b10      	cmp	r3, #16
 80016b0:	d108      	bne.n	80016c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80016c2:	e007      	b.n	80016d4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	68ba      	ldr	r2, [r7, #8]
 80016ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	60da      	str	r2, [r3, #12]
}
 80016d4:	bf00      	nop
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr
	...

080016e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b08b      	sub	sp, #44	; 0x2c
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ea:	2300      	movs	r3, #0
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016ee:	2300      	movs	r3, #0
 80016f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016f2:	e127      	b.n	8001944 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016f4:	2201      	movs	r2, #1
 80016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	69fa      	ldr	r2, [r7, #28]
 8001704:	4013      	ands	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	429a      	cmp	r2, r3
 800170e:	f040 8116 	bne.w	800193e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b12      	cmp	r3, #18
 8001718:	d034      	beq.n	8001784 <HAL_GPIO_Init+0xa4>
 800171a:	2b12      	cmp	r3, #18
 800171c:	d80d      	bhi.n	800173a <HAL_GPIO_Init+0x5a>
 800171e:	2b02      	cmp	r3, #2
 8001720:	d02b      	beq.n	800177a <HAL_GPIO_Init+0x9a>
 8001722:	2b02      	cmp	r3, #2
 8001724:	d804      	bhi.n	8001730 <HAL_GPIO_Init+0x50>
 8001726:	2b00      	cmp	r3, #0
 8001728:	d031      	beq.n	800178e <HAL_GPIO_Init+0xae>
 800172a:	2b01      	cmp	r3, #1
 800172c:	d01c      	beq.n	8001768 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800172e:	e048      	b.n	80017c2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001730:	2b03      	cmp	r3, #3
 8001732:	d043      	beq.n	80017bc <HAL_GPIO_Init+0xdc>
 8001734:	2b11      	cmp	r3, #17
 8001736:	d01b      	beq.n	8001770 <HAL_GPIO_Init+0x90>
          break;
 8001738:	e043      	b.n	80017c2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800173a:	4a89      	ldr	r2, [pc, #548]	; (8001960 <HAL_GPIO_Init+0x280>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d026      	beq.n	800178e <HAL_GPIO_Init+0xae>
 8001740:	4a87      	ldr	r2, [pc, #540]	; (8001960 <HAL_GPIO_Init+0x280>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d806      	bhi.n	8001754 <HAL_GPIO_Init+0x74>
 8001746:	4a87      	ldr	r2, [pc, #540]	; (8001964 <HAL_GPIO_Init+0x284>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d020      	beq.n	800178e <HAL_GPIO_Init+0xae>
 800174c:	4a86      	ldr	r2, [pc, #536]	; (8001968 <HAL_GPIO_Init+0x288>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d01d      	beq.n	800178e <HAL_GPIO_Init+0xae>
          break;
 8001752:	e036      	b.n	80017c2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001754:	4a85      	ldr	r2, [pc, #532]	; (800196c <HAL_GPIO_Init+0x28c>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d019      	beq.n	800178e <HAL_GPIO_Init+0xae>
 800175a:	4a85      	ldr	r2, [pc, #532]	; (8001970 <HAL_GPIO_Init+0x290>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d016      	beq.n	800178e <HAL_GPIO_Init+0xae>
 8001760:	4a84      	ldr	r2, [pc, #528]	; (8001974 <HAL_GPIO_Init+0x294>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d013      	beq.n	800178e <HAL_GPIO_Init+0xae>
          break;
 8001766:	e02c      	b.n	80017c2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	623b      	str	r3, [r7, #32]
          break;
 800176e:	e028      	b.n	80017c2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	3304      	adds	r3, #4
 8001776:	623b      	str	r3, [r7, #32]
          break;
 8001778:	e023      	b.n	80017c2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	3308      	adds	r3, #8
 8001780:	623b      	str	r3, [r7, #32]
          break;
 8001782:	e01e      	b.n	80017c2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	330c      	adds	r3, #12
 800178a:	623b      	str	r3, [r7, #32]
          break;
 800178c:	e019      	b.n	80017c2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d102      	bne.n	800179c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001796:	2304      	movs	r3, #4
 8001798:	623b      	str	r3, [r7, #32]
          break;
 800179a:	e012      	b.n	80017c2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d105      	bne.n	80017b0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017a4:	2308      	movs	r3, #8
 80017a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	69fa      	ldr	r2, [r7, #28]
 80017ac:	611a      	str	r2, [r3, #16]
          break;
 80017ae:	e008      	b.n	80017c2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017b0:	2308      	movs	r3, #8
 80017b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	69fa      	ldr	r2, [r7, #28]
 80017b8:	615a      	str	r2, [r3, #20]
          break;
 80017ba:	e002      	b.n	80017c2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017bc:	2300      	movs	r3, #0
 80017be:	623b      	str	r3, [r7, #32]
          break;
 80017c0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	2bff      	cmp	r3, #255	; 0xff
 80017c6:	d801      	bhi.n	80017cc <HAL_GPIO_Init+0xec>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	e001      	b.n	80017d0 <HAL_GPIO_Init+0xf0>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3304      	adds	r3, #4
 80017d0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	2bff      	cmp	r3, #255	; 0xff
 80017d6:	d802      	bhi.n	80017de <HAL_GPIO_Init+0xfe>
 80017d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	e002      	b.n	80017e4 <HAL_GPIO_Init+0x104>
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	3b08      	subs	r3, #8
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	210f      	movs	r1, #15
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	fa01 f303 	lsl.w	r3, r1, r3
 80017f2:	43db      	mvns	r3, r3
 80017f4:	401a      	ands	r2, r3
 80017f6:	6a39      	ldr	r1, [r7, #32]
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	fa01 f303 	lsl.w	r3, r1, r3
 80017fe:	431a      	orrs	r2, r3
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180c:	2b00      	cmp	r3, #0
 800180e:	f000 8096 	beq.w	800193e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001812:	4b59      	ldr	r3, [pc, #356]	; (8001978 <HAL_GPIO_Init+0x298>)
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	4a58      	ldr	r2, [pc, #352]	; (8001978 <HAL_GPIO_Init+0x298>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	6193      	str	r3, [r2, #24]
 800181e:	4b56      	ldr	r3, [pc, #344]	; (8001978 <HAL_GPIO_Init+0x298>)
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	60bb      	str	r3, [r7, #8]
 8001828:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800182a:	4a54      	ldr	r2, [pc, #336]	; (800197c <HAL_GPIO_Init+0x29c>)
 800182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182e:	089b      	lsrs	r3, r3, #2
 8001830:	3302      	adds	r3, #2
 8001832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001836:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183a:	f003 0303 	and.w	r3, r3, #3
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	220f      	movs	r2, #15
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	43db      	mvns	r3, r3
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	4013      	ands	r3, r2
 800184c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a4b      	ldr	r2, [pc, #300]	; (8001980 <HAL_GPIO_Init+0x2a0>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d013      	beq.n	800187e <HAL_GPIO_Init+0x19e>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a4a      	ldr	r2, [pc, #296]	; (8001984 <HAL_GPIO_Init+0x2a4>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d00d      	beq.n	800187a <HAL_GPIO_Init+0x19a>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a49      	ldr	r2, [pc, #292]	; (8001988 <HAL_GPIO_Init+0x2a8>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d007      	beq.n	8001876 <HAL_GPIO_Init+0x196>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a48      	ldr	r2, [pc, #288]	; (800198c <HAL_GPIO_Init+0x2ac>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d101      	bne.n	8001872 <HAL_GPIO_Init+0x192>
 800186e:	2303      	movs	r3, #3
 8001870:	e006      	b.n	8001880 <HAL_GPIO_Init+0x1a0>
 8001872:	2304      	movs	r3, #4
 8001874:	e004      	b.n	8001880 <HAL_GPIO_Init+0x1a0>
 8001876:	2302      	movs	r3, #2
 8001878:	e002      	b.n	8001880 <HAL_GPIO_Init+0x1a0>
 800187a:	2301      	movs	r3, #1
 800187c:	e000      	b.n	8001880 <HAL_GPIO_Init+0x1a0>
 800187e:	2300      	movs	r3, #0
 8001880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001882:	f002 0203 	and.w	r2, r2, #3
 8001886:	0092      	lsls	r2, r2, #2
 8001888:	4093      	lsls	r3, r2
 800188a:	68fa      	ldr	r2, [r7, #12]
 800188c:	4313      	orrs	r3, r2
 800188e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001890:	493a      	ldr	r1, [pc, #232]	; (800197c <HAL_GPIO_Init+0x29c>)
 8001892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001894:	089b      	lsrs	r3, r3, #2
 8001896:	3302      	adds	r3, #2
 8001898:	68fa      	ldr	r2, [r7, #12]
 800189a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d006      	beq.n	80018b8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018aa:	4b39      	ldr	r3, [pc, #228]	; (8001990 <HAL_GPIO_Init+0x2b0>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	4938      	ldr	r1, [pc, #224]	; (8001990 <HAL_GPIO_Init+0x2b0>)
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	600b      	str	r3, [r1, #0]
 80018b6:	e006      	b.n	80018c6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018b8:	4b35      	ldr	r3, [pc, #212]	; (8001990 <HAL_GPIO_Init+0x2b0>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	43db      	mvns	r3, r3
 80018c0:	4933      	ldr	r1, [pc, #204]	; (8001990 <HAL_GPIO_Init+0x2b0>)
 80018c2:	4013      	ands	r3, r2
 80018c4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d006      	beq.n	80018e0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018d2:	4b2f      	ldr	r3, [pc, #188]	; (8001990 <HAL_GPIO_Init+0x2b0>)
 80018d4:	685a      	ldr	r2, [r3, #4]
 80018d6:	492e      	ldr	r1, [pc, #184]	; (8001990 <HAL_GPIO_Init+0x2b0>)
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	4313      	orrs	r3, r2
 80018dc:	604b      	str	r3, [r1, #4]
 80018de:	e006      	b.n	80018ee <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018e0:	4b2b      	ldr	r3, [pc, #172]	; (8001990 <HAL_GPIO_Init+0x2b0>)
 80018e2:	685a      	ldr	r2, [r3, #4]
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	43db      	mvns	r3, r3
 80018e8:	4929      	ldr	r1, [pc, #164]	; (8001990 <HAL_GPIO_Init+0x2b0>)
 80018ea:	4013      	ands	r3, r2
 80018ec:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d006      	beq.n	8001908 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018fa:	4b25      	ldr	r3, [pc, #148]	; (8001990 <HAL_GPIO_Init+0x2b0>)
 80018fc:	689a      	ldr	r2, [r3, #8]
 80018fe:	4924      	ldr	r1, [pc, #144]	; (8001990 <HAL_GPIO_Init+0x2b0>)
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	4313      	orrs	r3, r2
 8001904:	608b      	str	r3, [r1, #8]
 8001906:	e006      	b.n	8001916 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001908:	4b21      	ldr	r3, [pc, #132]	; (8001990 <HAL_GPIO_Init+0x2b0>)
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	43db      	mvns	r3, r3
 8001910:	491f      	ldr	r1, [pc, #124]	; (8001990 <HAL_GPIO_Init+0x2b0>)
 8001912:	4013      	ands	r3, r2
 8001914:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d006      	beq.n	8001930 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001922:	4b1b      	ldr	r3, [pc, #108]	; (8001990 <HAL_GPIO_Init+0x2b0>)
 8001924:	68da      	ldr	r2, [r3, #12]
 8001926:	491a      	ldr	r1, [pc, #104]	; (8001990 <HAL_GPIO_Init+0x2b0>)
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	4313      	orrs	r3, r2
 800192c:	60cb      	str	r3, [r1, #12]
 800192e:	e006      	b.n	800193e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001930:	4b17      	ldr	r3, [pc, #92]	; (8001990 <HAL_GPIO_Init+0x2b0>)
 8001932:	68da      	ldr	r2, [r3, #12]
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	43db      	mvns	r3, r3
 8001938:	4915      	ldr	r1, [pc, #84]	; (8001990 <HAL_GPIO_Init+0x2b0>)
 800193a:	4013      	ands	r3, r2
 800193c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	3301      	adds	r3, #1
 8001942:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194a:	fa22 f303 	lsr.w	r3, r2, r3
 800194e:	2b00      	cmp	r3, #0
 8001950:	f47f aed0 	bne.w	80016f4 <HAL_GPIO_Init+0x14>
  }
}
 8001954:	bf00      	nop
 8001956:	372c      	adds	r7, #44	; 0x2c
 8001958:	46bd      	mov	sp, r7
 800195a:	bc80      	pop	{r7}
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	10210000 	.word	0x10210000
 8001964:	10110000 	.word	0x10110000
 8001968:	10120000 	.word	0x10120000
 800196c:	10310000 	.word	0x10310000
 8001970:	10320000 	.word	0x10320000
 8001974:	10220000 	.word	0x10220000
 8001978:	40021000 	.word	0x40021000
 800197c:	40010000 	.word	0x40010000
 8001980:	40010800 	.word	0x40010800
 8001984:	40010c00 	.word	0x40010c00
 8001988:	40011000 	.word	0x40011000
 800198c:	40011400 	.word	0x40011400
 8001990:	40010400 	.word	0x40010400

08001994 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e26c      	b.n	8001e80 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f000 8087 	beq.w	8001ac2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019b4:	4b92      	ldr	r3, [pc, #584]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 030c 	and.w	r3, r3, #12
 80019bc:	2b04      	cmp	r3, #4
 80019be:	d00c      	beq.n	80019da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019c0:	4b8f      	ldr	r3, [pc, #572]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 030c 	and.w	r3, r3, #12
 80019c8:	2b08      	cmp	r3, #8
 80019ca:	d112      	bne.n	80019f2 <HAL_RCC_OscConfig+0x5e>
 80019cc:	4b8c      	ldr	r3, [pc, #560]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019d8:	d10b      	bne.n	80019f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019da:	4b89      	ldr	r3, [pc, #548]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d06c      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x12c>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d168      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e246      	b.n	8001e80 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019fa:	d106      	bne.n	8001a0a <HAL_RCC_OscConfig+0x76>
 80019fc:	4b80      	ldr	r3, [pc, #512]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a7f      	ldr	r2, [pc, #508]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001a02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a06:	6013      	str	r3, [r2, #0]
 8001a08:	e02e      	b.n	8001a68 <HAL_RCC_OscConfig+0xd4>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d10c      	bne.n	8001a2c <HAL_RCC_OscConfig+0x98>
 8001a12:	4b7b      	ldr	r3, [pc, #492]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a7a      	ldr	r2, [pc, #488]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001a18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	4b78      	ldr	r3, [pc, #480]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a77      	ldr	r2, [pc, #476]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001a24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a28:	6013      	str	r3, [r2, #0]
 8001a2a:	e01d      	b.n	8001a68 <HAL_RCC_OscConfig+0xd4>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a34:	d10c      	bne.n	8001a50 <HAL_RCC_OscConfig+0xbc>
 8001a36:	4b72      	ldr	r3, [pc, #456]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a71      	ldr	r2, [pc, #452]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a40:	6013      	str	r3, [r2, #0]
 8001a42:	4b6f      	ldr	r3, [pc, #444]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a6e      	ldr	r2, [pc, #440]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a4c:	6013      	str	r3, [r2, #0]
 8001a4e:	e00b      	b.n	8001a68 <HAL_RCC_OscConfig+0xd4>
 8001a50:	4b6b      	ldr	r3, [pc, #428]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a6a      	ldr	r2, [pc, #424]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001a56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a5a:	6013      	str	r3, [r2, #0]
 8001a5c:	4b68      	ldr	r3, [pc, #416]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a67      	ldr	r2, [pc, #412]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001a62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d013      	beq.n	8001a98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a70:	f7fe ff52 	bl	8000918 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a78:	f7fe ff4e 	bl	8000918 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b64      	cmp	r3, #100	; 0x64
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e1fa      	b.n	8001e80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a8a:	4b5d      	ldr	r3, [pc, #372]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0f0      	beq.n	8001a78 <HAL_RCC_OscConfig+0xe4>
 8001a96:	e014      	b.n	8001ac2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a98:	f7fe ff3e 	bl	8000918 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa0:	f7fe ff3a 	bl	8000918 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b64      	cmp	r3, #100	; 0x64
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e1e6      	b.n	8001e80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ab2:	4b53      	ldr	r3, [pc, #332]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1f0      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x10c>
 8001abe:	e000      	b.n	8001ac2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d063      	beq.n	8001b96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ace:	4b4c      	ldr	r3, [pc, #304]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f003 030c 	and.w	r3, r3, #12
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d00b      	beq.n	8001af2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ada:	4b49      	ldr	r3, [pc, #292]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f003 030c 	and.w	r3, r3, #12
 8001ae2:	2b08      	cmp	r3, #8
 8001ae4:	d11c      	bne.n	8001b20 <HAL_RCC_OscConfig+0x18c>
 8001ae6:	4b46      	ldr	r3, [pc, #280]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d116      	bne.n	8001b20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001af2:	4b43      	ldr	r3, [pc, #268]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d005      	beq.n	8001b0a <HAL_RCC_OscConfig+0x176>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d001      	beq.n	8001b0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e1ba      	b.n	8001e80 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b0a:	4b3d      	ldr	r3, [pc, #244]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	4939      	ldr	r1, [pc, #228]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b1e:	e03a      	b.n	8001b96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d020      	beq.n	8001b6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b28:	4b36      	ldr	r3, [pc, #216]	; (8001c04 <HAL_RCC_OscConfig+0x270>)
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2e:	f7fe fef3 	bl	8000918 <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b34:	e008      	b.n	8001b48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b36:	f7fe feef 	bl	8000918 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e19b      	b.n	8001e80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b48:	4b2d      	ldr	r3, [pc, #180]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d0f0      	beq.n	8001b36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b54:	4b2a      	ldr	r3, [pc, #168]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	695b      	ldr	r3, [r3, #20]
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	4927      	ldr	r1, [pc, #156]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001b64:	4313      	orrs	r3, r2
 8001b66:	600b      	str	r3, [r1, #0]
 8001b68:	e015      	b.n	8001b96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b6a:	4b26      	ldr	r3, [pc, #152]	; (8001c04 <HAL_RCC_OscConfig+0x270>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b70:	f7fe fed2 	bl	8000918 <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b78:	f7fe fece 	bl	8000918 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e17a      	b.n	8001e80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b8a:	4b1d      	ldr	r3, [pc, #116]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1f0      	bne.n	8001b78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0308 	and.w	r3, r3, #8
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d03a      	beq.n	8001c18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d019      	beq.n	8001bde <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001baa:	4b17      	ldr	r3, [pc, #92]	; (8001c08 <HAL_RCC_OscConfig+0x274>)
 8001bac:	2201      	movs	r2, #1
 8001bae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb0:	f7fe feb2 	bl	8000918 <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb8:	f7fe feae 	bl	8000918 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e15a      	b.n	8001e80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bca:	4b0d      	ldr	r3, [pc, #52]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d0f0      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bd6:	2001      	movs	r0, #1
 8001bd8:	f000 fada 	bl	8002190 <RCC_Delay>
 8001bdc:	e01c      	b.n	8001c18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bde:	4b0a      	ldr	r3, [pc, #40]	; (8001c08 <HAL_RCC_OscConfig+0x274>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be4:	f7fe fe98 	bl	8000918 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bea:	e00f      	b.n	8001c0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bec:	f7fe fe94 	bl	8000918 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d908      	bls.n	8001c0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e140      	b.n	8001e80 <HAL_RCC_OscConfig+0x4ec>
 8001bfe:	bf00      	nop
 8001c00:	40021000 	.word	0x40021000
 8001c04:	42420000 	.word	0x42420000
 8001c08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c0c:	4b9e      	ldr	r3, [pc, #632]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1e9      	bne.n	8001bec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f000 80a6 	beq.w	8001d72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c26:	2300      	movs	r3, #0
 8001c28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c2a:	4b97      	ldr	r3, [pc, #604]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10d      	bne.n	8001c52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c36:	4b94      	ldr	r3, [pc, #592]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	4a93      	ldr	r2, [pc, #588]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c40:	61d3      	str	r3, [r2, #28]
 8001c42:	4b91      	ldr	r3, [pc, #580]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4a:	60bb      	str	r3, [r7, #8]
 8001c4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c52:	4b8e      	ldr	r3, [pc, #568]	; (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d118      	bne.n	8001c90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c5e:	4b8b      	ldr	r3, [pc, #556]	; (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a8a      	ldr	r2, [pc, #552]	; (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c6a:	f7fe fe55 	bl	8000918 <HAL_GetTick>
 8001c6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c70:	e008      	b.n	8001c84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c72:	f7fe fe51 	bl	8000918 <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b64      	cmp	r3, #100	; 0x64
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e0fd      	b.n	8001e80 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c84:	4b81      	ldr	r3, [pc, #516]	; (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d0f0      	beq.n	8001c72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d106      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x312>
 8001c98:	4b7b      	ldr	r3, [pc, #492]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	4a7a      	ldr	r2, [pc, #488]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001c9e:	f043 0301 	orr.w	r3, r3, #1
 8001ca2:	6213      	str	r3, [r2, #32]
 8001ca4:	e02d      	b.n	8001d02 <HAL_RCC_OscConfig+0x36e>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d10c      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x334>
 8001cae:	4b76      	ldr	r3, [pc, #472]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
 8001cb2:	4a75      	ldr	r2, [pc, #468]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001cb4:	f023 0301 	bic.w	r3, r3, #1
 8001cb8:	6213      	str	r3, [r2, #32]
 8001cba:	4b73      	ldr	r3, [pc, #460]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
 8001cbe:	4a72      	ldr	r2, [pc, #456]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001cc0:	f023 0304 	bic.w	r3, r3, #4
 8001cc4:	6213      	str	r3, [r2, #32]
 8001cc6:	e01c      	b.n	8001d02 <HAL_RCC_OscConfig+0x36e>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	2b05      	cmp	r3, #5
 8001cce:	d10c      	bne.n	8001cea <HAL_RCC_OscConfig+0x356>
 8001cd0:	4b6d      	ldr	r3, [pc, #436]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	4a6c      	ldr	r2, [pc, #432]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001cd6:	f043 0304 	orr.w	r3, r3, #4
 8001cda:	6213      	str	r3, [r2, #32]
 8001cdc:	4b6a      	ldr	r3, [pc, #424]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	4a69      	ldr	r2, [pc, #420]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001ce2:	f043 0301 	orr.w	r3, r3, #1
 8001ce6:	6213      	str	r3, [r2, #32]
 8001ce8:	e00b      	b.n	8001d02 <HAL_RCC_OscConfig+0x36e>
 8001cea:	4b67      	ldr	r3, [pc, #412]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001cec:	6a1b      	ldr	r3, [r3, #32]
 8001cee:	4a66      	ldr	r2, [pc, #408]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001cf0:	f023 0301 	bic.w	r3, r3, #1
 8001cf4:	6213      	str	r3, [r2, #32]
 8001cf6:	4b64      	ldr	r3, [pc, #400]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	4a63      	ldr	r2, [pc, #396]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001cfc:	f023 0304 	bic.w	r3, r3, #4
 8001d00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d015      	beq.n	8001d36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d0a:	f7fe fe05 	bl	8000918 <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d10:	e00a      	b.n	8001d28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d12:	f7fe fe01 	bl	8000918 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e0ab      	b.n	8001e80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d28:	4b57      	ldr	r3, [pc, #348]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001d2a:	6a1b      	ldr	r3, [r3, #32]
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d0ee      	beq.n	8001d12 <HAL_RCC_OscConfig+0x37e>
 8001d34:	e014      	b.n	8001d60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d36:	f7fe fdef 	bl	8000918 <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d3c:	e00a      	b.n	8001d54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d3e:	f7fe fdeb 	bl	8000918 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e095      	b.n	8001e80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d54:	4b4c      	ldr	r3, [pc, #304]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1ee      	bne.n	8001d3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d60:	7dfb      	ldrb	r3, [r7, #23]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d105      	bne.n	8001d72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d66:	4b48      	ldr	r3, [pc, #288]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	4a47      	ldr	r2, [pc, #284]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001d6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 8081 	beq.w	8001e7e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d7c:	4b42      	ldr	r3, [pc, #264]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 030c 	and.w	r3, r3, #12
 8001d84:	2b08      	cmp	r3, #8
 8001d86:	d061      	beq.n	8001e4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	69db      	ldr	r3, [r3, #28]
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d146      	bne.n	8001e1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d90:	4b3f      	ldr	r3, [pc, #252]	; (8001e90 <HAL_RCC_OscConfig+0x4fc>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d96:	f7fe fdbf 	bl	8000918 <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d9e:	f7fe fdbb 	bl	8000918 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e067      	b.n	8001e80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001db0:	4b35      	ldr	r3, [pc, #212]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1f0      	bne.n	8001d9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a1b      	ldr	r3, [r3, #32]
 8001dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dc4:	d108      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dc6:	4b30      	ldr	r3, [pc, #192]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	492d      	ldr	r1, [pc, #180]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dd8:	4b2b      	ldr	r3, [pc, #172]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a19      	ldr	r1, [r3, #32]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de8:	430b      	orrs	r3, r1
 8001dea:	4927      	ldr	r1, [pc, #156]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001df0:	4b27      	ldr	r3, [pc, #156]	; (8001e90 <HAL_RCC_OscConfig+0x4fc>)
 8001df2:	2201      	movs	r2, #1
 8001df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df6:	f7fe fd8f 	bl	8000918 <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dfc:	e008      	b.n	8001e10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dfe:	f7fe fd8b 	bl	8000918 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e037      	b.n	8001e80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e10:	4b1d      	ldr	r3, [pc, #116]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d0f0      	beq.n	8001dfe <HAL_RCC_OscConfig+0x46a>
 8001e1c:	e02f      	b.n	8001e7e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e1e:	4b1c      	ldr	r3, [pc, #112]	; (8001e90 <HAL_RCC_OscConfig+0x4fc>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e24:	f7fe fd78 	bl	8000918 <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e2c:	f7fe fd74 	bl	8000918 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e020      	b.n	8001e80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e3e:	4b12      	ldr	r3, [pc, #72]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1f0      	bne.n	8001e2c <HAL_RCC_OscConfig+0x498>
 8001e4a:	e018      	b.n	8001e7e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	69db      	ldr	r3, [r3, #28]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d101      	bne.n	8001e58 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e013      	b.n	8001e80 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e58:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a1b      	ldr	r3, [r3, #32]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d106      	bne.n	8001e7a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d001      	beq.n	8001e7e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e000      	b.n	8001e80 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3718      	adds	r7, #24
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	40007000 	.word	0x40007000
 8001e90:	42420060 	.word	0x42420060

08001e94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d101      	bne.n	8001ea8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e0d0      	b.n	800204a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ea8:	4b6a      	ldr	r3, [pc, #424]	; (8002054 <HAL_RCC_ClockConfig+0x1c0>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d910      	bls.n	8001ed8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb6:	4b67      	ldr	r3, [pc, #412]	; (8002054 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f023 0207 	bic.w	r2, r3, #7
 8001ebe:	4965      	ldr	r1, [pc, #404]	; (8002054 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ec6:	4b63      	ldr	r3, [pc, #396]	; (8002054 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d001      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e0b8      	b.n	800204a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d020      	beq.n	8001f26 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d005      	beq.n	8001efc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ef0:	4b59      	ldr	r3, [pc, #356]	; (8002058 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	4a58      	ldr	r2, [pc, #352]	; (8002058 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001efa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0308 	and.w	r3, r3, #8
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d005      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f08:	4b53      	ldr	r3, [pc, #332]	; (8002058 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	4a52      	ldr	r2, [pc, #328]	; (8002058 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f12:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f14:	4b50      	ldr	r3, [pc, #320]	; (8002058 <HAL_RCC_ClockConfig+0x1c4>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	494d      	ldr	r1, [pc, #308]	; (8002058 <HAL_RCC_ClockConfig+0x1c4>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d040      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d107      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3a:	4b47      	ldr	r3, [pc, #284]	; (8002058 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d115      	bne.n	8001f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e07f      	b.n	800204a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d107      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f52:	4b41      	ldr	r3, [pc, #260]	; (8002058 <HAL_RCC_ClockConfig+0x1c4>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d109      	bne.n	8001f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e073      	b.n	800204a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f62:	4b3d      	ldr	r3, [pc, #244]	; (8002058 <HAL_RCC_ClockConfig+0x1c4>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e06b      	b.n	800204a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f72:	4b39      	ldr	r3, [pc, #228]	; (8002058 <HAL_RCC_ClockConfig+0x1c4>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f023 0203 	bic.w	r2, r3, #3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	4936      	ldr	r1, [pc, #216]	; (8002058 <HAL_RCC_ClockConfig+0x1c4>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f84:	f7fe fcc8 	bl	8000918 <HAL_GetTick>
 8001f88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f8a:	e00a      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f8c:	f7fe fcc4 	bl	8000918 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e053      	b.n	800204a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fa2:	4b2d      	ldr	r3, [pc, #180]	; (8002058 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f003 020c 	and.w	r2, r3, #12
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d1eb      	bne.n	8001f8c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fb4:	4b27      	ldr	r3, [pc, #156]	; (8002054 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0307 	and.w	r3, r3, #7
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d210      	bcs.n	8001fe4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fc2:	4b24      	ldr	r3, [pc, #144]	; (8002054 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f023 0207 	bic.w	r2, r3, #7
 8001fca:	4922      	ldr	r1, [pc, #136]	; (8002054 <HAL_RCC_ClockConfig+0x1c0>)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd2:	4b20      	ldr	r3, [pc, #128]	; (8002054 <HAL_RCC_ClockConfig+0x1c0>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d001      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e032      	b.n	800204a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0304 	and.w	r3, r3, #4
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d008      	beq.n	8002002 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ff0:	4b19      	ldr	r3, [pc, #100]	; (8002058 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	4916      	ldr	r1, [pc, #88]	; (8002058 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	2b00      	cmp	r3, #0
 800200c:	d009      	beq.n	8002022 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800200e:	4b12      	ldr	r3, [pc, #72]	; (8002058 <HAL_RCC_ClockConfig+0x1c4>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	490e      	ldr	r1, [pc, #56]	; (8002058 <HAL_RCC_ClockConfig+0x1c4>)
 800201e:	4313      	orrs	r3, r2
 8002020:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002022:	f000 f821 	bl	8002068 <HAL_RCC_GetSysClockFreq>
 8002026:	4601      	mov	r1, r0
 8002028:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <HAL_RCC_ClockConfig+0x1c4>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	091b      	lsrs	r3, r3, #4
 800202e:	f003 030f 	and.w	r3, r3, #15
 8002032:	4a0a      	ldr	r2, [pc, #40]	; (800205c <HAL_RCC_ClockConfig+0x1c8>)
 8002034:	5cd3      	ldrb	r3, [r2, r3]
 8002036:	fa21 f303 	lsr.w	r3, r1, r3
 800203a:	4a09      	ldr	r2, [pc, #36]	; (8002060 <HAL_RCC_ClockConfig+0x1cc>)
 800203c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800203e:	4b09      	ldr	r3, [pc, #36]	; (8002064 <HAL_RCC_ClockConfig+0x1d0>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f7fe fc26 	bl	8000894 <HAL_InitTick>

  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40022000 	.word	0x40022000
 8002058:	40021000 	.word	0x40021000
 800205c:	08003048 	.word	0x08003048
 8002060:	20000000 	.word	0x20000000
 8002064:	20000004 	.word	0x20000004

08002068 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002068:	b490      	push	{r4, r7}
 800206a:	b08a      	sub	sp, #40	; 0x28
 800206c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800206e:	4b2a      	ldr	r3, [pc, #168]	; (8002118 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002070:	1d3c      	adds	r4, r7, #4
 8002072:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002074:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002078:	4b28      	ldr	r3, [pc, #160]	; (800211c <HAL_RCC_GetSysClockFreq+0xb4>)
 800207a:	881b      	ldrh	r3, [r3, #0]
 800207c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800207e:	2300      	movs	r3, #0
 8002080:	61fb      	str	r3, [r7, #28]
 8002082:	2300      	movs	r3, #0
 8002084:	61bb      	str	r3, [r7, #24]
 8002086:	2300      	movs	r3, #0
 8002088:	627b      	str	r3, [r7, #36]	; 0x24
 800208a:	2300      	movs	r3, #0
 800208c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800208e:	2300      	movs	r3, #0
 8002090:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002092:	4b23      	ldr	r3, [pc, #140]	; (8002120 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	f003 030c 	and.w	r3, r3, #12
 800209e:	2b04      	cmp	r3, #4
 80020a0:	d002      	beq.n	80020a8 <HAL_RCC_GetSysClockFreq+0x40>
 80020a2:	2b08      	cmp	r3, #8
 80020a4:	d003      	beq.n	80020ae <HAL_RCC_GetSysClockFreq+0x46>
 80020a6:	e02d      	b.n	8002104 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020a8:	4b1e      	ldr	r3, [pc, #120]	; (8002124 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020aa:	623b      	str	r3, [r7, #32]
      break;
 80020ac:	e02d      	b.n	800210a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	0c9b      	lsrs	r3, r3, #18
 80020b2:	f003 030f 	and.w	r3, r3, #15
 80020b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020ba:	4413      	add	r3, r2
 80020bc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80020c0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d013      	beq.n	80020f4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020cc:	4b14      	ldr	r3, [pc, #80]	; (8002120 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	0c5b      	lsrs	r3, r3, #17
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020da:	4413      	add	r3, r2
 80020dc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020e0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	4a0f      	ldr	r2, [pc, #60]	; (8002124 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020e6:	fb02 f203 	mul.w	r2, r2, r3
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
 80020f2:	e004      	b.n	80020fe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	4a0c      	ldr	r2, [pc, #48]	; (8002128 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020f8:	fb02 f303 	mul.w	r3, r2, r3
 80020fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80020fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002100:	623b      	str	r3, [r7, #32]
      break;
 8002102:	e002      	b.n	800210a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002104:	4b07      	ldr	r3, [pc, #28]	; (8002124 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002106:	623b      	str	r3, [r7, #32]
      break;
 8002108:	bf00      	nop
    }
  }
  return sysclockfreq;
 800210a:	6a3b      	ldr	r3, [r7, #32]
}
 800210c:	4618      	mov	r0, r3
 800210e:	3728      	adds	r7, #40	; 0x28
 8002110:	46bd      	mov	sp, r7
 8002112:	bc90      	pop	{r4, r7}
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	08003034 	.word	0x08003034
 800211c:	08003044 	.word	0x08003044
 8002120:	40021000 	.word	0x40021000
 8002124:	007a1200 	.word	0x007a1200
 8002128:	003d0900 	.word	0x003d0900

0800212c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002130:	4b02      	ldr	r3, [pc, #8]	; (800213c <HAL_RCC_GetHCLKFreq+0x10>)
 8002132:	681b      	ldr	r3, [r3, #0]
}
 8002134:	4618      	mov	r0, r3
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr
 800213c:	20000000 	.word	0x20000000

08002140 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002144:	f7ff fff2 	bl	800212c <HAL_RCC_GetHCLKFreq>
 8002148:	4601      	mov	r1, r0
 800214a:	4b05      	ldr	r3, [pc, #20]	; (8002160 <HAL_RCC_GetPCLK1Freq+0x20>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	0a1b      	lsrs	r3, r3, #8
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	4a03      	ldr	r2, [pc, #12]	; (8002164 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002156:	5cd3      	ldrb	r3, [r2, r3]
 8002158:	fa21 f303 	lsr.w	r3, r1, r3
}
 800215c:	4618      	mov	r0, r3
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40021000 	.word	0x40021000
 8002164:	08003058 	.word	0x08003058

08002168 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800216c:	f7ff ffde 	bl	800212c <HAL_RCC_GetHCLKFreq>
 8002170:	4601      	mov	r1, r0
 8002172:	4b05      	ldr	r3, [pc, #20]	; (8002188 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	0adb      	lsrs	r3, r3, #11
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	4a03      	ldr	r2, [pc, #12]	; (800218c <HAL_RCC_GetPCLK2Freq+0x24>)
 800217e:	5cd3      	ldrb	r3, [r2, r3]
 8002180:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002184:	4618      	mov	r0, r3
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40021000 	.word	0x40021000
 800218c:	08003058 	.word	0x08003058

08002190 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002198:	4b0a      	ldr	r3, [pc, #40]	; (80021c4 <RCC_Delay+0x34>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a0a      	ldr	r2, [pc, #40]	; (80021c8 <RCC_Delay+0x38>)
 800219e:	fba2 2303 	umull	r2, r3, r2, r3
 80021a2:	0a5b      	lsrs	r3, r3, #9
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	fb02 f303 	mul.w	r3, r2, r3
 80021aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021ac:	bf00      	nop
  }
  while (Delay --);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	1e5a      	subs	r2, r3, #1
 80021b2:	60fa      	str	r2, [r7, #12]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d1f9      	bne.n	80021ac <RCC_Delay+0x1c>
}
 80021b8:	bf00      	nop
 80021ba:	3714      	adds	r7, #20
 80021bc:	46bd      	mov	sp, r7
 80021be:	bc80      	pop	{r7}
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	20000000 	.word	0x20000000
 80021c8:	10624dd3 	.word	0x10624dd3

080021cc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80021d4:	2300      	movs	r3, #0
 80021d6:	613b      	str	r3, [r7, #16]
 80021d8:	2300      	movs	r3, #0
 80021da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d07d      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80021e8:	2300      	movs	r3, #0
 80021ea:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ec:	4b4f      	ldr	r3, [pc, #316]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d10d      	bne.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021f8:	4b4c      	ldr	r3, [pc, #304]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021fa:	69db      	ldr	r3, [r3, #28]
 80021fc:	4a4b      	ldr	r2, [pc, #300]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002202:	61d3      	str	r3, [r2, #28]
 8002204:	4b49      	ldr	r3, [pc, #292]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002206:	69db      	ldr	r3, [r3, #28]
 8002208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220c:	60bb      	str	r3, [r7, #8]
 800220e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002210:	2301      	movs	r3, #1
 8002212:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002214:	4b46      	ldr	r3, [pc, #280]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221c:	2b00      	cmp	r3, #0
 800221e:	d118      	bne.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002220:	4b43      	ldr	r3, [pc, #268]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a42      	ldr	r2, [pc, #264]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800222a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800222c:	f7fe fb74 	bl	8000918 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002232:	e008      	b.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002234:	f7fe fb70 	bl	8000918 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b64      	cmp	r3, #100	; 0x64
 8002240:	d901      	bls.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e06d      	b.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002246:	4b3a      	ldr	r3, [pc, #232]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224e:	2b00      	cmp	r3, #0
 8002250:	d0f0      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002252:	4b36      	ldr	r3, [pc, #216]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800225a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d02e      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	429a      	cmp	r2, r3
 800226e:	d027      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002270:	4b2e      	ldr	r3, [pc, #184]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002278:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800227a:	4b2e      	ldr	r3, [pc, #184]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800227c:	2201      	movs	r2, #1
 800227e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002280:	4b2c      	ldr	r3, [pc, #176]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002286:	4a29      	ldr	r2, [pc, #164]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	d014      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002296:	f7fe fb3f 	bl	8000918 <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800229c:	e00a      	b.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800229e:	f7fe fb3b 	bl	8000918 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e036      	b.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b4:	4b1d      	ldr	r3, [pc, #116]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0ee      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022c0:	4b1a      	ldr	r3, [pc, #104]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	4917      	ldr	r1, [pc, #92]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022d2:	7dfb      	ldrb	r3, [r7, #23]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d105      	bne.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022d8:	4b14      	ldr	r3, [pc, #80]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	4a13      	ldr	r2, [pc, #76]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022e2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d008      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022f0:	4b0e      	ldr	r3, [pc, #56]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	490b      	ldr	r1, [pc, #44]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0310 	and.w	r3, r3, #16
 800230a:	2b00      	cmp	r3, #0
 800230c:	d008      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800230e:	4b07      	ldr	r3, [pc, #28]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	4904      	ldr	r1, [pc, #16]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800231c:	4313      	orrs	r3, r2
 800231e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3718      	adds	r7, #24
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40021000 	.word	0x40021000
 8002330:	40007000 	.word	0x40007000
 8002334:	42420440 	.word	0x42420440

08002338 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e03f      	b.n	80023ca <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d106      	bne.n	8002364 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7fe f97c 	bl	800065c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2224      	movs	r2, #36	; 0x24
 8002368:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68da      	ldr	r2, [r3, #12]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800237a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 f90b 	bl	8002598 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	691a      	ldr	r2, [r3, #16]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002390:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	695a      	ldr	r2, [r3, #20]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68da      	ldr	r2, [r3, #12]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2220      	movs	r2, #32
 80023bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2220      	movs	r2, #32
 80023c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b088      	sub	sp, #32
 80023d6:	af02      	add	r7, sp, #8
 80023d8:	60f8      	str	r0, [r7, #12]
 80023da:	60b9      	str	r1, [r7, #8]
 80023dc:	603b      	str	r3, [r7, #0]
 80023de:	4613      	mov	r3, r2
 80023e0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80023e2:	2300      	movs	r3, #0
 80023e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b20      	cmp	r3, #32
 80023f0:	f040 8083 	bne.w	80024fa <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d002      	beq.n	8002400 <HAL_UART_Transmit+0x2e>
 80023fa:	88fb      	ldrh	r3, [r7, #6]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d101      	bne.n	8002404 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e07b      	b.n	80024fc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800240a:	2b01      	cmp	r3, #1
 800240c:	d101      	bne.n	8002412 <HAL_UART_Transmit+0x40>
 800240e:	2302      	movs	r3, #2
 8002410:	e074      	b.n	80024fc <HAL_UART_Transmit+0x12a>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2221      	movs	r2, #33	; 0x21
 8002424:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002428:	f7fe fa76 	bl	8000918 <HAL_GetTick>
 800242c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	88fa      	ldrh	r2, [r7, #6]
 8002432:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	88fa      	ldrh	r2, [r7, #6]
 8002438:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800243a:	e042      	b.n	80024c2 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002440:	b29b      	uxth	r3, r3
 8002442:	3b01      	subs	r3, #1
 8002444:	b29a      	uxth	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002452:	d122      	bne.n	800249a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	2200      	movs	r2, #0
 800245c:	2180      	movs	r1, #128	; 0x80
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f000 f850 	bl	8002504 <UART_WaitOnFlagUntilTimeout>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e046      	b.n	80024fc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	461a      	mov	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002480:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d103      	bne.n	8002492 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	3302      	adds	r3, #2
 800248e:	60bb      	str	r3, [r7, #8]
 8002490:	e017      	b.n	80024c2 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	3301      	adds	r3, #1
 8002496:	60bb      	str	r3, [r7, #8]
 8002498:	e013      	b.n	80024c2 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	2200      	movs	r2, #0
 80024a2:	2180      	movs	r1, #128	; 0x80
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f000 f82d 	bl	8002504 <UART_WaitOnFlagUntilTimeout>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e023      	b.n	80024fc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	1c5a      	adds	r2, r3, #1
 80024b8:	60ba      	str	r2, [r7, #8]
 80024ba:	781a      	ldrb	r2, [r3, #0]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1b7      	bne.n	800243c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	2200      	movs	r2, #0
 80024d4:	2140      	movs	r1, #64	; 0x40
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f000 f814 	bl	8002504 <UART_WaitOnFlagUntilTimeout>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e00a      	b.n	80024fc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2220      	movs	r2, #32
 80024ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80024f6:	2300      	movs	r3, #0
 80024f8:	e000      	b.n	80024fc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80024fa:	2302      	movs	r3, #2
  }
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	603b      	str	r3, [r7, #0]
 8002510:	4613      	mov	r3, r2
 8002512:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002514:	e02c      	b.n	8002570 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800251c:	d028      	beq.n	8002570 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d007      	beq.n	8002534 <UART_WaitOnFlagUntilTimeout+0x30>
 8002524:	f7fe f9f8 	bl	8000918 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	429a      	cmp	r2, r3
 8002532:	d21d      	bcs.n	8002570 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68da      	ldr	r2, [r3, #12]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002542:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	695a      	ldr	r2, [r3, #20]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 0201 	bic.w	r2, r2, #1
 8002552:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2220      	movs	r2, #32
 8002558:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2220      	movs	r2, #32
 8002560:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e00f      	b.n	8002590 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	4013      	ands	r3, r2
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	429a      	cmp	r2, r3
 800257e:	bf0c      	ite	eq
 8002580:	2301      	moveq	r3, #1
 8002582:	2300      	movne	r3, #0
 8002584:	b2db      	uxtb	r3, r3
 8002586:	461a      	mov	r2, r3
 8002588:	79fb      	ldrb	r3, [r7, #7]
 800258a:	429a      	cmp	r2, r3
 800258c:	d0c3      	beq.n	8002516 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68da      	ldr	r2, [r3, #12]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	689a      	ldr	r2, [r3, #8]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	431a      	orrs	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	695b      	ldr	r3, [r3, #20]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80025d2:	f023 030c 	bic.w	r3, r3, #12
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6812      	ldr	r2, [r2, #0]
 80025da:	68f9      	ldr	r1, [r7, #12]
 80025dc:	430b      	orrs	r3, r1
 80025de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	699a      	ldr	r2, [r3, #24]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a52      	ldr	r2, [pc, #328]	; (8002744 <UART_SetConfig+0x1ac>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d14e      	bne.n	800269e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002600:	f7ff fdb2 	bl	8002168 <HAL_RCC_GetPCLK2Freq>
 8002604:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	4613      	mov	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	009a      	lsls	r2, r3, #2
 8002610:	441a      	add	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	fbb2 f3f3 	udiv	r3, r2, r3
 800261c:	4a4a      	ldr	r2, [pc, #296]	; (8002748 <UART_SetConfig+0x1b0>)
 800261e:	fba2 2303 	umull	r2, r3, r2, r3
 8002622:	095b      	lsrs	r3, r3, #5
 8002624:	0119      	lsls	r1, r3, #4
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	4613      	mov	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4413      	add	r3, r2
 800262e:	009a      	lsls	r2, r3, #2
 8002630:	441a      	add	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	fbb2 f2f3 	udiv	r2, r2, r3
 800263c:	4b42      	ldr	r3, [pc, #264]	; (8002748 <UART_SetConfig+0x1b0>)
 800263e:	fba3 0302 	umull	r0, r3, r3, r2
 8002642:	095b      	lsrs	r3, r3, #5
 8002644:	2064      	movs	r0, #100	; 0x64
 8002646:	fb00 f303 	mul.w	r3, r0, r3
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	011b      	lsls	r3, r3, #4
 800264e:	3332      	adds	r3, #50	; 0x32
 8002650:	4a3d      	ldr	r2, [pc, #244]	; (8002748 <UART_SetConfig+0x1b0>)
 8002652:	fba2 2303 	umull	r2, r3, r2, r3
 8002656:	095b      	lsrs	r3, r3, #5
 8002658:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800265c:	4419      	add	r1, r3
 800265e:	68ba      	ldr	r2, [r7, #8]
 8002660:	4613      	mov	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	009a      	lsls	r2, r3, #2
 8002668:	441a      	add	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	fbb2 f2f3 	udiv	r2, r2, r3
 8002674:	4b34      	ldr	r3, [pc, #208]	; (8002748 <UART_SetConfig+0x1b0>)
 8002676:	fba3 0302 	umull	r0, r3, r3, r2
 800267a:	095b      	lsrs	r3, r3, #5
 800267c:	2064      	movs	r0, #100	; 0x64
 800267e:	fb00 f303 	mul.w	r3, r0, r3
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	011b      	lsls	r3, r3, #4
 8002686:	3332      	adds	r3, #50	; 0x32
 8002688:	4a2f      	ldr	r2, [pc, #188]	; (8002748 <UART_SetConfig+0x1b0>)
 800268a:	fba2 2303 	umull	r2, r3, r2, r3
 800268e:	095b      	lsrs	r3, r3, #5
 8002690:	f003 020f 	and.w	r2, r3, #15
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	440a      	add	r2, r1
 800269a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800269c:	e04d      	b.n	800273a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800269e:	f7ff fd4f 	bl	8002140 <HAL_RCC_GetPCLK1Freq>
 80026a2:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026a4:	68ba      	ldr	r2, [r7, #8]
 80026a6:	4613      	mov	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	009a      	lsls	r2, r3, #2
 80026ae:	441a      	add	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ba:	4a23      	ldr	r2, [pc, #140]	; (8002748 <UART_SetConfig+0x1b0>)
 80026bc:	fba2 2303 	umull	r2, r3, r2, r3
 80026c0:	095b      	lsrs	r3, r3, #5
 80026c2:	0119      	lsls	r1, r3, #4
 80026c4:	68ba      	ldr	r2, [r7, #8]
 80026c6:	4613      	mov	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4413      	add	r3, r2
 80026cc:	009a      	lsls	r2, r3, #2
 80026ce:	441a      	add	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80026da:	4b1b      	ldr	r3, [pc, #108]	; (8002748 <UART_SetConfig+0x1b0>)
 80026dc:	fba3 0302 	umull	r0, r3, r3, r2
 80026e0:	095b      	lsrs	r3, r3, #5
 80026e2:	2064      	movs	r0, #100	; 0x64
 80026e4:	fb00 f303 	mul.w	r3, r0, r3
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	011b      	lsls	r3, r3, #4
 80026ec:	3332      	adds	r3, #50	; 0x32
 80026ee:	4a16      	ldr	r2, [pc, #88]	; (8002748 <UART_SetConfig+0x1b0>)
 80026f0:	fba2 2303 	umull	r2, r3, r2, r3
 80026f4:	095b      	lsrs	r3, r3, #5
 80026f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026fa:	4419      	add	r1, r3
 80026fc:	68ba      	ldr	r2, [r7, #8]
 80026fe:	4613      	mov	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4413      	add	r3, r2
 8002704:	009a      	lsls	r2, r3, #2
 8002706:	441a      	add	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002712:	4b0d      	ldr	r3, [pc, #52]	; (8002748 <UART_SetConfig+0x1b0>)
 8002714:	fba3 0302 	umull	r0, r3, r3, r2
 8002718:	095b      	lsrs	r3, r3, #5
 800271a:	2064      	movs	r0, #100	; 0x64
 800271c:	fb00 f303 	mul.w	r3, r0, r3
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	011b      	lsls	r3, r3, #4
 8002724:	3332      	adds	r3, #50	; 0x32
 8002726:	4a08      	ldr	r2, [pc, #32]	; (8002748 <UART_SetConfig+0x1b0>)
 8002728:	fba2 2303 	umull	r2, r3, r2, r3
 800272c:	095b      	lsrs	r3, r3, #5
 800272e:	f003 020f 	and.w	r2, r3, #15
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	440a      	add	r2, r1
 8002738:	609a      	str	r2, [r3, #8]
}
 800273a:	bf00      	nop
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40013800 	.word	0x40013800
 8002748:	51eb851f 	.word	0x51eb851f

0800274c <__errno>:
 800274c:	4b01      	ldr	r3, [pc, #4]	; (8002754 <__errno+0x8>)
 800274e:	6818      	ldr	r0, [r3, #0]
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	2000000c 	.word	0x2000000c

08002758 <__libc_init_array>:
 8002758:	b570      	push	{r4, r5, r6, lr}
 800275a:	2500      	movs	r5, #0
 800275c:	4e0c      	ldr	r6, [pc, #48]	; (8002790 <__libc_init_array+0x38>)
 800275e:	4c0d      	ldr	r4, [pc, #52]	; (8002794 <__libc_init_array+0x3c>)
 8002760:	1ba4      	subs	r4, r4, r6
 8002762:	10a4      	asrs	r4, r4, #2
 8002764:	42a5      	cmp	r5, r4
 8002766:	d109      	bne.n	800277c <__libc_init_array+0x24>
 8002768:	f000 fc34 	bl	8002fd4 <_init>
 800276c:	2500      	movs	r5, #0
 800276e:	4e0a      	ldr	r6, [pc, #40]	; (8002798 <__libc_init_array+0x40>)
 8002770:	4c0a      	ldr	r4, [pc, #40]	; (800279c <__libc_init_array+0x44>)
 8002772:	1ba4      	subs	r4, r4, r6
 8002774:	10a4      	asrs	r4, r4, #2
 8002776:	42a5      	cmp	r5, r4
 8002778:	d105      	bne.n	8002786 <__libc_init_array+0x2e>
 800277a:	bd70      	pop	{r4, r5, r6, pc}
 800277c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002780:	4798      	blx	r3
 8002782:	3501      	adds	r5, #1
 8002784:	e7ee      	b.n	8002764 <__libc_init_array+0xc>
 8002786:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800278a:	4798      	blx	r3
 800278c:	3501      	adds	r5, #1
 800278e:	e7f2      	b.n	8002776 <__libc_init_array+0x1e>
 8002790:	08003094 	.word	0x08003094
 8002794:	08003094 	.word	0x08003094
 8002798:	08003094 	.word	0x08003094
 800279c:	08003098 	.word	0x08003098

080027a0 <memset>:
 80027a0:	4603      	mov	r3, r0
 80027a2:	4402      	add	r2, r0
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d100      	bne.n	80027aa <memset+0xa>
 80027a8:	4770      	bx	lr
 80027aa:	f803 1b01 	strb.w	r1, [r3], #1
 80027ae:	e7f9      	b.n	80027a4 <memset+0x4>

080027b0 <siprintf>:
 80027b0:	b40e      	push	{r1, r2, r3}
 80027b2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80027b6:	b500      	push	{lr}
 80027b8:	b09c      	sub	sp, #112	; 0x70
 80027ba:	ab1d      	add	r3, sp, #116	; 0x74
 80027bc:	9002      	str	r0, [sp, #8]
 80027be:	9006      	str	r0, [sp, #24]
 80027c0:	9107      	str	r1, [sp, #28]
 80027c2:	9104      	str	r1, [sp, #16]
 80027c4:	4808      	ldr	r0, [pc, #32]	; (80027e8 <siprintf+0x38>)
 80027c6:	4909      	ldr	r1, [pc, #36]	; (80027ec <siprintf+0x3c>)
 80027c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80027cc:	9105      	str	r1, [sp, #20]
 80027ce:	6800      	ldr	r0, [r0, #0]
 80027d0:	a902      	add	r1, sp, #8
 80027d2:	9301      	str	r3, [sp, #4]
 80027d4:	f000 f866 	bl	80028a4 <_svfiprintf_r>
 80027d8:	2200      	movs	r2, #0
 80027da:	9b02      	ldr	r3, [sp, #8]
 80027dc:	701a      	strb	r2, [r3, #0]
 80027de:	b01c      	add	sp, #112	; 0x70
 80027e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80027e4:	b003      	add	sp, #12
 80027e6:	4770      	bx	lr
 80027e8:	2000000c 	.word	0x2000000c
 80027ec:	ffff0208 	.word	0xffff0208

080027f0 <__ssputs_r>:
 80027f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027f4:	688e      	ldr	r6, [r1, #8]
 80027f6:	4682      	mov	sl, r0
 80027f8:	429e      	cmp	r6, r3
 80027fa:	460c      	mov	r4, r1
 80027fc:	4690      	mov	r8, r2
 80027fe:	4699      	mov	r9, r3
 8002800:	d837      	bhi.n	8002872 <__ssputs_r+0x82>
 8002802:	898a      	ldrh	r2, [r1, #12]
 8002804:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002808:	d031      	beq.n	800286e <__ssputs_r+0x7e>
 800280a:	2302      	movs	r3, #2
 800280c:	6825      	ldr	r5, [r4, #0]
 800280e:	6909      	ldr	r1, [r1, #16]
 8002810:	1a6f      	subs	r7, r5, r1
 8002812:	6965      	ldr	r5, [r4, #20]
 8002814:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002818:	fb95 f5f3 	sdiv	r5, r5, r3
 800281c:	f109 0301 	add.w	r3, r9, #1
 8002820:	443b      	add	r3, r7
 8002822:	429d      	cmp	r5, r3
 8002824:	bf38      	it	cc
 8002826:	461d      	movcc	r5, r3
 8002828:	0553      	lsls	r3, r2, #21
 800282a:	d530      	bpl.n	800288e <__ssputs_r+0x9e>
 800282c:	4629      	mov	r1, r5
 800282e:	f000 fb37 	bl	8002ea0 <_malloc_r>
 8002832:	4606      	mov	r6, r0
 8002834:	b950      	cbnz	r0, 800284c <__ssputs_r+0x5c>
 8002836:	230c      	movs	r3, #12
 8002838:	f04f 30ff 	mov.w	r0, #4294967295
 800283c:	f8ca 3000 	str.w	r3, [sl]
 8002840:	89a3      	ldrh	r3, [r4, #12]
 8002842:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002846:	81a3      	strh	r3, [r4, #12]
 8002848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800284c:	463a      	mov	r2, r7
 800284e:	6921      	ldr	r1, [r4, #16]
 8002850:	f000 fab6 	bl	8002dc0 <memcpy>
 8002854:	89a3      	ldrh	r3, [r4, #12]
 8002856:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800285a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800285e:	81a3      	strh	r3, [r4, #12]
 8002860:	6126      	str	r6, [r4, #16]
 8002862:	443e      	add	r6, r7
 8002864:	6026      	str	r6, [r4, #0]
 8002866:	464e      	mov	r6, r9
 8002868:	6165      	str	r5, [r4, #20]
 800286a:	1bed      	subs	r5, r5, r7
 800286c:	60a5      	str	r5, [r4, #8]
 800286e:	454e      	cmp	r6, r9
 8002870:	d900      	bls.n	8002874 <__ssputs_r+0x84>
 8002872:	464e      	mov	r6, r9
 8002874:	4632      	mov	r2, r6
 8002876:	4641      	mov	r1, r8
 8002878:	6820      	ldr	r0, [r4, #0]
 800287a:	f000 faac 	bl	8002dd6 <memmove>
 800287e:	68a3      	ldr	r3, [r4, #8]
 8002880:	2000      	movs	r0, #0
 8002882:	1b9b      	subs	r3, r3, r6
 8002884:	60a3      	str	r3, [r4, #8]
 8002886:	6823      	ldr	r3, [r4, #0]
 8002888:	441e      	add	r6, r3
 800288a:	6026      	str	r6, [r4, #0]
 800288c:	e7dc      	b.n	8002848 <__ssputs_r+0x58>
 800288e:	462a      	mov	r2, r5
 8002890:	f000 fb60 	bl	8002f54 <_realloc_r>
 8002894:	4606      	mov	r6, r0
 8002896:	2800      	cmp	r0, #0
 8002898:	d1e2      	bne.n	8002860 <__ssputs_r+0x70>
 800289a:	6921      	ldr	r1, [r4, #16]
 800289c:	4650      	mov	r0, sl
 800289e:	f000 fab3 	bl	8002e08 <_free_r>
 80028a2:	e7c8      	b.n	8002836 <__ssputs_r+0x46>

080028a4 <_svfiprintf_r>:
 80028a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028a8:	461d      	mov	r5, r3
 80028aa:	898b      	ldrh	r3, [r1, #12]
 80028ac:	b09d      	sub	sp, #116	; 0x74
 80028ae:	061f      	lsls	r7, r3, #24
 80028b0:	4680      	mov	r8, r0
 80028b2:	460c      	mov	r4, r1
 80028b4:	4616      	mov	r6, r2
 80028b6:	d50f      	bpl.n	80028d8 <_svfiprintf_r+0x34>
 80028b8:	690b      	ldr	r3, [r1, #16]
 80028ba:	b96b      	cbnz	r3, 80028d8 <_svfiprintf_r+0x34>
 80028bc:	2140      	movs	r1, #64	; 0x40
 80028be:	f000 faef 	bl	8002ea0 <_malloc_r>
 80028c2:	6020      	str	r0, [r4, #0]
 80028c4:	6120      	str	r0, [r4, #16]
 80028c6:	b928      	cbnz	r0, 80028d4 <_svfiprintf_r+0x30>
 80028c8:	230c      	movs	r3, #12
 80028ca:	f8c8 3000 	str.w	r3, [r8]
 80028ce:	f04f 30ff 	mov.w	r0, #4294967295
 80028d2:	e0c8      	b.n	8002a66 <_svfiprintf_r+0x1c2>
 80028d4:	2340      	movs	r3, #64	; 0x40
 80028d6:	6163      	str	r3, [r4, #20]
 80028d8:	2300      	movs	r3, #0
 80028da:	9309      	str	r3, [sp, #36]	; 0x24
 80028dc:	2320      	movs	r3, #32
 80028de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80028e2:	2330      	movs	r3, #48	; 0x30
 80028e4:	f04f 0b01 	mov.w	fp, #1
 80028e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80028ec:	9503      	str	r5, [sp, #12]
 80028ee:	4637      	mov	r7, r6
 80028f0:	463d      	mov	r5, r7
 80028f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80028f6:	b10b      	cbz	r3, 80028fc <_svfiprintf_r+0x58>
 80028f8:	2b25      	cmp	r3, #37	; 0x25
 80028fa:	d13e      	bne.n	800297a <_svfiprintf_r+0xd6>
 80028fc:	ebb7 0a06 	subs.w	sl, r7, r6
 8002900:	d00b      	beq.n	800291a <_svfiprintf_r+0x76>
 8002902:	4653      	mov	r3, sl
 8002904:	4632      	mov	r2, r6
 8002906:	4621      	mov	r1, r4
 8002908:	4640      	mov	r0, r8
 800290a:	f7ff ff71 	bl	80027f0 <__ssputs_r>
 800290e:	3001      	adds	r0, #1
 8002910:	f000 80a4 	beq.w	8002a5c <_svfiprintf_r+0x1b8>
 8002914:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002916:	4453      	add	r3, sl
 8002918:	9309      	str	r3, [sp, #36]	; 0x24
 800291a:	783b      	ldrb	r3, [r7, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	f000 809d 	beq.w	8002a5c <_svfiprintf_r+0x1b8>
 8002922:	2300      	movs	r3, #0
 8002924:	f04f 32ff 	mov.w	r2, #4294967295
 8002928:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800292c:	9304      	str	r3, [sp, #16]
 800292e:	9307      	str	r3, [sp, #28]
 8002930:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002934:	931a      	str	r3, [sp, #104]	; 0x68
 8002936:	462f      	mov	r7, r5
 8002938:	2205      	movs	r2, #5
 800293a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800293e:	4850      	ldr	r0, [pc, #320]	; (8002a80 <_svfiprintf_r+0x1dc>)
 8002940:	f000 fa30 	bl	8002da4 <memchr>
 8002944:	9b04      	ldr	r3, [sp, #16]
 8002946:	b9d0      	cbnz	r0, 800297e <_svfiprintf_r+0xda>
 8002948:	06d9      	lsls	r1, r3, #27
 800294a:	bf44      	itt	mi
 800294c:	2220      	movmi	r2, #32
 800294e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002952:	071a      	lsls	r2, r3, #28
 8002954:	bf44      	itt	mi
 8002956:	222b      	movmi	r2, #43	; 0x2b
 8002958:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800295c:	782a      	ldrb	r2, [r5, #0]
 800295e:	2a2a      	cmp	r2, #42	; 0x2a
 8002960:	d015      	beq.n	800298e <_svfiprintf_r+0xea>
 8002962:	462f      	mov	r7, r5
 8002964:	2000      	movs	r0, #0
 8002966:	250a      	movs	r5, #10
 8002968:	9a07      	ldr	r2, [sp, #28]
 800296a:	4639      	mov	r1, r7
 800296c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002970:	3b30      	subs	r3, #48	; 0x30
 8002972:	2b09      	cmp	r3, #9
 8002974:	d94d      	bls.n	8002a12 <_svfiprintf_r+0x16e>
 8002976:	b1b8      	cbz	r0, 80029a8 <_svfiprintf_r+0x104>
 8002978:	e00f      	b.n	800299a <_svfiprintf_r+0xf6>
 800297a:	462f      	mov	r7, r5
 800297c:	e7b8      	b.n	80028f0 <_svfiprintf_r+0x4c>
 800297e:	4a40      	ldr	r2, [pc, #256]	; (8002a80 <_svfiprintf_r+0x1dc>)
 8002980:	463d      	mov	r5, r7
 8002982:	1a80      	subs	r0, r0, r2
 8002984:	fa0b f000 	lsl.w	r0, fp, r0
 8002988:	4318      	orrs	r0, r3
 800298a:	9004      	str	r0, [sp, #16]
 800298c:	e7d3      	b.n	8002936 <_svfiprintf_r+0x92>
 800298e:	9a03      	ldr	r2, [sp, #12]
 8002990:	1d11      	adds	r1, r2, #4
 8002992:	6812      	ldr	r2, [r2, #0]
 8002994:	9103      	str	r1, [sp, #12]
 8002996:	2a00      	cmp	r2, #0
 8002998:	db01      	blt.n	800299e <_svfiprintf_r+0xfa>
 800299a:	9207      	str	r2, [sp, #28]
 800299c:	e004      	b.n	80029a8 <_svfiprintf_r+0x104>
 800299e:	4252      	negs	r2, r2
 80029a0:	f043 0302 	orr.w	r3, r3, #2
 80029a4:	9207      	str	r2, [sp, #28]
 80029a6:	9304      	str	r3, [sp, #16]
 80029a8:	783b      	ldrb	r3, [r7, #0]
 80029aa:	2b2e      	cmp	r3, #46	; 0x2e
 80029ac:	d10c      	bne.n	80029c8 <_svfiprintf_r+0x124>
 80029ae:	787b      	ldrb	r3, [r7, #1]
 80029b0:	2b2a      	cmp	r3, #42	; 0x2a
 80029b2:	d133      	bne.n	8002a1c <_svfiprintf_r+0x178>
 80029b4:	9b03      	ldr	r3, [sp, #12]
 80029b6:	3702      	adds	r7, #2
 80029b8:	1d1a      	adds	r2, r3, #4
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	9203      	str	r2, [sp, #12]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	bfb8      	it	lt
 80029c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80029c6:	9305      	str	r3, [sp, #20]
 80029c8:	4d2e      	ldr	r5, [pc, #184]	; (8002a84 <_svfiprintf_r+0x1e0>)
 80029ca:	2203      	movs	r2, #3
 80029cc:	7839      	ldrb	r1, [r7, #0]
 80029ce:	4628      	mov	r0, r5
 80029d0:	f000 f9e8 	bl	8002da4 <memchr>
 80029d4:	b138      	cbz	r0, 80029e6 <_svfiprintf_r+0x142>
 80029d6:	2340      	movs	r3, #64	; 0x40
 80029d8:	1b40      	subs	r0, r0, r5
 80029da:	fa03 f000 	lsl.w	r0, r3, r0
 80029de:	9b04      	ldr	r3, [sp, #16]
 80029e0:	3701      	adds	r7, #1
 80029e2:	4303      	orrs	r3, r0
 80029e4:	9304      	str	r3, [sp, #16]
 80029e6:	7839      	ldrb	r1, [r7, #0]
 80029e8:	2206      	movs	r2, #6
 80029ea:	4827      	ldr	r0, [pc, #156]	; (8002a88 <_svfiprintf_r+0x1e4>)
 80029ec:	1c7e      	adds	r6, r7, #1
 80029ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80029f2:	f000 f9d7 	bl	8002da4 <memchr>
 80029f6:	2800      	cmp	r0, #0
 80029f8:	d038      	beq.n	8002a6c <_svfiprintf_r+0x1c8>
 80029fa:	4b24      	ldr	r3, [pc, #144]	; (8002a8c <_svfiprintf_r+0x1e8>)
 80029fc:	bb13      	cbnz	r3, 8002a44 <_svfiprintf_r+0x1a0>
 80029fe:	9b03      	ldr	r3, [sp, #12]
 8002a00:	3307      	adds	r3, #7
 8002a02:	f023 0307 	bic.w	r3, r3, #7
 8002a06:	3308      	adds	r3, #8
 8002a08:	9303      	str	r3, [sp, #12]
 8002a0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a0c:	444b      	add	r3, r9
 8002a0e:	9309      	str	r3, [sp, #36]	; 0x24
 8002a10:	e76d      	b.n	80028ee <_svfiprintf_r+0x4a>
 8002a12:	fb05 3202 	mla	r2, r5, r2, r3
 8002a16:	2001      	movs	r0, #1
 8002a18:	460f      	mov	r7, r1
 8002a1a:	e7a6      	b.n	800296a <_svfiprintf_r+0xc6>
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	250a      	movs	r5, #10
 8002a20:	4619      	mov	r1, r3
 8002a22:	3701      	adds	r7, #1
 8002a24:	9305      	str	r3, [sp, #20]
 8002a26:	4638      	mov	r0, r7
 8002a28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002a2c:	3a30      	subs	r2, #48	; 0x30
 8002a2e:	2a09      	cmp	r2, #9
 8002a30:	d903      	bls.n	8002a3a <_svfiprintf_r+0x196>
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d0c8      	beq.n	80029c8 <_svfiprintf_r+0x124>
 8002a36:	9105      	str	r1, [sp, #20]
 8002a38:	e7c6      	b.n	80029c8 <_svfiprintf_r+0x124>
 8002a3a:	fb05 2101 	mla	r1, r5, r1, r2
 8002a3e:	2301      	movs	r3, #1
 8002a40:	4607      	mov	r7, r0
 8002a42:	e7f0      	b.n	8002a26 <_svfiprintf_r+0x182>
 8002a44:	ab03      	add	r3, sp, #12
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	4622      	mov	r2, r4
 8002a4a:	4b11      	ldr	r3, [pc, #68]	; (8002a90 <_svfiprintf_r+0x1ec>)
 8002a4c:	a904      	add	r1, sp, #16
 8002a4e:	4640      	mov	r0, r8
 8002a50:	f3af 8000 	nop.w
 8002a54:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002a58:	4681      	mov	r9, r0
 8002a5a:	d1d6      	bne.n	8002a0a <_svfiprintf_r+0x166>
 8002a5c:	89a3      	ldrh	r3, [r4, #12]
 8002a5e:	065b      	lsls	r3, r3, #25
 8002a60:	f53f af35 	bmi.w	80028ce <_svfiprintf_r+0x2a>
 8002a64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002a66:	b01d      	add	sp, #116	; 0x74
 8002a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a6c:	ab03      	add	r3, sp, #12
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	4622      	mov	r2, r4
 8002a72:	4b07      	ldr	r3, [pc, #28]	; (8002a90 <_svfiprintf_r+0x1ec>)
 8002a74:	a904      	add	r1, sp, #16
 8002a76:	4640      	mov	r0, r8
 8002a78:	f000 f882 	bl	8002b80 <_printf_i>
 8002a7c:	e7ea      	b.n	8002a54 <_svfiprintf_r+0x1b0>
 8002a7e:	bf00      	nop
 8002a80:	08003060 	.word	0x08003060
 8002a84:	08003066 	.word	0x08003066
 8002a88:	0800306a 	.word	0x0800306a
 8002a8c:	00000000 	.word	0x00000000
 8002a90:	080027f1 	.word	0x080027f1

08002a94 <_printf_common>:
 8002a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a98:	4691      	mov	r9, r2
 8002a9a:	461f      	mov	r7, r3
 8002a9c:	688a      	ldr	r2, [r1, #8]
 8002a9e:	690b      	ldr	r3, [r1, #16]
 8002aa0:	4606      	mov	r6, r0
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	bfb8      	it	lt
 8002aa6:	4613      	movlt	r3, r2
 8002aa8:	f8c9 3000 	str.w	r3, [r9]
 8002aac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002ab0:	460c      	mov	r4, r1
 8002ab2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ab6:	b112      	cbz	r2, 8002abe <_printf_common+0x2a>
 8002ab8:	3301      	adds	r3, #1
 8002aba:	f8c9 3000 	str.w	r3, [r9]
 8002abe:	6823      	ldr	r3, [r4, #0]
 8002ac0:	0699      	lsls	r1, r3, #26
 8002ac2:	bf42      	ittt	mi
 8002ac4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002ac8:	3302      	addmi	r3, #2
 8002aca:	f8c9 3000 	strmi.w	r3, [r9]
 8002ace:	6825      	ldr	r5, [r4, #0]
 8002ad0:	f015 0506 	ands.w	r5, r5, #6
 8002ad4:	d107      	bne.n	8002ae6 <_printf_common+0x52>
 8002ad6:	f104 0a19 	add.w	sl, r4, #25
 8002ada:	68e3      	ldr	r3, [r4, #12]
 8002adc:	f8d9 2000 	ldr.w	r2, [r9]
 8002ae0:	1a9b      	subs	r3, r3, r2
 8002ae2:	42ab      	cmp	r3, r5
 8002ae4:	dc29      	bgt.n	8002b3a <_printf_common+0xa6>
 8002ae6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002aea:	6822      	ldr	r2, [r4, #0]
 8002aec:	3300      	adds	r3, #0
 8002aee:	bf18      	it	ne
 8002af0:	2301      	movne	r3, #1
 8002af2:	0692      	lsls	r2, r2, #26
 8002af4:	d42e      	bmi.n	8002b54 <_printf_common+0xc0>
 8002af6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002afa:	4639      	mov	r1, r7
 8002afc:	4630      	mov	r0, r6
 8002afe:	47c0      	blx	r8
 8002b00:	3001      	adds	r0, #1
 8002b02:	d021      	beq.n	8002b48 <_printf_common+0xb4>
 8002b04:	6823      	ldr	r3, [r4, #0]
 8002b06:	68e5      	ldr	r5, [r4, #12]
 8002b08:	f003 0306 	and.w	r3, r3, #6
 8002b0c:	2b04      	cmp	r3, #4
 8002b0e:	bf18      	it	ne
 8002b10:	2500      	movne	r5, #0
 8002b12:	f8d9 2000 	ldr.w	r2, [r9]
 8002b16:	f04f 0900 	mov.w	r9, #0
 8002b1a:	bf08      	it	eq
 8002b1c:	1aad      	subeq	r5, r5, r2
 8002b1e:	68a3      	ldr	r3, [r4, #8]
 8002b20:	6922      	ldr	r2, [r4, #16]
 8002b22:	bf08      	it	eq
 8002b24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	bfc4      	itt	gt
 8002b2c:	1a9b      	subgt	r3, r3, r2
 8002b2e:	18ed      	addgt	r5, r5, r3
 8002b30:	341a      	adds	r4, #26
 8002b32:	454d      	cmp	r5, r9
 8002b34:	d11a      	bne.n	8002b6c <_printf_common+0xd8>
 8002b36:	2000      	movs	r0, #0
 8002b38:	e008      	b.n	8002b4c <_printf_common+0xb8>
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	4652      	mov	r2, sl
 8002b3e:	4639      	mov	r1, r7
 8002b40:	4630      	mov	r0, r6
 8002b42:	47c0      	blx	r8
 8002b44:	3001      	adds	r0, #1
 8002b46:	d103      	bne.n	8002b50 <_printf_common+0xbc>
 8002b48:	f04f 30ff 	mov.w	r0, #4294967295
 8002b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b50:	3501      	adds	r5, #1
 8002b52:	e7c2      	b.n	8002ada <_printf_common+0x46>
 8002b54:	2030      	movs	r0, #48	; 0x30
 8002b56:	18e1      	adds	r1, r4, r3
 8002b58:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002b5c:	1c5a      	adds	r2, r3, #1
 8002b5e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002b62:	4422      	add	r2, r4
 8002b64:	3302      	adds	r3, #2
 8002b66:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002b6a:	e7c4      	b.n	8002af6 <_printf_common+0x62>
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	4622      	mov	r2, r4
 8002b70:	4639      	mov	r1, r7
 8002b72:	4630      	mov	r0, r6
 8002b74:	47c0      	blx	r8
 8002b76:	3001      	adds	r0, #1
 8002b78:	d0e6      	beq.n	8002b48 <_printf_common+0xb4>
 8002b7a:	f109 0901 	add.w	r9, r9, #1
 8002b7e:	e7d8      	b.n	8002b32 <_printf_common+0x9e>

08002b80 <_printf_i>:
 8002b80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b84:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002b88:	460c      	mov	r4, r1
 8002b8a:	7e09      	ldrb	r1, [r1, #24]
 8002b8c:	b085      	sub	sp, #20
 8002b8e:	296e      	cmp	r1, #110	; 0x6e
 8002b90:	4617      	mov	r7, r2
 8002b92:	4606      	mov	r6, r0
 8002b94:	4698      	mov	r8, r3
 8002b96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002b98:	f000 80b3 	beq.w	8002d02 <_printf_i+0x182>
 8002b9c:	d822      	bhi.n	8002be4 <_printf_i+0x64>
 8002b9e:	2963      	cmp	r1, #99	; 0x63
 8002ba0:	d036      	beq.n	8002c10 <_printf_i+0x90>
 8002ba2:	d80a      	bhi.n	8002bba <_printf_i+0x3a>
 8002ba4:	2900      	cmp	r1, #0
 8002ba6:	f000 80b9 	beq.w	8002d1c <_printf_i+0x19c>
 8002baa:	2958      	cmp	r1, #88	; 0x58
 8002bac:	f000 8083 	beq.w	8002cb6 <_printf_i+0x136>
 8002bb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002bb4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002bb8:	e032      	b.n	8002c20 <_printf_i+0xa0>
 8002bba:	2964      	cmp	r1, #100	; 0x64
 8002bbc:	d001      	beq.n	8002bc2 <_printf_i+0x42>
 8002bbe:	2969      	cmp	r1, #105	; 0x69
 8002bc0:	d1f6      	bne.n	8002bb0 <_printf_i+0x30>
 8002bc2:	6820      	ldr	r0, [r4, #0]
 8002bc4:	6813      	ldr	r3, [r2, #0]
 8002bc6:	0605      	lsls	r5, r0, #24
 8002bc8:	f103 0104 	add.w	r1, r3, #4
 8002bcc:	d52a      	bpl.n	8002c24 <_printf_i+0xa4>
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6011      	str	r1, [r2, #0]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	da03      	bge.n	8002bde <_printf_i+0x5e>
 8002bd6:	222d      	movs	r2, #45	; 0x2d
 8002bd8:	425b      	negs	r3, r3
 8002bda:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002bde:	486f      	ldr	r0, [pc, #444]	; (8002d9c <_printf_i+0x21c>)
 8002be0:	220a      	movs	r2, #10
 8002be2:	e039      	b.n	8002c58 <_printf_i+0xd8>
 8002be4:	2973      	cmp	r1, #115	; 0x73
 8002be6:	f000 809d 	beq.w	8002d24 <_printf_i+0x1a4>
 8002bea:	d808      	bhi.n	8002bfe <_printf_i+0x7e>
 8002bec:	296f      	cmp	r1, #111	; 0x6f
 8002bee:	d020      	beq.n	8002c32 <_printf_i+0xb2>
 8002bf0:	2970      	cmp	r1, #112	; 0x70
 8002bf2:	d1dd      	bne.n	8002bb0 <_printf_i+0x30>
 8002bf4:	6823      	ldr	r3, [r4, #0]
 8002bf6:	f043 0320 	orr.w	r3, r3, #32
 8002bfa:	6023      	str	r3, [r4, #0]
 8002bfc:	e003      	b.n	8002c06 <_printf_i+0x86>
 8002bfe:	2975      	cmp	r1, #117	; 0x75
 8002c00:	d017      	beq.n	8002c32 <_printf_i+0xb2>
 8002c02:	2978      	cmp	r1, #120	; 0x78
 8002c04:	d1d4      	bne.n	8002bb0 <_printf_i+0x30>
 8002c06:	2378      	movs	r3, #120	; 0x78
 8002c08:	4865      	ldr	r0, [pc, #404]	; (8002da0 <_printf_i+0x220>)
 8002c0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002c0e:	e055      	b.n	8002cbc <_printf_i+0x13c>
 8002c10:	6813      	ldr	r3, [r2, #0]
 8002c12:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c16:	1d19      	adds	r1, r3, #4
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	6011      	str	r1, [r2, #0]
 8002c1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c20:	2301      	movs	r3, #1
 8002c22:	e08c      	b.n	8002d3e <_printf_i+0x1be>
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002c2a:	6011      	str	r1, [r2, #0]
 8002c2c:	bf18      	it	ne
 8002c2e:	b21b      	sxthne	r3, r3
 8002c30:	e7cf      	b.n	8002bd2 <_printf_i+0x52>
 8002c32:	6813      	ldr	r3, [r2, #0]
 8002c34:	6825      	ldr	r5, [r4, #0]
 8002c36:	1d18      	adds	r0, r3, #4
 8002c38:	6010      	str	r0, [r2, #0]
 8002c3a:	0628      	lsls	r0, r5, #24
 8002c3c:	d501      	bpl.n	8002c42 <_printf_i+0xc2>
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	e002      	b.n	8002c48 <_printf_i+0xc8>
 8002c42:	0668      	lsls	r0, r5, #25
 8002c44:	d5fb      	bpl.n	8002c3e <_printf_i+0xbe>
 8002c46:	881b      	ldrh	r3, [r3, #0]
 8002c48:	296f      	cmp	r1, #111	; 0x6f
 8002c4a:	bf14      	ite	ne
 8002c4c:	220a      	movne	r2, #10
 8002c4e:	2208      	moveq	r2, #8
 8002c50:	4852      	ldr	r0, [pc, #328]	; (8002d9c <_printf_i+0x21c>)
 8002c52:	2100      	movs	r1, #0
 8002c54:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002c58:	6865      	ldr	r5, [r4, #4]
 8002c5a:	2d00      	cmp	r5, #0
 8002c5c:	60a5      	str	r5, [r4, #8]
 8002c5e:	f2c0 8095 	blt.w	8002d8c <_printf_i+0x20c>
 8002c62:	6821      	ldr	r1, [r4, #0]
 8002c64:	f021 0104 	bic.w	r1, r1, #4
 8002c68:	6021      	str	r1, [r4, #0]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d13d      	bne.n	8002cea <_printf_i+0x16a>
 8002c6e:	2d00      	cmp	r5, #0
 8002c70:	f040 808e 	bne.w	8002d90 <_printf_i+0x210>
 8002c74:	4665      	mov	r5, ip
 8002c76:	2a08      	cmp	r2, #8
 8002c78:	d10b      	bne.n	8002c92 <_printf_i+0x112>
 8002c7a:	6823      	ldr	r3, [r4, #0]
 8002c7c:	07db      	lsls	r3, r3, #31
 8002c7e:	d508      	bpl.n	8002c92 <_printf_i+0x112>
 8002c80:	6923      	ldr	r3, [r4, #16]
 8002c82:	6862      	ldr	r2, [r4, #4]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	bfde      	ittt	le
 8002c88:	2330      	movle	r3, #48	; 0x30
 8002c8a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002c8e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002c92:	ebac 0305 	sub.w	r3, ip, r5
 8002c96:	6123      	str	r3, [r4, #16]
 8002c98:	f8cd 8000 	str.w	r8, [sp]
 8002c9c:	463b      	mov	r3, r7
 8002c9e:	aa03      	add	r2, sp, #12
 8002ca0:	4621      	mov	r1, r4
 8002ca2:	4630      	mov	r0, r6
 8002ca4:	f7ff fef6 	bl	8002a94 <_printf_common>
 8002ca8:	3001      	adds	r0, #1
 8002caa:	d14d      	bne.n	8002d48 <_printf_i+0x1c8>
 8002cac:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb0:	b005      	add	sp, #20
 8002cb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002cb6:	4839      	ldr	r0, [pc, #228]	; (8002d9c <_printf_i+0x21c>)
 8002cb8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002cbc:	6813      	ldr	r3, [r2, #0]
 8002cbe:	6821      	ldr	r1, [r4, #0]
 8002cc0:	1d1d      	adds	r5, r3, #4
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6015      	str	r5, [r2, #0]
 8002cc6:	060a      	lsls	r2, r1, #24
 8002cc8:	d50b      	bpl.n	8002ce2 <_printf_i+0x162>
 8002cca:	07ca      	lsls	r2, r1, #31
 8002ccc:	bf44      	itt	mi
 8002cce:	f041 0120 	orrmi.w	r1, r1, #32
 8002cd2:	6021      	strmi	r1, [r4, #0]
 8002cd4:	b91b      	cbnz	r3, 8002cde <_printf_i+0x15e>
 8002cd6:	6822      	ldr	r2, [r4, #0]
 8002cd8:	f022 0220 	bic.w	r2, r2, #32
 8002cdc:	6022      	str	r2, [r4, #0]
 8002cde:	2210      	movs	r2, #16
 8002ce0:	e7b7      	b.n	8002c52 <_printf_i+0xd2>
 8002ce2:	064d      	lsls	r5, r1, #25
 8002ce4:	bf48      	it	mi
 8002ce6:	b29b      	uxthmi	r3, r3
 8002ce8:	e7ef      	b.n	8002cca <_printf_i+0x14a>
 8002cea:	4665      	mov	r5, ip
 8002cec:	fbb3 f1f2 	udiv	r1, r3, r2
 8002cf0:	fb02 3311 	mls	r3, r2, r1, r3
 8002cf4:	5cc3      	ldrb	r3, [r0, r3]
 8002cf6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	2900      	cmp	r1, #0
 8002cfe:	d1f5      	bne.n	8002cec <_printf_i+0x16c>
 8002d00:	e7b9      	b.n	8002c76 <_printf_i+0xf6>
 8002d02:	6813      	ldr	r3, [r2, #0]
 8002d04:	6825      	ldr	r5, [r4, #0]
 8002d06:	1d18      	adds	r0, r3, #4
 8002d08:	6961      	ldr	r1, [r4, #20]
 8002d0a:	6010      	str	r0, [r2, #0]
 8002d0c:	0628      	lsls	r0, r5, #24
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	d501      	bpl.n	8002d16 <_printf_i+0x196>
 8002d12:	6019      	str	r1, [r3, #0]
 8002d14:	e002      	b.n	8002d1c <_printf_i+0x19c>
 8002d16:	066a      	lsls	r2, r5, #25
 8002d18:	d5fb      	bpl.n	8002d12 <_printf_i+0x192>
 8002d1a:	8019      	strh	r1, [r3, #0]
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	4665      	mov	r5, ip
 8002d20:	6123      	str	r3, [r4, #16]
 8002d22:	e7b9      	b.n	8002c98 <_printf_i+0x118>
 8002d24:	6813      	ldr	r3, [r2, #0]
 8002d26:	1d19      	adds	r1, r3, #4
 8002d28:	6011      	str	r1, [r2, #0]
 8002d2a:	681d      	ldr	r5, [r3, #0]
 8002d2c:	6862      	ldr	r2, [r4, #4]
 8002d2e:	2100      	movs	r1, #0
 8002d30:	4628      	mov	r0, r5
 8002d32:	f000 f837 	bl	8002da4 <memchr>
 8002d36:	b108      	cbz	r0, 8002d3c <_printf_i+0x1bc>
 8002d38:	1b40      	subs	r0, r0, r5
 8002d3a:	6060      	str	r0, [r4, #4]
 8002d3c:	6863      	ldr	r3, [r4, #4]
 8002d3e:	6123      	str	r3, [r4, #16]
 8002d40:	2300      	movs	r3, #0
 8002d42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d46:	e7a7      	b.n	8002c98 <_printf_i+0x118>
 8002d48:	6923      	ldr	r3, [r4, #16]
 8002d4a:	462a      	mov	r2, r5
 8002d4c:	4639      	mov	r1, r7
 8002d4e:	4630      	mov	r0, r6
 8002d50:	47c0      	blx	r8
 8002d52:	3001      	adds	r0, #1
 8002d54:	d0aa      	beq.n	8002cac <_printf_i+0x12c>
 8002d56:	6823      	ldr	r3, [r4, #0]
 8002d58:	079b      	lsls	r3, r3, #30
 8002d5a:	d413      	bmi.n	8002d84 <_printf_i+0x204>
 8002d5c:	68e0      	ldr	r0, [r4, #12]
 8002d5e:	9b03      	ldr	r3, [sp, #12]
 8002d60:	4298      	cmp	r0, r3
 8002d62:	bfb8      	it	lt
 8002d64:	4618      	movlt	r0, r3
 8002d66:	e7a3      	b.n	8002cb0 <_printf_i+0x130>
 8002d68:	2301      	movs	r3, #1
 8002d6a:	464a      	mov	r2, r9
 8002d6c:	4639      	mov	r1, r7
 8002d6e:	4630      	mov	r0, r6
 8002d70:	47c0      	blx	r8
 8002d72:	3001      	adds	r0, #1
 8002d74:	d09a      	beq.n	8002cac <_printf_i+0x12c>
 8002d76:	3501      	adds	r5, #1
 8002d78:	68e3      	ldr	r3, [r4, #12]
 8002d7a:	9a03      	ldr	r2, [sp, #12]
 8002d7c:	1a9b      	subs	r3, r3, r2
 8002d7e:	42ab      	cmp	r3, r5
 8002d80:	dcf2      	bgt.n	8002d68 <_printf_i+0x1e8>
 8002d82:	e7eb      	b.n	8002d5c <_printf_i+0x1dc>
 8002d84:	2500      	movs	r5, #0
 8002d86:	f104 0919 	add.w	r9, r4, #25
 8002d8a:	e7f5      	b.n	8002d78 <_printf_i+0x1f8>
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1ac      	bne.n	8002cea <_printf_i+0x16a>
 8002d90:	7803      	ldrb	r3, [r0, #0]
 8002d92:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d96:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d9a:	e76c      	b.n	8002c76 <_printf_i+0xf6>
 8002d9c:	08003071 	.word	0x08003071
 8002da0:	08003082 	.word	0x08003082

08002da4 <memchr>:
 8002da4:	b510      	push	{r4, lr}
 8002da6:	b2c9      	uxtb	r1, r1
 8002da8:	4402      	add	r2, r0
 8002daa:	4290      	cmp	r0, r2
 8002dac:	4603      	mov	r3, r0
 8002dae:	d101      	bne.n	8002db4 <memchr+0x10>
 8002db0:	2300      	movs	r3, #0
 8002db2:	e003      	b.n	8002dbc <memchr+0x18>
 8002db4:	781c      	ldrb	r4, [r3, #0]
 8002db6:	3001      	adds	r0, #1
 8002db8:	428c      	cmp	r4, r1
 8002dba:	d1f6      	bne.n	8002daa <memchr+0x6>
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	bd10      	pop	{r4, pc}

08002dc0 <memcpy>:
 8002dc0:	b510      	push	{r4, lr}
 8002dc2:	1e43      	subs	r3, r0, #1
 8002dc4:	440a      	add	r2, r1
 8002dc6:	4291      	cmp	r1, r2
 8002dc8:	d100      	bne.n	8002dcc <memcpy+0xc>
 8002dca:	bd10      	pop	{r4, pc}
 8002dcc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002dd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002dd4:	e7f7      	b.n	8002dc6 <memcpy+0x6>

08002dd6 <memmove>:
 8002dd6:	4288      	cmp	r0, r1
 8002dd8:	b510      	push	{r4, lr}
 8002dda:	eb01 0302 	add.w	r3, r1, r2
 8002dde:	d807      	bhi.n	8002df0 <memmove+0x1a>
 8002de0:	1e42      	subs	r2, r0, #1
 8002de2:	4299      	cmp	r1, r3
 8002de4:	d00a      	beq.n	8002dfc <memmove+0x26>
 8002de6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002dea:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002dee:	e7f8      	b.n	8002de2 <memmove+0xc>
 8002df0:	4283      	cmp	r3, r0
 8002df2:	d9f5      	bls.n	8002de0 <memmove+0xa>
 8002df4:	1881      	adds	r1, r0, r2
 8002df6:	1ad2      	subs	r2, r2, r3
 8002df8:	42d3      	cmn	r3, r2
 8002dfa:	d100      	bne.n	8002dfe <memmove+0x28>
 8002dfc:	bd10      	pop	{r4, pc}
 8002dfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002e02:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002e06:	e7f7      	b.n	8002df8 <memmove+0x22>

08002e08 <_free_r>:
 8002e08:	b538      	push	{r3, r4, r5, lr}
 8002e0a:	4605      	mov	r5, r0
 8002e0c:	2900      	cmp	r1, #0
 8002e0e:	d043      	beq.n	8002e98 <_free_r+0x90>
 8002e10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e14:	1f0c      	subs	r4, r1, #4
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	bfb8      	it	lt
 8002e1a:	18e4      	addlt	r4, r4, r3
 8002e1c:	f000 f8d0 	bl	8002fc0 <__malloc_lock>
 8002e20:	4a1e      	ldr	r2, [pc, #120]	; (8002e9c <_free_r+0x94>)
 8002e22:	6813      	ldr	r3, [r2, #0]
 8002e24:	4610      	mov	r0, r2
 8002e26:	b933      	cbnz	r3, 8002e36 <_free_r+0x2e>
 8002e28:	6063      	str	r3, [r4, #4]
 8002e2a:	6014      	str	r4, [r2, #0]
 8002e2c:	4628      	mov	r0, r5
 8002e2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e32:	f000 b8c6 	b.w	8002fc2 <__malloc_unlock>
 8002e36:	42a3      	cmp	r3, r4
 8002e38:	d90b      	bls.n	8002e52 <_free_r+0x4a>
 8002e3a:	6821      	ldr	r1, [r4, #0]
 8002e3c:	1862      	adds	r2, r4, r1
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	bf01      	itttt	eq
 8002e42:	681a      	ldreq	r2, [r3, #0]
 8002e44:	685b      	ldreq	r3, [r3, #4]
 8002e46:	1852      	addeq	r2, r2, r1
 8002e48:	6022      	streq	r2, [r4, #0]
 8002e4a:	6063      	str	r3, [r4, #4]
 8002e4c:	6004      	str	r4, [r0, #0]
 8002e4e:	e7ed      	b.n	8002e2c <_free_r+0x24>
 8002e50:	4613      	mov	r3, r2
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	b10a      	cbz	r2, 8002e5a <_free_r+0x52>
 8002e56:	42a2      	cmp	r2, r4
 8002e58:	d9fa      	bls.n	8002e50 <_free_r+0x48>
 8002e5a:	6819      	ldr	r1, [r3, #0]
 8002e5c:	1858      	adds	r0, r3, r1
 8002e5e:	42a0      	cmp	r0, r4
 8002e60:	d10b      	bne.n	8002e7a <_free_r+0x72>
 8002e62:	6820      	ldr	r0, [r4, #0]
 8002e64:	4401      	add	r1, r0
 8002e66:	1858      	adds	r0, r3, r1
 8002e68:	4282      	cmp	r2, r0
 8002e6a:	6019      	str	r1, [r3, #0]
 8002e6c:	d1de      	bne.n	8002e2c <_free_r+0x24>
 8002e6e:	6810      	ldr	r0, [r2, #0]
 8002e70:	6852      	ldr	r2, [r2, #4]
 8002e72:	4401      	add	r1, r0
 8002e74:	6019      	str	r1, [r3, #0]
 8002e76:	605a      	str	r2, [r3, #4]
 8002e78:	e7d8      	b.n	8002e2c <_free_r+0x24>
 8002e7a:	d902      	bls.n	8002e82 <_free_r+0x7a>
 8002e7c:	230c      	movs	r3, #12
 8002e7e:	602b      	str	r3, [r5, #0]
 8002e80:	e7d4      	b.n	8002e2c <_free_r+0x24>
 8002e82:	6820      	ldr	r0, [r4, #0]
 8002e84:	1821      	adds	r1, r4, r0
 8002e86:	428a      	cmp	r2, r1
 8002e88:	bf01      	itttt	eq
 8002e8a:	6811      	ldreq	r1, [r2, #0]
 8002e8c:	6852      	ldreq	r2, [r2, #4]
 8002e8e:	1809      	addeq	r1, r1, r0
 8002e90:	6021      	streq	r1, [r4, #0]
 8002e92:	6062      	str	r2, [r4, #4]
 8002e94:	605c      	str	r4, [r3, #4]
 8002e96:	e7c9      	b.n	8002e2c <_free_r+0x24>
 8002e98:	bd38      	pop	{r3, r4, r5, pc}
 8002e9a:	bf00      	nop
 8002e9c:	20000090 	.word	0x20000090

08002ea0 <_malloc_r>:
 8002ea0:	b570      	push	{r4, r5, r6, lr}
 8002ea2:	1ccd      	adds	r5, r1, #3
 8002ea4:	f025 0503 	bic.w	r5, r5, #3
 8002ea8:	3508      	adds	r5, #8
 8002eaa:	2d0c      	cmp	r5, #12
 8002eac:	bf38      	it	cc
 8002eae:	250c      	movcc	r5, #12
 8002eb0:	2d00      	cmp	r5, #0
 8002eb2:	4606      	mov	r6, r0
 8002eb4:	db01      	blt.n	8002eba <_malloc_r+0x1a>
 8002eb6:	42a9      	cmp	r1, r5
 8002eb8:	d903      	bls.n	8002ec2 <_malloc_r+0x22>
 8002eba:	230c      	movs	r3, #12
 8002ebc:	6033      	str	r3, [r6, #0]
 8002ebe:	2000      	movs	r0, #0
 8002ec0:	bd70      	pop	{r4, r5, r6, pc}
 8002ec2:	f000 f87d 	bl	8002fc0 <__malloc_lock>
 8002ec6:	4a21      	ldr	r2, [pc, #132]	; (8002f4c <_malloc_r+0xac>)
 8002ec8:	6814      	ldr	r4, [r2, #0]
 8002eca:	4621      	mov	r1, r4
 8002ecc:	b991      	cbnz	r1, 8002ef4 <_malloc_r+0x54>
 8002ece:	4c20      	ldr	r4, [pc, #128]	; (8002f50 <_malloc_r+0xb0>)
 8002ed0:	6823      	ldr	r3, [r4, #0]
 8002ed2:	b91b      	cbnz	r3, 8002edc <_malloc_r+0x3c>
 8002ed4:	4630      	mov	r0, r6
 8002ed6:	f000 f863 	bl	8002fa0 <_sbrk_r>
 8002eda:	6020      	str	r0, [r4, #0]
 8002edc:	4629      	mov	r1, r5
 8002ede:	4630      	mov	r0, r6
 8002ee0:	f000 f85e 	bl	8002fa0 <_sbrk_r>
 8002ee4:	1c43      	adds	r3, r0, #1
 8002ee6:	d124      	bne.n	8002f32 <_malloc_r+0x92>
 8002ee8:	230c      	movs	r3, #12
 8002eea:	4630      	mov	r0, r6
 8002eec:	6033      	str	r3, [r6, #0]
 8002eee:	f000 f868 	bl	8002fc2 <__malloc_unlock>
 8002ef2:	e7e4      	b.n	8002ebe <_malloc_r+0x1e>
 8002ef4:	680b      	ldr	r3, [r1, #0]
 8002ef6:	1b5b      	subs	r3, r3, r5
 8002ef8:	d418      	bmi.n	8002f2c <_malloc_r+0x8c>
 8002efa:	2b0b      	cmp	r3, #11
 8002efc:	d90f      	bls.n	8002f1e <_malloc_r+0x7e>
 8002efe:	600b      	str	r3, [r1, #0]
 8002f00:	18cc      	adds	r4, r1, r3
 8002f02:	50cd      	str	r5, [r1, r3]
 8002f04:	4630      	mov	r0, r6
 8002f06:	f000 f85c 	bl	8002fc2 <__malloc_unlock>
 8002f0a:	f104 000b 	add.w	r0, r4, #11
 8002f0e:	1d23      	adds	r3, r4, #4
 8002f10:	f020 0007 	bic.w	r0, r0, #7
 8002f14:	1ac3      	subs	r3, r0, r3
 8002f16:	d0d3      	beq.n	8002ec0 <_malloc_r+0x20>
 8002f18:	425a      	negs	r2, r3
 8002f1a:	50e2      	str	r2, [r4, r3]
 8002f1c:	e7d0      	b.n	8002ec0 <_malloc_r+0x20>
 8002f1e:	684b      	ldr	r3, [r1, #4]
 8002f20:	428c      	cmp	r4, r1
 8002f22:	bf16      	itet	ne
 8002f24:	6063      	strne	r3, [r4, #4]
 8002f26:	6013      	streq	r3, [r2, #0]
 8002f28:	460c      	movne	r4, r1
 8002f2a:	e7eb      	b.n	8002f04 <_malloc_r+0x64>
 8002f2c:	460c      	mov	r4, r1
 8002f2e:	6849      	ldr	r1, [r1, #4]
 8002f30:	e7cc      	b.n	8002ecc <_malloc_r+0x2c>
 8002f32:	1cc4      	adds	r4, r0, #3
 8002f34:	f024 0403 	bic.w	r4, r4, #3
 8002f38:	42a0      	cmp	r0, r4
 8002f3a:	d005      	beq.n	8002f48 <_malloc_r+0xa8>
 8002f3c:	1a21      	subs	r1, r4, r0
 8002f3e:	4630      	mov	r0, r6
 8002f40:	f000 f82e 	bl	8002fa0 <_sbrk_r>
 8002f44:	3001      	adds	r0, #1
 8002f46:	d0cf      	beq.n	8002ee8 <_malloc_r+0x48>
 8002f48:	6025      	str	r5, [r4, #0]
 8002f4a:	e7db      	b.n	8002f04 <_malloc_r+0x64>
 8002f4c:	20000090 	.word	0x20000090
 8002f50:	20000094 	.word	0x20000094

08002f54 <_realloc_r>:
 8002f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f56:	4607      	mov	r7, r0
 8002f58:	4614      	mov	r4, r2
 8002f5a:	460e      	mov	r6, r1
 8002f5c:	b921      	cbnz	r1, 8002f68 <_realloc_r+0x14>
 8002f5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002f62:	4611      	mov	r1, r2
 8002f64:	f7ff bf9c 	b.w	8002ea0 <_malloc_r>
 8002f68:	b922      	cbnz	r2, 8002f74 <_realloc_r+0x20>
 8002f6a:	f7ff ff4d 	bl	8002e08 <_free_r>
 8002f6e:	4625      	mov	r5, r4
 8002f70:	4628      	mov	r0, r5
 8002f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f74:	f000 f826 	bl	8002fc4 <_malloc_usable_size_r>
 8002f78:	42a0      	cmp	r0, r4
 8002f7a:	d20f      	bcs.n	8002f9c <_realloc_r+0x48>
 8002f7c:	4621      	mov	r1, r4
 8002f7e:	4638      	mov	r0, r7
 8002f80:	f7ff ff8e 	bl	8002ea0 <_malloc_r>
 8002f84:	4605      	mov	r5, r0
 8002f86:	2800      	cmp	r0, #0
 8002f88:	d0f2      	beq.n	8002f70 <_realloc_r+0x1c>
 8002f8a:	4631      	mov	r1, r6
 8002f8c:	4622      	mov	r2, r4
 8002f8e:	f7ff ff17 	bl	8002dc0 <memcpy>
 8002f92:	4631      	mov	r1, r6
 8002f94:	4638      	mov	r0, r7
 8002f96:	f7ff ff37 	bl	8002e08 <_free_r>
 8002f9a:	e7e9      	b.n	8002f70 <_realloc_r+0x1c>
 8002f9c:	4635      	mov	r5, r6
 8002f9e:	e7e7      	b.n	8002f70 <_realloc_r+0x1c>

08002fa0 <_sbrk_r>:
 8002fa0:	b538      	push	{r3, r4, r5, lr}
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	4c05      	ldr	r4, [pc, #20]	; (8002fbc <_sbrk_r+0x1c>)
 8002fa6:	4605      	mov	r5, r0
 8002fa8:	4608      	mov	r0, r1
 8002faa:	6023      	str	r3, [r4, #0]
 8002fac:	f7fd fbd6 	bl	800075c <_sbrk>
 8002fb0:	1c43      	adds	r3, r0, #1
 8002fb2:	d102      	bne.n	8002fba <_sbrk_r+0x1a>
 8002fb4:	6823      	ldr	r3, [r4, #0]
 8002fb6:	b103      	cbz	r3, 8002fba <_sbrk_r+0x1a>
 8002fb8:	602b      	str	r3, [r5, #0]
 8002fba:	bd38      	pop	{r3, r4, r5, pc}
 8002fbc:	200001c4 	.word	0x200001c4

08002fc0 <__malloc_lock>:
 8002fc0:	4770      	bx	lr

08002fc2 <__malloc_unlock>:
 8002fc2:	4770      	bx	lr

08002fc4 <_malloc_usable_size_r>:
 8002fc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fc8:	1f18      	subs	r0, r3, #4
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	bfbc      	itt	lt
 8002fce:	580b      	ldrlt	r3, [r1, r0]
 8002fd0:	18c0      	addlt	r0, r0, r3
 8002fd2:	4770      	bx	lr

08002fd4 <_init>:
 8002fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fd6:	bf00      	nop
 8002fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fda:	bc08      	pop	{r3}
 8002fdc:	469e      	mov	lr, r3
 8002fde:	4770      	bx	lr

08002fe0 <_fini>:
 8002fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fe2:	bf00      	nop
 8002fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fe6:	bc08      	pop	{r3}
 8002fe8:	469e      	mov	lr, r3
 8002fea:	4770      	bx	lr
