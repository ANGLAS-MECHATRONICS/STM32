
ADC_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002af8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08002c04  08002c04  00012c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c84  08002c84  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002c84  08002c84  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c84  08002c84  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c84  08002c84  00012c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c88  08002c88  00012c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002c8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000070  08002cfc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08002cfc  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000696d  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000158e  00000000  00000000  00026a06  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000710  00000000  00000000  00027f98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000648  00000000  00000000  000286a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001363e  00000000  00000000  00028cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000063cd  00000000  00000000  0003c32e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006f5b4  00000000  00000000  000426fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b1caf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e78  00000000  00000000  000b1d2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002bec 	.word	0x08002bec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002bec 	.word	0x08002bec

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 faa7 	bl	80006a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f83d 	bl	80001d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f8f3 	bl	8000344 <MX_GPIO_Init>
  MX_ADC1_Init();
 800015e:	f000 f889 	bl	8000274 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000162:	f000 f8c5 	bl	80002f0 <MX_USART1_UART_Init>
  char buffer[20];
  uint8_t stringSize;

  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 8000166:	4817      	ldr	r0, [pc, #92]	; (80001c4 <main+0x78>)
 8000168:	f000 fbd6 	bl	8000918 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100);
 800016c:	2164      	movs	r1, #100	; 0x64
 800016e:	4815      	ldr	r0, [pc, #84]	; (80001c4 <main+0x78>)
 8000170:	f000 fc80 	bl	8000a74 <HAL_ADC_PollForConversion>
	  adcSample=HAL_ADC_GetValue(&hadc1);
 8000174:	4813      	ldr	r0, [pc, #76]	; (80001c4 <main+0x78>)
 8000176:	f000 fd77 	bl	8000c68 <HAL_ADC_GetValue>
 800017a:	4603      	mov	r3, r0
 800017c:	82fb      	strh	r3, [r7, #22]
	  stringSize=sprintf(buffer,"ADC: %u\r\n",adcSample);
 800017e:	8afa      	ldrh	r2, [r7, #22]
 8000180:	463b      	mov	r3, r7
 8000182:	4911      	ldr	r1, [pc, #68]	; (80001c8 <main+0x7c>)
 8000184:	4618      	mov	r0, r3
 8000186:	f002 f91f 	bl	80023c8 <siprintf>
 800018a:	4603      	mov	r3, r0
 800018c:	757b      	strb	r3, [r7, #21]
	  HAL_UART_Transmit(&huart1, buffer, stringSize, 100);
 800018e:	7d7b      	ldrb	r3, [r7, #21]
 8000190:	b29a      	uxth	r2, r3
 8000192:	4639      	mov	r1, r7
 8000194:	2364      	movs	r3, #100	; 0x64
 8000196:	480d      	ldr	r0, [pc, #52]	; (80001cc <main+0x80>)
 8000198:	f001 ff27 	bl	8001fea <HAL_UART_Transmit>

      if(adcSample>=3000){
 800019c:	8afb      	ldrh	r3, [r7, #22]
 800019e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80001a2:	4293      	cmp	r3, r2
 80001a4:	d906      	bls.n	80001b4 <main+0x68>
    	 HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, 0);//enciende led de placa logica inversa
 80001a6:	2200      	movs	r2, #0
 80001a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001ac:	4808      	ldr	r0, [pc, #32]	; (80001d0 <main+0x84>)
 80001ae:	f001 f929 	bl	8001404 <HAL_GPIO_WritePin>
 80001b2:	e7d8      	b.n	8000166 <main+0x1a>
      }else{
    	  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, 1);//apaga led
 80001b4:	2201      	movs	r2, #1
 80001b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001ba:	4805      	ldr	r0, [pc, #20]	; (80001d0 <main+0x84>)
 80001bc:	f001 f922 	bl	8001404 <HAL_GPIO_WritePin>
  {
 80001c0:	e7d1      	b.n	8000166 <main+0x1a>
 80001c2:	bf00      	nop
 80001c4:	20000098 	.word	0x20000098
 80001c8:	08002c04 	.word	0x08002c04
 80001cc:	200000c8 	.word	0x200000c8
 80001d0:	40011000 	.word	0x40011000

080001d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b094      	sub	sp, #80	; 0x50
 80001d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001de:	2228      	movs	r2, #40	; 0x28
 80001e0:	2100      	movs	r1, #0
 80001e2:	4618      	mov	r0, r3
 80001e4:	f002 f8e8 	bl	80023b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e8:	f107 0314 	add.w	r3, r7, #20
 80001ec:	2200      	movs	r2, #0
 80001ee:	601a      	str	r2, [r3, #0]
 80001f0:	605a      	str	r2, [r3, #4]
 80001f2:	609a      	str	r2, [r3, #8]
 80001f4:	60da      	str	r2, [r3, #12]
 80001f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001f8:	1d3b      	adds	r3, r7, #4
 80001fa:	2200      	movs	r2, #0
 80001fc:	601a      	str	r2, [r3, #0]
 80001fe:	605a      	str	r2, [r3, #4]
 8000200:	609a      	str	r2, [r3, #8]
 8000202:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000204:	2302      	movs	r3, #2
 8000206:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000208:	2301      	movs	r3, #1
 800020a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800020c:	2310      	movs	r3, #16
 800020e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000210:	2300      	movs	r3, #0
 8000212:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000214:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000218:	4618      	mov	r0, r3
 800021a:	f001 f90b 	bl	8001434 <HAL_RCC_OscConfig>
 800021e:	4603      	mov	r3, r0
 8000220:	2b00      	cmp	r3, #0
 8000222:	d001      	beq.n	8000228 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000224:	f000 f8ce 	bl	80003c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000228:	230f      	movs	r3, #15
 800022a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800022c:	2300      	movs	r3, #0
 800022e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000230:	2300      	movs	r3, #0
 8000232:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000234:	2300      	movs	r3, #0
 8000236:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000238:	2300      	movs	r3, #0
 800023a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800023c:	f107 0314 	add.w	r3, r7, #20
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f001 fb76 	bl	8001934 <HAL_RCC_ClockConfig>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800024e:	f000 f8b9 	bl	80003c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000252:	2302      	movs	r3, #2
 8000254:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000256:	2300      	movs	r3, #0
 8000258:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	4618      	mov	r0, r3
 800025e:	f001 fd05 	bl	8001c6c <HAL_RCCEx_PeriphCLKConfig>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000268:	f000 f8ac 	bl	80003c4 <Error_Handler>
  }
}
 800026c:	bf00      	nop
 800026e:	3750      	adds	r7, #80	; 0x50
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}

08000274 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b084      	sub	sp, #16
 8000278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800027a:	1d3b      	adds	r3, r7, #4
 800027c:	2200      	movs	r2, #0
 800027e:	601a      	str	r2, [r3, #0]
 8000280:	605a      	str	r2, [r3, #4]
 8000282:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000284:	4b18      	ldr	r3, [pc, #96]	; (80002e8 <MX_ADC1_Init+0x74>)
 8000286:	4a19      	ldr	r2, [pc, #100]	; (80002ec <MX_ADC1_Init+0x78>)
 8000288:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800028a:	4b17      	ldr	r3, [pc, #92]	; (80002e8 <MX_ADC1_Init+0x74>)
 800028c:	2200      	movs	r2, #0
 800028e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000290:	4b15      	ldr	r3, [pc, #84]	; (80002e8 <MX_ADC1_Init+0x74>)
 8000292:	2200      	movs	r2, #0
 8000294:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000296:	4b14      	ldr	r3, [pc, #80]	; (80002e8 <MX_ADC1_Init+0x74>)
 8000298:	2200      	movs	r2, #0
 800029a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800029c:	4b12      	ldr	r3, [pc, #72]	; (80002e8 <MX_ADC1_Init+0x74>)
 800029e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002a2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002a4:	4b10      	ldr	r3, [pc, #64]	; (80002e8 <MX_ADC1_Init+0x74>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002aa:	4b0f      	ldr	r3, [pc, #60]	; (80002e8 <MX_ADC1_Init+0x74>)
 80002ac:	2201      	movs	r2, #1
 80002ae:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002b0:	480d      	ldr	r0, [pc, #52]	; (80002e8 <MX_ADC1_Init+0x74>)
 80002b2:	f000 fa59 	bl	8000768 <HAL_ADC_Init>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002bc:	f000 f882 	bl	80003c4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80002c0:	2300      	movs	r3, #0
 80002c2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002c4:	2301      	movs	r3, #1
 80002c6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80002c8:	2305      	movs	r3, #5
 80002ca:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	4619      	mov	r1, r3
 80002d0:	4805      	ldr	r0, [pc, #20]	; (80002e8 <MX_ADC1_Init+0x74>)
 80002d2:	f000 fcd5 	bl	8000c80 <HAL_ADC_ConfigChannel>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002dc:	f000 f872 	bl	80003c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002e0:	bf00      	nop
 80002e2:	3710      	adds	r7, #16
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	20000098 	.word	0x20000098
 80002ec:	40012400 	.word	0x40012400

080002f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002f4:	4b11      	ldr	r3, [pc, #68]	; (800033c <MX_USART1_UART_Init+0x4c>)
 80002f6:	4a12      	ldr	r2, [pc, #72]	; (8000340 <MX_USART1_UART_Init+0x50>)
 80002f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002fa:	4b10      	ldr	r3, [pc, #64]	; (800033c <MX_USART1_UART_Init+0x4c>)
 80002fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000300:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000302:	4b0e      	ldr	r3, [pc, #56]	; (800033c <MX_USART1_UART_Init+0x4c>)
 8000304:	2200      	movs	r2, #0
 8000306:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000308:	4b0c      	ldr	r3, [pc, #48]	; (800033c <MX_USART1_UART_Init+0x4c>)
 800030a:	2200      	movs	r2, #0
 800030c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800030e:	4b0b      	ldr	r3, [pc, #44]	; (800033c <MX_USART1_UART_Init+0x4c>)
 8000310:	2200      	movs	r2, #0
 8000312:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000314:	4b09      	ldr	r3, [pc, #36]	; (800033c <MX_USART1_UART_Init+0x4c>)
 8000316:	220c      	movs	r2, #12
 8000318:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800031a:	4b08      	ldr	r3, [pc, #32]	; (800033c <MX_USART1_UART_Init+0x4c>)
 800031c:	2200      	movs	r2, #0
 800031e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000320:	4b06      	ldr	r3, [pc, #24]	; (800033c <MX_USART1_UART_Init+0x4c>)
 8000322:	2200      	movs	r2, #0
 8000324:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000326:	4805      	ldr	r0, [pc, #20]	; (800033c <MX_USART1_UART_Init+0x4c>)
 8000328:	f001 fe12 	bl	8001f50 <HAL_UART_Init>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000332:	f000 f847 	bl	80003c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	200000c8 	.word	0x200000c8
 8000340:	40013800 	.word	0x40013800

08000344 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b086      	sub	sp, #24
 8000348:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800034a:	f107 0308 	add.w	r3, r7, #8
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000358:	4b18      	ldr	r3, [pc, #96]	; (80003bc <MX_GPIO_Init+0x78>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	4a17      	ldr	r2, [pc, #92]	; (80003bc <MX_GPIO_Init+0x78>)
 800035e:	f043 0310 	orr.w	r3, r3, #16
 8000362:	6193      	str	r3, [r2, #24]
 8000364:	4b15      	ldr	r3, [pc, #84]	; (80003bc <MX_GPIO_Init+0x78>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	f003 0310 	and.w	r3, r3, #16
 800036c:	607b      	str	r3, [r7, #4]
 800036e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000370:	4b12      	ldr	r3, [pc, #72]	; (80003bc <MX_GPIO_Init+0x78>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	4a11      	ldr	r2, [pc, #68]	; (80003bc <MX_GPIO_Init+0x78>)
 8000376:	f043 0304 	orr.w	r3, r3, #4
 800037a:	6193      	str	r3, [r2, #24]
 800037c:	4b0f      	ldr	r3, [pc, #60]	; (80003bc <MX_GPIO_Init+0x78>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	f003 0304 	and.w	r3, r3, #4
 8000384:	603b      	str	r3, [r7, #0]
 8000386:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8000388:	2200      	movs	r2, #0
 800038a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800038e:	480c      	ldr	r0, [pc, #48]	; (80003c0 <MX_GPIO_Init+0x7c>)
 8000390:	f001 f838 	bl	8001404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 8000394:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000398:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800039a:	2301      	movs	r3, #1
 800039c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800039e:	2300      	movs	r3, #0
 80003a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003a2:	2302      	movs	r3, #2
 80003a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 80003a6:	f107 0308 	add.w	r3, r7, #8
 80003aa:	4619      	mov	r1, r3
 80003ac:	4804      	ldr	r0, [pc, #16]	; (80003c0 <MX_GPIO_Init+0x7c>)
 80003ae:	f000 fecf 	bl	8001150 <HAL_GPIO_Init>

}
 80003b2:	bf00      	nop
 80003b4:	3718      	adds	r7, #24
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	40021000 	.word	0x40021000
 80003c0:	40011000 	.word	0x40011000

080003c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003c8:	bf00      	nop
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bc80      	pop	{r7}
 80003ce:	4770      	bx	lr

080003d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b085      	sub	sp, #20
 80003d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003d6:	4b15      	ldr	r3, [pc, #84]	; (800042c <HAL_MspInit+0x5c>)
 80003d8:	699b      	ldr	r3, [r3, #24]
 80003da:	4a14      	ldr	r2, [pc, #80]	; (800042c <HAL_MspInit+0x5c>)
 80003dc:	f043 0301 	orr.w	r3, r3, #1
 80003e0:	6193      	str	r3, [r2, #24]
 80003e2:	4b12      	ldr	r3, [pc, #72]	; (800042c <HAL_MspInit+0x5c>)
 80003e4:	699b      	ldr	r3, [r3, #24]
 80003e6:	f003 0301 	and.w	r3, r3, #1
 80003ea:	60bb      	str	r3, [r7, #8]
 80003ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ee:	4b0f      	ldr	r3, [pc, #60]	; (800042c <HAL_MspInit+0x5c>)
 80003f0:	69db      	ldr	r3, [r3, #28]
 80003f2:	4a0e      	ldr	r2, [pc, #56]	; (800042c <HAL_MspInit+0x5c>)
 80003f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003f8:	61d3      	str	r3, [r2, #28]
 80003fa:	4b0c      	ldr	r3, [pc, #48]	; (800042c <HAL_MspInit+0x5c>)
 80003fc:	69db      	ldr	r3, [r3, #28]
 80003fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000402:	607b      	str	r3, [r7, #4]
 8000404:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000406:	4b0a      	ldr	r3, [pc, #40]	; (8000430 <HAL_MspInit+0x60>)
 8000408:	685b      	ldr	r3, [r3, #4]
 800040a:	60fb      	str	r3, [r7, #12]
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	4a04      	ldr	r2, [pc, #16]	; (8000430 <HAL_MspInit+0x60>)
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000422:	bf00      	nop
 8000424:	3714      	adds	r7, #20
 8000426:	46bd      	mov	sp, r7
 8000428:	bc80      	pop	{r7}
 800042a:	4770      	bx	lr
 800042c:	40021000 	.word	0x40021000
 8000430:	40010000 	.word	0x40010000

08000434 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b088      	sub	sp, #32
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800043c:	f107 0310 	add.w	r3, r7, #16
 8000440:	2200      	movs	r2, #0
 8000442:	601a      	str	r2, [r3, #0]
 8000444:	605a      	str	r2, [r3, #4]
 8000446:	609a      	str	r2, [r3, #8]
 8000448:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	4a14      	ldr	r2, [pc, #80]	; (80004a0 <HAL_ADC_MspInit+0x6c>)
 8000450:	4293      	cmp	r3, r2
 8000452:	d121      	bne.n	8000498 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000454:	4b13      	ldr	r3, [pc, #76]	; (80004a4 <HAL_ADC_MspInit+0x70>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	4a12      	ldr	r2, [pc, #72]	; (80004a4 <HAL_ADC_MspInit+0x70>)
 800045a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800045e:	6193      	str	r3, [r2, #24]
 8000460:	4b10      	ldr	r3, [pc, #64]	; (80004a4 <HAL_ADC_MspInit+0x70>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000468:	60fb      	str	r3, [r7, #12]
 800046a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800046c:	4b0d      	ldr	r3, [pc, #52]	; (80004a4 <HAL_ADC_MspInit+0x70>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	4a0c      	ldr	r2, [pc, #48]	; (80004a4 <HAL_ADC_MspInit+0x70>)
 8000472:	f043 0304 	orr.w	r3, r3, #4
 8000476:	6193      	str	r3, [r2, #24]
 8000478:	4b0a      	ldr	r3, [pc, #40]	; (80004a4 <HAL_ADC_MspInit+0x70>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	f003 0304 	and.w	r3, r3, #4
 8000480:	60bb      	str	r3, [r7, #8]
 8000482:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000484:	2301      	movs	r3, #1
 8000486:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000488:	2303      	movs	r3, #3
 800048a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800048c:	f107 0310 	add.w	r3, r7, #16
 8000490:	4619      	mov	r1, r3
 8000492:	4805      	ldr	r0, [pc, #20]	; (80004a8 <HAL_ADC_MspInit+0x74>)
 8000494:	f000 fe5c 	bl	8001150 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000498:	bf00      	nop
 800049a:	3720      	adds	r7, #32
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	40012400 	.word	0x40012400
 80004a4:	40021000 	.word	0x40021000
 80004a8:	40010800 	.word	0x40010800

080004ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b088      	sub	sp, #32
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b4:	f107 0310 	add.w	r3, r7, #16
 80004b8:	2200      	movs	r2, #0
 80004ba:	601a      	str	r2, [r3, #0]
 80004bc:	605a      	str	r2, [r3, #4]
 80004be:	609a      	str	r2, [r3, #8]
 80004c0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4a1c      	ldr	r2, [pc, #112]	; (8000538 <HAL_UART_MspInit+0x8c>)
 80004c8:	4293      	cmp	r3, r2
 80004ca:	d131      	bne.n	8000530 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004cc:	4b1b      	ldr	r3, [pc, #108]	; (800053c <HAL_UART_MspInit+0x90>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	4a1a      	ldr	r2, [pc, #104]	; (800053c <HAL_UART_MspInit+0x90>)
 80004d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004d6:	6193      	str	r3, [r2, #24]
 80004d8:	4b18      	ldr	r3, [pc, #96]	; (800053c <HAL_UART_MspInit+0x90>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004e0:	60fb      	str	r3, [r7, #12]
 80004e2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e4:	4b15      	ldr	r3, [pc, #84]	; (800053c <HAL_UART_MspInit+0x90>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	4a14      	ldr	r2, [pc, #80]	; (800053c <HAL_UART_MspInit+0x90>)
 80004ea:	f043 0304 	orr.w	r3, r3, #4
 80004ee:	6193      	str	r3, [r2, #24]
 80004f0:	4b12      	ldr	r3, [pc, #72]	; (800053c <HAL_UART_MspInit+0x90>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	f003 0304 	and.w	r3, r3, #4
 80004f8:	60bb      	str	r3, [r7, #8]
 80004fa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000500:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000502:	2302      	movs	r3, #2
 8000504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000506:	2303      	movs	r3, #3
 8000508:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800050a:	f107 0310 	add.w	r3, r7, #16
 800050e:	4619      	mov	r1, r3
 8000510:	480b      	ldr	r0, [pc, #44]	; (8000540 <HAL_UART_MspInit+0x94>)
 8000512:	f000 fe1d 	bl	8001150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000516:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800051a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800051c:	2300      	movs	r3, #0
 800051e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000520:	2300      	movs	r3, #0
 8000522:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000524:	f107 0310 	add.w	r3, r7, #16
 8000528:	4619      	mov	r1, r3
 800052a:	4805      	ldr	r0, [pc, #20]	; (8000540 <HAL_UART_MspInit+0x94>)
 800052c:	f000 fe10 	bl	8001150 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000530:	bf00      	nop
 8000532:	3720      	adds	r7, #32
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	40013800 	.word	0x40013800
 800053c:	40021000 	.word	0x40021000
 8000540:	40010800 	.word	0x40010800

08000544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr

08000550 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000554:	e7fe      	b.n	8000554 <HardFault_Handler+0x4>

08000556 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000556:	b480      	push	{r7}
 8000558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800055a:	e7fe      	b.n	800055a <MemManage_Handler+0x4>

0800055c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000560:	e7fe      	b.n	8000560 <BusFault_Handler+0x4>

08000562 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000562:	b480      	push	{r7}
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000566:	e7fe      	b.n	8000566 <UsageFault_Handler+0x4>

08000568 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800056c:	bf00      	nop
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr

08000574 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr

08000580 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr

0800058c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000590:	f000 f8ce 	bl	8000730 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}

08000598 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80005a0:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <_sbrk+0x50>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d102      	bne.n	80005ae <_sbrk+0x16>
		heap_end = &end;
 80005a8:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <_sbrk+0x50>)
 80005aa:	4a10      	ldr	r2, [pc, #64]	; (80005ec <_sbrk+0x54>)
 80005ac:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80005ae:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <_sbrk+0x50>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80005b4:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <_sbrk+0x50>)
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4413      	add	r3, r2
 80005bc:	466a      	mov	r2, sp
 80005be:	4293      	cmp	r3, r2
 80005c0:	d907      	bls.n	80005d2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80005c2:	f001 fecf 	bl	8002364 <__errno>
 80005c6:	4602      	mov	r2, r0
 80005c8:	230c      	movs	r3, #12
 80005ca:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80005cc:	f04f 33ff 	mov.w	r3, #4294967295
 80005d0:	e006      	b.n	80005e0 <_sbrk+0x48>
	}

	heap_end += incr;
 80005d2:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <_sbrk+0x50>)
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4413      	add	r3, r2
 80005da:	4a03      	ldr	r2, [pc, #12]	; (80005e8 <_sbrk+0x50>)
 80005dc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80005de:	68fb      	ldr	r3, [r7, #12]
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3710      	adds	r7, #16
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	2000008c 	.word	0x2000008c
 80005ec:	20000110 	.word	0x20000110

080005f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80005f4:	4b15      	ldr	r3, [pc, #84]	; (800064c <SystemInit+0x5c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a14      	ldr	r2, [pc, #80]	; (800064c <SystemInit+0x5c>)
 80005fa:	f043 0301 	orr.w	r3, r3, #1
 80005fe:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000600:	4b12      	ldr	r3, [pc, #72]	; (800064c <SystemInit+0x5c>)
 8000602:	685a      	ldr	r2, [r3, #4]
 8000604:	4911      	ldr	r1, [pc, #68]	; (800064c <SystemInit+0x5c>)
 8000606:	4b12      	ldr	r3, [pc, #72]	; (8000650 <SystemInit+0x60>)
 8000608:	4013      	ands	r3, r2
 800060a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <SystemInit+0x5c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a0e      	ldr	r2, [pc, #56]	; (800064c <SystemInit+0x5c>)
 8000612:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800061a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800061c:	4b0b      	ldr	r3, [pc, #44]	; (800064c <SystemInit+0x5c>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a0a      	ldr	r2, [pc, #40]	; (800064c <SystemInit+0x5c>)
 8000622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000626:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000628:	4b08      	ldr	r3, [pc, #32]	; (800064c <SystemInit+0x5c>)
 800062a:	685b      	ldr	r3, [r3, #4]
 800062c:	4a07      	ldr	r2, [pc, #28]	; (800064c <SystemInit+0x5c>)
 800062e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000632:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000634:	4b05      	ldr	r3, [pc, #20]	; (800064c <SystemInit+0x5c>)
 8000636:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800063a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800063c:	4b05      	ldr	r3, [pc, #20]	; (8000654 <SystemInit+0x64>)
 800063e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000642:	609a      	str	r2, [r3, #8]
#endif 
}
 8000644:	bf00      	nop
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr
 800064c:	40021000 	.word	0x40021000
 8000650:	f8ff0000 	.word	0xf8ff0000
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000658:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800065a:	e003      	b.n	8000664 <LoopCopyDataInit>

0800065c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800065c:	4b0b      	ldr	r3, [pc, #44]	; (800068c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800065e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000660:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000662:	3104      	adds	r1, #4

08000664 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000664:	480a      	ldr	r0, [pc, #40]	; (8000690 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000666:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000668:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800066a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800066c:	d3f6      	bcc.n	800065c <CopyDataInit>
  ldr r2, =_sbss
 800066e:	4a0a      	ldr	r2, [pc, #40]	; (8000698 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000670:	e002      	b.n	8000678 <LoopFillZerobss>

08000672 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000672:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000674:	f842 3b04 	str.w	r3, [r2], #4

08000678 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000678:	4b08      	ldr	r3, [pc, #32]	; (800069c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800067a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800067c:	d3f9      	bcc.n	8000672 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800067e:	f7ff ffb7 	bl	80005f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000682:	f001 fe75 	bl	8002370 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000686:	f7ff fd61 	bl	800014c <main>
  bx lr
 800068a:	4770      	bx	lr
  ldr r3, =_sidata
 800068c:	08002c8c 	.word	0x08002c8c
  ldr r0, =_sdata
 8000690:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000694:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000698:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 800069c:	20000110 	.word	0x20000110

080006a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006a0:	e7fe      	b.n	80006a0 <ADC1_2_IRQHandler>
	...

080006a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006a8:	4b08      	ldr	r3, [pc, #32]	; (80006cc <HAL_Init+0x28>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a07      	ldr	r2, [pc, #28]	; (80006cc <HAL_Init+0x28>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006b4:	2003      	movs	r0, #3
 80006b6:	f000 fd17 	bl	80010e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006ba:	2000      	movs	r0, #0
 80006bc:	f000 f808 	bl	80006d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006c0:	f7ff fe86 	bl	80003d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006c4:	2300      	movs	r3, #0
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40022000 	.word	0x40022000

080006d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006d8:	4b12      	ldr	r3, [pc, #72]	; (8000724 <HAL_InitTick+0x54>)
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <HAL_InitTick+0x58>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	4619      	mov	r1, r3
 80006e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 fd21 	bl	8001136 <HAL_SYSTICK_Config>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006fa:	2301      	movs	r3, #1
 80006fc:	e00e      	b.n	800071c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2b0f      	cmp	r3, #15
 8000702:	d80a      	bhi.n	800071a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000704:	2200      	movs	r2, #0
 8000706:	6879      	ldr	r1, [r7, #4]
 8000708:	f04f 30ff 	mov.w	r0, #4294967295
 800070c:	f000 fcf7 	bl	80010fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000710:	4a06      	ldr	r2, [pc, #24]	; (800072c <HAL_InitTick+0x5c>)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000716:	2300      	movs	r3, #0
 8000718:	e000      	b.n	800071c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800071a:	2301      	movs	r3, #1
}
 800071c:	4618      	mov	r0, r3
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000000 	.word	0x20000000
 8000728:	20000008 	.word	0x20000008
 800072c:	20000004 	.word	0x20000004

08000730 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000734:	4b05      	ldr	r3, [pc, #20]	; (800074c <HAL_IncTick+0x1c>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	461a      	mov	r2, r3
 800073a:	4b05      	ldr	r3, [pc, #20]	; (8000750 <HAL_IncTick+0x20>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4413      	add	r3, r2
 8000740:	4a03      	ldr	r2, [pc, #12]	; (8000750 <HAL_IncTick+0x20>)
 8000742:	6013      	str	r3, [r2, #0]
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr
 800074c:	20000008 	.word	0x20000008
 8000750:	20000108 	.word	0x20000108

08000754 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  return uwTick;
 8000758:	4b02      	ldr	r3, [pc, #8]	; (8000764 <HAL_GetTick+0x10>)
 800075a:	681b      	ldr	r3, [r3, #0]
}
 800075c:	4618      	mov	r0, r3
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr
 8000764:	20000108 	.word	0x20000108

08000768 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000770:	2300      	movs	r3, #0
 8000772:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000774:	2300      	movs	r3, #0
 8000776:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000778:	2300      	movs	r3, #0
 800077a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800077c:	2300      	movs	r3, #0
 800077e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d101      	bne.n	800078a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000786:	2301      	movs	r3, #1
 8000788:	e0be      	b.n	8000908 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	689b      	ldr	r3, [r3, #8]
 800078e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000794:	2b00      	cmp	r3, #0
 8000796:	d109      	bne.n	80007ac <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2200      	movs	r2, #0
 800079c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2200      	movs	r2, #0
 80007a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f7ff fe44 	bl	8000434 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f000 fbb1 	bl	8000f14 <ADC_ConversionStop_Disable>
 80007b2:	4603      	mov	r3, r0
 80007b4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007ba:	f003 0310 	and.w	r3, r3, #16
 80007be:	2b00      	cmp	r3, #0
 80007c0:	f040 8099 	bne.w	80008f6 <HAL_ADC_Init+0x18e>
 80007c4:	7dfb      	ldrb	r3, [r7, #23]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	f040 8095 	bne.w	80008f6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007d0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80007d4:	f023 0302 	bic.w	r3, r3, #2
 80007d8:	f043 0202 	orr.w	r2, r3, #2
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80007e8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	7b1b      	ldrb	r3, [r3, #12]
 80007ee:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80007f0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80007f2:	68ba      	ldr	r2, [r7, #8]
 80007f4:	4313      	orrs	r3, r2
 80007f6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	689b      	ldr	r3, [r3, #8]
 80007fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000800:	d003      	beq.n	800080a <HAL_ADC_Init+0xa2>
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	689b      	ldr	r3, [r3, #8]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d102      	bne.n	8000810 <HAL_ADC_Init+0xa8>
 800080a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800080e:	e000      	b.n	8000812 <HAL_ADC_Init+0xaa>
 8000810:	2300      	movs	r3, #0
 8000812:	693a      	ldr	r2, [r7, #16]
 8000814:	4313      	orrs	r3, r2
 8000816:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	7d1b      	ldrb	r3, [r3, #20]
 800081c:	2b01      	cmp	r3, #1
 800081e:	d119      	bne.n	8000854 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	7b1b      	ldrb	r3, [r3, #12]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d109      	bne.n	800083c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	3b01      	subs	r3, #1
 800082e:	035a      	lsls	r2, r3, #13
 8000830:	693b      	ldr	r3, [r7, #16]
 8000832:	4313      	orrs	r3, r2
 8000834:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000838:	613b      	str	r3, [r7, #16]
 800083a:	e00b      	b.n	8000854 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000840:	f043 0220 	orr.w	r2, r3, #32
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800084c:	f043 0201 	orr.w	r2, r3, #1
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	693a      	ldr	r2, [r7, #16]
 8000864:	430a      	orrs	r2, r1
 8000866:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	689a      	ldr	r2, [r3, #8]
 800086e:	4b28      	ldr	r3, [pc, #160]	; (8000910 <HAL_ADC_Init+0x1a8>)
 8000870:	4013      	ands	r3, r2
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	6812      	ldr	r2, [r2, #0]
 8000876:	68b9      	ldr	r1, [r7, #8]
 8000878:	430b      	orrs	r3, r1
 800087a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	689b      	ldr	r3, [r3, #8]
 8000880:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000884:	d003      	beq.n	800088e <HAL_ADC_Init+0x126>
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	689b      	ldr	r3, [r3, #8]
 800088a:	2b01      	cmp	r3, #1
 800088c:	d104      	bne.n	8000898 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	691b      	ldr	r3, [r3, #16]
 8000892:	3b01      	subs	r3, #1
 8000894:	051b      	lsls	r3, r3, #20
 8000896:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800089e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	68fa      	ldr	r2, [r7, #12]
 80008a8:	430a      	orrs	r2, r1
 80008aa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	689a      	ldr	r2, [r3, #8]
 80008b2:	4b18      	ldr	r3, [pc, #96]	; (8000914 <HAL_ADC_Init+0x1ac>)
 80008b4:	4013      	ands	r3, r2
 80008b6:	68ba      	ldr	r2, [r7, #8]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d10b      	bne.n	80008d4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2200      	movs	r2, #0
 80008c0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008c6:	f023 0303 	bic.w	r3, r3, #3
 80008ca:	f043 0201 	orr.w	r2, r3, #1
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008d2:	e018      	b.n	8000906 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008d8:	f023 0312 	bic.w	r3, r3, #18
 80008dc:	f043 0210 	orr.w	r2, r3, #16
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008e8:	f043 0201 	orr.w	r2, r3, #1
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80008f0:	2301      	movs	r3, #1
 80008f2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008f4:	e007      	b.n	8000906 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008fa:	f043 0210 	orr.w	r2, r3, #16
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000902:	2301      	movs	r3, #1
 8000904:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000906:	7dfb      	ldrb	r3, [r7, #23]
}
 8000908:	4618      	mov	r0, r3
 800090a:	3718      	adds	r7, #24
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	ffe1f7fd 	.word	0xffe1f7fd
 8000914:	ff1f0efe 	.word	0xff1f0efe

08000918 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000920:	2300      	movs	r3, #0
 8000922:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800092a:	2b01      	cmp	r3, #1
 800092c:	d101      	bne.n	8000932 <HAL_ADC_Start+0x1a>
 800092e:	2302      	movs	r3, #2
 8000930:	e098      	b.n	8000a64 <HAL_ADC_Start+0x14c>
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2201      	movs	r2, #1
 8000936:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f000 fa98 	bl	8000e70 <ADC_Enable>
 8000940:	4603      	mov	r3, r0
 8000942:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000944:	7bfb      	ldrb	r3, [r7, #15]
 8000946:	2b00      	cmp	r3, #0
 8000948:	f040 8087 	bne.w	8000a5a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000954:	f023 0301 	bic.w	r3, r3, #1
 8000958:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a41      	ldr	r2, [pc, #260]	; (8000a6c <HAL_ADC_Start+0x154>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d105      	bne.n	8000976 <HAL_ADC_Start+0x5e>
 800096a:	4b41      	ldr	r3, [pc, #260]	; (8000a70 <HAL_ADC_Start+0x158>)
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000972:	2b00      	cmp	r3, #0
 8000974:	d115      	bne.n	80009a2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800097a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800098c:	2b00      	cmp	r3, #0
 800098e:	d026      	beq.n	80009de <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000994:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000998:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80009a0:	e01d      	b.n	80009de <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a2f      	ldr	r2, [pc, #188]	; (8000a70 <HAL_ADC_Start+0x158>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d004      	beq.n	80009c2 <HAL_ADC_Start+0xaa>
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a2b      	ldr	r2, [pc, #172]	; (8000a6c <HAL_ADC_Start+0x154>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d10d      	bne.n	80009de <HAL_ADC_Start+0xc6>
 80009c2:	4b2b      	ldr	r3, [pc, #172]	; (8000a70 <HAL_ADC_Start+0x158>)
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d007      	beq.n	80009de <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80009d6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d006      	beq.n	80009f8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ee:	f023 0206 	bic.w	r2, r3, #6
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80009f6:	e002      	b.n	80009fe <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2200      	movs	r2, #0
 80009fc:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2200      	movs	r2, #0
 8000a02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f06f 0202 	mvn.w	r2, #2
 8000a0e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	689b      	ldr	r3, [r3, #8]
 8000a16:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000a1a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000a1e:	d113      	bne.n	8000a48 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a24:	4a11      	ldr	r2, [pc, #68]	; (8000a6c <HAL_ADC_Start+0x154>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d105      	bne.n	8000a36 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <HAL_ADC_Start+0x158>)
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d108      	bne.n	8000a48 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	689a      	ldr	r2, [r3, #8]
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	e00c      	b.n	8000a62 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	689a      	ldr	r2, [r3, #8]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	e003      	b.n	8000a62 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3710      	adds	r7, #16
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40012800 	.word	0x40012800
 8000a70:	40012400 	.word	0x40012400

08000a74 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000a74:	b590      	push	{r4, r7, lr}
 8000a76:	b087      	sub	sp, #28
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000a86:	2300      	movs	r3, #0
 8000a88:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000a8a:	f7ff fe63 	bl	8000754 <HAL_GetTick>
 8000a8e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	689b      	ldr	r3, [r3, #8]
 8000a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d00b      	beq.n	8000ab6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aa2:	f043 0220 	orr.w	r2, r3, #32
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2200      	movs	r2, #0
 8000aae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e0c8      	b.n	8000c48 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d12a      	bne.n	8000b1a <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d123      	bne.n	8000b1a <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000ad2:	e01a      	b.n	8000b0a <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ada:	d016      	beq.n	8000b0a <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d007      	beq.n	8000af2 <HAL_ADC_PollForConversion+0x7e>
 8000ae2:	f7ff fe37 	bl	8000754 <HAL_GetTick>
 8000ae6:	4602      	mov	r2, r0
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	1ad3      	subs	r3, r2, r3
 8000aec:	683a      	ldr	r2, [r7, #0]
 8000aee:	429a      	cmp	r2, r3
 8000af0:	d20b      	bcs.n	8000b0a <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000af6:	f043 0204 	orr.w	r2, r3, #4
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2200      	movs	r2, #0
 8000b02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000b06:	2303      	movs	r3, #3
 8000b08:	e09e      	b.n	8000c48 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f003 0302 	and.w	r3, r3, #2
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d0dd      	beq.n	8000ad4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000b18:	e06c      	b.n	8000bf4 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000b1a:	4b4d      	ldr	r3, [pc, #308]	; (8000c50 <HAL_ADC_PollForConversion+0x1dc>)
 8000b1c:	681c      	ldr	r4, [r3, #0]
 8000b1e:	2002      	movs	r0, #2
 8000b20:	f001 f95a 	bl	8001dd8 <HAL_RCCEx_GetPeriphCLKFreq>
 8000b24:	4603      	mov	r3, r0
 8000b26:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	6919      	ldr	r1, [r3, #16]
 8000b30:	4b48      	ldr	r3, [pc, #288]	; (8000c54 <HAL_ADC_PollForConversion+0x1e0>)
 8000b32:	400b      	ands	r3, r1
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d118      	bne.n	8000b6a <HAL_ADC_PollForConversion+0xf6>
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	68d9      	ldr	r1, [r3, #12]
 8000b3e:	4b46      	ldr	r3, [pc, #280]	; (8000c58 <HAL_ADC_PollForConversion+0x1e4>)
 8000b40:	400b      	ands	r3, r1
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d111      	bne.n	8000b6a <HAL_ADC_PollForConversion+0xf6>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	6919      	ldr	r1, [r3, #16]
 8000b4c:	4b43      	ldr	r3, [pc, #268]	; (8000c5c <HAL_ADC_PollForConversion+0x1e8>)
 8000b4e:	400b      	ands	r3, r1
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d108      	bne.n	8000b66 <HAL_ADC_PollForConversion+0xf2>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	68d9      	ldr	r1, [r3, #12]
 8000b5a:	4b41      	ldr	r3, [pc, #260]	; (8000c60 <HAL_ADC_PollForConversion+0x1ec>)
 8000b5c:	400b      	ands	r3, r1
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d101      	bne.n	8000b66 <HAL_ADC_PollForConversion+0xf2>
 8000b62:	2314      	movs	r3, #20
 8000b64:	e020      	b.n	8000ba8 <HAL_ADC_PollForConversion+0x134>
 8000b66:	2329      	movs	r3, #41	; 0x29
 8000b68:	e01e      	b.n	8000ba8 <HAL_ADC_PollForConversion+0x134>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	6919      	ldr	r1, [r3, #16]
 8000b70:	4b3a      	ldr	r3, [pc, #232]	; (8000c5c <HAL_ADC_PollForConversion+0x1e8>)
 8000b72:	400b      	ands	r3, r1
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d106      	bne.n	8000b86 <HAL_ADC_PollForConversion+0x112>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	68d9      	ldr	r1, [r3, #12]
 8000b7e:	4b38      	ldr	r3, [pc, #224]	; (8000c60 <HAL_ADC_PollForConversion+0x1ec>)
 8000b80:	400b      	ands	r3, r1
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d00d      	beq.n	8000ba2 <HAL_ADC_PollForConversion+0x12e>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	6919      	ldr	r1, [r3, #16]
 8000b8c:	4b35      	ldr	r3, [pc, #212]	; (8000c64 <HAL_ADC_PollForConversion+0x1f0>)
 8000b8e:	400b      	ands	r3, r1
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d108      	bne.n	8000ba6 <HAL_ADC_PollForConversion+0x132>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	68d9      	ldr	r1, [r3, #12]
 8000b9a:	4b32      	ldr	r3, [pc, #200]	; (8000c64 <HAL_ADC_PollForConversion+0x1f0>)
 8000b9c:	400b      	ands	r3, r1
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d101      	bne.n	8000ba6 <HAL_ADC_PollForConversion+0x132>
 8000ba2:	2354      	movs	r3, #84	; 0x54
 8000ba4:	e000      	b.n	8000ba8 <HAL_ADC_PollForConversion+0x134>
 8000ba6:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000ba8:	fb02 f303 	mul.w	r3, r2, r3
 8000bac:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000bae:	e01d      	b.n	8000bec <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bb6:	d016      	beq.n	8000be6 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d007      	beq.n	8000bce <HAL_ADC_PollForConversion+0x15a>
 8000bbe:	f7ff fdc9 	bl	8000754 <HAL_GetTick>
 8000bc2:	4602      	mov	r2, r0
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	1ad3      	subs	r3, r2, r3
 8000bc8:	683a      	ldr	r2, [r7, #0]
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d20b      	bcs.n	8000be6 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd2:	f043 0204 	orr.w	r2, r3, #4
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000be2:	2303      	movs	r3, #3
 8000be4:	e030      	b.n	8000c48 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	3301      	adds	r3, #1
 8000bea:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d8dd      	bhi.n	8000bb0 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f06f 0212 	mvn.w	r2, #18
 8000bfc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c02:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	689b      	ldr	r3, [r3, #8]
 8000c10:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000c14:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000c18:	d115      	bne.n	8000c46 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d111      	bne.n	8000c46 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d105      	bne.n	8000c46 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c3e:	f043 0201 	orr.w	r2, r3, #1
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000c46:	2300      	movs	r3, #0
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	371c      	adds	r7, #28
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd90      	pop	{r4, r7, pc}
 8000c50:	20000000 	.word	0x20000000
 8000c54:	24924924 	.word	0x24924924
 8000c58:	00924924 	.word	0x00924924
 8000c5c:	12492492 	.word	0x12492492
 8000c60:	00492492 	.word	0x00492492
 8000c64:	00249249 	.word	0x00249249

08000c68 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr

08000c80 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d101      	bne.n	8000ca0 <HAL_ADC_ConfigChannel+0x20>
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	e0dc      	b.n	8000e5a <HAL_ADC_ConfigChannel+0x1da>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	2b06      	cmp	r3, #6
 8000cae:	d81c      	bhi.n	8000cea <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685a      	ldr	r2, [r3, #4]
 8000cba:	4613      	mov	r3, r2
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	4413      	add	r3, r2
 8000cc0:	3b05      	subs	r3, #5
 8000cc2:	221f      	movs	r2, #31
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	4019      	ands	r1, r3
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	6818      	ldr	r0, [r3, #0]
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685a      	ldr	r2, [r3, #4]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	4413      	add	r3, r2
 8000cda:	3b05      	subs	r3, #5
 8000cdc:	fa00 f203 	lsl.w	r2, r0, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	635a      	str	r2, [r3, #52]	; 0x34
 8000ce8:	e03c      	b.n	8000d64 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	2b0c      	cmp	r3, #12
 8000cf0:	d81c      	bhi.n	8000d2c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685a      	ldr	r2, [r3, #4]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	4413      	add	r3, r2
 8000d02:	3b23      	subs	r3, #35	; 0x23
 8000d04:	221f      	movs	r2, #31
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	4019      	ands	r1, r3
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	6818      	ldr	r0, [r3, #0]
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685a      	ldr	r2, [r3, #4]
 8000d16:	4613      	mov	r3, r2
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	4413      	add	r3, r2
 8000d1c:	3b23      	subs	r3, #35	; 0x23
 8000d1e:	fa00 f203 	lsl.w	r2, r0, r3
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	430a      	orrs	r2, r1
 8000d28:	631a      	str	r2, [r3, #48]	; 0x30
 8000d2a:	e01b      	b.n	8000d64 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685a      	ldr	r2, [r3, #4]
 8000d36:	4613      	mov	r3, r2
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	4413      	add	r3, r2
 8000d3c:	3b41      	subs	r3, #65	; 0x41
 8000d3e:	221f      	movs	r2, #31
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	43db      	mvns	r3, r3
 8000d46:	4019      	ands	r1, r3
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	6818      	ldr	r0, [r3, #0]
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685a      	ldr	r2, [r3, #4]
 8000d50:	4613      	mov	r3, r2
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	4413      	add	r3, r2
 8000d56:	3b41      	subs	r3, #65	; 0x41
 8000d58:	fa00 f203 	lsl.w	r2, r0, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	430a      	orrs	r2, r1
 8000d62:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b09      	cmp	r3, #9
 8000d6a:	d91c      	bls.n	8000da6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	68d9      	ldr	r1, [r3, #12]
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	4613      	mov	r3, r2
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	4413      	add	r3, r2
 8000d7c:	3b1e      	subs	r3, #30
 8000d7e:	2207      	movs	r2, #7
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	43db      	mvns	r3, r3
 8000d86:	4019      	ands	r1, r3
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	6898      	ldr	r0, [r3, #8]
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	4613      	mov	r3, r2
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	4413      	add	r3, r2
 8000d96:	3b1e      	subs	r3, #30
 8000d98:	fa00 f203 	lsl.w	r2, r0, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	430a      	orrs	r2, r1
 8000da2:	60da      	str	r2, [r3, #12]
 8000da4:	e019      	b.n	8000dda <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	6919      	ldr	r1, [r3, #16]
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	4613      	mov	r3, r2
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	4413      	add	r3, r2
 8000db6:	2207      	movs	r2, #7
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	4019      	ands	r1, r3
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	6898      	ldr	r0, [r3, #8]
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	4613      	mov	r3, r2
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	4413      	add	r3, r2
 8000dce:	fa00 f203 	lsl.w	r2, r0, r3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	430a      	orrs	r2, r1
 8000dd8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2b10      	cmp	r3, #16
 8000de0:	d003      	beq.n	8000dea <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000de6:	2b11      	cmp	r3, #17
 8000de8:	d132      	bne.n	8000e50 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a1d      	ldr	r2, [pc, #116]	; (8000e64 <HAL_ADC_ConfigChannel+0x1e4>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d125      	bne.n	8000e40 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d126      	bne.n	8000e50 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	689a      	ldr	r2, [r3, #8]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000e10:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2b10      	cmp	r3, #16
 8000e18:	d11a      	bne.n	8000e50 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e1a:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <HAL_ADC_ConfigChannel+0x1e8>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a13      	ldr	r2, [pc, #76]	; (8000e6c <HAL_ADC_ConfigChannel+0x1ec>)
 8000e20:	fba2 2303 	umull	r2, r3, r2, r3
 8000e24:	0c9a      	lsrs	r2, r3, #18
 8000e26:	4613      	mov	r3, r2
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	4413      	add	r3, r2
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e30:	e002      	b.n	8000e38 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	3b01      	subs	r3, #1
 8000e36:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d1f9      	bne.n	8000e32 <HAL_ADC_ConfigChannel+0x1b2>
 8000e3e:	e007      	b.n	8000e50 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e44:	f043 0220 	orr.w	r2, r3, #32
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2200      	movs	r2, #0
 8000e54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3714      	adds	r7, #20
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr
 8000e64:	40012400 	.word	0x40012400
 8000e68:	20000000 	.word	0x20000000
 8000e6c:	431bde83 	.word	0x431bde83

08000e70 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d039      	beq.n	8000f02 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	689a      	ldr	r2, [r3, #8]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f042 0201 	orr.w	r2, r2, #1
 8000e9c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e9e:	4b1b      	ldr	r3, [pc, #108]	; (8000f0c <ADC_Enable+0x9c>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a1b      	ldr	r2, [pc, #108]	; (8000f10 <ADC_Enable+0xa0>)
 8000ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea8:	0c9b      	lsrs	r3, r3, #18
 8000eaa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000eac:	e002      	b.n	8000eb4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	3b01      	subs	r3, #1
 8000eb2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d1f9      	bne.n	8000eae <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000eba:	f7ff fc4b 	bl	8000754 <HAL_GetTick>
 8000ebe:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000ec0:	e018      	b.n	8000ef4 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000ec2:	f7ff fc47 	bl	8000754 <HAL_GetTick>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d911      	bls.n	8000ef4 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed4:	f043 0210 	orr.w	r2, r3, #16
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee0:	f043 0201 	orr.w	r2, r3, #1
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2200      	movs	r2, #0
 8000eec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	e007      	b.n	8000f04 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d1df      	bne.n	8000ec2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000f02:	2300      	movs	r3, #0
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	431bde83 	.word	0x431bde83

08000f14 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d127      	bne.n	8000f7e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	689a      	ldr	r2, [r3, #8]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f022 0201 	bic.w	r2, r2, #1
 8000f3c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f3e:	f7ff fc09 	bl	8000754 <HAL_GetTick>
 8000f42:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f44:	e014      	b.n	8000f70 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000f46:	f7ff fc05 	bl	8000754 <HAL_GetTick>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	1ad3      	subs	r3, r2, r3
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d90d      	bls.n	8000f70 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f58:	f043 0210 	orr.w	r2, r3, #16
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f64:	f043 0201 	orr.w	r2, r3, #1
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e007      	b.n	8000f80 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d0e3      	beq.n	8000f46 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000f7e:	2300      	movs	r3, #0
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f003 0307 	and.w	r3, r3, #7
 8000f96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f98:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <__NVIC_SetPriorityGrouping+0x44>)
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f9e:	68ba      	ldr	r2, [r7, #8]
 8000fa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fba:	4a04      	ldr	r2, [pc, #16]	; (8000fcc <__NVIC_SetPriorityGrouping+0x44>)
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	60d3      	str	r3, [r2, #12]
}
 8000fc0:	bf00      	nop
 8000fc2:	3714      	adds	r7, #20
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bc80      	pop	{r7}
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd4:	4b04      	ldr	r3, [pc, #16]	; (8000fe8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	0a1b      	lsrs	r3, r3, #8
 8000fda:	f003 0307 	and.w	r3, r3, #7
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bc80      	pop	{r7}
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	6039      	str	r1, [r7, #0]
 8000ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	db0a      	blt.n	8001016 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	b2da      	uxtb	r2, r3
 8001004:	490c      	ldr	r1, [pc, #48]	; (8001038 <__NVIC_SetPriority+0x4c>)
 8001006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100a:	0112      	lsls	r2, r2, #4
 800100c:	b2d2      	uxtb	r2, r2
 800100e:	440b      	add	r3, r1
 8001010:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001014:	e00a      	b.n	800102c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	b2da      	uxtb	r2, r3
 800101a:	4908      	ldr	r1, [pc, #32]	; (800103c <__NVIC_SetPriority+0x50>)
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	f003 030f 	and.w	r3, r3, #15
 8001022:	3b04      	subs	r3, #4
 8001024:	0112      	lsls	r2, r2, #4
 8001026:	b2d2      	uxtb	r2, r2
 8001028:	440b      	add	r3, r1
 800102a:	761a      	strb	r2, [r3, #24]
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	e000e100 	.word	0xe000e100
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001040:	b480      	push	{r7}
 8001042:	b089      	sub	sp, #36	; 0x24
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	f1c3 0307 	rsb	r3, r3, #7
 800105a:	2b04      	cmp	r3, #4
 800105c:	bf28      	it	cs
 800105e:	2304      	movcs	r3, #4
 8001060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3304      	adds	r3, #4
 8001066:	2b06      	cmp	r3, #6
 8001068:	d902      	bls.n	8001070 <NVIC_EncodePriority+0x30>
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3b03      	subs	r3, #3
 800106e:	e000      	b.n	8001072 <NVIC_EncodePriority+0x32>
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001074:	f04f 32ff 	mov.w	r2, #4294967295
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43da      	mvns	r2, r3
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	401a      	ands	r2, r3
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001088:	f04f 31ff 	mov.w	r1, #4294967295
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	fa01 f303 	lsl.w	r3, r1, r3
 8001092:	43d9      	mvns	r1, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001098:	4313      	orrs	r3, r2
         );
}
 800109a:	4618      	mov	r0, r3
 800109c:	3724      	adds	r7, #36	; 0x24
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr

080010a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010b4:	d301      	bcc.n	80010ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010b6:	2301      	movs	r3, #1
 80010b8:	e00f      	b.n	80010da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ba:	4a0a      	ldr	r2, [pc, #40]	; (80010e4 <SysTick_Config+0x40>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3b01      	subs	r3, #1
 80010c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010c2:	210f      	movs	r1, #15
 80010c4:	f04f 30ff 	mov.w	r0, #4294967295
 80010c8:	f7ff ff90 	bl	8000fec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010cc:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <SysTick_Config+0x40>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010d2:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <SysTick_Config+0x40>)
 80010d4:	2207      	movs	r2, #7
 80010d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	e000e010 	.word	0xe000e010

080010e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff ff49 	bl	8000f88 <__NVIC_SetPriorityGrouping>
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010fe:	b580      	push	{r7, lr}
 8001100:	b086      	sub	sp, #24
 8001102:	af00      	add	r7, sp, #0
 8001104:	4603      	mov	r3, r0
 8001106:	60b9      	str	r1, [r7, #8]
 8001108:	607a      	str	r2, [r7, #4]
 800110a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001110:	f7ff ff5e 	bl	8000fd0 <__NVIC_GetPriorityGrouping>
 8001114:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	68b9      	ldr	r1, [r7, #8]
 800111a:	6978      	ldr	r0, [r7, #20]
 800111c:	f7ff ff90 	bl	8001040 <NVIC_EncodePriority>
 8001120:	4602      	mov	r2, r0
 8001122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001126:	4611      	mov	r1, r2
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff5f 	bl	8000fec <__NVIC_SetPriority>
}
 800112e:	bf00      	nop
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff ffb0 	bl	80010a4 <SysTick_Config>
 8001144:	4603      	mov	r3, r0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001150:	b480      	push	{r7}
 8001152:	b08b      	sub	sp, #44	; 0x2c
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800115a:	2300      	movs	r3, #0
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800115e:	2300      	movs	r3, #0
 8001160:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001162:	e127      	b.n	80013b4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001164:	2201      	movs	r2, #1
 8001166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	69fa      	ldr	r2, [r7, #28]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	429a      	cmp	r2, r3
 800117e:	f040 8116 	bne.w	80013ae <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	2b12      	cmp	r3, #18
 8001188:	d034      	beq.n	80011f4 <HAL_GPIO_Init+0xa4>
 800118a:	2b12      	cmp	r3, #18
 800118c:	d80d      	bhi.n	80011aa <HAL_GPIO_Init+0x5a>
 800118e:	2b02      	cmp	r3, #2
 8001190:	d02b      	beq.n	80011ea <HAL_GPIO_Init+0x9a>
 8001192:	2b02      	cmp	r3, #2
 8001194:	d804      	bhi.n	80011a0 <HAL_GPIO_Init+0x50>
 8001196:	2b00      	cmp	r3, #0
 8001198:	d031      	beq.n	80011fe <HAL_GPIO_Init+0xae>
 800119a:	2b01      	cmp	r3, #1
 800119c:	d01c      	beq.n	80011d8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800119e:	e048      	b.n	8001232 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80011a0:	2b03      	cmp	r3, #3
 80011a2:	d043      	beq.n	800122c <HAL_GPIO_Init+0xdc>
 80011a4:	2b11      	cmp	r3, #17
 80011a6:	d01b      	beq.n	80011e0 <HAL_GPIO_Init+0x90>
          break;
 80011a8:	e043      	b.n	8001232 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80011aa:	4a89      	ldr	r2, [pc, #548]	; (80013d0 <HAL_GPIO_Init+0x280>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d026      	beq.n	80011fe <HAL_GPIO_Init+0xae>
 80011b0:	4a87      	ldr	r2, [pc, #540]	; (80013d0 <HAL_GPIO_Init+0x280>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d806      	bhi.n	80011c4 <HAL_GPIO_Init+0x74>
 80011b6:	4a87      	ldr	r2, [pc, #540]	; (80013d4 <HAL_GPIO_Init+0x284>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d020      	beq.n	80011fe <HAL_GPIO_Init+0xae>
 80011bc:	4a86      	ldr	r2, [pc, #536]	; (80013d8 <HAL_GPIO_Init+0x288>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d01d      	beq.n	80011fe <HAL_GPIO_Init+0xae>
          break;
 80011c2:	e036      	b.n	8001232 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80011c4:	4a85      	ldr	r2, [pc, #532]	; (80013dc <HAL_GPIO_Init+0x28c>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d019      	beq.n	80011fe <HAL_GPIO_Init+0xae>
 80011ca:	4a85      	ldr	r2, [pc, #532]	; (80013e0 <HAL_GPIO_Init+0x290>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d016      	beq.n	80011fe <HAL_GPIO_Init+0xae>
 80011d0:	4a84      	ldr	r2, [pc, #528]	; (80013e4 <HAL_GPIO_Init+0x294>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d013      	beq.n	80011fe <HAL_GPIO_Init+0xae>
          break;
 80011d6:	e02c      	b.n	8001232 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	623b      	str	r3, [r7, #32]
          break;
 80011de:	e028      	b.n	8001232 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	3304      	adds	r3, #4
 80011e6:	623b      	str	r3, [r7, #32]
          break;
 80011e8:	e023      	b.n	8001232 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	3308      	adds	r3, #8
 80011f0:	623b      	str	r3, [r7, #32]
          break;
 80011f2:	e01e      	b.n	8001232 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	330c      	adds	r3, #12
 80011fa:	623b      	str	r3, [r7, #32]
          break;
 80011fc:	e019      	b.n	8001232 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d102      	bne.n	800120c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001206:	2304      	movs	r3, #4
 8001208:	623b      	str	r3, [r7, #32]
          break;
 800120a:	e012      	b.n	8001232 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d105      	bne.n	8001220 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001214:	2308      	movs	r3, #8
 8001216:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	69fa      	ldr	r2, [r7, #28]
 800121c:	611a      	str	r2, [r3, #16]
          break;
 800121e:	e008      	b.n	8001232 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001220:	2308      	movs	r3, #8
 8001222:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	69fa      	ldr	r2, [r7, #28]
 8001228:	615a      	str	r2, [r3, #20]
          break;
 800122a:	e002      	b.n	8001232 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800122c:	2300      	movs	r3, #0
 800122e:	623b      	str	r3, [r7, #32]
          break;
 8001230:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	2bff      	cmp	r3, #255	; 0xff
 8001236:	d801      	bhi.n	800123c <HAL_GPIO_Init+0xec>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	e001      	b.n	8001240 <HAL_GPIO_Init+0xf0>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3304      	adds	r3, #4
 8001240:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	2bff      	cmp	r3, #255	; 0xff
 8001246:	d802      	bhi.n	800124e <HAL_GPIO_Init+0xfe>
 8001248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	e002      	b.n	8001254 <HAL_GPIO_Init+0x104>
 800124e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001250:	3b08      	subs	r3, #8
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	210f      	movs	r1, #15
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	fa01 f303 	lsl.w	r3, r1, r3
 8001262:	43db      	mvns	r3, r3
 8001264:	401a      	ands	r2, r3
 8001266:	6a39      	ldr	r1, [r7, #32]
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	fa01 f303 	lsl.w	r3, r1, r3
 800126e:	431a      	orrs	r2, r3
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127c:	2b00      	cmp	r3, #0
 800127e:	f000 8096 	beq.w	80013ae <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001282:	4b59      	ldr	r3, [pc, #356]	; (80013e8 <HAL_GPIO_Init+0x298>)
 8001284:	699b      	ldr	r3, [r3, #24]
 8001286:	4a58      	ldr	r2, [pc, #352]	; (80013e8 <HAL_GPIO_Init+0x298>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6193      	str	r3, [r2, #24]
 800128e:	4b56      	ldr	r3, [pc, #344]	; (80013e8 <HAL_GPIO_Init+0x298>)
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800129a:	4a54      	ldr	r2, [pc, #336]	; (80013ec <HAL_GPIO_Init+0x29c>)
 800129c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129e:	089b      	lsrs	r3, r3, #2
 80012a0:	3302      	adds	r3, #2
 80012a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012aa:	f003 0303 	and.w	r3, r3, #3
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	220f      	movs	r2, #15
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43db      	mvns	r3, r3
 80012b8:	68fa      	ldr	r2, [r7, #12]
 80012ba:	4013      	ands	r3, r2
 80012bc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a4b      	ldr	r2, [pc, #300]	; (80013f0 <HAL_GPIO_Init+0x2a0>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d013      	beq.n	80012ee <HAL_GPIO_Init+0x19e>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a4a      	ldr	r2, [pc, #296]	; (80013f4 <HAL_GPIO_Init+0x2a4>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d00d      	beq.n	80012ea <HAL_GPIO_Init+0x19a>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a49      	ldr	r2, [pc, #292]	; (80013f8 <HAL_GPIO_Init+0x2a8>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d007      	beq.n	80012e6 <HAL_GPIO_Init+0x196>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a48      	ldr	r2, [pc, #288]	; (80013fc <HAL_GPIO_Init+0x2ac>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d101      	bne.n	80012e2 <HAL_GPIO_Init+0x192>
 80012de:	2303      	movs	r3, #3
 80012e0:	e006      	b.n	80012f0 <HAL_GPIO_Init+0x1a0>
 80012e2:	2304      	movs	r3, #4
 80012e4:	e004      	b.n	80012f0 <HAL_GPIO_Init+0x1a0>
 80012e6:	2302      	movs	r3, #2
 80012e8:	e002      	b.n	80012f0 <HAL_GPIO_Init+0x1a0>
 80012ea:	2301      	movs	r3, #1
 80012ec:	e000      	b.n	80012f0 <HAL_GPIO_Init+0x1a0>
 80012ee:	2300      	movs	r3, #0
 80012f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012f2:	f002 0203 	and.w	r2, r2, #3
 80012f6:	0092      	lsls	r2, r2, #2
 80012f8:	4093      	lsls	r3, r2
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001300:	493a      	ldr	r1, [pc, #232]	; (80013ec <HAL_GPIO_Init+0x29c>)
 8001302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001304:	089b      	lsrs	r3, r3, #2
 8001306:	3302      	adds	r3, #2
 8001308:	68fa      	ldr	r2, [r7, #12]
 800130a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d006      	beq.n	8001328 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800131a:	4b39      	ldr	r3, [pc, #228]	; (8001400 <HAL_GPIO_Init+0x2b0>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	4938      	ldr	r1, [pc, #224]	; (8001400 <HAL_GPIO_Init+0x2b0>)
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	4313      	orrs	r3, r2
 8001324:	600b      	str	r3, [r1, #0]
 8001326:	e006      	b.n	8001336 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001328:	4b35      	ldr	r3, [pc, #212]	; (8001400 <HAL_GPIO_Init+0x2b0>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	43db      	mvns	r3, r3
 8001330:	4933      	ldr	r1, [pc, #204]	; (8001400 <HAL_GPIO_Init+0x2b0>)
 8001332:	4013      	ands	r3, r2
 8001334:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d006      	beq.n	8001350 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001342:	4b2f      	ldr	r3, [pc, #188]	; (8001400 <HAL_GPIO_Init+0x2b0>)
 8001344:	685a      	ldr	r2, [r3, #4]
 8001346:	492e      	ldr	r1, [pc, #184]	; (8001400 <HAL_GPIO_Init+0x2b0>)
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	4313      	orrs	r3, r2
 800134c:	604b      	str	r3, [r1, #4]
 800134e:	e006      	b.n	800135e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001350:	4b2b      	ldr	r3, [pc, #172]	; (8001400 <HAL_GPIO_Init+0x2b0>)
 8001352:	685a      	ldr	r2, [r3, #4]
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	43db      	mvns	r3, r3
 8001358:	4929      	ldr	r1, [pc, #164]	; (8001400 <HAL_GPIO_Init+0x2b0>)
 800135a:	4013      	ands	r3, r2
 800135c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d006      	beq.n	8001378 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800136a:	4b25      	ldr	r3, [pc, #148]	; (8001400 <HAL_GPIO_Init+0x2b0>)
 800136c:	689a      	ldr	r2, [r3, #8]
 800136e:	4924      	ldr	r1, [pc, #144]	; (8001400 <HAL_GPIO_Init+0x2b0>)
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	4313      	orrs	r3, r2
 8001374:	608b      	str	r3, [r1, #8]
 8001376:	e006      	b.n	8001386 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001378:	4b21      	ldr	r3, [pc, #132]	; (8001400 <HAL_GPIO_Init+0x2b0>)
 800137a:	689a      	ldr	r2, [r3, #8]
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	43db      	mvns	r3, r3
 8001380:	491f      	ldr	r1, [pc, #124]	; (8001400 <HAL_GPIO_Init+0x2b0>)
 8001382:	4013      	ands	r3, r2
 8001384:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d006      	beq.n	80013a0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001392:	4b1b      	ldr	r3, [pc, #108]	; (8001400 <HAL_GPIO_Init+0x2b0>)
 8001394:	68da      	ldr	r2, [r3, #12]
 8001396:	491a      	ldr	r1, [pc, #104]	; (8001400 <HAL_GPIO_Init+0x2b0>)
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	4313      	orrs	r3, r2
 800139c:	60cb      	str	r3, [r1, #12]
 800139e:	e006      	b.n	80013ae <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013a0:	4b17      	ldr	r3, [pc, #92]	; (8001400 <HAL_GPIO_Init+0x2b0>)
 80013a2:	68da      	ldr	r2, [r3, #12]
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	43db      	mvns	r3, r3
 80013a8:	4915      	ldr	r1, [pc, #84]	; (8001400 <HAL_GPIO_Init+0x2b0>)
 80013aa:	4013      	ands	r3, r2
 80013ac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80013ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b0:	3301      	adds	r3, #1
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ba:	fa22 f303 	lsr.w	r3, r2, r3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f47f aed0 	bne.w	8001164 <HAL_GPIO_Init+0x14>
  }
}
 80013c4:	bf00      	nop
 80013c6:	372c      	adds	r7, #44	; 0x2c
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	10210000 	.word	0x10210000
 80013d4:	10110000 	.word	0x10110000
 80013d8:	10120000 	.word	0x10120000
 80013dc:	10310000 	.word	0x10310000
 80013e0:	10320000 	.word	0x10320000
 80013e4:	10220000 	.word	0x10220000
 80013e8:	40021000 	.word	0x40021000
 80013ec:	40010000 	.word	0x40010000
 80013f0:	40010800 	.word	0x40010800
 80013f4:	40010c00 	.word	0x40010c00
 80013f8:	40011000 	.word	0x40011000
 80013fc:	40011400 	.word	0x40011400
 8001400:	40010400 	.word	0x40010400

08001404 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	460b      	mov	r3, r1
 800140e:	807b      	strh	r3, [r7, #2]
 8001410:	4613      	mov	r3, r2
 8001412:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001414:	787b      	ldrb	r3, [r7, #1]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800141a:	887a      	ldrh	r2, [r7, #2]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001420:	e003      	b.n	800142a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001422:	887b      	ldrh	r3, [r7, #2]
 8001424:	041a      	lsls	r2, r3, #16
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	611a      	str	r2, [r3, #16]
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr

08001434 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d101      	bne.n	8001446 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e26c      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	2b00      	cmp	r3, #0
 8001450:	f000 8087 	beq.w	8001562 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001454:	4b92      	ldr	r3, [pc, #584]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 030c 	and.w	r3, r3, #12
 800145c:	2b04      	cmp	r3, #4
 800145e:	d00c      	beq.n	800147a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001460:	4b8f      	ldr	r3, [pc, #572]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f003 030c 	and.w	r3, r3, #12
 8001468:	2b08      	cmp	r3, #8
 800146a:	d112      	bne.n	8001492 <HAL_RCC_OscConfig+0x5e>
 800146c:	4b8c      	ldr	r3, [pc, #560]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001478:	d10b      	bne.n	8001492 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800147a:	4b89      	ldr	r3, [pc, #548]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d06c      	beq.n	8001560 <HAL_RCC_OscConfig+0x12c>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d168      	bne.n	8001560 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e246      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800149a:	d106      	bne.n	80014aa <HAL_RCC_OscConfig+0x76>
 800149c:	4b80      	ldr	r3, [pc, #512]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a7f      	ldr	r2, [pc, #508]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	e02e      	b.n	8001508 <HAL_RCC_OscConfig+0xd4>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d10c      	bne.n	80014cc <HAL_RCC_OscConfig+0x98>
 80014b2:	4b7b      	ldr	r3, [pc, #492]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a7a      	ldr	r2, [pc, #488]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	4b78      	ldr	r3, [pc, #480]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a77      	ldr	r2, [pc, #476]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	e01d      	b.n	8001508 <HAL_RCC_OscConfig+0xd4>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014d4:	d10c      	bne.n	80014f0 <HAL_RCC_OscConfig+0xbc>
 80014d6:	4b72      	ldr	r3, [pc, #456]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a71      	ldr	r2, [pc, #452]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014e0:	6013      	str	r3, [r2, #0]
 80014e2:	4b6f      	ldr	r3, [pc, #444]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a6e      	ldr	r2, [pc, #440]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ec:	6013      	str	r3, [r2, #0]
 80014ee:	e00b      	b.n	8001508 <HAL_RCC_OscConfig+0xd4>
 80014f0:	4b6b      	ldr	r3, [pc, #428]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a6a      	ldr	r2, [pc, #424]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014fa:	6013      	str	r3, [r2, #0]
 80014fc:	4b68      	ldr	r3, [pc, #416]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a67      	ldr	r2, [pc, #412]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 8001502:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001506:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d013      	beq.n	8001538 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001510:	f7ff f920 	bl	8000754 <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001518:	f7ff f91c 	bl	8000754 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b64      	cmp	r3, #100	; 0x64
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e1fa      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800152a:	4b5d      	ldr	r3, [pc, #372]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d0f0      	beq.n	8001518 <HAL_RCC_OscConfig+0xe4>
 8001536:	e014      	b.n	8001562 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001538:	f7ff f90c 	bl	8000754 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001540:	f7ff f908 	bl	8000754 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b64      	cmp	r3, #100	; 0x64
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e1e6      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001552:	4b53      	ldr	r3, [pc, #332]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1f0      	bne.n	8001540 <HAL_RCC_OscConfig+0x10c>
 800155e:	e000      	b.n	8001562 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001560:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d063      	beq.n	8001636 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800156e:	4b4c      	ldr	r3, [pc, #304]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f003 030c 	and.w	r3, r3, #12
 8001576:	2b00      	cmp	r3, #0
 8001578:	d00b      	beq.n	8001592 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800157a:	4b49      	ldr	r3, [pc, #292]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f003 030c 	and.w	r3, r3, #12
 8001582:	2b08      	cmp	r3, #8
 8001584:	d11c      	bne.n	80015c0 <HAL_RCC_OscConfig+0x18c>
 8001586:	4b46      	ldr	r3, [pc, #280]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d116      	bne.n	80015c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001592:	4b43      	ldr	r3, [pc, #268]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d005      	beq.n	80015aa <HAL_RCC_OscConfig+0x176>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d001      	beq.n	80015aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e1ba      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015aa:	4b3d      	ldr	r3, [pc, #244]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	695b      	ldr	r3, [r3, #20]
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	4939      	ldr	r1, [pc, #228]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80015ba:	4313      	orrs	r3, r2
 80015bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015be:	e03a      	b.n	8001636 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d020      	beq.n	800160a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015c8:	4b36      	ldr	r3, [pc, #216]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ce:	f7ff f8c1 	bl	8000754 <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015d6:	f7ff f8bd 	bl	8000754 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e19b      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e8:	4b2d      	ldr	r3, [pc, #180]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d0f0      	beq.n	80015d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f4:	4b2a      	ldr	r3, [pc, #168]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	695b      	ldr	r3, [r3, #20]
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	4927      	ldr	r1, [pc, #156]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 8001604:	4313      	orrs	r3, r2
 8001606:	600b      	str	r3, [r1, #0]
 8001608:	e015      	b.n	8001636 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800160a:	4b26      	ldr	r3, [pc, #152]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001610:	f7ff f8a0 	bl	8000754 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001618:	f7ff f89c 	bl	8000754 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e17a      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800162a:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1f0      	bne.n	8001618 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0308 	and.w	r3, r3, #8
 800163e:	2b00      	cmp	r3, #0
 8001640:	d03a      	beq.n	80016b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d019      	beq.n	800167e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800164a:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <HAL_RCC_OscConfig+0x274>)
 800164c:	2201      	movs	r2, #1
 800164e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001650:	f7ff f880 	bl	8000754 <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001658:	f7ff f87c 	bl	8000754 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e15a      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800166a:	4b0d      	ldr	r3, [pc, #52]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 800166c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d0f0      	beq.n	8001658 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001676:	2001      	movs	r0, #1
 8001678:	f000 fada 	bl	8001c30 <RCC_Delay>
 800167c:	e01c      	b.n	80016b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800167e:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <HAL_RCC_OscConfig+0x274>)
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001684:	f7ff f866 	bl	8000754 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800168a:	e00f      	b.n	80016ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800168c:	f7ff f862 	bl	8000754 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d908      	bls.n	80016ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e140      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
 800169e:	bf00      	nop
 80016a0:	40021000 	.word	0x40021000
 80016a4:	42420000 	.word	0x42420000
 80016a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ac:	4b9e      	ldr	r3, [pc, #632]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 80016ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1e9      	bne.n	800168c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0304 	and.w	r3, r3, #4
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f000 80a6 	beq.w	8001812 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016c6:	2300      	movs	r3, #0
 80016c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ca:	4b97      	ldr	r3, [pc, #604]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d10d      	bne.n	80016f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016d6:	4b94      	ldr	r3, [pc, #592]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	4a93      	ldr	r2, [pc, #588]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 80016dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e0:	61d3      	str	r3, [r2, #28]
 80016e2:	4b91      	ldr	r3, [pc, #580]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ee:	2301      	movs	r3, #1
 80016f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f2:	4b8e      	ldr	r3, [pc, #568]	; (800192c <HAL_RCC_OscConfig+0x4f8>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d118      	bne.n	8001730 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016fe:	4b8b      	ldr	r3, [pc, #556]	; (800192c <HAL_RCC_OscConfig+0x4f8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a8a      	ldr	r2, [pc, #552]	; (800192c <HAL_RCC_OscConfig+0x4f8>)
 8001704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001708:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800170a:	f7ff f823 	bl	8000754 <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001712:	f7ff f81f 	bl	8000754 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b64      	cmp	r3, #100	; 0x64
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e0fd      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001724:	4b81      	ldr	r3, [pc, #516]	; (800192c <HAL_RCC_OscConfig+0x4f8>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800172c:	2b00      	cmp	r3, #0
 800172e:	d0f0      	beq.n	8001712 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d106      	bne.n	8001746 <HAL_RCC_OscConfig+0x312>
 8001738:	4b7b      	ldr	r3, [pc, #492]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	4a7a      	ldr	r2, [pc, #488]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	6213      	str	r3, [r2, #32]
 8001744:	e02d      	b.n	80017a2 <HAL_RCC_OscConfig+0x36e>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d10c      	bne.n	8001768 <HAL_RCC_OscConfig+0x334>
 800174e:	4b76      	ldr	r3, [pc, #472]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 8001750:	6a1b      	ldr	r3, [r3, #32]
 8001752:	4a75      	ldr	r2, [pc, #468]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 8001754:	f023 0301 	bic.w	r3, r3, #1
 8001758:	6213      	str	r3, [r2, #32]
 800175a:	4b73      	ldr	r3, [pc, #460]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 800175c:	6a1b      	ldr	r3, [r3, #32]
 800175e:	4a72      	ldr	r2, [pc, #456]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 8001760:	f023 0304 	bic.w	r3, r3, #4
 8001764:	6213      	str	r3, [r2, #32]
 8001766:	e01c      	b.n	80017a2 <HAL_RCC_OscConfig+0x36e>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	2b05      	cmp	r3, #5
 800176e:	d10c      	bne.n	800178a <HAL_RCC_OscConfig+0x356>
 8001770:	4b6d      	ldr	r3, [pc, #436]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	4a6c      	ldr	r2, [pc, #432]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 8001776:	f043 0304 	orr.w	r3, r3, #4
 800177a:	6213      	str	r3, [r2, #32]
 800177c:	4b6a      	ldr	r3, [pc, #424]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 800177e:	6a1b      	ldr	r3, [r3, #32]
 8001780:	4a69      	ldr	r2, [pc, #420]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	6213      	str	r3, [r2, #32]
 8001788:	e00b      	b.n	80017a2 <HAL_RCC_OscConfig+0x36e>
 800178a:	4b67      	ldr	r3, [pc, #412]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 800178c:	6a1b      	ldr	r3, [r3, #32]
 800178e:	4a66      	ldr	r2, [pc, #408]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 8001790:	f023 0301 	bic.w	r3, r3, #1
 8001794:	6213      	str	r3, [r2, #32]
 8001796:	4b64      	ldr	r3, [pc, #400]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 8001798:	6a1b      	ldr	r3, [r3, #32]
 800179a:	4a63      	ldr	r2, [pc, #396]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 800179c:	f023 0304 	bic.w	r3, r3, #4
 80017a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d015      	beq.n	80017d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017aa:	f7fe ffd3 	bl	8000754 <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017b0:	e00a      	b.n	80017c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017b2:	f7fe ffcf 	bl	8000754 <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e0ab      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017c8:	4b57      	ldr	r3, [pc, #348]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 80017ca:	6a1b      	ldr	r3, [r3, #32]
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d0ee      	beq.n	80017b2 <HAL_RCC_OscConfig+0x37e>
 80017d4:	e014      	b.n	8001800 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d6:	f7fe ffbd 	bl	8000754 <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017dc:	e00a      	b.n	80017f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017de:	f7fe ffb9 	bl	8000754 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e095      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017f4:	4b4c      	ldr	r3, [pc, #304]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 80017f6:	6a1b      	ldr	r3, [r3, #32]
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1ee      	bne.n	80017de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001800:	7dfb      	ldrb	r3, [r7, #23]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d105      	bne.n	8001812 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001806:	4b48      	ldr	r3, [pc, #288]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	4a47      	ldr	r2, [pc, #284]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 800180c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001810:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	2b00      	cmp	r3, #0
 8001818:	f000 8081 	beq.w	800191e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800181c:	4b42      	ldr	r3, [pc, #264]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 030c 	and.w	r3, r3, #12
 8001824:	2b08      	cmp	r3, #8
 8001826:	d061      	beq.n	80018ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	69db      	ldr	r3, [r3, #28]
 800182c:	2b02      	cmp	r3, #2
 800182e:	d146      	bne.n	80018be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001830:	4b3f      	ldr	r3, [pc, #252]	; (8001930 <HAL_RCC_OscConfig+0x4fc>)
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001836:	f7fe ff8d 	bl	8000754 <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800183e:	f7fe ff89 	bl	8000754 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e067      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001850:	4b35      	ldr	r3, [pc, #212]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1f0      	bne.n	800183e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a1b      	ldr	r3, [r3, #32]
 8001860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001864:	d108      	bne.n	8001878 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001866:	4b30      	ldr	r3, [pc, #192]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	492d      	ldr	r1, [pc, #180]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 8001874:	4313      	orrs	r3, r2
 8001876:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001878:	4b2b      	ldr	r3, [pc, #172]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a19      	ldr	r1, [r3, #32]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001888:	430b      	orrs	r3, r1
 800188a:	4927      	ldr	r1, [pc, #156]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 800188c:	4313      	orrs	r3, r2
 800188e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001890:	4b27      	ldr	r3, [pc, #156]	; (8001930 <HAL_RCC_OscConfig+0x4fc>)
 8001892:	2201      	movs	r2, #1
 8001894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001896:	f7fe ff5d 	bl	8000754 <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800189e:	f7fe ff59 	bl	8000754 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e037      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018b0:	4b1d      	ldr	r3, [pc, #116]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0f0      	beq.n	800189e <HAL_RCC_OscConfig+0x46a>
 80018bc:	e02f      	b.n	800191e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018be:	4b1c      	ldr	r3, [pc, #112]	; (8001930 <HAL_RCC_OscConfig+0x4fc>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c4:	f7fe ff46 	bl	8000754 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018cc:	f7fe ff42 	bl	8000754 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e020      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018de:	4b12      	ldr	r3, [pc, #72]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f0      	bne.n	80018cc <HAL_RCC_OscConfig+0x498>
 80018ea:	e018      	b.n	800191e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	69db      	ldr	r3, [r3, #28]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d101      	bne.n	80018f8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e013      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018f8:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a1b      	ldr	r3, [r3, #32]
 8001908:	429a      	cmp	r2, r3
 800190a:	d106      	bne.n	800191a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001916:	429a      	cmp	r2, r3
 8001918:	d001      	beq.n	800191e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e000      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40021000 	.word	0x40021000
 800192c:	40007000 	.word	0x40007000
 8001930:	42420060 	.word	0x42420060

08001934 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d101      	bne.n	8001948 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e0d0      	b.n	8001aea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001948:	4b6a      	ldr	r3, [pc, #424]	; (8001af4 <HAL_RCC_ClockConfig+0x1c0>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0307 	and.w	r3, r3, #7
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	429a      	cmp	r2, r3
 8001954:	d910      	bls.n	8001978 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001956:	4b67      	ldr	r3, [pc, #412]	; (8001af4 <HAL_RCC_ClockConfig+0x1c0>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f023 0207 	bic.w	r2, r3, #7
 800195e:	4965      	ldr	r1, [pc, #404]	; (8001af4 <HAL_RCC_ClockConfig+0x1c0>)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	4313      	orrs	r3, r2
 8001964:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001966:	4b63      	ldr	r3, [pc, #396]	; (8001af4 <HAL_RCC_ClockConfig+0x1c0>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	683a      	ldr	r2, [r7, #0]
 8001970:	429a      	cmp	r2, r3
 8001972:	d001      	beq.n	8001978 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e0b8      	b.n	8001aea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d020      	beq.n	80019c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0304 	and.w	r3, r3, #4
 800198c:	2b00      	cmp	r3, #0
 800198e:	d005      	beq.n	800199c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001990:	4b59      	ldr	r3, [pc, #356]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	4a58      	ldr	r2, [pc, #352]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 8001996:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800199a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0308 	and.w	r3, r3, #8
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d005      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019a8:	4b53      	ldr	r3, [pc, #332]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	4a52      	ldr	r2, [pc, #328]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 80019ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80019b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019b4:	4b50      	ldr	r3, [pc, #320]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	494d      	ldr	r1, [pc, #308]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d040      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d107      	bne.n	80019ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019da:	4b47      	ldr	r3, [pc, #284]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d115      	bne.n	8001a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e07f      	b.n	8001aea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d107      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019f2:	4b41      	ldr	r3, [pc, #260]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d109      	bne.n	8001a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e073      	b.n	8001aea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a02:	4b3d      	ldr	r3, [pc, #244]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e06b      	b.n	8001aea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a12:	4b39      	ldr	r3, [pc, #228]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f023 0203 	bic.w	r2, r3, #3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	4936      	ldr	r1, [pc, #216]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a20:	4313      	orrs	r3, r2
 8001a22:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a24:	f7fe fe96 	bl	8000754 <HAL_GetTick>
 8001a28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a2a:	e00a      	b.n	8001a42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a2c:	f7fe fe92 	bl	8000754 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e053      	b.n	8001aea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a42:	4b2d      	ldr	r3, [pc, #180]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f003 020c 	and.w	r2, r3, #12
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d1eb      	bne.n	8001a2c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a54:	4b27      	ldr	r3, [pc, #156]	; (8001af4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0307 	and.w	r3, r3, #7
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d210      	bcs.n	8001a84 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a62:	4b24      	ldr	r3, [pc, #144]	; (8001af4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f023 0207 	bic.w	r2, r3, #7
 8001a6a:	4922      	ldr	r1, [pc, #136]	; (8001af4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a72:	4b20      	ldr	r3, [pc, #128]	; (8001af4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d001      	beq.n	8001a84 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e032      	b.n	8001aea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0304 	and.w	r3, r3, #4
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d008      	beq.n	8001aa2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a90:	4b19      	ldr	r3, [pc, #100]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	4916      	ldr	r1, [pc, #88]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0308 	and.w	r3, r3, #8
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d009      	beq.n	8001ac2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001aae:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	490e      	ldr	r1, [pc, #56]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ac2:	f000 f821 	bl	8001b08 <HAL_RCC_GetSysClockFreq>
 8001ac6:	4601      	mov	r1, r0
 8001ac8:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	091b      	lsrs	r3, r3, #4
 8001ace:	f003 030f 	and.w	r3, r3, #15
 8001ad2:	4a0a      	ldr	r2, [pc, #40]	; (8001afc <HAL_RCC_ClockConfig+0x1c8>)
 8001ad4:	5cd3      	ldrb	r3, [r2, r3]
 8001ad6:	fa21 f303 	lsr.w	r3, r1, r3
 8001ada:	4a09      	ldr	r2, [pc, #36]	; (8001b00 <HAL_RCC_ClockConfig+0x1cc>)
 8001adc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ade:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <HAL_RCC_ClockConfig+0x1d0>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7fe fdf4 	bl	80006d0 <HAL_InitTick>

  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40022000 	.word	0x40022000
 8001af8:	40021000 	.word	0x40021000
 8001afc:	08002c38 	.word	0x08002c38
 8001b00:	20000000 	.word	0x20000000
 8001b04:	20000004 	.word	0x20000004

08001b08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b08:	b490      	push	{r4, r7}
 8001b0a:	b08a      	sub	sp, #40	; 0x28
 8001b0c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b0e:	4b2a      	ldr	r3, [pc, #168]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b10:	1d3c      	adds	r4, r7, #4
 8001b12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b18:	4b28      	ldr	r3, [pc, #160]	; (8001bbc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b1a:	881b      	ldrh	r3, [r3, #0]
 8001b1c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61fb      	str	r3, [r7, #28]
 8001b22:	2300      	movs	r3, #0
 8001b24:	61bb      	str	r3, [r7, #24]
 8001b26:	2300      	movs	r3, #0
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b32:	4b23      	ldr	r3, [pc, #140]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	f003 030c 	and.w	r3, r3, #12
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	d002      	beq.n	8001b48 <HAL_RCC_GetSysClockFreq+0x40>
 8001b42:	2b08      	cmp	r3, #8
 8001b44:	d003      	beq.n	8001b4e <HAL_RCC_GetSysClockFreq+0x46>
 8001b46:	e02d      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b48:	4b1e      	ldr	r3, [pc, #120]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b4a:	623b      	str	r3, [r7, #32]
      break;
 8001b4c:	e02d      	b.n	8001baa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	0c9b      	lsrs	r3, r3, #18
 8001b52:	f003 030f 	and.w	r3, r3, #15
 8001b56:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b5a:	4413      	add	r3, r2
 8001b5c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b60:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d013      	beq.n	8001b94 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b6c:	4b14      	ldr	r3, [pc, #80]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	0c5b      	lsrs	r3, r3, #17
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b7a:	4413      	add	r3, r2
 8001b7c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b80:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	4a0f      	ldr	r2, [pc, #60]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b86:	fb02 f203 	mul.w	r2, r2, r3
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
 8001b92:	e004      	b.n	8001b9e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	4a0c      	ldr	r2, [pc, #48]	; (8001bc8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b98:	fb02 f303 	mul.w	r3, r2, r3
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	623b      	str	r3, [r7, #32]
      break;
 8001ba2:	e002      	b.n	8001baa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ba4:	4b07      	ldr	r3, [pc, #28]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ba6:	623b      	str	r3, [r7, #32]
      break;
 8001ba8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001baa:	6a3b      	ldr	r3, [r7, #32]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3728      	adds	r7, #40	; 0x28
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc90      	pop	{r4, r7}
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	08002c10 	.word	0x08002c10
 8001bbc:	08002c20 	.word	0x08002c20
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	007a1200 	.word	0x007a1200
 8001bc8:	003d0900 	.word	0x003d0900

08001bcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bd0:	4b02      	ldr	r3, [pc, #8]	; (8001bdc <HAL_RCC_GetHCLKFreq+0x10>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr
 8001bdc:	20000000 	.word	0x20000000

08001be0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001be4:	f7ff fff2 	bl	8001bcc <HAL_RCC_GetHCLKFreq>
 8001be8:	4601      	mov	r1, r0
 8001bea:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	0a1b      	lsrs	r3, r3, #8
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	4a03      	ldr	r2, [pc, #12]	; (8001c04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bf6:	5cd3      	ldrb	r3, [r2, r3]
 8001bf8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40021000 	.word	0x40021000
 8001c04:	08002c48 	.word	0x08002c48

08001c08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c0c:	f7ff ffde 	bl	8001bcc <HAL_RCC_GetHCLKFreq>
 8001c10:	4601      	mov	r1, r0
 8001c12:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	0adb      	lsrs	r3, r3, #11
 8001c18:	f003 0307 	and.w	r3, r3, #7
 8001c1c:	4a03      	ldr	r2, [pc, #12]	; (8001c2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c1e:	5cd3      	ldrb	r3, [r2, r3]
 8001c20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	08002c48 	.word	0x08002c48

08001c30 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c38:	4b0a      	ldr	r3, [pc, #40]	; (8001c64 <RCC_Delay+0x34>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a0a      	ldr	r2, [pc, #40]	; (8001c68 <RCC_Delay+0x38>)
 8001c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c42:	0a5b      	lsrs	r3, r3, #9
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	fb02 f303 	mul.w	r3, r2, r3
 8001c4a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c4c:	bf00      	nop
  }
  while (Delay --);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	1e5a      	subs	r2, r3, #1
 8001c52:	60fa      	str	r2, [r7, #12]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1f9      	bne.n	8001c4c <RCC_Delay+0x1c>
}
 8001c58:	bf00      	nop
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc80      	pop	{r7}
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	20000000 	.word	0x20000000
 8001c68:	10624dd3 	.word	0x10624dd3

08001c6c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001c74:	2300      	movs	r3, #0
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d07d      	beq.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c8c:	4b4f      	ldr	r3, [pc, #316]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c8e:	69db      	ldr	r3, [r3, #28]
 8001c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d10d      	bne.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c98:	4b4c      	ldr	r3, [pc, #304]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c9a:	69db      	ldr	r3, [r3, #28]
 8001c9c:	4a4b      	ldr	r2, [pc, #300]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca2:	61d3      	str	r3, [r2, #28]
 8001ca4:	4b49      	ldr	r3, [pc, #292]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ca6:	69db      	ldr	r3, [r3, #28]
 8001ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cac:	60bb      	str	r3, [r7, #8]
 8001cae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb4:	4b46      	ldr	r3, [pc, #280]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d118      	bne.n	8001cf2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cc0:	4b43      	ldr	r3, [pc, #268]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a42      	ldr	r2, [pc, #264]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ccc:	f7fe fd42 	bl	8000754 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cd4:	f7fe fd3e 	bl	8000754 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b64      	cmp	r3, #100	; 0x64
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e06d      	b.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce6:	4b3a      	ldr	r3, [pc, #232]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d0f0      	beq.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001cf2:	4b36      	ldr	r3, [pc, #216]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
 8001cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cfa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d02e      	beq.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d027      	beq.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d10:	4b2e      	ldr	r3, [pc, #184]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d18:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d1a:	4b2e      	ldr	r3, [pc, #184]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d20:	4b2c      	ldr	r3, [pc, #176]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001d26:	4a29      	ldr	r2, [pc, #164]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d014      	beq.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d36:	f7fe fd0d 	bl	8000754 <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d3c:	e00a      	b.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d3e:	f7fe fd09 	bl	8000754 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e036      	b.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d54:	4b1d      	ldr	r3, [pc, #116]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0ee      	beq.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d60:	4b1a      	ldr	r3, [pc, #104]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	4917      	ldr	r1, [pc, #92]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d72:	7dfb      	ldrb	r3, [r7, #23]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d105      	bne.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d78:	4b14      	ldr	r3, [pc, #80]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d7a:	69db      	ldr	r3, [r3, #28]
 8001d7c:	4a13      	ldr	r2, [pc, #76]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d82:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d008      	beq.n	8001da2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001d90:	4b0e      	ldr	r3, [pc, #56]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	490b      	ldr	r1, [pc, #44]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0310 	and.w	r3, r3, #16
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d008      	beq.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001dae:	4b07      	ldr	r3, [pc, #28]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	4904      	ldr	r1, [pc, #16]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3718      	adds	r7, #24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	40007000 	.word	0x40007000
 8001dd4:	42420440 	.word	0x42420440

08001dd8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001dd8:	b590      	push	{r4, r7, lr}
 8001dda:	b08d      	sub	sp, #52	; 0x34
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001de0:	4b55      	ldr	r3, [pc, #340]	; (8001f38 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8001de2:	f107 040c 	add.w	r4, r7, #12
 8001de6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001de8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001dec:	4b53      	ldr	r3, [pc, #332]	; (8001f3c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8001dee:	881b      	ldrh	r3, [r3, #0]
 8001df0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001df2:	2300      	movs	r3, #0
 8001df4:	627b      	str	r3, [r7, #36]	; 0x24
 8001df6:	2300      	movs	r3, #0
 8001df8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	61fb      	str	r3, [r7, #28]
 8001e02:	2300      	movs	r3, #0
 8001e04:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d07f      	beq.n	8001f0c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8001e0c:	2b10      	cmp	r3, #16
 8001e0e:	d002      	beq.n	8001e16 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d048      	beq.n	8001ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001e14:	e08b      	b.n	8001f2e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8001e16:	4b4a      	ldr	r3, [pc, #296]	; (8001f40 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001e1c:	4b48      	ldr	r3, [pc, #288]	; (8001f40 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d07f      	beq.n	8001f28 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	0c9b      	lsrs	r3, r3, #18
 8001e2c:	f003 030f 	and.w	r3, r3, #15
 8001e30:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001e34:	4413      	add	r3, r2
 8001e36:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e3a:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d018      	beq.n	8001e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e46:	4b3e      	ldr	r3, [pc, #248]	; (8001f40 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	0c5b      	lsrs	r3, r3, #17
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001e54:	4413      	add	r3, r2
 8001e56:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00d      	beq.n	8001e82 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001e66:	4a37      	ldr	r2, [pc, #220]	; (8001f44 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8001e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e6e:	6a3b      	ldr	r3, [r7, #32]
 8001e70:	fb02 f303 	mul.w	r3, r2, r3
 8001e74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e76:	e004      	b.n	8001e82 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e78:	6a3b      	ldr	r3, [r7, #32]
 8001e7a:	4a33      	ldr	r2, [pc, #204]	; (8001f48 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001e7c:	fb02 f303 	mul.w	r3, r2, r3
 8001e80:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001e82:	4b2f      	ldr	r3, [pc, #188]	; (8001f40 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e8e:	d102      	bne.n	8001e96 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8001e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e92:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001e94:	e048      	b.n	8001f28 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8001e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	4a2c      	ldr	r2, [pc, #176]	; (8001f4c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea0:	085b      	lsrs	r3, r3, #1
 8001ea2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001ea4:	e040      	b.n	8001f28 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8001ea6:	4b26      	ldr	r3, [pc, #152]	; (8001f40 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
 8001eaa:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001eb6:	d108      	bne.n	8001eca <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8001ec2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ec6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ec8:	e01f      	b.n	8001f0a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ed0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ed4:	d109      	bne.n	8001eea <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8001ed6:	4b1a      	ldr	r3, [pc, #104]	; (8001f40 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8001ee2:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001ee6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ee8:	e00f      	b.n	8001f0a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ef0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001ef4:	d11a      	bne.n	8001f2c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8001ef6:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d014      	beq.n	8001f2c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8001f02:	f24f 4324 	movw	r3, #62500	; 0xf424
 8001f06:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001f08:	e010      	b.n	8001f2c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8001f0a:	e00f      	b.n	8001f2c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001f0c:	f7ff fe7c 	bl	8001c08 <HAL_RCC_GetPCLK2Freq>
 8001f10:	4602      	mov	r2, r0
 8001f12:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	0b9b      	lsrs	r3, r3, #14
 8001f18:	f003 0303 	and.w	r3, r3, #3
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f24:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001f26:	e002      	b.n	8001f2e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8001f28:	bf00      	nop
 8001f2a:	e000      	b.n	8001f2e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8001f2c:	bf00      	nop
    }
  }
  return (frequency);
 8001f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3734      	adds	r7, #52	; 0x34
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd90      	pop	{r4, r7, pc}
 8001f38:	08002c24 	.word	0x08002c24
 8001f3c:	08002c34 	.word	0x08002c34
 8001f40:	40021000 	.word	0x40021000
 8001f44:	007a1200 	.word	0x007a1200
 8001f48:	003d0900 	.word	0x003d0900
 8001f4c:	aaaaaaab 	.word	0xaaaaaaab

08001f50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e03f      	b.n	8001fe2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d106      	bne.n	8001f7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7fe fa98 	bl	80004ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2224      	movs	r2, #36	; 0x24
 8001f80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 f90b 	bl	80021b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	691a      	ldr	r2, [r3, #16]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fa8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	695a      	ldr	r2, [r3, #20]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68da      	ldr	r2, [r3, #12]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2220      	movs	r2, #32
 8001fd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2220      	movs	r2, #32
 8001fdc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b088      	sub	sp, #32
 8001fee:	af02      	add	r7, sp, #8
 8001ff0:	60f8      	str	r0, [r7, #12]
 8001ff2:	60b9      	str	r1, [r7, #8]
 8001ff4:	603b      	str	r3, [r7, #0]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b20      	cmp	r3, #32
 8002008:	f040 8083 	bne.w	8002112 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d002      	beq.n	8002018 <HAL_UART_Transmit+0x2e>
 8002012:	88fb      	ldrh	r3, [r7, #6]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d101      	bne.n	800201c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e07b      	b.n	8002114 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002022:	2b01      	cmp	r3, #1
 8002024:	d101      	bne.n	800202a <HAL_UART_Transmit+0x40>
 8002026:	2302      	movs	r3, #2
 8002028:	e074      	b.n	8002114 <HAL_UART_Transmit+0x12a>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2200      	movs	r2, #0
 8002036:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2221      	movs	r2, #33	; 0x21
 800203c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002040:	f7fe fb88 	bl	8000754 <HAL_GetTick>
 8002044:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	88fa      	ldrh	r2, [r7, #6]
 800204a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	88fa      	ldrh	r2, [r7, #6]
 8002050:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002052:	e042      	b.n	80020da <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002058:	b29b      	uxth	r3, r3
 800205a:	3b01      	subs	r3, #1
 800205c:	b29a      	uxth	r2, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800206a:	d122      	bne.n	80020b2 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	2200      	movs	r2, #0
 8002074:	2180      	movs	r1, #128	; 0x80
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	f000 f850 	bl	800211c <UART_WaitOnFlagUntilTimeout>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e046      	b.n	8002114 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	881b      	ldrh	r3, [r3, #0]
 800208e:	461a      	mov	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002098:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d103      	bne.n	80020aa <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	3302      	adds	r3, #2
 80020a6:	60bb      	str	r3, [r7, #8]
 80020a8:	e017      	b.n	80020da <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	3301      	adds	r3, #1
 80020ae:	60bb      	str	r3, [r7, #8]
 80020b0:	e013      	b.n	80020da <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	9300      	str	r3, [sp, #0]
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	2200      	movs	r2, #0
 80020ba:	2180      	movs	r1, #128	; 0x80
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	f000 f82d 	bl	800211c <UART_WaitOnFlagUntilTimeout>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e023      	b.n	8002114 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	1c5a      	adds	r2, r3, #1
 80020d0:	60ba      	str	r2, [r7, #8]
 80020d2:	781a      	ldrb	r2, [r3, #0]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020de:	b29b      	uxth	r3, r3
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1b7      	bne.n	8002054 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	2200      	movs	r2, #0
 80020ec:	2140      	movs	r1, #64	; 0x40
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f000 f814 	bl	800211c <UART_WaitOnFlagUntilTimeout>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e00a      	b.n	8002114 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2220      	movs	r2, #32
 8002102:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800210e:	2300      	movs	r3, #0
 8002110:	e000      	b.n	8002114 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002112:	2302      	movs	r3, #2
  }
}
 8002114:	4618      	mov	r0, r3
 8002116:	3718      	adds	r7, #24
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	603b      	str	r3, [r7, #0]
 8002128:	4613      	mov	r3, r2
 800212a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800212c:	e02c      	b.n	8002188 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002134:	d028      	beq.n	8002188 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d007      	beq.n	800214c <UART_WaitOnFlagUntilTimeout+0x30>
 800213c:	f7fe fb0a 	bl	8000754 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	429a      	cmp	r2, r3
 800214a:	d21d      	bcs.n	8002188 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68da      	ldr	r2, [r3, #12]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800215a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	695a      	ldr	r2, [r3, #20]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f022 0201 	bic.w	r2, r2, #1
 800216a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2220      	movs	r2, #32
 8002170:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2220      	movs	r2, #32
 8002178:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e00f      	b.n	80021a8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	4013      	ands	r3, r2
 8002192:	68ba      	ldr	r2, [r7, #8]
 8002194:	429a      	cmp	r2, r3
 8002196:	bf0c      	ite	eq
 8002198:	2301      	moveq	r3, #1
 800219a:	2300      	movne	r3, #0
 800219c:	b2db      	uxtb	r3, r3
 800219e:	461a      	mov	r2, r3
 80021a0:	79fb      	ldrb	r3, [r7, #7]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d0c3      	beq.n	800212e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68da      	ldr	r2, [r3, #12]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	430a      	orrs	r2, r1
 80021cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689a      	ldr	r2, [r3, #8]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	431a      	orrs	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	695b      	ldr	r3, [r3, #20]
 80021dc:	4313      	orrs	r3, r2
 80021de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80021ea:	f023 030c 	bic.w	r3, r3, #12
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6812      	ldr	r2, [r2, #0]
 80021f2:	68f9      	ldr	r1, [r7, #12]
 80021f4:	430b      	orrs	r3, r1
 80021f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	699a      	ldr	r2, [r3, #24]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	430a      	orrs	r2, r1
 800220c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a52      	ldr	r2, [pc, #328]	; (800235c <UART_SetConfig+0x1ac>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d14e      	bne.n	80022b6 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002218:	f7ff fcf6 	bl	8001c08 <HAL_RCC_GetPCLK2Freq>
 800221c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	4613      	mov	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	009a      	lsls	r2, r3, #2
 8002228:	441a      	add	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	fbb2 f3f3 	udiv	r3, r2, r3
 8002234:	4a4a      	ldr	r2, [pc, #296]	; (8002360 <UART_SetConfig+0x1b0>)
 8002236:	fba2 2303 	umull	r2, r3, r2, r3
 800223a:	095b      	lsrs	r3, r3, #5
 800223c:	0119      	lsls	r1, r3, #4
 800223e:	68ba      	ldr	r2, [r7, #8]
 8002240:	4613      	mov	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	009a      	lsls	r2, r3, #2
 8002248:	441a      	add	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	fbb2 f2f3 	udiv	r2, r2, r3
 8002254:	4b42      	ldr	r3, [pc, #264]	; (8002360 <UART_SetConfig+0x1b0>)
 8002256:	fba3 0302 	umull	r0, r3, r3, r2
 800225a:	095b      	lsrs	r3, r3, #5
 800225c:	2064      	movs	r0, #100	; 0x64
 800225e:	fb00 f303 	mul.w	r3, r0, r3
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	011b      	lsls	r3, r3, #4
 8002266:	3332      	adds	r3, #50	; 0x32
 8002268:	4a3d      	ldr	r2, [pc, #244]	; (8002360 <UART_SetConfig+0x1b0>)
 800226a:	fba2 2303 	umull	r2, r3, r2, r3
 800226e:	095b      	lsrs	r3, r3, #5
 8002270:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002274:	4419      	add	r1, r3
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	4613      	mov	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	009a      	lsls	r2, r3, #2
 8002280:	441a      	add	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	fbb2 f2f3 	udiv	r2, r2, r3
 800228c:	4b34      	ldr	r3, [pc, #208]	; (8002360 <UART_SetConfig+0x1b0>)
 800228e:	fba3 0302 	umull	r0, r3, r3, r2
 8002292:	095b      	lsrs	r3, r3, #5
 8002294:	2064      	movs	r0, #100	; 0x64
 8002296:	fb00 f303 	mul.w	r3, r0, r3
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	011b      	lsls	r3, r3, #4
 800229e:	3332      	adds	r3, #50	; 0x32
 80022a0:	4a2f      	ldr	r2, [pc, #188]	; (8002360 <UART_SetConfig+0x1b0>)
 80022a2:	fba2 2303 	umull	r2, r3, r2, r3
 80022a6:	095b      	lsrs	r3, r3, #5
 80022a8:	f003 020f 	and.w	r2, r3, #15
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	440a      	add	r2, r1
 80022b2:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80022b4:	e04d      	b.n	8002352 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80022b6:	f7ff fc93 	bl	8001be0 <HAL_RCC_GetPCLK1Freq>
 80022ba:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	4613      	mov	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4413      	add	r3, r2
 80022c4:	009a      	lsls	r2, r3, #2
 80022c6:	441a      	add	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d2:	4a23      	ldr	r2, [pc, #140]	; (8002360 <UART_SetConfig+0x1b0>)
 80022d4:	fba2 2303 	umull	r2, r3, r2, r3
 80022d8:	095b      	lsrs	r3, r3, #5
 80022da:	0119      	lsls	r1, r3, #4
 80022dc:	68ba      	ldr	r2, [r7, #8]
 80022de:	4613      	mov	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	009a      	lsls	r2, r3, #2
 80022e6:	441a      	add	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80022f2:	4b1b      	ldr	r3, [pc, #108]	; (8002360 <UART_SetConfig+0x1b0>)
 80022f4:	fba3 0302 	umull	r0, r3, r3, r2
 80022f8:	095b      	lsrs	r3, r3, #5
 80022fa:	2064      	movs	r0, #100	; 0x64
 80022fc:	fb00 f303 	mul.w	r3, r0, r3
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	011b      	lsls	r3, r3, #4
 8002304:	3332      	adds	r3, #50	; 0x32
 8002306:	4a16      	ldr	r2, [pc, #88]	; (8002360 <UART_SetConfig+0x1b0>)
 8002308:	fba2 2303 	umull	r2, r3, r2, r3
 800230c:	095b      	lsrs	r3, r3, #5
 800230e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002312:	4419      	add	r1, r3
 8002314:	68ba      	ldr	r2, [r7, #8]
 8002316:	4613      	mov	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	009a      	lsls	r2, r3, #2
 800231e:	441a      	add	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	fbb2 f2f3 	udiv	r2, r2, r3
 800232a:	4b0d      	ldr	r3, [pc, #52]	; (8002360 <UART_SetConfig+0x1b0>)
 800232c:	fba3 0302 	umull	r0, r3, r3, r2
 8002330:	095b      	lsrs	r3, r3, #5
 8002332:	2064      	movs	r0, #100	; 0x64
 8002334:	fb00 f303 	mul.w	r3, r0, r3
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	011b      	lsls	r3, r3, #4
 800233c:	3332      	adds	r3, #50	; 0x32
 800233e:	4a08      	ldr	r2, [pc, #32]	; (8002360 <UART_SetConfig+0x1b0>)
 8002340:	fba2 2303 	umull	r2, r3, r2, r3
 8002344:	095b      	lsrs	r3, r3, #5
 8002346:	f003 020f 	and.w	r2, r3, #15
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	440a      	add	r2, r1
 8002350:	609a      	str	r2, [r3, #8]
}
 8002352:	bf00      	nop
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40013800 	.word	0x40013800
 8002360:	51eb851f 	.word	0x51eb851f

08002364 <__errno>:
 8002364:	4b01      	ldr	r3, [pc, #4]	; (800236c <__errno+0x8>)
 8002366:	6818      	ldr	r0, [r3, #0]
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	2000000c 	.word	0x2000000c

08002370 <__libc_init_array>:
 8002370:	b570      	push	{r4, r5, r6, lr}
 8002372:	2500      	movs	r5, #0
 8002374:	4e0c      	ldr	r6, [pc, #48]	; (80023a8 <__libc_init_array+0x38>)
 8002376:	4c0d      	ldr	r4, [pc, #52]	; (80023ac <__libc_init_array+0x3c>)
 8002378:	1ba4      	subs	r4, r4, r6
 800237a:	10a4      	asrs	r4, r4, #2
 800237c:	42a5      	cmp	r5, r4
 800237e:	d109      	bne.n	8002394 <__libc_init_array+0x24>
 8002380:	f000 fc34 	bl	8002bec <_init>
 8002384:	2500      	movs	r5, #0
 8002386:	4e0a      	ldr	r6, [pc, #40]	; (80023b0 <__libc_init_array+0x40>)
 8002388:	4c0a      	ldr	r4, [pc, #40]	; (80023b4 <__libc_init_array+0x44>)
 800238a:	1ba4      	subs	r4, r4, r6
 800238c:	10a4      	asrs	r4, r4, #2
 800238e:	42a5      	cmp	r5, r4
 8002390:	d105      	bne.n	800239e <__libc_init_array+0x2e>
 8002392:	bd70      	pop	{r4, r5, r6, pc}
 8002394:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002398:	4798      	blx	r3
 800239a:	3501      	adds	r5, #1
 800239c:	e7ee      	b.n	800237c <__libc_init_array+0xc>
 800239e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80023a2:	4798      	blx	r3
 80023a4:	3501      	adds	r5, #1
 80023a6:	e7f2      	b.n	800238e <__libc_init_array+0x1e>
 80023a8:	08002c84 	.word	0x08002c84
 80023ac:	08002c84 	.word	0x08002c84
 80023b0:	08002c84 	.word	0x08002c84
 80023b4:	08002c88 	.word	0x08002c88

080023b8 <memset>:
 80023b8:	4603      	mov	r3, r0
 80023ba:	4402      	add	r2, r0
 80023bc:	4293      	cmp	r3, r2
 80023be:	d100      	bne.n	80023c2 <memset+0xa>
 80023c0:	4770      	bx	lr
 80023c2:	f803 1b01 	strb.w	r1, [r3], #1
 80023c6:	e7f9      	b.n	80023bc <memset+0x4>

080023c8 <siprintf>:
 80023c8:	b40e      	push	{r1, r2, r3}
 80023ca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80023ce:	b500      	push	{lr}
 80023d0:	b09c      	sub	sp, #112	; 0x70
 80023d2:	ab1d      	add	r3, sp, #116	; 0x74
 80023d4:	9002      	str	r0, [sp, #8]
 80023d6:	9006      	str	r0, [sp, #24]
 80023d8:	9107      	str	r1, [sp, #28]
 80023da:	9104      	str	r1, [sp, #16]
 80023dc:	4808      	ldr	r0, [pc, #32]	; (8002400 <siprintf+0x38>)
 80023de:	4909      	ldr	r1, [pc, #36]	; (8002404 <siprintf+0x3c>)
 80023e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80023e4:	9105      	str	r1, [sp, #20]
 80023e6:	6800      	ldr	r0, [r0, #0]
 80023e8:	a902      	add	r1, sp, #8
 80023ea:	9301      	str	r3, [sp, #4]
 80023ec:	f000 f866 	bl	80024bc <_svfiprintf_r>
 80023f0:	2200      	movs	r2, #0
 80023f2:	9b02      	ldr	r3, [sp, #8]
 80023f4:	701a      	strb	r2, [r3, #0]
 80023f6:	b01c      	add	sp, #112	; 0x70
 80023f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80023fc:	b003      	add	sp, #12
 80023fe:	4770      	bx	lr
 8002400:	2000000c 	.word	0x2000000c
 8002404:	ffff0208 	.word	0xffff0208

08002408 <__ssputs_r>:
 8002408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800240c:	688e      	ldr	r6, [r1, #8]
 800240e:	4682      	mov	sl, r0
 8002410:	429e      	cmp	r6, r3
 8002412:	460c      	mov	r4, r1
 8002414:	4690      	mov	r8, r2
 8002416:	4699      	mov	r9, r3
 8002418:	d837      	bhi.n	800248a <__ssputs_r+0x82>
 800241a:	898a      	ldrh	r2, [r1, #12]
 800241c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002420:	d031      	beq.n	8002486 <__ssputs_r+0x7e>
 8002422:	2302      	movs	r3, #2
 8002424:	6825      	ldr	r5, [r4, #0]
 8002426:	6909      	ldr	r1, [r1, #16]
 8002428:	1a6f      	subs	r7, r5, r1
 800242a:	6965      	ldr	r5, [r4, #20]
 800242c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002430:	fb95 f5f3 	sdiv	r5, r5, r3
 8002434:	f109 0301 	add.w	r3, r9, #1
 8002438:	443b      	add	r3, r7
 800243a:	429d      	cmp	r5, r3
 800243c:	bf38      	it	cc
 800243e:	461d      	movcc	r5, r3
 8002440:	0553      	lsls	r3, r2, #21
 8002442:	d530      	bpl.n	80024a6 <__ssputs_r+0x9e>
 8002444:	4629      	mov	r1, r5
 8002446:	f000 fb37 	bl	8002ab8 <_malloc_r>
 800244a:	4606      	mov	r6, r0
 800244c:	b950      	cbnz	r0, 8002464 <__ssputs_r+0x5c>
 800244e:	230c      	movs	r3, #12
 8002450:	f04f 30ff 	mov.w	r0, #4294967295
 8002454:	f8ca 3000 	str.w	r3, [sl]
 8002458:	89a3      	ldrh	r3, [r4, #12]
 800245a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800245e:	81a3      	strh	r3, [r4, #12]
 8002460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002464:	463a      	mov	r2, r7
 8002466:	6921      	ldr	r1, [r4, #16]
 8002468:	f000 fab6 	bl	80029d8 <memcpy>
 800246c:	89a3      	ldrh	r3, [r4, #12]
 800246e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002476:	81a3      	strh	r3, [r4, #12]
 8002478:	6126      	str	r6, [r4, #16]
 800247a:	443e      	add	r6, r7
 800247c:	6026      	str	r6, [r4, #0]
 800247e:	464e      	mov	r6, r9
 8002480:	6165      	str	r5, [r4, #20]
 8002482:	1bed      	subs	r5, r5, r7
 8002484:	60a5      	str	r5, [r4, #8]
 8002486:	454e      	cmp	r6, r9
 8002488:	d900      	bls.n	800248c <__ssputs_r+0x84>
 800248a:	464e      	mov	r6, r9
 800248c:	4632      	mov	r2, r6
 800248e:	4641      	mov	r1, r8
 8002490:	6820      	ldr	r0, [r4, #0]
 8002492:	f000 faac 	bl	80029ee <memmove>
 8002496:	68a3      	ldr	r3, [r4, #8]
 8002498:	2000      	movs	r0, #0
 800249a:	1b9b      	subs	r3, r3, r6
 800249c:	60a3      	str	r3, [r4, #8]
 800249e:	6823      	ldr	r3, [r4, #0]
 80024a0:	441e      	add	r6, r3
 80024a2:	6026      	str	r6, [r4, #0]
 80024a4:	e7dc      	b.n	8002460 <__ssputs_r+0x58>
 80024a6:	462a      	mov	r2, r5
 80024a8:	f000 fb60 	bl	8002b6c <_realloc_r>
 80024ac:	4606      	mov	r6, r0
 80024ae:	2800      	cmp	r0, #0
 80024b0:	d1e2      	bne.n	8002478 <__ssputs_r+0x70>
 80024b2:	6921      	ldr	r1, [r4, #16]
 80024b4:	4650      	mov	r0, sl
 80024b6:	f000 fab3 	bl	8002a20 <_free_r>
 80024ba:	e7c8      	b.n	800244e <__ssputs_r+0x46>

080024bc <_svfiprintf_r>:
 80024bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024c0:	461d      	mov	r5, r3
 80024c2:	898b      	ldrh	r3, [r1, #12]
 80024c4:	b09d      	sub	sp, #116	; 0x74
 80024c6:	061f      	lsls	r7, r3, #24
 80024c8:	4680      	mov	r8, r0
 80024ca:	460c      	mov	r4, r1
 80024cc:	4616      	mov	r6, r2
 80024ce:	d50f      	bpl.n	80024f0 <_svfiprintf_r+0x34>
 80024d0:	690b      	ldr	r3, [r1, #16]
 80024d2:	b96b      	cbnz	r3, 80024f0 <_svfiprintf_r+0x34>
 80024d4:	2140      	movs	r1, #64	; 0x40
 80024d6:	f000 faef 	bl	8002ab8 <_malloc_r>
 80024da:	6020      	str	r0, [r4, #0]
 80024dc:	6120      	str	r0, [r4, #16]
 80024de:	b928      	cbnz	r0, 80024ec <_svfiprintf_r+0x30>
 80024e0:	230c      	movs	r3, #12
 80024e2:	f8c8 3000 	str.w	r3, [r8]
 80024e6:	f04f 30ff 	mov.w	r0, #4294967295
 80024ea:	e0c8      	b.n	800267e <_svfiprintf_r+0x1c2>
 80024ec:	2340      	movs	r3, #64	; 0x40
 80024ee:	6163      	str	r3, [r4, #20]
 80024f0:	2300      	movs	r3, #0
 80024f2:	9309      	str	r3, [sp, #36]	; 0x24
 80024f4:	2320      	movs	r3, #32
 80024f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80024fa:	2330      	movs	r3, #48	; 0x30
 80024fc:	f04f 0b01 	mov.w	fp, #1
 8002500:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002504:	9503      	str	r5, [sp, #12]
 8002506:	4637      	mov	r7, r6
 8002508:	463d      	mov	r5, r7
 800250a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800250e:	b10b      	cbz	r3, 8002514 <_svfiprintf_r+0x58>
 8002510:	2b25      	cmp	r3, #37	; 0x25
 8002512:	d13e      	bne.n	8002592 <_svfiprintf_r+0xd6>
 8002514:	ebb7 0a06 	subs.w	sl, r7, r6
 8002518:	d00b      	beq.n	8002532 <_svfiprintf_r+0x76>
 800251a:	4653      	mov	r3, sl
 800251c:	4632      	mov	r2, r6
 800251e:	4621      	mov	r1, r4
 8002520:	4640      	mov	r0, r8
 8002522:	f7ff ff71 	bl	8002408 <__ssputs_r>
 8002526:	3001      	adds	r0, #1
 8002528:	f000 80a4 	beq.w	8002674 <_svfiprintf_r+0x1b8>
 800252c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800252e:	4453      	add	r3, sl
 8002530:	9309      	str	r3, [sp, #36]	; 0x24
 8002532:	783b      	ldrb	r3, [r7, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	f000 809d 	beq.w	8002674 <_svfiprintf_r+0x1b8>
 800253a:	2300      	movs	r3, #0
 800253c:	f04f 32ff 	mov.w	r2, #4294967295
 8002540:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002544:	9304      	str	r3, [sp, #16]
 8002546:	9307      	str	r3, [sp, #28]
 8002548:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800254c:	931a      	str	r3, [sp, #104]	; 0x68
 800254e:	462f      	mov	r7, r5
 8002550:	2205      	movs	r2, #5
 8002552:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002556:	4850      	ldr	r0, [pc, #320]	; (8002698 <_svfiprintf_r+0x1dc>)
 8002558:	f000 fa30 	bl	80029bc <memchr>
 800255c:	9b04      	ldr	r3, [sp, #16]
 800255e:	b9d0      	cbnz	r0, 8002596 <_svfiprintf_r+0xda>
 8002560:	06d9      	lsls	r1, r3, #27
 8002562:	bf44      	itt	mi
 8002564:	2220      	movmi	r2, #32
 8002566:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800256a:	071a      	lsls	r2, r3, #28
 800256c:	bf44      	itt	mi
 800256e:	222b      	movmi	r2, #43	; 0x2b
 8002570:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002574:	782a      	ldrb	r2, [r5, #0]
 8002576:	2a2a      	cmp	r2, #42	; 0x2a
 8002578:	d015      	beq.n	80025a6 <_svfiprintf_r+0xea>
 800257a:	462f      	mov	r7, r5
 800257c:	2000      	movs	r0, #0
 800257e:	250a      	movs	r5, #10
 8002580:	9a07      	ldr	r2, [sp, #28]
 8002582:	4639      	mov	r1, r7
 8002584:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002588:	3b30      	subs	r3, #48	; 0x30
 800258a:	2b09      	cmp	r3, #9
 800258c:	d94d      	bls.n	800262a <_svfiprintf_r+0x16e>
 800258e:	b1b8      	cbz	r0, 80025c0 <_svfiprintf_r+0x104>
 8002590:	e00f      	b.n	80025b2 <_svfiprintf_r+0xf6>
 8002592:	462f      	mov	r7, r5
 8002594:	e7b8      	b.n	8002508 <_svfiprintf_r+0x4c>
 8002596:	4a40      	ldr	r2, [pc, #256]	; (8002698 <_svfiprintf_r+0x1dc>)
 8002598:	463d      	mov	r5, r7
 800259a:	1a80      	subs	r0, r0, r2
 800259c:	fa0b f000 	lsl.w	r0, fp, r0
 80025a0:	4318      	orrs	r0, r3
 80025a2:	9004      	str	r0, [sp, #16]
 80025a4:	e7d3      	b.n	800254e <_svfiprintf_r+0x92>
 80025a6:	9a03      	ldr	r2, [sp, #12]
 80025a8:	1d11      	adds	r1, r2, #4
 80025aa:	6812      	ldr	r2, [r2, #0]
 80025ac:	9103      	str	r1, [sp, #12]
 80025ae:	2a00      	cmp	r2, #0
 80025b0:	db01      	blt.n	80025b6 <_svfiprintf_r+0xfa>
 80025b2:	9207      	str	r2, [sp, #28]
 80025b4:	e004      	b.n	80025c0 <_svfiprintf_r+0x104>
 80025b6:	4252      	negs	r2, r2
 80025b8:	f043 0302 	orr.w	r3, r3, #2
 80025bc:	9207      	str	r2, [sp, #28]
 80025be:	9304      	str	r3, [sp, #16]
 80025c0:	783b      	ldrb	r3, [r7, #0]
 80025c2:	2b2e      	cmp	r3, #46	; 0x2e
 80025c4:	d10c      	bne.n	80025e0 <_svfiprintf_r+0x124>
 80025c6:	787b      	ldrb	r3, [r7, #1]
 80025c8:	2b2a      	cmp	r3, #42	; 0x2a
 80025ca:	d133      	bne.n	8002634 <_svfiprintf_r+0x178>
 80025cc:	9b03      	ldr	r3, [sp, #12]
 80025ce:	3702      	adds	r7, #2
 80025d0:	1d1a      	adds	r2, r3, #4
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	9203      	str	r2, [sp, #12]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	bfb8      	it	lt
 80025da:	f04f 33ff 	movlt.w	r3, #4294967295
 80025de:	9305      	str	r3, [sp, #20]
 80025e0:	4d2e      	ldr	r5, [pc, #184]	; (800269c <_svfiprintf_r+0x1e0>)
 80025e2:	2203      	movs	r2, #3
 80025e4:	7839      	ldrb	r1, [r7, #0]
 80025e6:	4628      	mov	r0, r5
 80025e8:	f000 f9e8 	bl	80029bc <memchr>
 80025ec:	b138      	cbz	r0, 80025fe <_svfiprintf_r+0x142>
 80025ee:	2340      	movs	r3, #64	; 0x40
 80025f0:	1b40      	subs	r0, r0, r5
 80025f2:	fa03 f000 	lsl.w	r0, r3, r0
 80025f6:	9b04      	ldr	r3, [sp, #16]
 80025f8:	3701      	adds	r7, #1
 80025fa:	4303      	orrs	r3, r0
 80025fc:	9304      	str	r3, [sp, #16]
 80025fe:	7839      	ldrb	r1, [r7, #0]
 8002600:	2206      	movs	r2, #6
 8002602:	4827      	ldr	r0, [pc, #156]	; (80026a0 <_svfiprintf_r+0x1e4>)
 8002604:	1c7e      	adds	r6, r7, #1
 8002606:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800260a:	f000 f9d7 	bl	80029bc <memchr>
 800260e:	2800      	cmp	r0, #0
 8002610:	d038      	beq.n	8002684 <_svfiprintf_r+0x1c8>
 8002612:	4b24      	ldr	r3, [pc, #144]	; (80026a4 <_svfiprintf_r+0x1e8>)
 8002614:	bb13      	cbnz	r3, 800265c <_svfiprintf_r+0x1a0>
 8002616:	9b03      	ldr	r3, [sp, #12]
 8002618:	3307      	adds	r3, #7
 800261a:	f023 0307 	bic.w	r3, r3, #7
 800261e:	3308      	adds	r3, #8
 8002620:	9303      	str	r3, [sp, #12]
 8002622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002624:	444b      	add	r3, r9
 8002626:	9309      	str	r3, [sp, #36]	; 0x24
 8002628:	e76d      	b.n	8002506 <_svfiprintf_r+0x4a>
 800262a:	fb05 3202 	mla	r2, r5, r2, r3
 800262e:	2001      	movs	r0, #1
 8002630:	460f      	mov	r7, r1
 8002632:	e7a6      	b.n	8002582 <_svfiprintf_r+0xc6>
 8002634:	2300      	movs	r3, #0
 8002636:	250a      	movs	r5, #10
 8002638:	4619      	mov	r1, r3
 800263a:	3701      	adds	r7, #1
 800263c:	9305      	str	r3, [sp, #20]
 800263e:	4638      	mov	r0, r7
 8002640:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002644:	3a30      	subs	r2, #48	; 0x30
 8002646:	2a09      	cmp	r2, #9
 8002648:	d903      	bls.n	8002652 <_svfiprintf_r+0x196>
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0c8      	beq.n	80025e0 <_svfiprintf_r+0x124>
 800264e:	9105      	str	r1, [sp, #20]
 8002650:	e7c6      	b.n	80025e0 <_svfiprintf_r+0x124>
 8002652:	fb05 2101 	mla	r1, r5, r1, r2
 8002656:	2301      	movs	r3, #1
 8002658:	4607      	mov	r7, r0
 800265a:	e7f0      	b.n	800263e <_svfiprintf_r+0x182>
 800265c:	ab03      	add	r3, sp, #12
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	4622      	mov	r2, r4
 8002662:	4b11      	ldr	r3, [pc, #68]	; (80026a8 <_svfiprintf_r+0x1ec>)
 8002664:	a904      	add	r1, sp, #16
 8002666:	4640      	mov	r0, r8
 8002668:	f3af 8000 	nop.w
 800266c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002670:	4681      	mov	r9, r0
 8002672:	d1d6      	bne.n	8002622 <_svfiprintf_r+0x166>
 8002674:	89a3      	ldrh	r3, [r4, #12]
 8002676:	065b      	lsls	r3, r3, #25
 8002678:	f53f af35 	bmi.w	80024e6 <_svfiprintf_r+0x2a>
 800267c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800267e:	b01d      	add	sp, #116	; 0x74
 8002680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002684:	ab03      	add	r3, sp, #12
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	4622      	mov	r2, r4
 800268a:	4b07      	ldr	r3, [pc, #28]	; (80026a8 <_svfiprintf_r+0x1ec>)
 800268c:	a904      	add	r1, sp, #16
 800268e:	4640      	mov	r0, r8
 8002690:	f000 f882 	bl	8002798 <_printf_i>
 8002694:	e7ea      	b.n	800266c <_svfiprintf_r+0x1b0>
 8002696:	bf00      	nop
 8002698:	08002c50 	.word	0x08002c50
 800269c:	08002c56 	.word	0x08002c56
 80026a0:	08002c5a 	.word	0x08002c5a
 80026a4:	00000000 	.word	0x00000000
 80026a8:	08002409 	.word	0x08002409

080026ac <_printf_common>:
 80026ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026b0:	4691      	mov	r9, r2
 80026b2:	461f      	mov	r7, r3
 80026b4:	688a      	ldr	r2, [r1, #8]
 80026b6:	690b      	ldr	r3, [r1, #16]
 80026b8:	4606      	mov	r6, r0
 80026ba:	4293      	cmp	r3, r2
 80026bc:	bfb8      	it	lt
 80026be:	4613      	movlt	r3, r2
 80026c0:	f8c9 3000 	str.w	r3, [r9]
 80026c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80026c8:	460c      	mov	r4, r1
 80026ca:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80026ce:	b112      	cbz	r2, 80026d6 <_printf_common+0x2a>
 80026d0:	3301      	adds	r3, #1
 80026d2:	f8c9 3000 	str.w	r3, [r9]
 80026d6:	6823      	ldr	r3, [r4, #0]
 80026d8:	0699      	lsls	r1, r3, #26
 80026da:	bf42      	ittt	mi
 80026dc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80026e0:	3302      	addmi	r3, #2
 80026e2:	f8c9 3000 	strmi.w	r3, [r9]
 80026e6:	6825      	ldr	r5, [r4, #0]
 80026e8:	f015 0506 	ands.w	r5, r5, #6
 80026ec:	d107      	bne.n	80026fe <_printf_common+0x52>
 80026ee:	f104 0a19 	add.w	sl, r4, #25
 80026f2:	68e3      	ldr	r3, [r4, #12]
 80026f4:	f8d9 2000 	ldr.w	r2, [r9]
 80026f8:	1a9b      	subs	r3, r3, r2
 80026fa:	42ab      	cmp	r3, r5
 80026fc:	dc29      	bgt.n	8002752 <_printf_common+0xa6>
 80026fe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002702:	6822      	ldr	r2, [r4, #0]
 8002704:	3300      	adds	r3, #0
 8002706:	bf18      	it	ne
 8002708:	2301      	movne	r3, #1
 800270a:	0692      	lsls	r2, r2, #26
 800270c:	d42e      	bmi.n	800276c <_printf_common+0xc0>
 800270e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002712:	4639      	mov	r1, r7
 8002714:	4630      	mov	r0, r6
 8002716:	47c0      	blx	r8
 8002718:	3001      	adds	r0, #1
 800271a:	d021      	beq.n	8002760 <_printf_common+0xb4>
 800271c:	6823      	ldr	r3, [r4, #0]
 800271e:	68e5      	ldr	r5, [r4, #12]
 8002720:	f003 0306 	and.w	r3, r3, #6
 8002724:	2b04      	cmp	r3, #4
 8002726:	bf18      	it	ne
 8002728:	2500      	movne	r5, #0
 800272a:	f8d9 2000 	ldr.w	r2, [r9]
 800272e:	f04f 0900 	mov.w	r9, #0
 8002732:	bf08      	it	eq
 8002734:	1aad      	subeq	r5, r5, r2
 8002736:	68a3      	ldr	r3, [r4, #8]
 8002738:	6922      	ldr	r2, [r4, #16]
 800273a:	bf08      	it	eq
 800273c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002740:	4293      	cmp	r3, r2
 8002742:	bfc4      	itt	gt
 8002744:	1a9b      	subgt	r3, r3, r2
 8002746:	18ed      	addgt	r5, r5, r3
 8002748:	341a      	adds	r4, #26
 800274a:	454d      	cmp	r5, r9
 800274c:	d11a      	bne.n	8002784 <_printf_common+0xd8>
 800274e:	2000      	movs	r0, #0
 8002750:	e008      	b.n	8002764 <_printf_common+0xb8>
 8002752:	2301      	movs	r3, #1
 8002754:	4652      	mov	r2, sl
 8002756:	4639      	mov	r1, r7
 8002758:	4630      	mov	r0, r6
 800275a:	47c0      	blx	r8
 800275c:	3001      	adds	r0, #1
 800275e:	d103      	bne.n	8002768 <_printf_common+0xbc>
 8002760:	f04f 30ff 	mov.w	r0, #4294967295
 8002764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002768:	3501      	adds	r5, #1
 800276a:	e7c2      	b.n	80026f2 <_printf_common+0x46>
 800276c:	2030      	movs	r0, #48	; 0x30
 800276e:	18e1      	adds	r1, r4, r3
 8002770:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002774:	1c5a      	adds	r2, r3, #1
 8002776:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800277a:	4422      	add	r2, r4
 800277c:	3302      	adds	r3, #2
 800277e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002782:	e7c4      	b.n	800270e <_printf_common+0x62>
 8002784:	2301      	movs	r3, #1
 8002786:	4622      	mov	r2, r4
 8002788:	4639      	mov	r1, r7
 800278a:	4630      	mov	r0, r6
 800278c:	47c0      	blx	r8
 800278e:	3001      	adds	r0, #1
 8002790:	d0e6      	beq.n	8002760 <_printf_common+0xb4>
 8002792:	f109 0901 	add.w	r9, r9, #1
 8002796:	e7d8      	b.n	800274a <_printf_common+0x9e>

08002798 <_printf_i>:
 8002798:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800279c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80027a0:	460c      	mov	r4, r1
 80027a2:	7e09      	ldrb	r1, [r1, #24]
 80027a4:	b085      	sub	sp, #20
 80027a6:	296e      	cmp	r1, #110	; 0x6e
 80027a8:	4617      	mov	r7, r2
 80027aa:	4606      	mov	r6, r0
 80027ac:	4698      	mov	r8, r3
 80027ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80027b0:	f000 80b3 	beq.w	800291a <_printf_i+0x182>
 80027b4:	d822      	bhi.n	80027fc <_printf_i+0x64>
 80027b6:	2963      	cmp	r1, #99	; 0x63
 80027b8:	d036      	beq.n	8002828 <_printf_i+0x90>
 80027ba:	d80a      	bhi.n	80027d2 <_printf_i+0x3a>
 80027bc:	2900      	cmp	r1, #0
 80027be:	f000 80b9 	beq.w	8002934 <_printf_i+0x19c>
 80027c2:	2958      	cmp	r1, #88	; 0x58
 80027c4:	f000 8083 	beq.w	80028ce <_printf_i+0x136>
 80027c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80027cc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80027d0:	e032      	b.n	8002838 <_printf_i+0xa0>
 80027d2:	2964      	cmp	r1, #100	; 0x64
 80027d4:	d001      	beq.n	80027da <_printf_i+0x42>
 80027d6:	2969      	cmp	r1, #105	; 0x69
 80027d8:	d1f6      	bne.n	80027c8 <_printf_i+0x30>
 80027da:	6820      	ldr	r0, [r4, #0]
 80027dc:	6813      	ldr	r3, [r2, #0]
 80027de:	0605      	lsls	r5, r0, #24
 80027e0:	f103 0104 	add.w	r1, r3, #4
 80027e4:	d52a      	bpl.n	800283c <_printf_i+0xa4>
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6011      	str	r1, [r2, #0]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	da03      	bge.n	80027f6 <_printf_i+0x5e>
 80027ee:	222d      	movs	r2, #45	; 0x2d
 80027f0:	425b      	negs	r3, r3
 80027f2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80027f6:	486f      	ldr	r0, [pc, #444]	; (80029b4 <_printf_i+0x21c>)
 80027f8:	220a      	movs	r2, #10
 80027fa:	e039      	b.n	8002870 <_printf_i+0xd8>
 80027fc:	2973      	cmp	r1, #115	; 0x73
 80027fe:	f000 809d 	beq.w	800293c <_printf_i+0x1a4>
 8002802:	d808      	bhi.n	8002816 <_printf_i+0x7e>
 8002804:	296f      	cmp	r1, #111	; 0x6f
 8002806:	d020      	beq.n	800284a <_printf_i+0xb2>
 8002808:	2970      	cmp	r1, #112	; 0x70
 800280a:	d1dd      	bne.n	80027c8 <_printf_i+0x30>
 800280c:	6823      	ldr	r3, [r4, #0]
 800280e:	f043 0320 	orr.w	r3, r3, #32
 8002812:	6023      	str	r3, [r4, #0]
 8002814:	e003      	b.n	800281e <_printf_i+0x86>
 8002816:	2975      	cmp	r1, #117	; 0x75
 8002818:	d017      	beq.n	800284a <_printf_i+0xb2>
 800281a:	2978      	cmp	r1, #120	; 0x78
 800281c:	d1d4      	bne.n	80027c8 <_printf_i+0x30>
 800281e:	2378      	movs	r3, #120	; 0x78
 8002820:	4865      	ldr	r0, [pc, #404]	; (80029b8 <_printf_i+0x220>)
 8002822:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002826:	e055      	b.n	80028d4 <_printf_i+0x13c>
 8002828:	6813      	ldr	r3, [r2, #0]
 800282a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800282e:	1d19      	adds	r1, r3, #4
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6011      	str	r1, [r2, #0]
 8002834:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002838:	2301      	movs	r3, #1
 800283a:	e08c      	b.n	8002956 <_printf_i+0x1be>
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002842:	6011      	str	r1, [r2, #0]
 8002844:	bf18      	it	ne
 8002846:	b21b      	sxthne	r3, r3
 8002848:	e7cf      	b.n	80027ea <_printf_i+0x52>
 800284a:	6813      	ldr	r3, [r2, #0]
 800284c:	6825      	ldr	r5, [r4, #0]
 800284e:	1d18      	adds	r0, r3, #4
 8002850:	6010      	str	r0, [r2, #0]
 8002852:	0628      	lsls	r0, r5, #24
 8002854:	d501      	bpl.n	800285a <_printf_i+0xc2>
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	e002      	b.n	8002860 <_printf_i+0xc8>
 800285a:	0668      	lsls	r0, r5, #25
 800285c:	d5fb      	bpl.n	8002856 <_printf_i+0xbe>
 800285e:	881b      	ldrh	r3, [r3, #0]
 8002860:	296f      	cmp	r1, #111	; 0x6f
 8002862:	bf14      	ite	ne
 8002864:	220a      	movne	r2, #10
 8002866:	2208      	moveq	r2, #8
 8002868:	4852      	ldr	r0, [pc, #328]	; (80029b4 <_printf_i+0x21c>)
 800286a:	2100      	movs	r1, #0
 800286c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002870:	6865      	ldr	r5, [r4, #4]
 8002872:	2d00      	cmp	r5, #0
 8002874:	60a5      	str	r5, [r4, #8]
 8002876:	f2c0 8095 	blt.w	80029a4 <_printf_i+0x20c>
 800287a:	6821      	ldr	r1, [r4, #0]
 800287c:	f021 0104 	bic.w	r1, r1, #4
 8002880:	6021      	str	r1, [r4, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d13d      	bne.n	8002902 <_printf_i+0x16a>
 8002886:	2d00      	cmp	r5, #0
 8002888:	f040 808e 	bne.w	80029a8 <_printf_i+0x210>
 800288c:	4665      	mov	r5, ip
 800288e:	2a08      	cmp	r2, #8
 8002890:	d10b      	bne.n	80028aa <_printf_i+0x112>
 8002892:	6823      	ldr	r3, [r4, #0]
 8002894:	07db      	lsls	r3, r3, #31
 8002896:	d508      	bpl.n	80028aa <_printf_i+0x112>
 8002898:	6923      	ldr	r3, [r4, #16]
 800289a:	6862      	ldr	r2, [r4, #4]
 800289c:	429a      	cmp	r2, r3
 800289e:	bfde      	ittt	le
 80028a0:	2330      	movle	r3, #48	; 0x30
 80028a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80028a6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80028aa:	ebac 0305 	sub.w	r3, ip, r5
 80028ae:	6123      	str	r3, [r4, #16]
 80028b0:	f8cd 8000 	str.w	r8, [sp]
 80028b4:	463b      	mov	r3, r7
 80028b6:	aa03      	add	r2, sp, #12
 80028b8:	4621      	mov	r1, r4
 80028ba:	4630      	mov	r0, r6
 80028bc:	f7ff fef6 	bl	80026ac <_printf_common>
 80028c0:	3001      	adds	r0, #1
 80028c2:	d14d      	bne.n	8002960 <_printf_i+0x1c8>
 80028c4:	f04f 30ff 	mov.w	r0, #4294967295
 80028c8:	b005      	add	sp, #20
 80028ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80028ce:	4839      	ldr	r0, [pc, #228]	; (80029b4 <_printf_i+0x21c>)
 80028d0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80028d4:	6813      	ldr	r3, [r2, #0]
 80028d6:	6821      	ldr	r1, [r4, #0]
 80028d8:	1d1d      	adds	r5, r3, #4
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6015      	str	r5, [r2, #0]
 80028de:	060a      	lsls	r2, r1, #24
 80028e0:	d50b      	bpl.n	80028fa <_printf_i+0x162>
 80028e2:	07ca      	lsls	r2, r1, #31
 80028e4:	bf44      	itt	mi
 80028e6:	f041 0120 	orrmi.w	r1, r1, #32
 80028ea:	6021      	strmi	r1, [r4, #0]
 80028ec:	b91b      	cbnz	r3, 80028f6 <_printf_i+0x15e>
 80028ee:	6822      	ldr	r2, [r4, #0]
 80028f0:	f022 0220 	bic.w	r2, r2, #32
 80028f4:	6022      	str	r2, [r4, #0]
 80028f6:	2210      	movs	r2, #16
 80028f8:	e7b7      	b.n	800286a <_printf_i+0xd2>
 80028fa:	064d      	lsls	r5, r1, #25
 80028fc:	bf48      	it	mi
 80028fe:	b29b      	uxthmi	r3, r3
 8002900:	e7ef      	b.n	80028e2 <_printf_i+0x14a>
 8002902:	4665      	mov	r5, ip
 8002904:	fbb3 f1f2 	udiv	r1, r3, r2
 8002908:	fb02 3311 	mls	r3, r2, r1, r3
 800290c:	5cc3      	ldrb	r3, [r0, r3]
 800290e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002912:	460b      	mov	r3, r1
 8002914:	2900      	cmp	r1, #0
 8002916:	d1f5      	bne.n	8002904 <_printf_i+0x16c>
 8002918:	e7b9      	b.n	800288e <_printf_i+0xf6>
 800291a:	6813      	ldr	r3, [r2, #0]
 800291c:	6825      	ldr	r5, [r4, #0]
 800291e:	1d18      	adds	r0, r3, #4
 8002920:	6961      	ldr	r1, [r4, #20]
 8002922:	6010      	str	r0, [r2, #0]
 8002924:	0628      	lsls	r0, r5, #24
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	d501      	bpl.n	800292e <_printf_i+0x196>
 800292a:	6019      	str	r1, [r3, #0]
 800292c:	e002      	b.n	8002934 <_printf_i+0x19c>
 800292e:	066a      	lsls	r2, r5, #25
 8002930:	d5fb      	bpl.n	800292a <_printf_i+0x192>
 8002932:	8019      	strh	r1, [r3, #0]
 8002934:	2300      	movs	r3, #0
 8002936:	4665      	mov	r5, ip
 8002938:	6123      	str	r3, [r4, #16]
 800293a:	e7b9      	b.n	80028b0 <_printf_i+0x118>
 800293c:	6813      	ldr	r3, [r2, #0]
 800293e:	1d19      	adds	r1, r3, #4
 8002940:	6011      	str	r1, [r2, #0]
 8002942:	681d      	ldr	r5, [r3, #0]
 8002944:	6862      	ldr	r2, [r4, #4]
 8002946:	2100      	movs	r1, #0
 8002948:	4628      	mov	r0, r5
 800294a:	f000 f837 	bl	80029bc <memchr>
 800294e:	b108      	cbz	r0, 8002954 <_printf_i+0x1bc>
 8002950:	1b40      	subs	r0, r0, r5
 8002952:	6060      	str	r0, [r4, #4]
 8002954:	6863      	ldr	r3, [r4, #4]
 8002956:	6123      	str	r3, [r4, #16]
 8002958:	2300      	movs	r3, #0
 800295a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800295e:	e7a7      	b.n	80028b0 <_printf_i+0x118>
 8002960:	6923      	ldr	r3, [r4, #16]
 8002962:	462a      	mov	r2, r5
 8002964:	4639      	mov	r1, r7
 8002966:	4630      	mov	r0, r6
 8002968:	47c0      	blx	r8
 800296a:	3001      	adds	r0, #1
 800296c:	d0aa      	beq.n	80028c4 <_printf_i+0x12c>
 800296e:	6823      	ldr	r3, [r4, #0]
 8002970:	079b      	lsls	r3, r3, #30
 8002972:	d413      	bmi.n	800299c <_printf_i+0x204>
 8002974:	68e0      	ldr	r0, [r4, #12]
 8002976:	9b03      	ldr	r3, [sp, #12]
 8002978:	4298      	cmp	r0, r3
 800297a:	bfb8      	it	lt
 800297c:	4618      	movlt	r0, r3
 800297e:	e7a3      	b.n	80028c8 <_printf_i+0x130>
 8002980:	2301      	movs	r3, #1
 8002982:	464a      	mov	r2, r9
 8002984:	4639      	mov	r1, r7
 8002986:	4630      	mov	r0, r6
 8002988:	47c0      	blx	r8
 800298a:	3001      	adds	r0, #1
 800298c:	d09a      	beq.n	80028c4 <_printf_i+0x12c>
 800298e:	3501      	adds	r5, #1
 8002990:	68e3      	ldr	r3, [r4, #12]
 8002992:	9a03      	ldr	r2, [sp, #12]
 8002994:	1a9b      	subs	r3, r3, r2
 8002996:	42ab      	cmp	r3, r5
 8002998:	dcf2      	bgt.n	8002980 <_printf_i+0x1e8>
 800299a:	e7eb      	b.n	8002974 <_printf_i+0x1dc>
 800299c:	2500      	movs	r5, #0
 800299e:	f104 0919 	add.w	r9, r4, #25
 80029a2:	e7f5      	b.n	8002990 <_printf_i+0x1f8>
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1ac      	bne.n	8002902 <_printf_i+0x16a>
 80029a8:	7803      	ldrb	r3, [r0, #0]
 80029aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80029ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80029b2:	e76c      	b.n	800288e <_printf_i+0xf6>
 80029b4:	08002c61 	.word	0x08002c61
 80029b8:	08002c72 	.word	0x08002c72

080029bc <memchr>:
 80029bc:	b510      	push	{r4, lr}
 80029be:	b2c9      	uxtb	r1, r1
 80029c0:	4402      	add	r2, r0
 80029c2:	4290      	cmp	r0, r2
 80029c4:	4603      	mov	r3, r0
 80029c6:	d101      	bne.n	80029cc <memchr+0x10>
 80029c8:	2300      	movs	r3, #0
 80029ca:	e003      	b.n	80029d4 <memchr+0x18>
 80029cc:	781c      	ldrb	r4, [r3, #0]
 80029ce:	3001      	adds	r0, #1
 80029d0:	428c      	cmp	r4, r1
 80029d2:	d1f6      	bne.n	80029c2 <memchr+0x6>
 80029d4:	4618      	mov	r0, r3
 80029d6:	bd10      	pop	{r4, pc}

080029d8 <memcpy>:
 80029d8:	b510      	push	{r4, lr}
 80029da:	1e43      	subs	r3, r0, #1
 80029dc:	440a      	add	r2, r1
 80029de:	4291      	cmp	r1, r2
 80029e0:	d100      	bne.n	80029e4 <memcpy+0xc>
 80029e2:	bd10      	pop	{r4, pc}
 80029e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80029e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80029ec:	e7f7      	b.n	80029de <memcpy+0x6>

080029ee <memmove>:
 80029ee:	4288      	cmp	r0, r1
 80029f0:	b510      	push	{r4, lr}
 80029f2:	eb01 0302 	add.w	r3, r1, r2
 80029f6:	d807      	bhi.n	8002a08 <memmove+0x1a>
 80029f8:	1e42      	subs	r2, r0, #1
 80029fa:	4299      	cmp	r1, r3
 80029fc:	d00a      	beq.n	8002a14 <memmove+0x26>
 80029fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a02:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002a06:	e7f8      	b.n	80029fa <memmove+0xc>
 8002a08:	4283      	cmp	r3, r0
 8002a0a:	d9f5      	bls.n	80029f8 <memmove+0xa>
 8002a0c:	1881      	adds	r1, r0, r2
 8002a0e:	1ad2      	subs	r2, r2, r3
 8002a10:	42d3      	cmn	r3, r2
 8002a12:	d100      	bne.n	8002a16 <memmove+0x28>
 8002a14:	bd10      	pop	{r4, pc}
 8002a16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002a1a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002a1e:	e7f7      	b.n	8002a10 <memmove+0x22>

08002a20 <_free_r>:
 8002a20:	b538      	push	{r3, r4, r5, lr}
 8002a22:	4605      	mov	r5, r0
 8002a24:	2900      	cmp	r1, #0
 8002a26:	d043      	beq.n	8002ab0 <_free_r+0x90>
 8002a28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a2c:	1f0c      	subs	r4, r1, #4
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	bfb8      	it	lt
 8002a32:	18e4      	addlt	r4, r4, r3
 8002a34:	f000 f8d0 	bl	8002bd8 <__malloc_lock>
 8002a38:	4a1e      	ldr	r2, [pc, #120]	; (8002ab4 <_free_r+0x94>)
 8002a3a:	6813      	ldr	r3, [r2, #0]
 8002a3c:	4610      	mov	r0, r2
 8002a3e:	b933      	cbnz	r3, 8002a4e <_free_r+0x2e>
 8002a40:	6063      	str	r3, [r4, #4]
 8002a42:	6014      	str	r4, [r2, #0]
 8002a44:	4628      	mov	r0, r5
 8002a46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a4a:	f000 b8c6 	b.w	8002bda <__malloc_unlock>
 8002a4e:	42a3      	cmp	r3, r4
 8002a50:	d90b      	bls.n	8002a6a <_free_r+0x4a>
 8002a52:	6821      	ldr	r1, [r4, #0]
 8002a54:	1862      	adds	r2, r4, r1
 8002a56:	4293      	cmp	r3, r2
 8002a58:	bf01      	itttt	eq
 8002a5a:	681a      	ldreq	r2, [r3, #0]
 8002a5c:	685b      	ldreq	r3, [r3, #4]
 8002a5e:	1852      	addeq	r2, r2, r1
 8002a60:	6022      	streq	r2, [r4, #0]
 8002a62:	6063      	str	r3, [r4, #4]
 8002a64:	6004      	str	r4, [r0, #0]
 8002a66:	e7ed      	b.n	8002a44 <_free_r+0x24>
 8002a68:	4613      	mov	r3, r2
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	b10a      	cbz	r2, 8002a72 <_free_r+0x52>
 8002a6e:	42a2      	cmp	r2, r4
 8002a70:	d9fa      	bls.n	8002a68 <_free_r+0x48>
 8002a72:	6819      	ldr	r1, [r3, #0]
 8002a74:	1858      	adds	r0, r3, r1
 8002a76:	42a0      	cmp	r0, r4
 8002a78:	d10b      	bne.n	8002a92 <_free_r+0x72>
 8002a7a:	6820      	ldr	r0, [r4, #0]
 8002a7c:	4401      	add	r1, r0
 8002a7e:	1858      	adds	r0, r3, r1
 8002a80:	4282      	cmp	r2, r0
 8002a82:	6019      	str	r1, [r3, #0]
 8002a84:	d1de      	bne.n	8002a44 <_free_r+0x24>
 8002a86:	6810      	ldr	r0, [r2, #0]
 8002a88:	6852      	ldr	r2, [r2, #4]
 8002a8a:	4401      	add	r1, r0
 8002a8c:	6019      	str	r1, [r3, #0]
 8002a8e:	605a      	str	r2, [r3, #4]
 8002a90:	e7d8      	b.n	8002a44 <_free_r+0x24>
 8002a92:	d902      	bls.n	8002a9a <_free_r+0x7a>
 8002a94:	230c      	movs	r3, #12
 8002a96:	602b      	str	r3, [r5, #0]
 8002a98:	e7d4      	b.n	8002a44 <_free_r+0x24>
 8002a9a:	6820      	ldr	r0, [r4, #0]
 8002a9c:	1821      	adds	r1, r4, r0
 8002a9e:	428a      	cmp	r2, r1
 8002aa0:	bf01      	itttt	eq
 8002aa2:	6811      	ldreq	r1, [r2, #0]
 8002aa4:	6852      	ldreq	r2, [r2, #4]
 8002aa6:	1809      	addeq	r1, r1, r0
 8002aa8:	6021      	streq	r1, [r4, #0]
 8002aaa:	6062      	str	r2, [r4, #4]
 8002aac:	605c      	str	r4, [r3, #4]
 8002aae:	e7c9      	b.n	8002a44 <_free_r+0x24>
 8002ab0:	bd38      	pop	{r3, r4, r5, pc}
 8002ab2:	bf00      	nop
 8002ab4:	20000090 	.word	0x20000090

08002ab8 <_malloc_r>:
 8002ab8:	b570      	push	{r4, r5, r6, lr}
 8002aba:	1ccd      	adds	r5, r1, #3
 8002abc:	f025 0503 	bic.w	r5, r5, #3
 8002ac0:	3508      	adds	r5, #8
 8002ac2:	2d0c      	cmp	r5, #12
 8002ac4:	bf38      	it	cc
 8002ac6:	250c      	movcc	r5, #12
 8002ac8:	2d00      	cmp	r5, #0
 8002aca:	4606      	mov	r6, r0
 8002acc:	db01      	blt.n	8002ad2 <_malloc_r+0x1a>
 8002ace:	42a9      	cmp	r1, r5
 8002ad0:	d903      	bls.n	8002ada <_malloc_r+0x22>
 8002ad2:	230c      	movs	r3, #12
 8002ad4:	6033      	str	r3, [r6, #0]
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	bd70      	pop	{r4, r5, r6, pc}
 8002ada:	f000 f87d 	bl	8002bd8 <__malloc_lock>
 8002ade:	4a21      	ldr	r2, [pc, #132]	; (8002b64 <_malloc_r+0xac>)
 8002ae0:	6814      	ldr	r4, [r2, #0]
 8002ae2:	4621      	mov	r1, r4
 8002ae4:	b991      	cbnz	r1, 8002b0c <_malloc_r+0x54>
 8002ae6:	4c20      	ldr	r4, [pc, #128]	; (8002b68 <_malloc_r+0xb0>)
 8002ae8:	6823      	ldr	r3, [r4, #0]
 8002aea:	b91b      	cbnz	r3, 8002af4 <_malloc_r+0x3c>
 8002aec:	4630      	mov	r0, r6
 8002aee:	f000 f863 	bl	8002bb8 <_sbrk_r>
 8002af2:	6020      	str	r0, [r4, #0]
 8002af4:	4629      	mov	r1, r5
 8002af6:	4630      	mov	r0, r6
 8002af8:	f000 f85e 	bl	8002bb8 <_sbrk_r>
 8002afc:	1c43      	adds	r3, r0, #1
 8002afe:	d124      	bne.n	8002b4a <_malloc_r+0x92>
 8002b00:	230c      	movs	r3, #12
 8002b02:	4630      	mov	r0, r6
 8002b04:	6033      	str	r3, [r6, #0]
 8002b06:	f000 f868 	bl	8002bda <__malloc_unlock>
 8002b0a:	e7e4      	b.n	8002ad6 <_malloc_r+0x1e>
 8002b0c:	680b      	ldr	r3, [r1, #0]
 8002b0e:	1b5b      	subs	r3, r3, r5
 8002b10:	d418      	bmi.n	8002b44 <_malloc_r+0x8c>
 8002b12:	2b0b      	cmp	r3, #11
 8002b14:	d90f      	bls.n	8002b36 <_malloc_r+0x7e>
 8002b16:	600b      	str	r3, [r1, #0]
 8002b18:	18cc      	adds	r4, r1, r3
 8002b1a:	50cd      	str	r5, [r1, r3]
 8002b1c:	4630      	mov	r0, r6
 8002b1e:	f000 f85c 	bl	8002bda <__malloc_unlock>
 8002b22:	f104 000b 	add.w	r0, r4, #11
 8002b26:	1d23      	adds	r3, r4, #4
 8002b28:	f020 0007 	bic.w	r0, r0, #7
 8002b2c:	1ac3      	subs	r3, r0, r3
 8002b2e:	d0d3      	beq.n	8002ad8 <_malloc_r+0x20>
 8002b30:	425a      	negs	r2, r3
 8002b32:	50e2      	str	r2, [r4, r3]
 8002b34:	e7d0      	b.n	8002ad8 <_malloc_r+0x20>
 8002b36:	684b      	ldr	r3, [r1, #4]
 8002b38:	428c      	cmp	r4, r1
 8002b3a:	bf16      	itet	ne
 8002b3c:	6063      	strne	r3, [r4, #4]
 8002b3e:	6013      	streq	r3, [r2, #0]
 8002b40:	460c      	movne	r4, r1
 8002b42:	e7eb      	b.n	8002b1c <_malloc_r+0x64>
 8002b44:	460c      	mov	r4, r1
 8002b46:	6849      	ldr	r1, [r1, #4]
 8002b48:	e7cc      	b.n	8002ae4 <_malloc_r+0x2c>
 8002b4a:	1cc4      	adds	r4, r0, #3
 8002b4c:	f024 0403 	bic.w	r4, r4, #3
 8002b50:	42a0      	cmp	r0, r4
 8002b52:	d005      	beq.n	8002b60 <_malloc_r+0xa8>
 8002b54:	1a21      	subs	r1, r4, r0
 8002b56:	4630      	mov	r0, r6
 8002b58:	f000 f82e 	bl	8002bb8 <_sbrk_r>
 8002b5c:	3001      	adds	r0, #1
 8002b5e:	d0cf      	beq.n	8002b00 <_malloc_r+0x48>
 8002b60:	6025      	str	r5, [r4, #0]
 8002b62:	e7db      	b.n	8002b1c <_malloc_r+0x64>
 8002b64:	20000090 	.word	0x20000090
 8002b68:	20000094 	.word	0x20000094

08002b6c <_realloc_r>:
 8002b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b6e:	4607      	mov	r7, r0
 8002b70:	4614      	mov	r4, r2
 8002b72:	460e      	mov	r6, r1
 8002b74:	b921      	cbnz	r1, 8002b80 <_realloc_r+0x14>
 8002b76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002b7a:	4611      	mov	r1, r2
 8002b7c:	f7ff bf9c 	b.w	8002ab8 <_malloc_r>
 8002b80:	b922      	cbnz	r2, 8002b8c <_realloc_r+0x20>
 8002b82:	f7ff ff4d 	bl	8002a20 <_free_r>
 8002b86:	4625      	mov	r5, r4
 8002b88:	4628      	mov	r0, r5
 8002b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b8c:	f000 f826 	bl	8002bdc <_malloc_usable_size_r>
 8002b90:	42a0      	cmp	r0, r4
 8002b92:	d20f      	bcs.n	8002bb4 <_realloc_r+0x48>
 8002b94:	4621      	mov	r1, r4
 8002b96:	4638      	mov	r0, r7
 8002b98:	f7ff ff8e 	bl	8002ab8 <_malloc_r>
 8002b9c:	4605      	mov	r5, r0
 8002b9e:	2800      	cmp	r0, #0
 8002ba0:	d0f2      	beq.n	8002b88 <_realloc_r+0x1c>
 8002ba2:	4631      	mov	r1, r6
 8002ba4:	4622      	mov	r2, r4
 8002ba6:	f7ff ff17 	bl	80029d8 <memcpy>
 8002baa:	4631      	mov	r1, r6
 8002bac:	4638      	mov	r0, r7
 8002bae:	f7ff ff37 	bl	8002a20 <_free_r>
 8002bb2:	e7e9      	b.n	8002b88 <_realloc_r+0x1c>
 8002bb4:	4635      	mov	r5, r6
 8002bb6:	e7e7      	b.n	8002b88 <_realloc_r+0x1c>

08002bb8 <_sbrk_r>:
 8002bb8:	b538      	push	{r3, r4, r5, lr}
 8002bba:	2300      	movs	r3, #0
 8002bbc:	4c05      	ldr	r4, [pc, #20]	; (8002bd4 <_sbrk_r+0x1c>)
 8002bbe:	4605      	mov	r5, r0
 8002bc0:	4608      	mov	r0, r1
 8002bc2:	6023      	str	r3, [r4, #0]
 8002bc4:	f7fd fce8 	bl	8000598 <_sbrk>
 8002bc8:	1c43      	adds	r3, r0, #1
 8002bca:	d102      	bne.n	8002bd2 <_sbrk_r+0x1a>
 8002bcc:	6823      	ldr	r3, [r4, #0]
 8002bce:	b103      	cbz	r3, 8002bd2 <_sbrk_r+0x1a>
 8002bd0:	602b      	str	r3, [r5, #0]
 8002bd2:	bd38      	pop	{r3, r4, r5, pc}
 8002bd4:	2000010c 	.word	0x2000010c

08002bd8 <__malloc_lock>:
 8002bd8:	4770      	bx	lr

08002bda <__malloc_unlock>:
 8002bda:	4770      	bx	lr

08002bdc <_malloc_usable_size_r>:
 8002bdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002be0:	1f18      	subs	r0, r3, #4
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	bfbc      	itt	lt
 8002be6:	580b      	ldrlt	r3, [r1, r0]
 8002be8:	18c0      	addlt	r0, r0, r3
 8002bea:	4770      	bx	lr

08002bec <_init>:
 8002bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bee:	bf00      	nop
 8002bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bf2:	bc08      	pop	{r3}
 8002bf4:	469e      	mov	lr, r3
 8002bf6:	4770      	bx	lr

08002bf8 <_fini>:
 8002bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bfa:	bf00      	nop
 8002bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bfe:	bc08      	pop	{r3}
 8002c00:	469e      	mov	lr, r3
 8002c02:	4770      	bx	lr
