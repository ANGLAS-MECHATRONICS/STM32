
PRINTF SPRINTF USART1 BOOL BIEN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029e0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08002aec  08002aec  00012aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bd8  08002bd8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002bd8  08002bd8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bd8  08002bd8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bd8  08002bd8  00012bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bdc  08002bdc  00012bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002be0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000070  08002c50  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08002c50  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006b0c  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000151b  00000000  00000000  00026ba5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000688  00000000  00000000  000280c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005d0  00000000  00000000  00028748  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014a67  00000000  00000000  00028d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000058d5  00000000  00000000  0003d77f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006c335  00000000  00000000  00043054  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000af389  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002194  00000000  00000000  000af404  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ad4 	.word	0x08002ad4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002ad4 	.word	0x08002ad4

0800014c <_write>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
//FUNCION PARA QUE EL PRINTF IMPRIMA VIA USART
int _write(int file, char *data, int len){
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]

	if ((file != STDOUT_FILENO) && (file != STDERR_FILENO)) {
 8000158:	68fb      	ldr	r3, [r7, #12]
 800015a:	2b01      	cmp	r3, #1
 800015c:	d00a      	beq.n	8000174 <_write+0x28>
 800015e:	68fb      	ldr	r3, [r7, #12]
 8000160:	2b02      	cmp	r3, #2
 8000162:	d007      	beq.n	8000174 <_write+0x28>
		errno = EBADF; return -1; }
 8000164:	f001 fbd2 	bl	800190c <__errno>
 8000168:	4602      	mov	r2, r0
 800016a:	2309      	movs	r3, #9
 800016c:	6013      	str	r3, [r2, #0]
 800016e:	f04f 33ff 	mov.w	r3, #4294967295
 8000172:	e00f      	b.n	8000194 <_write+0x48>

	// arbitrary timeout 1000
	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, (uint8_t*)data, len, 1000);
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	b29a      	uxth	r2, r3
 8000178:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800017c:	68b9      	ldr	r1, [r7, #8]
 800017e:	4807      	ldr	r0, [pc, #28]	; (800019c <_write+0x50>)
 8000180:	f001 fa07 	bl	8001592 <HAL_UART_Transmit>
 8000184:	4603      	mov	r3, r0
 8000186:	75fb      	strb	r3, [r7, #23]
	// return # of bytes written - as best we can tell
	return (status == HAL_OK ? len : 0);
 8000188:	7dfb      	ldrb	r3, [r7, #23]
 800018a:	2b00      	cmp	r3, #0
 800018c:	d101      	bne.n	8000192 <_write+0x46>
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	e000      	b.n	8000194 <_write+0x48>
 8000192:	2300      	movs	r3, #0
}
 8000194:	4618      	mov	r0, r3
 8000196:	3718      	adds	r7, #24
 8000198:	46bd      	mov	sp, r7
 800019a:	bd80      	pop	{r7, pc}
 800019c:	2000009c 	.word	0x2000009c

080001a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001a4:	f000 fa82 	bl	80006ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001a8:	f000 f84e 	bl	8000248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ac:	f000 f8b2 	bl	8000314 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001b0:	f000 f886 	bl	80002c0 <MX_USART1_UART_Init>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Hola Mundo");
 80001b4:	481c      	ldr	r0, [pc, #112]	; (8000228 <main+0x88>)
 80001b6:	f001 fbdb 	bl	8001970 <iprintf>

  while (1)
  {


	  estado = HAL_GPIO_ReadPin(boton1_GPIO_Port, boton1_Pin);
 80001ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001be:	481b      	ldr	r0, [pc, #108]	; (800022c <main+0x8c>)
 80001c0:	f000 fd36 	bl	8000c30 <HAL_GPIO_ReadPin>
 80001c4:	4603      	mov	r3, r0
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	bf14      	ite	ne
 80001ca:	2301      	movne	r3, #1
 80001cc:	2300      	moveq	r3, #0
 80001ce:	b2da      	uxtb	r2, r3
 80001d0:	4b17      	ldr	r3, [pc, #92]	; (8000230 <main+0x90>)
 80001d2:	701a      	strb	r2, [r3, #0]
	  if(estado == 0){
 80001d4:	4b16      	ldr	r3, [pc, #88]	; (8000230 <main+0x90>)
 80001d6:	781b      	ldrb	r3, [r3, #0]
 80001d8:	f083 0301 	eor.w	r3, r3, #1
 80001dc:	b2db      	uxtb	r3, r3
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d00c      	beq.n	80001fc <main+0x5c>
          cont++;
 80001e2:	4b14      	ldr	r3, [pc, #80]	; (8000234 <main+0x94>)
 80001e4:	781b      	ldrb	r3, [r3, #0]
 80001e6:	3301      	adds	r3, #1
 80001e8:	b2da      	uxtb	r2, r3
 80001ea:	4b12      	ldr	r3, [pc, #72]	; (8000234 <main+0x94>)
 80001ec:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(150);
 80001ee:	2096      	movs	r0, #150	; 0x96
 80001f0:	f000 fabe 	bl	8000770 <HAL_Delay>
		  HAL_GPIO_TogglePin(led1_GPIO_Port, led1_Pin);}
 80001f4:	2140      	movs	r1, #64	; 0x40
 80001f6:	480d      	ldr	r0, [pc, #52]	; (800022c <main+0x8c>)
 80001f8:	f000 fd49 	bl	8000c8e <HAL_GPIO_TogglePin>

	  stringSize=sprintf(buffer,"ESTADO: %u CONTADOR: %u\r\n",estado,cont); //forma correcta sin warnings
 80001fc:	4b0c      	ldr	r3, [pc, #48]	; (8000230 <main+0x90>)
 80001fe:	781b      	ldrb	r3, [r3, #0]
 8000200:	461a      	mov	r2, r3
 8000202:	4b0c      	ldr	r3, [pc, #48]	; (8000234 <main+0x94>)
 8000204:	781b      	ldrb	r3, [r3, #0]
 8000206:	490c      	ldr	r1, [pc, #48]	; (8000238 <main+0x98>)
 8000208:	480c      	ldr	r0, [pc, #48]	; (800023c <main+0x9c>)
 800020a:	f001 fbc9 	bl	80019a0 <siprintf>
 800020e:	4603      	mov	r3, r0
 8000210:	b2da      	uxtb	r2, r3
 8000212:	4b0b      	ldr	r3, [pc, #44]	; (8000240 <main+0xa0>)
 8000214:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1,(uint8_t *)buffer, stringSize, 100);//forma correcta sin warning
 8000216:	4b0a      	ldr	r3, [pc, #40]	; (8000240 <main+0xa0>)
 8000218:	781b      	ldrb	r3, [r3, #0]
 800021a:	b29a      	uxth	r2, r3
 800021c:	2364      	movs	r3, #100	; 0x64
 800021e:	4907      	ldr	r1, [pc, #28]	; (800023c <main+0x9c>)
 8000220:	4808      	ldr	r0, [pc, #32]	; (8000244 <main+0xa4>)
 8000222:	f001 f9b6 	bl	8001592 <HAL_UART_Transmit>
	  estado = HAL_GPIO_ReadPin(boton1_GPIO_Port, boton1_Pin);
 8000226:	e7c8      	b.n	80001ba <main+0x1a>
 8000228:	08002aec 	.word	0x08002aec
 800022c:	40010c00 	.word	0x40010c00
 8000230:	2000008c 	.word	0x2000008c
 8000234:	2000008d 	.word	0x2000008d
 8000238:	08002af8 	.word	0x08002af8
 800023c:	200000dc 	.word	0x200000dc
 8000240:	20000104 	.word	0x20000104
 8000244:	2000009c 	.word	0x2000009c

08000248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b090      	sub	sp, #64	; 0x40
 800024c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024e:	f107 0318 	add.w	r3, r7, #24
 8000252:	2228      	movs	r2, #40	; 0x28
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f001 fb82 	bl	8001960 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]
 8000268:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800026a:	2302      	movs	r3, #2
 800026c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026e:	2301      	movs	r3, #1
 8000270:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000272:	2310      	movs	r3, #16
 8000274:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000276:	2300      	movs	r3, #0
 8000278:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027a:	f107 0318 	add.w	r3, r7, #24
 800027e:	4618      	mov	r0, r3
 8000280:	f000 fd1e 	bl	8000cc0 <HAL_RCC_OscConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800028a:	f000 f88d 	bl	80003a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028e:	230f      	movs	r3, #15
 8000290:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000292:	2300      	movs	r3, #0
 8000294:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000296:	2300      	movs	r3, #0
 8000298:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800029a:	2300      	movs	r3, #0
 800029c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800029e:	2300      	movs	r3, #0
 80002a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	2100      	movs	r1, #0
 80002a6:	4618      	mov	r0, r3
 80002a8:	f000 ff8a 	bl	80011c0 <HAL_RCC_ClockConfig>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002b2:	f000 f879 	bl	80003a8 <Error_Handler>
  }
}
 80002b6:	bf00      	nop
 80002b8:	3740      	adds	r7, #64	; 0x40
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
	...

080002c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002c4:	4b11      	ldr	r3, [pc, #68]	; (800030c <MX_USART1_UART_Init+0x4c>)
 80002c6:	4a12      	ldr	r2, [pc, #72]	; (8000310 <MX_USART1_UART_Init+0x50>)
 80002c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002ca:	4b10      	ldr	r3, [pc, #64]	; (800030c <MX_USART1_UART_Init+0x4c>)
 80002cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002d2:	4b0e      	ldr	r3, [pc, #56]	; (800030c <MX_USART1_UART_Init+0x4c>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002d8:	4b0c      	ldr	r3, [pc, #48]	; (800030c <MX_USART1_UART_Init+0x4c>)
 80002da:	2200      	movs	r2, #0
 80002dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002de:	4b0b      	ldr	r3, [pc, #44]	; (800030c <MX_USART1_UART_Init+0x4c>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002e4:	4b09      	ldr	r3, [pc, #36]	; (800030c <MX_USART1_UART_Init+0x4c>)
 80002e6:	220c      	movs	r2, #12
 80002e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002ea:	4b08      	ldr	r3, [pc, #32]	; (800030c <MX_USART1_UART_Init+0x4c>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002f0:	4b06      	ldr	r3, [pc, #24]	; (800030c <MX_USART1_UART_Init+0x4c>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002f6:	4805      	ldr	r0, [pc, #20]	; (800030c <MX_USART1_UART_Init+0x4c>)
 80002f8:	f001 f8fe 	bl	80014f8 <HAL_UART_Init>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000302:	f000 f851 	bl	80003a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000306:	bf00      	nop
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	2000009c 	.word	0x2000009c
 8000310:	40013800 	.word	0x40013800

08000314 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b086      	sub	sp, #24
 8000318:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800031a:	f107 0308 	add.w	r3, r7, #8
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]
 8000322:	605a      	str	r2, [r3, #4]
 8000324:	609a      	str	r2, [r3, #8]
 8000326:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000328:	4b1d      	ldr	r3, [pc, #116]	; (80003a0 <MX_GPIO_Init+0x8c>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	4a1c      	ldr	r2, [pc, #112]	; (80003a0 <MX_GPIO_Init+0x8c>)
 800032e:	f043 0304 	orr.w	r3, r3, #4
 8000332:	6193      	str	r3, [r2, #24]
 8000334:	4b1a      	ldr	r3, [pc, #104]	; (80003a0 <MX_GPIO_Init+0x8c>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	f003 0304 	and.w	r3, r3, #4
 800033c:	607b      	str	r3, [r7, #4]
 800033e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000340:	4b17      	ldr	r3, [pc, #92]	; (80003a0 <MX_GPIO_Init+0x8c>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	4a16      	ldr	r2, [pc, #88]	; (80003a0 <MX_GPIO_Init+0x8c>)
 8000346:	f043 0308 	orr.w	r3, r3, #8
 800034a:	6193      	str	r3, [r2, #24]
 800034c:	4b14      	ldr	r3, [pc, #80]	; (80003a0 <MX_GPIO_Init+0x8c>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	f003 0308 	and.w	r3, r3, #8
 8000354:	603b      	str	r3, [r7, #0]
 8000356:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 8000358:	2200      	movs	r2, #0
 800035a:	2140      	movs	r1, #64	; 0x40
 800035c:	4811      	ldr	r0, [pc, #68]	; (80003a4 <MX_GPIO_Init+0x90>)
 800035e:	f000 fc7e 	bl	8000c5e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led1_Pin */
  GPIO_InitStruct.Pin = led1_Pin;
 8000362:	2340      	movs	r3, #64	; 0x40
 8000364:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000366:	2301      	movs	r3, #1
 8000368:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800036a:	2300      	movs	r3, #0
 800036c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800036e:	2302      	movs	r3, #2
 8000370:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(led1_GPIO_Port, &GPIO_InitStruct);
 8000372:	f107 0308 	add.w	r3, r7, #8
 8000376:	4619      	mov	r1, r3
 8000378:	480a      	ldr	r0, [pc, #40]	; (80003a4 <MX_GPIO_Init+0x90>)
 800037a:	f000 faff 	bl	800097c <HAL_GPIO_Init>

  /*Configure GPIO pin : boton1_Pin */
  GPIO_InitStruct.Pin = boton1_Pin;
 800037e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000382:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000384:	2300      	movs	r3, #0
 8000386:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000388:	2301      	movs	r3, #1
 800038a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(boton1_GPIO_Port, &GPIO_InitStruct);
 800038c:	f107 0308 	add.w	r3, r7, #8
 8000390:	4619      	mov	r1, r3
 8000392:	4804      	ldr	r0, [pc, #16]	; (80003a4 <MX_GPIO_Init+0x90>)
 8000394:	f000 faf2 	bl	800097c <HAL_GPIO_Init>

}
 8000398:	bf00      	nop
 800039a:	3718      	adds	r7, #24
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	40021000 	.word	0x40021000
 80003a4:	40010c00 	.word	0x40010c00

080003a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003ac:	bf00      	nop
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bc80      	pop	{r7}
 80003b2:	4770      	bx	lr

080003b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b085      	sub	sp, #20
 80003b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003ba:	4b15      	ldr	r3, [pc, #84]	; (8000410 <HAL_MspInit+0x5c>)
 80003bc:	699b      	ldr	r3, [r3, #24]
 80003be:	4a14      	ldr	r2, [pc, #80]	; (8000410 <HAL_MspInit+0x5c>)
 80003c0:	f043 0301 	orr.w	r3, r3, #1
 80003c4:	6193      	str	r3, [r2, #24]
 80003c6:	4b12      	ldr	r3, [pc, #72]	; (8000410 <HAL_MspInit+0x5c>)
 80003c8:	699b      	ldr	r3, [r3, #24]
 80003ca:	f003 0301 	and.w	r3, r3, #1
 80003ce:	60bb      	str	r3, [r7, #8]
 80003d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003d2:	4b0f      	ldr	r3, [pc, #60]	; (8000410 <HAL_MspInit+0x5c>)
 80003d4:	69db      	ldr	r3, [r3, #28]
 80003d6:	4a0e      	ldr	r2, [pc, #56]	; (8000410 <HAL_MspInit+0x5c>)
 80003d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003dc:	61d3      	str	r3, [r2, #28]
 80003de:	4b0c      	ldr	r3, [pc, #48]	; (8000410 <HAL_MspInit+0x5c>)
 80003e0:	69db      	ldr	r3, [r3, #28]
 80003e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003e6:	607b      	str	r3, [r7, #4]
 80003e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003ea:	4b0a      	ldr	r3, [pc, #40]	; (8000414 <HAL_MspInit+0x60>)
 80003ec:	685b      	ldr	r3, [r3, #4]
 80003ee:	60fb      	str	r3, [r7, #12]
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003f6:	60fb      	str	r3, [r7, #12]
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003fe:	60fb      	str	r3, [r7, #12]
 8000400:	4a04      	ldr	r2, [pc, #16]	; (8000414 <HAL_MspInit+0x60>)
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000406:	bf00      	nop
 8000408:	3714      	adds	r7, #20
 800040a:	46bd      	mov	sp, r7
 800040c:	bc80      	pop	{r7}
 800040e:	4770      	bx	lr
 8000410:	40021000 	.word	0x40021000
 8000414:	40010000 	.word	0x40010000

08000418 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b088      	sub	sp, #32
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000420:	f107 0310 	add.w	r3, r7, #16
 8000424:	2200      	movs	r2, #0
 8000426:	601a      	str	r2, [r3, #0]
 8000428:	605a      	str	r2, [r3, #4]
 800042a:	609a      	str	r2, [r3, #8]
 800042c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a1c      	ldr	r2, [pc, #112]	; (80004a4 <HAL_UART_MspInit+0x8c>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d131      	bne.n	800049c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000438:	4b1b      	ldr	r3, [pc, #108]	; (80004a8 <HAL_UART_MspInit+0x90>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	4a1a      	ldr	r2, [pc, #104]	; (80004a8 <HAL_UART_MspInit+0x90>)
 800043e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000442:	6193      	str	r3, [r2, #24]
 8000444:	4b18      	ldr	r3, [pc, #96]	; (80004a8 <HAL_UART_MspInit+0x90>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800044c:	60fb      	str	r3, [r7, #12]
 800044e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000450:	4b15      	ldr	r3, [pc, #84]	; (80004a8 <HAL_UART_MspInit+0x90>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	4a14      	ldr	r2, [pc, #80]	; (80004a8 <HAL_UART_MspInit+0x90>)
 8000456:	f043 0304 	orr.w	r3, r3, #4
 800045a:	6193      	str	r3, [r2, #24]
 800045c:	4b12      	ldr	r3, [pc, #72]	; (80004a8 <HAL_UART_MspInit+0x90>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	f003 0304 	and.w	r3, r3, #4
 8000464:	60bb      	str	r3, [r7, #8]
 8000466:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000468:	f44f 7300 	mov.w	r3, #512	; 0x200
 800046c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800046e:	2302      	movs	r3, #2
 8000470:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000472:	2303      	movs	r3, #3
 8000474:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000476:	f107 0310 	add.w	r3, r7, #16
 800047a:	4619      	mov	r1, r3
 800047c:	480b      	ldr	r0, [pc, #44]	; (80004ac <HAL_UART_MspInit+0x94>)
 800047e:	f000 fa7d 	bl	800097c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000482:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000486:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000488:	2300      	movs	r3, #0
 800048a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048c:	2300      	movs	r3, #0
 800048e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000490:	f107 0310 	add.w	r3, r7, #16
 8000494:	4619      	mov	r1, r3
 8000496:	4805      	ldr	r0, [pc, #20]	; (80004ac <HAL_UART_MspInit+0x94>)
 8000498:	f000 fa70 	bl	800097c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800049c:	bf00      	nop
 800049e:	3720      	adds	r7, #32
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	40013800 	.word	0x40013800
 80004a8:	40021000 	.word	0x40021000
 80004ac:	40010800 	.word	0x40010800

080004b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80004b4:	bf00      	nop
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr

080004bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004c0:	e7fe      	b.n	80004c0 <HardFault_Handler+0x4>

080004c2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004c2:	b480      	push	{r7}
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004c6:	e7fe      	b.n	80004c6 <MemManage_Handler+0x4>

080004c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004cc:	e7fe      	b.n	80004cc <BusFault_Handler+0x4>

080004ce <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004ce:	b480      	push	{r7}
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004d2:	e7fe      	b.n	80004d2 <UsageFault_Handler+0x4>

080004d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	bc80      	pop	{r7}
 80004de:	4770      	bx	lr

080004e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004e4:	bf00      	nop
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bc80      	pop	{r7}
 80004ea:	4770      	bx	lr

080004ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bc80      	pop	{r7}
 80004f6:	4770      	bx	lr

080004f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004fc:	f000 f91c 	bl	8000738 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000500:	bf00      	nop
 8000502:	bd80      	pop	{r7, pc}

08000504 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af00      	add	r7, sp, #0
 800050a:	60f8      	str	r0, [r7, #12]
 800050c:	60b9      	str	r1, [r7, #8]
 800050e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000510:	2300      	movs	r3, #0
 8000512:	617b      	str	r3, [r7, #20]
 8000514:	e00a      	b.n	800052c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000516:	f3af 8000 	nop.w
 800051a:	4601      	mov	r1, r0
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	1c5a      	adds	r2, r3, #1
 8000520:	60ba      	str	r2, [r7, #8]
 8000522:	b2ca      	uxtb	r2, r1
 8000524:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000526:	697b      	ldr	r3, [r7, #20]
 8000528:	3301      	adds	r3, #1
 800052a:	617b      	str	r3, [r7, #20]
 800052c:	697a      	ldr	r2, [r7, #20]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	429a      	cmp	r2, r3
 8000532:	dbf0      	blt.n	8000516 <_read+0x12>
	}

return len;
 8000534:	687b      	ldr	r3, [r7, #4]
}
 8000536:	4618      	mov	r0, r3
 8000538:	3718      	adds	r7, #24
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}

0800053e <_close>:
	}
	return len;
}

int _close(int file)
{
 800053e:	b480      	push	{r7}
 8000540:	b083      	sub	sp, #12
 8000542:	af00      	add	r7, sp, #0
 8000544:	6078      	str	r0, [r7, #4]
	return -1;
 8000546:	f04f 33ff 	mov.w	r3, #4294967295
}
 800054a:	4618      	mov	r0, r3
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr

08000554 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000564:	605a      	str	r2, [r3, #4]
	return 0;
 8000566:	2300      	movs	r3, #0
}
 8000568:	4618      	mov	r0, r3
 800056a:	370c      	adds	r7, #12
 800056c:	46bd      	mov	sp, r7
 800056e:	bc80      	pop	{r7}
 8000570:	4770      	bx	lr

08000572 <_isatty>:

int _isatty(int file)
{
 8000572:	b480      	push	{r7}
 8000574:	b083      	sub	sp, #12
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]
	return 1;
 800057a:	2301      	movs	r3, #1
}
 800057c:	4618      	mov	r0, r3
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	bc80      	pop	{r7}
 8000584:	4770      	bx	lr

08000586 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000586:	b480      	push	{r7}
 8000588:	b085      	sub	sp, #20
 800058a:	af00      	add	r7, sp, #0
 800058c:	60f8      	str	r0, [r7, #12]
 800058e:	60b9      	str	r1, [r7, #8]
 8000590:	607a      	str	r2, [r7, #4]
	return 0;
 8000592:	2300      	movs	r3, #0
}
 8000594:	4618      	mov	r0, r3
 8000596:	3714      	adds	r7, #20
 8000598:	46bd      	mov	sp, r7
 800059a:	bc80      	pop	{r7}
 800059c:	4770      	bx	lr
	...

080005a0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80005a8:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <_sbrk+0x50>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d102      	bne.n	80005b6 <_sbrk+0x16>
		heap_end = &end;
 80005b0:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <_sbrk+0x50>)
 80005b2:	4a10      	ldr	r2, [pc, #64]	; (80005f4 <_sbrk+0x54>)
 80005b4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80005b6:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <_sbrk+0x50>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <_sbrk+0x50>)
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	4413      	add	r3, r2
 80005c4:	466a      	mov	r2, sp
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d907      	bls.n	80005da <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80005ca:	f001 f99f 	bl	800190c <__errno>
 80005ce:	4602      	mov	r2, r0
 80005d0:	230c      	movs	r3, #12
 80005d2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80005d4:	f04f 33ff 	mov.w	r3, #4294967295
 80005d8:	e006      	b.n	80005e8 <_sbrk+0x48>
	}

	heap_end += incr;
 80005da:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <_sbrk+0x50>)
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4413      	add	r3, r2
 80005e2:	4a03      	ldr	r2, [pc, #12]	; (80005f0 <_sbrk+0x50>)
 80005e4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80005e6:	68fb      	ldr	r3, [r7, #12]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3710      	adds	r7, #16
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20000090 	.word	0x20000090
 80005f4:	20000110 	.word	0x20000110

080005f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80005fc:	4b15      	ldr	r3, [pc, #84]	; (8000654 <SystemInit+0x5c>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a14      	ldr	r2, [pc, #80]	; (8000654 <SystemInit+0x5c>)
 8000602:	f043 0301 	orr.w	r3, r3, #1
 8000606:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <SystemInit+0x5c>)
 800060a:	685a      	ldr	r2, [r3, #4]
 800060c:	4911      	ldr	r1, [pc, #68]	; (8000654 <SystemInit+0x5c>)
 800060e:	4b12      	ldr	r3, [pc, #72]	; (8000658 <SystemInit+0x60>)
 8000610:	4013      	ands	r3, r2
 8000612:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000614:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <SystemInit+0x5c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a0e      	ldr	r2, [pc, #56]	; (8000654 <SystemInit+0x5c>)
 800061a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800061e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000624:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <SystemInit+0x5c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a0a      	ldr	r2, [pc, #40]	; (8000654 <SystemInit+0x5c>)
 800062a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800062e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000630:	4b08      	ldr	r3, [pc, #32]	; (8000654 <SystemInit+0x5c>)
 8000632:	685b      	ldr	r3, [r3, #4]
 8000634:	4a07      	ldr	r2, [pc, #28]	; (8000654 <SystemInit+0x5c>)
 8000636:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800063a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800063c:	4b05      	ldr	r3, [pc, #20]	; (8000654 <SystemInit+0x5c>)
 800063e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000642:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000644:	4b05      	ldr	r3, [pc, #20]	; (800065c <SystemInit+0x64>)
 8000646:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800064a:	609a      	str	r2, [r3, #8]
#endif 
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr
 8000654:	40021000 	.word	0x40021000
 8000658:	f8ff0000 	.word	0xf8ff0000
 800065c:	e000ed00 	.word	0xe000ed00

08000660 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000660:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000662:	e003      	b.n	800066c <LoopCopyDataInit>

08000664 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000664:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000666:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000668:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800066a:	3104      	adds	r1, #4

0800066c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800066c:	480a      	ldr	r0, [pc, #40]	; (8000698 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800066e:	4b0b      	ldr	r3, [pc, #44]	; (800069c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000670:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000672:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000674:	d3f6      	bcc.n	8000664 <CopyDataInit>
  ldr r2, =_sbss
 8000676:	4a0a      	ldr	r2, [pc, #40]	; (80006a0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000678:	e002      	b.n	8000680 <LoopFillZerobss>

0800067a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800067a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800067c:	f842 3b04 	str.w	r3, [r2], #4

08000680 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000680:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000682:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000684:	d3f9      	bcc.n	800067a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000686:	f7ff ffb7 	bl	80005f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800068a:	f001 f945 	bl	8001918 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800068e:	f7ff fd87 	bl	80001a0 <main>
  bx lr
 8000692:	4770      	bx	lr
  ldr r3, =_sidata
 8000694:	08002be0 	.word	0x08002be0
  ldr r0, =_sdata
 8000698:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800069c:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80006a0:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80006a4:	20000110 	.word	0x20000110

080006a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006a8:	e7fe      	b.n	80006a8 <ADC1_2_IRQHandler>
	...

080006ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006b0:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <HAL_Init+0x28>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a07      	ldr	r2, [pc, #28]	; (80006d4 <HAL_Init+0x28>)
 80006b6:	f043 0310 	orr.w	r3, r3, #16
 80006ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006bc:	2003      	movs	r0, #3
 80006be:	f000 f929 	bl	8000914 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006c2:	2000      	movs	r0, #0
 80006c4:	f000 f808 	bl	80006d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006c8:	f7ff fe74 	bl	80003b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006cc:	2300      	movs	r3, #0
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40022000 	.word	0x40022000

080006d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006e0:	4b12      	ldr	r3, [pc, #72]	; (800072c <HAL_InitTick+0x54>)
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <HAL_InitTick+0x58>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	4619      	mov	r1, r3
 80006ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80006f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 f933 	bl	8000962 <HAL_SYSTICK_Config>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000702:	2301      	movs	r3, #1
 8000704:	e00e      	b.n	8000724 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	2b0f      	cmp	r3, #15
 800070a:	d80a      	bhi.n	8000722 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800070c:	2200      	movs	r2, #0
 800070e:	6879      	ldr	r1, [r7, #4]
 8000710:	f04f 30ff 	mov.w	r0, #4294967295
 8000714:	f000 f909 	bl	800092a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000718:	4a06      	ldr	r2, [pc, #24]	; (8000734 <HAL_InitTick+0x5c>)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800071e:	2300      	movs	r3, #0
 8000720:	e000      	b.n	8000724 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000722:	2301      	movs	r3, #1
}
 8000724:	4618      	mov	r0, r3
 8000726:	3708      	adds	r7, #8
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20000000 	.word	0x20000000
 8000730:	20000008 	.word	0x20000008
 8000734:	20000004 	.word	0x20000004

08000738 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800073c:	4b05      	ldr	r3, [pc, #20]	; (8000754 <HAL_IncTick+0x1c>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	461a      	mov	r2, r3
 8000742:	4b05      	ldr	r3, [pc, #20]	; (8000758 <HAL_IncTick+0x20>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4413      	add	r3, r2
 8000748:	4a03      	ldr	r2, [pc, #12]	; (8000758 <HAL_IncTick+0x20>)
 800074a:	6013      	str	r3, [r2, #0]
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr
 8000754:	20000008 	.word	0x20000008
 8000758:	20000108 	.word	0x20000108

0800075c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  return uwTick;
 8000760:	4b02      	ldr	r3, [pc, #8]	; (800076c <HAL_GetTick+0x10>)
 8000762:	681b      	ldr	r3, [r3, #0]
}
 8000764:	4618      	mov	r0, r3
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr
 800076c:	20000108 	.word	0x20000108

08000770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000778:	f7ff fff0 	bl	800075c <HAL_GetTick>
 800077c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000788:	d005      	beq.n	8000796 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <HAL_Delay+0x40>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	461a      	mov	r2, r3
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	4413      	add	r3, r2
 8000794:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000796:	bf00      	nop
 8000798:	f7ff ffe0 	bl	800075c <HAL_GetTick>
 800079c:	4602      	mov	r2, r0
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	1ad3      	subs	r3, r2, r3
 80007a2:	68fa      	ldr	r2, [r7, #12]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d8f7      	bhi.n	8000798 <HAL_Delay+0x28>
  {
  }
}
 80007a8:	bf00      	nop
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000008 	.word	0x20000008

080007b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	f003 0307 	and.w	r3, r3, #7
 80007c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <__NVIC_SetPriorityGrouping+0x44>)
 80007c6:	68db      	ldr	r3, [r3, #12]
 80007c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ca:	68ba      	ldr	r2, [r7, #8]
 80007cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007d0:	4013      	ands	r3, r2
 80007d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007e6:	4a04      	ldr	r2, [pc, #16]	; (80007f8 <__NVIC_SetPriorityGrouping+0x44>)
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	60d3      	str	r3, [r2, #12]
}
 80007ec:	bf00      	nop
 80007ee:	3714      	adds	r7, #20
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bc80      	pop	{r7}
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	e000ed00 	.word	0xe000ed00

080007fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000800:	4b04      	ldr	r3, [pc, #16]	; (8000814 <__NVIC_GetPriorityGrouping+0x18>)
 8000802:	68db      	ldr	r3, [r3, #12]
 8000804:	0a1b      	lsrs	r3, r3, #8
 8000806:	f003 0307 	and.w	r3, r3, #7
}
 800080a:	4618      	mov	r0, r3
 800080c:	46bd      	mov	sp, r7
 800080e:	bc80      	pop	{r7}
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	e000ed00 	.word	0xe000ed00

08000818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	6039      	str	r1, [r7, #0]
 8000822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000828:	2b00      	cmp	r3, #0
 800082a:	db0a      	blt.n	8000842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	b2da      	uxtb	r2, r3
 8000830:	490c      	ldr	r1, [pc, #48]	; (8000864 <__NVIC_SetPriority+0x4c>)
 8000832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000836:	0112      	lsls	r2, r2, #4
 8000838:	b2d2      	uxtb	r2, r2
 800083a:	440b      	add	r3, r1
 800083c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000840:	e00a      	b.n	8000858 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	b2da      	uxtb	r2, r3
 8000846:	4908      	ldr	r1, [pc, #32]	; (8000868 <__NVIC_SetPriority+0x50>)
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	f003 030f 	and.w	r3, r3, #15
 800084e:	3b04      	subs	r3, #4
 8000850:	0112      	lsls	r2, r2, #4
 8000852:	b2d2      	uxtb	r2, r2
 8000854:	440b      	add	r3, r1
 8000856:	761a      	strb	r2, [r3, #24]
}
 8000858:	bf00      	nop
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	bc80      	pop	{r7}
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	e000e100 	.word	0xe000e100
 8000868:	e000ed00 	.word	0xe000ed00

0800086c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800086c:	b480      	push	{r7}
 800086e:	b089      	sub	sp, #36	; 0x24
 8000870:	af00      	add	r7, sp, #0
 8000872:	60f8      	str	r0, [r7, #12]
 8000874:	60b9      	str	r1, [r7, #8]
 8000876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	f003 0307 	and.w	r3, r3, #7
 800087e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	f1c3 0307 	rsb	r3, r3, #7
 8000886:	2b04      	cmp	r3, #4
 8000888:	bf28      	it	cs
 800088a:	2304      	movcs	r3, #4
 800088c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	3304      	adds	r3, #4
 8000892:	2b06      	cmp	r3, #6
 8000894:	d902      	bls.n	800089c <NVIC_EncodePriority+0x30>
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	3b03      	subs	r3, #3
 800089a:	e000      	b.n	800089e <NVIC_EncodePriority+0x32>
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a0:	f04f 32ff 	mov.w	r2, #4294967295
 80008a4:	69bb      	ldr	r3, [r7, #24]
 80008a6:	fa02 f303 	lsl.w	r3, r2, r3
 80008aa:	43da      	mvns	r2, r3
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	401a      	ands	r2, r3
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008b4:	f04f 31ff 	mov.w	r1, #4294967295
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	fa01 f303 	lsl.w	r3, r1, r3
 80008be:	43d9      	mvns	r1, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c4:	4313      	orrs	r3, r2
         );
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3724      	adds	r7, #36	; 0x24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr

080008d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	3b01      	subs	r3, #1
 80008dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008e0:	d301      	bcc.n	80008e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008e2:	2301      	movs	r3, #1
 80008e4:	e00f      	b.n	8000906 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008e6:	4a0a      	ldr	r2, [pc, #40]	; (8000910 <SysTick_Config+0x40>)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	3b01      	subs	r3, #1
 80008ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ee:	210f      	movs	r1, #15
 80008f0:	f04f 30ff 	mov.w	r0, #4294967295
 80008f4:	f7ff ff90 	bl	8000818 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008f8:	4b05      	ldr	r3, [pc, #20]	; (8000910 <SysTick_Config+0x40>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008fe:	4b04      	ldr	r3, [pc, #16]	; (8000910 <SysTick_Config+0x40>)
 8000900:	2207      	movs	r2, #7
 8000902:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000904:	2300      	movs	r3, #0
}
 8000906:	4618      	mov	r0, r3
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	e000e010 	.word	0xe000e010

08000914 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f7ff ff49 	bl	80007b4 <__NVIC_SetPriorityGrouping>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800092a:	b580      	push	{r7, lr}
 800092c:	b086      	sub	sp, #24
 800092e:	af00      	add	r7, sp, #0
 8000930:	4603      	mov	r3, r0
 8000932:	60b9      	str	r1, [r7, #8]
 8000934:	607a      	str	r2, [r7, #4]
 8000936:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000938:	2300      	movs	r3, #0
 800093a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800093c:	f7ff ff5e 	bl	80007fc <__NVIC_GetPriorityGrouping>
 8000940:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000942:	687a      	ldr	r2, [r7, #4]
 8000944:	68b9      	ldr	r1, [r7, #8]
 8000946:	6978      	ldr	r0, [r7, #20]
 8000948:	f7ff ff90 	bl	800086c <NVIC_EncodePriority>
 800094c:	4602      	mov	r2, r0
 800094e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000952:	4611      	mov	r1, r2
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff ff5f 	bl	8000818 <__NVIC_SetPriority>
}
 800095a:	bf00      	nop
 800095c:	3718      	adds	r7, #24
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b082      	sub	sp, #8
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f7ff ffb0 	bl	80008d0 <SysTick_Config>
 8000970:	4603      	mov	r3, r0
}
 8000972:	4618      	mov	r0, r3
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
	...

0800097c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800097c:	b480      	push	{r7}
 800097e:	b08b      	sub	sp, #44	; 0x2c
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800098a:	2300      	movs	r3, #0
 800098c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800098e:	e127      	b.n	8000be0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000990:	2201      	movs	r2, #1
 8000992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000994:	fa02 f303 	lsl.w	r3, r2, r3
 8000998:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	69fa      	ldr	r2, [r7, #28]
 80009a0:	4013      	ands	r3, r2
 80009a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009a4:	69ba      	ldr	r2, [r7, #24]
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	f040 8116 	bne.w	8000bda <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	2b12      	cmp	r3, #18
 80009b4:	d034      	beq.n	8000a20 <HAL_GPIO_Init+0xa4>
 80009b6:	2b12      	cmp	r3, #18
 80009b8:	d80d      	bhi.n	80009d6 <HAL_GPIO_Init+0x5a>
 80009ba:	2b02      	cmp	r3, #2
 80009bc:	d02b      	beq.n	8000a16 <HAL_GPIO_Init+0x9a>
 80009be:	2b02      	cmp	r3, #2
 80009c0:	d804      	bhi.n	80009cc <HAL_GPIO_Init+0x50>
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d031      	beq.n	8000a2a <HAL_GPIO_Init+0xae>
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d01c      	beq.n	8000a04 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009ca:	e048      	b.n	8000a5e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80009cc:	2b03      	cmp	r3, #3
 80009ce:	d043      	beq.n	8000a58 <HAL_GPIO_Init+0xdc>
 80009d0:	2b11      	cmp	r3, #17
 80009d2:	d01b      	beq.n	8000a0c <HAL_GPIO_Init+0x90>
          break;
 80009d4:	e043      	b.n	8000a5e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80009d6:	4a89      	ldr	r2, [pc, #548]	; (8000bfc <HAL_GPIO_Init+0x280>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d026      	beq.n	8000a2a <HAL_GPIO_Init+0xae>
 80009dc:	4a87      	ldr	r2, [pc, #540]	; (8000bfc <HAL_GPIO_Init+0x280>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d806      	bhi.n	80009f0 <HAL_GPIO_Init+0x74>
 80009e2:	4a87      	ldr	r2, [pc, #540]	; (8000c00 <HAL_GPIO_Init+0x284>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d020      	beq.n	8000a2a <HAL_GPIO_Init+0xae>
 80009e8:	4a86      	ldr	r2, [pc, #536]	; (8000c04 <HAL_GPIO_Init+0x288>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d01d      	beq.n	8000a2a <HAL_GPIO_Init+0xae>
          break;
 80009ee:	e036      	b.n	8000a5e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80009f0:	4a85      	ldr	r2, [pc, #532]	; (8000c08 <HAL_GPIO_Init+0x28c>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d019      	beq.n	8000a2a <HAL_GPIO_Init+0xae>
 80009f6:	4a85      	ldr	r2, [pc, #532]	; (8000c0c <HAL_GPIO_Init+0x290>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d016      	beq.n	8000a2a <HAL_GPIO_Init+0xae>
 80009fc:	4a84      	ldr	r2, [pc, #528]	; (8000c10 <HAL_GPIO_Init+0x294>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d013      	beq.n	8000a2a <HAL_GPIO_Init+0xae>
          break;
 8000a02:	e02c      	b.n	8000a5e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	623b      	str	r3, [r7, #32]
          break;
 8000a0a:	e028      	b.n	8000a5e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	3304      	adds	r3, #4
 8000a12:	623b      	str	r3, [r7, #32]
          break;
 8000a14:	e023      	b.n	8000a5e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	68db      	ldr	r3, [r3, #12]
 8000a1a:	3308      	adds	r3, #8
 8000a1c:	623b      	str	r3, [r7, #32]
          break;
 8000a1e:	e01e      	b.n	8000a5e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	330c      	adds	r3, #12
 8000a26:	623b      	str	r3, [r7, #32]
          break;
 8000a28:	e019      	b.n	8000a5e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	689b      	ldr	r3, [r3, #8]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d102      	bne.n	8000a38 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a32:	2304      	movs	r3, #4
 8000a34:	623b      	str	r3, [r7, #32]
          break;
 8000a36:	e012      	b.n	8000a5e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	689b      	ldr	r3, [r3, #8]
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d105      	bne.n	8000a4c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a40:	2308      	movs	r3, #8
 8000a42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	69fa      	ldr	r2, [r7, #28]
 8000a48:	611a      	str	r2, [r3, #16]
          break;
 8000a4a:	e008      	b.n	8000a5e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a4c:	2308      	movs	r3, #8
 8000a4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	69fa      	ldr	r2, [r7, #28]
 8000a54:	615a      	str	r2, [r3, #20]
          break;
 8000a56:	e002      	b.n	8000a5e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	623b      	str	r3, [r7, #32]
          break;
 8000a5c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a5e:	69bb      	ldr	r3, [r7, #24]
 8000a60:	2bff      	cmp	r3, #255	; 0xff
 8000a62:	d801      	bhi.n	8000a68 <HAL_GPIO_Init+0xec>
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	e001      	b.n	8000a6c <HAL_GPIO_Init+0xf0>
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	3304      	adds	r3, #4
 8000a6c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a6e:	69bb      	ldr	r3, [r7, #24]
 8000a70:	2bff      	cmp	r3, #255	; 0xff
 8000a72:	d802      	bhi.n	8000a7a <HAL_GPIO_Init+0xfe>
 8000a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	e002      	b.n	8000a80 <HAL_GPIO_Init+0x104>
 8000a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a7c:	3b08      	subs	r3, #8
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	210f      	movs	r1, #15
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8e:	43db      	mvns	r3, r3
 8000a90:	401a      	ands	r2, r3
 8000a92:	6a39      	ldr	r1, [r7, #32]
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9a:	431a      	orrs	r2, r3
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	f000 8096 	beq.w	8000bda <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000aae:	4b59      	ldr	r3, [pc, #356]	; (8000c14 <HAL_GPIO_Init+0x298>)
 8000ab0:	699b      	ldr	r3, [r3, #24]
 8000ab2:	4a58      	ldr	r2, [pc, #352]	; (8000c14 <HAL_GPIO_Init+0x298>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	6193      	str	r3, [r2, #24]
 8000aba:	4b56      	ldr	r3, [pc, #344]	; (8000c14 <HAL_GPIO_Init+0x298>)
 8000abc:	699b      	ldr	r3, [r3, #24]
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ac6:	4a54      	ldr	r2, [pc, #336]	; (8000c18 <HAL_GPIO_Init+0x29c>)
 8000ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aca:	089b      	lsrs	r3, r3, #2
 8000acc:	3302      	adds	r3, #2
 8000ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad6:	f003 0303 	and.w	r3, r3, #3
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	220f      	movs	r2, #15
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	43db      	mvns	r3, r3
 8000ae4:	68fa      	ldr	r2, [r7, #12]
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4a4b      	ldr	r2, [pc, #300]	; (8000c1c <HAL_GPIO_Init+0x2a0>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d013      	beq.n	8000b1a <HAL_GPIO_Init+0x19e>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4a4a      	ldr	r2, [pc, #296]	; (8000c20 <HAL_GPIO_Init+0x2a4>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d00d      	beq.n	8000b16 <HAL_GPIO_Init+0x19a>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4a49      	ldr	r2, [pc, #292]	; (8000c24 <HAL_GPIO_Init+0x2a8>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d007      	beq.n	8000b12 <HAL_GPIO_Init+0x196>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4a48      	ldr	r2, [pc, #288]	; (8000c28 <HAL_GPIO_Init+0x2ac>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d101      	bne.n	8000b0e <HAL_GPIO_Init+0x192>
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	e006      	b.n	8000b1c <HAL_GPIO_Init+0x1a0>
 8000b0e:	2304      	movs	r3, #4
 8000b10:	e004      	b.n	8000b1c <HAL_GPIO_Init+0x1a0>
 8000b12:	2302      	movs	r3, #2
 8000b14:	e002      	b.n	8000b1c <HAL_GPIO_Init+0x1a0>
 8000b16:	2301      	movs	r3, #1
 8000b18:	e000      	b.n	8000b1c <HAL_GPIO_Init+0x1a0>
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b1e:	f002 0203 	and.w	r2, r2, #3
 8000b22:	0092      	lsls	r2, r2, #2
 8000b24:	4093      	lsls	r3, r2
 8000b26:	68fa      	ldr	r2, [r7, #12]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b2c:	493a      	ldr	r1, [pc, #232]	; (8000c18 <HAL_GPIO_Init+0x29c>)
 8000b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b30:	089b      	lsrs	r3, r3, #2
 8000b32:	3302      	adds	r3, #2
 8000b34:	68fa      	ldr	r2, [r7, #12]
 8000b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d006      	beq.n	8000b54 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b46:	4b39      	ldr	r3, [pc, #228]	; (8000c2c <HAL_GPIO_Init+0x2b0>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	4938      	ldr	r1, [pc, #224]	; (8000c2c <HAL_GPIO_Init+0x2b0>)
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	600b      	str	r3, [r1, #0]
 8000b52:	e006      	b.n	8000b62 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b54:	4b35      	ldr	r3, [pc, #212]	; (8000c2c <HAL_GPIO_Init+0x2b0>)
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	43db      	mvns	r3, r3
 8000b5c:	4933      	ldr	r1, [pc, #204]	; (8000c2c <HAL_GPIO_Init+0x2b0>)
 8000b5e:	4013      	ands	r3, r2
 8000b60:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d006      	beq.n	8000b7c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b6e:	4b2f      	ldr	r3, [pc, #188]	; (8000c2c <HAL_GPIO_Init+0x2b0>)
 8000b70:	685a      	ldr	r2, [r3, #4]
 8000b72:	492e      	ldr	r1, [pc, #184]	; (8000c2c <HAL_GPIO_Init+0x2b0>)
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	4313      	orrs	r3, r2
 8000b78:	604b      	str	r3, [r1, #4]
 8000b7a:	e006      	b.n	8000b8a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b7c:	4b2b      	ldr	r3, [pc, #172]	; (8000c2c <HAL_GPIO_Init+0x2b0>)
 8000b7e:	685a      	ldr	r2, [r3, #4]
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	43db      	mvns	r3, r3
 8000b84:	4929      	ldr	r1, [pc, #164]	; (8000c2c <HAL_GPIO_Init+0x2b0>)
 8000b86:	4013      	ands	r3, r2
 8000b88:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d006      	beq.n	8000ba4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b96:	4b25      	ldr	r3, [pc, #148]	; (8000c2c <HAL_GPIO_Init+0x2b0>)
 8000b98:	689a      	ldr	r2, [r3, #8]
 8000b9a:	4924      	ldr	r1, [pc, #144]	; (8000c2c <HAL_GPIO_Init+0x2b0>)
 8000b9c:	69bb      	ldr	r3, [r7, #24]
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	608b      	str	r3, [r1, #8]
 8000ba2:	e006      	b.n	8000bb2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ba4:	4b21      	ldr	r3, [pc, #132]	; (8000c2c <HAL_GPIO_Init+0x2b0>)
 8000ba6:	689a      	ldr	r2, [r3, #8]
 8000ba8:	69bb      	ldr	r3, [r7, #24]
 8000baa:	43db      	mvns	r3, r3
 8000bac:	491f      	ldr	r1, [pc, #124]	; (8000c2c <HAL_GPIO_Init+0x2b0>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d006      	beq.n	8000bcc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bbe:	4b1b      	ldr	r3, [pc, #108]	; (8000c2c <HAL_GPIO_Init+0x2b0>)
 8000bc0:	68da      	ldr	r2, [r3, #12]
 8000bc2:	491a      	ldr	r1, [pc, #104]	; (8000c2c <HAL_GPIO_Init+0x2b0>)
 8000bc4:	69bb      	ldr	r3, [r7, #24]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	60cb      	str	r3, [r1, #12]
 8000bca:	e006      	b.n	8000bda <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000bcc:	4b17      	ldr	r3, [pc, #92]	; (8000c2c <HAL_GPIO_Init+0x2b0>)
 8000bce:	68da      	ldr	r2, [r3, #12]
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	43db      	mvns	r3, r3
 8000bd4:	4915      	ldr	r1, [pc, #84]	; (8000c2c <HAL_GPIO_Init+0x2b0>)
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bdc:	3301      	adds	r3, #1
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be6:	fa22 f303 	lsr.w	r3, r2, r3
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	f47f aed0 	bne.w	8000990 <HAL_GPIO_Init+0x14>
  }
}
 8000bf0:	bf00      	nop
 8000bf2:	372c      	adds	r7, #44	; 0x2c
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	10210000 	.word	0x10210000
 8000c00:	10110000 	.word	0x10110000
 8000c04:	10120000 	.word	0x10120000
 8000c08:	10310000 	.word	0x10310000
 8000c0c:	10320000 	.word	0x10320000
 8000c10:	10220000 	.word	0x10220000
 8000c14:	40021000 	.word	0x40021000
 8000c18:	40010000 	.word	0x40010000
 8000c1c:	40010800 	.word	0x40010800
 8000c20:	40010c00 	.word	0x40010c00
 8000c24:	40011000 	.word	0x40011000
 8000c28:	40011400 	.word	0x40011400
 8000c2c:	40010400 	.word	0x40010400

08000c30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	460b      	mov	r3, r1
 8000c3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	689a      	ldr	r2, [r3, #8]
 8000c40:	887b      	ldrh	r3, [r7, #2]
 8000c42:	4013      	ands	r3, r2
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d002      	beq.n	8000c4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	73fb      	strb	r3, [r7, #15]
 8000c4c:	e001      	b.n	8000c52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3714      	adds	r7, #20
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bc80      	pop	{r7}
 8000c5c:	4770      	bx	lr

08000c5e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	b083      	sub	sp, #12
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
 8000c66:	460b      	mov	r3, r1
 8000c68:	807b      	strh	r3, [r7, #2]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c6e:	787b      	ldrb	r3, [r7, #1]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d003      	beq.n	8000c7c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c74:	887a      	ldrh	r2, [r7, #2]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c7a:	e003      	b.n	8000c84 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c7c:	887b      	ldrh	r3, [r7, #2]
 8000c7e:	041a      	lsls	r2, r3, #16
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	611a      	str	r2, [r3, #16]
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bc80      	pop	{r7}
 8000c8c:	4770      	bx	lr

08000c8e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	b083      	sub	sp, #12
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
 8000c96:	460b      	mov	r3, r1
 8000c98:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	68da      	ldr	r2, [r3, #12]
 8000c9e:	887b      	ldrh	r3, [r7, #2]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d003      	beq.n	8000cae <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ca6:	887a      	ldrh	r2, [r7, #2]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000cac:	e002      	b.n	8000cb4 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cae:	887a      	ldrh	r2, [r7, #2]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	611a      	str	r2, [r3, #16]
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bc80      	pop	{r7}
 8000cbc:	4770      	bx	lr
	...

08000cc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d101      	bne.n	8000cd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e26c      	b.n	80011ac <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	f000 8087 	beq.w	8000dee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ce0:	4b92      	ldr	r3, [pc, #584]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f003 030c 	and.w	r3, r3, #12
 8000ce8:	2b04      	cmp	r3, #4
 8000cea:	d00c      	beq.n	8000d06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cec:	4b8f      	ldr	r3, [pc, #572]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f003 030c 	and.w	r3, r3, #12
 8000cf4:	2b08      	cmp	r3, #8
 8000cf6:	d112      	bne.n	8000d1e <HAL_RCC_OscConfig+0x5e>
 8000cf8:	4b8c      	ldr	r3, [pc, #560]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d04:	d10b      	bne.n	8000d1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d06:	4b89      	ldr	r3, [pc, #548]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d06c      	beq.n	8000dec <HAL_RCC_OscConfig+0x12c>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d168      	bne.n	8000dec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e246      	b.n	80011ac <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d26:	d106      	bne.n	8000d36 <HAL_RCC_OscConfig+0x76>
 8000d28:	4b80      	ldr	r3, [pc, #512]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a7f      	ldr	r2, [pc, #508]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d32:	6013      	str	r3, [r2, #0]
 8000d34:	e02e      	b.n	8000d94 <HAL_RCC_OscConfig+0xd4>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d10c      	bne.n	8000d58 <HAL_RCC_OscConfig+0x98>
 8000d3e:	4b7b      	ldr	r3, [pc, #492]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a7a      	ldr	r2, [pc, #488]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d48:	6013      	str	r3, [r2, #0]
 8000d4a:	4b78      	ldr	r3, [pc, #480]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a77      	ldr	r2, [pc, #476]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d54:	6013      	str	r3, [r2, #0]
 8000d56:	e01d      	b.n	8000d94 <HAL_RCC_OscConfig+0xd4>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d60:	d10c      	bne.n	8000d7c <HAL_RCC_OscConfig+0xbc>
 8000d62:	4b72      	ldr	r3, [pc, #456]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a71      	ldr	r2, [pc, #452]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d6c:	6013      	str	r3, [r2, #0]
 8000d6e:	4b6f      	ldr	r3, [pc, #444]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a6e      	ldr	r2, [pc, #440]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d78:	6013      	str	r3, [r2, #0]
 8000d7a:	e00b      	b.n	8000d94 <HAL_RCC_OscConfig+0xd4>
 8000d7c:	4b6b      	ldr	r3, [pc, #428]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a6a      	ldr	r2, [pc, #424]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d86:	6013      	str	r3, [r2, #0]
 8000d88:	4b68      	ldr	r3, [pc, #416]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a67      	ldr	r2, [pc, #412]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d013      	beq.n	8000dc4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d9c:	f7ff fcde 	bl	800075c <HAL_GetTick>
 8000da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000da2:	e008      	b.n	8000db6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000da4:	f7ff fcda 	bl	800075c <HAL_GetTick>
 8000da8:	4602      	mov	r2, r0
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	2b64      	cmp	r3, #100	; 0x64
 8000db0:	d901      	bls.n	8000db6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000db2:	2303      	movs	r3, #3
 8000db4:	e1fa      	b.n	80011ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000db6:	4b5d      	ldr	r3, [pc, #372]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d0f0      	beq.n	8000da4 <HAL_RCC_OscConfig+0xe4>
 8000dc2:	e014      	b.n	8000dee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dc4:	f7ff fcca 	bl	800075c <HAL_GetTick>
 8000dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dca:	e008      	b.n	8000dde <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dcc:	f7ff fcc6 	bl	800075c <HAL_GetTick>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	2b64      	cmp	r3, #100	; 0x64
 8000dd8:	d901      	bls.n	8000dde <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	e1e6      	b.n	80011ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dde:	4b53      	ldr	r3, [pc, #332]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d1f0      	bne.n	8000dcc <HAL_RCC_OscConfig+0x10c>
 8000dea:	e000      	b.n	8000dee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f003 0302 	and.w	r3, r3, #2
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d063      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000dfa:	4b4c      	ldr	r3, [pc, #304]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f003 030c 	and.w	r3, r3, #12
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d00b      	beq.n	8000e1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e06:	4b49      	ldr	r3, [pc, #292]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f003 030c 	and.w	r3, r3, #12
 8000e0e:	2b08      	cmp	r3, #8
 8000e10:	d11c      	bne.n	8000e4c <HAL_RCC_OscConfig+0x18c>
 8000e12:	4b46      	ldr	r3, [pc, #280]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d116      	bne.n	8000e4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e1e:	4b43      	ldr	r3, [pc, #268]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f003 0302 	and.w	r3, r3, #2
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d005      	beq.n	8000e36 <HAL_RCC_OscConfig+0x176>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	691b      	ldr	r3, [r3, #16]
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d001      	beq.n	8000e36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e1ba      	b.n	80011ac <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e36:	4b3d      	ldr	r3, [pc, #244]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	00db      	lsls	r3, r3, #3
 8000e44:	4939      	ldr	r1, [pc, #228]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000e46:	4313      	orrs	r3, r2
 8000e48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e4a:	e03a      	b.n	8000ec2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	691b      	ldr	r3, [r3, #16]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d020      	beq.n	8000e96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e54:	4b36      	ldr	r3, [pc, #216]	; (8000f30 <HAL_RCC_OscConfig+0x270>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e5a:	f7ff fc7f 	bl	800075c <HAL_GetTick>
 8000e5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e60:	e008      	b.n	8000e74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e62:	f7ff fc7b 	bl	800075c <HAL_GetTick>
 8000e66:	4602      	mov	r2, r0
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d901      	bls.n	8000e74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e70:	2303      	movs	r3, #3
 8000e72:	e19b      	b.n	80011ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e74:	4b2d      	ldr	r3, [pc, #180]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f003 0302 	and.w	r3, r3, #2
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d0f0      	beq.n	8000e62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e80:	4b2a      	ldr	r3, [pc, #168]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	695b      	ldr	r3, [r3, #20]
 8000e8c:	00db      	lsls	r3, r3, #3
 8000e8e:	4927      	ldr	r1, [pc, #156]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000e90:	4313      	orrs	r3, r2
 8000e92:	600b      	str	r3, [r1, #0]
 8000e94:	e015      	b.n	8000ec2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e96:	4b26      	ldr	r3, [pc, #152]	; (8000f30 <HAL_RCC_OscConfig+0x270>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e9c:	f7ff fc5e 	bl	800075c <HAL_GetTick>
 8000ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ea2:	e008      	b.n	8000eb6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ea4:	f7ff fc5a 	bl	800075c <HAL_GetTick>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d901      	bls.n	8000eb6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	e17a      	b.n	80011ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eb6:	4b1d      	ldr	r3, [pc, #116]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f003 0302 	and.w	r3, r3, #2
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d1f0      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f003 0308 	and.w	r3, r3, #8
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d03a      	beq.n	8000f44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	699b      	ldr	r3, [r3, #24]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d019      	beq.n	8000f0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ed6:	4b17      	ldr	r3, [pc, #92]	; (8000f34 <HAL_RCC_OscConfig+0x274>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000edc:	f7ff fc3e 	bl	800075c <HAL_GetTick>
 8000ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ee2:	e008      	b.n	8000ef6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ee4:	f7ff fc3a 	bl	800075c <HAL_GetTick>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d901      	bls.n	8000ef6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	e15a      	b.n	80011ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ef6:	4b0d      	ldr	r3, [pc, #52]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efa:	f003 0302 	and.w	r3, r3, #2
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d0f0      	beq.n	8000ee4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f02:	2001      	movs	r0, #1
 8000f04:	f000 fada 	bl	80014bc <RCC_Delay>
 8000f08:	e01c      	b.n	8000f44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <HAL_RCC_OscConfig+0x274>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f10:	f7ff fc24 	bl	800075c <HAL_GetTick>
 8000f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f16:	e00f      	b.n	8000f38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f18:	f7ff fc20 	bl	800075c <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d908      	bls.n	8000f38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f26:	2303      	movs	r3, #3
 8000f28:	e140      	b.n	80011ac <HAL_RCC_OscConfig+0x4ec>
 8000f2a:	bf00      	nop
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	42420000 	.word	0x42420000
 8000f34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f38:	4b9e      	ldr	r3, [pc, #632]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 8000f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3c:	f003 0302 	and.w	r3, r3, #2
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d1e9      	bne.n	8000f18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f003 0304 	and.w	r3, r3, #4
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	f000 80a6 	beq.w	800109e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f52:	2300      	movs	r3, #0
 8000f54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f56:	4b97      	ldr	r3, [pc, #604]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 8000f58:	69db      	ldr	r3, [r3, #28]
 8000f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d10d      	bne.n	8000f7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f62:	4b94      	ldr	r3, [pc, #592]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	4a93      	ldr	r2, [pc, #588]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 8000f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f6c:	61d3      	str	r3, [r2, #28]
 8000f6e:	4b91      	ldr	r3, [pc, #580]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 8000f70:	69db      	ldr	r3, [r3, #28]
 8000f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f7e:	4b8e      	ldr	r3, [pc, #568]	; (80011b8 <HAL_RCC_OscConfig+0x4f8>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d118      	bne.n	8000fbc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f8a:	4b8b      	ldr	r3, [pc, #556]	; (80011b8 <HAL_RCC_OscConfig+0x4f8>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a8a      	ldr	r2, [pc, #552]	; (80011b8 <HAL_RCC_OscConfig+0x4f8>)
 8000f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f96:	f7ff fbe1 	bl	800075c <HAL_GetTick>
 8000f9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f9c:	e008      	b.n	8000fb0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f9e:	f7ff fbdd 	bl	800075c <HAL_GetTick>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	2b64      	cmp	r3, #100	; 0x64
 8000faa:	d901      	bls.n	8000fb0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fac:	2303      	movs	r3, #3
 8000fae:	e0fd      	b.n	80011ac <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fb0:	4b81      	ldr	r3, [pc, #516]	; (80011b8 <HAL_RCC_OscConfig+0x4f8>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d0f0      	beq.n	8000f9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d106      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x312>
 8000fc4:	4b7b      	ldr	r3, [pc, #492]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 8000fc6:	6a1b      	ldr	r3, [r3, #32]
 8000fc8:	4a7a      	ldr	r2, [pc, #488]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 8000fca:	f043 0301 	orr.w	r3, r3, #1
 8000fce:	6213      	str	r3, [r2, #32]
 8000fd0:	e02d      	b.n	800102e <HAL_RCC_OscConfig+0x36e>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d10c      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x334>
 8000fda:	4b76      	ldr	r3, [pc, #472]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 8000fdc:	6a1b      	ldr	r3, [r3, #32]
 8000fde:	4a75      	ldr	r2, [pc, #468]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 8000fe0:	f023 0301 	bic.w	r3, r3, #1
 8000fe4:	6213      	str	r3, [r2, #32]
 8000fe6:	4b73      	ldr	r3, [pc, #460]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 8000fe8:	6a1b      	ldr	r3, [r3, #32]
 8000fea:	4a72      	ldr	r2, [pc, #456]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 8000fec:	f023 0304 	bic.w	r3, r3, #4
 8000ff0:	6213      	str	r3, [r2, #32]
 8000ff2:	e01c      	b.n	800102e <HAL_RCC_OscConfig+0x36e>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	2b05      	cmp	r3, #5
 8000ffa:	d10c      	bne.n	8001016 <HAL_RCC_OscConfig+0x356>
 8000ffc:	4b6d      	ldr	r3, [pc, #436]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 8000ffe:	6a1b      	ldr	r3, [r3, #32]
 8001000:	4a6c      	ldr	r2, [pc, #432]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 8001002:	f043 0304 	orr.w	r3, r3, #4
 8001006:	6213      	str	r3, [r2, #32]
 8001008:	4b6a      	ldr	r3, [pc, #424]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 800100a:	6a1b      	ldr	r3, [r3, #32]
 800100c:	4a69      	ldr	r2, [pc, #420]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 800100e:	f043 0301 	orr.w	r3, r3, #1
 8001012:	6213      	str	r3, [r2, #32]
 8001014:	e00b      	b.n	800102e <HAL_RCC_OscConfig+0x36e>
 8001016:	4b67      	ldr	r3, [pc, #412]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 8001018:	6a1b      	ldr	r3, [r3, #32]
 800101a:	4a66      	ldr	r2, [pc, #408]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 800101c:	f023 0301 	bic.w	r3, r3, #1
 8001020:	6213      	str	r3, [r2, #32]
 8001022:	4b64      	ldr	r3, [pc, #400]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 8001024:	6a1b      	ldr	r3, [r3, #32]
 8001026:	4a63      	ldr	r2, [pc, #396]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 8001028:	f023 0304 	bic.w	r3, r3, #4
 800102c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d015      	beq.n	8001062 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001036:	f7ff fb91 	bl	800075c <HAL_GetTick>
 800103a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800103c:	e00a      	b.n	8001054 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800103e:	f7ff fb8d 	bl	800075c <HAL_GetTick>
 8001042:	4602      	mov	r2, r0
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	f241 3288 	movw	r2, #5000	; 0x1388
 800104c:	4293      	cmp	r3, r2
 800104e:	d901      	bls.n	8001054 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001050:	2303      	movs	r3, #3
 8001052:	e0ab      	b.n	80011ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001054:	4b57      	ldr	r3, [pc, #348]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 8001056:	6a1b      	ldr	r3, [r3, #32]
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d0ee      	beq.n	800103e <HAL_RCC_OscConfig+0x37e>
 8001060:	e014      	b.n	800108c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001062:	f7ff fb7b 	bl	800075c <HAL_GetTick>
 8001066:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001068:	e00a      	b.n	8001080 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800106a:	f7ff fb77 	bl	800075c <HAL_GetTick>
 800106e:	4602      	mov	r2, r0
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	f241 3288 	movw	r2, #5000	; 0x1388
 8001078:	4293      	cmp	r3, r2
 800107a:	d901      	bls.n	8001080 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800107c:	2303      	movs	r3, #3
 800107e:	e095      	b.n	80011ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001080:	4b4c      	ldr	r3, [pc, #304]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 8001082:	6a1b      	ldr	r3, [r3, #32]
 8001084:	f003 0302 	and.w	r3, r3, #2
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1ee      	bne.n	800106a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800108c:	7dfb      	ldrb	r3, [r7, #23]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d105      	bne.n	800109e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001092:	4b48      	ldr	r3, [pc, #288]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	4a47      	ldr	r2, [pc, #284]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 8001098:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800109c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	69db      	ldr	r3, [r3, #28]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f000 8081 	beq.w	80011aa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010a8:	4b42      	ldr	r3, [pc, #264]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f003 030c 	and.w	r3, r3, #12
 80010b0:	2b08      	cmp	r3, #8
 80010b2:	d061      	beq.n	8001178 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	69db      	ldr	r3, [r3, #28]
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d146      	bne.n	800114a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010bc:	4b3f      	ldr	r3, [pc, #252]	; (80011bc <HAL_RCC_OscConfig+0x4fc>)
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c2:	f7ff fb4b 	bl	800075c <HAL_GetTick>
 80010c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010c8:	e008      	b.n	80010dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010ca:	f7ff fb47 	bl	800075c <HAL_GetTick>
 80010ce:	4602      	mov	r2, r0
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d901      	bls.n	80010dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010d8:	2303      	movs	r3, #3
 80010da:	e067      	b.n	80011ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010dc:	4b35      	ldr	r3, [pc, #212]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d1f0      	bne.n	80010ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a1b      	ldr	r3, [r3, #32]
 80010ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010f0:	d108      	bne.n	8001104 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010f2:	4b30      	ldr	r3, [pc, #192]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	492d      	ldr	r1, [pc, #180]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 8001100:	4313      	orrs	r3, r2
 8001102:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001104:	4b2b      	ldr	r3, [pc, #172]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a19      	ldr	r1, [r3, #32]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001114:	430b      	orrs	r3, r1
 8001116:	4927      	ldr	r1, [pc, #156]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 8001118:	4313      	orrs	r3, r2
 800111a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800111c:	4b27      	ldr	r3, [pc, #156]	; (80011bc <HAL_RCC_OscConfig+0x4fc>)
 800111e:	2201      	movs	r2, #1
 8001120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001122:	f7ff fb1b 	bl	800075c <HAL_GetTick>
 8001126:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001128:	e008      	b.n	800113c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800112a:	f7ff fb17 	bl	800075c <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d901      	bls.n	800113c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001138:	2303      	movs	r3, #3
 800113a:	e037      	b.n	80011ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800113c:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d0f0      	beq.n	800112a <HAL_RCC_OscConfig+0x46a>
 8001148:	e02f      	b.n	80011aa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800114a:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <HAL_RCC_OscConfig+0x4fc>)
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001150:	f7ff fb04 	bl	800075c <HAL_GetTick>
 8001154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001158:	f7ff fb00 	bl	800075c <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b02      	cmp	r3, #2
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e020      	b.n	80011ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800116a:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f0      	bne.n	8001158 <HAL_RCC_OscConfig+0x498>
 8001176:	e018      	b.n	80011aa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	69db      	ldr	r3, [r3, #28]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d101      	bne.n	8001184 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	e013      	b.n	80011ac <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001184:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <HAL_RCC_OscConfig+0x4f4>)
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6a1b      	ldr	r3, [r3, #32]
 8001194:	429a      	cmp	r2, r3
 8001196:	d106      	bne.n	80011a6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d001      	beq.n	80011aa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e000      	b.n	80011ac <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80011aa:	2300      	movs	r3, #0
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3718      	adds	r7, #24
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40021000 	.word	0x40021000
 80011b8:	40007000 	.word	0x40007000
 80011bc:	42420060 	.word	0x42420060

080011c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d101      	bne.n	80011d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e0d0      	b.n	8001376 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011d4:	4b6a      	ldr	r3, [pc, #424]	; (8001380 <HAL_RCC_ClockConfig+0x1c0>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 0307 	and.w	r3, r3, #7
 80011dc:	683a      	ldr	r2, [r7, #0]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d910      	bls.n	8001204 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011e2:	4b67      	ldr	r3, [pc, #412]	; (8001380 <HAL_RCC_ClockConfig+0x1c0>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f023 0207 	bic.w	r2, r3, #7
 80011ea:	4965      	ldr	r1, [pc, #404]	; (8001380 <HAL_RCC_ClockConfig+0x1c0>)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011f2:	4b63      	ldr	r3, [pc, #396]	; (8001380 <HAL_RCC_ClockConfig+0x1c0>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	683a      	ldr	r2, [r7, #0]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d001      	beq.n	8001204 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	e0b8      	b.n	8001376 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 0302 	and.w	r3, r3, #2
 800120c:	2b00      	cmp	r3, #0
 800120e:	d020      	beq.n	8001252 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0304 	and.w	r3, r3, #4
 8001218:	2b00      	cmp	r3, #0
 800121a:	d005      	beq.n	8001228 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800121c:	4b59      	ldr	r3, [pc, #356]	; (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	4a58      	ldr	r2, [pc, #352]	; (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 8001222:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001226:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0308 	and.w	r3, r3, #8
 8001230:	2b00      	cmp	r3, #0
 8001232:	d005      	beq.n	8001240 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001234:	4b53      	ldr	r3, [pc, #332]	; (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	4a52      	ldr	r2, [pc, #328]	; (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 800123a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800123e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001240:	4b50      	ldr	r3, [pc, #320]	; (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	494d      	ldr	r1, [pc, #308]	; (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 800124e:	4313      	orrs	r3, r2
 8001250:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	2b00      	cmp	r3, #0
 800125c:	d040      	beq.n	80012e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d107      	bne.n	8001276 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001266:	4b47      	ldr	r3, [pc, #284]	; (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d115      	bne.n	800129e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e07f      	b.n	8001376 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	2b02      	cmp	r3, #2
 800127c:	d107      	bne.n	800128e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800127e:	4b41      	ldr	r3, [pc, #260]	; (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d109      	bne.n	800129e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e073      	b.n	8001376 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800128e:	4b3d      	ldr	r3, [pc, #244]	; (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d101      	bne.n	800129e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e06b      	b.n	8001376 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800129e:	4b39      	ldr	r3, [pc, #228]	; (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f023 0203 	bic.w	r2, r3, #3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	4936      	ldr	r1, [pc, #216]	; (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 80012ac:	4313      	orrs	r3, r2
 80012ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012b0:	f7ff fa54 	bl	800075c <HAL_GetTick>
 80012b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012b6:	e00a      	b.n	80012ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012b8:	f7ff fa50 	bl	800075c <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e053      	b.n	8001376 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ce:	4b2d      	ldr	r3, [pc, #180]	; (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f003 020c 	and.w	r2, r3, #12
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	429a      	cmp	r2, r3
 80012de:	d1eb      	bne.n	80012b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012e0:	4b27      	ldr	r3, [pc, #156]	; (8001380 <HAL_RCC_ClockConfig+0x1c0>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0307 	and.w	r3, r3, #7
 80012e8:	683a      	ldr	r2, [r7, #0]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d210      	bcs.n	8001310 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ee:	4b24      	ldr	r3, [pc, #144]	; (8001380 <HAL_RCC_ClockConfig+0x1c0>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f023 0207 	bic.w	r2, r3, #7
 80012f6:	4922      	ldr	r1, [pc, #136]	; (8001380 <HAL_RCC_ClockConfig+0x1c0>)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012fe:	4b20      	ldr	r3, [pc, #128]	; (8001380 <HAL_RCC_ClockConfig+0x1c0>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	683a      	ldr	r2, [r7, #0]
 8001308:	429a      	cmp	r2, r3
 800130a:	d001      	beq.n	8001310 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e032      	b.n	8001376 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0304 	and.w	r3, r3, #4
 8001318:	2b00      	cmp	r3, #0
 800131a:	d008      	beq.n	800132e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800131c:	4b19      	ldr	r3, [pc, #100]	; (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	4916      	ldr	r1, [pc, #88]	; (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 800132a:	4313      	orrs	r3, r2
 800132c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0308 	and.w	r3, r3, #8
 8001336:	2b00      	cmp	r3, #0
 8001338:	d009      	beq.n	800134e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800133a:	4b12      	ldr	r3, [pc, #72]	; (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	691b      	ldr	r3, [r3, #16]
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	490e      	ldr	r1, [pc, #56]	; (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 800134a:	4313      	orrs	r3, r2
 800134c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800134e:	f000 f821 	bl	8001394 <HAL_RCC_GetSysClockFreq>
 8001352:	4601      	mov	r1, r0
 8001354:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	091b      	lsrs	r3, r3, #4
 800135a:	f003 030f 	and.w	r3, r3, #15
 800135e:	4a0a      	ldr	r2, [pc, #40]	; (8001388 <HAL_RCC_ClockConfig+0x1c8>)
 8001360:	5cd3      	ldrb	r3, [r2, r3]
 8001362:	fa21 f303 	lsr.w	r3, r1, r3
 8001366:	4a09      	ldr	r2, [pc, #36]	; (800138c <HAL_RCC_ClockConfig+0x1cc>)
 8001368:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800136a:	4b09      	ldr	r3, [pc, #36]	; (8001390 <HAL_RCC_ClockConfig+0x1d0>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff f9b2 	bl	80006d8 <HAL_InitTick>

  return HAL_OK;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40022000 	.word	0x40022000
 8001384:	40021000 	.word	0x40021000
 8001388:	08002b28 	.word	0x08002b28
 800138c:	20000000 	.word	0x20000000
 8001390:	20000004 	.word	0x20000004

08001394 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001394:	b490      	push	{r4, r7}
 8001396:	b08a      	sub	sp, #40	; 0x28
 8001398:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800139a:	4b2a      	ldr	r3, [pc, #168]	; (8001444 <HAL_RCC_GetSysClockFreq+0xb0>)
 800139c:	1d3c      	adds	r4, r7, #4
 800139e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80013a4:	4b28      	ldr	r3, [pc, #160]	; (8001448 <HAL_RCC_GetSysClockFreq+0xb4>)
 80013a6:	881b      	ldrh	r3, [r3, #0]
 80013a8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
 80013ae:	2300      	movs	r3, #0
 80013b0:	61bb      	str	r3, [r7, #24]
 80013b2:	2300      	movs	r3, #0
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80013ba:	2300      	movs	r3, #0
 80013bc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013be:	4b23      	ldr	r3, [pc, #140]	; (800144c <HAL_RCC_GetSysClockFreq+0xb8>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	f003 030c 	and.w	r3, r3, #12
 80013ca:	2b04      	cmp	r3, #4
 80013cc:	d002      	beq.n	80013d4 <HAL_RCC_GetSysClockFreq+0x40>
 80013ce:	2b08      	cmp	r3, #8
 80013d0:	d003      	beq.n	80013da <HAL_RCC_GetSysClockFreq+0x46>
 80013d2:	e02d      	b.n	8001430 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013d4:	4b1e      	ldr	r3, [pc, #120]	; (8001450 <HAL_RCC_GetSysClockFreq+0xbc>)
 80013d6:	623b      	str	r3, [r7, #32]
      break;
 80013d8:	e02d      	b.n	8001436 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	0c9b      	lsrs	r3, r3, #18
 80013de:	f003 030f 	and.w	r3, r3, #15
 80013e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80013e6:	4413      	add	r3, r2
 80013e8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80013ec:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d013      	beq.n	8001420 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013f8:	4b14      	ldr	r3, [pc, #80]	; (800144c <HAL_RCC_GetSysClockFreq+0xb8>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	0c5b      	lsrs	r3, r3, #17
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001406:	4413      	add	r3, r2
 8001408:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800140c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	4a0f      	ldr	r2, [pc, #60]	; (8001450 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001412:	fb02 f203 	mul.w	r2, r2, r3
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	fbb2 f3f3 	udiv	r3, r2, r3
 800141c:	627b      	str	r3, [r7, #36]	; 0x24
 800141e:	e004      	b.n	800142a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	4a0c      	ldr	r2, [pc, #48]	; (8001454 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001424:	fb02 f303 	mul.w	r3, r2, r3
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800142a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142c:	623b      	str	r3, [r7, #32]
      break;
 800142e:	e002      	b.n	8001436 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001430:	4b07      	ldr	r3, [pc, #28]	; (8001450 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001432:	623b      	str	r3, [r7, #32]
      break;
 8001434:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001436:	6a3b      	ldr	r3, [r7, #32]
}
 8001438:	4618      	mov	r0, r3
 800143a:	3728      	adds	r7, #40	; 0x28
 800143c:	46bd      	mov	sp, r7
 800143e:	bc90      	pop	{r4, r7}
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	08002b14 	.word	0x08002b14
 8001448:	08002b24 	.word	0x08002b24
 800144c:	40021000 	.word	0x40021000
 8001450:	007a1200 	.word	0x007a1200
 8001454:	003d0900 	.word	0x003d0900

08001458 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800145c:	4b02      	ldr	r3, [pc, #8]	; (8001468 <HAL_RCC_GetHCLKFreq+0x10>)
 800145e:	681b      	ldr	r3, [r3, #0]
}
 8001460:	4618      	mov	r0, r3
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr
 8001468:	20000000 	.word	0x20000000

0800146c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001470:	f7ff fff2 	bl	8001458 <HAL_RCC_GetHCLKFreq>
 8001474:	4601      	mov	r1, r0
 8001476:	4b05      	ldr	r3, [pc, #20]	; (800148c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	0a1b      	lsrs	r3, r3, #8
 800147c:	f003 0307 	and.w	r3, r3, #7
 8001480:	4a03      	ldr	r2, [pc, #12]	; (8001490 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001482:	5cd3      	ldrb	r3, [r2, r3]
 8001484:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001488:	4618      	mov	r0, r3
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40021000 	.word	0x40021000
 8001490:	08002b38 	.word	0x08002b38

08001494 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001498:	f7ff ffde 	bl	8001458 <HAL_RCC_GetHCLKFreq>
 800149c:	4601      	mov	r1, r0
 800149e:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	0adb      	lsrs	r3, r3, #11
 80014a4:	f003 0307 	and.w	r3, r3, #7
 80014a8:	4a03      	ldr	r2, [pc, #12]	; (80014b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014aa:	5cd3      	ldrb	r3, [r2, r3]
 80014ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40021000 	.word	0x40021000
 80014b8:	08002b38 	.word	0x08002b38

080014bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014c4:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <RCC_Delay+0x34>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a0a      	ldr	r2, [pc, #40]	; (80014f4 <RCC_Delay+0x38>)
 80014ca:	fba2 2303 	umull	r2, r3, r2, r3
 80014ce:	0a5b      	lsrs	r3, r3, #9
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	fb02 f303 	mul.w	r3, r2, r3
 80014d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80014d8:	bf00      	nop
  }
  while (Delay --);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	1e5a      	subs	r2, r3, #1
 80014de:	60fa      	str	r2, [r7, #12]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1f9      	bne.n	80014d8 <RCC_Delay+0x1c>
}
 80014e4:	bf00      	nop
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	20000000 	.word	0x20000000
 80014f4:	10624dd3 	.word	0x10624dd3

080014f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e03f      	b.n	800158a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	d106      	bne.n	8001524 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7fe ff7a 	bl	8000418 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2224      	movs	r2, #36	; 0x24
 8001528:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	68da      	ldr	r2, [r3, #12]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800153a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f000 f90b 	bl	8001758 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	691a      	ldr	r2, [r3, #16]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001550:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	695a      	ldr	r2, [r3, #20]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001560:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	68da      	ldr	r2, [r3, #12]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001570:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2220      	movs	r2, #32
 800157c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2220      	movs	r2, #32
 8001584:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b088      	sub	sp, #32
 8001596:	af02      	add	r7, sp, #8
 8001598:	60f8      	str	r0, [r7, #12]
 800159a:	60b9      	str	r1, [r7, #8]
 800159c:	603b      	str	r3, [r7, #0]
 800159e:	4613      	mov	r3, r2
 80015a0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80015a2:	2300      	movs	r3, #0
 80015a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2b20      	cmp	r3, #32
 80015b0:	f040 8083 	bne.w	80016ba <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d002      	beq.n	80015c0 <HAL_UART_Transmit+0x2e>
 80015ba:	88fb      	ldrh	r3, [r7, #6]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d101      	bne.n	80015c4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e07b      	b.n	80016bc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d101      	bne.n	80015d2 <HAL_UART_Transmit+0x40>
 80015ce:	2302      	movs	r3, #2
 80015d0:	e074      	b.n	80016bc <HAL_UART_Transmit+0x12a>
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2201      	movs	r2, #1
 80015d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2200      	movs	r2, #0
 80015de:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2221      	movs	r2, #33	; 0x21
 80015e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80015e8:	f7ff f8b8 	bl	800075c <HAL_GetTick>
 80015ec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	88fa      	ldrh	r2, [r7, #6]
 80015f2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	88fa      	ldrh	r2, [r7, #6]
 80015f8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80015fa:	e042      	b.n	8001682 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001600:	b29b      	uxth	r3, r3
 8001602:	3b01      	subs	r3, #1
 8001604:	b29a      	uxth	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001612:	d122      	bne.n	800165a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	2200      	movs	r2, #0
 800161c:	2180      	movs	r1, #128	; 0x80
 800161e:	68f8      	ldr	r0, [r7, #12]
 8001620:	f000 f850 	bl	80016c4 <UART_WaitOnFlagUntilTimeout>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e046      	b.n	80016bc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	881b      	ldrh	r3, [r3, #0]
 8001636:	461a      	mov	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001640:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d103      	bne.n	8001652 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	3302      	adds	r3, #2
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	e017      	b.n	8001682 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	3301      	adds	r3, #1
 8001656:	60bb      	str	r3, [r7, #8]
 8001658:	e013      	b.n	8001682 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	2200      	movs	r2, #0
 8001662:	2180      	movs	r1, #128	; 0x80
 8001664:	68f8      	ldr	r0, [r7, #12]
 8001666:	f000 f82d 	bl	80016c4 <UART_WaitOnFlagUntilTimeout>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e023      	b.n	80016bc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	1c5a      	adds	r2, r3, #1
 8001678:	60ba      	str	r2, [r7, #8]
 800167a:	781a      	ldrb	r2, [r3, #0]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001686:	b29b      	uxth	r3, r3
 8001688:	2b00      	cmp	r3, #0
 800168a:	d1b7      	bne.n	80015fc <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	2200      	movs	r2, #0
 8001694:	2140      	movs	r1, #64	; 0x40
 8001696:	68f8      	ldr	r0, [r7, #12]
 8001698:	f000 f814 	bl	80016c4 <UART_WaitOnFlagUntilTimeout>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e00a      	b.n	80016bc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2220      	movs	r2, #32
 80016aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80016b6:	2300      	movs	r3, #0
 80016b8:	e000      	b.n	80016bc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80016ba:	2302      	movs	r3, #2
  }
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3718      	adds	r7, #24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	603b      	str	r3, [r7, #0]
 80016d0:	4613      	mov	r3, r2
 80016d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80016d4:	e02c      	b.n	8001730 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016dc:	d028      	beq.n	8001730 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d007      	beq.n	80016f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80016e4:	f7ff f83a 	bl	800075c <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d21d      	bcs.n	8001730 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	68da      	ldr	r2, [r3, #12]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001702:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	695a      	ldr	r2, [r3, #20]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f022 0201 	bic.w	r2, r2, #1
 8001712:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2220      	movs	r2, #32
 8001718:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2220      	movs	r2, #32
 8001720:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2200      	movs	r2, #0
 8001728:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e00f      	b.n	8001750 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	4013      	ands	r3, r2
 800173a:	68ba      	ldr	r2, [r7, #8]
 800173c:	429a      	cmp	r2, r3
 800173e:	bf0c      	ite	eq
 8001740:	2301      	moveq	r3, #1
 8001742:	2300      	movne	r3, #0
 8001744:	b2db      	uxtb	r3, r3
 8001746:	461a      	mov	r2, r3
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	429a      	cmp	r2, r3
 800174c:	d0c3      	beq.n	80016d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	3710      	adds	r7, #16
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	68da      	ldr	r2, [r3, #12]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	689a      	ldr	r2, [r3, #8]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	431a      	orrs	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	695b      	ldr	r3, [r3, #20]
 8001784:	4313      	orrs	r3, r2
 8001786:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001792:	f023 030c 	bic.w	r3, r3, #12
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	6812      	ldr	r2, [r2, #0]
 800179a:	68f9      	ldr	r1, [r7, #12]
 800179c:	430b      	orrs	r3, r1
 800179e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	699a      	ldr	r2, [r3, #24]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	430a      	orrs	r2, r1
 80017b4:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a52      	ldr	r2, [pc, #328]	; (8001904 <UART_SetConfig+0x1ac>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d14e      	bne.n	800185e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80017c0:	f7ff fe68 	bl	8001494 <HAL_RCC_GetPCLK2Freq>
 80017c4:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80017c6:	68ba      	ldr	r2, [r7, #8]
 80017c8:	4613      	mov	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	4413      	add	r3, r2
 80017ce:	009a      	lsls	r2, r3, #2
 80017d0:	441a      	add	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017dc:	4a4a      	ldr	r2, [pc, #296]	; (8001908 <UART_SetConfig+0x1b0>)
 80017de:	fba2 2303 	umull	r2, r3, r2, r3
 80017e2:	095b      	lsrs	r3, r3, #5
 80017e4:	0119      	lsls	r1, r3, #4
 80017e6:	68ba      	ldr	r2, [r7, #8]
 80017e8:	4613      	mov	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	009a      	lsls	r2, r3, #2
 80017f0:	441a      	add	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80017fc:	4b42      	ldr	r3, [pc, #264]	; (8001908 <UART_SetConfig+0x1b0>)
 80017fe:	fba3 0302 	umull	r0, r3, r3, r2
 8001802:	095b      	lsrs	r3, r3, #5
 8001804:	2064      	movs	r0, #100	; 0x64
 8001806:	fb00 f303 	mul.w	r3, r0, r3
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	011b      	lsls	r3, r3, #4
 800180e:	3332      	adds	r3, #50	; 0x32
 8001810:	4a3d      	ldr	r2, [pc, #244]	; (8001908 <UART_SetConfig+0x1b0>)
 8001812:	fba2 2303 	umull	r2, r3, r2, r3
 8001816:	095b      	lsrs	r3, r3, #5
 8001818:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800181c:	4419      	add	r1, r3
 800181e:	68ba      	ldr	r2, [r7, #8]
 8001820:	4613      	mov	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	009a      	lsls	r2, r3, #2
 8001828:	441a      	add	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	fbb2 f2f3 	udiv	r2, r2, r3
 8001834:	4b34      	ldr	r3, [pc, #208]	; (8001908 <UART_SetConfig+0x1b0>)
 8001836:	fba3 0302 	umull	r0, r3, r3, r2
 800183a:	095b      	lsrs	r3, r3, #5
 800183c:	2064      	movs	r0, #100	; 0x64
 800183e:	fb00 f303 	mul.w	r3, r0, r3
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	011b      	lsls	r3, r3, #4
 8001846:	3332      	adds	r3, #50	; 0x32
 8001848:	4a2f      	ldr	r2, [pc, #188]	; (8001908 <UART_SetConfig+0x1b0>)
 800184a:	fba2 2303 	umull	r2, r3, r2, r3
 800184e:	095b      	lsrs	r3, r3, #5
 8001850:	f003 020f 	and.w	r2, r3, #15
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	440a      	add	r2, r1
 800185a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800185c:	e04d      	b.n	80018fa <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800185e:	f7ff fe05 	bl	800146c <HAL_RCC_GetPCLK1Freq>
 8001862:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001864:	68ba      	ldr	r2, [r7, #8]
 8001866:	4613      	mov	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	009a      	lsls	r2, r3, #2
 800186e:	441a      	add	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	fbb2 f3f3 	udiv	r3, r2, r3
 800187a:	4a23      	ldr	r2, [pc, #140]	; (8001908 <UART_SetConfig+0x1b0>)
 800187c:	fba2 2303 	umull	r2, r3, r2, r3
 8001880:	095b      	lsrs	r3, r3, #5
 8001882:	0119      	lsls	r1, r3, #4
 8001884:	68ba      	ldr	r2, [r7, #8]
 8001886:	4613      	mov	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	009a      	lsls	r2, r3, #2
 800188e:	441a      	add	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	fbb2 f2f3 	udiv	r2, r2, r3
 800189a:	4b1b      	ldr	r3, [pc, #108]	; (8001908 <UART_SetConfig+0x1b0>)
 800189c:	fba3 0302 	umull	r0, r3, r3, r2
 80018a0:	095b      	lsrs	r3, r3, #5
 80018a2:	2064      	movs	r0, #100	; 0x64
 80018a4:	fb00 f303 	mul.w	r3, r0, r3
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	011b      	lsls	r3, r3, #4
 80018ac:	3332      	adds	r3, #50	; 0x32
 80018ae:	4a16      	ldr	r2, [pc, #88]	; (8001908 <UART_SetConfig+0x1b0>)
 80018b0:	fba2 2303 	umull	r2, r3, r2, r3
 80018b4:	095b      	lsrs	r3, r3, #5
 80018b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018ba:	4419      	add	r1, r3
 80018bc:	68ba      	ldr	r2, [r7, #8]
 80018be:	4613      	mov	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4413      	add	r3, r2
 80018c4:	009a      	lsls	r2, r3, #2
 80018c6:	441a      	add	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80018d2:	4b0d      	ldr	r3, [pc, #52]	; (8001908 <UART_SetConfig+0x1b0>)
 80018d4:	fba3 0302 	umull	r0, r3, r3, r2
 80018d8:	095b      	lsrs	r3, r3, #5
 80018da:	2064      	movs	r0, #100	; 0x64
 80018dc:	fb00 f303 	mul.w	r3, r0, r3
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	011b      	lsls	r3, r3, #4
 80018e4:	3332      	adds	r3, #50	; 0x32
 80018e6:	4a08      	ldr	r2, [pc, #32]	; (8001908 <UART_SetConfig+0x1b0>)
 80018e8:	fba2 2303 	umull	r2, r3, r2, r3
 80018ec:	095b      	lsrs	r3, r3, #5
 80018ee:	f003 020f 	and.w	r2, r3, #15
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	440a      	add	r2, r1
 80018f8:	609a      	str	r2, [r3, #8]
}
 80018fa:	bf00      	nop
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40013800 	.word	0x40013800
 8001908:	51eb851f 	.word	0x51eb851f

0800190c <__errno>:
 800190c:	4b01      	ldr	r3, [pc, #4]	; (8001914 <__errno+0x8>)
 800190e:	6818      	ldr	r0, [r3, #0]
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	2000000c 	.word	0x2000000c

08001918 <__libc_init_array>:
 8001918:	b570      	push	{r4, r5, r6, lr}
 800191a:	2500      	movs	r5, #0
 800191c:	4e0c      	ldr	r6, [pc, #48]	; (8001950 <__libc_init_array+0x38>)
 800191e:	4c0d      	ldr	r4, [pc, #52]	; (8001954 <__libc_init_array+0x3c>)
 8001920:	1ba4      	subs	r4, r4, r6
 8001922:	10a4      	asrs	r4, r4, #2
 8001924:	42a5      	cmp	r5, r4
 8001926:	d109      	bne.n	800193c <__libc_init_array+0x24>
 8001928:	f001 f8d4 	bl	8002ad4 <_init>
 800192c:	2500      	movs	r5, #0
 800192e:	4e0a      	ldr	r6, [pc, #40]	; (8001958 <__libc_init_array+0x40>)
 8001930:	4c0a      	ldr	r4, [pc, #40]	; (800195c <__libc_init_array+0x44>)
 8001932:	1ba4      	subs	r4, r4, r6
 8001934:	10a4      	asrs	r4, r4, #2
 8001936:	42a5      	cmp	r5, r4
 8001938:	d105      	bne.n	8001946 <__libc_init_array+0x2e>
 800193a:	bd70      	pop	{r4, r5, r6, pc}
 800193c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001940:	4798      	blx	r3
 8001942:	3501      	adds	r5, #1
 8001944:	e7ee      	b.n	8001924 <__libc_init_array+0xc>
 8001946:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800194a:	4798      	blx	r3
 800194c:	3501      	adds	r5, #1
 800194e:	e7f2      	b.n	8001936 <__libc_init_array+0x1e>
 8001950:	08002bd8 	.word	0x08002bd8
 8001954:	08002bd8 	.word	0x08002bd8
 8001958:	08002bd8 	.word	0x08002bd8
 800195c:	08002bdc 	.word	0x08002bdc

08001960 <memset>:
 8001960:	4603      	mov	r3, r0
 8001962:	4402      	add	r2, r0
 8001964:	4293      	cmp	r3, r2
 8001966:	d100      	bne.n	800196a <memset+0xa>
 8001968:	4770      	bx	lr
 800196a:	f803 1b01 	strb.w	r1, [r3], #1
 800196e:	e7f9      	b.n	8001964 <memset+0x4>

08001970 <iprintf>:
 8001970:	b40f      	push	{r0, r1, r2, r3}
 8001972:	4b0a      	ldr	r3, [pc, #40]	; (800199c <iprintf+0x2c>)
 8001974:	b513      	push	{r0, r1, r4, lr}
 8001976:	681c      	ldr	r4, [r3, #0]
 8001978:	b124      	cbz	r4, 8001984 <iprintf+0x14>
 800197a:	69a3      	ldr	r3, [r4, #24]
 800197c:	b913      	cbnz	r3, 8001984 <iprintf+0x14>
 800197e:	4620      	mov	r0, r4
 8001980:	f000 f86e 	bl	8001a60 <__sinit>
 8001984:	ab05      	add	r3, sp, #20
 8001986:	9a04      	ldr	r2, [sp, #16]
 8001988:	68a1      	ldr	r1, [r4, #8]
 800198a:	4620      	mov	r0, r4
 800198c:	9301      	str	r3, [sp, #4]
 800198e:	f000 fac5 	bl	8001f1c <_vfiprintf_r>
 8001992:	b002      	add	sp, #8
 8001994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001998:	b004      	add	sp, #16
 800199a:	4770      	bx	lr
 800199c:	2000000c 	.word	0x2000000c

080019a0 <siprintf>:
 80019a0:	b40e      	push	{r1, r2, r3}
 80019a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80019a6:	b500      	push	{lr}
 80019a8:	b09c      	sub	sp, #112	; 0x70
 80019aa:	ab1d      	add	r3, sp, #116	; 0x74
 80019ac:	9002      	str	r0, [sp, #8]
 80019ae:	9006      	str	r0, [sp, #24]
 80019b0:	9107      	str	r1, [sp, #28]
 80019b2:	9104      	str	r1, [sp, #16]
 80019b4:	4808      	ldr	r0, [pc, #32]	; (80019d8 <siprintf+0x38>)
 80019b6:	4909      	ldr	r1, [pc, #36]	; (80019dc <siprintf+0x3c>)
 80019b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80019bc:	9105      	str	r1, [sp, #20]
 80019be:	6800      	ldr	r0, [r0, #0]
 80019c0:	a902      	add	r1, sp, #8
 80019c2:	9301      	str	r3, [sp, #4]
 80019c4:	f000 f98a 	bl	8001cdc <_svfiprintf_r>
 80019c8:	2200      	movs	r2, #0
 80019ca:	9b02      	ldr	r3, [sp, #8]
 80019cc:	701a      	strb	r2, [r3, #0]
 80019ce:	b01c      	add	sp, #112	; 0x70
 80019d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80019d4:	b003      	add	sp, #12
 80019d6:	4770      	bx	lr
 80019d8:	2000000c 	.word	0x2000000c
 80019dc:	ffff0208 	.word	0xffff0208

080019e0 <std>:
 80019e0:	2300      	movs	r3, #0
 80019e2:	b510      	push	{r4, lr}
 80019e4:	4604      	mov	r4, r0
 80019e6:	e9c0 3300 	strd	r3, r3, [r0]
 80019ea:	6083      	str	r3, [r0, #8]
 80019ec:	8181      	strh	r1, [r0, #12]
 80019ee:	6643      	str	r3, [r0, #100]	; 0x64
 80019f0:	81c2      	strh	r2, [r0, #14]
 80019f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80019f6:	6183      	str	r3, [r0, #24]
 80019f8:	4619      	mov	r1, r3
 80019fa:	2208      	movs	r2, #8
 80019fc:	305c      	adds	r0, #92	; 0x5c
 80019fe:	f7ff ffaf 	bl	8001960 <memset>
 8001a02:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <std+0x38>)
 8001a04:	6224      	str	r4, [r4, #32]
 8001a06:	6263      	str	r3, [r4, #36]	; 0x24
 8001a08:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <std+0x3c>)
 8001a0a:	62a3      	str	r3, [r4, #40]	; 0x28
 8001a0c:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <std+0x40>)
 8001a0e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001a10:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <std+0x44>)
 8001a12:	6323      	str	r3, [r4, #48]	; 0x30
 8001a14:	bd10      	pop	{r4, pc}
 8001a16:	bf00      	nop
 8001a18:	08002479 	.word	0x08002479
 8001a1c:	0800249b 	.word	0x0800249b
 8001a20:	080024d3 	.word	0x080024d3
 8001a24:	080024f7 	.word	0x080024f7

08001a28 <_cleanup_r>:
 8001a28:	4901      	ldr	r1, [pc, #4]	; (8001a30 <_cleanup_r+0x8>)
 8001a2a:	f000 b885 	b.w	8001b38 <_fwalk_reent>
 8001a2e:	bf00      	nop
 8001a30:	080027d1 	.word	0x080027d1

08001a34 <__sfmoreglue>:
 8001a34:	b570      	push	{r4, r5, r6, lr}
 8001a36:	2568      	movs	r5, #104	; 0x68
 8001a38:	1e4a      	subs	r2, r1, #1
 8001a3a:	4355      	muls	r5, r2
 8001a3c:	460e      	mov	r6, r1
 8001a3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001a42:	f000 f897 	bl	8001b74 <_malloc_r>
 8001a46:	4604      	mov	r4, r0
 8001a48:	b140      	cbz	r0, 8001a5c <__sfmoreglue+0x28>
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	e9c0 1600 	strd	r1, r6, [r0]
 8001a50:	300c      	adds	r0, #12
 8001a52:	60a0      	str	r0, [r4, #8]
 8001a54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001a58:	f7ff ff82 	bl	8001960 <memset>
 8001a5c:	4620      	mov	r0, r4
 8001a5e:	bd70      	pop	{r4, r5, r6, pc}

08001a60 <__sinit>:
 8001a60:	6983      	ldr	r3, [r0, #24]
 8001a62:	b510      	push	{r4, lr}
 8001a64:	4604      	mov	r4, r0
 8001a66:	bb33      	cbnz	r3, 8001ab6 <__sinit+0x56>
 8001a68:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001a6c:	6503      	str	r3, [r0, #80]	; 0x50
 8001a6e:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <__sinit+0x58>)
 8001a70:	4a12      	ldr	r2, [pc, #72]	; (8001abc <__sinit+0x5c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6282      	str	r2, [r0, #40]	; 0x28
 8001a76:	4298      	cmp	r0, r3
 8001a78:	bf04      	itt	eq
 8001a7a:	2301      	moveq	r3, #1
 8001a7c:	6183      	streq	r3, [r0, #24]
 8001a7e:	f000 f81f 	bl	8001ac0 <__sfp>
 8001a82:	6060      	str	r0, [r4, #4]
 8001a84:	4620      	mov	r0, r4
 8001a86:	f000 f81b 	bl	8001ac0 <__sfp>
 8001a8a:	60a0      	str	r0, [r4, #8]
 8001a8c:	4620      	mov	r0, r4
 8001a8e:	f000 f817 	bl	8001ac0 <__sfp>
 8001a92:	2200      	movs	r2, #0
 8001a94:	60e0      	str	r0, [r4, #12]
 8001a96:	2104      	movs	r1, #4
 8001a98:	6860      	ldr	r0, [r4, #4]
 8001a9a:	f7ff ffa1 	bl	80019e0 <std>
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	2109      	movs	r1, #9
 8001aa2:	68a0      	ldr	r0, [r4, #8]
 8001aa4:	f7ff ff9c 	bl	80019e0 <std>
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	2112      	movs	r1, #18
 8001aac:	68e0      	ldr	r0, [r4, #12]
 8001aae:	f7ff ff97 	bl	80019e0 <std>
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	61a3      	str	r3, [r4, #24]
 8001ab6:	bd10      	pop	{r4, pc}
 8001ab8:	08002b40 	.word	0x08002b40
 8001abc:	08001a29 	.word	0x08001a29

08001ac0 <__sfp>:
 8001ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ac2:	4b1b      	ldr	r3, [pc, #108]	; (8001b30 <__sfp+0x70>)
 8001ac4:	4607      	mov	r7, r0
 8001ac6:	681e      	ldr	r6, [r3, #0]
 8001ac8:	69b3      	ldr	r3, [r6, #24]
 8001aca:	b913      	cbnz	r3, 8001ad2 <__sfp+0x12>
 8001acc:	4630      	mov	r0, r6
 8001ace:	f7ff ffc7 	bl	8001a60 <__sinit>
 8001ad2:	3648      	adds	r6, #72	; 0x48
 8001ad4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	d503      	bpl.n	8001ae4 <__sfp+0x24>
 8001adc:	6833      	ldr	r3, [r6, #0]
 8001ade:	b133      	cbz	r3, 8001aee <__sfp+0x2e>
 8001ae0:	6836      	ldr	r6, [r6, #0]
 8001ae2:	e7f7      	b.n	8001ad4 <__sfp+0x14>
 8001ae4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001ae8:	b16d      	cbz	r5, 8001b06 <__sfp+0x46>
 8001aea:	3468      	adds	r4, #104	; 0x68
 8001aec:	e7f4      	b.n	8001ad8 <__sfp+0x18>
 8001aee:	2104      	movs	r1, #4
 8001af0:	4638      	mov	r0, r7
 8001af2:	f7ff ff9f 	bl	8001a34 <__sfmoreglue>
 8001af6:	6030      	str	r0, [r6, #0]
 8001af8:	2800      	cmp	r0, #0
 8001afa:	d1f1      	bne.n	8001ae0 <__sfp+0x20>
 8001afc:	230c      	movs	r3, #12
 8001afe:	4604      	mov	r4, r0
 8001b00:	603b      	str	r3, [r7, #0]
 8001b02:	4620      	mov	r0, r4
 8001b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b06:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <__sfp+0x74>)
 8001b08:	6665      	str	r5, [r4, #100]	; 0x64
 8001b0a:	e9c4 5500 	strd	r5, r5, [r4]
 8001b0e:	60a5      	str	r5, [r4, #8]
 8001b10:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001b14:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001b18:	2208      	movs	r2, #8
 8001b1a:	4629      	mov	r1, r5
 8001b1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001b20:	f7ff ff1e 	bl	8001960 <memset>
 8001b24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001b28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001b2c:	e7e9      	b.n	8001b02 <__sfp+0x42>
 8001b2e:	bf00      	nop
 8001b30:	08002b40 	.word	0x08002b40
 8001b34:	ffff0001 	.word	0xffff0001

08001b38 <_fwalk_reent>:
 8001b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b3c:	4680      	mov	r8, r0
 8001b3e:	4689      	mov	r9, r1
 8001b40:	2600      	movs	r6, #0
 8001b42:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001b46:	b914      	cbnz	r4, 8001b4e <_fwalk_reent+0x16>
 8001b48:	4630      	mov	r0, r6
 8001b4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b4e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001b52:	3f01      	subs	r7, #1
 8001b54:	d501      	bpl.n	8001b5a <_fwalk_reent+0x22>
 8001b56:	6824      	ldr	r4, [r4, #0]
 8001b58:	e7f5      	b.n	8001b46 <_fwalk_reent+0xe>
 8001b5a:	89ab      	ldrh	r3, [r5, #12]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d907      	bls.n	8001b70 <_fwalk_reent+0x38>
 8001b60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001b64:	3301      	adds	r3, #1
 8001b66:	d003      	beq.n	8001b70 <_fwalk_reent+0x38>
 8001b68:	4629      	mov	r1, r5
 8001b6a:	4640      	mov	r0, r8
 8001b6c:	47c8      	blx	r9
 8001b6e:	4306      	orrs	r6, r0
 8001b70:	3568      	adds	r5, #104	; 0x68
 8001b72:	e7ee      	b.n	8001b52 <_fwalk_reent+0x1a>

08001b74 <_malloc_r>:
 8001b74:	b570      	push	{r4, r5, r6, lr}
 8001b76:	1ccd      	adds	r5, r1, #3
 8001b78:	f025 0503 	bic.w	r5, r5, #3
 8001b7c:	3508      	adds	r5, #8
 8001b7e:	2d0c      	cmp	r5, #12
 8001b80:	bf38      	it	cc
 8001b82:	250c      	movcc	r5, #12
 8001b84:	2d00      	cmp	r5, #0
 8001b86:	4606      	mov	r6, r0
 8001b88:	db01      	blt.n	8001b8e <_malloc_r+0x1a>
 8001b8a:	42a9      	cmp	r1, r5
 8001b8c:	d903      	bls.n	8001b96 <_malloc_r+0x22>
 8001b8e:	230c      	movs	r3, #12
 8001b90:	6033      	str	r3, [r6, #0]
 8001b92:	2000      	movs	r0, #0
 8001b94:	bd70      	pop	{r4, r5, r6, pc}
 8001b96:	f000 feed 	bl	8002974 <__malloc_lock>
 8001b9a:	4a21      	ldr	r2, [pc, #132]	; (8001c20 <_malloc_r+0xac>)
 8001b9c:	6814      	ldr	r4, [r2, #0]
 8001b9e:	4621      	mov	r1, r4
 8001ba0:	b991      	cbnz	r1, 8001bc8 <_malloc_r+0x54>
 8001ba2:	4c20      	ldr	r4, [pc, #128]	; (8001c24 <_malloc_r+0xb0>)
 8001ba4:	6823      	ldr	r3, [r4, #0]
 8001ba6:	b91b      	cbnz	r3, 8001bb0 <_malloc_r+0x3c>
 8001ba8:	4630      	mov	r0, r6
 8001baa:	f000 fc55 	bl	8002458 <_sbrk_r>
 8001bae:	6020      	str	r0, [r4, #0]
 8001bb0:	4629      	mov	r1, r5
 8001bb2:	4630      	mov	r0, r6
 8001bb4:	f000 fc50 	bl	8002458 <_sbrk_r>
 8001bb8:	1c43      	adds	r3, r0, #1
 8001bba:	d124      	bne.n	8001c06 <_malloc_r+0x92>
 8001bbc:	230c      	movs	r3, #12
 8001bbe:	4630      	mov	r0, r6
 8001bc0:	6033      	str	r3, [r6, #0]
 8001bc2:	f000 fed8 	bl	8002976 <__malloc_unlock>
 8001bc6:	e7e4      	b.n	8001b92 <_malloc_r+0x1e>
 8001bc8:	680b      	ldr	r3, [r1, #0]
 8001bca:	1b5b      	subs	r3, r3, r5
 8001bcc:	d418      	bmi.n	8001c00 <_malloc_r+0x8c>
 8001bce:	2b0b      	cmp	r3, #11
 8001bd0:	d90f      	bls.n	8001bf2 <_malloc_r+0x7e>
 8001bd2:	600b      	str	r3, [r1, #0]
 8001bd4:	18cc      	adds	r4, r1, r3
 8001bd6:	50cd      	str	r5, [r1, r3]
 8001bd8:	4630      	mov	r0, r6
 8001bda:	f000 fecc 	bl	8002976 <__malloc_unlock>
 8001bde:	f104 000b 	add.w	r0, r4, #11
 8001be2:	1d23      	adds	r3, r4, #4
 8001be4:	f020 0007 	bic.w	r0, r0, #7
 8001be8:	1ac3      	subs	r3, r0, r3
 8001bea:	d0d3      	beq.n	8001b94 <_malloc_r+0x20>
 8001bec:	425a      	negs	r2, r3
 8001bee:	50e2      	str	r2, [r4, r3]
 8001bf0:	e7d0      	b.n	8001b94 <_malloc_r+0x20>
 8001bf2:	684b      	ldr	r3, [r1, #4]
 8001bf4:	428c      	cmp	r4, r1
 8001bf6:	bf16      	itet	ne
 8001bf8:	6063      	strne	r3, [r4, #4]
 8001bfa:	6013      	streq	r3, [r2, #0]
 8001bfc:	460c      	movne	r4, r1
 8001bfe:	e7eb      	b.n	8001bd8 <_malloc_r+0x64>
 8001c00:	460c      	mov	r4, r1
 8001c02:	6849      	ldr	r1, [r1, #4]
 8001c04:	e7cc      	b.n	8001ba0 <_malloc_r+0x2c>
 8001c06:	1cc4      	adds	r4, r0, #3
 8001c08:	f024 0403 	bic.w	r4, r4, #3
 8001c0c:	42a0      	cmp	r0, r4
 8001c0e:	d005      	beq.n	8001c1c <_malloc_r+0xa8>
 8001c10:	1a21      	subs	r1, r4, r0
 8001c12:	4630      	mov	r0, r6
 8001c14:	f000 fc20 	bl	8002458 <_sbrk_r>
 8001c18:	3001      	adds	r0, #1
 8001c1a:	d0cf      	beq.n	8001bbc <_malloc_r+0x48>
 8001c1c:	6025      	str	r5, [r4, #0]
 8001c1e:	e7db      	b.n	8001bd8 <_malloc_r+0x64>
 8001c20:	20000094 	.word	0x20000094
 8001c24:	20000098 	.word	0x20000098

08001c28 <__ssputs_r>:
 8001c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c2c:	688e      	ldr	r6, [r1, #8]
 8001c2e:	4682      	mov	sl, r0
 8001c30:	429e      	cmp	r6, r3
 8001c32:	460c      	mov	r4, r1
 8001c34:	4690      	mov	r8, r2
 8001c36:	4699      	mov	r9, r3
 8001c38:	d837      	bhi.n	8001caa <__ssputs_r+0x82>
 8001c3a:	898a      	ldrh	r2, [r1, #12]
 8001c3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001c40:	d031      	beq.n	8001ca6 <__ssputs_r+0x7e>
 8001c42:	2302      	movs	r3, #2
 8001c44:	6825      	ldr	r5, [r4, #0]
 8001c46:	6909      	ldr	r1, [r1, #16]
 8001c48:	1a6f      	subs	r7, r5, r1
 8001c4a:	6965      	ldr	r5, [r4, #20]
 8001c4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001c50:	fb95 f5f3 	sdiv	r5, r5, r3
 8001c54:	f109 0301 	add.w	r3, r9, #1
 8001c58:	443b      	add	r3, r7
 8001c5a:	429d      	cmp	r5, r3
 8001c5c:	bf38      	it	cc
 8001c5e:	461d      	movcc	r5, r3
 8001c60:	0553      	lsls	r3, r2, #21
 8001c62:	d530      	bpl.n	8001cc6 <__ssputs_r+0x9e>
 8001c64:	4629      	mov	r1, r5
 8001c66:	f7ff ff85 	bl	8001b74 <_malloc_r>
 8001c6a:	4606      	mov	r6, r0
 8001c6c:	b950      	cbnz	r0, 8001c84 <__ssputs_r+0x5c>
 8001c6e:	230c      	movs	r3, #12
 8001c70:	f04f 30ff 	mov.w	r0, #4294967295
 8001c74:	f8ca 3000 	str.w	r3, [sl]
 8001c78:	89a3      	ldrh	r3, [r4, #12]
 8001c7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c7e:	81a3      	strh	r3, [r4, #12]
 8001c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c84:	463a      	mov	r2, r7
 8001c86:	6921      	ldr	r1, [r4, #16]
 8001c88:	f000 fe50 	bl	800292c <memcpy>
 8001c8c:	89a3      	ldrh	r3, [r4, #12]
 8001c8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001c92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c96:	81a3      	strh	r3, [r4, #12]
 8001c98:	6126      	str	r6, [r4, #16]
 8001c9a:	443e      	add	r6, r7
 8001c9c:	6026      	str	r6, [r4, #0]
 8001c9e:	464e      	mov	r6, r9
 8001ca0:	6165      	str	r5, [r4, #20]
 8001ca2:	1bed      	subs	r5, r5, r7
 8001ca4:	60a5      	str	r5, [r4, #8]
 8001ca6:	454e      	cmp	r6, r9
 8001ca8:	d900      	bls.n	8001cac <__ssputs_r+0x84>
 8001caa:	464e      	mov	r6, r9
 8001cac:	4632      	mov	r2, r6
 8001cae:	4641      	mov	r1, r8
 8001cb0:	6820      	ldr	r0, [r4, #0]
 8001cb2:	f000 fe46 	bl	8002942 <memmove>
 8001cb6:	68a3      	ldr	r3, [r4, #8]
 8001cb8:	2000      	movs	r0, #0
 8001cba:	1b9b      	subs	r3, r3, r6
 8001cbc:	60a3      	str	r3, [r4, #8]
 8001cbe:	6823      	ldr	r3, [r4, #0]
 8001cc0:	441e      	add	r6, r3
 8001cc2:	6026      	str	r6, [r4, #0]
 8001cc4:	e7dc      	b.n	8001c80 <__ssputs_r+0x58>
 8001cc6:	462a      	mov	r2, r5
 8001cc8:	f000 fea2 	bl	8002a10 <_realloc_r>
 8001ccc:	4606      	mov	r6, r0
 8001cce:	2800      	cmp	r0, #0
 8001cd0:	d1e2      	bne.n	8001c98 <__ssputs_r+0x70>
 8001cd2:	6921      	ldr	r1, [r4, #16]
 8001cd4:	4650      	mov	r0, sl
 8001cd6:	f000 fe4f 	bl	8002978 <_free_r>
 8001cda:	e7c8      	b.n	8001c6e <__ssputs_r+0x46>

08001cdc <_svfiprintf_r>:
 8001cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ce0:	461d      	mov	r5, r3
 8001ce2:	898b      	ldrh	r3, [r1, #12]
 8001ce4:	b09d      	sub	sp, #116	; 0x74
 8001ce6:	061f      	lsls	r7, r3, #24
 8001ce8:	4680      	mov	r8, r0
 8001cea:	460c      	mov	r4, r1
 8001cec:	4616      	mov	r6, r2
 8001cee:	d50f      	bpl.n	8001d10 <_svfiprintf_r+0x34>
 8001cf0:	690b      	ldr	r3, [r1, #16]
 8001cf2:	b96b      	cbnz	r3, 8001d10 <_svfiprintf_r+0x34>
 8001cf4:	2140      	movs	r1, #64	; 0x40
 8001cf6:	f7ff ff3d 	bl	8001b74 <_malloc_r>
 8001cfa:	6020      	str	r0, [r4, #0]
 8001cfc:	6120      	str	r0, [r4, #16]
 8001cfe:	b928      	cbnz	r0, 8001d0c <_svfiprintf_r+0x30>
 8001d00:	230c      	movs	r3, #12
 8001d02:	f8c8 3000 	str.w	r3, [r8]
 8001d06:	f04f 30ff 	mov.w	r0, #4294967295
 8001d0a:	e0c8      	b.n	8001e9e <_svfiprintf_r+0x1c2>
 8001d0c:	2340      	movs	r3, #64	; 0x40
 8001d0e:	6163      	str	r3, [r4, #20]
 8001d10:	2300      	movs	r3, #0
 8001d12:	9309      	str	r3, [sp, #36]	; 0x24
 8001d14:	2320      	movs	r3, #32
 8001d16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001d1a:	2330      	movs	r3, #48	; 0x30
 8001d1c:	f04f 0b01 	mov.w	fp, #1
 8001d20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001d24:	9503      	str	r5, [sp, #12]
 8001d26:	4637      	mov	r7, r6
 8001d28:	463d      	mov	r5, r7
 8001d2a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001d2e:	b10b      	cbz	r3, 8001d34 <_svfiprintf_r+0x58>
 8001d30:	2b25      	cmp	r3, #37	; 0x25
 8001d32:	d13e      	bne.n	8001db2 <_svfiprintf_r+0xd6>
 8001d34:	ebb7 0a06 	subs.w	sl, r7, r6
 8001d38:	d00b      	beq.n	8001d52 <_svfiprintf_r+0x76>
 8001d3a:	4653      	mov	r3, sl
 8001d3c:	4632      	mov	r2, r6
 8001d3e:	4621      	mov	r1, r4
 8001d40:	4640      	mov	r0, r8
 8001d42:	f7ff ff71 	bl	8001c28 <__ssputs_r>
 8001d46:	3001      	adds	r0, #1
 8001d48:	f000 80a4 	beq.w	8001e94 <_svfiprintf_r+0x1b8>
 8001d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d4e:	4453      	add	r3, sl
 8001d50:	9309      	str	r3, [sp, #36]	; 0x24
 8001d52:	783b      	ldrb	r3, [r7, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 809d 	beq.w	8001e94 <_svfiprintf_r+0x1b8>
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001d64:	9304      	str	r3, [sp, #16]
 8001d66:	9307      	str	r3, [sp, #28]
 8001d68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001d6c:	931a      	str	r3, [sp, #104]	; 0x68
 8001d6e:	462f      	mov	r7, r5
 8001d70:	2205      	movs	r2, #5
 8001d72:	f817 1b01 	ldrb.w	r1, [r7], #1
 8001d76:	4850      	ldr	r0, [pc, #320]	; (8001eb8 <_svfiprintf_r+0x1dc>)
 8001d78:	f000 fdca 	bl	8002910 <memchr>
 8001d7c:	9b04      	ldr	r3, [sp, #16]
 8001d7e:	b9d0      	cbnz	r0, 8001db6 <_svfiprintf_r+0xda>
 8001d80:	06d9      	lsls	r1, r3, #27
 8001d82:	bf44      	itt	mi
 8001d84:	2220      	movmi	r2, #32
 8001d86:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001d8a:	071a      	lsls	r2, r3, #28
 8001d8c:	bf44      	itt	mi
 8001d8e:	222b      	movmi	r2, #43	; 0x2b
 8001d90:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001d94:	782a      	ldrb	r2, [r5, #0]
 8001d96:	2a2a      	cmp	r2, #42	; 0x2a
 8001d98:	d015      	beq.n	8001dc6 <_svfiprintf_r+0xea>
 8001d9a:	462f      	mov	r7, r5
 8001d9c:	2000      	movs	r0, #0
 8001d9e:	250a      	movs	r5, #10
 8001da0:	9a07      	ldr	r2, [sp, #28]
 8001da2:	4639      	mov	r1, r7
 8001da4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001da8:	3b30      	subs	r3, #48	; 0x30
 8001daa:	2b09      	cmp	r3, #9
 8001dac:	d94d      	bls.n	8001e4a <_svfiprintf_r+0x16e>
 8001dae:	b1b8      	cbz	r0, 8001de0 <_svfiprintf_r+0x104>
 8001db0:	e00f      	b.n	8001dd2 <_svfiprintf_r+0xf6>
 8001db2:	462f      	mov	r7, r5
 8001db4:	e7b8      	b.n	8001d28 <_svfiprintf_r+0x4c>
 8001db6:	4a40      	ldr	r2, [pc, #256]	; (8001eb8 <_svfiprintf_r+0x1dc>)
 8001db8:	463d      	mov	r5, r7
 8001dba:	1a80      	subs	r0, r0, r2
 8001dbc:	fa0b f000 	lsl.w	r0, fp, r0
 8001dc0:	4318      	orrs	r0, r3
 8001dc2:	9004      	str	r0, [sp, #16]
 8001dc4:	e7d3      	b.n	8001d6e <_svfiprintf_r+0x92>
 8001dc6:	9a03      	ldr	r2, [sp, #12]
 8001dc8:	1d11      	adds	r1, r2, #4
 8001dca:	6812      	ldr	r2, [r2, #0]
 8001dcc:	9103      	str	r1, [sp, #12]
 8001dce:	2a00      	cmp	r2, #0
 8001dd0:	db01      	blt.n	8001dd6 <_svfiprintf_r+0xfa>
 8001dd2:	9207      	str	r2, [sp, #28]
 8001dd4:	e004      	b.n	8001de0 <_svfiprintf_r+0x104>
 8001dd6:	4252      	negs	r2, r2
 8001dd8:	f043 0302 	orr.w	r3, r3, #2
 8001ddc:	9207      	str	r2, [sp, #28]
 8001dde:	9304      	str	r3, [sp, #16]
 8001de0:	783b      	ldrb	r3, [r7, #0]
 8001de2:	2b2e      	cmp	r3, #46	; 0x2e
 8001de4:	d10c      	bne.n	8001e00 <_svfiprintf_r+0x124>
 8001de6:	787b      	ldrb	r3, [r7, #1]
 8001de8:	2b2a      	cmp	r3, #42	; 0x2a
 8001dea:	d133      	bne.n	8001e54 <_svfiprintf_r+0x178>
 8001dec:	9b03      	ldr	r3, [sp, #12]
 8001dee:	3702      	adds	r7, #2
 8001df0:	1d1a      	adds	r2, r3, #4
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	9203      	str	r2, [sp, #12]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	bfb8      	it	lt
 8001dfa:	f04f 33ff 	movlt.w	r3, #4294967295
 8001dfe:	9305      	str	r3, [sp, #20]
 8001e00:	4d2e      	ldr	r5, [pc, #184]	; (8001ebc <_svfiprintf_r+0x1e0>)
 8001e02:	2203      	movs	r2, #3
 8001e04:	7839      	ldrb	r1, [r7, #0]
 8001e06:	4628      	mov	r0, r5
 8001e08:	f000 fd82 	bl	8002910 <memchr>
 8001e0c:	b138      	cbz	r0, 8001e1e <_svfiprintf_r+0x142>
 8001e0e:	2340      	movs	r3, #64	; 0x40
 8001e10:	1b40      	subs	r0, r0, r5
 8001e12:	fa03 f000 	lsl.w	r0, r3, r0
 8001e16:	9b04      	ldr	r3, [sp, #16]
 8001e18:	3701      	adds	r7, #1
 8001e1a:	4303      	orrs	r3, r0
 8001e1c:	9304      	str	r3, [sp, #16]
 8001e1e:	7839      	ldrb	r1, [r7, #0]
 8001e20:	2206      	movs	r2, #6
 8001e22:	4827      	ldr	r0, [pc, #156]	; (8001ec0 <_svfiprintf_r+0x1e4>)
 8001e24:	1c7e      	adds	r6, r7, #1
 8001e26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001e2a:	f000 fd71 	bl	8002910 <memchr>
 8001e2e:	2800      	cmp	r0, #0
 8001e30:	d038      	beq.n	8001ea4 <_svfiprintf_r+0x1c8>
 8001e32:	4b24      	ldr	r3, [pc, #144]	; (8001ec4 <_svfiprintf_r+0x1e8>)
 8001e34:	bb13      	cbnz	r3, 8001e7c <_svfiprintf_r+0x1a0>
 8001e36:	9b03      	ldr	r3, [sp, #12]
 8001e38:	3307      	adds	r3, #7
 8001e3a:	f023 0307 	bic.w	r3, r3, #7
 8001e3e:	3308      	adds	r3, #8
 8001e40:	9303      	str	r3, [sp, #12]
 8001e42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e44:	444b      	add	r3, r9
 8001e46:	9309      	str	r3, [sp, #36]	; 0x24
 8001e48:	e76d      	b.n	8001d26 <_svfiprintf_r+0x4a>
 8001e4a:	fb05 3202 	mla	r2, r5, r2, r3
 8001e4e:	2001      	movs	r0, #1
 8001e50:	460f      	mov	r7, r1
 8001e52:	e7a6      	b.n	8001da2 <_svfiprintf_r+0xc6>
 8001e54:	2300      	movs	r3, #0
 8001e56:	250a      	movs	r5, #10
 8001e58:	4619      	mov	r1, r3
 8001e5a:	3701      	adds	r7, #1
 8001e5c:	9305      	str	r3, [sp, #20]
 8001e5e:	4638      	mov	r0, r7
 8001e60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001e64:	3a30      	subs	r2, #48	; 0x30
 8001e66:	2a09      	cmp	r2, #9
 8001e68:	d903      	bls.n	8001e72 <_svfiprintf_r+0x196>
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0c8      	beq.n	8001e00 <_svfiprintf_r+0x124>
 8001e6e:	9105      	str	r1, [sp, #20]
 8001e70:	e7c6      	b.n	8001e00 <_svfiprintf_r+0x124>
 8001e72:	fb05 2101 	mla	r1, r5, r1, r2
 8001e76:	2301      	movs	r3, #1
 8001e78:	4607      	mov	r7, r0
 8001e7a:	e7f0      	b.n	8001e5e <_svfiprintf_r+0x182>
 8001e7c:	ab03      	add	r3, sp, #12
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	4622      	mov	r2, r4
 8001e82:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <_svfiprintf_r+0x1ec>)
 8001e84:	a904      	add	r1, sp, #16
 8001e86:	4640      	mov	r0, r8
 8001e88:	f3af 8000 	nop.w
 8001e8c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001e90:	4681      	mov	r9, r0
 8001e92:	d1d6      	bne.n	8001e42 <_svfiprintf_r+0x166>
 8001e94:	89a3      	ldrh	r3, [r4, #12]
 8001e96:	065b      	lsls	r3, r3, #25
 8001e98:	f53f af35 	bmi.w	8001d06 <_svfiprintf_r+0x2a>
 8001e9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001e9e:	b01d      	add	sp, #116	; 0x74
 8001ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ea4:	ab03      	add	r3, sp, #12
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	4622      	mov	r2, r4
 8001eaa:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <_svfiprintf_r+0x1ec>)
 8001eac:	a904      	add	r1, sp, #16
 8001eae:	4640      	mov	r0, r8
 8001eb0:	f000 f9c0 	bl	8002234 <_printf_i>
 8001eb4:	e7ea      	b.n	8001e8c <_svfiprintf_r+0x1b0>
 8001eb6:	bf00      	nop
 8001eb8:	08002ba4 	.word	0x08002ba4
 8001ebc:	08002baa 	.word	0x08002baa
 8001ec0:	08002bae 	.word	0x08002bae
 8001ec4:	00000000 	.word	0x00000000
 8001ec8:	08001c29 	.word	0x08001c29

08001ecc <__sfputc_r>:
 8001ecc:	6893      	ldr	r3, [r2, #8]
 8001ece:	b410      	push	{r4}
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	6093      	str	r3, [r2, #8]
 8001ed6:	da07      	bge.n	8001ee8 <__sfputc_r+0x1c>
 8001ed8:	6994      	ldr	r4, [r2, #24]
 8001eda:	42a3      	cmp	r3, r4
 8001edc:	db01      	blt.n	8001ee2 <__sfputc_r+0x16>
 8001ede:	290a      	cmp	r1, #10
 8001ee0:	d102      	bne.n	8001ee8 <__sfputc_r+0x1c>
 8001ee2:	bc10      	pop	{r4}
 8001ee4:	f000 bb0c 	b.w	8002500 <__swbuf_r>
 8001ee8:	6813      	ldr	r3, [r2, #0]
 8001eea:	1c58      	adds	r0, r3, #1
 8001eec:	6010      	str	r0, [r2, #0]
 8001eee:	7019      	strb	r1, [r3, #0]
 8001ef0:	4608      	mov	r0, r1
 8001ef2:	bc10      	pop	{r4}
 8001ef4:	4770      	bx	lr

08001ef6 <__sfputs_r>:
 8001ef6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ef8:	4606      	mov	r6, r0
 8001efa:	460f      	mov	r7, r1
 8001efc:	4614      	mov	r4, r2
 8001efe:	18d5      	adds	r5, r2, r3
 8001f00:	42ac      	cmp	r4, r5
 8001f02:	d101      	bne.n	8001f08 <__sfputs_r+0x12>
 8001f04:	2000      	movs	r0, #0
 8001f06:	e007      	b.n	8001f18 <__sfputs_r+0x22>
 8001f08:	463a      	mov	r2, r7
 8001f0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f0e:	4630      	mov	r0, r6
 8001f10:	f7ff ffdc 	bl	8001ecc <__sfputc_r>
 8001f14:	1c43      	adds	r3, r0, #1
 8001f16:	d1f3      	bne.n	8001f00 <__sfputs_r+0xa>
 8001f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001f1c <_vfiprintf_r>:
 8001f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f20:	460c      	mov	r4, r1
 8001f22:	b09d      	sub	sp, #116	; 0x74
 8001f24:	4617      	mov	r7, r2
 8001f26:	461d      	mov	r5, r3
 8001f28:	4606      	mov	r6, r0
 8001f2a:	b118      	cbz	r0, 8001f34 <_vfiprintf_r+0x18>
 8001f2c:	6983      	ldr	r3, [r0, #24]
 8001f2e:	b90b      	cbnz	r3, 8001f34 <_vfiprintf_r+0x18>
 8001f30:	f7ff fd96 	bl	8001a60 <__sinit>
 8001f34:	4b7c      	ldr	r3, [pc, #496]	; (8002128 <_vfiprintf_r+0x20c>)
 8001f36:	429c      	cmp	r4, r3
 8001f38:	d158      	bne.n	8001fec <_vfiprintf_r+0xd0>
 8001f3a:	6874      	ldr	r4, [r6, #4]
 8001f3c:	89a3      	ldrh	r3, [r4, #12]
 8001f3e:	0718      	lsls	r0, r3, #28
 8001f40:	d55e      	bpl.n	8002000 <_vfiprintf_r+0xe4>
 8001f42:	6923      	ldr	r3, [r4, #16]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d05b      	beq.n	8002000 <_vfiprintf_r+0xe4>
 8001f48:	2300      	movs	r3, #0
 8001f4a:	9309      	str	r3, [sp, #36]	; 0x24
 8001f4c:	2320      	movs	r3, #32
 8001f4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001f52:	2330      	movs	r3, #48	; 0x30
 8001f54:	f04f 0b01 	mov.w	fp, #1
 8001f58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001f5c:	9503      	str	r5, [sp, #12]
 8001f5e:	46b8      	mov	r8, r7
 8001f60:	4645      	mov	r5, r8
 8001f62:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001f66:	b10b      	cbz	r3, 8001f6c <_vfiprintf_r+0x50>
 8001f68:	2b25      	cmp	r3, #37	; 0x25
 8001f6a:	d154      	bne.n	8002016 <_vfiprintf_r+0xfa>
 8001f6c:	ebb8 0a07 	subs.w	sl, r8, r7
 8001f70:	d00b      	beq.n	8001f8a <_vfiprintf_r+0x6e>
 8001f72:	4653      	mov	r3, sl
 8001f74:	463a      	mov	r2, r7
 8001f76:	4621      	mov	r1, r4
 8001f78:	4630      	mov	r0, r6
 8001f7a:	f7ff ffbc 	bl	8001ef6 <__sfputs_r>
 8001f7e:	3001      	adds	r0, #1
 8001f80:	f000 80c2 	beq.w	8002108 <_vfiprintf_r+0x1ec>
 8001f84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f86:	4453      	add	r3, sl
 8001f88:	9309      	str	r3, [sp, #36]	; 0x24
 8001f8a:	f898 3000 	ldrb.w	r3, [r8]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 80ba 	beq.w	8002108 <_vfiprintf_r+0x1ec>
 8001f94:	2300      	movs	r3, #0
 8001f96:	f04f 32ff 	mov.w	r2, #4294967295
 8001f9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001f9e:	9304      	str	r3, [sp, #16]
 8001fa0:	9307      	str	r3, [sp, #28]
 8001fa2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001fa6:	931a      	str	r3, [sp, #104]	; 0x68
 8001fa8:	46a8      	mov	r8, r5
 8001faa:	2205      	movs	r2, #5
 8001fac:	f818 1b01 	ldrb.w	r1, [r8], #1
 8001fb0:	485e      	ldr	r0, [pc, #376]	; (800212c <_vfiprintf_r+0x210>)
 8001fb2:	f000 fcad 	bl	8002910 <memchr>
 8001fb6:	9b04      	ldr	r3, [sp, #16]
 8001fb8:	bb78      	cbnz	r0, 800201a <_vfiprintf_r+0xfe>
 8001fba:	06d9      	lsls	r1, r3, #27
 8001fbc:	bf44      	itt	mi
 8001fbe:	2220      	movmi	r2, #32
 8001fc0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001fc4:	071a      	lsls	r2, r3, #28
 8001fc6:	bf44      	itt	mi
 8001fc8:	222b      	movmi	r2, #43	; 0x2b
 8001fca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001fce:	782a      	ldrb	r2, [r5, #0]
 8001fd0:	2a2a      	cmp	r2, #42	; 0x2a
 8001fd2:	d02a      	beq.n	800202a <_vfiprintf_r+0x10e>
 8001fd4:	46a8      	mov	r8, r5
 8001fd6:	2000      	movs	r0, #0
 8001fd8:	250a      	movs	r5, #10
 8001fda:	9a07      	ldr	r2, [sp, #28]
 8001fdc:	4641      	mov	r1, r8
 8001fde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001fe2:	3b30      	subs	r3, #48	; 0x30
 8001fe4:	2b09      	cmp	r3, #9
 8001fe6:	d969      	bls.n	80020bc <_vfiprintf_r+0x1a0>
 8001fe8:	b360      	cbz	r0, 8002044 <_vfiprintf_r+0x128>
 8001fea:	e024      	b.n	8002036 <_vfiprintf_r+0x11a>
 8001fec:	4b50      	ldr	r3, [pc, #320]	; (8002130 <_vfiprintf_r+0x214>)
 8001fee:	429c      	cmp	r4, r3
 8001ff0:	d101      	bne.n	8001ff6 <_vfiprintf_r+0xda>
 8001ff2:	68b4      	ldr	r4, [r6, #8]
 8001ff4:	e7a2      	b.n	8001f3c <_vfiprintf_r+0x20>
 8001ff6:	4b4f      	ldr	r3, [pc, #316]	; (8002134 <_vfiprintf_r+0x218>)
 8001ff8:	429c      	cmp	r4, r3
 8001ffa:	bf08      	it	eq
 8001ffc:	68f4      	ldreq	r4, [r6, #12]
 8001ffe:	e79d      	b.n	8001f3c <_vfiprintf_r+0x20>
 8002000:	4621      	mov	r1, r4
 8002002:	4630      	mov	r0, r6
 8002004:	f000 fae0 	bl	80025c8 <__swsetup_r>
 8002008:	2800      	cmp	r0, #0
 800200a:	d09d      	beq.n	8001f48 <_vfiprintf_r+0x2c>
 800200c:	f04f 30ff 	mov.w	r0, #4294967295
 8002010:	b01d      	add	sp, #116	; 0x74
 8002012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002016:	46a8      	mov	r8, r5
 8002018:	e7a2      	b.n	8001f60 <_vfiprintf_r+0x44>
 800201a:	4a44      	ldr	r2, [pc, #272]	; (800212c <_vfiprintf_r+0x210>)
 800201c:	4645      	mov	r5, r8
 800201e:	1a80      	subs	r0, r0, r2
 8002020:	fa0b f000 	lsl.w	r0, fp, r0
 8002024:	4318      	orrs	r0, r3
 8002026:	9004      	str	r0, [sp, #16]
 8002028:	e7be      	b.n	8001fa8 <_vfiprintf_r+0x8c>
 800202a:	9a03      	ldr	r2, [sp, #12]
 800202c:	1d11      	adds	r1, r2, #4
 800202e:	6812      	ldr	r2, [r2, #0]
 8002030:	9103      	str	r1, [sp, #12]
 8002032:	2a00      	cmp	r2, #0
 8002034:	db01      	blt.n	800203a <_vfiprintf_r+0x11e>
 8002036:	9207      	str	r2, [sp, #28]
 8002038:	e004      	b.n	8002044 <_vfiprintf_r+0x128>
 800203a:	4252      	negs	r2, r2
 800203c:	f043 0302 	orr.w	r3, r3, #2
 8002040:	9207      	str	r2, [sp, #28]
 8002042:	9304      	str	r3, [sp, #16]
 8002044:	f898 3000 	ldrb.w	r3, [r8]
 8002048:	2b2e      	cmp	r3, #46	; 0x2e
 800204a:	d10e      	bne.n	800206a <_vfiprintf_r+0x14e>
 800204c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002050:	2b2a      	cmp	r3, #42	; 0x2a
 8002052:	d138      	bne.n	80020c6 <_vfiprintf_r+0x1aa>
 8002054:	9b03      	ldr	r3, [sp, #12]
 8002056:	f108 0802 	add.w	r8, r8, #2
 800205a:	1d1a      	adds	r2, r3, #4
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	9203      	str	r2, [sp, #12]
 8002060:	2b00      	cmp	r3, #0
 8002062:	bfb8      	it	lt
 8002064:	f04f 33ff 	movlt.w	r3, #4294967295
 8002068:	9305      	str	r3, [sp, #20]
 800206a:	4d33      	ldr	r5, [pc, #204]	; (8002138 <_vfiprintf_r+0x21c>)
 800206c:	2203      	movs	r2, #3
 800206e:	f898 1000 	ldrb.w	r1, [r8]
 8002072:	4628      	mov	r0, r5
 8002074:	f000 fc4c 	bl	8002910 <memchr>
 8002078:	b140      	cbz	r0, 800208c <_vfiprintf_r+0x170>
 800207a:	2340      	movs	r3, #64	; 0x40
 800207c:	1b40      	subs	r0, r0, r5
 800207e:	fa03 f000 	lsl.w	r0, r3, r0
 8002082:	9b04      	ldr	r3, [sp, #16]
 8002084:	f108 0801 	add.w	r8, r8, #1
 8002088:	4303      	orrs	r3, r0
 800208a:	9304      	str	r3, [sp, #16]
 800208c:	f898 1000 	ldrb.w	r1, [r8]
 8002090:	2206      	movs	r2, #6
 8002092:	482a      	ldr	r0, [pc, #168]	; (800213c <_vfiprintf_r+0x220>)
 8002094:	f108 0701 	add.w	r7, r8, #1
 8002098:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800209c:	f000 fc38 	bl	8002910 <memchr>
 80020a0:	2800      	cmp	r0, #0
 80020a2:	d037      	beq.n	8002114 <_vfiprintf_r+0x1f8>
 80020a4:	4b26      	ldr	r3, [pc, #152]	; (8002140 <_vfiprintf_r+0x224>)
 80020a6:	bb1b      	cbnz	r3, 80020f0 <_vfiprintf_r+0x1d4>
 80020a8:	9b03      	ldr	r3, [sp, #12]
 80020aa:	3307      	adds	r3, #7
 80020ac:	f023 0307 	bic.w	r3, r3, #7
 80020b0:	3308      	adds	r3, #8
 80020b2:	9303      	str	r3, [sp, #12]
 80020b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80020b6:	444b      	add	r3, r9
 80020b8:	9309      	str	r3, [sp, #36]	; 0x24
 80020ba:	e750      	b.n	8001f5e <_vfiprintf_r+0x42>
 80020bc:	fb05 3202 	mla	r2, r5, r2, r3
 80020c0:	2001      	movs	r0, #1
 80020c2:	4688      	mov	r8, r1
 80020c4:	e78a      	b.n	8001fdc <_vfiprintf_r+0xc0>
 80020c6:	2300      	movs	r3, #0
 80020c8:	250a      	movs	r5, #10
 80020ca:	4619      	mov	r1, r3
 80020cc:	f108 0801 	add.w	r8, r8, #1
 80020d0:	9305      	str	r3, [sp, #20]
 80020d2:	4640      	mov	r0, r8
 80020d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80020d8:	3a30      	subs	r2, #48	; 0x30
 80020da:	2a09      	cmp	r2, #9
 80020dc:	d903      	bls.n	80020e6 <_vfiprintf_r+0x1ca>
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d0c3      	beq.n	800206a <_vfiprintf_r+0x14e>
 80020e2:	9105      	str	r1, [sp, #20]
 80020e4:	e7c1      	b.n	800206a <_vfiprintf_r+0x14e>
 80020e6:	fb05 2101 	mla	r1, r5, r1, r2
 80020ea:	2301      	movs	r3, #1
 80020ec:	4680      	mov	r8, r0
 80020ee:	e7f0      	b.n	80020d2 <_vfiprintf_r+0x1b6>
 80020f0:	ab03      	add	r3, sp, #12
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	4622      	mov	r2, r4
 80020f6:	4b13      	ldr	r3, [pc, #76]	; (8002144 <_vfiprintf_r+0x228>)
 80020f8:	a904      	add	r1, sp, #16
 80020fa:	4630      	mov	r0, r6
 80020fc:	f3af 8000 	nop.w
 8002100:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002104:	4681      	mov	r9, r0
 8002106:	d1d5      	bne.n	80020b4 <_vfiprintf_r+0x198>
 8002108:	89a3      	ldrh	r3, [r4, #12]
 800210a:	065b      	lsls	r3, r3, #25
 800210c:	f53f af7e 	bmi.w	800200c <_vfiprintf_r+0xf0>
 8002110:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002112:	e77d      	b.n	8002010 <_vfiprintf_r+0xf4>
 8002114:	ab03      	add	r3, sp, #12
 8002116:	9300      	str	r3, [sp, #0]
 8002118:	4622      	mov	r2, r4
 800211a:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <_vfiprintf_r+0x228>)
 800211c:	a904      	add	r1, sp, #16
 800211e:	4630      	mov	r0, r6
 8002120:	f000 f888 	bl	8002234 <_printf_i>
 8002124:	e7ec      	b.n	8002100 <_vfiprintf_r+0x1e4>
 8002126:	bf00      	nop
 8002128:	08002b64 	.word	0x08002b64
 800212c:	08002ba4 	.word	0x08002ba4
 8002130:	08002b84 	.word	0x08002b84
 8002134:	08002b44 	.word	0x08002b44
 8002138:	08002baa 	.word	0x08002baa
 800213c:	08002bae 	.word	0x08002bae
 8002140:	00000000 	.word	0x00000000
 8002144:	08001ef7 	.word	0x08001ef7

08002148 <_printf_common>:
 8002148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800214c:	4691      	mov	r9, r2
 800214e:	461f      	mov	r7, r3
 8002150:	688a      	ldr	r2, [r1, #8]
 8002152:	690b      	ldr	r3, [r1, #16]
 8002154:	4606      	mov	r6, r0
 8002156:	4293      	cmp	r3, r2
 8002158:	bfb8      	it	lt
 800215a:	4613      	movlt	r3, r2
 800215c:	f8c9 3000 	str.w	r3, [r9]
 8002160:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002164:	460c      	mov	r4, r1
 8002166:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800216a:	b112      	cbz	r2, 8002172 <_printf_common+0x2a>
 800216c:	3301      	adds	r3, #1
 800216e:	f8c9 3000 	str.w	r3, [r9]
 8002172:	6823      	ldr	r3, [r4, #0]
 8002174:	0699      	lsls	r1, r3, #26
 8002176:	bf42      	ittt	mi
 8002178:	f8d9 3000 	ldrmi.w	r3, [r9]
 800217c:	3302      	addmi	r3, #2
 800217e:	f8c9 3000 	strmi.w	r3, [r9]
 8002182:	6825      	ldr	r5, [r4, #0]
 8002184:	f015 0506 	ands.w	r5, r5, #6
 8002188:	d107      	bne.n	800219a <_printf_common+0x52>
 800218a:	f104 0a19 	add.w	sl, r4, #25
 800218e:	68e3      	ldr	r3, [r4, #12]
 8002190:	f8d9 2000 	ldr.w	r2, [r9]
 8002194:	1a9b      	subs	r3, r3, r2
 8002196:	42ab      	cmp	r3, r5
 8002198:	dc29      	bgt.n	80021ee <_printf_common+0xa6>
 800219a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800219e:	6822      	ldr	r2, [r4, #0]
 80021a0:	3300      	adds	r3, #0
 80021a2:	bf18      	it	ne
 80021a4:	2301      	movne	r3, #1
 80021a6:	0692      	lsls	r2, r2, #26
 80021a8:	d42e      	bmi.n	8002208 <_printf_common+0xc0>
 80021aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80021ae:	4639      	mov	r1, r7
 80021b0:	4630      	mov	r0, r6
 80021b2:	47c0      	blx	r8
 80021b4:	3001      	adds	r0, #1
 80021b6:	d021      	beq.n	80021fc <_printf_common+0xb4>
 80021b8:	6823      	ldr	r3, [r4, #0]
 80021ba:	68e5      	ldr	r5, [r4, #12]
 80021bc:	f003 0306 	and.w	r3, r3, #6
 80021c0:	2b04      	cmp	r3, #4
 80021c2:	bf18      	it	ne
 80021c4:	2500      	movne	r5, #0
 80021c6:	f8d9 2000 	ldr.w	r2, [r9]
 80021ca:	f04f 0900 	mov.w	r9, #0
 80021ce:	bf08      	it	eq
 80021d0:	1aad      	subeq	r5, r5, r2
 80021d2:	68a3      	ldr	r3, [r4, #8]
 80021d4:	6922      	ldr	r2, [r4, #16]
 80021d6:	bf08      	it	eq
 80021d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80021dc:	4293      	cmp	r3, r2
 80021de:	bfc4      	itt	gt
 80021e0:	1a9b      	subgt	r3, r3, r2
 80021e2:	18ed      	addgt	r5, r5, r3
 80021e4:	341a      	adds	r4, #26
 80021e6:	454d      	cmp	r5, r9
 80021e8:	d11a      	bne.n	8002220 <_printf_common+0xd8>
 80021ea:	2000      	movs	r0, #0
 80021ec:	e008      	b.n	8002200 <_printf_common+0xb8>
 80021ee:	2301      	movs	r3, #1
 80021f0:	4652      	mov	r2, sl
 80021f2:	4639      	mov	r1, r7
 80021f4:	4630      	mov	r0, r6
 80021f6:	47c0      	blx	r8
 80021f8:	3001      	adds	r0, #1
 80021fa:	d103      	bne.n	8002204 <_printf_common+0xbc>
 80021fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002204:	3501      	adds	r5, #1
 8002206:	e7c2      	b.n	800218e <_printf_common+0x46>
 8002208:	2030      	movs	r0, #48	; 0x30
 800220a:	18e1      	adds	r1, r4, r3
 800220c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002210:	1c5a      	adds	r2, r3, #1
 8002212:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002216:	4422      	add	r2, r4
 8002218:	3302      	adds	r3, #2
 800221a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800221e:	e7c4      	b.n	80021aa <_printf_common+0x62>
 8002220:	2301      	movs	r3, #1
 8002222:	4622      	mov	r2, r4
 8002224:	4639      	mov	r1, r7
 8002226:	4630      	mov	r0, r6
 8002228:	47c0      	blx	r8
 800222a:	3001      	adds	r0, #1
 800222c:	d0e6      	beq.n	80021fc <_printf_common+0xb4>
 800222e:	f109 0901 	add.w	r9, r9, #1
 8002232:	e7d8      	b.n	80021e6 <_printf_common+0x9e>

08002234 <_printf_i>:
 8002234:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002238:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800223c:	460c      	mov	r4, r1
 800223e:	7e09      	ldrb	r1, [r1, #24]
 8002240:	b085      	sub	sp, #20
 8002242:	296e      	cmp	r1, #110	; 0x6e
 8002244:	4617      	mov	r7, r2
 8002246:	4606      	mov	r6, r0
 8002248:	4698      	mov	r8, r3
 800224a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800224c:	f000 80b3 	beq.w	80023b6 <_printf_i+0x182>
 8002250:	d822      	bhi.n	8002298 <_printf_i+0x64>
 8002252:	2963      	cmp	r1, #99	; 0x63
 8002254:	d036      	beq.n	80022c4 <_printf_i+0x90>
 8002256:	d80a      	bhi.n	800226e <_printf_i+0x3a>
 8002258:	2900      	cmp	r1, #0
 800225a:	f000 80b9 	beq.w	80023d0 <_printf_i+0x19c>
 800225e:	2958      	cmp	r1, #88	; 0x58
 8002260:	f000 8083 	beq.w	800236a <_printf_i+0x136>
 8002264:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002268:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800226c:	e032      	b.n	80022d4 <_printf_i+0xa0>
 800226e:	2964      	cmp	r1, #100	; 0x64
 8002270:	d001      	beq.n	8002276 <_printf_i+0x42>
 8002272:	2969      	cmp	r1, #105	; 0x69
 8002274:	d1f6      	bne.n	8002264 <_printf_i+0x30>
 8002276:	6820      	ldr	r0, [r4, #0]
 8002278:	6813      	ldr	r3, [r2, #0]
 800227a:	0605      	lsls	r5, r0, #24
 800227c:	f103 0104 	add.w	r1, r3, #4
 8002280:	d52a      	bpl.n	80022d8 <_printf_i+0xa4>
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6011      	str	r1, [r2, #0]
 8002286:	2b00      	cmp	r3, #0
 8002288:	da03      	bge.n	8002292 <_printf_i+0x5e>
 800228a:	222d      	movs	r2, #45	; 0x2d
 800228c:	425b      	negs	r3, r3
 800228e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002292:	486f      	ldr	r0, [pc, #444]	; (8002450 <_printf_i+0x21c>)
 8002294:	220a      	movs	r2, #10
 8002296:	e039      	b.n	800230c <_printf_i+0xd8>
 8002298:	2973      	cmp	r1, #115	; 0x73
 800229a:	f000 809d 	beq.w	80023d8 <_printf_i+0x1a4>
 800229e:	d808      	bhi.n	80022b2 <_printf_i+0x7e>
 80022a0:	296f      	cmp	r1, #111	; 0x6f
 80022a2:	d020      	beq.n	80022e6 <_printf_i+0xb2>
 80022a4:	2970      	cmp	r1, #112	; 0x70
 80022a6:	d1dd      	bne.n	8002264 <_printf_i+0x30>
 80022a8:	6823      	ldr	r3, [r4, #0]
 80022aa:	f043 0320 	orr.w	r3, r3, #32
 80022ae:	6023      	str	r3, [r4, #0]
 80022b0:	e003      	b.n	80022ba <_printf_i+0x86>
 80022b2:	2975      	cmp	r1, #117	; 0x75
 80022b4:	d017      	beq.n	80022e6 <_printf_i+0xb2>
 80022b6:	2978      	cmp	r1, #120	; 0x78
 80022b8:	d1d4      	bne.n	8002264 <_printf_i+0x30>
 80022ba:	2378      	movs	r3, #120	; 0x78
 80022bc:	4865      	ldr	r0, [pc, #404]	; (8002454 <_printf_i+0x220>)
 80022be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80022c2:	e055      	b.n	8002370 <_printf_i+0x13c>
 80022c4:	6813      	ldr	r3, [r2, #0]
 80022c6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80022ca:	1d19      	adds	r1, r3, #4
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6011      	str	r1, [r2, #0]
 80022d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80022d4:	2301      	movs	r3, #1
 80022d6:	e08c      	b.n	80023f2 <_printf_i+0x1be>
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80022de:	6011      	str	r1, [r2, #0]
 80022e0:	bf18      	it	ne
 80022e2:	b21b      	sxthne	r3, r3
 80022e4:	e7cf      	b.n	8002286 <_printf_i+0x52>
 80022e6:	6813      	ldr	r3, [r2, #0]
 80022e8:	6825      	ldr	r5, [r4, #0]
 80022ea:	1d18      	adds	r0, r3, #4
 80022ec:	6010      	str	r0, [r2, #0]
 80022ee:	0628      	lsls	r0, r5, #24
 80022f0:	d501      	bpl.n	80022f6 <_printf_i+0xc2>
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	e002      	b.n	80022fc <_printf_i+0xc8>
 80022f6:	0668      	lsls	r0, r5, #25
 80022f8:	d5fb      	bpl.n	80022f2 <_printf_i+0xbe>
 80022fa:	881b      	ldrh	r3, [r3, #0]
 80022fc:	296f      	cmp	r1, #111	; 0x6f
 80022fe:	bf14      	ite	ne
 8002300:	220a      	movne	r2, #10
 8002302:	2208      	moveq	r2, #8
 8002304:	4852      	ldr	r0, [pc, #328]	; (8002450 <_printf_i+0x21c>)
 8002306:	2100      	movs	r1, #0
 8002308:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800230c:	6865      	ldr	r5, [r4, #4]
 800230e:	2d00      	cmp	r5, #0
 8002310:	60a5      	str	r5, [r4, #8]
 8002312:	f2c0 8095 	blt.w	8002440 <_printf_i+0x20c>
 8002316:	6821      	ldr	r1, [r4, #0]
 8002318:	f021 0104 	bic.w	r1, r1, #4
 800231c:	6021      	str	r1, [r4, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d13d      	bne.n	800239e <_printf_i+0x16a>
 8002322:	2d00      	cmp	r5, #0
 8002324:	f040 808e 	bne.w	8002444 <_printf_i+0x210>
 8002328:	4665      	mov	r5, ip
 800232a:	2a08      	cmp	r2, #8
 800232c:	d10b      	bne.n	8002346 <_printf_i+0x112>
 800232e:	6823      	ldr	r3, [r4, #0]
 8002330:	07db      	lsls	r3, r3, #31
 8002332:	d508      	bpl.n	8002346 <_printf_i+0x112>
 8002334:	6923      	ldr	r3, [r4, #16]
 8002336:	6862      	ldr	r2, [r4, #4]
 8002338:	429a      	cmp	r2, r3
 800233a:	bfde      	ittt	le
 800233c:	2330      	movle	r3, #48	; 0x30
 800233e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002342:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002346:	ebac 0305 	sub.w	r3, ip, r5
 800234a:	6123      	str	r3, [r4, #16]
 800234c:	f8cd 8000 	str.w	r8, [sp]
 8002350:	463b      	mov	r3, r7
 8002352:	aa03      	add	r2, sp, #12
 8002354:	4621      	mov	r1, r4
 8002356:	4630      	mov	r0, r6
 8002358:	f7ff fef6 	bl	8002148 <_printf_common>
 800235c:	3001      	adds	r0, #1
 800235e:	d14d      	bne.n	80023fc <_printf_i+0x1c8>
 8002360:	f04f 30ff 	mov.w	r0, #4294967295
 8002364:	b005      	add	sp, #20
 8002366:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800236a:	4839      	ldr	r0, [pc, #228]	; (8002450 <_printf_i+0x21c>)
 800236c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002370:	6813      	ldr	r3, [r2, #0]
 8002372:	6821      	ldr	r1, [r4, #0]
 8002374:	1d1d      	adds	r5, r3, #4
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6015      	str	r5, [r2, #0]
 800237a:	060a      	lsls	r2, r1, #24
 800237c:	d50b      	bpl.n	8002396 <_printf_i+0x162>
 800237e:	07ca      	lsls	r2, r1, #31
 8002380:	bf44      	itt	mi
 8002382:	f041 0120 	orrmi.w	r1, r1, #32
 8002386:	6021      	strmi	r1, [r4, #0]
 8002388:	b91b      	cbnz	r3, 8002392 <_printf_i+0x15e>
 800238a:	6822      	ldr	r2, [r4, #0]
 800238c:	f022 0220 	bic.w	r2, r2, #32
 8002390:	6022      	str	r2, [r4, #0]
 8002392:	2210      	movs	r2, #16
 8002394:	e7b7      	b.n	8002306 <_printf_i+0xd2>
 8002396:	064d      	lsls	r5, r1, #25
 8002398:	bf48      	it	mi
 800239a:	b29b      	uxthmi	r3, r3
 800239c:	e7ef      	b.n	800237e <_printf_i+0x14a>
 800239e:	4665      	mov	r5, ip
 80023a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80023a4:	fb02 3311 	mls	r3, r2, r1, r3
 80023a8:	5cc3      	ldrb	r3, [r0, r3]
 80023aa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80023ae:	460b      	mov	r3, r1
 80023b0:	2900      	cmp	r1, #0
 80023b2:	d1f5      	bne.n	80023a0 <_printf_i+0x16c>
 80023b4:	e7b9      	b.n	800232a <_printf_i+0xf6>
 80023b6:	6813      	ldr	r3, [r2, #0]
 80023b8:	6825      	ldr	r5, [r4, #0]
 80023ba:	1d18      	adds	r0, r3, #4
 80023bc:	6961      	ldr	r1, [r4, #20]
 80023be:	6010      	str	r0, [r2, #0]
 80023c0:	0628      	lsls	r0, r5, #24
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	d501      	bpl.n	80023ca <_printf_i+0x196>
 80023c6:	6019      	str	r1, [r3, #0]
 80023c8:	e002      	b.n	80023d0 <_printf_i+0x19c>
 80023ca:	066a      	lsls	r2, r5, #25
 80023cc:	d5fb      	bpl.n	80023c6 <_printf_i+0x192>
 80023ce:	8019      	strh	r1, [r3, #0]
 80023d0:	2300      	movs	r3, #0
 80023d2:	4665      	mov	r5, ip
 80023d4:	6123      	str	r3, [r4, #16]
 80023d6:	e7b9      	b.n	800234c <_printf_i+0x118>
 80023d8:	6813      	ldr	r3, [r2, #0]
 80023da:	1d19      	adds	r1, r3, #4
 80023dc:	6011      	str	r1, [r2, #0]
 80023de:	681d      	ldr	r5, [r3, #0]
 80023e0:	6862      	ldr	r2, [r4, #4]
 80023e2:	2100      	movs	r1, #0
 80023e4:	4628      	mov	r0, r5
 80023e6:	f000 fa93 	bl	8002910 <memchr>
 80023ea:	b108      	cbz	r0, 80023f0 <_printf_i+0x1bc>
 80023ec:	1b40      	subs	r0, r0, r5
 80023ee:	6060      	str	r0, [r4, #4]
 80023f0:	6863      	ldr	r3, [r4, #4]
 80023f2:	6123      	str	r3, [r4, #16]
 80023f4:	2300      	movs	r3, #0
 80023f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80023fa:	e7a7      	b.n	800234c <_printf_i+0x118>
 80023fc:	6923      	ldr	r3, [r4, #16]
 80023fe:	462a      	mov	r2, r5
 8002400:	4639      	mov	r1, r7
 8002402:	4630      	mov	r0, r6
 8002404:	47c0      	blx	r8
 8002406:	3001      	adds	r0, #1
 8002408:	d0aa      	beq.n	8002360 <_printf_i+0x12c>
 800240a:	6823      	ldr	r3, [r4, #0]
 800240c:	079b      	lsls	r3, r3, #30
 800240e:	d413      	bmi.n	8002438 <_printf_i+0x204>
 8002410:	68e0      	ldr	r0, [r4, #12]
 8002412:	9b03      	ldr	r3, [sp, #12]
 8002414:	4298      	cmp	r0, r3
 8002416:	bfb8      	it	lt
 8002418:	4618      	movlt	r0, r3
 800241a:	e7a3      	b.n	8002364 <_printf_i+0x130>
 800241c:	2301      	movs	r3, #1
 800241e:	464a      	mov	r2, r9
 8002420:	4639      	mov	r1, r7
 8002422:	4630      	mov	r0, r6
 8002424:	47c0      	blx	r8
 8002426:	3001      	adds	r0, #1
 8002428:	d09a      	beq.n	8002360 <_printf_i+0x12c>
 800242a:	3501      	adds	r5, #1
 800242c:	68e3      	ldr	r3, [r4, #12]
 800242e:	9a03      	ldr	r2, [sp, #12]
 8002430:	1a9b      	subs	r3, r3, r2
 8002432:	42ab      	cmp	r3, r5
 8002434:	dcf2      	bgt.n	800241c <_printf_i+0x1e8>
 8002436:	e7eb      	b.n	8002410 <_printf_i+0x1dc>
 8002438:	2500      	movs	r5, #0
 800243a:	f104 0919 	add.w	r9, r4, #25
 800243e:	e7f5      	b.n	800242c <_printf_i+0x1f8>
 8002440:	2b00      	cmp	r3, #0
 8002442:	d1ac      	bne.n	800239e <_printf_i+0x16a>
 8002444:	7803      	ldrb	r3, [r0, #0]
 8002446:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800244a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800244e:	e76c      	b.n	800232a <_printf_i+0xf6>
 8002450:	08002bb5 	.word	0x08002bb5
 8002454:	08002bc6 	.word	0x08002bc6

08002458 <_sbrk_r>:
 8002458:	b538      	push	{r3, r4, r5, lr}
 800245a:	2300      	movs	r3, #0
 800245c:	4c05      	ldr	r4, [pc, #20]	; (8002474 <_sbrk_r+0x1c>)
 800245e:	4605      	mov	r5, r0
 8002460:	4608      	mov	r0, r1
 8002462:	6023      	str	r3, [r4, #0]
 8002464:	f7fe f89c 	bl	80005a0 <_sbrk>
 8002468:	1c43      	adds	r3, r0, #1
 800246a:	d102      	bne.n	8002472 <_sbrk_r+0x1a>
 800246c:	6823      	ldr	r3, [r4, #0]
 800246e:	b103      	cbz	r3, 8002472 <_sbrk_r+0x1a>
 8002470:	602b      	str	r3, [r5, #0]
 8002472:	bd38      	pop	{r3, r4, r5, pc}
 8002474:	2000010c 	.word	0x2000010c

08002478 <__sread>:
 8002478:	b510      	push	{r4, lr}
 800247a:	460c      	mov	r4, r1
 800247c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002480:	f000 faec 	bl	8002a5c <_read_r>
 8002484:	2800      	cmp	r0, #0
 8002486:	bfab      	itete	ge
 8002488:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800248a:	89a3      	ldrhlt	r3, [r4, #12]
 800248c:	181b      	addge	r3, r3, r0
 800248e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002492:	bfac      	ite	ge
 8002494:	6563      	strge	r3, [r4, #84]	; 0x54
 8002496:	81a3      	strhlt	r3, [r4, #12]
 8002498:	bd10      	pop	{r4, pc}

0800249a <__swrite>:
 800249a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800249e:	461f      	mov	r7, r3
 80024a0:	898b      	ldrh	r3, [r1, #12]
 80024a2:	4605      	mov	r5, r0
 80024a4:	05db      	lsls	r3, r3, #23
 80024a6:	460c      	mov	r4, r1
 80024a8:	4616      	mov	r6, r2
 80024aa:	d505      	bpl.n	80024b8 <__swrite+0x1e>
 80024ac:	2302      	movs	r3, #2
 80024ae:	2200      	movs	r2, #0
 80024b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024b4:	f000 f9b6 	bl	8002824 <_lseek_r>
 80024b8:	89a3      	ldrh	r3, [r4, #12]
 80024ba:	4632      	mov	r2, r6
 80024bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80024c0:	81a3      	strh	r3, [r4, #12]
 80024c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80024c6:	463b      	mov	r3, r7
 80024c8:	4628      	mov	r0, r5
 80024ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80024ce:	f000 b869 	b.w	80025a4 <_write_r>

080024d2 <__sseek>:
 80024d2:	b510      	push	{r4, lr}
 80024d4:	460c      	mov	r4, r1
 80024d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024da:	f000 f9a3 	bl	8002824 <_lseek_r>
 80024de:	1c43      	adds	r3, r0, #1
 80024e0:	89a3      	ldrh	r3, [r4, #12]
 80024e2:	bf15      	itete	ne
 80024e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80024e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80024ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80024ee:	81a3      	strheq	r3, [r4, #12]
 80024f0:	bf18      	it	ne
 80024f2:	81a3      	strhne	r3, [r4, #12]
 80024f4:	bd10      	pop	{r4, pc}

080024f6 <__sclose>:
 80024f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024fa:	f000 b8d3 	b.w	80026a4 <_close_r>
	...

08002500 <__swbuf_r>:
 8002500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002502:	460e      	mov	r6, r1
 8002504:	4614      	mov	r4, r2
 8002506:	4605      	mov	r5, r0
 8002508:	b118      	cbz	r0, 8002512 <__swbuf_r+0x12>
 800250a:	6983      	ldr	r3, [r0, #24]
 800250c:	b90b      	cbnz	r3, 8002512 <__swbuf_r+0x12>
 800250e:	f7ff faa7 	bl	8001a60 <__sinit>
 8002512:	4b21      	ldr	r3, [pc, #132]	; (8002598 <__swbuf_r+0x98>)
 8002514:	429c      	cmp	r4, r3
 8002516:	d12a      	bne.n	800256e <__swbuf_r+0x6e>
 8002518:	686c      	ldr	r4, [r5, #4]
 800251a:	69a3      	ldr	r3, [r4, #24]
 800251c:	60a3      	str	r3, [r4, #8]
 800251e:	89a3      	ldrh	r3, [r4, #12]
 8002520:	071a      	lsls	r2, r3, #28
 8002522:	d52e      	bpl.n	8002582 <__swbuf_r+0x82>
 8002524:	6923      	ldr	r3, [r4, #16]
 8002526:	b363      	cbz	r3, 8002582 <__swbuf_r+0x82>
 8002528:	6923      	ldr	r3, [r4, #16]
 800252a:	6820      	ldr	r0, [r4, #0]
 800252c:	b2f6      	uxtb	r6, r6
 800252e:	1ac0      	subs	r0, r0, r3
 8002530:	6963      	ldr	r3, [r4, #20]
 8002532:	4637      	mov	r7, r6
 8002534:	4283      	cmp	r3, r0
 8002536:	dc04      	bgt.n	8002542 <__swbuf_r+0x42>
 8002538:	4621      	mov	r1, r4
 800253a:	4628      	mov	r0, r5
 800253c:	f000 f948 	bl	80027d0 <_fflush_r>
 8002540:	bb28      	cbnz	r0, 800258e <__swbuf_r+0x8e>
 8002542:	68a3      	ldr	r3, [r4, #8]
 8002544:	3001      	adds	r0, #1
 8002546:	3b01      	subs	r3, #1
 8002548:	60a3      	str	r3, [r4, #8]
 800254a:	6823      	ldr	r3, [r4, #0]
 800254c:	1c5a      	adds	r2, r3, #1
 800254e:	6022      	str	r2, [r4, #0]
 8002550:	701e      	strb	r6, [r3, #0]
 8002552:	6963      	ldr	r3, [r4, #20]
 8002554:	4283      	cmp	r3, r0
 8002556:	d004      	beq.n	8002562 <__swbuf_r+0x62>
 8002558:	89a3      	ldrh	r3, [r4, #12]
 800255a:	07db      	lsls	r3, r3, #31
 800255c:	d519      	bpl.n	8002592 <__swbuf_r+0x92>
 800255e:	2e0a      	cmp	r6, #10
 8002560:	d117      	bne.n	8002592 <__swbuf_r+0x92>
 8002562:	4621      	mov	r1, r4
 8002564:	4628      	mov	r0, r5
 8002566:	f000 f933 	bl	80027d0 <_fflush_r>
 800256a:	b190      	cbz	r0, 8002592 <__swbuf_r+0x92>
 800256c:	e00f      	b.n	800258e <__swbuf_r+0x8e>
 800256e:	4b0b      	ldr	r3, [pc, #44]	; (800259c <__swbuf_r+0x9c>)
 8002570:	429c      	cmp	r4, r3
 8002572:	d101      	bne.n	8002578 <__swbuf_r+0x78>
 8002574:	68ac      	ldr	r4, [r5, #8]
 8002576:	e7d0      	b.n	800251a <__swbuf_r+0x1a>
 8002578:	4b09      	ldr	r3, [pc, #36]	; (80025a0 <__swbuf_r+0xa0>)
 800257a:	429c      	cmp	r4, r3
 800257c:	bf08      	it	eq
 800257e:	68ec      	ldreq	r4, [r5, #12]
 8002580:	e7cb      	b.n	800251a <__swbuf_r+0x1a>
 8002582:	4621      	mov	r1, r4
 8002584:	4628      	mov	r0, r5
 8002586:	f000 f81f 	bl	80025c8 <__swsetup_r>
 800258a:	2800      	cmp	r0, #0
 800258c:	d0cc      	beq.n	8002528 <__swbuf_r+0x28>
 800258e:	f04f 37ff 	mov.w	r7, #4294967295
 8002592:	4638      	mov	r0, r7
 8002594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002596:	bf00      	nop
 8002598:	08002b64 	.word	0x08002b64
 800259c:	08002b84 	.word	0x08002b84
 80025a0:	08002b44 	.word	0x08002b44

080025a4 <_write_r>:
 80025a4:	b538      	push	{r3, r4, r5, lr}
 80025a6:	4605      	mov	r5, r0
 80025a8:	4608      	mov	r0, r1
 80025aa:	4611      	mov	r1, r2
 80025ac:	2200      	movs	r2, #0
 80025ae:	4c05      	ldr	r4, [pc, #20]	; (80025c4 <_write_r+0x20>)
 80025b0:	6022      	str	r2, [r4, #0]
 80025b2:	461a      	mov	r2, r3
 80025b4:	f7fd fdca 	bl	800014c <_write>
 80025b8:	1c43      	adds	r3, r0, #1
 80025ba:	d102      	bne.n	80025c2 <_write_r+0x1e>
 80025bc:	6823      	ldr	r3, [r4, #0]
 80025be:	b103      	cbz	r3, 80025c2 <_write_r+0x1e>
 80025c0:	602b      	str	r3, [r5, #0]
 80025c2:	bd38      	pop	{r3, r4, r5, pc}
 80025c4:	2000010c 	.word	0x2000010c

080025c8 <__swsetup_r>:
 80025c8:	4b32      	ldr	r3, [pc, #200]	; (8002694 <__swsetup_r+0xcc>)
 80025ca:	b570      	push	{r4, r5, r6, lr}
 80025cc:	681d      	ldr	r5, [r3, #0]
 80025ce:	4606      	mov	r6, r0
 80025d0:	460c      	mov	r4, r1
 80025d2:	b125      	cbz	r5, 80025de <__swsetup_r+0x16>
 80025d4:	69ab      	ldr	r3, [r5, #24]
 80025d6:	b913      	cbnz	r3, 80025de <__swsetup_r+0x16>
 80025d8:	4628      	mov	r0, r5
 80025da:	f7ff fa41 	bl	8001a60 <__sinit>
 80025de:	4b2e      	ldr	r3, [pc, #184]	; (8002698 <__swsetup_r+0xd0>)
 80025e0:	429c      	cmp	r4, r3
 80025e2:	d10f      	bne.n	8002604 <__swsetup_r+0x3c>
 80025e4:	686c      	ldr	r4, [r5, #4]
 80025e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	0715      	lsls	r5, r2, #28
 80025ee:	d42c      	bmi.n	800264a <__swsetup_r+0x82>
 80025f0:	06d0      	lsls	r0, r2, #27
 80025f2:	d411      	bmi.n	8002618 <__swsetup_r+0x50>
 80025f4:	2209      	movs	r2, #9
 80025f6:	6032      	str	r2, [r6, #0]
 80025f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025fc:	81a3      	strh	r3, [r4, #12]
 80025fe:	f04f 30ff 	mov.w	r0, #4294967295
 8002602:	e03e      	b.n	8002682 <__swsetup_r+0xba>
 8002604:	4b25      	ldr	r3, [pc, #148]	; (800269c <__swsetup_r+0xd4>)
 8002606:	429c      	cmp	r4, r3
 8002608:	d101      	bne.n	800260e <__swsetup_r+0x46>
 800260a:	68ac      	ldr	r4, [r5, #8]
 800260c:	e7eb      	b.n	80025e6 <__swsetup_r+0x1e>
 800260e:	4b24      	ldr	r3, [pc, #144]	; (80026a0 <__swsetup_r+0xd8>)
 8002610:	429c      	cmp	r4, r3
 8002612:	bf08      	it	eq
 8002614:	68ec      	ldreq	r4, [r5, #12]
 8002616:	e7e6      	b.n	80025e6 <__swsetup_r+0x1e>
 8002618:	0751      	lsls	r1, r2, #29
 800261a:	d512      	bpl.n	8002642 <__swsetup_r+0x7a>
 800261c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800261e:	b141      	cbz	r1, 8002632 <__swsetup_r+0x6a>
 8002620:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002624:	4299      	cmp	r1, r3
 8002626:	d002      	beq.n	800262e <__swsetup_r+0x66>
 8002628:	4630      	mov	r0, r6
 800262a:	f000 f9a5 	bl	8002978 <_free_r>
 800262e:	2300      	movs	r3, #0
 8002630:	6363      	str	r3, [r4, #52]	; 0x34
 8002632:	89a3      	ldrh	r3, [r4, #12]
 8002634:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002638:	81a3      	strh	r3, [r4, #12]
 800263a:	2300      	movs	r3, #0
 800263c:	6063      	str	r3, [r4, #4]
 800263e:	6923      	ldr	r3, [r4, #16]
 8002640:	6023      	str	r3, [r4, #0]
 8002642:	89a3      	ldrh	r3, [r4, #12]
 8002644:	f043 0308 	orr.w	r3, r3, #8
 8002648:	81a3      	strh	r3, [r4, #12]
 800264a:	6923      	ldr	r3, [r4, #16]
 800264c:	b94b      	cbnz	r3, 8002662 <__swsetup_r+0x9a>
 800264e:	89a3      	ldrh	r3, [r4, #12]
 8002650:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002658:	d003      	beq.n	8002662 <__swsetup_r+0x9a>
 800265a:	4621      	mov	r1, r4
 800265c:	4630      	mov	r0, r6
 800265e:	f000 f917 	bl	8002890 <__smakebuf_r>
 8002662:	89a2      	ldrh	r2, [r4, #12]
 8002664:	f012 0301 	ands.w	r3, r2, #1
 8002668:	d00c      	beq.n	8002684 <__swsetup_r+0xbc>
 800266a:	2300      	movs	r3, #0
 800266c:	60a3      	str	r3, [r4, #8]
 800266e:	6963      	ldr	r3, [r4, #20]
 8002670:	425b      	negs	r3, r3
 8002672:	61a3      	str	r3, [r4, #24]
 8002674:	6923      	ldr	r3, [r4, #16]
 8002676:	b953      	cbnz	r3, 800268e <__swsetup_r+0xc6>
 8002678:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800267c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002680:	d1ba      	bne.n	80025f8 <__swsetup_r+0x30>
 8002682:	bd70      	pop	{r4, r5, r6, pc}
 8002684:	0792      	lsls	r2, r2, #30
 8002686:	bf58      	it	pl
 8002688:	6963      	ldrpl	r3, [r4, #20]
 800268a:	60a3      	str	r3, [r4, #8]
 800268c:	e7f2      	b.n	8002674 <__swsetup_r+0xac>
 800268e:	2000      	movs	r0, #0
 8002690:	e7f7      	b.n	8002682 <__swsetup_r+0xba>
 8002692:	bf00      	nop
 8002694:	2000000c 	.word	0x2000000c
 8002698:	08002b64 	.word	0x08002b64
 800269c:	08002b84 	.word	0x08002b84
 80026a0:	08002b44 	.word	0x08002b44

080026a4 <_close_r>:
 80026a4:	b538      	push	{r3, r4, r5, lr}
 80026a6:	2300      	movs	r3, #0
 80026a8:	4c05      	ldr	r4, [pc, #20]	; (80026c0 <_close_r+0x1c>)
 80026aa:	4605      	mov	r5, r0
 80026ac:	4608      	mov	r0, r1
 80026ae:	6023      	str	r3, [r4, #0]
 80026b0:	f7fd ff45 	bl	800053e <_close>
 80026b4:	1c43      	adds	r3, r0, #1
 80026b6:	d102      	bne.n	80026be <_close_r+0x1a>
 80026b8:	6823      	ldr	r3, [r4, #0]
 80026ba:	b103      	cbz	r3, 80026be <_close_r+0x1a>
 80026bc:	602b      	str	r3, [r5, #0]
 80026be:	bd38      	pop	{r3, r4, r5, pc}
 80026c0:	2000010c 	.word	0x2000010c

080026c4 <__sflush_r>:
 80026c4:	898a      	ldrh	r2, [r1, #12]
 80026c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026ca:	4605      	mov	r5, r0
 80026cc:	0710      	lsls	r0, r2, #28
 80026ce:	460c      	mov	r4, r1
 80026d0:	d458      	bmi.n	8002784 <__sflush_r+0xc0>
 80026d2:	684b      	ldr	r3, [r1, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	dc05      	bgt.n	80026e4 <__sflush_r+0x20>
 80026d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80026da:	2b00      	cmp	r3, #0
 80026dc:	dc02      	bgt.n	80026e4 <__sflush_r+0x20>
 80026de:	2000      	movs	r0, #0
 80026e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80026e6:	2e00      	cmp	r6, #0
 80026e8:	d0f9      	beq.n	80026de <__sflush_r+0x1a>
 80026ea:	2300      	movs	r3, #0
 80026ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80026f0:	682f      	ldr	r7, [r5, #0]
 80026f2:	6a21      	ldr	r1, [r4, #32]
 80026f4:	602b      	str	r3, [r5, #0]
 80026f6:	d032      	beq.n	800275e <__sflush_r+0x9a>
 80026f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80026fa:	89a3      	ldrh	r3, [r4, #12]
 80026fc:	075a      	lsls	r2, r3, #29
 80026fe:	d505      	bpl.n	800270c <__sflush_r+0x48>
 8002700:	6863      	ldr	r3, [r4, #4]
 8002702:	1ac0      	subs	r0, r0, r3
 8002704:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002706:	b10b      	cbz	r3, 800270c <__sflush_r+0x48>
 8002708:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800270a:	1ac0      	subs	r0, r0, r3
 800270c:	2300      	movs	r3, #0
 800270e:	4602      	mov	r2, r0
 8002710:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002712:	6a21      	ldr	r1, [r4, #32]
 8002714:	4628      	mov	r0, r5
 8002716:	47b0      	blx	r6
 8002718:	1c43      	adds	r3, r0, #1
 800271a:	89a3      	ldrh	r3, [r4, #12]
 800271c:	d106      	bne.n	800272c <__sflush_r+0x68>
 800271e:	6829      	ldr	r1, [r5, #0]
 8002720:	291d      	cmp	r1, #29
 8002722:	d848      	bhi.n	80027b6 <__sflush_r+0xf2>
 8002724:	4a29      	ldr	r2, [pc, #164]	; (80027cc <__sflush_r+0x108>)
 8002726:	40ca      	lsrs	r2, r1
 8002728:	07d6      	lsls	r6, r2, #31
 800272a:	d544      	bpl.n	80027b6 <__sflush_r+0xf2>
 800272c:	2200      	movs	r2, #0
 800272e:	6062      	str	r2, [r4, #4]
 8002730:	6922      	ldr	r2, [r4, #16]
 8002732:	04d9      	lsls	r1, r3, #19
 8002734:	6022      	str	r2, [r4, #0]
 8002736:	d504      	bpl.n	8002742 <__sflush_r+0x7e>
 8002738:	1c42      	adds	r2, r0, #1
 800273a:	d101      	bne.n	8002740 <__sflush_r+0x7c>
 800273c:	682b      	ldr	r3, [r5, #0]
 800273e:	b903      	cbnz	r3, 8002742 <__sflush_r+0x7e>
 8002740:	6560      	str	r0, [r4, #84]	; 0x54
 8002742:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002744:	602f      	str	r7, [r5, #0]
 8002746:	2900      	cmp	r1, #0
 8002748:	d0c9      	beq.n	80026de <__sflush_r+0x1a>
 800274a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800274e:	4299      	cmp	r1, r3
 8002750:	d002      	beq.n	8002758 <__sflush_r+0x94>
 8002752:	4628      	mov	r0, r5
 8002754:	f000 f910 	bl	8002978 <_free_r>
 8002758:	2000      	movs	r0, #0
 800275a:	6360      	str	r0, [r4, #52]	; 0x34
 800275c:	e7c0      	b.n	80026e0 <__sflush_r+0x1c>
 800275e:	2301      	movs	r3, #1
 8002760:	4628      	mov	r0, r5
 8002762:	47b0      	blx	r6
 8002764:	1c41      	adds	r1, r0, #1
 8002766:	d1c8      	bne.n	80026fa <__sflush_r+0x36>
 8002768:	682b      	ldr	r3, [r5, #0]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0c5      	beq.n	80026fa <__sflush_r+0x36>
 800276e:	2b1d      	cmp	r3, #29
 8002770:	d001      	beq.n	8002776 <__sflush_r+0xb2>
 8002772:	2b16      	cmp	r3, #22
 8002774:	d101      	bne.n	800277a <__sflush_r+0xb6>
 8002776:	602f      	str	r7, [r5, #0]
 8002778:	e7b1      	b.n	80026de <__sflush_r+0x1a>
 800277a:	89a3      	ldrh	r3, [r4, #12]
 800277c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002780:	81a3      	strh	r3, [r4, #12]
 8002782:	e7ad      	b.n	80026e0 <__sflush_r+0x1c>
 8002784:	690f      	ldr	r7, [r1, #16]
 8002786:	2f00      	cmp	r7, #0
 8002788:	d0a9      	beq.n	80026de <__sflush_r+0x1a>
 800278a:	0793      	lsls	r3, r2, #30
 800278c:	bf18      	it	ne
 800278e:	2300      	movne	r3, #0
 8002790:	680e      	ldr	r6, [r1, #0]
 8002792:	bf08      	it	eq
 8002794:	694b      	ldreq	r3, [r1, #20]
 8002796:	eba6 0807 	sub.w	r8, r6, r7
 800279a:	600f      	str	r7, [r1, #0]
 800279c:	608b      	str	r3, [r1, #8]
 800279e:	f1b8 0f00 	cmp.w	r8, #0
 80027a2:	dd9c      	ble.n	80026de <__sflush_r+0x1a>
 80027a4:	4643      	mov	r3, r8
 80027a6:	463a      	mov	r2, r7
 80027a8:	6a21      	ldr	r1, [r4, #32]
 80027aa:	4628      	mov	r0, r5
 80027ac:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80027ae:	47b0      	blx	r6
 80027b0:	2800      	cmp	r0, #0
 80027b2:	dc06      	bgt.n	80027c2 <__sflush_r+0xfe>
 80027b4:	89a3      	ldrh	r3, [r4, #12]
 80027b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027ba:	81a3      	strh	r3, [r4, #12]
 80027bc:	f04f 30ff 	mov.w	r0, #4294967295
 80027c0:	e78e      	b.n	80026e0 <__sflush_r+0x1c>
 80027c2:	4407      	add	r7, r0
 80027c4:	eba8 0800 	sub.w	r8, r8, r0
 80027c8:	e7e9      	b.n	800279e <__sflush_r+0xda>
 80027ca:	bf00      	nop
 80027cc:	20400001 	.word	0x20400001

080027d0 <_fflush_r>:
 80027d0:	b538      	push	{r3, r4, r5, lr}
 80027d2:	690b      	ldr	r3, [r1, #16]
 80027d4:	4605      	mov	r5, r0
 80027d6:	460c      	mov	r4, r1
 80027d8:	b1db      	cbz	r3, 8002812 <_fflush_r+0x42>
 80027da:	b118      	cbz	r0, 80027e4 <_fflush_r+0x14>
 80027dc:	6983      	ldr	r3, [r0, #24]
 80027de:	b90b      	cbnz	r3, 80027e4 <_fflush_r+0x14>
 80027e0:	f7ff f93e 	bl	8001a60 <__sinit>
 80027e4:	4b0c      	ldr	r3, [pc, #48]	; (8002818 <_fflush_r+0x48>)
 80027e6:	429c      	cmp	r4, r3
 80027e8:	d109      	bne.n	80027fe <_fflush_r+0x2e>
 80027ea:	686c      	ldr	r4, [r5, #4]
 80027ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027f0:	b17b      	cbz	r3, 8002812 <_fflush_r+0x42>
 80027f2:	4621      	mov	r1, r4
 80027f4:	4628      	mov	r0, r5
 80027f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80027fa:	f7ff bf63 	b.w	80026c4 <__sflush_r>
 80027fe:	4b07      	ldr	r3, [pc, #28]	; (800281c <_fflush_r+0x4c>)
 8002800:	429c      	cmp	r4, r3
 8002802:	d101      	bne.n	8002808 <_fflush_r+0x38>
 8002804:	68ac      	ldr	r4, [r5, #8]
 8002806:	e7f1      	b.n	80027ec <_fflush_r+0x1c>
 8002808:	4b05      	ldr	r3, [pc, #20]	; (8002820 <_fflush_r+0x50>)
 800280a:	429c      	cmp	r4, r3
 800280c:	bf08      	it	eq
 800280e:	68ec      	ldreq	r4, [r5, #12]
 8002810:	e7ec      	b.n	80027ec <_fflush_r+0x1c>
 8002812:	2000      	movs	r0, #0
 8002814:	bd38      	pop	{r3, r4, r5, pc}
 8002816:	bf00      	nop
 8002818:	08002b64 	.word	0x08002b64
 800281c:	08002b84 	.word	0x08002b84
 8002820:	08002b44 	.word	0x08002b44

08002824 <_lseek_r>:
 8002824:	b538      	push	{r3, r4, r5, lr}
 8002826:	4605      	mov	r5, r0
 8002828:	4608      	mov	r0, r1
 800282a:	4611      	mov	r1, r2
 800282c:	2200      	movs	r2, #0
 800282e:	4c05      	ldr	r4, [pc, #20]	; (8002844 <_lseek_r+0x20>)
 8002830:	6022      	str	r2, [r4, #0]
 8002832:	461a      	mov	r2, r3
 8002834:	f7fd fea7 	bl	8000586 <_lseek>
 8002838:	1c43      	adds	r3, r0, #1
 800283a:	d102      	bne.n	8002842 <_lseek_r+0x1e>
 800283c:	6823      	ldr	r3, [r4, #0]
 800283e:	b103      	cbz	r3, 8002842 <_lseek_r+0x1e>
 8002840:	602b      	str	r3, [r5, #0]
 8002842:	bd38      	pop	{r3, r4, r5, pc}
 8002844:	2000010c 	.word	0x2000010c

08002848 <__swhatbuf_r>:
 8002848:	b570      	push	{r4, r5, r6, lr}
 800284a:	460e      	mov	r6, r1
 800284c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002850:	b096      	sub	sp, #88	; 0x58
 8002852:	2900      	cmp	r1, #0
 8002854:	4614      	mov	r4, r2
 8002856:	461d      	mov	r5, r3
 8002858:	da07      	bge.n	800286a <__swhatbuf_r+0x22>
 800285a:	2300      	movs	r3, #0
 800285c:	602b      	str	r3, [r5, #0]
 800285e:	89b3      	ldrh	r3, [r6, #12]
 8002860:	061a      	lsls	r2, r3, #24
 8002862:	d410      	bmi.n	8002886 <__swhatbuf_r+0x3e>
 8002864:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002868:	e00e      	b.n	8002888 <__swhatbuf_r+0x40>
 800286a:	466a      	mov	r2, sp
 800286c:	f000 f908 	bl	8002a80 <_fstat_r>
 8002870:	2800      	cmp	r0, #0
 8002872:	dbf2      	blt.n	800285a <__swhatbuf_r+0x12>
 8002874:	9a01      	ldr	r2, [sp, #4]
 8002876:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800287a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800287e:	425a      	negs	r2, r3
 8002880:	415a      	adcs	r2, r3
 8002882:	602a      	str	r2, [r5, #0]
 8002884:	e7ee      	b.n	8002864 <__swhatbuf_r+0x1c>
 8002886:	2340      	movs	r3, #64	; 0x40
 8002888:	2000      	movs	r0, #0
 800288a:	6023      	str	r3, [r4, #0]
 800288c:	b016      	add	sp, #88	; 0x58
 800288e:	bd70      	pop	{r4, r5, r6, pc}

08002890 <__smakebuf_r>:
 8002890:	898b      	ldrh	r3, [r1, #12]
 8002892:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002894:	079d      	lsls	r5, r3, #30
 8002896:	4606      	mov	r6, r0
 8002898:	460c      	mov	r4, r1
 800289a:	d507      	bpl.n	80028ac <__smakebuf_r+0x1c>
 800289c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80028a0:	6023      	str	r3, [r4, #0]
 80028a2:	6123      	str	r3, [r4, #16]
 80028a4:	2301      	movs	r3, #1
 80028a6:	6163      	str	r3, [r4, #20]
 80028a8:	b002      	add	sp, #8
 80028aa:	bd70      	pop	{r4, r5, r6, pc}
 80028ac:	ab01      	add	r3, sp, #4
 80028ae:	466a      	mov	r2, sp
 80028b0:	f7ff ffca 	bl	8002848 <__swhatbuf_r>
 80028b4:	9900      	ldr	r1, [sp, #0]
 80028b6:	4605      	mov	r5, r0
 80028b8:	4630      	mov	r0, r6
 80028ba:	f7ff f95b 	bl	8001b74 <_malloc_r>
 80028be:	b948      	cbnz	r0, 80028d4 <__smakebuf_r+0x44>
 80028c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80028c4:	059a      	lsls	r2, r3, #22
 80028c6:	d4ef      	bmi.n	80028a8 <__smakebuf_r+0x18>
 80028c8:	f023 0303 	bic.w	r3, r3, #3
 80028cc:	f043 0302 	orr.w	r3, r3, #2
 80028d0:	81a3      	strh	r3, [r4, #12]
 80028d2:	e7e3      	b.n	800289c <__smakebuf_r+0xc>
 80028d4:	4b0d      	ldr	r3, [pc, #52]	; (800290c <__smakebuf_r+0x7c>)
 80028d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80028d8:	89a3      	ldrh	r3, [r4, #12]
 80028da:	6020      	str	r0, [r4, #0]
 80028dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028e0:	81a3      	strh	r3, [r4, #12]
 80028e2:	9b00      	ldr	r3, [sp, #0]
 80028e4:	6120      	str	r0, [r4, #16]
 80028e6:	6163      	str	r3, [r4, #20]
 80028e8:	9b01      	ldr	r3, [sp, #4]
 80028ea:	b15b      	cbz	r3, 8002904 <__smakebuf_r+0x74>
 80028ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80028f0:	4630      	mov	r0, r6
 80028f2:	f000 f8d7 	bl	8002aa4 <_isatty_r>
 80028f6:	b128      	cbz	r0, 8002904 <__smakebuf_r+0x74>
 80028f8:	89a3      	ldrh	r3, [r4, #12]
 80028fa:	f023 0303 	bic.w	r3, r3, #3
 80028fe:	f043 0301 	orr.w	r3, r3, #1
 8002902:	81a3      	strh	r3, [r4, #12]
 8002904:	89a3      	ldrh	r3, [r4, #12]
 8002906:	431d      	orrs	r5, r3
 8002908:	81a5      	strh	r5, [r4, #12]
 800290a:	e7cd      	b.n	80028a8 <__smakebuf_r+0x18>
 800290c:	08001a29 	.word	0x08001a29

08002910 <memchr>:
 8002910:	b510      	push	{r4, lr}
 8002912:	b2c9      	uxtb	r1, r1
 8002914:	4402      	add	r2, r0
 8002916:	4290      	cmp	r0, r2
 8002918:	4603      	mov	r3, r0
 800291a:	d101      	bne.n	8002920 <memchr+0x10>
 800291c:	2300      	movs	r3, #0
 800291e:	e003      	b.n	8002928 <memchr+0x18>
 8002920:	781c      	ldrb	r4, [r3, #0]
 8002922:	3001      	adds	r0, #1
 8002924:	428c      	cmp	r4, r1
 8002926:	d1f6      	bne.n	8002916 <memchr+0x6>
 8002928:	4618      	mov	r0, r3
 800292a:	bd10      	pop	{r4, pc}

0800292c <memcpy>:
 800292c:	b510      	push	{r4, lr}
 800292e:	1e43      	subs	r3, r0, #1
 8002930:	440a      	add	r2, r1
 8002932:	4291      	cmp	r1, r2
 8002934:	d100      	bne.n	8002938 <memcpy+0xc>
 8002936:	bd10      	pop	{r4, pc}
 8002938:	f811 4b01 	ldrb.w	r4, [r1], #1
 800293c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002940:	e7f7      	b.n	8002932 <memcpy+0x6>

08002942 <memmove>:
 8002942:	4288      	cmp	r0, r1
 8002944:	b510      	push	{r4, lr}
 8002946:	eb01 0302 	add.w	r3, r1, r2
 800294a:	d807      	bhi.n	800295c <memmove+0x1a>
 800294c:	1e42      	subs	r2, r0, #1
 800294e:	4299      	cmp	r1, r3
 8002950:	d00a      	beq.n	8002968 <memmove+0x26>
 8002952:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002956:	f802 4f01 	strb.w	r4, [r2, #1]!
 800295a:	e7f8      	b.n	800294e <memmove+0xc>
 800295c:	4283      	cmp	r3, r0
 800295e:	d9f5      	bls.n	800294c <memmove+0xa>
 8002960:	1881      	adds	r1, r0, r2
 8002962:	1ad2      	subs	r2, r2, r3
 8002964:	42d3      	cmn	r3, r2
 8002966:	d100      	bne.n	800296a <memmove+0x28>
 8002968:	bd10      	pop	{r4, pc}
 800296a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800296e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002972:	e7f7      	b.n	8002964 <memmove+0x22>

08002974 <__malloc_lock>:
 8002974:	4770      	bx	lr

08002976 <__malloc_unlock>:
 8002976:	4770      	bx	lr

08002978 <_free_r>:
 8002978:	b538      	push	{r3, r4, r5, lr}
 800297a:	4605      	mov	r5, r0
 800297c:	2900      	cmp	r1, #0
 800297e:	d043      	beq.n	8002a08 <_free_r+0x90>
 8002980:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002984:	1f0c      	subs	r4, r1, #4
 8002986:	2b00      	cmp	r3, #0
 8002988:	bfb8      	it	lt
 800298a:	18e4      	addlt	r4, r4, r3
 800298c:	f7ff fff2 	bl	8002974 <__malloc_lock>
 8002990:	4a1e      	ldr	r2, [pc, #120]	; (8002a0c <_free_r+0x94>)
 8002992:	6813      	ldr	r3, [r2, #0]
 8002994:	4610      	mov	r0, r2
 8002996:	b933      	cbnz	r3, 80029a6 <_free_r+0x2e>
 8002998:	6063      	str	r3, [r4, #4]
 800299a:	6014      	str	r4, [r2, #0]
 800299c:	4628      	mov	r0, r5
 800299e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80029a2:	f7ff bfe8 	b.w	8002976 <__malloc_unlock>
 80029a6:	42a3      	cmp	r3, r4
 80029a8:	d90b      	bls.n	80029c2 <_free_r+0x4a>
 80029aa:	6821      	ldr	r1, [r4, #0]
 80029ac:	1862      	adds	r2, r4, r1
 80029ae:	4293      	cmp	r3, r2
 80029b0:	bf01      	itttt	eq
 80029b2:	681a      	ldreq	r2, [r3, #0]
 80029b4:	685b      	ldreq	r3, [r3, #4]
 80029b6:	1852      	addeq	r2, r2, r1
 80029b8:	6022      	streq	r2, [r4, #0]
 80029ba:	6063      	str	r3, [r4, #4]
 80029bc:	6004      	str	r4, [r0, #0]
 80029be:	e7ed      	b.n	800299c <_free_r+0x24>
 80029c0:	4613      	mov	r3, r2
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	b10a      	cbz	r2, 80029ca <_free_r+0x52>
 80029c6:	42a2      	cmp	r2, r4
 80029c8:	d9fa      	bls.n	80029c0 <_free_r+0x48>
 80029ca:	6819      	ldr	r1, [r3, #0]
 80029cc:	1858      	adds	r0, r3, r1
 80029ce:	42a0      	cmp	r0, r4
 80029d0:	d10b      	bne.n	80029ea <_free_r+0x72>
 80029d2:	6820      	ldr	r0, [r4, #0]
 80029d4:	4401      	add	r1, r0
 80029d6:	1858      	adds	r0, r3, r1
 80029d8:	4282      	cmp	r2, r0
 80029da:	6019      	str	r1, [r3, #0]
 80029dc:	d1de      	bne.n	800299c <_free_r+0x24>
 80029de:	6810      	ldr	r0, [r2, #0]
 80029e0:	6852      	ldr	r2, [r2, #4]
 80029e2:	4401      	add	r1, r0
 80029e4:	6019      	str	r1, [r3, #0]
 80029e6:	605a      	str	r2, [r3, #4]
 80029e8:	e7d8      	b.n	800299c <_free_r+0x24>
 80029ea:	d902      	bls.n	80029f2 <_free_r+0x7a>
 80029ec:	230c      	movs	r3, #12
 80029ee:	602b      	str	r3, [r5, #0]
 80029f0:	e7d4      	b.n	800299c <_free_r+0x24>
 80029f2:	6820      	ldr	r0, [r4, #0]
 80029f4:	1821      	adds	r1, r4, r0
 80029f6:	428a      	cmp	r2, r1
 80029f8:	bf01      	itttt	eq
 80029fa:	6811      	ldreq	r1, [r2, #0]
 80029fc:	6852      	ldreq	r2, [r2, #4]
 80029fe:	1809      	addeq	r1, r1, r0
 8002a00:	6021      	streq	r1, [r4, #0]
 8002a02:	6062      	str	r2, [r4, #4]
 8002a04:	605c      	str	r4, [r3, #4]
 8002a06:	e7c9      	b.n	800299c <_free_r+0x24>
 8002a08:	bd38      	pop	{r3, r4, r5, pc}
 8002a0a:	bf00      	nop
 8002a0c:	20000094 	.word	0x20000094

08002a10 <_realloc_r>:
 8002a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a12:	4607      	mov	r7, r0
 8002a14:	4614      	mov	r4, r2
 8002a16:	460e      	mov	r6, r1
 8002a18:	b921      	cbnz	r1, 8002a24 <_realloc_r+0x14>
 8002a1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002a1e:	4611      	mov	r1, r2
 8002a20:	f7ff b8a8 	b.w	8001b74 <_malloc_r>
 8002a24:	b922      	cbnz	r2, 8002a30 <_realloc_r+0x20>
 8002a26:	f7ff ffa7 	bl	8002978 <_free_r>
 8002a2a:	4625      	mov	r5, r4
 8002a2c:	4628      	mov	r0, r5
 8002a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a30:	f000 f848 	bl	8002ac4 <_malloc_usable_size_r>
 8002a34:	42a0      	cmp	r0, r4
 8002a36:	d20f      	bcs.n	8002a58 <_realloc_r+0x48>
 8002a38:	4621      	mov	r1, r4
 8002a3a:	4638      	mov	r0, r7
 8002a3c:	f7ff f89a 	bl	8001b74 <_malloc_r>
 8002a40:	4605      	mov	r5, r0
 8002a42:	2800      	cmp	r0, #0
 8002a44:	d0f2      	beq.n	8002a2c <_realloc_r+0x1c>
 8002a46:	4631      	mov	r1, r6
 8002a48:	4622      	mov	r2, r4
 8002a4a:	f7ff ff6f 	bl	800292c <memcpy>
 8002a4e:	4631      	mov	r1, r6
 8002a50:	4638      	mov	r0, r7
 8002a52:	f7ff ff91 	bl	8002978 <_free_r>
 8002a56:	e7e9      	b.n	8002a2c <_realloc_r+0x1c>
 8002a58:	4635      	mov	r5, r6
 8002a5a:	e7e7      	b.n	8002a2c <_realloc_r+0x1c>

08002a5c <_read_r>:
 8002a5c:	b538      	push	{r3, r4, r5, lr}
 8002a5e:	4605      	mov	r5, r0
 8002a60:	4608      	mov	r0, r1
 8002a62:	4611      	mov	r1, r2
 8002a64:	2200      	movs	r2, #0
 8002a66:	4c05      	ldr	r4, [pc, #20]	; (8002a7c <_read_r+0x20>)
 8002a68:	6022      	str	r2, [r4, #0]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	f7fd fd4a 	bl	8000504 <_read>
 8002a70:	1c43      	adds	r3, r0, #1
 8002a72:	d102      	bne.n	8002a7a <_read_r+0x1e>
 8002a74:	6823      	ldr	r3, [r4, #0]
 8002a76:	b103      	cbz	r3, 8002a7a <_read_r+0x1e>
 8002a78:	602b      	str	r3, [r5, #0]
 8002a7a:	bd38      	pop	{r3, r4, r5, pc}
 8002a7c:	2000010c 	.word	0x2000010c

08002a80 <_fstat_r>:
 8002a80:	b538      	push	{r3, r4, r5, lr}
 8002a82:	2300      	movs	r3, #0
 8002a84:	4c06      	ldr	r4, [pc, #24]	; (8002aa0 <_fstat_r+0x20>)
 8002a86:	4605      	mov	r5, r0
 8002a88:	4608      	mov	r0, r1
 8002a8a:	4611      	mov	r1, r2
 8002a8c:	6023      	str	r3, [r4, #0]
 8002a8e:	f7fd fd61 	bl	8000554 <_fstat>
 8002a92:	1c43      	adds	r3, r0, #1
 8002a94:	d102      	bne.n	8002a9c <_fstat_r+0x1c>
 8002a96:	6823      	ldr	r3, [r4, #0]
 8002a98:	b103      	cbz	r3, 8002a9c <_fstat_r+0x1c>
 8002a9a:	602b      	str	r3, [r5, #0]
 8002a9c:	bd38      	pop	{r3, r4, r5, pc}
 8002a9e:	bf00      	nop
 8002aa0:	2000010c 	.word	0x2000010c

08002aa4 <_isatty_r>:
 8002aa4:	b538      	push	{r3, r4, r5, lr}
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	4c05      	ldr	r4, [pc, #20]	; (8002ac0 <_isatty_r+0x1c>)
 8002aaa:	4605      	mov	r5, r0
 8002aac:	4608      	mov	r0, r1
 8002aae:	6023      	str	r3, [r4, #0]
 8002ab0:	f7fd fd5f 	bl	8000572 <_isatty>
 8002ab4:	1c43      	adds	r3, r0, #1
 8002ab6:	d102      	bne.n	8002abe <_isatty_r+0x1a>
 8002ab8:	6823      	ldr	r3, [r4, #0]
 8002aba:	b103      	cbz	r3, 8002abe <_isatty_r+0x1a>
 8002abc:	602b      	str	r3, [r5, #0]
 8002abe:	bd38      	pop	{r3, r4, r5, pc}
 8002ac0:	2000010c 	.word	0x2000010c

08002ac4 <_malloc_usable_size_r>:
 8002ac4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ac8:	1f18      	subs	r0, r3, #4
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	bfbc      	itt	lt
 8002ace:	580b      	ldrlt	r3, [r1, r0]
 8002ad0:	18c0      	addlt	r0, r0, r3
 8002ad2:	4770      	bx	lr

08002ad4 <_init>:
 8002ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ad6:	bf00      	nop
 8002ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ada:	bc08      	pop	{r3}
 8002adc:	469e      	mov	lr, r3
 8002ade:	4770      	bx	lr

08002ae0 <_fini>:
 8002ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ae2:	bf00      	nop
 8002ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ae6:	bc08      	pop	{r3}
 8002ae8:	469e      	mov	lr, r3
 8002aea:	4770      	bx	lr
