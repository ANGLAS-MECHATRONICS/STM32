#ifndef DRIVERS_INC_STM32F446XX_H_
#define DRIVERS_INC_STM32F446XX_H_

#include <stdint.h>
/*
  Las direcciones de memoria de los stm32 supongo que vienen del tipo "puntero void" (void *ptr)
  y Ã©stas para convertir al tipo de variable puntera a usar se hace asi.

  Ejemplo:

   void *ADDRESS_RCC = 0x40020088UL;//aqui es un puntero pero sin ningun tipo, osea no se sabe si es int*,float*,char*,etc
   uint32_t a,b; //creo una variable

  Quiero convertir esto a una variable puntera de 32 bits, para eso hago lo siguiente:

   a =  (uint32_t *)ADDRESS_RCC;//aqui obtengo la direccion de memoria del puntero de tipo uint32_t
   b = *(uint32_t *)ADDRESS_RCC;//aqui obtengo el valor que tiene dentro de esa direccion de memoria

 */


/************************************************ BUS - AHB1 ************************************************/

//////////////////////////////////////////// PERIFERICO - GPIO A ////////////////////////////////////////
#define AHB1PERIPH_BASEADDR 0x40020000UL

#define GPIOA_BASEADDR	(AHB1PERIPH_BASEADDR + 0x0000)
#define GPIOB_BASEADDR  (AHB1PERIPH_BASEADDR + 0x0400)
#define GPIOC_BASEADDR  (AHB1PERIPH_BASEADDR + 0x0800)
#define GPIOD_BASEADDR  (AHB1PERIPH_BASEADDR + 0x0C00)
#define GPIOE_BASEADDR  (AHB1PERIPH_BASEADDR + 0x1000)
#define GPIOF_BASEADDR  (AHB1PERIPH_BASEADDR + 0x1400)
#define GPIOG_BASEADDR 	(AHB1PERIPH_BASEADDR + 0x1800)
#define GPIOH_BASEADDR	(AHB1PERIPH_BASEADDR + 0x1C00)

#define RCC_BASEADDR	(AHB1PERIPH_BASEADDR + 0x3800)

typedef struct{
	volatile uint32_t MODER;
	volatile uint32_t OTYPER;
	volatile uint32_t OSPEEDER;
	volatile uint32_t PUPDR;
	volatile uint32_t IDR;
	volatile uint32_t ODR;
	volatile uint32_t BSRR;
	volatile uint32_t LCKR;
	volatile uint32_t AFR[2];
}GPIO_RegDef_t;

typedef struct{
	volatile uint32_t CR;
	volatile uint32_t PLLCFGR;
	volatile uint32_t CFGR;
	volatile uint32_t CIR;
	volatile uint32_t AHB1RSTR;
	volatile uint32_t AHB2RSTR;
	volatile uint32_t AHB3RSTR;
	uint32_t RES0;
	volatile uint32_t APB1RSTR;
	volatile uint32_t APB2RSTR;
	uint32_t RES1[2];
	volatile uint32_t AHB1ENR;
	volatile uint32_t AHB2ENR;
	volatile uint32_t AHB3ENR;
	uint32_t RES2;
	volatile uint32_t APB1ENR;
	volatile uint32_t APB2ENR;
	uint32_t RES3[2];
	volatile uint32_t AHB1LPENR;
	volatile uint32_t AHB2LPENR;
	volatile uint32_t AHB3LPENR;
	uint32_t RES4;
	volatile uint32_t APB1LPENR;
	volatile uint32_t APB2LPENR;
	uint32_t RES5[2];
	volatile uint32_t BDCR;
	volatile uint32_t CSR;
	uint32_t RES6[2];
	volatile uint32_t SSCGR;
	volatile uint32_t PLLI2SCFGR;
	volatile uint32_t PLLSAICFGR;
	volatile uint32_t DCKCFGR;
	volatile uint32_t CKGATENR;
	volatile uint32_t DCKCFGR2;
}RCC_RegDef_t;

#define GPIOA	((GPIO_RegDef_t *)GPIOA_BASEADDR)
#define GPIOB	((GPIO_RegDef_t *)GPIOB_BASEADDR)
#define GPIOC   ((GPIO_RegDef_t *)GPIOC_BASEADDR)
#define GPIOD   ((GPIO_RegDef_t *)GPIOD_BASEADDR)
#define GPIOE   ((GPIO_RegDef_t *)GPIOE_BASEADDR)
#define GPIOF   ((GPIO_RegDef_t *)GPIOF_BASEADDR)
#define GPIOG   ((GPIO_RegDef_t *)GPIOG_BASEADDR)
#define GPIOH   ((GPIO_RegDef_t *)GPIOH_BASEADDR)

#define RCC		((RCC_RegDef_t *)RCC_BASEADDR)

/* Habilitar el clock de perifericos */
#define GPIOA_EN_CLK()  (RCC->AHB1ENR |= (1 << 0))
#define GPIOB_EN_CLK()  (RCC->AHB1ENR |= (1 << 1))
#define GPIOC_EN_CLK()  (RCC->AHB1ENR |= (1 << 2))
#define GPIOD_EN_CLK()  (RCC->AHB1ENR |= (1 << 3))
#define GPIOE_EN_CLK()  (RCC->AHB1ENR |= (1 << 4))
#define GPIOF_EN_CLK()  (RCC->AHB1ENR |= (1 << 5))
#define GPIOG_EN_CLK()  (RCC->AHB1ENR |= (1 << 6))
#define GPIOH_EN_CLK()  (RCC->AHB1ENR |= (1 << 7))

/* Desabilitar el clock de perifericos */
#define GPIOA_DIS_CLK()  (RCC->AHB1ENR &=~ (1 << 0))
#define GPIOB_DIS_CLK()  (RCC->AHB1ENR &=~ (1 << 1))
#define GPIOC_DIS_CLK()  (RCC->AHB1ENR &=~ (1 << 2))
#define GPIOD_DIS_CLK()  (RCC->AHB1ENR &=~ (1 << 3))
#define GPIOE_DIS_CLK()  (RCC->AHB1ENR &=~ (1 << 4))
#define GPIOF_DIS_CLK()  (RCC->AHB1ENR &=~ (1 << 5))
#define GPIOG_DIS_CLK()  (RCC->AHB1ENR &=~ (1 << 6))
#define GPIOH_DIS_CLK()  (RCC->AHB1ENR &=~ (1 << 7))

/* Reset de perifericos */
#define GPIOA_RESET()  do{(RCC->AHB1RSTR |= (1 << 0));(RCC->AHB1RSTR &=~ (1 << 0));}while(0)
#define GPIOB_RESET()  do{(RCC->AHB1RSTR |= (1 << 1));(RCC->AHB1RSTR &=~ (1 << 1));}while(0)
#define GPIOC_RESET()  do{(RCC->AHB1RSTR |= (1 << 2));(RCC->AHB1RSTR &=~ (1 << 2));}while(0)
#define GPIOD_RESET()  do{(RCC->AHB1RSTR |= (1 << 3));(RCC->AHB1RSTR &=~ (1 << 3));}while(0)
#define GPIOE_RESET()  do{(RCC->AHB1RSTR |= (1 << 4));(RCC->AHB1RSTR &=~ (1 << 4));}while(0)
#define GPIOF_RESET()  do{(RCC->AHB1RSTR |= (1 << 5));(RCC->AHB1RSTR &=~ (1 << 5));}while(0)
#define GPIOG_RESET()  do{(RCC->AHB1RSTR |= (1 << 6));(RCC->AHB1RSTR &=~ (1 << 6));}while(0)
#define GPIOH_RESET()  do{(RCC->AHB1RSTR |= (1 << 7));(RCC->AHB1RSTR &=~ (1 << 7));}while(0)

/************************************************ BUS - APB2 ************************************************/
//////////////////////////////////////////// PERIFERICO - SYSCFG ///////////////////////////////////////
#define APB2PERIPH_BASEADDR 0x40010000UL

#define SYSCFG_BASEADDR	(APB2PERIPH_BASEADDR + 0x3800)
#define EXTI_BASEADDR   (APB2PERIPH_BASEADDR + 0x3C00)

typedef struct{
	volatile uint32_t MEMRMP;
	volatile uint32_t PMC;
	volatile uint32_t EXTICR[4];
	volatile uint32_t CMPCR;
	volatile uint32_t CFGR;
}SYSCFG_RegDef_t;

typedef struct{
	volatile uint32_t IMR;
	volatile uint32_t EMR;
	volatile uint32_t RTSR;
	volatile uint32_t FTSR;
	volatile uint32_t SWIER;
	volatile uint32_t PR;
}EXTI_RegDef_t;

//////////////////////////////////////////// PERIFERICO - EXTI  ////////////////////////////////////////

#endif /* DRIVERS_INC_STM32F446XX_H_ */
