
PRUEBA1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d4c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08001e58  08001e58  00011e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001eac  08001eac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001eac  08001eac  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001eac  08001eac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001eac  08001eac  00011eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001eb0  08001eb0  00011eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001eb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  08001ec0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08001ec0  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000675e  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001381  00000000  00000000  00026793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000708  00000000  00000000  00027b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000678  00000000  00000000  00028220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001d2f  00000000  00000000  00028898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008cd6  00000000  00000000  0002a5c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000822dd  00000000  00000000  0003329d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b557a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bac  00000000  00000000  000b55cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001e40 	.word	0x08001e40

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001e40 	.word	0x08001e40

0800014c <LCD_I2C_WriteCommand>:
/* Exported macros -----------------------------------------------------------*/
/* Private macros ------------------------------------------------------------*/
/* Variables -----------------------------------------------------------------*/

/* Private functions ---------------------------------------------------------*/
static void LCD_I2C_WriteCommand(uint8_t command){//Enviar un byte de comando al controlador hitachi HD44780
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
    uint8_t highnibble,lownibble,datos[4];

    highnibble = (command & 0xF0);
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	f023 030f 	bic.w	r3, r3, #15
 800015c:	73fb      	strb	r3, [r7, #15]
    lownibble  = (uint8_t)((command & 0x0F)<<4);
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	011b      	lsls	r3, r3, #4
 8000162:	73bb      	strb	r3, [r7, #14]

    datos[0] = highnibble | BACKLIGHT | PIN_EN; //backlight ON,    habilito EN (EN=1, RS=0)
 8000164:	7bfb      	ldrb	r3, [r7, #15]
 8000166:	f043 030c 	orr.w	r3, r3, #12
 800016a:	b2db      	uxtb	r3, r3
 800016c:	723b      	strb	r3, [r7, #8]
    datos[1] = highnibble | BACKLIGHT;          //backlight ON, deshabilito EN (EN=0, RS=0)
 800016e:	7bfb      	ldrb	r3, [r7, #15]
 8000170:	f043 0308 	orr.w	r3, r3, #8
 8000174:	b2db      	uxtb	r3, r3
 8000176:	727b      	strb	r3, [r7, #9]
    datos[2] = lownibble  | BACKLIGHT | PIN_EN; //backlight ON,    habilito EN (EN=1, RS=0)
 8000178:	7bbb      	ldrb	r3, [r7, #14]
 800017a:	f043 030c 	orr.w	r3, r3, #12
 800017e:	b2db      	uxtb	r3, r3
 8000180:	72bb      	strb	r3, [r7, #10]
    datos[3] = lownibble  | BACKLIGHT;		    //backlight ON, deshabilito EN (EN=0, RS=0)
 8000182:	7bbb      	ldrb	r3, [r7, #14]
 8000184:	f043 0308 	orr.w	r3, r3, #8
 8000188:	b2db      	uxtb	r3, r3
 800018a:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit (&hi2c1, PCF8574_ADDRESS, (uint8_t *)datos, 4, 100);
 800018c:	f107 0208 	add.w	r2, r7, #8
 8000190:	2364      	movs	r3, #100	; 0x64
 8000192:	9300      	str	r3, [sp, #0]
 8000194:	2304      	movs	r3, #4
 8000196:	214e      	movs	r1, #78	; 0x4e
 8000198:	4803      	ldr	r0, [pc, #12]	; (80001a8 <LCD_I2C_WriteCommand+0x5c>)
 800019a:	f000 fed1 	bl	8000f40 <HAL_I2C_Master_Transmit>
}
 800019e:	bf00      	nop
 80001a0:	3710      	adds	r7, #16
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	20000028 	.word	0x20000028

080001ac <LCD_I2C_WriteData>:


static void LCD_I2C_WriteData(uint8_t data){//Enviar un byte de datos al controlador hitachi HD44780
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b086      	sub	sp, #24
 80001b0:	af02      	add	r7, sp, #8
 80001b2:	4603      	mov	r3, r0
 80001b4:	71fb      	strb	r3, [r7, #7]
	uint8_t highnibble,lownibble,datos[4];

    highnibble = (data & 0xF0);
 80001b6:	79fb      	ldrb	r3, [r7, #7]
 80001b8:	f023 030f 	bic.w	r3, r3, #15
 80001bc:	73fb      	strb	r3, [r7, #15]
    lownibble  = (uint8_t)((data & 0x0F)<<4);
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	011b      	lsls	r3, r3, #4
 80001c2:	73bb      	strb	r3, [r7, #14]

    datos[0] = highnibble | BACKLIGHT | PIN_EN | PIN_RS; //backlight ON,    habilito EN (EN=1, RS=1)
 80001c4:	7bfb      	ldrb	r3, [r7, #15]
 80001c6:	f043 030d 	orr.w	r3, r3, #13
 80001ca:	b2db      	uxtb	r3, r3
 80001cc:	723b      	strb	r3, [r7, #8]
    datos[1] = highnibble | BACKLIGHT | PIN_RS;          //backlight ON, deshabilito EN (EN=0, RS=1)
 80001ce:	7bfb      	ldrb	r3, [r7, #15]
 80001d0:	f043 0309 	orr.w	r3, r3, #9
 80001d4:	b2db      	uxtb	r3, r3
 80001d6:	727b      	strb	r3, [r7, #9]
    datos[2] = lownibble  | BACKLIGHT | PIN_EN | PIN_RS; //backlight ON,    habilito EN (EN=1, RS=1)
 80001d8:	7bbb      	ldrb	r3, [r7, #14]
 80001da:	f043 030d 	orr.w	r3, r3, #13
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	72bb      	strb	r3, [r7, #10]
    datos[3] = lownibble  | BACKLIGHT | PIN_RS;          //backlight ON, deshabilito EN (EN=0, RS=1)
 80001e2:	7bbb      	ldrb	r3, [r7, #14]
 80001e4:	f043 0309 	orr.w	r3, r3, #9
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit (&hi2c1, PCF8574_ADDRESS, (uint8_t *)datos, 4, 100);
 80001ec:	f107 0208 	add.w	r2, r7, #8
 80001f0:	2364      	movs	r3, #100	; 0x64
 80001f2:	9300      	str	r3, [sp, #0]
 80001f4:	2304      	movs	r3, #4
 80001f6:	214e      	movs	r1, #78	; 0x4e
 80001f8:	4803      	ldr	r0, [pc, #12]	; (8000208 <LCD_I2C_WriteData+0x5c>)
 80001fa:	f000 fea1 	bl	8000f40 <HAL_I2C_Master_Transmit>
}
 80001fe:	bf00      	nop
 8000200:	3710      	adds	r7, #16
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	20000028 	.word	0x20000028

0800020c <LCD_I2C_Init>:

/* Exported functions --------------------------------------------------------*/
void LCD_I2C_Init(void){
 800020c:	b580      	push	{r7, lr}
 800020e:	b082      	sub	sp, #8
 8000210:	af02      	add	r7, sp, #8
	HAL_Delay(1000);                     //tiempo necesario para no obtener caracteres erroneos al energizar el lcd
 8000212:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000216:	f000 faab 	bl	8000770 <HAL_Delay>
	HAL_I2C_Master_Transmit (&hi2c1, PCF8574_ADDRESS, 0, 1, 100); //mando un "0" (backlight apagado)
 800021a:	2364      	movs	r3, #100	; 0x64
 800021c:	9300      	str	r3, [sp, #0]
 800021e:	2301      	movs	r3, #1
 8000220:	2200      	movs	r2, #0
 8000222:	214e      	movs	r1, #78	; 0x4e
 8000224:	4820      	ldr	r0, [pc, #128]	; (80002a8 <LCD_I2C_Init+0x9c>)
 8000226:	f000 fe8b 	bl	8000f40 <HAL_I2C_Master_Transmit>
	HAL_Delay(500);                      // esperar un tiempo mayor  a 100ms para VDD estable
 800022a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800022e:	f000 fa9f 	bl	8000770 <HAL_Delay>
    LCD_I2C_WriteCommand(MODE_4_BITS);   // function set, 4 bit mode
 8000232:	202c      	movs	r0, #44	; 0x2c
 8000234:	f7ff ff8a 	bl	800014c <LCD_I2C_WriteCommand>
    HAL_Delay(1);                        // esperar un tiempo >100uS
 8000238:	2001      	movs	r0, #1
 800023a:	f000 fa99 	bl	8000770 <HAL_Delay>
    LCD_I2C_WriteCommand(MODE_4_BITS);   // function set, 4 bit mode otra vez segun datasheet
 800023e:	202c      	movs	r0, #44	; 0x2c
 8000240:	f7ff ff84 	bl	800014c <LCD_I2C_WriteCommand>
    HAL_Delay(1);                        // esperar un tiempo >100uS
 8000244:	2001      	movs	r0, #1
 8000246:	f000 fa93 	bl	8000770 <HAL_Delay>
    LCD_I2C_WriteCommand(MODE_4_BITS);   // function set, 4 bit mode otra vez segun datasheet
 800024a:	202c      	movs	r0, #44	; 0x2c
 800024c:	f7ff ff7e 	bl	800014c <LCD_I2C_WriteCommand>
    HAL_Delay(1);                        // esperar un tiempo >100uS
 8000250:	2001      	movs	r0, #1
 8000252:	f000 fa8d 	bl	8000770 <HAL_Delay>

    LCD_I2C_WriteCommand(0b00100000);    // mando el valor que me indica en la incializacion
 8000256:	2020      	movs	r0, #32
 8000258:	f7ff ff78 	bl	800014c <LCD_I2C_WriteCommand>
    HAL_Delay(1);                        // esperar un tiempo >100uS
 800025c:	2001      	movs	r0, #1
 800025e:	f000 fa87 	bl	8000770 <HAL_Delay>

    LCD_I2C_WriteCommand(MODE_4_BITS);   // function set, 4 bit mode otra vez segun datasheet
 8000262:	202c      	movs	r0, #44	; 0x2c
 8000264:	f7ff ff72 	bl	800014c <LCD_I2C_WriteCommand>
    HAL_Delay(1);                        // esperar un tiempo >53uS
 8000268:	2001      	movs	r0, #1
 800026a:	f000 fa81 	bl	8000770 <HAL_Delay>

    LCD_I2C_WriteCommand(DISPLAY_ON);    // display control on, cursor off, blink off
 800026e:	200c      	movs	r0, #12
 8000270:	f7ff ff6c 	bl	800014c <LCD_I2C_WriteCommand>
    HAL_Delay(1);                        // esperar un tiempo >53uS
 8000274:	2001      	movs	r0, #1
 8000276:	f000 fa7b 	bl	8000770 <HAL_Delay>

    LCD_I2C_WriteCommand(DISPLAY_CLEAR); // display control on, cursor off, blink off
 800027a:	2001      	movs	r0, #1
 800027c:	f7ff ff66 	bl	800014c <LCD_I2C_WriteCommand>
    HAL_Delay(1);                        // esperar un tiempo >3mS
 8000280:	2001      	movs	r0, #1
 8000282:	f000 fa75 	bl	8000770 <HAL_Delay>

    LCD_I2C_WriteCommand(ENTRY_MODE_SET);// cursor se mueve hacia la derecha, el contador de direcciones DDRAM (AC) más 1
 8000286:	2006      	movs	r0, #6
 8000288:	f7ff ff60 	bl	800014c <LCD_I2C_WriteCommand>
    HAL_Delay(1);                        // esperar un tiempo >53uS, fin de la inicializacion
 800028c:	2001      	movs	r0, #1
 800028e:	f000 fa6f 	bl	8000770 <HAL_Delay>

    LCD_I2C_WriteCommand(0b00001100);    // mando el valor que me indica en la incializacion
 8000292:	200c      	movs	r0, #12
 8000294:	f7ff ff5a 	bl	800014c <LCD_I2C_WriteCommand>
    HAL_Delay(1);                        // esperar un tiempo >53uS
 8000298:	2001      	movs	r0, #1
 800029a:	f000 fa69 	bl	8000770 <HAL_Delay>

    LCD_I2C_ClearText();
 800029e:	f000 f805 	bl	80002ac <LCD_I2C_ClearText>
}
 80002a2:	bf00      	nop
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	20000028 	.word	0x20000028

080002ac <LCD_I2C_ClearText>:

void LCD_I2C_ClearText(){// Limpiar el texto de la pantalla
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
  LCD_I2C_WriteCommand(DISPLAY_CLEAR);
 80002b0:	2001      	movs	r0, #1
 80002b2:	f7ff ff4b 	bl	800014c <LCD_I2C_WriteCommand>
  HAL_Delay(5);
 80002b6:	2005      	movs	r0, #5
 80002b8:	f000 fa5a 	bl	8000770 <HAL_Delay>
}
 80002bc:	bf00      	nop
 80002be:	bd80      	pop	{r7, pc}

080002c0 <LCD_I2C_WriteText>:
		case 0: LCD_I2C_NoBlink();break;
		case 1: LCD_I2C_Blink()  ;break;
    }
}

void LCD_I2C_WriteText(uint8_t row, uint8_t col, char* string){//Escribir en la pantalla
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	4603      	mov	r3, r0
 80002c8:	603a      	str	r2, [r7, #0]
 80002ca:	71fb      	strb	r3, [r7, #7]
 80002cc:	460b      	mov	r3, r1
 80002ce:	71bb      	strb	r3, [r7, #6]
	row = row - 1;//para empezar desde la fila    1 y no desde la fila    0
 80002d0:	79fb      	ldrb	r3, [r7, #7]
 80002d2:	3b01      	subs	r3, #1
 80002d4:	71fb      	strb	r3, [r7, #7]
	col = col - 1;//para empezar desde la columna 1 y no desde la columna 0
 80002d6:	79bb      	ldrb	r3, [r7, #6]
 80002d8:	3b01      	subs	r3, #1
 80002da:	71bb      	strb	r3, [r7, #6]
	//row -> 1,2,3,4        col -> 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20
    switch (row) {
 80002dc:	79fb      	ldrb	r3, [r7, #7]
 80002de:	2b03      	cmp	r3, #3
 80002e0:	d81a      	bhi.n	8000318 <LCD_I2C_WriteText+0x58>
 80002e2:	a201      	add	r2, pc, #4	; (adr r2, 80002e8 <LCD_I2C_WriteText+0x28>)
 80002e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002e8:	080002f9 	.word	0x080002f9
 80002ec:	08000301 	.word	0x08000301
 80002f0:	08000309 	.word	0x08000309
 80002f4:	08000311 	.word	0x08000311
        case 0: col = col + 0x80;break; // operacion para agregar ala fila 0 su columna "x"
 80002f8:	79bb      	ldrb	r3, [r7, #6]
 80002fa:	3b80      	subs	r3, #128	; 0x80
 80002fc:	71bb      	strb	r3, [r7, #6]
 80002fe:	e00f      	b.n	8000320 <LCD_I2C_WriteText+0x60>
        case 1: col = col + 0xC0;break; // operacion para agregar ala fila 1 su columna "x"
 8000300:	79bb      	ldrb	r3, [r7, #6]
 8000302:	3b40      	subs	r3, #64	; 0x40
 8000304:	71bb      	strb	r3, [r7, #6]
 8000306:	e00b      	b.n	8000320 <LCD_I2C_WriteText+0x60>
        case 2: col = col + 0x94;break; // operacion para agregar ala fila 2 su columna "x"
 8000308:	79bb      	ldrb	r3, [r7, #6]
 800030a:	3b6c      	subs	r3, #108	; 0x6c
 800030c:	71bb      	strb	r3, [r7, #6]
 800030e:	e007      	b.n	8000320 <LCD_I2C_WriteText+0x60>
        case 3: col = col + 0xD4;break; // operacion para agregar ala fila 3 su columna "x"
 8000310:	79bb      	ldrb	r3, [r7, #6]
 8000312:	3b2c      	subs	r3, #44	; 0x2c
 8000314:	71bb      	strb	r3, [r7, #6]
 8000316:	e003      	b.n	8000320 <LCD_I2C_WriteText+0x60>
        default:col = col + 0x80;break; // fila 0 si ingresa un valor que no es del 0 al 3
 8000318:	79bb      	ldrb	r3, [r7, #6]
 800031a:	3b80      	subs	r3, #128	; 0x80
 800031c:	71bb      	strb	r3, [r7, #6]
 800031e:	bf00      	nop
    }

    LCD_I2C_WriteCommand(col);
 8000320:	79bb      	ldrb	r3, [r7, #6]
 8000322:	4618      	mov	r0, r3
 8000324:	f7ff ff12 	bl	800014c <LCD_I2C_WriteCommand>
    //Funcion para mandar strings sin saber el tamaño de la cadena
    //while(*string != '\0')
    while (*string)
 8000328:	e006      	b.n	8000338 <LCD_I2C_WriteText+0x78>
        LCD_I2C_WriteData(*string++);
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	1c5a      	adds	r2, r3, #1
 800032e:	603a      	str	r2, [r7, #0]
 8000330:	781b      	ldrb	r3, [r3, #0]
 8000332:	4618      	mov	r0, r3
 8000334:	f7ff ff3a 	bl	80001ac <LCD_I2C_WriteData>
    while (*string)
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	2b00      	cmp	r3, #0
 800033e:	d1f4      	bne.n	800032a <LCD_I2C_WriteText+0x6a>
}
 8000340:	bf00      	nop
 8000342:	bf00      	nop
 8000344:	3708      	adds	r7, #8
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop

0800034c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000350:	f000 f9ac 	bl	80006ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000354:	f000 f816 	bl	8000384 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000358:	f000 f888 	bl	800046c <MX_GPIO_Init>
  MX_I2C1_Init();
 800035c:	f000 f858 	bl	8000410 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  LCD_I2C_Init();
 8000360:	f7ff ff54 	bl	800020c <LCD_I2C_Init>
  LCD_I2C_WriteText(1,1," STM32F103C8T6  ");
 8000364:	4a05      	ldr	r2, [pc, #20]	; (800037c <main+0x30>)
 8000366:	2101      	movs	r1, #1
 8000368:	2001      	movs	r0, #1
 800036a:	f7ff ffa9 	bl	80002c0 <LCD_I2C_WriteText>
  LCD_I2C_WriteText(2,1,"  LCD 16x2 20x4 ");
 800036e:	4a04      	ldr	r2, [pc, #16]	; (8000380 <main+0x34>)
 8000370:	2101      	movs	r1, #1
 8000372:	2002      	movs	r0, #2
 8000374:	f7ff ffa4 	bl	80002c0 <LCD_I2C_WriteText>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000378:	e7fe      	b.n	8000378 <main+0x2c>
 800037a:	bf00      	nop
 800037c:	08001e58 	.word	0x08001e58
 8000380:	08001e6c 	.word	0x08001e6c

08000384 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b090      	sub	sp, #64	; 0x40
 8000388:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800038a:	f107 0318 	add.w	r3, r7, #24
 800038e:	2228      	movs	r2, #40	; 0x28
 8000390:	2100      	movs	r1, #0
 8000392:	4618      	mov	r0, r3
 8000394:	f001 fd4c 	bl	8001e30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000398:	1d3b      	adds	r3, r7, #4
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
 80003a2:	60da      	str	r2, [r3, #12]
 80003a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003a6:	2301      	movs	r3, #1
 80003a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003b0:	2300      	movs	r3, #0
 80003b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003b4:	2301      	movs	r3, #1
 80003b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003b8:	2302      	movs	r3, #2
 80003ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003c2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003c8:	f107 0318 	add.w	r3, r7, #24
 80003cc:	4618      	mov	r0, r3
 80003ce:	f001 f90f 	bl	80015f0 <HAL_RCC_OscConfig>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003d8:	f000 f89e 	bl	8000518 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003dc:	230f      	movs	r3, #15
 80003de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003e0:	2302      	movs	r3, #2
 80003e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003e4:	2300      	movs	r3, #0
 80003e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ee:	2300      	movs	r3, #0
 80003f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003f2:	1d3b      	adds	r3, r7, #4
 80003f4:	2102      	movs	r1, #2
 80003f6:	4618      	mov	r0, r3
 80003f8:	f001 fb7c 	bl	8001af4 <HAL_RCC_ClockConfig>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000402:	f000 f889 	bl	8000518 <Error_Handler>
  }
}
 8000406:	bf00      	nop
 8000408:	3740      	adds	r7, #64	; 0x40
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
	...

08000410 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000414:	4b12      	ldr	r3, [pc, #72]	; (8000460 <MX_I2C1_Init+0x50>)
 8000416:	4a13      	ldr	r2, [pc, #76]	; (8000464 <MX_I2C1_Init+0x54>)
 8000418:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800041a:	4b11      	ldr	r3, [pc, #68]	; (8000460 <MX_I2C1_Init+0x50>)
 800041c:	4a12      	ldr	r2, [pc, #72]	; (8000468 <MX_I2C1_Init+0x58>)
 800041e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000420:	4b0f      	ldr	r3, [pc, #60]	; (8000460 <MX_I2C1_Init+0x50>)
 8000422:	2200      	movs	r2, #0
 8000424:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000426:	4b0e      	ldr	r3, [pc, #56]	; (8000460 <MX_I2C1_Init+0x50>)
 8000428:	2200      	movs	r2, #0
 800042a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800042c:	4b0c      	ldr	r3, [pc, #48]	; (8000460 <MX_I2C1_Init+0x50>)
 800042e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000432:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000434:	4b0a      	ldr	r3, [pc, #40]	; (8000460 <MX_I2C1_Init+0x50>)
 8000436:	2200      	movs	r2, #0
 8000438:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800043a:	4b09      	ldr	r3, [pc, #36]	; (8000460 <MX_I2C1_Init+0x50>)
 800043c:	2200      	movs	r2, #0
 800043e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000440:	4b07      	ldr	r3, [pc, #28]	; (8000460 <MX_I2C1_Init+0x50>)
 8000442:	2200      	movs	r2, #0
 8000444:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000446:	4b06      	ldr	r3, [pc, #24]	; (8000460 <MX_I2C1_Init+0x50>)
 8000448:	2200      	movs	r2, #0
 800044a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800044c:	4804      	ldr	r0, [pc, #16]	; (8000460 <MX_I2C1_Init+0x50>)
 800044e:	f000 fc33 	bl	8000cb8 <HAL_I2C_Init>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d001      	beq.n	800045c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000458:	f000 f85e 	bl	8000518 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800045c:	bf00      	nop
 800045e:	bd80      	pop	{r7, pc}
 8000460:	20000028 	.word	0x20000028
 8000464:	40005400 	.word	0x40005400
 8000468:	000186a0 	.word	0x000186a0

0800046c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b088      	sub	sp, #32
 8000470:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000472:	f107 0310 	add.w	r3, r7, #16
 8000476:	2200      	movs	r2, #0
 8000478:	601a      	str	r2, [r3, #0]
 800047a:	605a      	str	r2, [r3, #4]
 800047c:	609a      	str	r2, [r3, #8]
 800047e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000480:	4b23      	ldr	r3, [pc, #140]	; (8000510 <MX_GPIO_Init+0xa4>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	4a22      	ldr	r2, [pc, #136]	; (8000510 <MX_GPIO_Init+0xa4>)
 8000486:	f043 0320 	orr.w	r3, r3, #32
 800048a:	6193      	str	r3, [r2, #24]
 800048c:	4b20      	ldr	r3, [pc, #128]	; (8000510 <MX_GPIO_Init+0xa4>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	f003 0320 	and.w	r3, r3, #32
 8000494:	60fb      	str	r3, [r7, #12]
 8000496:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000498:	4b1d      	ldr	r3, [pc, #116]	; (8000510 <MX_GPIO_Init+0xa4>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	4a1c      	ldr	r2, [pc, #112]	; (8000510 <MX_GPIO_Init+0xa4>)
 800049e:	f043 0304 	orr.w	r3, r3, #4
 80004a2:	6193      	str	r3, [r2, #24]
 80004a4:	4b1a      	ldr	r3, [pc, #104]	; (8000510 <MX_GPIO_Init+0xa4>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	f003 0304 	and.w	r3, r3, #4
 80004ac:	60bb      	str	r3, [r7, #8]
 80004ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004b0:	4b17      	ldr	r3, [pc, #92]	; (8000510 <MX_GPIO_Init+0xa4>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	4a16      	ldr	r2, [pc, #88]	; (8000510 <MX_GPIO_Init+0xa4>)
 80004b6:	f043 0308 	orr.w	r3, r3, #8
 80004ba:	6193      	str	r3, [r2, #24]
 80004bc:	4b14      	ldr	r3, [pc, #80]	; (8000510 <MX_GPIO_Init+0xa4>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	f003 0308 	and.w	r3, r3, #8
 80004c4:	607b      	str	r3, [r7, #4]
 80004c6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(leadBoard_GPIO_Port, leadBoard_Pin, GPIO_PIN_RESET);
 80004c8:	2200      	movs	r2, #0
 80004ca:	2180      	movs	r1, #128	; 0x80
 80004cc:	4811      	ldr	r0, [pc, #68]	; (8000514 <MX_GPIO_Init+0xa8>)
 80004ce:	f000 fbdb 	bl	8000c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DT_Pin CLK_Pin SW_Pin */
  GPIO_InitStruct.Pin = DT_Pin|CLK_Pin|SW_Pin;
 80004d2:	2338      	movs	r3, #56	; 0x38
 80004d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004d6:	2300      	movs	r3, #0
 80004d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004da:	2300      	movs	r3, #0
 80004dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004de:	f107 0310 	add.w	r3, r7, #16
 80004e2:	4619      	mov	r1, r3
 80004e4:	480b      	ldr	r0, [pc, #44]	; (8000514 <MX_GPIO_Init+0xa8>)
 80004e6:	f000 fa4b 	bl	8000980 <HAL_GPIO_Init>

  /*Configure GPIO pin : leadBoard_Pin */
  GPIO_InitStruct.Pin = leadBoard_Pin;
 80004ea:	2380      	movs	r3, #128	; 0x80
 80004ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ee:	2301      	movs	r3, #1
 80004f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f2:	2300      	movs	r3, #0
 80004f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f6:	2302      	movs	r3, #2
 80004f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(leadBoard_GPIO_Port, &GPIO_InitStruct);
 80004fa:	f107 0310 	add.w	r3, r7, #16
 80004fe:	4619      	mov	r1, r3
 8000500:	4804      	ldr	r0, [pc, #16]	; (8000514 <MX_GPIO_Init+0xa8>)
 8000502:	f000 fa3d 	bl	8000980 <HAL_GPIO_Init>

}
 8000506:	bf00      	nop
 8000508:	3720      	adds	r7, #32
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40021000 	.word	0x40021000
 8000514:	40010800 	.word	0x40010800

08000518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800051c:	b672      	cpsid	i
}
 800051e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000520:	e7fe      	b.n	8000520 <Error_Handler+0x8>
	...

08000524 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800052a:	4b15      	ldr	r3, [pc, #84]	; (8000580 <HAL_MspInit+0x5c>)
 800052c:	699b      	ldr	r3, [r3, #24]
 800052e:	4a14      	ldr	r2, [pc, #80]	; (8000580 <HAL_MspInit+0x5c>)
 8000530:	f043 0301 	orr.w	r3, r3, #1
 8000534:	6193      	str	r3, [r2, #24]
 8000536:	4b12      	ldr	r3, [pc, #72]	; (8000580 <HAL_MspInit+0x5c>)
 8000538:	699b      	ldr	r3, [r3, #24]
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000542:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <HAL_MspInit+0x5c>)
 8000544:	69db      	ldr	r3, [r3, #28]
 8000546:	4a0e      	ldr	r2, [pc, #56]	; (8000580 <HAL_MspInit+0x5c>)
 8000548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054c:	61d3      	str	r3, [r2, #28]
 800054e:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <HAL_MspInit+0x5c>)
 8000550:	69db      	ldr	r3, [r3, #28]
 8000552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800055a:	4b0a      	ldr	r3, [pc, #40]	; (8000584 <HAL_MspInit+0x60>)
 800055c:	685b      	ldr	r3, [r3, #4]
 800055e:	60fb      	str	r3, [r7, #12]
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	4a04      	ldr	r2, [pc, #16]	; (8000584 <HAL_MspInit+0x60>)
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000576:	bf00      	nop
 8000578:	3714      	adds	r7, #20
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr
 8000580:	40021000 	.word	0x40021000
 8000584:	40010000 	.word	0x40010000

08000588 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b088      	sub	sp, #32
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000590:	f107 0310 	add.w	r3, r7, #16
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a15      	ldr	r2, [pc, #84]	; (80005f8 <HAL_I2C_MspInit+0x70>)
 80005a4:	4293      	cmp	r3, r2
 80005a6:	d123      	bne.n	80005f0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a8:	4b14      	ldr	r3, [pc, #80]	; (80005fc <HAL_I2C_MspInit+0x74>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	4a13      	ldr	r2, [pc, #76]	; (80005fc <HAL_I2C_MspInit+0x74>)
 80005ae:	f043 0308 	orr.w	r3, r3, #8
 80005b2:	6193      	str	r3, [r2, #24]
 80005b4:	4b11      	ldr	r3, [pc, #68]	; (80005fc <HAL_I2C_MspInit+0x74>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	f003 0308 	and.w	r3, r3, #8
 80005bc:	60fb      	str	r3, [r7, #12]
 80005be:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005c0:	23c0      	movs	r3, #192	; 0xc0
 80005c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005c4:	2312      	movs	r3, #18
 80005c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005c8:	2303      	movs	r3, #3
 80005ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005cc:	f107 0310 	add.w	r3, r7, #16
 80005d0:	4619      	mov	r1, r3
 80005d2:	480b      	ldr	r0, [pc, #44]	; (8000600 <HAL_I2C_MspInit+0x78>)
 80005d4:	f000 f9d4 	bl	8000980 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <HAL_I2C_MspInit+0x74>)
 80005da:	69db      	ldr	r3, [r3, #28]
 80005dc:	4a07      	ldr	r2, [pc, #28]	; (80005fc <HAL_I2C_MspInit+0x74>)
 80005de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005e2:	61d3      	str	r3, [r2, #28]
 80005e4:	4b05      	ldr	r3, [pc, #20]	; (80005fc <HAL_I2C_MspInit+0x74>)
 80005e6:	69db      	ldr	r3, [r3, #28]
 80005e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005ec:	60bb      	str	r3, [r7, #8]
 80005ee:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80005f0:	bf00      	nop
 80005f2:	3720      	adds	r7, #32
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40005400 	.word	0x40005400
 80005fc:	40021000 	.word	0x40021000
 8000600:	40010c00 	.word	0x40010c00

08000604 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000608:	e7fe      	b.n	8000608 <NMI_Handler+0x4>

0800060a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800060a:	b480      	push	{r7}
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800060e:	e7fe      	b.n	800060e <HardFault_Handler+0x4>

08000610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000614:	e7fe      	b.n	8000614 <MemManage_Handler+0x4>

08000616 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000616:	b480      	push	{r7}
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800061a:	e7fe      	b.n	800061a <BusFault_Handler+0x4>

0800061c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000620:	e7fe      	b.n	8000620 <UsageFault_Handler+0x4>

08000622 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000622:	b480      	push	{r7}
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000626:	bf00      	nop
 8000628:	46bd      	mov	sp, r7
 800062a:	bc80      	pop	{r7}
 800062c:	4770      	bx	lr

0800062e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800062e:	b480      	push	{r7}
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000632:	bf00      	nop
 8000634:	46bd      	mov	sp, r7
 8000636:	bc80      	pop	{r7}
 8000638:	4770      	bx	lr

0800063a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800063a:	b480      	push	{r7}
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800063e:	bf00      	nop
 8000640:	46bd      	mov	sp, r7
 8000642:	bc80      	pop	{r7}
 8000644:	4770      	bx	lr

08000646 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000646:	b580      	push	{r7, lr}
 8000648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800064a:	f000 f875 	bl	8000738 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}

08000652 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000652:	b480      	push	{r7}
 8000654:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000656:	bf00      	nop
 8000658:	46bd      	mov	sp, r7
 800065a:	bc80      	pop	{r7}
 800065c:	4770      	bx	lr
	...

08000660 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000660:	f7ff fff7 	bl	8000652 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000664:	480b      	ldr	r0, [pc, #44]	; (8000694 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000666:	490c      	ldr	r1, [pc, #48]	; (8000698 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000668:	4a0c      	ldr	r2, [pc, #48]	; (800069c <LoopFillZerobss+0x16>)
  movs r3, #0
 800066a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800066c:	e002      	b.n	8000674 <LoopCopyDataInit>

0800066e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800066e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000672:	3304      	adds	r3, #4

08000674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000678:	d3f9      	bcc.n	800066e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800067a:	4a09      	ldr	r2, [pc, #36]	; (80006a0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800067c:	4c09      	ldr	r4, [pc, #36]	; (80006a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800067e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000680:	e001      	b.n	8000686 <LoopFillZerobss>

08000682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000684:	3204      	adds	r2, #4

08000686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000688:	d3fb      	bcc.n	8000682 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800068a:	f001 fbad 	bl	8001de8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800068e:	f7ff fe5d 	bl	800034c <main>
  bx lr
 8000692:	4770      	bx	lr
  ldr r0, =_sdata
 8000694:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000698:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800069c:	08001eb4 	.word	0x08001eb4
  ldr r2, =_sbss
 80006a0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006a4:	20000080 	.word	0x20000080

080006a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006a8:	e7fe      	b.n	80006a8 <ADC1_2_IRQHandler>
	...

080006ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006b0:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <HAL_Init+0x28>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a07      	ldr	r2, [pc, #28]	; (80006d4 <HAL_Init+0x28>)
 80006b6:	f043 0310 	orr.w	r3, r3, #16
 80006ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006bc:	2003      	movs	r0, #3
 80006be:	f000 f92b 	bl	8000918 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006c2:	200f      	movs	r0, #15
 80006c4:	f000 f808 	bl	80006d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006c8:	f7ff ff2c 	bl	8000524 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006cc:	2300      	movs	r3, #0
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40022000 	.word	0x40022000

080006d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006e0:	4b12      	ldr	r3, [pc, #72]	; (800072c <HAL_InitTick+0x54>)
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <HAL_InitTick+0x58>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	4619      	mov	r1, r3
 80006ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80006f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 f935 	bl	8000966 <HAL_SYSTICK_Config>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000702:	2301      	movs	r3, #1
 8000704:	e00e      	b.n	8000724 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	2b0f      	cmp	r3, #15
 800070a:	d80a      	bhi.n	8000722 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800070c:	2200      	movs	r2, #0
 800070e:	6879      	ldr	r1, [r7, #4]
 8000710:	f04f 30ff 	mov.w	r0, #4294967295
 8000714:	f000 f90b 	bl	800092e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000718:	4a06      	ldr	r2, [pc, #24]	; (8000734 <HAL_InitTick+0x5c>)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800071e:	2300      	movs	r3, #0
 8000720:	e000      	b.n	8000724 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000722:	2301      	movs	r3, #1
}
 8000724:	4618      	mov	r0, r3
 8000726:	3708      	adds	r7, #8
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20000000 	.word	0x20000000
 8000730:	20000008 	.word	0x20000008
 8000734:	20000004 	.word	0x20000004

08000738 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800073c:	4b05      	ldr	r3, [pc, #20]	; (8000754 <HAL_IncTick+0x1c>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	461a      	mov	r2, r3
 8000742:	4b05      	ldr	r3, [pc, #20]	; (8000758 <HAL_IncTick+0x20>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4413      	add	r3, r2
 8000748:	4a03      	ldr	r2, [pc, #12]	; (8000758 <HAL_IncTick+0x20>)
 800074a:	6013      	str	r3, [r2, #0]
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr
 8000754:	20000008 	.word	0x20000008
 8000758:	2000007c 	.word	0x2000007c

0800075c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  return uwTick;
 8000760:	4b02      	ldr	r3, [pc, #8]	; (800076c <HAL_GetTick+0x10>)
 8000762:	681b      	ldr	r3, [r3, #0]
}
 8000764:	4618      	mov	r0, r3
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr
 800076c:	2000007c 	.word	0x2000007c

08000770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000778:	f7ff fff0 	bl	800075c <HAL_GetTick>
 800077c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000788:	d005      	beq.n	8000796 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800078a:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <HAL_Delay+0x44>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	461a      	mov	r2, r3
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	4413      	add	r3, r2
 8000794:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000796:	bf00      	nop
 8000798:	f7ff ffe0 	bl	800075c <HAL_GetTick>
 800079c:	4602      	mov	r2, r0
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	1ad3      	subs	r3, r2, r3
 80007a2:	68fa      	ldr	r2, [r7, #12]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d8f7      	bhi.n	8000798 <HAL_Delay+0x28>
  {
  }
}
 80007a8:	bf00      	nop
 80007aa:	bf00      	nop
 80007ac:	3710      	adds	r7, #16
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000008 	.word	0x20000008

080007b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b085      	sub	sp, #20
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	f003 0307 	and.w	r3, r3, #7
 80007c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <__NVIC_SetPriorityGrouping+0x44>)
 80007ca:	68db      	ldr	r3, [r3, #12]
 80007cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ce:	68ba      	ldr	r2, [r7, #8]
 80007d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007d4:	4013      	ands	r3, r2
 80007d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007ea:	4a04      	ldr	r2, [pc, #16]	; (80007fc <__NVIC_SetPriorityGrouping+0x44>)
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	60d3      	str	r3, [r2, #12]
}
 80007f0:	bf00      	nop
 80007f2:	3714      	adds	r7, #20
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bc80      	pop	{r7}
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	e000ed00 	.word	0xe000ed00

08000800 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000804:	4b04      	ldr	r3, [pc, #16]	; (8000818 <__NVIC_GetPriorityGrouping+0x18>)
 8000806:	68db      	ldr	r3, [r3, #12]
 8000808:	0a1b      	lsrs	r3, r3, #8
 800080a:	f003 0307 	and.w	r3, r3, #7
}
 800080e:	4618      	mov	r0, r3
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	e000ed00 	.word	0xe000ed00

0800081c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	6039      	str	r1, [r7, #0]
 8000826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082c:	2b00      	cmp	r3, #0
 800082e:	db0a      	blt.n	8000846 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	b2da      	uxtb	r2, r3
 8000834:	490c      	ldr	r1, [pc, #48]	; (8000868 <__NVIC_SetPriority+0x4c>)
 8000836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083a:	0112      	lsls	r2, r2, #4
 800083c:	b2d2      	uxtb	r2, r2
 800083e:	440b      	add	r3, r1
 8000840:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000844:	e00a      	b.n	800085c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	b2da      	uxtb	r2, r3
 800084a:	4908      	ldr	r1, [pc, #32]	; (800086c <__NVIC_SetPriority+0x50>)
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	f003 030f 	and.w	r3, r3, #15
 8000852:	3b04      	subs	r3, #4
 8000854:	0112      	lsls	r2, r2, #4
 8000856:	b2d2      	uxtb	r2, r2
 8000858:	440b      	add	r3, r1
 800085a:	761a      	strb	r2, [r3, #24]
}
 800085c:	bf00      	nop
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	e000e100 	.word	0xe000e100
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000870:	b480      	push	{r7}
 8000872:	b089      	sub	sp, #36	; 0x24
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	f003 0307 	and.w	r3, r3, #7
 8000882:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000884:	69fb      	ldr	r3, [r7, #28]
 8000886:	f1c3 0307 	rsb	r3, r3, #7
 800088a:	2b04      	cmp	r3, #4
 800088c:	bf28      	it	cs
 800088e:	2304      	movcs	r3, #4
 8000890:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	3304      	adds	r3, #4
 8000896:	2b06      	cmp	r3, #6
 8000898:	d902      	bls.n	80008a0 <NVIC_EncodePriority+0x30>
 800089a:	69fb      	ldr	r3, [r7, #28]
 800089c:	3b03      	subs	r3, #3
 800089e:	e000      	b.n	80008a2 <NVIC_EncodePriority+0x32>
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a4:	f04f 32ff 	mov.w	r2, #4294967295
 80008a8:	69bb      	ldr	r3, [r7, #24]
 80008aa:	fa02 f303 	lsl.w	r3, r2, r3
 80008ae:	43da      	mvns	r2, r3
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	401a      	ands	r2, r3
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008b8:	f04f 31ff 	mov.w	r1, #4294967295
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	fa01 f303 	lsl.w	r3, r1, r3
 80008c2:	43d9      	mvns	r1, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c8:	4313      	orrs	r3, r2
         );
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3724      	adds	r7, #36	; 0x24
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr

080008d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	3b01      	subs	r3, #1
 80008e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008e4:	d301      	bcc.n	80008ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008e6:	2301      	movs	r3, #1
 80008e8:	e00f      	b.n	800090a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ea:	4a0a      	ldr	r2, [pc, #40]	; (8000914 <SysTick_Config+0x40>)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	3b01      	subs	r3, #1
 80008f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008f2:	210f      	movs	r1, #15
 80008f4:	f04f 30ff 	mov.w	r0, #4294967295
 80008f8:	f7ff ff90 	bl	800081c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008fc:	4b05      	ldr	r3, [pc, #20]	; (8000914 <SysTick_Config+0x40>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000902:	4b04      	ldr	r3, [pc, #16]	; (8000914 <SysTick_Config+0x40>)
 8000904:	2207      	movs	r2, #7
 8000906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000908:	2300      	movs	r3, #0
}
 800090a:	4618      	mov	r0, r3
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	e000e010 	.word	0xe000e010

08000918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f7ff ff49 	bl	80007b8 <__NVIC_SetPriorityGrouping>
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800092e:	b580      	push	{r7, lr}
 8000930:	b086      	sub	sp, #24
 8000932:	af00      	add	r7, sp, #0
 8000934:	4603      	mov	r3, r0
 8000936:	60b9      	str	r1, [r7, #8]
 8000938:	607a      	str	r2, [r7, #4]
 800093a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000940:	f7ff ff5e 	bl	8000800 <__NVIC_GetPriorityGrouping>
 8000944:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	68b9      	ldr	r1, [r7, #8]
 800094a:	6978      	ldr	r0, [r7, #20]
 800094c:	f7ff ff90 	bl	8000870 <NVIC_EncodePriority>
 8000950:	4602      	mov	r2, r0
 8000952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000956:	4611      	mov	r1, r2
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff ff5f 	bl	800081c <__NVIC_SetPriority>
}
 800095e:	bf00      	nop
 8000960:	3718      	adds	r7, #24
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	b082      	sub	sp, #8
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f7ff ffb0 	bl	80008d4 <SysTick_Config>
 8000974:	4603      	mov	r3, r0
}
 8000976:	4618      	mov	r0, r3
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
	...

08000980 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000980:	b480      	push	{r7}
 8000982:	b08b      	sub	sp, #44	; 0x2c
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800098e:	2300      	movs	r3, #0
 8000990:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000992:	e169      	b.n	8000c68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000994:	2201      	movs	r2, #1
 8000996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000998:	fa02 f303 	lsl.w	r3, r2, r3
 800099c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	69fa      	ldr	r2, [r7, #28]
 80009a4:	4013      	ands	r3, r2
 80009a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009a8:	69ba      	ldr	r2, [r7, #24]
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	f040 8158 	bne.w	8000c62 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	4a9a      	ldr	r2, [pc, #616]	; (8000c20 <HAL_GPIO_Init+0x2a0>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d05e      	beq.n	8000a7a <HAL_GPIO_Init+0xfa>
 80009bc:	4a98      	ldr	r2, [pc, #608]	; (8000c20 <HAL_GPIO_Init+0x2a0>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d875      	bhi.n	8000aae <HAL_GPIO_Init+0x12e>
 80009c2:	4a98      	ldr	r2, [pc, #608]	; (8000c24 <HAL_GPIO_Init+0x2a4>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d058      	beq.n	8000a7a <HAL_GPIO_Init+0xfa>
 80009c8:	4a96      	ldr	r2, [pc, #600]	; (8000c24 <HAL_GPIO_Init+0x2a4>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d86f      	bhi.n	8000aae <HAL_GPIO_Init+0x12e>
 80009ce:	4a96      	ldr	r2, [pc, #600]	; (8000c28 <HAL_GPIO_Init+0x2a8>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d052      	beq.n	8000a7a <HAL_GPIO_Init+0xfa>
 80009d4:	4a94      	ldr	r2, [pc, #592]	; (8000c28 <HAL_GPIO_Init+0x2a8>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d869      	bhi.n	8000aae <HAL_GPIO_Init+0x12e>
 80009da:	4a94      	ldr	r2, [pc, #592]	; (8000c2c <HAL_GPIO_Init+0x2ac>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d04c      	beq.n	8000a7a <HAL_GPIO_Init+0xfa>
 80009e0:	4a92      	ldr	r2, [pc, #584]	; (8000c2c <HAL_GPIO_Init+0x2ac>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d863      	bhi.n	8000aae <HAL_GPIO_Init+0x12e>
 80009e6:	4a92      	ldr	r2, [pc, #584]	; (8000c30 <HAL_GPIO_Init+0x2b0>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d046      	beq.n	8000a7a <HAL_GPIO_Init+0xfa>
 80009ec:	4a90      	ldr	r2, [pc, #576]	; (8000c30 <HAL_GPIO_Init+0x2b0>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d85d      	bhi.n	8000aae <HAL_GPIO_Init+0x12e>
 80009f2:	2b12      	cmp	r3, #18
 80009f4:	d82a      	bhi.n	8000a4c <HAL_GPIO_Init+0xcc>
 80009f6:	2b12      	cmp	r3, #18
 80009f8:	d859      	bhi.n	8000aae <HAL_GPIO_Init+0x12e>
 80009fa:	a201      	add	r2, pc, #4	; (adr r2, 8000a00 <HAL_GPIO_Init+0x80>)
 80009fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a00:	08000a7b 	.word	0x08000a7b
 8000a04:	08000a55 	.word	0x08000a55
 8000a08:	08000a67 	.word	0x08000a67
 8000a0c:	08000aa9 	.word	0x08000aa9
 8000a10:	08000aaf 	.word	0x08000aaf
 8000a14:	08000aaf 	.word	0x08000aaf
 8000a18:	08000aaf 	.word	0x08000aaf
 8000a1c:	08000aaf 	.word	0x08000aaf
 8000a20:	08000aaf 	.word	0x08000aaf
 8000a24:	08000aaf 	.word	0x08000aaf
 8000a28:	08000aaf 	.word	0x08000aaf
 8000a2c:	08000aaf 	.word	0x08000aaf
 8000a30:	08000aaf 	.word	0x08000aaf
 8000a34:	08000aaf 	.word	0x08000aaf
 8000a38:	08000aaf 	.word	0x08000aaf
 8000a3c:	08000aaf 	.word	0x08000aaf
 8000a40:	08000aaf 	.word	0x08000aaf
 8000a44:	08000a5d 	.word	0x08000a5d
 8000a48:	08000a71 	.word	0x08000a71
 8000a4c:	4a79      	ldr	r2, [pc, #484]	; (8000c34 <HAL_GPIO_Init+0x2b4>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d013      	beq.n	8000a7a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a52:	e02c      	b.n	8000aae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	623b      	str	r3, [r7, #32]
          break;
 8000a5a:	e029      	b.n	8000ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	3304      	adds	r3, #4
 8000a62:	623b      	str	r3, [r7, #32]
          break;
 8000a64:	e024      	b.n	8000ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	68db      	ldr	r3, [r3, #12]
 8000a6a:	3308      	adds	r3, #8
 8000a6c:	623b      	str	r3, [r7, #32]
          break;
 8000a6e:	e01f      	b.n	8000ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	330c      	adds	r3, #12
 8000a76:	623b      	str	r3, [r7, #32]
          break;
 8000a78:	e01a      	b.n	8000ab0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	689b      	ldr	r3, [r3, #8]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d102      	bne.n	8000a88 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a82:	2304      	movs	r3, #4
 8000a84:	623b      	str	r3, [r7, #32]
          break;
 8000a86:	e013      	b.n	8000ab0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	689b      	ldr	r3, [r3, #8]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d105      	bne.n	8000a9c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a90:	2308      	movs	r3, #8
 8000a92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	69fa      	ldr	r2, [r7, #28]
 8000a98:	611a      	str	r2, [r3, #16]
          break;
 8000a9a:	e009      	b.n	8000ab0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a9c:	2308      	movs	r3, #8
 8000a9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	69fa      	ldr	r2, [r7, #28]
 8000aa4:	615a      	str	r2, [r3, #20]
          break;
 8000aa6:	e003      	b.n	8000ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	623b      	str	r3, [r7, #32]
          break;
 8000aac:	e000      	b.n	8000ab0 <HAL_GPIO_Init+0x130>
          break;
 8000aae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ab0:	69bb      	ldr	r3, [r7, #24]
 8000ab2:	2bff      	cmp	r3, #255	; 0xff
 8000ab4:	d801      	bhi.n	8000aba <HAL_GPIO_Init+0x13a>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	e001      	b.n	8000abe <HAL_GPIO_Init+0x13e>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	3304      	adds	r3, #4
 8000abe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	2bff      	cmp	r3, #255	; 0xff
 8000ac4:	d802      	bhi.n	8000acc <HAL_GPIO_Init+0x14c>
 8000ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	e002      	b.n	8000ad2 <HAL_GPIO_Init+0x152>
 8000acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ace:	3b08      	subs	r3, #8
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	210f      	movs	r1, #15
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	401a      	ands	r2, r3
 8000ae4:	6a39      	ldr	r1, [r7, #32]
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8000aec:	431a      	orrs	r2, r3
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	f000 80b1 	beq.w	8000c62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b00:	4b4d      	ldr	r3, [pc, #308]	; (8000c38 <HAL_GPIO_Init+0x2b8>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	4a4c      	ldr	r2, [pc, #304]	; (8000c38 <HAL_GPIO_Init+0x2b8>)
 8000b06:	f043 0301 	orr.w	r3, r3, #1
 8000b0a:	6193      	str	r3, [r2, #24]
 8000b0c:	4b4a      	ldr	r3, [pc, #296]	; (8000c38 <HAL_GPIO_Init+0x2b8>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	f003 0301 	and.w	r3, r3, #1
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b18:	4a48      	ldr	r2, [pc, #288]	; (8000c3c <HAL_GPIO_Init+0x2bc>)
 8000b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b1c:	089b      	lsrs	r3, r3, #2
 8000b1e:	3302      	adds	r3, #2
 8000b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b28:	f003 0303 	and.w	r3, r3, #3
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	220f      	movs	r2, #15
 8000b30:	fa02 f303 	lsl.w	r3, r2, r3
 8000b34:	43db      	mvns	r3, r3
 8000b36:	68fa      	ldr	r2, [r7, #12]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4a40      	ldr	r2, [pc, #256]	; (8000c40 <HAL_GPIO_Init+0x2c0>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d013      	beq.n	8000b6c <HAL_GPIO_Init+0x1ec>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a3f      	ldr	r2, [pc, #252]	; (8000c44 <HAL_GPIO_Init+0x2c4>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d00d      	beq.n	8000b68 <HAL_GPIO_Init+0x1e8>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4a3e      	ldr	r2, [pc, #248]	; (8000c48 <HAL_GPIO_Init+0x2c8>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d007      	beq.n	8000b64 <HAL_GPIO_Init+0x1e4>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4a3d      	ldr	r2, [pc, #244]	; (8000c4c <HAL_GPIO_Init+0x2cc>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d101      	bne.n	8000b60 <HAL_GPIO_Init+0x1e0>
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	e006      	b.n	8000b6e <HAL_GPIO_Init+0x1ee>
 8000b60:	2304      	movs	r3, #4
 8000b62:	e004      	b.n	8000b6e <HAL_GPIO_Init+0x1ee>
 8000b64:	2302      	movs	r3, #2
 8000b66:	e002      	b.n	8000b6e <HAL_GPIO_Init+0x1ee>
 8000b68:	2301      	movs	r3, #1
 8000b6a:	e000      	b.n	8000b6e <HAL_GPIO_Init+0x1ee>
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b70:	f002 0203 	and.w	r2, r2, #3
 8000b74:	0092      	lsls	r2, r2, #2
 8000b76:	4093      	lsls	r3, r2
 8000b78:	68fa      	ldr	r2, [r7, #12]
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b7e:	492f      	ldr	r1, [pc, #188]	; (8000c3c <HAL_GPIO_Init+0x2bc>)
 8000b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b82:	089b      	lsrs	r3, r3, #2
 8000b84:	3302      	adds	r3, #2
 8000b86:	68fa      	ldr	r2, [r7, #12]
 8000b88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d006      	beq.n	8000ba6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b98:	4b2d      	ldr	r3, [pc, #180]	; (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000b9a:	689a      	ldr	r2, [r3, #8]
 8000b9c:	492c      	ldr	r1, [pc, #176]	; (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000b9e:	69bb      	ldr	r3, [r7, #24]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	608b      	str	r3, [r1, #8]
 8000ba4:	e006      	b.n	8000bb4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ba6:	4b2a      	ldr	r3, [pc, #168]	; (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000ba8:	689a      	ldr	r2, [r3, #8]
 8000baa:	69bb      	ldr	r3, [r7, #24]
 8000bac:	43db      	mvns	r3, r3
 8000bae:	4928      	ldr	r1, [pc, #160]	; (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d006      	beq.n	8000bce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bc0:	4b23      	ldr	r3, [pc, #140]	; (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000bc2:	68da      	ldr	r2, [r3, #12]
 8000bc4:	4922      	ldr	r1, [pc, #136]	; (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000bc6:	69bb      	ldr	r3, [r7, #24]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	60cb      	str	r3, [r1, #12]
 8000bcc:	e006      	b.n	8000bdc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000bce:	4b20      	ldr	r3, [pc, #128]	; (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000bd0:	68da      	ldr	r2, [r3, #12]
 8000bd2:	69bb      	ldr	r3, [r7, #24]
 8000bd4:	43db      	mvns	r3, r3
 8000bd6:	491e      	ldr	r1, [pc, #120]	; (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000bd8:	4013      	ands	r3, r2
 8000bda:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d006      	beq.n	8000bf6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000be8:	4b19      	ldr	r3, [pc, #100]	; (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000bea:	685a      	ldr	r2, [r3, #4]
 8000bec:	4918      	ldr	r1, [pc, #96]	; (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	604b      	str	r3, [r1, #4]
 8000bf4:	e006      	b.n	8000c04 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bf6:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000bf8:	685a      	ldr	r2, [r3, #4]
 8000bfa:	69bb      	ldr	r3, [r7, #24]
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	4914      	ldr	r1, [pc, #80]	; (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000c00:	4013      	ands	r3, r2
 8000c02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d021      	beq.n	8000c54 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c10:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	490e      	ldr	r1, [pc, #56]	; (8000c50 <HAL_GPIO_Init+0x2d0>)
 8000c16:	69bb      	ldr	r3, [r7, #24]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	600b      	str	r3, [r1, #0]
 8000c1c:	e021      	b.n	8000c62 <HAL_GPIO_Init+0x2e2>
 8000c1e:	bf00      	nop
 8000c20:	10320000 	.word	0x10320000
 8000c24:	10310000 	.word	0x10310000
 8000c28:	10220000 	.word	0x10220000
 8000c2c:	10210000 	.word	0x10210000
 8000c30:	10120000 	.word	0x10120000
 8000c34:	10110000 	.word	0x10110000
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	40010000 	.word	0x40010000
 8000c40:	40010800 	.word	0x40010800
 8000c44:	40010c00 	.word	0x40010c00
 8000c48:	40011000 	.word	0x40011000
 8000c4c:	40011400 	.word	0x40011400
 8000c50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c54:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <HAL_GPIO_Init+0x304>)
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	4909      	ldr	r1, [pc, #36]	; (8000c84 <HAL_GPIO_Init+0x304>)
 8000c5e:	4013      	ands	r3, r2
 8000c60:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c64:	3301      	adds	r3, #1
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	f47f ae8e 	bne.w	8000994 <HAL_GPIO_Init+0x14>
  }
}
 8000c78:	bf00      	nop
 8000c7a:	bf00      	nop
 8000c7c:	372c      	adds	r7, #44	; 0x2c
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr
 8000c84:	40010400 	.word	0x40010400

08000c88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	807b      	strh	r3, [r7, #2]
 8000c94:	4613      	mov	r3, r2
 8000c96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c98:	787b      	ldrb	r3, [r7, #1]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d003      	beq.n	8000ca6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c9e:	887a      	ldrh	r2, [r7, #2]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ca4:	e003      	b.n	8000cae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ca6:	887b      	ldrh	r3, [r7, #2]
 8000ca8:	041a      	lsls	r2, r3, #16
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	611a      	str	r2, [r3, #16]
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr

08000cb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d101      	bne.n	8000cca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e12b      	b.n	8000f22 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d106      	bne.n	8000ce4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff fc52 	bl	8000588 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2224      	movs	r2, #36	; 0x24
 8000ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f022 0201 	bic.w	r2, r2, #1
 8000cfa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000d1c:	f001 f832 	bl	8001d84 <HAL_RCC_GetPCLK1Freq>
 8000d20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	4a81      	ldr	r2, [pc, #516]	; (8000f2c <HAL_I2C_Init+0x274>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d807      	bhi.n	8000d3c <HAL_I2C_Init+0x84>
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	4a80      	ldr	r2, [pc, #512]	; (8000f30 <HAL_I2C_Init+0x278>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	bf94      	ite	ls
 8000d34:	2301      	movls	r3, #1
 8000d36:	2300      	movhi	r3, #0
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	e006      	b.n	8000d4a <HAL_I2C_Init+0x92>
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	4a7d      	ldr	r2, [pc, #500]	; (8000f34 <HAL_I2C_Init+0x27c>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	bf94      	ite	ls
 8000d44:	2301      	movls	r3, #1
 8000d46:	2300      	movhi	r3, #0
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e0e7      	b.n	8000f22 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	4a78      	ldr	r2, [pc, #480]	; (8000f38 <HAL_I2C_Init+0x280>)
 8000d56:	fba2 2303 	umull	r2, r3, r2, r3
 8000d5a:	0c9b      	lsrs	r3, r3, #18
 8000d5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	68ba      	ldr	r2, [r7, #8]
 8000d6e:	430a      	orrs	r2, r1
 8000d70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	6a1b      	ldr	r3, [r3, #32]
 8000d78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	4a6a      	ldr	r2, [pc, #424]	; (8000f2c <HAL_I2C_Init+0x274>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d802      	bhi.n	8000d8c <HAL_I2C_Init+0xd4>
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	e009      	b.n	8000da0 <HAL_I2C_Init+0xe8>
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000d92:	fb02 f303 	mul.w	r3, r2, r3
 8000d96:	4a69      	ldr	r2, [pc, #420]	; (8000f3c <HAL_I2C_Init+0x284>)
 8000d98:	fba2 2303 	umull	r2, r3, r2, r3
 8000d9c:	099b      	lsrs	r3, r3, #6
 8000d9e:	3301      	adds	r3, #1
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	6812      	ldr	r2, [r2, #0]
 8000da4:	430b      	orrs	r3, r1
 8000da6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	69db      	ldr	r3, [r3, #28]
 8000dae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000db2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	495c      	ldr	r1, [pc, #368]	; (8000f2c <HAL_I2C_Init+0x274>)
 8000dbc:	428b      	cmp	r3, r1
 8000dbe:	d819      	bhi.n	8000df4 <HAL_I2C_Init+0x13c>
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	1e59      	subs	r1, r3, #1
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	fbb1 f3f3 	udiv	r3, r1, r3
 8000dce:	1c59      	adds	r1, r3, #1
 8000dd0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000dd4:	400b      	ands	r3, r1
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d00a      	beq.n	8000df0 <HAL_I2C_Init+0x138>
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	1e59      	subs	r1, r3, #1
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000de8:	3301      	adds	r3, #1
 8000dea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dee:	e051      	b.n	8000e94 <HAL_I2C_Init+0x1dc>
 8000df0:	2304      	movs	r3, #4
 8000df2:	e04f      	b.n	8000e94 <HAL_I2C_Init+0x1dc>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d111      	bne.n	8000e20 <HAL_I2C_Init+0x168>
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	1e58      	subs	r0, r3, #1
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6859      	ldr	r1, [r3, #4]
 8000e04:	460b      	mov	r3, r1
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	440b      	add	r3, r1
 8000e0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e0e:	3301      	adds	r3, #1
 8000e10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	bf0c      	ite	eq
 8000e18:	2301      	moveq	r3, #1
 8000e1a:	2300      	movne	r3, #0
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	e012      	b.n	8000e46 <HAL_I2C_Init+0x18e>
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	1e58      	subs	r0, r3, #1
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6859      	ldr	r1, [r3, #4]
 8000e28:	460b      	mov	r3, r1
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	440b      	add	r3, r1
 8000e2e:	0099      	lsls	r1, r3, #2
 8000e30:	440b      	add	r3, r1
 8000e32:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e36:	3301      	adds	r3, #1
 8000e38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	bf0c      	ite	eq
 8000e40:	2301      	moveq	r3, #1
 8000e42:	2300      	movne	r3, #0
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <HAL_I2C_Init+0x196>
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e022      	b.n	8000e94 <HAL_I2C_Init+0x1dc>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d10e      	bne.n	8000e74 <HAL_I2C_Init+0x1bc>
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	1e58      	subs	r0, r3, #1
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6859      	ldr	r1, [r3, #4]
 8000e5e:	460b      	mov	r3, r1
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	440b      	add	r3, r1
 8000e64:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e68:	3301      	adds	r3, #1
 8000e6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e72:	e00f      	b.n	8000e94 <HAL_I2C_Init+0x1dc>
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	1e58      	subs	r0, r3, #1
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6859      	ldr	r1, [r3, #4]
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	440b      	add	r3, r1
 8000e82:	0099      	lsls	r1, r3, #2
 8000e84:	440b      	add	r3, r1
 8000e86:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e94:	6879      	ldr	r1, [r7, #4]
 8000e96:	6809      	ldr	r1, [r1, #0]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	69da      	ldr	r2, [r3, #28]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6a1b      	ldr	r3, [r3, #32]
 8000eae:	431a      	orrs	r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000ec2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	6911      	ldr	r1, [r2, #16]
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	68d2      	ldr	r2, [r2, #12]
 8000ece:	4311      	orrs	r1, r2
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	6812      	ldr	r2, [r2, #0]
 8000ed4:	430b      	orrs	r3, r1
 8000ed6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	68db      	ldr	r3, [r3, #12]
 8000ede:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	695a      	ldr	r2, [r3, #20]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	699b      	ldr	r3, [r3, #24]
 8000eea:	431a      	orrs	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f042 0201 	orr.w	r2, r2, #1
 8000f02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2220      	movs	r2, #32
 8000f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2200      	movs	r2, #0
 8000f16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	000186a0 	.word	0x000186a0
 8000f30:	001e847f 	.word	0x001e847f
 8000f34:	003d08ff 	.word	0x003d08ff
 8000f38:	431bde83 	.word	0x431bde83
 8000f3c:	10624dd3 	.word	0x10624dd3

08000f40 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b088      	sub	sp, #32
 8000f44:	af02      	add	r7, sp, #8
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	607a      	str	r2, [r7, #4]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	817b      	strh	r3, [r7, #10]
 8000f50:	4613      	mov	r3, r2
 8000f52:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000f54:	f7ff fc02 	bl	800075c <HAL_GetTick>
 8000f58:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	2b20      	cmp	r3, #32
 8000f64:	f040 80e0 	bne.w	8001128 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	9300      	str	r3, [sp, #0]
 8000f6c:	2319      	movs	r3, #25
 8000f6e:	2201      	movs	r2, #1
 8000f70:	4970      	ldr	r1, [pc, #448]	; (8001134 <HAL_I2C_Master_Transmit+0x1f4>)
 8000f72:	68f8      	ldr	r0, [r7, #12]
 8000f74:	f000 f964 	bl	8001240 <I2C_WaitOnFlagUntilTimeout>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	e0d3      	b.n	800112a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d101      	bne.n	8000f90 <HAL_I2C_Master_Transmit+0x50>
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	e0cc      	b.n	800112a <HAL_I2C_Master_Transmit+0x1ea>
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	2201      	movs	r2, #1
 8000f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d007      	beq.n	8000fb6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f042 0201 	orr.w	r2, r2, #1
 8000fb4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000fc4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	2221      	movs	r2, #33	; 0x21
 8000fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	2210      	movs	r2, #16
 8000fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	893a      	ldrh	r2, [r7, #8]
 8000fe6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	4a50      	ldr	r2, [pc, #320]	; (8001138 <HAL_I2C_Master_Transmit+0x1f8>)
 8000ff6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000ff8:	8979      	ldrh	r1, [r7, #10]
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	6a3a      	ldr	r2, [r7, #32]
 8000ffe:	68f8      	ldr	r0, [r7, #12]
 8001000:	f000 f89c 	bl	800113c <I2C_MasterRequestWrite>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e08d      	b.n	800112a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	695b      	ldr	r3, [r3, #20]
 8001018:	613b      	str	r3, [r7, #16]
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	613b      	str	r3, [r7, #16]
 8001022:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001024:	e066      	b.n	80010f4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001026:	697a      	ldr	r2, [r7, #20]
 8001028:	6a39      	ldr	r1, [r7, #32]
 800102a:	68f8      	ldr	r0, [r7, #12]
 800102c:	f000 fa22 	bl	8001474 <I2C_WaitOnTXEFlagUntilTimeout>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d00d      	beq.n	8001052 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	2b04      	cmp	r3, #4
 800103c:	d107      	bne.n	800104e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800104c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e06b      	b.n	800112a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001056:	781a      	ldrb	r2, [r3, #0]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001062:	1c5a      	adds	r2, r3, #1
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800106c:	b29b      	uxth	r3, r3
 800106e:	3b01      	subs	r3, #1
 8001070:	b29a      	uxth	r2, r3
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800107a:	3b01      	subs	r3, #1
 800107c:	b29a      	uxth	r2, r3
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	695b      	ldr	r3, [r3, #20]
 8001088:	f003 0304 	and.w	r3, r3, #4
 800108c:	2b04      	cmp	r3, #4
 800108e:	d11b      	bne.n	80010c8 <HAL_I2C_Master_Transmit+0x188>
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001094:	2b00      	cmp	r3, #0
 8001096:	d017      	beq.n	80010c8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109c:	781a      	ldrb	r2, [r3, #0]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a8:	1c5a      	adds	r2, r3, #1
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	3b01      	subs	r3, #1
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010c0:	3b01      	subs	r3, #1
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010c8:	697a      	ldr	r2, [r7, #20]
 80010ca:	6a39      	ldr	r1, [r7, #32]
 80010cc:	68f8      	ldr	r0, [r7, #12]
 80010ce:	f000 fa19 	bl	8001504 <I2C_WaitOnBTFFlagUntilTimeout>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d00d      	beq.n	80010f4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010dc:	2b04      	cmp	r3, #4
 80010de:	d107      	bne.n	80010f0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010ee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	e01a      	b.n	800112a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d194      	bne.n	8001026 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800110a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2220      	movs	r2, #32
 8001110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2200      	movs	r2, #0
 8001118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	2200      	movs	r2, #0
 8001120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001124:	2300      	movs	r3, #0
 8001126:	e000      	b.n	800112a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001128:	2302      	movs	r3, #2
  }
}
 800112a:	4618      	mov	r0, r3
 800112c:	3718      	adds	r7, #24
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	00100002 	.word	0x00100002
 8001138:	ffff0000 	.word	0xffff0000

0800113c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b088      	sub	sp, #32
 8001140:	af02      	add	r7, sp, #8
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	607a      	str	r2, [r7, #4]
 8001146:	603b      	str	r3, [r7, #0]
 8001148:	460b      	mov	r3, r1
 800114a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001150:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	2b08      	cmp	r3, #8
 8001156:	d006      	beq.n	8001166 <I2C_MasterRequestWrite+0x2a>
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d003      	beq.n	8001166 <I2C_MasterRequestWrite+0x2a>
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001164:	d108      	bne.n	8001178 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	e00b      	b.n	8001190 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117c:	2b12      	cmp	r3, #18
 800117e:	d107      	bne.n	8001190 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800118e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800119c:	68f8      	ldr	r0, [r7, #12]
 800119e:	f000 f84f 	bl	8001240 <I2C_WaitOnFlagUntilTimeout>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d00d      	beq.n	80011c4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011b6:	d103      	bne.n	80011c0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80011c0:	2303      	movs	r3, #3
 80011c2:	e035      	b.n	8001230 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	691b      	ldr	r3, [r3, #16]
 80011c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80011cc:	d108      	bne.n	80011e0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80011ce:	897b      	ldrh	r3, [r7, #10]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	461a      	mov	r2, r3
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80011dc:	611a      	str	r2, [r3, #16]
 80011de:	e01b      	b.n	8001218 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80011e0:	897b      	ldrh	r3, [r7, #10]
 80011e2:	11db      	asrs	r3, r3, #7
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	f003 0306 	and.w	r3, r3, #6
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	f063 030f 	orn	r3, r3, #15
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	490e      	ldr	r1, [pc, #56]	; (8001238 <I2C_MasterRequestWrite+0xfc>)
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	f000 f898 	bl	8001334 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e010      	b.n	8001230 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800120e:	897b      	ldrh	r3, [r7, #10]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	4907      	ldr	r1, [pc, #28]	; (800123c <I2C_MasterRequestWrite+0x100>)
 800121e:	68f8      	ldr	r0, [r7, #12]
 8001220:	f000 f888 	bl	8001334 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e000      	b.n	8001230 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800122e:	2300      	movs	r3, #0
}
 8001230:	4618      	mov	r0, r3
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	00010008 	.word	0x00010008
 800123c:	00010002 	.word	0x00010002

08001240 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	603b      	str	r3, [r7, #0]
 800124c:	4613      	mov	r3, r2
 800124e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001250:	e048      	b.n	80012e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001258:	d044      	beq.n	80012e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800125a:	f7ff fa7f 	bl	800075c <HAL_GetTick>
 800125e:	4602      	mov	r2, r0
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	683a      	ldr	r2, [r7, #0]
 8001266:	429a      	cmp	r2, r3
 8001268:	d302      	bcc.n	8001270 <I2C_WaitOnFlagUntilTimeout+0x30>
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d139      	bne.n	80012e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	0c1b      	lsrs	r3, r3, #16
 8001274:	b2db      	uxtb	r3, r3
 8001276:	2b01      	cmp	r3, #1
 8001278:	d10d      	bne.n	8001296 <I2C_WaitOnFlagUntilTimeout+0x56>
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	695b      	ldr	r3, [r3, #20]
 8001280:	43da      	mvns	r2, r3
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	4013      	ands	r3, r2
 8001286:	b29b      	uxth	r3, r3
 8001288:	2b00      	cmp	r3, #0
 800128a:	bf0c      	ite	eq
 800128c:	2301      	moveq	r3, #1
 800128e:	2300      	movne	r3, #0
 8001290:	b2db      	uxtb	r3, r3
 8001292:	461a      	mov	r2, r3
 8001294:	e00c      	b.n	80012b0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	43da      	mvns	r2, r3
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	4013      	ands	r3, r2
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	bf0c      	ite	eq
 80012a8:	2301      	moveq	r3, #1
 80012aa:	2300      	movne	r3, #0
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	461a      	mov	r2, r3
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d116      	bne.n	80012e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2200      	movs	r2, #0
 80012ba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2220      	movs	r2, #32
 80012c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2200      	movs	r2, #0
 80012c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d0:	f043 0220 	orr.w	r2, r3, #32
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	2200      	movs	r2, #0
 80012dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e023      	b.n	800132c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	0c1b      	lsrs	r3, r3, #16
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d10d      	bne.n	800130a <I2C_WaitOnFlagUntilTimeout+0xca>
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	695b      	ldr	r3, [r3, #20]
 80012f4:	43da      	mvns	r2, r3
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	4013      	ands	r3, r2
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	bf0c      	ite	eq
 8001300:	2301      	moveq	r3, #1
 8001302:	2300      	movne	r3, #0
 8001304:	b2db      	uxtb	r3, r3
 8001306:	461a      	mov	r2, r3
 8001308:	e00c      	b.n	8001324 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	43da      	mvns	r2, r3
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	4013      	ands	r3, r2
 8001316:	b29b      	uxth	r3, r3
 8001318:	2b00      	cmp	r3, #0
 800131a:	bf0c      	ite	eq
 800131c:	2301      	moveq	r3, #1
 800131e:	2300      	movne	r3, #0
 8001320:	b2db      	uxtb	r3, r3
 8001322:	461a      	mov	r2, r3
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	429a      	cmp	r2, r3
 8001328:	d093      	beq.n	8001252 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800132a:	2300      	movs	r3, #0
}
 800132c:	4618      	mov	r0, r3
 800132e:	3710      	adds	r7, #16
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
 8001340:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001342:	e071      	b.n	8001428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800134e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001352:	d123      	bne.n	800139c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001362:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800136c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	2200      	movs	r2, #0
 8001372:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2220      	movs	r2, #32
 8001378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2200      	movs	r2, #0
 8001380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	f043 0204 	orr.w	r2, r3, #4
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2200      	movs	r2, #0
 8001394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e067      	b.n	800146c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a2:	d041      	beq.n	8001428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013a4:	f7ff f9da 	bl	800075c <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d302      	bcc.n	80013ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d136      	bne.n	8001428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	0c1b      	lsrs	r3, r3, #16
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d10c      	bne.n	80013de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	43da      	mvns	r2, r3
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	4013      	ands	r3, r2
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	bf14      	ite	ne
 80013d6:	2301      	movne	r3, #1
 80013d8:	2300      	moveq	r3, #0
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	e00b      	b.n	80013f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	43da      	mvns	r2, r3
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	4013      	ands	r3, r2
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	bf14      	ite	ne
 80013f0:	2301      	movne	r3, #1
 80013f2:	2300      	moveq	r3, #0
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d016      	beq.n	8001428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2200      	movs	r2, #0
 80013fe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2220      	movs	r2, #32
 8001404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2200      	movs	r2, #0
 800140c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001414:	f043 0220 	orr.w	r2, r3, #32
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2200      	movs	r2, #0
 8001420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e021      	b.n	800146c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	0c1b      	lsrs	r3, r3, #16
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b01      	cmp	r3, #1
 8001430:	d10c      	bne.n	800144c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	695b      	ldr	r3, [r3, #20]
 8001438:	43da      	mvns	r2, r3
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	4013      	ands	r3, r2
 800143e:	b29b      	uxth	r3, r3
 8001440:	2b00      	cmp	r3, #0
 8001442:	bf14      	ite	ne
 8001444:	2301      	movne	r3, #1
 8001446:	2300      	moveq	r3, #0
 8001448:	b2db      	uxtb	r3, r3
 800144a:	e00b      	b.n	8001464 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	43da      	mvns	r2, r3
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	4013      	ands	r3, r2
 8001458:	b29b      	uxth	r3, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	bf14      	ite	ne
 800145e:	2301      	movne	r3, #1
 8001460:	2300      	moveq	r3, #0
 8001462:	b2db      	uxtb	r3, r3
 8001464:	2b00      	cmp	r3, #0
 8001466:	f47f af6d 	bne.w	8001344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800146a:	2300      	movs	r3, #0
}
 800146c:	4618      	mov	r0, r3
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001480:	e034      	b.n	80014ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001482:	68f8      	ldr	r0, [r7, #12]
 8001484:	f000 f886 	bl	8001594 <I2C_IsAcknowledgeFailed>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e034      	b.n	80014fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001498:	d028      	beq.n	80014ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800149a:	f7ff f95f 	bl	800075c <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	68ba      	ldr	r2, [r7, #8]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d302      	bcc.n	80014b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d11d      	bne.n	80014ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ba:	2b80      	cmp	r3, #128	; 0x80
 80014bc:	d016      	beq.n	80014ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2200      	movs	r2, #0
 80014c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2220      	movs	r2, #32
 80014c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d8:	f043 0220 	orr.w	r2, r3, #32
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e007      	b.n	80014fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014f6:	2b80      	cmp	r3, #128	; 0x80
 80014f8:	d1c3      	bne.n	8001482 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001510:	e034      	b.n	800157c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001512:	68f8      	ldr	r0, [r7, #12]
 8001514:	f000 f83e 	bl	8001594 <I2C_IsAcknowledgeFailed>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e034      	b.n	800158c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001528:	d028      	beq.n	800157c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800152a:	f7ff f917 	bl	800075c <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	68ba      	ldr	r2, [r7, #8]
 8001536:	429a      	cmp	r2, r3
 8001538:	d302      	bcc.n	8001540 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d11d      	bne.n	800157c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	f003 0304 	and.w	r3, r3, #4
 800154a:	2b04      	cmp	r3, #4
 800154c:	d016      	beq.n	800157c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2200      	movs	r2, #0
 8001552:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2220      	movs	r2, #32
 8001558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2200      	movs	r2, #0
 8001560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	f043 0220 	orr.w	r2, r3, #32
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2200      	movs	r2, #0
 8001574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e007      	b.n	800158c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	f003 0304 	and.w	r3, r3, #4
 8001586:	2b04      	cmp	r3, #4
 8001588:	d1c3      	bne.n	8001512 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800158a:	2300      	movs	r3, #0
}
 800158c:	4618      	mov	r0, r3
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	695b      	ldr	r3, [r3, #20]
 80015a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015aa:	d11b      	bne.n	80015e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80015b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2220      	movs	r2, #32
 80015c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d0:	f043 0204 	orr.w	r2, r3, #4
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e000      	b.n	80015e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr

080015f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e272      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	f000 8087 	beq.w	800171e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001610:	4b92      	ldr	r3, [pc, #584]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 030c 	and.w	r3, r3, #12
 8001618:	2b04      	cmp	r3, #4
 800161a:	d00c      	beq.n	8001636 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800161c:	4b8f      	ldr	r3, [pc, #572]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f003 030c 	and.w	r3, r3, #12
 8001624:	2b08      	cmp	r3, #8
 8001626:	d112      	bne.n	800164e <HAL_RCC_OscConfig+0x5e>
 8001628:	4b8c      	ldr	r3, [pc, #560]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001634:	d10b      	bne.n	800164e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001636:	4b89      	ldr	r3, [pc, #548]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d06c      	beq.n	800171c <HAL_RCC_OscConfig+0x12c>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d168      	bne.n	800171c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e24c      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001656:	d106      	bne.n	8001666 <HAL_RCC_OscConfig+0x76>
 8001658:	4b80      	ldr	r3, [pc, #512]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a7f      	ldr	r2, [pc, #508]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 800165e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001662:	6013      	str	r3, [r2, #0]
 8001664:	e02e      	b.n	80016c4 <HAL_RCC_OscConfig+0xd4>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d10c      	bne.n	8001688 <HAL_RCC_OscConfig+0x98>
 800166e:	4b7b      	ldr	r3, [pc, #492]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a7a      	ldr	r2, [pc, #488]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 8001674:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001678:	6013      	str	r3, [r2, #0]
 800167a:	4b78      	ldr	r3, [pc, #480]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a77      	ldr	r2, [pc, #476]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 8001680:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	e01d      	b.n	80016c4 <HAL_RCC_OscConfig+0xd4>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001690:	d10c      	bne.n	80016ac <HAL_RCC_OscConfig+0xbc>
 8001692:	4b72      	ldr	r3, [pc, #456]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a71      	ldr	r2, [pc, #452]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 8001698:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800169c:	6013      	str	r3, [r2, #0]
 800169e:	4b6f      	ldr	r3, [pc, #444]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a6e      	ldr	r2, [pc, #440]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 80016a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016a8:	6013      	str	r3, [r2, #0]
 80016aa:	e00b      	b.n	80016c4 <HAL_RCC_OscConfig+0xd4>
 80016ac:	4b6b      	ldr	r3, [pc, #428]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a6a      	ldr	r2, [pc, #424]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 80016b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016b6:	6013      	str	r3, [r2, #0]
 80016b8:	4b68      	ldr	r3, [pc, #416]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a67      	ldr	r2, [pc, #412]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 80016be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d013      	beq.n	80016f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016cc:	f7ff f846 	bl	800075c <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016d4:	f7ff f842 	bl	800075c <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b64      	cmp	r3, #100	; 0x64
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e200      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e6:	4b5d      	ldr	r3, [pc, #372]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0f0      	beq.n	80016d4 <HAL_RCC_OscConfig+0xe4>
 80016f2:	e014      	b.n	800171e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f4:	f7ff f832 	bl	800075c <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016fc:	f7ff f82e 	bl	800075c <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b64      	cmp	r3, #100	; 0x64
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e1ec      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800170e:	4b53      	ldr	r3, [pc, #332]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1f0      	bne.n	80016fc <HAL_RCC_OscConfig+0x10c>
 800171a:	e000      	b.n	800171e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800171c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d063      	beq.n	80017f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800172a:	4b4c      	ldr	r3, [pc, #304]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f003 030c 	and.w	r3, r3, #12
 8001732:	2b00      	cmp	r3, #0
 8001734:	d00b      	beq.n	800174e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001736:	4b49      	ldr	r3, [pc, #292]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f003 030c 	and.w	r3, r3, #12
 800173e:	2b08      	cmp	r3, #8
 8001740:	d11c      	bne.n	800177c <HAL_RCC_OscConfig+0x18c>
 8001742:	4b46      	ldr	r3, [pc, #280]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d116      	bne.n	800177c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800174e:	4b43      	ldr	r3, [pc, #268]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d005      	beq.n	8001766 <HAL_RCC_OscConfig+0x176>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d001      	beq.n	8001766 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e1c0      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001766:	4b3d      	ldr	r3, [pc, #244]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	4939      	ldr	r1, [pc, #228]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 8001776:	4313      	orrs	r3, r2
 8001778:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800177a:	e03a      	b.n	80017f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d020      	beq.n	80017c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001784:	4b36      	ldr	r3, [pc, #216]	; (8001860 <HAL_RCC_OscConfig+0x270>)
 8001786:	2201      	movs	r2, #1
 8001788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178a:	f7fe ffe7 	bl	800075c <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001790:	e008      	b.n	80017a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001792:	f7fe ffe3 	bl	800075c <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e1a1      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017a4:	4b2d      	ldr	r3, [pc, #180]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d0f0      	beq.n	8001792 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b0:	4b2a      	ldr	r3, [pc, #168]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	695b      	ldr	r3, [r3, #20]
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	4927      	ldr	r1, [pc, #156]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 80017c0:	4313      	orrs	r3, r2
 80017c2:	600b      	str	r3, [r1, #0]
 80017c4:	e015      	b.n	80017f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017c6:	4b26      	ldr	r3, [pc, #152]	; (8001860 <HAL_RCC_OscConfig+0x270>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017cc:	f7fe ffc6 	bl	800075c <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017d4:	f7fe ffc2 	bl	800075c <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e180      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017e6:	4b1d      	ldr	r3, [pc, #116]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1f0      	bne.n	80017d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0308 	and.w	r3, r3, #8
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d03a      	beq.n	8001874 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d019      	beq.n	800183a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001806:	4b17      	ldr	r3, [pc, #92]	; (8001864 <HAL_RCC_OscConfig+0x274>)
 8001808:	2201      	movs	r2, #1
 800180a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800180c:	f7fe ffa6 	bl	800075c <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001814:	f7fe ffa2 	bl	800075c <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e160      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001826:	4b0d      	ldr	r3, [pc, #52]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 8001828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d0f0      	beq.n	8001814 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001832:	2001      	movs	r0, #1
 8001834:	f000 faba 	bl	8001dac <RCC_Delay>
 8001838:	e01c      	b.n	8001874 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800183a:	4b0a      	ldr	r3, [pc, #40]	; (8001864 <HAL_RCC_OscConfig+0x274>)
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001840:	f7fe ff8c 	bl	800075c <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001846:	e00f      	b.n	8001868 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001848:	f7fe ff88 	bl	800075c <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d908      	bls.n	8001868 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e146      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4f8>
 800185a:	bf00      	nop
 800185c:	40021000 	.word	0x40021000
 8001860:	42420000 	.word	0x42420000
 8001864:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001868:	4b92      	ldr	r3, [pc, #584]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 800186a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1e9      	bne.n	8001848 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	2b00      	cmp	r3, #0
 800187e:	f000 80a6 	beq.w	80019ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001882:	2300      	movs	r3, #0
 8001884:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001886:	4b8b      	ldr	r3, [pc, #556]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d10d      	bne.n	80018ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001892:	4b88      	ldr	r3, [pc, #544]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	4a87      	ldr	r2, [pc, #540]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 8001898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800189c:	61d3      	str	r3, [r2, #28]
 800189e:	4b85      	ldr	r3, [pc, #532]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a6:	60bb      	str	r3, [r7, #8]
 80018a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018aa:	2301      	movs	r3, #1
 80018ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ae:	4b82      	ldr	r3, [pc, #520]	; (8001ab8 <HAL_RCC_OscConfig+0x4c8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d118      	bne.n	80018ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ba:	4b7f      	ldr	r3, [pc, #508]	; (8001ab8 <HAL_RCC_OscConfig+0x4c8>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a7e      	ldr	r2, [pc, #504]	; (8001ab8 <HAL_RCC_OscConfig+0x4c8>)
 80018c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018c6:	f7fe ff49 	bl	800075c <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ce:	f7fe ff45 	bl	800075c <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b64      	cmp	r3, #100	; 0x64
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e103      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e0:	4b75      	ldr	r3, [pc, #468]	; (8001ab8 <HAL_RCC_OscConfig+0x4c8>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d0f0      	beq.n	80018ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d106      	bne.n	8001902 <HAL_RCC_OscConfig+0x312>
 80018f4:	4b6f      	ldr	r3, [pc, #444]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 80018f6:	6a1b      	ldr	r3, [r3, #32]
 80018f8:	4a6e      	ldr	r2, [pc, #440]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 80018fa:	f043 0301 	orr.w	r3, r3, #1
 80018fe:	6213      	str	r3, [r2, #32]
 8001900:	e02d      	b.n	800195e <HAL_RCC_OscConfig+0x36e>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d10c      	bne.n	8001924 <HAL_RCC_OscConfig+0x334>
 800190a:	4b6a      	ldr	r3, [pc, #424]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 800190c:	6a1b      	ldr	r3, [r3, #32]
 800190e:	4a69      	ldr	r2, [pc, #420]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 8001910:	f023 0301 	bic.w	r3, r3, #1
 8001914:	6213      	str	r3, [r2, #32]
 8001916:	4b67      	ldr	r3, [pc, #412]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 8001918:	6a1b      	ldr	r3, [r3, #32]
 800191a:	4a66      	ldr	r2, [pc, #408]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 800191c:	f023 0304 	bic.w	r3, r3, #4
 8001920:	6213      	str	r3, [r2, #32]
 8001922:	e01c      	b.n	800195e <HAL_RCC_OscConfig+0x36e>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	2b05      	cmp	r3, #5
 800192a:	d10c      	bne.n	8001946 <HAL_RCC_OscConfig+0x356>
 800192c:	4b61      	ldr	r3, [pc, #388]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	4a60      	ldr	r2, [pc, #384]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 8001932:	f043 0304 	orr.w	r3, r3, #4
 8001936:	6213      	str	r3, [r2, #32]
 8001938:	4b5e      	ldr	r3, [pc, #376]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 800193a:	6a1b      	ldr	r3, [r3, #32]
 800193c:	4a5d      	ldr	r2, [pc, #372]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	6213      	str	r3, [r2, #32]
 8001944:	e00b      	b.n	800195e <HAL_RCC_OscConfig+0x36e>
 8001946:	4b5b      	ldr	r3, [pc, #364]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 8001948:	6a1b      	ldr	r3, [r3, #32]
 800194a:	4a5a      	ldr	r2, [pc, #360]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 800194c:	f023 0301 	bic.w	r3, r3, #1
 8001950:	6213      	str	r3, [r2, #32]
 8001952:	4b58      	ldr	r3, [pc, #352]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 8001954:	6a1b      	ldr	r3, [r3, #32]
 8001956:	4a57      	ldr	r2, [pc, #348]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 8001958:	f023 0304 	bic.w	r3, r3, #4
 800195c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d015      	beq.n	8001992 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001966:	f7fe fef9 	bl	800075c <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800196c:	e00a      	b.n	8001984 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800196e:	f7fe fef5 	bl	800075c <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	f241 3288 	movw	r2, #5000	; 0x1388
 800197c:	4293      	cmp	r3, r2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e0b1      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001984:	4b4b      	ldr	r3, [pc, #300]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d0ee      	beq.n	800196e <HAL_RCC_OscConfig+0x37e>
 8001990:	e014      	b.n	80019bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001992:	f7fe fee3 	bl	800075c <HAL_GetTick>
 8001996:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001998:	e00a      	b.n	80019b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800199a:	f7fe fedf 	bl	800075c <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e09b      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019b0:	4b40      	ldr	r3, [pc, #256]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 80019b2:	6a1b      	ldr	r3, [r3, #32]
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d1ee      	bne.n	800199a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019bc:	7dfb      	ldrb	r3, [r7, #23]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d105      	bne.n	80019ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019c2:	4b3c      	ldr	r3, [pc, #240]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	4a3b      	ldr	r2, [pc, #236]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 80019c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f000 8087 	beq.w	8001ae6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019d8:	4b36      	ldr	r3, [pc, #216]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f003 030c 	and.w	r3, r3, #12
 80019e0:	2b08      	cmp	r3, #8
 80019e2:	d061      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	69db      	ldr	r3, [r3, #28]
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d146      	bne.n	8001a7a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ec:	4b33      	ldr	r3, [pc, #204]	; (8001abc <HAL_RCC_OscConfig+0x4cc>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f2:	f7fe feb3 	bl	800075c <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019fa:	f7fe feaf 	bl	800075c <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e06d      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a0c:	4b29      	ldr	r3, [pc, #164]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1f0      	bne.n	80019fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a20:	d108      	bne.n	8001a34 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a22:	4b24      	ldr	r3, [pc, #144]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	4921      	ldr	r1, [pc, #132]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a34:	4b1f      	ldr	r3, [pc, #124]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a19      	ldr	r1, [r3, #32]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a44:	430b      	orrs	r3, r1
 8001a46:	491b      	ldr	r1, [pc, #108]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a4c:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <HAL_RCC_OscConfig+0x4cc>)
 8001a4e:	2201      	movs	r2, #1
 8001a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a52:	f7fe fe83 	bl	800075c <HAL_GetTick>
 8001a56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a58:	e008      	b.n	8001a6c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a5a:	f7fe fe7f 	bl	800075c <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e03d      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a6c:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0f0      	beq.n	8001a5a <HAL_RCC_OscConfig+0x46a>
 8001a78:	e035      	b.n	8001ae6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a7a:	4b10      	ldr	r3, [pc, #64]	; (8001abc <HAL_RCC_OscConfig+0x4cc>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a80:	f7fe fe6c 	bl	800075c <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a88:	f7fe fe68 	bl	800075c <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e026      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a9a:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1f0      	bne.n	8001a88 <HAL_RCC_OscConfig+0x498>
 8001aa6:	e01e      	b.n	8001ae6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	69db      	ldr	r3, [r3, #28]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d107      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e019      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4f8>
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	40007000 	.word	0x40007000
 8001abc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ac0:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <HAL_RCC_OscConfig+0x500>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a1b      	ldr	r3, [r3, #32]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d106      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d001      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e000      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3718      	adds	r7, #24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40021000 	.word	0x40021000

08001af4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d101      	bne.n	8001b08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e0d0      	b.n	8001caa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b08:	4b6a      	ldr	r3, [pc, #424]	; (8001cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d910      	bls.n	8001b38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b16:	4b67      	ldr	r3, [pc, #412]	; (8001cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f023 0207 	bic.w	r2, r3, #7
 8001b1e:	4965      	ldr	r1, [pc, #404]	; (8001cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b26:	4b63      	ldr	r3, [pc, #396]	; (8001cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d001      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e0b8      	b.n	8001caa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d020      	beq.n	8001b86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d005      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b50:	4b59      	ldr	r3, [pc, #356]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	4a58      	ldr	r2, [pc, #352]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0308 	and.w	r3, r3, #8
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d005      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b68:	4b53      	ldr	r3, [pc, #332]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	4a52      	ldr	r2, [pc, #328]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b74:	4b50      	ldr	r3, [pc, #320]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	494d      	ldr	r1, [pc, #308]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d040      	beq.n	8001c14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d107      	bne.n	8001baa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b9a:	4b47      	ldr	r3, [pc, #284]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d115      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e07f      	b.n	8001caa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d107      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bb2:	4b41      	ldr	r3, [pc, #260]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d109      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e073      	b.n	8001caa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc2:	4b3d      	ldr	r3, [pc, #244]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e06b      	b.n	8001caa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bd2:	4b39      	ldr	r3, [pc, #228]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f023 0203 	bic.w	r2, r3, #3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	4936      	ldr	r1, [pc, #216]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001be4:	f7fe fdba 	bl	800075c <HAL_GetTick>
 8001be8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bea:	e00a      	b.n	8001c02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bec:	f7fe fdb6 	bl	800075c <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e053      	b.n	8001caa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c02:	4b2d      	ldr	r3, [pc, #180]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 020c 	and.w	r2, r3, #12
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d1eb      	bne.n	8001bec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c14:	4b27      	ldr	r3, [pc, #156]	; (8001cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0307 	and.w	r3, r3, #7
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d210      	bcs.n	8001c44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c22:	4b24      	ldr	r3, [pc, #144]	; (8001cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f023 0207 	bic.w	r2, r3, #7
 8001c2a:	4922      	ldr	r1, [pc, #136]	; (8001cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c32:	4b20      	ldr	r3, [pc, #128]	; (8001cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d001      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e032      	b.n	8001caa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d008      	beq.n	8001c62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c50:	4b19      	ldr	r3, [pc, #100]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	4916      	ldr	r1, [pc, #88]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0308 	and.w	r3, r3, #8
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d009      	beq.n	8001c82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c6e:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	490e      	ldr	r1, [pc, #56]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c82:	f000 f821 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 8001c86:	4602      	mov	r2, r0
 8001c88:	4b0b      	ldr	r3, [pc, #44]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	091b      	lsrs	r3, r3, #4
 8001c8e:	f003 030f 	and.w	r3, r3, #15
 8001c92:	490a      	ldr	r1, [pc, #40]	; (8001cbc <HAL_RCC_ClockConfig+0x1c8>)
 8001c94:	5ccb      	ldrb	r3, [r1, r3]
 8001c96:	fa22 f303 	lsr.w	r3, r2, r3
 8001c9a:	4a09      	ldr	r2, [pc, #36]	; (8001cc0 <HAL_RCC_ClockConfig+0x1cc>)
 8001c9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c9e:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <HAL_RCC_ClockConfig+0x1d0>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7fe fd18 	bl	80006d8 <HAL_InitTick>

  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40022000 	.word	0x40022000
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	08001e80 	.word	0x08001e80
 8001cc0:	20000000 	.word	0x20000000
 8001cc4:	20000004 	.word	0x20000004

08001cc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b087      	sub	sp, #28
 8001ccc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
 8001cda:	2300      	movs	r3, #0
 8001cdc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ce2:	4b1e      	ldr	r3, [pc, #120]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x94>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f003 030c 	and.w	r3, r3, #12
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	d002      	beq.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x30>
 8001cf2:	2b08      	cmp	r3, #8
 8001cf4:	d003      	beq.n	8001cfe <HAL_RCC_GetSysClockFreq+0x36>
 8001cf6:	e027      	b.n	8001d48 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cf8:	4b19      	ldr	r3, [pc, #100]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cfa:	613b      	str	r3, [r7, #16]
      break;
 8001cfc:	e027      	b.n	8001d4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	0c9b      	lsrs	r3, r3, #18
 8001d02:	f003 030f 	and.w	r3, r3, #15
 8001d06:	4a17      	ldr	r2, [pc, #92]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d08:	5cd3      	ldrb	r3, [r2, r3]
 8001d0a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d010      	beq.n	8001d38 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d16:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x94>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	0c5b      	lsrs	r3, r3, #17
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	4a11      	ldr	r2, [pc, #68]	; (8001d68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d22:	5cd3      	ldrb	r3, [r2, r3]
 8001d24:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a0d      	ldr	r2, [pc, #52]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d2a:	fb03 f202 	mul.w	r2, r3, r2
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d34:	617b      	str	r3, [r7, #20]
 8001d36:	e004      	b.n	8001d42 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a0c      	ldr	r2, [pc, #48]	; (8001d6c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d3c:	fb02 f303 	mul.w	r3, r2, r3
 8001d40:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	613b      	str	r3, [r7, #16]
      break;
 8001d46:	e002      	b.n	8001d4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d48:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d4a:	613b      	str	r3, [r7, #16]
      break;
 8001d4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d4e:	693b      	ldr	r3, [r7, #16]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	371c      	adds	r7, #28
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bc80      	pop	{r7}
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	007a1200 	.word	0x007a1200
 8001d64:	08001e98 	.word	0x08001e98
 8001d68:	08001ea8 	.word	0x08001ea8
 8001d6c:	003d0900 	.word	0x003d0900

08001d70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d74:	4b02      	ldr	r3, [pc, #8]	; (8001d80 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d76:	681b      	ldr	r3, [r3, #0]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr
 8001d80:	20000000 	.word	0x20000000

08001d84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d88:	f7ff fff2 	bl	8001d70 <HAL_RCC_GetHCLKFreq>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	0a1b      	lsrs	r3, r3, #8
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	4903      	ldr	r1, [pc, #12]	; (8001da8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d9a:	5ccb      	ldrb	r3, [r1, r3]
 8001d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40021000 	.word	0x40021000
 8001da8:	08001e90 	.word	0x08001e90

08001dac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001db4:	4b0a      	ldr	r3, [pc, #40]	; (8001de0 <RCC_Delay+0x34>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a0a      	ldr	r2, [pc, #40]	; (8001de4 <RCC_Delay+0x38>)
 8001dba:	fba2 2303 	umull	r2, r3, r2, r3
 8001dbe:	0a5b      	lsrs	r3, r3, #9
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	fb02 f303 	mul.w	r3, r2, r3
 8001dc6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001dc8:	bf00      	nop
  }
  while (Delay --);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	1e5a      	subs	r2, r3, #1
 8001dce:	60fa      	str	r2, [r7, #12]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1f9      	bne.n	8001dc8 <RCC_Delay+0x1c>
}
 8001dd4:	bf00      	nop
 8001dd6:	bf00      	nop
 8001dd8:	3714      	adds	r7, #20
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr
 8001de0:	20000000 	.word	0x20000000
 8001de4:	10624dd3 	.word	0x10624dd3

08001de8 <__libc_init_array>:
 8001de8:	b570      	push	{r4, r5, r6, lr}
 8001dea:	2600      	movs	r6, #0
 8001dec:	4d0c      	ldr	r5, [pc, #48]	; (8001e20 <__libc_init_array+0x38>)
 8001dee:	4c0d      	ldr	r4, [pc, #52]	; (8001e24 <__libc_init_array+0x3c>)
 8001df0:	1b64      	subs	r4, r4, r5
 8001df2:	10a4      	asrs	r4, r4, #2
 8001df4:	42a6      	cmp	r6, r4
 8001df6:	d109      	bne.n	8001e0c <__libc_init_array+0x24>
 8001df8:	f000 f822 	bl	8001e40 <_init>
 8001dfc:	2600      	movs	r6, #0
 8001dfe:	4d0a      	ldr	r5, [pc, #40]	; (8001e28 <__libc_init_array+0x40>)
 8001e00:	4c0a      	ldr	r4, [pc, #40]	; (8001e2c <__libc_init_array+0x44>)
 8001e02:	1b64      	subs	r4, r4, r5
 8001e04:	10a4      	asrs	r4, r4, #2
 8001e06:	42a6      	cmp	r6, r4
 8001e08:	d105      	bne.n	8001e16 <__libc_init_array+0x2e>
 8001e0a:	bd70      	pop	{r4, r5, r6, pc}
 8001e0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e10:	4798      	blx	r3
 8001e12:	3601      	adds	r6, #1
 8001e14:	e7ee      	b.n	8001df4 <__libc_init_array+0xc>
 8001e16:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e1a:	4798      	blx	r3
 8001e1c:	3601      	adds	r6, #1
 8001e1e:	e7f2      	b.n	8001e06 <__libc_init_array+0x1e>
 8001e20:	08001eac 	.word	0x08001eac
 8001e24:	08001eac 	.word	0x08001eac
 8001e28:	08001eac 	.word	0x08001eac
 8001e2c:	08001eb0 	.word	0x08001eb0

08001e30 <memset>:
 8001e30:	4603      	mov	r3, r0
 8001e32:	4402      	add	r2, r0
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d100      	bne.n	8001e3a <memset+0xa>
 8001e38:	4770      	bx	lr
 8001e3a:	f803 1b01 	strb.w	r1, [r3], #1
 8001e3e:	e7f9      	b.n	8001e34 <memset+0x4>

08001e40 <_init>:
 8001e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e42:	bf00      	nop
 8001e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e46:	bc08      	pop	{r3}
 8001e48:	469e      	mov	lr, r3
 8001e4a:	4770      	bx	lr

08001e4c <_fini>:
 8001e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e4e:	bf00      	nop
 8001e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e52:	bc08      	pop	{r3}
 8001e54:	469e      	mov	lr, r3
 8001e56:	4770      	bx	lr
