
OLED_SSD1306.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d28  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003194  08005e38  08005e38  00015e38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fcc  08008fcc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08008fcc  08008fcc  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008fcc  08008fcc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fcc  08008fcc  00018fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fd0  08008fd0  00018fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008fd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  200001dc  080091b0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  080091b0  00020274  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000073df  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000163b  00000000  00000000  000275e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c0  00000000  00000000  00028c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000720  00000000  00000000  000293e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179a0  00000000  00000000  00029b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009c35  00000000  00000000  000414a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083cb9  00000000  00000000  0004b0d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ced8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003088  00000000  00000000  000cede0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08005e20 	.word	0x08005e20

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08005e20 	.word	0x08005e20

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <OLED_Init>:
	//0b01000000 = 0x40

//Funcion para mandar un byte de datos que actuara como "comando" o "dato"


void OLED_Init(void){
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	; 0x28
 8000b2c:	af02      	add	r7, sp, #8

	uint8_t datos[26];

	datos[0]  = CMD;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	713b      	strb	r3, [r7, #4]
	datos[1]  = SSD1306_DISPLAYOFF;//0xAE
 8000b32:	23ae      	movs	r3, #174	; 0xae
 8000b34:	717b      	strb	r3, [r7, #5]
	datos[2]  = SSD1306_SETDISPLAYCLOCKDIV;   //0xD5;
 8000b36:	23d5      	movs	r3, #213	; 0xd5
 8000b38:	71bb      	strb	r3, [r7, #6]
	datos[3]  = 0x80;//0x80
 8000b3a:	2380      	movs	r3, #128	; 0x80
 8000b3c:	71fb      	strb	r3, [r7, #7]
	datos[4]  = SSD1306_SETMULTIPLEX;//0xA8
 8000b3e:	23a8      	movs	r3, #168	; 0xa8
 8000b40:	723b      	strb	r3, [r7, #8]
	datos[5]  = (SSD1306_LCDHEIGHT-1);		   //0x3F  ----> 64 (0-63) valores 63=0x3F
 8000b42:	233f      	movs	r3, #63	; 0x3f
 8000b44:	727b      	strb	r3, [r7, #9]
	datos[6]  = SSD1306_SETDISPLAYOFFSET;     //0xD3
 8000b46:	23d3      	movs	r3, #211	; 0xd3
 8000b48:	72bb      	strb	r3, [r7, #10]
	datos[7]  = 0x00;						   //0x00
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	72fb      	strb	r3, [r7, #11]
	datos[8]  = (SSD1306_SETSTARTLINE | 0x00);  //0x40 ----> empezamos en la linea cero
 8000b4e:	2340      	movs	r3, #64	; 0x40
 8000b50:	733b      	strb	r3, [r7, #12]
	datos[9]  = SSD1306_CHARGEPUMP;		   //0x8D
 8000b52:	238d      	movs	r3, #141	; 0x8d
 8000b54:	737b      	strb	r3, [r7, #13]
	datos[10] = 0x14;						   //0x14 ----> VCC generado por el circuito interno de step up que eleva el voltaje de alimentacion a 7.5V para los pixeles del oled
 8000b56:	2314      	movs	r3, #20
 8000b58:	73bb      	strb	r3, [r7, #14]
	datos[11] = SSD1306_MEMORYMODE;		   //0x20
 8000b5a:	2320      	movs	r3, #32
 8000b5c:	73fb      	strb	r3, [r7, #15]
	datos[12] = HORIZONTAL_ADDRESSING_MODE;   //Modo de direccionamiento horizontal
 8000b5e:	2300      	movs	r3, #0
 8000b60:	743b      	strb	r3, [r7, #16]
	datos[13] = (SSD1306_SEGREMAP | COLUMN_ADDRESS_0_MAPPED_TO_SEG127);	   //0xA1
 8000b62:	23a1      	movs	r3, #161	; 0xa1
 8000b64:	747b      	strb	r3, [r7, #17]
	datos[14] = (SET_COM_OUTPUT_SCAN_DIRECTION | SCAN_FROM_COM63_TO_0);	   //0xC8
 8000b66:	23c8      	movs	r3, #200	; 0xc8
 8000b68:	74bb      	strb	r3, [r7, #18]
	datos[15] = SSD1306_SETCOMPINS;		   //0xDA
 8000b6a:	23da      	movs	r3, #218	; 0xda
 8000b6c:	74fb      	strb	r3, [r7, #19]

	switch(SSD1306_LCDHEIGHT){			//0x12 ----> 128*64:0x12   128*32:0x02
		case 32: datos[16] = 0x02;break;
		case 64: datos[16] = 0x12;break;
 8000b6e:	2312      	movs	r3, #18
 8000b70:	753b      	strb	r3, [r7, #20]
 8000b72:	bf00      	nop
	}

	datos[17] = SSD1306_SETCONTRAST;		   //0x81
 8000b74:	2381      	movs	r3, #129	; 0x81
 8000b76:	757b      	strb	r3, [r7, #21]
	datos[18] = 0xCF;						   //0xCF
 8000b78:	23cf      	movs	r3, #207	; 0xcf
 8000b7a:	75bb      	strb	r3, [r7, #22]
	datos[19] = SSD1306_SETPRECHARGE;         //0xD9
 8000b7c:	23d9      	movs	r3, #217	; 0xd9
 8000b7e:	75fb      	strb	r3, [r7, #23]
	datos[20] = 0xF1;						   //0xF1
 8000b80:	23f1      	movs	r3, #241	; 0xf1
 8000b82:	763b      	strb	r3, [r7, #24]
	datos[21] = SET_VCOMH_LEVEL;			   //0xDB
 8000b84:	23db      	movs	r3, #219	; 0xdb
 8000b86:	767b      	strb	r3, [r7, #25]
	datos[22] = 0x40;						   //0x40
 8000b88:	2340      	movs	r3, #64	; 0x40
 8000b8a:	76bb      	strb	r3, [r7, #26]
	datos[23] = SET_ENTIRE_DISPLAY_ON;        //0xA4
 8000b8c:	23a4      	movs	r3, #164	; 0xa4
 8000b8e:	76fb      	strb	r3, [r7, #27]
	datos[24] = SSD1306_NORMALDISPLAY;	       //0xA6
 8000b90:	23a6      	movs	r3, #166	; 0xa6
 8000b92:	773b      	strb	r3, [r7, #28]
	datos[25] = SSD1306_DISPLAYON;			   //0xAF -----> enciendo el display
 8000b94:	23af      	movs	r3, #175	; 0xaf
 8000b96:	777b      	strb	r3, [r7, #29]

	HAL_Delay(100);
 8000b98:	2064      	movs	r0, #100	; 0x64
 8000b9a:	f000 ff59 	bl	8001a50 <HAL_Delay>

	HAL_I2C_Master_Transmit (&hi2c1, SSD1306_I2C_ADDRESS, (uint8_t*)datos, 26, 100);
 8000b9e:	1d3a      	adds	r2, r7, #4
 8000ba0:	2364      	movs	r3, #100	; 0x64
 8000ba2:	9300      	str	r3, [sp, #0]
 8000ba4:	231a      	movs	r3, #26
 8000ba6:	2178      	movs	r1, #120	; 0x78
 8000ba8:	4804      	ldr	r0, [pc, #16]	; (8000bbc <OLED_Init+0x94>)
 8000baa:	f001 fb21 	bl	80021f0 <HAL_I2C_Master_Transmit>

	OLED_Clear();
 8000bae:	f000 f86f 	bl	8000c90 <OLED_Clear>
}
 8000bb2:	bf00      	nop
 8000bb4:	3720      	adds	r7, #32
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	200001f8 	.word	0x200001f8

08000bc0 <OLED_Write_Command_3bytes>:

void OLED_Write_Command_3bytes(uint8_t byte1, uint8_t byte2, uint8_t byte3){
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af02      	add	r7, sp, #8
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
 8000bca:	460b      	mov	r3, r1
 8000bcc:	71bb      	strb	r3, [r7, #6]
 8000bce:	4613      	mov	r3, r2
 8000bd0:	717b      	strb	r3, [r7, #5]
	uint8_t datos[4] = {CMD, byte1, byte2, byte3};
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	733b      	strb	r3, [r7, #12]
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	737b      	strb	r3, [r7, #13]
 8000bda:	79bb      	ldrb	r3, [r7, #6]
 8000bdc:	73bb      	strb	r3, [r7, #14]
 8000bde:	797b      	ldrb	r3, [r7, #5]
 8000be0:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SSD1306_I2C_ADDRESS, (uint8_t*)datos, 4, 100);
 8000be2:	f107 020c 	add.w	r2, r7, #12
 8000be6:	2364      	movs	r3, #100	; 0x64
 8000be8:	9300      	str	r3, [sp, #0]
 8000bea:	2304      	movs	r3, #4
 8000bec:	2178      	movs	r1, #120	; 0x78
 8000bee:	4803      	ldr	r0, [pc, #12]	; (8000bfc <OLED_Write_Command_3bytes+0x3c>)
 8000bf0:	f001 fafe 	bl	80021f0 <HAL_I2C_Master_Transmit>
}
 8000bf4:	bf00      	nop
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	200001f8 	.word	0x200001f8

08000c00 <OLED_Write_Data_1byte>:

void OLED_Write_Data_1byte(uint8_t byte1){
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af02      	add	r7, sp, #8
 8000c06:	4603      	mov	r3, r0
 8000c08:	71fb      	strb	r3, [r7, #7]
	uint8_t datos[2] = {DAT, byte1};
 8000c0a:	2340      	movs	r3, #64	; 0x40
 8000c0c:	733b      	strb	r3, [r7, #12]
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit (&hi2c1, SSD1306_I2C_ADDRESS, (uint8_t*)datos, 2, 100);
 8000c12:	f107 020c 	add.w	r2, r7, #12
 8000c16:	2364      	movs	r3, #100	; 0x64
 8000c18:	9300      	str	r3, [sp, #0]
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	2178      	movs	r1, #120	; 0x78
 8000c1e:	4803      	ldr	r0, [pc, #12]	; (8000c2c <OLED_Write_Data_1byte+0x2c>)
 8000c20:	f001 fae6 	bl	80021f0 <HAL_I2C_Master_Transmit>
}
 8000c24:	bf00      	nop
 8000c26:	3710      	adds	r7, #16
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	200001f8 	.word	0x200001f8

08000c30 <OLED_Draw_Pixel>:

void OLED_Draw_Pixel(uint8_t pag_inicio, uint8_t pag_final, uint8_t col_inicio, uint16_t col_final, uint8_t pixel){
 8000c30:	b590      	push	{r4, r7, lr}
 8000c32:	b087      	sub	sp, #28
 8000c34:	af02      	add	r7, sp, #8
 8000c36:	4604      	mov	r4, r0
 8000c38:	4608      	mov	r0, r1
 8000c3a:	4611      	mov	r1, r2
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4623      	mov	r3, r4
 8000c40:	71fb      	strb	r3, [r7, #7]
 8000c42:	4603      	mov	r3, r0
 8000c44:	71bb      	strb	r3, [r7, #6]
 8000c46:	460b      	mov	r3, r1
 8000c48:	717b      	strb	r3, [r7, #5]
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	807b      	strh	r3, [r7, #2]
	uint8_t datos[2];
	OLED_Write_Command_3bytes(SSD1306_PAGEADDR,pag_inicio,pag_final);
 8000c4e:	79ba      	ldrb	r2, [r7, #6]
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	4619      	mov	r1, r3
 8000c54:	2022      	movs	r0, #34	; 0x22
 8000c56:	f7ff ffb3 	bl	8000bc0 <OLED_Write_Command_3bytes>
	OLED_Write_Command_3bytes(SSD1306_COLUMNADDR,col_inicio,col_final);
 8000c5a:	887b      	ldrh	r3, [r7, #2]
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	797b      	ldrb	r3, [r7, #5]
 8000c60:	4619      	mov	r1, r3
 8000c62:	2021      	movs	r0, #33	; 0x21
 8000c64:	f7ff ffac 	bl	8000bc0 <OLED_Write_Command_3bytes>

	datos[0] = DAT;
 8000c68:	2340      	movs	r3, #64	; 0x40
 8000c6a:	733b      	strb	r3, [r7, #12]
	datos[1] = pixel;
 8000c6c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c70:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit (&hi2c1, SSD1306_I2C_ADDRESS, (uint8_t*)datos, 2, 100);
 8000c72:	f107 020c 	add.w	r2, r7, #12
 8000c76:	2364      	movs	r3, #100	; 0x64
 8000c78:	9300      	str	r3, [sp, #0]
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	2178      	movs	r1, #120	; 0x78
 8000c7e:	4803      	ldr	r0, [pc, #12]	; (8000c8c <OLED_Draw_Pixel+0x5c>)
 8000c80:	f001 fab6 	bl	80021f0 <HAL_I2C_Master_Transmit>
}
 8000c84:	bf00      	nop
 8000c86:	3714      	adds	r7, #20
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd90      	pop	{r4, r7, pc}
 8000c8c:	200001f8 	.word	0x200001f8

08000c90 <OLED_Clear>:

//Para limpiar la pantalla oled, esta funcion va desde la pag 0 hasta la pag 7
//Para la columna el datasheet menciona (en modo de direccionamiento horizontal):
//Si el puntero de la dirección de la columna alcanza la dirección final de la columna, el puntero de la dirección de la columna se restablece a la dirección de inicio de la columna y el puntero de dirección de página aumenta en 1.
//Es por eso que pongo de la columna 0 hasta la columna 1023(128columnas*8paginas)
void OLED_Clear(void){
 8000c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c94:	b088      	sub	sp, #32
 8000c96:	af02      	add	r7, sp, #8
 8000c98:	466b      	mov	r3, sp
 8000c9a:	4698      	mov	r8, r3
	uint8_t  pag_inicio = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	74fb      	strb	r3, [r7, #19]
	uint8_t  pag_final = ((SSD1306_LCDHEIGHT/8)-1);//128x32:4paginas(0-3)    128x64:8paginas(0-7)
 8000ca0:	2307      	movs	r3, #7
 8000ca2:	74bb      	strb	r3, [r7, #18]
	uint8_t  col_inicio = 0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	747b      	strb	r3, [r7, #17]
	uint16_t col_final = ((SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8)-1);//128x32:512pixeles/pagina (0-511)   128x64:1024pixeles/pagina (0-1023)
 8000ca8:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8000cac:	81fb      	strh	r3, [r7, #14]
	uint8_t  pixel = 0;//lleno de ceros todos los pixeles
 8000cae:	2300      	movs	r3, #0
 8000cb0:	737b      	strb	r3, [r7, #13]
	//una pagina tiene 8pixeles de alto, entonces 128x8=1024, hay 1024 pixeles por pagina(cantidad de datos a enviar para limpiar la pantalla por cada pagina)
	//128x32: DAT +  512datos = 513
	//128x64: DAT + 1024datos = 1025
	//Es por eso que al tamaño de los datos[] a enviar le aumento 2
	uint8_t datos[col_final+2];
 8000cb2:	89fb      	ldrh	r3, [r7, #14]
 8000cb4:	1c9e      	adds	r6, r3, #2
 8000cb6:	1e73      	subs	r3, r6, #1
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	4632      	mov	r2, r6
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4614      	mov	r4, r2
 8000cc0:	461d      	mov	r5, r3
 8000cc2:	f04f 0200 	mov.w	r2, #0
 8000cc6:	f04f 0300 	mov.w	r3, #0
 8000cca:	00eb      	lsls	r3, r5, #3
 8000ccc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000cd0:	00e2      	lsls	r2, r4, #3
 8000cd2:	4632      	mov	r2, r6
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	4610      	mov	r0, r2
 8000cd8:	4619      	mov	r1, r3
 8000cda:	f04f 0200 	mov.w	r2, #0
 8000cde:	f04f 0300 	mov.w	r3, #0
 8000ce2:	00cb      	lsls	r3, r1, #3
 8000ce4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000ce8:	00c2      	lsls	r2, r0, #3
 8000cea:	4633      	mov	r3, r6
 8000cec:	3307      	adds	r3, #7
 8000cee:	08db      	lsrs	r3, r3, #3
 8000cf0:	00db      	lsls	r3, r3, #3
 8000cf2:	ebad 0d03 	sub.w	sp, sp, r3
 8000cf6:	ab02      	add	r3, sp, #8
 8000cf8:	3300      	adds	r3, #0
 8000cfa:	607b      	str	r3, [r7, #4]

	OLED_Write_Command_3bytes(SSD1306_PAGEADDR,pag_inicio,pag_final);
 8000cfc:	7cba      	ldrb	r2, [r7, #18]
 8000cfe:	7cfb      	ldrb	r3, [r7, #19]
 8000d00:	4619      	mov	r1, r3
 8000d02:	2022      	movs	r0, #34	; 0x22
 8000d04:	f7ff ff5c 	bl	8000bc0 <OLED_Write_Command_3bytes>
	OLED_Write_Command_3bytes(SSD1306_COLUMNADDR,col_inicio,col_final);
 8000d08:	89fb      	ldrh	r3, [r7, #14]
 8000d0a:	b2da      	uxtb	r2, r3
 8000d0c:	7c7b      	ldrb	r3, [r7, #17]
 8000d0e:	4619      	mov	r1, r3
 8000d10:	2021      	movs	r0, #33	; 0x21
 8000d12:	f7ff ff55 	bl	8000bc0 <OLED_Write_Command_3bytes>

	datos[0] = DAT;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2240      	movs	r2, #64	; 0x40
 8000d1a:	701a      	strb	r2, [r3, #0]

	for(int j=col_inicio;j<=col_final;j++){
 8000d1c:	7c7b      	ldrb	r3, [r7, #17]
 8000d1e:	617b      	str	r3, [r7, #20]
 8000d20:	e007      	b.n	8000d32 <OLED_Clear+0xa2>
		datos[j+1] = pixel;//dato[1], dato[2], dato[3], .... , dato[1023]
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	3301      	adds	r3, #1
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	7b79      	ldrb	r1, [r7, #13]
 8000d2a:	54d1      	strb	r1, [r2, r3]
	for(int j=col_inicio;j<=col_final;j++){
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	617b      	str	r3, [r7, #20]
 8000d32:	89fb      	ldrh	r3, [r7, #14]
 8000d34:	697a      	ldr	r2, [r7, #20]
 8000d36:	429a      	cmp	r2, r3
 8000d38:	ddf3      	ble.n	8000d22 <OLED_Clear+0x92>
		//HAL_Delay(10); //descomentar para probar la libreria y ver la impresion de pixeles de manera lenta
	}

	HAL_I2C_Master_Transmit (&hi2c1, SSD1306_I2C_ADDRESS, (uint8_t*)datos, col_final+2, 100);
 8000d3a:	89fb      	ldrh	r3, [r7, #14]
 8000d3c:	3302      	adds	r3, #2
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	2264      	movs	r2, #100	; 0x64
 8000d42:	9200      	str	r2, [sp, #0]
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	2178      	movs	r1, #120	; 0x78
 8000d48:	4804      	ldr	r0, [pc, #16]	; (8000d5c <OLED_Clear+0xcc>)
 8000d4a:	f001 fa51 	bl	80021f0 <HAL_I2C_Master_Transmit>
 8000d4e:	46c5      	mov	sp, r8
}
 8000d50:	bf00      	nop
 8000d52:	3718      	adds	r7, #24
 8000d54:	46bd      	mov	sp, r7
 8000d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d5a:	bf00      	nop
 8000d5c:	200001f8 	.word	0x200001f8

08000d60 <OLED_Draw_8_Pixel>:

void OLED_Draw_8_Pixel(uint8_t pag_inicio, uint8_t col_inicio, uint8_t pixel_8bits){
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	71bb      	strb	r3, [r7, #6]
 8000d6e:	4613      	mov	r3, r2
 8000d70:	717b      	strb	r3, [r7, #5]
	OLED_Write_Command_3bytes(SSD1306_PAGEADDR,pag_inicio,pag_inicio);
 8000d72:	79fa      	ldrb	r2, [r7, #7]
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	4619      	mov	r1, r3
 8000d78:	2022      	movs	r0, #34	; 0x22
 8000d7a:	f7ff ff21 	bl	8000bc0 <OLED_Write_Command_3bytes>
	OLED_Write_Command_3bytes(SSD1306_COLUMNADDR,col_inicio,col_inicio);
 8000d7e:	79ba      	ldrb	r2, [r7, #6]
 8000d80:	79bb      	ldrb	r3, [r7, #6]
 8000d82:	4619      	mov	r1, r3
 8000d84:	2021      	movs	r0, #33	; 0x21
 8000d86:	f7ff ff1b 	bl	8000bc0 <OLED_Write_Command_3bytes>
	OLED_Write_Data_1byte(pixel_8bits);
 8000d8a:	797b      	ldrb	r3, [r7, #5]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ff37 	bl	8000c00 <OLED_Write_Data_1byte>
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <OLED_Print_Letra>:

void OLED_Print_Letra(uint8_t pag, uint8_t col, uint8_t font_size, char letra){ //pagina(0,7)  columna(0-127)    letra
 8000d9c:	b590      	push	{r4, r7, lr}
 8000d9e:	b08b      	sub	sp, #44	; 0x2c
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4604      	mov	r4, r0
 8000da4:	4608      	mov	r0, r1
 8000da6:	4611      	mov	r1, r2
 8000da8:	461a      	mov	r2, r3
 8000daa:	4623      	mov	r3, r4
 8000dac:	71fb      	strb	r3, [r7, #7]
 8000dae:	4603      	mov	r3, r0
 8000db0:	71bb      	strb	r3, [r7, #6]
 8000db2:	460b      	mov	r3, r1
 8000db4:	717b      	strb	r3, [r7, #5]
 8000db6:	4613      	mov	r3, r2
 8000db8:	713b      	strb	r3, [r7, #4]
	uint16_t pos;     //variable para almacenar la posicion recuperada de la matriz o arreglo
	letra = letra-32; //resto menos 32 para tener el codigo ASCCI
 8000dba:	793b      	ldrb	r3, [r7, #4]
 8000dbc:	3b20      	subs	r3, #32
 8000dbe:	713b      	strb	r3, [r7, #4]

	switch(font_size){
 8000dc0:	797b      	ldrb	r3, [r7, #5]
 8000dc2:	2b03      	cmp	r3, #3
 8000dc4:	d05e      	beq.n	8000e84 <OLED_Print_Letra+0xe8>
 8000dc6:	2b03      	cmp	r3, #3
 8000dc8:	f300 80bf 	bgt.w	8000f4a <OLED_Print_Letra+0x1ae>
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d002      	beq.n	8000dd6 <OLED_Print_Letra+0x3a>
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	d01f      	beq.n	8000e14 <OLED_Print_Letra+0x78>
			OLED_Draw_8_Pixel(pag+2,i,FONT_3[pos3]);
			pos3+=3;
		}
		break;
    }
}
 8000dd4:	e0b9      	b.n	8000f4a <OLED_Print_Letra+0x1ae>
				pos = letra * FONT_1_WIDTH;  //me ubico en su array correcto multiplicando por 6
 8000dd6:	793b      	ldrb	r3, [r7, #4]
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	461a      	mov	r2, r3
 8000ddc:	0052      	lsls	r2, r2, #1
 8000dde:	4413      	add	r3, r2
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	84fb      	strh	r3, [r7, #38]	; 0x26
				for(int i=col; i<col+FONT_1_WIDTH; i++) {
 8000de4:	79bb      	ldrb	r3, [r7, #6]
 8000de6:	623b      	str	r3, [r7, #32]
 8000de8:	e00e      	b.n	8000e08 <OLED_Print_Letra+0x6c>
					OLED_Draw_8_Pixel(pag,i,FONT_1[pos]);
 8000dea:	6a3b      	ldr	r3, [r7, #32]
 8000dec:	b2d9      	uxtb	r1, r3
 8000dee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000df0:	4a58      	ldr	r2, [pc, #352]	; (8000f54 <OLED_Print_Letra+0x1b8>)
 8000df2:	5cd2      	ldrb	r2, [r2, r3]
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ffb2 	bl	8000d60 <OLED_Draw_8_Pixel>
					pos++;
 8000dfc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000dfe:	3301      	adds	r3, #1
 8000e00:	84fb      	strh	r3, [r7, #38]	; 0x26
				for(int i=col; i<col+FONT_1_WIDTH; i++) {
 8000e02:	6a3b      	ldr	r3, [r7, #32]
 8000e04:	3301      	adds	r3, #1
 8000e06:	623b      	str	r3, [r7, #32]
 8000e08:	79bb      	ldrb	r3, [r7, #6]
 8000e0a:	3305      	adds	r3, #5
 8000e0c:	6a3a      	ldr	r2, [r7, #32]
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	ddeb      	ble.n	8000dea <OLED_Print_Letra+0x4e>
			break;
 8000e12:	e09a      	b.n	8000f4a <OLED_Print_Letra+0x1ae>
				pos = letra * (FONT_2_WIDTH*2);  //me ubico en su array correcto multiplico por 2 ya que la altura sera de 16pixeles utilizando 8pixles por pagina y en total usara 2 paginas
 8000e14:	793b      	ldrb	r3, [r7, #4]
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	461a      	mov	r2, r3
 8000e1a:	00d2      	lsls	r2, r2, #3
 8000e1c:	4413      	add	r3, r2
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	84fb      	strh	r3, [r7, #38]	; 0x26
				for(int i=col; i<col+FONT_2_WIDTH; i++) {       //9
 8000e22:	79bb      	ldrb	r3, [r7, #6]
 8000e24:	61fb      	str	r3, [r7, #28]
 8000e26:	e00e      	b.n	8000e46 <OLED_Print_Letra+0xaa>
					OLED_Draw_8_Pixel(pag,i,FONT_2[pos]);
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	b2d9      	uxtb	r1, r3
 8000e2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e2e:	4a4a      	ldr	r2, [pc, #296]	; (8000f58 <OLED_Print_Letra+0x1bc>)
 8000e30:	5cd2      	ldrb	r2, [r2, r3]
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff93 	bl	8000d60 <OLED_Draw_8_Pixel>
					pos++;
 8000e3a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	84fb      	strh	r3, [r7, #38]	; 0x26
				for(int i=col; i<col+FONT_2_WIDTH; i++) {       //9
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	3301      	adds	r3, #1
 8000e44:	61fb      	str	r3, [r7, #28]
 8000e46:	79bb      	ldrb	r3, [r7, #6]
 8000e48:	3308      	adds	r3, #8
 8000e4a:	69fa      	ldr	r2, [r7, #28]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	ddeb      	ble.n	8000e28 <OLED_Print_Letra+0x8c>
				for(int i=col; i<col+FONT_2_WIDTH; i++) {      //9
 8000e50:	79bb      	ldrb	r3, [r7, #6]
 8000e52:	61bb      	str	r3, [r7, #24]
 8000e54:	e010      	b.n	8000e78 <OLED_Print_Letra+0xdc>
					OLED_Draw_8_Pixel(pag+1,i,FONT_2[pos]);
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	b2d8      	uxtb	r0, r3
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	b2d9      	uxtb	r1, r3
 8000e60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e62:	4a3d      	ldr	r2, [pc, #244]	; (8000f58 <OLED_Print_Letra+0x1bc>)
 8000e64:	5cd3      	ldrb	r3, [r2, r3]
 8000e66:	461a      	mov	r2, r3
 8000e68:	f7ff ff7a 	bl	8000d60 <OLED_Draw_8_Pixel>
					pos++;
 8000e6c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e6e:	3301      	adds	r3, #1
 8000e70:	84fb      	strh	r3, [r7, #38]	; 0x26
				for(int i=col; i<col+FONT_2_WIDTH; i++) {      //9
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	3301      	adds	r3, #1
 8000e76:	61bb      	str	r3, [r7, #24]
 8000e78:	79bb      	ldrb	r3, [r7, #6]
 8000e7a:	3308      	adds	r3, #8
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	dde9      	ble.n	8000e56 <OLED_Print_Letra+0xba>
			break;
 8000e82:	e062      	b.n	8000f4a <OLED_Print_Letra+0x1ae>
		pos = letra * (FONT_3_WIDTH*3);  //me ubico en su array correcto multiplico por 2 ya que la altura sera de 16pixeles utilizando 8pixles por pagina y en total usara 2 paginas
 8000e84:	793b      	ldrb	r3, [r7, #4]
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	461a      	mov	r2, r3
 8000e8a:	0112      	lsls	r2, r2, #4
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	84fb      	strh	r3, [r7, #38]	; 0x26
		uint16_t pos2 = (letra * (FONT_3_WIDTH*3))+1;
 8000e92:	793b      	ldrb	r3, [r7, #4]
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	461a      	mov	r2, r3
 8000e98:	0112      	lsls	r2, r2, #4
 8000e9a:	1ad3      	subs	r3, r2, r3
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	82fb      	strh	r3, [r7, #22]
		uint16_t pos3 = (letra * (FONT_3_WIDTH*3))+2;
 8000ea4:	793b      	ldrb	r3, [r7, #4]
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	0112      	lsls	r2, r2, #4
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	3302      	adds	r3, #2
 8000eb4:	82bb      	strh	r3, [r7, #20]
		for(int i=col; i<col+FONT_3_WIDTH; i++) {
 8000eb6:	79bb      	ldrb	r3, [r7, #6]
 8000eb8:	613b      	str	r3, [r7, #16]
 8000eba:	e00e      	b.n	8000eda <OLED_Print_Letra+0x13e>
			OLED_Draw_8_Pixel(pag,i,FONT_3[pos]);
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	b2d9      	uxtb	r1, r3
 8000ec0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000ec2:	4a26      	ldr	r2, [pc, #152]	; (8000f5c <OLED_Print_Letra+0x1c0>)
 8000ec4:	5cd2      	ldrb	r2, [r2, r3]
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff ff49 	bl	8000d60 <OLED_Draw_8_Pixel>
			pos+=3;
 8000ece:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000ed0:	3303      	adds	r3, #3
 8000ed2:	84fb      	strh	r3, [r7, #38]	; 0x26
		for(int i=col; i<col+FONT_3_WIDTH; i++) {
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	613b      	str	r3, [r7, #16]
 8000eda:	79bb      	ldrb	r3, [r7, #6]
 8000edc:	3313      	adds	r3, #19
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	ddeb      	ble.n	8000ebc <OLED_Print_Letra+0x120>
		for(int i=col; i<col+FONT_3_WIDTH; i++) {
 8000ee4:	79bb      	ldrb	r3, [r7, #6]
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	e010      	b.n	8000f0c <OLED_Print_Letra+0x170>
			OLED_Draw_8_Pixel(pag+1,i,FONT_3[pos2]);
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	3301      	adds	r3, #1
 8000eee:	b2d8      	uxtb	r0, r3
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	b2d9      	uxtb	r1, r3
 8000ef4:	8afb      	ldrh	r3, [r7, #22]
 8000ef6:	4a19      	ldr	r2, [pc, #100]	; (8000f5c <OLED_Print_Letra+0x1c0>)
 8000ef8:	5cd3      	ldrb	r3, [r2, r3]
 8000efa:	461a      	mov	r2, r3
 8000efc:	f7ff ff30 	bl	8000d60 <OLED_Draw_8_Pixel>
			pos2+=3;
 8000f00:	8afb      	ldrh	r3, [r7, #22]
 8000f02:	3303      	adds	r3, #3
 8000f04:	82fb      	strh	r3, [r7, #22]
		for(int i=col; i<col+FONT_3_WIDTH; i++) {
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	79bb      	ldrb	r3, [r7, #6]
 8000f0e:	3313      	adds	r3, #19
 8000f10:	68fa      	ldr	r2, [r7, #12]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	dde9      	ble.n	8000eea <OLED_Print_Letra+0x14e>
		for(int i=col; i<col+FONT_3_WIDTH; i++) {
 8000f16:	79bb      	ldrb	r3, [r7, #6]
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	e010      	b.n	8000f3e <OLED_Print_Letra+0x1a2>
			OLED_Draw_8_Pixel(pag+2,i,FONT_3[pos3]);
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	3302      	adds	r3, #2
 8000f20:	b2d8      	uxtb	r0, r3
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	b2d9      	uxtb	r1, r3
 8000f26:	8abb      	ldrh	r3, [r7, #20]
 8000f28:	4a0c      	ldr	r2, [pc, #48]	; (8000f5c <OLED_Print_Letra+0x1c0>)
 8000f2a:	5cd3      	ldrb	r3, [r2, r3]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	f7ff ff17 	bl	8000d60 <OLED_Draw_8_Pixel>
			pos3+=3;
 8000f32:	8abb      	ldrh	r3, [r7, #20]
 8000f34:	3303      	adds	r3, #3
 8000f36:	82bb      	strh	r3, [r7, #20]
		for(int i=col; i<col+FONT_3_WIDTH; i++) {
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	79bb      	ldrb	r3, [r7, #6]
 8000f40:	3313      	adds	r3, #19
 8000f42:	68ba      	ldr	r2, [r7, #8]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	dde9      	ble.n	8000f1c <OLED_Print_Letra+0x180>
		break;
 8000f48:	bf00      	nop
}
 8000f4a:	bf00      	nop
 8000f4c:	372c      	adds	r7, #44	; 0x2c
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd90      	pop	{r4, r7, pc}
 8000f52:	bf00      	nop
 8000f54:	08005f44 	.word	0x08005f44
 8000f58:	0800616c 	.word	0x0800616c
 8000f5c:	0800681c 	.word	0x0800681c

08000f60 <OLED_Print_Text>:


void OLED_Print_Text(uint8_t pag, uint8_t col, uint8_t font_size, char *texto){
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	603b      	str	r3, [r7, #0]
 8000f68:	4603      	mov	r3, r0
 8000f6a:	71fb      	strb	r3, [r7, #7]
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	71bb      	strb	r3, [r7, #6]
 8000f70:	4613      	mov	r3, r2
 8000f72:	717b      	strb	r3, [r7, #5]

	switch(font_size){
 8000f74:	797b      	ldrb	r3, [r7, #5]
 8000f76:	2b03      	cmp	r3, #3
 8000f78:	d034      	beq.n	8000fe4 <OLED_Print_Text+0x84>
 8000f7a:	2b03      	cmp	r3, #3
 8000f7c:	dc37      	bgt.n	8000fee <OLED_Print_Text+0x8e>
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d00e      	beq.n	8000fa0 <OLED_Print_Text+0x40>
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d01d      	beq.n	8000fc2 <OLED_Print_Text+0x62>
					col=col+FONT_3_WIDTH; //aumento la posicion de la columna 9/11
		}
		break;
		///////////////////////////////////////////////////////////////////////////
	}
}
 8000f86:	e032      	b.n	8000fee <OLED_Print_Text+0x8e>
					OLED_Print_Letra(pag,col,1,*texto++);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	1c5a      	adds	r2, r3, #1
 8000f8c:	603a      	str	r2, [r7, #0]
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	79b9      	ldrb	r1, [r7, #6]
 8000f92:	79f8      	ldrb	r0, [r7, #7]
 8000f94:	2201      	movs	r2, #1
 8000f96:	f7ff ff01 	bl	8000d9c <OLED_Print_Letra>
					col=col+FONT_1_WIDTH; //aumento la posicion de la columna
 8000f9a:	79bb      	ldrb	r3, [r7, #6]
 8000f9c:	3306      	adds	r3, #6
 8000f9e:	71bb      	strb	r3, [r7, #6]
				while(*texto != '\0'){
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d1ef      	bne.n	8000f88 <OLED_Print_Text+0x28>
			break;
 8000fa8:	e021      	b.n	8000fee <OLED_Print_Text+0x8e>
					OLED_Print_Letra(pag,col,2,*texto++);
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	1c5a      	adds	r2, r3, #1
 8000fae:	603a      	str	r2, [r7, #0]
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	79b9      	ldrb	r1, [r7, #6]
 8000fb4:	79f8      	ldrb	r0, [r7, #7]
 8000fb6:	2202      	movs	r2, #2
 8000fb8:	f7ff fef0 	bl	8000d9c <OLED_Print_Letra>
					col=col+FONT_2_WIDTH; //aumento la posicion de la columna 9/11
 8000fbc:	79bb      	ldrb	r3, [r7, #6]
 8000fbe:	3309      	adds	r3, #9
 8000fc0:	71bb      	strb	r3, [r7, #6]
				while(*texto != '\0'){
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1ef      	bne.n	8000faa <OLED_Print_Text+0x4a>
			break;
 8000fca:	e010      	b.n	8000fee <OLED_Print_Text+0x8e>
					OLED_Print_Letra(pag,col,3,*texto++);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	1c5a      	adds	r2, r3, #1
 8000fd0:	603a      	str	r2, [r7, #0]
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	79b9      	ldrb	r1, [r7, #6]
 8000fd6:	79f8      	ldrb	r0, [r7, #7]
 8000fd8:	2203      	movs	r2, #3
 8000fda:	f7ff fedf 	bl	8000d9c <OLED_Print_Letra>
					col=col+FONT_3_WIDTH; //aumento la posicion de la columna 9/11
 8000fde:	79bb      	ldrb	r3, [r7, #6]
 8000fe0:	3314      	adds	r3, #20
 8000fe2:	71bb      	strb	r3, [r7, #6]
				while(*texto != '\0'){
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d1ef      	bne.n	8000fcc <OLED_Print_Text+0x6c>
		break;
 8000fec:	bf00      	nop
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <OLED_Imagen>:

void OLED_Imagen(const unsigned char imagen[]){
 8000ff6:	b5b0      	push	{r4, r5, r7, lr}
 8000ff8:	b088      	sub	sp, #32
 8000ffa:	af02      	add	r7, sp, #8
 8000ffc:	6078      	str	r0, [r7, #4]

	int k=0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]

	for(int i=0;i<8;i++){
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
 8001006:	e01f      	b.n	8001048 <OLED_Imagen+0x52>
		for(int j=0;j<128;j++){
 8001008:	2300      	movs	r3, #0
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	e016      	b.n	800103c <OLED_Imagen+0x46>
			OLED_Draw_Pixel(i,i, j,j, imagen[k]);
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	b2d8      	uxtb	r0, r3
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	b2d9      	uxtb	r1, r3
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	b2dc      	uxtb	r4, r3
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	b29d      	uxth	r5, r3
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	4413      	add	r3, r2
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	462b      	mov	r3, r5
 800102a:	4622      	mov	r2, r4
 800102c:	f7ff fe00 	bl	8000c30 <OLED_Draw_Pixel>
			k++;
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	3301      	adds	r3, #1
 8001034:	617b      	str	r3, [r7, #20]
		for(int j=0;j<128;j++){
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	3301      	adds	r3, #1
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2b7f      	cmp	r3, #127	; 0x7f
 8001040:	dde5      	ble.n	800100e <OLED_Imagen+0x18>
	for(int i=0;i<8;i++){
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	3301      	adds	r3, #1
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	2b07      	cmp	r3, #7
 800104c:	dddc      	ble.n	8001008 <OLED_Imagen+0x12>
		}
	}
}
 800104e:	bf00      	nop
 8001050:	bf00      	nop
 8001052:	3718      	adds	r7, #24
 8001054:	46bd      	mov	sp, r7
 8001056:	bdb0      	pop	{r4, r5, r7, pc}

08001058 <OLED_Imagen_Invert>:

void OLED_Imagen_Invert(const unsigned char imagen[]){
 8001058:	b5b0      	push	{r4, r5, r7, lr}
 800105a:	b088      	sub	sp, #32
 800105c:	af02      	add	r7, sp, #8
 800105e:	6078      	str	r0, [r7, #4]

	int k=0;
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]

	for(int i=0;i<8;i++){
 8001064:	2300      	movs	r3, #0
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	e021      	b.n	80010ae <OLED_Imagen_Invert+0x56>
		for(int j=0;j<128;j++){
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	e018      	b.n	80010a2 <OLED_Imagen_Invert+0x4a>
			OLED_Draw_Pixel(i,i, j,j, ~imagen[k]);
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	b2d8      	uxtb	r0, r3
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	b2d9      	uxtb	r1, r3
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	b2dc      	uxtb	r4, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	b29d      	uxth	r5, r3
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	4413      	add	r3, r2
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	43db      	mvns	r3, r3
 800108a:	b2db      	uxtb	r3, r3
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	462b      	mov	r3, r5
 8001090:	4622      	mov	r2, r4
 8001092:	f7ff fdcd 	bl	8000c30 <OLED_Draw_Pixel>
			k++;
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	3301      	adds	r3, #1
 800109a:	617b      	str	r3, [r7, #20]
		for(int j=0;j<128;j++){
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	3301      	adds	r3, #1
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	2b7f      	cmp	r3, #127	; 0x7f
 80010a6:	dde3      	ble.n	8001070 <OLED_Imagen_Invert+0x18>
	for(int i=0;i<8;i++){
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	3301      	adds	r3, #1
 80010ac:	613b      	str	r3, [r7, #16]
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	2b07      	cmp	r3, #7
 80010b2:	ddda      	ble.n	800106a <OLED_Imagen_Invert+0x12>
		}
	}
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bdb0      	pop	{r4, r5, r7, pc}

080010be <OLED_Imagen_Small>:

void OLED_Imagen_Small(uint8_t pag, uint8_t col, const unsigned char imagen[], uint8_t size_x, uint8_t size_y){
 80010be:	b5b0      	push	{r4, r5, r7, lr}
 80010c0:	b088      	sub	sp, #32
 80010c2:	af02      	add	r7, sp, #8
 80010c4:	603a      	str	r2, [r7, #0]
 80010c6:	461a      	mov	r2, r3
 80010c8:	4603      	mov	r3, r0
 80010ca:	71fb      	strb	r3, [r7, #7]
 80010cc:	460b      	mov	r3, r1
 80010ce:	71bb      	strb	r3, [r7, #6]
 80010d0:	4613      	mov	r3, r2
 80010d2:	717b      	strb	r3, [r7, #5]

	int k=0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]

	for(int i=pag;i<pag+size_y/8;i++){
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	e022      	b.n	8001124 <OLED_Imagen_Small+0x66>
		for(int j=col;j<col+size_x;j++){
 80010de:	79bb      	ldrb	r3, [r7, #6]
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	e016      	b.n	8001112 <OLED_Imagen_Small+0x54>
			OLED_Draw_Pixel(i,i, j,j, imagen[k]);
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	b2d8      	uxtb	r0, r3
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	b2d9      	uxtb	r1, r3
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	b2dc      	uxtb	r4, r3
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	b29d      	uxth	r5, r3
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	683a      	ldr	r2, [r7, #0]
 80010f8:	4413      	add	r3, r2
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	462b      	mov	r3, r5
 8001100:	4622      	mov	r2, r4
 8001102:	f7ff fd95 	bl	8000c30 <OLED_Draw_Pixel>
			k++;
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	3301      	adds	r3, #1
 800110a:	617b      	str	r3, [r7, #20]
		for(int j=col;j<col+size_x;j++){
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	3301      	adds	r3, #1
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	79ba      	ldrb	r2, [r7, #6]
 8001114:	797b      	ldrb	r3, [r7, #5]
 8001116:	4413      	add	r3, r2
 8001118:	68fa      	ldr	r2, [r7, #12]
 800111a:	429a      	cmp	r2, r3
 800111c:	dbe2      	blt.n	80010e4 <OLED_Imagen_Small+0x26>
	for(int i=pag;i<pag+size_y/8;i++){
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	3301      	adds	r3, #1
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800112a:	08d2      	lsrs	r2, r2, #3
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	4413      	add	r3, r2
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	429a      	cmp	r2, r3
 8001134:	dbd3      	blt.n	80010de <OLED_Imagen_Small+0x20>
		}
	}
}
 8001136:	bf00      	nop
 8001138:	bf00      	nop
 800113a:	3718      	adds	r7, #24
 800113c:	46bd      	mov	sp, r7
 800113e:	bdb0      	pop	{r4, r5, r7, pc}

08001140 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001146:	f000 fc21 	bl	800198c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800114a:	f000 f9e1 	bl	8001510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800114e:	f000 fa53 	bl	80015f8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001152:	f000 fa23 	bl	800159c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8001156:	f7ff fce7 	bl	8000b28 <OLED_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      OLED_Print_Text(0,0,1," ANGLAS MECHATRONICS ");
 800115a:	4bcf      	ldr	r3, [pc, #828]	; (8001498 <main+0x358>)
 800115c:	2201      	movs	r2, #1
 800115e:	2100      	movs	r1, #0
 8001160:	2000      	movs	r0, #0
 8001162:	f7ff fefd 	bl	8000f60 <OLED_Print_Text>
      OLED_Print_Text(1,0,1,"LIBRERIA DISPLAY OLED");
 8001166:	4bcd      	ldr	r3, [pc, #820]	; (800149c <main+0x35c>)
 8001168:	2201      	movs	r2, #1
 800116a:	2100      	movs	r1, #0
 800116c:	2001      	movs	r0, #1
 800116e:	f7ff fef7 	bl	8000f60 <OLED_Print_Text>
      OLED_Print_Text(2,0,2," OLED SSD1306 ");
 8001172:	4bcb      	ldr	r3, [pc, #812]	; (80014a0 <main+0x360>)
 8001174:	2202      	movs	r2, #2
 8001176:	2100      	movs	r1, #0
 8001178:	2002      	movs	r0, #2
 800117a:	f7ff fef1 	bl	8000f60 <OLED_Print_Text>
      OLED_Print_Text(4,0,1,"0123456789-!#$%&/()=?");
 800117e:	4bc9      	ldr	r3, [pc, #804]	; (80014a4 <main+0x364>)
 8001180:	2201      	movs	r2, #1
 8001182:	2100      	movs	r1, #0
 8001184:	2004      	movs	r0, #4
 8001186:	f7ff feeb 	bl	8000f60 <OLED_Print_Text>
      OLED_Print_Text(5,0,3,"ANGLAS");
 800118a:	4bc7      	ldr	r3, [pc, #796]	; (80014a8 <main+0x368>)
 800118c:	2203      	movs	r2, #3
 800118e:	2100      	movs	r1, #0
 8001190:	2005      	movs	r0, #5
 8001192:	f7ff fee5 	bl	8000f60 <OLED_Print_Text>
      HAL_Delay(4000);
 8001196:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800119a:	f000 fc59 	bl	8001a50 <HAL_Delay>
      OLED_Clear();
 800119e:	f7ff fd77 	bl	8000c90 <OLED_Clear>

	  OLED_Print_Text(0,12,1,"Velocidad = ");
 80011a2:	4bc2      	ldr	r3, [pc, #776]	; (80014ac <main+0x36c>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	210c      	movs	r1, #12
 80011a8:	2000      	movs	r0, #0
 80011aa:	f7ff fed9 	bl	8000f60 <OLED_Print_Text>
	  OLED_Print_Text(2,0,2,"Volumen = ");
 80011ae:	4bc0      	ldr	r3, [pc, #768]	; (80014b0 <main+0x370>)
 80011b0:	2202      	movs	r2, #2
 80011b2:	2100      	movs	r1, #0
 80011b4:	2002      	movs	r0, #2
 80011b6:	f7ff fed3 	bl	8000f60 <OLED_Print_Text>
      OLED_Print_Text(5,16,3,"I=");
 80011ba:	4bbe      	ldr	r3, [pc, #760]	; (80014b4 <main+0x374>)
 80011bc:	2203      	movs	r2, #3
 80011be:	2110      	movs	r1, #16
 80011c0:	2005      	movs	r0, #5
 80011c2:	f7ff fecd 	bl	8000f60 <OLED_Print_Text>

      float velocidad=35.7;
 80011c6:	4bbc      	ldr	r3, [pc, #752]	; (80014b8 <main+0x378>)
 80011c8:	60fb      	str	r3, [r7, #12]
      float volumen=2.6;
 80011ca:	4bbc      	ldr	r3, [pc, #752]	; (80014bc <main+0x37c>)
 80011cc:	60bb      	str	r3, [r7, #8]
      uint8_t corriente=19;
 80011ce:	2313      	movs	r3, #19
 80011d0:	71fb      	strb	r3, [r7, #7]

		for(uint8_t i=0; i<40;i++){
 80011d2:	2300      	movs	r3, #0
 80011d4:	71bb      	strb	r3, [r7, #6]
 80011d6:	e052      	b.n	800127e <main+0x13e>
          sprintf(buff,"%2.1fm/s",velocidad);
 80011d8:	68f8      	ldr	r0, [r7, #12]
 80011da:	f7ff f925 	bl	8000428 <__aeabi_f2d>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	49b7      	ldr	r1, [pc, #732]	; (80014c0 <main+0x380>)
 80011e4:	48b7      	ldr	r0, [pc, #732]	; (80014c4 <main+0x384>)
 80011e6:	f002 fba1 	bl	800392c <siprintf>
          OLED_Print_Text(0,72,1,buff);
 80011ea:	4bb6      	ldr	r3, [pc, #728]	; (80014c4 <main+0x384>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	2148      	movs	r1, #72	; 0x48
 80011f0:	2000      	movs	r0, #0
 80011f2:	f7ff feb5 	bl	8000f60 <OLED_Print_Text>
          velocidad=velocidad+0.1;
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f7ff f916 	bl	8000428 <__aeabi_f2d>
 80011fc:	a3a4      	add	r3, pc, #656	; (adr r3, 8001490 <main+0x350>)
 80011fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001202:	f7fe ffb3 	bl	800016c <__adddf3>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	4610      	mov	r0, r2
 800120c:	4619      	mov	r1, r3
 800120e:	f7ff fc3b 	bl	8000a88 <__aeabi_d2f>
 8001212:	4603      	mov	r3, r0
 8001214:	60fb      	str	r3, [r7, #12]

          sprintf(buff,"%2.1fml",volumen);
 8001216:	68b8      	ldr	r0, [r7, #8]
 8001218:	f7ff f906 	bl	8000428 <__aeabi_f2d>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	49a9      	ldr	r1, [pc, #676]	; (80014c8 <main+0x388>)
 8001222:	48a8      	ldr	r0, [pc, #672]	; (80014c4 <main+0x384>)
 8001224:	f002 fb82 	bl	800392c <siprintf>
          OLED_Print_Text(2,83,2,buff);
 8001228:	4ba6      	ldr	r3, [pc, #664]	; (80014c4 <main+0x384>)
 800122a:	2202      	movs	r2, #2
 800122c:	2153      	movs	r1, #83	; 0x53
 800122e:	2002      	movs	r0, #2
 8001230:	f7ff fe96 	bl	8000f60 <OLED_Print_Text>
          volumen=volumen+0.1;
 8001234:	68b8      	ldr	r0, [r7, #8]
 8001236:	f7ff f8f7 	bl	8000428 <__aeabi_f2d>
 800123a:	a395      	add	r3, pc, #596	; (adr r3, 8001490 <main+0x350>)
 800123c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001240:	f7fe ff94 	bl	800016c <__adddf3>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	4610      	mov	r0, r2
 800124a:	4619      	mov	r1, r3
 800124c:	f7ff fc1c 	bl	8000a88 <__aeabi_d2f>
 8001250:	4603      	mov	r3, r0
 8001252:	60bb      	str	r3, [r7, #8]

          sprintf(buff,"%2dA",corriente);
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	461a      	mov	r2, r3
 8001258:	499c      	ldr	r1, [pc, #624]	; (80014cc <main+0x38c>)
 800125a:	489a      	ldr	r0, [pc, #616]	; (80014c4 <main+0x384>)
 800125c:	f002 fb66 	bl	800392c <siprintf>
          OLED_Print_Text(5,56,3,buff);
 8001260:	4b98      	ldr	r3, [pc, #608]	; (80014c4 <main+0x384>)
 8001262:	2203      	movs	r2, #3
 8001264:	2138      	movs	r1, #56	; 0x38
 8001266:	2005      	movs	r0, #5
 8001268:	f7ff fe7a 	bl	8000f60 <OLED_Print_Text>
          corriente++;
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	3301      	adds	r3, #1
 8001270:	71fb      	strb	r3, [r7, #7]
          HAL_Delay(20);
 8001272:	2014      	movs	r0, #20
 8001274:	f000 fbec 	bl	8001a50 <HAL_Delay>
		for(uint8_t i=0; i<40;i++){
 8001278:	79bb      	ldrb	r3, [r7, #6]
 800127a:	3301      	adds	r3, #1
 800127c:	71bb      	strb	r3, [r7, #6]
 800127e:	79bb      	ldrb	r3, [r7, #6]
 8001280:	2b27      	cmp	r3, #39	; 0x27
 8001282:	d9a9      	bls.n	80011d8 <main+0x98>
      }
		OLED_Clear();
 8001284:	f7ff fd04 	bl	8000c90 <OLED_Clear>

		OLED_Print_Text(0,0,1, "PAGINA 01");
 8001288:	4b91      	ldr	r3, [pc, #580]	; (80014d0 <main+0x390>)
 800128a:	2201      	movs	r2, #1
 800128c:	2100      	movs	r1, #0
 800128e:	2000      	movs	r0, #0
 8001290:	f7ff fe66 	bl	8000f60 <OLED_Print_Text>
		OLED_Print_Text(1,1,1, "PAGINA 02");
 8001294:	4b8f      	ldr	r3, [pc, #572]	; (80014d4 <main+0x394>)
 8001296:	2201      	movs	r2, #1
 8001298:	2101      	movs	r1, #1
 800129a:	2001      	movs	r0, #1
 800129c:	f7ff fe60 	bl	8000f60 <OLED_Print_Text>
		OLED_Print_Text(2,2,1, "PAGINA 03");
 80012a0:	4b8d      	ldr	r3, [pc, #564]	; (80014d8 <main+0x398>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	2102      	movs	r1, #2
 80012a6:	2002      	movs	r0, #2
 80012a8:	f7ff fe5a 	bl	8000f60 <OLED_Print_Text>
		OLED_Print_Text(3,3,1, "PAGINA 04");
 80012ac:	4b8b      	ldr	r3, [pc, #556]	; (80014dc <main+0x39c>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	2103      	movs	r1, #3
 80012b2:	2003      	movs	r0, #3
 80012b4:	f7ff fe54 	bl	8000f60 <OLED_Print_Text>
		OLED_Print_Text(4,4,1, "PAGINA 05");
 80012b8:	4b89      	ldr	r3, [pc, #548]	; (80014e0 <main+0x3a0>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	2104      	movs	r1, #4
 80012be:	2004      	movs	r0, #4
 80012c0:	f7ff fe4e 	bl	8000f60 <OLED_Print_Text>
		OLED_Print_Text(5,5,1, "PAGINA 06");
 80012c4:	4b87      	ldr	r3, [pc, #540]	; (80014e4 <main+0x3a4>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	2105      	movs	r1, #5
 80012ca:	2005      	movs	r0, #5
 80012cc:	f7ff fe48 	bl	8000f60 <OLED_Print_Text>
		OLED_Print_Text(6,6,1, "PAGINA 07");
 80012d0:	4b85      	ldr	r3, [pc, #532]	; (80014e8 <main+0x3a8>)
 80012d2:	2201      	movs	r2, #1
 80012d4:	2106      	movs	r1, #6
 80012d6:	2006      	movs	r0, #6
 80012d8:	f7ff fe42 	bl	8000f60 <OLED_Print_Text>
		OLED_Print_Text(7,7,1, "PAGINA 08");
 80012dc:	4b83      	ldr	r3, [pc, #524]	; (80014ec <main+0x3ac>)
 80012de:	2201      	movs	r2, #1
 80012e0:	2107      	movs	r1, #7
 80012e2:	2007      	movs	r0, #7
 80012e4:	f7ff fe3c 	bl	8000f60 <OLED_Print_Text>
		HAL_Delay(500);
 80012e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012ec:	f000 fbb0 	bl	8001a50 <HAL_Delay>
		OLED_Print_Text(0,74,1, "PAGINA 01");
 80012f0:	4b77      	ldr	r3, [pc, #476]	; (80014d0 <main+0x390>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	214a      	movs	r1, #74	; 0x4a
 80012f6:	2000      	movs	r0, #0
 80012f8:	f7ff fe32 	bl	8000f60 <OLED_Print_Text>
		OLED_Print_Text(1,73,1, "PAGINA 02");
 80012fc:	4b75      	ldr	r3, [pc, #468]	; (80014d4 <main+0x394>)
 80012fe:	2201      	movs	r2, #1
 8001300:	2149      	movs	r1, #73	; 0x49
 8001302:	2001      	movs	r0, #1
 8001304:	f7ff fe2c 	bl	8000f60 <OLED_Print_Text>
		OLED_Print_Text(2,72,1, "PAGINA 03");
 8001308:	4b73      	ldr	r3, [pc, #460]	; (80014d8 <main+0x398>)
 800130a:	2201      	movs	r2, #1
 800130c:	2148      	movs	r1, #72	; 0x48
 800130e:	2002      	movs	r0, #2
 8001310:	f7ff fe26 	bl	8000f60 <OLED_Print_Text>
		OLED_Print_Text(3,71,1, "PAGINA 04");
 8001314:	4b71      	ldr	r3, [pc, #452]	; (80014dc <main+0x39c>)
 8001316:	2201      	movs	r2, #1
 8001318:	2147      	movs	r1, #71	; 0x47
 800131a:	2003      	movs	r0, #3
 800131c:	f7ff fe20 	bl	8000f60 <OLED_Print_Text>
		OLED_Print_Text(4,70,1, "PAGINA 05");
 8001320:	4b6f      	ldr	r3, [pc, #444]	; (80014e0 <main+0x3a0>)
 8001322:	2201      	movs	r2, #1
 8001324:	2146      	movs	r1, #70	; 0x46
 8001326:	2004      	movs	r0, #4
 8001328:	f7ff fe1a 	bl	8000f60 <OLED_Print_Text>
		OLED_Print_Text(5,69,1, "PAGINA 06");
 800132c:	4b6d      	ldr	r3, [pc, #436]	; (80014e4 <main+0x3a4>)
 800132e:	2201      	movs	r2, #1
 8001330:	2145      	movs	r1, #69	; 0x45
 8001332:	2005      	movs	r0, #5
 8001334:	f7ff fe14 	bl	8000f60 <OLED_Print_Text>
		OLED_Print_Text(6,68,1, "PAGINA 07");
 8001338:	4b6b      	ldr	r3, [pc, #428]	; (80014e8 <main+0x3a8>)
 800133a:	2201      	movs	r2, #1
 800133c:	2144      	movs	r1, #68	; 0x44
 800133e:	2006      	movs	r0, #6
 8001340:	f7ff fe0e 	bl	8000f60 <OLED_Print_Text>
		OLED_Print_Text(7,67,1, "PAGINA 08");
 8001344:	4b69      	ldr	r3, [pc, #420]	; (80014ec <main+0x3ac>)
 8001346:	2201      	movs	r2, #1
 8001348:	2143      	movs	r1, #67	; 0x43
 800134a:	2007      	movs	r0, #7
 800134c:	f7ff fe08 	bl	8000f60 <OLED_Print_Text>
		HAL_Delay(3000);
 8001350:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001354:	f000 fb7c 	bl	8001a50 <HAL_Delay>

		OLED_Imagen(house);
 8001358:	4865      	ldr	r0, [pc, #404]	; (80014f0 <main+0x3b0>)
 800135a:	f7ff fe4c 	bl	8000ff6 <OLED_Imagen>
		HAL_Delay(1000);
 800135e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001362:	f000 fb75 	bl	8001a50 <HAL_Delay>
		OLED_Imagen(mikro_logo);
 8001366:	4863      	ldr	r0, [pc, #396]	; (80014f4 <main+0x3b4>)
 8001368:	f7ff fe45 	bl	8000ff6 <OLED_Imagen>
		HAL_Delay(1000);
 800136c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001370:	f000 fb6e 	bl	8001a50 <HAL_Delay>
		OLED_Imagen(youtube);
 8001374:	4860      	ldr	r0, [pc, #384]	; (80014f8 <main+0x3b8>)
 8001376:	f7ff fe3e 	bl	8000ff6 <OLED_Imagen>
		HAL_Delay(1000);
 800137a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800137e:	f000 fb67 	bl	8001a50 <HAL_Delay>
		OLED_Imagen_Invert(youtube);
 8001382:	485d      	ldr	r0, [pc, #372]	; (80014f8 <main+0x3b8>)
 8001384:	f7ff fe68 	bl	8001058 <OLED_Imagen_Invert>
		HAL_Delay(1000);
 8001388:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800138c:	f000 fb60 	bl	8001a50 <HAL_Delay>

		OLED_Imagen_Small(0, 96, bateria0,   32, 16);HAL_Delay(500);
 8001390:	2310      	movs	r3, #16
 8001392:	9300      	str	r3, [sp, #0]
 8001394:	2320      	movs	r3, #32
 8001396:	4a59      	ldr	r2, [pc, #356]	; (80014fc <main+0x3bc>)
 8001398:	2160      	movs	r1, #96	; 0x60
 800139a:	2000      	movs	r0, #0
 800139c:	f7ff fe8f 	bl	80010be <OLED_Imagen_Small>
 80013a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013a4:	f000 fb54 	bl	8001a50 <HAL_Delay>
		OLED_Imagen_Small(0, 96, bateria25,  32, 16);HAL_Delay(500);
 80013a8:	2310      	movs	r3, #16
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	2320      	movs	r3, #32
 80013ae:	4a54      	ldr	r2, [pc, #336]	; (8001500 <main+0x3c0>)
 80013b0:	2160      	movs	r1, #96	; 0x60
 80013b2:	2000      	movs	r0, #0
 80013b4:	f7ff fe83 	bl	80010be <OLED_Imagen_Small>
 80013b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013bc:	f000 fb48 	bl	8001a50 <HAL_Delay>
		OLED_Imagen_Small(0, 96, bateria50,  32, 16);HAL_Delay(500);
 80013c0:	2310      	movs	r3, #16
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	2320      	movs	r3, #32
 80013c6:	4a4f      	ldr	r2, [pc, #316]	; (8001504 <main+0x3c4>)
 80013c8:	2160      	movs	r1, #96	; 0x60
 80013ca:	2000      	movs	r0, #0
 80013cc:	f7ff fe77 	bl	80010be <OLED_Imagen_Small>
 80013d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013d4:	f000 fb3c 	bl	8001a50 <HAL_Delay>
		OLED_Imagen_Small(0, 96, bateria75,  32, 16);HAL_Delay(500);
 80013d8:	2310      	movs	r3, #16
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	2320      	movs	r3, #32
 80013de:	4a4a      	ldr	r2, [pc, #296]	; (8001508 <main+0x3c8>)
 80013e0:	2160      	movs	r1, #96	; 0x60
 80013e2:	2000      	movs	r0, #0
 80013e4:	f7ff fe6b 	bl	80010be <OLED_Imagen_Small>
 80013e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013ec:	f000 fb30 	bl	8001a50 <HAL_Delay>
		OLED_Imagen_Small(0, 96, bateria100, 32, 16);HAL_Delay(500);
 80013f0:	2310      	movs	r3, #16
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	2320      	movs	r3, #32
 80013f6:	4a45      	ldr	r2, [pc, #276]	; (800150c <main+0x3cc>)
 80013f8:	2160      	movs	r1, #96	; 0x60
 80013fa:	2000      	movs	r0, #0
 80013fc:	f7ff fe5f 	bl	80010be <OLED_Imagen_Small>
 8001400:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001404:	f000 fb24 	bl	8001a50 <HAL_Delay>
		OLED_Clear();
 8001408:	f7ff fc42 	bl	8000c90 <OLED_Clear>
		OLED_Imagen_Small(2, 0, bateria0,   32, 16);HAL_Delay(500);
 800140c:	2310      	movs	r3, #16
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	2320      	movs	r3, #32
 8001412:	4a3a      	ldr	r2, [pc, #232]	; (80014fc <main+0x3bc>)
 8001414:	2100      	movs	r1, #0
 8001416:	2002      	movs	r0, #2
 8001418:	f7ff fe51 	bl	80010be <OLED_Imagen_Small>
 800141c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001420:	f000 fb16 	bl	8001a50 <HAL_Delay>
		OLED_Imagen_Small(2, 0, bateria25,  32, 16);HAL_Delay(500);
 8001424:	2310      	movs	r3, #16
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	2320      	movs	r3, #32
 800142a:	4a35      	ldr	r2, [pc, #212]	; (8001500 <main+0x3c0>)
 800142c:	2100      	movs	r1, #0
 800142e:	2002      	movs	r0, #2
 8001430:	f7ff fe45 	bl	80010be <OLED_Imagen_Small>
 8001434:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001438:	f000 fb0a 	bl	8001a50 <HAL_Delay>
		OLED_Imagen_Small(2, 0, bateria50,  32, 16);HAL_Delay(500);
 800143c:	2310      	movs	r3, #16
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	2320      	movs	r3, #32
 8001442:	4a30      	ldr	r2, [pc, #192]	; (8001504 <main+0x3c4>)
 8001444:	2100      	movs	r1, #0
 8001446:	2002      	movs	r0, #2
 8001448:	f7ff fe39 	bl	80010be <OLED_Imagen_Small>
 800144c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001450:	f000 fafe 	bl	8001a50 <HAL_Delay>
		OLED_Imagen_Small(2, 0, bateria75,  32, 16);HAL_Delay(500);
 8001454:	2310      	movs	r3, #16
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	2320      	movs	r3, #32
 800145a:	4a2b      	ldr	r2, [pc, #172]	; (8001508 <main+0x3c8>)
 800145c:	2100      	movs	r1, #0
 800145e:	2002      	movs	r0, #2
 8001460:	f7ff fe2d 	bl	80010be <OLED_Imagen_Small>
 8001464:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001468:	f000 faf2 	bl	8001a50 <HAL_Delay>
		OLED_Imagen_Small(2, 0, bateria100, 32, 16);HAL_Delay(500);
 800146c:	2310      	movs	r3, #16
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	2320      	movs	r3, #32
 8001472:	4a26      	ldr	r2, [pc, #152]	; (800150c <main+0x3cc>)
 8001474:	2100      	movs	r1, #0
 8001476:	2002      	movs	r0, #2
 8001478:	f7ff fe21 	bl	80010be <OLED_Imagen_Small>
 800147c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001480:	f000 fae6 	bl	8001a50 <HAL_Delay>
		OLED_Clear();
 8001484:	f7ff fc04 	bl	8000c90 <OLED_Clear>
  {
 8001488:	e667      	b.n	800115a <main+0x1a>
 800148a:	bf00      	nop
 800148c:	f3af 8000 	nop.w
 8001490:	9999999a 	.word	0x9999999a
 8001494:	3fb99999 	.word	0x3fb99999
 8001498:	08005e38 	.word	0x08005e38
 800149c:	08005e50 	.word	0x08005e50
 80014a0:	08005e68 	.word	0x08005e68
 80014a4:	08005e78 	.word	0x08005e78
 80014a8:	08005e90 	.word	0x08005e90
 80014ac:	08005e98 	.word	0x08005e98
 80014b0:	08005ea8 	.word	0x08005ea8
 80014b4:	08005eb4 	.word	0x08005eb4
 80014b8:	420ecccd 	.word	0x420ecccd
 80014bc:	40266666 	.word	0x40266666
 80014c0:	08005eb8 	.word	0x08005eb8
 80014c4:	2000024c 	.word	0x2000024c
 80014c8:	08005ec4 	.word	0x08005ec4
 80014cc:	08005ecc 	.word	0x08005ecc
 80014d0:	08005ed4 	.word	0x08005ed4
 80014d4:	08005ee0 	.word	0x08005ee0
 80014d8:	08005eec 	.word	0x08005eec
 80014dc:	08005ef8 	.word	0x08005ef8
 80014e0:	08005f04 	.word	0x08005f04
 80014e4:	08005f10 	.word	0x08005f10
 80014e8:	08005f1c 	.word	0x08005f1c
 80014ec:	08005f28 	.word	0x08005f28
 80014f0:	0800829c 	.word	0x0800829c
 80014f4:	08007e9c 	.word	0x08007e9c
 80014f8:	080087dc 	.word	0x080087dc
 80014fc:	0800869c 	.word	0x0800869c
 8001500:	080086dc 	.word	0x080086dc
 8001504:	0800871c 	.word	0x0800871c
 8001508:	0800875c 	.word	0x0800875c
 800150c:	0800879c 	.word	0x0800879c

08001510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b090      	sub	sp, #64	; 0x40
 8001514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001516:	f107 0318 	add.w	r3, r7, #24
 800151a:	2228      	movs	r2, #40	; 0x28
 800151c:	2100      	movs	r1, #0
 800151e:	4618      	mov	r0, r3
 8001520:	f001 fd9c 	bl	800305c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
 8001530:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001532:	2301      	movs	r3, #1
 8001534:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001536:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800153a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800153c:	2300      	movs	r3, #0
 800153e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001540:	2301      	movs	r3, #1
 8001542:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001544:	2302      	movs	r3, #2
 8001546:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001548:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800154c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800154e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001552:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001554:	f107 0318 	add.w	r3, r7, #24
 8001558:	4618      	mov	r0, r3
 800155a:	f001 f94f 	bl	80027fc <HAL_RCC_OscConfig>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001564:	f000 f876 	bl	8001654 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001568:	230f      	movs	r3, #15
 800156a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800156c:	2302      	movs	r3, #2
 800156e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001570:	2300      	movs	r3, #0
 8001572:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001574:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001578:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800157a:	2300      	movs	r3, #0
 800157c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800157e:	1d3b      	adds	r3, r7, #4
 8001580:	2102      	movs	r1, #2
 8001582:	4618      	mov	r0, r3
 8001584:	f001 fbbc 	bl	8002d00 <HAL_RCC_ClockConfig>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800158e:	f000 f861 	bl	8001654 <Error_Handler>
  }
}
 8001592:	bf00      	nop
 8001594:	3740      	adds	r7, #64	; 0x40
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
	...

0800159c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015a0:	4b12      	ldr	r3, [pc, #72]	; (80015ec <MX_I2C1_Init+0x50>)
 80015a2:	4a13      	ldr	r2, [pc, #76]	; (80015f0 <MX_I2C1_Init+0x54>)
 80015a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80015a6:	4b11      	ldr	r3, [pc, #68]	; (80015ec <MX_I2C1_Init+0x50>)
 80015a8:	4a12      	ldr	r2, [pc, #72]	; (80015f4 <MX_I2C1_Init+0x58>)
 80015aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015ac:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <MX_I2C1_Init+0x50>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015b2:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <MX_I2C1_Init+0x50>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015b8:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <MX_I2C1_Init+0x50>)
 80015ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015c0:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <MX_I2C1_Init+0x50>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015c6:	4b09      	ldr	r3, [pc, #36]	; (80015ec <MX_I2C1_Init+0x50>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015cc:	4b07      	ldr	r3, [pc, #28]	; (80015ec <MX_I2C1_Init+0x50>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015d2:	4b06      	ldr	r3, [pc, #24]	; (80015ec <MX_I2C1_Init+0x50>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015d8:	4804      	ldr	r0, [pc, #16]	; (80015ec <MX_I2C1_Init+0x50>)
 80015da:	f000 fcc5 	bl	8001f68 <HAL_I2C_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015e4:	f000 f836 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	200001f8 	.word	0x200001f8
 80015f0:	40005400 	.word	0x40005400
 80015f4:	00061a80 	.word	0x00061a80

080015f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015fe:	4b14      	ldr	r3, [pc, #80]	; (8001650 <MX_GPIO_Init+0x58>)
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	4a13      	ldr	r2, [pc, #76]	; (8001650 <MX_GPIO_Init+0x58>)
 8001604:	f043 0320 	orr.w	r3, r3, #32
 8001608:	6193      	str	r3, [r2, #24]
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <MX_GPIO_Init+0x58>)
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	f003 0320 	and.w	r3, r3, #32
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <MX_GPIO_Init+0x58>)
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	4a0d      	ldr	r2, [pc, #52]	; (8001650 <MX_GPIO_Init+0x58>)
 800161c:	f043 0304 	orr.w	r3, r3, #4
 8001620:	6193      	str	r3, [r2, #24]
 8001622:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <MX_GPIO_Init+0x58>)
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	f003 0304 	and.w	r3, r3, #4
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800162e:	4b08      	ldr	r3, [pc, #32]	; (8001650 <MX_GPIO_Init+0x58>)
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	4a07      	ldr	r2, [pc, #28]	; (8001650 <MX_GPIO_Init+0x58>)
 8001634:	f043 0308 	orr.w	r3, r3, #8
 8001638:	6193      	str	r3, [r2, #24]
 800163a:	4b05      	ldr	r3, [pc, #20]	; (8001650 <MX_GPIO_Init+0x58>)
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	f003 0308 	and.w	r3, r3, #8
 8001642:	607b      	str	r3, [r7, #4]
 8001644:	687b      	ldr	r3, [r7, #4]

}
 8001646:	bf00      	nop
 8001648:	3714      	adds	r7, #20
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr
 8001650:	40021000 	.word	0x40021000

08001654 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001658:	b672      	cpsid	i
}
 800165a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800165c:	e7fe      	b.n	800165c <Error_Handler+0x8>
	...

08001660 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <HAL_MspInit+0x5c>)
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	4a14      	ldr	r2, [pc, #80]	; (80016bc <HAL_MspInit+0x5c>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6193      	str	r3, [r2, #24]
 8001672:	4b12      	ldr	r3, [pc, #72]	; (80016bc <HAL_MspInit+0x5c>)
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800167e:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <HAL_MspInit+0x5c>)
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	4a0e      	ldr	r2, [pc, #56]	; (80016bc <HAL_MspInit+0x5c>)
 8001684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001688:	61d3      	str	r3, [r2, #28]
 800168a:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <HAL_MspInit+0x5c>)
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001696:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <HAL_MspInit+0x60>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	4a04      	ldr	r2, [pc, #16]	; (80016c0 <HAL_MspInit+0x60>)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016b2:	bf00      	nop
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr
 80016bc:	40021000 	.word	0x40021000
 80016c0:	40010000 	.word	0x40010000

080016c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08a      	sub	sp, #40	; 0x28
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a1d      	ldr	r2, [pc, #116]	; (8001754 <HAL_I2C_MspInit+0x90>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d132      	bne.n	800174a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e4:	4b1c      	ldr	r3, [pc, #112]	; (8001758 <HAL_I2C_MspInit+0x94>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	4a1b      	ldr	r2, [pc, #108]	; (8001758 <HAL_I2C_MspInit+0x94>)
 80016ea:	f043 0308 	orr.w	r3, r3, #8
 80016ee:	6193      	str	r3, [r2, #24]
 80016f0:	4b19      	ldr	r3, [pc, #100]	; (8001758 <HAL_I2C_MspInit+0x94>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	f003 0308 	and.w	r3, r3, #8
 80016f8:	613b      	str	r3, [r7, #16]
 80016fa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001700:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001702:	2312      	movs	r3, #18
 8001704:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001706:	2303      	movs	r3, #3
 8001708:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170a:	f107 0314 	add.w	r3, r7, #20
 800170e:	4619      	mov	r1, r3
 8001710:	4812      	ldr	r0, [pc, #72]	; (800175c <HAL_I2C_MspInit+0x98>)
 8001712:	f000 faa5 	bl	8001c60 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001716:	4b12      	ldr	r3, [pc, #72]	; (8001760 <HAL_I2C_MspInit+0x9c>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
 800171c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
 8001724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001726:	f043 0302 	orr.w	r3, r3, #2
 800172a:	627b      	str	r3, [r7, #36]	; 0x24
 800172c:	4a0c      	ldr	r2, [pc, #48]	; (8001760 <HAL_I2C_MspInit+0x9c>)
 800172e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001730:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001732:	4b09      	ldr	r3, [pc, #36]	; (8001758 <HAL_I2C_MspInit+0x94>)
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	4a08      	ldr	r2, [pc, #32]	; (8001758 <HAL_I2C_MspInit+0x94>)
 8001738:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800173c:	61d3      	str	r3, [r2, #28]
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <HAL_I2C_MspInit+0x94>)
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800174a:	bf00      	nop
 800174c:	3728      	adds	r7, #40	; 0x28
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40005400 	.word	0x40005400
 8001758:	40021000 	.word	0x40021000
 800175c:	40010c00 	.word	0x40010c00
 8001760:	40010000 	.word	0x40010000

08001764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001768:	e7fe      	b.n	8001768 <NMI_Handler+0x4>

0800176a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800176e:	e7fe      	b.n	800176e <HardFault_Handler+0x4>

08001770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001774:	e7fe      	b.n	8001774 <MemManage_Handler+0x4>

08001776 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800177a:	e7fe      	b.n	800177a <BusFault_Handler+0x4>

0800177c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001780:	e7fe      	b.n	8001780 <UsageFault_Handler+0x4>

08001782 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	46bd      	mov	sp, r7
 800178a:	bc80      	pop	{r7}
 800178c:	4770      	bx	lr

0800178e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr

0800179a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr

080017a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017aa:	f000 f935 	bl	8001a18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0
  return 1;
 80017b6:	2301      	movs	r3, #1
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr

080017c0 <_kill>:

int _kill(int pid, int sig)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017ca:	f001 fc1d 	bl	8003008 <__errno>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2216      	movs	r2, #22
 80017d2:	601a      	str	r2, [r3, #0]
  return -1;
 80017d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <_exit>:

void _exit (int status)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017e8:	f04f 31ff 	mov.w	r1, #4294967295
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff ffe7 	bl	80017c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017f2:	e7fe      	b.n	80017f2 <_exit+0x12>

080017f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]
 8001804:	e00a      	b.n	800181c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001806:	f3af 8000 	nop.w
 800180a:	4601      	mov	r1, r0
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	1c5a      	adds	r2, r3, #1
 8001810:	60ba      	str	r2, [r7, #8]
 8001812:	b2ca      	uxtb	r2, r1
 8001814:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	3301      	adds	r3, #1
 800181a:	617b      	str	r3, [r7, #20]
 800181c:	697a      	ldr	r2, [r7, #20]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	429a      	cmp	r2, r3
 8001822:	dbf0      	blt.n	8001806 <_read+0x12>
  }

  return len;
 8001824:	687b      	ldr	r3, [r7, #4]
}
 8001826:	4618      	mov	r0, r3
 8001828:	3718      	adds	r7, #24
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b086      	sub	sp, #24
 8001832:	af00      	add	r7, sp, #0
 8001834:	60f8      	str	r0, [r7, #12]
 8001836:	60b9      	str	r1, [r7, #8]
 8001838:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800183a:	2300      	movs	r3, #0
 800183c:	617b      	str	r3, [r7, #20]
 800183e:	e009      	b.n	8001854 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	1c5a      	adds	r2, r3, #1
 8001844:	60ba      	str	r2, [r7, #8]
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	3301      	adds	r3, #1
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	429a      	cmp	r2, r3
 800185a:	dbf1      	blt.n	8001840 <_write+0x12>
  }
  return len;
 800185c:	687b      	ldr	r3, [r7, #4]
}
 800185e:	4618      	mov	r0, r3
 8001860:	3718      	adds	r7, #24
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <_close>:

int _close(int file)
{
 8001866:	b480      	push	{r7}
 8001868:	b083      	sub	sp, #12
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800186e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001872:	4618      	mov	r0, r3
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr

0800187c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800188c:	605a      	str	r2, [r3, #4]
  return 0;
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	bc80      	pop	{r7}
 8001898:	4770      	bx	lr

0800189a <_isatty>:

int _isatty(int file)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018a2:	2301      	movs	r3, #1
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr

080018ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b085      	sub	sp, #20
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	60f8      	str	r0, [r7, #12]
 80018b6:	60b9      	str	r1, [r7, #8]
 80018b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr
	...

080018c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018d0:	4a14      	ldr	r2, [pc, #80]	; (8001924 <_sbrk+0x5c>)
 80018d2:	4b15      	ldr	r3, [pc, #84]	; (8001928 <_sbrk+0x60>)
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018dc:	4b13      	ldr	r3, [pc, #76]	; (800192c <_sbrk+0x64>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d102      	bne.n	80018ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018e4:	4b11      	ldr	r3, [pc, #68]	; (800192c <_sbrk+0x64>)
 80018e6:	4a12      	ldr	r2, [pc, #72]	; (8001930 <_sbrk+0x68>)
 80018e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ea:	4b10      	ldr	r3, [pc, #64]	; (800192c <_sbrk+0x64>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4413      	add	r3, r2
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d207      	bcs.n	8001908 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018f8:	f001 fb86 	bl	8003008 <__errno>
 80018fc:	4603      	mov	r3, r0
 80018fe:	220c      	movs	r2, #12
 8001900:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001902:	f04f 33ff 	mov.w	r3, #4294967295
 8001906:	e009      	b.n	800191c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001908:	4b08      	ldr	r3, [pc, #32]	; (800192c <_sbrk+0x64>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800190e:	4b07      	ldr	r3, [pc, #28]	; (800192c <_sbrk+0x64>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4413      	add	r3, r2
 8001916:	4a05      	ldr	r2, [pc, #20]	; (800192c <_sbrk+0x64>)
 8001918:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800191a:	68fb      	ldr	r3, [r7, #12]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20005000 	.word	0x20005000
 8001928:	00000400 	.word	0x00000400
 800192c:	2000025c 	.word	0x2000025c
 8001930:	20000278 	.word	0x20000278

08001934 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr

08001940 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001940:	480c      	ldr	r0, [pc, #48]	; (8001974 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001942:	490d      	ldr	r1, [pc, #52]	; (8001978 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001944:	4a0d      	ldr	r2, [pc, #52]	; (800197c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001946:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001948:	e002      	b.n	8001950 <LoopCopyDataInit>

0800194a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800194a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800194c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800194e:	3304      	adds	r3, #4

08001950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001954:	d3f9      	bcc.n	800194a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001956:	4a0a      	ldr	r2, [pc, #40]	; (8001980 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001958:	4c0a      	ldr	r4, [pc, #40]	; (8001984 <LoopFillZerobss+0x22>)
  movs r3, #0
 800195a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800195c:	e001      	b.n	8001962 <LoopFillZerobss>

0800195e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800195e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001960:	3204      	adds	r2, #4

08001962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001964:	d3fb      	bcc.n	800195e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001966:	f7ff ffe5 	bl	8001934 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800196a:	f001 fb53 	bl	8003014 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800196e:	f7ff fbe7 	bl	8001140 <main>
  bx lr
 8001972:	4770      	bx	lr
  ldr r0, =_sdata
 8001974:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001978:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800197c:	08008fd4 	.word	0x08008fd4
  ldr r2, =_sbss
 8001980:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001984:	20000274 	.word	0x20000274

08001988 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001988:	e7fe      	b.n	8001988 <ADC1_2_IRQHandler>
	...

0800198c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001990:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <HAL_Init+0x28>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a07      	ldr	r2, [pc, #28]	; (80019b4 <HAL_Init+0x28>)
 8001996:	f043 0310 	orr.w	r3, r3, #16
 800199a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800199c:	2003      	movs	r0, #3
 800199e:	f000 f92b 	bl	8001bf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019a2:	200f      	movs	r0, #15
 80019a4:	f000 f808 	bl	80019b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019a8:	f7ff fe5a 	bl	8001660 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40022000 	.word	0x40022000

080019b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019c0:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <HAL_InitTick+0x54>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <HAL_InitTick+0x58>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	4619      	mov	r1, r3
 80019ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80019d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d6:	4618      	mov	r0, r3
 80019d8:	f000 f935 	bl	8001c46 <HAL_SYSTICK_Config>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e00e      	b.n	8001a04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2b0f      	cmp	r3, #15
 80019ea:	d80a      	bhi.n	8001a02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019ec:	2200      	movs	r2, #0
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	f04f 30ff 	mov.w	r0, #4294967295
 80019f4:	f000 f90b 	bl	8001c0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019f8:	4a06      	ldr	r2, [pc, #24]	; (8001a14 <HAL_InitTick+0x5c>)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
 8001a00:	e000      	b.n	8001a04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20000000 	.word	0x20000000
 8001a10:	20000008 	.word	0x20000008
 8001a14:	20000004 	.word	0x20000004

08001a18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a1c:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <HAL_IncTick+0x1c>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	461a      	mov	r2, r3
 8001a22:	4b05      	ldr	r3, [pc, #20]	; (8001a38 <HAL_IncTick+0x20>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4413      	add	r3, r2
 8001a28:	4a03      	ldr	r2, [pc, #12]	; (8001a38 <HAL_IncTick+0x20>)
 8001a2a:	6013      	str	r3, [r2, #0]
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr
 8001a34:	20000008 	.word	0x20000008
 8001a38:	20000260 	.word	0x20000260

08001a3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a40:	4b02      	ldr	r3, [pc, #8]	; (8001a4c <HAL_GetTick+0x10>)
 8001a42:	681b      	ldr	r3, [r3, #0]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr
 8001a4c:	20000260 	.word	0x20000260

08001a50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a58:	f7ff fff0 	bl	8001a3c <HAL_GetTick>
 8001a5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a68:	d005      	beq.n	8001a76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <HAL_Delay+0x44>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	461a      	mov	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	4413      	add	r3, r2
 8001a74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a76:	bf00      	nop
 8001a78:	f7ff ffe0 	bl	8001a3c <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d8f7      	bhi.n	8001a78 <HAL_Delay+0x28>
  {
  }
}
 8001a88:	bf00      	nop
 8001a8a:	bf00      	nop
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000008 	.word	0x20000008

08001a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <__NVIC_SetPriorityGrouping+0x44>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aae:	68ba      	ldr	r2, [r7, #8]
 8001ab0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ac0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aca:	4a04      	ldr	r2, [pc, #16]	; (8001adc <__NVIC_SetPriorityGrouping+0x44>)
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	60d3      	str	r3, [r2, #12]
}
 8001ad0:	bf00      	nop
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	e000ed00 	.word	0xe000ed00

08001ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ae4:	4b04      	ldr	r3, [pc, #16]	; (8001af8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	0a1b      	lsrs	r3, r3, #8
 8001aea:	f003 0307 	and.w	r3, r3, #7
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bc80      	pop	{r7}
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	6039      	str	r1, [r7, #0]
 8001b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	db0a      	blt.n	8001b26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	490c      	ldr	r1, [pc, #48]	; (8001b48 <__NVIC_SetPriority+0x4c>)
 8001b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1a:	0112      	lsls	r2, r2, #4
 8001b1c:	b2d2      	uxtb	r2, r2
 8001b1e:	440b      	add	r3, r1
 8001b20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b24:	e00a      	b.n	8001b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	4908      	ldr	r1, [pc, #32]	; (8001b4c <__NVIC_SetPriority+0x50>)
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	f003 030f 	and.w	r3, r3, #15
 8001b32:	3b04      	subs	r3, #4
 8001b34:	0112      	lsls	r2, r2, #4
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	440b      	add	r3, r1
 8001b3a:	761a      	strb	r2, [r3, #24]
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bc80      	pop	{r7}
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	e000e100 	.word	0xe000e100
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b089      	sub	sp, #36	; 0x24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	f1c3 0307 	rsb	r3, r3, #7
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	bf28      	it	cs
 8001b6e:	2304      	movcs	r3, #4
 8001b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	3304      	adds	r3, #4
 8001b76:	2b06      	cmp	r3, #6
 8001b78:	d902      	bls.n	8001b80 <NVIC_EncodePriority+0x30>
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	3b03      	subs	r3, #3
 8001b7e:	e000      	b.n	8001b82 <NVIC_EncodePriority+0x32>
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b84:	f04f 32ff 	mov.w	r2, #4294967295
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	43da      	mvns	r2, r3
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	401a      	ands	r2, r3
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b98:	f04f 31ff 	mov.w	r1, #4294967295
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba2:	43d9      	mvns	r1, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba8:	4313      	orrs	r3, r2
         );
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3724      	adds	r7, #36	; 0x24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr

08001bb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bc4:	d301      	bcc.n	8001bca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e00f      	b.n	8001bea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bca:	4a0a      	ldr	r2, [pc, #40]	; (8001bf4 <SysTick_Config+0x40>)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bd2:	210f      	movs	r1, #15
 8001bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd8:	f7ff ff90 	bl	8001afc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bdc:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <SysTick_Config+0x40>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001be2:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <SysTick_Config+0x40>)
 8001be4:	2207      	movs	r2, #7
 8001be6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	e000e010 	.word	0xe000e010

08001bf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff ff49 	bl	8001a98 <__NVIC_SetPriorityGrouping>
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b086      	sub	sp, #24
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	4603      	mov	r3, r0
 8001c16:	60b9      	str	r1, [r7, #8]
 8001c18:	607a      	str	r2, [r7, #4]
 8001c1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c20:	f7ff ff5e 	bl	8001ae0 <__NVIC_GetPriorityGrouping>
 8001c24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	68b9      	ldr	r1, [r7, #8]
 8001c2a:	6978      	ldr	r0, [r7, #20]
 8001c2c:	f7ff ff90 	bl	8001b50 <NVIC_EncodePriority>
 8001c30:	4602      	mov	r2, r0
 8001c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c36:	4611      	mov	r1, r2
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff ff5f 	bl	8001afc <__NVIC_SetPriority>
}
 8001c3e:	bf00      	nop
 8001c40:	3718      	adds	r7, #24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff ffb0 	bl	8001bb4 <SysTick_Config>
 8001c54:	4603      	mov	r3, r0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b08b      	sub	sp, #44	; 0x2c
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c72:	e169      	b.n	8001f48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c74:	2201      	movs	r2, #1
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	69fa      	ldr	r2, [r7, #28]
 8001c84:	4013      	ands	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	f040 8158 	bne.w	8001f42 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	4a9a      	ldr	r2, [pc, #616]	; (8001f00 <HAL_GPIO_Init+0x2a0>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d05e      	beq.n	8001d5a <HAL_GPIO_Init+0xfa>
 8001c9c:	4a98      	ldr	r2, [pc, #608]	; (8001f00 <HAL_GPIO_Init+0x2a0>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d875      	bhi.n	8001d8e <HAL_GPIO_Init+0x12e>
 8001ca2:	4a98      	ldr	r2, [pc, #608]	; (8001f04 <HAL_GPIO_Init+0x2a4>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d058      	beq.n	8001d5a <HAL_GPIO_Init+0xfa>
 8001ca8:	4a96      	ldr	r2, [pc, #600]	; (8001f04 <HAL_GPIO_Init+0x2a4>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d86f      	bhi.n	8001d8e <HAL_GPIO_Init+0x12e>
 8001cae:	4a96      	ldr	r2, [pc, #600]	; (8001f08 <HAL_GPIO_Init+0x2a8>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d052      	beq.n	8001d5a <HAL_GPIO_Init+0xfa>
 8001cb4:	4a94      	ldr	r2, [pc, #592]	; (8001f08 <HAL_GPIO_Init+0x2a8>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d869      	bhi.n	8001d8e <HAL_GPIO_Init+0x12e>
 8001cba:	4a94      	ldr	r2, [pc, #592]	; (8001f0c <HAL_GPIO_Init+0x2ac>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d04c      	beq.n	8001d5a <HAL_GPIO_Init+0xfa>
 8001cc0:	4a92      	ldr	r2, [pc, #584]	; (8001f0c <HAL_GPIO_Init+0x2ac>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d863      	bhi.n	8001d8e <HAL_GPIO_Init+0x12e>
 8001cc6:	4a92      	ldr	r2, [pc, #584]	; (8001f10 <HAL_GPIO_Init+0x2b0>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d046      	beq.n	8001d5a <HAL_GPIO_Init+0xfa>
 8001ccc:	4a90      	ldr	r2, [pc, #576]	; (8001f10 <HAL_GPIO_Init+0x2b0>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d85d      	bhi.n	8001d8e <HAL_GPIO_Init+0x12e>
 8001cd2:	2b12      	cmp	r3, #18
 8001cd4:	d82a      	bhi.n	8001d2c <HAL_GPIO_Init+0xcc>
 8001cd6:	2b12      	cmp	r3, #18
 8001cd8:	d859      	bhi.n	8001d8e <HAL_GPIO_Init+0x12e>
 8001cda:	a201      	add	r2, pc, #4	; (adr r2, 8001ce0 <HAL_GPIO_Init+0x80>)
 8001cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce0:	08001d5b 	.word	0x08001d5b
 8001ce4:	08001d35 	.word	0x08001d35
 8001ce8:	08001d47 	.word	0x08001d47
 8001cec:	08001d89 	.word	0x08001d89
 8001cf0:	08001d8f 	.word	0x08001d8f
 8001cf4:	08001d8f 	.word	0x08001d8f
 8001cf8:	08001d8f 	.word	0x08001d8f
 8001cfc:	08001d8f 	.word	0x08001d8f
 8001d00:	08001d8f 	.word	0x08001d8f
 8001d04:	08001d8f 	.word	0x08001d8f
 8001d08:	08001d8f 	.word	0x08001d8f
 8001d0c:	08001d8f 	.word	0x08001d8f
 8001d10:	08001d8f 	.word	0x08001d8f
 8001d14:	08001d8f 	.word	0x08001d8f
 8001d18:	08001d8f 	.word	0x08001d8f
 8001d1c:	08001d8f 	.word	0x08001d8f
 8001d20:	08001d8f 	.word	0x08001d8f
 8001d24:	08001d3d 	.word	0x08001d3d
 8001d28:	08001d51 	.word	0x08001d51
 8001d2c:	4a79      	ldr	r2, [pc, #484]	; (8001f14 <HAL_GPIO_Init+0x2b4>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d013      	beq.n	8001d5a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d32:	e02c      	b.n	8001d8e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	623b      	str	r3, [r7, #32]
          break;
 8001d3a:	e029      	b.n	8001d90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	3304      	adds	r3, #4
 8001d42:	623b      	str	r3, [r7, #32]
          break;
 8001d44:	e024      	b.n	8001d90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	3308      	adds	r3, #8
 8001d4c:	623b      	str	r3, [r7, #32]
          break;
 8001d4e:	e01f      	b.n	8001d90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	330c      	adds	r3, #12
 8001d56:	623b      	str	r3, [r7, #32]
          break;
 8001d58:	e01a      	b.n	8001d90 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d102      	bne.n	8001d68 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d62:	2304      	movs	r3, #4
 8001d64:	623b      	str	r3, [r7, #32]
          break;
 8001d66:	e013      	b.n	8001d90 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d105      	bne.n	8001d7c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d70:	2308      	movs	r3, #8
 8001d72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	69fa      	ldr	r2, [r7, #28]
 8001d78:	611a      	str	r2, [r3, #16]
          break;
 8001d7a:	e009      	b.n	8001d90 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d7c:	2308      	movs	r3, #8
 8001d7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	69fa      	ldr	r2, [r7, #28]
 8001d84:	615a      	str	r2, [r3, #20]
          break;
 8001d86:	e003      	b.n	8001d90 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	623b      	str	r3, [r7, #32]
          break;
 8001d8c:	e000      	b.n	8001d90 <HAL_GPIO_Init+0x130>
          break;
 8001d8e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	2bff      	cmp	r3, #255	; 0xff
 8001d94:	d801      	bhi.n	8001d9a <HAL_GPIO_Init+0x13a>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	e001      	b.n	8001d9e <HAL_GPIO_Init+0x13e>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	3304      	adds	r3, #4
 8001d9e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	2bff      	cmp	r3, #255	; 0xff
 8001da4:	d802      	bhi.n	8001dac <HAL_GPIO_Init+0x14c>
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	e002      	b.n	8001db2 <HAL_GPIO_Init+0x152>
 8001dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dae:	3b08      	subs	r3, #8
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	210f      	movs	r1, #15
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	401a      	ands	r2, r3
 8001dc4:	6a39      	ldr	r1, [r7, #32]
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dcc:	431a      	orrs	r2, r3
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 80b1 	beq.w	8001f42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001de0:	4b4d      	ldr	r3, [pc, #308]	; (8001f18 <HAL_GPIO_Init+0x2b8>)
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	4a4c      	ldr	r2, [pc, #304]	; (8001f18 <HAL_GPIO_Init+0x2b8>)
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	6193      	str	r3, [r2, #24]
 8001dec:	4b4a      	ldr	r3, [pc, #296]	; (8001f18 <HAL_GPIO_Init+0x2b8>)
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001df8:	4a48      	ldr	r2, [pc, #288]	; (8001f1c <HAL_GPIO_Init+0x2bc>)
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	089b      	lsrs	r3, r3, #2
 8001dfe:	3302      	adds	r3, #2
 8001e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e04:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	f003 0303 	and.w	r3, r3, #3
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	220f      	movs	r2, #15
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a40      	ldr	r2, [pc, #256]	; (8001f20 <HAL_GPIO_Init+0x2c0>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d013      	beq.n	8001e4c <HAL_GPIO_Init+0x1ec>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a3f      	ldr	r2, [pc, #252]	; (8001f24 <HAL_GPIO_Init+0x2c4>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d00d      	beq.n	8001e48 <HAL_GPIO_Init+0x1e8>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a3e      	ldr	r2, [pc, #248]	; (8001f28 <HAL_GPIO_Init+0x2c8>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d007      	beq.n	8001e44 <HAL_GPIO_Init+0x1e4>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a3d      	ldr	r2, [pc, #244]	; (8001f2c <HAL_GPIO_Init+0x2cc>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d101      	bne.n	8001e40 <HAL_GPIO_Init+0x1e0>
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e006      	b.n	8001e4e <HAL_GPIO_Init+0x1ee>
 8001e40:	2304      	movs	r3, #4
 8001e42:	e004      	b.n	8001e4e <HAL_GPIO_Init+0x1ee>
 8001e44:	2302      	movs	r3, #2
 8001e46:	e002      	b.n	8001e4e <HAL_GPIO_Init+0x1ee>
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e000      	b.n	8001e4e <HAL_GPIO_Init+0x1ee>
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e50:	f002 0203 	and.w	r2, r2, #3
 8001e54:	0092      	lsls	r2, r2, #2
 8001e56:	4093      	lsls	r3, r2
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e5e:	492f      	ldr	r1, [pc, #188]	; (8001f1c <HAL_GPIO_Init+0x2bc>)
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	089b      	lsrs	r3, r3, #2
 8001e64:	3302      	adds	r3, #2
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d006      	beq.n	8001e86 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e78:	4b2d      	ldr	r3, [pc, #180]	; (8001f30 <HAL_GPIO_Init+0x2d0>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	492c      	ldr	r1, [pc, #176]	; (8001f30 <HAL_GPIO_Init+0x2d0>)
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	600b      	str	r3, [r1, #0]
 8001e84:	e006      	b.n	8001e94 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e86:	4b2a      	ldr	r3, [pc, #168]	; (8001f30 <HAL_GPIO_Init+0x2d0>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	4928      	ldr	r1, [pc, #160]	; (8001f30 <HAL_GPIO_Init+0x2d0>)
 8001e90:	4013      	ands	r3, r2
 8001e92:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d006      	beq.n	8001eae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ea0:	4b23      	ldr	r3, [pc, #140]	; (8001f30 <HAL_GPIO_Init+0x2d0>)
 8001ea2:	685a      	ldr	r2, [r3, #4]
 8001ea4:	4922      	ldr	r1, [pc, #136]	; (8001f30 <HAL_GPIO_Init+0x2d0>)
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	604b      	str	r3, [r1, #4]
 8001eac:	e006      	b.n	8001ebc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001eae:	4b20      	ldr	r3, [pc, #128]	; (8001f30 <HAL_GPIO_Init+0x2d0>)
 8001eb0:	685a      	ldr	r2, [r3, #4]
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	491e      	ldr	r1, [pc, #120]	; (8001f30 <HAL_GPIO_Init+0x2d0>)
 8001eb8:	4013      	ands	r3, r2
 8001eba:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d006      	beq.n	8001ed6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ec8:	4b19      	ldr	r3, [pc, #100]	; (8001f30 <HAL_GPIO_Init+0x2d0>)
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	4918      	ldr	r1, [pc, #96]	; (8001f30 <HAL_GPIO_Init+0x2d0>)
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	608b      	str	r3, [r1, #8]
 8001ed4:	e006      	b.n	8001ee4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ed6:	4b16      	ldr	r3, [pc, #88]	; (8001f30 <HAL_GPIO_Init+0x2d0>)
 8001ed8:	689a      	ldr	r2, [r3, #8]
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	43db      	mvns	r3, r3
 8001ede:	4914      	ldr	r1, [pc, #80]	; (8001f30 <HAL_GPIO_Init+0x2d0>)
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d021      	beq.n	8001f34 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ef0:	4b0f      	ldr	r3, [pc, #60]	; (8001f30 <HAL_GPIO_Init+0x2d0>)
 8001ef2:	68da      	ldr	r2, [r3, #12]
 8001ef4:	490e      	ldr	r1, [pc, #56]	; (8001f30 <HAL_GPIO_Init+0x2d0>)
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	60cb      	str	r3, [r1, #12]
 8001efc:	e021      	b.n	8001f42 <HAL_GPIO_Init+0x2e2>
 8001efe:	bf00      	nop
 8001f00:	10320000 	.word	0x10320000
 8001f04:	10310000 	.word	0x10310000
 8001f08:	10220000 	.word	0x10220000
 8001f0c:	10210000 	.word	0x10210000
 8001f10:	10120000 	.word	0x10120000
 8001f14:	10110000 	.word	0x10110000
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	40010000 	.word	0x40010000
 8001f20:	40010800 	.word	0x40010800
 8001f24:	40010c00 	.word	0x40010c00
 8001f28:	40011000 	.word	0x40011000
 8001f2c:	40011400 	.word	0x40011400
 8001f30:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f34:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <HAL_GPIO_Init+0x304>)
 8001f36:	68da      	ldr	r2, [r3, #12]
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	4909      	ldr	r1, [pc, #36]	; (8001f64 <HAL_GPIO_Init+0x304>)
 8001f3e:	4013      	ands	r3, r2
 8001f40:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f44:	3301      	adds	r3, #1
 8001f46:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f47f ae8e 	bne.w	8001c74 <HAL_GPIO_Init+0x14>
  }
}
 8001f58:	bf00      	nop
 8001f5a:	bf00      	nop
 8001f5c:	372c      	adds	r7, #44	; 0x2c
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr
 8001f64:	40010400 	.word	0x40010400

08001f68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e12b      	b.n	80021d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d106      	bne.n	8001f94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7ff fb98 	bl	80016c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2224      	movs	r2, #36	; 0x24
 8001f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f022 0201 	bic.w	r2, r2, #1
 8001faa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001fcc:	f000 ffea 	bl	8002fa4 <HAL_RCC_GetPCLK1Freq>
 8001fd0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	4a81      	ldr	r2, [pc, #516]	; (80021dc <HAL_I2C_Init+0x274>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d807      	bhi.n	8001fec <HAL_I2C_Init+0x84>
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	4a80      	ldr	r2, [pc, #512]	; (80021e0 <HAL_I2C_Init+0x278>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	bf94      	ite	ls
 8001fe4:	2301      	movls	r3, #1
 8001fe6:	2300      	movhi	r3, #0
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	e006      	b.n	8001ffa <HAL_I2C_Init+0x92>
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4a7d      	ldr	r2, [pc, #500]	; (80021e4 <HAL_I2C_Init+0x27c>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	bf94      	ite	ls
 8001ff4:	2301      	movls	r3, #1
 8001ff6:	2300      	movhi	r3, #0
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e0e7      	b.n	80021d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	4a78      	ldr	r2, [pc, #480]	; (80021e8 <HAL_I2C_Init+0x280>)
 8002006:	fba2 2303 	umull	r2, r3, r2, r3
 800200a:	0c9b      	lsrs	r3, r3, #18
 800200c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68ba      	ldr	r2, [r7, #8]
 800201e:	430a      	orrs	r2, r1
 8002020:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	4a6a      	ldr	r2, [pc, #424]	; (80021dc <HAL_I2C_Init+0x274>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d802      	bhi.n	800203c <HAL_I2C_Init+0xd4>
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	3301      	adds	r3, #1
 800203a:	e009      	b.n	8002050 <HAL_I2C_Init+0xe8>
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002042:	fb02 f303 	mul.w	r3, r2, r3
 8002046:	4a69      	ldr	r2, [pc, #420]	; (80021ec <HAL_I2C_Init+0x284>)
 8002048:	fba2 2303 	umull	r2, r3, r2, r3
 800204c:	099b      	lsrs	r3, r3, #6
 800204e:	3301      	adds	r3, #1
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	6812      	ldr	r2, [r2, #0]
 8002054:	430b      	orrs	r3, r1
 8002056:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002062:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	495c      	ldr	r1, [pc, #368]	; (80021dc <HAL_I2C_Init+0x274>)
 800206c:	428b      	cmp	r3, r1
 800206e:	d819      	bhi.n	80020a4 <HAL_I2C_Init+0x13c>
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	1e59      	subs	r1, r3, #1
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	fbb1 f3f3 	udiv	r3, r1, r3
 800207e:	1c59      	adds	r1, r3, #1
 8002080:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002084:	400b      	ands	r3, r1
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00a      	beq.n	80020a0 <HAL_I2C_Init+0x138>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	1e59      	subs	r1, r3, #1
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	fbb1 f3f3 	udiv	r3, r1, r3
 8002098:	3301      	adds	r3, #1
 800209a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800209e:	e051      	b.n	8002144 <HAL_I2C_Init+0x1dc>
 80020a0:	2304      	movs	r3, #4
 80020a2:	e04f      	b.n	8002144 <HAL_I2C_Init+0x1dc>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d111      	bne.n	80020d0 <HAL_I2C_Init+0x168>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	1e58      	subs	r0, r3, #1
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6859      	ldr	r1, [r3, #4]
 80020b4:	460b      	mov	r3, r1
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	440b      	add	r3, r1
 80020ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80020be:	3301      	adds	r3, #1
 80020c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	bf0c      	ite	eq
 80020c8:	2301      	moveq	r3, #1
 80020ca:	2300      	movne	r3, #0
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	e012      	b.n	80020f6 <HAL_I2C_Init+0x18e>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	1e58      	subs	r0, r3, #1
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6859      	ldr	r1, [r3, #4]
 80020d8:	460b      	mov	r3, r1
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	0099      	lsls	r1, r3, #2
 80020e0:	440b      	add	r3, r1
 80020e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80020e6:	3301      	adds	r3, #1
 80020e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	bf0c      	ite	eq
 80020f0:	2301      	moveq	r3, #1
 80020f2:	2300      	movne	r3, #0
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <HAL_I2C_Init+0x196>
 80020fa:	2301      	movs	r3, #1
 80020fc:	e022      	b.n	8002144 <HAL_I2C_Init+0x1dc>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d10e      	bne.n	8002124 <HAL_I2C_Init+0x1bc>
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	1e58      	subs	r0, r3, #1
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6859      	ldr	r1, [r3, #4]
 800210e:	460b      	mov	r3, r1
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	440b      	add	r3, r1
 8002114:	fbb0 f3f3 	udiv	r3, r0, r3
 8002118:	3301      	adds	r3, #1
 800211a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800211e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002122:	e00f      	b.n	8002144 <HAL_I2C_Init+0x1dc>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	1e58      	subs	r0, r3, #1
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6859      	ldr	r1, [r3, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	440b      	add	r3, r1
 8002132:	0099      	lsls	r1, r3, #2
 8002134:	440b      	add	r3, r1
 8002136:	fbb0 f3f3 	udiv	r3, r0, r3
 800213a:	3301      	adds	r3, #1
 800213c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002140:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	6809      	ldr	r1, [r1, #0]
 8002148:	4313      	orrs	r3, r2
 800214a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69da      	ldr	r2, [r3, #28]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	431a      	orrs	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	430a      	orrs	r2, r1
 8002166:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002172:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	6911      	ldr	r1, [r2, #16]
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	68d2      	ldr	r2, [r2, #12]
 800217e:	4311      	orrs	r1, r2
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	6812      	ldr	r2, [r2, #0]
 8002184:	430b      	orrs	r3, r1
 8002186:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	695a      	ldr	r2, [r3, #20]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	431a      	orrs	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	430a      	orrs	r2, r1
 80021a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f042 0201 	orr.w	r2, r2, #1
 80021b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2220      	movs	r2, #32
 80021be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	000186a0 	.word	0x000186a0
 80021e0:	001e847f 	.word	0x001e847f
 80021e4:	003d08ff 	.word	0x003d08ff
 80021e8:	431bde83 	.word	0x431bde83
 80021ec:	10624dd3 	.word	0x10624dd3

080021f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b088      	sub	sp, #32
 80021f4:	af02      	add	r7, sp, #8
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	607a      	str	r2, [r7, #4]
 80021fa:	461a      	mov	r2, r3
 80021fc:	460b      	mov	r3, r1
 80021fe:	817b      	strh	r3, [r7, #10]
 8002200:	4613      	mov	r3, r2
 8002202:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002204:	f7ff fc1a 	bl	8001a3c <HAL_GetTick>
 8002208:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b20      	cmp	r3, #32
 8002214:	f040 80e0 	bne.w	80023d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	2319      	movs	r3, #25
 800221e:	2201      	movs	r2, #1
 8002220:	4970      	ldr	r1, [pc, #448]	; (80023e4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002222:	68f8      	ldr	r0, [r7, #12]
 8002224:	f000 f964 	bl	80024f0 <I2C_WaitOnFlagUntilTimeout>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800222e:	2302      	movs	r3, #2
 8002230:	e0d3      	b.n	80023da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002238:	2b01      	cmp	r3, #1
 800223a:	d101      	bne.n	8002240 <HAL_I2C_Master_Transmit+0x50>
 800223c:	2302      	movs	r3, #2
 800223e:	e0cc      	b.n	80023da <HAL_I2C_Master_Transmit+0x1ea>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b01      	cmp	r3, #1
 8002254:	d007      	beq.n	8002266 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f042 0201 	orr.w	r2, r2, #1
 8002264:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002274:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2221      	movs	r2, #33	; 0x21
 800227a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2210      	movs	r2, #16
 8002282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	893a      	ldrh	r2, [r7, #8]
 8002296:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800229c:	b29a      	uxth	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	4a50      	ldr	r2, [pc, #320]	; (80023e8 <HAL_I2C_Master_Transmit+0x1f8>)
 80022a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80022a8:	8979      	ldrh	r1, [r7, #10]
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	6a3a      	ldr	r2, [r7, #32]
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f000 f89c 	bl	80023ec <I2C_MasterRequestWrite>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e08d      	b.n	80023da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022be:	2300      	movs	r3, #0
 80022c0:	613b      	str	r3, [r7, #16]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	613b      	str	r3, [r7, #16]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	613b      	str	r3, [r7, #16]
 80022d2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80022d4:	e066      	b.n	80023a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	6a39      	ldr	r1, [r7, #32]
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f000 f9de 	bl	800269c <I2C_WaitOnTXEFlagUntilTimeout>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00d      	beq.n	8002302 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d107      	bne.n	80022fe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e06b      	b.n	80023da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002306:	781a      	ldrb	r2, [r3, #0]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002312:	1c5a      	adds	r2, r3, #1
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800231c:	b29b      	uxth	r3, r3
 800231e:	3b01      	subs	r3, #1
 8002320:	b29a      	uxth	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800232a:	3b01      	subs	r3, #1
 800232c:	b29a      	uxth	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b04      	cmp	r3, #4
 800233e:	d11b      	bne.n	8002378 <HAL_I2C_Master_Transmit+0x188>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002344:	2b00      	cmp	r3, #0
 8002346:	d017      	beq.n	8002378 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	781a      	ldrb	r2, [r3, #0]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002358:	1c5a      	adds	r2, r3, #1
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002362:	b29b      	uxth	r3, r3
 8002364:	3b01      	subs	r3, #1
 8002366:	b29a      	uxth	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002370:	3b01      	subs	r3, #1
 8002372:	b29a      	uxth	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002378:	697a      	ldr	r2, [r7, #20]
 800237a:	6a39      	ldr	r1, [r7, #32]
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	f000 f9ce 	bl	800271e <I2C_WaitOnBTFFlagUntilTimeout>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00d      	beq.n	80023a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238c:	2b04      	cmp	r3, #4
 800238e:	d107      	bne.n	80023a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800239e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e01a      	b.n	80023da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d194      	bne.n	80022d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2220      	movs	r2, #32
 80023c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80023d4:	2300      	movs	r3, #0
 80023d6:	e000      	b.n	80023da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80023d8:	2302      	movs	r3, #2
  }
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3718      	adds	r7, #24
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	00100002 	.word	0x00100002
 80023e8:	ffff0000 	.word	0xffff0000

080023ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b088      	sub	sp, #32
 80023f0:	af02      	add	r7, sp, #8
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	607a      	str	r2, [r7, #4]
 80023f6:	603b      	str	r3, [r7, #0]
 80023f8:	460b      	mov	r3, r1
 80023fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002400:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	2b08      	cmp	r3, #8
 8002406:	d006      	beq.n	8002416 <I2C_MasterRequestWrite+0x2a>
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d003      	beq.n	8002416 <I2C_MasterRequestWrite+0x2a>
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002414:	d108      	bne.n	8002428 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	e00b      	b.n	8002440 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242c:	2b12      	cmp	r3, #18
 800242e:	d107      	bne.n	8002440 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800243e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f000 f84f 	bl	80024f0 <I2C_WaitOnFlagUntilTimeout>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00d      	beq.n	8002474 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002466:	d103      	bne.n	8002470 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800246e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e035      	b.n	80024e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	691b      	ldr	r3, [r3, #16]
 8002478:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800247c:	d108      	bne.n	8002490 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800247e:	897b      	ldrh	r3, [r7, #10]
 8002480:	b2db      	uxtb	r3, r3
 8002482:	461a      	mov	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800248c:	611a      	str	r2, [r3, #16]
 800248e:	e01b      	b.n	80024c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002490:	897b      	ldrh	r3, [r7, #10]
 8002492:	11db      	asrs	r3, r3, #7
 8002494:	b2db      	uxtb	r3, r3
 8002496:	f003 0306 	and.w	r3, r3, #6
 800249a:	b2db      	uxtb	r3, r3
 800249c:	f063 030f 	orn	r3, r3, #15
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	490e      	ldr	r1, [pc, #56]	; (80024e8 <I2C_MasterRequestWrite+0xfc>)
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f000 f875 	bl	800259e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e010      	b.n	80024e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80024be:	897b      	ldrh	r3, [r7, #10]
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	4907      	ldr	r1, [pc, #28]	; (80024ec <I2C_MasterRequestWrite+0x100>)
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f000 f865 	bl	800259e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e000      	b.n	80024e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	00010008 	.word	0x00010008
 80024ec:	00010002 	.word	0x00010002

080024f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	603b      	str	r3, [r7, #0]
 80024fc:	4613      	mov	r3, r2
 80024fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002500:	e025      	b.n	800254e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002508:	d021      	beq.n	800254e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800250a:	f7ff fa97 	bl	8001a3c <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	429a      	cmp	r2, r3
 8002518:	d302      	bcc.n	8002520 <I2C_WaitOnFlagUntilTimeout+0x30>
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d116      	bne.n	800254e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2220      	movs	r2, #32
 800252a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	f043 0220 	orr.w	r2, r3, #32
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e023      	b.n	8002596 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	0c1b      	lsrs	r3, r3, #16
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b01      	cmp	r3, #1
 8002556:	d10d      	bne.n	8002574 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	43da      	mvns	r2, r3
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	4013      	ands	r3, r2
 8002564:	b29b      	uxth	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	bf0c      	ite	eq
 800256a:	2301      	moveq	r3, #1
 800256c:	2300      	movne	r3, #0
 800256e:	b2db      	uxtb	r3, r3
 8002570:	461a      	mov	r2, r3
 8002572:	e00c      	b.n	800258e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	43da      	mvns	r2, r3
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	4013      	ands	r3, r2
 8002580:	b29b      	uxth	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	bf0c      	ite	eq
 8002586:	2301      	moveq	r3, #1
 8002588:	2300      	movne	r3, #0
 800258a:	b2db      	uxtb	r3, r3
 800258c:	461a      	mov	r2, r3
 800258e:	79fb      	ldrb	r3, [r7, #7]
 8002590:	429a      	cmp	r2, r3
 8002592:	d0b6      	beq.n	8002502 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b084      	sub	sp, #16
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	60f8      	str	r0, [r7, #12]
 80025a6:	60b9      	str	r1, [r7, #8]
 80025a8:	607a      	str	r2, [r7, #4]
 80025aa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025ac:	e051      	b.n	8002652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	695b      	ldr	r3, [r3, #20]
 80025b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025bc:	d123      	bne.n	8002606 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025cc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025d6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2220      	movs	r2, #32
 80025e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	f043 0204 	orr.w	r2, r3, #4
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e046      	b.n	8002694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260c:	d021      	beq.n	8002652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800260e:	f7ff fa15 	bl	8001a3c <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	429a      	cmp	r2, r3
 800261c:	d302      	bcc.n	8002624 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d116      	bne.n	8002652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2220      	movs	r2, #32
 800262e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	f043 0220 	orr.w	r2, r3, #32
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e020      	b.n	8002694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	0c1b      	lsrs	r3, r3, #16
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b01      	cmp	r3, #1
 800265a:	d10c      	bne.n	8002676 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	43da      	mvns	r2, r3
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	4013      	ands	r3, r2
 8002668:	b29b      	uxth	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	bf14      	ite	ne
 800266e:	2301      	movne	r3, #1
 8002670:	2300      	moveq	r3, #0
 8002672:	b2db      	uxtb	r3, r3
 8002674:	e00b      	b.n	800268e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	43da      	mvns	r2, r3
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	4013      	ands	r3, r2
 8002682:	b29b      	uxth	r3, r3
 8002684:	2b00      	cmp	r3, #0
 8002686:	bf14      	ite	ne
 8002688:	2301      	movne	r3, #1
 800268a:	2300      	moveq	r3, #0
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d18d      	bne.n	80025ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026a8:	e02d      	b.n	8002706 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f000 f878 	bl	80027a0 <I2C_IsAcknowledgeFailed>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e02d      	b.n	8002716 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c0:	d021      	beq.n	8002706 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026c2:	f7ff f9bb 	bl	8001a3c <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	68ba      	ldr	r2, [r7, #8]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d302      	bcc.n	80026d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d116      	bne.n	8002706 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2220      	movs	r2, #32
 80026e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	f043 0220 	orr.w	r2, r3, #32
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e007      	b.n	8002716 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002710:	2b80      	cmp	r3, #128	; 0x80
 8002712:	d1ca      	bne.n	80026aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b084      	sub	sp, #16
 8002722:	af00      	add	r7, sp, #0
 8002724:	60f8      	str	r0, [r7, #12]
 8002726:	60b9      	str	r1, [r7, #8]
 8002728:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800272a:	e02d      	b.n	8002788 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f000 f837 	bl	80027a0 <I2C_IsAcknowledgeFailed>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e02d      	b.n	8002798 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002742:	d021      	beq.n	8002788 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002744:	f7ff f97a 	bl	8001a3c <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	429a      	cmp	r2, r3
 8002752:	d302      	bcc.n	800275a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d116      	bne.n	8002788 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2220      	movs	r2, #32
 8002764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002774:	f043 0220 	orr.w	r2, r3, #32
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e007      	b.n	8002798 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	f003 0304 	and.w	r3, r3, #4
 8002792:	2b04      	cmp	r3, #4
 8002794:	d1ca      	bne.n	800272c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027b6:	d11b      	bne.n	80027f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2220      	movs	r2, #32
 80027cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027dc:	f043 0204 	orr.w	r2, r3, #4
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e000      	b.n	80027f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bc80      	pop	{r7}
 80027fa:	4770      	bx	lr

080027fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e272      	b.n	8002cf4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b00      	cmp	r3, #0
 8002818:	f000 8087 	beq.w	800292a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800281c:	4b92      	ldr	r3, [pc, #584]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f003 030c 	and.w	r3, r3, #12
 8002824:	2b04      	cmp	r3, #4
 8002826:	d00c      	beq.n	8002842 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002828:	4b8f      	ldr	r3, [pc, #572]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f003 030c 	and.w	r3, r3, #12
 8002830:	2b08      	cmp	r3, #8
 8002832:	d112      	bne.n	800285a <HAL_RCC_OscConfig+0x5e>
 8002834:	4b8c      	ldr	r3, [pc, #560]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800283c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002840:	d10b      	bne.n	800285a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002842:	4b89      	ldr	r3, [pc, #548]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d06c      	beq.n	8002928 <HAL_RCC_OscConfig+0x12c>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d168      	bne.n	8002928 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e24c      	b.n	8002cf4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002862:	d106      	bne.n	8002872 <HAL_RCC_OscConfig+0x76>
 8002864:	4b80      	ldr	r3, [pc, #512]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a7f      	ldr	r2, [pc, #508]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 800286a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800286e:	6013      	str	r3, [r2, #0]
 8002870:	e02e      	b.n	80028d0 <HAL_RCC_OscConfig+0xd4>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10c      	bne.n	8002894 <HAL_RCC_OscConfig+0x98>
 800287a:	4b7b      	ldr	r3, [pc, #492]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a7a      	ldr	r2, [pc, #488]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 8002880:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	4b78      	ldr	r3, [pc, #480]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a77      	ldr	r2, [pc, #476]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 800288c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002890:	6013      	str	r3, [r2, #0]
 8002892:	e01d      	b.n	80028d0 <HAL_RCC_OscConfig+0xd4>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800289c:	d10c      	bne.n	80028b8 <HAL_RCC_OscConfig+0xbc>
 800289e:	4b72      	ldr	r3, [pc, #456]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a71      	ldr	r2, [pc, #452]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 80028a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028a8:	6013      	str	r3, [r2, #0]
 80028aa:	4b6f      	ldr	r3, [pc, #444]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a6e      	ldr	r2, [pc, #440]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 80028b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b4:	6013      	str	r3, [r2, #0]
 80028b6:	e00b      	b.n	80028d0 <HAL_RCC_OscConfig+0xd4>
 80028b8:	4b6b      	ldr	r3, [pc, #428]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a6a      	ldr	r2, [pc, #424]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 80028be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028c2:	6013      	str	r3, [r2, #0]
 80028c4:	4b68      	ldr	r3, [pc, #416]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a67      	ldr	r2, [pc, #412]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 80028ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d013      	beq.n	8002900 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d8:	f7ff f8b0 	bl	8001a3c <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028e0:	f7ff f8ac 	bl	8001a3c <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b64      	cmp	r3, #100	; 0x64
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e200      	b.n	8002cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f2:	4b5d      	ldr	r3, [pc, #372]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d0f0      	beq.n	80028e0 <HAL_RCC_OscConfig+0xe4>
 80028fe:	e014      	b.n	800292a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002900:	f7ff f89c 	bl	8001a3c <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002908:	f7ff f898 	bl	8001a3c <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b64      	cmp	r3, #100	; 0x64
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e1ec      	b.n	8002cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800291a:	4b53      	ldr	r3, [pc, #332]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1f0      	bne.n	8002908 <HAL_RCC_OscConfig+0x10c>
 8002926:	e000      	b.n	800292a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002928:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d063      	beq.n	80029fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002936:	4b4c      	ldr	r3, [pc, #304]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f003 030c 	and.w	r3, r3, #12
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00b      	beq.n	800295a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002942:	4b49      	ldr	r3, [pc, #292]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f003 030c 	and.w	r3, r3, #12
 800294a:	2b08      	cmp	r3, #8
 800294c:	d11c      	bne.n	8002988 <HAL_RCC_OscConfig+0x18c>
 800294e:	4b46      	ldr	r3, [pc, #280]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d116      	bne.n	8002988 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800295a:	4b43      	ldr	r3, [pc, #268]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d005      	beq.n	8002972 <HAL_RCC_OscConfig+0x176>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d001      	beq.n	8002972 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e1c0      	b.n	8002cf4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002972:	4b3d      	ldr	r3, [pc, #244]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	4939      	ldr	r1, [pc, #228]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 8002982:	4313      	orrs	r3, r2
 8002984:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002986:	e03a      	b.n	80029fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d020      	beq.n	80029d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002990:	4b36      	ldr	r3, [pc, #216]	; (8002a6c <HAL_RCC_OscConfig+0x270>)
 8002992:	2201      	movs	r2, #1
 8002994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002996:	f7ff f851 	bl	8001a3c <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800299c:	e008      	b.n	80029b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800299e:	f7ff f84d 	bl	8001a3c <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e1a1      	b.n	8002cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b0:	4b2d      	ldr	r3, [pc, #180]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d0f0      	beq.n	800299e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029bc:	4b2a      	ldr	r3, [pc, #168]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	4927      	ldr	r1, [pc, #156]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	600b      	str	r3, [r1, #0]
 80029d0:	e015      	b.n	80029fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029d2:	4b26      	ldr	r3, [pc, #152]	; (8002a6c <HAL_RCC_OscConfig+0x270>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d8:	f7ff f830 	bl	8001a3c <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029e0:	f7ff f82c 	bl	8001a3c <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e180      	b.n	8002cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029f2:	4b1d      	ldr	r3, [pc, #116]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1f0      	bne.n	80029e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d03a      	beq.n	8002a80 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d019      	beq.n	8002a46 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a12:	4b17      	ldr	r3, [pc, #92]	; (8002a70 <HAL_RCC_OscConfig+0x274>)
 8002a14:	2201      	movs	r2, #1
 8002a16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a18:	f7ff f810 	bl	8001a3c <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a20:	f7ff f80c 	bl	8001a3c <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e160      	b.n	8002cf4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a32:	4b0d      	ldr	r3, [pc, #52]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 8002a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0f0      	beq.n	8002a20 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a3e:	2001      	movs	r0, #1
 8002a40:	f000 fac4 	bl	8002fcc <RCC_Delay>
 8002a44:	e01c      	b.n	8002a80 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a46:	4b0a      	ldr	r3, [pc, #40]	; (8002a70 <HAL_RCC_OscConfig+0x274>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a4c:	f7fe fff6 	bl	8001a3c <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a52:	e00f      	b.n	8002a74 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a54:	f7fe fff2 	bl	8001a3c <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d908      	bls.n	8002a74 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e146      	b.n	8002cf4 <HAL_RCC_OscConfig+0x4f8>
 8002a66:	bf00      	nop
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	42420000 	.word	0x42420000
 8002a70:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a74:	4b92      	ldr	r3, [pc, #584]	; (8002cc0 <HAL_RCC_OscConfig+0x4c4>)
 8002a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1e9      	bne.n	8002a54 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 80a6 	beq.w	8002bda <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a92:	4b8b      	ldr	r3, [pc, #556]	; (8002cc0 <HAL_RCC_OscConfig+0x4c4>)
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10d      	bne.n	8002aba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a9e:	4b88      	ldr	r3, [pc, #544]	; (8002cc0 <HAL_RCC_OscConfig+0x4c4>)
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	4a87      	ldr	r2, [pc, #540]	; (8002cc0 <HAL_RCC_OscConfig+0x4c4>)
 8002aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aa8:	61d3      	str	r3, [r2, #28]
 8002aaa:	4b85      	ldr	r3, [pc, #532]	; (8002cc0 <HAL_RCC_OscConfig+0x4c4>)
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab2:	60bb      	str	r3, [r7, #8]
 8002ab4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aba:	4b82      	ldr	r3, [pc, #520]	; (8002cc4 <HAL_RCC_OscConfig+0x4c8>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d118      	bne.n	8002af8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ac6:	4b7f      	ldr	r3, [pc, #508]	; (8002cc4 <HAL_RCC_OscConfig+0x4c8>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a7e      	ldr	r2, [pc, #504]	; (8002cc4 <HAL_RCC_OscConfig+0x4c8>)
 8002acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ad2:	f7fe ffb3 	bl	8001a3c <HAL_GetTick>
 8002ad6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad8:	e008      	b.n	8002aec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ada:	f7fe ffaf 	bl	8001a3c <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b64      	cmp	r3, #100	; 0x64
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e103      	b.n	8002cf4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aec:	4b75      	ldr	r3, [pc, #468]	; (8002cc4 <HAL_RCC_OscConfig+0x4c8>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0f0      	beq.n	8002ada <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d106      	bne.n	8002b0e <HAL_RCC_OscConfig+0x312>
 8002b00:	4b6f      	ldr	r3, [pc, #444]	; (8002cc0 <HAL_RCC_OscConfig+0x4c4>)
 8002b02:	6a1b      	ldr	r3, [r3, #32]
 8002b04:	4a6e      	ldr	r2, [pc, #440]	; (8002cc0 <HAL_RCC_OscConfig+0x4c4>)
 8002b06:	f043 0301 	orr.w	r3, r3, #1
 8002b0a:	6213      	str	r3, [r2, #32]
 8002b0c:	e02d      	b.n	8002b6a <HAL_RCC_OscConfig+0x36e>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d10c      	bne.n	8002b30 <HAL_RCC_OscConfig+0x334>
 8002b16:	4b6a      	ldr	r3, [pc, #424]	; (8002cc0 <HAL_RCC_OscConfig+0x4c4>)
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	4a69      	ldr	r2, [pc, #420]	; (8002cc0 <HAL_RCC_OscConfig+0x4c4>)
 8002b1c:	f023 0301 	bic.w	r3, r3, #1
 8002b20:	6213      	str	r3, [r2, #32]
 8002b22:	4b67      	ldr	r3, [pc, #412]	; (8002cc0 <HAL_RCC_OscConfig+0x4c4>)
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	4a66      	ldr	r2, [pc, #408]	; (8002cc0 <HAL_RCC_OscConfig+0x4c4>)
 8002b28:	f023 0304 	bic.w	r3, r3, #4
 8002b2c:	6213      	str	r3, [r2, #32]
 8002b2e:	e01c      	b.n	8002b6a <HAL_RCC_OscConfig+0x36e>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	2b05      	cmp	r3, #5
 8002b36:	d10c      	bne.n	8002b52 <HAL_RCC_OscConfig+0x356>
 8002b38:	4b61      	ldr	r3, [pc, #388]	; (8002cc0 <HAL_RCC_OscConfig+0x4c4>)
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	4a60      	ldr	r2, [pc, #384]	; (8002cc0 <HAL_RCC_OscConfig+0x4c4>)
 8002b3e:	f043 0304 	orr.w	r3, r3, #4
 8002b42:	6213      	str	r3, [r2, #32]
 8002b44:	4b5e      	ldr	r3, [pc, #376]	; (8002cc0 <HAL_RCC_OscConfig+0x4c4>)
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	4a5d      	ldr	r2, [pc, #372]	; (8002cc0 <HAL_RCC_OscConfig+0x4c4>)
 8002b4a:	f043 0301 	orr.w	r3, r3, #1
 8002b4e:	6213      	str	r3, [r2, #32]
 8002b50:	e00b      	b.n	8002b6a <HAL_RCC_OscConfig+0x36e>
 8002b52:	4b5b      	ldr	r3, [pc, #364]	; (8002cc0 <HAL_RCC_OscConfig+0x4c4>)
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	4a5a      	ldr	r2, [pc, #360]	; (8002cc0 <HAL_RCC_OscConfig+0x4c4>)
 8002b58:	f023 0301 	bic.w	r3, r3, #1
 8002b5c:	6213      	str	r3, [r2, #32]
 8002b5e:	4b58      	ldr	r3, [pc, #352]	; (8002cc0 <HAL_RCC_OscConfig+0x4c4>)
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	4a57      	ldr	r2, [pc, #348]	; (8002cc0 <HAL_RCC_OscConfig+0x4c4>)
 8002b64:	f023 0304 	bic.w	r3, r3, #4
 8002b68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d015      	beq.n	8002b9e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b72:	f7fe ff63 	bl	8001a3c <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b78:	e00a      	b.n	8002b90 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b7a:	f7fe ff5f 	bl	8001a3c <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e0b1      	b.n	8002cf4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b90:	4b4b      	ldr	r3, [pc, #300]	; (8002cc0 <HAL_RCC_OscConfig+0x4c4>)
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0ee      	beq.n	8002b7a <HAL_RCC_OscConfig+0x37e>
 8002b9c:	e014      	b.n	8002bc8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b9e:	f7fe ff4d 	bl	8001a3c <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ba4:	e00a      	b.n	8002bbc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba6:	f7fe ff49 	bl	8001a3c <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e09b      	b.n	8002cf4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bbc:	4b40      	ldr	r3, [pc, #256]	; (8002cc0 <HAL_RCC_OscConfig+0x4c4>)
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1ee      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bc8:	7dfb      	ldrb	r3, [r7, #23]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d105      	bne.n	8002bda <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bce:	4b3c      	ldr	r3, [pc, #240]	; (8002cc0 <HAL_RCC_OscConfig+0x4c4>)
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	4a3b      	ldr	r2, [pc, #236]	; (8002cc0 <HAL_RCC_OscConfig+0x4c4>)
 8002bd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bd8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f000 8087 	beq.w	8002cf2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002be4:	4b36      	ldr	r3, [pc, #216]	; (8002cc0 <HAL_RCC_OscConfig+0x4c4>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f003 030c 	and.w	r3, r3, #12
 8002bec:	2b08      	cmp	r3, #8
 8002bee:	d061      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	69db      	ldr	r3, [r3, #28]
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d146      	bne.n	8002c86 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bf8:	4b33      	ldr	r3, [pc, #204]	; (8002cc8 <HAL_RCC_OscConfig+0x4cc>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfe:	f7fe ff1d 	bl	8001a3c <HAL_GetTick>
 8002c02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c04:	e008      	b.n	8002c18 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c06:	f7fe ff19 	bl	8001a3c <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e06d      	b.n	8002cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c18:	4b29      	ldr	r3, [pc, #164]	; (8002cc0 <HAL_RCC_OscConfig+0x4c4>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1f0      	bne.n	8002c06 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a1b      	ldr	r3, [r3, #32]
 8002c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c2c:	d108      	bne.n	8002c40 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c2e:	4b24      	ldr	r3, [pc, #144]	; (8002cc0 <HAL_RCC_OscConfig+0x4c4>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	4921      	ldr	r1, [pc, #132]	; (8002cc0 <HAL_RCC_OscConfig+0x4c4>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c40:	4b1f      	ldr	r3, [pc, #124]	; (8002cc0 <HAL_RCC_OscConfig+0x4c4>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a19      	ldr	r1, [r3, #32]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c50:	430b      	orrs	r3, r1
 8002c52:	491b      	ldr	r1, [pc, #108]	; (8002cc0 <HAL_RCC_OscConfig+0x4c4>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c58:	4b1b      	ldr	r3, [pc, #108]	; (8002cc8 <HAL_RCC_OscConfig+0x4cc>)
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c5e:	f7fe feed 	bl	8001a3c <HAL_GetTick>
 8002c62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c64:	e008      	b.n	8002c78 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c66:	f7fe fee9 	bl	8001a3c <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e03d      	b.n	8002cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c78:	4b11      	ldr	r3, [pc, #68]	; (8002cc0 <HAL_RCC_OscConfig+0x4c4>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d0f0      	beq.n	8002c66 <HAL_RCC_OscConfig+0x46a>
 8002c84:	e035      	b.n	8002cf2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c86:	4b10      	ldr	r3, [pc, #64]	; (8002cc8 <HAL_RCC_OscConfig+0x4cc>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8c:	f7fe fed6 	bl	8001a3c <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c94:	f7fe fed2 	bl	8001a3c <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e026      	b.n	8002cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ca6:	4b06      	ldr	r3, [pc, #24]	; (8002cc0 <HAL_RCC_OscConfig+0x4c4>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1f0      	bne.n	8002c94 <HAL_RCC_OscConfig+0x498>
 8002cb2:	e01e      	b.n	8002cf2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	69db      	ldr	r3, [r3, #28]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d107      	bne.n	8002ccc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e019      	b.n	8002cf4 <HAL_RCC_OscConfig+0x4f8>
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	40007000 	.word	0x40007000
 8002cc8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ccc:	4b0b      	ldr	r3, [pc, #44]	; (8002cfc <HAL_RCC_OscConfig+0x500>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d106      	bne.n	8002cee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d001      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3718      	adds	r7, #24
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40021000 	.word	0x40021000

08002d00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e0d0      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d14:	4b6a      	ldr	r3, [pc, #424]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d910      	bls.n	8002d44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d22:	4b67      	ldr	r3, [pc, #412]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f023 0207 	bic.w	r2, r3, #7
 8002d2a:	4965      	ldr	r1, [pc, #404]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d32:	4b63      	ldr	r3, [pc, #396]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d001      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e0b8      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d020      	beq.n	8002d92 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d005      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d5c:	4b59      	ldr	r3, [pc, #356]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	4a58      	ldr	r2, [pc, #352]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d66:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0308 	and.w	r3, r3, #8
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d005      	beq.n	8002d80 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d74:	4b53      	ldr	r3, [pc, #332]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	4a52      	ldr	r2, [pc, #328]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d7e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d80:	4b50      	ldr	r3, [pc, #320]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	494d      	ldr	r1, [pc, #308]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d040      	beq.n	8002e20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d107      	bne.n	8002db6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002da6:	4b47      	ldr	r3, [pc, #284]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d115      	bne.n	8002dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e07f      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d107      	bne.n	8002dce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dbe:	4b41      	ldr	r3, [pc, #260]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d109      	bne.n	8002dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e073      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dce:	4b3d      	ldr	r3, [pc, #244]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e06b      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dde:	4b39      	ldr	r3, [pc, #228]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f023 0203 	bic.w	r2, r3, #3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	4936      	ldr	r1, [pc, #216]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002df0:	f7fe fe24 	bl	8001a3c <HAL_GetTick>
 8002df4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002df6:	e00a      	b.n	8002e0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002df8:	f7fe fe20 	bl	8001a3c <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e053      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e0e:	4b2d      	ldr	r3, [pc, #180]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f003 020c 	and.w	r2, r3, #12
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d1eb      	bne.n	8002df8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e20:	4b27      	ldr	r3, [pc, #156]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0307 	and.w	r3, r3, #7
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d210      	bcs.n	8002e50 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e2e:	4b24      	ldr	r3, [pc, #144]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f023 0207 	bic.w	r2, r3, #7
 8002e36:	4922      	ldr	r1, [pc, #136]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e3e:	4b20      	ldr	r3, [pc, #128]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0307 	and.w	r3, r3, #7
 8002e46:	683a      	ldr	r2, [r7, #0]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d001      	beq.n	8002e50 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e032      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0304 	and.w	r3, r3, #4
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d008      	beq.n	8002e6e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e5c:	4b19      	ldr	r3, [pc, #100]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	4916      	ldr	r1, [pc, #88]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0308 	and.w	r3, r3, #8
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d009      	beq.n	8002e8e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e7a:	4b12      	ldr	r3, [pc, #72]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	490e      	ldr	r1, [pc, #56]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e8e:	f000 f821 	bl	8002ed4 <HAL_RCC_GetSysClockFreq>
 8002e92:	4602      	mov	r2, r0
 8002e94:	4b0b      	ldr	r3, [pc, #44]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	091b      	lsrs	r3, r3, #4
 8002e9a:	f003 030f 	and.w	r3, r3, #15
 8002e9e:	490a      	ldr	r1, [pc, #40]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ea0:	5ccb      	ldrb	r3, [r1, r3]
 8002ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ea6:	4a09      	ldr	r2, [pc, #36]	; (8002ecc <HAL_RCC_ClockConfig+0x1cc>)
 8002ea8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002eaa:	4b09      	ldr	r3, [pc, #36]	; (8002ed0 <HAL_RCC_ClockConfig+0x1d0>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fe fd82 	bl	80019b8 <HAL_InitTick>

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40022000 	.word	0x40022000
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	08008bdc 	.word	0x08008bdc
 8002ecc:	20000000 	.word	0x20000000
 8002ed0:	20000004 	.word	0x20000004

08002ed4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ed4:	b490      	push	{r4, r7}
 8002ed6:	b08a      	sub	sp, #40	; 0x28
 8002ed8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002eda:	4b29      	ldr	r3, [pc, #164]	; (8002f80 <HAL_RCC_GetSysClockFreq+0xac>)
 8002edc:	1d3c      	adds	r4, r7, #4
 8002ede:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ee0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ee4:	f240 2301 	movw	r3, #513	; 0x201
 8002ee8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002eea:	2300      	movs	r3, #0
 8002eec:	61fb      	str	r3, [r7, #28]
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61bb      	str	r3, [r7, #24]
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002efe:	4b21      	ldr	r3, [pc, #132]	; (8002f84 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	f003 030c 	and.w	r3, r3, #12
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	d002      	beq.n	8002f14 <HAL_RCC_GetSysClockFreq+0x40>
 8002f0e:	2b08      	cmp	r3, #8
 8002f10:	d003      	beq.n	8002f1a <HAL_RCC_GetSysClockFreq+0x46>
 8002f12:	e02b      	b.n	8002f6c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f14:	4b1c      	ldr	r3, [pc, #112]	; (8002f88 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f16:	623b      	str	r3, [r7, #32]
      break;
 8002f18:	e02b      	b.n	8002f72 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	0c9b      	lsrs	r3, r3, #18
 8002f1e:	f003 030f 	and.w	r3, r3, #15
 8002f22:	3328      	adds	r3, #40	; 0x28
 8002f24:	443b      	add	r3, r7
 8002f26:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002f2a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d012      	beq.n	8002f5c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f36:	4b13      	ldr	r3, [pc, #76]	; (8002f84 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	0c5b      	lsrs	r3, r3, #17
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	3328      	adds	r3, #40	; 0x28
 8002f42:	443b      	add	r3, r7
 8002f44:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002f48:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	4a0e      	ldr	r2, [pc, #56]	; (8002f88 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f4e:	fb03 f202 	mul.w	r2, r3, r2
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f58:	627b      	str	r3, [r7, #36]	; 0x24
 8002f5a:	e004      	b.n	8002f66 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	4a0b      	ldr	r2, [pc, #44]	; (8002f8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f60:	fb02 f303 	mul.w	r3, r2, r3
 8002f64:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f68:	623b      	str	r3, [r7, #32]
      break;
 8002f6a:	e002      	b.n	8002f72 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f6c:	4b06      	ldr	r3, [pc, #24]	; (8002f88 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f6e:	623b      	str	r3, [r7, #32]
      break;
 8002f70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f72:	6a3b      	ldr	r3, [r7, #32]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3728      	adds	r7, #40	; 0x28
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bc90      	pop	{r4, r7}
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	08005f34 	.word	0x08005f34
 8002f84:	40021000 	.word	0x40021000
 8002f88:	007a1200 	.word	0x007a1200
 8002f8c:	003d0900 	.word	0x003d0900

08002f90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f94:	4b02      	ldr	r3, [pc, #8]	; (8002fa0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f96:	681b      	ldr	r3, [r3, #0]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bc80      	pop	{r7}
 8002f9e:	4770      	bx	lr
 8002fa0:	20000000 	.word	0x20000000

08002fa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fa8:	f7ff fff2 	bl	8002f90 <HAL_RCC_GetHCLKFreq>
 8002fac:	4602      	mov	r2, r0
 8002fae:	4b05      	ldr	r3, [pc, #20]	; (8002fc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	0a1b      	lsrs	r3, r3, #8
 8002fb4:	f003 0307 	and.w	r3, r3, #7
 8002fb8:	4903      	ldr	r1, [pc, #12]	; (8002fc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fba:	5ccb      	ldrb	r3, [r1, r3]
 8002fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	08008bec 	.word	0x08008bec

08002fcc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002fd4:	4b0a      	ldr	r3, [pc, #40]	; (8003000 <RCC_Delay+0x34>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a0a      	ldr	r2, [pc, #40]	; (8003004 <RCC_Delay+0x38>)
 8002fda:	fba2 2303 	umull	r2, r3, r2, r3
 8002fde:	0a5b      	lsrs	r3, r3, #9
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	fb02 f303 	mul.w	r3, r2, r3
 8002fe6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002fe8:	bf00      	nop
  }
  while (Delay --);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	1e5a      	subs	r2, r3, #1
 8002fee:	60fa      	str	r2, [r7, #12]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1f9      	bne.n	8002fe8 <RCC_Delay+0x1c>
}
 8002ff4:	bf00      	nop
 8002ff6:	bf00      	nop
 8002ff8:	3714      	adds	r7, #20
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bc80      	pop	{r7}
 8002ffe:	4770      	bx	lr
 8003000:	20000000 	.word	0x20000000
 8003004:	10624dd3 	.word	0x10624dd3

08003008 <__errno>:
 8003008:	4b01      	ldr	r3, [pc, #4]	; (8003010 <__errno+0x8>)
 800300a:	6818      	ldr	r0, [r3, #0]
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	2000000c 	.word	0x2000000c

08003014 <__libc_init_array>:
 8003014:	b570      	push	{r4, r5, r6, lr}
 8003016:	2600      	movs	r6, #0
 8003018:	4d0c      	ldr	r5, [pc, #48]	; (800304c <__libc_init_array+0x38>)
 800301a:	4c0d      	ldr	r4, [pc, #52]	; (8003050 <__libc_init_array+0x3c>)
 800301c:	1b64      	subs	r4, r4, r5
 800301e:	10a4      	asrs	r4, r4, #2
 8003020:	42a6      	cmp	r6, r4
 8003022:	d109      	bne.n	8003038 <__libc_init_array+0x24>
 8003024:	f002 fefc 	bl	8005e20 <_init>
 8003028:	2600      	movs	r6, #0
 800302a:	4d0a      	ldr	r5, [pc, #40]	; (8003054 <__libc_init_array+0x40>)
 800302c:	4c0a      	ldr	r4, [pc, #40]	; (8003058 <__libc_init_array+0x44>)
 800302e:	1b64      	subs	r4, r4, r5
 8003030:	10a4      	asrs	r4, r4, #2
 8003032:	42a6      	cmp	r6, r4
 8003034:	d105      	bne.n	8003042 <__libc_init_array+0x2e>
 8003036:	bd70      	pop	{r4, r5, r6, pc}
 8003038:	f855 3b04 	ldr.w	r3, [r5], #4
 800303c:	4798      	blx	r3
 800303e:	3601      	adds	r6, #1
 8003040:	e7ee      	b.n	8003020 <__libc_init_array+0xc>
 8003042:	f855 3b04 	ldr.w	r3, [r5], #4
 8003046:	4798      	blx	r3
 8003048:	3601      	adds	r6, #1
 800304a:	e7f2      	b.n	8003032 <__libc_init_array+0x1e>
 800304c:	08008fcc 	.word	0x08008fcc
 8003050:	08008fcc 	.word	0x08008fcc
 8003054:	08008fcc 	.word	0x08008fcc
 8003058:	08008fd0 	.word	0x08008fd0

0800305c <memset>:
 800305c:	4603      	mov	r3, r0
 800305e:	4402      	add	r2, r0
 8003060:	4293      	cmp	r3, r2
 8003062:	d100      	bne.n	8003066 <memset+0xa>
 8003064:	4770      	bx	lr
 8003066:	f803 1b01 	strb.w	r1, [r3], #1
 800306a:	e7f9      	b.n	8003060 <memset+0x4>

0800306c <__cvt>:
 800306c:	2b00      	cmp	r3, #0
 800306e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003072:	461f      	mov	r7, r3
 8003074:	bfbb      	ittet	lt
 8003076:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800307a:	461f      	movlt	r7, r3
 800307c:	2300      	movge	r3, #0
 800307e:	232d      	movlt	r3, #45	; 0x2d
 8003080:	b088      	sub	sp, #32
 8003082:	4614      	mov	r4, r2
 8003084:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003086:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003088:	7013      	strb	r3, [r2, #0]
 800308a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800308c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003090:	f023 0820 	bic.w	r8, r3, #32
 8003094:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003098:	d005      	beq.n	80030a6 <__cvt+0x3a>
 800309a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800309e:	d100      	bne.n	80030a2 <__cvt+0x36>
 80030a0:	3501      	adds	r5, #1
 80030a2:	2302      	movs	r3, #2
 80030a4:	e000      	b.n	80030a8 <__cvt+0x3c>
 80030a6:	2303      	movs	r3, #3
 80030a8:	aa07      	add	r2, sp, #28
 80030aa:	9204      	str	r2, [sp, #16]
 80030ac:	aa06      	add	r2, sp, #24
 80030ae:	e9cd a202 	strd	sl, r2, [sp, #8]
 80030b2:	e9cd 3500 	strd	r3, r5, [sp]
 80030b6:	4622      	mov	r2, r4
 80030b8:	463b      	mov	r3, r7
 80030ba:	f000 fce5 	bl	8003a88 <_dtoa_r>
 80030be:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80030c2:	4606      	mov	r6, r0
 80030c4:	d102      	bne.n	80030cc <__cvt+0x60>
 80030c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80030c8:	07db      	lsls	r3, r3, #31
 80030ca:	d522      	bpl.n	8003112 <__cvt+0xa6>
 80030cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80030d0:	eb06 0905 	add.w	r9, r6, r5
 80030d4:	d110      	bne.n	80030f8 <__cvt+0x8c>
 80030d6:	7833      	ldrb	r3, [r6, #0]
 80030d8:	2b30      	cmp	r3, #48	; 0x30
 80030da:	d10a      	bne.n	80030f2 <__cvt+0x86>
 80030dc:	2200      	movs	r2, #0
 80030de:	2300      	movs	r3, #0
 80030e0:	4620      	mov	r0, r4
 80030e2:	4639      	mov	r1, r7
 80030e4:	f7fd fc60 	bl	80009a8 <__aeabi_dcmpeq>
 80030e8:	b918      	cbnz	r0, 80030f2 <__cvt+0x86>
 80030ea:	f1c5 0501 	rsb	r5, r5, #1
 80030ee:	f8ca 5000 	str.w	r5, [sl]
 80030f2:	f8da 3000 	ldr.w	r3, [sl]
 80030f6:	4499      	add	r9, r3
 80030f8:	2200      	movs	r2, #0
 80030fa:	2300      	movs	r3, #0
 80030fc:	4620      	mov	r0, r4
 80030fe:	4639      	mov	r1, r7
 8003100:	f7fd fc52 	bl	80009a8 <__aeabi_dcmpeq>
 8003104:	b108      	cbz	r0, 800310a <__cvt+0x9e>
 8003106:	f8cd 901c 	str.w	r9, [sp, #28]
 800310a:	2230      	movs	r2, #48	; 0x30
 800310c:	9b07      	ldr	r3, [sp, #28]
 800310e:	454b      	cmp	r3, r9
 8003110:	d307      	bcc.n	8003122 <__cvt+0xb6>
 8003112:	4630      	mov	r0, r6
 8003114:	9b07      	ldr	r3, [sp, #28]
 8003116:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003118:	1b9b      	subs	r3, r3, r6
 800311a:	6013      	str	r3, [r2, #0]
 800311c:	b008      	add	sp, #32
 800311e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003122:	1c59      	adds	r1, r3, #1
 8003124:	9107      	str	r1, [sp, #28]
 8003126:	701a      	strb	r2, [r3, #0]
 8003128:	e7f0      	b.n	800310c <__cvt+0xa0>

0800312a <__exponent>:
 800312a:	4603      	mov	r3, r0
 800312c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800312e:	2900      	cmp	r1, #0
 8003130:	f803 2b02 	strb.w	r2, [r3], #2
 8003134:	bfb6      	itet	lt
 8003136:	222d      	movlt	r2, #45	; 0x2d
 8003138:	222b      	movge	r2, #43	; 0x2b
 800313a:	4249      	neglt	r1, r1
 800313c:	2909      	cmp	r1, #9
 800313e:	7042      	strb	r2, [r0, #1]
 8003140:	dd2b      	ble.n	800319a <__exponent+0x70>
 8003142:	f10d 0407 	add.w	r4, sp, #7
 8003146:	46a4      	mov	ip, r4
 8003148:	270a      	movs	r7, #10
 800314a:	fb91 f6f7 	sdiv	r6, r1, r7
 800314e:	460a      	mov	r2, r1
 8003150:	46a6      	mov	lr, r4
 8003152:	fb07 1516 	mls	r5, r7, r6, r1
 8003156:	2a63      	cmp	r2, #99	; 0x63
 8003158:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800315c:	4631      	mov	r1, r6
 800315e:	f104 34ff 	add.w	r4, r4, #4294967295
 8003162:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003166:	dcf0      	bgt.n	800314a <__exponent+0x20>
 8003168:	3130      	adds	r1, #48	; 0x30
 800316a:	f1ae 0502 	sub.w	r5, lr, #2
 800316e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003172:	4629      	mov	r1, r5
 8003174:	1c44      	adds	r4, r0, #1
 8003176:	4561      	cmp	r1, ip
 8003178:	d30a      	bcc.n	8003190 <__exponent+0x66>
 800317a:	f10d 0209 	add.w	r2, sp, #9
 800317e:	eba2 020e 	sub.w	r2, r2, lr
 8003182:	4565      	cmp	r5, ip
 8003184:	bf88      	it	hi
 8003186:	2200      	movhi	r2, #0
 8003188:	4413      	add	r3, r2
 800318a:	1a18      	subs	r0, r3, r0
 800318c:	b003      	add	sp, #12
 800318e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003190:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003194:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003198:	e7ed      	b.n	8003176 <__exponent+0x4c>
 800319a:	2330      	movs	r3, #48	; 0x30
 800319c:	3130      	adds	r1, #48	; 0x30
 800319e:	7083      	strb	r3, [r0, #2]
 80031a0:	70c1      	strb	r1, [r0, #3]
 80031a2:	1d03      	adds	r3, r0, #4
 80031a4:	e7f1      	b.n	800318a <__exponent+0x60>
	...

080031a8 <_printf_float>:
 80031a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031ac:	b091      	sub	sp, #68	; 0x44
 80031ae:	460c      	mov	r4, r1
 80031b0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80031b4:	4616      	mov	r6, r2
 80031b6:	461f      	mov	r7, r3
 80031b8:	4605      	mov	r5, r0
 80031ba:	f001 fa53 	bl	8004664 <_localeconv_r>
 80031be:	6803      	ldr	r3, [r0, #0]
 80031c0:	4618      	mov	r0, r3
 80031c2:	9309      	str	r3, [sp, #36]	; 0x24
 80031c4:	f7fc ffc4 	bl	8000150 <strlen>
 80031c8:	2300      	movs	r3, #0
 80031ca:	930e      	str	r3, [sp, #56]	; 0x38
 80031cc:	f8d8 3000 	ldr.w	r3, [r8]
 80031d0:	900a      	str	r0, [sp, #40]	; 0x28
 80031d2:	3307      	adds	r3, #7
 80031d4:	f023 0307 	bic.w	r3, r3, #7
 80031d8:	f103 0208 	add.w	r2, r3, #8
 80031dc:	f894 9018 	ldrb.w	r9, [r4, #24]
 80031e0:	f8d4 b000 	ldr.w	fp, [r4]
 80031e4:	f8c8 2000 	str.w	r2, [r8]
 80031e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ec:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80031f0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80031f4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80031f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80031fa:	f04f 32ff 	mov.w	r2, #4294967295
 80031fe:	4640      	mov	r0, r8
 8003200:	4b9c      	ldr	r3, [pc, #624]	; (8003474 <_printf_float+0x2cc>)
 8003202:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003204:	f7fd fc02 	bl	8000a0c <__aeabi_dcmpun>
 8003208:	bb70      	cbnz	r0, 8003268 <_printf_float+0xc0>
 800320a:	f04f 32ff 	mov.w	r2, #4294967295
 800320e:	4640      	mov	r0, r8
 8003210:	4b98      	ldr	r3, [pc, #608]	; (8003474 <_printf_float+0x2cc>)
 8003212:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003214:	f7fd fbdc 	bl	80009d0 <__aeabi_dcmple>
 8003218:	bb30      	cbnz	r0, 8003268 <_printf_float+0xc0>
 800321a:	2200      	movs	r2, #0
 800321c:	2300      	movs	r3, #0
 800321e:	4640      	mov	r0, r8
 8003220:	4651      	mov	r1, sl
 8003222:	f7fd fbcb 	bl	80009bc <__aeabi_dcmplt>
 8003226:	b110      	cbz	r0, 800322e <_printf_float+0x86>
 8003228:	232d      	movs	r3, #45	; 0x2d
 800322a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800322e:	4b92      	ldr	r3, [pc, #584]	; (8003478 <_printf_float+0x2d0>)
 8003230:	4892      	ldr	r0, [pc, #584]	; (800347c <_printf_float+0x2d4>)
 8003232:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003236:	bf94      	ite	ls
 8003238:	4698      	movls	r8, r3
 800323a:	4680      	movhi	r8, r0
 800323c:	2303      	movs	r3, #3
 800323e:	f04f 0a00 	mov.w	sl, #0
 8003242:	6123      	str	r3, [r4, #16]
 8003244:	f02b 0304 	bic.w	r3, fp, #4
 8003248:	6023      	str	r3, [r4, #0]
 800324a:	4633      	mov	r3, r6
 800324c:	4621      	mov	r1, r4
 800324e:	4628      	mov	r0, r5
 8003250:	9700      	str	r7, [sp, #0]
 8003252:	aa0f      	add	r2, sp, #60	; 0x3c
 8003254:	f000 f9d4 	bl	8003600 <_printf_common>
 8003258:	3001      	adds	r0, #1
 800325a:	f040 8090 	bne.w	800337e <_printf_float+0x1d6>
 800325e:	f04f 30ff 	mov.w	r0, #4294967295
 8003262:	b011      	add	sp, #68	; 0x44
 8003264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003268:	4642      	mov	r2, r8
 800326a:	4653      	mov	r3, sl
 800326c:	4640      	mov	r0, r8
 800326e:	4651      	mov	r1, sl
 8003270:	f7fd fbcc 	bl	8000a0c <__aeabi_dcmpun>
 8003274:	b148      	cbz	r0, 800328a <_printf_float+0xe2>
 8003276:	f1ba 0f00 	cmp.w	sl, #0
 800327a:	bfb8      	it	lt
 800327c:	232d      	movlt	r3, #45	; 0x2d
 800327e:	4880      	ldr	r0, [pc, #512]	; (8003480 <_printf_float+0x2d8>)
 8003280:	bfb8      	it	lt
 8003282:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003286:	4b7f      	ldr	r3, [pc, #508]	; (8003484 <_printf_float+0x2dc>)
 8003288:	e7d3      	b.n	8003232 <_printf_float+0x8a>
 800328a:	6863      	ldr	r3, [r4, #4]
 800328c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003290:	1c5a      	adds	r2, r3, #1
 8003292:	d142      	bne.n	800331a <_printf_float+0x172>
 8003294:	2306      	movs	r3, #6
 8003296:	6063      	str	r3, [r4, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	9206      	str	r2, [sp, #24]
 800329c:	aa0e      	add	r2, sp, #56	; 0x38
 800329e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80032a2:	aa0d      	add	r2, sp, #52	; 0x34
 80032a4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80032a8:	9203      	str	r2, [sp, #12]
 80032aa:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80032ae:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80032b2:	6023      	str	r3, [r4, #0]
 80032b4:	6863      	ldr	r3, [r4, #4]
 80032b6:	4642      	mov	r2, r8
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	4628      	mov	r0, r5
 80032bc:	4653      	mov	r3, sl
 80032be:	910b      	str	r1, [sp, #44]	; 0x2c
 80032c0:	f7ff fed4 	bl	800306c <__cvt>
 80032c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80032c6:	4680      	mov	r8, r0
 80032c8:	2947      	cmp	r1, #71	; 0x47
 80032ca:	990d      	ldr	r1, [sp, #52]	; 0x34
 80032cc:	d108      	bne.n	80032e0 <_printf_float+0x138>
 80032ce:	1cc8      	adds	r0, r1, #3
 80032d0:	db02      	blt.n	80032d8 <_printf_float+0x130>
 80032d2:	6863      	ldr	r3, [r4, #4]
 80032d4:	4299      	cmp	r1, r3
 80032d6:	dd40      	ble.n	800335a <_printf_float+0x1b2>
 80032d8:	f1a9 0902 	sub.w	r9, r9, #2
 80032dc:	fa5f f989 	uxtb.w	r9, r9
 80032e0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80032e4:	d81f      	bhi.n	8003326 <_printf_float+0x17e>
 80032e6:	464a      	mov	r2, r9
 80032e8:	3901      	subs	r1, #1
 80032ea:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80032ee:	910d      	str	r1, [sp, #52]	; 0x34
 80032f0:	f7ff ff1b 	bl	800312a <__exponent>
 80032f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80032f6:	4682      	mov	sl, r0
 80032f8:	1813      	adds	r3, r2, r0
 80032fa:	2a01      	cmp	r2, #1
 80032fc:	6123      	str	r3, [r4, #16]
 80032fe:	dc02      	bgt.n	8003306 <_printf_float+0x15e>
 8003300:	6822      	ldr	r2, [r4, #0]
 8003302:	07d2      	lsls	r2, r2, #31
 8003304:	d501      	bpl.n	800330a <_printf_float+0x162>
 8003306:	3301      	adds	r3, #1
 8003308:	6123      	str	r3, [r4, #16]
 800330a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800330e:	2b00      	cmp	r3, #0
 8003310:	d09b      	beq.n	800324a <_printf_float+0xa2>
 8003312:	232d      	movs	r3, #45	; 0x2d
 8003314:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003318:	e797      	b.n	800324a <_printf_float+0xa2>
 800331a:	2947      	cmp	r1, #71	; 0x47
 800331c:	d1bc      	bne.n	8003298 <_printf_float+0xf0>
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1ba      	bne.n	8003298 <_printf_float+0xf0>
 8003322:	2301      	movs	r3, #1
 8003324:	e7b7      	b.n	8003296 <_printf_float+0xee>
 8003326:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800332a:	d118      	bne.n	800335e <_printf_float+0x1b6>
 800332c:	2900      	cmp	r1, #0
 800332e:	6863      	ldr	r3, [r4, #4]
 8003330:	dd0b      	ble.n	800334a <_printf_float+0x1a2>
 8003332:	6121      	str	r1, [r4, #16]
 8003334:	b913      	cbnz	r3, 800333c <_printf_float+0x194>
 8003336:	6822      	ldr	r2, [r4, #0]
 8003338:	07d0      	lsls	r0, r2, #31
 800333a:	d502      	bpl.n	8003342 <_printf_float+0x19a>
 800333c:	3301      	adds	r3, #1
 800333e:	440b      	add	r3, r1
 8003340:	6123      	str	r3, [r4, #16]
 8003342:	f04f 0a00 	mov.w	sl, #0
 8003346:	65a1      	str	r1, [r4, #88]	; 0x58
 8003348:	e7df      	b.n	800330a <_printf_float+0x162>
 800334a:	b913      	cbnz	r3, 8003352 <_printf_float+0x1aa>
 800334c:	6822      	ldr	r2, [r4, #0]
 800334e:	07d2      	lsls	r2, r2, #31
 8003350:	d501      	bpl.n	8003356 <_printf_float+0x1ae>
 8003352:	3302      	adds	r3, #2
 8003354:	e7f4      	b.n	8003340 <_printf_float+0x198>
 8003356:	2301      	movs	r3, #1
 8003358:	e7f2      	b.n	8003340 <_printf_float+0x198>
 800335a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800335e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003360:	4299      	cmp	r1, r3
 8003362:	db05      	blt.n	8003370 <_printf_float+0x1c8>
 8003364:	6823      	ldr	r3, [r4, #0]
 8003366:	6121      	str	r1, [r4, #16]
 8003368:	07d8      	lsls	r0, r3, #31
 800336a:	d5ea      	bpl.n	8003342 <_printf_float+0x19a>
 800336c:	1c4b      	adds	r3, r1, #1
 800336e:	e7e7      	b.n	8003340 <_printf_float+0x198>
 8003370:	2900      	cmp	r1, #0
 8003372:	bfcc      	ite	gt
 8003374:	2201      	movgt	r2, #1
 8003376:	f1c1 0202 	rsble	r2, r1, #2
 800337a:	4413      	add	r3, r2
 800337c:	e7e0      	b.n	8003340 <_printf_float+0x198>
 800337e:	6823      	ldr	r3, [r4, #0]
 8003380:	055a      	lsls	r2, r3, #21
 8003382:	d407      	bmi.n	8003394 <_printf_float+0x1ec>
 8003384:	6923      	ldr	r3, [r4, #16]
 8003386:	4642      	mov	r2, r8
 8003388:	4631      	mov	r1, r6
 800338a:	4628      	mov	r0, r5
 800338c:	47b8      	blx	r7
 800338e:	3001      	adds	r0, #1
 8003390:	d12b      	bne.n	80033ea <_printf_float+0x242>
 8003392:	e764      	b.n	800325e <_printf_float+0xb6>
 8003394:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003398:	f240 80dd 	bls.w	8003556 <_printf_float+0x3ae>
 800339c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80033a0:	2200      	movs	r2, #0
 80033a2:	2300      	movs	r3, #0
 80033a4:	f7fd fb00 	bl	80009a8 <__aeabi_dcmpeq>
 80033a8:	2800      	cmp	r0, #0
 80033aa:	d033      	beq.n	8003414 <_printf_float+0x26c>
 80033ac:	2301      	movs	r3, #1
 80033ae:	4631      	mov	r1, r6
 80033b0:	4628      	mov	r0, r5
 80033b2:	4a35      	ldr	r2, [pc, #212]	; (8003488 <_printf_float+0x2e0>)
 80033b4:	47b8      	blx	r7
 80033b6:	3001      	adds	r0, #1
 80033b8:	f43f af51 	beq.w	800325e <_printf_float+0xb6>
 80033bc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80033c0:	429a      	cmp	r2, r3
 80033c2:	db02      	blt.n	80033ca <_printf_float+0x222>
 80033c4:	6823      	ldr	r3, [r4, #0]
 80033c6:	07d8      	lsls	r0, r3, #31
 80033c8:	d50f      	bpl.n	80033ea <_printf_float+0x242>
 80033ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80033ce:	4631      	mov	r1, r6
 80033d0:	4628      	mov	r0, r5
 80033d2:	47b8      	blx	r7
 80033d4:	3001      	adds	r0, #1
 80033d6:	f43f af42 	beq.w	800325e <_printf_float+0xb6>
 80033da:	f04f 0800 	mov.w	r8, #0
 80033de:	f104 091a 	add.w	r9, r4, #26
 80033e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80033e4:	3b01      	subs	r3, #1
 80033e6:	4543      	cmp	r3, r8
 80033e8:	dc09      	bgt.n	80033fe <_printf_float+0x256>
 80033ea:	6823      	ldr	r3, [r4, #0]
 80033ec:	079b      	lsls	r3, r3, #30
 80033ee:	f100 8102 	bmi.w	80035f6 <_printf_float+0x44e>
 80033f2:	68e0      	ldr	r0, [r4, #12]
 80033f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80033f6:	4298      	cmp	r0, r3
 80033f8:	bfb8      	it	lt
 80033fa:	4618      	movlt	r0, r3
 80033fc:	e731      	b.n	8003262 <_printf_float+0xba>
 80033fe:	2301      	movs	r3, #1
 8003400:	464a      	mov	r2, r9
 8003402:	4631      	mov	r1, r6
 8003404:	4628      	mov	r0, r5
 8003406:	47b8      	blx	r7
 8003408:	3001      	adds	r0, #1
 800340a:	f43f af28 	beq.w	800325e <_printf_float+0xb6>
 800340e:	f108 0801 	add.w	r8, r8, #1
 8003412:	e7e6      	b.n	80033e2 <_printf_float+0x23a>
 8003414:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003416:	2b00      	cmp	r3, #0
 8003418:	dc38      	bgt.n	800348c <_printf_float+0x2e4>
 800341a:	2301      	movs	r3, #1
 800341c:	4631      	mov	r1, r6
 800341e:	4628      	mov	r0, r5
 8003420:	4a19      	ldr	r2, [pc, #100]	; (8003488 <_printf_float+0x2e0>)
 8003422:	47b8      	blx	r7
 8003424:	3001      	adds	r0, #1
 8003426:	f43f af1a 	beq.w	800325e <_printf_float+0xb6>
 800342a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800342e:	4313      	orrs	r3, r2
 8003430:	d102      	bne.n	8003438 <_printf_float+0x290>
 8003432:	6823      	ldr	r3, [r4, #0]
 8003434:	07d9      	lsls	r1, r3, #31
 8003436:	d5d8      	bpl.n	80033ea <_printf_float+0x242>
 8003438:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800343c:	4631      	mov	r1, r6
 800343e:	4628      	mov	r0, r5
 8003440:	47b8      	blx	r7
 8003442:	3001      	adds	r0, #1
 8003444:	f43f af0b 	beq.w	800325e <_printf_float+0xb6>
 8003448:	f04f 0900 	mov.w	r9, #0
 800344c:	f104 0a1a 	add.w	sl, r4, #26
 8003450:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003452:	425b      	negs	r3, r3
 8003454:	454b      	cmp	r3, r9
 8003456:	dc01      	bgt.n	800345c <_printf_float+0x2b4>
 8003458:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800345a:	e794      	b.n	8003386 <_printf_float+0x1de>
 800345c:	2301      	movs	r3, #1
 800345e:	4652      	mov	r2, sl
 8003460:	4631      	mov	r1, r6
 8003462:	4628      	mov	r0, r5
 8003464:	47b8      	blx	r7
 8003466:	3001      	adds	r0, #1
 8003468:	f43f aef9 	beq.w	800325e <_printf_float+0xb6>
 800346c:	f109 0901 	add.w	r9, r9, #1
 8003470:	e7ee      	b.n	8003450 <_printf_float+0x2a8>
 8003472:	bf00      	nop
 8003474:	7fefffff 	.word	0x7fefffff
 8003478:	08008bf8 	.word	0x08008bf8
 800347c:	08008bfc 	.word	0x08008bfc
 8003480:	08008c04 	.word	0x08008c04
 8003484:	08008c00 	.word	0x08008c00
 8003488:	08008c08 	.word	0x08008c08
 800348c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800348e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003490:	429a      	cmp	r2, r3
 8003492:	bfa8      	it	ge
 8003494:	461a      	movge	r2, r3
 8003496:	2a00      	cmp	r2, #0
 8003498:	4691      	mov	r9, r2
 800349a:	dc37      	bgt.n	800350c <_printf_float+0x364>
 800349c:	f04f 0b00 	mov.w	fp, #0
 80034a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80034a4:	f104 021a 	add.w	r2, r4, #26
 80034a8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80034ac:	ebaa 0309 	sub.w	r3, sl, r9
 80034b0:	455b      	cmp	r3, fp
 80034b2:	dc33      	bgt.n	800351c <_printf_float+0x374>
 80034b4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80034b8:	429a      	cmp	r2, r3
 80034ba:	db3b      	blt.n	8003534 <_printf_float+0x38c>
 80034bc:	6823      	ldr	r3, [r4, #0]
 80034be:	07da      	lsls	r2, r3, #31
 80034c0:	d438      	bmi.n	8003534 <_printf_float+0x38c>
 80034c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80034c4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80034c6:	eba3 020a 	sub.w	r2, r3, sl
 80034ca:	eba3 0901 	sub.w	r9, r3, r1
 80034ce:	4591      	cmp	r9, r2
 80034d0:	bfa8      	it	ge
 80034d2:	4691      	movge	r9, r2
 80034d4:	f1b9 0f00 	cmp.w	r9, #0
 80034d8:	dc34      	bgt.n	8003544 <_printf_float+0x39c>
 80034da:	f04f 0800 	mov.w	r8, #0
 80034de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80034e2:	f104 0a1a 	add.w	sl, r4, #26
 80034e6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80034ea:	1a9b      	subs	r3, r3, r2
 80034ec:	eba3 0309 	sub.w	r3, r3, r9
 80034f0:	4543      	cmp	r3, r8
 80034f2:	f77f af7a 	ble.w	80033ea <_printf_float+0x242>
 80034f6:	2301      	movs	r3, #1
 80034f8:	4652      	mov	r2, sl
 80034fa:	4631      	mov	r1, r6
 80034fc:	4628      	mov	r0, r5
 80034fe:	47b8      	blx	r7
 8003500:	3001      	adds	r0, #1
 8003502:	f43f aeac 	beq.w	800325e <_printf_float+0xb6>
 8003506:	f108 0801 	add.w	r8, r8, #1
 800350a:	e7ec      	b.n	80034e6 <_printf_float+0x33e>
 800350c:	4613      	mov	r3, r2
 800350e:	4631      	mov	r1, r6
 8003510:	4642      	mov	r2, r8
 8003512:	4628      	mov	r0, r5
 8003514:	47b8      	blx	r7
 8003516:	3001      	adds	r0, #1
 8003518:	d1c0      	bne.n	800349c <_printf_float+0x2f4>
 800351a:	e6a0      	b.n	800325e <_printf_float+0xb6>
 800351c:	2301      	movs	r3, #1
 800351e:	4631      	mov	r1, r6
 8003520:	4628      	mov	r0, r5
 8003522:	920b      	str	r2, [sp, #44]	; 0x2c
 8003524:	47b8      	blx	r7
 8003526:	3001      	adds	r0, #1
 8003528:	f43f ae99 	beq.w	800325e <_printf_float+0xb6>
 800352c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800352e:	f10b 0b01 	add.w	fp, fp, #1
 8003532:	e7b9      	b.n	80034a8 <_printf_float+0x300>
 8003534:	4631      	mov	r1, r6
 8003536:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800353a:	4628      	mov	r0, r5
 800353c:	47b8      	blx	r7
 800353e:	3001      	adds	r0, #1
 8003540:	d1bf      	bne.n	80034c2 <_printf_float+0x31a>
 8003542:	e68c      	b.n	800325e <_printf_float+0xb6>
 8003544:	464b      	mov	r3, r9
 8003546:	4631      	mov	r1, r6
 8003548:	4628      	mov	r0, r5
 800354a:	eb08 020a 	add.w	r2, r8, sl
 800354e:	47b8      	blx	r7
 8003550:	3001      	adds	r0, #1
 8003552:	d1c2      	bne.n	80034da <_printf_float+0x332>
 8003554:	e683      	b.n	800325e <_printf_float+0xb6>
 8003556:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003558:	2a01      	cmp	r2, #1
 800355a:	dc01      	bgt.n	8003560 <_printf_float+0x3b8>
 800355c:	07db      	lsls	r3, r3, #31
 800355e:	d537      	bpl.n	80035d0 <_printf_float+0x428>
 8003560:	2301      	movs	r3, #1
 8003562:	4642      	mov	r2, r8
 8003564:	4631      	mov	r1, r6
 8003566:	4628      	mov	r0, r5
 8003568:	47b8      	blx	r7
 800356a:	3001      	adds	r0, #1
 800356c:	f43f ae77 	beq.w	800325e <_printf_float+0xb6>
 8003570:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003574:	4631      	mov	r1, r6
 8003576:	4628      	mov	r0, r5
 8003578:	47b8      	blx	r7
 800357a:	3001      	adds	r0, #1
 800357c:	f43f ae6f 	beq.w	800325e <_printf_float+0xb6>
 8003580:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003584:	2200      	movs	r2, #0
 8003586:	2300      	movs	r3, #0
 8003588:	f7fd fa0e 	bl	80009a8 <__aeabi_dcmpeq>
 800358c:	b9d8      	cbnz	r0, 80035c6 <_printf_float+0x41e>
 800358e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003590:	f108 0201 	add.w	r2, r8, #1
 8003594:	3b01      	subs	r3, #1
 8003596:	4631      	mov	r1, r6
 8003598:	4628      	mov	r0, r5
 800359a:	47b8      	blx	r7
 800359c:	3001      	adds	r0, #1
 800359e:	d10e      	bne.n	80035be <_printf_float+0x416>
 80035a0:	e65d      	b.n	800325e <_printf_float+0xb6>
 80035a2:	2301      	movs	r3, #1
 80035a4:	464a      	mov	r2, r9
 80035a6:	4631      	mov	r1, r6
 80035a8:	4628      	mov	r0, r5
 80035aa:	47b8      	blx	r7
 80035ac:	3001      	adds	r0, #1
 80035ae:	f43f ae56 	beq.w	800325e <_printf_float+0xb6>
 80035b2:	f108 0801 	add.w	r8, r8, #1
 80035b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80035b8:	3b01      	subs	r3, #1
 80035ba:	4543      	cmp	r3, r8
 80035bc:	dcf1      	bgt.n	80035a2 <_printf_float+0x3fa>
 80035be:	4653      	mov	r3, sl
 80035c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80035c4:	e6e0      	b.n	8003388 <_printf_float+0x1e0>
 80035c6:	f04f 0800 	mov.w	r8, #0
 80035ca:	f104 091a 	add.w	r9, r4, #26
 80035ce:	e7f2      	b.n	80035b6 <_printf_float+0x40e>
 80035d0:	2301      	movs	r3, #1
 80035d2:	4642      	mov	r2, r8
 80035d4:	e7df      	b.n	8003596 <_printf_float+0x3ee>
 80035d6:	2301      	movs	r3, #1
 80035d8:	464a      	mov	r2, r9
 80035da:	4631      	mov	r1, r6
 80035dc:	4628      	mov	r0, r5
 80035de:	47b8      	blx	r7
 80035e0:	3001      	adds	r0, #1
 80035e2:	f43f ae3c 	beq.w	800325e <_printf_float+0xb6>
 80035e6:	f108 0801 	add.w	r8, r8, #1
 80035ea:	68e3      	ldr	r3, [r4, #12]
 80035ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80035ee:	1a5b      	subs	r3, r3, r1
 80035f0:	4543      	cmp	r3, r8
 80035f2:	dcf0      	bgt.n	80035d6 <_printf_float+0x42e>
 80035f4:	e6fd      	b.n	80033f2 <_printf_float+0x24a>
 80035f6:	f04f 0800 	mov.w	r8, #0
 80035fa:	f104 0919 	add.w	r9, r4, #25
 80035fe:	e7f4      	b.n	80035ea <_printf_float+0x442>

08003600 <_printf_common>:
 8003600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003604:	4616      	mov	r6, r2
 8003606:	4699      	mov	r9, r3
 8003608:	688a      	ldr	r2, [r1, #8]
 800360a:	690b      	ldr	r3, [r1, #16]
 800360c:	4607      	mov	r7, r0
 800360e:	4293      	cmp	r3, r2
 8003610:	bfb8      	it	lt
 8003612:	4613      	movlt	r3, r2
 8003614:	6033      	str	r3, [r6, #0]
 8003616:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800361a:	460c      	mov	r4, r1
 800361c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003620:	b10a      	cbz	r2, 8003626 <_printf_common+0x26>
 8003622:	3301      	adds	r3, #1
 8003624:	6033      	str	r3, [r6, #0]
 8003626:	6823      	ldr	r3, [r4, #0]
 8003628:	0699      	lsls	r1, r3, #26
 800362a:	bf42      	ittt	mi
 800362c:	6833      	ldrmi	r3, [r6, #0]
 800362e:	3302      	addmi	r3, #2
 8003630:	6033      	strmi	r3, [r6, #0]
 8003632:	6825      	ldr	r5, [r4, #0]
 8003634:	f015 0506 	ands.w	r5, r5, #6
 8003638:	d106      	bne.n	8003648 <_printf_common+0x48>
 800363a:	f104 0a19 	add.w	sl, r4, #25
 800363e:	68e3      	ldr	r3, [r4, #12]
 8003640:	6832      	ldr	r2, [r6, #0]
 8003642:	1a9b      	subs	r3, r3, r2
 8003644:	42ab      	cmp	r3, r5
 8003646:	dc28      	bgt.n	800369a <_printf_common+0x9a>
 8003648:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800364c:	1e13      	subs	r3, r2, #0
 800364e:	6822      	ldr	r2, [r4, #0]
 8003650:	bf18      	it	ne
 8003652:	2301      	movne	r3, #1
 8003654:	0692      	lsls	r2, r2, #26
 8003656:	d42d      	bmi.n	80036b4 <_printf_common+0xb4>
 8003658:	4649      	mov	r1, r9
 800365a:	4638      	mov	r0, r7
 800365c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003660:	47c0      	blx	r8
 8003662:	3001      	adds	r0, #1
 8003664:	d020      	beq.n	80036a8 <_printf_common+0xa8>
 8003666:	6823      	ldr	r3, [r4, #0]
 8003668:	68e5      	ldr	r5, [r4, #12]
 800366a:	f003 0306 	and.w	r3, r3, #6
 800366e:	2b04      	cmp	r3, #4
 8003670:	bf18      	it	ne
 8003672:	2500      	movne	r5, #0
 8003674:	6832      	ldr	r2, [r6, #0]
 8003676:	f04f 0600 	mov.w	r6, #0
 800367a:	68a3      	ldr	r3, [r4, #8]
 800367c:	bf08      	it	eq
 800367e:	1aad      	subeq	r5, r5, r2
 8003680:	6922      	ldr	r2, [r4, #16]
 8003682:	bf08      	it	eq
 8003684:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003688:	4293      	cmp	r3, r2
 800368a:	bfc4      	itt	gt
 800368c:	1a9b      	subgt	r3, r3, r2
 800368e:	18ed      	addgt	r5, r5, r3
 8003690:	341a      	adds	r4, #26
 8003692:	42b5      	cmp	r5, r6
 8003694:	d11a      	bne.n	80036cc <_printf_common+0xcc>
 8003696:	2000      	movs	r0, #0
 8003698:	e008      	b.n	80036ac <_printf_common+0xac>
 800369a:	2301      	movs	r3, #1
 800369c:	4652      	mov	r2, sl
 800369e:	4649      	mov	r1, r9
 80036a0:	4638      	mov	r0, r7
 80036a2:	47c0      	blx	r8
 80036a4:	3001      	adds	r0, #1
 80036a6:	d103      	bne.n	80036b0 <_printf_common+0xb0>
 80036a8:	f04f 30ff 	mov.w	r0, #4294967295
 80036ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036b0:	3501      	adds	r5, #1
 80036b2:	e7c4      	b.n	800363e <_printf_common+0x3e>
 80036b4:	2030      	movs	r0, #48	; 0x30
 80036b6:	18e1      	adds	r1, r4, r3
 80036b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80036bc:	1c5a      	adds	r2, r3, #1
 80036be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80036c2:	4422      	add	r2, r4
 80036c4:	3302      	adds	r3, #2
 80036c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80036ca:	e7c5      	b.n	8003658 <_printf_common+0x58>
 80036cc:	2301      	movs	r3, #1
 80036ce:	4622      	mov	r2, r4
 80036d0:	4649      	mov	r1, r9
 80036d2:	4638      	mov	r0, r7
 80036d4:	47c0      	blx	r8
 80036d6:	3001      	adds	r0, #1
 80036d8:	d0e6      	beq.n	80036a8 <_printf_common+0xa8>
 80036da:	3601      	adds	r6, #1
 80036dc:	e7d9      	b.n	8003692 <_printf_common+0x92>
	...

080036e0 <_printf_i>:
 80036e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80036e4:	7e0f      	ldrb	r7, [r1, #24]
 80036e6:	4691      	mov	r9, r2
 80036e8:	2f78      	cmp	r7, #120	; 0x78
 80036ea:	4680      	mov	r8, r0
 80036ec:	460c      	mov	r4, r1
 80036ee:	469a      	mov	sl, r3
 80036f0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80036f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80036f6:	d807      	bhi.n	8003708 <_printf_i+0x28>
 80036f8:	2f62      	cmp	r7, #98	; 0x62
 80036fa:	d80a      	bhi.n	8003712 <_printf_i+0x32>
 80036fc:	2f00      	cmp	r7, #0
 80036fe:	f000 80d9 	beq.w	80038b4 <_printf_i+0x1d4>
 8003702:	2f58      	cmp	r7, #88	; 0x58
 8003704:	f000 80a4 	beq.w	8003850 <_printf_i+0x170>
 8003708:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800370c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003710:	e03a      	b.n	8003788 <_printf_i+0xa8>
 8003712:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003716:	2b15      	cmp	r3, #21
 8003718:	d8f6      	bhi.n	8003708 <_printf_i+0x28>
 800371a:	a101      	add	r1, pc, #4	; (adr r1, 8003720 <_printf_i+0x40>)
 800371c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003720:	08003779 	.word	0x08003779
 8003724:	0800378d 	.word	0x0800378d
 8003728:	08003709 	.word	0x08003709
 800372c:	08003709 	.word	0x08003709
 8003730:	08003709 	.word	0x08003709
 8003734:	08003709 	.word	0x08003709
 8003738:	0800378d 	.word	0x0800378d
 800373c:	08003709 	.word	0x08003709
 8003740:	08003709 	.word	0x08003709
 8003744:	08003709 	.word	0x08003709
 8003748:	08003709 	.word	0x08003709
 800374c:	0800389b 	.word	0x0800389b
 8003750:	080037bd 	.word	0x080037bd
 8003754:	0800387d 	.word	0x0800387d
 8003758:	08003709 	.word	0x08003709
 800375c:	08003709 	.word	0x08003709
 8003760:	080038bd 	.word	0x080038bd
 8003764:	08003709 	.word	0x08003709
 8003768:	080037bd 	.word	0x080037bd
 800376c:	08003709 	.word	0x08003709
 8003770:	08003709 	.word	0x08003709
 8003774:	08003885 	.word	0x08003885
 8003778:	682b      	ldr	r3, [r5, #0]
 800377a:	1d1a      	adds	r2, r3, #4
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	602a      	str	r2, [r5, #0]
 8003780:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003784:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003788:	2301      	movs	r3, #1
 800378a:	e0a4      	b.n	80038d6 <_printf_i+0x1f6>
 800378c:	6820      	ldr	r0, [r4, #0]
 800378e:	6829      	ldr	r1, [r5, #0]
 8003790:	0606      	lsls	r6, r0, #24
 8003792:	f101 0304 	add.w	r3, r1, #4
 8003796:	d50a      	bpl.n	80037ae <_printf_i+0xce>
 8003798:	680e      	ldr	r6, [r1, #0]
 800379a:	602b      	str	r3, [r5, #0]
 800379c:	2e00      	cmp	r6, #0
 800379e:	da03      	bge.n	80037a8 <_printf_i+0xc8>
 80037a0:	232d      	movs	r3, #45	; 0x2d
 80037a2:	4276      	negs	r6, r6
 80037a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037a8:	230a      	movs	r3, #10
 80037aa:	485e      	ldr	r0, [pc, #376]	; (8003924 <_printf_i+0x244>)
 80037ac:	e019      	b.n	80037e2 <_printf_i+0x102>
 80037ae:	680e      	ldr	r6, [r1, #0]
 80037b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80037b4:	602b      	str	r3, [r5, #0]
 80037b6:	bf18      	it	ne
 80037b8:	b236      	sxthne	r6, r6
 80037ba:	e7ef      	b.n	800379c <_printf_i+0xbc>
 80037bc:	682b      	ldr	r3, [r5, #0]
 80037be:	6820      	ldr	r0, [r4, #0]
 80037c0:	1d19      	adds	r1, r3, #4
 80037c2:	6029      	str	r1, [r5, #0]
 80037c4:	0601      	lsls	r1, r0, #24
 80037c6:	d501      	bpl.n	80037cc <_printf_i+0xec>
 80037c8:	681e      	ldr	r6, [r3, #0]
 80037ca:	e002      	b.n	80037d2 <_printf_i+0xf2>
 80037cc:	0646      	lsls	r6, r0, #25
 80037ce:	d5fb      	bpl.n	80037c8 <_printf_i+0xe8>
 80037d0:	881e      	ldrh	r6, [r3, #0]
 80037d2:	2f6f      	cmp	r7, #111	; 0x6f
 80037d4:	bf0c      	ite	eq
 80037d6:	2308      	moveq	r3, #8
 80037d8:	230a      	movne	r3, #10
 80037da:	4852      	ldr	r0, [pc, #328]	; (8003924 <_printf_i+0x244>)
 80037dc:	2100      	movs	r1, #0
 80037de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80037e2:	6865      	ldr	r5, [r4, #4]
 80037e4:	2d00      	cmp	r5, #0
 80037e6:	bfa8      	it	ge
 80037e8:	6821      	ldrge	r1, [r4, #0]
 80037ea:	60a5      	str	r5, [r4, #8]
 80037ec:	bfa4      	itt	ge
 80037ee:	f021 0104 	bicge.w	r1, r1, #4
 80037f2:	6021      	strge	r1, [r4, #0]
 80037f4:	b90e      	cbnz	r6, 80037fa <_printf_i+0x11a>
 80037f6:	2d00      	cmp	r5, #0
 80037f8:	d04d      	beq.n	8003896 <_printf_i+0x1b6>
 80037fa:	4615      	mov	r5, r2
 80037fc:	fbb6 f1f3 	udiv	r1, r6, r3
 8003800:	fb03 6711 	mls	r7, r3, r1, r6
 8003804:	5dc7      	ldrb	r7, [r0, r7]
 8003806:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800380a:	4637      	mov	r7, r6
 800380c:	42bb      	cmp	r3, r7
 800380e:	460e      	mov	r6, r1
 8003810:	d9f4      	bls.n	80037fc <_printf_i+0x11c>
 8003812:	2b08      	cmp	r3, #8
 8003814:	d10b      	bne.n	800382e <_printf_i+0x14e>
 8003816:	6823      	ldr	r3, [r4, #0]
 8003818:	07de      	lsls	r6, r3, #31
 800381a:	d508      	bpl.n	800382e <_printf_i+0x14e>
 800381c:	6923      	ldr	r3, [r4, #16]
 800381e:	6861      	ldr	r1, [r4, #4]
 8003820:	4299      	cmp	r1, r3
 8003822:	bfde      	ittt	le
 8003824:	2330      	movle	r3, #48	; 0x30
 8003826:	f805 3c01 	strble.w	r3, [r5, #-1]
 800382a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800382e:	1b52      	subs	r2, r2, r5
 8003830:	6122      	str	r2, [r4, #16]
 8003832:	464b      	mov	r3, r9
 8003834:	4621      	mov	r1, r4
 8003836:	4640      	mov	r0, r8
 8003838:	f8cd a000 	str.w	sl, [sp]
 800383c:	aa03      	add	r2, sp, #12
 800383e:	f7ff fedf 	bl	8003600 <_printf_common>
 8003842:	3001      	adds	r0, #1
 8003844:	d14c      	bne.n	80038e0 <_printf_i+0x200>
 8003846:	f04f 30ff 	mov.w	r0, #4294967295
 800384a:	b004      	add	sp, #16
 800384c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003850:	4834      	ldr	r0, [pc, #208]	; (8003924 <_printf_i+0x244>)
 8003852:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003856:	6829      	ldr	r1, [r5, #0]
 8003858:	6823      	ldr	r3, [r4, #0]
 800385a:	f851 6b04 	ldr.w	r6, [r1], #4
 800385e:	6029      	str	r1, [r5, #0]
 8003860:	061d      	lsls	r5, r3, #24
 8003862:	d514      	bpl.n	800388e <_printf_i+0x1ae>
 8003864:	07df      	lsls	r7, r3, #31
 8003866:	bf44      	itt	mi
 8003868:	f043 0320 	orrmi.w	r3, r3, #32
 800386c:	6023      	strmi	r3, [r4, #0]
 800386e:	b91e      	cbnz	r6, 8003878 <_printf_i+0x198>
 8003870:	6823      	ldr	r3, [r4, #0]
 8003872:	f023 0320 	bic.w	r3, r3, #32
 8003876:	6023      	str	r3, [r4, #0]
 8003878:	2310      	movs	r3, #16
 800387a:	e7af      	b.n	80037dc <_printf_i+0xfc>
 800387c:	6823      	ldr	r3, [r4, #0]
 800387e:	f043 0320 	orr.w	r3, r3, #32
 8003882:	6023      	str	r3, [r4, #0]
 8003884:	2378      	movs	r3, #120	; 0x78
 8003886:	4828      	ldr	r0, [pc, #160]	; (8003928 <_printf_i+0x248>)
 8003888:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800388c:	e7e3      	b.n	8003856 <_printf_i+0x176>
 800388e:	0659      	lsls	r1, r3, #25
 8003890:	bf48      	it	mi
 8003892:	b2b6      	uxthmi	r6, r6
 8003894:	e7e6      	b.n	8003864 <_printf_i+0x184>
 8003896:	4615      	mov	r5, r2
 8003898:	e7bb      	b.n	8003812 <_printf_i+0x132>
 800389a:	682b      	ldr	r3, [r5, #0]
 800389c:	6826      	ldr	r6, [r4, #0]
 800389e:	1d18      	adds	r0, r3, #4
 80038a0:	6961      	ldr	r1, [r4, #20]
 80038a2:	6028      	str	r0, [r5, #0]
 80038a4:	0635      	lsls	r5, r6, #24
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	d501      	bpl.n	80038ae <_printf_i+0x1ce>
 80038aa:	6019      	str	r1, [r3, #0]
 80038ac:	e002      	b.n	80038b4 <_printf_i+0x1d4>
 80038ae:	0670      	lsls	r0, r6, #25
 80038b0:	d5fb      	bpl.n	80038aa <_printf_i+0x1ca>
 80038b2:	8019      	strh	r1, [r3, #0]
 80038b4:	2300      	movs	r3, #0
 80038b6:	4615      	mov	r5, r2
 80038b8:	6123      	str	r3, [r4, #16]
 80038ba:	e7ba      	b.n	8003832 <_printf_i+0x152>
 80038bc:	682b      	ldr	r3, [r5, #0]
 80038be:	2100      	movs	r1, #0
 80038c0:	1d1a      	adds	r2, r3, #4
 80038c2:	602a      	str	r2, [r5, #0]
 80038c4:	681d      	ldr	r5, [r3, #0]
 80038c6:	6862      	ldr	r2, [r4, #4]
 80038c8:	4628      	mov	r0, r5
 80038ca:	f000 fed7 	bl	800467c <memchr>
 80038ce:	b108      	cbz	r0, 80038d4 <_printf_i+0x1f4>
 80038d0:	1b40      	subs	r0, r0, r5
 80038d2:	6060      	str	r0, [r4, #4]
 80038d4:	6863      	ldr	r3, [r4, #4]
 80038d6:	6123      	str	r3, [r4, #16]
 80038d8:	2300      	movs	r3, #0
 80038da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038de:	e7a8      	b.n	8003832 <_printf_i+0x152>
 80038e0:	462a      	mov	r2, r5
 80038e2:	4649      	mov	r1, r9
 80038e4:	4640      	mov	r0, r8
 80038e6:	6923      	ldr	r3, [r4, #16]
 80038e8:	47d0      	blx	sl
 80038ea:	3001      	adds	r0, #1
 80038ec:	d0ab      	beq.n	8003846 <_printf_i+0x166>
 80038ee:	6823      	ldr	r3, [r4, #0]
 80038f0:	079b      	lsls	r3, r3, #30
 80038f2:	d413      	bmi.n	800391c <_printf_i+0x23c>
 80038f4:	68e0      	ldr	r0, [r4, #12]
 80038f6:	9b03      	ldr	r3, [sp, #12]
 80038f8:	4298      	cmp	r0, r3
 80038fa:	bfb8      	it	lt
 80038fc:	4618      	movlt	r0, r3
 80038fe:	e7a4      	b.n	800384a <_printf_i+0x16a>
 8003900:	2301      	movs	r3, #1
 8003902:	4632      	mov	r2, r6
 8003904:	4649      	mov	r1, r9
 8003906:	4640      	mov	r0, r8
 8003908:	47d0      	blx	sl
 800390a:	3001      	adds	r0, #1
 800390c:	d09b      	beq.n	8003846 <_printf_i+0x166>
 800390e:	3501      	adds	r5, #1
 8003910:	68e3      	ldr	r3, [r4, #12]
 8003912:	9903      	ldr	r1, [sp, #12]
 8003914:	1a5b      	subs	r3, r3, r1
 8003916:	42ab      	cmp	r3, r5
 8003918:	dcf2      	bgt.n	8003900 <_printf_i+0x220>
 800391a:	e7eb      	b.n	80038f4 <_printf_i+0x214>
 800391c:	2500      	movs	r5, #0
 800391e:	f104 0619 	add.w	r6, r4, #25
 8003922:	e7f5      	b.n	8003910 <_printf_i+0x230>
 8003924:	08008c0a 	.word	0x08008c0a
 8003928:	08008c1b 	.word	0x08008c1b

0800392c <siprintf>:
 800392c:	b40e      	push	{r1, r2, r3}
 800392e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003932:	b500      	push	{lr}
 8003934:	b09c      	sub	sp, #112	; 0x70
 8003936:	ab1d      	add	r3, sp, #116	; 0x74
 8003938:	9002      	str	r0, [sp, #8]
 800393a:	9006      	str	r0, [sp, #24]
 800393c:	9107      	str	r1, [sp, #28]
 800393e:	9104      	str	r1, [sp, #16]
 8003940:	4808      	ldr	r0, [pc, #32]	; (8003964 <siprintf+0x38>)
 8003942:	4909      	ldr	r1, [pc, #36]	; (8003968 <siprintf+0x3c>)
 8003944:	f853 2b04 	ldr.w	r2, [r3], #4
 8003948:	9105      	str	r1, [sp, #20]
 800394a:	6800      	ldr	r0, [r0, #0]
 800394c:	a902      	add	r1, sp, #8
 800394e:	9301      	str	r3, [sp, #4]
 8003950:	f001 fb7e 	bl	8005050 <_svfiprintf_r>
 8003954:	2200      	movs	r2, #0
 8003956:	9b02      	ldr	r3, [sp, #8]
 8003958:	701a      	strb	r2, [r3, #0]
 800395a:	b01c      	add	sp, #112	; 0x70
 800395c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003960:	b003      	add	sp, #12
 8003962:	4770      	bx	lr
 8003964:	2000000c 	.word	0x2000000c
 8003968:	ffff0208 	.word	0xffff0208

0800396c <quorem>:
 800396c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003970:	6903      	ldr	r3, [r0, #16]
 8003972:	690c      	ldr	r4, [r1, #16]
 8003974:	4607      	mov	r7, r0
 8003976:	42a3      	cmp	r3, r4
 8003978:	f2c0 8082 	blt.w	8003a80 <quorem+0x114>
 800397c:	3c01      	subs	r4, #1
 800397e:	f100 0514 	add.w	r5, r0, #20
 8003982:	f101 0814 	add.w	r8, r1, #20
 8003986:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800398a:	9301      	str	r3, [sp, #4]
 800398c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003990:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003994:	3301      	adds	r3, #1
 8003996:	429a      	cmp	r2, r3
 8003998:	fbb2 f6f3 	udiv	r6, r2, r3
 800399c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80039a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80039a4:	d331      	bcc.n	8003a0a <quorem+0x9e>
 80039a6:	f04f 0e00 	mov.w	lr, #0
 80039aa:	4640      	mov	r0, r8
 80039ac:	46ac      	mov	ip, r5
 80039ae:	46f2      	mov	sl, lr
 80039b0:	f850 2b04 	ldr.w	r2, [r0], #4
 80039b4:	b293      	uxth	r3, r2
 80039b6:	fb06 e303 	mla	r3, r6, r3, lr
 80039ba:	0c12      	lsrs	r2, r2, #16
 80039bc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	fb06 e202 	mla	r2, r6, r2, lr
 80039c6:	ebaa 0303 	sub.w	r3, sl, r3
 80039ca:	f8dc a000 	ldr.w	sl, [ip]
 80039ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80039d2:	fa1f fa8a 	uxth.w	sl, sl
 80039d6:	4453      	add	r3, sl
 80039d8:	f8dc a000 	ldr.w	sl, [ip]
 80039dc:	b292      	uxth	r2, r2
 80039de:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80039e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80039ec:	4581      	cmp	r9, r0
 80039ee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80039f2:	f84c 3b04 	str.w	r3, [ip], #4
 80039f6:	d2db      	bcs.n	80039b0 <quorem+0x44>
 80039f8:	f855 300b 	ldr.w	r3, [r5, fp]
 80039fc:	b92b      	cbnz	r3, 8003a0a <quorem+0x9e>
 80039fe:	9b01      	ldr	r3, [sp, #4]
 8003a00:	3b04      	subs	r3, #4
 8003a02:	429d      	cmp	r5, r3
 8003a04:	461a      	mov	r2, r3
 8003a06:	d32f      	bcc.n	8003a68 <quorem+0xfc>
 8003a08:	613c      	str	r4, [r7, #16]
 8003a0a:	4638      	mov	r0, r7
 8003a0c:	f001 f8d0 	bl	8004bb0 <__mcmp>
 8003a10:	2800      	cmp	r0, #0
 8003a12:	db25      	blt.n	8003a60 <quorem+0xf4>
 8003a14:	4628      	mov	r0, r5
 8003a16:	f04f 0c00 	mov.w	ip, #0
 8003a1a:	3601      	adds	r6, #1
 8003a1c:	f858 1b04 	ldr.w	r1, [r8], #4
 8003a20:	f8d0 e000 	ldr.w	lr, [r0]
 8003a24:	b28b      	uxth	r3, r1
 8003a26:	ebac 0303 	sub.w	r3, ip, r3
 8003a2a:	fa1f f28e 	uxth.w	r2, lr
 8003a2e:	4413      	add	r3, r2
 8003a30:	0c0a      	lsrs	r2, r1, #16
 8003a32:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003a36:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003a40:	45c1      	cmp	r9, r8
 8003a42:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003a46:	f840 3b04 	str.w	r3, [r0], #4
 8003a4a:	d2e7      	bcs.n	8003a1c <quorem+0xb0>
 8003a4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003a50:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003a54:	b922      	cbnz	r2, 8003a60 <quorem+0xf4>
 8003a56:	3b04      	subs	r3, #4
 8003a58:	429d      	cmp	r5, r3
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	d30a      	bcc.n	8003a74 <quorem+0x108>
 8003a5e:	613c      	str	r4, [r7, #16]
 8003a60:	4630      	mov	r0, r6
 8003a62:	b003      	add	sp, #12
 8003a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a68:	6812      	ldr	r2, [r2, #0]
 8003a6a:	3b04      	subs	r3, #4
 8003a6c:	2a00      	cmp	r2, #0
 8003a6e:	d1cb      	bne.n	8003a08 <quorem+0x9c>
 8003a70:	3c01      	subs	r4, #1
 8003a72:	e7c6      	b.n	8003a02 <quorem+0x96>
 8003a74:	6812      	ldr	r2, [r2, #0]
 8003a76:	3b04      	subs	r3, #4
 8003a78:	2a00      	cmp	r2, #0
 8003a7a:	d1f0      	bne.n	8003a5e <quorem+0xf2>
 8003a7c:	3c01      	subs	r4, #1
 8003a7e:	e7eb      	b.n	8003a58 <quorem+0xec>
 8003a80:	2000      	movs	r0, #0
 8003a82:	e7ee      	b.n	8003a62 <quorem+0xf6>
 8003a84:	0000      	movs	r0, r0
	...

08003a88 <_dtoa_r>:
 8003a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a8c:	4616      	mov	r6, r2
 8003a8e:	461f      	mov	r7, r3
 8003a90:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003a92:	b099      	sub	sp, #100	; 0x64
 8003a94:	4605      	mov	r5, r0
 8003a96:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003a9a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8003a9e:	b974      	cbnz	r4, 8003abe <_dtoa_r+0x36>
 8003aa0:	2010      	movs	r0, #16
 8003aa2:	f000 fde3 	bl	800466c <malloc>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	6268      	str	r0, [r5, #36]	; 0x24
 8003aaa:	b920      	cbnz	r0, 8003ab6 <_dtoa_r+0x2e>
 8003aac:	21ea      	movs	r1, #234	; 0xea
 8003aae:	4ba8      	ldr	r3, [pc, #672]	; (8003d50 <_dtoa_r+0x2c8>)
 8003ab0:	48a8      	ldr	r0, [pc, #672]	; (8003d54 <_dtoa_r+0x2cc>)
 8003ab2:	f001 fbdd 	bl	8005270 <__assert_func>
 8003ab6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003aba:	6004      	str	r4, [r0, #0]
 8003abc:	60c4      	str	r4, [r0, #12]
 8003abe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003ac0:	6819      	ldr	r1, [r3, #0]
 8003ac2:	b151      	cbz	r1, 8003ada <_dtoa_r+0x52>
 8003ac4:	685a      	ldr	r2, [r3, #4]
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	4093      	lsls	r3, r2
 8003aca:	604a      	str	r2, [r1, #4]
 8003acc:	608b      	str	r3, [r1, #8]
 8003ace:	4628      	mov	r0, r5
 8003ad0:	f000 fe30 	bl	8004734 <_Bfree>
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	1e3b      	subs	r3, r7, #0
 8003adc:	bfaf      	iteee	ge
 8003ade:	2300      	movge	r3, #0
 8003ae0:	2201      	movlt	r2, #1
 8003ae2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003ae6:	9305      	strlt	r3, [sp, #20]
 8003ae8:	bfa8      	it	ge
 8003aea:	f8c8 3000 	strge.w	r3, [r8]
 8003aee:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003af2:	4b99      	ldr	r3, [pc, #612]	; (8003d58 <_dtoa_r+0x2d0>)
 8003af4:	bfb8      	it	lt
 8003af6:	f8c8 2000 	strlt.w	r2, [r8]
 8003afa:	ea33 0309 	bics.w	r3, r3, r9
 8003afe:	d119      	bne.n	8003b34 <_dtoa_r+0xac>
 8003b00:	f242 730f 	movw	r3, #9999	; 0x270f
 8003b04:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003b06:	6013      	str	r3, [r2, #0]
 8003b08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003b0c:	4333      	orrs	r3, r6
 8003b0e:	f000 857f 	beq.w	8004610 <_dtoa_r+0xb88>
 8003b12:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003b14:	b953      	cbnz	r3, 8003b2c <_dtoa_r+0xa4>
 8003b16:	4b91      	ldr	r3, [pc, #580]	; (8003d5c <_dtoa_r+0x2d4>)
 8003b18:	e022      	b.n	8003b60 <_dtoa_r+0xd8>
 8003b1a:	4b91      	ldr	r3, [pc, #580]	; (8003d60 <_dtoa_r+0x2d8>)
 8003b1c:	9303      	str	r3, [sp, #12]
 8003b1e:	3308      	adds	r3, #8
 8003b20:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003b22:	6013      	str	r3, [r2, #0]
 8003b24:	9803      	ldr	r0, [sp, #12]
 8003b26:	b019      	add	sp, #100	; 0x64
 8003b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b2c:	4b8b      	ldr	r3, [pc, #556]	; (8003d5c <_dtoa_r+0x2d4>)
 8003b2e:	9303      	str	r3, [sp, #12]
 8003b30:	3303      	adds	r3, #3
 8003b32:	e7f5      	b.n	8003b20 <_dtoa_r+0x98>
 8003b34:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003b38:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8003b3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003b40:	2200      	movs	r2, #0
 8003b42:	2300      	movs	r3, #0
 8003b44:	f7fc ff30 	bl	80009a8 <__aeabi_dcmpeq>
 8003b48:	4680      	mov	r8, r0
 8003b4a:	b158      	cbz	r0, 8003b64 <_dtoa_r+0xdc>
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003b50:	6013      	str	r3, [r2, #0]
 8003b52:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f000 8558 	beq.w	800460a <_dtoa_r+0xb82>
 8003b5a:	4882      	ldr	r0, [pc, #520]	; (8003d64 <_dtoa_r+0x2dc>)
 8003b5c:	6018      	str	r0, [r3, #0]
 8003b5e:	1e43      	subs	r3, r0, #1
 8003b60:	9303      	str	r3, [sp, #12]
 8003b62:	e7df      	b.n	8003b24 <_dtoa_r+0x9c>
 8003b64:	ab16      	add	r3, sp, #88	; 0x58
 8003b66:	9301      	str	r3, [sp, #4]
 8003b68:	ab17      	add	r3, sp, #92	; 0x5c
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	4628      	mov	r0, r5
 8003b6e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003b72:	f001 f8c5 	bl	8004d00 <__d2b>
 8003b76:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8003b7a:	4683      	mov	fp, r0
 8003b7c:	2c00      	cmp	r4, #0
 8003b7e:	d07f      	beq.n	8003c80 <_dtoa_r+0x1f8>
 8003b80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003b84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b86:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003b8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b8e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003b92:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003b96:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	4b72      	ldr	r3, [pc, #456]	; (8003d68 <_dtoa_r+0x2e0>)
 8003b9e:	f7fc fae3 	bl	8000168 <__aeabi_dsub>
 8003ba2:	a365      	add	r3, pc, #404	; (adr r3, 8003d38 <_dtoa_r+0x2b0>)
 8003ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba8:	f7fc fc96 	bl	80004d8 <__aeabi_dmul>
 8003bac:	a364      	add	r3, pc, #400	; (adr r3, 8003d40 <_dtoa_r+0x2b8>)
 8003bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb2:	f7fc fadb 	bl	800016c <__adddf3>
 8003bb6:	4606      	mov	r6, r0
 8003bb8:	4620      	mov	r0, r4
 8003bba:	460f      	mov	r7, r1
 8003bbc:	f7fc fc22 	bl	8000404 <__aeabi_i2d>
 8003bc0:	a361      	add	r3, pc, #388	; (adr r3, 8003d48 <_dtoa_r+0x2c0>)
 8003bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc6:	f7fc fc87 	bl	80004d8 <__aeabi_dmul>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	460b      	mov	r3, r1
 8003bce:	4630      	mov	r0, r6
 8003bd0:	4639      	mov	r1, r7
 8003bd2:	f7fc facb 	bl	800016c <__adddf3>
 8003bd6:	4606      	mov	r6, r0
 8003bd8:	460f      	mov	r7, r1
 8003bda:	f7fc ff2d 	bl	8000a38 <__aeabi_d2iz>
 8003bde:	2200      	movs	r2, #0
 8003be0:	4682      	mov	sl, r0
 8003be2:	2300      	movs	r3, #0
 8003be4:	4630      	mov	r0, r6
 8003be6:	4639      	mov	r1, r7
 8003be8:	f7fc fee8 	bl	80009bc <__aeabi_dcmplt>
 8003bec:	b148      	cbz	r0, 8003c02 <_dtoa_r+0x17a>
 8003bee:	4650      	mov	r0, sl
 8003bf0:	f7fc fc08 	bl	8000404 <__aeabi_i2d>
 8003bf4:	4632      	mov	r2, r6
 8003bf6:	463b      	mov	r3, r7
 8003bf8:	f7fc fed6 	bl	80009a8 <__aeabi_dcmpeq>
 8003bfc:	b908      	cbnz	r0, 8003c02 <_dtoa_r+0x17a>
 8003bfe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003c02:	f1ba 0f16 	cmp.w	sl, #22
 8003c06:	d858      	bhi.n	8003cba <_dtoa_r+0x232>
 8003c08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003c0c:	4b57      	ldr	r3, [pc, #348]	; (8003d6c <_dtoa_r+0x2e4>)
 8003c0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c16:	f7fc fed1 	bl	80009bc <__aeabi_dcmplt>
 8003c1a:	2800      	cmp	r0, #0
 8003c1c:	d04f      	beq.n	8003cbe <_dtoa_r+0x236>
 8003c1e:	2300      	movs	r3, #0
 8003c20:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003c24:	930f      	str	r3, [sp, #60]	; 0x3c
 8003c26:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003c28:	1b1c      	subs	r4, r3, r4
 8003c2a:	1e63      	subs	r3, r4, #1
 8003c2c:	9309      	str	r3, [sp, #36]	; 0x24
 8003c2e:	bf49      	itett	mi
 8003c30:	f1c4 0301 	rsbmi	r3, r4, #1
 8003c34:	2300      	movpl	r3, #0
 8003c36:	9306      	strmi	r3, [sp, #24]
 8003c38:	2300      	movmi	r3, #0
 8003c3a:	bf54      	ite	pl
 8003c3c:	9306      	strpl	r3, [sp, #24]
 8003c3e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8003c40:	f1ba 0f00 	cmp.w	sl, #0
 8003c44:	db3d      	blt.n	8003cc2 <_dtoa_r+0x23a>
 8003c46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c48:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8003c4c:	4453      	add	r3, sl
 8003c4e:	9309      	str	r3, [sp, #36]	; 0x24
 8003c50:	2300      	movs	r3, #0
 8003c52:	930a      	str	r3, [sp, #40]	; 0x28
 8003c54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003c56:	2b09      	cmp	r3, #9
 8003c58:	f200 808c 	bhi.w	8003d74 <_dtoa_r+0x2ec>
 8003c5c:	2b05      	cmp	r3, #5
 8003c5e:	bfc4      	itt	gt
 8003c60:	3b04      	subgt	r3, #4
 8003c62:	9322      	strgt	r3, [sp, #136]	; 0x88
 8003c64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003c66:	bfc8      	it	gt
 8003c68:	2400      	movgt	r4, #0
 8003c6a:	f1a3 0302 	sub.w	r3, r3, #2
 8003c6e:	bfd8      	it	le
 8003c70:	2401      	movle	r4, #1
 8003c72:	2b03      	cmp	r3, #3
 8003c74:	f200 808a 	bhi.w	8003d8c <_dtoa_r+0x304>
 8003c78:	e8df f003 	tbb	[pc, r3]
 8003c7c:	5b4d4f2d 	.word	0x5b4d4f2d
 8003c80:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8003c84:	441c      	add	r4, r3
 8003c86:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8003c8a:	2b20      	cmp	r3, #32
 8003c8c:	bfc3      	ittte	gt
 8003c8e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003c92:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8003c96:	fa09 f303 	lslgt.w	r3, r9, r3
 8003c9a:	f1c3 0320 	rsble	r3, r3, #32
 8003c9e:	bfc6      	itte	gt
 8003ca0:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003ca4:	4318      	orrgt	r0, r3
 8003ca6:	fa06 f003 	lslle.w	r0, r6, r3
 8003caa:	f7fc fb9b 	bl	80003e4 <__aeabi_ui2d>
 8003cae:	2301      	movs	r3, #1
 8003cb0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003cb4:	3c01      	subs	r4, #1
 8003cb6:	9313      	str	r3, [sp, #76]	; 0x4c
 8003cb8:	e76f      	b.n	8003b9a <_dtoa_r+0x112>
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e7b2      	b.n	8003c24 <_dtoa_r+0x19c>
 8003cbe:	900f      	str	r0, [sp, #60]	; 0x3c
 8003cc0:	e7b1      	b.n	8003c26 <_dtoa_r+0x19e>
 8003cc2:	9b06      	ldr	r3, [sp, #24]
 8003cc4:	eba3 030a 	sub.w	r3, r3, sl
 8003cc8:	9306      	str	r3, [sp, #24]
 8003cca:	f1ca 0300 	rsb	r3, sl, #0
 8003cce:	930a      	str	r3, [sp, #40]	; 0x28
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	930e      	str	r3, [sp, #56]	; 0x38
 8003cd4:	e7be      	b.n	8003c54 <_dtoa_r+0x1cc>
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	930b      	str	r3, [sp, #44]	; 0x2c
 8003cda:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	dc58      	bgt.n	8003d92 <_dtoa_r+0x30a>
 8003ce0:	f04f 0901 	mov.w	r9, #1
 8003ce4:	464b      	mov	r3, r9
 8003ce6:	f8cd 9020 	str.w	r9, [sp, #32]
 8003cea:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8003cee:	2200      	movs	r2, #0
 8003cf0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003cf2:	6042      	str	r2, [r0, #4]
 8003cf4:	2204      	movs	r2, #4
 8003cf6:	f102 0614 	add.w	r6, r2, #20
 8003cfa:	429e      	cmp	r6, r3
 8003cfc:	6841      	ldr	r1, [r0, #4]
 8003cfe:	d94e      	bls.n	8003d9e <_dtoa_r+0x316>
 8003d00:	4628      	mov	r0, r5
 8003d02:	f000 fcd7 	bl	80046b4 <_Balloc>
 8003d06:	9003      	str	r0, [sp, #12]
 8003d08:	2800      	cmp	r0, #0
 8003d0a:	d14c      	bne.n	8003da6 <_dtoa_r+0x31e>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003d12:	4b17      	ldr	r3, [pc, #92]	; (8003d70 <_dtoa_r+0x2e8>)
 8003d14:	e6cc      	b.n	8003ab0 <_dtoa_r+0x28>
 8003d16:	2301      	movs	r3, #1
 8003d18:	e7de      	b.n	8003cd8 <_dtoa_r+0x250>
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8003d1e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003d20:	eb0a 0903 	add.w	r9, sl, r3
 8003d24:	f109 0301 	add.w	r3, r9, #1
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	9308      	str	r3, [sp, #32]
 8003d2c:	bfb8      	it	lt
 8003d2e:	2301      	movlt	r3, #1
 8003d30:	e7dd      	b.n	8003cee <_dtoa_r+0x266>
 8003d32:	2301      	movs	r3, #1
 8003d34:	e7f2      	b.n	8003d1c <_dtoa_r+0x294>
 8003d36:	bf00      	nop
 8003d38:	636f4361 	.word	0x636f4361
 8003d3c:	3fd287a7 	.word	0x3fd287a7
 8003d40:	8b60c8b3 	.word	0x8b60c8b3
 8003d44:	3fc68a28 	.word	0x3fc68a28
 8003d48:	509f79fb 	.word	0x509f79fb
 8003d4c:	3fd34413 	.word	0x3fd34413
 8003d50:	08008c39 	.word	0x08008c39
 8003d54:	08008c50 	.word	0x08008c50
 8003d58:	7ff00000 	.word	0x7ff00000
 8003d5c:	08008c35 	.word	0x08008c35
 8003d60:	08008c2c 	.word	0x08008c2c
 8003d64:	08008c09 	.word	0x08008c09
 8003d68:	3ff80000 	.word	0x3ff80000
 8003d6c:	08008d40 	.word	0x08008d40
 8003d70:	08008cab 	.word	0x08008cab
 8003d74:	2401      	movs	r4, #1
 8003d76:	2300      	movs	r3, #0
 8003d78:	940b      	str	r4, [sp, #44]	; 0x2c
 8003d7a:	9322      	str	r3, [sp, #136]	; 0x88
 8003d7c:	f04f 39ff 	mov.w	r9, #4294967295
 8003d80:	2200      	movs	r2, #0
 8003d82:	2312      	movs	r3, #18
 8003d84:	f8cd 9020 	str.w	r9, [sp, #32]
 8003d88:	9223      	str	r2, [sp, #140]	; 0x8c
 8003d8a:	e7b0      	b.n	8003cee <_dtoa_r+0x266>
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003d90:	e7f4      	b.n	8003d7c <_dtoa_r+0x2f4>
 8003d92:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8003d96:	464b      	mov	r3, r9
 8003d98:	f8cd 9020 	str.w	r9, [sp, #32]
 8003d9c:	e7a7      	b.n	8003cee <_dtoa_r+0x266>
 8003d9e:	3101      	adds	r1, #1
 8003da0:	6041      	str	r1, [r0, #4]
 8003da2:	0052      	lsls	r2, r2, #1
 8003da4:	e7a7      	b.n	8003cf6 <_dtoa_r+0x26e>
 8003da6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003da8:	9a03      	ldr	r2, [sp, #12]
 8003daa:	601a      	str	r2, [r3, #0]
 8003dac:	9b08      	ldr	r3, [sp, #32]
 8003dae:	2b0e      	cmp	r3, #14
 8003db0:	f200 80a8 	bhi.w	8003f04 <_dtoa_r+0x47c>
 8003db4:	2c00      	cmp	r4, #0
 8003db6:	f000 80a5 	beq.w	8003f04 <_dtoa_r+0x47c>
 8003dba:	f1ba 0f00 	cmp.w	sl, #0
 8003dbe:	dd34      	ble.n	8003e2a <_dtoa_r+0x3a2>
 8003dc0:	4a9a      	ldr	r2, [pc, #616]	; (800402c <_dtoa_r+0x5a4>)
 8003dc2:	f00a 030f 	and.w	r3, sl, #15
 8003dc6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003dca:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8003dce:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003dd2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003dd6:	ea4f 142a 	mov.w	r4, sl, asr #4
 8003dda:	d016      	beq.n	8003e0a <_dtoa_r+0x382>
 8003ddc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003de0:	4b93      	ldr	r3, [pc, #588]	; (8004030 <_dtoa_r+0x5a8>)
 8003de2:	2703      	movs	r7, #3
 8003de4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003de8:	f7fc fca0 	bl	800072c <__aeabi_ddiv>
 8003dec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003df0:	f004 040f 	and.w	r4, r4, #15
 8003df4:	4e8e      	ldr	r6, [pc, #568]	; (8004030 <_dtoa_r+0x5a8>)
 8003df6:	b954      	cbnz	r4, 8003e0e <_dtoa_r+0x386>
 8003df8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003dfc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003e00:	f7fc fc94 	bl	800072c <__aeabi_ddiv>
 8003e04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003e08:	e029      	b.n	8003e5e <_dtoa_r+0x3d6>
 8003e0a:	2702      	movs	r7, #2
 8003e0c:	e7f2      	b.n	8003df4 <_dtoa_r+0x36c>
 8003e0e:	07e1      	lsls	r1, r4, #31
 8003e10:	d508      	bpl.n	8003e24 <_dtoa_r+0x39c>
 8003e12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003e16:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003e1a:	f7fc fb5d 	bl	80004d8 <__aeabi_dmul>
 8003e1e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003e22:	3701      	adds	r7, #1
 8003e24:	1064      	asrs	r4, r4, #1
 8003e26:	3608      	adds	r6, #8
 8003e28:	e7e5      	b.n	8003df6 <_dtoa_r+0x36e>
 8003e2a:	f000 80a5 	beq.w	8003f78 <_dtoa_r+0x4f0>
 8003e2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003e32:	f1ca 0400 	rsb	r4, sl, #0
 8003e36:	4b7d      	ldr	r3, [pc, #500]	; (800402c <_dtoa_r+0x5a4>)
 8003e38:	f004 020f 	and.w	r2, r4, #15
 8003e3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e44:	f7fc fb48 	bl	80004d8 <__aeabi_dmul>
 8003e48:	2702      	movs	r7, #2
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003e50:	4e77      	ldr	r6, [pc, #476]	; (8004030 <_dtoa_r+0x5a8>)
 8003e52:	1124      	asrs	r4, r4, #4
 8003e54:	2c00      	cmp	r4, #0
 8003e56:	f040 8084 	bne.w	8003f62 <_dtoa_r+0x4da>
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1d2      	bne.n	8003e04 <_dtoa_r+0x37c>
 8003e5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f000 808b 	beq.w	8003f7c <_dtoa_r+0x4f4>
 8003e66:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003e6a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003e6e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003e72:	2200      	movs	r2, #0
 8003e74:	4b6f      	ldr	r3, [pc, #444]	; (8004034 <_dtoa_r+0x5ac>)
 8003e76:	f7fc fda1 	bl	80009bc <__aeabi_dcmplt>
 8003e7a:	2800      	cmp	r0, #0
 8003e7c:	d07e      	beq.n	8003f7c <_dtoa_r+0x4f4>
 8003e7e:	9b08      	ldr	r3, [sp, #32]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d07b      	beq.n	8003f7c <_dtoa_r+0x4f4>
 8003e84:	f1b9 0f00 	cmp.w	r9, #0
 8003e88:	dd38      	ble.n	8003efc <_dtoa_r+0x474>
 8003e8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003e8e:	2200      	movs	r2, #0
 8003e90:	4b69      	ldr	r3, [pc, #420]	; (8004038 <_dtoa_r+0x5b0>)
 8003e92:	f7fc fb21 	bl	80004d8 <__aeabi_dmul>
 8003e96:	464c      	mov	r4, r9
 8003e98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003e9c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8003ea0:	3701      	adds	r7, #1
 8003ea2:	4638      	mov	r0, r7
 8003ea4:	f7fc faae 	bl	8000404 <__aeabi_i2d>
 8003ea8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003eac:	f7fc fb14 	bl	80004d8 <__aeabi_dmul>
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	4b62      	ldr	r3, [pc, #392]	; (800403c <_dtoa_r+0x5b4>)
 8003eb4:	f7fc f95a 	bl	800016c <__adddf3>
 8003eb8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8003ebc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003ec0:	9611      	str	r6, [sp, #68]	; 0x44
 8003ec2:	2c00      	cmp	r4, #0
 8003ec4:	d15d      	bne.n	8003f82 <_dtoa_r+0x4fa>
 8003ec6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	4b5c      	ldr	r3, [pc, #368]	; (8004040 <_dtoa_r+0x5b8>)
 8003ece:	f7fc f94b 	bl	8000168 <__aeabi_dsub>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003eda:	4633      	mov	r3, r6
 8003edc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003ede:	f7fc fd8b 	bl	80009f8 <__aeabi_dcmpgt>
 8003ee2:	2800      	cmp	r0, #0
 8003ee4:	f040 829c 	bne.w	8004420 <_dtoa_r+0x998>
 8003ee8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003eec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003eee:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8003ef2:	f7fc fd63 	bl	80009bc <__aeabi_dcmplt>
 8003ef6:	2800      	cmp	r0, #0
 8003ef8:	f040 8290 	bne.w	800441c <_dtoa_r+0x994>
 8003efc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8003f00:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003f04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f2c0 8152 	blt.w	80041b0 <_dtoa_r+0x728>
 8003f0c:	f1ba 0f0e 	cmp.w	sl, #14
 8003f10:	f300 814e 	bgt.w	80041b0 <_dtoa_r+0x728>
 8003f14:	4b45      	ldr	r3, [pc, #276]	; (800402c <_dtoa_r+0x5a4>)
 8003f16:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003f1a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003f1e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8003f22:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f280 80db 	bge.w	80040e0 <_dtoa_r+0x658>
 8003f2a:	9b08      	ldr	r3, [sp, #32]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f300 80d7 	bgt.w	80040e0 <_dtoa_r+0x658>
 8003f32:	f040 8272 	bne.w	800441a <_dtoa_r+0x992>
 8003f36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	4b40      	ldr	r3, [pc, #256]	; (8004040 <_dtoa_r+0x5b8>)
 8003f3e:	f7fc facb 	bl	80004d8 <__aeabi_dmul>
 8003f42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f46:	f7fc fd4d 	bl	80009e4 <__aeabi_dcmpge>
 8003f4a:	9c08      	ldr	r4, [sp, #32]
 8003f4c:	4626      	mov	r6, r4
 8003f4e:	2800      	cmp	r0, #0
 8003f50:	f040 8248 	bne.w	80043e4 <_dtoa_r+0x95c>
 8003f54:	2331      	movs	r3, #49	; 0x31
 8003f56:	9f03      	ldr	r7, [sp, #12]
 8003f58:	f10a 0a01 	add.w	sl, sl, #1
 8003f5c:	f807 3b01 	strb.w	r3, [r7], #1
 8003f60:	e244      	b.n	80043ec <_dtoa_r+0x964>
 8003f62:	07e2      	lsls	r2, r4, #31
 8003f64:	d505      	bpl.n	8003f72 <_dtoa_r+0x4ea>
 8003f66:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003f6a:	f7fc fab5 	bl	80004d8 <__aeabi_dmul>
 8003f6e:	2301      	movs	r3, #1
 8003f70:	3701      	adds	r7, #1
 8003f72:	1064      	asrs	r4, r4, #1
 8003f74:	3608      	adds	r6, #8
 8003f76:	e76d      	b.n	8003e54 <_dtoa_r+0x3cc>
 8003f78:	2702      	movs	r7, #2
 8003f7a:	e770      	b.n	8003e5e <_dtoa_r+0x3d6>
 8003f7c:	46d0      	mov	r8, sl
 8003f7e:	9c08      	ldr	r4, [sp, #32]
 8003f80:	e78f      	b.n	8003ea2 <_dtoa_r+0x41a>
 8003f82:	9903      	ldr	r1, [sp, #12]
 8003f84:	4b29      	ldr	r3, [pc, #164]	; (800402c <_dtoa_r+0x5a4>)
 8003f86:	4421      	add	r1, r4
 8003f88:	9112      	str	r1, [sp, #72]	; 0x48
 8003f8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003f8c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003f90:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8003f94:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003f98:	2900      	cmp	r1, #0
 8003f9a:	d055      	beq.n	8004048 <_dtoa_r+0x5c0>
 8003f9c:	2000      	movs	r0, #0
 8003f9e:	4929      	ldr	r1, [pc, #164]	; (8004044 <_dtoa_r+0x5bc>)
 8003fa0:	f7fc fbc4 	bl	800072c <__aeabi_ddiv>
 8003fa4:	463b      	mov	r3, r7
 8003fa6:	4632      	mov	r2, r6
 8003fa8:	f7fc f8de 	bl	8000168 <__aeabi_dsub>
 8003fac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003fb0:	9f03      	ldr	r7, [sp, #12]
 8003fb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003fb6:	f7fc fd3f 	bl	8000a38 <__aeabi_d2iz>
 8003fba:	4604      	mov	r4, r0
 8003fbc:	f7fc fa22 	bl	8000404 <__aeabi_i2d>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003fc8:	f7fc f8ce 	bl	8000168 <__aeabi_dsub>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	460b      	mov	r3, r1
 8003fd0:	3430      	adds	r4, #48	; 0x30
 8003fd2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003fd6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003fda:	f807 4b01 	strb.w	r4, [r7], #1
 8003fde:	f7fc fced 	bl	80009bc <__aeabi_dcmplt>
 8003fe2:	2800      	cmp	r0, #0
 8003fe4:	d174      	bne.n	80040d0 <_dtoa_r+0x648>
 8003fe6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003fea:	2000      	movs	r0, #0
 8003fec:	4911      	ldr	r1, [pc, #68]	; (8004034 <_dtoa_r+0x5ac>)
 8003fee:	f7fc f8bb 	bl	8000168 <__aeabi_dsub>
 8003ff2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003ff6:	f7fc fce1 	bl	80009bc <__aeabi_dcmplt>
 8003ffa:	2800      	cmp	r0, #0
 8003ffc:	f040 80b7 	bne.w	800416e <_dtoa_r+0x6e6>
 8004000:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004002:	429f      	cmp	r7, r3
 8004004:	f43f af7a 	beq.w	8003efc <_dtoa_r+0x474>
 8004008:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800400c:	2200      	movs	r2, #0
 800400e:	4b0a      	ldr	r3, [pc, #40]	; (8004038 <_dtoa_r+0x5b0>)
 8004010:	f7fc fa62 	bl	80004d8 <__aeabi_dmul>
 8004014:	2200      	movs	r2, #0
 8004016:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800401a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800401e:	4b06      	ldr	r3, [pc, #24]	; (8004038 <_dtoa_r+0x5b0>)
 8004020:	f7fc fa5a 	bl	80004d8 <__aeabi_dmul>
 8004024:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004028:	e7c3      	b.n	8003fb2 <_dtoa_r+0x52a>
 800402a:	bf00      	nop
 800402c:	08008d40 	.word	0x08008d40
 8004030:	08008d18 	.word	0x08008d18
 8004034:	3ff00000 	.word	0x3ff00000
 8004038:	40240000 	.word	0x40240000
 800403c:	401c0000 	.word	0x401c0000
 8004040:	40140000 	.word	0x40140000
 8004044:	3fe00000 	.word	0x3fe00000
 8004048:	4630      	mov	r0, r6
 800404a:	4639      	mov	r1, r7
 800404c:	f7fc fa44 	bl	80004d8 <__aeabi_dmul>
 8004050:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004052:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004056:	9c03      	ldr	r4, [sp, #12]
 8004058:	9314      	str	r3, [sp, #80]	; 0x50
 800405a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800405e:	f7fc fceb 	bl	8000a38 <__aeabi_d2iz>
 8004062:	9015      	str	r0, [sp, #84]	; 0x54
 8004064:	f7fc f9ce 	bl	8000404 <__aeabi_i2d>
 8004068:	4602      	mov	r2, r0
 800406a:	460b      	mov	r3, r1
 800406c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004070:	f7fc f87a 	bl	8000168 <__aeabi_dsub>
 8004074:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004076:	4606      	mov	r6, r0
 8004078:	3330      	adds	r3, #48	; 0x30
 800407a:	f804 3b01 	strb.w	r3, [r4], #1
 800407e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004080:	460f      	mov	r7, r1
 8004082:	429c      	cmp	r4, r3
 8004084:	f04f 0200 	mov.w	r2, #0
 8004088:	d124      	bne.n	80040d4 <_dtoa_r+0x64c>
 800408a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800408e:	4bb0      	ldr	r3, [pc, #704]	; (8004350 <_dtoa_r+0x8c8>)
 8004090:	f7fc f86c 	bl	800016c <__adddf3>
 8004094:	4602      	mov	r2, r0
 8004096:	460b      	mov	r3, r1
 8004098:	4630      	mov	r0, r6
 800409a:	4639      	mov	r1, r7
 800409c:	f7fc fcac 	bl	80009f8 <__aeabi_dcmpgt>
 80040a0:	2800      	cmp	r0, #0
 80040a2:	d163      	bne.n	800416c <_dtoa_r+0x6e4>
 80040a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80040a8:	2000      	movs	r0, #0
 80040aa:	49a9      	ldr	r1, [pc, #676]	; (8004350 <_dtoa_r+0x8c8>)
 80040ac:	f7fc f85c 	bl	8000168 <__aeabi_dsub>
 80040b0:	4602      	mov	r2, r0
 80040b2:	460b      	mov	r3, r1
 80040b4:	4630      	mov	r0, r6
 80040b6:	4639      	mov	r1, r7
 80040b8:	f7fc fc80 	bl	80009bc <__aeabi_dcmplt>
 80040bc:	2800      	cmp	r0, #0
 80040be:	f43f af1d 	beq.w	8003efc <_dtoa_r+0x474>
 80040c2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80040c4:	1e7b      	subs	r3, r7, #1
 80040c6:	9314      	str	r3, [sp, #80]	; 0x50
 80040c8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80040cc:	2b30      	cmp	r3, #48	; 0x30
 80040ce:	d0f8      	beq.n	80040c2 <_dtoa_r+0x63a>
 80040d0:	46c2      	mov	sl, r8
 80040d2:	e03b      	b.n	800414c <_dtoa_r+0x6c4>
 80040d4:	4b9f      	ldr	r3, [pc, #636]	; (8004354 <_dtoa_r+0x8cc>)
 80040d6:	f7fc f9ff 	bl	80004d8 <__aeabi_dmul>
 80040da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80040de:	e7bc      	b.n	800405a <_dtoa_r+0x5d2>
 80040e0:	9f03      	ldr	r7, [sp, #12]
 80040e2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80040e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80040ea:	4640      	mov	r0, r8
 80040ec:	4649      	mov	r1, r9
 80040ee:	f7fc fb1d 	bl	800072c <__aeabi_ddiv>
 80040f2:	f7fc fca1 	bl	8000a38 <__aeabi_d2iz>
 80040f6:	4604      	mov	r4, r0
 80040f8:	f7fc f984 	bl	8000404 <__aeabi_i2d>
 80040fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004100:	f7fc f9ea 	bl	80004d8 <__aeabi_dmul>
 8004104:	4602      	mov	r2, r0
 8004106:	460b      	mov	r3, r1
 8004108:	4640      	mov	r0, r8
 800410a:	4649      	mov	r1, r9
 800410c:	f7fc f82c 	bl	8000168 <__aeabi_dsub>
 8004110:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004114:	f807 6b01 	strb.w	r6, [r7], #1
 8004118:	9e03      	ldr	r6, [sp, #12]
 800411a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800411e:	1bbe      	subs	r6, r7, r6
 8004120:	45b4      	cmp	ip, r6
 8004122:	4602      	mov	r2, r0
 8004124:	460b      	mov	r3, r1
 8004126:	d136      	bne.n	8004196 <_dtoa_r+0x70e>
 8004128:	f7fc f820 	bl	800016c <__adddf3>
 800412c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004130:	4680      	mov	r8, r0
 8004132:	4689      	mov	r9, r1
 8004134:	f7fc fc60 	bl	80009f8 <__aeabi_dcmpgt>
 8004138:	bb58      	cbnz	r0, 8004192 <_dtoa_r+0x70a>
 800413a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800413e:	4640      	mov	r0, r8
 8004140:	4649      	mov	r1, r9
 8004142:	f7fc fc31 	bl	80009a8 <__aeabi_dcmpeq>
 8004146:	b108      	cbz	r0, 800414c <_dtoa_r+0x6c4>
 8004148:	07e1      	lsls	r1, r4, #31
 800414a:	d422      	bmi.n	8004192 <_dtoa_r+0x70a>
 800414c:	4628      	mov	r0, r5
 800414e:	4659      	mov	r1, fp
 8004150:	f000 faf0 	bl	8004734 <_Bfree>
 8004154:	2300      	movs	r3, #0
 8004156:	703b      	strb	r3, [r7, #0]
 8004158:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800415a:	f10a 0001 	add.w	r0, sl, #1
 800415e:	6018      	str	r0, [r3, #0]
 8004160:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004162:	2b00      	cmp	r3, #0
 8004164:	f43f acde 	beq.w	8003b24 <_dtoa_r+0x9c>
 8004168:	601f      	str	r7, [r3, #0]
 800416a:	e4db      	b.n	8003b24 <_dtoa_r+0x9c>
 800416c:	4627      	mov	r7, r4
 800416e:	463b      	mov	r3, r7
 8004170:	461f      	mov	r7, r3
 8004172:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004176:	2a39      	cmp	r2, #57	; 0x39
 8004178:	d107      	bne.n	800418a <_dtoa_r+0x702>
 800417a:	9a03      	ldr	r2, [sp, #12]
 800417c:	429a      	cmp	r2, r3
 800417e:	d1f7      	bne.n	8004170 <_dtoa_r+0x6e8>
 8004180:	2230      	movs	r2, #48	; 0x30
 8004182:	9903      	ldr	r1, [sp, #12]
 8004184:	f108 0801 	add.w	r8, r8, #1
 8004188:	700a      	strb	r2, [r1, #0]
 800418a:	781a      	ldrb	r2, [r3, #0]
 800418c:	3201      	adds	r2, #1
 800418e:	701a      	strb	r2, [r3, #0]
 8004190:	e79e      	b.n	80040d0 <_dtoa_r+0x648>
 8004192:	46d0      	mov	r8, sl
 8004194:	e7eb      	b.n	800416e <_dtoa_r+0x6e6>
 8004196:	2200      	movs	r2, #0
 8004198:	4b6e      	ldr	r3, [pc, #440]	; (8004354 <_dtoa_r+0x8cc>)
 800419a:	f7fc f99d 	bl	80004d8 <__aeabi_dmul>
 800419e:	2200      	movs	r2, #0
 80041a0:	2300      	movs	r3, #0
 80041a2:	4680      	mov	r8, r0
 80041a4:	4689      	mov	r9, r1
 80041a6:	f7fc fbff 	bl	80009a8 <__aeabi_dcmpeq>
 80041aa:	2800      	cmp	r0, #0
 80041ac:	d09b      	beq.n	80040e6 <_dtoa_r+0x65e>
 80041ae:	e7cd      	b.n	800414c <_dtoa_r+0x6c4>
 80041b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80041b2:	2a00      	cmp	r2, #0
 80041b4:	f000 80d0 	beq.w	8004358 <_dtoa_r+0x8d0>
 80041b8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80041ba:	2a01      	cmp	r2, #1
 80041bc:	f300 80ae 	bgt.w	800431c <_dtoa_r+0x894>
 80041c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80041c2:	2a00      	cmp	r2, #0
 80041c4:	f000 80a6 	beq.w	8004314 <_dtoa_r+0x88c>
 80041c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80041cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80041ce:	9f06      	ldr	r7, [sp, #24]
 80041d0:	9a06      	ldr	r2, [sp, #24]
 80041d2:	2101      	movs	r1, #1
 80041d4:	441a      	add	r2, r3
 80041d6:	9206      	str	r2, [sp, #24]
 80041d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041da:	4628      	mov	r0, r5
 80041dc:	441a      	add	r2, r3
 80041de:	9209      	str	r2, [sp, #36]	; 0x24
 80041e0:	f000 fb5e 	bl	80048a0 <__i2b>
 80041e4:	4606      	mov	r6, r0
 80041e6:	2f00      	cmp	r7, #0
 80041e8:	dd0c      	ble.n	8004204 <_dtoa_r+0x77c>
 80041ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	dd09      	ble.n	8004204 <_dtoa_r+0x77c>
 80041f0:	42bb      	cmp	r3, r7
 80041f2:	bfa8      	it	ge
 80041f4:	463b      	movge	r3, r7
 80041f6:	9a06      	ldr	r2, [sp, #24]
 80041f8:	1aff      	subs	r7, r7, r3
 80041fa:	1ad2      	subs	r2, r2, r3
 80041fc:	9206      	str	r2, [sp, #24]
 80041fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	9309      	str	r3, [sp, #36]	; 0x24
 8004204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004206:	b1f3      	cbz	r3, 8004246 <_dtoa_r+0x7be>
 8004208:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800420a:	2b00      	cmp	r3, #0
 800420c:	f000 80a8 	beq.w	8004360 <_dtoa_r+0x8d8>
 8004210:	2c00      	cmp	r4, #0
 8004212:	dd10      	ble.n	8004236 <_dtoa_r+0x7ae>
 8004214:	4631      	mov	r1, r6
 8004216:	4622      	mov	r2, r4
 8004218:	4628      	mov	r0, r5
 800421a:	f000 fbff 	bl	8004a1c <__pow5mult>
 800421e:	465a      	mov	r2, fp
 8004220:	4601      	mov	r1, r0
 8004222:	4606      	mov	r6, r0
 8004224:	4628      	mov	r0, r5
 8004226:	f000 fb51 	bl	80048cc <__multiply>
 800422a:	4680      	mov	r8, r0
 800422c:	4659      	mov	r1, fp
 800422e:	4628      	mov	r0, r5
 8004230:	f000 fa80 	bl	8004734 <_Bfree>
 8004234:	46c3      	mov	fp, r8
 8004236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004238:	1b1a      	subs	r2, r3, r4
 800423a:	d004      	beq.n	8004246 <_dtoa_r+0x7be>
 800423c:	4659      	mov	r1, fp
 800423e:	4628      	mov	r0, r5
 8004240:	f000 fbec 	bl	8004a1c <__pow5mult>
 8004244:	4683      	mov	fp, r0
 8004246:	2101      	movs	r1, #1
 8004248:	4628      	mov	r0, r5
 800424a:	f000 fb29 	bl	80048a0 <__i2b>
 800424e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004250:	4604      	mov	r4, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	f340 8086 	ble.w	8004364 <_dtoa_r+0x8dc>
 8004258:	461a      	mov	r2, r3
 800425a:	4601      	mov	r1, r0
 800425c:	4628      	mov	r0, r5
 800425e:	f000 fbdd 	bl	8004a1c <__pow5mult>
 8004262:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004264:	4604      	mov	r4, r0
 8004266:	2b01      	cmp	r3, #1
 8004268:	dd7f      	ble.n	800436a <_dtoa_r+0x8e2>
 800426a:	f04f 0800 	mov.w	r8, #0
 800426e:	6923      	ldr	r3, [r4, #16]
 8004270:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004274:	6918      	ldr	r0, [r3, #16]
 8004276:	f000 fac5 	bl	8004804 <__hi0bits>
 800427a:	f1c0 0020 	rsb	r0, r0, #32
 800427e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004280:	4418      	add	r0, r3
 8004282:	f010 001f 	ands.w	r0, r0, #31
 8004286:	f000 8092 	beq.w	80043ae <_dtoa_r+0x926>
 800428a:	f1c0 0320 	rsb	r3, r0, #32
 800428e:	2b04      	cmp	r3, #4
 8004290:	f340 808a 	ble.w	80043a8 <_dtoa_r+0x920>
 8004294:	f1c0 001c 	rsb	r0, r0, #28
 8004298:	9b06      	ldr	r3, [sp, #24]
 800429a:	4407      	add	r7, r0
 800429c:	4403      	add	r3, r0
 800429e:	9306      	str	r3, [sp, #24]
 80042a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042a2:	4403      	add	r3, r0
 80042a4:	9309      	str	r3, [sp, #36]	; 0x24
 80042a6:	9b06      	ldr	r3, [sp, #24]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	dd05      	ble.n	80042b8 <_dtoa_r+0x830>
 80042ac:	4659      	mov	r1, fp
 80042ae:	461a      	mov	r2, r3
 80042b0:	4628      	mov	r0, r5
 80042b2:	f000 fc0d 	bl	8004ad0 <__lshift>
 80042b6:	4683      	mov	fp, r0
 80042b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	dd05      	ble.n	80042ca <_dtoa_r+0x842>
 80042be:	4621      	mov	r1, r4
 80042c0:	461a      	mov	r2, r3
 80042c2:	4628      	mov	r0, r5
 80042c4:	f000 fc04 	bl	8004ad0 <__lshift>
 80042c8:	4604      	mov	r4, r0
 80042ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d070      	beq.n	80043b2 <_dtoa_r+0x92a>
 80042d0:	4621      	mov	r1, r4
 80042d2:	4658      	mov	r0, fp
 80042d4:	f000 fc6c 	bl	8004bb0 <__mcmp>
 80042d8:	2800      	cmp	r0, #0
 80042da:	da6a      	bge.n	80043b2 <_dtoa_r+0x92a>
 80042dc:	2300      	movs	r3, #0
 80042de:	4659      	mov	r1, fp
 80042e0:	220a      	movs	r2, #10
 80042e2:	4628      	mov	r0, r5
 80042e4:	f000 fa48 	bl	8004778 <__multadd>
 80042e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80042ea:	4683      	mov	fp, r0
 80042ec:	f10a 3aff 	add.w	sl, sl, #4294967295
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f000 8194 	beq.w	800461e <_dtoa_r+0xb96>
 80042f6:	4631      	mov	r1, r6
 80042f8:	2300      	movs	r3, #0
 80042fa:	220a      	movs	r2, #10
 80042fc:	4628      	mov	r0, r5
 80042fe:	f000 fa3b 	bl	8004778 <__multadd>
 8004302:	f1b9 0f00 	cmp.w	r9, #0
 8004306:	4606      	mov	r6, r0
 8004308:	f300 8093 	bgt.w	8004432 <_dtoa_r+0x9aa>
 800430c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800430e:	2b02      	cmp	r3, #2
 8004310:	dc57      	bgt.n	80043c2 <_dtoa_r+0x93a>
 8004312:	e08e      	b.n	8004432 <_dtoa_r+0x9aa>
 8004314:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004316:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800431a:	e757      	b.n	80041cc <_dtoa_r+0x744>
 800431c:	9b08      	ldr	r3, [sp, #32]
 800431e:	1e5c      	subs	r4, r3, #1
 8004320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004322:	42a3      	cmp	r3, r4
 8004324:	bfb7      	itett	lt
 8004326:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004328:	1b1c      	subge	r4, r3, r4
 800432a:	1ae2      	sublt	r2, r4, r3
 800432c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800432e:	bfbe      	ittt	lt
 8004330:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004332:	189b      	addlt	r3, r3, r2
 8004334:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004336:	9b08      	ldr	r3, [sp, #32]
 8004338:	bfb8      	it	lt
 800433a:	2400      	movlt	r4, #0
 800433c:	2b00      	cmp	r3, #0
 800433e:	bfbb      	ittet	lt
 8004340:	9b06      	ldrlt	r3, [sp, #24]
 8004342:	9a08      	ldrlt	r2, [sp, #32]
 8004344:	9f06      	ldrge	r7, [sp, #24]
 8004346:	1a9f      	sublt	r7, r3, r2
 8004348:	bfac      	ite	ge
 800434a:	9b08      	ldrge	r3, [sp, #32]
 800434c:	2300      	movlt	r3, #0
 800434e:	e73f      	b.n	80041d0 <_dtoa_r+0x748>
 8004350:	3fe00000 	.word	0x3fe00000
 8004354:	40240000 	.word	0x40240000
 8004358:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800435a:	9f06      	ldr	r7, [sp, #24]
 800435c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800435e:	e742      	b.n	80041e6 <_dtoa_r+0x75e>
 8004360:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004362:	e76b      	b.n	800423c <_dtoa_r+0x7b4>
 8004364:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004366:	2b01      	cmp	r3, #1
 8004368:	dc19      	bgt.n	800439e <_dtoa_r+0x916>
 800436a:	9b04      	ldr	r3, [sp, #16]
 800436c:	b9bb      	cbnz	r3, 800439e <_dtoa_r+0x916>
 800436e:	9b05      	ldr	r3, [sp, #20]
 8004370:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004374:	b99b      	cbnz	r3, 800439e <_dtoa_r+0x916>
 8004376:	9b05      	ldr	r3, [sp, #20]
 8004378:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800437c:	0d1b      	lsrs	r3, r3, #20
 800437e:	051b      	lsls	r3, r3, #20
 8004380:	b183      	cbz	r3, 80043a4 <_dtoa_r+0x91c>
 8004382:	f04f 0801 	mov.w	r8, #1
 8004386:	9b06      	ldr	r3, [sp, #24]
 8004388:	3301      	adds	r3, #1
 800438a:	9306      	str	r3, [sp, #24]
 800438c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800438e:	3301      	adds	r3, #1
 8004390:	9309      	str	r3, [sp, #36]	; 0x24
 8004392:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004394:	2b00      	cmp	r3, #0
 8004396:	f47f af6a 	bne.w	800426e <_dtoa_r+0x7e6>
 800439a:	2001      	movs	r0, #1
 800439c:	e76f      	b.n	800427e <_dtoa_r+0x7f6>
 800439e:	f04f 0800 	mov.w	r8, #0
 80043a2:	e7f6      	b.n	8004392 <_dtoa_r+0x90a>
 80043a4:	4698      	mov	r8, r3
 80043a6:	e7f4      	b.n	8004392 <_dtoa_r+0x90a>
 80043a8:	f43f af7d 	beq.w	80042a6 <_dtoa_r+0x81e>
 80043ac:	4618      	mov	r0, r3
 80043ae:	301c      	adds	r0, #28
 80043b0:	e772      	b.n	8004298 <_dtoa_r+0x810>
 80043b2:	9b08      	ldr	r3, [sp, #32]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	dc36      	bgt.n	8004426 <_dtoa_r+0x99e>
 80043b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	dd33      	ble.n	8004426 <_dtoa_r+0x99e>
 80043be:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80043c2:	f1b9 0f00 	cmp.w	r9, #0
 80043c6:	d10d      	bne.n	80043e4 <_dtoa_r+0x95c>
 80043c8:	4621      	mov	r1, r4
 80043ca:	464b      	mov	r3, r9
 80043cc:	2205      	movs	r2, #5
 80043ce:	4628      	mov	r0, r5
 80043d0:	f000 f9d2 	bl	8004778 <__multadd>
 80043d4:	4601      	mov	r1, r0
 80043d6:	4604      	mov	r4, r0
 80043d8:	4658      	mov	r0, fp
 80043da:	f000 fbe9 	bl	8004bb0 <__mcmp>
 80043de:	2800      	cmp	r0, #0
 80043e0:	f73f adb8 	bgt.w	8003f54 <_dtoa_r+0x4cc>
 80043e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80043e6:	9f03      	ldr	r7, [sp, #12]
 80043e8:	ea6f 0a03 	mvn.w	sl, r3
 80043ec:	f04f 0800 	mov.w	r8, #0
 80043f0:	4621      	mov	r1, r4
 80043f2:	4628      	mov	r0, r5
 80043f4:	f000 f99e 	bl	8004734 <_Bfree>
 80043f8:	2e00      	cmp	r6, #0
 80043fa:	f43f aea7 	beq.w	800414c <_dtoa_r+0x6c4>
 80043fe:	f1b8 0f00 	cmp.w	r8, #0
 8004402:	d005      	beq.n	8004410 <_dtoa_r+0x988>
 8004404:	45b0      	cmp	r8, r6
 8004406:	d003      	beq.n	8004410 <_dtoa_r+0x988>
 8004408:	4641      	mov	r1, r8
 800440a:	4628      	mov	r0, r5
 800440c:	f000 f992 	bl	8004734 <_Bfree>
 8004410:	4631      	mov	r1, r6
 8004412:	4628      	mov	r0, r5
 8004414:	f000 f98e 	bl	8004734 <_Bfree>
 8004418:	e698      	b.n	800414c <_dtoa_r+0x6c4>
 800441a:	2400      	movs	r4, #0
 800441c:	4626      	mov	r6, r4
 800441e:	e7e1      	b.n	80043e4 <_dtoa_r+0x95c>
 8004420:	46c2      	mov	sl, r8
 8004422:	4626      	mov	r6, r4
 8004424:	e596      	b.n	8003f54 <_dtoa_r+0x4cc>
 8004426:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004428:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800442c:	2b00      	cmp	r3, #0
 800442e:	f000 80fd 	beq.w	800462c <_dtoa_r+0xba4>
 8004432:	2f00      	cmp	r7, #0
 8004434:	dd05      	ble.n	8004442 <_dtoa_r+0x9ba>
 8004436:	4631      	mov	r1, r6
 8004438:	463a      	mov	r2, r7
 800443a:	4628      	mov	r0, r5
 800443c:	f000 fb48 	bl	8004ad0 <__lshift>
 8004440:	4606      	mov	r6, r0
 8004442:	f1b8 0f00 	cmp.w	r8, #0
 8004446:	d05c      	beq.n	8004502 <_dtoa_r+0xa7a>
 8004448:	4628      	mov	r0, r5
 800444a:	6871      	ldr	r1, [r6, #4]
 800444c:	f000 f932 	bl	80046b4 <_Balloc>
 8004450:	4607      	mov	r7, r0
 8004452:	b928      	cbnz	r0, 8004460 <_dtoa_r+0x9d8>
 8004454:	4602      	mov	r2, r0
 8004456:	f240 21ea 	movw	r1, #746	; 0x2ea
 800445a:	4b7f      	ldr	r3, [pc, #508]	; (8004658 <_dtoa_r+0xbd0>)
 800445c:	f7ff bb28 	b.w	8003ab0 <_dtoa_r+0x28>
 8004460:	6932      	ldr	r2, [r6, #16]
 8004462:	f106 010c 	add.w	r1, r6, #12
 8004466:	3202      	adds	r2, #2
 8004468:	0092      	lsls	r2, r2, #2
 800446a:	300c      	adds	r0, #12
 800446c:	f000 f914 	bl	8004698 <memcpy>
 8004470:	2201      	movs	r2, #1
 8004472:	4639      	mov	r1, r7
 8004474:	4628      	mov	r0, r5
 8004476:	f000 fb2b 	bl	8004ad0 <__lshift>
 800447a:	46b0      	mov	r8, r6
 800447c:	4606      	mov	r6, r0
 800447e:	9b03      	ldr	r3, [sp, #12]
 8004480:	3301      	adds	r3, #1
 8004482:	9308      	str	r3, [sp, #32]
 8004484:	9b03      	ldr	r3, [sp, #12]
 8004486:	444b      	add	r3, r9
 8004488:	930a      	str	r3, [sp, #40]	; 0x28
 800448a:	9b04      	ldr	r3, [sp, #16]
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	9309      	str	r3, [sp, #36]	; 0x24
 8004492:	9b08      	ldr	r3, [sp, #32]
 8004494:	4621      	mov	r1, r4
 8004496:	3b01      	subs	r3, #1
 8004498:	4658      	mov	r0, fp
 800449a:	9304      	str	r3, [sp, #16]
 800449c:	f7ff fa66 	bl	800396c <quorem>
 80044a0:	4603      	mov	r3, r0
 80044a2:	4641      	mov	r1, r8
 80044a4:	3330      	adds	r3, #48	; 0x30
 80044a6:	9006      	str	r0, [sp, #24]
 80044a8:	4658      	mov	r0, fp
 80044aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80044ac:	f000 fb80 	bl	8004bb0 <__mcmp>
 80044b0:	4632      	mov	r2, r6
 80044b2:	4681      	mov	r9, r0
 80044b4:	4621      	mov	r1, r4
 80044b6:	4628      	mov	r0, r5
 80044b8:	f000 fb96 	bl	8004be8 <__mdiff>
 80044bc:	68c2      	ldr	r2, [r0, #12]
 80044be:	4607      	mov	r7, r0
 80044c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80044c2:	bb02      	cbnz	r2, 8004506 <_dtoa_r+0xa7e>
 80044c4:	4601      	mov	r1, r0
 80044c6:	4658      	mov	r0, fp
 80044c8:	f000 fb72 	bl	8004bb0 <__mcmp>
 80044cc:	4602      	mov	r2, r0
 80044ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80044d0:	4639      	mov	r1, r7
 80044d2:	4628      	mov	r0, r5
 80044d4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80044d8:	f000 f92c 	bl	8004734 <_Bfree>
 80044dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80044de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80044e0:	9f08      	ldr	r7, [sp, #32]
 80044e2:	ea43 0102 	orr.w	r1, r3, r2
 80044e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044e8:	430b      	orrs	r3, r1
 80044ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80044ec:	d10d      	bne.n	800450a <_dtoa_r+0xa82>
 80044ee:	2b39      	cmp	r3, #57	; 0x39
 80044f0:	d029      	beq.n	8004546 <_dtoa_r+0xabe>
 80044f2:	f1b9 0f00 	cmp.w	r9, #0
 80044f6:	dd01      	ble.n	80044fc <_dtoa_r+0xa74>
 80044f8:	9b06      	ldr	r3, [sp, #24]
 80044fa:	3331      	adds	r3, #49	; 0x31
 80044fc:	9a04      	ldr	r2, [sp, #16]
 80044fe:	7013      	strb	r3, [r2, #0]
 8004500:	e776      	b.n	80043f0 <_dtoa_r+0x968>
 8004502:	4630      	mov	r0, r6
 8004504:	e7b9      	b.n	800447a <_dtoa_r+0x9f2>
 8004506:	2201      	movs	r2, #1
 8004508:	e7e2      	b.n	80044d0 <_dtoa_r+0xa48>
 800450a:	f1b9 0f00 	cmp.w	r9, #0
 800450e:	db06      	blt.n	800451e <_dtoa_r+0xa96>
 8004510:	9922      	ldr	r1, [sp, #136]	; 0x88
 8004512:	ea41 0909 	orr.w	r9, r1, r9
 8004516:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004518:	ea59 0101 	orrs.w	r1, r9, r1
 800451c:	d120      	bne.n	8004560 <_dtoa_r+0xad8>
 800451e:	2a00      	cmp	r2, #0
 8004520:	ddec      	ble.n	80044fc <_dtoa_r+0xa74>
 8004522:	4659      	mov	r1, fp
 8004524:	2201      	movs	r2, #1
 8004526:	4628      	mov	r0, r5
 8004528:	9308      	str	r3, [sp, #32]
 800452a:	f000 fad1 	bl	8004ad0 <__lshift>
 800452e:	4621      	mov	r1, r4
 8004530:	4683      	mov	fp, r0
 8004532:	f000 fb3d 	bl	8004bb0 <__mcmp>
 8004536:	2800      	cmp	r0, #0
 8004538:	9b08      	ldr	r3, [sp, #32]
 800453a:	dc02      	bgt.n	8004542 <_dtoa_r+0xaba>
 800453c:	d1de      	bne.n	80044fc <_dtoa_r+0xa74>
 800453e:	07da      	lsls	r2, r3, #31
 8004540:	d5dc      	bpl.n	80044fc <_dtoa_r+0xa74>
 8004542:	2b39      	cmp	r3, #57	; 0x39
 8004544:	d1d8      	bne.n	80044f8 <_dtoa_r+0xa70>
 8004546:	2339      	movs	r3, #57	; 0x39
 8004548:	9a04      	ldr	r2, [sp, #16]
 800454a:	7013      	strb	r3, [r2, #0]
 800454c:	463b      	mov	r3, r7
 800454e:	461f      	mov	r7, r3
 8004550:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004554:	3b01      	subs	r3, #1
 8004556:	2a39      	cmp	r2, #57	; 0x39
 8004558:	d050      	beq.n	80045fc <_dtoa_r+0xb74>
 800455a:	3201      	adds	r2, #1
 800455c:	701a      	strb	r2, [r3, #0]
 800455e:	e747      	b.n	80043f0 <_dtoa_r+0x968>
 8004560:	2a00      	cmp	r2, #0
 8004562:	dd03      	ble.n	800456c <_dtoa_r+0xae4>
 8004564:	2b39      	cmp	r3, #57	; 0x39
 8004566:	d0ee      	beq.n	8004546 <_dtoa_r+0xabe>
 8004568:	3301      	adds	r3, #1
 800456a:	e7c7      	b.n	80044fc <_dtoa_r+0xa74>
 800456c:	9a08      	ldr	r2, [sp, #32]
 800456e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004570:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004574:	428a      	cmp	r2, r1
 8004576:	d02a      	beq.n	80045ce <_dtoa_r+0xb46>
 8004578:	4659      	mov	r1, fp
 800457a:	2300      	movs	r3, #0
 800457c:	220a      	movs	r2, #10
 800457e:	4628      	mov	r0, r5
 8004580:	f000 f8fa 	bl	8004778 <__multadd>
 8004584:	45b0      	cmp	r8, r6
 8004586:	4683      	mov	fp, r0
 8004588:	f04f 0300 	mov.w	r3, #0
 800458c:	f04f 020a 	mov.w	r2, #10
 8004590:	4641      	mov	r1, r8
 8004592:	4628      	mov	r0, r5
 8004594:	d107      	bne.n	80045a6 <_dtoa_r+0xb1e>
 8004596:	f000 f8ef 	bl	8004778 <__multadd>
 800459a:	4680      	mov	r8, r0
 800459c:	4606      	mov	r6, r0
 800459e:	9b08      	ldr	r3, [sp, #32]
 80045a0:	3301      	adds	r3, #1
 80045a2:	9308      	str	r3, [sp, #32]
 80045a4:	e775      	b.n	8004492 <_dtoa_r+0xa0a>
 80045a6:	f000 f8e7 	bl	8004778 <__multadd>
 80045aa:	4631      	mov	r1, r6
 80045ac:	4680      	mov	r8, r0
 80045ae:	2300      	movs	r3, #0
 80045b0:	220a      	movs	r2, #10
 80045b2:	4628      	mov	r0, r5
 80045b4:	f000 f8e0 	bl	8004778 <__multadd>
 80045b8:	4606      	mov	r6, r0
 80045ba:	e7f0      	b.n	800459e <_dtoa_r+0xb16>
 80045bc:	f1b9 0f00 	cmp.w	r9, #0
 80045c0:	bfcc      	ite	gt
 80045c2:	464f      	movgt	r7, r9
 80045c4:	2701      	movle	r7, #1
 80045c6:	f04f 0800 	mov.w	r8, #0
 80045ca:	9a03      	ldr	r2, [sp, #12]
 80045cc:	4417      	add	r7, r2
 80045ce:	4659      	mov	r1, fp
 80045d0:	2201      	movs	r2, #1
 80045d2:	4628      	mov	r0, r5
 80045d4:	9308      	str	r3, [sp, #32]
 80045d6:	f000 fa7b 	bl	8004ad0 <__lshift>
 80045da:	4621      	mov	r1, r4
 80045dc:	4683      	mov	fp, r0
 80045de:	f000 fae7 	bl	8004bb0 <__mcmp>
 80045e2:	2800      	cmp	r0, #0
 80045e4:	dcb2      	bgt.n	800454c <_dtoa_r+0xac4>
 80045e6:	d102      	bne.n	80045ee <_dtoa_r+0xb66>
 80045e8:	9b08      	ldr	r3, [sp, #32]
 80045ea:	07db      	lsls	r3, r3, #31
 80045ec:	d4ae      	bmi.n	800454c <_dtoa_r+0xac4>
 80045ee:	463b      	mov	r3, r7
 80045f0:	461f      	mov	r7, r3
 80045f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80045f6:	2a30      	cmp	r2, #48	; 0x30
 80045f8:	d0fa      	beq.n	80045f0 <_dtoa_r+0xb68>
 80045fa:	e6f9      	b.n	80043f0 <_dtoa_r+0x968>
 80045fc:	9a03      	ldr	r2, [sp, #12]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d1a5      	bne.n	800454e <_dtoa_r+0xac6>
 8004602:	2331      	movs	r3, #49	; 0x31
 8004604:	f10a 0a01 	add.w	sl, sl, #1
 8004608:	e779      	b.n	80044fe <_dtoa_r+0xa76>
 800460a:	4b14      	ldr	r3, [pc, #80]	; (800465c <_dtoa_r+0xbd4>)
 800460c:	f7ff baa8 	b.w	8003b60 <_dtoa_r+0xd8>
 8004610:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004612:	2b00      	cmp	r3, #0
 8004614:	f47f aa81 	bne.w	8003b1a <_dtoa_r+0x92>
 8004618:	4b11      	ldr	r3, [pc, #68]	; (8004660 <_dtoa_r+0xbd8>)
 800461a:	f7ff baa1 	b.w	8003b60 <_dtoa_r+0xd8>
 800461e:	f1b9 0f00 	cmp.w	r9, #0
 8004622:	dc03      	bgt.n	800462c <_dtoa_r+0xba4>
 8004624:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004626:	2b02      	cmp	r3, #2
 8004628:	f73f aecb 	bgt.w	80043c2 <_dtoa_r+0x93a>
 800462c:	9f03      	ldr	r7, [sp, #12]
 800462e:	4621      	mov	r1, r4
 8004630:	4658      	mov	r0, fp
 8004632:	f7ff f99b 	bl	800396c <quorem>
 8004636:	9a03      	ldr	r2, [sp, #12]
 8004638:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800463c:	f807 3b01 	strb.w	r3, [r7], #1
 8004640:	1aba      	subs	r2, r7, r2
 8004642:	4591      	cmp	r9, r2
 8004644:	ddba      	ble.n	80045bc <_dtoa_r+0xb34>
 8004646:	4659      	mov	r1, fp
 8004648:	2300      	movs	r3, #0
 800464a:	220a      	movs	r2, #10
 800464c:	4628      	mov	r0, r5
 800464e:	f000 f893 	bl	8004778 <__multadd>
 8004652:	4683      	mov	fp, r0
 8004654:	e7eb      	b.n	800462e <_dtoa_r+0xba6>
 8004656:	bf00      	nop
 8004658:	08008cab 	.word	0x08008cab
 800465c:	08008c08 	.word	0x08008c08
 8004660:	08008c2c 	.word	0x08008c2c

08004664 <_localeconv_r>:
 8004664:	4800      	ldr	r0, [pc, #0]	; (8004668 <_localeconv_r+0x4>)
 8004666:	4770      	bx	lr
 8004668:	20000160 	.word	0x20000160

0800466c <malloc>:
 800466c:	4b02      	ldr	r3, [pc, #8]	; (8004678 <malloc+0xc>)
 800466e:	4601      	mov	r1, r0
 8004670:	6818      	ldr	r0, [r3, #0]
 8004672:	f000 bc1d 	b.w	8004eb0 <_malloc_r>
 8004676:	bf00      	nop
 8004678:	2000000c 	.word	0x2000000c

0800467c <memchr>:
 800467c:	4603      	mov	r3, r0
 800467e:	b510      	push	{r4, lr}
 8004680:	b2c9      	uxtb	r1, r1
 8004682:	4402      	add	r2, r0
 8004684:	4293      	cmp	r3, r2
 8004686:	4618      	mov	r0, r3
 8004688:	d101      	bne.n	800468e <memchr+0x12>
 800468a:	2000      	movs	r0, #0
 800468c:	e003      	b.n	8004696 <memchr+0x1a>
 800468e:	7804      	ldrb	r4, [r0, #0]
 8004690:	3301      	adds	r3, #1
 8004692:	428c      	cmp	r4, r1
 8004694:	d1f6      	bne.n	8004684 <memchr+0x8>
 8004696:	bd10      	pop	{r4, pc}

08004698 <memcpy>:
 8004698:	440a      	add	r2, r1
 800469a:	4291      	cmp	r1, r2
 800469c:	f100 33ff 	add.w	r3, r0, #4294967295
 80046a0:	d100      	bne.n	80046a4 <memcpy+0xc>
 80046a2:	4770      	bx	lr
 80046a4:	b510      	push	{r4, lr}
 80046a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046aa:	4291      	cmp	r1, r2
 80046ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046b0:	d1f9      	bne.n	80046a6 <memcpy+0xe>
 80046b2:	bd10      	pop	{r4, pc}

080046b4 <_Balloc>:
 80046b4:	b570      	push	{r4, r5, r6, lr}
 80046b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80046b8:	4604      	mov	r4, r0
 80046ba:	460d      	mov	r5, r1
 80046bc:	b976      	cbnz	r6, 80046dc <_Balloc+0x28>
 80046be:	2010      	movs	r0, #16
 80046c0:	f7ff ffd4 	bl	800466c <malloc>
 80046c4:	4602      	mov	r2, r0
 80046c6:	6260      	str	r0, [r4, #36]	; 0x24
 80046c8:	b920      	cbnz	r0, 80046d4 <_Balloc+0x20>
 80046ca:	2166      	movs	r1, #102	; 0x66
 80046cc:	4b17      	ldr	r3, [pc, #92]	; (800472c <_Balloc+0x78>)
 80046ce:	4818      	ldr	r0, [pc, #96]	; (8004730 <_Balloc+0x7c>)
 80046d0:	f000 fdce 	bl	8005270 <__assert_func>
 80046d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80046d8:	6006      	str	r6, [r0, #0]
 80046da:	60c6      	str	r6, [r0, #12]
 80046dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80046de:	68f3      	ldr	r3, [r6, #12]
 80046e0:	b183      	cbz	r3, 8004704 <_Balloc+0x50>
 80046e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80046ea:	b9b8      	cbnz	r0, 800471c <_Balloc+0x68>
 80046ec:	2101      	movs	r1, #1
 80046ee:	fa01 f605 	lsl.w	r6, r1, r5
 80046f2:	1d72      	adds	r2, r6, #5
 80046f4:	4620      	mov	r0, r4
 80046f6:	0092      	lsls	r2, r2, #2
 80046f8:	f000 fb5e 	bl	8004db8 <_calloc_r>
 80046fc:	b160      	cbz	r0, 8004718 <_Balloc+0x64>
 80046fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004702:	e00e      	b.n	8004722 <_Balloc+0x6e>
 8004704:	2221      	movs	r2, #33	; 0x21
 8004706:	2104      	movs	r1, #4
 8004708:	4620      	mov	r0, r4
 800470a:	f000 fb55 	bl	8004db8 <_calloc_r>
 800470e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004710:	60f0      	str	r0, [r6, #12]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1e4      	bne.n	80046e2 <_Balloc+0x2e>
 8004718:	2000      	movs	r0, #0
 800471a:	bd70      	pop	{r4, r5, r6, pc}
 800471c:	6802      	ldr	r2, [r0, #0]
 800471e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004722:	2300      	movs	r3, #0
 8004724:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004728:	e7f7      	b.n	800471a <_Balloc+0x66>
 800472a:	bf00      	nop
 800472c:	08008c39 	.word	0x08008c39
 8004730:	08008cbc 	.word	0x08008cbc

08004734 <_Bfree>:
 8004734:	b570      	push	{r4, r5, r6, lr}
 8004736:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004738:	4605      	mov	r5, r0
 800473a:	460c      	mov	r4, r1
 800473c:	b976      	cbnz	r6, 800475c <_Bfree+0x28>
 800473e:	2010      	movs	r0, #16
 8004740:	f7ff ff94 	bl	800466c <malloc>
 8004744:	4602      	mov	r2, r0
 8004746:	6268      	str	r0, [r5, #36]	; 0x24
 8004748:	b920      	cbnz	r0, 8004754 <_Bfree+0x20>
 800474a:	218a      	movs	r1, #138	; 0x8a
 800474c:	4b08      	ldr	r3, [pc, #32]	; (8004770 <_Bfree+0x3c>)
 800474e:	4809      	ldr	r0, [pc, #36]	; (8004774 <_Bfree+0x40>)
 8004750:	f000 fd8e 	bl	8005270 <__assert_func>
 8004754:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004758:	6006      	str	r6, [r0, #0]
 800475a:	60c6      	str	r6, [r0, #12]
 800475c:	b13c      	cbz	r4, 800476e <_Bfree+0x3a>
 800475e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004760:	6862      	ldr	r2, [r4, #4]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004768:	6021      	str	r1, [r4, #0]
 800476a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800476e:	bd70      	pop	{r4, r5, r6, pc}
 8004770:	08008c39 	.word	0x08008c39
 8004774:	08008cbc 	.word	0x08008cbc

08004778 <__multadd>:
 8004778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800477c:	4607      	mov	r7, r0
 800477e:	460c      	mov	r4, r1
 8004780:	461e      	mov	r6, r3
 8004782:	2000      	movs	r0, #0
 8004784:	690d      	ldr	r5, [r1, #16]
 8004786:	f101 0c14 	add.w	ip, r1, #20
 800478a:	f8dc 3000 	ldr.w	r3, [ip]
 800478e:	3001      	adds	r0, #1
 8004790:	b299      	uxth	r1, r3
 8004792:	fb02 6101 	mla	r1, r2, r1, r6
 8004796:	0c1e      	lsrs	r6, r3, #16
 8004798:	0c0b      	lsrs	r3, r1, #16
 800479a:	fb02 3306 	mla	r3, r2, r6, r3
 800479e:	b289      	uxth	r1, r1
 80047a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80047a4:	4285      	cmp	r5, r0
 80047a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80047aa:	f84c 1b04 	str.w	r1, [ip], #4
 80047ae:	dcec      	bgt.n	800478a <__multadd+0x12>
 80047b0:	b30e      	cbz	r6, 80047f6 <__multadd+0x7e>
 80047b2:	68a3      	ldr	r3, [r4, #8]
 80047b4:	42ab      	cmp	r3, r5
 80047b6:	dc19      	bgt.n	80047ec <__multadd+0x74>
 80047b8:	6861      	ldr	r1, [r4, #4]
 80047ba:	4638      	mov	r0, r7
 80047bc:	3101      	adds	r1, #1
 80047be:	f7ff ff79 	bl	80046b4 <_Balloc>
 80047c2:	4680      	mov	r8, r0
 80047c4:	b928      	cbnz	r0, 80047d2 <__multadd+0x5a>
 80047c6:	4602      	mov	r2, r0
 80047c8:	21b5      	movs	r1, #181	; 0xb5
 80047ca:	4b0c      	ldr	r3, [pc, #48]	; (80047fc <__multadd+0x84>)
 80047cc:	480c      	ldr	r0, [pc, #48]	; (8004800 <__multadd+0x88>)
 80047ce:	f000 fd4f 	bl	8005270 <__assert_func>
 80047d2:	6922      	ldr	r2, [r4, #16]
 80047d4:	f104 010c 	add.w	r1, r4, #12
 80047d8:	3202      	adds	r2, #2
 80047da:	0092      	lsls	r2, r2, #2
 80047dc:	300c      	adds	r0, #12
 80047de:	f7ff ff5b 	bl	8004698 <memcpy>
 80047e2:	4621      	mov	r1, r4
 80047e4:	4638      	mov	r0, r7
 80047e6:	f7ff ffa5 	bl	8004734 <_Bfree>
 80047ea:	4644      	mov	r4, r8
 80047ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80047f0:	3501      	adds	r5, #1
 80047f2:	615e      	str	r6, [r3, #20]
 80047f4:	6125      	str	r5, [r4, #16]
 80047f6:	4620      	mov	r0, r4
 80047f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047fc:	08008cab 	.word	0x08008cab
 8004800:	08008cbc 	.word	0x08008cbc

08004804 <__hi0bits>:
 8004804:	0c02      	lsrs	r2, r0, #16
 8004806:	0412      	lsls	r2, r2, #16
 8004808:	4603      	mov	r3, r0
 800480a:	b9ca      	cbnz	r2, 8004840 <__hi0bits+0x3c>
 800480c:	0403      	lsls	r3, r0, #16
 800480e:	2010      	movs	r0, #16
 8004810:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004814:	bf04      	itt	eq
 8004816:	021b      	lsleq	r3, r3, #8
 8004818:	3008      	addeq	r0, #8
 800481a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800481e:	bf04      	itt	eq
 8004820:	011b      	lsleq	r3, r3, #4
 8004822:	3004      	addeq	r0, #4
 8004824:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004828:	bf04      	itt	eq
 800482a:	009b      	lsleq	r3, r3, #2
 800482c:	3002      	addeq	r0, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	db05      	blt.n	800483e <__hi0bits+0x3a>
 8004832:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004836:	f100 0001 	add.w	r0, r0, #1
 800483a:	bf08      	it	eq
 800483c:	2020      	moveq	r0, #32
 800483e:	4770      	bx	lr
 8004840:	2000      	movs	r0, #0
 8004842:	e7e5      	b.n	8004810 <__hi0bits+0xc>

08004844 <__lo0bits>:
 8004844:	6803      	ldr	r3, [r0, #0]
 8004846:	4602      	mov	r2, r0
 8004848:	f013 0007 	ands.w	r0, r3, #7
 800484c:	d00b      	beq.n	8004866 <__lo0bits+0x22>
 800484e:	07d9      	lsls	r1, r3, #31
 8004850:	d421      	bmi.n	8004896 <__lo0bits+0x52>
 8004852:	0798      	lsls	r0, r3, #30
 8004854:	bf49      	itett	mi
 8004856:	085b      	lsrmi	r3, r3, #1
 8004858:	089b      	lsrpl	r3, r3, #2
 800485a:	2001      	movmi	r0, #1
 800485c:	6013      	strmi	r3, [r2, #0]
 800485e:	bf5c      	itt	pl
 8004860:	2002      	movpl	r0, #2
 8004862:	6013      	strpl	r3, [r2, #0]
 8004864:	4770      	bx	lr
 8004866:	b299      	uxth	r1, r3
 8004868:	b909      	cbnz	r1, 800486e <__lo0bits+0x2a>
 800486a:	2010      	movs	r0, #16
 800486c:	0c1b      	lsrs	r3, r3, #16
 800486e:	b2d9      	uxtb	r1, r3
 8004870:	b909      	cbnz	r1, 8004876 <__lo0bits+0x32>
 8004872:	3008      	adds	r0, #8
 8004874:	0a1b      	lsrs	r3, r3, #8
 8004876:	0719      	lsls	r1, r3, #28
 8004878:	bf04      	itt	eq
 800487a:	091b      	lsreq	r3, r3, #4
 800487c:	3004      	addeq	r0, #4
 800487e:	0799      	lsls	r1, r3, #30
 8004880:	bf04      	itt	eq
 8004882:	089b      	lsreq	r3, r3, #2
 8004884:	3002      	addeq	r0, #2
 8004886:	07d9      	lsls	r1, r3, #31
 8004888:	d403      	bmi.n	8004892 <__lo0bits+0x4e>
 800488a:	085b      	lsrs	r3, r3, #1
 800488c:	f100 0001 	add.w	r0, r0, #1
 8004890:	d003      	beq.n	800489a <__lo0bits+0x56>
 8004892:	6013      	str	r3, [r2, #0]
 8004894:	4770      	bx	lr
 8004896:	2000      	movs	r0, #0
 8004898:	4770      	bx	lr
 800489a:	2020      	movs	r0, #32
 800489c:	4770      	bx	lr
	...

080048a0 <__i2b>:
 80048a0:	b510      	push	{r4, lr}
 80048a2:	460c      	mov	r4, r1
 80048a4:	2101      	movs	r1, #1
 80048a6:	f7ff ff05 	bl	80046b4 <_Balloc>
 80048aa:	4602      	mov	r2, r0
 80048ac:	b928      	cbnz	r0, 80048ba <__i2b+0x1a>
 80048ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80048b2:	4b04      	ldr	r3, [pc, #16]	; (80048c4 <__i2b+0x24>)
 80048b4:	4804      	ldr	r0, [pc, #16]	; (80048c8 <__i2b+0x28>)
 80048b6:	f000 fcdb 	bl	8005270 <__assert_func>
 80048ba:	2301      	movs	r3, #1
 80048bc:	6144      	str	r4, [r0, #20]
 80048be:	6103      	str	r3, [r0, #16]
 80048c0:	bd10      	pop	{r4, pc}
 80048c2:	bf00      	nop
 80048c4:	08008cab 	.word	0x08008cab
 80048c8:	08008cbc 	.word	0x08008cbc

080048cc <__multiply>:
 80048cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048d0:	4691      	mov	r9, r2
 80048d2:	690a      	ldr	r2, [r1, #16]
 80048d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80048d8:	460c      	mov	r4, r1
 80048da:	429a      	cmp	r2, r3
 80048dc:	bfbe      	ittt	lt
 80048de:	460b      	movlt	r3, r1
 80048e0:	464c      	movlt	r4, r9
 80048e2:	4699      	movlt	r9, r3
 80048e4:	6927      	ldr	r7, [r4, #16]
 80048e6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80048ea:	68a3      	ldr	r3, [r4, #8]
 80048ec:	6861      	ldr	r1, [r4, #4]
 80048ee:	eb07 060a 	add.w	r6, r7, sl
 80048f2:	42b3      	cmp	r3, r6
 80048f4:	b085      	sub	sp, #20
 80048f6:	bfb8      	it	lt
 80048f8:	3101      	addlt	r1, #1
 80048fa:	f7ff fedb 	bl	80046b4 <_Balloc>
 80048fe:	b930      	cbnz	r0, 800490e <__multiply+0x42>
 8004900:	4602      	mov	r2, r0
 8004902:	f240 115d 	movw	r1, #349	; 0x15d
 8004906:	4b43      	ldr	r3, [pc, #268]	; (8004a14 <__multiply+0x148>)
 8004908:	4843      	ldr	r0, [pc, #268]	; (8004a18 <__multiply+0x14c>)
 800490a:	f000 fcb1 	bl	8005270 <__assert_func>
 800490e:	f100 0514 	add.w	r5, r0, #20
 8004912:	462b      	mov	r3, r5
 8004914:	2200      	movs	r2, #0
 8004916:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800491a:	4543      	cmp	r3, r8
 800491c:	d321      	bcc.n	8004962 <__multiply+0x96>
 800491e:	f104 0314 	add.w	r3, r4, #20
 8004922:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004926:	f109 0314 	add.w	r3, r9, #20
 800492a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800492e:	9202      	str	r2, [sp, #8]
 8004930:	1b3a      	subs	r2, r7, r4
 8004932:	3a15      	subs	r2, #21
 8004934:	f022 0203 	bic.w	r2, r2, #3
 8004938:	3204      	adds	r2, #4
 800493a:	f104 0115 	add.w	r1, r4, #21
 800493e:	428f      	cmp	r7, r1
 8004940:	bf38      	it	cc
 8004942:	2204      	movcc	r2, #4
 8004944:	9201      	str	r2, [sp, #4]
 8004946:	9a02      	ldr	r2, [sp, #8]
 8004948:	9303      	str	r3, [sp, #12]
 800494a:	429a      	cmp	r2, r3
 800494c:	d80c      	bhi.n	8004968 <__multiply+0x9c>
 800494e:	2e00      	cmp	r6, #0
 8004950:	dd03      	ble.n	800495a <__multiply+0x8e>
 8004952:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004956:	2b00      	cmp	r3, #0
 8004958:	d059      	beq.n	8004a0e <__multiply+0x142>
 800495a:	6106      	str	r6, [r0, #16]
 800495c:	b005      	add	sp, #20
 800495e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004962:	f843 2b04 	str.w	r2, [r3], #4
 8004966:	e7d8      	b.n	800491a <__multiply+0x4e>
 8004968:	f8b3 a000 	ldrh.w	sl, [r3]
 800496c:	f1ba 0f00 	cmp.w	sl, #0
 8004970:	d023      	beq.n	80049ba <__multiply+0xee>
 8004972:	46a9      	mov	r9, r5
 8004974:	f04f 0c00 	mov.w	ip, #0
 8004978:	f104 0e14 	add.w	lr, r4, #20
 800497c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004980:	f8d9 1000 	ldr.w	r1, [r9]
 8004984:	fa1f fb82 	uxth.w	fp, r2
 8004988:	b289      	uxth	r1, r1
 800498a:	fb0a 110b 	mla	r1, sl, fp, r1
 800498e:	4461      	add	r1, ip
 8004990:	f8d9 c000 	ldr.w	ip, [r9]
 8004994:	0c12      	lsrs	r2, r2, #16
 8004996:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800499a:	fb0a c202 	mla	r2, sl, r2, ip
 800499e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80049a2:	b289      	uxth	r1, r1
 80049a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80049a8:	4577      	cmp	r7, lr
 80049aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80049ae:	f849 1b04 	str.w	r1, [r9], #4
 80049b2:	d8e3      	bhi.n	800497c <__multiply+0xb0>
 80049b4:	9a01      	ldr	r2, [sp, #4]
 80049b6:	f845 c002 	str.w	ip, [r5, r2]
 80049ba:	9a03      	ldr	r2, [sp, #12]
 80049bc:	3304      	adds	r3, #4
 80049be:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80049c2:	f1b9 0f00 	cmp.w	r9, #0
 80049c6:	d020      	beq.n	8004a0a <__multiply+0x13e>
 80049c8:	46ae      	mov	lr, r5
 80049ca:	f04f 0a00 	mov.w	sl, #0
 80049ce:	6829      	ldr	r1, [r5, #0]
 80049d0:	f104 0c14 	add.w	ip, r4, #20
 80049d4:	f8bc b000 	ldrh.w	fp, [ip]
 80049d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80049dc:	b289      	uxth	r1, r1
 80049de:	fb09 220b 	mla	r2, r9, fp, r2
 80049e2:	4492      	add	sl, r2
 80049e4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80049e8:	f84e 1b04 	str.w	r1, [lr], #4
 80049ec:	f85c 2b04 	ldr.w	r2, [ip], #4
 80049f0:	f8be 1000 	ldrh.w	r1, [lr]
 80049f4:	0c12      	lsrs	r2, r2, #16
 80049f6:	fb09 1102 	mla	r1, r9, r2, r1
 80049fa:	4567      	cmp	r7, ip
 80049fc:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8004a00:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004a04:	d8e6      	bhi.n	80049d4 <__multiply+0x108>
 8004a06:	9a01      	ldr	r2, [sp, #4]
 8004a08:	50a9      	str	r1, [r5, r2]
 8004a0a:	3504      	adds	r5, #4
 8004a0c:	e79b      	b.n	8004946 <__multiply+0x7a>
 8004a0e:	3e01      	subs	r6, #1
 8004a10:	e79d      	b.n	800494e <__multiply+0x82>
 8004a12:	bf00      	nop
 8004a14:	08008cab 	.word	0x08008cab
 8004a18:	08008cbc 	.word	0x08008cbc

08004a1c <__pow5mult>:
 8004a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a20:	4615      	mov	r5, r2
 8004a22:	f012 0203 	ands.w	r2, r2, #3
 8004a26:	4606      	mov	r6, r0
 8004a28:	460f      	mov	r7, r1
 8004a2a:	d007      	beq.n	8004a3c <__pow5mult+0x20>
 8004a2c:	4c25      	ldr	r4, [pc, #148]	; (8004ac4 <__pow5mult+0xa8>)
 8004a2e:	3a01      	subs	r2, #1
 8004a30:	2300      	movs	r3, #0
 8004a32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004a36:	f7ff fe9f 	bl	8004778 <__multadd>
 8004a3a:	4607      	mov	r7, r0
 8004a3c:	10ad      	asrs	r5, r5, #2
 8004a3e:	d03d      	beq.n	8004abc <__pow5mult+0xa0>
 8004a40:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004a42:	b97c      	cbnz	r4, 8004a64 <__pow5mult+0x48>
 8004a44:	2010      	movs	r0, #16
 8004a46:	f7ff fe11 	bl	800466c <malloc>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	6270      	str	r0, [r6, #36]	; 0x24
 8004a4e:	b928      	cbnz	r0, 8004a5c <__pow5mult+0x40>
 8004a50:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004a54:	4b1c      	ldr	r3, [pc, #112]	; (8004ac8 <__pow5mult+0xac>)
 8004a56:	481d      	ldr	r0, [pc, #116]	; (8004acc <__pow5mult+0xb0>)
 8004a58:	f000 fc0a 	bl	8005270 <__assert_func>
 8004a5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004a60:	6004      	str	r4, [r0, #0]
 8004a62:	60c4      	str	r4, [r0, #12]
 8004a64:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004a68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004a6c:	b94c      	cbnz	r4, 8004a82 <__pow5mult+0x66>
 8004a6e:	f240 2171 	movw	r1, #625	; 0x271
 8004a72:	4630      	mov	r0, r6
 8004a74:	f7ff ff14 	bl	80048a0 <__i2b>
 8004a78:	2300      	movs	r3, #0
 8004a7a:	4604      	mov	r4, r0
 8004a7c:	f8c8 0008 	str.w	r0, [r8, #8]
 8004a80:	6003      	str	r3, [r0, #0]
 8004a82:	f04f 0900 	mov.w	r9, #0
 8004a86:	07eb      	lsls	r3, r5, #31
 8004a88:	d50a      	bpl.n	8004aa0 <__pow5mult+0x84>
 8004a8a:	4639      	mov	r1, r7
 8004a8c:	4622      	mov	r2, r4
 8004a8e:	4630      	mov	r0, r6
 8004a90:	f7ff ff1c 	bl	80048cc <__multiply>
 8004a94:	4680      	mov	r8, r0
 8004a96:	4639      	mov	r1, r7
 8004a98:	4630      	mov	r0, r6
 8004a9a:	f7ff fe4b 	bl	8004734 <_Bfree>
 8004a9e:	4647      	mov	r7, r8
 8004aa0:	106d      	asrs	r5, r5, #1
 8004aa2:	d00b      	beq.n	8004abc <__pow5mult+0xa0>
 8004aa4:	6820      	ldr	r0, [r4, #0]
 8004aa6:	b938      	cbnz	r0, 8004ab8 <__pow5mult+0x9c>
 8004aa8:	4622      	mov	r2, r4
 8004aaa:	4621      	mov	r1, r4
 8004aac:	4630      	mov	r0, r6
 8004aae:	f7ff ff0d 	bl	80048cc <__multiply>
 8004ab2:	6020      	str	r0, [r4, #0]
 8004ab4:	f8c0 9000 	str.w	r9, [r0]
 8004ab8:	4604      	mov	r4, r0
 8004aba:	e7e4      	b.n	8004a86 <__pow5mult+0x6a>
 8004abc:	4638      	mov	r0, r7
 8004abe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ac2:	bf00      	nop
 8004ac4:	08008e08 	.word	0x08008e08
 8004ac8:	08008c39 	.word	0x08008c39
 8004acc:	08008cbc 	.word	0x08008cbc

08004ad0 <__lshift>:
 8004ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ad4:	460c      	mov	r4, r1
 8004ad6:	4607      	mov	r7, r0
 8004ad8:	4691      	mov	r9, r2
 8004ada:	6923      	ldr	r3, [r4, #16]
 8004adc:	6849      	ldr	r1, [r1, #4]
 8004ade:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004ae2:	68a3      	ldr	r3, [r4, #8]
 8004ae4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004ae8:	f108 0601 	add.w	r6, r8, #1
 8004aec:	42b3      	cmp	r3, r6
 8004aee:	db0b      	blt.n	8004b08 <__lshift+0x38>
 8004af0:	4638      	mov	r0, r7
 8004af2:	f7ff fddf 	bl	80046b4 <_Balloc>
 8004af6:	4605      	mov	r5, r0
 8004af8:	b948      	cbnz	r0, 8004b0e <__lshift+0x3e>
 8004afa:	4602      	mov	r2, r0
 8004afc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004b00:	4b29      	ldr	r3, [pc, #164]	; (8004ba8 <__lshift+0xd8>)
 8004b02:	482a      	ldr	r0, [pc, #168]	; (8004bac <__lshift+0xdc>)
 8004b04:	f000 fbb4 	bl	8005270 <__assert_func>
 8004b08:	3101      	adds	r1, #1
 8004b0a:	005b      	lsls	r3, r3, #1
 8004b0c:	e7ee      	b.n	8004aec <__lshift+0x1c>
 8004b0e:	2300      	movs	r3, #0
 8004b10:	f100 0114 	add.w	r1, r0, #20
 8004b14:	f100 0210 	add.w	r2, r0, #16
 8004b18:	4618      	mov	r0, r3
 8004b1a:	4553      	cmp	r3, sl
 8004b1c:	db37      	blt.n	8004b8e <__lshift+0xbe>
 8004b1e:	6920      	ldr	r0, [r4, #16]
 8004b20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004b24:	f104 0314 	add.w	r3, r4, #20
 8004b28:	f019 091f 	ands.w	r9, r9, #31
 8004b2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004b30:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004b34:	d02f      	beq.n	8004b96 <__lshift+0xc6>
 8004b36:	468a      	mov	sl, r1
 8004b38:	f04f 0c00 	mov.w	ip, #0
 8004b3c:	f1c9 0e20 	rsb	lr, r9, #32
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	fa02 f209 	lsl.w	r2, r2, r9
 8004b46:	ea42 020c 	orr.w	r2, r2, ip
 8004b4a:	f84a 2b04 	str.w	r2, [sl], #4
 8004b4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b52:	4298      	cmp	r0, r3
 8004b54:	fa22 fc0e 	lsr.w	ip, r2, lr
 8004b58:	d8f2      	bhi.n	8004b40 <__lshift+0x70>
 8004b5a:	1b03      	subs	r3, r0, r4
 8004b5c:	3b15      	subs	r3, #21
 8004b5e:	f023 0303 	bic.w	r3, r3, #3
 8004b62:	3304      	adds	r3, #4
 8004b64:	f104 0215 	add.w	r2, r4, #21
 8004b68:	4290      	cmp	r0, r2
 8004b6a:	bf38      	it	cc
 8004b6c:	2304      	movcc	r3, #4
 8004b6e:	f841 c003 	str.w	ip, [r1, r3]
 8004b72:	f1bc 0f00 	cmp.w	ip, #0
 8004b76:	d001      	beq.n	8004b7c <__lshift+0xac>
 8004b78:	f108 0602 	add.w	r6, r8, #2
 8004b7c:	3e01      	subs	r6, #1
 8004b7e:	4638      	mov	r0, r7
 8004b80:	4621      	mov	r1, r4
 8004b82:	612e      	str	r6, [r5, #16]
 8004b84:	f7ff fdd6 	bl	8004734 <_Bfree>
 8004b88:	4628      	mov	r0, r5
 8004b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b8e:	f842 0f04 	str.w	r0, [r2, #4]!
 8004b92:	3301      	adds	r3, #1
 8004b94:	e7c1      	b.n	8004b1a <__lshift+0x4a>
 8004b96:	3904      	subs	r1, #4
 8004b98:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b9c:	4298      	cmp	r0, r3
 8004b9e:	f841 2f04 	str.w	r2, [r1, #4]!
 8004ba2:	d8f9      	bhi.n	8004b98 <__lshift+0xc8>
 8004ba4:	e7ea      	b.n	8004b7c <__lshift+0xac>
 8004ba6:	bf00      	nop
 8004ba8:	08008cab 	.word	0x08008cab
 8004bac:	08008cbc 	.word	0x08008cbc

08004bb0 <__mcmp>:
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	690a      	ldr	r2, [r1, #16]
 8004bb4:	6900      	ldr	r0, [r0, #16]
 8004bb6:	b530      	push	{r4, r5, lr}
 8004bb8:	1a80      	subs	r0, r0, r2
 8004bba:	d10d      	bne.n	8004bd8 <__mcmp+0x28>
 8004bbc:	3314      	adds	r3, #20
 8004bbe:	3114      	adds	r1, #20
 8004bc0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004bc4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004bc8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004bcc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004bd0:	4295      	cmp	r5, r2
 8004bd2:	d002      	beq.n	8004bda <__mcmp+0x2a>
 8004bd4:	d304      	bcc.n	8004be0 <__mcmp+0x30>
 8004bd6:	2001      	movs	r0, #1
 8004bd8:	bd30      	pop	{r4, r5, pc}
 8004bda:	42a3      	cmp	r3, r4
 8004bdc:	d3f4      	bcc.n	8004bc8 <__mcmp+0x18>
 8004bde:	e7fb      	b.n	8004bd8 <__mcmp+0x28>
 8004be0:	f04f 30ff 	mov.w	r0, #4294967295
 8004be4:	e7f8      	b.n	8004bd8 <__mcmp+0x28>
	...

08004be8 <__mdiff>:
 8004be8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bec:	460d      	mov	r5, r1
 8004bee:	4607      	mov	r7, r0
 8004bf0:	4611      	mov	r1, r2
 8004bf2:	4628      	mov	r0, r5
 8004bf4:	4614      	mov	r4, r2
 8004bf6:	f7ff ffdb 	bl	8004bb0 <__mcmp>
 8004bfa:	1e06      	subs	r6, r0, #0
 8004bfc:	d111      	bne.n	8004c22 <__mdiff+0x3a>
 8004bfe:	4631      	mov	r1, r6
 8004c00:	4638      	mov	r0, r7
 8004c02:	f7ff fd57 	bl	80046b4 <_Balloc>
 8004c06:	4602      	mov	r2, r0
 8004c08:	b928      	cbnz	r0, 8004c16 <__mdiff+0x2e>
 8004c0a:	f240 2132 	movw	r1, #562	; 0x232
 8004c0e:	4b3a      	ldr	r3, [pc, #232]	; (8004cf8 <__mdiff+0x110>)
 8004c10:	483a      	ldr	r0, [pc, #232]	; (8004cfc <__mdiff+0x114>)
 8004c12:	f000 fb2d 	bl	8005270 <__assert_func>
 8004c16:	2301      	movs	r3, #1
 8004c18:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004c1c:	4610      	mov	r0, r2
 8004c1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c22:	bfa4      	itt	ge
 8004c24:	4623      	movge	r3, r4
 8004c26:	462c      	movge	r4, r5
 8004c28:	4638      	mov	r0, r7
 8004c2a:	6861      	ldr	r1, [r4, #4]
 8004c2c:	bfa6      	itte	ge
 8004c2e:	461d      	movge	r5, r3
 8004c30:	2600      	movge	r6, #0
 8004c32:	2601      	movlt	r6, #1
 8004c34:	f7ff fd3e 	bl	80046b4 <_Balloc>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	b918      	cbnz	r0, 8004c44 <__mdiff+0x5c>
 8004c3c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004c40:	4b2d      	ldr	r3, [pc, #180]	; (8004cf8 <__mdiff+0x110>)
 8004c42:	e7e5      	b.n	8004c10 <__mdiff+0x28>
 8004c44:	f102 0814 	add.w	r8, r2, #20
 8004c48:	46c2      	mov	sl, r8
 8004c4a:	f04f 0c00 	mov.w	ip, #0
 8004c4e:	6927      	ldr	r7, [r4, #16]
 8004c50:	60c6      	str	r6, [r0, #12]
 8004c52:	692e      	ldr	r6, [r5, #16]
 8004c54:	f104 0014 	add.w	r0, r4, #20
 8004c58:	f105 0914 	add.w	r9, r5, #20
 8004c5c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8004c60:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004c64:	3410      	adds	r4, #16
 8004c66:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8004c6a:	f859 3b04 	ldr.w	r3, [r9], #4
 8004c6e:	fa1f f18b 	uxth.w	r1, fp
 8004c72:	448c      	add	ip, r1
 8004c74:	b299      	uxth	r1, r3
 8004c76:	0c1b      	lsrs	r3, r3, #16
 8004c78:	ebac 0101 	sub.w	r1, ip, r1
 8004c7c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004c80:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004c84:	b289      	uxth	r1, r1
 8004c86:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004c8a:	454e      	cmp	r6, r9
 8004c8c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004c90:	f84a 3b04 	str.w	r3, [sl], #4
 8004c94:	d8e7      	bhi.n	8004c66 <__mdiff+0x7e>
 8004c96:	1b73      	subs	r3, r6, r5
 8004c98:	3b15      	subs	r3, #21
 8004c9a:	f023 0303 	bic.w	r3, r3, #3
 8004c9e:	3515      	adds	r5, #21
 8004ca0:	3304      	adds	r3, #4
 8004ca2:	42ae      	cmp	r6, r5
 8004ca4:	bf38      	it	cc
 8004ca6:	2304      	movcc	r3, #4
 8004ca8:	4418      	add	r0, r3
 8004caa:	4443      	add	r3, r8
 8004cac:	461e      	mov	r6, r3
 8004cae:	4605      	mov	r5, r0
 8004cb0:	4575      	cmp	r5, lr
 8004cb2:	d30e      	bcc.n	8004cd2 <__mdiff+0xea>
 8004cb4:	f10e 0103 	add.w	r1, lr, #3
 8004cb8:	1a09      	subs	r1, r1, r0
 8004cba:	f021 0103 	bic.w	r1, r1, #3
 8004cbe:	3803      	subs	r0, #3
 8004cc0:	4586      	cmp	lr, r0
 8004cc2:	bf38      	it	cc
 8004cc4:	2100      	movcc	r1, #0
 8004cc6:	4419      	add	r1, r3
 8004cc8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004ccc:	b18b      	cbz	r3, 8004cf2 <__mdiff+0x10a>
 8004cce:	6117      	str	r7, [r2, #16]
 8004cd0:	e7a4      	b.n	8004c1c <__mdiff+0x34>
 8004cd2:	f855 8b04 	ldr.w	r8, [r5], #4
 8004cd6:	fa1f f188 	uxth.w	r1, r8
 8004cda:	4461      	add	r1, ip
 8004cdc:	140c      	asrs	r4, r1, #16
 8004cde:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8004ce2:	b289      	uxth	r1, r1
 8004ce4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004ce8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8004cec:	f846 1b04 	str.w	r1, [r6], #4
 8004cf0:	e7de      	b.n	8004cb0 <__mdiff+0xc8>
 8004cf2:	3f01      	subs	r7, #1
 8004cf4:	e7e8      	b.n	8004cc8 <__mdiff+0xe0>
 8004cf6:	bf00      	nop
 8004cf8:	08008cab 	.word	0x08008cab
 8004cfc:	08008cbc 	.word	0x08008cbc

08004d00 <__d2b>:
 8004d00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004d04:	2101      	movs	r1, #1
 8004d06:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8004d0a:	4690      	mov	r8, r2
 8004d0c:	461d      	mov	r5, r3
 8004d0e:	f7ff fcd1 	bl	80046b4 <_Balloc>
 8004d12:	4604      	mov	r4, r0
 8004d14:	b930      	cbnz	r0, 8004d24 <__d2b+0x24>
 8004d16:	4602      	mov	r2, r0
 8004d18:	f240 310a 	movw	r1, #778	; 0x30a
 8004d1c:	4b24      	ldr	r3, [pc, #144]	; (8004db0 <__d2b+0xb0>)
 8004d1e:	4825      	ldr	r0, [pc, #148]	; (8004db4 <__d2b+0xb4>)
 8004d20:	f000 faa6 	bl	8005270 <__assert_func>
 8004d24:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8004d28:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8004d2c:	bb2d      	cbnz	r5, 8004d7a <__d2b+0x7a>
 8004d2e:	9301      	str	r3, [sp, #4]
 8004d30:	f1b8 0300 	subs.w	r3, r8, #0
 8004d34:	d026      	beq.n	8004d84 <__d2b+0x84>
 8004d36:	4668      	mov	r0, sp
 8004d38:	9300      	str	r3, [sp, #0]
 8004d3a:	f7ff fd83 	bl	8004844 <__lo0bits>
 8004d3e:	9900      	ldr	r1, [sp, #0]
 8004d40:	b1f0      	cbz	r0, 8004d80 <__d2b+0x80>
 8004d42:	9a01      	ldr	r2, [sp, #4]
 8004d44:	f1c0 0320 	rsb	r3, r0, #32
 8004d48:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4c:	430b      	orrs	r3, r1
 8004d4e:	40c2      	lsrs	r2, r0
 8004d50:	6163      	str	r3, [r4, #20]
 8004d52:	9201      	str	r2, [sp, #4]
 8004d54:	9b01      	ldr	r3, [sp, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	bf14      	ite	ne
 8004d5a:	2102      	movne	r1, #2
 8004d5c:	2101      	moveq	r1, #1
 8004d5e:	61a3      	str	r3, [r4, #24]
 8004d60:	6121      	str	r1, [r4, #16]
 8004d62:	b1c5      	cbz	r5, 8004d96 <__d2b+0x96>
 8004d64:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004d68:	4405      	add	r5, r0
 8004d6a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004d6e:	603d      	str	r5, [r7, #0]
 8004d70:	6030      	str	r0, [r6, #0]
 8004d72:	4620      	mov	r0, r4
 8004d74:	b002      	add	sp, #8
 8004d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d7e:	e7d6      	b.n	8004d2e <__d2b+0x2e>
 8004d80:	6161      	str	r1, [r4, #20]
 8004d82:	e7e7      	b.n	8004d54 <__d2b+0x54>
 8004d84:	a801      	add	r0, sp, #4
 8004d86:	f7ff fd5d 	bl	8004844 <__lo0bits>
 8004d8a:	2101      	movs	r1, #1
 8004d8c:	9b01      	ldr	r3, [sp, #4]
 8004d8e:	6121      	str	r1, [r4, #16]
 8004d90:	6163      	str	r3, [r4, #20]
 8004d92:	3020      	adds	r0, #32
 8004d94:	e7e5      	b.n	8004d62 <__d2b+0x62>
 8004d96:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8004d9a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004d9e:	6038      	str	r0, [r7, #0]
 8004da0:	6918      	ldr	r0, [r3, #16]
 8004da2:	f7ff fd2f 	bl	8004804 <__hi0bits>
 8004da6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8004daa:	6031      	str	r1, [r6, #0]
 8004dac:	e7e1      	b.n	8004d72 <__d2b+0x72>
 8004dae:	bf00      	nop
 8004db0:	08008cab 	.word	0x08008cab
 8004db4:	08008cbc 	.word	0x08008cbc

08004db8 <_calloc_r>:
 8004db8:	b570      	push	{r4, r5, r6, lr}
 8004dba:	fba1 5402 	umull	r5, r4, r1, r2
 8004dbe:	b934      	cbnz	r4, 8004dce <_calloc_r+0x16>
 8004dc0:	4629      	mov	r1, r5
 8004dc2:	f000 f875 	bl	8004eb0 <_malloc_r>
 8004dc6:	4606      	mov	r6, r0
 8004dc8:	b928      	cbnz	r0, 8004dd6 <_calloc_r+0x1e>
 8004dca:	4630      	mov	r0, r6
 8004dcc:	bd70      	pop	{r4, r5, r6, pc}
 8004dce:	220c      	movs	r2, #12
 8004dd0:	2600      	movs	r6, #0
 8004dd2:	6002      	str	r2, [r0, #0]
 8004dd4:	e7f9      	b.n	8004dca <_calloc_r+0x12>
 8004dd6:	462a      	mov	r2, r5
 8004dd8:	4621      	mov	r1, r4
 8004dda:	f7fe f93f 	bl	800305c <memset>
 8004dde:	e7f4      	b.n	8004dca <_calloc_r+0x12>

08004de0 <_free_r>:
 8004de0:	b538      	push	{r3, r4, r5, lr}
 8004de2:	4605      	mov	r5, r0
 8004de4:	2900      	cmp	r1, #0
 8004de6:	d040      	beq.n	8004e6a <_free_r+0x8a>
 8004de8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dec:	1f0c      	subs	r4, r1, #4
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	bfb8      	it	lt
 8004df2:	18e4      	addlt	r4, r4, r3
 8004df4:	f000 fa98 	bl	8005328 <__malloc_lock>
 8004df8:	4a1c      	ldr	r2, [pc, #112]	; (8004e6c <_free_r+0x8c>)
 8004dfa:	6813      	ldr	r3, [r2, #0]
 8004dfc:	b933      	cbnz	r3, 8004e0c <_free_r+0x2c>
 8004dfe:	6063      	str	r3, [r4, #4]
 8004e00:	6014      	str	r4, [r2, #0]
 8004e02:	4628      	mov	r0, r5
 8004e04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e08:	f000 ba94 	b.w	8005334 <__malloc_unlock>
 8004e0c:	42a3      	cmp	r3, r4
 8004e0e:	d908      	bls.n	8004e22 <_free_r+0x42>
 8004e10:	6820      	ldr	r0, [r4, #0]
 8004e12:	1821      	adds	r1, r4, r0
 8004e14:	428b      	cmp	r3, r1
 8004e16:	bf01      	itttt	eq
 8004e18:	6819      	ldreq	r1, [r3, #0]
 8004e1a:	685b      	ldreq	r3, [r3, #4]
 8004e1c:	1809      	addeq	r1, r1, r0
 8004e1e:	6021      	streq	r1, [r4, #0]
 8004e20:	e7ed      	b.n	8004dfe <_free_r+0x1e>
 8004e22:	461a      	mov	r2, r3
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	b10b      	cbz	r3, 8004e2c <_free_r+0x4c>
 8004e28:	42a3      	cmp	r3, r4
 8004e2a:	d9fa      	bls.n	8004e22 <_free_r+0x42>
 8004e2c:	6811      	ldr	r1, [r2, #0]
 8004e2e:	1850      	adds	r0, r2, r1
 8004e30:	42a0      	cmp	r0, r4
 8004e32:	d10b      	bne.n	8004e4c <_free_r+0x6c>
 8004e34:	6820      	ldr	r0, [r4, #0]
 8004e36:	4401      	add	r1, r0
 8004e38:	1850      	adds	r0, r2, r1
 8004e3a:	4283      	cmp	r3, r0
 8004e3c:	6011      	str	r1, [r2, #0]
 8004e3e:	d1e0      	bne.n	8004e02 <_free_r+0x22>
 8004e40:	6818      	ldr	r0, [r3, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	4401      	add	r1, r0
 8004e46:	6011      	str	r1, [r2, #0]
 8004e48:	6053      	str	r3, [r2, #4]
 8004e4a:	e7da      	b.n	8004e02 <_free_r+0x22>
 8004e4c:	d902      	bls.n	8004e54 <_free_r+0x74>
 8004e4e:	230c      	movs	r3, #12
 8004e50:	602b      	str	r3, [r5, #0]
 8004e52:	e7d6      	b.n	8004e02 <_free_r+0x22>
 8004e54:	6820      	ldr	r0, [r4, #0]
 8004e56:	1821      	adds	r1, r4, r0
 8004e58:	428b      	cmp	r3, r1
 8004e5a:	bf01      	itttt	eq
 8004e5c:	6819      	ldreq	r1, [r3, #0]
 8004e5e:	685b      	ldreq	r3, [r3, #4]
 8004e60:	1809      	addeq	r1, r1, r0
 8004e62:	6021      	streq	r1, [r4, #0]
 8004e64:	6063      	str	r3, [r4, #4]
 8004e66:	6054      	str	r4, [r2, #4]
 8004e68:	e7cb      	b.n	8004e02 <_free_r+0x22>
 8004e6a:	bd38      	pop	{r3, r4, r5, pc}
 8004e6c:	20000264 	.word	0x20000264

08004e70 <sbrk_aligned>:
 8004e70:	b570      	push	{r4, r5, r6, lr}
 8004e72:	4e0e      	ldr	r6, [pc, #56]	; (8004eac <sbrk_aligned+0x3c>)
 8004e74:	460c      	mov	r4, r1
 8004e76:	6831      	ldr	r1, [r6, #0]
 8004e78:	4605      	mov	r5, r0
 8004e7a:	b911      	cbnz	r1, 8004e82 <sbrk_aligned+0x12>
 8004e7c:	f000 f9e8 	bl	8005250 <_sbrk_r>
 8004e80:	6030      	str	r0, [r6, #0]
 8004e82:	4621      	mov	r1, r4
 8004e84:	4628      	mov	r0, r5
 8004e86:	f000 f9e3 	bl	8005250 <_sbrk_r>
 8004e8a:	1c43      	adds	r3, r0, #1
 8004e8c:	d00a      	beq.n	8004ea4 <sbrk_aligned+0x34>
 8004e8e:	1cc4      	adds	r4, r0, #3
 8004e90:	f024 0403 	bic.w	r4, r4, #3
 8004e94:	42a0      	cmp	r0, r4
 8004e96:	d007      	beq.n	8004ea8 <sbrk_aligned+0x38>
 8004e98:	1a21      	subs	r1, r4, r0
 8004e9a:	4628      	mov	r0, r5
 8004e9c:	f000 f9d8 	bl	8005250 <_sbrk_r>
 8004ea0:	3001      	adds	r0, #1
 8004ea2:	d101      	bne.n	8004ea8 <sbrk_aligned+0x38>
 8004ea4:	f04f 34ff 	mov.w	r4, #4294967295
 8004ea8:	4620      	mov	r0, r4
 8004eaa:	bd70      	pop	{r4, r5, r6, pc}
 8004eac:	20000268 	.word	0x20000268

08004eb0 <_malloc_r>:
 8004eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eb4:	1ccd      	adds	r5, r1, #3
 8004eb6:	f025 0503 	bic.w	r5, r5, #3
 8004eba:	3508      	adds	r5, #8
 8004ebc:	2d0c      	cmp	r5, #12
 8004ebe:	bf38      	it	cc
 8004ec0:	250c      	movcc	r5, #12
 8004ec2:	2d00      	cmp	r5, #0
 8004ec4:	4607      	mov	r7, r0
 8004ec6:	db01      	blt.n	8004ecc <_malloc_r+0x1c>
 8004ec8:	42a9      	cmp	r1, r5
 8004eca:	d905      	bls.n	8004ed8 <_malloc_r+0x28>
 8004ecc:	230c      	movs	r3, #12
 8004ece:	2600      	movs	r6, #0
 8004ed0:	603b      	str	r3, [r7, #0]
 8004ed2:	4630      	mov	r0, r6
 8004ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ed8:	4e2e      	ldr	r6, [pc, #184]	; (8004f94 <_malloc_r+0xe4>)
 8004eda:	f000 fa25 	bl	8005328 <__malloc_lock>
 8004ede:	6833      	ldr	r3, [r6, #0]
 8004ee0:	461c      	mov	r4, r3
 8004ee2:	bb34      	cbnz	r4, 8004f32 <_malloc_r+0x82>
 8004ee4:	4629      	mov	r1, r5
 8004ee6:	4638      	mov	r0, r7
 8004ee8:	f7ff ffc2 	bl	8004e70 <sbrk_aligned>
 8004eec:	1c43      	adds	r3, r0, #1
 8004eee:	4604      	mov	r4, r0
 8004ef0:	d14d      	bne.n	8004f8e <_malloc_r+0xde>
 8004ef2:	6834      	ldr	r4, [r6, #0]
 8004ef4:	4626      	mov	r6, r4
 8004ef6:	2e00      	cmp	r6, #0
 8004ef8:	d140      	bne.n	8004f7c <_malloc_r+0xcc>
 8004efa:	6823      	ldr	r3, [r4, #0]
 8004efc:	4631      	mov	r1, r6
 8004efe:	4638      	mov	r0, r7
 8004f00:	eb04 0803 	add.w	r8, r4, r3
 8004f04:	f000 f9a4 	bl	8005250 <_sbrk_r>
 8004f08:	4580      	cmp	r8, r0
 8004f0a:	d13a      	bne.n	8004f82 <_malloc_r+0xd2>
 8004f0c:	6821      	ldr	r1, [r4, #0]
 8004f0e:	3503      	adds	r5, #3
 8004f10:	1a6d      	subs	r5, r5, r1
 8004f12:	f025 0503 	bic.w	r5, r5, #3
 8004f16:	3508      	adds	r5, #8
 8004f18:	2d0c      	cmp	r5, #12
 8004f1a:	bf38      	it	cc
 8004f1c:	250c      	movcc	r5, #12
 8004f1e:	4638      	mov	r0, r7
 8004f20:	4629      	mov	r1, r5
 8004f22:	f7ff ffa5 	bl	8004e70 <sbrk_aligned>
 8004f26:	3001      	adds	r0, #1
 8004f28:	d02b      	beq.n	8004f82 <_malloc_r+0xd2>
 8004f2a:	6823      	ldr	r3, [r4, #0]
 8004f2c:	442b      	add	r3, r5
 8004f2e:	6023      	str	r3, [r4, #0]
 8004f30:	e00e      	b.n	8004f50 <_malloc_r+0xa0>
 8004f32:	6822      	ldr	r2, [r4, #0]
 8004f34:	1b52      	subs	r2, r2, r5
 8004f36:	d41e      	bmi.n	8004f76 <_malloc_r+0xc6>
 8004f38:	2a0b      	cmp	r2, #11
 8004f3a:	d916      	bls.n	8004f6a <_malloc_r+0xba>
 8004f3c:	1961      	adds	r1, r4, r5
 8004f3e:	42a3      	cmp	r3, r4
 8004f40:	6025      	str	r5, [r4, #0]
 8004f42:	bf18      	it	ne
 8004f44:	6059      	strne	r1, [r3, #4]
 8004f46:	6863      	ldr	r3, [r4, #4]
 8004f48:	bf08      	it	eq
 8004f4a:	6031      	streq	r1, [r6, #0]
 8004f4c:	5162      	str	r2, [r4, r5]
 8004f4e:	604b      	str	r3, [r1, #4]
 8004f50:	4638      	mov	r0, r7
 8004f52:	f104 060b 	add.w	r6, r4, #11
 8004f56:	f000 f9ed 	bl	8005334 <__malloc_unlock>
 8004f5a:	f026 0607 	bic.w	r6, r6, #7
 8004f5e:	1d23      	adds	r3, r4, #4
 8004f60:	1af2      	subs	r2, r6, r3
 8004f62:	d0b6      	beq.n	8004ed2 <_malloc_r+0x22>
 8004f64:	1b9b      	subs	r3, r3, r6
 8004f66:	50a3      	str	r3, [r4, r2]
 8004f68:	e7b3      	b.n	8004ed2 <_malloc_r+0x22>
 8004f6a:	6862      	ldr	r2, [r4, #4]
 8004f6c:	42a3      	cmp	r3, r4
 8004f6e:	bf0c      	ite	eq
 8004f70:	6032      	streq	r2, [r6, #0]
 8004f72:	605a      	strne	r2, [r3, #4]
 8004f74:	e7ec      	b.n	8004f50 <_malloc_r+0xa0>
 8004f76:	4623      	mov	r3, r4
 8004f78:	6864      	ldr	r4, [r4, #4]
 8004f7a:	e7b2      	b.n	8004ee2 <_malloc_r+0x32>
 8004f7c:	4634      	mov	r4, r6
 8004f7e:	6876      	ldr	r6, [r6, #4]
 8004f80:	e7b9      	b.n	8004ef6 <_malloc_r+0x46>
 8004f82:	230c      	movs	r3, #12
 8004f84:	4638      	mov	r0, r7
 8004f86:	603b      	str	r3, [r7, #0]
 8004f88:	f000 f9d4 	bl	8005334 <__malloc_unlock>
 8004f8c:	e7a1      	b.n	8004ed2 <_malloc_r+0x22>
 8004f8e:	6025      	str	r5, [r4, #0]
 8004f90:	e7de      	b.n	8004f50 <_malloc_r+0xa0>
 8004f92:	bf00      	nop
 8004f94:	20000264 	.word	0x20000264

08004f98 <__ssputs_r>:
 8004f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f9c:	688e      	ldr	r6, [r1, #8]
 8004f9e:	4682      	mov	sl, r0
 8004fa0:	429e      	cmp	r6, r3
 8004fa2:	460c      	mov	r4, r1
 8004fa4:	4690      	mov	r8, r2
 8004fa6:	461f      	mov	r7, r3
 8004fa8:	d838      	bhi.n	800501c <__ssputs_r+0x84>
 8004faa:	898a      	ldrh	r2, [r1, #12]
 8004fac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004fb0:	d032      	beq.n	8005018 <__ssputs_r+0x80>
 8004fb2:	6825      	ldr	r5, [r4, #0]
 8004fb4:	6909      	ldr	r1, [r1, #16]
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	eba5 0901 	sub.w	r9, r5, r1
 8004fbc:	6965      	ldr	r5, [r4, #20]
 8004fbe:	444b      	add	r3, r9
 8004fc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004fc4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004fc8:	106d      	asrs	r5, r5, #1
 8004fca:	429d      	cmp	r5, r3
 8004fcc:	bf38      	it	cc
 8004fce:	461d      	movcc	r5, r3
 8004fd0:	0553      	lsls	r3, r2, #21
 8004fd2:	d531      	bpl.n	8005038 <__ssputs_r+0xa0>
 8004fd4:	4629      	mov	r1, r5
 8004fd6:	f7ff ff6b 	bl	8004eb0 <_malloc_r>
 8004fda:	4606      	mov	r6, r0
 8004fdc:	b950      	cbnz	r0, 8004ff4 <__ssputs_r+0x5c>
 8004fde:	230c      	movs	r3, #12
 8004fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fe4:	f8ca 3000 	str.w	r3, [sl]
 8004fe8:	89a3      	ldrh	r3, [r4, #12]
 8004fea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fee:	81a3      	strh	r3, [r4, #12]
 8004ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ff4:	464a      	mov	r2, r9
 8004ff6:	6921      	ldr	r1, [r4, #16]
 8004ff8:	f7ff fb4e 	bl	8004698 <memcpy>
 8004ffc:	89a3      	ldrh	r3, [r4, #12]
 8004ffe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005006:	81a3      	strh	r3, [r4, #12]
 8005008:	6126      	str	r6, [r4, #16]
 800500a:	444e      	add	r6, r9
 800500c:	6026      	str	r6, [r4, #0]
 800500e:	463e      	mov	r6, r7
 8005010:	6165      	str	r5, [r4, #20]
 8005012:	eba5 0509 	sub.w	r5, r5, r9
 8005016:	60a5      	str	r5, [r4, #8]
 8005018:	42be      	cmp	r6, r7
 800501a:	d900      	bls.n	800501e <__ssputs_r+0x86>
 800501c:	463e      	mov	r6, r7
 800501e:	4632      	mov	r2, r6
 8005020:	4641      	mov	r1, r8
 8005022:	6820      	ldr	r0, [r4, #0]
 8005024:	f000 f966 	bl	80052f4 <memmove>
 8005028:	68a3      	ldr	r3, [r4, #8]
 800502a:	2000      	movs	r0, #0
 800502c:	1b9b      	subs	r3, r3, r6
 800502e:	60a3      	str	r3, [r4, #8]
 8005030:	6823      	ldr	r3, [r4, #0]
 8005032:	4433      	add	r3, r6
 8005034:	6023      	str	r3, [r4, #0]
 8005036:	e7db      	b.n	8004ff0 <__ssputs_r+0x58>
 8005038:	462a      	mov	r2, r5
 800503a:	f000 f981 	bl	8005340 <_realloc_r>
 800503e:	4606      	mov	r6, r0
 8005040:	2800      	cmp	r0, #0
 8005042:	d1e1      	bne.n	8005008 <__ssputs_r+0x70>
 8005044:	4650      	mov	r0, sl
 8005046:	6921      	ldr	r1, [r4, #16]
 8005048:	f7ff feca 	bl	8004de0 <_free_r>
 800504c:	e7c7      	b.n	8004fde <__ssputs_r+0x46>
	...

08005050 <_svfiprintf_r>:
 8005050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005054:	4698      	mov	r8, r3
 8005056:	898b      	ldrh	r3, [r1, #12]
 8005058:	4607      	mov	r7, r0
 800505a:	061b      	lsls	r3, r3, #24
 800505c:	460d      	mov	r5, r1
 800505e:	4614      	mov	r4, r2
 8005060:	b09d      	sub	sp, #116	; 0x74
 8005062:	d50e      	bpl.n	8005082 <_svfiprintf_r+0x32>
 8005064:	690b      	ldr	r3, [r1, #16]
 8005066:	b963      	cbnz	r3, 8005082 <_svfiprintf_r+0x32>
 8005068:	2140      	movs	r1, #64	; 0x40
 800506a:	f7ff ff21 	bl	8004eb0 <_malloc_r>
 800506e:	6028      	str	r0, [r5, #0]
 8005070:	6128      	str	r0, [r5, #16]
 8005072:	b920      	cbnz	r0, 800507e <_svfiprintf_r+0x2e>
 8005074:	230c      	movs	r3, #12
 8005076:	603b      	str	r3, [r7, #0]
 8005078:	f04f 30ff 	mov.w	r0, #4294967295
 800507c:	e0d1      	b.n	8005222 <_svfiprintf_r+0x1d2>
 800507e:	2340      	movs	r3, #64	; 0x40
 8005080:	616b      	str	r3, [r5, #20]
 8005082:	2300      	movs	r3, #0
 8005084:	9309      	str	r3, [sp, #36]	; 0x24
 8005086:	2320      	movs	r3, #32
 8005088:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800508c:	2330      	movs	r3, #48	; 0x30
 800508e:	f04f 0901 	mov.w	r9, #1
 8005092:	f8cd 800c 	str.w	r8, [sp, #12]
 8005096:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800523c <_svfiprintf_r+0x1ec>
 800509a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800509e:	4623      	mov	r3, r4
 80050a0:	469a      	mov	sl, r3
 80050a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050a6:	b10a      	cbz	r2, 80050ac <_svfiprintf_r+0x5c>
 80050a8:	2a25      	cmp	r2, #37	; 0x25
 80050aa:	d1f9      	bne.n	80050a0 <_svfiprintf_r+0x50>
 80050ac:	ebba 0b04 	subs.w	fp, sl, r4
 80050b0:	d00b      	beq.n	80050ca <_svfiprintf_r+0x7a>
 80050b2:	465b      	mov	r3, fp
 80050b4:	4622      	mov	r2, r4
 80050b6:	4629      	mov	r1, r5
 80050b8:	4638      	mov	r0, r7
 80050ba:	f7ff ff6d 	bl	8004f98 <__ssputs_r>
 80050be:	3001      	adds	r0, #1
 80050c0:	f000 80aa 	beq.w	8005218 <_svfiprintf_r+0x1c8>
 80050c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050c6:	445a      	add	r2, fp
 80050c8:	9209      	str	r2, [sp, #36]	; 0x24
 80050ca:	f89a 3000 	ldrb.w	r3, [sl]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f000 80a2 	beq.w	8005218 <_svfiprintf_r+0x1c8>
 80050d4:	2300      	movs	r3, #0
 80050d6:	f04f 32ff 	mov.w	r2, #4294967295
 80050da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050de:	f10a 0a01 	add.w	sl, sl, #1
 80050e2:	9304      	str	r3, [sp, #16]
 80050e4:	9307      	str	r3, [sp, #28]
 80050e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050ea:	931a      	str	r3, [sp, #104]	; 0x68
 80050ec:	4654      	mov	r4, sl
 80050ee:	2205      	movs	r2, #5
 80050f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050f4:	4851      	ldr	r0, [pc, #324]	; (800523c <_svfiprintf_r+0x1ec>)
 80050f6:	f7ff fac1 	bl	800467c <memchr>
 80050fa:	9a04      	ldr	r2, [sp, #16]
 80050fc:	b9d8      	cbnz	r0, 8005136 <_svfiprintf_r+0xe6>
 80050fe:	06d0      	lsls	r0, r2, #27
 8005100:	bf44      	itt	mi
 8005102:	2320      	movmi	r3, #32
 8005104:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005108:	0711      	lsls	r1, r2, #28
 800510a:	bf44      	itt	mi
 800510c:	232b      	movmi	r3, #43	; 0x2b
 800510e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005112:	f89a 3000 	ldrb.w	r3, [sl]
 8005116:	2b2a      	cmp	r3, #42	; 0x2a
 8005118:	d015      	beq.n	8005146 <_svfiprintf_r+0xf6>
 800511a:	4654      	mov	r4, sl
 800511c:	2000      	movs	r0, #0
 800511e:	f04f 0c0a 	mov.w	ip, #10
 8005122:	9a07      	ldr	r2, [sp, #28]
 8005124:	4621      	mov	r1, r4
 8005126:	f811 3b01 	ldrb.w	r3, [r1], #1
 800512a:	3b30      	subs	r3, #48	; 0x30
 800512c:	2b09      	cmp	r3, #9
 800512e:	d94e      	bls.n	80051ce <_svfiprintf_r+0x17e>
 8005130:	b1b0      	cbz	r0, 8005160 <_svfiprintf_r+0x110>
 8005132:	9207      	str	r2, [sp, #28]
 8005134:	e014      	b.n	8005160 <_svfiprintf_r+0x110>
 8005136:	eba0 0308 	sub.w	r3, r0, r8
 800513a:	fa09 f303 	lsl.w	r3, r9, r3
 800513e:	4313      	orrs	r3, r2
 8005140:	46a2      	mov	sl, r4
 8005142:	9304      	str	r3, [sp, #16]
 8005144:	e7d2      	b.n	80050ec <_svfiprintf_r+0x9c>
 8005146:	9b03      	ldr	r3, [sp, #12]
 8005148:	1d19      	adds	r1, r3, #4
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	9103      	str	r1, [sp, #12]
 800514e:	2b00      	cmp	r3, #0
 8005150:	bfbb      	ittet	lt
 8005152:	425b      	neglt	r3, r3
 8005154:	f042 0202 	orrlt.w	r2, r2, #2
 8005158:	9307      	strge	r3, [sp, #28]
 800515a:	9307      	strlt	r3, [sp, #28]
 800515c:	bfb8      	it	lt
 800515e:	9204      	strlt	r2, [sp, #16]
 8005160:	7823      	ldrb	r3, [r4, #0]
 8005162:	2b2e      	cmp	r3, #46	; 0x2e
 8005164:	d10c      	bne.n	8005180 <_svfiprintf_r+0x130>
 8005166:	7863      	ldrb	r3, [r4, #1]
 8005168:	2b2a      	cmp	r3, #42	; 0x2a
 800516a:	d135      	bne.n	80051d8 <_svfiprintf_r+0x188>
 800516c:	9b03      	ldr	r3, [sp, #12]
 800516e:	3402      	adds	r4, #2
 8005170:	1d1a      	adds	r2, r3, #4
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	9203      	str	r2, [sp, #12]
 8005176:	2b00      	cmp	r3, #0
 8005178:	bfb8      	it	lt
 800517a:	f04f 33ff 	movlt.w	r3, #4294967295
 800517e:	9305      	str	r3, [sp, #20]
 8005180:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005240 <_svfiprintf_r+0x1f0>
 8005184:	2203      	movs	r2, #3
 8005186:	4650      	mov	r0, sl
 8005188:	7821      	ldrb	r1, [r4, #0]
 800518a:	f7ff fa77 	bl	800467c <memchr>
 800518e:	b140      	cbz	r0, 80051a2 <_svfiprintf_r+0x152>
 8005190:	2340      	movs	r3, #64	; 0x40
 8005192:	eba0 000a 	sub.w	r0, r0, sl
 8005196:	fa03 f000 	lsl.w	r0, r3, r0
 800519a:	9b04      	ldr	r3, [sp, #16]
 800519c:	3401      	adds	r4, #1
 800519e:	4303      	orrs	r3, r0
 80051a0:	9304      	str	r3, [sp, #16]
 80051a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051a6:	2206      	movs	r2, #6
 80051a8:	4826      	ldr	r0, [pc, #152]	; (8005244 <_svfiprintf_r+0x1f4>)
 80051aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80051ae:	f7ff fa65 	bl	800467c <memchr>
 80051b2:	2800      	cmp	r0, #0
 80051b4:	d038      	beq.n	8005228 <_svfiprintf_r+0x1d8>
 80051b6:	4b24      	ldr	r3, [pc, #144]	; (8005248 <_svfiprintf_r+0x1f8>)
 80051b8:	bb1b      	cbnz	r3, 8005202 <_svfiprintf_r+0x1b2>
 80051ba:	9b03      	ldr	r3, [sp, #12]
 80051bc:	3307      	adds	r3, #7
 80051be:	f023 0307 	bic.w	r3, r3, #7
 80051c2:	3308      	adds	r3, #8
 80051c4:	9303      	str	r3, [sp, #12]
 80051c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051c8:	4433      	add	r3, r6
 80051ca:	9309      	str	r3, [sp, #36]	; 0x24
 80051cc:	e767      	b.n	800509e <_svfiprintf_r+0x4e>
 80051ce:	460c      	mov	r4, r1
 80051d0:	2001      	movs	r0, #1
 80051d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80051d6:	e7a5      	b.n	8005124 <_svfiprintf_r+0xd4>
 80051d8:	2300      	movs	r3, #0
 80051da:	f04f 0c0a 	mov.w	ip, #10
 80051de:	4619      	mov	r1, r3
 80051e0:	3401      	adds	r4, #1
 80051e2:	9305      	str	r3, [sp, #20]
 80051e4:	4620      	mov	r0, r4
 80051e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051ea:	3a30      	subs	r2, #48	; 0x30
 80051ec:	2a09      	cmp	r2, #9
 80051ee:	d903      	bls.n	80051f8 <_svfiprintf_r+0x1a8>
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d0c5      	beq.n	8005180 <_svfiprintf_r+0x130>
 80051f4:	9105      	str	r1, [sp, #20]
 80051f6:	e7c3      	b.n	8005180 <_svfiprintf_r+0x130>
 80051f8:	4604      	mov	r4, r0
 80051fa:	2301      	movs	r3, #1
 80051fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005200:	e7f0      	b.n	80051e4 <_svfiprintf_r+0x194>
 8005202:	ab03      	add	r3, sp, #12
 8005204:	9300      	str	r3, [sp, #0]
 8005206:	462a      	mov	r2, r5
 8005208:	4638      	mov	r0, r7
 800520a:	4b10      	ldr	r3, [pc, #64]	; (800524c <_svfiprintf_r+0x1fc>)
 800520c:	a904      	add	r1, sp, #16
 800520e:	f7fd ffcb 	bl	80031a8 <_printf_float>
 8005212:	1c42      	adds	r2, r0, #1
 8005214:	4606      	mov	r6, r0
 8005216:	d1d6      	bne.n	80051c6 <_svfiprintf_r+0x176>
 8005218:	89ab      	ldrh	r3, [r5, #12]
 800521a:	065b      	lsls	r3, r3, #25
 800521c:	f53f af2c 	bmi.w	8005078 <_svfiprintf_r+0x28>
 8005220:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005222:	b01d      	add	sp, #116	; 0x74
 8005224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005228:	ab03      	add	r3, sp, #12
 800522a:	9300      	str	r3, [sp, #0]
 800522c:	462a      	mov	r2, r5
 800522e:	4638      	mov	r0, r7
 8005230:	4b06      	ldr	r3, [pc, #24]	; (800524c <_svfiprintf_r+0x1fc>)
 8005232:	a904      	add	r1, sp, #16
 8005234:	f7fe fa54 	bl	80036e0 <_printf_i>
 8005238:	e7eb      	b.n	8005212 <_svfiprintf_r+0x1c2>
 800523a:	bf00      	nop
 800523c:	08008e14 	.word	0x08008e14
 8005240:	08008e1a 	.word	0x08008e1a
 8005244:	08008e1e 	.word	0x08008e1e
 8005248:	080031a9 	.word	0x080031a9
 800524c:	08004f99 	.word	0x08004f99

08005250 <_sbrk_r>:
 8005250:	b538      	push	{r3, r4, r5, lr}
 8005252:	2300      	movs	r3, #0
 8005254:	4d05      	ldr	r5, [pc, #20]	; (800526c <_sbrk_r+0x1c>)
 8005256:	4604      	mov	r4, r0
 8005258:	4608      	mov	r0, r1
 800525a:	602b      	str	r3, [r5, #0]
 800525c:	f7fc fb34 	bl	80018c8 <_sbrk>
 8005260:	1c43      	adds	r3, r0, #1
 8005262:	d102      	bne.n	800526a <_sbrk_r+0x1a>
 8005264:	682b      	ldr	r3, [r5, #0]
 8005266:	b103      	cbz	r3, 800526a <_sbrk_r+0x1a>
 8005268:	6023      	str	r3, [r4, #0]
 800526a:	bd38      	pop	{r3, r4, r5, pc}
 800526c:	2000026c 	.word	0x2000026c

08005270 <__assert_func>:
 8005270:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005272:	4614      	mov	r4, r2
 8005274:	461a      	mov	r2, r3
 8005276:	4b09      	ldr	r3, [pc, #36]	; (800529c <__assert_func+0x2c>)
 8005278:	4605      	mov	r5, r0
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68d8      	ldr	r0, [r3, #12]
 800527e:	b14c      	cbz	r4, 8005294 <__assert_func+0x24>
 8005280:	4b07      	ldr	r3, [pc, #28]	; (80052a0 <__assert_func+0x30>)
 8005282:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005286:	9100      	str	r1, [sp, #0]
 8005288:	462b      	mov	r3, r5
 800528a:	4906      	ldr	r1, [pc, #24]	; (80052a4 <__assert_func+0x34>)
 800528c:	f000 f80e 	bl	80052ac <fiprintf>
 8005290:	f000 faaa 	bl	80057e8 <abort>
 8005294:	4b04      	ldr	r3, [pc, #16]	; (80052a8 <__assert_func+0x38>)
 8005296:	461c      	mov	r4, r3
 8005298:	e7f3      	b.n	8005282 <__assert_func+0x12>
 800529a:	bf00      	nop
 800529c:	2000000c 	.word	0x2000000c
 80052a0:	08008e25 	.word	0x08008e25
 80052a4:	08008e32 	.word	0x08008e32
 80052a8:	08008e60 	.word	0x08008e60

080052ac <fiprintf>:
 80052ac:	b40e      	push	{r1, r2, r3}
 80052ae:	b503      	push	{r0, r1, lr}
 80052b0:	4601      	mov	r1, r0
 80052b2:	ab03      	add	r3, sp, #12
 80052b4:	4805      	ldr	r0, [pc, #20]	; (80052cc <fiprintf+0x20>)
 80052b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80052ba:	6800      	ldr	r0, [r0, #0]
 80052bc:	9301      	str	r3, [sp, #4]
 80052be:	f000 f895 	bl	80053ec <_vfiprintf_r>
 80052c2:	b002      	add	sp, #8
 80052c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80052c8:	b003      	add	sp, #12
 80052ca:	4770      	bx	lr
 80052cc:	2000000c 	.word	0x2000000c

080052d0 <__ascii_mbtowc>:
 80052d0:	b082      	sub	sp, #8
 80052d2:	b901      	cbnz	r1, 80052d6 <__ascii_mbtowc+0x6>
 80052d4:	a901      	add	r1, sp, #4
 80052d6:	b142      	cbz	r2, 80052ea <__ascii_mbtowc+0x1a>
 80052d8:	b14b      	cbz	r3, 80052ee <__ascii_mbtowc+0x1e>
 80052da:	7813      	ldrb	r3, [r2, #0]
 80052dc:	600b      	str	r3, [r1, #0]
 80052de:	7812      	ldrb	r2, [r2, #0]
 80052e0:	1e10      	subs	r0, r2, #0
 80052e2:	bf18      	it	ne
 80052e4:	2001      	movne	r0, #1
 80052e6:	b002      	add	sp, #8
 80052e8:	4770      	bx	lr
 80052ea:	4610      	mov	r0, r2
 80052ec:	e7fb      	b.n	80052e6 <__ascii_mbtowc+0x16>
 80052ee:	f06f 0001 	mvn.w	r0, #1
 80052f2:	e7f8      	b.n	80052e6 <__ascii_mbtowc+0x16>

080052f4 <memmove>:
 80052f4:	4288      	cmp	r0, r1
 80052f6:	b510      	push	{r4, lr}
 80052f8:	eb01 0402 	add.w	r4, r1, r2
 80052fc:	d902      	bls.n	8005304 <memmove+0x10>
 80052fe:	4284      	cmp	r4, r0
 8005300:	4623      	mov	r3, r4
 8005302:	d807      	bhi.n	8005314 <memmove+0x20>
 8005304:	1e43      	subs	r3, r0, #1
 8005306:	42a1      	cmp	r1, r4
 8005308:	d008      	beq.n	800531c <memmove+0x28>
 800530a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800530e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005312:	e7f8      	b.n	8005306 <memmove+0x12>
 8005314:	4601      	mov	r1, r0
 8005316:	4402      	add	r2, r0
 8005318:	428a      	cmp	r2, r1
 800531a:	d100      	bne.n	800531e <memmove+0x2a>
 800531c:	bd10      	pop	{r4, pc}
 800531e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005322:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005326:	e7f7      	b.n	8005318 <memmove+0x24>

08005328 <__malloc_lock>:
 8005328:	4801      	ldr	r0, [pc, #4]	; (8005330 <__malloc_lock+0x8>)
 800532a:	f000 bc19 	b.w	8005b60 <__retarget_lock_acquire_recursive>
 800532e:	bf00      	nop
 8005330:	20000270 	.word	0x20000270

08005334 <__malloc_unlock>:
 8005334:	4801      	ldr	r0, [pc, #4]	; (800533c <__malloc_unlock+0x8>)
 8005336:	f000 bc14 	b.w	8005b62 <__retarget_lock_release_recursive>
 800533a:	bf00      	nop
 800533c:	20000270 	.word	0x20000270

08005340 <_realloc_r>:
 8005340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005344:	4680      	mov	r8, r0
 8005346:	4614      	mov	r4, r2
 8005348:	460e      	mov	r6, r1
 800534a:	b921      	cbnz	r1, 8005356 <_realloc_r+0x16>
 800534c:	4611      	mov	r1, r2
 800534e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005352:	f7ff bdad 	b.w	8004eb0 <_malloc_r>
 8005356:	b92a      	cbnz	r2, 8005364 <_realloc_r+0x24>
 8005358:	f7ff fd42 	bl	8004de0 <_free_r>
 800535c:	4625      	mov	r5, r4
 800535e:	4628      	mov	r0, r5
 8005360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005364:	f000 fc64 	bl	8005c30 <_malloc_usable_size_r>
 8005368:	4284      	cmp	r4, r0
 800536a:	4607      	mov	r7, r0
 800536c:	d802      	bhi.n	8005374 <_realloc_r+0x34>
 800536e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005372:	d812      	bhi.n	800539a <_realloc_r+0x5a>
 8005374:	4621      	mov	r1, r4
 8005376:	4640      	mov	r0, r8
 8005378:	f7ff fd9a 	bl	8004eb0 <_malloc_r>
 800537c:	4605      	mov	r5, r0
 800537e:	2800      	cmp	r0, #0
 8005380:	d0ed      	beq.n	800535e <_realloc_r+0x1e>
 8005382:	42bc      	cmp	r4, r7
 8005384:	4622      	mov	r2, r4
 8005386:	4631      	mov	r1, r6
 8005388:	bf28      	it	cs
 800538a:	463a      	movcs	r2, r7
 800538c:	f7ff f984 	bl	8004698 <memcpy>
 8005390:	4631      	mov	r1, r6
 8005392:	4640      	mov	r0, r8
 8005394:	f7ff fd24 	bl	8004de0 <_free_r>
 8005398:	e7e1      	b.n	800535e <_realloc_r+0x1e>
 800539a:	4635      	mov	r5, r6
 800539c:	e7df      	b.n	800535e <_realloc_r+0x1e>

0800539e <__sfputc_r>:
 800539e:	6893      	ldr	r3, [r2, #8]
 80053a0:	b410      	push	{r4}
 80053a2:	3b01      	subs	r3, #1
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	6093      	str	r3, [r2, #8]
 80053a8:	da07      	bge.n	80053ba <__sfputc_r+0x1c>
 80053aa:	6994      	ldr	r4, [r2, #24]
 80053ac:	42a3      	cmp	r3, r4
 80053ae:	db01      	blt.n	80053b4 <__sfputc_r+0x16>
 80053b0:	290a      	cmp	r1, #10
 80053b2:	d102      	bne.n	80053ba <__sfputc_r+0x1c>
 80053b4:	bc10      	pop	{r4}
 80053b6:	f000 b949 	b.w	800564c <__swbuf_r>
 80053ba:	6813      	ldr	r3, [r2, #0]
 80053bc:	1c58      	adds	r0, r3, #1
 80053be:	6010      	str	r0, [r2, #0]
 80053c0:	7019      	strb	r1, [r3, #0]
 80053c2:	4608      	mov	r0, r1
 80053c4:	bc10      	pop	{r4}
 80053c6:	4770      	bx	lr

080053c8 <__sfputs_r>:
 80053c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ca:	4606      	mov	r6, r0
 80053cc:	460f      	mov	r7, r1
 80053ce:	4614      	mov	r4, r2
 80053d0:	18d5      	adds	r5, r2, r3
 80053d2:	42ac      	cmp	r4, r5
 80053d4:	d101      	bne.n	80053da <__sfputs_r+0x12>
 80053d6:	2000      	movs	r0, #0
 80053d8:	e007      	b.n	80053ea <__sfputs_r+0x22>
 80053da:	463a      	mov	r2, r7
 80053dc:	4630      	mov	r0, r6
 80053de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053e2:	f7ff ffdc 	bl	800539e <__sfputc_r>
 80053e6:	1c43      	adds	r3, r0, #1
 80053e8:	d1f3      	bne.n	80053d2 <__sfputs_r+0xa>
 80053ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080053ec <_vfiprintf_r>:
 80053ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053f0:	460d      	mov	r5, r1
 80053f2:	4614      	mov	r4, r2
 80053f4:	4698      	mov	r8, r3
 80053f6:	4606      	mov	r6, r0
 80053f8:	b09d      	sub	sp, #116	; 0x74
 80053fa:	b118      	cbz	r0, 8005404 <_vfiprintf_r+0x18>
 80053fc:	6983      	ldr	r3, [r0, #24]
 80053fe:	b90b      	cbnz	r3, 8005404 <_vfiprintf_r+0x18>
 8005400:	f000 fb10 	bl	8005a24 <__sinit>
 8005404:	4b89      	ldr	r3, [pc, #548]	; (800562c <_vfiprintf_r+0x240>)
 8005406:	429d      	cmp	r5, r3
 8005408:	d11b      	bne.n	8005442 <_vfiprintf_r+0x56>
 800540a:	6875      	ldr	r5, [r6, #4]
 800540c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800540e:	07d9      	lsls	r1, r3, #31
 8005410:	d405      	bmi.n	800541e <_vfiprintf_r+0x32>
 8005412:	89ab      	ldrh	r3, [r5, #12]
 8005414:	059a      	lsls	r2, r3, #22
 8005416:	d402      	bmi.n	800541e <_vfiprintf_r+0x32>
 8005418:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800541a:	f000 fba1 	bl	8005b60 <__retarget_lock_acquire_recursive>
 800541e:	89ab      	ldrh	r3, [r5, #12]
 8005420:	071b      	lsls	r3, r3, #28
 8005422:	d501      	bpl.n	8005428 <_vfiprintf_r+0x3c>
 8005424:	692b      	ldr	r3, [r5, #16]
 8005426:	b9eb      	cbnz	r3, 8005464 <_vfiprintf_r+0x78>
 8005428:	4629      	mov	r1, r5
 800542a:	4630      	mov	r0, r6
 800542c:	f000 f96e 	bl	800570c <__swsetup_r>
 8005430:	b1c0      	cbz	r0, 8005464 <_vfiprintf_r+0x78>
 8005432:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005434:	07dc      	lsls	r4, r3, #31
 8005436:	d50e      	bpl.n	8005456 <_vfiprintf_r+0x6a>
 8005438:	f04f 30ff 	mov.w	r0, #4294967295
 800543c:	b01d      	add	sp, #116	; 0x74
 800543e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005442:	4b7b      	ldr	r3, [pc, #492]	; (8005630 <_vfiprintf_r+0x244>)
 8005444:	429d      	cmp	r5, r3
 8005446:	d101      	bne.n	800544c <_vfiprintf_r+0x60>
 8005448:	68b5      	ldr	r5, [r6, #8]
 800544a:	e7df      	b.n	800540c <_vfiprintf_r+0x20>
 800544c:	4b79      	ldr	r3, [pc, #484]	; (8005634 <_vfiprintf_r+0x248>)
 800544e:	429d      	cmp	r5, r3
 8005450:	bf08      	it	eq
 8005452:	68f5      	ldreq	r5, [r6, #12]
 8005454:	e7da      	b.n	800540c <_vfiprintf_r+0x20>
 8005456:	89ab      	ldrh	r3, [r5, #12]
 8005458:	0598      	lsls	r0, r3, #22
 800545a:	d4ed      	bmi.n	8005438 <_vfiprintf_r+0x4c>
 800545c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800545e:	f000 fb80 	bl	8005b62 <__retarget_lock_release_recursive>
 8005462:	e7e9      	b.n	8005438 <_vfiprintf_r+0x4c>
 8005464:	2300      	movs	r3, #0
 8005466:	9309      	str	r3, [sp, #36]	; 0x24
 8005468:	2320      	movs	r3, #32
 800546a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800546e:	2330      	movs	r3, #48	; 0x30
 8005470:	f04f 0901 	mov.w	r9, #1
 8005474:	f8cd 800c 	str.w	r8, [sp, #12]
 8005478:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005638 <_vfiprintf_r+0x24c>
 800547c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005480:	4623      	mov	r3, r4
 8005482:	469a      	mov	sl, r3
 8005484:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005488:	b10a      	cbz	r2, 800548e <_vfiprintf_r+0xa2>
 800548a:	2a25      	cmp	r2, #37	; 0x25
 800548c:	d1f9      	bne.n	8005482 <_vfiprintf_r+0x96>
 800548e:	ebba 0b04 	subs.w	fp, sl, r4
 8005492:	d00b      	beq.n	80054ac <_vfiprintf_r+0xc0>
 8005494:	465b      	mov	r3, fp
 8005496:	4622      	mov	r2, r4
 8005498:	4629      	mov	r1, r5
 800549a:	4630      	mov	r0, r6
 800549c:	f7ff ff94 	bl	80053c8 <__sfputs_r>
 80054a0:	3001      	adds	r0, #1
 80054a2:	f000 80aa 	beq.w	80055fa <_vfiprintf_r+0x20e>
 80054a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054a8:	445a      	add	r2, fp
 80054aa:	9209      	str	r2, [sp, #36]	; 0x24
 80054ac:	f89a 3000 	ldrb.w	r3, [sl]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	f000 80a2 	beq.w	80055fa <_vfiprintf_r+0x20e>
 80054b6:	2300      	movs	r3, #0
 80054b8:	f04f 32ff 	mov.w	r2, #4294967295
 80054bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054c0:	f10a 0a01 	add.w	sl, sl, #1
 80054c4:	9304      	str	r3, [sp, #16]
 80054c6:	9307      	str	r3, [sp, #28]
 80054c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80054cc:	931a      	str	r3, [sp, #104]	; 0x68
 80054ce:	4654      	mov	r4, sl
 80054d0:	2205      	movs	r2, #5
 80054d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054d6:	4858      	ldr	r0, [pc, #352]	; (8005638 <_vfiprintf_r+0x24c>)
 80054d8:	f7ff f8d0 	bl	800467c <memchr>
 80054dc:	9a04      	ldr	r2, [sp, #16]
 80054de:	b9d8      	cbnz	r0, 8005518 <_vfiprintf_r+0x12c>
 80054e0:	06d1      	lsls	r1, r2, #27
 80054e2:	bf44      	itt	mi
 80054e4:	2320      	movmi	r3, #32
 80054e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054ea:	0713      	lsls	r3, r2, #28
 80054ec:	bf44      	itt	mi
 80054ee:	232b      	movmi	r3, #43	; 0x2b
 80054f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054f4:	f89a 3000 	ldrb.w	r3, [sl]
 80054f8:	2b2a      	cmp	r3, #42	; 0x2a
 80054fa:	d015      	beq.n	8005528 <_vfiprintf_r+0x13c>
 80054fc:	4654      	mov	r4, sl
 80054fe:	2000      	movs	r0, #0
 8005500:	f04f 0c0a 	mov.w	ip, #10
 8005504:	9a07      	ldr	r2, [sp, #28]
 8005506:	4621      	mov	r1, r4
 8005508:	f811 3b01 	ldrb.w	r3, [r1], #1
 800550c:	3b30      	subs	r3, #48	; 0x30
 800550e:	2b09      	cmp	r3, #9
 8005510:	d94e      	bls.n	80055b0 <_vfiprintf_r+0x1c4>
 8005512:	b1b0      	cbz	r0, 8005542 <_vfiprintf_r+0x156>
 8005514:	9207      	str	r2, [sp, #28]
 8005516:	e014      	b.n	8005542 <_vfiprintf_r+0x156>
 8005518:	eba0 0308 	sub.w	r3, r0, r8
 800551c:	fa09 f303 	lsl.w	r3, r9, r3
 8005520:	4313      	orrs	r3, r2
 8005522:	46a2      	mov	sl, r4
 8005524:	9304      	str	r3, [sp, #16]
 8005526:	e7d2      	b.n	80054ce <_vfiprintf_r+0xe2>
 8005528:	9b03      	ldr	r3, [sp, #12]
 800552a:	1d19      	adds	r1, r3, #4
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	9103      	str	r1, [sp, #12]
 8005530:	2b00      	cmp	r3, #0
 8005532:	bfbb      	ittet	lt
 8005534:	425b      	neglt	r3, r3
 8005536:	f042 0202 	orrlt.w	r2, r2, #2
 800553a:	9307      	strge	r3, [sp, #28]
 800553c:	9307      	strlt	r3, [sp, #28]
 800553e:	bfb8      	it	lt
 8005540:	9204      	strlt	r2, [sp, #16]
 8005542:	7823      	ldrb	r3, [r4, #0]
 8005544:	2b2e      	cmp	r3, #46	; 0x2e
 8005546:	d10c      	bne.n	8005562 <_vfiprintf_r+0x176>
 8005548:	7863      	ldrb	r3, [r4, #1]
 800554a:	2b2a      	cmp	r3, #42	; 0x2a
 800554c:	d135      	bne.n	80055ba <_vfiprintf_r+0x1ce>
 800554e:	9b03      	ldr	r3, [sp, #12]
 8005550:	3402      	adds	r4, #2
 8005552:	1d1a      	adds	r2, r3, #4
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	9203      	str	r2, [sp, #12]
 8005558:	2b00      	cmp	r3, #0
 800555a:	bfb8      	it	lt
 800555c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005560:	9305      	str	r3, [sp, #20]
 8005562:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800563c <_vfiprintf_r+0x250>
 8005566:	2203      	movs	r2, #3
 8005568:	4650      	mov	r0, sl
 800556a:	7821      	ldrb	r1, [r4, #0]
 800556c:	f7ff f886 	bl	800467c <memchr>
 8005570:	b140      	cbz	r0, 8005584 <_vfiprintf_r+0x198>
 8005572:	2340      	movs	r3, #64	; 0x40
 8005574:	eba0 000a 	sub.w	r0, r0, sl
 8005578:	fa03 f000 	lsl.w	r0, r3, r0
 800557c:	9b04      	ldr	r3, [sp, #16]
 800557e:	3401      	adds	r4, #1
 8005580:	4303      	orrs	r3, r0
 8005582:	9304      	str	r3, [sp, #16]
 8005584:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005588:	2206      	movs	r2, #6
 800558a:	482d      	ldr	r0, [pc, #180]	; (8005640 <_vfiprintf_r+0x254>)
 800558c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005590:	f7ff f874 	bl	800467c <memchr>
 8005594:	2800      	cmp	r0, #0
 8005596:	d03f      	beq.n	8005618 <_vfiprintf_r+0x22c>
 8005598:	4b2a      	ldr	r3, [pc, #168]	; (8005644 <_vfiprintf_r+0x258>)
 800559a:	bb1b      	cbnz	r3, 80055e4 <_vfiprintf_r+0x1f8>
 800559c:	9b03      	ldr	r3, [sp, #12]
 800559e:	3307      	adds	r3, #7
 80055a0:	f023 0307 	bic.w	r3, r3, #7
 80055a4:	3308      	adds	r3, #8
 80055a6:	9303      	str	r3, [sp, #12]
 80055a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055aa:	443b      	add	r3, r7
 80055ac:	9309      	str	r3, [sp, #36]	; 0x24
 80055ae:	e767      	b.n	8005480 <_vfiprintf_r+0x94>
 80055b0:	460c      	mov	r4, r1
 80055b2:	2001      	movs	r0, #1
 80055b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80055b8:	e7a5      	b.n	8005506 <_vfiprintf_r+0x11a>
 80055ba:	2300      	movs	r3, #0
 80055bc:	f04f 0c0a 	mov.w	ip, #10
 80055c0:	4619      	mov	r1, r3
 80055c2:	3401      	adds	r4, #1
 80055c4:	9305      	str	r3, [sp, #20]
 80055c6:	4620      	mov	r0, r4
 80055c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055cc:	3a30      	subs	r2, #48	; 0x30
 80055ce:	2a09      	cmp	r2, #9
 80055d0:	d903      	bls.n	80055da <_vfiprintf_r+0x1ee>
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d0c5      	beq.n	8005562 <_vfiprintf_r+0x176>
 80055d6:	9105      	str	r1, [sp, #20]
 80055d8:	e7c3      	b.n	8005562 <_vfiprintf_r+0x176>
 80055da:	4604      	mov	r4, r0
 80055dc:	2301      	movs	r3, #1
 80055de:	fb0c 2101 	mla	r1, ip, r1, r2
 80055e2:	e7f0      	b.n	80055c6 <_vfiprintf_r+0x1da>
 80055e4:	ab03      	add	r3, sp, #12
 80055e6:	9300      	str	r3, [sp, #0]
 80055e8:	462a      	mov	r2, r5
 80055ea:	4630      	mov	r0, r6
 80055ec:	4b16      	ldr	r3, [pc, #88]	; (8005648 <_vfiprintf_r+0x25c>)
 80055ee:	a904      	add	r1, sp, #16
 80055f0:	f7fd fdda 	bl	80031a8 <_printf_float>
 80055f4:	4607      	mov	r7, r0
 80055f6:	1c78      	adds	r0, r7, #1
 80055f8:	d1d6      	bne.n	80055a8 <_vfiprintf_r+0x1bc>
 80055fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055fc:	07d9      	lsls	r1, r3, #31
 80055fe:	d405      	bmi.n	800560c <_vfiprintf_r+0x220>
 8005600:	89ab      	ldrh	r3, [r5, #12]
 8005602:	059a      	lsls	r2, r3, #22
 8005604:	d402      	bmi.n	800560c <_vfiprintf_r+0x220>
 8005606:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005608:	f000 faab 	bl	8005b62 <__retarget_lock_release_recursive>
 800560c:	89ab      	ldrh	r3, [r5, #12]
 800560e:	065b      	lsls	r3, r3, #25
 8005610:	f53f af12 	bmi.w	8005438 <_vfiprintf_r+0x4c>
 8005614:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005616:	e711      	b.n	800543c <_vfiprintf_r+0x50>
 8005618:	ab03      	add	r3, sp, #12
 800561a:	9300      	str	r3, [sp, #0]
 800561c:	462a      	mov	r2, r5
 800561e:	4630      	mov	r0, r6
 8005620:	4b09      	ldr	r3, [pc, #36]	; (8005648 <_vfiprintf_r+0x25c>)
 8005622:	a904      	add	r1, sp, #16
 8005624:	f7fe f85c 	bl	80036e0 <_printf_i>
 8005628:	e7e4      	b.n	80055f4 <_vfiprintf_r+0x208>
 800562a:	bf00      	nop
 800562c:	08008f8c 	.word	0x08008f8c
 8005630:	08008fac 	.word	0x08008fac
 8005634:	08008f6c 	.word	0x08008f6c
 8005638:	08008e14 	.word	0x08008e14
 800563c:	08008e1a 	.word	0x08008e1a
 8005640:	08008e1e 	.word	0x08008e1e
 8005644:	080031a9 	.word	0x080031a9
 8005648:	080053c9 	.word	0x080053c9

0800564c <__swbuf_r>:
 800564c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800564e:	460e      	mov	r6, r1
 8005650:	4614      	mov	r4, r2
 8005652:	4605      	mov	r5, r0
 8005654:	b118      	cbz	r0, 800565e <__swbuf_r+0x12>
 8005656:	6983      	ldr	r3, [r0, #24]
 8005658:	b90b      	cbnz	r3, 800565e <__swbuf_r+0x12>
 800565a:	f000 f9e3 	bl	8005a24 <__sinit>
 800565e:	4b21      	ldr	r3, [pc, #132]	; (80056e4 <__swbuf_r+0x98>)
 8005660:	429c      	cmp	r4, r3
 8005662:	d12b      	bne.n	80056bc <__swbuf_r+0x70>
 8005664:	686c      	ldr	r4, [r5, #4]
 8005666:	69a3      	ldr	r3, [r4, #24]
 8005668:	60a3      	str	r3, [r4, #8]
 800566a:	89a3      	ldrh	r3, [r4, #12]
 800566c:	071a      	lsls	r2, r3, #28
 800566e:	d52f      	bpl.n	80056d0 <__swbuf_r+0x84>
 8005670:	6923      	ldr	r3, [r4, #16]
 8005672:	b36b      	cbz	r3, 80056d0 <__swbuf_r+0x84>
 8005674:	6923      	ldr	r3, [r4, #16]
 8005676:	6820      	ldr	r0, [r4, #0]
 8005678:	b2f6      	uxtb	r6, r6
 800567a:	1ac0      	subs	r0, r0, r3
 800567c:	6963      	ldr	r3, [r4, #20]
 800567e:	4637      	mov	r7, r6
 8005680:	4283      	cmp	r3, r0
 8005682:	dc04      	bgt.n	800568e <__swbuf_r+0x42>
 8005684:	4621      	mov	r1, r4
 8005686:	4628      	mov	r0, r5
 8005688:	f000 f938 	bl	80058fc <_fflush_r>
 800568c:	bb30      	cbnz	r0, 80056dc <__swbuf_r+0x90>
 800568e:	68a3      	ldr	r3, [r4, #8]
 8005690:	3001      	adds	r0, #1
 8005692:	3b01      	subs	r3, #1
 8005694:	60a3      	str	r3, [r4, #8]
 8005696:	6823      	ldr	r3, [r4, #0]
 8005698:	1c5a      	adds	r2, r3, #1
 800569a:	6022      	str	r2, [r4, #0]
 800569c:	701e      	strb	r6, [r3, #0]
 800569e:	6963      	ldr	r3, [r4, #20]
 80056a0:	4283      	cmp	r3, r0
 80056a2:	d004      	beq.n	80056ae <__swbuf_r+0x62>
 80056a4:	89a3      	ldrh	r3, [r4, #12]
 80056a6:	07db      	lsls	r3, r3, #31
 80056a8:	d506      	bpl.n	80056b8 <__swbuf_r+0x6c>
 80056aa:	2e0a      	cmp	r6, #10
 80056ac:	d104      	bne.n	80056b8 <__swbuf_r+0x6c>
 80056ae:	4621      	mov	r1, r4
 80056b0:	4628      	mov	r0, r5
 80056b2:	f000 f923 	bl	80058fc <_fflush_r>
 80056b6:	b988      	cbnz	r0, 80056dc <__swbuf_r+0x90>
 80056b8:	4638      	mov	r0, r7
 80056ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056bc:	4b0a      	ldr	r3, [pc, #40]	; (80056e8 <__swbuf_r+0x9c>)
 80056be:	429c      	cmp	r4, r3
 80056c0:	d101      	bne.n	80056c6 <__swbuf_r+0x7a>
 80056c2:	68ac      	ldr	r4, [r5, #8]
 80056c4:	e7cf      	b.n	8005666 <__swbuf_r+0x1a>
 80056c6:	4b09      	ldr	r3, [pc, #36]	; (80056ec <__swbuf_r+0xa0>)
 80056c8:	429c      	cmp	r4, r3
 80056ca:	bf08      	it	eq
 80056cc:	68ec      	ldreq	r4, [r5, #12]
 80056ce:	e7ca      	b.n	8005666 <__swbuf_r+0x1a>
 80056d0:	4621      	mov	r1, r4
 80056d2:	4628      	mov	r0, r5
 80056d4:	f000 f81a 	bl	800570c <__swsetup_r>
 80056d8:	2800      	cmp	r0, #0
 80056da:	d0cb      	beq.n	8005674 <__swbuf_r+0x28>
 80056dc:	f04f 37ff 	mov.w	r7, #4294967295
 80056e0:	e7ea      	b.n	80056b8 <__swbuf_r+0x6c>
 80056e2:	bf00      	nop
 80056e4:	08008f8c 	.word	0x08008f8c
 80056e8:	08008fac 	.word	0x08008fac
 80056ec:	08008f6c 	.word	0x08008f6c

080056f0 <__ascii_wctomb>:
 80056f0:	4603      	mov	r3, r0
 80056f2:	4608      	mov	r0, r1
 80056f4:	b141      	cbz	r1, 8005708 <__ascii_wctomb+0x18>
 80056f6:	2aff      	cmp	r2, #255	; 0xff
 80056f8:	d904      	bls.n	8005704 <__ascii_wctomb+0x14>
 80056fa:	228a      	movs	r2, #138	; 0x8a
 80056fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005700:	601a      	str	r2, [r3, #0]
 8005702:	4770      	bx	lr
 8005704:	2001      	movs	r0, #1
 8005706:	700a      	strb	r2, [r1, #0]
 8005708:	4770      	bx	lr
	...

0800570c <__swsetup_r>:
 800570c:	4b32      	ldr	r3, [pc, #200]	; (80057d8 <__swsetup_r+0xcc>)
 800570e:	b570      	push	{r4, r5, r6, lr}
 8005710:	681d      	ldr	r5, [r3, #0]
 8005712:	4606      	mov	r6, r0
 8005714:	460c      	mov	r4, r1
 8005716:	b125      	cbz	r5, 8005722 <__swsetup_r+0x16>
 8005718:	69ab      	ldr	r3, [r5, #24]
 800571a:	b913      	cbnz	r3, 8005722 <__swsetup_r+0x16>
 800571c:	4628      	mov	r0, r5
 800571e:	f000 f981 	bl	8005a24 <__sinit>
 8005722:	4b2e      	ldr	r3, [pc, #184]	; (80057dc <__swsetup_r+0xd0>)
 8005724:	429c      	cmp	r4, r3
 8005726:	d10f      	bne.n	8005748 <__swsetup_r+0x3c>
 8005728:	686c      	ldr	r4, [r5, #4]
 800572a:	89a3      	ldrh	r3, [r4, #12]
 800572c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005730:	0719      	lsls	r1, r3, #28
 8005732:	d42c      	bmi.n	800578e <__swsetup_r+0x82>
 8005734:	06dd      	lsls	r5, r3, #27
 8005736:	d411      	bmi.n	800575c <__swsetup_r+0x50>
 8005738:	2309      	movs	r3, #9
 800573a:	6033      	str	r3, [r6, #0]
 800573c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005740:	f04f 30ff 	mov.w	r0, #4294967295
 8005744:	81a3      	strh	r3, [r4, #12]
 8005746:	e03e      	b.n	80057c6 <__swsetup_r+0xba>
 8005748:	4b25      	ldr	r3, [pc, #148]	; (80057e0 <__swsetup_r+0xd4>)
 800574a:	429c      	cmp	r4, r3
 800574c:	d101      	bne.n	8005752 <__swsetup_r+0x46>
 800574e:	68ac      	ldr	r4, [r5, #8]
 8005750:	e7eb      	b.n	800572a <__swsetup_r+0x1e>
 8005752:	4b24      	ldr	r3, [pc, #144]	; (80057e4 <__swsetup_r+0xd8>)
 8005754:	429c      	cmp	r4, r3
 8005756:	bf08      	it	eq
 8005758:	68ec      	ldreq	r4, [r5, #12]
 800575a:	e7e6      	b.n	800572a <__swsetup_r+0x1e>
 800575c:	0758      	lsls	r0, r3, #29
 800575e:	d512      	bpl.n	8005786 <__swsetup_r+0x7a>
 8005760:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005762:	b141      	cbz	r1, 8005776 <__swsetup_r+0x6a>
 8005764:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005768:	4299      	cmp	r1, r3
 800576a:	d002      	beq.n	8005772 <__swsetup_r+0x66>
 800576c:	4630      	mov	r0, r6
 800576e:	f7ff fb37 	bl	8004de0 <_free_r>
 8005772:	2300      	movs	r3, #0
 8005774:	6363      	str	r3, [r4, #52]	; 0x34
 8005776:	89a3      	ldrh	r3, [r4, #12]
 8005778:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800577c:	81a3      	strh	r3, [r4, #12]
 800577e:	2300      	movs	r3, #0
 8005780:	6063      	str	r3, [r4, #4]
 8005782:	6923      	ldr	r3, [r4, #16]
 8005784:	6023      	str	r3, [r4, #0]
 8005786:	89a3      	ldrh	r3, [r4, #12]
 8005788:	f043 0308 	orr.w	r3, r3, #8
 800578c:	81a3      	strh	r3, [r4, #12]
 800578e:	6923      	ldr	r3, [r4, #16]
 8005790:	b94b      	cbnz	r3, 80057a6 <__swsetup_r+0x9a>
 8005792:	89a3      	ldrh	r3, [r4, #12]
 8005794:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800579c:	d003      	beq.n	80057a6 <__swsetup_r+0x9a>
 800579e:	4621      	mov	r1, r4
 80057a0:	4630      	mov	r0, r6
 80057a2:	f000 fa05 	bl	8005bb0 <__smakebuf_r>
 80057a6:	89a0      	ldrh	r0, [r4, #12]
 80057a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80057ac:	f010 0301 	ands.w	r3, r0, #1
 80057b0:	d00a      	beq.n	80057c8 <__swsetup_r+0xbc>
 80057b2:	2300      	movs	r3, #0
 80057b4:	60a3      	str	r3, [r4, #8]
 80057b6:	6963      	ldr	r3, [r4, #20]
 80057b8:	425b      	negs	r3, r3
 80057ba:	61a3      	str	r3, [r4, #24]
 80057bc:	6923      	ldr	r3, [r4, #16]
 80057be:	b943      	cbnz	r3, 80057d2 <__swsetup_r+0xc6>
 80057c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80057c4:	d1ba      	bne.n	800573c <__swsetup_r+0x30>
 80057c6:	bd70      	pop	{r4, r5, r6, pc}
 80057c8:	0781      	lsls	r1, r0, #30
 80057ca:	bf58      	it	pl
 80057cc:	6963      	ldrpl	r3, [r4, #20]
 80057ce:	60a3      	str	r3, [r4, #8]
 80057d0:	e7f4      	b.n	80057bc <__swsetup_r+0xb0>
 80057d2:	2000      	movs	r0, #0
 80057d4:	e7f7      	b.n	80057c6 <__swsetup_r+0xba>
 80057d6:	bf00      	nop
 80057d8:	2000000c 	.word	0x2000000c
 80057dc:	08008f8c 	.word	0x08008f8c
 80057e0:	08008fac 	.word	0x08008fac
 80057e4:	08008f6c 	.word	0x08008f6c

080057e8 <abort>:
 80057e8:	2006      	movs	r0, #6
 80057ea:	b508      	push	{r3, lr}
 80057ec:	f000 fa50 	bl	8005c90 <raise>
 80057f0:	2001      	movs	r0, #1
 80057f2:	f7fb fff5 	bl	80017e0 <_exit>
	...

080057f8 <__sflush_r>:
 80057f8:	898a      	ldrh	r2, [r1, #12]
 80057fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057fc:	4605      	mov	r5, r0
 80057fe:	0710      	lsls	r0, r2, #28
 8005800:	460c      	mov	r4, r1
 8005802:	d457      	bmi.n	80058b4 <__sflush_r+0xbc>
 8005804:	684b      	ldr	r3, [r1, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	dc04      	bgt.n	8005814 <__sflush_r+0x1c>
 800580a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800580c:	2b00      	cmp	r3, #0
 800580e:	dc01      	bgt.n	8005814 <__sflush_r+0x1c>
 8005810:	2000      	movs	r0, #0
 8005812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005814:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005816:	2e00      	cmp	r6, #0
 8005818:	d0fa      	beq.n	8005810 <__sflush_r+0x18>
 800581a:	2300      	movs	r3, #0
 800581c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005820:	682f      	ldr	r7, [r5, #0]
 8005822:	602b      	str	r3, [r5, #0]
 8005824:	d032      	beq.n	800588c <__sflush_r+0x94>
 8005826:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005828:	89a3      	ldrh	r3, [r4, #12]
 800582a:	075a      	lsls	r2, r3, #29
 800582c:	d505      	bpl.n	800583a <__sflush_r+0x42>
 800582e:	6863      	ldr	r3, [r4, #4]
 8005830:	1ac0      	subs	r0, r0, r3
 8005832:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005834:	b10b      	cbz	r3, 800583a <__sflush_r+0x42>
 8005836:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005838:	1ac0      	subs	r0, r0, r3
 800583a:	2300      	movs	r3, #0
 800583c:	4602      	mov	r2, r0
 800583e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005840:	4628      	mov	r0, r5
 8005842:	6a21      	ldr	r1, [r4, #32]
 8005844:	47b0      	blx	r6
 8005846:	1c43      	adds	r3, r0, #1
 8005848:	89a3      	ldrh	r3, [r4, #12]
 800584a:	d106      	bne.n	800585a <__sflush_r+0x62>
 800584c:	6829      	ldr	r1, [r5, #0]
 800584e:	291d      	cmp	r1, #29
 8005850:	d82c      	bhi.n	80058ac <__sflush_r+0xb4>
 8005852:	4a29      	ldr	r2, [pc, #164]	; (80058f8 <__sflush_r+0x100>)
 8005854:	40ca      	lsrs	r2, r1
 8005856:	07d6      	lsls	r6, r2, #31
 8005858:	d528      	bpl.n	80058ac <__sflush_r+0xb4>
 800585a:	2200      	movs	r2, #0
 800585c:	6062      	str	r2, [r4, #4]
 800585e:	6922      	ldr	r2, [r4, #16]
 8005860:	04d9      	lsls	r1, r3, #19
 8005862:	6022      	str	r2, [r4, #0]
 8005864:	d504      	bpl.n	8005870 <__sflush_r+0x78>
 8005866:	1c42      	adds	r2, r0, #1
 8005868:	d101      	bne.n	800586e <__sflush_r+0x76>
 800586a:	682b      	ldr	r3, [r5, #0]
 800586c:	b903      	cbnz	r3, 8005870 <__sflush_r+0x78>
 800586e:	6560      	str	r0, [r4, #84]	; 0x54
 8005870:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005872:	602f      	str	r7, [r5, #0]
 8005874:	2900      	cmp	r1, #0
 8005876:	d0cb      	beq.n	8005810 <__sflush_r+0x18>
 8005878:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800587c:	4299      	cmp	r1, r3
 800587e:	d002      	beq.n	8005886 <__sflush_r+0x8e>
 8005880:	4628      	mov	r0, r5
 8005882:	f7ff faad 	bl	8004de0 <_free_r>
 8005886:	2000      	movs	r0, #0
 8005888:	6360      	str	r0, [r4, #52]	; 0x34
 800588a:	e7c2      	b.n	8005812 <__sflush_r+0x1a>
 800588c:	6a21      	ldr	r1, [r4, #32]
 800588e:	2301      	movs	r3, #1
 8005890:	4628      	mov	r0, r5
 8005892:	47b0      	blx	r6
 8005894:	1c41      	adds	r1, r0, #1
 8005896:	d1c7      	bne.n	8005828 <__sflush_r+0x30>
 8005898:	682b      	ldr	r3, [r5, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d0c4      	beq.n	8005828 <__sflush_r+0x30>
 800589e:	2b1d      	cmp	r3, #29
 80058a0:	d001      	beq.n	80058a6 <__sflush_r+0xae>
 80058a2:	2b16      	cmp	r3, #22
 80058a4:	d101      	bne.n	80058aa <__sflush_r+0xb2>
 80058a6:	602f      	str	r7, [r5, #0]
 80058a8:	e7b2      	b.n	8005810 <__sflush_r+0x18>
 80058aa:	89a3      	ldrh	r3, [r4, #12]
 80058ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058b0:	81a3      	strh	r3, [r4, #12]
 80058b2:	e7ae      	b.n	8005812 <__sflush_r+0x1a>
 80058b4:	690f      	ldr	r7, [r1, #16]
 80058b6:	2f00      	cmp	r7, #0
 80058b8:	d0aa      	beq.n	8005810 <__sflush_r+0x18>
 80058ba:	0793      	lsls	r3, r2, #30
 80058bc:	bf18      	it	ne
 80058be:	2300      	movne	r3, #0
 80058c0:	680e      	ldr	r6, [r1, #0]
 80058c2:	bf08      	it	eq
 80058c4:	694b      	ldreq	r3, [r1, #20]
 80058c6:	1bf6      	subs	r6, r6, r7
 80058c8:	600f      	str	r7, [r1, #0]
 80058ca:	608b      	str	r3, [r1, #8]
 80058cc:	2e00      	cmp	r6, #0
 80058ce:	dd9f      	ble.n	8005810 <__sflush_r+0x18>
 80058d0:	4633      	mov	r3, r6
 80058d2:	463a      	mov	r2, r7
 80058d4:	4628      	mov	r0, r5
 80058d6:	6a21      	ldr	r1, [r4, #32]
 80058d8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80058dc:	47e0      	blx	ip
 80058de:	2800      	cmp	r0, #0
 80058e0:	dc06      	bgt.n	80058f0 <__sflush_r+0xf8>
 80058e2:	89a3      	ldrh	r3, [r4, #12]
 80058e4:	f04f 30ff 	mov.w	r0, #4294967295
 80058e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058ec:	81a3      	strh	r3, [r4, #12]
 80058ee:	e790      	b.n	8005812 <__sflush_r+0x1a>
 80058f0:	4407      	add	r7, r0
 80058f2:	1a36      	subs	r6, r6, r0
 80058f4:	e7ea      	b.n	80058cc <__sflush_r+0xd4>
 80058f6:	bf00      	nop
 80058f8:	20400001 	.word	0x20400001

080058fc <_fflush_r>:
 80058fc:	b538      	push	{r3, r4, r5, lr}
 80058fe:	690b      	ldr	r3, [r1, #16]
 8005900:	4605      	mov	r5, r0
 8005902:	460c      	mov	r4, r1
 8005904:	b913      	cbnz	r3, 800590c <_fflush_r+0x10>
 8005906:	2500      	movs	r5, #0
 8005908:	4628      	mov	r0, r5
 800590a:	bd38      	pop	{r3, r4, r5, pc}
 800590c:	b118      	cbz	r0, 8005916 <_fflush_r+0x1a>
 800590e:	6983      	ldr	r3, [r0, #24]
 8005910:	b90b      	cbnz	r3, 8005916 <_fflush_r+0x1a>
 8005912:	f000 f887 	bl	8005a24 <__sinit>
 8005916:	4b14      	ldr	r3, [pc, #80]	; (8005968 <_fflush_r+0x6c>)
 8005918:	429c      	cmp	r4, r3
 800591a:	d11b      	bne.n	8005954 <_fflush_r+0x58>
 800591c:	686c      	ldr	r4, [r5, #4]
 800591e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d0ef      	beq.n	8005906 <_fflush_r+0xa>
 8005926:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005928:	07d0      	lsls	r0, r2, #31
 800592a:	d404      	bmi.n	8005936 <_fflush_r+0x3a>
 800592c:	0599      	lsls	r1, r3, #22
 800592e:	d402      	bmi.n	8005936 <_fflush_r+0x3a>
 8005930:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005932:	f000 f915 	bl	8005b60 <__retarget_lock_acquire_recursive>
 8005936:	4628      	mov	r0, r5
 8005938:	4621      	mov	r1, r4
 800593a:	f7ff ff5d 	bl	80057f8 <__sflush_r>
 800593e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005940:	4605      	mov	r5, r0
 8005942:	07da      	lsls	r2, r3, #31
 8005944:	d4e0      	bmi.n	8005908 <_fflush_r+0xc>
 8005946:	89a3      	ldrh	r3, [r4, #12]
 8005948:	059b      	lsls	r3, r3, #22
 800594a:	d4dd      	bmi.n	8005908 <_fflush_r+0xc>
 800594c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800594e:	f000 f908 	bl	8005b62 <__retarget_lock_release_recursive>
 8005952:	e7d9      	b.n	8005908 <_fflush_r+0xc>
 8005954:	4b05      	ldr	r3, [pc, #20]	; (800596c <_fflush_r+0x70>)
 8005956:	429c      	cmp	r4, r3
 8005958:	d101      	bne.n	800595e <_fflush_r+0x62>
 800595a:	68ac      	ldr	r4, [r5, #8]
 800595c:	e7df      	b.n	800591e <_fflush_r+0x22>
 800595e:	4b04      	ldr	r3, [pc, #16]	; (8005970 <_fflush_r+0x74>)
 8005960:	429c      	cmp	r4, r3
 8005962:	bf08      	it	eq
 8005964:	68ec      	ldreq	r4, [r5, #12]
 8005966:	e7da      	b.n	800591e <_fflush_r+0x22>
 8005968:	08008f8c 	.word	0x08008f8c
 800596c:	08008fac 	.word	0x08008fac
 8005970:	08008f6c 	.word	0x08008f6c

08005974 <std>:
 8005974:	2300      	movs	r3, #0
 8005976:	b510      	push	{r4, lr}
 8005978:	4604      	mov	r4, r0
 800597a:	e9c0 3300 	strd	r3, r3, [r0]
 800597e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005982:	6083      	str	r3, [r0, #8]
 8005984:	8181      	strh	r1, [r0, #12]
 8005986:	6643      	str	r3, [r0, #100]	; 0x64
 8005988:	81c2      	strh	r2, [r0, #14]
 800598a:	6183      	str	r3, [r0, #24]
 800598c:	4619      	mov	r1, r3
 800598e:	2208      	movs	r2, #8
 8005990:	305c      	adds	r0, #92	; 0x5c
 8005992:	f7fd fb63 	bl	800305c <memset>
 8005996:	4b05      	ldr	r3, [pc, #20]	; (80059ac <std+0x38>)
 8005998:	6224      	str	r4, [r4, #32]
 800599a:	6263      	str	r3, [r4, #36]	; 0x24
 800599c:	4b04      	ldr	r3, [pc, #16]	; (80059b0 <std+0x3c>)
 800599e:	62a3      	str	r3, [r4, #40]	; 0x28
 80059a0:	4b04      	ldr	r3, [pc, #16]	; (80059b4 <std+0x40>)
 80059a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80059a4:	4b04      	ldr	r3, [pc, #16]	; (80059b8 <std+0x44>)
 80059a6:	6323      	str	r3, [r4, #48]	; 0x30
 80059a8:	bd10      	pop	{r4, pc}
 80059aa:	bf00      	nop
 80059ac:	08005cc9 	.word	0x08005cc9
 80059b0:	08005ceb 	.word	0x08005ceb
 80059b4:	08005d23 	.word	0x08005d23
 80059b8:	08005d47 	.word	0x08005d47

080059bc <_cleanup_r>:
 80059bc:	4901      	ldr	r1, [pc, #4]	; (80059c4 <_cleanup_r+0x8>)
 80059be:	f000 b8af 	b.w	8005b20 <_fwalk_reent>
 80059c2:	bf00      	nop
 80059c4:	080058fd 	.word	0x080058fd

080059c8 <__sfmoreglue>:
 80059c8:	2268      	movs	r2, #104	; 0x68
 80059ca:	b570      	push	{r4, r5, r6, lr}
 80059cc:	1e4d      	subs	r5, r1, #1
 80059ce:	4355      	muls	r5, r2
 80059d0:	460e      	mov	r6, r1
 80059d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80059d6:	f7ff fa6b 	bl	8004eb0 <_malloc_r>
 80059da:	4604      	mov	r4, r0
 80059dc:	b140      	cbz	r0, 80059f0 <__sfmoreglue+0x28>
 80059de:	2100      	movs	r1, #0
 80059e0:	e9c0 1600 	strd	r1, r6, [r0]
 80059e4:	300c      	adds	r0, #12
 80059e6:	60a0      	str	r0, [r4, #8]
 80059e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80059ec:	f7fd fb36 	bl	800305c <memset>
 80059f0:	4620      	mov	r0, r4
 80059f2:	bd70      	pop	{r4, r5, r6, pc}

080059f4 <__sfp_lock_acquire>:
 80059f4:	4801      	ldr	r0, [pc, #4]	; (80059fc <__sfp_lock_acquire+0x8>)
 80059f6:	f000 b8b3 	b.w	8005b60 <__retarget_lock_acquire_recursive>
 80059fa:	bf00      	nop
 80059fc:	20000271 	.word	0x20000271

08005a00 <__sfp_lock_release>:
 8005a00:	4801      	ldr	r0, [pc, #4]	; (8005a08 <__sfp_lock_release+0x8>)
 8005a02:	f000 b8ae 	b.w	8005b62 <__retarget_lock_release_recursive>
 8005a06:	bf00      	nop
 8005a08:	20000271 	.word	0x20000271

08005a0c <__sinit_lock_acquire>:
 8005a0c:	4801      	ldr	r0, [pc, #4]	; (8005a14 <__sinit_lock_acquire+0x8>)
 8005a0e:	f000 b8a7 	b.w	8005b60 <__retarget_lock_acquire_recursive>
 8005a12:	bf00      	nop
 8005a14:	20000272 	.word	0x20000272

08005a18 <__sinit_lock_release>:
 8005a18:	4801      	ldr	r0, [pc, #4]	; (8005a20 <__sinit_lock_release+0x8>)
 8005a1a:	f000 b8a2 	b.w	8005b62 <__retarget_lock_release_recursive>
 8005a1e:	bf00      	nop
 8005a20:	20000272 	.word	0x20000272

08005a24 <__sinit>:
 8005a24:	b510      	push	{r4, lr}
 8005a26:	4604      	mov	r4, r0
 8005a28:	f7ff fff0 	bl	8005a0c <__sinit_lock_acquire>
 8005a2c:	69a3      	ldr	r3, [r4, #24]
 8005a2e:	b11b      	cbz	r3, 8005a38 <__sinit+0x14>
 8005a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a34:	f7ff bff0 	b.w	8005a18 <__sinit_lock_release>
 8005a38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005a3c:	6523      	str	r3, [r4, #80]	; 0x50
 8005a3e:	4b13      	ldr	r3, [pc, #76]	; (8005a8c <__sinit+0x68>)
 8005a40:	4a13      	ldr	r2, [pc, #76]	; (8005a90 <__sinit+0x6c>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	62a2      	str	r2, [r4, #40]	; 0x28
 8005a46:	42a3      	cmp	r3, r4
 8005a48:	bf08      	it	eq
 8005a4a:	2301      	moveq	r3, #1
 8005a4c:	4620      	mov	r0, r4
 8005a4e:	bf08      	it	eq
 8005a50:	61a3      	streq	r3, [r4, #24]
 8005a52:	f000 f81f 	bl	8005a94 <__sfp>
 8005a56:	6060      	str	r0, [r4, #4]
 8005a58:	4620      	mov	r0, r4
 8005a5a:	f000 f81b 	bl	8005a94 <__sfp>
 8005a5e:	60a0      	str	r0, [r4, #8]
 8005a60:	4620      	mov	r0, r4
 8005a62:	f000 f817 	bl	8005a94 <__sfp>
 8005a66:	2200      	movs	r2, #0
 8005a68:	2104      	movs	r1, #4
 8005a6a:	60e0      	str	r0, [r4, #12]
 8005a6c:	6860      	ldr	r0, [r4, #4]
 8005a6e:	f7ff ff81 	bl	8005974 <std>
 8005a72:	2201      	movs	r2, #1
 8005a74:	2109      	movs	r1, #9
 8005a76:	68a0      	ldr	r0, [r4, #8]
 8005a78:	f7ff ff7c 	bl	8005974 <std>
 8005a7c:	2202      	movs	r2, #2
 8005a7e:	2112      	movs	r1, #18
 8005a80:	68e0      	ldr	r0, [r4, #12]
 8005a82:	f7ff ff77 	bl	8005974 <std>
 8005a86:	2301      	movs	r3, #1
 8005a88:	61a3      	str	r3, [r4, #24]
 8005a8a:	e7d1      	b.n	8005a30 <__sinit+0xc>
 8005a8c:	08008bf4 	.word	0x08008bf4
 8005a90:	080059bd 	.word	0x080059bd

08005a94 <__sfp>:
 8005a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a96:	4607      	mov	r7, r0
 8005a98:	f7ff ffac 	bl	80059f4 <__sfp_lock_acquire>
 8005a9c:	4b1e      	ldr	r3, [pc, #120]	; (8005b18 <__sfp+0x84>)
 8005a9e:	681e      	ldr	r6, [r3, #0]
 8005aa0:	69b3      	ldr	r3, [r6, #24]
 8005aa2:	b913      	cbnz	r3, 8005aaa <__sfp+0x16>
 8005aa4:	4630      	mov	r0, r6
 8005aa6:	f7ff ffbd 	bl	8005a24 <__sinit>
 8005aaa:	3648      	adds	r6, #72	; 0x48
 8005aac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	d503      	bpl.n	8005abc <__sfp+0x28>
 8005ab4:	6833      	ldr	r3, [r6, #0]
 8005ab6:	b30b      	cbz	r3, 8005afc <__sfp+0x68>
 8005ab8:	6836      	ldr	r6, [r6, #0]
 8005aba:	e7f7      	b.n	8005aac <__sfp+0x18>
 8005abc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005ac0:	b9d5      	cbnz	r5, 8005af8 <__sfp+0x64>
 8005ac2:	4b16      	ldr	r3, [pc, #88]	; (8005b1c <__sfp+0x88>)
 8005ac4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005ac8:	60e3      	str	r3, [r4, #12]
 8005aca:	6665      	str	r5, [r4, #100]	; 0x64
 8005acc:	f000 f847 	bl	8005b5e <__retarget_lock_init_recursive>
 8005ad0:	f7ff ff96 	bl	8005a00 <__sfp_lock_release>
 8005ad4:	2208      	movs	r2, #8
 8005ad6:	4629      	mov	r1, r5
 8005ad8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005adc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005ae0:	6025      	str	r5, [r4, #0]
 8005ae2:	61a5      	str	r5, [r4, #24]
 8005ae4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005ae8:	f7fd fab8 	bl	800305c <memset>
 8005aec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005af0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005af4:	4620      	mov	r0, r4
 8005af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005af8:	3468      	adds	r4, #104	; 0x68
 8005afa:	e7d9      	b.n	8005ab0 <__sfp+0x1c>
 8005afc:	2104      	movs	r1, #4
 8005afe:	4638      	mov	r0, r7
 8005b00:	f7ff ff62 	bl	80059c8 <__sfmoreglue>
 8005b04:	4604      	mov	r4, r0
 8005b06:	6030      	str	r0, [r6, #0]
 8005b08:	2800      	cmp	r0, #0
 8005b0a:	d1d5      	bne.n	8005ab8 <__sfp+0x24>
 8005b0c:	f7ff ff78 	bl	8005a00 <__sfp_lock_release>
 8005b10:	230c      	movs	r3, #12
 8005b12:	603b      	str	r3, [r7, #0]
 8005b14:	e7ee      	b.n	8005af4 <__sfp+0x60>
 8005b16:	bf00      	nop
 8005b18:	08008bf4 	.word	0x08008bf4
 8005b1c:	ffff0001 	.word	0xffff0001

08005b20 <_fwalk_reent>:
 8005b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b24:	4606      	mov	r6, r0
 8005b26:	4688      	mov	r8, r1
 8005b28:	2700      	movs	r7, #0
 8005b2a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005b2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b32:	f1b9 0901 	subs.w	r9, r9, #1
 8005b36:	d505      	bpl.n	8005b44 <_fwalk_reent+0x24>
 8005b38:	6824      	ldr	r4, [r4, #0]
 8005b3a:	2c00      	cmp	r4, #0
 8005b3c:	d1f7      	bne.n	8005b2e <_fwalk_reent+0xe>
 8005b3e:	4638      	mov	r0, r7
 8005b40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b44:	89ab      	ldrh	r3, [r5, #12]
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d907      	bls.n	8005b5a <_fwalk_reent+0x3a>
 8005b4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	d003      	beq.n	8005b5a <_fwalk_reent+0x3a>
 8005b52:	4629      	mov	r1, r5
 8005b54:	4630      	mov	r0, r6
 8005b56:	47c0      	blx	r8
 8005b58:	4307      	orrs	r7, r0
 8005b5a:	3568      	adds	r5, #104	; 0x68
 8005b5c:	e7e9      	b.n	8005b32 <_fwalk_reent+0x12>

08005b5e <__retarget_lock_init_recursive>:
 8005b5e:	4770      	bx	lr

08005b60 <__retarget_lock_acquire_recursive>:
 8005b60:	4770      	bx	lr

08005b62 <__retarget_lock_release_recursive>:
 8005b62:	4770      	bx	lr

08005b64 <__swhatbuf_r>:
 8005b64:	b570      	push	{r4, r5, r6, lr}
 8005b66:	460e      	mov	r6, r1
 8005b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b6c:	4614      	mov	r4, r2
 8005b6e:	2900      	cmp	r1, #0
 8005b70:	461d      	mov	r5, r3
 8005b72:	b096      	sub	sp, #88	; 0x58
 8005b74:	da08      	bge.n	8005b88 <__swhatbuf_r+0x24>
 8005b76:	2200      	movs	r2, #0
 8005b78:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005b7c:	602a      	str	r2, [r5, #0]
 8005b7e:	061a      	lsls	r2, r3, #24
 8005b80:	d410      	bmi.n	8005ba4 <__swhatbuf_r+0x40>
 8005b82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b86:	e00e      	b.n	8005ba6 <__swhatbuf_r+0x42>
 8005b88:	466a      	mov	r2, sp
 8005b8a:	f000 f903 	bl	8005d94 <_fstat_r>
 8005b8e:	2800      	cmp	r0, #0
 8005b90:	dbf1      	blt.n	8005b76 <__swhatbuf_r+0x12>
 8005b92:	9a01      	ldr	r2, [sp, #4]
 8005b94:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005b98:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005b9c:	425a      	negs	r2, r3
 8005b9e:	415a      	adcs	r2, r3
 8005ba0:	602a      	str	r2, [r5, #0]
 8005ba2:	e7ee      	b.n	8005b82 <__swhatbuf_r+0x1e>
 8005ba4:	2340      	movs	r3, #64	; 0x40
 8005ba6:	2000      	movs	r0, #0
 8005ba8:	6023      	str	r3, [r4, #0]
 8005baa:	b016      	add	sp, #88	; 0x58
 8005bac:	bd70      	pop	{r4, r5, r6, pc}
	...

08005bb0 <__smakebuf_r>:
 8005bb0:	898b      	ldrh	r3, [r1, #12]
 8005bb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005bb4:	079d      	lsls	r5, r3, #30
 8005bb6:	4606      	mov	r6, r0
 8005bb8:	460c      	mov	r4, r1
 8005bba:	d507      	bpl.n	8005bcc <__smakebuf_r+0x1c>
 8005bbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005bc0:	6023      	str	r3, [r4, #0]
 8005bc2:	6123      	str	r3, [r4, #16]
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	6163      	str	r3, [r4, #20]
 8005bc8:	b002      	add	sp, #8
 8005bca:	bd70      	pop	{r4, r5, r6, pc}
 8005bcc:	466a      	mov	r2, sp
 8005bce:	ab01      	add	r3, sp, #4
 8005bd0:	f7ff ffc8 	bl	8005b64 <__swhatbuf_r>
 8005bd4:	9900      	ldr	r1, [sp, #0]
 8005bd6:	4605      	mov	r5, r0
 8005bd8:	4630      	mov	r0, r6
 8005bda:	f7ff f969 	bl	8004eb0 <_malloc_r>
 8005bde:	b948      	cbnz	r0, 8005bf4 <__smakebuf_r+0x44>
 8005be0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005be4:	059a      	lsls	r2, r3, #22
 8005be6:	d4ef      	bmi.n	8005bc8 <__smakebuf_r+0x18>
 8005be8:	f023 0303 	bic.w	r3, r3, #3
 8005bec:	f043 0302 	orr.w	r3, r3, #2
 8005bf0:	81a3      	strh	r3, [r4, #12]
 8005bf2:	e7e3      	b.n	8005bbc <__smakebuf_r+0xc>
 8005bf4:	4b0d      	ldr	r3, [pc, #52]	; (8005c2c <__smakebuf_r+0x7c>)
 8005bf6:	62b3      	str	r3, [r6, #40]	; 0x28
 8005bf8:	89a3      	ldrh	r3, [r4, #12]
 8005bfa:	6020      	str	r0, [r4, #0]
 8005bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c00:	81a3      	strh	r3, [r4, #12]
 8005c02:	9b00      	ldr	r3, [sp, #0]
 8005c04:	6120      	str	r0, [r4, #16]
 8005c06:	6163      	str	r3, [r4, #20]
 8005c08:	9b01      	ldr	r3, [sp, #4]
 8005c0a:	b15b      	cbz	r3, 8005c24 <__smakebuf_r+0x74>
 8005c0c:	4630      	mov	r0, r6
 8005c0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c12:	f000 f8d1 	bl	8005db8 <_isatty_r>
 8005c16:	b128      	cbz	r0, 8005c24 <__smakebuf_r+0x74>
 8005c18:	89a3      	ldrh	r3, [r4, #12]
 8005c1a:	f023 0303 	bic.w	r3, r3, #3
 8005c1e:	f043 0301 	orr.w	r3, r3, #1
 8005c22:	81a3      	strh	r3, [r4, #12]
 8005c24:	89a0      	ldrh	r0, [r4, #12]
 8005c26:	4305      	orrs	r5, r0
 8005c28:	81a5      	strh	r5, [r4, #12]
 8005c2a:	e7cd      	b.n	8005bc8 <__smakebuf_r+0x18>
 8005c2c:	080059bd 	.word	0x080059bd

08005c30 <_malloc_usable_size_r>:
 8005c30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c34:	1f18      	subs	r0, r3, #4
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	bfbc      	itt	lt
 8005c3a:	580b      	ldrlt	r3, [r1, r0]
 8005c3c:	18c0      	addlt	r0, r0, r3
 8005c3e:	4770      	bx	lr

08005c40 <_raise_r>:
 8005c40:	291f      	cmp	r1, #31
 8005c42:	b538      	push	{r3, r4, r5, lr}
 8005c44:	4604      	mov	r4, r0
 8005c46:	460d      	mov	r5, r1
 8005c48:	d904      	bls.n	8005c54 <_raise_r+0x14>
 8005c4a:	2316      	movs	r3, #22
 8005c4c:	6003      	str	r3, [r0, #0]
 8005c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c52:	bd38      	pop	{r3, r4, r5, pc}
 8005c54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005c56:	b112      	cbz	r2, 8005c5e <_raise_r+0x1e>
 8005c58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005c5c:	b94b      	cbnz	r3, 8005c72 <_raise_r+0x32>
 8005c5e:	4620      	mov	r0, r4
 8005c60:	f000 f830 	bl	8005cc4 <_getpid_r>
 8005c64:	462a      	mov	r2, r5
 8005c66:	4601      	mov	r1, r0
 8005c68:	4620      	mov	r0, r4
 8005c6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c6e:	f000 b817 	b.w	8005ca0 <_kill_r>
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d00a      	beq.n	8005c8c <_raise_r+0x4c>
 8005c76:	1c59      	adds	r1, r3, #1
 8005c78:	d103      	bne.n	8005c82 <_raise_r+0x42>
 8005c7a:	2316      	movs	r3, #22
 8005c7c:	6003      	str	r3, [r0, #0]
 8005c7e:	2001      	movs	r0, #1
 8005c80:	e7e7      	b.n	8005c52 <_raise_r+0x12>
 8005c82:	2400      	movs	r4, #0
 8005c84:	4628      	mov	r0, r5
 8005c86:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005c8a:	4798      	blx	r3
 8005c8c:	2000      	movs	r0, #0
 8005c8e:	e7e0      	b.n	8005c52 <_raise_r+0x12>

08005c90 <raise>:
 8005c90:	4b02      	ldr	r3, [pc, #8]	; (8005c9c <raise+0xc>)
 8005c92:	4601      	mov	r1, r0
 8005c94:	6818      	ldr	r0, [r3, #0]
 8005c96:	f7ff bfd3 	b.w	8005c40 <_raise_r>
 8005c9a:	bf00      	nop
 8005c9c:	2000000c 	.word	0x2000000c

08005ca0 <_kill_r>:
 8005ca0:	b538      	push	{r3, r4, r5, lr}
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	4d06      	ldr	r5, [pc, #24]	; (8005cc0 <_kill_r+0x20>)
 8005ca6:	4604      	mov	r4, r0
 8005ca8:	4608      	mov	r0, r1
 8005caa:	4611      	mov	r1, r2
 8005cac:	602b      	str	r3, [r5, #0]
 8005cae:	f7fb fd87 	bl	80017c0 <_kill>
 8005cb2:	1c43      	adds	r3, r0, #1
 8005cb4:	d102      	bne.n	8005cbc <_kill_r+0x1c>
 8005cb6:	682b      	ldr	r3, [r5, #0]
 8005cb8:	b103      	cbz	r3, 8005cbc <_kill_r+0x1c>
 8005cba:	6023      	str	r3, [r4, #0]
 8005cbc:	bd38      	pop	{r3, r4, r5, pc}
 8005cbe:	bf00      	nop
 8005cc0:	2000026c 	.word	0x2000026c

08005cc4 <_getpid_r>:
 8005cc4:	f7fb bd75 	b.w	80017b2 <_getpid>

08005cc8 <__sread>:
 8005cc8:	b510      	push	{r4, lr}
 8005cca:	460c      	mov	r4, r1
 8005ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cd0:	f000 f894 	bl	8005dfc <_read_r>
 8005cd4:	2800      	cmp	r0, #0
 8005cd6:	bfab      	itete	ge
 8005cd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005cda:	89a3      	ldrhlt	r3, [r4, #12]
 8005cdc:	181b      	addge	r3, r3, r0
 8005cde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005ce2:	bfac      	ite	ge
 8005ce4:	6563      	strge	r3, [r4, #84]	; 0x54
 8005ce6:	81a3      	strhlt	r3, [r4, #12]
 8005ce8:	bd10      	pop	{r4, pc}

08005cea <__swrite>:
 8005cea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cee:	461f      	mov	r7, r3
 8005cf0:	898b      	ldrh	r3, [r1, #12]
 8005cf2:	4605      	mov	r5, r0
 8005cf4:	05db      	lsls	r3, r3, #23
 8005cf6:	460c      	mov	r4, r1
 8005cf8:	4616      	mov	r6, r2
 8005cfa:	d505      	bpl.n	8005d08 <__swrite+0x1e>
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d04:	f000 f868 	bl	8005dd8 <_lseek_r>
 8005d08:	89a3      	ldrh	r3, [r4, #12]
 8005d0a:	4632      	mov	r2, r6
 8005d0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d10:	81a3      	strh	r3, [r4, #12]
 8005d12:	4628      	mov	r0, r5
 8005d14:	463b      	mov	r3, r7
 8005d16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d1e:	f000 b817 	b.w	8005d50 <_write_r>

08005d22 <__sseek>:
 8005d22:	b510      	push	{r4, lr}
 8005d24:	460c      	mov	r4, r1
 8005d26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d2a:	f000 f855 	bl	8005dd8 <_lseek_r>
 8005d2e:	1c43      	adds	r3, r0, #1
 8005d30:	89a3      	ldrh	r3, [r4, #12]
 8005d32:	bf15      	itete	ne
 8005d34:	6560      	strne	r0, [r4, #84]	; 0x54
 8005d36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005d3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005d3e:	81a3      	strheq	r3, [r4, #12]
 8005d40:	bf18      	it	ne
 8005d42:	81a3      	strhne	r3, [r4, #12]
 8005d44:	bd10      	pop	{r4, pc}

08005d46 <__sclose>:
 8005d46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d4a:	f000 b813 	b.w	8005d74 <_close_r>
	...

08005d50 <_write_r>:
 8005d50:	b538      	push	{r3, r4, r5, lr}
 8005d52:	4604      	mov	r4, r0
 8005d54:	4608      	mov	r0, r1
 8005d56:	4611      	mov	r1, r2
 8005d58:	2200      	movs	r2, #0
 8005d5a:	4d05      	ldr	r5, [pc, #20]	; (8005d70 <_write_r+0x20>)
 8005d5c:	602a      	str	r2, [r5, #0]
 8005d5e:	461a      	mov	r2, r3
 8005d60:	f7fb fd65 	bl	800182e <_write>
 8005d64:	1c43      	adds	r3, r0, #1
 8005d66:	d102      	bne.n	8005d6e <_write_r+0x1e>
 8005d68:	682b      	ldr	r3, [r5, #0]
 8005d6a:	b103      	cbz	r3, 8005d6e <_write_r+0x1e>
 8005d6c:	6023      	str	r3, [r4, #0]
 8005d6e:	bd38      	pop	{r3, r4, r5, pc}
 8005d70:	2000026c 	.word	0x2000026c

08005d74 <_close_r>:
 8005d74:	b538      	push	{r3, r4, r5, lr}
 8005d76:	2300      	movs	r3, #0
 8005d78:	4d05      	ldr	r5, [pc, #20]	; (8005d90 <_close_r+0x1c>)
 8005d7a:	4604      	mov	r4, r0
 8005d7c:	4608      	mov	r0, r1
 8005d7e:	602b      	str	r3, [r5, #0]
 8005d80:	f7fb fd71 	bl	8001866 <_close>
 8005d84:	1c43      	adds	r3, r0, #1
 8005d86:	d102      	bne.n	8005d8e <_close_r+0x1a>
 8005d88:	682b      	ldr	r3, [r5, #0]
 8005d8a:	b103      	cbz	r3, 8005d8e <_close_r+0x1a>
 8005d8c:	6023      	str	r3, [r4, #0]
 8005d8e:	bd38      	pop	{r3, r4, r5, pc}
 8005d90:	2000026c 	.word	0x2000026c

08005d94 <_fstat_r>:
 8005d94:	b538      	push	{r3, r4, r5, lr}
 8005d96:	2300      	movs	r3, #0
 8005d98:	4d06      	ldr	r5, [pc, #24]	; (8005db4 <_fstat_r+0x20>)
 8005d9a:	4604      	mov	r4, r0
 8005d9c:	4608      	mov	r0, r1
 8005d9e:	4611      	mov	r1, r2
 8005da0:	602b      	str	r3, [r5, #0]
 8005da2:	f7fb fd6b 	bl	800187c <_fstat>
 8005da6:	1c43      	adds	r3, r0, #1
 8005da8:	d102      	bne.n	8005db0 <_fstat_r+0x1c>
 8005daa:	682b      	ldr	r3, [r5, #0]
 8005dac:	b103      	cbz	r3, 8005db0 <_fstat_r+0x1c>
 8005dae:	6023      	str	r3, [r4, #0]
 8005db0:	bd38      	pop	{r3, r4, r5, pc}
 8005db2:	bf00      	nop
 8005db4:	2000026c 	.word	0x2000026c

08005db8 <_isatty_r>:
 8005db8:	b538      	push	{r3, r4, r5, lr}
 8005dba:	2300      	movs	r3, #0
 8005dbc:	4d05      	ldr	r5, [pc, #20]	; (8005dd4 <_isatty_r+0x1c>)
 8005dbe:	4604      	mov	r4, r0
 8005dc0:	4608      	mov	r0, r1
 8005dc2:	602b      	str	r3, [r5, #0]
 8005dc4:	f7fb fd69 	bl	800189a <_isatty>
 8005dc8:	1c43      	adds	r3, r0, #1
 8005dca:	d102      	bne.n	8005dd2 <_isatty_r+0x1a>
 8005dcc:	682b      	ldr	r3, [r5, #0]
 8005dce:	b103      	cbz	r3, 8005dd2 <_isatty_r+0x1a>
 8005dd0:	6023      	str	r3, [r4, #0]
 8005dd2:	bd38      	pop	{r3, r4, r5, pc}
 8005dd4:	2000026c 	.word	0x2000026c

08005dd8 <_lseek_r>:
 8005dd8:	b538      	push	{r3, r4, r5, lr}
 8005dda:	4604      	mov	r4, r0
 8005ddc:	4608      	mov	r0, r1
 8005dde:	4611      	mov	r1, r2
 8005de0:	2200      	movs	r2, #0
 8005de2:	4d05      	ldr	r5, [pc, #20]	; (8005df8 <_lseek_r+0x20>)
 8005de4:	602a      	str	r2, [r5, #0]
 8005de6:	461a      	mov	r2, r3
 8005de8:	f7fb fd61 	bl	80018ae <_lseek>
 8005dec:	1c43      	adds	r3, r0, #1
 8005dee:	d102      	bne.n	8005df6 <_lseek_r+0x1e>
 8005df0:	682b      	ldr	r3, [r5, #0]
 8005df2:	b103      	cbz	r3, 8005df6 <_lseek_r+0x1e>
 8005df4:	6023      	str	r3, [r4, #0]
 8005df6:	bd38      	pop	{r3, r4, r5, pc}
 8005df8:	2000026c 	.word	0x2000026c

08005dfc <_read_r>:
 8005dfc:	b538      	push	{r3, r4, r5, lr}
 8005dfe:	4604      	mov	r4, r0
 8005e00:	4608      	mov	r0, r1
 8005e02:	4611      	mov	r1, r2
 8005e04:	2200      	movs	r2, #0
 8005e06:	4d05      	ldr	r5, [pc, #20]	; (8005e1c <_read_r+0x20>)
 8005e08:	602a      	str	r2, [r5, #0]
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	f7fb fcf2 	bl	80017f4 <_read>
 8005e10:	1c43      	adds	r3, r0, #1
 8005e12:	d102      	bne.n	8005e1a <_read_r+0x1e>
 8005e14:	682b      	ldr	r3, [r5, #0]
 8005e16:	b103      	cbz	r3, 8005e1a <_read_r+0x1e>
 8005e18:	6023      	str	r3, [r4, #0]
 8005e1a:	bd38      	pop	{r3, r4, r5, pc}
 8005e1c:	2000026c 	.word	0x2000026c

08005e20 <_init>:
 8005e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e22:	bf00      	nop
 8005e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e26:	bc08      	pop	{r3}
 8005e28:	469e      	mov	lr, r3
 8005e2a:	4770      	bx	lr

08005e2c <_fini>:
 8005e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e2e:	bf00      	nop
 8005e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e32:	bc08      	pop	{r3}
 8005e34:	469e      	mov	lr, r3
 8005e36:	4770      	bx	lr
