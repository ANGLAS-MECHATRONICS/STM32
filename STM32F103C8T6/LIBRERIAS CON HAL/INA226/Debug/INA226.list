
INA226.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003764  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003874  08003874  00013874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038a0  080038a0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080038a0  080038a0  000138a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038a8  080038a8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038a8  080038a8  000138a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038ac  080038ac  000138ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080038b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  2000000c  080038bc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  080038bc  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000680c  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001361  00000000  00000000  00026841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e0  00000000  00000000  00027ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000650  00000000  00000000  00028288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016084  00000000  00000000  000288d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008b2e  00000000  00000000  0003e95c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e933  00000000  00000000  0004748a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c5dbd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d54  00000000  00000000  000c5e10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800385c 	.word	0x0800385c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	0800385c 	.word	0x0800385c

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__aeabi_d2uiz>:
 8000a54:	004a      	lsls	r2, r1, #1
 8000a56:	d211      	bcs.n	8000a7c <__aeabi_d2uiz+0x28>
 8000a58:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a5c:	d211      	bcs.n	8000a82 <__aeabi_d2uiz+0x2e>
 8000a5e:	d50d      	bpl.n	8000a7c <__aeabi_d2uiz+0x28>
 8000a60:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a64:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a68:	d40e      	bmi.n	8000a88 <__aeabi_d2uiz+0x34>
 8000a6a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a72:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a76:	fa23 f002 	lsr.w	r0, r3, r2
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d102      	bne.n	8000a8e <__aeabi_d2uiz+0x3a>
 8000a88:	f04f 30ff 	mov.w	r0, #4294967295
 8000a8c:	4770      	bx	lr
 8000a8e:	f04f 0000 	mov.w	r0, #0
 8000a92:	4770      	bx	lr

08000a94 <__aeabi_d2f>:
 8000a94:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a98:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a9c:	bf24      	itt	cs
 8000a9e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aa2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aa6:	d90d      	bls.n	8000ac4 <__aeabi_d2f+0x30>
 8000aa8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ab4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000abc:	bf08      	it	eq
 8000abe:	f020 0001 	biceq.w	r0, r0, #1
 8000ac2:	4770      	bx	lr
 8000ac4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac8:	d121      	bne.n	8000b0e <__aeabi_d2f+0x7a>
 8000aca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ace:	bfbc      	itt	lt
 8000ad0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ad4:	4770      	bxlt	lr
 8000ad6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ada:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ade:	f1c2 0218 	rsb	r2, r2, #24
 8000ae2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ae6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aea:	fa20 f002 	lsr.w	r0, r0, r2
 8000aee:	bf18      	it	ne
 8000af0:	f040 0001 	orrne.w	r0, r0, #1
 8000af4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000afc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b00:	ea40 000c 	orr.w	r0, r0, ip
 8000b04:	fa23 f302 	lsr.w	r3, r3, r2
 8000b08:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b0c:	e7cc      	b.n	8000aa8 <__aeabi_d2f+0x14>
 8000b0e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b12:	d107      	bne.n	8000b24 <__aeabi_d2f+0x90>
 8000b14:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b18:	bf1e      	ittt	ne
 8000b1a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b1e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b22:	4770      	bxne	lr
 8000b24:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b28:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop

08000b34 <__aeabi_frsub>:
 8000b34:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b38:	e002      	b.n	8000b40 <__addsf3>
 8000b3a:	bf00      	nop

08000b3c <__aeabi_fsub>:
 8000b3c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b40 <__addsf3>:
 8000b40:	0042      	lsls	r2, r0, #1
 8000b42:	bf1f      	itttt	ne
 8000b44:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b48:	ea92 0f03 	teqne	r2, r3
 8000b4c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b50:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b54:	d06a      	beq.n	8000c2c <__addsf3+0xec>
 8000b56:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b5a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b5e:	bfc1      	itttt	gt
 8000b60:	18d2      	addgt	r2, r2, r3
 8000b62:	4041      	eorgt	r1, r0
 8000b64:	4048      	eorgt	r0, r1
 8000b66:	4041      	eorgt	r1, r0
 8000b68:	bfb8      	it	lt
 8000b6a:	425b      	neglt	r3, r3
 8000b6c:	2b19      	cmp	r3, #25
 8000b6e:	bf88      	it	hi
 8000b70:	4770      	bxhi	lr
 8000b72:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b76:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b7a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b7e:	bf18      	it	ne
 8000b80:	4240      	negne	r0, r0
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b86:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b8a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b8e:	bf18      	it	ne
 8000b90:	4249      	negne	r1, r1
 8000b92:	ea92 0f03 	teq	r2, r3
 8000b96:	d03f      	beq.n	8000c18 <__addsf3+0xd8>
 8000b98:	f1a2 0201 	sub.w	r2, r2, #1
 8000b9c:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba0:	eb10 000c 	adds.w	r0, r0, ip
 8000ba4:	f1c3 0320 	rsb	r3, r3, #32
 8000ba8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bac:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bb0:	d502      	bpl.n	8000bb8 <__addsf3+0x78>
 8000bb2:	4249      	negs	r1, r1
 8000bb4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bb8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bbc:	d313      	bcc.n	8000be6 <__addsf3+0xa6>
 8000bbe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bc2:	d306      	bcc.n	8000bd2 <__addsf3+0x92>
 8000bc4:	0840      	lsrs	r0, r0, #1
 8000bc6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bca:	f102 0201 	add.w	r2, r2, #1
 8000bce:	2afe      	cmp	r2, #254	; 0xfe
 8000bd0:	d251      	bcs.n	8000c76 <__addsf3+0x136>
 8000bd2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bd6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bda:	bf08      	it	eq
 8000bdc:	f020 0001 	biceq.w	r0, r0, #1
 8000be0:	ea40 0003 	orr.w	r0, r0, r3
 8000be4:	4770      	bx	lr
 8000be6:	0049      	lsls	r1, r1, #1
 8000be8:	eb40 0000 	adc.w	r0, r0, r0
 8000bec:	3a01      	subs	r2, #1
 8000bee:	bf28      	it	cs
 8000bf0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bf4:	d2ed      	bcs.n	8000bd2 <__addsf3+0x92>
 8000bf6:	fab0 fc80 	clz	ip, r0
 8000bfa:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bfe:	ebb2 020c 	subs.w	r2, r2, ip
 8000c02:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c06:	bfaa      	itet	ge
 8000c08:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c0c:	4252      	neglt	r2, r2
 8000c0e:	4318      	orrge	r0, r3
 8000c10:	bfbc      	itt	lt
 8000c12:	40d0      	lsrlt	r0, r2
 8000c14:	4318      	orrlt	r0, r3
 8000c16:	4770      	bx	lr
 8000c18:	f092 0f00 	teq	r2, #0
 8000c1c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c20:	bf06      	itte	eq
 8000c22:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c26:	3201      	addeq	r2, #1
 8000c28:	3b01      	subne	r3, #1
 8000c2a:	e7b5      	b.n	8000b98 <__addsf3+0x58>
 8000c2c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c30:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c34:	bf18      	it	ne
 8000c36:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c3a:	d021      	beq.n	8000c80 <__addsf3+0x140>
 8000c3c:	ea92 0f03 	teq	r2, r3
 8000c40:	d004      	beq.n	8000c4c <__addsf3+0x10c>
 8000c42:	f092 0f00 	teq	r2, #0
 8000c46:	bf08      	it	eq
 8000c48:	4608      	moveq	r0, r1
 8000c4a:	4770      	bx	lr
 8000c4c:	ea90 0f01 	teq	r0, r1
 8000c50:	bf1c      	itt	ne
 8000c52:	2000      	movne	r0, #0
 8000c54:	4770      	bxne	lr
 8000c56:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c5a:	d104      	bne.n	8000c66 <__addsf3+0x126>
 8000c5c:	0040      	lsls	r0, r0, #1
 8000c5e:	bf28      	it	cs
 8000c60:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c64:	4770      	bx	lr
 8000c66:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c6a:	bf3c      	itt	cc
 8000c6c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c70:	4770      	bxcc	lr
 8000c72:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c76:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c7a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c7e:	4770      	bx	lr
 8000c80:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c84:	bf16      	itet	ne
 8000c86:	4608      	movne	r0, r1
 8000c88:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c8c:	4601      	movne	r1, r0
 8000c8e:	0242      	lsls	r2, r0, #9
 8000c90:	bf06      	itte	eq
 8000c92:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c96:	ea90 0f01 	teqeq	r0, r1
 8000c9a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c9e:	4770      	bx	lr

08000ca0 <__aeabi_ui2f>:
 8000ca0:	f04f 0300 	mov.w	r3, #0
 8000ca4:	e004      	b.n	8000cb0 <__aeabi_i2f+0x8>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_i2f>:
 8000ca8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cac:	bf48      	it	mi
 8000cae:	4240      	negmi	r0, r0
 8000cb0:	ea5f 0c00 	movs.w	ip, r0
 8000cb4:	bf08      	it	eq
 8000cb6:	4770      	bxeq	lr
 8000cb8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cbc:	4601      	mov	r1, r0
 8000cbe:	f04f 0000 	mov.w	r0, #0
 8000cc2:	e01c      	b.n	8000cfe <__aeabi_l2f+0x2a>

08000cc4 <__aeabi_ul2f>:
 8000cc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	e00a      	b.n	8000ce8 <__aeabi_l2f+0x14>
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_l2f>:
 8000cd4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ce0:	d502      	bpl.n	8000ce8 <__aeabi_l2f+0x14>
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	ea5f 0c01 	movs.w	ip, r1
 8000cec:	bf02      	ittt	eq
 8000cee:	4684      	moveq	ip, r0
 8000cf0:	4601      	moveq	r1, r0
 8000cf2:	2000      	moveq	r0, #0
 8000cf4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cf8:	bf08      	it	eq
 8000cfa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cfe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d02:	fabc f28c 	clz	r2, ip
 8000d06:	3a08      	subs	r2, #8
 8000d08:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d0c:	db10      	blt.n	8000d30 <__aeabi_l2f+0x5c>
 8000d0e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d12:	4463      	add	r3, ip
 8000d14:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d18:	f1c2 0220 	rsb	r2, r2, #32
 8000d1c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d20:	fa20 f202 	lsr.w	r2, r0, r2
 8000d24:	eb43 0002 	adc.w	r0, r3, r2
 8000d28:	bf08      	it	eq
 8000d2a:	f020 0001 	biceq.w	r0, r0, #1
 8000d2e:	4770      	bx	lr
 8000d30:	f102 0220 	add.w	r2, r2, #32
 8000d34:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d38:	f1c2 0220 	rsb	r2, r2, #32
 8000d3c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d40:	fa21 f202 	lsr.w	r2, r1, r2
 8000d44:	eb43 0002 	adc.w	r0, r3, r2
 8000d48:	bf08      	it	eq
 8000d4a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d4e:	4770      	bx	lr

08000d50 <__aeabi_uldivmod>:
 8000d50:	b953      	cbnz	r3, 8000d68 <__aeabi_uldivmod+0x18>
 8000d52:	b94a      	cbnz	r2, 8000d68 <__aeabi_uldivmod+0x18>
 8000d54:	2900      	cmp	r1, #0
 8000d56:	bf08      	it	eq
 8000d58:	2800      	cmpeq	r0, #0
 8000d5a:	bf1c      	itt	ne
 8000d5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000d60:	f04f 30ff 	movne.w	r0, #4294967295
 8000d64:	f000 b976 	b.w	8001054 <__aeabi_idiv0>
 8000d68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d70:	f000 f806 	bl	8000d80 <__udivmoddi4>
 8000d74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d7c:	b004      	add	sp, #16
 8000d7e:	4770      	bx	lr

08000d80 <__udivmoddi4>:
 8000d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d84:	9e08      	ldr	r6, [sp, #32]
 8000d86:	460d      	mov	r5, r1
 8000d88:	4604      	mov	r4, r0
 8000d8a:	4688      	mov	r8, r1
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d14d      	bne.n	8000e2c <__udivmoddi4+0xac>
 8000d90:	428a      	cmp	r2, r1
 8000d92:	4694      	mov	ip, r2
 8000d94:	d968      	bls.n	8000e68 <__udivmoddi4+0xe8>
 8000d96:	fab2 f282 	clz	r2, r2
 8000d9a:	b152      	cbz	r2, 8000db2 <__udivmoddi4+0x32>
 8000d9c:	fa01 f302 	lsl.w	r3, r1, r2
 8000da0:	f1c2 0120 	rsb	r1, r2, #32
 8000da4:	fa20 f101 	lsr.w	r1, r0, r1
 8000da8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dac:	ea41 0803 	orr.w	r8, r1, r3
 8000db0:	4094      	lsls	r4, r2
 8000db2:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000db6:	fbb8 f7f1 	udiv	r7, r8, r1
 8000dba:	fa1f fe8c 	uxth.w	lr, ip
 8000dbe:	fb01 8817 	mls	r8, r1, r7, r8
 8000dc2:	fb07 f00e 	mul.w	r0, r7, lr
 8000dc6:	0c23      	lsrs	r3, r4, #16
 8000dc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	d90a      	bls.n	8000de6 <__udivmoddi4+0x66>
 8000dd0:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd4:	f107 35ff 	add.w	r5, r7, #4294967295
 8000dd8:	f080 811e 	bcs.w	8001018 <__udivmoddi4+0x298>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f240 811b 	bls.w	8001018 <__udivmoddi4+0x298>
 8000de2:	3f02      	subs	r7, #2
 8000de4:	4463      	add	r3, ip
 8000de6:	1a1b      	subs	r3, r3, r0
 8000de8:	fbb3 f0f1 	udiv	r0, r3, r1
 8000dec:	fb01 3310 	mls	r3, r1, r0, r3
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	b2a4      	uxth	r4, r4
 8000df6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d90a      	bls.n	8000e14 <__udivmoddi4+0x94>
 8000dfe:	eb1c 0404 	adds.w	r4, ip, r4
 8000e02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e06:	f080 8109 	bcs.w	800101c <__udivmoddi4+0x29c>
 8000e0a:	45a6      	cmp	lr, r4
 8000e0c:	f240 8106 	bls.w	800101c <__udivmoddi4+0x29c>
 8000e10:	4464      	add	r4, ip
 8000e12:	3802      	subs	r0, #2
 8000e14:	2100      	movs	r1, #0
 8000e16:	eba4 040e 	sub.w	r4, r4, lr
 8000e1a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000e1e:	b11e      	cbz	r6, 8000e28 <__udivmoddi4+0xa8>
 8000e20:	2300      	movs	r3, #0
 8000e22:	40d4      	lsrs	r4, r2
 8000e24:	e9c6 4300 	strd	r4, r3, [r6]
 8000e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2c:	428b      	cmp	r3, r1
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0xc2>
 8000e30:	2e00      	cmp	r6, #0
 8000e32:	f000 80ee 	beq.w	8001012 <__udivmoddi4+0x292>
 8000e36:	2100      	movs	r1, #0
 8000e38:	e9c6 0500 	strd	r0, r5, [r6]
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	fab3 f183 	clz	r1, r3
 8000e46:	2900      	cmp	r1, #0
 8000e48:	d14a      	bne.n	8000ee0 <__udivmoddi4+0x160>
 8000e4a:	42ab      	cmp	r3, r5
 8000e4c:	d302      	bcc.n	8000e54 <__udivmoddi4+0xd4>
 8000e4e:	4282      	cmp	r2, r0
 8000e50:	f200 80fc 	bhi.w	800104c <__udivmoddi4+0x2cc>
 8000e54:	1a84      	subs	r4, r0, r2
 8000e56:	eb65 0303 	sbc.w	r3, r5, r3
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	4698      	mov	r8, r3
 8000e5e:	2e00      	cmp	r6, #0
 8000e60:	d0e2      	beq.n	8000e28 <__udivmoddi4+0xa8>
 8000e62:	e9c6 4800 	strd	r4, r8, [r6]
 8000e66:	e7df      	b.n	8000e28 <__udivmoddi4+0xa8>
 8000e68:	b902      	cbnz	r2, 8000e6c <__udivmoddi4+0xec>
 8000e6a:	deff      	udf	#255	; 0xff
 8000e6c:	fab2 f282 	clz	r2, r2
 8000e70:	2a00      	cmp	r2, #0
 8000e72:	f040 8091 	bne.w	8000f98 <__udivmoddi4+0x218>
 8000e76:	eba1 000c 	sub.w	r0, r1, ip
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e80:	fa1f fe8c 	uxth.w	lr, ip
 8000e84:	fbb0 f3f7 	udiv	r3, r0, r7
 8000e88:	fb07 0013 	mls	r0, r7, r3, r0
 8000e8c:	0c25      	lsrs	r5, r4, #16
 8000e8e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000e92:	fb0e f003 	mul.w	r0, lr, r3
 8000e96:	42a8      	cmp	r0, r5
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x12c>
 8000e9a:	eb1c 0505 	adds.w	r5, ip, r5
 8000e9e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x12a>
 8000ea4:	42a8      	cmp	r0, r5
 8000ea6:	f200 80ce 	bhi.w	8001046 <__udivmoddi4+0x2c6>
 8000eaa:	4643      	mov	r3, r8
 8000eac:	1a2d      	subs	r5, r5, r0
 8000eae:	fbb5 f0f7 	udiv	r0, r5, r7
 8000eb2:	fb07 5510 	mls	r5, r7, r0, r5
 8000eb6:	fb0e fe00 	mul.w	lr, lr, r0
 8000eba:	b2a4      	uxth	r4, r4
 8000ebc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ec0:	45a6      	cmp	lr, r4
 8000ec2:	d908      	bls.n	8000ed6 <__udivmoddi4+0x156>
 8000ec4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec8:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ecc:	d202      	bcs.n	8000ed4 <__udivmoddi4+0x154>
 8000ece:	45a6      	cmp	lr, r4
 8000ed0:	f200 80b6 	bhi.w	8001040 <__udivmoddi4+0x2c0>
 8000ed4:	4628      	mov	r0, r5
 8000ed6:	eba4 040e 	sub.w	r4, r4, lr
 8000eda:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ede:	e79e      	b.n	8000e1e <__udivmoddi4+0x9e>
 8000ee0:	f1c1 0720 	rsb	r7, r1, #32
 8000ee4:	408b      	lsls	r3, r1
 8000ee6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eee:	fa25 fa07 	lsr.w	sl, r5, r7
 8000ef2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef6:	fbba f8f9 	udiv	r8, sl, r9
 8000efa:	fa20 f307 	lsr.w	r3, r0, r7
 8000efe:	fb09 aa18 	mls	sl, r9, r8, sl
 8000f02:	408d      	lsls	r5, r1
 8000f04:	fa1f fe8c 	uxth.w	lr, ip
 8000f08:	431d      	orrs	r5, r3
 8000f0a:	fa00 f301 	lsl.w	r3, r0, r1
 8000f0e:	fb08 f00e 	mul.w	r0, r8, lr
 8000f12:	0c2c      	lsrs	r4, r5, #16
 8000f14:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000f18:	42a0      	cmp	r0, r4
 8000f1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f1e:	d90b      	bls.n	8000f38 <__udivmoddi4+0x1b8>
 8000f20:	eb1c 0404 	adds.w	r4, ip, r4
 8000f24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f28:	f080 8088 	bcs.w	800103c <__udivmoddi4+0x2bc>
 8000f2c:	42a0      	cmp	r0, r4
 8000f2e:	f240 8085 	bls.w	800103c <__udivmoddi4+0x2bc>
 8000f32:	f1a8 0802 	sub.w	r8, r8, #2
 8000f36:	4464      	add	r4, ip
 8000f38:	1a24      	subs	r4, r4, r0
 8000f3a:	fbb4 f0f9 	udiv	r0, r4, r9
 8000f3e:	fb09 4410 	mls	r4, r9, r0, r4
 8000f42:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f46:	b2ad      	uxth	r5, r5
 8000f48:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f4c:	45a6      	cmp	lr, r4
 8000f4e:	d908      	bls.n	8000f62 <__udivmoddi4+0x1e2>
 8000f50:	eb1c 0404 	adds.w	r4, ip, r4
 8000f54:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f58:	d26c      	bcs.n	8001034 <__udivmoddi4+0x2b4>
 8000f5a:	45a6      	cmp	lr, r4
 8000f5c:	d96a      	bls.n	8001034 <__udivmoddi4+0x2b4>
 8000f5e:	3802      	subs	r0, #2
 8000f60:	4464      	add	r4, ip
 8000f62:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f66:	fba0 9502 	umull	r9, r5, r0, r2
 8000f6a:	eba4 040e 	sub.w	r4, r4, lr
 8000f6e:	42ac      	cmp	r4, r5
 8000f70:	46c8      	mov	r8, r9
 8000f72:	46ae      	mov	lr, r5
 8000f74:	d356      	bcc.n	8001024 <__udivmoddi4+0x2a4>
 8000f76:	d053      	beq.n	8001020 <__udivmoddi4+0x2a0>
 8000f78:	2e00      	cmp	r6, #0
 8000f7a:	d069      	beq.n	8001050 <__udivmoddi4+0x2d0>
 8000f7c:	ebb3 0208 	subs.w	r2, r3, r8
 8000f80:	eb64 040e 	sbc.w	r4, r4, lr
 8000f84:	fa22 f301 	lsr.w	r3, r2, r1
 8000f88:	fa04 f707 	lsl.w	r7, r4, r7
 8000f8c:	431f      	orrs	r7, r3
 8000f8e:	40cc      	lsrs	r4, r1
 8000f90:	e9c6 7400 	strd	r7, r4, [r6]
 8000f94:	2100      	movs	r1, #0
 8000f96:	e747      	b.n	8000e28 <__udivmoddi4+0xa8>
 8000f98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f9c:	f1c2 0120 	rsb	r1, r2, #32
 8000fa0:	fa25 f301 	lsr.w	r3, r5, r1
 8000fa4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa8:	fa20 f101 	lsr.w	r1, r0, r1
 8000fac:	4095      	lsls	r5, r2
 8000fae:	430d      	orrs	r5, r1
 8000fb0:	fbb3 f1f7 	udiv	r1, r3, r7
 8000fb4:	fb07 3311 	mls	r3, r7, r1, r3
 8000fb8:	fa1f fe8c 	uxth.w	lr, ip
 8000fbc:	0c28      	lsrs	r0, r5, #16
 8000fbe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000fc2:	fb01 f30e 	mul.w	r3, r1, lr
 8000fc6:	4283      	cmp	r3, r0
 8000fc8:	fa04 f402 	lsl.w	r4, r4, r2
 8000fcc:	d908      	bls.n	8000fe0 <__udivmoddi4+0x260>
 8000fce:	eb1c 0000 	adds.w	r0, ip, r0
 8000fd2:	f101 38ff 	add.w	r8, r1, #4294967295
 8000fd6:	d22f      	bcs.n	8001038 <__udivmoddi4+0x2b8>
 8000fd8:	4283      	cmp	r3, r0
 8000fda:	d92d      	bls.n	8001038 <__udivmoddi4+0x2b8>
 8000fdc:	3902      	subs	r1, #2
 8000fde:	4460      	add	r0, ip
 8000fe0:	1ac0      	subs	r0, r0, r3
 8000fe2:	fbb0 f3f7 	udiv	r3, r0, r7
 8000fe6:	fb07 0013 	mls	r0, r7, r3, r0
 8000fea:	b2ad      	uxth	r5, r5
 8000fec:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000ff0:	fb03 f00e 	mul.w	r0, r3, lr
 8000ff4:	42a8      	cmp	r0, r5
 8000ff6:	d908      	bls.n	800100a <__udivmoddi4+0x28a>
 8000ff8:	eb1c 0505 	adds.w	r5, ip, r5
 8000ffc:	f103 38ff 	add.w	r8, r3, #4294967295
 8001000:	d216      	bcs.n	8001030 <__udivmoddi4+0x2b0>
 8001002:	42a8      	cmp	r0, r5
 8001004:	d914      	bls.n	8001030 <__udivmoddi4+0x2b0>
 8001006:	3b02      	subs	r3, #2
 8001008:	4465      	add	r5, ip
 800100a:	1a28      	subs	r0, r5, r0
 800100c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001010:	e738      	b.n	8000e84 <__udivmoddi4+0x104>
 8001012:	4631      	mov	r1, r6
 8001014:	4630      	mov	r0, r6
 8001016:	e707      	b.n	8000e28 <__udivmoddi4+0xa8>
 8001018:	462f      	mov	r7, r5
 800101a:	e6e4      	b.n	8000de6 <__udivmoddi4+0x66>
 800101c:	4618      	mov	r0, r3
 800101e:	e6f9      	b.n	8000e14 <__udivmoddi4+0x94>
 8001020:	454b      	cmp	r3, r9
 8001022:	d2a9      	bcs.n	8000f78 <__udivmoddi4+0x1f8>
 8001024:	ebb9 0802 	subs.w	r8, r9, r2
 8001028:	eb65 0e0c 	sbc.w	lr, r5, ip
 800102c:	3801      	subs	r0, #1
 800102e:	e7a3      	b.n	8000f78 <__udivmoddi4+0x1f8>
 8001030:	4643      	mov	r3, r8
 8001032:	e7ea      	b.n	800100a <__udivmoddi4+0x28a>
 8001034:	4628      	mov	r0, r5
 8001036:	e794      	b.n	8000f62 <__udivmoddi4+0x1e2>
 8001038:	4641      	mov	r1, r8
 800103a:	e7d1      	b.n	8000fe0 <__udivmoddi4+0x260>
 800103c:	46d0      	mov	r8, sl
 800103e:	e77b      	b.n	8000f38 <__udivmoddi4+0x1b8>
 8001040:	4464      	add	r4, ip
 8001042:	3802      	subs	r0, #2
 8001044:	e747      	b.n	8000ed6 <__udivmoddi4+0x156>
 8001046:	3b02      	subs	r3, #2
 8001048:	4465      	add	r5, ip
 800104a:	e72f      	b.n	8000eac <__udivmoddi4+0x12c>
 800104c:	4608      	mov	r0, r1
 800104e:	e706      	b.n	8000e5e <__udivmoddi4+0xde>
 8001050:	4631      	mov	r1, r6
 8001052:	e6e9      	b.n	8000e28 <__udivmoddi4+0xa8>

08001054 <__aeabi_idiv0>:
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop

08001058 <INA226_Init>:
/* Private macros ------------------------------------------------------------*/
/* Variables -----------------------------------------------------------------*/
Anglas_IN226 ina;
/* Private functions ---------------------------------------------------------*/
/* Exported functions --------------------------------------------------------*/
void INA226_Init(const uint16_t maxBusMiliampers, const uint16_t resMiliohmios, uint16_t AVG, uint16_t Time_Vbus, uint16_t Time_Vshunt, uint16_t ModeOperation){
 8001058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800105c:	b091      	sub	sp, #68	; 0x44
 800105e:	af02      	add	r7, sp, #8
 8001060:	461e      	mov	r6, r3
 8001062:	4603      	mov	r3, r0
 8001064:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001066:	460b      	mov	r3, r1
 8001068:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800106a:	4613      	mov	r3, r2
 800106c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800106e:	4633      	mov	r3, r6
 8001070:	853b      	strh	r3, [r7, #40]	; 0x28
	uint8_t datos[3];
	uint8_t MSB,LSB;
	uint16_t REGISTER;

	ina.Rshunt = resMiliohmios; //esto lo hago porq necesito Rshunt para la funcion "INA226_Alert_Limit_Write"
 8001072:	4a72      	ldr	r2, [pc, #456]	; (800123c <INA226_Init+0x1e4>)
 8001074:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001076:	81d3      	strh	r3, [r2, #14]
	 * bit 11-9 : 100 (AVG=128, promedio de numero de muestras)
	 * bit  8-6 : 100 (T=1.1ms, tiempo de conversion de Vbus)
	 * bit  5-3 : 111 (T=8.24ms, tiempo de conversion de Vshunt)
	 * bit  2-0 : 111 (Shunt & Bus continuo, modo de operacion)
	*/
	REGISTER = NO_RESET_INA226|(AVG << 9)|(Time_Vbus << 6)|(Time_Vshunt << 3)|ModeOperation;
 8001078:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800107a:	025b      	lsls	r3, r3, #9
 800107c:	b21b      	sxth	r3, r3
 800107e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001082:	b21a      	sxth	r2, r3
 8001084:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001086:	019b      	lsls	r3, r3, #6
 8001088:	b21b      	sxth	r3, r3
 800108a:	4313      	orrs	r3, r2
 800108c:	b21a      	sxth	r2, r3
 800108e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	b21b      	sxth	r3, r3
 8001096:	4313      	orrs	r3, r2
 8001098:	b21a      	sxth	r2, r3
 800109a:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 800109e:	4313      	orrs	r3, r2
 80010a0:	b21b      	sxth	r3, r3
 80010a2:	86fb      	strh	r3, [r7, #54]	; 0x36

	MSB = (uint8_t)(REGISTER >> 8);
 80010a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80010a6:	0a1b      	lsrs	r3, r3, #8
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	LSB = (uint8_t)(REGISTER & 0xFF);
 80010ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80010b0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	datos[0] = INA_CONFIGURATION_REGISTER;
 80010b4:	2300      	movs	r3, #0
 80010b6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	datos[1] = MSB;
 80010ba:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80010be:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	datos[2] = LSB;
 80010c2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80010c6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	HAL_I2C_Master_Transmit (&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 3, 100);
 80010ca:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80010ce:	2364      	movs	r3, #100	; 0x64
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	2303      	movs	r3, #3
 80010d4:	2180      	movs	r1, #128	; 0x80
 80010d6:	485a      	ldr	r0, [pc, #360]	; (8001240 <INA226_Init+0x1e8>)
 80010d8:	f001 f8a8 	bl	800222c <HAL_I2C_Master_Transmit>

	ina.current_LSB = (uint64_t)maxBusMiliampers*1000000/32767; // Conseguir el mejor LSB posible en nA
 80010dc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80010de:	2200      	movs	r2, #0
 80010e0:	469a      	mov	sl, r3
 80010e2:	4693      	mov	fp, r2
 80010e4:	4652      	mov	r2, sl
 80010e6:	465b      	mov	r3, fp
 80010e8:	f04f 0000 	mov.w	r0, #0
 80010ec:	f04f 0100 	mov.w	r1, #0
 80010f0:	0159      	lsls	r1, r3, #5
 80010f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80010f6:	0150      	lsls	r0, r2, #5
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	ebb2 040a 	subs.w	r4, r2, sl
 8001100:	eb63 050b 	sbc.w	r5, r3, fp
 8001104:	f04f 0200 	mov.w	r2, #0
 8001108:	f04f 0300 	mov.w	r3, #0
 800110c:	026b      	lsls	r3, r5, #9
 800110e:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8001112:	0262      	lsls	r2, r4, #9
 8001114:	4614      	mov	r4, r2
 8001116:	461d      	mov	r5, r3
 8001118:	eb14 080a 	adds.w	r8, r4, sl
 800111c:	eb45 090b 	adc.w	r9, r5, fp
 8001120:	f04f 0200 	mov.w	r2, #0
 8001124:	f04f 0300 	mov.w	r3, #0
 8001128:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800112c:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001130:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001134:	ebb2 0108 	subs.w	r1, r2, r8
 8001138:	6039      	str	r1, [r7, #0]
 800113a:	eb63 0309 	sbc.w	r3, r3, r9
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001144:	461a      	mov	r2, r3
 8001146:	eb12 020a 	adds.w	r2, r2, sl
 800114a:	61ba      	str	r2, [r7, #24]
 800114c:	4623      	mov	r3, r4
 800114e:	eb43 030b 	adc.w	r3, r3, fp
 8001152:	61fb      	str	r3, [r7, #28]
 8001154:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001158:	f04f 0300 	mov.w	r3, #0
 800115c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001160:	f7ff fdf6 	bl	8000d50 <__aeabi_uldivmod>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4b34      	ldr	r3, [pc, #208]	; (800123c <INA226_Init+0x1e4>)
 800116a:	605a      	str	r2, [r3, #4]
	ina.calibration = (uint64_t)5120000 / ((uint64_t)ina.current_LSB * (uint64_t)resMiliohmios / (uint64_t)1000);  // Compute calibration register
 800116c:	4b33      	ldr	r3, [pc, #204]	; (800123c <INA226_Init+0x1e4>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	617a      	str	r2, [r7, #20]
 8001176:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001178:	2200      	movs	r2, #0
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	60fa      	str	r2, [r7, #12]
 800117e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001182:	4622      	mov	r2, r4
 8001184:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8001188:	4629      	mov	r1, r5
 800118a:	fb01 f202 	mul.w	r2, r1, r2
 800118e:	46b4      	mov	ip, r6
 8001190:	4618      	mov	r0, r3
 8001192:	4621      	mov	r1, r4
 8001194:	4603      	mov	r3, r0
 8001196:	fb03 f30c 	mul.w	r3, r3, ip
 800119a:	4413      	add	r3, r2
 800119c:	4602      	mov	r2, r0
 800119e:	4629      	mov	r1, r5
 80011a0:	fba2 2101 	umull	r2, r1, r2, r1
 80011a4:	6279      	str	r1, [r7, #36]	; 0x24
 80011a6:	623a      	str	r2, [r7, #32]
 80011a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011aa:	4413      	add	r3, r2
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
 80011ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011b2:	f04f 0300 	mov.w	r3, #0
 80011b6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80011ba:	f7ff fdc9 	bl	8000d50 <__aeabi_uldivmod>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	4820      	ldr	r0, [pc, #128]	; (8001244 <INA226_Init+0x1ec>)
 80011c4:	f04f 0100 	mov.w	r1, #0
 80011c8:	f7ff fdc2 	bl	8000d50 <__aeabi_uldivmod>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	b292      	uxth	r2, r2
 80011d2:	4b1a      	ldr	r3, [pc, #104]	; (800123c <INA226_Init+0x1e4>)
 80011d4:	805a      	strh	r2, [r3, #2]

	//La formula para "power_LSB" es solo multiplicar "current_LSB" por 25 (pag.16 datasheet)
	//Lo resto 900 para calibrar(probar desde 600 - 1500 )
	//Lo divido entre 1000 porq el numero es muy grande y para la operacion de "INA226_Power()" el numero excede de uint32_t
	ina.power_LSB   = (uint32_t)25*(ina.current_LSB-900)/1000;
 80011d6:	4b19      	ldr	r3, [pc, #100]	; (800123c <INA226_Init+0x1e4>)
 80011d8:	685a      	ldr	r2, [r3, #4]
 80011da:	4613      	mov	r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	4413      	add	r3, r2
 80011e0:	009a      	lsls	r2, r3, #2
 80011e2:	4413      	add	r3, r2
 80011e4:	f5a3 43af 	sub.w	r3, r3, #22400	; 0x5780
 80011e8:	3b64      	subs	r3, #100	; 0x64
 80011ea:	4a17      	ldr	r2, [pc, #92]	; (8001248 <INA226_Init+0x1f0>)
 80011ec:	fba2 2303 	umull	r2, r3, r2, r3
 80011f0:	099b      	lsrs	r3, r3, #6
 80011f2:	4a12      	ldr	r2, [pc, #72]	; (800123c <INA226_Init+0x1e4>)
 80011f4:	6093      	str	r3, [r2, #8]

	MSB = (uint8_t)(ina.calibration >> 8);
 80011f6:	4b11      	ldr	r3, [pc, #68]	; (800123c <INA226_Init+0x1e4>)
 80011f8:	885b      	ldrh	r3, [r3, #2]
 80011fa:	0a1b      	lsrs	r3, r3, #8
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	LSB = (uint8_t)(ina.calibration & 0xFF);
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <INA226_Init+0x1e4>)
 8001204:	885b      	ldrh	r3, [r3, #2]
 8001206:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	datos[0] = INA_CALIBRATION_REGISTER;
 800120a:	2305      	movs	r3, #5
 800120c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	datos[1] = MSB;
 8001210:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001214:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	datos[2] = LSB;
 8001218:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800121c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	HAL_I2C_Master_Transmit (&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 3, 100);
 8001220:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001224:	2364      	movs	r3, #100	; 0x64
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	2303      	movs	r3, #3
 800122a:	2180      	movs	r1, #128	; 0x80
 800122c:	4804      	ldr	r0, [pc, #16]	; (8001240 <INA226_Init+0x1e8>)
 800122e:	f000 fffd 	bl	800222c <HAL_I2C_Master_Transmit>
}
 8001232:	bf00      	nop
 8001234:	373c      	adds	r7, #60	; 0x3c
 8001236:	46bd      	mov	sp, r7
 8001238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800123c:	20000028 	.word	0x20000028
 8001240:	2000003c 	.word	0x2000003c
 8001244:	004e2000 	.word	0x004e2000
 8001248:	10624dd3 	.word	0x10624dd3
 800124c:	00000000 	.word	0x00000000

08001250 <INA226_Vbus>:
	dato = ((datos[0]<<8)|datos[1]);
	Vshunt = (uint32_t)dato * INA_SHUNT_VOLTAGE_LSB;
	return Vshunt;
}

float INA226_Vbus(void){
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af02      	add	r7, sp, #8
	uint16_t dato;
	uint32_t Vbus;
	uint8_t datos[3];

	datos[0] = INA_BUS_VOLTAGE_REGISTER;
 8001256:	2302      	movs	r3, #2
 8001258:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Master_Transmit (&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 1, 100);
 800125a:	1d3a      	adds	r2, r7, #4
 800125c:	2364      	movs	r3, #100	; 0x64
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	2301      	movs	r3, #1
 8001262:	2180      	movs	r1, #128	; 0x80
 8001264:	4818      	ldr	r0, [pc, #96]	; (80012c8 <INA226_Vbus+0x78>)
 8001266:	f000 ffe1 	bl	800222c <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&hi2c1, INA226_I2C_ADDRESS_READ, (uint8_t*)datos, 2, 100);
 800126a:	1d3a      	adds	r2, r7, #4
 800126c:	2364      	movs	r3, #100	; 0x64
 800126e:	9300      	str	r3, [sp, #0]
 8001270:	2302      	movs	r3, #2
 8001272:	2181      	movs	r1, #129	; 0x81
 8001274:	4814      	ldr	r0, [pc, #80]	; (80012c8 <INA226_Vbus+0x78>)
 8001276:	f001 f8d7 	bl	8002428 <HAL_I2C_Master_Receive>
	dato = ((datos[0]<<8)|datos[1]);
 800127a:	793b      	ldrb	r3, [r7, #4]
 800127c:	021b      	lsls	r3, r3, #8
 800127e:	b21a      	sxth	r2, r3
 8001280:	797b      	ldrb	r3, [r7, #5]
 8001282:	b21b      	sxth	r3, r3
 8001284:	4313      	orrs	r3, r2
 8001286:	b21b      	sxth	r3, r3
 8001288:	81fb      	strh	r3, [r7, #14]
	Vbus = (uint32_t)dato * INA_BUS_VOLTAGE_LSB;
 800128a:	89fa      	ldrh	r2, [r7, #14]
 800128c:	4613      	mov	r3, r2
 800128e:	015b      	lsls	r3, r3, #5
 8001290:	1a9b      	subs	r3, r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4413      	add	r3, r2
 8001296:	60bb      	str	r3, [r7, #8]

	return Vbus/100000.0;//Voltios;
 8001298:	68b8      	ldr	r0, [r7, #8]
 800129a:	f7ff f94f 	bl	800053c <__aeabi_ui2d>
 800129e:	a308      	add	r3, pc, #32	; (adr r3, 80012c0 <INA226_Vbus+0x70>)
 80012a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a4:	f7ff faee 	bl	8000884 <__aeabi_ddiv>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4610      	mov	r0, r2
 80012ae:	4619      	mov	r1, r3
 80012b0:	f7ff fbf0 	bl	8000a94 <__aeabi_d2f>
 80012b4:	4603      	mov	r3, r0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	00000000 	.word	0x00000000
 80012c4:	40f86a00 	.word	0x40f86a00
 80012c8:	2000003c 	.word	0x2000003c
 80012cc:	00000000 	.word	0x00000000

080012d0 <INA226_Current>:

float INA226_Current(void){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af02      	add	r7, sp, #8
	uint16_t dato;
	uint32_t current;
	uint8_t datos[3];

	datos[0] = INA_CURRENT_REGISTER;
 80012d6:	2304      	movs	r3, #4
 80012d8:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Master_Transmit (&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 1, 100);
 80012da:	1d3a      	adds	r2, r7, #4
 80012dc:	2364      	movs	r3, #100	; 0x64
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	2301      	movs	r3, #1
 80012e2:	2180      	movs	r1, #128	; 0x80
 80012e4:	4818      	ldr	r0, [pc, #96]	; (8001348 <INA226_Current+0x78>)
 80012e6:	f000 ffa1 	bl	800222c <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&hi2c1, INA226_I2C_ADDRESS_READ, (uint8_t*)datos, 2, 100);
 80012ea:	1d3a      	adds	r2, r7, #4
 80012ec:	2364      	movs	r3, #100	; 0x64
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	2302      	movs	r3, #2
 80012f2:	2181      	movs	r1, #129	; 0x81
 80012f4:	4814      	ldr	r0, [pc, #80]	; (8001348 <INA226_Current+0x78>)
 80012f6:	f001 f897 	bl	8002428 <HAL_I2C_Master_Receive>
	dato = ((datos[0]<<8)|datos[1]);
 80012fa:	793b      	ldrb	r3, [r7, #4]
 80012fc:	021b      	lsls	r3, r3, #8
 80012fe:	b21a      	sxth	r2, r3
 8001300:	797b      	ldrb	r3, [r7, #5]
 8001302:	b21b      	sxth	r3, r3
 8001304:	4313      	orrs	r3, r2
 8001306:	b21b      	sxth	r3, r3
 8001308:	81fb      	strh	r3, [r7, #14]
	current = (uint32_t)dato * (ina.current_LSB-900);
 800130a:	89fb      	ldrh	r3, [r7, #14]
 800130c:	4a0f      	ldr	r2, [pc, #60]	; (800134c <INA226_Current+0x7c>)
 800130e:	6852      	ldr	r2, [r2, #4]
 8001310:	f5a2 7261 	sub.w	r2, r2, #900	; 0x384
 8001314:	fb02 f303 	mul.w	r3, r2, r3
 8001318:	60bb      	str	r3, [r7, #8]
	return current/1000000.0;//mA;
 800131a:	68b8      	ldr	r0, [r7, #8]
 800131c:	f7ff f90e 	bl	800053c <__aeabi_ui2d>
 8001320:	a307      	add	r3, pc, #28	; (adr r3, 8001340 <INA226_Current+0x70>)
 8001322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001326:	f7ff faad 	bl	8000884 <__aeabi_ddiv>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4610      	mov	r0, r2
 8001330:	4619      	mov	r1, r3
 8001332:	f7ff fbaf 	bl	8000a94 <__aeabi_d2f>
 8001336:	4603      	mov	r3, r0
}
 8001338:	4618      	mov	r0, r3
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	00000000 	.word	0x00000000
 8001344:	412e8480 	.word	0x412e8480
 8001348:	2000003c 	.word	0x2000003c
 800134c:	20000028 	.word	0x20000028

08001350 <INA226_Power>:

float INA226_Power(void){
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af02      	add	r7, sp, #8
	uint16_t dato;
	uint32_t power;
	uint8_t datos[3];

	datos[0] = INA_POWER_REGISTER;
 8001356:	2303      	movs	r3, #3
 8001358:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Master_Transmit (&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 1, 100);
 800135a:	1d3a      	adds	r2, r7, #4
 800135c:	2364      	movs	r3, #100	; 0x64
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	2301      	movs	r3, #1
 8001362:	2180      	movs	r1, #128	; 0x80
 8001364:	4818      	ldr	r0, [pc, #96]	; (80013c8 <INA226_Power+0x78>)
 8001366:	f000 ff61 	bl	800222c <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&hi2c1, INA226_I2C_ADDRESS_READ, (uint8_t*)datos, 2, 100);
 800136a:	1d3a      	adds	r2, r7, #4
 800136c:	2364      	movs	r3, #100	; 0x64
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	2302      	movs	r3, #2
 8001372:	2181      	movs	r1, #129	; 0x81
 8001374:	4814      	ldr	r0, [pc, #80]	; (80013c8 <INA226_Power+0x78>)
 8001376:	f001 f857 	bl	8002428 <HAL_I2C_Master_Receive>
	dato = ((datos[0]<<8)|datos[1]);
 800137a:	793b      	ldrb	r3, [r7, #4]
 800137c:	021b      	lsls	r3, r3, #8
 800137e:	b21a      	sxth	r2, r3
 8001380:	797b      	ldrb	r3, [r7, #5]
 8001382:	b21b      	sxth	r3, r3
 8001384:	4313      	orrs	r3, r2
 8001386:	b21b      	sxth	r3, r3
 8001388:	81fb      	strh	r3, [r7, #14]
	power = (uint32_t)dato * ina.power_LSB;
 800138a:	89fb      	ldrh	r3, [r7, #14]
 800138c:	4a0f      	ldr	r2, [pc, #60]	; (80013cc <INA226_Power+0x7c>)
 800138e:	6892      	ldr	r2, [r2, #8]
 8001390:	fb02 f303 	mul.w	r3, r2, r3
 8001394:	60bb      	str	r3, [r7, #8]
	return power/1000000.0;//Watts;
 8001396:	68b8      	ldr	r0, [r7, #8]
 8001398:	f7ff f8d0 	bl	800053c <__aeabi_ui2d>
 800139c:	a308      	add	r3, pc, #32	; (adr r3, 80013c0 <INA226_Power+0x70>)
 800139e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a2:	f7ff fa6f 	bl	8000884 <__aeabi_ddiv>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	4610      	mov	r0, r2
 80013ac:	4619      	mov	r1, r3
 80013ae:	f7ff fb71 	bl	8000a94 <__aeabi_d2f>
 80013b2:	4603      	mov	r3, r0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3710      	adds	r7, #16
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	f3af 8000 	nop.w
 80013c0:	00000000 	.word	0x00000000
 80013c4:	412e8480 	.word	0x412e8480
 80013c8:	2000003c 	.word	0x2000003c
 80013cc:	20000028 	.word	0x20000028

080013d0 <INA226_Mode_pinAlert>:

uint16_t INA226_Mode_pinAlert(uint16_t umbral){// 1000 0xxx xxx0 0010 = 0x2002
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af02      	add	r7, sp, #8
 80013d6:	4603      	mov	r3, r0
 80013d8:	80fb      	strh	r3, [r7, #6]
	uint16_t dato;
	uint8_t datos[3];
	uint8_t MSB,LSB;

	ina.mask_Enable = umbral;
 80013da:	4a1c      	ldr	r2, [pc, #112]	; (800144c <INA226_Mode_pinAlert+0x7c>)
 80013dc:	88fb      	ldrh	r3, [r7, #6]
 80013de:	8213      	strh	r3, [r2, #16]
	 * bit  2: 0 (Indicador de desbordamiento matematico)
	 * bit  1: 1 (Polaridad de alerta 1:Invertido 0:Normal)
	 * bit  0: 0 (Alert Latch Enable)
	*/

	MSB = (uint8_t)(umbral >> 8);
 80013e0:	88fb      	ldrh	r3, [r7, #6]
 80013e2:	0a1b      	lsrs	r3, r3, #8
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	73fb      	strb	r3, [r7, #15]
	LSB = (uint8_t)(umbral & 0xFF);
 80013e8:	88fb      	ldrh	r3, [r7, #6]
 80013ea:	73bb      	strb	r3, [r7, #14]

	//Envio el "umbral" al registro mask/enable
	datos[0] = INA_MASK_ENABLE_REGISTER;
 80013ec:	2306      	movs	r3, #6
 80013ee:	723b      	strb	r3, [r7, #8]
	datos[1] = MSB;
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
 80013f2:	727b      	strb	r3, [r7, #9]
	datos[2] = LSB;
 80013f4:	7bbb      	ldrb	r3, [r7, #14]
 80013f6:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Master_Transmit (&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 3, 100);
 80013f8:	f107 0208 	add.w	r2, r7, #8
 80013fc:	2364      	movs	r3, #100	; 0x64
 80013fe:	9300      	str	r3, [sp, #0]
 8001400:	2303      	movs	r3, #3
 8001402:	2180      	movs	r1, #128	; 0x80
 8001404:	4812      	ldr	r0, [pc, #72]	; (8001450 <INA226_Mode_pinAlert+0x80>)
 8001406:	f000 ff11 	bl	800222c <HAL_I2C_Master_Transmit>

	//Leo el dato "umbral" que envie, para verificar que llego correctamente
	datos[0] = INA_MASK_ENABLE_REGISTER;
 800140a:	2306      	movs	r3, #6
 800140c:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit (&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 1, 100);
 800140e:	f107 0208 	add.w	r2, r7, #8
 8001412:	2364      	movs	r3, #100	; 0x64
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	2301      	movs	r3, #1
 8001418:	2180      	movs	r1, #128	; 0x80
 800141a:	480d      	ldr	r0, [pc, #52]	; (8001450 <INA226_Mode_pinAlert+0x80>)
 800141c:	f000 ff06 	bl	800222c <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&hi2c1, INA226_I2C_ADDRESS_READ, (uint8_t*)datos, 2, 100);
 8001420:	f107 0208 	add.w	r2, r7, #8
 8001424:	2364      	movs	r3, #100	; 0x64
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	2302      	movs	r3, #2
 800142a:	2181      	movs	r1, #129	; 0x81
 800142c:	4808      	ldr	r0, [pc, #32]	; (8001450 <INA226_Mode_pinAlert+0x80>)
 800142e:	f000 fffb 	bl	8002428 <HAL_I2C_Master_Receive>
	dato = ((datos[0]<<8)|datos[1]);
 8001432:	7a3b      	ldrb	r3, [r7, #8]
 8001434:	021b      	lsls	r3, r3, #8
 8001436:	b21a      	sxth	r2, r3
 8001438:	7a7b      	ldrb	r3, [r7, #9]
 800143a:	b21b      	sxth	r3, r3
 800143c:	4313      	orrs	r3, r2
 800143e:	b21b      	sxth	r3, r3
 8001440:	81bb      	strh	r3, [r7, #12]
	return dato;
 8001442:	89bb      	ldrh	r3, [r7, #12]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000028 	.word	0x20000028
 8001450:	2000003c 	.word	0x2000003c
 8001454:	00000000 	.word	0x00000000

08001458 <INA226_Alert_Limit>:

uint16_t INA226_Alert_Limit(uint16_t limite){//presicion ±2mA, el mV y mW falta probar, pero es muy preciso
 8001458:	b5b0      	push	{r4, r5, r7, lr}
 800145a:	b088      	sub	sp, #32
 800145c:	af02      	add	r7, sp, #8
 800145e:	4603      	mov	r3, r0
 8001460:	80fb      	strh	r3, [r7, #6]
	uint16_t dato;
	uint8_t datos[3];
	uint8_t MSB,LSB;
	float calibrar=1.0099;////lo multiplico por 1.0099 para calibrarlo, esto lo hice con varias pruebas fisicas y probando con varios Rload
 8001462:	4b91      	ldr	r3, [pc, #580]	; (80016a8 <INA226_Alert_Limit+0x250>)
 8001464:	617b      	str	r3, [r7, #20]
	 * dato = power/ina.power_LSB;
	 * dato = (power*1000)/ina.power_LSB;      se multiplica por 1000 para tener el "dato" en 16bits
	 * 										   dato: es el valor(0-32767) que nos devuelve el IN226 en "INA226_Vbus()"
	 * 										   limite = power (Ingresar "uint16_t limite" en miliwatts)
	*/
	switch(ina.mask_Enable){
 8001466:	4b91      	ldr	r3, [pc, #580]	; (80016ac <INA226_Alert_Limit+0x254>)
 8001468:	8a1b      	ldrh	r3, [r3, #16]
 800146a:	f248 0202 	movw	r2, #32770	; 0x8002
 800146e:	4293      	cmp	r3, r2
 8001470:	d021      	beq.n	80014b6 <INA226_Alert_Limit+0x5e>
 8001472:	f248 0202 	movw	r2, #32770	; 0x8002
 8001476:	4293      	cmp	r3, r2
 8001478:	f300 80dc 	bgt.w	8001634 <INA226_Alert_Limit+0x1dc>
 800147c:	f244 0202 	movw	r2, #16386	; 0x4002
 8001480:	4293      	cmp	r3, r2
 8001482:	d04f      	beq.n	8001524 <INA226_Alert_Limit+0xcc>
 8001484:	f244 0202 	movw	r2, #16386	; 0x4002
 8001488:	4293      	cmp	r3, r2
 800148a:	f300 80d3 	bgt.w	8001634 <INA226_Alert_Limit+0x1dc>
 800148e:	f242 0202 	movw	r2, #8194	; 0x2002
 8001492:	4293      	cmp	r3, r2
 8001494:	d07d      	beq.n	8001592 <INA226_Alert_Limit+0x13a>
 8001496:	f242 0202 	movw	r2, #8194	; 0x2002
 800149a:	4293      	cmp	r3, r2
 800149c:	f300 80ca 	bgt.w	8001634 <INA226_Alert_Limit+0x1dc>
 80014a0:	f640 0202 	movw	r2, #2050	; 0x802
 80014a4:	4293      	cmp	r3, r2
 80014a6:	f000 80a0 	beq.w	80015ea <INA226_Alert_Limit+0x192>
 80014aa:	f241 0202 	movw	r2, #4098	; 0x1002
 80014ae:	4293      	cmp	r3, r2
 80014b0:	f000 8085 	beq.w	80015be <INA226_Alert_Limit+0x166>
 80014b4:	e0be      	b.n	8001634 <INA226_Alert_Limit+0x1dc>
		case SHUNT_VOLTAGE_OVER : limite = ((float)limite*ina.Rshunt*10.0*calibrar)/INA_SHUNT_VOLTAGE_LSB;break;
 80014b6:	88fb      	ldrh	r3, [r7, #6]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff fbf1 	bl	8000ca0 <__aeabi_ui2f>
 80014be:	4604      	mov	r4, r0
 80014c0:	4b7a      	ldr	r3, [pc, #488]	; (80016ac <INA226_Alert_Limit+0x254>)
 80014c2:	89db      	ldrh	r3, [r3, #14]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff fbef 	bl	8000ca8 <__aeabi_i2f>
 80014ca:	4603      	mov	r3, r0
 80014cc:	4619      	mov	r1, r3
 80014ce:	4620      	mov	r0, r4
 80014d0:	f7fe fe3e 	bl	8000150 <__aeabi_fmul>
 80014d4:	4603      	mov	r3, r0
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff f852 	bl	8000580 <__aeabi_f2d>
 80014dc:	f04f 0200 	mov.w	r2, #0
 80014e0:	4b73      	ldr	r3, [pc, #460]	; (80016b0 <INA226_Alert_Limit+0x258>)
 80014e2:	f7ff f8a5 	bl	8000630 <__aeabi_dmul>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	4614      	mov	r4, r2
 80014ec:	461d      	mov	r5, r3
 80014ee:	6978      	ldr	r0, [r7, #20]
 80014f0:	f7ff f846 	bl	8000580 <__aeabi_f2d>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	4620      	mov	r0, r4
 80014fa:	4629      	mov	r1, r5
 80014fc:	f7ff f898 	bl	8000630 <__aeabi_dmul>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	4610      	mov	r0, r2
 8001506:	4619      	mov	r1, r3
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	4b69      	ldr	r3, [pc, #420]	; (80016b4 <INA226_Alert_Limit+0x25c>)
 800150e:	f7ff f9b9 	bl	8000884 <__aeabi_ddiv>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	4610      	mov	r0, r2
 8001518:	4619      	mov	r1, r3
 800151a:	f7ff fa9b 	bl	8000a54 <__aeabi_d2uiz>
 800151e:	4603      	mov	r3, r0
 8001520:	80fb      	strh	r3, [r7, #6]
 8001522:	e087      	b.n	8001634 <INA226_Alert_Limit+0x1dc>
		case SHUNT_VOLTAGE_UNDER: limite = ((float)limite*ina.Rshunt*10.0*calibrar)/INA_SHUNT_VOLTAGE_LSB;break;
 8001524:	88fb      	ldrh	r3, [r7, #6]
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fbba 	bl	8000ca0 <__aeabi_ui2f>
 800152c:	4604      	mov	r4, r0
 800152e:	4b5f      	ldr	r3, [pc, #380]	; (80016ac <INA226_Alert_Limit+0x254>)
 8001530:	89db      	ldrh	r3, [r3, #14]
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff fbb8 	bl	8000ca8 <__aeabi_i2f>
 8001538:	4603      	mov	r3, r0
 800153a:	4619      	mov	r1, r3
 800153c:	4620      	mov	r0, r4
 800153e:	f7fe fe07 	bl	8000150 <__aeabi_fmul>
 8001542:	4603      	mov	r3, r0
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff f81b 	bl	8000580 <__aeabi_f2d>
 800154a:	f04f 0200 	mov.w	r2, #0
 800154e:	4b58      	ldr	r3, [pc, #352]	; (80016b0 <INA226_Alert_Limit+0x258>)
 8001550:	f7ff f86e 	bl	8000630 <__aeabi_dmul>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	4614      	mov	r4, r2
 800155a:	461d      	mov	r5, r3
 800155c:	6978      	ldr	r0, [r7, #20]
 800155e:	f7ff f80f 	bl	8000580 <__aeabi_f2d>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	4620      	mov	r0, r4
 8001568:	4629      	mov	r1, r5
 800156a:	f7ff f861 	bl	8000630 <__aeabi_dmul>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	4610      	mov	r0, r2
 8001574:	4619      	mov	r1, r3
 8001576:	f04f 0200 	mov.w	r2, #0
 800157a:	4b4e      	ldr	r3, [pc, #312]	; (80016b4 <INA226_Alert_Limit+0x25c>)
 800157c:	f7ff f982 	bl	8000884 <__aeabi_ddiv>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	4610      	mov	r0, r2
 8001586:	4619      	mov	r1, r3
 8001588:	f7ff fa64 	bl	8000a54 <__aeabi_d2uiz>
 800158c:	4603      	mov	r3, r0
 800158e:	80fb      	strh	r3, [r7, #6]
 8001590:	e050      	b.n	8001634 <INA226_Alert_Limit+0x1dc>
		case BUS_VOLTAGE_OVER   : limite = ((float)limite*0.8);break;
 8001592:	88fb      	ldrh	r3, [r7, #6]
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff fb83 	bl	8000ca0 <__aeabi_ui2f>
 800159a:	4603      	mov	r3, r0
 800159c:	4618      	mov	r0, r3
 800159e:	f7fe ffef 	bl	8000580 <__aeabi_f2d>
 80015a2:	a33f      	add	r3, pc, #252	; (adr r3, 80016a0 <INA226_Alert_Limit+0x248>)
 80015a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a8:	f7ff f842 	bl	8000630 <__aeabi_dmul>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	4610      	mov	r0, r2
 80015b2:	4619      	mov	r1, r3
 80015b4:	f7ff fa4e 	bl	8000a54 <__aeabi_d2uiz>
 80015b8:	4603      	mov	r3, r0
 80015ba:	80fb      	strh	r3, [r7, #6]
 80015bc:	e03a      	b.n	8001634 <INA226_Alert_Limit+0x1dc>
		case BUS_VOLTAGE_UNDER  : limite = ((float)limite*0.8);break;
 80015be:	88fb      	ldrh	r3, [r7, #6]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff fb6d 	bl	8000ca0 <__aeabi_ui2f>
 80015c6:	4603      	mov	r3, r0
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7fe ffd9 	bl	8000580 <__aeabi_f2d>
 80015ce:	a334      	add	r3, pc, #208	; (adr r3, 80016a0 <INA226_Alert_Limit+0x248>)
 80015d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d4:	f7ff f82c 	bl	8000630 <__aeabi_dmul>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4610      	mov	r0, r2
 80015de:	4619      	mov	r1, r3
 80015e0:	f7ff fa38 	bl	8000a54 <__aeabi_d2uiz>
 80015e4:	4603      	mov	r3, r0
 80015e6:	80fb      	strh	r3, [r7, #6]
 80015e8:	e024      	b.n	8001634 <INA226_Alert_Limit+0x1dc>
		case OVER_LIMIT_POWER   : limite = ((float)limite*1000.0)/ina.power_LSB;break;
 80015ea:	88fb      	ldrh	r3, [r7, #6]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff fb57 	bl	8000ca0 <__aeabi_ui2f>
 80015f2:	4603      	mov	r3, r0
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7fe ffc3 	bl	8000580 <__aeabi_f2d>
 80015fa:	f04f 0200 	mov.w	r2, #0
 80015fe:	4b2e      	ldr	r3, [pc, #184]	; (80016b8 <INA226_Alert_Limit+0x260>)
 8001600:	f7ff f816 	bl	8000630 <__aeabi_dmul>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	4614      	mov	r4, r2
 800160a:	461d      	mov	r5, r3
 800160c:	4b27      	ldr	r3, [pc, #156]	; (80016ac <INA226_Alert_Limit+0x254>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	4618      	mov	r0, r3
 8001612:	f7fe ff93 	bl	800053c <__aeabi_ui2d>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	4620      	mov	r0, r4
 800161c:	4629      	mov	r1, r5
 800161e:	f7ff f931 	bl	8000884 <__aeabi_ddiv>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4610      	mov	r0, r2
 8001628:	4619      	mov	r1, r3
 800162a:	f7ff fa13 	bl	8000a54 <__aeabi_d2uiz>
 800162e:	4603      	mov	r3, r0
 8001630:	80fb      	strh	r3, [r7, #6]
 8001632:	bf00      	nop
	}

	MSB = (uint8_t)(limite >> 8);
 8001634:	88fb      	ldrh	r3, [r7, #6]
 8001636:	0a1b      	lsrs	r3, r3, #8
 8001638:	b29b      	uxth	r3, r3
 800163a:	74fb      	strb	r3, [r7, #19]
	LSB = (uint8_t)(limite & 0xFF);
 800163c:	88fb      	ldrh	r3, [r7, #6]
 800163e:	74bb      	strb	r3, [r7, #18]

	//Envio el "limite" al registro mask/enable
	datos[0] = INA_ALERT_LIMIT_REGISTER;
 8001640:	2307      	movs	r3, #7
 8001642:	733b      	strb	r3, [r7, #12]
	datos[1] = MSB;
 8001644:	7cfb      	ldrb	r3, [r7, #19]
 8001646:	737b      	strb	r3, [r7, #13]
	datos[2] = LSB;
 8001648:	7cbb      	ldrb	r3, [r7, #18]
 800164a:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit (&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 3, 100);
 800164c:	f107 020c 	add.w	r2, r7, #12
 8001650:	2364      	movs	r3, #100	; 0x64
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	2303      	movs	r3, #3
 8001656:	2180      	movs	r1, #128	; 0x80
 8001658:	4818      	ldr	r0, [pc, #96]	; (80016bc <INA226_Alert_Limit+0x264>)
 800165a:	f000 fde7 	bl	800222c <HAL_I2C_Master_Transmit>

	//Leo el dato "limite" que envie, para verificar que llego correctamente
	datos[0] = INA_ALERT_LIMIT_REGISTER;
 800165e:	2307      	movs	r3, #7
 8001660:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit (&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 1, 100);
 8001662:	f107 020c 	add.w	r2, r7, #12
 8001666:	2364      	movs	r3, #100	; 0x64
 8001668:	9300      	str	r3, [sp, #0]
 800166a:	2301      	movs	r3, #1
 800166c:	2180      	movs	r1, #128	; 0x80
 800166e:	4813      	ldr	r0, [pc, #76]	; (80016bc <INA226_Alert_Limit+0x264>)
 8001670:	f000 fddc 	bl	800222c <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&hi2c1, INA226_I2C_ADDRESS_READ, (uint8_t*)datos, 2, 100);
 8001674:	f107 020c 	add.w	r2, r7, #12
 8001678:	2364      	movs	r3, #100	; 0x64
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	2302      	movs	r3, #2
 800167e:	2181      	movs	r1, #129	; 0x81
 8001680:	480e      	ldr	r0, [pc, #56]	; (80016bc <INA226_Alert_Limit+0x264>)
 8001682:	f000 fed1 	bl	8002428 <HAL_I2C_Master_Receive>
	dato = ((datos[0]<<8)|datos[1]);
 8001686:	7b3b      	ldrb	r3, [r7, #12]
 8001688:	021b      	lsls	r3, r3, #8
 800168a:	b21a      	sxth	r2, r3
 800168c:	7b7b      	ldrb	r3, [r7, #13]
 800168e:	b21b      	sxth	r3, r3
 8001690:	4313      	orrs	r3, r2
 8001692:	b21b      	sxth	r3, r3
 8001694:	823b      	strh	r3, [r7, #16]
	return dato;
 8001696:	8a3b      	ldrh	r3, [r7, #16]
}
 8001698:	4618      	mov	r0, r3
 800169a:	3718      	adds	r7, #24
 800169c:	46bd      	mov	sp, r7
 800169e:	bdb0      	pop	{r4, r5, r7, pc}
 80016a0:	9999999a 	.word	0x9999999a
 80016a4:	3fe99999 	.word	0x3fe99999
 80016a8:	3f814467 	.word	0x3f814467
 80016ac:	20000028 	.word	0x20000028
 80016b0:	40240000 	.word	0x40240000
 80016b4:	40390000 	.word	0x40390000
 80016b8:	408f4000 	.word	0x408f4000
 80016bc:	2000003c 	.word	0x2000003c

080016c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016c6:	f000 f9a3 	bl	8001a10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016ca:	f000 f839 	bl	8001740 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016ce:	f000 f8a1 	bl	8001814 <MX_GPIO_Init>
  MX_I2C1_Init();
 80016d2:	f000 f871 	bl	80017b8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  INA226_Init(3000,25,AVG_4,T_Vbus_1_1ms,T_Vshunt_1_1ms,MODE_SHUNT_BUS_CONTINUOUS);
 80016d6:	2307      	movs	r3, #7
 80016d8:	9301      	str	r3, [sp, #4]
 80016da:	2304      	movs	r3, #4
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	2304      	movs	r3, #4
 80016e0:	2201      	movs	r2, #1
 80016e2:	2119      	movs	r1, #25
 80016e4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80016e8:	f7ff fcb6 	bl	8001058 <INA226_Init>

  alert = INA226_Mode_pinAlert(SHUNT_VOLTAGE_OVER);//enable/disable alert pin
 80016ec:	f248 0002 	movw	r0, #32770	; 0x8002
 80016f0:	f7ff fe6e 	bl	80013d0 <INA226_Mode_pinAlert>
 80016f4:	4603      	mov	r3, r0
 80016f6:	461a      	mov	r2, r3
 80016f8:	4b0c      	ldr	r3, [pc, #48]	; (800172c <main+0x6c>)
 80016fa:	801a      	strh	r2, [r3, #0]
  alertLimit = INA226_Alert_Limit(401);//escribo el umbral para activar el pin alert
 80016fc:	f240 1091 	movw	r0, #401	; 0x191
 8001700:	f7ff feaa 	bl	8001458 <INA226_Alert_Limit>
 8001704:	4603      	mov	r3, r0
 8001706:	461a      	mov	r2, r3
 8001708:	4b09      	ldr	r3, [pc, #36]	; (8001730 <main+0x70>)
 800170a:	801a      	strh	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  voltage = INA226_Vbus();
 800170c:	f7ff fda0 	bl	8001250 <INA226_Vbus>
 8001710:	4603      	mov	r3, r0
 8001712:	4a08      	ldr	r2, [pc, #32]	; (8001734 <main+0x74>)
 8001714:	6013      	str	r3, [r2, #0]
	  current = INA226_Current();
 8001716:	f7ff fddb 	bl	80012d0 <INA226_Current>
 800171a:	4603      	mov	r3, r0
 800171c:	4a06      	ldr	r2, [pc, #24]	; (8001738 <main+0x78>)
 800171e:	6013      	str	r3, [r2, #0]
	  power   = INA226_Power();
 8001720:	f7ff fe16 	bl	8001350 <INA226_Power>
 8001724:	4603      	mov	r3, r0
 8001726:	4a05      	ldr	r2, [pc, #20]	; (800173c <main+0x7c>)
 8001728:	6013      	str	r3, [r2, #0]
	  voltage = INA226_Vbus();
 800172a:	e7ef      	b.n	800170c <main+0x4c>
 800172c:	2000009c 	.word	0x2000009c
 8001730:	2000009e 	.word	0x2000009e
 8001734:	20000098 	.word	0x20000098
 8001738:	20000094 	.word	0x20000094
 800173c:	20000090 	.word	0x20000090

08001740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b090      	sub	sp, #64	; 0x40
 8001744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001746:	f107 0318 	add.w	r3, r7, #24
 800174a:	2228      	movs	r2, #40	; 0x28
 800174c:	2100      	movs	r1, #0
 800174e:	4618      	mov	r0, r3
 8001750:	f002 f87c 	bl	800384c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001754:	1d3b      	adds	r3, r7, #4
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	609a      	str	r2, [r3, #8]
 800175e:	60da      	str	r2, [r3, #12]
 8001760:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001762:	2302      	movs	r3, #2
 8001764:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001766:	2301      	movs	r3, #1
 8001768:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800176a:	2310      	movs	r3, #16
 800176c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800176e:	2300      	movs	r3, #0
 8001770:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001772:	f107 0318 	add.w	r3, r7, #24
 8001776:	4618      	mov	r0, r3
 8001778:	f001 fc48 	bl	800300c <HAL_RCC_OscConfig>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001782:	f000 f869 	bl	8001858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001786:	230f      	movs	r3, #15
 8001788:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800178a:	2300      	movs	r3, #0
 800178c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800178e:	2300      	movs	r3, #0
 8001790:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001792:	2300      	movs	r3, #0
 8001794:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001796:	2300      	movs	r3, #0
 8001798:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800179a:	1d3b      	adds	r3, r7, #4
 800179c:	2100      	movs	r1, #0
 800179e:	4618      	mov	r0, r3
 80017a0:	f001 feb6 	bl	8003510 <HAL_RCC_ClockConfig>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80017aa:	f000 f855 	bl	8001858 <Error_Handler>
  }
}
 80017ae:	bf00      	nop
 80017b0:	3740      	adds	r7, #64	; 0x40
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017bc:	4b12      	ldr	r3, [pc, #72]	; (8001808 <MX_I2C1_Init+0x50>)
 80017be:	4a13      	ldr	r2, [pc, #76]	; (800180c <MX_I2C1_Init+0x54>)
 80017c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <MX_I2C1_Init+0x50>)
 80017c4:	4a12      	ldr	r2, [pc, #72]	; (8001810 <MX_I2C1_Init+0x58>)
 80017c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017c8:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <MX_I2C1_Init+0x50>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <MX_I2C1_Init+0x50>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <MX_I2C1_Init+0x50>)
 80017d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017dc:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <MX_I2C1_Init+0x50>)
 80017de:	2200      	movs	r2, #0
 80017e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017e2:	4b09      	ldr	r3, [pc, #36]	; (8001808 <MX_I2C1_Init+0x50>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017e8:	4b07      	ldr	r3, [pc, #28]	; (8001808 <MX_I2C1_Init+0x50>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017ee:	4b06      	ldr	r3, [pc, #24]	; (8001808 <MX_I2C1_Init+0x50>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017f4:	4804      	ldr	r0, [pc, #16]	; (8001808 <MX_I2C1_Init+0x50>)
 80017f6:	f000 fbd5 	bl	8001fa4 <HAL_I2C_Init>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001800:	f000 f82a 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}
 8001808:	2000003c 	.word	0x2000003c
 800180c:	40005400 	.word	0x40005400
 8001810:	000186a0 	.word	0x000186a0

08001814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800181a:	4b0e      	ldr	r3, [pc, #56]	; (8001854 <MX_GPIO_Init+0x40>)
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	4a0d      	ldr	r2, [pc, #52]	; (8001854 <MX_GPIO_Init+0x40>)
 8001820:	f043 0304 	orr.w	r3, r3, #4
 8001824:	6193      	str	r3, [r2, #24]
 8001826:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <MX_GPIO_Init+0x40>)
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	f003 0304 	and.w	r3, r3, #4
 800182e:	607b      	str	r3, [r7, #4]
 8001830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001832:	4b08      	ldr	r3, [pc, #32]	; (8001854 <MX_GPIO_Init+0x40>)
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	4a07      	ldr	r2, [pc, #28]	; (8001854 <MX_GPIO_Init+0x40>)
 8001838:	f043 0308 	orr.w	r3, r3, #8
 800183c:	6193      	str	r3, [r2, #24]
 800183e:	4b05      	ldr	r3, [pc, #20]	; (8001854 <MX_GPIO_Init+0x40>)
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	f003 0308 	and.w	r3, r3, #8
 8001846:	603b      	str	r3, [r7, #0]
 8001848:	683b      	ldr	r3, [r7, #0]

}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr
 8001854:	40021000 	.word	0x40021000

08001858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800185c:	b672      	cpsid	i
}
 800185e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001860:	e7fe      	b.n	8001860 <Error_Handler+0x8>
	...

08001864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800186a:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <HAL_MspInit+0x5c>)
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	4a14      	ldr	r2, [pc, #80]	; (80018c0 <HAL_MspInit+0x5c>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	6193      	str	r3, [r2, #24]
 8001876:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <HAL_MspInit+0x5c>)
 8001878:	699b      	ldr	r3, [r3, #24]
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	60bb      	str	r3, [r7, #8]
 8001880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001882:	4b0f      	ldr	r3, [pc, #60]	; (80018c0 <HAL_MspInit+0x5c>)
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	4a0e      	ldr	r2, [pc, #56]	; (80018c0 <HAL_MspInit+0x5c>)
 8001888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800188c:	61d3      	str	r3, [r2, #28]
 800188e:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <HAL_MspInit+0x5c>)
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001896:	607b      	str	r3, [r7, #4]
 8001898:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800189a:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <HAL_MspInit+0x60>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	4a04      	ldr	r2, [pc, #16]	; (80018c4 <HAL_MspInit+0x60>)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018b6:	bf00      	nop
 80018b8:	3714      	adds	r7, #20
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr
 80018c0:	40021000 	.word	0x40021000
 80018c4:	40010000 	.word	0x40010000

080018c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08a      	sub	sp, #40	; 0x28
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a1d      	ldr	r2, [pc, #116]	; (8001958 <HAL_I2C_MspInit+0x90>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d132      	bne.n	800194e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e8:	4b1c      	ldr	r3, [pc, #112]	; (800195c <HAL_I2C_MspInit+0x94>)
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	4a1b      	ldr	r2, [pc, #108]	; (800195c <HAL_I2C_MspInit+0x94>)
 80018ee:	f043 0308 	orr.w	r3, r3, #8
 80018f2:	6193      	str	r3, [r2, #24]
 80018f4:	4b19      	ldr	r3, [pc, #100]	; (800195c <HAL_I2C_MspInit+0x94>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	f003 0308 	and.w	r3, r3, #8
 80018fc:	613b      	str	r3, [r7, #16]
 80018fe:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001900:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001904:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001906:	2312      	movs	r3, #18
 8001908:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800190a:	2303      	movs	r3, #3
 800190c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190e:	f107 0314 	add.w	r3, r7, #20
 8001912:	4619      	mov	r1, r3
 8001914:	4812      	ldr	r0, [pc, #72]	; (8001960 <HAL_I2C_MspInit+0x98>)
 8001916:	f000 f9c1 	bl	8001c9c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800191a:	4b12      	ldr	r3, [pc, #72]	; (8001964 <HAL_I2C_MspInit+0x9c>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
 8001920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001922:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001926:	627b      	str	r3, [r7, #36]	; 0x24
 8001928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192a:	f043 0302 	orr.w	r3, r3, #2
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
 8001930:	4a0c      	ldr	r2, [pc, #48]	; (8001964 <HAL_I2C_MspInit+0x9c>)
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001936:	4b09      	ldr	r3, [pc, #36]	; (800195c <HAL_I2C_MspInit+0x94>)
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	4a08      	ldr	r2, [pc, #32]	; (800195c <HAL_I2C_MspInit+0x94>)
 800193c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001940:	61d3      	str	r3, [r2, #28]
 8001942:	4b06      	ldr	r3, [pc, #24]	; (800195c <HAL_I2C_MspInit+0x94>)
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800194e:	bf00      	nop
 8001950:	3728      	adds	r7, #40	; 0x28
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40005400 	.word	0x40005400
 800195c:	40021000 	.word	0x40021000
 8001960:	40010c00 	.word	0x40010c00
 8001964:	40010000 	.word	0x40010000

08001968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800196c:	e7fe      	b.n	800196c <NMI_Handler+0x4>

0800196e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001972:	e7fe      	b.n	8001972 <HardFault_Handler+0x4>

08001974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001978:	e7fe      	b.n	8001978 <MemManage_Handler+0x4>

0800197a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800197e:	e7fe      	b.n	800197e <BusFault_Handler+0x4>

08001980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001984:	e7fe      	b.n	8001984 <UsageFault_Handler+0x4>

08001986 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	46bd      	mov	sp, r7
 800198e:	bc80      	pop	{r7}
 8001990:	4770      	bx	lr

08001992 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr

0800199e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr

080019aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ae:	f000 f875 	bl	8001a9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019ba:	bf00      	nop
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr
	...

080019c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019c4:	f7ff fff7 	bl	80019b6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019c8:	480b      	ldr	r0, [pc, #44]	; (80019f8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019ca:	490c      	ldr	r1, [pc, #48]	; (80019fc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019cc:	4a0c      	ldr	r2, [pc, #48]	; (8001a00 <LoopFillZerobss+0x16>)
  movs r3, #0
 80019ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019d0:	e002      	b.n	80019d8 <LoopCopyDataInit>

080019d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019d6:	3304      	adds	r3, #4

080019d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019dc:	d3f9      	bcc.n	80019d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019de:	4a09      	ldr	r2, [pc, #36]	; (8001a04 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019e0:	4c09      	ldr	r4, [pc, #36]	; (8001a08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e4:	e001      	b.n	80019ea <LoopFillZerobss>

080019e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e8:	3204      	adds	r2, #4

080019ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019ec:	d3fb      	bcc.n	80019e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ee:	f001 ff09 	bl	8003804 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019f2:	f7ff fe65 	bl	80016c0 <main>
  bx lr
 80019f6:	4770      	bx	lr
  ldr r0, =_sdata
 80019f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019fc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001a00:	080038b0 	.word	0x080038b0
  ldr r2, =_sbss
 8001a04:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001a08:	200000a4 	.word	0x200000a4

08001a0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a0c:	e7fe      	b.n	8001a0c <ADC1_2_IRQHandler>
	...

08001a10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a14:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <HAL_Init+0x28>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a07      	ldr	r2, [pc, #28]	; (8001a38 <HAL_Init+0x28>)
 8001a1a:	f043 0310 	orr.w	r3, r3, #16
 8001a1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a20:	2003      	movs	r0, #3
 8001a22:	f000 f907 	bl	8001c34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a26:	200f      	movs	r0, #15
 8001a28:	f000 f808 	bl	8001a3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a2c:	f7ff ff1a 	bl	8001864 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40022000 	.word	0x40022000

08001a3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a44:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <HAL_InitTick+0x54>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <HAL_InitTick+0x58>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f000 f911 	bl	8001c82 <HAL_SYSTICK_Config>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e00e      	b.n	8001a88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b0f      	cmp	r3, #15
 8001a6e:	d80a      	bhi.n	8001a86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a70:	2200      	movs	r2, #0
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	f04f 30ff 	mov.w	r0, #4294967295
 8001a78:	f000 f8e7 	bl	8001c4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a7c:	4a06      	ldr	r2, [pc, #24]	; (8001a98 <HAL_InitTick+0x5c>)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
 8001a84:	e000      	b.n	8001a88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	20000000 	.word	0x20000000
 8001a94:	20000008 	.word	0x20000008
 8001a98:	20000004 	.word	0x20000004

08001a9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aa0:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <HAL_IncTick+0x1c>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4b05      	ldr	r3, [pc, #20]	; (8001abc <HAL_IncTick+0x20>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4413      	add	r3, r2
 8001aac:	4a03      	ldr	r2, [pc, #12]	; (8001abc <HAL_IncTick+0x20>)
 8001aae:	6013      	str	r3, [r2, #0]
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr
 8001ab8:	20000008 	.word	0x20000008
 8001abc:	200000a0 	.word	0x200000a0

08001ac0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ac4:	4b02      	ldr	r3, [pc, #8]	; (8001ad0 <HAL_GetTick+0x10>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr
 8001ad0:	200000a0 	.word	0x200000a0

08001ad4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001af0:	4013      	ands	r3, r2
 8001af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001afc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b06:	4a04      	ldr	r2, [pc, #16]	; (8001b18 <__NVIC_SetPriorityGrouping+0x44>)
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	60d3      	str	r3, [r2, #12]
}
 8001b0c:	bf00      	nop
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b20:	4b04      	ldr	r3, [pc, #16]	; (8001b34 <__NVIC_GetPriorityGrouping+0x18>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	0a1b      	lsrs	r3, r3, #8
 8001b26:	f003 0307 	and.w	r3, r3, #7
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bc80      	pop	{r7}
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	6039      	str	r1, [r7, #0]
 8001b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	db0a      	blt.n	8001b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	490c      	ldr	r1, [pc, #48]	; (8001b84 <__NVIC_SetPriority+0x4c>)
 8001b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b56:	0112      	lsls	r2, r2, #4
 8001b58:	b2d2      	uxtb	r2, r2
 8001b5a:	440b      	add	r3, r1
 8001b5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b60:	e00a      	b.n	8001b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	4908      	ldr	r1, [pc, #32]	; (8001b88 <__NVIC_SetPriority+0x50>)
 8001b68:	79fb      	ldrb	r3, [r7, #7]
 8001b6a:	f003 030f 	and.w	r3, r3, #15
 8001b6e:	3b04      	subs	r3, #4
 8001b70:	0112      	lsls	r2, r2, #4
 8001b72:	b2d2      	uxtb	r2, r2
 8001b74:	440b      	add	r3, r1
 8001b76:	761a      	strb	r2, [r3, #24]
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bc80      	pop	{r7}
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	e000e100 	.word	0xe000e100
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b089      	sub	sp, #36	; 0x24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	f1c3 0307 	rsb	r3, r3, #7
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	bf28      	it	cs
 8001baa:	2304      	movcs	r3, #4
 8001bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	3304      	adds	r3, #4
 8001bb2:	2b06      	cmp	r3, #6
 8001bb4:	d902      	bls.n	8001bbc <NVIC_EncodePriority+0x30>
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	3b03      	subs	r3, #3
 8001bba:	e000      	b.n	8001bbe <NVIC_EncodePriority+0x32>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	43da      	mvns	r2, r3
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	401a      	ands	r2, r3
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	fa01 f303 	lsl.w	r3, r1, r3
 8001bde:	43d9      	mvns	r1, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be4:	4313      	orrs	r3, r2
         );
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3724      	adds	r7, #36	; 0x24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr

08001bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c00:	d301      	bcc.n	8001c06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c02:	2301      	movs	r3, #1
 8001c04:	e00f      	b.n	8001c26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c06:	4a0a      	ldr	r2, [pc, #40]	; (8001c30 <SysTick_Config+0x40>)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c0e:	210f      	movs	r1, #15
 8001c10:	f04f 30ff 	mov.w	r0, #4294967295
 8001c14:	f7ff ff90 	bl	8001b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c18:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <SysTick_Config+0x40>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c1e:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <SysTick_Config+0x40>)
 8001c20:	2207      	movs	r2, #7
 8001c22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	e000e010 	.word	0xe000e010

08001c34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f7ff ff49 	bl	8001ad4 <__NVIC_SetPriorityGrouping>
}
 8001c42:	bf00      	nop
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b086      	sub	sp, #24
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	4603      	mov	r3, r0
 8001c52:	60b9      	str	r1, [r7, #8]
 8001c54:	607a      	str	r2, [r7, #4]
 8001c56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c5c:	f7ff ff5e 	bl	8001b1c <__NVIC_GetPriorityGrouping>
 8001c60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	68b9      	ldr	r1, [r7, #8]
 8001c66:	6978      	ldr	r0, [r7, #20]
 8001c68:	f7ff ff90 	bl	8001b8c <NVIC_EncodePriority>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c72:	4611      	mov	r1, r2
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff ff5f 	bl	8001b38 <__NVIC_SetPriority>
}
 8001c7a:	bf00      	nop
 8001c7c:	3718      	adds	r7, #24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f7ff ffb0 	bl	8001bf0 <SysTick_Config>
 8001c90:	4603      	mov	r3, r0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
	...

08001c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b08b      	sub	sp, #44	; 0x2c
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001caa:	2300      	movs	r3, #0
 8001cac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cae:	e169      	b.n	8001f84 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	69fa      	ldr	r2, [r7, #28]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	f040 8158 	bne.w	8001f7e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	4a9a      	ldr	r2, [pc, #616]	; (8001f3c <HAL_GPIO_Init+0x2a0>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d05e      	beq.n	8001d96 <HAL_GPIO_Init+0xfa>
 8001cd8:	4a98      	ldr	r2, [pc, #608]	; (8001f3c <HAL_GPIO_Init+0x2a0>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d875      	bhi.n	8001dca <HAL_GPIO_Init+0x12e>
 8001cde:	4a98      	ldr	r2, [pc, #608]	; (8001f40 <HAL_GPIO_Init+0x2a4>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d058      	beq.n	8001d96 <HAL_GPIO_Init+0xfa>
 8001ce4:	4a96      	ldr	r2, [pc, #600]	; (8001f40 <HAL_GPIO_Init+0x2a4>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d86f      	bhi.n	8001dca <HAL_GPIO_Init+0x12e>
 8001cea:	4a96      	ldr	r2, [pc, #600]	; (8001f44 <HAL_GPIO_Init+0x2a8>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d052      	beq.n	8001d96 <HAL_GPIO_Init+0xfa>
 8001cf0:	4a94      	ldr	r2, [pc, #592]	; (8001f44 <HAL_GPIO_Init+0x2a8>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d869      	bhi.n	8001dca <HAL_GPIO_Init+0x12e>
 8001cf6:	4a94      	ldr	r2, [pc, #592]	; (8001f48 <HAL_GPIO_Init+0x2ac>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d04c      	beq.n	8001d96 <HAL_GPIO_Init+0xfa>
 8001cfc:	4a92      	ldr	r2, [pc, #584]	; (8001f48 <HAL_GPIO_Init+0x2ac>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d863      	bhi.n	8001dca <HAL_GPIO_Init+0x12e>
 8001d02:	4a92      	ldr	r2, [pc, #584]	; (8001f4c <HAL_GPIO_Init+0x2b0>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d046      	beq.n	8001d96 <HAL_GPIO_Init+0xfa>
 8001d08:	4a90      	ldr	r2, [pc, #576]	; (8001f4c <HAL_GPIO_Init+0x2b0>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d85d      	bhi.n	8001dca <HAL_GPIO_Init+0x12e>
 8001d0e:	2b12      	cmp	r3, #18
 8001d10:	d82a      	bhi.n	8001d68 <HAL_GPIO_Init+0xcc>
 8001d12:	2b12      	cmp	r3, #18
 8001d14:	d859      	bhi.n	8001dca <HAL_GPIO_Init+0x12e>
 8001d16:	a201      	add	r2, pc, #4	; (adr r2, 8001d1c <HAL_GPIO_Init+0x80>)
 8001d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d1c:	08001d97 	.word	0x08001d97
 8001d20:	08001d71 	.word	0x08001d71
 8001d24:	08001d83 	.word	0x08001d83
 8001d28:	08001dc5 	.word	0x08001dc5
 8001d2c:	08001dcb 	.word	0x08001dcb
 8001d30:	08001dcb 	.word	0x08001dcb
 8001d34:	08001dcb 	.word	0x08001dcb
 8001d38:	08001dcb 	.word	0x08001dcb
 8001d3c:	08001dcb 	.word	0x08001dcb
 8001d40:	08001dcb 	.word	0x08001dcb
 8001d44:	08001dcb 	.word	0x08001dcb
 8001d48:	08001dcb 	.word	0x08001dcb
 8001d4c:	08001dcb 	.word	0x08001dcb
 8001d50:	08001dcb 	.word	0x08001dcb
 8001d54:	08001dcb 	.word	0x08001dcb
 8001d58:	08001dcb 	.word	0x08001dcb
 8001d5c:	08001dcb 	.word	0x08001dcb
 8001d60:	08001d79 	.word	0x08001d79
 8001d64:	08001d8d 	.word	0x08001d8d
 8001d68:	4a79      	ldr	r2, [pc, #484]	; (8001f50 <HAL_GPIO_Init+0x2b4>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d013      	beq.n	8001d96 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d6e:	e02c      	b.n	8001dca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	623b      	str	r3, [r7, #32]
          break;
 8001d76:	e029      	b.n	8001dcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	623b      	str	r3, [r7, #32]
          break;
 8001d80:	e024      	b.n	8001dcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	3308      	adds	r3, #8
 8001d88:	623b      	str	r3, [r7, #32]
          break;
 8001d8a:	e01f      	b.n	8001dcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	330c      	adds	r3, #12
 8001d92:	623b      	str	r3, [r7, #32]
          break;
 8001d94:	e01a      	b.n	8001dcc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d102      	bne.n	8001da4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d9e:	2304      	movs	r3, #4
 8001da0:	623b      	str	r3, [r7, #32]
          break;
 8001da2:	e013      	b.n	8001dcc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d105      	bne.n	8001db8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dac:	2308      	movs	r3, #8
 8001dae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	69fa      	ldr	r2, [r7, #28]
 8001db4:	611a      	str	r2, [r3, #16]
          break;
 8001db6:	e009      	b.n	8001dcc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001db8:	2308      	movs	r3, #8
 8001dba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	69fa      	ldr	r2, [r7, #28]
 8001dc0:	615a      	str	r2, [r3, #20]
          break;
 8001dc2:	e003      	b.n	8001dcc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	623b      	str	r3, [r7, #32]
          break;
 8001dc8:	e000      	b.n	8001dcc <HAL_GPIO_Init+0x130>
          break;
 8001dca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	2bff      	cmp	r3, #255	; 0xff
 8001dd0:	d801      	bhi.n	8001dd6 <HAL_GPIO_Init+0x13a>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	e001      	b.n	8001dda <HAL_GPIO_Init+0x13e>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	3304      	adds	r3, #4
 8001dda:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	2bff      	cmp	r3, #255	; 0xff
 8001de0:	d802      	bhi.n	8001de8 <HAL_GPIO_Init+0x14c>
 8001de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	e002      	b.n	8001dee <HAL_GPIO_Init+0x152>
 8001de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dea:	3b08      	subs	r3, #8
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	210f      	movs	r1, #15
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	401a      	ands	r2, r3
 8001e00:	6a39      	ldr	r1, [r7, #32]
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	fa01 f303 	lsl.w	r3, r1, r3
 8001e08:	431a      	orrs	r2, r3
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f000 80b1 	beq.w	8001f7e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e1c:	4b4d      	ldr	r3, [pc, #308]	; (8001f54 <HAL_GPIO_Init+0x2b8>)
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	4a4c      	ldr	r2, [pc, #304]	; (8001f54 <HAL_GPIO_Init+0x2b8>)
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	6193      	str	r3, [r2, #24]
 8001e28:	4b4a      	ldr	r3, [pc, #296]	; (8001f54 <HAL_GPIO_Init+0x2b8>)
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	60bb      	str	r3, [r7, #8]
 8001e32:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e34:	4a48      	ldr	r2, [pc, #288]	; (8001f58 <HAL_GPIO_Init+0x2bc>)
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	089b      	lsrs	r3, r3, #2
 8001e3a:	3302      	adds	r3, #2
 8001e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e40:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e44:	f003 0303 	and.w	r3, r3, #3
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	220f      	movs	r2, #15
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	43db      	mvns	r3, r3
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	4013      	ands	r3, r2
 8001e56:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a40      	ldr	r2, [pc, #256]	; (8001f5c <HAL_GPIO_Init+0x2c0>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d013      	beq.n	8001e88 <HAL_GPIO_Init+0x1ec>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a3f      	ldr	r2, [pc, #252]	; (8001f60 <HAL_GPIO_Init+0x2c4>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d00d      	beq.n	8001e84 <HAL_GPIO_Init+0x1e8>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a3e      	ldr	r2, [pc, #248]	; (8001f64 <HAL_GPIO_Init+0x2c8>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d007      	beq.n	8001e80 <HAL_GPIO_Init+0x1e4>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a3d      	ldr	r2, [pc, #244]	; (8001f68 <HAL_GPIO_Init+0x2cc>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d101      	bne.n	8001e7c <HAL_GPIO_Init+0x1e0>
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e006      	b.n	8001e8a <HAL_GPIO_Init+0x1ee>
 8001e7c:	2304      	movs	r3, #4
 8001e7e:	e004      	b.n	8001e8a <HAL_GPIO_Init+0x1ee>
 8001e80:	2302      	movs	r3, #2
 8001e82:	e002      	b.n	8001e8a <HAL_GPIO_Init+0x1ee>
 8001e84:	2301      	movs	r3, #1
 8001e86:	e000      	b.n	8001e8a <HAL_GPIO_Init+0x1ee>
 8001e88:	2300      	movs	r3, #0
 8001e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e8c:	f002 0203 	and.w	r2, r2, #3
 8001e90:	0092      	lsls	r2, r2, #2
 8001e92:	4093      	lsls	r3, r2
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e9a:	492f      	ldr	r1, [pc, #188]	; (8001f58 <HAL_GPIO_Init+0x2bc>)
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	089b      	lsrs	r3, r3, #2
 8001ea0:	3302      	adds	r3, #2
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d006      	beq.n	8001ec2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001eb4:	4b2d      	ldr	r3, [pc, #180]	; (8001f6c <HAL_GPIO_Init+0x2d0>)
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	492c      	ldr	r1, [pc, #176]	; (8001f6c <HAL_GPIO_Init+0x2d0>)
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	608b      	str	r3, [r1, #8]
 8001ec0:	e006      	b.n	8001ed0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ec2:	4b2a      	ldr	r3, [pc, #168]	; (8001f6c <HAL_GPIO_Init+0x2d0>)
 8001ec4:	689a      	ldr	r2, [r3, #8]
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	4928      	ldr	r1, [pc, #160]	; (8001f6c <HAL_GPIO_Init+0x2d0>)
 8001ecc:	4013      	ands	r3, r2
 8001ece:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d006      	beq.n	8001eea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001edc:	4b23      	ldr	r3, [pc, #140]	; (8001f6c <HAL_GPIO_Init+0x2d0>)
 8001ede:	68da      	ldr	r2, [r3, #12]
 8001ee0:	4922      	ldr	r1, [pc, #136]	; (8001f6c <HAL_GPIO_Init+0x2d0>)
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	60cb      	str	r3, [r1, #12]
 8001ee8:	e006      	b.n	8001ef8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001eea:	4b20      	ldr	r3, [pc, #128]	; (8001f6c <HAL_GPIO_Init+0x2d0>)
 8001eec:	68da      	ldr	r2, [r3, #12]
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	491e      	ldr	r1, [pc, #120]	; (8001f6c <HAL_GPIO_Init+0x2d0>)
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d006      	beq.n	8001f12 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f04:	4b19      	ldr	r3, [pc, #100]	; (8001f6c <HAL_GPIO_Init+0x2d0>)
 8001f06:	685a      	ldr	r2, [r3, #4]
 8001f08:	4918      	ldr	r1, [pc, #96]	; (8001f6c <HAL_GPIO_Init+0x2d0>)
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	604b      	str	r3, [r1, #4]
 8001f10:	e006      	b.n	8001f20 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f12:	4b16      	ldr	r3, [pc, #88]	; (8001f6c <HAL_GPIO_Init+0x2d0>)
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	4914      	ldr	r1, [pc, #80]	; (8001f6c <HAL_GPIO_Init+0x2d0>)
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d021      	beq.n	8001f70 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f2c:	4b0f      	ldr	r3, [pc, #60]	; (8001f6c <HAL_GPIO_Init+0x2d0>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	490e      	ldr	r1, [pc, #56]	; (8001f6c <HAL_GPIO_Init+0x2d0>)
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	600b      	str	r3, [r1, #0]
 8001f38:	e021      	b.n	8001f7e <HAL_GPIO_Init+0x2e2>
 8001f3a:	bf00      	nop
 8001f3c:	10320000 	.word	0x10320000
 8001f40:	10310000 	.word	0x10310000
 8001f44:	10220000 	.word	0x10220000
 8001f48:	10210000 	.word	0x10210000
 8001f4c:	10120000 	.word	0x10120000
 8001f50:	10110000 	.word	0x10110000
 8001f54:	40021000 	.word	0x40021000
 8001f58:	40010000 	.word	0x40010000
 8001f5c:	40010800 	.word	0x40010800
 8001f60:	40010c00 	.word	0x40010c00
 8001f64:	40011000 	.word	0x40011000
 8001f68:	40011400 	.word	0x40011400
 8001f6c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f70:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <HAL_GPIO_Init+0x304>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	43db      	mvns	r3, r3
 8001f78:	4909      	ldr	r1, [pc, #36]	; (8001fa0 <HAL_GPIO_Init+0x304>)
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	3301      	adds	r3, #1
 8001f82:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f47f ae8e 	bne.w	8001cb0 <HAL_GPIO_Init+0x14>
  }
}
 8001f94:	bf00      	nop
 8001f96:	bf00      	nop
 8001f98:	372c      	adds	r7, #44	; 0x2c
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr
 8001fa0:	40010400 	.word	0x40010400

08001fa4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e12b      	b.n	800220e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d106      	bne.n	8001fd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7ff fc7c 	bl	80018c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2224      	movs	r2, #36	; 0x24
 8001fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f022 0201 	bic.w	r2, r2, #1
 8001fe6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ff6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002006:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002008:	f001 fbca 	bl	80037a0 <HAL_RCC_GetPCLK1Freq>
 800200c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	4a81      	ldr	r2, [pc, #516]	; (8002218 <HAL_I2C_Init+0x274>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d807      	bhi.n	8002028 <HAL_I2C_Init+0x84>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	4a80      	ldr	r2, [pc, #512]	; (800221c <HAL_I2C_Init+0x278>)
 800201c:	4293      	cmp	r3, r2
 800201e:	bf94      	ite	ls
 8002020:	2301      	movls	r3, #1
 8002022:	2300      	movhi	r3, #0
 8002024:	b2db      	uxtb	r3, r3
 8002026:	e006      	b.n	8002036 <HAL_I2C_Init+0x92>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4a7d      	ldr	r2, [pc, #500]	; (8002220 <HAL_I2C_Init+0x27c>)
 800202c:	4293      	cmp	r3, r2
 800202e:	bf94      	ite	ls
 8002030:	2301      	movls	r3, #1
 8002032:	2300      	movhi	r3, #0
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e0e7      	b.n	800220e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	4a78      	ldr	r2, [pc, #480]	; (8002224 <HAL_I2C_Init+0x280>)
 8002042:	fba2 2303 	umull	r2, r3, r2, r3
 8002046:	0c9b      	lsrs	r3, r3, #18
 8002048:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68ba      	ldr	r2, [r7, #8]
 800205a:	430a      	orrs	r2, r1
 800205c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6a1b      	ldr	r3, [r3, #32]
 8002064:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	4a6a      	ldr	r2, [pc, #424]	; (8002218 <HAL_I2C_Init+0x274>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d802      	bhi.n	8002078 <HAL_I2C_Init+0xd4>
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	3301      	adds	r3, #1
 8002076:	e009      	b.n	800208c <HAL_I2C_Init+0xe8>
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800207e:	fb02 f303 	mul.w	r3, r2, r3
 8002082:	4a69      	ldr	r2, [pc, #420]	; (8002228 <HAL_I2C_Init+0x284>)
 8002084:	fba2 2303 	umull	r2, r3, r2, r3
 8002088:	099b      	lsrs	r3, r3, #6
 800208a:	3301      	adds	r3, #1
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	6812      	ldr	r2, [r2, #0]
 8002090:	430b      	orrs	r3, r1
 8002092:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800209e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	495c      	ldr	r1, [pc, #368]	; (8002218 <HAL_I2C_Init+0x274>)
 80020a8:	428b      	cmp	r3, r1
 80020aa:	d819      	bhi.n	80020e0 <HAL_I2C_Init+0x13c>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	1e59      	subs	r1, r3, #1
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80020ba:	1c59      	adds	r1, r3, #1
 80020bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80020c0:	400b      	ands	r3, r1
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00a      	beq.n	80020dc <HAL_I2C_Init+0x138>
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	1e59      	subs	r1, r3, #1
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80020d4:	3301      	adds	r3, #1
 80020d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020da:	e051      	b.n	8002180 <HAL_I2C_Init+0x1dc>
 80020dc:	2304      	movs	r3, #4
 80020de:	e04f      	b.n	8002180 <HAL_I2C_Init+0x1dc>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d111      	bne.n	800210c <HAL_I2C_Init+0x168>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	1e58      	subs	r0, r3, #1
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6859      	ldr	r1, [r3, #4]
 80020f0:	460b      	mov	r3, r1
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	440b      	add	r3, r1
 80020f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80020fa:	3301      	adds	r3, #1
 80020fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002100:	2b00      	cmp	r3, #0
 8002102:	bf0c      	ite	eq
 8002104:	2301      	moveq	r3, #1
 8002106:	2300      	movne	r3, #0
 8002108:	b2db      	uxtb	r3, r3
 800210a:	e012      	b.n	8002132 <HAL_I2C_Init+0x18e>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	1e58      	subs	r0, r3, #1
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6859      	ldr	r1, [r3, #4]
 8002114:	460b      	mov	r3, r1
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	440b      	add	r3, r1
 800211a:	0099      	lsls	r1, r3, #2
 800211c:	440b      	add	r3, r1
 800211e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002122:	3301      	adds	r3, #1
 8002124:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002128:	2b00      	cmp	r3, #0
 800212a:	bf0c      	ite	eq
 800212c:	2301      	moveq	r3, #1
 800212e:	2300      	movne	r3, #0
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <HAL_I2C_Init+0x196>
 8002136:	2301      	movs	r3, #1
 8002138:	e022      	b.n	8002180 <HAL_I2C_Init+0x1dc>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d10e      	bne.n	8002160 <HAL_I2C_Init+0x1bc>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	1e58      	subs	r0, r3, #1
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6859      	ldr	r1, [r3, #4]
 800214a:	460b      	mov	r3, r1
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	440b      	add	r3, r1
 8002150:	fbb0 f3f3 	udiv	r3, r0, r3
 8002154:	3301      	adds	r3, #1
 8002156:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800215a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800215e:	e00f      	b.n	8002180 <HAL_I2C_Init+0x1dc>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	1e58      	subs	r0, r3, #1
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6859      	ldr	r1, [r3, #4]
 8002168:	460b      	mov	r3, r1
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	0099      	lsls	r1, r3, #2
 8002170:	440b      	add	r3, r1
 8002172:	fbb0 f3f3 	udiv	r3, r0, r3
 8002176:	3301      	adds	r3, #1
 8002178:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800217c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	6809      	ldr	r1, [r1, #0]
 8002184:	4313      	orrs	r3, r2
 8002186:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69da      	ldr	r2, [r3, #28]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	431a      	orrs	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	430a      	orrs	r2, r1
 80021a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80021ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6911      	ldr	r1, [r2, #16]
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	68d2      	ldr	r2, [r2, #12]
 80021ba:	4311      	orrs	r1, r2
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	6812      	ldr	r2, [r2, #0]
 80021c0:	430b      	orrs	r3, r1
 80021c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	695a      	ldr	r2, [r3, #20]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	431a      	orrs	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	430a      	orrs	r2, r1
 80021de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f042 0201 	orr.w	r2, r2, #1
 80021ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2220      	movs	r2, #32
 80021fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	000186a0 	.word	0x000186a0
 800221c:	001e847f 	.word	0x001e847f
 8002220:	003d08ff 	.word	0x003d08ff
 8002224:	431bde83 	.word	0x431bde83
 8002228:	10624dd3 	.word	0x10624dd3

0800222c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b088      	sub	sp, #32
 8002230:	af02      	add	r7, sp, #8
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	607a      	str	r2, [r7, #4]
 8002236:	461a      	mov	r2, r3
 8002238:	460b      	mov	r3, r1
 800223a:	817b      	strh	r3, [r7, #10]
 800223c:	4613      	mov	r3, r2
 800223e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002240:	f7ff fc3e 	bl	8001ac0 <HAL_GetTick>
 8002244:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b20      	cmp	r3, #32
 8002250:	f040 80e0 	bne.w	8002414 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	2319      	movs	r3, #25
 800225a:	2201      	movs	r2, #1
 800225c:	4970      	ldr	r1, [pc, #448]	; (8002420 <HAL_I2C_Master_Transmit+0x1f4>)
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f000 fc9e 	bl	8002ba0 <I2C_WaitOnFlagUntilTimeout>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800226a:	2302      	movs	r3, #2
 800226c:	e0d3      	b.n	8002416 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002274:	2b01      	cmp	r3, #1
 8002276:	d101      	bne.n	800227c <HAL_I2C_Master_Transmit+0x50>
 8002278:	2302      	movs	r3, #2
 800227a:	e0cc      	b.n	8002416 <HAL_I2C_Master_Transmit+0x1ea>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	2b01      	cmp	r3, #1
 8002290:	d007      	beq.n	80022a2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f042 0201 	orr.w	r2, r2, #1
 80022a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2221      	movs	r2, #33	; 0x21
 80022b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2210      	movs	r2, #16
 80022be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	893a      	ldrh	r2, [r7, #8]
 80022d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d8:	b29a      	uxth	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	4a50      	ldr	r2, [pc, #320]	; (8002424 <HAL_I2C_Master_Transmit+0x1f8>)
 80022e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80022e4:	8979      	ldrh	r1, [r7, #10]
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	6a3a      	ldr	r2, [r7, #32]
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f000 fb08 	bl	8002900 <I2C_MasterRequestWrite>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e08d      	b.n	8002416 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022fa:	2300      	movs	r3, #0
 80022fc:	613b      	str	r3, [r7, #16]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	695b      	ldr	r3, [r3, #20]
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	613b      	str	r3, [r7, #16]
 800230e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002310:	e066      	b.n	80023e0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	6a39      	ldr	r1, [r7, #32]
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f000 fd5c 	bl	8002dd4 <I2C_WaitOnTXEFlagUntilTimeout>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00d      	beq.n	800233e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	2b04      	cmp	r3, #4
 8002328:	d107      	bne.n	800233a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002338:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e06b      	b.n	8002416 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002342:	781a      	ldrb	r2, [r3, #0]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234e:	1c5a      	adds	r2, r3, #1
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002358:	b29b      	uxth	r3, r3
 800235a:	3b01      	subs	r3, #1
 800235c:	b29a      	uxth	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002366:	3b01      	subs	r3, #1
 8002368:	b29a      	uxth	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b04      	cmp	r3, #4
 800237a:	d11b      	bne.n	80023b4 <HAL_I2C_Master_Transmit+0x188>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002380:	2b00      	cmp	r3, #0
 8002382:	d017      	beq.n	80023b4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002388:	781a      	ldrb	r2, [r3, #0]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002394:	1c5a      	adds	r2, r3, #1
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800239e:	b29b      	uxth	r3, r3
 80023a0:	3b01      	subs	r3, #1
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ac:	3b01      	subs	r3, #1
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023b4:	697a      	ldr	r2, [r7, #20]
 80023b6:	6a39      	ldr	r1, [r7, #32]
 80023b8:	68f8      	ldr	r0, [r7, #12]
 80023ba:	f000 fd53 	bl	8002e64 <I2C_WaitOnBTFFlagUntilTimeout>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00d      	beq.n	80023e0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c8:	2b04      	cmp	r3, #4
 80023ca:	d107      	bne.n	80023dc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023da:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e01a      	b.n	8002416 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d194      	bne.n	8002312 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2220      	movs	r2, #32
 80023fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002410:	2300      	movs	r3, #0
 8002412:	e000      	b.n	8002416 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002414:	2302      	movs	r3, #2
  }
}
 8002416:	4618      	mov	r0, r3
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	00100002 	.word	0x00100002
 8002424:	ffff0000 	.word	0xffff0000

08002428 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08c      	sub	sp, #48	; 0x30
 800242c:	af02      	add	r7, sp, #8
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	607a      	str	r2, [r7, #4]
 8002432:	461a      	mov	r2, r3
 8002434:	460b      	mov	r3, r1
 8002436:	817b      	strh	r3, [r7, #10]
 8002438:	4613      	mov	r3, r2
 800243a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800243c:	2300      	movs	r3, #0
 800243e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002440:	f7ff fb3e 	bl	8001ac0 <HAL_GetTick>
 8002444:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b20      	cmp	r3, #32
 8002450:	f040 824b 	bne.w	80028ea <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	2319      	movs	r3, #25
 800245a:	2201      	movs	r2, #1
 800245c:	497f      	ldr	r1, [pc, #508]	; (800265c <HAL_I2C_Master_Receive+0x234>)
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f000 fb9e 	bl	8002ba0 <I2C_WaitOnFlagUntilTimeout>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800246a:	2302      	movs	r3, #2
 800246c:	e23e      	b.n	80028ec <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002474:	2b01      	cmp	r3, #1
 8002476:	d101      	bne.n	800247c <HAL_I2C_Master_Receive+0x54>
 8002478:	2302      	movs	r3, #2
 800247a:	e237      	b.n	80028ec <HAL_I2C_Master_Receive+0x4c4>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b01      	cmp	r3, #1
 8002490:	d007      	beq.n	80024a2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f042 0201 	orr.w	r2, r2, #1
 80024a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2222      	movs	r2, #34	; 0x22
 80024b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2210      	movs	r2, #16
 80024be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	893a      	ldrh	r2, [r7, #8]
 80024d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d8:	b29a      	uxth	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	4a5f      	ldr	r2, [pc, #380]	; (8002660 <HAL_I2C_Master_Receive+0x238>)
 80024e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80024e4:	8979      	ldrh	r1, [r7, #10]
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f000 fa8a 	bl	8002a04 <I2C_MasterRequestRead>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e1f8      	b.n	80028ec <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d113      	bne.n	800252a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002502:	2300      	movs	r3, #0
 8002504:	61fb      	str	r3, [r7, #28]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	61fb      	str	r3, [r7, #28]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	61fb      	str	r3, [r7, #28]
 8002516:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	e1cc      	b.n	80028c4 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800252e:	2b01      	cmp	r3, #1
 8002530:	d11e      	bne.n	8002570 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002540:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002542:	b672      	cpsid	i
}
 8002544:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002546:	2300      	movs	r3, #0
 8002548:	61bb      	str	r3, [r7, #24]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	61bb      	str	r3, [r7, #24]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	61bb      	str	r3, [r7, #24]
 800255a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800256a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800256c:	b662      	cpsie	i
}
 800256e:	e035      	b.n	80025dc <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002574:	2b02      	cmp	r3, #2
 8002576:	d11e      	bne.n	80025b6 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002586:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002588:	b672      	cpsid	i
}
 800258a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800258c:	2300      	movs	r3, #0
 800258e:	617b      	str	r3, [r7, #20]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	617b      	str	r3, [r7, #20]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	617b      	str	r3, [r7, #20]
 80025a0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80025b2:	b662      	cpsie	i
}
 80025b4:	e012      	b.n	80025dc <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025c6:	2300      	movs	r3, #0
 80025c8:	613b      	str	r3, [r7, #16]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	613b      	str	r3, [r7, #16]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	613b      	str	r3, [r7, #16]
 80025da:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80025dc:	e172      	b.n	80028c4 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e2:	2b03      	cmp	r3, #3
 80025e4:	f200 811f 	bhi.w	8002826 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d123      	bne.n	8002638 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f000 fc7d 	bl	8002ef4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e173      	b.n	80028ec <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	691a      	ldr	r2, [r3, #16]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002616:	1c5a      	adds	r2, r3, #1
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002620:	3b01      	subs	r3, #1
 8002622:	b29a      	uxth	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800262c:	b29b      	uxth	r3, r3
 800262e:	3b01      	subs	r3, #1
 8002630:	b29a      	uxth	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002636:	e145      	b.n	80028c4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800263c:	2b02      	cmp	r3, #2
 800263e:	d152      	bne.n	80026e6 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002646:	2200      	movs	r2, #0
 8002648:	4906      	ldr	r1, [pc, #24]	; (8002664 <HAL_I2C_Master_Receive+0x23c>)
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f000 faa8 	bl	8002ba0 <I2C_WaitOnFlagUntilTimeout>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d008      	beq.n	8002668 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e148      	b.n	80028ec <HAL_I2C_Master_Receive+0x4c4>
 800265a:	bf00      	nop
 800265c:	00100002 	.word	0x00100002
 8002660:	ffff0000 	.word	0xffff0000
 8002664:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002668:	b672      	cpsid	i
}
 800266a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800267a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	691a      	ldr	r2, [r3, #16]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002686:	b2d2      	uxtb	r2, r2
 8002688:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	1c5a      	adds	r2, r3, #1
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002698:	3b01      	subs	r3, #1
 800269a:	b29a      	uxth	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	3b01      	subs	r3, #1
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80026ae:	b662      	cpsie	i
}
 80026b0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	691a      	ldr	r2, [r3, #16]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026bc:	b2d2      	uxtb	r2, r2
 80026be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c4:	1c5a      	adds	r2, r3, #1
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ce:	3b01      	subs	r3, #1
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026da:	b29b      	uxth	r3, r3
 80026dc:	3b01      	subs	r3, #1
 80026de:	b29a      	uxth	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026e4:	e0ee      	b.n	80028c4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ec:	2200      	movs	r2, #0
 80026ee:	4981      	ldr	r1, [pc, #516]	; (80028f4 <HAL_I2C_Master_Receive+0x4cc>)
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f000 fa55 	bl	8002ba0 <I2C_WaitOnFlagUntilTimeout>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e0f5      	b.n	80028ec <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800270e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002710:	b672      	cpsid	i
}
 8002712:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	691a      	ldr	r2, [r3, #16]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	1c5a      	adds	r2, r3, #1
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002730:	3b01      	subs	r3, #1
 8002732:	b29a      	uxth	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273c:	b29b      	uxth	r3, r3
 800273e:	3b01      	subs	r3, #1
 8002740:	b29a      	uxth	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002746:	4b6c      	ldr	r3, [pc, #432]	; (80028f8 <HAL_I2C_Master_Receive+0x4d0>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	08db      	lsrs	r3, r3, #3
 800274c:	4a6b      	ldr	r2, [pc, #428]	; (80028fc <HAL_I2C_Master_Receive+0x4d4>)
 800274e:	fba2 2303 	umull	r2, r3, r2, r3
 8002752:	0a1a      	lsrs	r2, r3, #8
 8002754:	4613      	mov	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	00da      	lsls	r2, r3, #3
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002760:	6a3b      	ldr	r3, [r7, #32]
 8002762:	3b01      	subs	r3, #1
 8002764:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002766:	6a3b      	ldr	r3, [r7, #32]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d118      	bne.n	800279e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2220      	movs	r2, #32
 8002776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	f043 0220 	orr.w	r2, r3, #32
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800278e:	b662      	cpsie	i
}
 8002790:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e0a6      	b.n	80028ec <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	f003 0304 	and.w	r3, r3, #4
 80027a8:	2b04      	cmp	r3, #4
 80027aa:	d1d9      	bne.n	8002760 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	691a      	ldr	r2, [r3, #16]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ce:	1c5a      	adds	r2, r3, #1
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d8:	3b01      	subs	r3, #1
 80027da:	b29a      	uxth	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	3b01      	subs	r3, #1
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80027ee:	b662      	cpsie	i
}
 80027f0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	691a      	ldr	r2, [r3, #16]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fc:	b2d2      	uxtb	r2, r2
 80027fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002804:	1c5a      	adds	r2, r3, #1
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800280e:	3b01      	subs	r3, #1
 8002810:	b29a      	uxth	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800281a:	b29b      	uxth	r3, r3
 800281c:	3b01      	subs	r3, #1
 800281e:	b29a      	uxth	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002824:	e04e      	b.n	80028c4 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002828:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f000 fb62 	bl	8002ef4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e058      	b.n	80028ec <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	691a      	ldr	r2, [r3, #16]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	b2d2      	uxtb	r2, r2
 8002846:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284c:	1c5a      	adds	r2, r3, #1
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002856:	3b01      	subs	r3, #1
 8002858:	b29a      	uxth	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002862:	b29b      	uxth	r3, r3
 8002864:	3b01      	subs	r3, #1
 8002866:	b29a      	uxth	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	f003 0304 	and.w	r3, r3, #4
 8002876:	2b04      	cmp	r3, #4
 8002878:	d124      	bne.n	80028c4 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800287e:	2b03      	cmp	r3, #3
 8002880:	d107      	bne.n	8002892 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002890:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	691a      	ldr	r2, [r3, #16]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a4:	1c5a      	adds	r2, r3, #1
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ae:	3b01      	subs	r3, #1
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	3b01      	subs	r3, #1
 80028be:	b29a      	uxth	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f47f ae88 	bne.w	80025de <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2220      	movs	r2, #32
 80028d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028e6:	2300      	movs	r3, #0
 80028e8:	e000      	b.n	80028ec <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80028ea:	2302      	movs	r3, #2
  }
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3728      	adds	r7, #40	; 0x28
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	00010004 	.word	0x00010004
 80028f8:	20000000 	.word	0x20000000
 80028fc:	14f8b589 	.word	0x14f8b589

08002900 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b088      	sub	sp, #32
 8002904:	af02      	add	r7, sp, #8
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	607a      	str	r2, [r7, #4]
 800290a:	603b      	str	r3, [r7, #0]
 800290c:	460b      	mov	r3, r1
 800290e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002914:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	2b08      	cmp	r3, #8
 800291a:	d006      	beq.n	800292a <I2C_MasterRequestWrite+0x2a>
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d003      	beq.n	800292a <I2C_MasterRequestWrite+0x2a>
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002928:	d108      	bne.n	800293c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	e00b      	b.n	8002954 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002940:	2b12      	cmp	r3, #18
 8002942:	d107      	bne.n	8002954 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002952:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f000 f91d 	bl	8002ba0 <I2C_WaitOnFlagUntilTimeout>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00d      	beq.n	8002988 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002976:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800297a:	d103      	bne.n	8002984 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002982:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e035      	b.n	80029f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002990:	d108      	bne.n	80029a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002992:	897b      	ldrh	r3, [r7, #10]
 8002994:	b2db      	uxtb	r3, r3
 8002996:	461a      	mov	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029a0:	611a      	str	r2, [r3, #16]
 80029a2:	e01b      	b.n	80029dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80029a4:	897b      	ldrh	r3, [r7, #10]
 80029a6:	11db      	asrs	r3, r3, #7
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	f003 0306 	and.w	r3, r3, #6
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	f063 030f 	orn	r3, r3, #15
 80029b4:	b2da      	uxtb	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	490e      	ldr	r1, [pc, #56]	; (80029fc <I2C_MasterRequestWrite+0xfc>)
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 f966 	bl	8002c94 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e010      	b.n	80029f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80029d2:	897b      	ldrh	r3, [r7, #10]
 80029d4:	b2da      	uxtb	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	4907      	ldr	r1, [pc, #28]	; (8002a00 <I2C_MasterRequestWrite+0x100>)
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f000 f956 	bl	8002c94 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e000      	b.n	80029f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3718      	adds	r7, #24
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	00010008 	.word	0x00010008
 8002a00:	00010002 	.word	0x00010002

08002a04 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b088      	sub	sp, #32
 8002a08:	af02      	add	r7, sp, #8
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	607a      	str	r2, [r7, #4]
 8002a0e:	603b      	str	r3, [r7, #0]
 8002a10:	460b      	mov	r3, r1
 8002a12:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a18:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a28:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	2b08      	cmp	r3, #8
 8002a2e:	d006      	beq.n	8002a3e <I2C_MasterRequestRead+0x3a>
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d003      	beq.n	8002a3e <I2C_MasterRequestRead+0x3a>
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a3c:	d108      	bne.n	8002a50 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a4c:	601a      	str	r2, [r3, #0]
 8002a4e:	e00b      	b.n	8002a68 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a54:	2b11      	cmp	r3, #17
 8002a56:	d107      	bne.n	8002a68 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a66:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f000 f893 	bl	8002ba0 <I2C_WaitOnFlagUntilTimeout>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00d      	beq.n	8002a9c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a8e:	d103      	bne.n	8002a98 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a96:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e079      	b.n	8002b90 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002aa4:	d108      	bne.n	8002ab8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002aa6:	897b      	ldrh	r3, [r7, #10]
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	f043 0301 	orr.w	r3, r3, #1
 8002aae:	b2da      	uxtb	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	611a      	str	r2, [r3, #16]
 8002ab6:	e05f      	b.n	8002b78 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ab8:	897b      	ldrh	r3, [r7, #10]
 8002aba:	11db      	asrs	r3, r3, #7
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	f003 0306 	and.w	r3, r3, #6
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	f063 030f 	orn	r3, r3, #15
 8002ac8:	b2da      	uxtb	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	4930      	ldr	r1, [pc, #192]	; (8002b98 <I2C_MasterRequestRead+0x194>)
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f000 f8dc 	bl	8002c94 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e054      	b.n	8002b90 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ae6:	897b      	ldrh	r3, [r7, #10]
 8002ae8:	b2da      	uxtb	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	4929      	ldr	r1, [pc, #164]	; (8002b9c <I2C_MasterRequestRead+0x198>)
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 f8cc 	bl	8002c94 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e044      	b.n	8002b90 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b06:	2300      	movs	r3, #0
 8002b08:	613b      	str	r3, [r7, #16]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	613b      	str	r3, [r7, #16]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	613b      	str	r3, [r7, #16]
 8002b1a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b2a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f000 f831 	bl	8002ba0 <I2C_WaitOnFlagUntilTimeout>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00d      	beq.n	8002b60 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b52:	d103      	bne.n	8002b5c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b5a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e017      	b.n	8002b90 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002b60:	897b      	ldrh	r3, [r7, #10]
 8002b62:	11db      	asrs	r3, r3, #7
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	f003 0306 	and.w	r3, r3, #6
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	f063 030e 	orn	r3, r3, #14
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	4907      	ldr	r1, [pc, #28]	; (8002b9c <I2C_MasterRequestRead+0x198>)
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f000 f888 	bl	8002c94 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e000      	b.n	8002b90 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3718      	adds	r7, #24
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	00010008 	.word	0x00010008
 8002b9c:	00010002 	.word	0x00010002

08002ba0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	603b      	str	r3, [r7, #0]
 8002bac:	4613      	mov	r3, r2
 8002bae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bb0:	e048      	b.n	8002c44 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb8:	d044      	beq.n	8002c44 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bba:	f7fe ff81 	bl	8001ac0 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d302      	bcc.n	8002bd0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d139      	bne.n	8002c44 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	0c1b      	lsrs	r3, r3, #16
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d10d      	bne.n	8002bf6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	43da      	mvns	r2, r3
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	4013      	ands	r3, r2
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	bf0c      	ite	eq
 8002bec:	2301      	moveq	r3, #1
 8002bee:	2300      	movne	r3, #0
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	e00c      	b.n	8002c10 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	43da      	mvns	r2, r3
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	4013      	ands	r3, r2
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	bf0c      	ite	eq
 8002c08:	2301      	moveq	r3, #1
 8002c0a:	2300      	movne	r3, #0
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	461a      	mov	r2, r3
 8002c10:	79fb      	ldrb	r3, [r7, #7]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d116      	bne.n	8002c44 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2220      	movs	r2, #32
 8002c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c30:	f043 0220 	orr.w	r2, r3, #32
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e023      	b.n	8002c8c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	0c1b      	lsrs	r3, r3, #16
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d10d      	bne.n	8002c6a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	695b      	ldr	r3, [r3, #20]
 8002c54:	43da      	mvns	r2, r3
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	bf0c      	ite	eq
 8002c60:	2301      	moveq	r3, #1
 8002c62:	2300      	movne	r3, #0
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	461a      	mov	r2, r3
 8002c68:	e00c      	b.n	8002c84 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	43da      	mvns	r2, r3
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	4013      	ands	r3, r2
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	bf0c      	ite	eq
 8002c7c:	2301      	moveq	r3, #1
 8002c7e:	2300      	movne	r3, #0
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	461a      	mov	r2, r3
 8002c84:	79fb      	ldrb	r3, [r7, #7]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d093      	beq.n	8002bb2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3710      	adds	r7, #16
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
 8002ca0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ca2:	e071      	b.n	8002d88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cb2:	d123      	bne.n	8002cfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cc2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ccc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce8:	f043 0204 	orr.w	r2, r3, #4
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e067      	b.n	8002dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d02:	d041      	beq.n	8002d88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d04:	f7fe fedc 	bl	8001ac0 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d302      	bcc.n	8002d1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d136      	bne.n	8002d88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	0c1b      	lsrs	r3, r3, #16
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d10c      	bne.n	8002d3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	43da      	mvns	r2, r3
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	bf14      	ite	ne
 8002d36:	2301      	movne	r3, #1
 8002d38:	2300      	moveq	r3, #0
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	e00b      	b.n	8002d56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	43da      	mvns	r2, r3
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	bf14      	ite	ne
 8002d50:	2301      	movne	r3, #1
 8002d52:	2300      	moveq	r3, #0
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d016      	beq.n	8002d88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2220      	movs	r2, #32
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d74:	f043 0220 	orr.w	r2, r3, #32
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e021      	b.n	8002dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	0c1b      	lsrs	r3, r3, #16
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d10c      	bne.n	8002dac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	43da      	mvns	r2, r3
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	bf14      	ite	ne
 8002da4:	2301      	movne	r3, #1
 8002da6:	2300      	moveq	r3, #0
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	e00b      	b.n	8002dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	43da      	mvns	r2, r3
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	4013      	ands	r3, r2
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	bf14      	ite	ne
 8002dbe:	2301      	movne	r3, #1
 8002dc0:	2300      	moveq	r3, #0
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f47f af6d 	bne.w	8002ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002de0:	e034      	b.n	8002e4c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f000 f8e3 	bl	8002fae <I2C_IsAcknowledgeFailed>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e034      	b.n	8002e5c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df8:	d028      	beq.n	8002e4c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dfa:	f7fe fe61 	bl	8001ac0 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	68ba      	ldr	r2, [r7, #8]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d302      	bcc.n	8002e10 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d11d      	bne.n	8002e4c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e1a:	2b80      	cmp	r3, #128	; 0x80
 8002e1c:	d016      	beq.n	8002e4c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2220      	movs	r2, #32
 8002e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e38:	f043 0220 	orr.w	r2, r3, #32
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e007      	b.n	8002e5c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e56:	2b80      	cmp	r3, #128	; 0x80
 8002e58:	d1c3      	bne.n	8002de2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e70:	e034      	b.n	8002edc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f000 f89b 	bl	8002fae <I2C_IsAcknowledgeFailed>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e034      	b.n	8002eec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e88:	d028      	beq.n	8002edc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e8a:	f7fe fe19 	bl	8001ac0 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	68ba      	ldr	r2, [r7, #8]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d302      	bcc.n	8002ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d11d      	bne.n	8002edc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	f003 0304 	and.w	r3, r3, #4
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	d016      	beq.n	8002edc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec8:	f043 0220 	orr.w	r2, r3, #32
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e007      	b.n	8002eec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	f003 0304 	and.w	r3, r3, #4
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d1c3      	bne.n	8002e72 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f00:	e049      	b.n	8002f96 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	f003 0310 	and.w	r3, r3, #16
 8002f0c:	2b10      	cmp	r3, #16
 8002f0e:	d119      	bne.n	8002f44 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f06f 0210 	mvn.w	r2, #16
 8002f18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2220      	movs	r2, #32
 8002f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e030      	b.n	8002fa6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f44:	f7fe fdbc 	bl	8001ac0 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	68ba      	ldr	r2, [r7, #8]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d302      	bcc.n	8002f5a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d11d      	bne.n	8002f96 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f64:	2b40      	cmp	r3, #64	; 0x40
 8002f66:	d016      	beq.n	8002f96 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2220      	movs	r2, #32
 8002f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	f043 0220 	orr.w	r2, r3, #32
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e007      	b.n	8002fa6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa0:	2b40      	cmp	r3, #64	; 0x40
 8002fa2:	d1ae      	bne.n	8002f02 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b083      	sub	sp, #12
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	695b      	ldr	r3, [r3, #20]
 8002fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fc4:	d11b      	bne.n	8002ffe <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fce:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2220      	movs	r2, #32
 8002fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	f043 0204 	orr.w	r2, r3, #4
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e000      	b.n	8003000 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	bc80      	pop	{r7}
 8003008:	4770      	bx	lr
	...

0800300c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e272      	b.n	8003504 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	f000 8087 	beq.w	800313a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800302c:	4b92      	ldr	r3, [pc, #584]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f003 030c 	and.w	r3, r3, #12
 8003034:	2b04      	cmp	r3, #4
 8003036:	d00c      	beq.n	8003052 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003038:	4b8f      	ldr	r3, [pc, #572]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f003 030c 	and.w	r3, r3, #12
 8003040:	2b08      	cmp	r3, #8
 8003042:	d112      	bne.n	800306a <HAL_RCC_OscConfig+0x5e>
 8003044:	4b8c      	ldr	r3, [pc, #560]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800304c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003050:	d10b      	bne.n	800306a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003052:	4b89      	ldr	r3, [pc, #548]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d06c      	beq.n	8003138 <HAL_RCC_OscConfig+0x12c>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d168      	bne.n	8003138 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e24c      	b.n	8003504 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003072:	d106      	bne.n	8003082 <HAL_RCC_OscConfig+0x76>
 8003074:	4b80      	ldr	r3, [pc, #512]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a7f      	ldr	r2, [pc, #508]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 800307a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800307e:	6013      	str	r3, [r2, #0]
 8003080:	e02e      	b.n	80030e0 <HAL_RCC_OscConfig+0xd4>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10c      	bne.n	80030a4 <HAL_RCC_OscConfig+0x98>
 800308a:	4b7b      	ldr	r3, [pc, #492]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a7a      	ldr	r2, [pc, #488]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 8003090:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	4b78      	ldr	r3, [pc, #480]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a77      	ldr	r2, [pc, #476]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 800309c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	e01d      	b.n	80030e0 <HAL_RCC_OscConfig+0xd4>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030ac:	d10c      	bne.n	80030c8 <HAL_RCC_OscConfig+0xbc>
 80030ae:	4b72      	ldr	r3, [pc, #456]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a71      	ldr	r2, [pc, #452]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 80030b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	4b6f      	ldr	r3, [pc, #444]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a6e      	ldr	r2, [pc, #440]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 80030c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c4:	6013      	str	r3, [r2, #0]
 80030c6:	e00b      	b.n	80030e0 <HAL_RCC_OscConfig+0xd4>
 80030c8:	4b6b      	ldr	r3, [pc, #428]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a6a      	ldr	r2, [pc, #424]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 80030ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030d2:	6013      	str	r3, [r2, #0]
 80030d4:	4b68      	ldr	r3, [pc, #416]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a67      	ldr	r2, [pc, #412]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 80030da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d013      	beq.n	8003110 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e8:	f7fe fcea 	bl	8001ac0 <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030f0:	f7fe fce6 	bl	8001ac0 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b64      	cmp	r3, #100	; 0x64
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e200      	b.n	8003504 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003102:	4b5d      	ldr	r3, [pc, #372]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d0f0      	beq.n	80030f0 <HAL_RCC_OscConfig+0xe4>
 800310e:	e014      	b.n	800313a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003110:	f7fe fcd6 	bl	8001ac0 <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003118:	f7fe fcd2 	bl	8001ac0 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b64      	cmp	r3, #100	; 0x64
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e1ec      	b.n	8003504 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800312a:	4b53      	ldr	r3, [pc, #332]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1f0      	bne.n	8003118 <HAL_RCC_OscConfig+0x10c>
 8003136:	e000      	b.n	800313a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003138:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d063      	beq.n	800320e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003146:	4b4c      	ldr	r3, [pc, #304]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f003 030c 	and.w	r3, r3, #12
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00b      	beq.n	800316a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003152:	4b49      	ldr	r3, [pc, #292]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f003 030c 	and.w	r3, r3, #12
 800315a:	2b08      	cmp	r3, #8
 800315c:	d11c      	bne.n	8003198 <HAL_RCC_OscConfig+0x18c>
 800315e:	4b46      	ldr	r3, [pc, #280]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d116      	bne.n	8003198 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800316a:	4b43      	ldr	r3, [pc, #268]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d005      	beq.n	8003182 <HAL_RCC_OscConfig+0x176>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d001      	beq.n	8003182 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e1c0      	b.n	8003504 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003182:	4b3d      	ldr	r3, [pc, #244]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	4939      	ldr	r1, [pc, #228]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 8003192:	4313      	orrs	r3, r2
 8003194:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003196:	e03a      	b.n	800320e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d020      	beq.n	80031e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031a0:	4b36      	ldr	r3, [pc, #216]	; (800327c <HAL_RCC_OscConfig+0x270>)
 80031a2:	2201      	movs	r2, #1
 80031a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a6:	f7fe fc8b 	bl	8001ac0 <HAL_GetTick>
 80031aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ac:	e008      	b.n	80031c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031ae:	f7fe fc87 	bl	8001ac0 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e1a1      	b.n	8003504 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c0:	4b2d      	ldr	r3, [pc, #180]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d0f0      	beq.n	80031ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031cc:	4b2a      	ldr	r3, [pc, #168]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	4927      	ldr	r1, [pc, #156]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	600b      	str	r3, [r1, #0]
 80031e0:	e015      	b.n	800320e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031e2:	4b26      	ldr	r3, [pc, #152]	; (800327c <HAL_RCC_OscConfig+0x270>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e8:	f7fe fc6a 	bl	8001ac0 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031f0:	f7fe fc66 	bl	8001ac0 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e180      	b.n	8003504 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003202:	4b1d      	ldr	r3, [pc, #116]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1f0      	bne.n	80031f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0308 	and.w	r3, r3, #8
 8003216:	2b00      	cmp	r3, #0
 8003218:	d03a      	beq.n	8003290 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d019      	beq.n	8003256 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003222:	4b17      	ldr	r3, [pc, #92]	; (8003280 <HAL_RCC_OscConfig+0x274>)
 8003224:	2201      	movs	r2, #1
 8003226:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003228:	f7fe fc4a 	bl	8001ac0 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003230:	f7fe fc46 	bl	8001ac0 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e160      	b.n	8003504 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003242:	4b0d      	ldr	r3, [pc, #52]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 8003244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0f0      	beq.n	8003230 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800324e:	2001      	movs	r0, #1
 8003250:	f000 faba 	bl	80037c8 <RCC_Delay>
 8003254:	e01c      	b.n	8003290 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003256:	4b0a      	ldr	r3, [pc, #40]	; (8003280 <HAL_RCC_OscConfig+0x274>)
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800325c:	f7fe fc30 	bl	8001ac0 <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003262:	e00f      	b.n	8003284 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003264:	f7fe fc2c 	bl	8001ac0 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d908      	bls.n	8003284 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e146      	b.n	8003504 <HAL_RCC_OscConfig+0x4f8>
 8003276:	bf00      	nop
 8003278:	40021000 	.word	0x40021000
 800327c:	42420000 	.word	0x42420000
 8003280:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003284:	4b92      	ldr	r3, [pc, #584]	; (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1e9      	bne.n	8003264 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 80a6 	beq.w	80033ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800329e:	2300      	movs	r3, #0
 80032a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032a2:	4b8b      	ldr	r3, [pc, #556]	; (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10d      	bne.n	80032ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032ae:	4b88      	ldr	r3, [pc, #544]	; (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	4a87      	ldr	r2, [pc, #540]	; (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 80032b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032b8:	61d3      	str	r3, [r2, #28]
 80032ba:	4b85      	ldr	r3, [pc, #532]	; (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c2:	60bb      	str	r3, [r7, #8]
 80032c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032c6:	2301      	movs	r3, #1
 80032c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ca:	4b82      	ldr	r3, [pc, #520]	; (80034d4 <HAL_RCC_OscConfig+0x4c8>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d118      	bne.n	8003308 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032d6:	4b7f      	ldr	r3, [pc, #508]	; (80034d4 <HAL_RCC_OscConfig+0x4c8>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a7e      	ldr	r2, [pc, #504]	; (80034d4 <HAL_RCC_OscConfig+0x4c8>)
 80032dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032e2:	f7fe fbed 	bl	8001ac0 <HAL_GetTick>
 80032e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e8:	e008      	b.n	80032fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ea:	f7fe fbe9 	bl	8001ac0 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b64      	cmp	r3, #100	; 0x64
 80032f6:	d901      	bls.n	80032fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e103      	b.n	8003504 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032fc:	4b75      	ldr	r3, [pc, #468]	; (80034d4 <HAL_RCC_OscConfig+0x4c8>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003304:	2b00      	cmp	r3, #0
 8003306:	d0f0      	beq.n	80032ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d106      	bne.n	800331e <HAL_RCC_OscConfig+0x312>
 8003310:	4b6f      	ldr	r3, [pc, #444]	; (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 8003312:	6a1b      	ldr	r3, [r3, #32]
 8003314:	4a6e      	ldr	r2, [pc, #440]	; (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 8003316:	f043 0301 	orr.w	r3, r3, #1
 800331a:	6213      	str	r3, [r2, #32]
 800331c:	e02d      	b.n	800337a <HAL_RCC_OscConfig+0x36e>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10c      	bne.n	8003340 <HAL_RCC_OscConfig+0x334>
 8003326:	4b6a      	ldr	r3, [pc, #424]	; (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	4a69      	ldr	r2, [pc, #420]	; (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 800332c:	f023 0301 	bic.w	r3, r3, #1
 8003330:	6213      	str	r3, [r2, #32]
 8003332:	4b67      	ldr	r3, [pc, #412]	; (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	4a66      	ldr	r2, [pc, #408]	; (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 8003338:	f023 0304 	bic.w	r3, r3, #4
 800333c:	6213      	str	r3, [r2, #32]
 800333e:	e01c      	b.n	800337a <HAL_RCC_OscConfig+0x36e>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	2b05      	cmp	r3, #5
 8003346:	d10c      	bne.n	8003362 <HAL_RCC_OscConfig+0x356>
 8003348:	4b61      	ldr	r3, [pc, #388]	; (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	4a60      	ldr	r2, [pc, #384]	; (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 800334e:	f043 0304 	orr.w	r3, r3, #4
 8003352:	6213      	str	r3, [r2, #32]
 8003354:	4b5e      	ldr	r3, [pc, #376]	; (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	4a5d      	ldr	r2, [pc, #372]	; (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 800335a:	f043 0301 	orr.w	r3, r3, #1
 800335e:	6213      	str	r3, [r2, #32]
 8003360:	e00b      	b.n	800337a <HAL_RCC_OscConfig+0x36e>
 8003362:	4b5b      	ldr	r3, [pc, #364]	; (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	4a5a      	ldr	r2, [pc, #360]	; (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 8003368:	f023 0301 	bic.w	r3, r3, #1
 800336c:	6213      	str	r3, [r2, #32]
 800336e:	4b58      	ldr	r3, [pc, #352]	; (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	4a57      	ldr	r2, [pc, #348]	; (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 8003374:	f023 0304 	bic.w	r3, r3, #4
 8003378:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d015      	beq.n	80033ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003382:	f7fe fb9d 	bl	8001ac0 <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003388:	e00a      	b.n	80033a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800338a:	f7fe fb99 	bl	8001ac0 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	f241 3288 	movw	r2, #5000	; 0x1388
 8003398:	4293      	cmp	r3, r2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e0b1      	b.n	8003504 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a0:	4b4b      	ldr	r3, [pc, #300]	; (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d0ee      	beq.n	800338a <HAL_RCC_OscConfig+0x37e>
 80033ac:	e014      	b.n	80033d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ae:	f7fe fb87 	bl	8001ac0 <HAL_GetTick>
 80033b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033b4:	e00a      	b.n	80033cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033b6:	f7fe fb83 	bl	8001ac0 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e09b      	b.n	8003504 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033cc:	4b40      	ldr	r3, [pc, #256]	; (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1ee      	bne.n	80033b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033d8:	7dfb      	ldrb	r3, [r7, #23]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d105      	bne.n	80033ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033de:	4b3c      	ldr	r3, [pc, #240]	; (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	4a3b      	ldr	r2, [pc, #236]	; (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 80033e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f000 8087 	beq.w	8003502 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033f4:	4b36      	ldr	r3, [pc, #216]	; (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f003 030c 	and.w	r3, r3, #12
 80033fc:	2b08      	cmp	r3, #8
 80033fe:	d061      	beq.n	80034c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	69db      	ldr	r3, [r3, #28]
 8003404:	2b02      	cmp	r3, #2
 8003406:	d146      	bne.n	8003496 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003408:	4b33      	ldr	r3, [pc, #204]	; (80034d8 <HAL_RCC_OscConfig+0x4cc>)
 800340a:	2200      	movs	r2, #0
 800340c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800340e:	f7fe fb57 	bl	8001ac0 <HAL_GetTick>
 8003412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003414:	e008      	b.n	8003428 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003416:	f7fe fb53 	bl	8001ac0 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	2b02      	cmp	r3, #2
 8003422:	d901      	bls.n	8003428 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e06d      	b.n	8003504 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003428:	4b29      	ldr	r3, [pc, #164]	; (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1f0      	bne.n	8003416 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800343c:	d108      	bne.n	8003450 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800343e:	4b24      	ldr	r3, [pc, #144]	; (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	4921      	ldr	r1, [pc, #132]	; (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 800344c:	4313      	orrs	r3, r2
 800344e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003450:	4b1f      	ldr	r3, [pc, #124]	; (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a19      	ldr	r1, [r3, #32]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003460:	430b      	orrs	r3, r1
 8003462:	491b      	ldr	r1, [pc, #108]	; (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 8003464:	4313      	orrs	r3, r2
 8003466:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003468:	4b1b      	ldr	r3, [pc, #108]	; (80034d8 <HAL_RCC_OscConfig+0x4cc>)
 800346a:	2201      	movs	r2, #1
 800346c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346e:	f7fe fb27 	bl	8001ac0 <HAL_GetTick>
 8003472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003474:	e008      	b.n	8003488 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003476:	f7fe fb23 	bl	8001ac0 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d901      	bls.n	8003488 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e03d      	b.n	8003504 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003488:	4b11      	ldr	r3, [pc, #68]	; (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d0f0      	beq.n	8003476 <HAL_RCC_OscConfig+0x46a>
 8003494:	e035      	b.n	8003502 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003496:	4b10      	ldr	r3, [pc, #64]	; (80034d8 <HAL_RCC_OscConfig+0x4cc>)
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349c:	f7fe fb10 	bl	8001ac0 <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034a4:	f7fe fb0c 	bl	8001ac0 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e026      	b.n	8003504 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034b6:	4b06      	ldr	r3, [pc, #24]	; (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1f0      	bne.n	80034a4 <HAL_RCC_OscConfig+0x498>
 80034c2:	e01e      	b.n	8003502 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d107      	bne.n	80034dc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e019      	b.n	8003504 <HAL_RCC_OscConfig+0x4f8>
 80034d0:	40021000 	.word	0x40021000
 80034d4:	40007000 	.word	0x40007000
 80034d8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034dc:	4b0b      	ldr	r3, [pc, #44]	; (800350c <HAL_RCC_OscConfig+0x500>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a1b      	ldr	r3, [r3, #32]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d106      	bne.n	80034fe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d001      	beq.n	8003502 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e000      	b.n	8003504 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3718      	adds	r7, #24
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40021000 	.word	0x40021000

08003510 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d101      	bne.n	8003524 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e0d0      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003524:	4b6a      	ldr	r3, [pc, #424]	; (80036d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0307 	and.w	r3, r3, #7
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	429a      	cmp	r2, r3
 8003530:	d910      	bls.n	8003554 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003532:	4b67      	ldr	r3, [pc, #412]	; (80036d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f023 0207 	bic.w	r2, r3, #7
 800353a:	4965      	ldr	r1, [pc, #404]	; (80036d0 <HAL_RCC_ClockConfig+0x1c0>)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	4313      	orrs	r3, r2
 8003540:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003542:	4b63      	ldr	r3, [pc, #396]	; (80036d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0307 	and.w	r3, r3, #7
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	429a      	cmp	r2, r3
 800354e:	d001      	beq.n	8003554 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e0b8      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d020      	beq.n	80035a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b00      	cmp	r3, #0
 800356a:	d005      	beq.n	8003578 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800356c:	4b59      	ldr	r3, [pc, #356]	; (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	4a58      	ldr	r2, [pc, #352]	; (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003572:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003576:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0308 	and.w	r3, r3, #8
 8003580:	2b00      	cmp	r3, #0
 8003582:	d005      	beq.n	8003590 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003584:	4b53      	ldr	r3, [pc, #332]	; (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	4a52      	ldr	r2, [pc, #328]	; (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 800358a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800358e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003590:	4b50      	ldr	r3, [pc, #320]	; (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	494d      	ldr	r1, [pc, #308]	; (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d040      	beq.n	8003630 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d107      	bne.n	80035c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035b6:	4b47      	ldr	r3, [pc, #284]	; (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d115      	bne.n	80035ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e07f      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d107      	bne.n	80035de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ce:	4b41      	ldr	r3, [pc, #260]	; (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d109      	bne.n	80035ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e073      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035de:	4b3d      	ldr	r3, [pc, #244]	; (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e06b      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ee:	4b39      	ldr	r3, [pc, #228]	; (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f023 0203 	bic.w	r2, r3, #3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	4936      	ldr	r1, [pc, #216]	; (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003600:	f7fe fa5e 	bl	8001ac0 <HAL_GetTick>
 8003604:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003606:	e00a      	b.n	800361e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003608:	f7fe fa5a 	bl	8001ac0 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	f241 3288 	movw	r2, #5000	; 0x1388
 8003616:	4293      	cmp	r3, r2
 8003618:	d901      	bls.n	800361e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e053      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800361e:	4b2d      	ldr	r3, [pc, #180]	; (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f003 020c 	and.w	r2, r3, #12
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	429a      	cmp	r2, r3
 800362e:	d1eb      	bne.n	8003608 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003630:	4b27      	ldr	r3, [pc, #156]	; (80036d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0307 	and.w	r3, r3, #7
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	429a      	cmp	r2, r3
 800363c:	d210      	bcs.n	8003660 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800363e:	4b24      	ldr	r3, [pc, #144]	; (80036d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f023 0207 	bic.w	r2, r3, #7
 8003646:	4922      	ldr	r1, [pc, #136]	; (80036d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	4313      	orrs	r3, r2
 800364c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800364e:	4b20      	ldr	r3, [pc, #128]	; (80036d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	429a      	cmp	r2, r3
 800365a:	d001      	beq.n	8003660 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e032      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b00      	cmp	r3, #0
 800366a:	d008      	beq.n	800367e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800366c:	4b19      	ldr	r3, [pc, #100]	; (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	4916      	ldr	r1, [pc, #88]	; (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 800367a:	4313      	orrs	r3, r2
 800367c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0308 	and.w	r3, r3, #8
 8003686:	2b00      	cmp	r3, #0
 8003688:	d009      	beq.n	800369e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800368a:	4b12      	ldr	r3, [pc, #72]	; (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	490e      	ldr	r1, [pc, #56]	; (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 800369a:	4313      	orrs	r3, r2
 800369c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800369e:	f000 f821 	bl	80036e4 <HAL_RCC_GetSysClockFreq>
 80036a2:	4602      	mov	r2, r0
 80036a4:	4b0b      	ldr	r3, [pc, #44]	; (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	091b      	lsrs	r3, r3, #4
 80036aa:	f003 030f 	and.w	r3, r3, #15
 80036ae:	490a      	ldr	r1, [pc, #40]	; (80036d8 <HAL_RCC_ClockConfig+0x1c8>)
 80036b0:	5ccb      	ldrb	r3, [r1, r3]
 80036b2:	fa22 f303 	lsr.w	r3, r2, r3
 80036b6:	4a09      	ldr	r2, [pc, #36]	; (80036dc <HAL_RCC_ClockConfig+0x1cc>)
 80036b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036ba:	4b09      	ldr	r3, [pc, #36]	; (80036e0 <HAL_RCC_ClockConfig+0x1d0>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4618      	mov	r0, r3
 80036c0:	f7fe f9bc 	bl	8001a3c <HAL_InitTick>

  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	40022000 	.word	0x40022000
 80036d4:	40021000 	.word	0x40021000
 80036d8:	08003874 	.word	0x08003874
 80036dc:	20000000 	.word	0x20000000
 80036e0:	20000004 	.word	0x20000004

080036e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b087      	sub	sp, #28
 80036e8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	60fb      	str	r3, [r7, #12]
 80036ee:	2300      	movs	r3, #0
 80036f0:	60bb      	str	r3, [r7, #8]
 80036f2:	2300      	movs	r3, #0
 80036f4:	617b      	str	r3, [r7, #20]
 80036f6:	2300      	movs	r3, #0
 80036f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80036fa:	2300      	movs	r3, #0
 80036fc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80036fe:	4b1e      	ldr	r3, [pc, #120]	; (8003778 <HAL_RCC_GetSysClockFreq+0x94>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f003 030c 	and.w	r3, r3, #12
 800370a:	2b04      	cmp	r3, #4
 800370c:	d002      	beq.n	8003714 <HAL_RCC_GetSysClockFreq+0x30>
 800370e:	2b08      	cmp	r3, #8
 8003710:	d003      	beq.n	800371a <HAL_RCC_GetSysClockFreq+0x36>
 8003712:	e027      	b.n	8003764 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003714:	4b19      	ldr	r3, [pc, #100]	; (800377c <HAL_RCC_GetSysClockFreq+0x98>)
 8003716:	613b      	str	r3, [r7, #16]
      break;
 8003718:	e027      	b.n	800376a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	0c9b      	lsrs	r3, r3, #18
 800371e:	f003 030f 	and.w	r3, r3, #15
 8003722:	4a17      	ldr	r2, [pc, #92]	; (8003780 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003724:	5cd3      	ldrb	r3, [r2, r3]
 8003726:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d010      	beq.n	8003754 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003732:	4b11      	ldr	r3, [pc, #68]	; (8003778 <HAL_RCC_GetSysClockFreq+0x94>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	0c5b      	lsrs	r3, r3, #17
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	4a11      	ldr	r2, [pc, #68]	; (8003784 <HAL_RCC_GetSysClockFreq+0xa0>)
 800373e:	5cd3      	ldrb	r3, [r2, r3]
 8003740:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a0d      	ldr	r2, [pc, #52]	; (800377c <HAL_RCC_GetSysClockFreq+0x98>)
 8003746:	fb03 f202 	mul.w	r2, r3, r2
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003750:	617b      	str	r3, [r7, #20]
 8003752:	e004      	b.n	800375e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a0c      	ldr	r2, [pc, #48]	; (8003788 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003758:	fb02 f303 	mul.w	r3, r2, r3
 800375c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	613b      	str	r3, [r7, #16]
      break;
 8003762:	e002      	b.n	800376a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003764:	4b05      	ldr	r3, [pc, #20]	; (800377c <HAL_RCC_GetSysClockFreq+0x98>)
 8003766:	613b      	str	r3, [r7, #16]
      break;
 8003768:	bf00      	nop
    }
  }
  return sysclockfreq;
 800376a:	693b      	ldr	r3, [r7, #16]
}
 800376c:	4618      	mov	r0, r3
 800376e:	371c      	adds	r7, #28
 8003770:	46bd      	mov	sp, r7
 8003772:	bc80      	pop	{r7}
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	40021000 	.word	0x40021000
 800377c:	007a1200 	.word	0x007a1200
 8003780:	0800388c 	.word	0x0800388c
 8003784:	0800389c 	.word	0x0800389c
 8003788:	003d0900 	.word	0x003d0900

0800378c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003790:	4b02      	ldr	r3, [pc, #8]	; (800379c <HAL_RCC_GetHCLKFreq+0x10>)
 8003792:	681b      	ldr	r3, [r3, #0]
}
 8003794:	4618      	mov	r0, r3
 8003796:	46bd      	mov	sp, r7
 8003798:	bc80      	pop	{r7}
 800379a:	4770      	bx	lr
 800379c:	20000000 	.word	0x20000000

080037a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037a4:	f7ff fff2 	bl	800378c <HAL_RCC_GetHCLKFreq>
 80037a8:	4602      	mov	r2, r0
 80037aa:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	0a1b      	lsrs	r3, r3, #8
 80037b0:	f003 0307 	and.w	r3, r3, #7
 80037b4:	4903      	ldr	r1, [pc, #12]	; (80037c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037b6:	5ccb      	ldrb	r3, [r1, r3]
 80037b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037bc:	4618      	mov	r0, r3
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	40021000 	.word	0x40021000
 80037c4:	08003884 	.word	0x08003884

080037c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80037d0:	4b0a      	ldr	r3, [pc, #40]	; (80037fc <RCC_Delay+0x34>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a0a      	ldr	r2, [pc, #40]	; (8003800 <RCC_Delay+0x38>)
 80037d6:	fba2 2303 	umull	r2, r3, r2, r3
 80037da:	0a5b      	lsrs	r3, r3, #9
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	fb02 f303 	mul.w	r3, r2, r3
 80037e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80037e4:	bf00      	nop
  }
  while (Delay --);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	1e5a      	subs	r2, r3, #1
 80037ea:	60fa      	str	r2, [r7, #12]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1f9      	bne.n	80037e4 <RCC_Delay+0x1c>
}
 80037f0:	bf00      	nop
 80037f2:	bf00      	nop
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bc80      	pop	{r7}
 80037fa:	4770      	bx	lr
 80037fc:	20000000 	.word	0x20000000
 8003800:	10624dd3 	.word	0x10624dd3

08003804 <__libc_init_array>:
 8003804:	b570      	push	{r4, r5, r6, lr}
 8003806:	2600      	movs	r6, #0
 8003808:	4d0c      	ldr	r5, [pc, #48]	; (800383c <__libc_init_array+0x38>)
 800380a:	4c0d      	ldr	r4, [pc, #52]	; (8003840 <__libc_init_array+0x3c>)
 800380c:	1b64      	subs	r4, r4, r5
 800380e:	10a4      	asrs	r4, r4, #2
 8003810:	42a6      	cmp	r6, r4
 8003812:	d109      	bne.n	8003828 <__libc_init_array+0x24>
 8003814:	f000 f822 	bl	800385c <_init>
 8003818:	2600      	movs	r6, #0
 800381a:	4d0a      	ldr	r5, [pc, #40]	; (8003844 <__libc_init_array+0x40>)
 800381c:	4c0a      	ldr	r4, [pc, #40]	; (8003848 <__libc_init_array+0x44>)
 800381e:	1b64      	subs	r4, r4, r5
 8003820:	10a4      	asrs	r4, r4, #2
 8003822:	42a6      	cmp	r6, r4
 8003824:	d105      	bne.n	8003832 <__libc_init_array+0x2e>
 8003826:	bd70      	pop	{r4, r5, r6, pc}
 8003828:	f855 3b04 	ldr.w	r3, [r5], #4
 800382c:	4798      	blx	r3
 800382e:	3601      	adds	r6, #1
 8003830:	e7ee      	b.n	8003810 <__libc_init_array+0xc>
 8003832:	f855 3b04 	ldr.w	r3, [r5], #4
 8003836:	4798      	blx	r3
 8003838:	3601      	adds	r6, #1
 800383a:	e7f2      	b.n	8003822 <__libc_init_array+0x1e>
 800383c:	080038a8 	.word	0x080038a8
 8003840:	080038a8 	.word	0x080038a8
 8003844:	080038a8 	.word	0x080038a8
 8003848:	080038ac 	.word	0x080038ac

0800384c <memset>:
 800384c:	4603      	mov	r3, r0
 800384e:	4402      	add	r2, r0
 8003850:	4293      	cmp	r3, r2
 8003852:	d100      	bne.n	8003856 <memset+0xa>
 8003854:	4770      	bx	lr
 8003856:	f803 1b01 	strb.w	r1, [r3], #1
 800385a:	e7f9      	b.n	8003850 <memset+0x4>

0800385c <_init>:
 800385c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800385e:	bf00      	nop
 8003860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003862:	bc08      	pop	{r3}
 8003864:	469e      	mov	lr, r3
 8003866:	4770      	bx	lr

08003868 <_fini>:
 8003868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800386a:	bf00      	nop
 800386c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800386e:	bc08      	pop	{r3}
 8003870:	469e      	mov	lr, r3
 8003872:	4770      	bx	lr
