
PORTABLE DIGITAL SOURCE V1.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009234  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a34  080092f8  080092f8  000192f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd2c  0800bd2c  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd2c  0800bd2c  0001bd2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd34  0800bd34  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd34  0800bd34  0001bd34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd38  0800bd38  0001bd38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800bd3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a8  200001f8  0800bf30  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200007a0  0800bf30  000207a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017638  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003979  00000000  00000000  00037854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e48  00000000  00000000  0003b1d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017c0  00000000  00000000  0003c018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014c13  00000000  00000000  0003d7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b90b  00000000  00000000  000523eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007575e  00000000  00000000  0006dcf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e3454  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040d0  00000000  00000000  000e34a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000fbfa  00000000  00000000  000e7574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001f8 	.word	0x200001f8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080092dc 	.word	0x080092dc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001fc 	.word	0x200001fc
 8000104:	080092dc 	.word	0x080092dc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_llsr>:
 800042c:	40d0      	lsrs	r0, r2
 800042e:	000b      	movs	r3, r1
 8000430:	40d1      	lsrs	r1, r2
 8000432:	469c      	mov	ip, r3
 8000434:	3a20      	subs	r2, #32
 8000436:	40d3      	lsrs	r3, r2
 8000438:	4318      	orrs	r0, r3
 800043a:	4252      	negs	r2, r2
 800043c:	4663      	mov	r3, ip
 800043e:	4093      	lsls	r3, r2
 8000440:	4318      	orrs	r0, r3
 8000442:	4770      	bx	lr

08000444 <__aeabi_cdrcmple>:
 8000444:	4684      	mov	ip, r0
 8000446:	0010      	movs	r0, r2
 8000448:	4662      	mov	r2, ip
 800044a:	468c      	mov	ip, r1
 800044c:	0019      	movs	r1, r3
 800044e:	4663      	mov	r3, ip
 8000450:	e000      	b.n	8000454 <__aeabi_cdcmpeq>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_cdcmpeq>:
 8000454:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000456:	f001 ff63 	bl	8002320 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	d401      	bmi.n	8000462 <__aeabi_cdcmpeq+0xe>
 800045e:	2100      	movs	r1, #0
 8000460:	42c8      	cmn	r0, r1
 8000462:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000464 <__aeabi_dcmpeq>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 feb3 	bl	80021d0 <__eqdf2>
 800046a:	4240      	negs	r0, r0
 800046c:	3001      	adds	r0, #1
 800046e:	bd10      	pop	{r4, pc}

08000470 <__aeabi_dcmplt>:
 8000470:	b510      	push	{r4, lr}
 8000472:	f001 ff55 	bl	8002320 <__ledf2>
 8000476:	2800      	cmp	r0, #0
 8000478:	db01      	blt.n	800047e <__aeabi_dcmplt+0xe>
 800047a:	2000      	movs	r0, #0
 800047c:	bd10      	pop	{r4, pc}
 800047e:	2001      	movs	r0, #1
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__aeabi_dcmple>:
 8000484:	b510      	push	{r4, lr}
 8000486:	f001 ff4b 	bl	8002320 <__ledf2>
 800048a:	2800      	cmp	r0, #0
 800048c:	dd01      	ble.n	8000492 <__aeabi_dcmple+0xe>
 800048e:	2000      	movs	r0, #0
 8000490:	bd10      	pop	{r4, pc}
 8000492:	2001      	movs	r0, #1
 8000494:	bd10      	pop	{r4, pc}
 8000496:	46c0      	nop			; (mov r8, r8)

08000498 <__aeabi_dcmpgt>:
 8000498:	b510      	push	{r4, lr}
 800049a:	f001 fedb 	bl	8002254 <__gedf2>
 800049e:	2800      	cmp	r0, #0
 80004a0:	dc01      	bgt.n	80004a6 <__aeabi_dcmpgt+0xe>
 80004a2:	2000      	movs	r0, #0
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	2001      	movs	r0, #1
 80004a8:	bd10      	pop	{r4, pc}
 80004aa:	46c0      	nop			; (mov r8, r8)

080004ac <__aeabi_dcmpge>:
 80004ac:	b510      	push	{r4, lr}
 80004ae:	f001 fed1 	bl	8002254 <__gedf2>
 80004b2:	2800      	cmp	r0, #0
 80004b4:	da01      	bge.n	80004ba <__aeabi_dcmpge+0xe>
 80004b6:	2000      	movs	r0, #0
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	2001      	movs	r0, #1
 80004bc:	bd10      	pop	{r4, pc}
 80004be:	46c0      	nop			; (mov r8, r8)

080004c0 <__aeabi_cfrcmple>:
 80004c0:	4684      	mov	ip, r0
 80004c2:	0008      	movs	r0, r1
 80004c4:	4661      	mov	r1, ip
 80004c6:	e7ff      	b.n	80004c8 <__aeabi_cfcmpeq>

080004c8 <__aeabi_cfcmpeq>:
 80004c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004ca:	f000 fc87 	bl	8000ddc <__lesf2>
 80004ce:	2800      	cmp	r0, #0
 80004d0:	d401      	bmi.n	80004d6 <__aeabi_cfcmpeq+0xe>
 80004d2:	2100      	movs	r1, #0
 80004d4:	42c8      	cmn	r0, r1
 80004d6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d8 <__aeabi_fcmpeq>:
 80004d8:	b510      	push	{r4, lr}
 80004da:	f000 fc13 	bl	8000d04 <__eqsf2>
 80004de:	4240      	negs	r0, r0
 80004e0:	3001      	adds	r0, #1
 80004e2:	bd10      	pop	{r4, pc}

080004e4 <__aeabi_fcmplt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f000 fc79 	bl	8000ddc <__lesf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	db01      	blt.n	80004f2 <__aeabi_fcmplt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			; (mov r8, r8)

080004f8 <__aeabi_fcmple>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f000 fc6f 	bl	8000ddc <__lesf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	dd01      	ble.n	8000506 <__aeabi_fcmple+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			; (mov r8, r8)

0800050c <__aeabi_fcmpgt>:
 800050c:	b510      	push	{r4, lr}
 800050e:	f000 fc1f 	bl	8000d50 <__gesf2>
 8000512:	2800      	cmp	r0, #0
 8000514:	dc01      	bgt.n	800051a <__aeabi_fcmpgt+0xe>
 8000516:	2000      	movs	r0, #0
 8000518:	bd10      	pop	{r4, pc}
 800051a:	2001      	movs	r0, #1
 800051c:	bd10      	pop	{r4, pc}
 800051e:	46c0      	nop			; (mov r8, r8)

08000520 <__aeabi_fcmpge>:
 8000520:	b510      	push	{r4, lr}
 8000522:	f000 fc15 	bl	8000d50 <__gesf2>
 8000526:	2800      	cmp	r0, #0
 8000528:	da01      	bge.n	800052e <__aeabi_fcmpge+0xe>
 800052a:	2000      	movs	r0, #0
 800052c:	bd10      	pop	{r4, pc}
 800052e:	2001      	movs	r0, #1
 8000530:	bd10      	pop	{r4, pc}
 8000532:	46c0      	nop			; (mov r8, r8)

08000534 <__aeabi_uldivmod>:
 8000534:	2b00      	cmp	r3, #0
 8000536:	d111      	bne.n	800055c <__aeabi_uldivmod+0x28>
 8000538:	2a00      	cmp	r2, #0
 800053a:	d10f      	bne.n	800055c <__aeabi_uldivmod+0x28>
 800053c:	2900      	cmp	r1, #0
 800053e:	d100      	bne.n	8000542 <__aeabi_uldivmod+0xe>
 8000540:	2800      	cmp	r0, #0
 8000542:	d002      	beq.n	800054a <__aeabi_uldivmod+0x16>
 8000544:	2100      	movs	r1, #0
 8000546:	43c9      	mvns	r1, r1
 8000548:	0008      	movs	r0, r1
 800054a:	b407      	push	{r0, r1, r2}
 800054c:	4802      	ldr	r0, [pc, #8]	; (8000558 <__aeabi_uldivmod+0x24>)
 800054e:	a102      	add	r1, pc, #8	; (adr r1, 8000558 <__aeabi_uldivmod+0x24>)
 8000550:	1840      	adds	r0, r0, r1
 8000552:	9002      	str	r0, [sp, #8]
 8000554:	bd03      	pop	{r0, r1, pc}
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	fffffed1 	.word	0xfffffed1
 800055c:	b403      	push	{r0, r1}
 800055e:	4668      	mov	r0, sp
 8000560:	b501      	push	{r0, lr}
 8000562:	9802      	ldr	r0, [sp, #8]
 8000564:	f000 f84c 	bl	8000600 <__udivmoddi4>
 8000568:	9b01      	ldr	r3, [sp, #4]
 800056a:	469e      	mov	lr, r3
 800056c:	b002      	add	sp, #8
 800056e:	bc0c      	pop	{r2, r3}
 8000570:	4770      	bx	lr
 8000572:	46c0      	nop			; (mov r8, r8)

08000574 <__aeabi_lmul>:
 8000574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000576:	46ce      	mov	lr, r9
 8000578:	4647      	mov	r7, r8
 800057a:	b580      	push	{r7, lr}
 800057c:	0007      	movs	r7, r0
 800057e:	4699      	mov	r9, r3
 8000580:	0c3b      	lsrs	r3, r7, #16
 8000582:	469c      	mov	ip, r3
 8000584:	0413      	lsls	r3, r2, #16
 8000586:	0c1b      	lsrs	r3, r3, #16
 8000588:	001d      	movs	r5, r3
 800058a:	000e      	movs	r6, r1
 800058c:	4661      	mov	r1, ip
 800058e:	0400      	lsls	r0, r0, #16
 8000590:	0c14      	lsrs	r4, r2, #16
 8000592:	0c00      	lsrs	r0, r0, #16
 8000594:	4345      	muls	r5, r0
 8000596:	434b      	muls	r3, r1
 8000598:	4360      	muls	r0, r4
 800059a:	4361      	muls	r1, r4
 800059c:	18c0      	adds	r0, r0, r3
 800059e:	0c2c      	lsrs	r4, r5, #16
 80005a0:	1820      	adds	r0, r4, r0
 80005a2:	468c      	mov	ip, r1
 80005a4:	4283      	cmp	r3, r0
 80005a6:	d903      	bls.n	80005b0 <__aeabi_lmul+0x3c>
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	025b      	lsls	r3, r3, #9
 80005ac:	4698      	mov	r8, r3
 80005ae:	44c4      	add	ip, r8
 80005b0:	4649      	mov	r1, r9
 80005b2:	4379      	muls	r1, r7
 80005b4:	4372      	muls	r2, r6
 80005b6:	0c03      	lsrs	r3, r0, #16
 80005b8:	4463      	add	r3, ip
 80005ba:	042d      	lsls	r5, r5, #16
 80005bc:	0c2d      	lsrs	r5, r5, #16
 80005be:	18c9      	adds	r1, r1, r3
 80005c0:	0400      	lsls	r0, r0, #16
 80005c2:	1940      	adds	r0, r0, r5
 80005c4:	1889      	adds	r1, r1, r2
 80005c6:	bcc0      	pop	{r6, r7}
 80005c8:	46b9      	mov	r9, r7
 80005ca:	46b0      	mov	r8, r6
 80005cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005ce:	46c0      	nop			; (mov r8, r8)

080005d0 <__aeabi_f2uiz>:
 80005d0:	219e      	movs	r1, #158	; 0x9e
 80005d2:	b510      	push	{r4, lr}
 80005d4:	05c9      	lsls	r1, r1, #23
 80005d6:	1c04      	adds	r4, r0, #0
 80005d8:	f7ff ffa2 	bl	8000520 <__aeabi_fcmpge>
 80005dc:	2800      	cmp	r0, #0
 80005de:	d103      	bne.n	80005e8 <__aeabi_f2uiz+0x18>
 80005e0:	1c20      	adds	r0, r4, #0
 80005e2:	f000 ff13 	bl	800140c <__aeabi_f2iz>
 80005e6:	bd10      	pop	{r4, pc}
 80005e8:	219e      	movs	r1, #158	; 0x9e
 80005ea:	1c20      	adds	r0, r4, #0
 80005ec:	05c9      	lsls	r1, r1, #23
 80005ee:	f000 fd5f 	bl	80010b0 <__aeabi_fsub>
 80005f2:	f000 ff0b 	bl	800140c <__aeabi_f2iz>
 80005f6:	2380      	movs	r3, #128	; 0x80
 80005f8:	061b      	lsls	r3, r3, #24
 80005fa:	469c      	mov	ip, r3
 80005fc:	4460      	add	r0, ip
 80005fe:	e7f2      	b.n	80005e6 <__aeabi_f2uiz+0x16>

08000600 <__udivmoddi4>:
 8000600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000602:	4657      	mov	r7, sl
 8000604:	464e      	mov	r6, r9
 8000606:	4645      	mov	r5, r8
 8000608:	46de      	mov	lr, fp
 800060a:	b5e0      	push	{r5, r6, r7, lr}
 800060c:	0004      	movs	r4, r0
 800060e:	000d      	movs	r5, r1
 8000610:	4692      	mov	sl, r2
 8000612:	4699      	mov	r9, r3
 8000614:	b083      	sub	sp, #12
 8000616:	428b      	cmp	r3, r1
 8000618:	d830      	bhi.n	800067c <__udivmoddi4+0x7c>
 800061a:	d02d      	beq.n	8000678 <__udivmoddi4+0x78>
 800061c:	4649      	mov	r1, r9
 800061e:	4650      	mov	r0, sl
 8000620:	f002 fe78 	bl	8003314 <__clzdi2>
 8000624:	0029      	movs	r1, r5
 8000626:	0006      	movs	r6, r0
 8000628:	0020      	movs	r0, r4
 800062a:	f002 fe73 	bl	8003314 <__clzdi2>
 800062e:	1a33      	subs	r3, r6, r0
 8000630:	4698      	mov	r8, r3
 8000632:	3b20      	subs	r3, #32
 8000634:	469b      	mov	fp, r3
 8000636:	d433      	bmi.n	80006a0 <__udivmoddi4+0xa0>
 8000638:	465a      	mov	r2, fp
 800063a:	4653      	mov	r3, sl
 800063c:	4093      	lsls	r3, r2
 800063e:	4642      	mov	r2, r8
 8000640:	001f      	movs	r7, r3
 8000642:	4653      	mov	r3, sl
 8000644:	4093      	lsls	r3, r2
 8000646:	001e      	movs	r6, r3
 8000648:	42af      	cmp	r7, r5
 800064a:	d83a      	bhi.n	80006c2 <__udivmoddi4+0xc2>
 800064c:	42af      	cmp	r7, r5
 800064e:	d100      	bne.n	8000652 <__udivmoddi4+0x52>
 8000650:	e078      	b.n	8000744 <__udivmoddi4+0x144>
 8000652:	465b      	mov	r3, fp
 8000654:	1ba4      	subs	r4, r4, r6
 8000656:	41bd      	sbcs	r5, r7
 8000658:	2b00      	cmp	r3, #0
 800065a:	da00      	bge.n	800065e <__udivmoddi4+0x5e>
 800065c:	e075      	b.n	800074a <__udivmoddi4+0x14a>
 800065e:	2200      	movs	r2, #0
 8000660:	2300      	movs	r3, #0
 8000662:	9200      	str	r2, [sp, #0]
 8000664:	9301      	str	r3, [sp, #4]
 8000666:	2301      	movs	r3, #1
 8000668:	465a      	mov	r2, fp
 800066a:	4093      	lsls	r3, r2
 800066c:	9301      	str	r3, [sp, #4]
 800066e:	2301      	movs	r3, #1
 8000670:	4642      	mov	r2, r8
 8000672:	4093      	lsls	r3, r2
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	e028      	b.n	80006ca <__udivmoddi4+0xca>
 8000678:	4282      	cmp	r2, r0
 800067a:	d9cf      	bls.n	800061c <__udivmoddi4+0x1c>
 800067c:	2200      	movs	r2, #0
 800067e:	2300      	movs	r3, #0
 8000680:	9200      	str	r2, [sp, #0]
 8000682:	9301      	str	r3, [sp, #4]
 8000684:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <__udivmoddi4+0x8e>
 800068a:	601c      	str	r4, [r3, #0]
 800068c:	605d      	str	r5, [r3, #4]
 800068e:	9800      	ldr	r0, [sp, #0]
 8000690:	9901      	ldr	r1, [sp, #4]
 8000692:	b003      	add	sp, #12
 8000694:	bcf0      	pop	{r4, r5, r6, r7}
 8000696:	46bb      	mov	fp, r7
 8000698:	46b2      	mov	sl, r6
 800069a:	46a9      	mov	r9, r5
 800069c:	46a0      	mov	r8, r4
 800069e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006a0:	4642      	mov	r2, r8
 80006a2:	2320      	movs	r3, #32
 80006a4:	1a9b      	subs	r3, r3, r2
 80006a6:	4652      	mov	r2, sl
 80006a8:	40da      	lsrs	r2, r3
 80006aa:	4641      	mov	r1, r8
 80006ac:	0013      	movs	r3, r2
 80006ae:	464a      	mov	r2, r9
 80006b0:	408a      	lsls	r2, r1
 80006b2:	0017      	movs	r7, r2
 80006b4:	4642      	mov	r2, r8
 80006b6:	431f      	orrs	r7, r3
 80006b8:	4653      	mov	r3, sl
 80006ba:	4093      	lsls	r3, r2
 80006bc:	001e      	movs	r6, r3
 80006be:	42af      	cmp	r7, r5
 80006c0:	d9c4      	bls.n	800064c <__udivmoddi4+0x4c>
 80006c2:	2200      	movs	r2, #0
 80006c4:	2300      	movs	r3, #0
 80006c6:	9200      	str	r2, [sp, #0]
 80006c8:	9301      	str	r3, [sp, #4]
 80006ca:	4643      	mov	r3, r8
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d0d9      	beq.n	8000684 <__udivmoddi4+0x84>
 80006d0:	07fb      	lsls	r3, r7, #31
 80006d2:	0872      	lsrs	r2, r6, #1
 80006d4:	431a      	orrs	r2, r3
 80006d6:	4646      	mov	r6, r8
 80006d8:	087b      	lsrs	r3, r7, #1
 80006da:	e00e      	b.n	80006fa <__udivmoddi4+0xfa>
 80006dc:	42ab      	cmp	r3, r5
 80006de:	d101      	bne.n	80006e4 <__udivmoddi4+0xe4>
 80006e0:	42a2      	cmp	r2, r4
 80006e2:	d80c      	bhi.n	80006fe <__udivmoddi4+0xfe>
 80006e4:	1aa4      	subs	r4, r4, r2
 80006e6:	419d      	sbcs	r5, r3
 80006e8:	2001      	movs	r0, #1
 80006ea:	1924      	adds	r4, r4, r4
 80006ec:	416d      	adcs	r5, r5
 80006ee:	2100      	movs	r1, #0
 80006f0:	3e01      	subs	r6, #1
 80006f2:	1824      	adds	r4, r4, r0
 80006f4:	414d      	adcs	r5, r1
 80006f6:	2e00      	cmp	r6, #0
 80006f8:	d006      	beq.n	8000708 <__udivmoddi4+0x108>
 80006fa:	42ab      	cmp	r3, r5
 80006fc:	d9ee      	bls.n	80006dc <__udivmoddi4+0xdc>
 80006fe:	3e01      	subs	r6, #1
 8000700:	1924      	adds	r4, r4, r4
 8000702:	416d      	adcs	r5, r5
 8000704:	2e00      	cmp	r6, #0
 8000706:	d1f8      	bne.n	80006fa <__udivmoddi4+0xfa>
 8000708:	9800      	ldr	r0, [sp, #0]
 800070a:	9901      	ldr	r1, [sp, #4]
 800070c:	465b      	mov	r3, fp
 800070e:	1900      	adds	r0, r0, r4
 8000710:	4169      	adcs	r1, r5
 8000712:	2b00      	cmp	r3, #0
 8000714:	db24      	blt.n	8000760 <__udivmoddi4+0x160>
 8000716:	002b      	movs	r3, r5
 8000718:	465a      	mov	r2, fp
 800071a:	4644      	mov	r4, r8
 800071c:	40d3      	lsrs	r3, r2
 800071e:	002a      	movs	r2, r5
 8000720:	40e2      	lsrs	r2, r4
 8000722:	001c      	movs	r4, r3
 8000724:	465b      	mov	r3, fp
 8000726:	0015      	movs	r5, r2
 8000728:	2b00      	cmp	r3, #0
 800072a:	db2a      	blt.n	8000782 <__udivmoddi4+0x182>
 800072c:	0026      	movs	r6, r4
 800072e:	409e      	lsls	r6, r3
 8000730:	0033      	movs	r3, r6
 8000732:	0026      	movs	r6, r4
 8000734:	4647      	mov	r7, r8
 8000736:	40be      	lsls	r6, r7
 8000738:	0032      	movs	r2, r6
 800073a:	1a80      	subs	r0, r0, r2
 800073c:	4199      	sbcs	r1, r3
 800073e:	9000      	str	r0, [sp, #0]
 8000740:	9101      	str	r1, [sp, #4]
 8000742:	e79f      	b.n	8000684 <__udivmoddi4+0x84>
 8000744:	42a3      	cmp	r3, r4
 8000746:	d8bc      	bhi.n	80006c2 <__udivmoddi4+0xc2>
 8000748:	e783      	b.n	8000652 <__udivmoddi4+0x52>
 800074a:	4642      	mov	r2, r8
 800074c:	2320      	movs	r3, #32
 800074e:	2100      	movs	r1, #0
 8000750:	1a9b      	subs	r3, r3, r2
 8000752:	2200      	movs	r2, #0
 8000754:	9100      	str	r1, [sp, #0]
 8000756:	9201      	str	r2, [sp, #4]
 8000758:	2201      	movs	r2, #1
 800075a:	40da      	lsrs	r2, r3
 800075c:	9201      	str	r2, [sp, #4]
 800075e:	e786      	b.n	800066e <__udivmoddi4+0x6e>
 8000760:	4642      	mov	r2, r8
 8000762:	2320      	movs	r3, #32
 8000764:	1a9b      	subs	r3, r3, r2
 8000766:	002a      	movs	r2, r5
 8000768:	4646      	mov	r6, r8
 800076a:	409a      	lsls	r2, r3
 800076c:	0023      	movs	r3, r4
 800076e:	40f3      	lsrs	r3, r6
 8000770:	4644      	mov	r4, r8
 8000772:	4313      	orrs	r3, r2
 8000774:	002a      	movs	r2, r5
 8000776:	40e2      	lsrs	r2, r4
 8000778:	001c      	movs	r4, r3
 800077a:	465b      	mov	r3, fp
 800077c:	0015      	movs	r5, r2
 800077e:	2b00      	cmp	r3, #0
 8000780:	dad4      	bge.n	800072c <__udivmoddi4+0x12c>
 8000782:	4642      	mov	r2, r8
 8000784:	002f      	movs	r7, r5
 8000786:	2320      	movs	r3, #32
 8000788:	0026      	movs	r6, r4
 800078a:	4097      	lsls	r7, r2
 800078c:	1a9b      	subs	r3, r3, r2
 800078e:	40de      	lsrs	r6, r3
 8000790:	003b      	movs	r3, r7
 8000792:	4333      	orrs	r3, r6
 8000794:	e7cd      	b.n	8000732 <__udivmoddi4+0x132>
 8000796:	46c0      	nop			; (mov r8, r8)

08000798 <__aeabi_fadd>:
 8000798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800079a:	46c6      	mov	lr, r8
 800079c:	0243      	lsls	r3, r0, #9
 800079e:	0a5b      	lsrs	r3, r3, #9
 80007a0:	024e      	lsls	r6, r1, #9
 80007a2:	0045      	lsls	r5, r0, #1
 80007a4:	004f      	lsls	r7, r1, #1
 80007a6:	00da      	lsls	r2, r3, #3
 80007a8:	0fc4      	lsrs	r4, r0, #31
 80007aa:	469c      	mov	ip, r3
 80007ac:	0a70      	lsrs	r0, r6, #9
 80007ae:	4690      	mov	r8, r2
 80007b0:	b500      	push	{lr}
 80007b2:	0e2d      	lsrs	r5, r5, #24
 80007b4:	0e3f      	lsrs	r7, r7, #24
 80007b6:	0fc9      	lsrs	r1, r1, #31
 80007b8:	09b6      	lsrs	r6, r6, #6
 80007ba:	428c      	cmp	r4, r1
 80007bc:	d04b      	beq.n	8000856 <__aeabi_fadd+0xbe>
 80007be:	1bea      	subs	r2, r5, r7
 80007c0:	2a00      	cmp	r2, #0
 80007c2:	dd36      	ble.n	8000832 <__aeabi_fadd+0x9a>
 80007c4:	2f00      	cmp	r7, #0
 80007c6:	d061      	beq.n	800088c <__aeabi_fadd+0xf4>
 80007c8:	2dff      	cmp	r5, #255	; 0xff
 80007ca:	d100      	bne.n	80007ce <__aeabi_fadd+0x36>
 80007cc:	e0ad      	b.n	800092a <__aeabi_fadd+0x192>
 80007ce:	2380      	movs	r3, #128	; 0x80
 80007d0:	04db      	lsls	r3, r3, #19
 80007d2:	431e      	orrs	r6, r3
 80007d4:	2a1b      	cmp	r2, #27
 80007d6:	dc00      	bgt.n	80007da <__aeabi_fadd+0x42>
 80007d8:	e0d3      	b.n	8000982 <__aeabi_fadd+0x1ea>
 80007da:	2001      	movs	r0, #1
 80007dc:	4643      	mov	r3, r8
 80007de:	1a18      	subs	r0, r3, r0
 80007e0:	0143      	lsls	r3, r0, #5
 80007e2:	d400      	bmi.n	80007e6 <__aeabi_fadd+0x4e>
 80007e4:	e08c      	b.n	8000900 <__aeabi_fadd+0x168>
 80007e6:	0180      	lsls	r0, r0, #6
 80007e8:	0987      	lsrs	r7, r0, #6
 80007ea:	0038      	movs	r0, r7
 80007ec:	f002 fd74 	bl	80032d8 <__clzsi2>
 80007f0:	3805      	subs	r0, #5
 80007f2:	4087      	lsls	r7, r0
 80007f4:	4285      	cmp	r5, r0
 80007f6:	dc00      	bgt.n	80007fa <__aeabi_fadd+0x62>
 80007f8:	e0b6      	b.n	8000968 <__aeabi_fadd+0x1d0>
 80007fa:	1a2d      	subs	r5, r5, r0
 80007fc:	48b3      	ldr	r0, [pc, #716]	; (8000acc <__aeabi_fadd+0x334>)
 80007fe:	4038      	ands	r0, r7
 8000800:	0743      	lsls	r3, r0, #29
 8000802:	d004      	beq.n	800080e <__aeabi_fadd+0x76>
 8000804:	230f      	movs	r3, #15
 8000806:	4003      	ands	r3, r0
 8000808:	2b04      	cmp	r3, #4
 800080a:	d000      	beq.n	800080e <__aeabi_fadd+0x76>
 800080c:	3004      	adds	r0, #4
 800080e:	0143      	lsls	r3, r0, #5
 8000810:	d400      	bmi.n	8000814 <__aeabi_fadd+0x7c>
 8000812:	e078      	b.n	8000906 <__aeabi_fadd+0x16e>
 8000814:	1c6a      	adds	r2, r5, #1
 8000816:	2dfe      	cmp	r5, #254	; 0xfe
 8000818:	d065      	beq.n	80008e6 <__aeabi_fadd+0x14e>
 800081a:	0180      	lsls	r0, r0, #6
 800081c:	0a43      	lsrs	r3, r0, #9
 800081e:	469c      	mov	ip, r3
 8000820:	b2d2      	uxtb	r2, r2
 8000822:	4663      	mov	r3, ip
 8000824:	05d0      	lsls	r0, r2, #23
 8000826:	4318      	orrs	r0, r3
 8000828:	07e4      	lsls	r4, r4, #31
 800082a:	4320      	orrs	r0, r4
 800082c:	bc80      	pop	{r7}
 800082e:	46b8      	mov	r8, r7
 8000830:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000832:	2a00      	cmp	r2, #0
 8000834:	d035      	beq.n	80008a2 <__aeabi_fadd+0x10a>
 8000836:	1b7a      	subs	r2, r7, r5
 8000838:	2d00      	cmp	r5, #0
 800083a:	d000      	beq.n	800083e <__aeabi_fadd+0xa6>
 800083c:	e0af      	b.n	800099e <__aeabi_fadd+0x206>
 800083e:	4643      	mov	r3, r8
 8000840:	2b00      	cmp	r3, #0
 8000842:	d100      	bne.n	8000846 <__aeabi_fadd+0xae>
 8000844:	e0a7      	b.n	8000996 <__aeabi_fadd+0x1fe>
 8000846:	1e53      	subs	r3, r2, #1
 8000848:	2a01      	cmp	r2, #1
 800084a:	d100      	bne.n	800084e <__aeabi_fadd+0xb6>
 800084c:	e12f      	b.n	8000aae <__aeabi_fadd+0x316>
 800084e:	2aff      	cmp	r2, #255	; 0xff
 8000850:	d069      	beq.n	8000926 <__aeabi_fadd+0x18e>
 8000852:	001a      	movs	r2, r3
 8000854:	e0aa      	b.n	80009ac <__aeabi_fadd+0x214>
 8000856:	1be9      	subs	r1, r5, r7
 8000858:	2900      	cmp	r1, #0
 800085a:	dd70      	ble.n	800093e <__aeabi_fadd+0x1a6>
 800085c:	2f00      	cmp	r7, #0
 800085e:	d037      	beq.n	80008d0 <__aeabi_fadd+0x138>
 8000860:	2dff      	cmp	r5, #255	; 0xff
 8000862:	d062      	beq.n	800092a <__aeabi_fadd+0x192>
 8000864:	2380      	movs	r3, #128	; 0x80
 8000866:	04db      	lsls	r3, r3, #19
 8000868:	431e      	orrs	r6, r3
 800086a:	291b      	cmp	r1, #27
 800086c:	dc00      	bgt.n	8000870 <__aeabi_fadd+0xd8>
 800086e:	e0b0      	b.n	80009d2 <__aeabi_fadd+0x23a>
 8000870:	2001      	movs	r0, #1
 8000872:	4440      	add	r0, r8
 8000874:	0143      	lsls	r3, r0, #5
 8000876:	d543      	bpl.n	8000900 <__aeabi_fadd+0x168>
 8000878:	3501      	adds	r5, #1
 800087a:	2dff      	cmp	r5, #255	; 0xff
 800087c:	d033      	beq.n	80008e6 <__aeabi_fadd+0x14e>
 800087e:	2301      	movs	r3, #1
 8000880:	4a93      	ldr	r2, [pc, #588]	; (8000ad0 <__aeabi_fadd+0x338>)
 8000882:	4003      	ands	r3, r0
 8000884:	0840      	lsrs	r0, r0, #1
 8000886:	4010      	ands	r0, r2
 8000888:	4318      	orrs	r0, r3
 800088a:	e7b9      	b.n	8000800 <__aeabi_fadd+0x68>
 800088c:	2e00      	cmp	r6, #0
 800088e:	d100      	bne.n	8000892 <__aeabi_fadd+0xfa>
 8000890:	e083      	b.n	800099a <__aeabi_fadd+0x202>
 8000892:	1e51      	subs	r1, r2, #1
 8000894:	2a01      	cmp	r2, #1
 8000896:	d100      	bne.n	800089a <__aeabi_fadd+0x102>
 8000898:	e0d8      	b.n	8000a4c <__aeabi_fadd+0x2b4>
 800089a:	2aff      	cmp	r2, #255	; 0xff
 800089c:	d045      	beq.n	800092a <__aeabi_fadd+0x192>
 800089e:	000a      	movs	r2, r1
 80008a0:	e798      	b.n	80007d4 <__aeabi_fadd+0x3c>
 80008a2:	27fe      	movs	r7, #254	; 0xfe
 80008a4:	1c6a      	adds	r2, r5, #1
 80008a6:	4217      	tst	r7, r2
 80008a8:	d000      	beq.n	80008ac <__aeabi_fadd+0x114>
 80008aa:	e086      	b.n	80009ba <__aeabi_fadd+0x222>
 80008ac:	2d00      	cmp	r5, #0
 80008ae:	d000      	beq.n	80008b2 <__aeabi_fadd+0x11a>
 80008b0:	e0b7      	b.n	8000a22 <__aeabi_fadd+0x28a>
 80008b2:	4643      	mov	r3, r8
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d100      	bne.n	80008ba <__aeabi_fadd+0x122>
 80008b8:	e0f3      	b.n	8000aa2 <__aeabi_fadd+0x30a>
 80008ba:	2200      	movs	r2, #0
 80008bc:	2e00      	cmp	r6, #0
 80008be:	d0b0      	beq.n	8000822 <__aeabi_fadd+0x8a>
 80008c0:	1b98      	subs	r0, r3, r6
 80008c2:	0143      	lsls	r3, r0, #5
 80008c4:	d400      	bmi.n	80008c8 <__aeabi_fadd+0x130>
 80008c6:	e0fa      	b.n	8000abe <__aeabi_fadd+0x326>
 80008c8:	4643      	mov	r3, r8
 80008ca:	000c      	movs	r4, r1
 80008cc:	1af0      	subs	r0, r6, r3
 80008ce:	e797      	b.n	8000800 <__aeabi_fadd+0x68>
 80008d0:	2e00      	cmp	r6, #0
 80008d2:	d100      	bne.n	80008d6 <__aeabi_fadd+0x13e>
 80008d4:	e0c8      	b.n	8000a68 <__aeabi_fadd+0x2d0>
 80008d6:	1e4a      	subs	r2, r1, #1
 80008d8:	2901      	cmp	r1, #1
 80008da:	d100      	bne.n	80008de <__aeabi_fadd+0x146>
 80008dc:	e0ae      	b.n	8000a3c <__aeabi_fadd+0x2a4>
 80008de:	29ff      	cmp	r1, #255	; 0xff
 80008e0:	d023      	beq.n	800092a <__aeabi_fadd+0x192>
 80008e2:	0011      	movs	r1, r2
 80008e4:	e7c1      	b.n	800086a <__aeabi_fadd+0xd2>
 80008e6:	2300      	movs	r3, #0
 80008e8:	22ff      	movs	r2, #255	; 0xff
 80008ea:	469c      	mov	ip, r3
 80008ec:	e799      	b.n	8000822 <__aeabi_fadd+0x8a>
 80008ee:	21fe      	movs	r1, #254	; 0xfe
 80008f0:	1c6a      	adds	r2, r5, #1
 80008f2:	4211      	tst	r1, r2
 80008f4:	d077      	beq.n	80009e6 <__aeabi_fadd+0x24e>
 80008f6:	2aff      	cmp	r2, #255	; 0xff
 80008f8:	d0f5      	beq.n	80008e6 <__aeabi_fadd+0x14e>
 80008fa:	0015      	movs	r5, r2
 80008fc:	4446      	add	r6, r8
 80008fe:	0870      	lsrs	r0, r6, #1
 8000900:	0743      	lsls	r3, r0, #29
 8000902:	d000      	beq.n	8000906 <__aeabi_fadd+0x16e>
 8000904:	e77e      	b.n	8000804 <__aeabi_fadd+0x6c>
 8000906:	08c3      	lsrs	r3, r0, #3
 8000908:	2dff      	cmp	r5, #255	; 0xff
 800090a:	d00e      	beq.n	800092a <__aeabi_fadd+0x192>
 800090c:	025b      	lsls	r3, r3, #9
 800090e:	0a5b      	lsrs	r3, r3, #9
 8000910:	469c      	mov	ip, r3
 8000912:	b2ea      	uxtb	r2, r5
 8000914:	e785      	b.n	8000822 <__aeabi_fadd+0x8a>
 8000916:	2e00      	cmp	r6, #0
 8000918:	d007      	beq.n	800092a <__aeabi_fadd+0x192>
 800091a:	2280      	movs	r2, #128	; 0x80
 800091c:	03d2      	lsls	r2, r2, #15
 800091e:	4213      	tst	r3, r2
 8000920:	d003      	beq.n	800092a <__aeabi_fadd+0x192>
 8000922:	4210      	tst	r0, r2
 8000924:	d101      	bne.n	800092a <__aeabi_fadd+0x192>
 8000926:	000c      	movs	r4, r1
 8000928:	0003      	movs	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d0db      	beq.n	80008e6 <__aeabi_fadd+0x14e>
 800092e:	2080      	movs	r0, #128	; 0x80
 8000930:	03c0      	lsls	r0, r0, #15
 8000932:	4318      	orrs	r0, r3
 8000934:	0240      	lsls	r0, r0, #9
 8000936:	0a43      	lsrs	r3, r0, #9
 8000938:	469c      	mov	ip, r3
 800093a:	22ff      	movs	r2, #255	; 0xff
 800093c:	e771      	b.n	8000822 <__aeabi_fadd+0x8a>
 800093e:	2900      	cmp	r1, #0
 8000940:	d0d5      	beq.n	80008ee <__aeabi_fadd+0x156>
 8000942:	1b7a      	subs	r2, r7, r5
 8000944:	2d00      	cmp	r5, #0
 8000946:	d160      	bne.n	8000a0a <__aeabi_fadd+0x272>
 8000948:	4643      	mov	r3, r8
 800094a:	2b00      	cmp	r3, #0
 800094c:	d024      	beq.n	8000998 <__aeabi_fadd+0x200>
 800094e:	1e53      	subs	r3, r2, #1
 8000950:	2a01      	cmp	r2, #1
 8000952:	d073      	beq.n	8000a3c <__aeabi_fadd+0x2a4>
 8000954:	2aff      	cmp	r2, #255	; 0xff
 8000956:	d0e7      	beq.n	8000928 <__aeabi_fadd+0x190>
 8000958:	001a      	movs	r2, r3
 800095a:	2a1b      	cmp	r2, #27
 800095c:	dc00      	bgt.n	8000960 <__aeabi_fadd+0x1c8>
 800095e:	e085      	b.n	8000a6c <__aeabi_fadd+0x2d4>
 8000960:	2001      	movs	r0, #1
 8000962:	003d      	movs	r5, r7
 8000964:	1980      	adds	r0, r0, r6
 8000966:	e785      	b.n	8000874 <__aeabi_fadd+0xdc>
 8000968:	2320      	movs	r3, #32
 800096a:	003a      	movs	r2, r7
 800096c:	1b45      	subs	r5, r0, r5
 800096e:	0038      	movs	r0, r7
 8000970:	3501      	adds	r5, #1
 8000972:	40ea      	lsrs	r2, r5
 8000974:	1b5d      	subs	r5, r3, r5
 8000976:	40a8      	lsls	r0, r5
 8000978:	1e43      	subs	r3, r0, #1
 800097a:	4198      	sbcs	r0, r3
 800097c:	2500      	movs	r5, #0
 800097e:	4310      	orrs	r0, r2
 8000980:	e73e      	b.n	8000800 <__aeabi_fadd+0x68>
 8000982:	2320      	movs	r3, #32
 8000984:	0030      	movs	r0, r6
 8000986:	1a9b      	subs	r3, r3, r2
 8000988:	0031      	movs	r1, r6
 800098a:	4098      	lsls	r0, r3
 800098c:	40d1      	lsrs	r1, r2
 800098e:	1e43      	subs	r3, r0, #1
 8000990:	4198      	sbcs	r0, r3
 8000992:	4308      	orrs	r0, r1
 8000994:	e722      	b.n	80007dc <__aeabi_fadd+0x44>
 8000996:	000c      	movs	r4, r1
 8000998:	0003      	movs	r3, r0
 800099a:	0015      	movs	r5, r2
 800099c:	e7b4      	b.n	8000908 <__aeabi_fadd+0x170>
 800099e:	2fff      	cmp	r7, #255	; 0xff
 80009a0:	d0c1      	beq.n	8000926 <__aeabi_fadd+0x18e>
 80009a2:	2380      	movs	r3, #128	; 0x80
 80009a4:	4640      	mov	r0, r8
 80009a6:	04db      	lsls	r3, r3, #19
 80009a8:	4318      	orrs	r0, r3
 80009aa:	4680      	mov	r8, r0
 80009ac:	2a1b      	cmp	r2, #27
 80009ae:	dd51      	ble.n	8000a54 <__aeabi_fadd+0x2bc>
 80009b0:	2001      	movs	r0, #1
 80009b2:	000c      	movs	r4, r1
 80009b4:	003d      	movs	r5, r7
 80009b6:	1a30      	subs	r0, r6, r0
 80009b8:	e712      	b.n	80007e0 <__aeabi_fadd+0x48>
 80009ba:	4643      	mov	r3, r8
 80009bc:	1b9f      	subs	r7, r3, r6
 80009be:	017b      	lsls	r3, r7, #5
 80009c0:	d42b      	bmi.n	8000a1a <__aeabi_fadd+0x282>
 80009c2:	2f00      	cmp	r7, #0
 80009c4:	d000      	beq.n	80009c8 <__aeabi_fadd+0x230>
 80009c6:	e710      	b.n	80007ea <__aeabi_fadd+0x52>
 80009c8:	2300      	movs	r3, #0
 80009ca:	2400      	movs	r4, #0
 80009cc:	2200      	movs	r2, #0
 80009ce:	469c      	mov	ip, r3
 80009d0:	e727      	b.n	8000822 <__aeabi_fadd+0x8a>
 80009d2:	2320      	movs	r3, #32
 80009d4:	0032      	movs	r2, r6
 80009d6:	0030      	movs	r0, r6
 80009d8:	40ca      	lsrs	r2, r1
 80009da:	1a59      	subs	r1, r3, r1
 80009dc:	4088      	lsls	r0, r1
 80009de:	1e43      	subs	r3, r0, #1
 80009e0:	4198      	sbcs	r0, r3
 80009e2:	4310      	orrs	r0, r2
 80009e4:	e745      	b.n	8000872 <__aeabi_fadd+0xda>
 80009e6:	2d00      	cmp	r5, #0
 80009e8:	d14a      	bne.n	8000a80 <__aeabi_fadd+0x2e8>
 80009ea:	4643      	mov	r3, r8
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d063      	beq.n	8000ab8 <__aeabi_fadd+0x320>
 80009f0:	2200      	movs	r2, #0
 80009f2:	2e00      	cmp	r6, #0
 80009f4:	d100      	bne.n	80009f8 <__aeabi_fadd+0x260>
 80009f6:	e714      	b.n	8000822 <__aeabi_fadd+0x8a>
 80009f8:	0030      	movs	r0, r6
 80009fa:	4440      	add	r0, r8
 80009fc:	0143      	lsls	r3, r0, #5
 80009fe:	d400      	bmi.n	8000a02 <__aeabi_fadd+0x26a>
 8000a00:	e77e      	b.n	8000900 <__aeabi_fadd+0x168>
 8000a02:	4b32      	ldr	r3, [pc, #200]	; (8000acc <__aeabi_fadd+0x334>)
 8000a04:	3501      	adds	r5, #1
 8000a06:	4018      	ands	r0, r3
 8000a08:	e77a      	b.n	8000900 <__aeabi_fadd+0x168>
 8000a0a:	2fff      	cmp	r7, #255	; 0xff
 8000a0c:	d08c      	beq.n	8000928 <__aeabi_fadd+0x190>
 8000a0e:	2380      	movs	r3, #128	; 0x80
 8000a10:	4641      	mov	r1, r8
 8000a12:	04db      	lsls	r3, r3, #19
 8000a14:	4319      	orrs	r1, r3
 8000a16:	4688      	mov	r8, r1
 8000a18:	e79f      	b.n	800095a <__aeabi_fadd+0x1c2>
 8000a1a:	4643      	mov	r3, r8
 8000a1c:	000c      	movs	r4, r1
 8000a1e:	1af7      	subs	r7, r6, r3
 8000a20:	e6e3      	b.n	80007ea <__aeabi_fadd+0x52>
 8000a22:	4642      	mov	r2, r8
 8000a24:	2a00      	cmp	r2, #0
 8000a26:	d000      	beq.n	8000a2a <__aeabi_fadd+0x292>
 8000a28:	e775      	b.n	8000916 <__aeabi_fadd+0x17e>
 8000a2a:	2e00      	cmp	r6, #0
 8000a2c:	d000      	beq.n	8000a30 <__aeabi_fadd+0x298>
 8000a2e:	e77a      	b.n	8000926 <__aeabi_fadd+0x18e>
 8000a30:	2380      	movs	r3, #128	; 0x80
 8000a32:	03db      	lsls	r3, r3, #15
 8000a34:	2400      	movs	r4, #0
 8000a36:	469c      	mov	ip, r3
 8000a38:	22ff      	movs	r2, #255	; 0xff
 8000a3a:	e6f2      	b.n	8000822 <__aeabi_fadd+0x8a>
 8000a3c:	0030      	movs	r0, r6
 8000a3e:	4440      	add	r0, r8
 8000a40:	2501      	movs	r5, #1
 8000a42:	0143      	lsls	r3, r0, #5
 8000a44:	d400      	bmi.n	8000a48 <__aeabi_fadd+0x2b0>
 8000a46:	e75b      	b.n	8000900 <__aeabi_fadd+0x168>
 8000a48:	2502      	movs	r5, #2
 8000a4a:	e718      	b.n	800087e <__aeabi_fadd+0xe6>
 8000a4c:	4643      	mov	r3, r8
 8000a4e:	2501      	movs	r5, #1
 8000a50:	1b98      	subs	r0, r3, r6
 8000a52:	e6c5      	b.n	80007e0 <__aeabi_fadd+0x48>
 8000a54:	2320      	movs	r3, #32
 8000a56:	4644      	mov	r4, r8
 8000a58:	4640      	mov	r0, r8
 8000a5a:	40d4      	lsrs	r4, r2
 8000a5c:	1a9a      	subs	r2, r3, r2
 8000a5e:	4090      	lsls	r0, r2
 8000a60:	1e43      	subs	r3, r0, #1
 8000a62:	4198      	sbcs	r0, r3
 8000a64:	4320      	orrs	r0, r4
 8000a66:	e7a4      	b.n	80009b2 <__aeabi_fadd+0x21a>
 8000a68:	000d      	movs	r5, r1
 8000a6a:	e74d      	b.n	8000908 <__aeabi_fadd+0x170>
 8000a6c:	2320      	movs	r3, #32
 8000a6e:	4641      	mov	r1, r8
 8000a70:	4640      	mov	r0, r8
 8000a72:	40d1      	lsrs	r1, r2
 8000a74:	1a9a      	subs	r2, r3, r2
 8000a76:	4090      	lsls	r0, r2
 8000a78:	1e43      	subs	r3, r0, #1
 8000a7a:	4198      	sbcs	r0, r3
 8000a7c:	4308      	orrs	r0, r1
 8000a7e:	e770      	b.n	8000962 <__aeabi_fadd+0x1ca>
 8000a80:	4642      	mov	r2, r8
 8000a82:	2a00      	cmp	r2, #0
 8000a84:	d100      	bne.n	8000a88 <__aeabi_fadd+0x2f0>
 8000a86:	e74f      	b.n	8000928 <__aeabi_fadd+0x190>
 8000a88:	2e00      	cmp	r6, #0
 8000a8a:	d100      	bne.n	8000a8e <__aeabi_fadd+0x2f6>
 8000a8c:	e74d      	b.n	800092a <__aeabi_fadd+0x192>
 8000a8e:	2280      	movs	r2, #128	; 0x80
 8000a90:	03d2      	lsls	r2, r2, #15
 8000a92:	4213      	tst	r3, r2
 8000a94:	d100      	bne.n	8000a98 <__aeabi_fadd+0x300>
 8000a96:	e748      	b.n	800092a <__aeabi_fadd+0x192>
 8000a98:	4210      	tst	r0, r2
 8000a9a:	d000      	beq.n	8000a9e <__aeabi_fadd+0x306>
 8000a9c:	e745      	b.n	800092a <__aeabi_fadd+0x192>
 8000a9e:	0003      	movs	r3, r0
 8000aa0:	e743      	b.n	800092a <__aeabi_fadd+0x192>
 8000aa2:	2e00      	cmp	r6, #0
 8000aa4:	d090      	beq.n	80009c8 <__aeabi_fadd+0x230>
 8000aa6:	000c      	movs	r4, r1
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	2200      	movs	r2, #0
 8000aac:	e6b9      	b.n	8000822 <__aeabi_fadd+0x8a>
 8000aae:	4643      	mov	r3, r8
 8000ab0:	000c      	movs	r4, r1
 8000ab2:	1af0      	subs	r0, r6, r3
 8000ab4:	3501      	adds	r5, #1
 8000ab6:	e693      	b.n	80007e0 <__aeabi_fadd+0x48>
 8000ab8:	4684      	mov	ip, r0
 8000aba:	2200      	movs	r2, #0
 8000abc:	e6b1      	b.n	8000822 <__aeabi_fadd+0x8a>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	d000      	beq.n	8000ac4 <__aeabi_fadd+0x32c>
 8000ac2:	e71d      	b.n	8000900 <__aeabi_fadd+0x168>
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	2400      	movs	r4, #0
 8000ac8:	469c      	mov	ip, r3
 8000aca:	e6aa      	b.n	8000822 <__aeabi_fadd+0x8a>
 8000acc:	fbffffff 	.word	0xfbffffff
 8000ad0:	7dffffff 	.word	0x7dffffff

08000ad4 <__aeabi_fdiv>:
 8000ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ad6:	464f      	mov	r7, r9
 8000ad8:	4646      	mov	r6, r8
 8000ada:	46d6      	mov	lr, sl
 8000adc:	0245      	lsls	r5, r0, #9
 8000ade:	b5c0      	push	{r6, r7, lr}
 8000ae0:	0047      	lsls	r7, r0, #1
 8000ae2:	1c0c      	adds	r4, r1, #0
 8000ae4:	0a6d      	lsrs	r5, r5, #9
 8000ae6:	0e3f      	lsrs	r7, r7, #24
 8000ae8:	0fc6      	lsrs	r6, r0, #31
 8000aea:	2f00      	cmp	r7, #0
 8000aec:	d100      	bne.n	8000af0 <__aeabi_fdiv+0x1c>
 8000aee:	e070      	b.n	8000bd2 <__aeabi_fdiv+0xfe>
 8000af0:	2fff      	cmp	r7, #255	; 0xff
 8000af2:	d100      	bne.n	8000af6 <__aeabi_fdiv+0x22>
 8000af4:	e075      	b.n	8000be2 <__aeabi_fdiv+0x10e>
 8000af6:	00eb      	lsls	r3, r5, #3
 8000af8:	2580      	movs	r5, #128	; 0x80
 8000afa:	04ed      	lsls	r5, r5, #19
 8000afc:	431d      	orrs	r5, r3
 8000afe:	2300      	movs	r3, #0
 8000b00:	4699      	mov	r9, r3
 8000b02:	469a      	mov	sl, r3
 8000b04:	3f7f      	subs	r7, #127	; 0x7f
 8000b06:	0260      	lsls	r0, r4, #9
 8000b08:	0a43      	lsrs	r3, r0, #9
 8000b0a:	4698      	mov	r8, r3
 8000b0c:	0063      	lsls	r3, r4, #1
 8000b0e:	0e1b      	lsrs	r3, r3, #24
 8000b10:	0fe4      	lsrs	r4, r4, #31
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d04e      	beq.n	8000bb4 <__aeabi_fdiv+0xe0>
 8000b16:	2bff      	cmp	r3, #255	; 0xff
 8000b18:	d046      	beq.n	8000ba8 <__aeabi_fdiv+0xd4>
 8000b1a:	4642      	mov	r2, r8
 8000b1c:	00d0      	lsls	r0, r2, #3
 8000b1e:	2280      	movs	r2, #128	; 0x80
 8000b20:	04d2      	lsls	r2, r2, #19
 8000b22:	4302      	orrs	r2, r0
 8000b24:	4690      	mov	r8, r2
 8000b26:	2200      	movs	r2, #0
 8000b28:	3b7f      	subs	r3, #127	; 0x7f
 8000b2a:	0031      	movs	r1, r6
 8000b2c:	1aff      	subs	r7, r7, r3
 8000b2e:	464b      	mov	r3, r9
 8000b30:	4061      	eors	r1, r4
 8000b32:	b2c9      	uxtb	r1, r1
 8000b34:	4313      	orrs	r3, r2
 8000b36:	2b0f      	cmp	r3, #15
 8000b38:	d900      	bls.n	8000b3c <__aeabi_fdiv+0x68>
 8000b3a:	e0b5      	b.n	8000ca8 <__aeabi_fdiv+0x1d4>
 8000b3c:	486e      	ldr	r0, [pc, #440]	; (8000cf8 <__aeabi_fdiv+0x224>)
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	58c3      	ldr	r3, [r0, r3]
 8000b42:	469f      	mov	pc, r3
 8000b44:	2300      	movs	r3, #0
 8000b46:	4698      	mov	r8, r3
 8000b48:	0026      	movs	r6, r4
 8000b4a:	4645      	mov	r5, r8
 8000b4c:	4692      	mov	sl, r2
 8000b4e:	4653      	mov	r3, sl
 8000b50:	2b02      	cmp	r3, #2
 8000b52:	d100      	bne.n	8000b56 <__aeabi_fdiv+0x82>
 8000b54:	e089      	b.n	8000c6a <__aeabi_fdiv+0x196>
 8000b56:	2b03      	cmp	r3, #3
 8000b58:	d100      	bne.n	8000b5c <__aeabi_fdiv+0x88>
 8000b5a:	e09e      	b.n	8000c9a <__aeabi_fdiv+0x1c6>
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d018      	beq.n	8000b92 <__aeabi_fdiv+0xbe>
 8000b60:	003b      	movs	r3, r7
 8000b62:	337f      	adds	r3, #127	; 0x7f
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	dd69      	ble.n	8000c3c <__aeabi_fdiv+0x168>
 8000b68:	076a      	lsls	r2, r5, #29
 8000b6a:	d004      	beq.n	8000b76 <__aeabi_fdiv+0xa2>
 8000b6c:	220f      	movs	r2, #15
 8000b6e:	402a      	ands	r2, r5
 8000b70:	2a04      	cmp	r2, #4
 8000b72:	d000      	beq.n	8000b76 <__aeabi_fdiv+0xa2>
 8000b74:	3504      	adds	r5, #4
 8000b76:	012a      	lsls	r2, r5, #4
 8000b78:	d503      	bpl.n	8000b82 <__aeabi_fdiv+0xae>
 8000b7a:	4b60      	ldr	r3, [pc, #384]	; (8000cfc <__aeabi_fdiv+0x228>)
 8000b7c:	401d      	ands	r5, r3
 8000b7e:	003b      	movs	r3, r7
 8000b80:	3380      	adds	r3, #128	; 0x80
 8000b82:	2bfe      	cmp	r3, #254	; 0xfe
 8000b84:	dd00      	ble.n	8000b88 <__aeabi_fdiv+0xb4>
 8000b86:	e070      	b.n	8000c6a <__aeabi_fdiv+0x196>
 8000b88:	01ad      	lsls	r5, r5, #6
 8000b8a:	0a6d      	lsrs	r5, r5, #9
 8000b8c:	b2d8      	uxtb	r0, r3
 8000b8e:	e002      	b.n	8000b96 <__aeabi_fdiv+0xc2>
 8000b90:	000e      	movs	r6, r1
 8000b92:	2000      	movs	r0, #0
 8000b94:	2500      	movs	r5, #0
 8000b96:	05c0      	lsls	r0, r0, #23
 8000b98:	4328      	orrs	r0, r5
 8000b9a:	07f6      	lsls	r6, r6, #31
 8000b9c:	4330      	orrs	r0, r6
 8000b9e:	bce0      	pop	{r5, r6, r7}
 8000ba0:	46ba      	mov	sl, r7
 8000ba2:	46b1      	mov	r9, r6
 8000ba4:	46a8      	mov	r8, r5
 8000ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ba8:	4643      	mov	r3, r8
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d13f      	bne.n	8000c2e <__aeabi_fdiv+0x15a>
 8000bae:	2202      	movs	r2, #2
 8000bb0:	3fff      	subs	r7, #255	; 0xff
 8000bb2:	e003      	b.n	8000bbc <__aeabi_fdiv+0xe8>
 8000bb4:	4643      	mov	r3, r8
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d12d      	bne.n	8000c16 <__aeabi_fdiv+0x142>
 8000bba:	2201      	movs	r2, #1
 8000bbc:	0031      	movs	r1, r6
 8000bbe:	464b      	mov	r3, r9
 8000bc0:	4061      	eors	r1, r4
 8000bc2:	b2c9      	uxtb	r1, r1
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	2b0f      	cmp	r3, #15
 8000bc8:	d834      	bhi.n	8000c34 <__aeabi_fdiv+0x160>
 8000bca:	484d      	ldr	r0, [pc, #308]	; (8000d00 <__aeabi_fdiv+0x22c>)
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	58c3      	ldr	r3, [r0, r3]
 8000bd0:	469f      	mov	pc, r3
 8000bd2:	2d00      	cmp	r5, #0
 8000bd4:	d113      	bne.n	8000bfe <__aeabi_fdiv+0x12a>
 8000bd6:	2304      	movs	r3, #4
 8000bd8:	4699      	mov	r9, r3
 8000bda:	3b03      	subs	r3, #3
 8000bdc:	2700      	movs	r7, #0
 8000bde:	469a      	mov	sl, r3
 8000be0:	e791      	b.n	8000b06 <__aeabi_fdiv+0x32>
 8000be2:	2d00      	cmp	r5, #0
 8000be4:	d105      	bne.n	8000bf2 <__aeabi_fdiv+0x11e>
 8000be6:	2308      	movs	r3, #8
 8000be8:	4699      	mov	r9, r3
 8000bea:	3b06      	subs	r3, #6
 8000bec:	27ff      	movs	r7, #255	; 0xff
 8000bee:	469a      	mov	sl, r3
 8000bf0:	e789      	b.n	8000b06 <__aeabi_fdiv+0x32>
 8000bf2:	230c      	movs	r3, #12
 8000bf4:	4699      	mov	r9, r3
 8000bf6:	3b09      	subs	r3, #9
 8000bf8:	27ff      	movs	r7, #255	; 0xff
 8000bfa:	469a      	mov	sl, r3
 8000bfc:	e783      	b.n	8000b06 <__aeabi_fdiv+0x32>
 8000bfe:	0028      	movs	r0, r5
 8000c00:	f002 fb6a 	bl	80032d8 <__clzsi2>
 8000c04:	2776      	movs	r7, #118	; 0x76
 8000c06:	1f43      	subs	r3, r0, #5
 8000c08:	409d      	lsls	r5, r3
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	427f      	negs	r7, r7
 8000c0e:	4699      	mov	r9, r3
 8000c10:	469a      	mov	sl, r3
 8000c12:	1a3f      	subs	r7, r7, r0
 8000c14:	e777      	b.n	8000b06 <__aeabi_fdiv+0x32>
 8000c16:	4640      	mov	r0, r8
 8000c18:	f002 fb5e 	bl	80032d8 <__clzsi2>
 8000c1c:	4642      	mov	r2, r8
 8000c1e:	1f43      	subs	r3, r0, #5
 8000c20:	409a      	lsls	r2, r3
 8000c22:	2376      	movs	r3, #118	; 0x76
 8000c24:	425b      	negs	r3, r3
 8000c26:	4690      	mov	r8, r2
 8000c28:	1a1b      	subs	r3, r3, r0
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	e77d      	b.n	8000b2a <__aeabi_fdiv+0x56>
 8000c2e:	23ff      	movs	r3, #255	; 0xff
 8000c30:	2203      	movs	r2, #3
 8000c32:	e77a      	b.n	8000b2a <__aeabi_fdiv+0x56>
 8000c34:	000e      	movs	r6, r1
 8000c36:	20ff      	movs	r0, #255	; 0xff
 8000c38:	2500      	movs	r5, #0
 8000c3a:	e7ac      	b.n	8000b96 <__aeabi_fdiv+0xc2>
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	1ac0      	subs	r0, r0, r3
 8000c40:	281b      	cmp	r0, #27
 8000c42:	dca6      	bgt.n	8000b92 <__aeabi_fdiv+0xbe>
 8000c44:	379e      	adds	r7, #158	; 0x9e
 8000c46:	002a      	movs	r2, r5
 8000c48:	40bd      	lsls	r5, r7
 8000c4a:	40c2      	lsrs	r2, r0
 8000c4c:	1e6b      	subs	r3, r5, #1
 8000c4e:	419d      	sbcs	r5, r3
 8000c50:	4315      	orrs	r5, r2
 8000c52:	076b      	lsls	r3, r5, #29
 8000c54:	d004      	beq.n	8000c60 <__aeabi_fdiv+0x18c>
 8000c56:	230f      	movs	r3, #15
 8000c58:	402b      	ands	r3, r5
 8000c5a:	2b04      	cmp	r3, #4
 8000c5c:	d000      	beq.n	8000c60 <__aeabi_fdiv+0x18c>
 8000c5e:	3504      	adds	r5, #4
 8000c60:	016b      	lsls	r3, r5, #5
 8000c62:	d544      	bpl.n	8000cee <__aeabi_fdiv+0x21a>
 8000c64:	2001      	movs	r0, #1
 8000c66:	2500      	movs	r5, #0
 8000c68:	e795      	b.n	8000b96 <__aeabi_fdiv+0xc2>
 8000c6a:	20ff      	movs	r0, #255	; 0xff
 8000c6c:	2500      	movs	r5, #0
 8000c6e:	e792      	b.n	8000b96 <__aeabi_fdiv+0xc2>
 8000c70:	2580      	movs	r5, #128	; 0x80
 8000c72:	2600      	movs	r6, #0
 8000c74:	20ff      	movs	r0, #255	; 0xff
 8000c76:	03ed      	lsls	r5, r5, #15
 8000c78:	e78d      	b.n	8000b96 <__aeabi_fdiv+0xc2>
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	4698      	mov	r8, r3
 8000c7e:	2080      	movs	r0, #128	; 0x80
 8000c80:	03c0      	lsls	r0, r0, #15
 8000c82:	4205      	tst	r5, r0
 8000c84:	d009      	beq.n	8000c9a <__aeabi_fdiv+0x1c6>
 8000c86:	4643      	mov	r3, r8
 8000c88:	4203      	tst	r3, r0
 8000c8a:	d106      	bne.n	8000c9a <__aeabi_fdiv+0x1c6>
 8000c8c:	4645      	mov	r5, r8
 8000c8e:	4305      	orrs	r5, r0
 8000c90:	026d      	lsls	r5, r5, #9
 8000c92:	0026      	movs	r6, r4
 8000c94:	20ff      	movs	r0, #255	; 0xff
 8000c96:	0a6d      	lsrs	r5, r5, #9
 8000c98:	e77d      	b.n	8000b96 <__aeabi_fdiv+0xc2>
 8000c9a:	2080      	movs	r0, #128	; 0x80
 8000c9c:	03c0      	lsls	r0, r0, #15
 8000c9e:	4305      	orrs	r5, r0
 8000ca0:	026d      	lsls	r5, r5, #9
 8000ca2:	20ff      	movs	r0, #255	; 0xff
 8000ca4:	0a6d      	lsrs	r5, r5, #9
 8000ca6:	e776      	b.n	8000b96 <__aeabi_fdiv+0xc2>
 8000ca8:	4642      	mov	r2, r8
 8000caa:	016b      	lsls	r3, r5, #5
 8000cac:	0150      	lsls	r0, r2, #5
 8000cae:	4283      	cmp	r3, r0
 8000cb0:	d219      	bcs.n	8000ce6 <__aeabi_fdiv+0x212>
 8000cb2:	221b      	movs	r2, #27
 8000cb4:	2500      	movs	r5, #0
 8000cb6:	3f01      	subs	r7, #1
 8000cb8:	2601      	movs	r6, #1
 8000cba:	001c      	movs	r4, r3
 8000cbc:	006d      	lsls	r5, r5, #1
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	2c00      	cmp	r4, #0
 8000cc2:	db01      	blt.n	8000cc8 <__aeabi_fdiv+0x1f4>
 8000cc4:	4298      	cmp	r0, r3
 8000cc6:	d801      	bhi.n	8000ccc <__aeabi_fdiv+0x1f8>
 8000cc8:	1a1b      	subs	r3, r3, r0
 8000cca:	4335      	orrs	r5, r6
 8000ccc:	3a01      	subs	r2, #1
 8000cce:	2a00      	cmp	r2, #0
 8000cd0:	d1f3      	bne.n	8000cba <__aeabi_fdiv+0x1e6>
 8000cd2:	1e5a      	subs	r2, r3, #1
 8000cd4:	4193      	sbcs	r3, r2
 8000cd6:	431d      	orrs	r5, r3
 8000cd8:	003b      	movs	r3, r7
 8000cda:	337f      	adds	r3, #127	; 0x7f
 8000cdc:	000e      	movs	r6, r1
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	dd00      	ble.n	8000ce4 <__aeabi_fdiv+0x210>
 8000ce2:	e741      	b.n	8000b68 <__aeabi_fdiv+0x94>
 8000ce4:	e7aa      	b.n	8000c3c <__aeabi_fdiv+0x168>
 8000ce6:	221a      	movs	r2, #26
 8000ce8:	2501      	movs	r5, #1
 8000cea:	1a1b      	subs	r3, r3, r0
 8000cec:	e7e4      	b.n	8000cb8 <__aeabi_fdiv+0x1e4>
 8000cee:	01ad      	lsls	r5, r5, #6
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	0a6d      	lsrs	r5, r5, #9
 8000cf4:	e74f      	b.n	8000b96 <__aeabi_fdiv+0xc2>
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	080092f8 	.word	0x080092f8
 8000cfc:	f7ffffff 	.word	0xf7ffffff
 8000d00:	08009338 	.word	0x08009338

08000d04 <__eqsf2>:
 8000d04:	b570      	push	{r4, r5, r6, lr}
 8000d06:	0042      	lsls	r2, r0, #1
 8000d08:	0245      	lsls	r5, r0, #9
 8000d0a:	024e      	lsls	r6, r1, #9
 8000d0c:	004c      	lsls	r4, r1, #1
 8000d0e:	0fc3      	lsrs	r3, r0, #31
 8000d10:	0a6d      	lsrs	r5, r5, #9
 8000d12:	2001      	movs	r0, #1
 8000d14:	0e12      	lsrs	r2, r2, #24
 8000d16:	0a76      	lsrs	r6, r6, #9
 8000d18:	0e24      	lsrs	r4, r4, #24
 8000d1a:	0fc9      	lsrs	r1, r1, #31
 8000d1c:	2aff      	cmp	r2, #255	; 0xff
 8000d1e:	d006      	beq.n	8000d2e <__eqsf2+0x2a>
 8000d20:	2cff      	cmp	r4, #255	; 0xff
 8000d22:	d003      	beq.n	8000d2c <__eqsf2+0x28>
 8000d24:	42a2      	cmp	r2, r4
 8000d26:	d101      	bne.n	8000d2c <__eqsf2+0x28>
 8000d28:	42b5      	cmp	r5, r6
 8000d2a:	d006      	beq.n	8000d3a <__eqsf2+0x36>
 8000d2c:	bd70      	pop	{r4, r5, r6, pc}
 8000d2e:	2d00      	cmp	r5, #0
 8000d30:	d1fc      	bne.n	8000d2c <__eqsf2+0x28>
 8000d32:	2cff      	cmp	r4, #255	; 0xff
 8000d34:	d1fa      	bne.n	8000d2c <__eqsf2+0x28>
 8000d36:	2e00      	cmp	r6, #0
 8000d38:	d1f8      	bne.n	8000d2c <__eqsf2+0x28>
 8000d3a:	428b      	cmp	r3, r1
 8000d3c:	d006      	beq.n	8000d4c <__eqsf2+0x48>
 8000d3e:	2001      	movs	r0, #1
 8000d40:	2a00      	cmp	r2, #0
 8000d42:	d1f3      	bne.n	8000d2c <__eqsf2+0x28>
 8000d44:	0028      	movs	r0, r5
 8000d46:	1e43      	subs	r3, r0, #1
 8000d48:	4198      	sbcs	r0, r3
 8000d4a:	e7ef      	b.n	8000d2c <__eqsf2+0x28>
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	e7ed      	b.n	8000d2c <__eqsf2+0x28>

08000d50 <__gesf2>:
 8000d50:	b570      	push	{r4, r5, r6, lr}
 8000d52:	0042      	lsls	r2, r0, #1
 8000d54:	0245      	lsls	r5, r0, #9
 8000d56:	024e      	lsls	r6, r1, #9
 8000d58:	004c      	lsls	r4, r1, #1
 8000d5a:	0fc3      	lsrs	r3, r0, #31
 8000d5c:	0a6d      	lsrs	r5, r5, #9
 8000d5e:	0e12      	lsrs	r2, r2, #24
 8000d60:	0a76      	lsrs	r6, r6, #9
 8000d62:	0e24      	lsrs	r4, r4, #24
 8000d64:	0fc8      	lsrs	r0, r1, #31
 8000d66:	2aff      	cmp	r2, #255	; 0xff
 8000d68:	d01b      	beq.n	8000da2 <__gesf2+0x52>
 8000d6a:	2cff      	cmp	r4, #255	; 0xff
 8000d6c:	d00e      	beq.n	8000d8c <__gesf2+0x3c>
 8000d6e:	2a00      	cmp	r2, #0
 8000d70:	d11b      	bne.n	8000daa <__gesf2+0x5a>
 8000d72:	2c00      	cmp	r4, #0
 8000d74:	d101      	bne.n	8000d7a <__gesf2+0x2a>
 8000d76:	2e00      	cmp	r6, #0
 8000d78:	d01c      	beq.n	8000db4 <__gesf2+0x64>
 8000d7a:	2d00      	cmp	r5, #0
 8000d7c:	d00c      	beq.n	8000d98 <__gesf2+0x48>
 8000d7e:	4283      	cmp	r3, r0
 8000d80:	d01c      	beq.n	8000dbc <__gesf2+0x6c>
 8000d82:	2102      	movs	r1, #2
 8000d84:	1e58      	subs	r0, r3, #1
 8000d86:	4008      	ands	r0, r1
 8000d88:	3801      	subs	r0, #1
 8000d8a:	bd70      	pop	{r4, r5, r6, pc}
 8000d8c:	2e00      	cmp	r6, #0
 8000d8e:	d122      	bne.n	8000dd6 <__gesf2+0x86>
 8000d90:	2a00      	cmp	r2, #0
 8000d92:	d1f4      	bne.n	8000d7e <__gesf2+0x2e>
 8000d94:	2d00      	cmp	r5, #0
 8000d96:	d1f2      	bne.n	8000d7e <__gesf2+0x2e>
 8000d98:	2800      	cmp	r0, #0
 8000d9a:	d1f6      	bne.n	8000d8a <__gesf2+0x3a>
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	4240      	negs	r0, r0
 8000da0:	e7f3      	b.n	8000d8a <__gesf2+0x3a>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	d117      	bne.n	8000dd6 <__gesf2+0x86>
 8000da6:	2cff      	cmp	r4, #255	; 0xff
 8000da8:	d0f0      	beq.n	8000d8c <__gesf2+0x3c>
 8000daa:	2c00      	cmp	r4, #0
 8000dac:	d1e7      	bne.n	8000d7e <__gesf2+0x2e>
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	d1e5      	bne.n	8000d7e <__gesf2+0x2e>
 8000db2:	e7e6      	b.n	8000d82 <__gesf2+0x32>
 8000db4:	2000      	movs	r0, #0
 8000db6:	2d00      	cmp	r5, #0
 8000db8:	d0e7      	beq.n	8000d8a <__gesf2+0x3a>
 8000dba:	e7e2      	b.n	8000d82 <__gesf2+0x32>
 8000dbc:	42a2      	cmp	r2, r4
 8000dbe:	dc05      	bgt.n	8000dcc <__gesf2+0x7c>
 8000dc0:	dbea      	blt.n	8000d98 <__gesf2+0x48>
 8000dc2:	42b5      	cmp	r5, r6
 8000dc4:	d802      	bhi.n	8000dcc <__gesf2+0x7c>
 8000dc6:	d3e7      	bcc.n	8000d98 <__gesf2+0x48>
 8000dc8:	2000      	movs	r0, #0
 8000dca:	e7de      	b.n	8000d8a <__gesf2+0x3a>
 8000dcc:	4243      	negs	r3, r0
 8000dce:	4158      	adcs	r0, r3
 8000dd0:	0040      	lsls	r0, r0, #1
 8000dd2:	3801      	subs	r0, #1
 8000dd4:	e7d9      	b.n	8000d8a <__gesf2+0x3a>
 8000dd6:	2002      	movs	r0, #2
 8000dd8:	4240      	negs	r0, r0
 8000dda:	e7d6      	b.n	8000d8a <__gesf2+0x3a>

08000ddc <__lesf2>:
 8000ddc:	b570      	push	{r4, r5, r6, lr}
 8000dde:	0042      	lsls	r2, r0, #1
 8000de0:	0245      	lsls	r5, r0, #9
 8000de2:	024e      	lsls	r6, r1, #9
 8000de4:	004c      	lsls	r4, r1, #1
 8000de6:	0fc3      	lsrs	r3, r0, #31
 8000de8:	0a6d      	lsrs	r5, r5, #9
 8000dea:	0e12      	lsrs	r2, r2, #24
 8000dec:	0a76      	lsrs	r6, r6, #9
 8000dee:	0e24      	lsrs	r4, r4, #24
 8000df0:	0fc8      	lsrs	r0, r1, #31
 8000df2:	2aff      	cmp	r2, #255	; 0xff
 8000df4:	d00b      	beq.n	8000e0e <__lesf2+0x32>
 8000df6:	2cff      	cmp	r4, #255	; 0xff
 8000df8:	d00d      	beq.n	8000e16 <__lesf2+0x3a>
 8000dfa:	2a00      	cmp	r2, #0
 8000dfc:	d11f      	bne.n	8000e3e <__lesf2+0x62>
 8000dfe:	2c00      	cmp	r4, #0
 8000e00:	d116      	bne.n	8000e30 <__lesf2+0x54>
 8000e02:	2e00      	cmp	r6, #0
 8000e04:	d114      	bne.n	8000e30 <__lesf2+0x54>
 8000e06:	2000      	movs	r0, #0
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d010      	beq.n	8000e2e <__lesf2+0x52>
 8000e0c:	e009      	b.n	8000e22 <__lesf2+0x46>
 8000e0e:	2d00      	cmp	r5, #0
 8000e10:	d10c      	bne.n	8000e2c <__lesf2+0x50>
 8000e12:	2cff      	cmp	r4, #255	; 0xff
 8000e14:	d113      	bne.n	8000e3e <__lesf2+0x62>
 8000e16:	2e00      	cmp	r6, #0
 8000e18:	d108      	bne.n	8000e2c <__lesf2+0x50>
 8000e1a:	2a00      	cmp	r2, #0
 8000e1c:	d008      	beq.n	8000e30 <__lesf2+0x54>
 8000e1e:	4283      	cmp	r3, r0
 8000e20:	d012      	beq.n	8000e48 <__lesf2+0x6c>
 8000e22:	2102      	movs	r1, #2
 8000e24:	1e58      	subs	r0, r3, #1
 8000e26:	4008      	ands	r0, r1
 8000e28:	3801      	subs	r0, #1
 8000e2a:	e000      	b.n	8000e2e <__lesf2+0x52>
 8000e2c:	2002      	movs	r0, #2
 8000e2e:	bd70      	pop	{r4, r5, r6, pc}
 8000e30:	2d00      	cmp	r5, #0
 8000e32:	d1f4      	bne.n	8000e1e <__lesf2+0x42>
 8000e34:	2800      	cmp	r0, #0
 8000e36:	d1fa      	bne.n	8000e2e <__lesf2+0x52>
 8000e38:	2001      	movs	r0, #1
 8000e3a:	4240      	negs	r0, r0
 8000e3c:	e7f7      	b.n	8000e2e <__lesf2+0x52>
 8000e3e:	2c00      	cmp	r4, #0
 8000e40:	d1ed      	bne.n	8000e1e <__lesf2+0x42>
 8000e42:	2e00      	cmp	r6, #0
 8000e44:	d1eb      	bne.n	8000e1e <__lesf2+0x42>
 8000e46:	e7ec      	b.n	8000e22 <__lesf2+0x46>
 8000e48:	42a2      	cmp	r2, r4
 8000e4a:	dc05      	bgt.n	8000e58 <__lesf2+0x7c>
 8000e4c:	dbf2      	blt.n	8000e34 <__lesf2+0x58>
 8000e4e:	42b5      	cmp	r5, r6
 8000e50:	d802      	bhi.n	8000e58 <__lesf2+0x7c>
 8000e52:	d3ef      	bcc.n	8000e34 <__lesf2+0x58>
 8000e54:	2000      	movs	r0, #0
 8000e56:	e7ea      	b.n	8000e2e <__lesf2+0x52>
 8000e58:	4243      	negs	r3, r0
 8000e5a:	4158      	adcs	r0, r3
 8000e5c:	0040      	lsls	r0, r0, #1
 8000e5e:	3801      	subs	r0, #1
 8000e60:	e7e5      	b.n	8000e2e <__lesf2+0x52>
 8000e62:	46c0      	nop			; (mov r8, r8)

08000e64 <__aeabi_fmul>:
 8000e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e66:	464f      	mov	r7, r9
 8000e68:	4646      	mov	r6, r8
 8000e6a:	46d6      	mov	lr, sl
 8000e6c:	0244      	lsls	r4, r0, #9
 8000e6e:	0045      	lsls	r5, r0, #1
 8000e70:	b5c0      	push	{r6, r7, lr}
 8000e72:	0a64      	lsrs	r4, r4, #9
 8000e74:	1c0f      	adds	r7, r1, #0
 8000e76:	0e2d      	lsrs	r5, r5, #24
 8000e78:	0fc6      	lsrs	r6, r0, #31
 8000e7a:	2d00      	cmp	r5, #0
 8000e7c:	d100      	bne.n	8000e80 <__aeabi_fmul+0x1c>
 8000e7e:	e08d      	b.n	8000f9c <__aeabi_fmul+0x138>
 8000e80:	2dff      	cmp	r5, #255	; 0xff
 8000e82:	d100      	bne.n	8000e86 <__aeabi_fmul+0x22>
 8000e84:	e092      	b.n	8000fac <__aeabi_fmul+0x148>
 8000e86:	2300      	movs	r3, #0
 8000e88:	2080      	movs	r0, #128	; 0x80
 8000e8a:	4699      	mov	r9, r3
 8000e8c:	469a      	mov	sl, r3
 8000e8e:	00e4      	lsls	r4, r4, #3
 8000e90:	04c0      	lsls	r0, r0, #19
 8000e92:	4304      	orrs	r4, r0
 8000e94:	3d7f      	subs	r5, #127	; 0x7f
 8000e96:	0278      	lsls	r0, r7, #9
 8000e98:	0a43      	lsrs	r3, r0, #9
 8000e9a:	4698      	mov	r8, r3
 8000e9c:	007b      	lsls	r3, r7, #1
 8000e9e:	0e1b      	lsrs	r3, r3, #24
 8000ea0:	0fff      	lsrs	r7, r7, #31
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d100      	bne.n	8000ea8 <__aeabi_fmul+0x44>
 8000ea6:	e070      	b.n	8000f8a <__aeabi_fmul+0x126>
 8000ea8:	2bff      	cmp	r3, #255	; 0xff
 8000eaa:	d100      	bne.n	8000eae <__aeabi_fmul+0x4a>
 8000eac:	e086      	b.n	8000fbc <__aeabi_fmul+0x158>
 8000eae:	4642      	mov	r2, r8
 8000eb0:	00d0      	lsls	r0, r2, #3
 8000eb2:	2280      	movs	r2, #128	; 0x80
 8000eb4:	3b7f      	subs	r3, #127	; 0x7f
 8000eb6:	18ed      	adds	r5, r5, r3
 8000eb8:	2300      	movs	r3, #0
 8000eba:	04d2      	lsls	r2, r2, #19
 8000ebc:	4302      	orrs	r2, r0
 8000ebe:	4690      	mov	r8, r2
 8000ec0:	469c      	mov	ip, r3
 8000ec2:	0031      	movs	r1, r6
 8000ec4:	464b      	mov	r3, r9
 8000ec6:	4079      	eors	r1, r7
 8000ec8:	1c68      	adds	r0, r5, #1
 8000eca:	2b0f      	cmp	r3, #15
 8000ecc:	d81c      	bhi.n	8000f08 <__aeabi_fmul+0xa4>
 8000ece:	4a76      	ldr	r2, [pc, #472]	; (80010a8 <__aeabi_fmul+0x244>)
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	58d3      	ldr	r3, [r2, r3]
 8000ed4:	469f      	mov	pc, r3
 8000ed6:	0039      	movs	r1, r7
 8000ed8:	4644      	mov	r4, r8
 8000eda:	46e2      	mov	sl, ip
 8000edc:	4653      	mov	r3, sl
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d00f      	beq.n	8000f02 <__aeabi_fmul+0x9e>
 8000ee2:	2b03      	cmp	r3, #3
 8000ee4:	d100      	bne.n	8000ee8 <__aeabi_fmul+0x84>
 8000ee6:	e0d7      	b.n	8001098 <__aeabi_fmul+0x234>
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d137      	bne.n	8000f5c <__aeabi_fmul+0xf8>
 8000eec:	2000      	movs	r0, #0
 8000eee:	2400      	movs	r4, #0
 8000ef0:	05c0      	lsls	r0, r0, #23
 8000ef2:	4320      	orrs	r0, r4
 8000ef4:	07c9      	lsls	r1, r1, #31
 8000ef6:	4308      	orrs	r0, r1
 8000ef8:	bce0      	pop	{r5, r6, r7}
 8000efa:	46ba      	mov	sl, r7
 8000efc:	46b1      	mov	r9, r6
 8000efe:	46a8      	mov	r8, r5
 8000f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f02:	20ff      	movs	r0, #255	; 0xff
 8000f04:	2400      	movs	r4, #0
 8000f06:	e7f3      	b.n	8000ef0 <__aeabi_fmul+0x8c>
 8000f08:	0c26      	lsrs	r6, r4, #16
 8000f0a:	0424      	lsls	r4, r4, #16
 8000f0c:	0c22      	lsrs	r2, r4, #16
 8000f0e:	4644      	mov	r4, r8
 8000f10:	0424      	lsls	r4, r4, #16
 8000f12:	0c24      	lsrs	r4, r4, #16
 8000f14:	4643      	mov	r3, r8
 8000f16:	0027      	movs	r7, r4
 8000f18:	0c1b      	lsrs	r3, r3, #16
 8000f1a:	4357      	muls	r7, r2
 8000f1c:	4374      	muls	r4, r6
 8000f1e:	435a      	muls	r2, r3
 8000f20:	435e      	muls	r6, r3
 8000f22:	1912      	adds	r2, r2, r4
 8000f24:	0c3b      	lsrs	r3, r7, #16
 8000f26:	189b      	adds	r3, r3, r2
 8000f28:	429c      	cmp	r4, r3
 8000f2a:	d903      	bls.n	8000f34 <__aeabi_fmul+0xd0>
 8000f2c:	2280      	movs	r2, #128	; 0x80
 8000f2e:	0252      	lsls	r2, r2, #9
 8000f30:	4694      	mov	ip, r2
 8000f32:	4466      	add	r6, ip
 8000f34:	043f      	lsls	r7, r7, #16
 8000f36:	041a      	lsls	r2, r3, #16
 8000f38:	0c3f      	lsrs	r7, r7, #16
 8000f3a:	19d2      	adds	r2, r2, r7
 8000f3c:	0194      	lsls	r4, r2, #6
 8000f3e:	1e67      	subs	r7, r4, #1
 8000f40:	41bc      	sbcs	r4, r7
 8000f42:	0c1b      	lsrs	r3, r3, #16
 8000f44:	0e92      	lsrs	r2, r2, #26
 8000f46:	199b      	adds	r3, r3, r6
 8000f48:	4314      	orrs	r4, r2
 8000f4a:	019b      	lsls	r3, r3, #6
 8000f4c:	431c      	orrs	r4, r3
 8000f4e:	011b      	lsls	r3, r3, #4
 8000f50:	d400      	bmi.n	8000f54 <__aeabi_fmul+0xf0>
 8000f52:	e09b      	b.n	800108c <__aeabi_fmul+0x228>
 8000f54:	2301      	movs	r3, #1
 8000f56:	0862      	lsrs	r2, r4, #1
 8000f58:	401c      	ands	r4, r3
 8000f5a:	4314      	orrs	r4, r2
 8000f5c:	0002      	movs	r2, r0
 8000f5e:	327f      	adds	r2, #127	; 0x7f
 8000f60:	2a00      	cmp	r2, #0
 8000f62:	dd64      	ble.n	800102e <__aeabi_fmul+0x1ca>
 8000f64:	0763      	lsls	r3, r4, #29
 8000f66:	d004      	beq.n	8000f72 <__aeabi_fmul+0x10e>
 8000f68:	230f      	movs	r3, #15
 8000f6a:	4023      	ands	r3, r4
 8000f6c:	2b04      	cmp	r3, #4
 8000f6e:	d000      	beq.n	8000f72 <__aeabi_fmul+0x10e>
 8000f70:	3404      	adds	r4, #4
 8000f72:	0123      	lsls	r3, r4, #4
 8000f74:	d503      	bpl.n	8000f7e <__aeabi_fmul+0x11a>
 8000f76:	0002      	movs	r2, r0
 8000f78:	4b4c      	ldr	r3, [pc, #304]	; (80010ac <__aeabi_fmul+0x248>)
 8000f7a:	3280      	adds	r2, #128	; 0x80
 8000f7c:	401c      	ands	r4, r3
 8000f7e:	2afe      	cmp	r2, #254	; 0xfe
 8000f80:	dcbf      	bgt.n	8000f02 <__aeabi_fmul+0x9e>
 8000f82:	01a4      	lsls	r4, r4, #6
 8000f84:	0a64      	lsrs	r4, r4, #9
 8000f86:	b2d0      	uxtb	r0, r2
 8000f88:	e7b2      	b.n	8000ef0 <__aeabi_fmul+0x8c>
 8000f8a:	4643      	mov	r3, r8
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d13d      	bne.n	800100c <__aeabi_fmul+0x1a8>
 8000f90:	464a      	mov	r2, r9
 8000f92:	3301      	adds	r3, #1
 8000f94:	431a      	orrs	r2, r3
 8000f96:	4691      	mov	r9, r2
 8000f98:	469c      	mov	ip, r3
 8000f9a:	e792      	b.n	8000ec2 <__aeabi_fmul+0x5e>
 8000f9c:	2c00      	cmp	r4, #0
 8000f9e:	d129      	bne.n	8000ff4 <__aeabi_fmul+0x190>
 8000fa0:	2304      	movs	r3, #4
 8000fa2:	4699      	mov	r9, r3
 8000fa4:	3b03      	subs	r3, #3
 8000fa6:	2500      	movs	r5, #0
 8000fa8:	469a      	mov	sl, r3
 8000faa:	e774      	b.n	8000e96 <__aeabi_fmul+0x32>
 8000fac:	2c00      	cmp	r4, #0
 8000fae:	d11b      	bne.n	8000fe8 <__aeabi_fmul+0x184>
 8000fb0:	2308      	movs	r3, #8
 8000fb2:	4699      	mov	r9, r3
 8000fb4:	3b06      	subs	r3, #6
 8000fb6:	25ff      	movs	r5, #255	; 0xff
 8000fb8:	469a      	mov	sl, r3
 8000fba:	e76c      	b.n	8000e96 <__aeabi_fmul+0x32>
 8000fbc:	4643      	mov	r3, r8
 8000fbe:	35ff      	adds	r5, #255	; 0xff
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d10b      	bne.n	8000fdc <__aeabi_fmul+0x178>
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	464a      	mov	r2, r9
 8000fc8:	431a      	orrs	r2, r3
 8000fca:	4691      	mov	r9, r2
 8000fcc:	469c      	mov	ip, r3
 8000fce:	e778      	b.n	8000ec2 <__aeabi_fmul+0x5e>
 8000fd0:	4653      	mov	r3, sl
 8000fd2:	0031      	movs	r1, r6
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d000      	beq.n	8000fda <__aeabi_fmul+0x176>
 8000fd8:	e783      	b.n	8000ee2 <__aeabi_fmul+0x7e>
 8000fda:	e792      	b.n	8000f02 <__aeabi_fmul+0x9e>
 8000fdc:	2303      	movs	r3, #3
 8000fde:	464a      	mov	r2, r9
 8000fe0:	431a      	orrs	r2, r3
 8000fe2:	4691      	mov	r9, r2
 8000fe4:	469c      	mov	ip, r3
 8000fe6:	e76c      	b.n	8000ec2 <__aeabi_fmul+0x5e>
 8000fe8:	230c      	movs	r3, #12
 8000fea:	4699      	mov	r9, r3
 8000fec:	3b09      	subs	r3, #9
 8000fee:	25ff      	movs	r5, #255	; 0xff
 8000ff0:	469a      	mov	sl, r3
 8000ff2:	e750      	b.n	8000e96 <__aeabi_fmul+0x32>
 8000ff4:	0020      	movs	r0, r4
 8000ff6:	f002 f96f 	bl	80032d8 <__clzsi2>
 8000ffa:	2576      	movs	r5, #118	; 0x76
 8000ffc:	1f43      	subs	r3, r0, #5
 8000ffe:	409c      	lsls	r4, r3
 8001000:	2300      	movs	r3, #0
 8001002:	426d      	negs	r5, r5
 8001004:	4699      	mov	r9, r3
 8001006:	469a      	mov	sl, r3
 8001008:	1a2d      	subs	r5, r5, r0
 800100a:	e744      	b.n	8000e96 <__aeabi_fmul+0x32>
 800100c:	4640      	mov	r0, r8
 800100e:	f002 f963 	bl	80032d8 <__clzsi2>
 8001012:	4642      	mov	r2, r8
 8001014:	1f43      	subs	r3, r0, #5
 8001016:	409a      	lsls	r2, r3
 8001018:	2300      	movs	r3, #0
 800101a:	1a2d      	subs	r5, r5, r0
 800101c:	4690      	mov	r8, r2
 800101e:	469c      	mov	ip, r3
 8001020:	3d76      	subs	r5, #118	; 0x76
 8001022:	e74e      	b.n	8000ec2 <__aeabi_fmul+0x5e>
 8001024:	2480      	movs	r4, #128	; 0x80
 8001026:	2100      	movs	r1, #0
 8001028:	20ff      	movs	r0, #255	; 0xff
 800102a:	03e4      	lsls	r4, r4, #15
 800102c:	e760      	b.n	8000ef0 <__aeabi_fmul+0x8c>
 800102e:	2301      	movs	r3, #1
 8001030:	1a9b      	subs	r3, r3, r2
 8001032:	2b1b      	cmp	r3, #27
 8001034:	dd00      	ble.n	8001038 <__aeabi_fmul+0x1d4>
 8001036:	e759      	b.n	8000eec <__aeabi_fmul+0x88>
 8001038:	0022      	movs	r2, r4
 800103a:	309e      	adds	r0, #158	; 0x9e
 800103c:	40da      	lsrs	r2, r3
 800103e:	4084      	lsls	r4, r0
 8001040:	0013      	movs	r3, r2
 8001042:	1e62      	subs	r2, r4, #1
 8001044:	4194      	sbcs	r4, r2
 8001046:	431c      	orrs	r4, r3
 8001048:	0763      	lsls	r3, r4, #29
 800104a:	d004      	beq.n	8001056 <__aeabi_fmul+0x1f2>
 800104c:	230f      	movs	r3, #15
 800104e:	4023      	ands	r3, r4
 8001050:	2b04      	cmp	r3, #4
 8001052:	d000      	beq.n	8001056 <__aeabi_fmul+0x1f2>
 8001054:	3404      	adds	r4, #4
 8001056:	0163      	lsls	r3, r4, #5
 8001058:	d51a      	bpl.n	8001090 <__aeabi_fmul+0x22c>
 800105a:	2001      	movs	r0, #1
 800105c:	2400      	movs	r4, #0
 800105e:	e747      	b.n	8000ef0 <__aeabi_fmul+0x8c>
 8001060:	2080      	movs	r0, #128	; 0x80
 8001062:	03c0      	lsls	r0, r0, #15
 8001064:	4204      	tst	r4, r0
 8001066:	d009      	beq.n	800107c <__aeabi_fmul+0x218>
 8001068:	4643      	mov	r3, r8
 800106a:	4203      	tst	r3, r0
 800106c:	d106      	bne.n	800107c <__aeabi_fmul+0x218>
 800106e:	4644      	mov	r4, r8
 8001070:	4304      	orrs	r4, r0
 8001072:	0264      	lsls	r4, r4, #9
 8001074:	0039      	movs	r1, r7
 8001076:	20ff      	movs	r0, #255	; 0xff
 8001078:	0a64      	lsrs	r4, r4, #9
 800107a:	e739      	b.n	8000ef0 <__aeabi_fmul+0x8c>
 800107c:	2080      	movs	r0, #128	; 0x80
 800107e:	03c0      	lsls	r0, r0, #15
 8001080:	4304      	orrs	r4, r0
 8001082:	0264      	lsls	r4, r4, #9
 8001084:	0031      	movs	r1, r6
 8001086:	20ff      	movs	r0, #255	; 0xff
 8001088:	0a64      	lsrs	r4, r4, #9
 800108a:	e731      	b.n	8000ef0 <__aeabi_fmul+0x8c>
 800108c:	0028      	movs	r0, r5
 800108e:	e765      	b.n	8000f5c <__aeabi_fmul+0xf8>
 8001090:	01a4      	lsls	r4, r4, #6
 8001092:	2000      	movs	r0, #0
 8001094:	0a64      	lsrs	r4, r4, #9
 8001096:	e72b      	b.n	8000ef0 <__aeabi_fmul+0x8c>
 8001098:	2080      	movs	r0, #128	; 0x80
 800109a:	03c0      	lsls	r0, r0, #15
 800109c:	4304      	orrs	r4, r0
 800109e:	0264      	lsls	r4, r4, #9
 80010a0:	20ff      	movs	r0, #255	; 0xff
 80010a2:	0a64      	lsrs	r4, r4, #9
 80010a4:	e724      	b.n	8000ef0 <__aeabi_fmul+0x8c>
 80010a6:	46c0      	nop			; (mov r8, r8)
 80010a8:	08009378 	.word	0x08009378
 80010ac:	f7ffffff 	.word	0xf7ffffff

080010b0 <__aeabi_fsub>:
 80010b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010b2:	46ce      	mov	lr, r9
 80010b4:	4647      	mov	r7, r8
 80010b6:	0243      	lsls	r3, r0, #9
 80010b8:	0a5b      	lsrs	r3, r3, #9
 80010ba:	024e      	lsls	r6, r1, #9
 80010bc:	00da      	lsls	r2, r3, #3
 80010be:	4694      	mov	ip, r2
 80010c0:	0a72      	lsrs	r2, r6, #9
 80010c2:	4691      	mov	r9, r2
 80010c4:	0045      	lsls	r5, r0, #1
 80010c6:	004a      	lsls	r2, r1, #1
 80010c8:	b580      	push	{r7, lr}
 80010ca:	0e2d      	lsrs	r5, r5, #24
 80010cc:	001f      	movs	r7, r3
 80010ce:	0fc4      	lsrs	r4, r0, #31
 80010d0:	0e12      	lsrs	r2, r2, #24
 80010d2:	0fc9      	lsrs	r1, r1, #31
 80010d4:	09b6      	lsrs	r6, r6, #6
 80010d6:	2aff      	cmp	r2, #255	; 0xff
 80010d8:	d05b      	beq.n	8001192 <__aeabi_fsub+0xe2>
 80010da:	2001      	movs	r0, #1
 80010dc:	4041      	eors	r1, r0
 80010de:	428c      	cmp	r4, r1
 80010e0:	d039      	beq.n	8001156 <__aeabi_fsub+0xa6>
 80010e2:	1aa8      	subs	r0, r5, r2
 80010e4:	2800      	cmp	r0, #0
 80010e6:	dd5a      	ble.n	800119e <__aeabi_fsub+0xee>
 80010e8:	2a00      	cmp	r2, #0
 80010ea:	d06a      	beq.n	80011c2 <__aeabi_fsub+0x112>
 80010ec:	2dff      	cmp	r5, #255	; 0xff
 80010ee:	d100      	bne.n	80010f2 <__aeabi_fsub+0x42>
 80010f0:	e0d9      	b.n	80012a6 <__aeabi_fsub+0x1f6>
 80010f2:	2280      	movs	r2, #128	; 0x80
 80010f4:	04d2      	lsls	r2, r2, #19
 80010f6:	4316      	orrs	r6, r2
 80010f8:	281b      	cmp	r0, #27
 80010fa:	dc00      	bgt.n	80010fe <__aeabi_fsub+0x4e>
 80010fc:	e0e9      	b.n	80012d2 <__aeabi_fsub+0x222>
 80010fe:	2001      	movs	r0, #1
 8001100:	4663      	mov	r3, ip
 8001102:	1a18      	subs	r0, r3, r0
 8001104:	0143      	lsls	r3, r0, #5
 8001106:	d400      	bmi.n	800110a <__aeabi_fsub+0x5a>
 8001108:	e0b4      	b.n	8001274 <__aeabi_fsub+0x1c4>
 800110a:	0180      	lsls	r0, r0, #6
 800110c:	0987      	lsrs	r7, r0, #6
 800110e:	0038      	movs	r0, r7
 8001110:	f002 f8e2 	bl	80032d8 <__clzsi2>
 8001114:	3805      	subs	r0, #5
 8001116:	4087      	lsls	r7, r0
 8001118:	4285      	cmp	r5, r0
 800111a:	dc00      	bgt.n	800111e <__aeabi_fsub+0x6e>
 800111c:	e0cc      	b.n	80012b8 <__aeabi_fsub+0x208>
 800111e:	1a2d      	subs	r5, r5, r0
 8001120:	48b5      	ldr	r0, [pc, #724]	; (80013f8 <__aeabi_fsub+0x348>)
 8001122:	4038      	ands	r0, r7
 8001124:	0743      	lsls	r3, r0, #29
 8001126:	d004      	beq.n	8001132 <__aeabi_fsub+0x82>
 8001128:	230f      	movs	r3, #15
 800112a:	4003      	ands	r3, r0
 800112c:	2b04      	cmp	r3, #4
 800112e:	d000      	beq.n	8001132 <__aeabi_fsub+0x82>
 8001130:	3004      	adds	r0, #4
 8001132:	0143      	lsls	r3, r0, #5
 8001134:	d400      	bmi.n	8001138 <__aeabi_fsub+0x88>
 8001136:	e0a0      	b.n	800127a <__aeabi_fsub+0x1ca>
 8001138:	1c6a      	adds	r2, r5, #1
 800113a:	2dfe      	cmp	r5, #254	; 0xfe
 800113c:	d100      	bne.n	8001140 <__aeabi_fsub+0x90>
 800113e:	e08d      	b.n	800125c <__aeabi_fsub+0x1ac>
 8001140:	0180      	lsls	r0, r0, #6
 8001142:	0a47      	lsrs	r7, r0, #9
 8001144:	b2d2      	uxtb	r2, r2
 8001146:	05d0      	lsls	r0, r2, #23
 8001148:	4338      	orrs	r0, r7
 800114a:	07e4      	lsls	r4, r4, #31
 800114c:	4320      	orrs	r0, r4
 800114e:	bcc0      	pop	{r6, r7}
 8001150:	46b9      	mov	r9, r7
 8001152:	46b0      	mov	r8, r6
 8001154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001156:	1aa8      	subs	r0, r5, r2
 8001158:	4680      	mov	r8, r0
 800115a:	2800      	cmp	r0, #0
 800115c:	dd45      	ble.n	80011ea <__aeabi_fsub+0x13a>
 800115e:	2a00      	cmp	r2, #0
 8001160:	d070      	beq.n	8001244 <__aeabi_fsub+0x194>
 8001162:	2dff      	cmp	r5, #255	; 0xff
 8001164:	d100      	bne.n	8001168 <__aeabi_fsub+0xb8>
 8001166:	e09e      	b.n	80012a6 <__aeabi_fsub+0x1f6>
 8001168:	2380      	movs	r3, #128	; 0x80
 800116a:	04db      	lsls	r3, r3, #19
 800116c:	431e      	orrs	r6, r3
 800116e:	4643      	mov	r3, r8
 8001170:	2b1b      	cmp	r3, #27
 8001172:	dc00      	bgt.n	8001176 <__aeabi_fsub+0xc6>
 8001174:	e0d2      	b.n	800131c <__aeabi_fsub+0x26c>
 8001176:	2001      	movs	r0, #1
 8001178:	4460      	add	r0, ip
 800117a:	0143      	lsls	r3, r0, #5
 800117c:	d57a      	bpl.n	8001274 <__aeabi_fsub+0x1c4>
 800117e:	3501      	adds	r5, #1
 8001180:	2dff      	cmp	r5, #255	; 0xff
 8001182:	d06b      	beq.n	800125c <__aeabi_fsub+0x1ac>
 8001184:	2301      	movs	r3, #1
 8001186:	4a9d      	ldr	r2, [pc, #628]	; (80013fc <__aeabi_fsub+0x34c>)
 8001188:	4003      	ands	r3, r0
 800118a:	0840      	lsrs	r0, r0, #1
 800118c:	4010      	ands	r0, r2
 800118e:	4318      	orrs	r0, r3
 8001190:	e7c8      	b.n	8001124 <__aeabi_fsub+0x74>
 8001192:	2e00      	cmp	r6, #0
 8001194:	d020      	beq.n	80011d8 <__aeabi_fsub+0x128>
 8001196:	428c      	cmp	r4, r1
 8001198:	d023      	beq.n	80011e2 <__aeabi_fsub+0x132>
 800119a:	0028      	movs	r0, r5
 800119c:	38ff      	subs	r0, #255	; 0xff
 800119e:	2800      	cmp	r0, #0
 80011a0:	d039      	beq.n	8001216 <__aeabi_fsub+0x166>
 80011a2:	1b57      	subs	r7, r2, r5
 80011a4:	2d00      	cmp	r5, #0
 80011a6:	d000      	beq.n	80011aa <__aeabi_fsub+0xfa>
 80011a8:	e09d      	b.n	80012e6 <__aeabi_fsub+0x236>
 80011aa:	4663      	mov	r3, ip
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d100      	bne.n	80011b2 <__aeabi_fsub+0x102>
 80011b0:	e0db      	b.n	800136a <__aeabi_fsub+0x2ba>
 80011b2:	1e7b      	subs	r3, r7, #1
 80011b4:	2f01      	cmp	r7, #1
 80011b6:	d100      	bne.n	80011ba <__aeabi_fsub+0x10a>
 80011b8:	e10d      	b.n	80013d6 <__aeabi_fsub+0x326>
 80011ba:	2fff      	cmp	r7, #255	; 0xff
 80011bc:	d071      	beq.n	80012a2 <__aeabi_fsub+0x1f2>
 80011be:	001f      	movs	r7, r3
 80011c0:	e098      	b.n	80012f4 <__aeabi_fsub+0x244>
 80011c2:	2e00      	cmp	r6, #0
 80011c4:	d100      	bne.n	80011c8 <__aeabi_fsub+0x118>
 80011c6:	e0a7      	b.n	8001318 <__aeabi_fsub+0x268>
 80011c8:	1e42      	subs	r2, r0, #1
 80011ca:	2801      	cmp	r0, #1
 80011cc:	d100      	bne.n	80011d0 <__aeabi_fsub+0x120>
 80011ce:	e0e6      	b.n	800139e <__aeabi_fsub+0x2ee>
 80011d0:	28ff      	cmp	r0, #255	; 0xff
 80011d2:	d068      	beq.n	80012a6 <__aeabi_fsub+0x1f6>
 80011d4:	0010      	movs	r0, r2
 80011d6:	e78f      	b.n	80010f8 <__aeabi_fsub+0x48>
 80011d8:	2001      	movs	r0, #1
 80011da:	4041      	eors	r1, r0
 80011dc:	42a1      	cmp	r1, r4
 80011de:	d000      	beq.n	80011e2 <__aeabi_fsub+0x132>
 80011e0:	e77f      	b.n	80010e2 <__aeabi_fsub+0x32>
 80011e2:	20ff      	movs	r0, #255	; 0xff
 80011e4:	4240      	negs	r0, r0
 80011e6:	4680      	mov	r8, r0
 80011e8:	44a8      	add	r8, r5
 80011ea:	4640      	mov	r0, r8
 80011ec:	2800      	cmp	r0, #0
 80011ee:	d038      	beq.n	8001262 <__aeabi_fsub+0x1b2>
 80011f0:	1b51      	subs	r1, r2, r5
 80011f2:	2d00      	cmp	r5, #0
 80011f4:	d100      	bne.n	80011f8 <__aeabi_fsub+0x148>
 80011f6:	e0ae      	b.n	8001356 <__aeabi_fsub+0x2a6>
 80011f8:	2aff      	cmp	r2, #255	; 0xff
 80011fa:	d100      	bne.n	80011fe <__aeabi_fsub+0x14e>
 80011fc:	e0df      	b.n	80013be <__aeabi_fsub+0x30e>
 80011fe:	2380      	movs	r3, #128	; 0x80
 8001200:	4660      	mov	r0, ip
 8001202:	04db      	lsls	r3, r3, #19
 8001204:	4318      	orrs	r0, r3
 8001206:	4684      	mov	ip, r0
 8001208:	291b      	cmp	r1, #27
 800120a:	dc00      	bgt.n	800120e <__aeabi_fsub+0x15e>
 800120c:	e0d9      	b.n	80013c2 <__aeabi_fsub+0x312>
 800120e:	2001      	movs	r0, #1
 8001210:	0015      	movs	r5, r2
 8001212:	1980      	adds	r0, r0, r6
 8001214:	e7b1      	b.n	800117a <__aeabi_fsub+0xca>
 8001216:	20fe      	movs	r0, #254	; 0xfe
 8001218:	1c6a      	adds	r2, r5, #1
 800121a:	4210      	tst	r0, r2
 800121c:	d171      	bne.n	8001302 <__aeabi_fsub+0x252>
 800121e:	2d00      	cmp	r5, #0
 8001220:	d000      	beq.n	8001224 <__aeabi_fsub+0x174>
 8001222:	e0a6      	b.n	8001372 <__aeabi_fsub+0x2c2>
 8001224:	4663      	mov	r3, ip
 8001226:	2b00      	cmp	r3, #0
 8001228:	d100      	bne.n	800122c <__aeabi_fsub+0x17c>
 800122a:	e0d9      	b.n	80013e0 <__aeabi_fsub+0x330>
 800122c:	2200      	movs	r2, #0
 800122e:	2e00      	cmp	r6, #0
 8001230:	d100      	bne.n	8001234 <__aeabi_fsub+0x184>
 8001232:	e788      	b.n	8001146 <__aeabi_fsub+0x96>
 8001234:	1b98      	subs	r0, r3, r6
 8001236:	0143      	lsls	r3, r0, #5
 8001238:	d400      	bmi.n	800123c <__aeabi_fsub+0x18c>
 800123a:	e0e1      	b.n	8001400 <__aeabi_fsub+0x350>
 800123c:	4663      	mov	r3, ip
 800123e:	000c      	movs	r4, r1
 8001240:	1af0      	subs	r0, r6, r3
 8001242:	e76f      	b.n	8001124 <__aeabi_fsub+0x74>
 8001244:	2e00      	cmp	r6, #0
 8001246:	d100      	bne.n	800124a <__aeabi_fsub+0x19a>
 8001248:	e0b7      	b.n	80013ba <__aeabi_fsub+0x30a>
 800124a:	0002      	movs	r2, r0
 800124c:	3a01      	subs	r2, #1
 800124e:	2801      	cmp	r0, #1
 8001250:	d100      	bne.n	8001254 <__aeabi_fsub+0x1a4>
 8001252:	e09c      	b.n	800138e <__aeabi_fsub+0x2de>
 8001254:	28ff      	cmp	r0, #255	; 0xff
 8001256:	d026      	beq.n	80012a6 <__aeabi_fsub+0x1f6>
 8001258:	4690      	mov	r8, r2
 800125a:	e788      	b.n	800116e <__aeabi_fsub+0xbe>
 800125c:	22ff      	movs	r2, #255	; 0xff
 800125e:	2700      	movs	r7, #0
 8001260:	e771      	b.n	8001146 <__aeabi_fsub+0x96>
 8001262:	20fe      	movs	r0, #254	; 0xfe
 8001264:	1c6a      	adds	r2, r5, #1
 8001266:	4210      	tst	r0, r2
 8001268:	d064      	beq.n	8001334 <__aeabi_fsub+0x284>
 800126a:	2aff      	cmp	r2, #255	; 0xff
 800126c:	d0f6      	beq.n	800125c <__aeabi_fsub+0x1ac>
 800126e:	0015      	movs	r5, r2
 8001270:	4466      	add	r6, ip
 8001272:	0870      	lsrs	r0, r6, #1
 8001274:	0743      	lsls	r3, r0, #29
 8001276:	d000      	beq.n	800127a <__aeabi_fsub+0x1ca>
 8001278:	e756      	b.n	8001128 <__aeabi_fsub+0x78>
 800127a:	08c3      	lsrs	r3, r0, #3
 800127c:	2dff      	cmp	r5, #255	; 0xff
 800127e:	d012      	beq.n	80012a6 <__aeabi_fsub+0x1f6>
 8001280:	025b      	lsls	r3, r3, #9
 8001282:	0a5f      	lsrs	r7, r3, #9
 8001284:	b2ea      	uxtb	r2, r5
 8001286:	e75e      	b.n	8001146 <__aeabi_fsub+0x96>
 8001288:	4662      	mov	r2, ip
 800128a:	2a00      	cmp	r2, #0
 800128c:	d100      	bne.n	8001290 <__aeabi_fsub+0x1e0>
 800128e:	e096      	b.n	80013be <__aeabi_fsub+0x30e>
 8001290:	2e00      	cmp	r6, #0
 8001292:	d008      	beq.n	80012a6 <__aeabi_fsub+0x1f6>
 8001294:	2280      	movs	r2, #128	; 0x80
 8001296:	03d2      	lsls	r2, r2, #15
 8001298:	4213      	tst	r3, r2
 800129a:	d004      	beq.n	80012a6 <__aeabi_fsub+0x1f6>
 800129c:	4648      	mov	r0, r9
 800129e:	4210      	tst	r0, r2
 80012a0:	d101      	bne.n	80012a6 <__aeabi_fsub+0x1f6>
 80012a2:	000c      	movs	r4, r1
 80012a4:	464b      	mov	r3, r9
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d0d8      	beq.n	800125c <__aeabi_fsub+0x1ac>
 80012aa:	2780      	movs	r7, #128	; 0x80
 80012ac:	03ff      	lsls	r7, r7, #15
 80012ae:	431f      	orrs	r7, r3
 80012b0:	027f      	lsls	r7, r7, #9
 80012b2:	22ff      	movs	r2, #255	; 0xff
 80012b4:	0a7f      	lsrs	r7, r7, #9
 80012b6:	e746      	b.n	8001146 <__aeabi_fsub+0x96>
 80012b8:	2320      	movs	r3, #32
 80012ba:	003a      	movs	r2, r7
 80012bc:	1b45      	subs	r5, r0, r5
 80012be:	0038      	movs	r0, r7
 80012c0:	3501      	adds	r5, #1
 80012c2:	40ea      	lsrs	r2, r5
 80012c4:	1b5d      	subs	r5, r3, r5
 80012c6:	40a8      	lsls	r0, r5
 80012c8:	1e43      	subs	r3, r0, #1
 80012ca:	4198      	sbcs	r0, r3
 80012cc:	2500      	movs	r5, #0
 80012ce:	4310      	orrs	r0, r2
 80012d0:	e728      	b.n	8001124 <__aeabi_fsub+0x74>
 80012d2:	2320      	movs	r3, #32
 80012d4:	1a1b      	subs	r3, r3, r0
 80012d6:	0032      	movs	r2, r6
 80012d8:	409e      	lsls	r6, r3
 80012da:	40c2      	lsrs	r2, r0
 80012dc:	0030      	movs	r0, r6
 80012de:	1e43      	subs	r3, r0, #1
 80012e0:	4198      	sbcs	r0, r3
 80012e2:	4310      	orrs	r0, r2
 80012e4:	e70c      	b.n	8001100 <__aeabi_fsub+0x50>
 80012e6:	2aff      	cmp	r2, #255	; 0xff
 80012e8:	d0db      	beq.n	80012a2 <__aeabi_fsub+0x1f2>
 80012ea:	2380      	movs	r3, #128	; 0x80
 80012ec:	4660      	mov	r0, ip
 80012ee:	04db      	lsls	r3, r3, #19
 80012f0:	4318      	orrs	r0, r3
 80012f2:	4684      	mov	ip, r0
 80012f4:	2f1b      	cmp	r7, #27
 80012f6:	dd56      	ble.n	80013a6 <__aeabi_fsub+0x2f6>
 80012f8:	2001      	movs	r0, #1
 80012fa:	000c      	movs	r4, r1
 80012fc:	0015      	movs	r5, r2
 80012fe:	1a30      	subs	r0, r6, r0
 8001300:	e700      	b.n	8001104 <__aeabi_fsub+0x54>
 8001302:	4663      	mov	r3, ip
 8001304:	1b9f      	subs	r7, r3, r6
 8001306:	017b      	lsls	r3, r7, #5
 8001308:	d43d      	bmi.n	8001386 <__aeabi_fsub+0x2d6>
 800130a:	2f00      	cmp	r7, #0
 800130c:	d000      	beq.n	8001310 <__aeabi_fsub+0x260>
 800130e:	e6fe      	b.n	800110e <__aeabi_fsub+0x5e>
 8001310:	2400      	movs	r4, #0
 8001312:	2200      	movs	r2, #0
 8001314:	2700      	movs	r7, #0
 8001316:	e716      	b.n	8001146 <__aeabi_fsub+0x96>
 8001318:	0005      	movs	r5, r0
 800131a:	e7af      	b.n	800127c <__aeabi_fsub+0x1cc>
 800131c:	0032      	movs	r2, r6
 800131e:	4643      	mov	r3, r8
 8001320:	4641      	mov	r1, r8
 8001322:	40da      	lsrs	r2, r3
 8001324:	2320      	movs	r3, #32
 8001326:	1a5b      	subs	r3, r3, r1
 8001328:	409e      	lsls	r6, r3
 800132a:	0030      	movs	r0, r6
 800132c:	1e43      	subs	r3, r0, #1
 800132e:	4198      	sbcs	r0, r3
 8001330:	4310      	orrs	r0, r2
 8001332:	e721      	b.n	8001178 <__aeabi_fsub+0xc8>
 8001334:	2d00      	cmp	r5, #0
 8001336:	d1a7      	bne.n	8001288 <__aeabi_fsub+0x1d8>
 8001338:	4663      	mov	r3, ip
 800133a:	2b00      	cmp	r3, #0
 800133c:	d059      	beq.n	80013f2 <__aeabi_fsub+0x342>
 800133e:	2200      	movs	r2, #0
 8001340:	2e00      	cmp	r6, #0
 8001342:	d100      	bne.n	8001346 <__aeabi_fsub+0x296>
 8001344:	e6ff      	b.n	8001146 <__aeabi_fsub+0x96>
 8001346:	0030      	movs	r0, r6
 8001348:	4460      	add	r0, ip
 800134a:	0143      	lsls	r3, r0, #5
 800134c:	d592      	bpl.n	8001274 <__aeabi_fsub+0x1c4>
 800134e:	4b2a      	ldr	r3, [pc, #168]	; (80013f8 <__aeabi_fsub+0x348>)
 8001350:	3501      	adds	r5, #1
 8001352:	4018      	ands	r0, r3
 8001354:	e78e      	b.n	8001274 <__aeabi_fsub+0x1c4>
 8001356:	4663      	mov	r3, ip
 8001358:	2b00      	cmp	r3, #0
 800135a:	d047      	beq.n	80013ec <__aeabi_fsub+0x33c>
 800135c:	1e4b      	subs	r3, r1, #1
 800135e:	2901      	cmp	r1, #1
 8001360:	d015      	beq.n	800138e <__aeabi_fsub+0x2de>
 8001362:	29ff      	cmp	r1, #255	; 0xff
 8001364:	d02b      	beq.n	80013be <__aeabi_fsub+0x30e>
 8001366:	0019      	movs	r1, r3
 8001368:	e74e      	b.n	8001208 <__aeabi_fsub+0x158>
 800136a:	000c      	movs	r4, r1
 800136c:	464b      	mov	r3, r9
 800136e:	003d      	movs	r5, r7
 8001370:	e784      	b.n	800127c <__aeabi_fsub+0x1cc>
 8001372:	4662      	mov	r2, ip
 8001374:	2a00      	cmp	r2, #0
 8001376:	d18b      	bne.n	8001290 <__aeabi_fsub+0x1e0>
 8001378:	2e00      	cmp	r6, #0
 800137a:	d192      	bne.n	80012a2 <__aeabi_fsub+0x1f2>
 800137c:	2780      	movs	r7, #128	; 0x80
 800137e:	2400      	movs	r4, #0
 8001380:	22ff      	movs	r2, #255	; 0xff
 8001382:	03ff      	lsls	r7, r7, #15
 8001384:	e6df      	b.n	8001146 <__aeabi_fsub+0x96>
 8001386:	4663      	mov	r3, ip
 8001388:	000c      	movs	r4, r1
 800138a:	1af7      	subs	r7, r6, r3
 800138c:	e6bf      	b.n	800110e <__aeabi_fsub+0x5e>
 800138e:	0030      	movs	r0, r6
 8001390:	4460      	add	r0, ip
 8001392:	2501      	movs	r5, #1
 8001394:	0143      	lsls	r3, r0, #5
 8001396:	d400      	bmi.n	800139a <__aeabi_fsub+0x2ea>
 8001398:	e76c      	b.n	8001274 <__aeabi_fsub+0x1c4>
 800139a:	2502      	movs	r5, #2
 800139c:	e6f2      	b.n	8001184 <__aeabi_fsub+0xd4>
 800139e:	4663      	mov	r3, ip
 80013a0:	2501      	movs	r5, #1
 80013a2:	1b98      	subs	r0, r3, r6
 80013a4:	e6ae      	b.n	8001104 <__aeabi_fsub+0x54>
 80013a6:	2320      	movs	r3, #32
 80013a8:	4664      	mov	r4, ip
 80013aa:	4660      	mov	r0, ip
 80013ac:	40fc      	lsrs	r4, r7
 80013ae:	1bdf      	subs	r7, r3, r7
 80013b0:	40b8      	lsls	r0, r7
 80013b2:	1e43      	subs	r3, r0, #1
 80013b4:	4198      	sbcs	r0, r3
 80013b6:	4320      	orrs	r0, r4
 80013b8:	e79f      	b.n	80012fa <__aeabi_fsub+0x24a>
 80013ba:	0005      	movs	r5, r0
 80013bc:	e75e      	b.n	800127c <__aeabi_fsub+0x1cc>
 80013be:	464b      	mov	r3, r9
 80013c0:	e771      	b.n	80012a6 <__aeabi_fsub+0x1f6>
 80013c2:	2320      	movs	r3, #32
 80013c4:	4665      	mov	r5, ip
 80013c6:	4660      	mov	r0, ip
 80013c8:	40cd      	lsrs	r5, r1
 80013ca:	1a59      	subs	r1, r3, r1
 80013cc:	4088      	lsls	r0, r1
 80013ce:	1e43      	subs	r3, r0, #1
 80013d0:	4198      	sbcs	r0, r3
 80013d2:	4328      	orrs	r0, r5
 80013d4:	e71c      	b.n	8001210 <__aeabi_fsub+0x160>
 80013d6:	4663      	mov	r3, ip
 80013d8:	000c      	movs	r4, r1
 80013da:	2501      	movs	r5, #1
 80013dc:	1af0      	subs	r0, r6, r3
 80013de:	e691      	b.n	8001104 <__aeabi_fsub+0x54>
 80013e0:	2e00      	cmp	r6, #0
 80013e2:	d095      	beq.n	8001310 <__aeabi_fsub+0x260>
 80013e4:	000c      	movs	r4, r1
 80013e6:	464f      	mov	r7, r9
 80013e8:	2200      	movs	r2, #0
 80013ea:	e6ac      	b.n	8001146 <__aeabi_fsub+0x96>
 80013ec:	464b      	mov	r3, r9
 80013ee:	000d      	movs	r5, r1
 80013f0:	e744      	b.n	800127c <__aeabi_fsub+0x1cc>
 80013f2:	464f      	mov	r7, r9
 80013f4:	2200      	movs	r2, #0
 80013f6:	e6a6      	b.n	8001146 <__aeabi_fsub+0x96>
 80013f8:	fbffffff 	.word	0xfbffffff
 80013fc:	7dffffff 	.word	0x7dffffff
 8001400:	2800      	cmp	r0, #0
 8001402:	d000      	beq.n	8001406 <__aeabi_fsub+0x356>
 8001404:	e736      	b.n	8001274 <__aeabi_fsub+0x1c4>
 8001406:	2400      	movs	r4, #0
 8001408:	2700      	movs	r7, #0
 800140a:	e69c      	b.n	8001146 <__aeabi_fsub+0x96>

0800140c <__aeabi_f2iz>:
 800140c:	0241      	lsls	r1, r0, #9
 800140e:	0042      	lsls	r2, r0, #1
 8001410:	0fc3      	lsrs	r3, r0, #31
 8001412:	0a49      	lsrs	r1, r1, #9
 8001414:	2000      	movs	r0, #0
 8001416:	0e12      	lsrs	r2, r2, #24
 8001418:	2a7e      	cmp	r2, #126	; 0x7e
 800141a:	dd03      	ble.n	8001424 <__aeabi_f2iz+0x18>
 800141c:	2a9d      	cmp	r2, #157	; 0x9d
 800141e:	dd02      	ble.n	8001426 <__aeabi_f2iz+0x1a>
 8001420:	4a09      	ldr	r2, [pc, #36]	; (8001448 <__aeabi_f2iz+0x3c>)
 8001422:	1898      	adds	r0, r3, r2
 8001424:	4770      	bx	lr
 8001426:	2080      	movs	r0, #128	; 0x80
 8001428:	0400      	lsls	r0, r0, #16
 800142a:	4301      	orrs	r1, r0
 800142c:	2a95      	cmp	r2, #149	; 0x95
 800142e:	dc07      	bgt.n	8001440 <__aeabi_f2iz+0x34>
 8001430:	2096      	movs	r0, #150	; 0x96
 8001432:	1a82      	subs	r2, r0, r2
 8001434:	40d1      	lsrs	r1, r2
 8001436:	4248      	negs	r0, r1
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1f3      	bne.n	8001424 <__aeabi_f2iz+0x18>
 800143c:	0008      	movs	r0, r1
 800143e:	e7f1      	b.n	8001424 <__aeabi_f2iz+0x18>
 8001440:	3a96      	subs	r2, #150	; 0x96
 8001442:	4091      	lsls	r1, r2
 8001444:	e7f7      	b.n	8001436 <__aeabi_f2iz+0x2a>
 8001446:	46c0      	nop			; (mov r8, r8)
 8001448:	7fffffff 	.word	0x7fffffff

0800144c <__aeabi_i2f>:
 800144c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800144e:	2800      	cmp	r0, #0
 8001450:	d013      	beq.n	800147a <__aeabi_i2f+0x2e>
 8001452:	17c3      	asrs	r3, r0, #31
 8001454:	18c6      	adds	r6, r0, r3
 8001456:	405e      	eors	r6, r3
 8001458:	0fc4      	lsrs	r4, r0, #31
 800145a:	0030      	movs	r0, r6
 800145c:	f001 ff3c 	bl	80032d8 <__clzsi2>
 8001460:	239e      	movs	r3, #158	; 0x9e
 8001462:	0005      	movs	r5, r0
 8001464:	1a1b      	subs	r3, r3, r0
 8001466:	2b96      	cmp	r3, #150	; 0x96
 8001468:	dc0f      	bgt.n	800148a <__aeabi_i2f+0x3e>
 800146a:	2808      	cmp	r0, #8
 800146c:	dd01      	ble.n	8001472 <__aeabi_i2f+0x26>
 800146e:	3d08      	subs	r5, #8
 8001470:	40ae      	lsls	r6, r5
 8001472:	0276      	lsls	r6, r6, #9
 8001474:	0a76      	lsrs	r6, r6, #9
 8001476:	b2d8      	uxtb	r0, r3
 8001478:	e002      	b.n	8001480 <__aeabi_i2f+0x34>
 800147a:	2400      	movs	r4, #0
 800147c:	2000      	movs	r0, #0
 800147e:	2600      	movs	r6, #0
 8001480:	05c0      	lsls	r0, r0, #23
 8001482:	4330      	orrs	r0, r6
 8001484:	07e4      	lsls	r4, r4, #31
 8001486:	4320      	orrs	r0, r4
 8001488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800148a:	2b99      	cmp	r3, #153	; 0x99
 800148c:	dd0c      	ble.n	80014a8 <__aeabi_i2f+0x5c>
 800148e:	2205      	movs	r2, #5
 8001490:	0031      	movs	r1, r6
 8001492:	1a12      	subs	r2, r2, r0
 8001494:	40d1      	lsrs	r1, r2
 8001496:	000a      	movs	r2, r1
 8001498:	0001      	movs	r1, r0
 800149a:	0030      	movs	r0, r6
 800149c:	311b      	adds	r1, #27
 800149e:	4088      	lsls	r0, r1
 80014a0:	1e41      	subs	r1, r0, #1
 80014a2:	4188      	sbcs	r0, r1
 80014a4:	4302      	orrs	r2, r0
 80014a6:	0016      	movs	r6, r2
 80014a8:	2d05      	cmp	r5, #5
 80014aa:	dc12      	bgt.n	80014d2 <__aeabi_i2f+0x86>
 80014ac:	0031      	movs	r1, r6
 80014ae:	4f0d      	ldr	r7, [pc, #52]	; (80014e4 <__aeabi_i2f+0x98>)
 80014b0:	4039      	ands	r1, r7
 80014b2:	0772      	lsls	r2, r6, #29
 80014b4:	d009      	beq.n	80014ca <__aeabi_i2f+0x7e>
 80014b6:	200f      	movs	r0, #15
 80014b8:	4030      	ands	r0, r6
 80014ba:	2804      	cmp	r0, #4
 80014bc:	d005      	beq.n	80014ca <__aeabi_i2f+0x7e>
 80014be:	3104      	adds	r1, #4
 80014c0:	014a      	lsls	r2, r1, #5
 80014c2:	d502      	bpl.n	80014ca <__aeabi_i2f+0x7e>
 80014c4:	239f      	movs	r3, #159	; 0x9f
 80014c6:	4039      	ands	r1, r7
 80014c8:	1b5b      	subs	r3, r3, r5
 80014ca:	0189      	lsls	r1, r1, #6
 80014cc:	0a4e      	lsrs	r6, r1, #9
 80014ce:	b2d8      	uxtb	r0, r3
 80014d0:	e7d6      	b.n	8001480 <__aeabi_i2f+0x34>
 80014d2:	1f6a      	subs	r2, r5, #5
 80014d4:	4096      	lsls	r6, r2
 80014d6:	0031      	movs	r1, r6
 80014d8:	4f02      	ldr	r7, [pc, #8]	; (80014e4 <__aeabi_i2f+0x98>)
 80014da:	4039      	ands	r1, r7
 80014dc:	0772      	lsls	r2, r6, #29
 80014de:	d0f4      	beq.n	80014ca <__aeabi_i2f+0x7e>
 80014e0:	e7e9      	b.n	80014b6 <__aeabi_i2f+0x6a>
 80014e2:	46c0      	nop			; (mov r8, r8)
 80014e4:	fbffffff 	.word	0xfbffffff

080014e8 <__aeabi_ui2f>:
 80014e8:	b570      	push	{r4, r5, r6, lr}
 80014ea:	1e05      	subs	r5, r0, #0
 80014ec:	d00e      	beq.n	800150c <__aeabi_ui2f+0x24>
 80014ee:	f001 fef3 	bl	80032d8 <__clzsi2>
 80014f2:	239e      	movs	r3, #158	; 0x9e
 80014f4:	0004      	movs	r4, r0
 80014f6:	1a1b      	subs	r3, r3, r0
 80014f8:	2b96      	cmp	r3, #150	; 0x96
 80014fa:	dc0c      	bgt.n	8001516 <__aeabi_ui2f+0x2e>
 80014fc:	2808      	cmp	r0, #8
 80014fe:	dd01      	ble.n	8001504 <__aeabi_ui2f+0x1c>
 8001500:	3c08      	subs	r4, #8
 8001502:	40a5      	lsls	r5, r4
 8001504:	026d      	lsls	r5, r5, #9
 8001506:	0a6d      	lsrs	r5, r5, #9
 8001508:	b2d8      	uxtb	r0, r3
 800150a:	e001      	b.n	8001510 <__aeabi_ui2f+0x28>
 800150c:	2000      	movs	r0, #0
 800150e:	2500      	movs	r5, #0
 8001510:	05c0      	lsls	r0, r0, #23
 8001512:	4328      	orrs	r0, r5
 8001514:	bd70      	pop	{r4, r5, r6, pc}
 8001516:	2b99      	cmp	r3, #153	; 0x99
 8001518:	dd09      	ble.n	800152e <__aeabi_ui2f+0x46>
 800151a:	0002      	movs	r2, r0
 800151c:	0029      	movs	r1, r5
 800151e:	321b      	adds	r2, #27
 8001520:	4091      	lsls	r1, r2
 8001522:	1e4a      	subs	r2, r1, #1
 8001524:	4191      	sbcs	r1, r2
 8001526:	2205      	movs	r2, #5
 8001528:	1a12      	subs	r2, r2, r0
 800152a:	40d5      	lsrs	r5, r2
 800152c:	430d      	orrs	r5, r1
 800152e:	2c05      	cmp	r4, #5
 8001530:	dc12      	bgt.n	8001558 <__aeabi_ui2f+0x70>
 8001532:	0029      	movs	r1, r5
 8001534:	4e0c      	ldr	r6, [pc, #48]	; (8001568 <__aeabi_ui2f+0x80>)
 8001536:	4031      	ands	r1, r6
 8001538:	076a      	lsls	r2, r5, #29
 800153a:	d009      	beq.n	8001550 <__aeabi_ui2f+0x68>
 800153c:	200f      	movs	r0, #15
 800153e:	4028      	ands	r0, r5
 8001540:	2804      	cmp	r0, #4
 8001542:	d005      	beq.n	8001550 <__aeabi_ui2f+0x68>
 8001544:	3104      	adds	r1, #4
 8001546:	014a      	lsls	r2, r1, #5
 8001548:	d502      	bpl.n	8001550 <__aeabi_ui2f+0x68>
 800154a:	239f      	movs	r3, #159	; 0x9f
 800154c:	4031      	ands	r1, r6
 800154e:	1b1b      	subs	r3, r3, r4
 8001550:	0189      	lsls	r1, r1, #6
 8001552:	0a4d      	lsrs	r5, r1, #9
 8001554:	b2d8      	uxtb	r0, r3
 8001556:	e7db      	b.n	8001510 <__aeabi_ui2f+0x28>
 8001558:	1f62      	subs	r2, r4, #5
 800155a:	4095      	lsls	r5, r2
 800155c:	0029      	movs	r1, r5
 800155e:	4e02      	ldr	r6, [pc, #8]	; (8001568 <__aeabi_ui2f+0x80>)
 8001560:	4031      	ands	r1, r6
 8001562:	076a      	lsls	r2, r5, #29
 8001564:	d0f4      	beq.n	8001550 <__aeabi_ui2f+0x68>
 8001566:	e7e9      	b.n	800153c <__aeabi_ui2f+0x54>
 8001568:	fbffffff 	.word	0xfbffffff

0800156c <__aeabi_dadd>:
 800156c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800156e:	464f      	mov	r7, r9
 8001570:	4646      	mov	r6, r8
 8001572:	46d6      	mov	lr, sl
 8001574:	000d      	movs	r5, r1
 8001576:	0004      	movs	r4, r0
 8001578:	b5c0      	push	{r6, r7, lr}
 800157a:	001f      	movs	r7, r3
 800157c:	0011      	movs	r1, r2
 800157e:	0328      	lsls	r0, r5, #12
 8001580:	0f62      	lsrs	r2, r4, #29
 8001582:	0a40      	lsrs	r0, r0, #9
 8001584:	4310      	orrs	r0, r2
 8001586:	007a      	lsls	r2, r7, #1
 8001588:	0d52      	lsrs	r2, r2, #21
 800158a:	00e3      	lsls	r3, r4, #3
 800158c:	033c      	lsls	r4, r7, #12
 800158e:	4691      	mov	r9, r2
 8001590:	0a64      	lsrs	r4, r4, #9
 8001592:	0ffa      	lsrs	r2, r7, #31
 8001594:	0f4f      	lsrs	r7, r1, #29
 8001596:	006e      	lsls	r6, r5, #1
 8001598:	4327      	orrs	r7, r4
 800159a:	4692      	mov	sl, r2
 800159c:	46b8      	mov	r8, r7
 800159e:	0d76      	lsrs	r6, r6, #21
 80015a0:	0fed      	lsrs	r5, r5, #31
 80015a2:	00c9      	lsls	r1, r1, #3
 80015a4:	4295      	cmp	r5, r2
 80015a6:	d100      	bne.n	80015aa <__aeabi_dadd+0x3e>
 80015a8:	e099      	b.n	80016de <__aeabi_dadd+0x172>
 80015aa:	464c      	mov	r4, r9
 80015ac:	1b34      	subs	r4, r6, r4
 80015ae:	46a4      	mov	ip, r4
 80015b0:	2c00      	cmp	r4, #0
 80015b2:	dc00      	bgt.n	80015b6 <__aeabi_dadd+0x4a>
 80015b4:	e07c      	b.n	80016b0 <__aeabi_dadd+0x144>
 80015b6:	464a      	mov	r2, r9
 80015b8:	2a00      	cmp	r2, #0
 80015ba:	d100      	bne.n	80015be <__aeabi_dadd+0x52>
 80015bc:	e0b8      	b.n	8001730 <__aeabi_dadd+0x1c4>
 80015be:	4ac5      	ldr	r2, [pc, #788]	; (80018d4 <__aeabi_dadd+0x368>)
 80015c0:	4296      	cmp	r6, r2
 80015c2:	d100      	bne.n	80015c6 <__aeabi_dadd+0x5a>
 80015c4:	e11c      	b.n	8001800 <__aeabi_dadd+0x294>
 80015c6:	2280      	movs	r2, #128	; 0x80
 80015c8:	003c      	movs	r4, r7
 80015ca:	0412      	lsls	r2, r2, #16
 80015cc:	4314      	orrs	r4, r2
 80015ce:	46a0      	mov	r8, r4
 80015d0:	4662      	mov	r2, ip
 80015d2:	2a38      	cmp	r2, #56	; 0x38
 80015d4:	dd00      	ble.n	80015d8 <__aeabi_dadd+0x6c>
 80015d6:	e161      	b.n	800189c <__aeabi_dadd+0x330>
 80015d8:	2a1f      	cmp	r2, #31
 80015da:	dd00      	ble.n	80015de <__aeabi_dadd+0x72>
 80015dc:	e1cc      	b.n	8001978 <__aeabi_dadd+0x40c>
 80015de:	4664      	mov	r4, ip
 80015e0:	2220      	movs	r2, #32
 80015e2:	1b12      	subs	r2, r2, r4
 80015e4:	4644      	mov	r4, r8
 80015e6:	4094      	lsls	r4, r2
 80015e8:	000f      	movs	r7, r1
 80015ea:	46a1      	mov	r9, r4
 80015ec:	4664      	mov	r4, ip
 80015ee:	4091      	lsls	r1, r2
 80015f0:	40e7      	lsrs	r7, r4
 80015f2:	464c      	mov	r4, r9
 80015f4:	1e4a      	subs	r2, r1, #1
 80015f6:	4191      	sbcs	r1, r2
 80015f8:	433c      	orrs	r4, r7
 80015fa:	4642      	mov	r2, r8
 80015fc:	4321      	orrs	r1, r4
 80015fe:	4664      	mov	r4, ip
 8001600:	40e2      	lsrs	r2, r4
 8001602:	1a80      	subs	r0, r0, r2
 8001604:	1a5c      	subs	r4, r3, r1
 8001606:	42a3      	cmp	r3, r4
 8001608:	419b      	sbcs	r3, r3
 800160a:	425f      	negs	r7, r3
 800160c:	1bc7      	subs	r7, r0, r7
 800160e:	023b      	lsls	r3, r7, #8
 8001610:	d400      	bmi.n	8001614 <__aeabi_dadd+0xa8>
 8001612:	e0d0      	b.n	80017b6 <__aeabi_dadd+0x24a>
 8001614:	027f      	lsls	r7, r7, #9
 8001616:	0a7f      	lsrs	r7, r7, #9
 8001618:	2f00      	cmp	r7, #0
 800161a:	d100      	bne.n	800161e <__aeabi_dadd+0xb2>
 800161c:	e0ff      	b.n	800181e <__aeabi_dadd+0x2b2>
 800161e:	0038      	movs	r0, r7
 8001620:	f001 fe5a 	bl	80032d8 <__clzsi2>
 8001624:	0001      	movs	r1, r0
 8001626:	3908      	subs	r1, #8
 8001628:	2320      	movs	r3, #32
 800162a:	0022      	movs	r2, r4
 800162c:	1a5b      	subs	r3, r3, r1
 800162e:	408f      	lsls	r7, r1
 8001630:	40da      	lsrs	r2, r3
 8001632:	408c      	lsls	r4, r1
 8001634:	4317      	orrs	r7, r2
 8001636:	42b1      	cmp	r1, r6
 8001638:	da00      	bge.n	800163c <__aeabi_dadd+0xd0>
 800163a:	e0ff      	b.n	800183c <__aeabi_dadd+0x2d0>
 800163c:	1b89      	subs	r1, r1, r6
 800163e:	1c4b      	adds	r3, r1, #1
 8001640:	2b1f      	cmp	r3, #31
 8001642:	dd00      	ble.n	8001646 <__aeabi_dadd+0xda>
 8001644:	e0a8      	b.n	8001798 <__aeabi_dadd+0x22c>
 8001646:	2220      	movs	r2, #32
 8001648:	0039      	movs	r1, r7
 800164a:	1ad2      	subs	r2, r2, r3
 800164c:	0020      	movs	r0, r4
 800164e:	4094      	lsls	r4, r2
 8001650:	4091      	lsls	r1, r2
 8001652:	40d8      	lsrs	r0, r3
 8001654:	1e62      	subs	r2, r4, #1
 8001656:	4194      	sbcs	r4, r2
 8001658:	40df      	lsrs	r7, r3
 800165a:	2600      	movs	r6, #0
 800165c:	4301      	orrs	r1, r0
 800165e:	430c      	orrs	r4, r1
 8001660:	0763      	lsls	r3, r4, #29
 8001662:	d009      	beq.n	8001678 <__aeabi_dadd+0x10c>
 8001664:	230f      	movs	r3, #15
 8001666:	4023      	ands	r3, r4
 8001668:	2b04      	cmp	r3, #4
 800166a:	d005      	beq.n	8001678 <__aeabi_dadd+0x10c>
 800166c:	1d23      	adds	r3, r4, #4
 800166e:	42a3      	cmp	r3, r4
 8001670:	41a4      	sbcs	r4, r4
 8001672:	4264      	negs	r4, r4
 8001674:	193f      	adds	r7, r7, r4
 8001676:	001c      	movs	r4, r3
 8001678:	023b      	lsls	r3, r7, #8
 800167a:	d400      	bmi.n	800167e <__aeabi_dadd+0x112>
 800167c:	e09e      	b.n	80017bc <__aeabi_dadd+0x250>
 800167e:	4b95      	ldr	r3, [pc, #596]	; (80018d4 <__aeabi_dadd+0x368>)
 8001680:	3601      	adds	r6, #1
 8001682:	429e      	cmp	r6, r3
 8001684:	d100      	bne.n	8001688 <__aeabi_dadd+0x11c>
 8001686:	e0b7      	b.n	80017f8 <__aeabi_dadd+0x28c>
 8001688:	4a93      	ldr	r2, [pc, #588]	; (80018d8 <__aeabi_dadd+0x36c>)
 800168a:	08e4      	lsrs	r4, r4, #3
 800168c:	4017      	ands	r7, r2
 800168e:	077b      	lsls	r3, r7, #29
 8001690:	0571      	lsls	r1, r6, #21
 8001692:	027f      	lsls	r7, r7, #9
 8001694:	4323      	orrs	r3, r4
 8001696:	0b3f      	lsrs	r7, r7, #12
 8001698:	0d4a      	lsrs	r2, r1, #21
 800169a:	0512      	lsls	r2, r2, #20
 800169c:	433a      	orrs	r2, r7
 800169e:	07ed      	lsls	r5, r5, #31
 80016a0:	432a      	orrs	r2, r5
 80016a2:	0018      	movs	r0, r3
 80016a4:	0011      	movs	r1, r2
 80016a6:	bce0      	pop	{r5, r6, r7}
 80016a8:	46ba      	mov	sl, r7
 80016aa:	46b1      	mov	r9, r6
 80016ac:	46a8      	mov	r8, r5
 80016ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016b0:	2c00      	cmp	r4, #0
 80016b2:	d04b      	beq.n	800174c <__aeabi_dadd+0x1e0>
 80016b4:	464c      	mov	r4, r9
 80016b6:	1ba4      	subs	r4, r4, r6
 80016b8:	46a4      	mov	ip, r4
 80016ba:	2e00      	cmp	r6, #0
 80016bc:	d000      	beq.n	80016c0 <__aeabi_dadd+0x154>
 80016be:	e123      	b.n	8001908 <__aeabi_dadd+0x39c>
 80016c0:	0004      	movs	r4, r0
 80016c2:	431c      	orrs	r4, r3
 80016c4:	d100      	bne.n	80016c8 <__aeabi_dadd+0x15c>
 80016c6:	e1af      	b.n	8001a28 <__aeabi_dadd+0x4bc>
 80016c8:	4662      	mov	r2, ip
 80016ca:	1e54      	subs	r4, r2, #1
 80016cc:	2a01      	cmp	r2, #1
 80016ce:	d100      	bne.n	80016d2 <__aeabi_dadd+0x166>
 80016d0:	e215      	b.n	8001afe <__aeabi_dadd+0x592>
 80016d2:	4d80      	ldr	r5, [pc, #512]	; (80018d4 <__aeabi_dadd+0x368>)
 80016d4:	45ac      	cmp	ip, r5
 80016d6:	d100      	bne.n	80016da <__aeabi_dadd+0x16e>
 80016d8:	e1c8      	b.n	8001a6c <__aeabi_dadd+0x500>
 80016da:	46a4      	mov	ip, r4
 80016dc:	e11b      	b.n	8001916 <__aeabi_dadd+0x3aa>
 80016de:	464a      	mov	r2, r9
 80016e0:	1ab2      	subs	r2, r6, r2
 80016e2:	4694      	mov	ip, r2
 80016e4:	2a00      	cmp	r2, #0
 80016e6:	dc00      	bgt.n	80016ea <__aeabi_dadd+0x17e>
 80016e8:	e0ac      	b.n	8001844 <__aeabi_dadd+0x2d8>
 80016ea:	464a      	mov	r2, r9
 80016ec:	2a00      	cmp	r2, #0
 80016ee:	d043      	beq.n	8001778 <__aeabi_dadd+0x20c>
 80016f0:	4a78      	ldr	r2, [pc, #480]	; (80018d4 <__aeabi_dadd+0x368>)
 80016f2:	4296      	cmp	r6, r2
 80016f4:	d100      	bne.n	80016f8 <__aeabi_dadd+0x18c>
 80016f6:	e1af      	b.n	8001a58 <__aeabi_dadd+0x4ec>
 80016f8:	2280      	movs	r2, #128	; 0x80
 80016fa:	003c      	movs	r4, r7
 80016fc:	0412      	lsls	r2, r2, #16
 80016fe:	4314      	orrs	r4, r2
 8001700:	46a0      	mov	r8, r4
 8001702:	4662      	mov	r2, ip
 8001704:	2a38      	cmp	r2, #56	; 0x38
 8001706:	dc67      	bgt.n	80017d8 <__aeabi_dadd+0x26c>
 8001708:	2a1f      	cmp	r2, #31
 800170a:	dc00      	bgt.n	800170e <__aeabi_dadd+0x1a2>
 800170c:	e15f      	b.n	80019ce <__aeabi_dadd+0x462>
 800170e:	4647      	mov	r7, r8
 8001710:	3a20      	subs	r2, #32
 8001712:	40d7      	lsrs	r7, r2
 8001714:	4662      	mov	r2, ip
 8001716:	2a20      	cmp	r2, #32
 8001718:	d005      	beq.n	8001726 <__aeabi_dadd+0x1ba>
 800171a:	4664      	mov	r4, ip
 800171c:	2240      	movs	r2, #64	; 0x40
 800171e:	1b12      	subs	r2, r2, r4
 8001720:	4644      	mov	r4, r8
 8001722:	4094      	lsls	r4, r2
 8001724:	4321      	orrs	r1, r4
 8001726:	1e4a      	subs	r2, r1, #1
 8001728:	4191      	sbcs	r1, r2
 800172a:	000c      	movs	r4, r1
 800172c:	433c      	orrs	r4, r7
 800172e:	e057      	b.n	80017e0 <__aeabi_dadd+0x274>
 8001730:	003a      	movs	r2, r7
 8001732:	430a      	orrs	r2, r1
 8001734:	d100      	bne.n	8001738 <__aeabi_dadd+0x1cc>
 8001736:	e105      	b.n	8001944 <__aeabi_dadd+0x3d8>
 8001738:	0022      	movs	r2, r4
 800173a:	3a01      	subs	r2, #1
 800173c:	2c01      	cmp	r4, #1
 800173e:	d100      	bne.n	8001742 <__aeabi_dadd+0x1d6>
 8001740:	e182      	b.n	8001a48 <__aeabi_dadd+0x4dc>
 8001742:	4c64      	ldr	r4, [pc, #400]	; (80018d4 <__aeabi_dadd+0x368>)
 8001744:	45a4      	cmp	ip, r4
 8001746:	d05b      	beq.n	8001800 <__aeabi_dadd+0x294>
 8001748:	4694      	mov	ip, r2
 800174a:	e741      	b.n	80015d0 <__aeabi_dadd+0x64>
 800174c:	4c63      	ldr	r4, [pc, #396]	; (80018dc <__aeabi_dadd+0x370>)
 800174e:	1c77      	adds	r7, r6, #1
 8001750:	4227      	tst	r7, r4
 8001752:	d000      	beq.n	8001756 <__aeabi_dadd+0x1ea>
 8001754:	e0c4      	b.n	80018e0 <__aeabi_dadd+0x374>
 8001756:	0004      	movs	r4, r0
 8001758:	431c      	orrs	r4, r3
 800175a:	2e00      	cmp	r6, #0
 800175c:	d000      	beq.n	8001760 <__aeabi_dadd+0x1f4>
 800175e:	e169      	b.n	8001a34 <__aeabi_dadd+0x4c8>
 8001760:	2c00      	cmp	r4, #0
 8001762:	d100      	bne.n	8001766 <__aeabi_dadd+0x1fa>
 8001764:	e1bf      	b.n	8001ae6 <__aeabi_dadd+0x57a>
 8001766:	4644      	mov	r4, r8
 8001768:	430c      	orrs	r4, r1
 800176a:	d000      	beq.n	800176e <__aeabi_dadd+0x202>
 800176c:	e1d0      	b.n	8001b10 <__aeabi_dadd+0x5a4>
 800176e:	0742      	lsls	r2, r0, #29
 8001770:	08db      	lsrs	r3, r3, #3
 8001772:	4313      	orrs	r3, r2
 8001774:	08c0      	lsrs	r0, r0, #3
 8001776:	e029      	b.n	80017cc <__aeabi_dadd+0x260>
 8001778:	003a      	movs	r2, r7
 800177a:	430a      	orrs	r2, r1
 800177c:	d100      	bne.n	8001780 <__aeabi_dadd+0x214>
 800177e:	e170      	b.n	8001a62 <__aeabi_dadd+0x4f6>
 8001780:	4662      	mov	r2, ip
 8001782:	4664      	mov	r4, ip
 8001784:	3a01      	subs	r2, #1
 8001786:	2c01      	cmp	r4, #1
 8001788:	d100      	bne.n	800178c <__aeabi_dadd+0x220>
 800178a:	e0e0      	b.n	800194e <__aeabi_dadd+0x3e2>
 800178c:	4c51      	ldr	r4, [pc, #324]	; (80018d4 <__aeabi_dadd+0x368>)
 800178e:	45a4      	cmp	ip, r4
 8001790:	d100      	bne.n	8001794 <__aeabi_dadd+0x228>
 8001792:	e161      	b.n	8001a58 <__aeabi_dadd+0x4ec>
 8001794:	4694      	mov	ip, r2
 8001796:	e7b4      	b.n	8001702 <__aeabi_dadd+0x196>
 8001798:	003a      	movs	r2, r7
 800179a:	391f      	subs	r1, #31
 800179c:	40ca      	lsrs	r2, r1
 800179e:	0011      	movs	r1, r2
 80017a0:	2b20      	cmp	r3, #32
 80017a2:	d003      	beq.n	80017ac <__aeabi_dadd+0x240>
 80017a4:	2240      	movs	r2, #64	; 0x40
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	409f      	lsls	r7, r3
 80017aa:	433c      	orrs	r4, r7
 80017ac:	1e63      	subs	r3, r4, #1
 80017ae:	419c      	sbcs	r4, r3
 80017b0:	2700      	movs	r7, #0
 80017b2:	2600      	movs	r6, #0
 80017b4:	430c      	orrs	r4, r1
 80017b6:	0763      	lsls	r3, r4, #29
 80017b8:	d000      	beq.n	80017bc <__aeabi_dadd+0x250>
 80017ba:	e753      	b.n	8001664 <__aeabi_dadd+0xf8>
 80017bc:	46b4      	mov	ip, r6
 80017be:	08e4      	lsrs	r4, r4, #3
 80017c0:	077b      	lsls	r3, r7, #29
 80017c2:	4323      	orrs	r3, r4
 80017c4:	08f8      	lsrs	r0, r7, #3
 80017c6:	4a43      	ldr	r2, [pc, #268]	; (80018d4 <__aeabi_dadd+0x368>)
 80017c8:	4594      	cmp	ip, r2
 80017ca:	d01d      	beq.n	8001808 <__aeabi_dadd+0x29c>
 80017cc:	4662      	mov	r2, ip
 80017ce:	0307      	lsls	r7, r0, #12
 80017d0:	0552      	lsls	r2, r2, #21
 80017d2:	0b3f      	lsrs	r7, r7, #12
 80017d4:	0d52      	lsrs	r2, r2, #21
 80017d6:	e760      	b.n	800169a <__aeabi_dadd+0x12e>
 80017d8:	4644      	mov	r4, r8
 80017da:	430c      	orrs	r4, r1
 80017dc:	1e62      	subs	r2, r4, #1
 80017de:	4194      	sbcs	r4, r2
 80017e0:	18e4      	adds	r4, r4, r3
 80017e2:	429c      	cmp	r4, r3
 80017e4:	419b      	sbcs	r3, r3
 80017e6:	425f      	negs	r7, r3
 80017e8:	183f      	adds	r7, r7, r0
 80017ea:	023b      	lsls	r3, r7, #8
 80017ec:	d5e3      	bpl.n	80017b6 <__aeabi_dadd+0x24a>
 80017ee:	4b39      	ldr	r3, [pc, #228]	; (80018d4 <__aeabi_dadd+0x368>)
 80017f0:	3601      	adds	r6, #1
 80017f2:	429e      	cmp	r6, r3
 80017f4:	d000      	beq.n	80017f8 <__aeabi_dadd+0x28c>
 80017f6:	e0b5      	b.n	8001964 <__aeabi_dadd+0x3f8>
 80017f8:	0032      	movs	r2, r6
 80017fa:	2700      	movs	r7, #0
 80017fc:	2300      	movs	r3, #0
 80017fe:	e74c      	b.n	800169a <__aeabi_dadd+0x12e>
 8001800:	0742      	lsls	r2, r0, #29
 8001802:	08db      	lsrs	r3, r3, #3
 8001804:	4313      	orrs	r3, r2
 8001806:	08c0      	lsrs	r0, r0, #3
 8001808:	001a      	movs	r2, r3
 800180a:	4302      	orrs	r2, r0
 800180c:	d100      	bne.n	8001810 <__aeabi_dadd+0x2a4>
 800180e:	e1e1      	b.n	8001bd4 <__aeabi_dadd+0x668>
 8001810:	2780      	movs	r7, #128	; 0x80
 8001812:	033f      	lsls	r7, r7, #12
 8001814:	4307      	orrs	r7, r0
 8001816:	033f      	lsls	r7, r7, #12
 8001818:	4a2e      	ldr	r2, [pc, #184]	; (80018d4 <__aeabi_dadd+0x368>)
 800181a:	0b3f      	lsrs	r7, r7, #12
 800181c:	e73d      	b.n	800169a <__aeabi_dadd+0x12e>
 800181e:	0020      	movs	r0, r4
 8001820:	f001 fd5a 	bl	80032d8 <__clzsi2>
 8001824:	0001      	movs	r1, r0
 8001826:	3118      	adds	r1, #24
 8001828:	291f      	cmp	r1, #31
 800182a:	dc00      	bgt.n	800182e <__aeabi_dadd+0x2c2>
 800182c:	e6fc      	b.n	8001628 <__aeabi_dadd+0xbc>
 800182e:	3808      	subs	r0, #8
 8001830:	4084      	lsls	r4, r0
 8001832:	0027      	movs	r7, r4
 8001834:	2400      	movs	r4, #0
 8001836:	42b1      	cmp	r1, r6
 8001838:	db00      	blt.n	800183c <__aeabi_dadd+0x2d0>
 800183a:	e6ff      	b.n	800163c <__aeabi_dadd+0xd0>
 800183c:	4a26      	ldr	r2, [pc, #152]	; (80018d8 <__aeabi_dadd+0x36c>)
 800183e:	1a76      	subs	r6, r6, r1
 8001840:	4017      	ands	r7, r2
 8001842:	e70d      	b.n	8001660 <__aeabi_dadd+0xf4>
 8001844:	2a00      	cmp	r2, #0
 8001846:	d02f      	beq.n	80018a8 <__aeabi_dadd+0x33c>
 8001848:	464a      	mov	r2, r9
 800184a:	1b92      	subs	r2, r2, r6
 800184c:	4694      	mov	ip, r2
 800184e:	2e00      	cmp	r6, #0
 8001850:	d100      	bne.n	8001854 <__aeabi_dadd+0x2e8>
 8001852:	e0ad      	b.n	80019b0 <__aeabi_dadd+0x444>
 8001854:	4a1f      	ldr	r2, [pc, #124]	; (80018d4 <__aeabi_dadd+0x368>)
 8001856:	4591      	cmp	r9, r2
 8001858:	d100      	bne.n	800185c <__aeabi_dadd+0x2f0>
 800185a:	e10f      	b.n	8001a7c <__aeabi_dadd+0x510>
 800185c:	2280      	movs	r2, #128	; 0x80
 800185e:	0412      	lsls	r2, r2, #16
 8001860:	4310      	orrs	r0, r2
 8001862:	4662      	mov	r2, ip
 8001864:	2a38      	cmp	r2, #56	; 0x38
 8001866:	dd00      	ble.n	800186a <__aeabi_dadd+0x2fe>
 8001868:	e10f      	b.n	8001a8a <__aeabi_dadd+0x51e>
 800186a:	2a1f      	cmp	r2, #31
 800186c:	dd00      	ble.n	8001870 <__aeabi_dadd+0x304>
 800186e:	e180      	b.n	8001b72 <__aeabi_dadd+0x606>
 8001870:	4664      	mov	r4, ip
 8001872:	2220      	movs	r2, #32
 8001874:	001e      	movs	r6, r3
 8001876:	1b12      	subs	r2, r2, r4
 8001878:	4667      	mov	r7, ip
 800187a:	0004      	movs	r4, r0
 800187c:	4093      	lsls	r3, r2
 800187e:	4094      	lsls	r4, r2
 8001880:	40fe      	lsrs	r6, r7
 8001882:	1e5a      	subs	r2, r3, #1
 8001884:	4193      	sbcs	r3, r2
 8001886:	40f8      	lsrs	r0, r7
 8001888:	4334      	orrs	r4, r6
 800188a:	431c      	orrs	r4, r3
 800188c:	4480      	add	r8, r0
 800188e:	1864      	adds	r4, r4, r1
 8001890:	428c      	cmp	r4, r1
 8001892:	41bf      	sbcs	r7, r7
 8001894:	427f      	negs	r7, r7
 8001896:	464e      	mov	r6, r9
 8001898:	4447      	add	r7, r8
 800189a:	e7a6      	b.n	80017ea <__aeabi_dadd+0x27e>
 800189c:	4642      	mov	r2, r8
 800189e:	430a      	orrs	r2, r1
 80018a0:	0011      	movs	r1, r2
 80018a2:	1e4a      	subs	r2, r1, #1
 80018a4:	4191      	sbcs	r1, r2
 80018a6:	e6ad      	b.n	8001604 <__aeabi_dadd+0x98>
 80018a8:	4c0c      	ldr	r4, [pc, #48]	; (80018dc <__aeabi_dadd+0x370>)
 80018aa:	1c72      	adds	r2, r6, #1
 80018ac:	4222      	tst	r2, r4
 80018ae:	d000      	beq.n	80018b2 <__aeabi_dadd+0x346>
 80018b0:	e0a1      	b.n	80019f6 <__aeabi_dadd+0x48a>
 80018b2:	0002      	movs	r2, r0
 80018b4:	431a      	orrs	r2, r3
 80018b6:	2e00      	cmp	r6, #0
 80018b8:	d000      	beq.n	80018bc <__aeabi_dadd+0x350>
 80018ba:	e0fa      	b.n	8001ab2 <__aeabi_dadd+0x546>
 80018bc:	2a00      	cmp	r2, #0
 80018be:	d100      	bne.n	80018c2 <__aeabi_dadd+0x356>
 80018c0:	e145      	b.n	8001b4e <__aeabi_dadd+0x5e2>
 80018c2:	003a      	movs	r2, r7
 80018c4:	430a      	orrs	r2, r1
 80018c6:	d000      	beq.n	80018ca <__aeabi_dadd+0x35e>
 80018c8:	e146      	b.n	8001b58 <__aeabi_dadd+0x5ec>
 80018ca:	0742      	lsls	r2, r0, #29
 80018cc:	08db      	lsrs	r3, r3, #3
 80018ce:	4313      	orrs	r3, r2
 80018d0:	08c0      	lsrs	r0, r0, #3
 80018d2:	e77b      	b.n	80017cc <__aeabi_dadd+0x260>
 80018d4:	000007ff 	.word	0x000007ff
 80018d8:	ff7fffff 	.word	0xff7fffff
 80018dc:	000007fe 	.word	0x000007fe
 80018e0:	4647      	mov	r7, r8
 80018e2:	1a5c      	subs	r4, r3, r1
 80018e4:	1bc2      	subs	r2, r0, r7
 80018e6:	42a3      	cmp	r3, r4
 80018e8:	41bf      	sbcs	r7, r7
 80018ea:	427f      	negs	r7, r7
 80018ec:	46b9      	mov	r9, r7
 80018ee:	0017      	movs	r7, r2
 80018f0:	464a      	mov	r2, r9
 80018f2:	1abf      	subs	r7, r7, r2
 80018f4:	023a      	lsls	r2, r7, #8
 80018f6:	d500      	bpl.n	80018fa <__aeabi_dadd+0x38e>
 80018f8:	e08d      	b.n	8001a16 <__aeabi_dadd+0x4aa>
 80018fa:	0023      	movs	r3, r4
 80018fc:	433b      	orrs	r3, r7
 80018fe:	d000      	beq.n	8001902 <__aeabi_dadd+0x396>
 8001900:	e68a      	b.n	8001618 <__aeabi_dadd+0xac>
 8001902:	2000      	movs	r0, #0
 8001904:	2500      	movs	r5, #0
 8001906:	e761      	b.n	80017cc <__aeabi_dadd+0x260>
 8001908:	4cb4      	ldr	r4, [pc, #720]	; (8001bdc <__aeabi_dadd+0x670>)
 800190a:	45a1      	cmp	r9, r4
 800190c:	d100      	bne.n	8001910 <__aeabi_dadd+0x3a4>
 800190e:	e0ad      	b.n	8001a6c <__aeabi_dadd+0x500>
 8001910:	2480      	movs	r4, #128	; 0x80
 8001912:	0424      	lsls	r4, r4, #16
 8001914:	4320      	orrs	r0, r4
 8001916:	4664      	mov	r4, ip
 8001918:	2c38      	cmp	r4, #56	; 0x38
 800191a:	dc3d      	bgt.n	8001998 <__aeabi_dadd+0x42c>
 800191c:	4662      	mov	r2, ip
 800191e:	2c1f      	cmp	r4, #31
 8001920:	dd00      	ble.n	8001924 <__aeabi_dadd+0x3b8>
 8001922:	e0b7      	b.n	8001a94 <__aeabi_dadd+0x528>
 8001924:	2520      	movs	r5, #32
 8001926:	001e      	movs	r6, r3
 8001928:	1b2d      	subs	r5, r5, r4
 800192a:	0004      	movs	r4, r0
 800192c:	40ab      	lsls	r3, r5
 800192e:	40ac      	lsls	r4, r5
 8001930:	40d6      	lsrs	r6, r2
 8001932:	40d0      	lsrs	r0, r2
 8001934:	4642      	mov	r2, r8
 8001936:	1e5d      	subs	r5, r3, #1
 8001938:	41ab      	sbcs	r3, r5
 800193a:	4334      	orrs	r4, r6
 800193c:	1a12      	subs	r2, r2, r0
 800193e:	4690      	mov	r8, r2
 8001940:	4323      	orrs	r3, r4
 8001942:	e02c      	b.n	800199e <__aeabi_dadd+0x432>
 8001944:	0742      	lsls	r2, r0, #29
 8001946:	08db      	lsrs	r3, r3, #3
 8001948:	4313      	orrs	r3, r2
 800194a:	08c0      	lsrs	r0, r0, #3
 800194c:	e73b      	b.n	80017c6 <__aeabi_dadd+0x25a>
 800194e:	185c      	adds	r4, r3, r1
 8001950:	429c      	cmp	r4, r3
 8001952:	419b      	sbcs	r3, r3
 8001954:	4440      	add	r0, r8
 8001956:	425b      	negs	r3, r3
 8001958:	18c7      	adds	r7, r0, r3
 800195a:	2601      	movs	r6, #1
 800195c:	023b      	lsls	r3, r7, #8
 800195e:	d400      	bmi.n	8001962 <__aeabi_dadd+0x3f6>
 8001960:	e729      	b.n	80017b6 <__aeabi_dadd+0x24a>
 8001962:	2602      	movs	r6, #2
 8001964:	4a9e      	ldr	r2, [pc, #632]	; (8001be0 <__aeabi_dadd+0x674>)
 8001966:	0863      	lsrs	r3, r4, #1
 8001968:	4017      	ands	r7, r2
 800196a:	2201      	movs	r2, #1
 800196c:	4014      	ands	r4, r2
 800196e:	431c      	orrs	r4, r3
 8001970:	07fb      	lsls	r3, r7, #31
 8001972:	431c      	orrs	r4, r3
 8001974:	087f      	lsrs	r7, r7, #1
 8001976:	e673      	b.n	8001660 <__aeabi_dadd+0xf4>
 8001978:	4644      	mov	r4, r8
 800197a:	3a20      	subs	r2, #32
 800197c:	40d4      	lsrs	r4, r2
 800197e:	4662      	mov	r2, ip
 8001980:	2a20      	cmp	r2, #32
 8001982:	d005      	beq.n	8001990 <__aeabi_dadd+0x424>
 8001984:	4667      	mov	r7, ip
 8001986:	2240      	movs	r2, #64	; 0x40
 8001988:	1bd2      	subs	r2, r2, r7
 800198a:	4647      	mov	r7, r8
 800198c:	4097      	lsls	r7, r2
 800198e:	4339      	orrs	r1, r7
 8001990:	1e4a      	subs	r2, r1, #1
 8001992:	4191      	sbcs	r1, r2
 8001994:	4321      	orrs	r1, r4
 8001996:	e635      	b.n	8001604 <__aeabi_dadd+0x98>
 8001998:	4303      	orrs	r3, r0
 800199a:	1e58      	subs	r0, r3, #1
 800199c:	4183      	sbcs	r3, r0
 800199e:	1acc      	subs	r4, r1, r3
 80019a0:	42a1      	cmp	r1, r4
 80019a2:	41bf      	sbcs	r7, r7
 80019a4:	4643      	mov	r3, r8
 80019a6:	427f      	negs	r7, r7
 80019a8:	4655      	mov	r5, sl
 80019aa:	464e      	mov	r6, r9
 80019ac:	1bdf      	subs	r7, r3, r7
 80019ae:	e62e      	b.n	800160e <__aeabi_dadd+0xa2>
 80019b0:	0002      	movs	r2, r0
 80019b2:	431a      	orrs	r2, r3
 80019b4:	d100      	bne.n	80019b8 <__aeabi_dadd+0x44c>
 80019b6:	e0bd      	b.n	8001b34 <__aeabi_dadd+0x5c8>
 80019b8:	4662      	mov	r2, ip
 80019ba:	4664      	mov	r4, ip
 80019bc:	3a01      	subs	r2, #1
 80019be:	2c01      	cmp	r4, #1
 80019c0:	d100      	bne.n	80019c4 <__aeabi_dadd+0x458>
 80019c2:	e0e5      	b.n	8001b90 <__aeabi_dadd+0x624>
 80019c4:	4c85      	ldr	r4, [pc, #532]	; (8001bdc <__aeabi_dadd+0x670>)
 80019c6:	45a4      	cmp	ip, r4
 80019c8:	d058      	beq.n	8001a7c <__aeabi_dadd+0x510>
 80019ca:	4694      	mov	ip, r2
 80019cc:	e749      	b.n	8001862 <__aeabi_dadd+0x2f6>
 80019ce:	4664      	mov	r4, ip
 80019d0:	2220      	movs	r2, #32
 80019d2:	1b12      	subs	r2, r2, r4
 80019d4:	4644      	mov	r4, r8
 80019d6:	4094      	lsls	r4, r2
 80019d8:	000f      	movs	r7, r1
 80019da:	46a1      	mov	r9, r4
 80019dc:	4664      	mov	r4, ip
 80019de:	4091      	lsls	r1, r2
 80019e0:	40e7      	lsrs	r7, r4
 80019e2:	464c      	mov	r4, r9
 80019e4:	1e4a      	subs	r2, r1, #1
 80019e6:	4191      	sbcs	r1, r2
 80019e8:	433c      	orrs	r4, r7
 80019ea:	4642      	mov	r2, r8
 80019ec:	430c      	orrs	r4, r1
 80019ee:	4661      	mov	r1, ip
 80019f0:	40ca      	lsrs	r2, r1
 80019f2:	1880      	adds	r0, r0, r2
 80019f4:	e6f4      	b.n	80017e0 <__aeabi_dadd+0x274>
 80019f6:	4c79      	ldr	r4, [pc, #484]	; (8001bdc <__aeabi_dadd+0x670>)
 80019f8:	42a2      	cmp	r2, r4
 80019fa:	d100      	bne.n	80019fe <__aeabi_dadd+0x492>
 80019fc:	e6fd      	b.n	80017fa <__aeabi_dadd+0x28e>
 80019fe:	1859      	adds	r1, r3, r1
 8001a00:	4299      	cmp	r1, r3
 8001a02:	419b      	sbcs	r3, r3
 8001a04:	4440      	add	r0, r8
 8001a06:	425f      	negs	r7, r3
 8001a08:	19c7      	adds	r7, r0, r7
 8001a0a:	07fc      	lsls	r4, r7, #31
 8001a0c:	0849      	lsrs	r1, r1, #1
 8001a0e:	0016      	movs	r6, r2
 8001a10:	430c      	orrs	r4, r1
 8001a12:	087f      	lsrs	r7, r7, #1
 8001a14:	e6cf      	b.n	80017b6 <__aeabi_dadd+0x24a>
 8001a16:	1acc      	subs	r4, r1, r3
 8001a18:	42a1      	cmp	r1, r4
 8001a1a:	41bf      	sbcs	r7, r7
 8001a1c:	4643      	mov	r3, r8
 8001a1e:	427f      	negs	r7, r7
 8001a20:	1a18      	subs	r0, r3, r0
 8001a22:	4655      	mov	r5, sl
 8001a24:	1bc7      	subs	r7, r0, r7
 8001a26:	e5f7      	b.n	8001618 <__aeabi_dadd+0xac>
 8001a28:	08c9      	lsrs	r1, r1, #3
 8001a2a:	077b      	lsls	r3, r7, #29
 8001a2c:	4655      	mov	r5, sl
 8001a2e:	430b      	orrs	r3, r1
 8001a30:	08f8      	lsrs	r0, r7, #3
 8001a32:	e6c8      	b.n	80017c6 <__aeabi_dadd+0x25a>
 8001a34:	2c00      	cmp	r4, #0
 8001a36:	d000      	beq.n	8001a3a <__aeabi_dadd+0x4ce>
 8001a38:	e081      	b.n	8001b3e <__aeabi_dadd+0x5d2>
 8001a3a:	4643      	mov	r3, r8
 8001a3c:	430b      	orrs	r3, r1
 8001a3e:	d115      	bne.n	8001a6c <__aeabi_dadd+0x500>
 8001a40:	2080      	movs	r0, #128	; 0x80
 8001a42:	2500      	movs	r5, #0
 8001a44:	0300      	lsls	r0, r0, #12
 8001a46:	e6e3      	b.n	8001810 <__aeabi_dadd+0x2a4>
 8001a48:	1a5c      	subs	r4, r3, r1
 8001a4a:	42a3      	cmp	r3, r4
 8001a4c:	419b      	sbcs	r3, r3
 8001a4e:	1bc7      	subs	r7, r0, r7
 8001a50:	425b      	negs	r3, r3
 8001a52:	2601      	movs	r6, #1
 8001a54:	1aff      	subs	r7, r7, r3
 8001a56:	e5da      	b.n	800160e <__aeabi_dadd+0xa2>
 8001a58:	0742      	lsls	r2, r0, #29
 8001a5a:	08db      	lsrs	r3, r3, #3
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	08c0      	lsrs	r0, r0, #3
 8001a60:	e6d2      	b.n	8001808 <__aeabi_dadd+0x29c>
 8001a62:	0742      	lsls	r2, r0, #29
 8001a64:	08db      	lsrs	r3, r3, #3
 8001a66:	4313      	orrs	r3, r2
 8001a68:	08c0      	lsrs	r0, r0, #3
 8001a6a:	e6ac      	b.n	80017c6 <__aeabi_dadd+0x25a>
 8001a6c:	4643      	mov	r3, r8
 8001a6e:	4642      	mov	r2, r8
 8001a70:	08c9      	lsrs	r1, r1, #3
 8001a72:	075b      	lsls	r3, r3, #29
 8001a74:	4655      	mov	r5, sl
 8001a76:	430b      	orrs	r3, r1
 8001a78:	08d0      	lsrs	r0, r2, #3
 8001a7a:	e6c5      	b.n	8001808 <__aeabi_dadd+0x29c>
 8001a7c:	4643      	mov	r3, r8
 8001a7e:	4642      	mov	r2, r8
 8001a80:	075b      	lsls	r3, r3, #29
 8001a82:	08c9      	lsrs	r1, r1, #3
 8001a84:	430b      	orrs	r3, r1
 8001a86:	08d0      	lsrs	r0, r2, #3
 8001a88:	e6be      	b.n	8001808 <__aeabi_dadd+0x29c>
 8001a8a:	4303      	orrs	r3, r0
 8001a8c:	001c      	movs	r4, r3
 8001a8e:	1e63      	subs	r3, r4, #1
 8001a90:	419c      	sbcs	r4, r3
 8001a92:	e6fc      	b.n	800188e <__aeabi_dadd+0x322>
 8001a94:	0002      	movs	r2, r0
 8001a96:	3c20      	subs	r4, #32
 8001a98:	40e2      	lsrs	r2, r4
 8001a9a:	0014      	movs	r4, r2
 8001a9c:	4662      	mov	r2, ip
 8001a9e:	2a20      	cmp	r2, #32
 8001aa0:	d003      	beq.n	8001aaa <__aeabi_dadd+0x53e>
 8001aa2:	2540      	movs	r5, #64	; 0x40
 8001aa4:	1aad      	subs	r5, r5, r2
 8001aa6:	40a8      	lsls	r0, r5
 8001aa8:	4303      	orrs	r3, r0
 8001aaa:	1e58      	subs	r0, r3, #1
 8001aac:	4183      	sbcs	r3, r0
 8001aae:	4323      	orrs	r3, r4
 8001ab0:	e775      	b.n	800199e <__aeabi_dadd+0x432>
 8001ab2:	2a00      	cmp	r2, #0
 8001ab4:	d0e2      	beq.n	8001a7c <__aeabi_dadd+0x510>
 8001ab6:	003a      	movs	r2, r7
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	d0cd      	beq.n	8001a58 <__aeabi_dadd+0x4ec>
 8001abc:	0742      	lsls	r2, r0, #29
 8001abe:	08db      	lsrs	r3, r3, #3
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	2280      	movs	r2, #128	; 0x80
 8001ac4:	08c0      	lsrs	r0, r0, #3
 8001ac6:	0312      	lsls	r2, r2, #12
 8001ac8:	4210      	tst	r0, r2
 8001aca:	d006      	beq.n	8001ada <__aeabi_dadd+0x56e>
 8001acc:	08fc      	lsrs	r4, r7, #3
 8001ace:	4214      	tst	r4, r2
 8001ad0:	d103      	bne.n	8001ada <__aeabi_dadd+0x56e>
 8001ad2:	0020      	movs	r0, r4
 8001ad4:	08cb      	lsrs	r3, r1, #3
 8001ad6:	077a      	lsls	r2, r7, #29
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	0f5a      	lsrs	r2, r3, #29
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	0752      	lsls	r2, r2, #29
 8001ae0:	08db      	lsrs	r3, r3, #3
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	e690      	b.n	8001808 <__aeabi_dadd+0x29c>
 8001ae6:	4643      	mov	r3, r8
 8001ae8:	430b      	orrs	r3, r1
 8001aea:	d100      	bne.n	8001aee <__aeabi_dadd+0x582>
 8001aec:	e709      	b.n	8001902 <__aeabi_dadd+0x396>
 8001aee:	4643      	mov	r3, r8
 8001af0:	4642      	mov	r2, r8
 8001af2:	08c9      	lsrs	r1, r1, #3
 8001af4:	075b      	lsls	r3, r3, #29
 8001af6:	4655      	mov	r5, sl
 8001af8:	430b      	orrs	r3, r1
 8001afa:	08d0      	lsrs	r0, r2, #3
 8001afc:	e666      	b.n	80017cc <__aeabi_dadd+0x260>
 8001afe:	1acc      	subs	r4, r1, r3
 8001b00:	42a1      	cmp	r1, r4
 8001b02:	4189      	sbcs	r1, r1
 8001b04:	1a3f      	subs	r7, r7, r0
 8001b06:	4249      	negs	r1, r1
 8001b08:	4655      	mov	r5, sl
 8001b0a:	2601      	movs	r6, #1
 8001b0c:	1a7f      	subs	r7, r7, r1
 8001b0e:	e57e      	b.n	800160e <__aeabi_dadd+0xa2>
 8001b10:	4642      	mov	r2, r8
 8001b12:	1a5c      	subs	r4, r3, r1
 8001b14:	1a87      	subs	r7, r0, r2
 8001b16:	42a3      	cmp	r3, r4
 8001b18:	4192      	sbcs	r2, r2
 8001b1a:	4252      	negs	r2, r2
 8001b1c:	1abf      	subs	r7, r7, r2
 8001b1e:	023a      	lsls	r2, r7, #8
 8001b20:	d53d      	bpl.n	8001b9e <__aeabi_dadd+0x632>
 8001b22:	1acc      	subs	r4, r1, r3
 8001b24:	42a1      	cmp	r1, r4
 8001b26:	4189      	sbcs	r1, r1
 8001b28:	4643      	mov	r3, r8
 8001b2a:	4249      	negs	r1, r1
 8001b2c:	1a1f      	subs	r7, r3, r0
 8001b2e:	4655      	mov	r5, sl
 8001b30:	1a7f      	subs	r7, r7, r1
 8001b32:	e595      	b.n	8001660 <__aeabi_dadd+0xf4>
 8001b34:	077b      	lsls	r3, r7, #29
 8001b36:	08c9      	lsrs	r1, r1, #3
 8001b38:	430b      	orrs	r3, r1
 8001b3a:	08f8      	lsrs	r0, r7, #3
 8001b3c:	e643      	b.n	80017c6 <__aeabi_dadd+0x25a>
 8001b3e:	4644      	mov	r4, r8
 8001b40:	08db      	lsrs	r3, r3, #3
 8001b42:	430c      	orrs	r4, r1
 8001b44:	d130      	bne.n	8001ba8 <__aeabi_dadd+0x63c>
 8001b46:	0742      	lsls	r2, r0, #29
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	08c0      	lsrs	r0, r0, #3
 8001b4c:	e65c      	b.n	8001808 <__aeabi_dadd+0x29c>
 8001b4e:	077b      	lsls	r3, r7, #29
 8001b50:	08c9      	lsrs	r1, r1, #3
 8001b52:	430b      	orrs	r3, r1
 8001b54:	08f8      	lsrs	r0, r7, #3
 8001b56:	e639      	b.n	80017cc <__aeabi_dadd+0x260>
 8001b58:	185c      	adds	r4, r3, r1
 8001b5a:	429c      	cmp	r4, r3
 8001b5c:	419b      	sbcs	r3, r3
 8001b5e:	4440      	add	r0, r8
 8001b60:	425b      	negs	r3, r3
 8001b62:	18c7      	adds	r7, r0, r3
 8001b64:	023b      	lsls	r3, r7, #8
 8001b66:	d400      	bmi.n	8001b6a <__aeabi_dadd+0x5fe>
 8001b68:	e625      	b.n	80017b6 <__aeabi_dadd+0x24a>
 8001b6a:	4b1d      	ldr	r3, [pc, #116]	; (8001be0 <__aeabi_dadd+0x674>)
 8001b6c:	2601      	movs	r6, #1
 8001b6e:	401f      	ands	r7, r3
 8001b70:	e621      	b.n	80017b6 <__aeabi_dadd+0x24a>
 8001b72:	0004      	movs	r4, r0
 8001b74:	3a20      	subs	r2, #32
 8001b76:	40d4      	lsrs	r4, r2
 8001b78:	4662      	mov	r2, ip
 8001b7a:	2a20      	cmp	r2, #32
 8001b7c:	d004      	beq.n	8001b88 <__aeabi_dadd+0x61c>
 8001b7e:	2240      	movs	r2, #64	; 0x40
 8001b80:	4666      	mov	r6, ip
 8001b82:	1b92      	subs	r2, r2, r6
 8001b84:	4090      	lsls	r0, r2
 8001b86:	4303      	orrs	r3, r0
 8001b88:	1e5a      	subs	r2, r3, #1
 8001b8a:	4193      	sbcs	r3, r2
 8001b8c:	431c      	orrs	r4, r3
 8001b8e:	e67e      	b.n	800188e <__aeabi_dadd+0x322>
 8001b90:	185c      	adds	r4, r3, r1
 8001b92:	428c      	cmp	r4, r1
 8001b94:	4189      	sbcs	r1, r1
 8001b96:	4440      	add	r0, r8
 8001b98:	4249      	negs	r1, r1
 8001b9a:	1847      	adds	r7, r0, r1
 8001b9c:	e6dd      	b.n	800195a <__aeabi_dadd+0x3ee>
 8001b9e:	0023      	movs	r3, r4
 8001ba0:	433b      	orrs	r3, r7
 8001ba2:	d100      	bne.n	8001ba6 <__aeabi_dadd+0x63a>
 8001ba4:	e6ad      	b.n	8001902 <__aeabi_dadd+0x396>
 8001ba6:	e606      	b.n	80017b6 <__aeabi_dadd+0x24a>
 8001ba8:	0744      	lsls	r4, r0, #29
 8001baa:	4323      	orrs	r3, r4
 8001bac:	2480      	movs	r4, #128	; 0x80
 8001bae:	08c0      	lsrs	r0, r0, #3
 8001bb0:	0324      	lsls	r4, r4, #12
 8001bb2:	4220      	tst	r0, r4
 8001bb4:	d008      	beq.n	8001bc8 <__aeabi_dadd+0x65c>
 8001bb6:	4642      	mov	r2, r8
 8001bb8:	08d6      	lsrs	r6, r2, #3
 8001bba:	4226      	tst	r6, r4
 8001bbc:	d104      	bne.n	8001bc8 <__aeabi_dadd+0x65c>
 8001bbe:	4655      	mov	r5, sl
 8001bc0:	0030      	movs	r0, r6
 8001bc2:	08cb      	lsrs	r3, r1, #3
 8001bc4:	0751      	lsls	r1, r2, #29
 8001bc6:	430b      	orrs	r3, r1
 8001bc8:	0f5a      	lsrs	r2, r3, #29
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	08db      	lsrs	r3, r3, #3
 8001bce:	0752      	lsls	r2, r2, #29
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	e619      	b.n	8001808 <__aeabi_dadd+0x29c>
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	4a01      	ldr	r2, [pc, #4]	; (8001bdc <__aeabi_dadd+0x670>)
 8001bd8:	001f      	movs	r7, r3
 8001bda:	e55e      	b.n	800169a <__aeabi_dadd+0x12e>
 8001bdc:	000007ff 	.word	0x000007ff
 8001be0:	ff7fffff 	.word	0xff7fffff

08001be4 <__aeabi_ddiv>:
 8001be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001be6:	4657      	mov	r7, sl
 8001be8:	464e      	mov	r6, r9
 8001bea:	4645      	mov	r5, r8
 8001bec:	46de      	mov	lr, fp
 8001bee:	b5e0      	push	{r5, r6, r7, lr}
 8001bf0:	4681      	mov	r9, r0
 8001bf2:	0005      	movs	r5, r0
 8001bf4:	030c      	lsls	r4, r1, #12
 8001bf6:	0048      	lsls	r0, r1, #1
 8001bf8:	4692      	mov	sl, r2
 8001bfa:	001f      	movs	r7, r3
 8001bfc:	b085      	sub	sp, #20
 8001bfe:	0b24      	lsrs	r4, r4, #12
 8001c00:	0d40      	lsrs	r0, r0, #21
 8001c02:	0fce      	lsrs	r6, r1, #31
 8001c04:	2800      	cmp	r0, #0
 8001c06:	d100      	bne.n	8001c0a <__aeabi_ddiv+0x26>
 8001c08:	e156      	b.n	8001eb8 <__aeabi_ddiv+0x2d4>
 8001c0a:	4bd4      	ldr	r3, [pc, #848]	; (8001f5c <__aeabi_ddiv+0x378>)
 8001c0c:	4298      	cmp	r0, r3
 8001c0e:	d100      	bne.n	8001c12 <__aeabi_ddiv+0x2e>
 8001c10:	e172      	b.n	8001ef8 <__aeabi_ddiv+0x314>
 8001c12:	0f6b      	lsrs	r3, r5, #29
 8001c14:	00e4      	lsls	r4, r4, #3
 8001c16:	431c      	orrs	r4, r3
 8001c18:	2380      	movs	r3, #128	; 0x80
 8001c1a:	041b      	lsls	r3, r3, #16
 8001c1c:	4323      	orrs	r3, r4
 8001c1e:	4698      	mov	r8, r3
 8001c20:	4bcf      	ldr	r3, [pc, #828]	; (8001f60 <__aeabi_ddiv+0x37c>)
 8001c22:	00ed      	lsls	r5, r5, #3
 8001c24:	469b      	mov	fp, r3
 8001c26:	2300      	movs	r3, #0
 8001c28:	4699      	mov	r9, r3
 8001c2a:	4483      	add	fp, r0
 8001c2c:	9300      	str	r3, [sp, #0]
 8001c2e:	033c      	lsls	r4, r7, #12
 8001c30:	007b      	lsls	r3, r7, #1
 8001c32:	4650      	mov	r0, sl
 8001c34:	0b24      	lsrs	r4, r4, #12
 8001c36:	0d5b      	lsrs	r3, r3, #21
 8001c38:	0fff      	lsrs	r7, r7, #31
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d100      	bne.n	8001c40 <__aeabi_ddiv+0x5c>
 8001c3e:	e11f      	b.n	8001e80 <__aeabi_ddiv+0x29c>
 8001c40:	4ac6      	ldr	r2, [pc, #792]	; (8001f5c <__aeabi_ddiv+0x378>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d100      	bne.n	8001c48 <__aeabi_ddiv+0x64>
 8001c46:	e162      	b.n	8001f0e <__aeabi_ddiv+0x32a>
 8001c48:	49c5      	ldr	r1, [pc, #788]	; (8001f60 <__aeabi_ddiv+0x37c>)
 8001c4a:	0f42      	lsrs	r2, r0, #29
 8001c4c:	468c      	mov	ip, r1
 8001c4e:	00e4      	lsls	r4, r4, #3
 8001c50:	4659      	mov	r1, fp
 8001c52:	4314      	orrs	r4, r2
 8001c54:	2280      	movs	r2, #128	; 0x80
 8001c56:	4463      	add	r3, ip
 8001c58:	0412      	lsls	r2, r2, #16
 8001c5a:	1acb      	subs	r3, r1, r3
 8001c5c:	4314      	orrs	r4, r2
 8001c5e:	469b      	mov	fp, r3
 8001c60:	00c2      	lsls	r2, r0, #3
 8001c62:	2000      	movs	r0, #0
 8001c64:	0033      	movs	r3, r6
 8001c66:	407b      	eors	r3, r7
 8001c68:	469a      	mov	sl, r3
 8001c6a:	464b      	mov	r3, r9
 8001c6c:	2b0f      	cmp	r3, #15
 8001c6e:	d827      	bhi.n	8001cc0 <__aeabi_ddiv+0xdc>
 8001c70:	49bc      	ldr	r1, [pc, #752]	; (8001f64 <__aeabi_ddiv+0x380>)
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	58cb      	ldr	r3, [r1, r3]
 8001c76:	469f      	mov	pc, r3
 8001c78:	46b2      	mov	sl, r6
 8001c7a:	9b00      	ldr	r3, [sp, #0]
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d016      	beq.n	8001cae <__aeabi_ddiv+0xca>
 8001c80:	2b03      	cmp	r3, #3
 8001c82:	d100      	bne.n	8001c86 <__aeabi_ddiv+0xa2>
 8001c84:	e28e      	b.n	80021a4 <__aeabi_ddiv+0x5c0>
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d000      	beq.n	8001c8c <__aeabi_ddiv+0xa8>
 8001c8a:	e0d9      	b.n	8001e40 <__aeabi_ddiv+0x25c>
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	2400      	movs	r4, #0
 8001c90:	2500      	movs	r5, #0
 8001c92:	4652      	mov	r2, sl
 8001c94:	051b      	lsls	r3, r3, #20
 8001c96:	4323      	orrs	r3, r4
 8001c98:	07d2      	lsls	r2, r2, #31
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	0028      	movs	r0, r5
 8001c9e:	0019      	movs	r1, r3
 8001ca0:	b005      	add	sp, #20
 8001ca2:	bcf0      	pop	{r4, r5, r6, r7}
 8001ca4:	46bb      	mov	fp, r7
 8001ca6:	46b2      	mov	sl, r6
 8001ca8:	46a9      	mov	r9, r5
 8001caa:	46a0      	mov	r8, r4
 8001cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cae:	2400      	movs	r4, #0
 8001cb0:	2500      	movs	r5, #0
 8001cb2:	4baa      	ldr	r3, [pc, #680]	; (8001f5c <__aeabi_ddiv+0x378>)
 8001cb4:	e7ed      	b.n	8001c92 <__aeabi_ddiv+0xae>
 8001cb6:	46ba      	mov	sl, r7
 8001cb8:	46a0      	mov	r8, r4
 8001cba:	0015      	movs	r5, r2
 8001cbc:	9000      	str	r0, [sp, #0]
 8001cbe:	e7dc      	b.n	8001c7a <__aeabi_ddiv+0x96>
 8001cc0:	4544      	cmp	r4, r8
 8001cc2:	d200      	bcs.n	8001cc6 <__aeabi_ddiv+0xe2>
 8001cc4:	e1c7      	b.n	8002056 <__aeabi_ddiv+0x472>
 8001cc6:	d100      	bne.n	8001cca <__aeabi_ddiv+0xe6>
 8001cc8:	e1c2      	b.n	8002050 <__aeabi_ddiv+0x46c>
 8001cca:	2301      	movs	r3, #1
 8001ccc:	425b      	negs	r3, r3
 8001cce:	469c      	mov	ip, r3
 8001cd0:	002e      	movs	r6, r5
 8001cd2:	4640      	mov	r0, r8
 8001cd4:	2500      	movs	r5, #0
 8001cd6:	44e3      	add	fp, ip
 8001cd8:	0223      	lsls	r3, r4, #8
 8001cda:	0e14      	lsrs	r4, r2, #24
 8001cdc:	431c      	orrs	r4, r3
 8001cde:	0c1b      	lsrs	r3, r3, #16
 8001ce0:	4699      	mov	r9, r3
 8001ce2:	0423      	lsls	r3, r4, #16
 8001ce4:	0c1f      	lsrs	r7, r3, #16
 8001ce6:	0212      	lsls	r2, r2, #8
 8001ce8:	4649      	mov	r1, r9
 8001cea:	9200      	str	r2, [sp, #0]
 8001cec:	9701      	str	r7, [sp, #4]
 8001cee:	f7fe faad 	bl	800024c <__aeabi_uidivmod>
 8001cf2:	0002      	movs	r2, r0
 8001cf4:	437a      	muls	r2, r7
 8001cf6:	040b      	lsls	r3, r1, #16
 8001cf8:	0c31      	lsrs	r1, r6, #16
 8001cfa:	4680      	mov	r8, r0
 8001cfc:	4319      	orrs	r1, r3
 8001cfe:	428a      	cmp	r2, r1
 8001d00:	d907      	bls.n	8001d12 <__aeabi_ddiv+0x12e>
 8001d02:	2301      	movs	r3, #1
 8001d04:	425b      	negs	r3, r3
 8001d06:	469c      	mov	ip, r3
 8001d08:	1909      	adds	r1, r1, r4
 8001d0a:	44e0      	add	r8, ip
 8001d0c:	428c      	cmp	r4, r1
 8001d0e:	d800      	bhi.n	8001d12 <__aeabi_ddiv+0x12e>
 8001d10:	e207      	b.n	8002122 <__aeabi_ddiv+0x53e>
 8001d12:	1a88      	subs	r0, r1, r2
 8001d14:	4649      	mov	r1, r9
 8001d16:	f7fe fa99 	bl	800024c <__aeabi_uidivmod>
 8001d1a:	0409      	lsls	r1, r1, #16
 8001d1c:	468c      	mov	ip, r1
 8001d1e:	0431      	lsls	r1, r6, #16
 8001d20:	4666      	mov	r6, ip
 8001d22:	9a01      	ldr	r2, [sp, #4]
 8001d24:	0c09      	lsrs	r1, r1, #16
 8001d26:	4342      	muls	r2, r0
 8001d28:	0003      	movs	r3, r0
 8001d2a:	4331      	orrs	r1, r6
 8001d2c:	428a      	cmp	r2, r1
 8001d2e:	d904      	bls.n	8001d3a <__aeabi_ddiv+0x156>
 8001d30:	1909      	adds	r1, r1, r4
 8001d32:	3b01      	subs	r3, #1
 8001d34:	428c      	cmp	r4, r1
 8001d36:	d800      	bhi.n	8001d3a <__aeabi_ddiv+0x156>
 8001d38:	e1ed      	b.n	8002116 <__aeabi_ddiv+0x532>
 8001d3a:	1a88      	subs	r0, r1, r2
 8001d3c:	4642      	mov	r2, r8
 8001d3e:	0412      	lsls	r2, r2, #16
 8001d40:	431a      	orrs	r2, r3
 8001d42:	4690      	mov	r8, r2
 8001d44:	4641      	mov	r1, r8
 8001d46:	9b00      	ldr	r3, [sp, #0]
 8001d48:	040e      	lsls	r6, r1, #16
 8001d4a:	0c1b      	lsrs	r3, r3, #16
 8001d4c:	001f      	movs	r7, r3
 8001d4e:	9302      	str	r3, [sp, #8]
 8001d50:	9b00      	ldr	r3, [sp, #0]
 8001d52:	0c36      	lsrs	r6, r6, #16
 8001d54:	041b      	lsls	r3, r3, #16
 8001d56:	0c19      	lsrs	r1, r3, #16
 8001d58:	000b      	movs	r3, r1
 8001d5a:	4373      	muls	r3, r6
 8001d5c:	0c12      	lsrs	r2, r2, #16
 8001d5e:	437e      	muls	r6, r7
 8001d60:	9103      	str	r1, [sp, #12]
 8001d62:	4351      	muls	r1, r2
 8001d64:	437a      	muls	r2, r7
 8001d66:	0c1f      	lsrs	r7, r3, #16
 8001d68:	46bc      	mov	ip, r7
 8001d6a:	1876      	adds	r6, r6, r1
 8001d6c:	4466      	add	r6, ip
 8001d6e:	42b1      	cmp	r1, r6
 8001d70:	d903      	bls.n	8001d7a <__aeabi_ddiv+0x196>
 8001d72:	2180      	movs	r1, #128	; 0x80
 8001d74:	0249      	lsls	r1, r1, #9
 8001d76:	468c      	mov	ip, r1
 8001d78:	4462      	add	r2, ip
 8001d7a:	0c31      	lsrs	r1, r6, #16
 8001d7c:	188a      	adds	r2, r1, r2
 8001d7e:	0431      	lsls	r1, r6, #16
 8001d80:	041e      	lsls	r6, r3, #16
 8001d82:	0c36      	lsrs	r6, r6, #16
 8001d84:	198e      	adds	r6, r1, r6
 8001d86:	4290      	cmp	r0, r2
 8001d88:	d302      	bcc.n	8001d90 <__aeabi_ddiv+0x1ac>
 8001d8a:	d112      	bne.n	8001db2 <__aeabi_ddiv+0x1ce>
 8001d8c:	42b5      	cmp	r5, r6
 8001d8e:	d210      	bcs.n	8001db2 <__aeabi_ddiv+0x1ce>
 8001d90:	4643      	mov	r3, r8
 8001d92:	1e59      	subs	r1, r3, #1
 8001d94:	9b00      	ldr	r3, [sp, #0]
 8001d96:	469c      	mov	ip, r3
 8001d98:	4465      	add	r5, ip
 8001d9a:	001f      	movs	r7, r3
 8001d9c:	429d      	cmp	r5, r3
 8001d9e:	419b      	sbcs	r3, r3
 8001da0:	425b      	negs	r3, r3
 8001da2:	191b      	adds	r3, r3, r4
 8001da4:	18c0      	adds	r0, r0, r3
 8001da6:	4284      	cmp	r4, r0
 8001da8:	d200      	bcs.n	8001dac <__aeabi_ddiv+0x1c8>
 8001daa:	e1a0      	b.n	80020ee <__aeabi_ddiv+0x50a>
 8001dac:	d100      	bne.n	8001db0 <__aeabi_ddiv+0x1cc>
 8001dae:	e19b      	b.n	80020e8 <__aeabi_ddiv+0x504>
 8001db0:	4688      	mov	r8, r1
 8001db2:	1bae      	subs	r6, r5, r6
 8001db4:	42b5      	cmp	r5, r6
 8001db6:	41ad      	sbcs	r5, r5
 8001db8:	1a80      	subs	r0, r0, r2
 8001dba:	426d      	negs	r5, r5
 8001dbc:	1b40      	subs	r0, r0, r5
 8001dbe:	4284      	cmp	r4, r0
 8001dc0:	d100      	bne.n	8001dc4 <__aeabi_ddiv+0x1e0>
 8001dc2:	e1d5      	b.n	8002170 <__aeabi_ddiv+0x58c>
 8001dc4:	4649      	mov	r1, r9
 8001dc6:	f7fe fa41 	bl	800024c <__aeabi_uidivmod>
 8001dca:	9a01      	ldr	r2, [sp, #4]
 8001dcc:	040b      	lsls	r3, r1, #16
 8001dce:	4342      	muls	r2, r0
 8001dd0:	0c31      	lsrs	r1, r6, #16
 8001dd2:	0005      	movs	r5, r0
 8001dd4:	4319      	orrs	r1, r3
 8001dd6:	428a      	cmp	r2, r1
 8001dd8:	d900      	bls.n	8001ddc <__aeabi_ddiv+0x1f8>
 8001dda:	e16c      	b.n	80020b6 <__aeabi_ddiv+0x4d2>
 8001ddc:	1a88      	subs	r0, r1, r2
 8001dde:	4649      	mov	r1, r9
 8001de0:	f7fe fa34 	bl	800024c <__aeabi_uidivmod>
 8001de4:	9a01      	ldr	r2, [sp, #4]
 8001de6:	0436      	lsls	r6, r6, #16
 8001de8:	4342      	muls	r2, r0
 8001dea:	0409      	lsls	r1, r1, #16
 8001dec:	0c36      	lsrs	r6, r6, #16
 8001dee:	0003      	movs	r3, r0
 8001df0:	430e      	orrs	r6, r1
 8001df2:	42b2      	cmp	r2, r6
 8001df4:	d900      	bls.n	8001df8 <__aeabi_ddiv+0x214>
 8001df6:	e153      	b.n	80020a0 <__aeabi_ddiv+0x4bc>
 8001df8:	9803      	ldr	r0, [sp, #12]
 8001dfa:	1ab6      	subs	r6, r6, r2
 8001dfc:	0002      	movs	r2, r0
 8001dfe:	042d      	lsls	r5, r5, #16
 8001e00:	431d      	orrs	r5, r3
 8001e02:	9f02      	ldr	r7, [sp, #8]
 8001e04:	042b      	lsls	r3, r5, #16
 8001e06:	0c1b      	lsrs	r3, r3, #16
 8001e08:	435a      	muls	r2, r3
 8001e0a:	437b      	muls	r3, r7
 8001e0c:	469c      	mov	ip, r3
 8001e0e:	0c29      	lsrs	r1, r5, #16
 8001e10:	4348      	muls	r0, r1
 8001e12:	0c13      	lsrs	r3, r2, #16
 8001e14:	4484      	add	ip, r0
 8001e16:	4463      	add	r3, ip
 8001e18:	4379      	muls	r1, r7
 8001e1a:	4298      	cmp	r0, r3
 8001e1c:	d903      	bls.n	8001e26 <__aeabi_ddiv+0x242>
 8001e1e:	2080      	movs	r0, #128	; 0x80
 8001e20:	0240      	lsls	r0, r0, #9
 8001e22:	4684      	mov	ip, r0
 8001e24:	4461      	add	r1, ip
 8001e26:	0c18      	lsrs	r0, r3, #16
 8001e28:	0412      	lsls	r2, r2, #16
 8001e2a:	041b      	lsls	r3, r3, #16
 8001e2c:	0c12      	lsrs	r2, r2, #16
 8001e2e:	1841      	adds	r1, r0, r1
 8001e30:	189b      	adds	r3, r3, r2
 8001e32:	428e      	cmp	r6, r1
 8001e34:	d200      	bcs.n	8001e38 <__aeabi_ddiv+0x254>
 8001e36:	e0ff      	b.n	8002038 <__aeabi_ddiv+0x454>
 8001e38:	d100      	bne.n	8001e3c <__aeabi_ddiv+0x258>
 8001e3a:	e0fa      	b.n	8002032 <__aeabi_ddiv+0x44e>
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	431d      	orrs	r5, r3
 8001e40:	4a49      	ldr	r2, [pc, #292]	; (8001f68 <__aeabi_ddiv+0x384>)
 8001e42:	445a      	add	r2, fp
 8001e44:	2a00      	cmp	r2, #0
 8001e46:	dc00      	bgt.n	8001e4a <__aeabi_ddiv+0x266>
 8001e48:	e0aa      	b.n	8001fa0 <__aeabi_ddiv+0x3bc>
 8001e4a:	076b      	lsls	r3, r5, #29
 8001e4c:	d000      	beq.n	8001e50 <__aeabi_ddiv+0x26c>
 8001e4e:	e13d      	b.n	80020cc <__aeabi_ddiv+0x4e8>
 8001e50:	08ed      	lsrs	r5, r5, #3
 8001e52:	4643      	mov	r3, r8
 8001e54:	01db      	lsls	r3, r3, #7
 8001e56:	d506      	bpl.n	8001e66 <__aeabi_ddiv+0x282>
 8001e58:	4642      	mov	r2, r8
 8001e5a:	4b44      	ldr	r3, [pc, #272]	; (8001f6c <__aeabi_ddiv+0x388>)
 8001e5c:	401a      	ands	r2, r3
 8001e5e:	4690      	mov	r8, r2
 8001e60:	2280      	movs	r2, #128	; 0x80
 8001e62:	00d2      	lsls	r2, r2, #3
 8001e64:	445a      	add	r2, fp
 8001e66:	4b42      	ldr	r3, [pc, #264]	; (8001f70 <__aeabi_ddiv+0x38c>)
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	dd00      	ble.n	8001e6e <__aeabi_ddiv+0x28a>
 8001e6c:	e71f      	b.n	8001cae <__aeabi_ddiv+0xca>
 8001e6e:	4643      	mov	r3, r8
 8001e70:	075b      	lsls	r3, r3, #29
 8001e72:	431d      	orrs	r5, r3
 8001e74:	4643      	mov	r3, r8
 8001e76:	0552      	lsls	r2, r2, #21
 8001e78:	025c      	lsls	r4, r3, #9
 8001e7a:	0b24      	lsrs	r4, r4, #12
 8001e7c:	0d53      	lsrs	r3, r2, #21
 8001e7e:	e708      	b.n	8001c92 <__aeabi_ddiv+0xae>
 8001e80:	4652      	mov	r2, sl
 8001e82:	4322      	orrs	r2, r4
 8001e84:	d100      	bne.n	8001e88 <__aeabi_ddiv+0x2a4>
 8001e86:	e07b      	b.n	8001f80 <__aeabi_ddiv+0x39c>
 8001e88:	2c00      	cmp	r4, #0
 8001e8a:	d100      	bne.n	8001e8e <__aeabi_ddiv+0x2aa>
 8001e8c:	e0fa      	b.n	8002084 <__aeabi_ddiv+0x4a0>
 8001e8e:	0020      	movs	r0, r4
 8001e90:	f001 fa22 	bl	80032d8 <__clzsi2>
 8001e94:	0002      	movs	r2, r0
 8001e96:	3a0b      	subs	r2, #11
 8001e98:	231d      	movs	r3, #29
 8001e9a:	0001      	movs	r1, r0
 8001e9c:	1a9b      	subs	r3, r3, r2
 8001e9e:	4652      	mov	r2, sl
 8001ea0:	3908      	subs	r1, #8
 8001ea2:	40da      	lsrs	r2, r3
 8001ea4:	408c      	lsls	r4, r1
 8001ea6:	4314      	orrs	r4, r2
 8001ea8:	4652      	mov	r2, sl
 8001eaa:	408a      	lsls	r2, r1
 8001eac:	4b31      	ldr	r3, [pc, #196]	; (8001f74 <__aeabi_ddiv+0x390>)
 8001eae:	4458      	add	r0, fp
 8001eb0:	469b      	mov	fp, r3
 8001eb2:	4483      	add	fp, r0
 8001eb4:	2000      	movs	r0, #0
 8001eb6:	e6d5      	b.n	8001c64 <__aeabi_ddiv+0x80>
 8001eb8:	464b      	mov	r3, r9
 8001eba:	4323      	orrs	r3, r4
 8001ebc:	4698      	mov	r8, r3
 8001ebe:	d044      	beq.n	8001f4a <__aeabi_ddiv+0x366>
 8001ec0:	2c00      	cmp	r4, #0
 8001ec2:	d100      	bne.n	8001ec6 <__aeabi_ddiv+0x2e2>
 8001ec4:	e0ce      	b.n	8002064 <__aeabi_ddiv+0x480>
 8001ec6:	0020      	movs	r0, r4
 8001ec8:	f001 fa06 	bl	80032d8 <__clzsi2>
 8001ecc:	0001      	movs	r1, r0
 8001ece:	0002      	movs	r2, r0
 8001ed0:	390b      	subs	r1, #11
 8001ed2:	231d      	movs	r3, #29
 8001ed4:	1a5b      	subs	r3, r3, r1
 8001ed6:	4649      	mov	r1, r9
 8001ed8:	0010      	movs	r0, r2
 8001eda:	40d9      	lsrs	r1, r3
 8001edc:	3808      	subs	r0, #8
 8001ede:	4084      	lsls	r4, r0
 8001ee0:	000b      	movs	r3, r1
 8001ee2:	464d      	mov	r5, r9
 8001ee4:	4323      	orrs	r3, r4
 8001ee6:	4698      	mov	r8, r3
 8001ee8:	4085      	lsls	r5, r0
 8001eea:	4823      	ldr	r0, [pc, #140]	; (8001f78 <__aeabi_ddiv+0x394>)
 8001eec:	1a83      	subs	r3, r0, r2
 8001eee:	469b      	mov	fp, r3
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	4699      	mov	r9, r3
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	e69a      	b.n	8001c2e <__aeabi_ddiv+0x4a>
 8001ef8:	464b      	mov	r3, r9
 8001efa:	4323      	orrs	r3, r4
 8001efc:	4698      	mov	r8, r3
 8001efe:	d11d      	bne.n	8001f3c <__aeabi_ddiv+0x358>
 8001f00:	2308      	movs	r3, #8
 8001f02:	4699      	mov	r9, r3
 8001f04:	3b06      	subs	r3, #6
 8001f06:	2500      	movs	r5, #0
 8001f08:	4683      	mov	fp, r0
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	e68f      	b.n	8001c2e <__aeabi_ddiv+0x4a>
 8001f0e:	4652      	mov	r2, sl
 8001f10:	4322      	orrs	r2, r4
 8001f12:	d109      	bne.n	8001f28 <__aeabi_ddiv+0x344>
 8001f14:	2302      	movs	r3, #2
 8001f16:	4649      	mov	r1, r9
 8001f18:	4319      	orrs	r1, r3
 8001f1a:	4b18      	ldr	r3, [pc, #96]	; (8001f7c <__aeabi_ddiv+0x398>)
 8001f1c:	4689      	mov	r9, r1
 8001f1e:	469c      	mov	ip, r3
 8001f20:	2400      	movs	r4, #0
 8001f22:	2002      	movs	r0, #2
 8001f24:	44e3      	add	fp, ip
 8001f26:	e69d      	b.n	8001c64 <__aeabi_ddiv+0x80>
 8001f28:	2303      	movs	r3, #3
 8001f2a:	464a      	mov	r2, r9
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	4b13      	ldr	r3, [pc, #76]	; (8001f7c <__aeabi_ddiv+0x398>)
 8001f30:	4691      	mov	r9, r2
 8001f32:	469c      	mov	ip, r3
 8001f34:	4652      	mov	r2, sl
 8001f36:	2003      	movs	r0, #3
 8001f38:	44e3      	add	fp, ip
 8001f3a:	e693      	b.n	8001c64 <__aeabi_ddiv+0x80>
 8001f3c:	230c      	movs	r3, #12
 8001f3e:	4699      	mov	r9, r3
 8001f40:	3b09      	subs	r3, #9
 8001f42:	46a0      	mov	r8, r4
 8001f44:	4683      	mov	fp, r0
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	e671      	b.n	8001c2e <__aeabi_ddiv+0x4a>
 8001f4a:	2304      	movs	r3, #4
 8001f4c:	4699      	mov	r9, r3
 8001f4e:	2300      	movs	r3, #0
 8001f50:	469b      	mov	fp, r3
 8001f52:	3301      	adds	r3, #1
 8001f54:	2500      	movs	r5, #0
 8001f56:	9300      	str	r3, [sp, #0]
 8001f58:	e669      	b.n	8001c2e <__aeabi_ddiv+0x4a>
 8001f5a:	46c0      	nop			; (mov r8, r8)
 8001f5c:	000007ff 	.word	0x000007ff
 8001f60:	fffffc01 	.word	0xfffffc01
 8001f64:	080093b8 	.word	0x080093b8
 8001f68:	000003ff 	.word	0x000003ff
 8001f6c:	feffffff 	.word	0xfeffffff
 8001f70:	000007fe 	.word	0x000007fe
 8001f74:	000003f3 	.word	0x000003f3
 8001f78:	fffffc0d 	.word	0xfffffc0d
 8001f7c:	fffff801 	.word	0xfffff801
 8001f80:	4649      	mov	r1, r9
 8001f82:	2301      	movs	r3, #1
 8001f84:	4319      	orrs	r1, r3
 8001f86:	4689      	mov	r9, r1
 8001f88:	2400      	movs	r4, #0
 8001f8a:	2001      	movs	r0, #1
 8001f8c:	e66a      	b.n	8001c64 <__aeabi_ddiv+0x80>
 8001f8e:	2300      	movs	r3, #0
 8001f90:	2480      	movs	r4, #128	; 0x80
 8001f92:	469a      	mov	sl, r3
 8001f94:	2500      	movs	r5, #0
 8001f96:	4b8a      	ldr	r3, [pc, #552]	; (80021c0 <__aeabi_ddiv+0x5dc>)
 8001f98:	0324      	lsls	r4, r4, #12
 8001f9a:	e67a      	b.n	8001c92 <__aeabi_ddiv+0xae>
 8001f9c:	2501      	movs	r5, #1
 8001f9e:	426d      	negs	r5, r5
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	1a9b      	subs	r3, r3, r2
 8001fa4:	2b38      	cmp	r3, #56	; 0x38
 8001fa6:	dd00      	ble.n	8001faa <__aeabi_ddiv+0x3c6>
 8001fa8:	e670      	b.n	8001c8c <__aeabi_ddiv+0xa8>
 8001faa:	2b1f      	cmp	r3, #31
 8001fac:	dc00      	bgt.n	8001fb0 <__aeabi_ddiv+0x3cc>
 8001fae:	e0bf      	b.n	8002130 <__aeabi_ddiv+0x54c>
 8001fb0:	211f      	movs	r1, #31
 8001fb2:	4249      	negs	r1, r1
 8001fb4:	1a8a      	subs	r2, r1, r2
 8001fb6:	4641      	mov	r1, r8
 8001fb8:	40d1      	lsrs	r1, r2
 8001fba:	000a      	movs	r2, r1
 8001fbc:	2b20      	cmp	r3, #32
 8001fbe:	d004      	beq.n	8001fca <__aeabi_ddiv+0x3e6>
 8001fc0:	4641      	mov	r1, r8
 8001fc2:	4b80      	ldr	r3, [pc, #512]	; (80021c4 <__aeabi_ddiv+0x5e0>)
 8001fc4:	445b      	add	r3, fp
 8001fc6:	4099      	lsls	r1, r3
 8001fc8:	430d      	orrs	r5, r1
 8001fca:	1e6b      	subs	r3, r5, #1
 8001fcc:	419d      	sbcs	r5, r3
 8001fce:	2307      	movs	r3, #7
 8001fd0:	432a      	orrs	r2, r5
 8001fd2:	001d      	movs	r5, r3
 8001fd4:	2400      	movs	r4, #0
 8001fd6:	4015      	ands	r5, r2
 8001fd8:	4213      	tst	r3, r2
 8001fda:	d100      	bne.n	8001fde <__aeabi_ddiv+0x3fa>
 8001fdc:	e0d4      	b.n	8002188 <__aeabi_ddiv+0x5a4>
 8001fde:	210f      	movs	r1, #15
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	4011      	ands	r1, r2
 8001fe4:	2904      	cmp	r1, #4
 8001fe6:	d100      	bne.n	8001fea <__aeabi_ddiv+0x406>
 8001fe8:	e0cb      	b.n	8002182 <__aeabi_ddiv+0x59e>
 8001fea:	1d11      	adds	r1, r2, #4
 8001fec:	4291      	cmp	r1, r2
 8001fee:	4192      	sbcs	r2, r2
 8001ff0:	4252      	negs	r2, r2
 8001ff2:	189b      	adds	r3, r3, r2
 8001ff4:	000a      	movs	r2, r1
 8001ff6:	0219      	lsls	r1, r3, #8
 8001ff8:	d400      	bmi.n	8001ffc <__aeabi_ddiv+0x418>
 8001ffa:	e0c2      	b.n	8002182 <__aeabi_ddiv+0x59e>
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	2400      	movs	r4, #0
 8002000:	2500      	movs	r5, #0
 8002002:	e646      	b.n	8001c92 <__aeabi_ddiv+0xae>
 8002004:	2380      	movs	r3, #128	; 0x80
 8002006:	4641      	mov	r1, r8
 8002008:	031b      	lsls	r3, r3, #12
 800200a:	4219      	tst	r1, r3
 800200c:	d008      	beq.n	8002020 <__aeabi_ddiv+0x43c>
 800200e:	421c      	tst	r4, r3
 8002010:	d106      	bne.n	8002020 <__aeabi_ddiv+0x43c>
 8002012:	431c      	orrs	r4, r3
 8002014:	0324      	lsls	r4, r4, #12
 8002016:	46ba      	mov	sl, r7
 8002018:	0015      	movs	r5, r2
 800201a:	4b69      	ldr	r3, [pc, #420]	; (80021c0 <__aeabi_ddiv+0x5dc>)
 800201c:	0b24      	lsrs	r4, r4, #12
 800201e:	e638      	b.n	8001c92 <__aeabi_ddiv+0xae>
 8002020:	2480      	movs	r4, #128	; 0x80
 8002022:	4643      	mov	r3, r8
 8002024:	0324      	lsls	r4, r4, #12
 8002026:	431c      	orrs	r4, r3
 8002028:	0324      	lsls	r4, r4, #12
 800202a:	46b2      	mov	sl, r6
 800202c:	4b64      	ldr	r3, [pc, #400]	; (80021c0 <__aeabi_ddiv+0x5dc>)
 800202e:	0b24      	lsrs	r4, r4, #12
 8002030:	e62f      	b.n	8001c92 <__aeabi_ddiv+0xae>
 8002032:	2b00      	cmp	r3, #0
 8002034:	d100      	bne.n	8002038 <__aeabi_ddiv+0x454>
 8002036:	e703      	b.n	8001e40 <__aeabi_ddiv+0x25c>
 8002038:	19a6      	adds	r6, r4, r6
 800203a:	1e68      	subs	r0, r5, #1
 800203c:	42a6      	cmp	r6, r4
 800203e:	d200      	bcs.n	8002042 <__aeabi_ddiv+0x45e>
 8002040:	e08d      	b.n	800215e <__aeabi_ddiv+0x57a>
 8002042:	428e      	cmp	r6, r1
 8002044:	d200      	bcs.n	8002048 <__aeabi_ddiv+0x464>
 8002046:	e0a3      	b.n	8002190 <__aeabi_ddiv+0x5ac>
 8002048:	d100      	bne.n	800204c <__aeabi_ddiv+0x468>
 800204a:	e0b3      	b.n	80021b4 <__aeabi_ddiv+0x5d0>
 800204c:	0005      	movs	r5, r0
 800204e:	e6f5      	b.n	8001e3c <__aeabi_ddiv+0x258>
 8002050:	42aa      	cmp	r2, r5
 8002052:	d900      	bls.n	8002056 <__aeabi_ddiv+0x472>
 8002054:	e639      	b.n	8001cca <__aeabi_ddiv+0xe6>
 8002056:	4643      	mov	r3, r8
 8002058:	07de      	lsls	r6, r3, #31
 800205a:	0858      	lsrs	r0, r3, #1
 800205c:	086b      	lsrs	r3, r5, #1
 800205e:	431e      	orrs	r6, r3
 8002060:	07ed      	lsls	r5, r5, #31
 8002062:	e639      	b.n	8001cd8 <__aeabi_ddiv+0xf4>
 8002064:	4648      	mov	r0, r9
 8002066:	f001 f937 	bl	80032d8 <__clzsi2>
 800206a:	0001      	movs	r1, r0
 800206c:	0002      	movs	r2, r0
 800206e:	3115      	adds	r1, #21
 8002070:	3220      	adds	r2, #32
 8002072:	291c      	cmp	r1, #28
 8002074:	dc00      	bgt.n	8002078 <__aeabi_ddiv+0x494>
 8002076:	e72c      	b.n	8001ed2 <__aeabi_ddiv+0x2ee>
 8002078:	464b      	mov	r3, r9
 800207a:	3808      	subs	r0, #8
 800207c:	4083      	lsls	r3, r0
 800207e:	2500      	movs	r5, #0
 8002080:	4698      	mov	r8, r3
 8002082:	e732      	b.n	8001eea <__aeabi_ddiv+0x306>
 8002084:	f001 f928 	bl	80032d8 <__clzsi2>
 8002088:	0003      	movs	r3, r0
 800208a:	001a      	movs	r2, r3
 800208c:	3215      	adds	r2, #21
 800208e:	3020      	adds	r0, #32
 8002090:	2a1c      	cmp	r2, #28
 8002092:	dc00      	bgt.n	8002096 <__aeabi_ddiv+0x4b2>
 8002094:	e700      	b.n	8001e98 <__aeabi_ddiv+0x2b4>
 8002096:	4654      	mov	r4, sl
 8002098:	3b08      	subs	r3, #8
 800209a:	2200      	movs	r2, #0
 800209c:	409c      	lsls	r4, r3
 800209e:	e705      	b.n	8001eac <__aeabi_ddiv+0x2c8>
 80020a0:	1936      	adds	r6, r6, r4
 80020a2:	3b01      	subs	r3, #1
 80020a4:	42b4      	cmp	r4, r6
 80020a6:	d900      	bls.n	80020aa <__aeabi_ddiv+0x4c6>
 80020a8:	e6a6      	b.n	8001df8 <__aeabi_ddiv+0x214>
 80020aa:	42b2      	cmp	r2, r6
 80020ac:	d800      	bhi.n	80020b0 <__aeabi_ddiv+0x4cc>
 80020ae:	e6a3      	b.n	8001df8 <__aeabi_ddiv+0x214>
 80020b0:	1e83      	subs	r3, r0, #2
 80020b2:	1936      	adds	r6, r6, r4
 80020b4:	e6a0      	b.n	8001df8 <__aeabi_ddiv+0x214>
 80020b6:	1909      	adds	r1, r1, r4
 80020b8:	3d01      	subs	r5, #1
 80020ba:	428c      	cmp	r4, r1
 80020bc:	d900      	bls.n	80020c0 <__aeabi_ddiv+0x4dc>
 80020be:	e68d      	b.n	8001ddc <__aeabi_ddiv+0x1f8>
 80020c0:	428a      	cmp	r2, r1
 80020c2:	d800      	bhi.n	80020c6 <__aeabi_ddiv+0x4e2>
 80020c4:	e68a      	b.n	8001ddc <__aeabi_ddiv+0x1f8>
 80020c6:	1e85      	subs	r5, r0, #2
 80020c8:	1909      	adds	r1, r1, r4
 80020ca:	e687      	b.n	8001ddc <__aeabi_ddiv+0x1f8>
 80020cc:	230f      	movs	r3, #15
 80020ce:	402b      	ands	r3, r5
 80020d0:	2b04      	cmp	r3, #4
 80020d2:	d100      	bne.n	80020d6 <__aeabi_ddiv+0x4f2>
 80020d4:	e6bc      	b.n	8001e50 <__aeabi_ddiv+0x26c>
 80020d6:	2305      	movs	r3, #5
 80020d8:	425b      	negs	r3, r3
 80020da:	42ab      	cmp	r3, r5
 80020dc:	419b      	sbcs	r3, r3
 80020de:	3504      	adds	r5, #4
 80020e0:	425b      	negs	r3, r3
 80020e2:	08ed      	lsrs	r5, r5, #3
 80020e4:	4498      	add	r8, r3
 80020e6:	e6b4      	b.n	8001e52 <__aeabi_ddiv+0x26e>
 80020e8:	42af      	cmp	r7, r5
 80020ea:	d900      	bls.n	80020ee <__aeabi_ddiv+0x50a>
 80020ec:	e660      	b.n	8001db0 <__aeabi_ddiv+0x1cc>
 80020ee:	4282      	cmp	r2, r0
 80020f0:	d804      	bhi.n	80020fc <__aeabi_ddiv+0x518>
 80020f2:	d000      	beq.n	80020f6 <__aeabi_ddiv+0x512>
 80020f4:	e65c      	b.n	8001db0 <__aeabi_ddiv+0x1cc>
 80020f6:	42ae      	cmp	r6, r5
 80020f8:	d800      	bhi.n	80020fc <__aeabi_ddiv+0x518>
 80020fa:	e659      	b.n	8001db0 <__aeabi_ddiv+0x1cc>
 80020fc:	2302      	movs	r3, #2
 80020fe:	425b      	negs	r3, r3
 8002100:	469c      	mov	ip, r3
 8002102:	9b00      	ldr	r3, [sp, #0]
 8002104:	44e0      	add	r8, ip
 8002106:	469c      	mov	ip, r3
 8002108:	4465      	add	r5, ip
 800210a:	429d      	cmp	r5, r3
 800210c:	419b      	sbcs	r3, r3
 800210e:	425b      	negs	r3, r3
 8002110:	191b      	adds	r3, r3, r4
 8002112:	18c0      	adds	r0, r0, r3
 8002114:	e64d      	b.n	8001db2 <__aeabi_ddiv+0x1ce>
 8002116:	428a      	cmp	r2, r1
 8002118:	d800      	bhi.n	800211c <__aeabi_ddiv+0x538>
 800211a:	e60e      	b.n	8001d3a <__aeabi_ddiv+0x156>
 800211c:	1e83      	subs	r3, r0, #2
 800211e:	1909      	adds	r1, r1, r4
 8002120:	e60b      	b.n	8001d3a <__aeabi_ddiv+0x156>
 8002122:	428a      	cmp	r2, r1
 8002124:	d800      	bhi.n	8002128 <__aeabi_ddiv+0x544>
 8002126:	e5f4      	b.n	8001d12 <__aeabi_ddiv+0x12e>
 8002128:	1e83      	subs	r3, r0, #2
 800212a:	4698      	mov	r8, r3
 800212c:	1909      	adds	r1, r1, r4
 800212e:	e5f0      	b.n	8001d12 <__aeabi_ddiv+0x12e>
 8002130:	4925      	ldr	r1, [pc, #148]	; (80021c8 <__aeabi_ddiv+0x5e4>)
 8002132:	0028      	movs	r0, r5
 8002134:	4459      	add	r1, fp
 8002136:	408d      	lsls	r5, r1
 8002138:	4642      	mov	r2, r8
 800213a:	408a      	lsls	r2, r1
 800213c:	1e69      	subs	r1, r5, #1
 800213e:	418d      	sbcs	r5, r1
 8002140:	4641      	mov	r1, r8
 8002142:	40d8      	lsrs	r0, r3
 8002144:	40d9      	lsrs	r1, r3
 8002146:	4302      	orrs	r2, r0
 8002148:	432a      	orrs	r2, r5
 800214a:	000b      	movs	r3, r1
 800214c:	0751      	lsls	r1, r2, #29
 800214e:	d100      	bne.n	8002152 <__aeabi_ddiv+0x56e>
 8002150:	e751      	b.n	8001ff6 <__aeabi_ddiv+0x412>
 8002152:	210f      	movs	r1, #15
 8002154:	4011      	ands	r1, r2
 8002156:	2904      	cmp	r1, #4
 8002158:	d000      	beq.n	800215c <__aeabi_ddiv+0x578>
 800215a:	e746      	b.n	8001fea <__aeabi_ddiv+0x406>
 800215c:	e74b      	b.n	8001ff6 <__aeabi_ddiv+0x412>
 800215e:	0005      	movs	r5, r0
 8002160:	428e      	cmp	r6, r1
 8002162:	d000      	beq.n	8002166 <__aeabi_ddiv+0x582>
 8002164:	e66a      	b.n	8001e3c <__aeabi_ddiv+0x258>
 8002166:	9a00      	ldr	r2, [sp, #0]
 8002168:	4293      	cmp	r3, r2
 800216a:	d000      	beq.n	800216e <__aeabi_ddiv+0x58a>
 800216c:	e666      	b.n	8001e3c <__aeabi_ddiv+0x258>
 800216e:	e667      	b.n	8001e40 <__aeabi_ddiv+0x25c>
 8002170:	4a16      	ldr	r2, [pc, #88]	; (80021cc <__aeabi_ddiv+0x5e8>)
 8002172:	445a      	add	r2, fp
 8002174:	2a00      	cmp	r2, #0
 8002176:	dc00      	bgt.n	800217a <__aeabi_ddiv+0x596>
 8002178:	e710      	b.n	8001f9c <__aeabi_ddiv+0x3b8>
 800217a:	2301      	movs	r3, #1
 800217c:	2500      	movs	r5, #0
 800217e:	4498      	add	r8, r3
 8002180:	e667      	b.n	8001e52 <__aeabi_ddiv+0x26e>
 8002182:	075d      	lsls	r5, r3, #29
 8002184:	025b      	lsls	r3, r3, #9
 8002186:	0b1c      	lsrs	r4, r3, #12
 8002188:	08d2      	lsrs	r2, r2, #3
 800218a:	2300      	movs	r3, #0
 800218c:	4315      	orrs	r5, r2
 800218e:	e580      	b.n	8001c92 <__aeabi_ddiv+0xae>
 8002190:	9800      	ldr	r0, [sp, #0]
 8002192:	3d02      	subs	r5, #2
 8002194:	0042      	lsls	r2, r0, #1
 8002196:	4282      	cmp	r2, r0
 8002198:	41bf      	sbcs	r7, r7
 800219a:	427f      	negs	r7, r7
 800219c:	193c      	adds	r4, r7, r4
 800219e:	1936      	adds	r6, r6, r4
 80021a0:	9200      	str	r2, [sp, #0]
 80021a2:	e7dd      	b.n	8002160 <__aeabi_ddiv+0x57c>
 80021a4:	2480      	movs	r4, #128	; 0x80
 80021a6:	4643      	mov	r3, r8
 80021a8:	0324      	lsls	r4, r4, #12
 80021aa:	431c      	orrs	r4, r3
 80021ac:	0324      	lsls	r4, r4, #12
 80021ae:	4b04      	ldr	r3, [pc, #16]	; (80021c0 <__aeabi_ddiv+0x5dc>)
 80021b0:	0b24      	lsrs	r4, r4, #12
 80021b2:	e56e      	b.n	8001c92 <__aeabi_ddiv+0xae>
 80021b4:	9a00      	ldr	r2, [sp, #0]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d3ea      	bcc.n	8002190 <__aeabi_ddiv+0x5ac>
 80021ba:	0005      	movs	r5, r0
 80021bc:	e7d3      	b.n	8002166 <__aeabi_ddiv+0x582>
 80021be:	46c0      	nop			; (mov r8, r8)
 80021c0:	000007ff 	.word	0x000007ff
 80021c4:	0000043e 	.word	0x0000043e
 80021c8:	0000041e 	.word	0x0000041e
 80021cc:	000003ff 	.word	0x000003ff

080021d0 <__eqdf2>:
 80021d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021d2:	464e      	mov	r6, r9
 80021d4:	4645      	mov	r5, r8
 80021d6:	46de      	mov	lr, fp
 80021d8:	4657      	mov	r7, sl
 80021da:	4690      	mov	r8, r2
 80021dc:	b5e0      	push	{r5, r6, r7, lr}
 80021de:	0017      	movs	r7, r2
 80021e0:	031a      	lsls	r2, r3, #12
 80021e2:	0b12      	lsrs	r2, r2, #12
 80021e4:	0005      	movs	r5, r0
 80021e6:	4684      	mov	ip, r0
 80021e8:	4819      	ldr	r0, [pc, #100]	; (8002250 <__eqdf2+0x80>)
 80021ea:	030e      	lsls	r6, r1, #12
 80021ec:	004c      	lsls	r4, r1, #1
 80021ee:	4691      	mov	r9, r2
 80021f0:	005a      	lsls	r2, r3, #1
 80021f2:	0fdb      	lsrs	r3, r3, #31
 80021f4:	469b      	mov	fp, r3
 80021f6:	0b36      	lsrs	r6, r6, #12
 80021f8:	0d64      	lsrs	r4, r4, #21
 80021fa:	0fc9      	lsrs	r1, r1, #31
 80021fc:	0d52      	lsrs	r2, r2, #21
 80021fe:	4284      	cmp	r4, r0
 8002200:	d019      	beq.n	8002236 <__eqdf2+0x66>
 8002202:	4282      	cmp	r2, r0
 8002204:	d010      	beq.n	8002228 <__eqdf2+0x58>
 8002206:	2001      	movs	r0, #1
 8002208:	4294      	cmp	r4, r2
 800220a:	d10e      	bne.n	800222a <__eqdf2+0x5a>
 800220c:	454e      	cmp	r6, r9
 800220e:	d10c      	bne.n	800222a <__eqdf2+0x5a>
 8002210:	2001      	movs	r0, #1
 8002212:	45c4      	cmp	ip, r8
 8002214:	d109      	bne.n	800222a <__eqdf2+0x5a>
 8002216:	4559      	cmp	r1, fp
 8002218:	d017      	beq.n	800224a <__eqdf2+0x7a>
 800221a:	2c00      	cmp	r4, #0
 800221c:	d105      	bne.n	800222a <__eqdf2+0x5a>
 800221e:	0030      	movs	r0, r6
 8002220:	4328      	orrs	r0, r5
 8002222:	1e43      	subs	r3, r0, #1
 8002224:	4198      	sbcs	r0, r3
 8002226:	e000      	b.n	800222a <__eqdf2+0x5a>
 8002228:	2001      	movs	r0, #1
 800222a:	bcf0      	pop	{r4, r5, r6, r7}
 800222c:	46bb      	mov	fp, r7
 800222e:	46b2      	mov	sl, r6
 8002230:	46a9      	mov	r9, r5
 8002232:	46a0      	mov	r8, r4
 8002234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002236:	0033      	movs	r3, r6
 8002238:	2001      	movs	r0, #1
 800223a:	432b      	orrs	r3, r5
 800223c:	d1f5      	bne.n	800222a <__eqdf2+0x5a>
 800223e:	42a2      	cmp	r2, r4
 8002240:	d1f3      	bne.n	800222a <__eqdf2+0x5a>
 8002242:	464b      	mov	r3, r9
 8002244:	433b      	orrs	r3, r7
 8002246:	d1f0      	bne.n	800222a <__eqdf2+0x5a>
 8002248:	e7e2      	b.n	8002210 <__eqdf2+0x40>
 800224a:	2000      	movs	r0, #0
 800224c:	e7ed      	b.n	800222a <__eqdf2+0x5a>
 800224e:	46c0      	nop			; (mov r8, r8)
 8002250:	000007ff 	.word	0x000007ff

08002254 <__gedf2>:
 8002254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002256:	4647      	mov	r7, r8
 8002258:	46ce      	mov	lr, r9
 800225a:	0004      	movs	r4, r0
 800225c:	0018      	movs	r0, r3
 800225e:	0016      	movs	r6, r2
 8002260:	031b      	lsls	r3, r3, #12
 8002262:	0b1b      	lsrs	r3, r3, #12
 8002264:	4d2d      	ldr	r5, [pc, #180]	; (800231c <__gedf2+0xc8>)
 8002266:	004a      	lsls	r2, r1, #1
 8002268:	4699      	mov	r9, r3
 800226a:	b580      	push	{r7, lr}
 800226c:	0043      	lsls	r3, r0, #1
 800226e:	030f      	lsls	r7, r1, #12
 8002270:	46a4      	mov	ip, r4
 8002272:	46b0      	mov	r8, r6
 8002274:	0b3f      	lsrs	r7, r7, #12
 8002276:	0d52      	lsrs	r2, r2, #21
 8002278:	0fc9      	lsrs	r1, r1, #31
 800227a:	0d5b      	lsrs	r3, r3, #21
 800227c:	0fc0      	lsrs	r0, r0, #31
 800227e:	42aa      	cmp	r2, r5
 8002280:	d021      	beq.n	80022c6 <__gedf2+0x72>
 8002282:	42ab      	cmp	r3, r5
 8002284:	d013      	beq.n	80022ae <__gedf2+0x5a>
 8002286:	2a00      	cmp	r2, #0
 8002288:	d122      	bne.n	80022d0 <__gedf2+0x7c>
 800228a:	433c      	orrs	r4, r7
 800228c:	2b00      	cmp	r3, #0
 800228e:	d102      	bne.n	8002296 <__gedf2+0x42>
 8002290:	464d      	mov	r5, r9
 8002292:	432e      	orrs	r6, r5
 8002294:	d022      	beq.n	80022dc <__gedf2+0x88>
 8002296:	2c00      	cmp	r4, #0
 8002298:	d010      	beq.n	80022bc <__gedf2+0x68>
 800229a:	4281      	cmp	r1, r0
 800229c:	d022      	beq.n	80022e4 <__gedf2+0x90>
 800229e:	2002      	movs	r0, #2
 80022a0:	3901      	subs	r1, #1
 80022a2:	4008      	ands	r0, r1
 80022a4:	3801      	subs	r0, #1
 80022a6:	bcc0      	pop	{r6, r7}
 80022a8:	46b9      	mov	r9, r7
 80022aa:	46b0      	mov	r8, r6
 80022ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022ae:	464d      	mov	r5, r9
 80022b0:	432e      	orrs	r6, r5
 80022b2:	d129      	bne.n	8002308 <__gedf2+0xb4>
 80022b4:	2a00      	cmp	r2, #0
 80022b6:	d1f0      	bne.n	800229a <__gedf2+0x46>
 80022b8:	433c      	orrs	r4, r7
 80022ba:	d1ee      	bne.n	800229a <__gedf2+0x46>
 80022bc:	2800      	cmp	r0, #0
 80022be:	d1f2      	bne.n	80022a6 <__gedf2+0x52>
 80022c0:	2001      	movs	r0, #1
 80022c2:	4240      	negs	r0, r0
 80022c4:	e7ef      	b.n	80022a6 <__gedf2+0x52>
 80022c6:	003d      	movs	r5, r7
 80022c8:	4325      	orrs	r5, r4
 80022ca:	d11d      	bne.n	8002308 <__gedf2+0xb4>
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d0ee      	beq.n	80022ae <__gedf2+0x5a>
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1e2      	bne.n	800229a <__gedf2+0x46>
 80022d4:	464c      	mov	r4, r9
 80022d6:	4326      	orrs	r6, r4
 80022d8:	d1df      	bne.n	800229a <__gedf2+0x46>
 80022da:	e7e0      	b.n	800229e <__gedf2+0x4a>
 80022dc:	2000      	movs	r0, #0
 80022de:	2c00      	cmp	r4, #0
 80022e0:	d0e1      	beq.n	80022a6 <__gedf2+0x52>
 80022e2:	e7dc      	b.n	800229e <__gedf2+0x4a>
 80022e4:	429a      	cmp	r2, r3
 80022e6:	dc0a      	bgt.n	80022fe <__gedf2+0xaa>
 80022e8:	dbe8      	blt.n	80022bc <__gedf2+0x68>
 80022ea:	454f      	cmp	r7, r9
 80022ec:	d8d7      	bhi.n	800229e <__gedf2+0x4a>
 80022ee:	d00e      	beq.n	800230e <__gedf2+0xba>
 80022f0:	2000      	movs	r0, #0
 80022f2:	454f      	cmp	r7, r9
 80022f4:	d2d7      	bcs.n	80022a6 <__gedf2+0x52>
 80022f6:	2900      	cmp	r1, #0
 80022f8:	d0e2      	beq.n	80022c0 <__gedf2+0x6c>
 80022fa:	0008      	movs	r0, r1
 80022fc:	e7d3      	b.n	80022a6 <__gedf2+0x52>
 80022fe:	4243      	negs	r3, r0
 8002300:	4158      	adcs	r0, r3
 8002302:	0040      	lsls	r0, r0, #1
 8002304:	3801      	subs	r0, #1
 8002306:	e7ce      	b.n	80022a6 <__gedf2+0x52>
 8002308:	2002      	movs	r0, #2
 800230a:	4240      	negs	r0, r0
 800230c:	e7cb      	b.n	80022a6 <__gedf2+0x52>
 800230e:	45c4      	cmp	ip, r8
 8002310:	d8c5      	bhi.n	800229e <__gedf2+0x4a>
 8002312:	2000      	movs	r0, #0
 8002314:	45c4      	cmp	ip, r8
 8002316:	d2c6      	bcs.n	80022a6 <__gedf2+0x52>
 8002318:	e7ed      	b.n	80022f6 <__gedf2+0xa2>
 800231a:	46c0      	nop			; (mov r8, r8)
 800231c:	000007ff 	.word	0x000007ff

08002320 <__ledf2>:
 8002320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002322:	4647      	mov	r7, r8
 8002324:	46ce      	mov	lr, r9
 8002326:	0004      	movs	r4, r0
 8002328:	0018      	movs	r0, r3
 800232a:	0016      	movs	r6, r2
 800232c:	031b      	lsls	r3, r3, #12
 800232e:	0b1b      	lsrs	r3, r3, #12
 8002330:	4d2c      	ldr	r5, [pc, #176]	; (80023e4 <__ledf2+0xc4>)
 8002332:	004a      	lsls	r2, r1, #1
 8002334:	4699      	mov	r9, r3
 8002336:	b580      	push	{r7, lr}
 8002338:	0043      	lsls	r3, r0, #1
 800233a:	030f      	lsls	r7, r1, #12
 800233c:	46a4      	mov	ip, r4
 800233e:	46b0      	mov	r8, r6
 8002340:	0b3f      	lsrs	r7, r7, #12
 8002342:	0d52      	lsrs	r2, r2, #21
 8002344:	0fc9      	lsrs	r1, r1, #31
 8002346:	0d5b      	lsrs	r3, r3, #21
 8002348:	0fc0      	lsrs	r0, r0, #31
 800234a:	42aa      	cmp	r2, r5
 800234c:	d00d      	beq.n	800236a <__ledf2+0x4a>
 800234e:	42ab      	cmp	r3, r5
 8002350:	d010      	beq.n	8002374 <__ledf2+0x54>
 8002352:	2a00      	cmp	r2, #0
 8002354:	d127      	bne.n	80023a6 <__ledf2+0x86>
 8002356:	433c      	orrs	r4, r7
 8002358:	2b00      	cmp	r3, #0
 800235a:	d111      	bne.n	8002380 <__ledf2+0x60>
 800235c:	464d      	mov	r5, r9
 800235e:	432e      	orrs	r6, r5
 8002360:	d10e      	bne.n	8002380 <__ledf2+0x60>
 8002362:	2000      	movs	r0, #0
 8002364:	2c00      	cmp	r4, #0
 8002366:	d015      	beq.n	8002394 <__ledf2+0x74>
 8002368:	e00e      	b.n	8002388 <__ledf2+0x68>
 800236a:	003d      	movs	r5, r7
 800236c:	4325      	orrs	r5, r4
 800236e:	d110      	bne.n	8002392 <__ledf2+0x72>
 8002370:	4293      	cmp	r3, r2
 8002372:	d118      	bne.n	80023a6 <__ledf2+0x86>
 8002374:	464d      	mov	r5, r9
 8002376:	432e      	orrs	r6, r5
 8002378:	d10b      	bne.n	8002392 <__ledf2+0x72>
 800237a:	2a00      	cmp	r2, #0
 800237c:	d102      	bne.n	8002384 <__ledf2+0x64>
 800237e:	433c      	orrs	r4, r7
 8002380:	2c00      	cmp	r4, #0
 8002382:	d00b      	beq.n	800239c <__ledf2+0x7c>
 8002384:	4281      	cmp	r1, r0
 8002386:	d014      	beq.n	80023b2 <__ledf2+0x92>
 8002388:	2002      	movs	r0, #2
 800238a:	3901      	subs	r1, #1
 800238c:	4008      	ands	r0, r1
 800238e:	3801      	subs	r0, #1
 8002390:	e000      	b.n	8002394 <__ledf2+0x74>
 8002392:	2002      	movs	r0, #2
 8002394:	bcc0      	pop	{r6, r7}
 8002396:	46b9      	mov	r9, r7
 8002398:	46b0      	mov	r8, r6
 800239a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800239c:	2800      	cmp	r0, #0
 800239e:	d1f9      	bne.n	8002394 <__ledf2+0x74>
 80023a0:	2001      	movs	r0, #1
 80023a2:	4240      	negs	r0, r0
 80023a4:	e7f6      	b.n	8002394 <__ledf2+0x74>
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1ec      	bne.n	8002384 <__ledf2+0x64>
 80023aa:	464c      	mov	r4, r9
 80023ac:	4326      	orrs	r6, r4
 80023ae:	d1e9      	bne.n	8002384 <__ledf2+0x64>
 80023b0:	e7ea      	b.n	8002388 <__ledf2+0x68>
 80023b2:	429a      	cmp	r2, r3
 80023b4:	dd04      	ble.n	80023c0 <__ledf2+0xa0>
 80023b6:	4243      	negs	r3, r0
 80023b8:	4158      	adcs	r0, r3
 80023ba:	0040      	lsls	r0, r0, #1
 80023bc:	3801      	subs	r0, #1
 80023be:	e7e9      	b.n	8002394 <__ledf2+0x74>
 80023c0:	429a      	cmp	r2, r3
 80023c2:	dbeb      	blt.n	800239c <__ledf2+0x7c>
 80023c4:	454f      	cmp	r7, r9
 80023c6:	d8df      	bhi.n	8002388 <__ledf2+0x68>
 80023c8:	d006      	beq.n	80023d8 <__ledf2+0xb8>
 80023ca:	2000      	movs	r0, #0
 80023cc:	454f      	cmp	r7, r9
 80023ce:	d2e1      	bcs.n	8002394 <__ledf2+0x74>
 80023d0:	2900      	cmp	r1, #0
 80023d2:	d0e5      	beq.n	80023a0 <__ledf2+0x80>
 80023d4:	0008      	movs	r0, r1
 80023d6:	e7dd      	b.n	8002394 <__ledf2+0x74>
 80023d8:	45c4      	cmp	ip, r8
 80023da:	d8d5      	bhi.n	8002388 <__ledf2+0x68>
 80023dc:	2000      	movs	r0, #0
 80023de:	45c4      	cmp	ip, r8
 80023e0:	d2d8      	bcs.n	8002394 <__ledf2+0x74>
 80023e2:	e7f5      	b.n	80023d0 <__ledf2+0xb0>
 80023e4:	000007ff 	.word	0x000007ff

080023e8 <__aeabi_dmul>:
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	4657      	mov	r7, sl
 80023ec:	464e      	mov	r6, r9
 80023ee:	4645      	mov	r5, r8
 80023f0:	46de      	mov	lr, fp
 80023f2:	b5e0      	push	{r5, r6, r7, lr}
 80023f4:	4698      	mov	r8, r3
 80023f6:	030c      	lsls	r4, r1, #12
 80023f8:	004b      	lsls	r3, r1, #1
 80023fa:	0006      	movs	r6, r0
 80023fc:	4692      	mov	sl, r2
 80023fe:	b087      	sub	sp, #28
 8002400:	0b24      	lsrs	r4, r4, #12
 8002402:	0d5b      	lsrs	r3, r3, #21
 8002404:	0fcf      	lsrs	r7, r1, #31
 8002406:	2b00      	cmp	r3, #0
 8002408:	d100      	bne.n	800240c <__aeabi_dmul+0x24>
 800240a:	e15c      	b.n	80026c6 <__aeabi_dmul+0x2de>
 800240c:	4ad9      	ldr	r2, [pc, #868]	; (8002774 <__aeabi_dmul+0x38c>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d100      	bne.n	8002414 <__aeabi_dmul+0x2c>
 8002412:	e175      	b.n	8002700 <__aeabi_dmul+0x318>
 8002414:	0f42      	lsrs	r2, r0, #29
 8002416:	00e4      	lsls	r4, r4, #3
 8002418:	4314      	orrs	r4, r2
 800241a:	2280      	movs	r2, #128	; 0x80
 800241c:	0412      	lsls	r2, r2, #16
 800241e:	4314      	orrs	r4, r2
 8002420:	4ad5      	ldr	r2, [pc, #852]	; (8002778 <__aeabi_dmul+0x390>)
 8002422:	00c5      	lsls	r5, r0, #3
 8002424:	4694      	mov	ip, r2
 8002426:	4463      	add	r3, ip
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	2300      	movs	r3, #0
 800242c:	4699      	mov	r9, r3
 800242e:	469b      	mov	fp, r3
 8002430:	4643      	mov	r3, r8
 8002432:	4642      	mov	r2, r8
 8002434:	031e      	lsls	r6, r3, #12
 8002436:	0fd2      	lsrs	r2, r2, #31
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	4650      	mov	r0, sl
 800243c:	4690      	mov	r8, r2
 800243e:	0b36      	lsrs	r6, r6, #12
 8002440:	0d5b      	lsrs	r3, r3, #21
 8002442:	d100      	bne.n	8002446 <__aeabi_dmul+0x5e>
 8002444:	e120      	b.n	8002688 <__aeabi_dmul+0x2a0>
 8002446:	4acb      	ldr	r2, [pc, #812]	; (8002774 <__aeabi_dmul+0x38c>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d100      	bne.n	800244e <__aeabi_dmul+0x66>
 800244c:	e162      	b.n	8002714 <__aeabi_dmul+0x32c>
 800244e:	49ca      	ldr	r1, [pc, #808]	; (8002778 <__aeabi_dmul+0x390>)
 8002450:	0f42      	lsrs	r2, r0, #29
 8002452:	468c      	mov	ip, r1
 8002454:	9900      	ldr	r1, [sp, #0]
 8002456:	4463      	add	r3, ip
 8002458:	00f6      	lsls	r6, r6, #3
 800245a:	468c      	mov	ip, r1
 800245c:	4316      	orrs	r6, r2
 800245e:	2280      	movs	r2, #128	; 0x80
 8002460:	449c      	add	ip, r3
 8002462:	0412      	lsls	r2, r2, #16
 8002464:	4663      	mov	r3, ip
 8002466:	4316      	orrs	r6, r2
 8002468:	00c2      	lsls	r2, r0, #3
 800246a:	2000      	movs	r0, #0
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	9900      	ldr	r1, [sp, #0]
 8002470:	4643      	mov	r3, r8
 8002472:	3101      	adds	r1, #1
 8002474:	468c      	mov	ip, r1
 8002476:	4649      	mov	r1, r9
 8002478:	407b      	eors	r3, r7
 800247a:	9301      	str	r3, [sp, #4]
 800247c:	290f      	cmp	r1, #15
 800247e:	d826      	bhi.n	80024ce <__aeabi_dmul+0xe6>
 8002480:	4bbe      	ldr	r3, [pc, #760]	; (800277c <__aeabi_dmul+0x394>)
 8002482:	0089      	lsls	r1, r1, #2
 8002484:	5859      	ldr	r1, [r3, r1]
 8002486:	468f      	mov	pc, r1
 8002488:	4643      	mov	r3, r8
 800248a:	9301      	str	r3, [sp, #4]
 800248c:	0034      	movs	r4, r6
 800248e:	0015      	movs	r5, r2
 8002490:	4683      	mov	fp, r0
 8002492:	465b      	mov	r3, fp
 8002494:	2b02      	cmp	r3, #2
 8002496:	d016      	beq.n	80024c6 <__aeabi_dmul+0xde>
 8002498:	2b03      	cmp	r3, #3
 800249a:	d100      	bne.n	800249e <__aeabi_dmul+0xb6>
 800249c:	e203      	b.n	80028a6 <__aeabi_dmul+0x4be>
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d000      	beq.n	80024a4 <__aeabi_dmul+0xbc>
 80024a2:	e0cd      	b.n	8002640 <__aeabi_dmul+0x258>
 80024a4:	2200      	movs	r2, #0
 80024a6:	2400      	movs	r4, #0
 80024a8:	2500      	movs	r5, #0
 80024aa:	9b01      	ldr	r3, [sp, #4]
 80024ac:	0512      	lsls	r2, r2, #20
 80024ae:	4322      	orrs	r2, r4
 80024b0:	07db      	lsls	r3, r3, #31
 80024b2:	431a      	orrs	r2, r3
 80024b4:	0028      	movs	r0, r5
 80024b6:	0011      	movs	r1, r2
 80024b8:	b007      	add	sp, #28
 80024ba:	bcf0      	pop	{r4, r5, r6, r7}
 80024bc:	46bb      	mov	fp, r7
 80024be:	46b2      	mov	sl, r6
 80024c0:	46a9      	mov	r9, r5
 80024c2:	46a0      	mov	r8, r4
 80024c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024c6:	2400      	movs	r4, #0
 80024c8:	2500      	movs	r5, #0
 80024ca:	4aaa      	ldr	r2, [pc, #680]	; (8002774 <__aeabi_dmul+0x38c>)
 80024cc:	e7ed      	b.n	80024aa <__aeabi_dmul+0xc2>
 80024ce:	0c28      	lsrs	r0, r5, #16
 80024d0:	042d      	lsls	r5, r5, #16
 80024d2:	0c2d      	lsrs	r5, r5, #16
 80024d4:	002b      	movs	r3, r5
 80024d6:	0c11      	lsrs	r1, r2, #16
 80024d8:	0412      	lsls	r2, r2, #16
 80024da:	0c12      	lsrs	r2, r2, #16
 80024dc:	4353      	muls	r3, r2
 80024de:	4698      	mov	r8, r3
 80024e0:	0013      	movs	r3, r2
 80024e2:	002f      	movs	r7, r5
 80024e4:	4343      	muls	r3, r0
 80024e6:	4699      	mov	r9, r3
 80024e8:	434f      	muls	r7, r1
 80024ea:	444f      	add	r7, r9
 80024ec:	46bb      	mov	fp, r7
 80024ee:	4647      	mov	r7, r8
 80024f0:	000b      	movs	r3, r1
 80024f2:	0c3f      	lsrs	r7, r7, #16
 80024f4:	46ba      	mov	sl, r7
 80024f6:	4343      	muls	r3, r0
 80024f8:	44da      	add	sl, fp
 80024fa:	9302      	str	r3, [sp, #8]
 80024fc:	45d1      	cmp	r9, sl
 80024fe:	d904      	bls.n	800250a <__aeabi_dmul+0x122>
 8002500:	2780      	movs	r7, #128	; 0x80
 8002502:	027f      	lsls	r7, r7, #9
 8002504:	46b9      	mov	r9, r7
 8002506:	444b      	add	r3, r9
 8002508:	9302      	str	r3, [sp, #8]
 800250a:	4653      	mov	r3, sl
 800250c:	0c1b      	lsrs	r3, r3, #16
 800250e:	469b      	mov	fp, r3
 8002510:	4653      	mov	r3, sl
 8002512:	041f      	lsls	r7, r3, #16
 8002514:	4643      	mov	r3, r8
 8002516:	041b      	lsls	r3, r3, #16
 8002518:	0c1b      	lsrs	r3, r3, #16
 800251a:	4698      	mov	r8, r3
 800251c:	003b      	movs	r3, r7
 800251e:	4443      	add	r3, r8
 8002520:	9304      	str	r3, [sp, #16]
 8002522:	0c33      	lsrs	r3, r6, #16
 8002524:	0436      	lsls	r6, r6, #16
 8002526:	0c36      	lsrs	r6, r6, #16
 8002528:	4698      	mov	r8, r3
 800252a:	0033      	movs	r3, r6
 800252c:	4343      	muls	r3, r0
 800252e:	4699      	mov	r9, r3
 8002530:	4643      	mov	r3, r8
 8002532:	4343      	muls	r3, r0
 8002534:	002f      	movs	r7, r5
 8002536:	469a      	mov	sl, r3
 8002538:	4643      	mov	r3, r8
 800253a:	4377      	muls	r7, r6
 800253c:	435d      	muls	r5, r3
 800253e:	0c38      	lsrs	r0, r7, #16
 8002540:	444d      	add	r5, r9
 8002542:	1945      	adds	r5, r0, r5
 8002544:	45a9      	cmp	r9, r5
 8002546:	d903      	bls.n	8002550 <__aeabi_dmul+0x168>
 8002548:	2380      	movs	r3, #128	; 0x80
 800254a:	025b      	lsls	r3, r3, #9
 800254c:	4699      	mov	r9, r3
 800254e:	44ca      	add	sl, r9
 8002550:	043f      	lsls	r7, r7, #16
 8002552:	0c28      	lsrs	r0, r5, #16
 8002554:	0c3f      	lsrs	r7, r7, #16
 8002556:	042d      	lsls	r5, r5, #16
 8002558:	19ed      	adds	r5, r5, r7
 800255a:	0c27      	lsrs	r7, r4, #16
 800255c:	0424      	lsls	r4, r4, #16
 800255e:	0c24      	lsrs	r4, r4, #16
 8002560:	0003      	movs	r3, r0
 8002562:	0020      	movs	r0, r4
 8002564:	4350      	muls	r0, r2
 8002566:	437a      	muls	r2, r7
 8002568:	4691      	mov	r9, r2
 800256a:	003a      	movs	r2, r7
 800256c:	4453      	add	r3, sl
 800256e:	9305      	str	r3, [sp, #20]
 8002570:	0c03      	lsrs	r3, r0, #16
 8002572:	469a      	mov	sl, r3
 8002574:	434a      	muls	r2, r1
 8002576:	4361      	muls	r1, r4
 8002578:	4449      	add	r1, r9
 800257a:	4451      	add	r1, sl
 800257c:	44ab      	add	fp, r5
 800257e:	4589      	cmp	r9, r1
 8002580:	d903      	bls.n	800258a <__aeabi_dmul+0x1a2>
 8002582:	2380      	movs	r3, #128	; 0x80
 8002584:	025b      	lsls	r3, r3, #9
 8002586:	4699      	mov	r9, r3
 8002588:	444a      	add	r2, r9
 800258a:	0400      	lsls	r0, r0, #16
 800258c:	0c0b      	lsrs	r3, r1, #16
 800258e:	0c00      	lsrs	r0, r0, #16
 8002590:	0409      	lsls	r1, r1, #16
 8002592:	1809      	adds	r1, r1, r0
 8002594:	0020      	movs	r0, r4
 8002596:	4699      	mov	r9, r3
 8002598:	4643      	mov	r3, r8
 800259a:	4370      	muls	r0, r6
 800259c:	435c      	muls	r4, r3
 800259e:	437e      	muls	r6, r7
 80025a0:	435f      	muls	r7, r3
 80025a2:	0c03      	lsrs	r3, r0, #16
 80025a4:	4698      	mov	r8, r3
 80025a6:	19a4      	adds	r4, r4, r6
 80025a8:	4444      	add	r4, r8
 80025aa:	444a      	add	r2, r9
 80025ac:	9703      	str	r7, [sp, #12]
 80025ae:	42a6      	cmp	r6, r4
 80025b0:	d904      	bls.n	80025bc <__aeabi_dmul+0x1d4>
 80025b2:	2380      	movs	r3, #128	; 0x80
 80025b4:	025b      	lsls	r3, r3, #9
 80025b6:	4698      	mov	r8, r3
 80025b8:	4447      	add	r7, r8
 80025ba:	9703      	str	r7, [sp, #12]
 80025bc:	0423      	lsls	r3, r4, #16
 80025be:	9e02      	ldr	r6, [sp, #8]
 80025c0:	469a      	mov	sl, r3
 80025c2:	9b05      	ldr	r3, [sp, #20]
 80025c4:	445e      	add	r6, fp
 80025c6:	4698      	mov	r8, r3
 80025c8:	42ae      	cmp	r6, r5
 80025ca:	41ad      	sbcs	r5, r5
 80025cc:	1876      	adds	r6, r6, r1
 80025ce:	428e      	cmp	r6, r1
 80025d0:	4189      	sbcs	r1, r1
 80025d2:	0400      	lsls	r0, r0, #16
 80025d4:	0c00      	lsrs	r0, r0, #16
 80025d6:	4450      	add	r0, sl
 80025d8:	4440      	add	r0, r8
 80025da:	426d      	negs	r5, r5
 80025dc:	1947      	adds	r7, r0, r5
 80025de:	46b8      	mov	r8, r7
 80025e0:	4693      	mov	fp, r2
 80025e2:	4249      	negs	r1, r1
 80025e4:	4689      	mov	r9, r1
 80025e6:	44c3      	add	fp, r8
 80025e8:	44d9      	add	r9, fp
 80025ea:	4298      	cmp	r0, r3
 80025ec:	4180      	sbcs	r0, r0
 80025ee:	45a8      	cmp	r8, r5
 80025f0:	41ad      	sbcs	r5, r5
 80025f2:	4593      	cmp	fp, r2
 80025f4:	4192      	sbcs	r2, r2
 80025f6:	4589      	cmp	r9, r1
 80025f8:	4189      	sbcs	r1, r1
 80025fa:	426d      	negs	r5, r5
 80025fc:	4240      	negs	r0, r0
 80025fe:	4328      	orrs	r0, r5
 8002600:	0c24      	lsrs	r4, r4, #16
 8002602:	4252      	negs	r2, r2
 8002604:	4249      	negs	r1, r1
 8002606:	430a      	orrs	r2, r1
 8002608:	9b03      	ldr	r3, [sp, #12]
 800260a:	1900      	adds	r0, r0, r4
 800260c:	1880      	adds	r0, r0, r2
 800260e:	18c7      	adds	r7, r0, r3
 8002610:	464b      	mov	r3, r9
 8002612:	0ddc      	lsrs	r4, r3, #23
 8002614:	9b04      	ldr	r3, [sp, #16]
 8002616:	0275      	lsls	r5, r6, #9
 8002618:	431d      	orrs	r5, r3
 800261a:	1e6a      	subs	r2, r5, #1
 800261c:	4195      	sbcs	r5, r2
 800261e:	464b      	mov	r3, r9
 8002620:	0df6      	lsrs	r6, r6, #23
 8002622:	027f      	lsls	r7, r7, #9
 8002624:	4335      	orrs	r5, r6
 8002626:	025a      	lsls	r2, r3, #9
 8002628:	433c      	orrs	r4, r7
 800262a:	4315      	orrs	r5, r2
 800262c:	01fb      	lsls	r3, r7, #7
 800262e:	d400      	bmi.n	8002632 <__aeabi_dmul+0x24a>
 8002630:	e11c      	b.n	800286c <__aeabi_dmul+0x484>
 8002632:	2101      	movs	r1, #1
 8002634:	086a      	lsrs	r2, r5, #1
 8002636:	400d      	ands	r5, r1
 8002638:	4315      	orrs	r5, r2
 800263a:	07e2      	lsls	r2, r4, #31
 800263c:	4315      	orrs	r5, r2
 800263e:	0864      	lsrs	r4, r4, #1
 8002640:	494f      	ldr	r1, [pc, #316]	; (8002780 <__aeabi_dmul+0x398>)
 8002642:	4461      	add	r1, ip
 8002644:	2900      	cmp	r1, #0
 8002646:	dc00      	bgt.n	800264a <__aeabi_dmul+0x262>
 8002648:	e0b0      	b.n	80027ac <__aeabi_dmul+0x3c4>
 800264a:	076b      	lsls	r3, r5, #29
 800264c:	d009      	beq.n	8002662 <__aeabi_dmul+0x27a>
 800264e:	220f      	movs	r2, #15
 8002650:	402a      	ands	r2, r5
 8002652:	2a04      	cmp	r2, #4
 8002654:	d005      	beq.n	8002662 <__aeabi_dmul+0x27a>
 8002656:	1d2a      	adds	r2, r5, #4
 8002658:	42aa      	cmp	r2, r5
 800265a:	41ad      	sbcs	r5, r5
 800265c:	426d      	negs	r5, r5
 800265e:	1964      	adds	r4, r4, r5
 8002660:	0015      	movs	r5, r2
 8002662:	01e3      	lsls	r3, r4, #7
 8002664:	d504      	bpl.n	8002670 <__aeabi_dmul+0x288>
 8002666:	2180      	movs	r1, #128	; 0x80
 8002668:	4a46      	ldr	r2, [pc, #280]	; (8002784 <__aeabi_dmul+0x39c>)
 800266a:	00c9      	lsls	r1, r1, #3
 800266c:	4014      	ands	r4, r2
 800266e:	4461      	add	r1, ip
 8002670:	4a45      	ldr	r2, [pc, #276]	; (8002788 <__aeabi_dmul+0x3a0>)
 8002672:	4291      	cmp	r1, r2
 8002674:	dd00      	ble.n	8002678 <__aeabi_dmul+0x290>
 8002676:	e726      	b.n	80024c6 <__aeabi_dmul+0xde>
 8002678:	0762      	lsls	r2, r4, #29
 800267a:	08ed      	lsrs	r5, r5, #3
 800267c:	0264      	lsls	r4, r4, #9
 800267e:	0549      	lsls	r1, r1, #21
 8002680:	4315      	orrs	r5, r2
 8002682:	0b24      	lsrs	r4, r4, #12
 8002684:	0d4a      	lsrs	r2, r1, #21
 8002686:	e710      	b.n	80024aa <__aeabi_dmul+0xc2>
 8002688:	4652      	mov	r2, sl
 800268a:	4332      	orrs	r2, r6
 800268c:	d100      	bne.n	8002690 <__aeabi_dmul+0x2a8>
 800268e:	e07f      	b.n	8002790 <__aeabi_dmul+0x3a8>
 8002690:	2e00      	cmp	r6, #0
 8002692:	d100      	bne.n	8002696 <__aeabi_dmul+0x2ae>
 8002694:	e0dc      	b.n	8002850 <__aeabi_dmul+0x468>
 8002696:	0030      	movs	r0, r6
 8002698:	f000 fe1e 	bl	80032d8 <__clzsi2>
 800269c:	0002      	movs	r2, r0
 800269e:	3a0b      	subs	r2, #11
 80026a0:	231d      	movs	r3, #29
 80026a2:	0001      	movs	r1, r0
 80026a4:	1a9b      	subs	r3, r3, r2
 80026a6:	4652      	mov	r2, sl
 80026a8:	3908      	subs	r1, #8
 80026aa:	40da      	lsrs	r2, r3
 80026ac:	408e      	lsls	r6, r1
 80026ae:	4316      	orrs	r6, r2
 80026b0:	4652      	mov	r2, sl
 80026b2:	408a      	lsls	r2, r1
 80026b4:	9b00      	ldr	r3, [sp, #0]
 80026b6:	4935      	ldr	r1, [pc, #212]	; (800278c <__aeabi_dmul+0x3a4>)
 80026b8:	1a18      	subs	r0, r3, r0
 80026ba:	0003      	movs	r3, r0
 80026bc:	468c      	mov	ip, r1
 80026be:	4463      	add	r3, ip
 80026c0:	2000      	movs	r0, #0
 80026c2:	9300      	str	r3, [sp, #0]
 80026c4:	e6d3      	b.n	800246e <__aeabi_dmul+0x86>
 80026c6:	0025      	movs	r5, r4
 80026c8:	4305      	orrs	r5, r0
 80026ca:	d04a      	beq.n	8002762 <__aeabi_dmul+0x37a>
 80026cc:	2c00      	cmp	r4, #0
 80026ce:	d100      	bne.n	80026d2 <__aeabi_dmul+0x2ea>
 80026d0:	e0b0      	b.n	8002834 <__aeabi_dmul+0x44c>
 80026d2:	0020      	movs	r0, r4
 80026d4:	f000 fe00 	bl	80032d8 <__clzsi2>
 80026d8:	0001      	movs	r1, r0
 80026da:	0002      	movs	r2, r0
 80026dc:	390b      	subs	r1, #11
 80026de:	231d      	movs	r3, #29
 80026e0:	0010      	movs	r0, r2
 80026e2:	1a5b      	subs	r3, r3, r1
 80026e4:	0031      	movs	r1, r6
 80026e6:	0035      	movs	r5, r6
 80026e8:	3808      	subs	r0, #8
 80026ea:	4084      	lsls	r4, r0
 80026ec:	40d9      	lsrs	r1, r3
 80026ee:	4085      	lsls	r5, r0
 80026f0:	430c      	orrs	r4, r1
 80026f2:	4826      	ldr	r0, [pc, #152]	; (800278c <__aeabi_dmul+0x3a4>)
 80026f4:	1a83      	subs	r3, r0, r2
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	2300      	movs	r3, #0
 80026fa:	4699      	mov	r9, r3
 80026fc:	469b      	mov	fp, r3
 80026fe:	e697      	b.n	8002430 <__aeabi_dmul+0x48>
 8002700:	0005      	movs	r5, r0
 8002702:	4325      	orrs	r5, r4
 8002704:	d126      	bne.n	8002754 <__aeabi_dmul+0x36c>
 8002706:	2208      	movs	r2, #8
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	2302      	movs	r3, #2
 800270c:	2400      	movs	r4, #0
 800270e:	4691      	mov	r9, r2
 8002710:	469b      	mov	fp, r3
 8002712:	e68d      	b.n	8002430 <__aeabi_dmul+0x48>
 8002714:	4652      	mov	r2, sl
 8002716:	9b00      	ldr	r3, [sp, #0]
 8002718:	4332      	orrs	r2, r6
 800271a:	d110      	bne.n	800273e <__aeabi_dmul+0x356>
 800271c:	4915      	ldr	r1, [pc, #84]	; (8002774 <__aeabi_dmul+0x38c>)
 800271e:	2600      	movs	r6, #0
 8002720:	468c      	mov	ip, r1
 8002722:	4463      	add	r3, ip
 8002724:	4649      	mov	r1, r9
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	2302      	movs	r3, #2
 800272a:	4319      	orrs	r1, r3
 800272c:	4689      	mov	r9, r1
 800272e:	2002      	movs	r0, #2
 8002730:	e69d      	b.n	800246e <__aeabi_dmul+0x86>
 8002732:	465b      	mov	r3, fp
 8002734:	9701      	str	r7, [sp, #4]
 8002736:	2b02      	cmp	r3, #2
 8002738:	d000      	beq.n	800273c <__aeabi_dmul+0x354>
 800273a:	e6ad      	b.n	8002498 <__aeabi_dmul+0xb0>
 800273c:	e6c3      	b.n	80024c6 <__aeabi_dmul+0xde>
 800273e:	4a0d      	ldr	r2, [pc, #52]	; (8002774 <__aeabi_dmul+0x38c>)
 8002740:	2003      	movs	r0, #3
 8002742:	4694      	mov	ip, r2
 8002744:	4463      	add	r3, ip
 8002746:	464a      	mov	r2, r9
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	2303      	movs	r3, #3
 800274c:	431a      	orrs	r2, r3
 800274e:	4691      	mov	r9, r2
 8002750:	4652      	mov	r2, sl
 8002752:	e68c      	b.n	800246e <__aeabi_dmul+0x86>
 8002754:	220c      	movs	r2, #12
 8002756:	9300      	str	r3, [sp, #0]
 8002758:	2303      	movs	r3, #3
 800275a:	0005      	movs	r5, r0
 800275c:	4691      	mov	r9, r2
 800275e:	469b      	mov	fp, r3
 8002760:	e666      	b.n	8002430 <__aeabi_dmul+0x48>
 8002762:	2304      	movs	r3, #4
 8002764:	4699      	mov	r9, r3
 8002766:	2300      	movs	r3, #0
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	3301      	adds	r3, #1
 800276c:	2400      	movs	r4, #0
 800276e:	469b      	mov	fp, r3
 8002770:	e65e      	b.n	8002430 <__aeabi_dmul+0x48>
 8002772:	46c0      	nop			; (mov r8, r8)
 8002774:	000007ff 	.word	0x000007ff
 8002778:	fffffc01 	.word	0xfffffc01
 800277c:	080093f8 	.word	0x080093f8
 8002780:	000003ff 	.word	0x000003ff
 8002784:	feffffff 	.word	0xfeffffff
 8002788:	000007fe 	.word	0x000007fe
 800278c:	fffffc0d 	.word	0xfffffc0d
 8002790:	4649      	mov	r1, r9
 8002792:	2301      	movs	r3, #1
 8002794:	4319      	orrs	r1, r3
 8002796:	4689      	mov	r9, r1
 8002798:	2600      	movs	r6, #0
 800279a:	2001      	movs	r0, #1
 800279c:	e667      	b.n	800246e <__aeabi_dmul+0x86>
 800279e:	2300      	movs	r3, #0
 80027a0:	2480      	movs	r4, #128	; 0x80
 80027a2:	2500      	movs	r5, #0
 80027a4:	4a43      	ldr	r2, [pc, #268]	; (80028b4 <__aeabi_dmul+0x4cc>)
 80027a6:	9301      	str	r3, [sp, #4]
 80027a8:	0324      	lsls	r4, r4, #12
 80027aa:	e67e      	b.n	80024aa <__aeabi_dmul+0xc2>
 80027ac:	2001      	movs	r0, #1
 80027ae:	1a40      	subs	r0, r0, r1
 80027b0:	2838      	cmp	r0, #56	; 0x38
 80027b2:	dd00      	ble.n	80027b6 <__aeabi_dmul+0x3ce>
 80027b4:	e676      	b.n	80024a4 <__aeabi_dmul+0xbc>
 80027b6:	281f      	cmp	r0, #31
 80027b8:	dd5b      	ble.n	8002872 <__aeabi_dmul+0x48a>
 80027ba:	221f      	movs	r2, #31
 80027bc:	0023      	movs	r3, r4
 80027be:	4252      	negs	r2, r2
 80027c0:	1a51      	subs	r1, r2, r1
 80027c2:	40cb      	lsrs	r3, r1
 80027c4:	0019      	movs	r1, r3
 80027c6:	2820      	cmp	r0, #32
 80027c8:	d003      	beq.n	80027d2 <__aeabi_dmul+0x3ea>
 80027ca:	4a3b      	ldr	r2, [pc, #236]	; (80028b8 <__aeabi_dmul+0x4d0>)
 80027cc:	4462      	add	r2, ip
 80027ce:	4094      	lsls	r4, r2
 80027d0:	4325      	orrs	r5, r4
 80027d2:	1e6a      	subs	r2, r5, #1
 80027d4:	4195      	sbcs	r5, r2
 80027d6:	002a      	movs	r2, r5
 80027d8:	430a      	orrs	r2, r1
 80027da:	2107      	movs	r1, #7
 80027dc:	000d      	movs	r5, r1
 80027de:	2400      	movs	r4, #0
 80027e0:	4015      	ands	r5, r2
 80027e2:	4211      	tst	r1, r2
 80027e4:	d05b      	beq.n	800289e <__aeabi_dmul+0x4b6>
 80027e6:	210f      	movs	r1, #15
 80027e8:	2400      	movs	r4, #0
 80027ea:	4011      	ands	r1, r2
 80027ec:	2904      	cmp	r1, #4
 80027ee:	d053      	beq.n	8002898 <__aeabi_dmul+0x4b0>
 80027f0:	1d11      	adds	r1, r2, #4
 80027f2:	4291      	cmp	r1, r2
 80027f4:	4192      	sbcs	r2, r2
 80027f6:	4252      	negs	r2, r2
 80027f8:	18a4      	adds	r4, r4, r2
 80027fa:	000a      	movs	r2, r1
 80027fc:	0223      	lsls	r3, r4, #8
 80027fe:	d54b      	bpl.n	8002898 <__aeabi_dmul+0x4b0>
 8002800:	2201      	movs	r2, #1
 8002802:	2400      	movs	r4, #0
 8002804:	2500      	movs	r5, #0
 8002806:	e650      	b.n	80024aa <__aeabi_dmul+0xc2>
 8002808:	2380      	movs	r3, #128	; 0x80
 800280a:	031b      	lsls	r3, r3, #12
 800280c:	421c      	tst	r4, r3
 800280e:	d009      	beq.n	8002824 <__aeabi_dmul+0x43c>
 8002810:	421e      	tst	r6, r3
 8002812:	d107      	bne.n	8002824 <__aeabi_dmul+0x43c>
 8002814:	4333      	orrs	r3, r6
 8002816:	031c      	lsls	r4, r3, #12
 8002818:	4643      	mov	r3, r8
 800281a:	0015      	movs	r5, r2
 800281c:	0b24      	lsrs	r4, r4, #12
 800281e:	4a25      	ldr	r2, [pc, #148]	; (80028b4 <__aeabi_dmul+0x4cc>)
 8002820:	9301      	str	r3, [sp, #4]
 8002822:	e642      	b.n	80024aa <__aeabi_dmul+0xc2>
 8002824:	2280      	movs	r2, #128	; 0x80
 8002826:	0312      	lsls	r2, r2, #12
 8002828:	4314      	orrs	r4, r2
 800282a:	0324      	lsls	r4, r4, #12
 800282c:	4a21      	ldr	r2, [pc, #132]	; (80028b4 <__aeabi_dmul+0x4cc>)
 800282e:	0b24      	lsrs	r4, r4, #12
 8002830:	9701      	str	r7, [sp, #4]
 8002832:	e63a      	b.n	80024aa <__aeabi_dmul+0xc2>
 8002834:	f000 fd50 	bl	80032d8 <__clzsi2>
 8002838:	0001      	movs	r1, r0
 800283a:	0002      	movs	r2, r0
 800283c:	3115      	adds	r1, #21
 800283e:	3220      	adds	r2, #32
 8002840:	291c      	cmp	r1, #28
 8002842:	dc00      	bgt.n	8002846 <__aeabi_dmul+0x45e>
 8002844:	e74b      	b.n	80026de <__aeabi_dmul+0x2f6>
 8002846:	0034      	movs	r4, r6
 8002848:	3808      	subs	r0, #8
 800284a:	2500      	movs	r5, #0
 800284c:	4084      	lsls	r4, r0
 800284e:	e750      	b.n	80026f2 <__aeabi_dmul+0x30a>
 8002850:	f000 fd42 	bl	80032d8 <__clzsi2>
 8002854:	0003      	movs	r3, r0
 8002856:	001a      	movs	r2, r3
 8002858:	3215      	adds	r2, #21
 800285a:	3020      	adds	r0, #32
 800285c:	2a1c      	cmp	r2, #28
 800285e:	dc00      	bgt.n	8002862 <__aeabi_dmul+0x47a>
 8002860:	e71e      	b.n	80026a0 <__aeabi_dmul+0x2b8>
 8002862:	4656      	mov	r6, sl
 8002864:	3b08      	subs	r3, #8
 8002866:	2200      	movs	r2, #0
 8002868:	409e      	lsls	r6, r3
 800286a:	e723      	b.n	80026b4 <__aeabi_dmul+0x2cc>
 800286c:	9b00      	ldr	r3, [sp, #0]
 800286e:	469c      	mov	ip, r3
 8002870:	e6e6      	b.n	8002640 <__aeabi_dmul+0x258>
 8002872:	4912      	ldr	r1, [pc, #72]	; (80028bc <__aeabi_dmul+0x4d4>)
 8002874:	0022      	movs	r2, r4
 8002876:	4461      	add	r1, ip
 8002878:	002e      	movs	r6, r5
 800287a:	408d      	lsls	r5, r1
 800287c:	408a      	lsls	r2, r1
 800287e:	40c6      	lsrs	r6, r0
 8002880:	1e69      	subs	r1, r5, #1
 8002882:	418d      	sbcs	r5, r1
 8002884:	4332      	orrs	r2, r6
 8002886:	432a      	orrs	r2, r5
 8002888:	40c4      	lsrs	r4, r0
 800288a:	0753      	lsls	r3, r2, #29
 800288c:	d0b6      	beq.n	80027fc <__aeabi_dmul+0x414>
 800288e:	210f      	movs	r1, #15
 8002890:	4011      	ands	r1, r2
 8002892:	2904      	cmp	r1, #4
 8002894:	d1ac      	bne.n	80027f0 <__aeabi_dmul+0x408>
 8002896:	e7b1      	b.n	80027fc <__aeabi_dmul+0x414>
 8002898:	0765      	lsls	r5, r4, #29
 800289a:	0264      	lsls	r4, r4, #9
 800289c:	0b24      	lsrs	r4, r4, #12
 800289e:	08d2      	lsrs	r2, r2, #3
 80028a0:	4315      	orrs	r5, r2
 80028a2:	2200      	movs	r2, #0
 80028a4:	e601      	b.n	80024aa <__aeabi_dmul+0xc2>
 80028a6:	2280      	movs	r2, #128	; 0x80
 80028a8:	0312      	lsls	r2, r2, #12
 80028aa:	4314      	orrs	r4, r2
 80028ac:	0324      	lsls	r4, r4, #12
 80028ae:	4a01      	ldr	r2, [pc, #4]	; (80028b4 <__aeabi_dmul+0x4cc>)
 80028b0:	0b24      	lsrs	r4, r4, #12
 80028b2:	e5fa      	b.n	80024aa <__aeabi_dmul+0xc2>
 80028b4:	000007ff 	.word	0x000007ff
 80028b8:	0000043e 	.word	0x0000043e
 80028bc:	0000041e 	.word	0x0000041e

080028c0 <__aeabi_dsub>:
 80028c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028c2:	4657      	mov	r7, sl
 80028c4:	464e      	mov	r6, r9
 80028c6:	4645      	mov	r5, r8
 80028c8:	46de      	mov	lr, fp
 80028ca:	b5e0      	push	{r5, r6, r7, lr}
 80028cc:	001e      	movs	r6, r3
 80028ce:	0017      	movs	r7, r2
 80028d0:	004a      	lsls	r2, r1, #1
 80028d2:	030b      	lsls	r3, r1, #12
 80028d4:	0d52      	lsrs	r2, r2, #21
 80028d6:	0a5b      	lsrs	r3, r3, #9
 80028d8:	4690      	mov	r8, r2
 80028da:	0f42      	lsrs	r2, r0, #29
 80028dc:	431a      	orrs	r2, r3
 80028de:	0fcd      	lsrs	r5, r1, #31
 80028e0:	4ccd      	ldr	r4, [pc, #820]	; (8002c18 <__aeabi_dsub+0x358>)
 80028e2:	0331      	lsls	r1, r6, #12
 80028e4:	00c3      	lsls	r3, r0, #3
 80028e6:	4694      	mov	ip, r2
 80028e8:	0070      	lsls	r0, r6, #1
 80028ea:	0f7a      	lsrs	r2, r7, #29
 80028ec:	0a49      	lsrs	r1, r1, #9
 80028ee:	00ff      	lsls	r7, r7, #3
 80028f0:	469a      	mov	sl, r3
 80028f2:	46b9      	mov	r9, r7
 80028f4:	0d40      	lsrs	r0, r0, #21
 80028f6:	0ff6      	lsrs	r6, r6, #31
 80028f8:	4311      	orrs	r1, r2
 80028fa:	42a0      	cmp	r0, r4
 80028fc:	d100      	bne.n	8002900 <__aeabi_dsub+0x40>
 80028fe:	e0b1      	b.n	8002a64 <__aeabi_dsub+0x1a4>
 8002900:	2201      	movs	r2, #1
 8002902:	4056      	eors	r6, r2
 8002904:	46b3      	mov	fp, r6
 8002906:	42b5      	cmp	r5, r6
 8002908:	d100      	bne.n	800290c <__aeabi_dsub+0x4c>
 800290a:	e088      	b.n	8002a1e <__aeabi_dsub+0x15e>
 800290c:	4642      	mov	r2, r8
 800290e:	1a12      	subs	r2, r2, r0
 8002910:	2a00      	cmp	r2, #0
 8002912:	dc00      	bgt.n	8002916 <__aeabi_dsub+0x56>
 8002914:	e0ae      	b.n	8002a74 <__aeabi_dsub+0x1b4>
 8002916:	2800      	cmp	r0, #0
 8002918:	d100      	bne.n	800291c <__aeabi_dsub+0x5c>
 800291a:	e0c1      	b.n	8002aa0 <__aeabi_dsub+0x1e0>
 800291c:	48be      	ldr	r0, [pc, #760]	; (8002c18 <__aeabi_dsub+0x358>)
 800291e:	4580      	cmp	r8, r0
 8002920:	d100      	bne.n	8002924 <__aeabi_dsub+0x64>
 8002922:	e151      	b.n	8002bc8 <__aeabi_dsub+0x308>
 8002924:	2080      	movs	r0, #128	; 0x80
 8002926:	0400      	lsls	r0, r0, #16
 8002928:	4301      	orrs	r1, r0
 800292a:	2a38      	cmp	r2, #56	; 0x38
 800292c:	dd00      	ble.n	8002930 <__aeabi_dsub+0x70>
 800292e:	e17b      	b.n	8002c28 <__aeabi_dsub+0x368>
 8002930:	2a1f      	cmp	r2, #31
 8002932:	dd00      	ble.n	8002936 <__aeabi_dsub+0x76>
 8002934:	e1ee      	b.n	8002d14 <__aeabi_dsub+0x454>
 8002936:	2020      	movs	r0, #32
 8002938:	003e      	movs	r6, r7
 800293a:	1a80      	subs	r0, r0, r2
 800293c:	000c      	movs	r4, r1
 800293e:	40d6      	lsrs	r6, r2
 8002940:	40d1      	lsrs	r1, r2
 8002942:	4087      	lsls	r7, r0
 8002944:	4662      	mov	r2, ip
 8002946:	4084      	lsls	r4, r0
 8002948:	1a52      	subs	r2, r2, r1
 800294a:	1e78      	subs	r0, r7, #1
 800294c:	4187      	sbcs	r7, r0
 800294e:	4694      	mov	ip, r2
 8002950:	4334      	orrs	r4, r6
 8002952:	4327      	orrs	r7, r4
 8002954:	1bdc      	subs	r4, r3, r7
 8002956:	42a3      	cmp	r3, r4
 8002958:	419b      	sbcs	r3, r3
 800295a:	4662      	mov	r2, ip
 800295c:	425b      	negs	r3, r3
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	4699      	mov	r9, r3
 8002962:	464b      	mov	r3, r9
 8002964:	021b      	lsls	r3, r3, #8
 8002966:	d400      	bmi.n	800296a <__aeabi_dsub+0xaa>
 8002968:	e118      	b.n	8002b9c <__aeabi_dsub+0x2dc>
 800296a:	464b      	mov	r3, r9
 800296c:	0258      	lsls	r0, r3, #9
 800296e:	0a43      	lsrs	r3, r0, #9
 8002970:	4699      	mov	r9, r3
 8002972:	464b      	mov	r3, r9
 8002974:	2b00      	cmp	r3, #0
 8002976:	d100      	bne.n	800297a <__aeabi_dsub+0xba>
 8002978:	e137      	b.n	8002bea <__aeabi_dsub+0x32a>
 800297a:	4648      	mov	r0, r9
 800297c:	f000 fcac 	bl	80032d8 <__clzsi2>
 8002980:	0001      	movs	r1, r0
 8002982:	3908      	subs	r1, #8
 8002984:	2320      	movs	r3, #32
 8002986:	0022      	movs	r2, r4
 8002988:	4648      	mov	r0, r9
 800298a:	1a5b      	subs	r3, r3, r1
 800298c:	40da      	lsrs	r2, r3
 800298e:	4088      	lsls	r0, r1
 8002990:	408c      	lsls	r4, r1
 8002992:	4643      	mov	r3, r8
 8002994:	4310      	orrs	r0, r2
 8002996:	4588      	cmp	r8, r1
 8002998:	dd00      	ble.n	800299c <__aeabi_dsub+0xdc>
 800299a:	e136      	b.n	8002c0a <__aeabi_dsub+0x34a>
 800299c:	1ac9      	subs	r1, r1, r3
 800299e:	1c4b      	adds	r3, r1, #1
 80029a0:	2b1f      	cmp	r3, #31
 80029a2:	dd00      	ble.n	80029a6 <__aeabi_dsub+0xe6>
 80029a4:	e0ea      	b.n	8002b7c <__aeabi_dsub+0x2bc>
 80029a6:	2220      	movs	r2, #32
 80029a8:	0026      	movs	r6, r4
 80029aa:	1ad2      	subs	r2, r2, r3
 80029ac:	0001      	movs	r1, r0
 80029ae:	4094      	lsls	r4, r2
 80029b0:	40de      	lsrs	r6, r3
 80029b2:	40d8      	lsrs	r0, r3
 80029b4:	2300      	movs	r3, #0
 80029b6:	4091      	lsls	r1, r2
 80029b8:	1e62      	subs	r2, r4, #1
 80029ba:	4194      	sbcs	r4, r2
 80029bc:	4681      	mov	r9, r0
 80029be:	4698      	mov	r8, r3
 80029c0:	4331      	orrs	r1, r6
 80029c2:	430c      	orrs	r4, r1
 80029c4:	0763      	lsls	r3, r4, #29
 80029c6:	d009      	beq.n	80029dc <__aeabi_dsub+0x11c>
 80029c8:	230f      	movs	r3, #15
 80029ca:	4023      	ands	r3, r4
 80029cc:	2b04      	cmp	r3, #4
 80029ce:	d005      	beq.n	80029dc <__aeabi_dsub+0x11c>
 80029d0:	1d23      	adds	r3, r4, #4
 80029d2:	42a3      	cmp	r3, r4
 80029d4:	41a4      	sbcs	r4, r4
 80029d6:	4264      	negs	r4, r4
 80029d8:	44a1      	add	r9, r4
 80029da:	001c      	movs	r4, r3
 80029dc:	464b      	mov	r3, r9
 80029de:	021b      	lsls	r3, r3, #8
 80029e0:	d400      	bmi.n	80029e4 <__aeabi_dsub+0x124>
 80029e2:	e0de      	b.n	8002ba2 <__aeabi_dsub+0x2e2>
 80029e4:	4641      	mov	r1, r8
 80029e6:	4b8c      	ldr	r3, [pc, #560]	; (8002c18 <__aeabi_dsub+0x358>)
 80029e8:	3101      	adds	r1, #1
 80029ea:	4299      	cmp	r1, r3
 80029ec:	d100      	bne.n	80029f0 <__aeabi_dsub+0x130>
 80029ee:	e0e7      	b.n	8002bc0 <__aeabi_dsub+0x300>
 80029f0:	464b      	mov	r3, r9
 80029f2:	488a      	ldr	r0, [pc, #552]	; (8002c1c <__aeabi_dsub+0x35c>)
 80029f4:	08e4      	lsrs	r4, r4, #3
 80029f6:	4003      	ands	r3, r0
 80029f8:	0018      	movs	r0, r3
 80029fa:	0549      	lsls	r1, r1, #21
 80029fc:	075b      	lsls	r3, r3, #29
 80029fe:	0240      	lsls	r0, r0, #9
 8002a00:	4323      	orrs	r3, r4
 8002a02:	0d4a      	lsrs	r2, r1, #21
 8002a04:	0b04      	lsrs	r4, r0, #12
 8002a06:	0512      	lsls	r2, r2, #20
 8002a08:	07ed      	lsls	r5, r5, #31
 8002a0a:	4322      	orrs	r2, r4
 8002a0c:	432a      	orrs	r2, r5
 8002a0e:	0018      	movs	r0, r3
 8002a10:	0011      	movs	r1, r2
 8002a12:	bcf0      	pop	{r4, r5, r6, r7}
 8002a14:	46bb      	mov	fp, r7
 8002a16:	46b2      	mov	sl, r6
 8002a18:	46a9      	mov	r9, r5
 8002a1a:	46a0      	mov	r8, r4
 8002a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a1e:	4642      	mov	r2, r8
 8002a20:	1a12      	subs	r2, r2, r0
 8002a22:	2a00      	cmp	r2, #0
 8002a24:	dd52      	ble.n	8002acc <__aeabi_dsub+0x20c>
 8002a26:	2800      	cmp	r0, #0
 8002a28:	d100      	bne.n	8002a2c <__aeabi_dsub+0x16c>
 8002a2a:	e09c      	b.n	8002b66 <__aeabi_dsub+0x2a6>
 8002a2c:	45a0      	cmp	r8, r4
 8002a2e:	d100      	bne.n	8002a32 <__aeabi_dsub+0x172>
 8002a30:	e0ca      	b.n	8002bc8 <__aeabi_dsub+0x308>
 8002a32:	2080      	movs	r0, #128	; 0x80
 8002a34:	0400      	lsls	r0, r0, #16
 8002a36:	4301      	orrs	r1, r0
 8002a38:	2a38      	cmp	r2, #56	; 0x38
 8002a3a:	dd00      	ble.n	8002a3e <__aeabi_dsub+0x17e>
 8002a3c:	e149      	b.n	8002cd2 <__aeabi_dsub+0x412>
 8002a3e:	2a1f      	cmp	r2, #31
 8002a40:	dc00      	bgt.n	8002a44 <__aeabi_dsub+0x184>
 8002a42:	e197      	b.n	8002d74 <__aeabi_dsub+0x4b4>
 8002a44:	0010      	movs	r0, r2
 8002a46:	000e      	movs	r6, r1
 8002a48:	3820      	subs	r0, #32
 8002a4a:	40c6      	lsrs	r6, r0
 8002a4c:	2a20      	cmp	r2, #32
 8002a4e:	d004      	beq.n	8002a5a <__aeabi_dsub+0x19a>
 8002a50:	2040      	movs	r0, #64	; 0x40
 8002a52:	1a82      	subs	r2, r0, r2
 8002a54:	4091      	lsls	r1, r2
 8002a56:	430f      	orrs	r7, r1
 8002a58:	46b9      	mov	r9, r7
 8002a5a:	464c      	mov	r4, r9
 8002a5c:	1e62      	subs	r2, r4, #1
 8002a5e:	4194      	sbcs	r4, r2
 8002a60:	4334      	orrs	r4, r6
 8002a62:	e13a      	b.n	8002cda <__aeabi_dsub+0x41a>
 8002a64:	000a      	movs	r2, r1
 8002a66:	433a      	orrs	r2, r7
 8002a68:	d028      	beq.n	8002abc <__aeabi_dsub+0x1fc>
 8002a6a:	46b3      	mov	fp, r6
 8002a6c:	42b5      	cmp	r5, r6
 8002a6e:	d02b      	beq.n	8002ac8 <__aeabi_dsub+0x208>
 8002a70:	4a6b      	ldr	r2, [pc, #428]	; (8002c20 <__aeabi_dsub+0x360>)
 8002a72:	4442      	add	r2, r8
 8002a74:	2a00      	cmp	r2, #0
 8002a76:	d05d      	beq.n	8002b34 <__aeabi_dsub+0x274>
 8002a78:	4642      	mov	r2, r8
 8002a7a:	4644      	mov	r4, r8
 8002a7c:	1a82      	subs	r2, r0, r2
 8002a7e:	2c00      	cmp	r4, #0
 8002a80:	d000      	beq.n	8002a84 <__aeabi_dsub+0x1c4>
 8002a82:	e0f5      	b.n	8002c70 <__aeabi_dsub+0x3b0>
 8002a84:	4665      	mov	r5, ip
 8002a86:	431d      	orrs	r5, r3
 8002a88:	d100      	bne.n	8002a8c <__aeabi_dsub+0x1cc>
 8002a8a:	e19c      	b.n	8002dc6 <__aeabi_dsub+0x506>
 8002a8c:	1e55      	subs	r5, r2, #1
 8002a8e:	2a01      	cmp	r2, #1
 8002a90:	d100      	bne.n	8002a94 <__aeabi_dsub+0x1d4>
 8002a92:	e1fb      	b.n	8002e8c <__aeabi_dsub+0x5cc>
 8002a94:	4c60      	ldr	r4, [pc, #384]	; (8002c18 <__aeabi_dsub+0x358>)
 8002a96:	42a2      	cmp	r2, r4
 8002a98:	d100      	bne.n	8002a9c <__aeabi_dsub+0x1dc>
 8002a9a:	e1bd      	b.n	8002e18 <__aeabi_dsub+0x558>
 8002a9c:	002a      	movs	r2, r5
 8002a9e:	e0f0      	b.n	8002c82 <__aeabi_dsub+0x3c2>
 8002aa0:	0008      	movs	r0, r1
 8002aa2:	4338      	orrs	r0, r7
 8002aa4:	d100      	bne.n	8002aa8 <__aeabi_dsub+0x1e8>
 8002aa6:	e0c3      	b.n	8002c30 <__aeabi_dsub+0x370>
 8002aa8:	1e50      	subs	r0, r2, #1
 8002aaa:	2a01      	cmp	r2, #1
 8002aac:	d100      	bne.n	8002ab0 <__aeabi_dsub+0x1f0>
 8002aae:	e1a8      	b.n	8002e02 <__aeabi_dsub+0x542>
 8002ab0:	4c59      	ldr	r4, [pc, #356]	; (8002c18 <__aeabi_dsub+0x358>)
 8002ab2:	42a2      	cmp	r2, r4
 8002ab4:	d100      	bne.n	8002ab8 <__aeabi_dsub+0x1f8>
 8002ab6:	e087      	b.n	8002bc8 <__aeabi_dsub+0x308>
 8002ab8:	0002      	movs	r2, r0
 8002aba:	e736      	b.n	800292a <__aeabi_dsub+0x6a>
 8002abc:	2201      	movs	r2, #1
 8002abe:	4056      	eors	r6, r2
 8002ac0:	46b3      	mov	fp, r6
 8002ac2:	42b5      	cmp	r5, r6
 8002ac4:	d000      	beq.n	8002ac8 <__aeabi_dsub+0x208>
 8002ac6:	e721      	b.n	800290c <__aeabi_dsub+0x4c>
 8002ac8:	4a55      	ldr	r2, [pc, #340]	; (8002c20 <__aeabi_dsub+0x360>)
 8002aca:	4442      	add	r2, r8
 8002acc:	2a00      	cmp	r2, #0
 8002ace:	d100      	bne.n	8002ad2 <__aeabi_dsub+0x212>
 8002ad0:	e0b5      	b.n	8002c3e <__aeabi_dsub+0x37e>
 8002ad2:	4642      	mov	r2, r8
 8002ad4:	4644      	mov	r4, r8
 8002ad6:	1a82      	subs	r2, r0, r2
 8002ad8:	2c00      	cmp	r4, #0
 8002ada:	d100      	bne.n	8002ade <__aeabi_dsub+0x21e>
 8002adc:	e138      	b.n	8002d50 <__aeabi_dsub+0x490>
 8002ade:	4e4e      	ldr	r6, [pc, #312]	; (8002c18 <__aeabi_dsub+0x358>)
 8002ae0:	42b0      	cmp	r0, r6
 8002ae2:	d100      	bne.n	8002ae6 <__aeabi_dsub+0x226>
 8002ae4:	e1de      	b.n	8002ea4 <__aeabi_dsub+0x5e4>
 8002ae6:	2680      	movs	r6, #128	; 0x80
 8002ae8:	4664      	mov	r4, ip
 8002aea:	0436      	lsls	r6, r6, #16
 8002aec:	4334      	orrs	r4, r6
 8002aee:	46a4      	mov	ip, r4
 8002af0:	2a38      	cmp	r2, #56	; 0x38
 8002af2:	dd00      	ble.n	8002af6 <__aeabi_dsub+0x236>
 8002af4:	e196      	b.n	8002e24 <__aeabi_dsub+0x564>
 8002af6:	2a1f      	cmp	r2, #31
 8002af8:	dd00      	ble.n	8002afc <__aeabi_dsub+0x23c>
 8002afa:	e224      	b.n	8002f46 <__aeabi_dsub+0x686>
 8002afc:	2620      	movs	r6, #32
 8002afe:	1ab4      	subs	r4, r6, r2
 8002b00:	46a2      	mov	sl, r4
 8002b02:	4664      	mov	r4, ip
 8002b04:	4656      	mov	r6, sl
 8002b06:	40b4      	lsls	r4, r6
 8002b08:	46a1      	mov	r9, r4
 8002b0a:	001c      	movs	r4, r3
 8002b0c:	464e      	mov	r6, r9
 8002b0e:	40d4      	lsrs	r4, r2
 8002b10:	4326      	orrs	r6, r4
 8002b12:	0034      	movs	r4, r6
 8002b14:	4656      	mov	r6, sl
 8002b16:	40b3      	lsls	r3, r6
 8002b18:	1e5e      	subs	r6, r3, #1
 8002b1a:	41b3      	sbcs	r3, r6
 8002b1c:	431c      	orrs	r4, r3
 8002b1e:	4663      	mov	r3, ip
 8002b20:	40d3      	lsrs	r3, r2
 8002b22:	18c9      	adds	r1, r1, r3
 8002b24:	19e4      	adds	r4, r4, r7
 8002b26:	42bc      	cmp	r4, r7
 8002b28:	41bf      	sbcs	r7, r7
 8002b2a:	427f      	negs	r7, r7
 8002b2c:	46b9      	mov	r9, r7
 8002b2e:	4680      	mov	r8, r0
 8002b30:	4489      	add	r9, r1
 8002b32:	e0d8      	b.n	8002ce6 <__aeabi_dsub+0x426>
 8002b34:	4640      	mov	r0, r8
 8002b36:	4c3b      	ldr	r4, [pc, #236]	; (8002c24 <__aeabi_dsub+0x364>)
 8002b38:	3001      	adds	r0, #1
 8002b3a:	4220      	tst	r0, r4
 8002b3c:	d000      	beq.n	8002b40 <__aeabi_dsub+0x280>
 8002b3e:	e0b4      	b.n	8002caa <__aeabi_dsub+0x3ea>
 8002b40:	4640      	mov	r0, r8
 8002b42:	2800      	cmp	r0, #0
 8002b44:	d000      	beq.n	8002b48 <__aeabi_dsub+0x288>
 8002b46:	e144      	b.n	8002dd2 <__aeabi_dsub+0x512>
 8002b48:	4660      	mov	r0, ip
 8002b4a:	4318      	orrs	r0, r3
 8002b4c:	d100      	bne.n	8002b50 <__aeabi_dsub+0x290>
 8002b4e:	e190      	b.n	8002e72 <__aeabi_dsub+0x5b2>
 8002b50:	0008      	movs	r0, r1
 8002b52:	4338      	orrs	r0, r7
 8002b54:	d000      	beq.n	8002b58 <__aeabi_dsub+0x298>
 8002b56:	e1aa      	b.n	8002eae <__aeabi_dsub+0x5ee>
 8002b58:	4661      	mov	r1, ip
 8002b5a:	08db      	lsrs	r3, r3, #3
 8002b5c:	0749      	lsls	r1, r1, #29
 8002b5e:	430b      	orrs	r3, r1
 8002b60:	4661      	mov	r1, ip
 8002b62:	08cc      	lsrs	r4, r1, #3
 8002b64:	e027      	b.n	8002bb6 <__aeabi_dsub+0x2f6>
 8002b66:	0008      	movs	r0, r1
 8002b68:	4338      	orrs	r0, r7
 8002b6a:	d061      	beq.n	8002c30 <__aeabi_dsub+0x370>
 8002b6c:	1e50      	subs	r0, r2, #1
 8002b6e:	2a01      	cmp	r2, #1
 8002b70:	d100      	bne.n	8002b74 <__aeabi_dsub+0x2b4>
 8002b72:	e139      	b.n	8002de8 <__aeabi_dsub+0x528>
 8002b74:	42a2      	cmp	r2, r4
 8002b76:	d027      	beq.n	8002bc8 <__aeabi_dsub+0x308>
 8002b78:	0002      	movs	r2, r0
 8002b7a:	e75d      	b.n	8002a38 <__aeabi_dsub+0x178>
 8002b7c:	0002      	movs	r2, r0
 8002b7e:	391f      	subs	r1, #31
 8002b80:	40ca      	lsrs	r2, r1
 8002b82:	0011      	movs	r1, r2
 8002b84:	2b20      	cmp	r3, #32
 8002b86:	d003      	beq.n	8002b90 <__aeabi_dsub+0x2d0>
 8002b88:	2240      	movs	r2, #64	; 0x40
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	4098      	lsls	r0, r3
 8002b8e:	4304      	orrs	r4, r0
 8002b90:	1e63      	subs	r3, r4, #1
 8002b92:	419c      	sbcs	r4, r3
 8002b94:	2300      	movs	r3, #0
 8002b96:	4699      	mov	r9, r3
 8002b98:	4698      	mov	r8, r3
 8002b9a:	430c      	orrs	r4, r1
 8002b9c:	0763      	lsls	r3, r4, #29
 8002b9e:	d000      	beq.n	8002ba2 <__aeabi_dsub+0x2e2>
 8002ba0:	e712      	b.n	80029c8 <__aeabi_dsub+0x108>
 8002ba2:	464b      	mov	r3, r9
 8002ba4:	464a      	mov	r2, r9
 8002ba6:	08e4      	lsrs	r4, r4, #3
 8002ba8:	075b      	lsls	r3, r3, #29
 8002baa:	4323      	orrs	r3, r4
 8002bac:	08d4      	lsrs	r4, r2, #3
 8002bae:	4642      	mov	r2, r8
 8002bb0:	4919      	ldr	r1, [pc, #100]	; (8002c18 <__aeabi_dsub+0x358>)
 8002bb2:	428a      	cmp	r2, r1
 8002bb4:	d00e      	beq.n	8002bd4 <__aeabi_dsub+0x314>
 8002bb6:	0324      	lsls	r4, r4, #12
 8002bb8:	0552      	lsls	r2, r2, #21
 8002bba:	0b24      	lsrs	r4, r4, #12
 8002bbc:	0d52      	lsrs	r2, r2, #21
 8002bbe:	e722      	b.n	8002a06 <__aeabi_dsub+0x146>
 8002bc0:	000a      	movs	r2, r1
 8002bc2:	2400      	movs	r4, #0
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	e71e      	b.n	8002a06 <__aeabi_dsub+0x146>
 8002bc8:	08db      	lsrs	r3, r3, #3
 8002bca:	4662      	mov	r2, ip
 8002bcc:	0752      	lsls	r2, r2, #29
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	4662      	mov	r2, ip
 8002bd2:	08d4      	lsrs	r4, r2, #3
 8002bd4:	001a      	movs	r2, r3
 8002bd6:	4322      	orrs	r2, r4
 8002bd8:	d100      	bne.n	8002bdc <__aeabi_dsub+0x31c>
 8002bda:	e1fc      	b.n	8002fd6 <__aeabi_dsub+0x716>
 8002bdc:	2280      	movs	r2, #128	; 0x80
 8002bde:	0312      	lsls	r2, r2, #12
 8002be0:	4314      	orrs	r4, r2
 8002be2:	0324      	lsls	r4, r4, #12
 8002be4:	4a0c      	ldr	r2, [pc, #48]	; (8002c18 <__aeabi_dsub+0x358>)
 8002be6:	0b24      	lsrs	r4, r4, #12
 8002be8:	e70d      	b.n	8002a06 <__aeabi_dsub+0x146>
 8002bea:	0020      	movs	r0, r4
 8002bec:	f000 fb74 	bl	80032d8 <__clzsi2>
 8002bf0:	0001      	movs	r1, r0
 8002bf2:	3118      	adds	r1, #24
 8002bf4:	291f      	cmp	r1, #31
 8002bf6:	dc00      	bgt.n	8002bfa <__aeabi_dsub+0x33a>
 8002bf8:	e6c4      	b.n	8002984 <__aeabi_dsub+0xc4>
 8002bfa:	3808      	subs	r0, #8
 8002bfc:	4084      	lsls	r4, r0
 8002bfe:	4643      	mov	r3, r8
 8002c00:	0020      	movs	r0, r4
 8002c02:	2400      	movs	r4, #0
 8002c04:	4588      	cmp	r8, r1
 8002c06:	dc00      	bgt.n	8002c0a <__aeabi_dsub+0x34a>
 8002c08:	e6c8      	b.n	800299c <__aeabi_dsub+0xdc>
 8002c0a:	4a04      	ldr	r2, [pc, #16]	; (8002c1c <__aeabi_dsub+0x35c>)
 8002c0c:	1a5b      	subs	r3, r3, r1
 8002c0e:	4010      	ands	r0, r2
 8002c10:	4698      	mov	r8, r3
 8002c12:	4681      	mov	r9, r0
 8002c14:	e6d6      	b.n	80029c4 <__aeabi_dsub+0x104>
 8002c16:	46c0      	nop			; (mov r8, r8)
 8002c18:	000007ff 	.word	0x000007ff
 8002c1c:	ff7fffff 	.word	0xff7fffff
 8002c20:	fffff801 	.word	0xfffff801
 8002c24:	000007fe 	.word	0x000007fe
 8002c28:	430f      	orrs	r7, r1
 8002c2a:	1e7a      	subs	r2, r7, #1
 8002c2c:	4197      	sbcs	r7, r2
 8002c2e:	e691      	b.n	8002954 <__aeabi_dsub+0x94>
 8002c30:	4661      	mov	r1, ip
 8002c32:	08db      	lsrs	r3, r3, #3
 8002c34:	0749      	lsls	r1, r1, #29
 8002c36:	430b      	orrs	r3, r1
 8002c38:	4661      	mov	r1, ip
 8002c3a:	08cc      	lsrs	r4, r1, #3
 8002c3c:	e7b8      	b.n	8002bb0 <__aeabi_dsub+0x2f0>
 8002c3e:	4640      	mov	r0, r8
 8002c40:	4cd3      	ldr	r4, [pc, #844]	; (8002f90 <__aeabi_dsub+0x6d0>)
 8002c42:	3001      	adds	r0, #1
 8002c44:	4220      	tst	r0, r4
 8002c46:	d000      	beq.n	8002c4a <__aeabi_dsub+0x38a>
 8002c48:	e0a2      	b.n	8002d90 <__aeabi_dsub+0x4d0>
 8002c4a:	4640      	mov	r0, r8
 8002c4c:	2800      	cmp	r0, #0
 8002c4e:	d000      	beq.n	8002c52 <__aeabi_dsub+0x392>
 8002c50:	e101      	b.n	8002e56 <__aeabi_dsub+0x596>
 8002c52:	4660      	mov	r0, ip
 8002c54:	4318      	orrs	r0, r3
 8002c56:	d100      	bne.n	8002c5a <__aeabi_dsub+0x39a>
 8002c58:	e15e      	b.n	8002f18 <__aeabi_dsub+0x658>
 8002c5a:	0008      	movs	r0, r1
 8002c5c:	4338      	orrs	r0, r7
 8002c5e:	d000      	beq.n	8002c62 <__aeabi_dsub+0x3a2>
 8002c60:	e15f      	b.n	8002f22 <__aeabi_dsub+0x662>
 8002c62:	4661      	mov	r1, ip
 8002c64:	08db      	lsrs	r3, r3, #3
 8002c66:	0749      	lsls	r1, r1, #29
 8002c68:	430b      	orrs	r3, r1
 8002c6a:	4661      	mov	r1, ip
 8002c6c:	08cc      	lsrs	r4, r1, #3
 8002c6e:	e7a2      	b.n	8002bb6 <__aeabi_dsub+0x2f6>
 8002c70:	4dc8      	ldr	r5, [pc, #800]	; (8002f94 <__aeabi_dsub+0x6d4>)
 8002c72:	42a8      	cmp	r0, r5
 8002c74:	d100      	bne.n	8002c78 <__aeabi_dsub+0x3b8>
 8002c76:	e0cf      	b.n	8002e18 <__aeabi_dsub+0x558>
 8002c78:	2580      	movs	r5, #128	; 0x80
 8002c7a:	4664      	mov	r4, ip
 8002c7c:	042d      	lsls	r5, r5, #16
 8002c7e:	432c      	orrs	r4, r5
 8002c80:	46a4      	mov	ip, r4
 8002c82:	2a38      	cmp	r2, #56	; 0x38
 8002c84:	dc56      	bgt.n	8002d34 <__aeabi_dsub+0x474>
 8002c86:	2a1f      	cmp	r2, #31
 8002c88:	dd00      	ble.n	8002c8c <__aeabi_dsub+0x3cc>
 8002c8a:	e0d1      	b.n	8002e30 <__aeabi_dsub+0x570>
 8002c8c:	2520      	movs	r5, #32
 8002c8e:	001e      	movs	r6, r3
 8002c90:	1aad      	subs	r5, r5, r2
 8002c92:	4664      	mov	r4, ip
 8002c94:	40ab      	lsls	r3, r5
 8002c96:	40ac      	lsls	r4, r5
 8002c98:	40d6      	lsrs	r6, r2
 8002c9a:	1e5d      	subs	r5, r3, #1
 8002c9c:	41ab      	sbcs	r3, r5
 8002c9e:	4334      	orrs	r4, r6
 8002ca0:	4323      	orrs	r3, r4
 8002ca2:	4664      	mov	r4, ip
 8002ca4:	40d4      	lsrs	r4, r2
 8002ca6:	1b09      	subs	r1, r1, r4
 8002ca8:	e049      	b.n	8002d3e <__aeabi_dsub+0x47e>
 8002caa:	4660      	mov	r0, ip
 8002cac:	1bdc      	subs	r4, r3, r7
 8002cae:	1a46      	subs	r6, r0, r1
 8002cb0:	42a3      	cmp	r3, r4
 8002cb2:	4180      	sbcs	r0, r0
 8002cb4:	4240      	negs	r0, r0
 8002cb6:	4681      	mov	r9, r0
 8002cb8:	0030      	movs	r0, r6
 8002cba:	464e      	mov	r6, r9
 8002cbc:	1b80      	subs	r0, r0, r6
 8002cbe:	4681      	mov	r9, r0
 8002cc0:	0200      	lsls	r0, r0, #8
 8002cc2:	d476      	bmi.n	8002db2 <__aeabi_dsub+0x4f2>
 8002cc4:	464b      	mov	r3, r9
 8002cc6:	4323      	orrs	r3, r4
 8002cc8:	d000      	beq.n	8002ccc <__aeabi_dsub+0x40c>
 8002cca:	e652      	b.n	8002972 <__aeabi_dsub+0xb2>
 8002ccc:	2400      	movs	r4, #0
 8002cce:	2500      	movs	r5, #0
 8002cd0:	e771      	b.n	8002bb6 <__aeabi_dsub+0x2f6>
 8002cd2:	4339      	orrs	r1, r7
 8002cd4:	000c      	movs	r4, r1
 8002cd6:	1e62      	subs	r2, r4, #1
 8002cd8:	4194      	sbcs	r4, r2
 8002cda:	18e4      	adds	r4, r4, r3
 8002cdc:	429c      	cmp	r4, r3
 8002cde:	419b      	sbcs	r3, r3
 8002ce0:	425b      	negs	r3, r3
 8002ce2:	4463      	add	r3, ip
 8002ce4:	4699      	mov	r9, r3
 8002ce6:	464b      	mov	r3, r9
 8002ce8:	021b      	lsls	r3, r3, #8
 8002cea:	d400      	bmi.n	8002cee <__aeabi_dsub+0x42e>
 8002cec:	e756      	b.n	8002b9c <__aeabi_dsub+0x2dc>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	469c      	mov	ip, r3
 8002cf2:	4ba8      	ldr	r3, [pc, #672]	; (8002f94 <__aeabi_dsub+0x6d4>)
 8002cf4:	44e0      	add	r8, ip
 8002cf6:	4598      	cmp	r8, r3
 8002cf8:	d038      	beq.n	8002d6c <__aeabi_dsub+0x4ac>
 8002cfa:	464b      	mov	r3, r9
 8002cfc:	48a6      	ldr	r0, [pc, #664]	; (8002f98 <__aeabi_dsub+0x6d8>)
 8002cfe:	2201      	movs	r2, #1
 8002d00:	4003      	ands	r3, r0
 8002d02:	0018      	movs	r0, r3
 8002d04:	0863      	lsrs	r3, r4, #1
 8002d06:	4014      	ands	r4, r2
 8002d08:	431c      	orrs	r4, r3
 8002d0a:	07c3      	lsls	r3, r0, #31
 8002d0c:	431c      	orrs	r4, r3
 8002d0e:	0843      	lsrs	r3, r0, #1
 8002d10:	4699      	mov	r9, r3
 8002d12:	e657      	b.n	80029c4 <__aeabi_dsub+0x104>
 8002d14:	0010      	movs	r0, r2
 8002d16:	000e      	movs	r6, r1
 8002d18:	3820      	subs	r0, #32
 8002d1a:	40c6      	lsrs	r6, r0
 8002d1c:	2a20      	cmp	r2, #32
 8002d1e:	d004      	beq.n	8002d2a <__aeabi_dsub+0x46a>
 8002d20:	2040      	movs	r0, #64	; 0x40
 8002d22:	1a82      	subs	r2, r0, r2
 8002d24:	4091      	lsls	r1, r2
 8002d26:	430f      	orrs	r7, r1
 8002d28:	46b9      	mov	r9, r7
 8002d2a:	464f      	mov	r7, r9
 8002d2c:	1e7a      	subs	r2, r7, #1
 8002d2e:	4197      	sbcs	r7, r2
 8002d30:	4337      	orrs	r7, r6
 8002d32:	e60f      	b.n	8002954 <__aeabi_dsub+0x94>
 8002d34:	4662      	mov	r2, ip
 8002d36:	431a      	orrs	r2, r3
 8002d38:	0013      	movs	r3, r2
 8002d3a:	1e5a      	subs	r2, r3, #1
 8002d3c:	4193      	sbcs	r3, r2
 8002d3e:	1afc      	subs	r4, r7, r3
 8002d40:	42a7      	cmp	r7, r4
 8002d42:	41bf      	sbcs	r7, r7
 8002d44:	427f      	negs	r7, r7
 8002d46:	1bcb      	subs	r3, r1, r7
 8002d48:	4699      	mov	r9, r3
 8002d4a:	465d      	mov	r5, fp
 8002d4c:	4680      	mov	r8, r0
 8002d4e:	e608      	b.n	8002962 <__aeabi_dsub+0xa2>
 8002d50:	4666      	mov	r6, ip
 8002d52:	431e      	orrs	r6, r3
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x498>
 8002d56:	e0be      	b.n	8002ed6 <__aeabi_dsub+0x616>
 8002d58:	1e56      	subs	r6, r2, #1
 8002d5a:	2a01      	cmp	r2, #1
 8002d5c:	d100      	bne.n	8002d60 <__aeabi_dsub+0x4a0>
 8002d5e:	e109      	b.n	8002f74 <__aeabi_dsub+0x6b4>
 8002d60:	4c8c      	ldr	r4, [pc, #560]	; (8002f94 <__aeabi_dsub+0x6d4>)
 8002d62:	42a2      	cmp	r2, r4
 8002d64:	d100      	bne.n	8002d68 <__aeabi_dsub+0x4a8>
 8002d66:	e119      	b.n	8002f9c <__aeabi_dsub+0x6dc>
 8002d68:	0032      	movs	r2, r6
 8002d6a:	e6c1      	b.n	8002af0 <__aeabi_dsub+0x230>
 8002d6c:	4642      	mov	r2, r8
 8002d6e:	2400      	movs	r4, #0
 8002d70:	2300      	movs	r3, #0
 8002d72:	e648      	b.n	8002a06 <__aeabi_dsub+0x146>
 8002d74:	2020      	movs	r0, #32
 8002d76:	000c      	movs	r4, r1
 8002d78:	1a80      	subs	r0, r0, r2
 8002d7a:	003e      	movs	r6, r7
 8002d7c:	4087      	lsls	r7, r0
 8002d7e:	4084      	lsls	r4, r0
 8002d80:	40d6      	lsrs	r6, r2
 8002d82:	1e78      	subs	r0, r7, #1
 8002d84:	4187      	sbcs	r7, r0
 8002d86:	40d1      	lsrs	r1, r2
 8002d88:	4334      	orrs	r4, r6
 8002d8a:	433c      	orrs	r4, r7
 8002d8c:	448c      	add	ip, r1
 8002d8e:	e7a4      	b.n	8002cda <__aeabi_dsub+0x41a>
 8002d90:	4a80      	ldr	r2, [pc, #512]	; (8002f94 <__aeabi_dsub+0x6d4>)
 8002d92:	4290      	cmp	r0, r2
 8002d94:	d100      	bne.n	8002d98 <__aeabi_dsub+0x4d8>
 8002d96:	e0e9      	b.n	8002f6c <__aeabi_dsub+0x6ac>
 8002d98:	19df      	adds	r7, r3, r7
 8002d9a:	429f      	cmp	r7, r3
 8002d9c:	419b      	sbcs	r3, r3
 8002d9e:	4461      	add	r1, ip
 8002da0:	425b      	negs	r3, r3
 8002da2:	18c9      	adds	r1, r1, r3
 8002da4:	07cc      	lsls	r4, r1, #31
 8002da6:	087f      	lsrs	r7, r7, #1
 8002da8:	084b      	lsrs	r3, r1, #1
 8002daa:	4699      	mov	r9, r3
 8002dac:	4680      	mov	r8, r0
 8002dae:	433c      	orrs	r4, r7
 8002db0:	e6f4      	b.n	8002b9c <__aeabi_dsub+0x2dc>
 8002db2:	1afc      	subs	r4, r7, r3
 8002db4:	42a7      	cmp	r7, r4
 8002db6:	41bf      	sbcs	r7, r7
 8002db8:	4663      	mov	r3, ip
 8002dba:	427f      	negs	r7, r7
 8002dbc:	1ac9      	subs	r1, r1, r3
 8002dbe:	1bcb      	subs	r3, r1, r7
 8002dc0:	4699      	mov	r9, r3
 8002dc2:	465d      	mov	r5, fp
 8002dc4:	e5d5      	b.n	8002972 <__aeabi_dsub+0xb2>
 8002dc6:	08ff      	lsrs	r7, r7, #3
 8002dc8:	074b      	lsls	r3, r1, #29
 8002dca:	465d      	mov	r5, fp
 8002dcc:	433b      	orrs	r3, r7
 8002dce:	08cc      	lsrs	r4, r1, #3
 8002dd0:	e6ee      	b.n	8002bb0 <__aeabi_dsub+0x2f0>
 8002dd2:	4662      	mov	r2, ip
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	d000      	beq.n	8002dda <__aeabi_dsub+0x51a>
 8002dd8:	e082      	b.n	8002ee0 <__aeabi_dsub+0x620>
 8002dda:	000b      	movs	r3, r1
 8002ddc:	433b      	orrs	r3, r7
 8002dde:	d11b      	bne.n	8002e18 <__aeabi_dsub+0x558>
 8002de0:	2480      	movs	r4, #128	; 0x80
 8002de2:	2500      	movs	r5, #0
 8002de4:	0324      	lsls	r4, r4, #12
 8002de6:	e6f9      	b.n	8002bdc <__aeabi_dsub+0x31c>
 8002de8:	19dc      	adds	r4, r3, r7
 8002dea:	429c      	cmp	r4, r3
 8002dec:	419b      	sbcs	r3, r3
 8002dee:	4461      	add	r1, ip
 8002df0:	4689      	mov	r9, r1
 8002df2:	425b      	negs	r3, r3
 8002df4:	4499      	add	r9, r3
 8002df6:	464b      	mov	r3, r9
 8002df8:	021b      	lsls	r3, r3, #8
 8002dfa:	d444      	bmi.n	8002e86 <__aeabi_dsub+0x5c6>
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	4698      	mov	r8, r3
 8002e00:	e6cc      	b.n	8002b9c <__aeabi_dsub+0x2dc>
 8002e02:	1bdc      	subs	r4, r3, r7
 8002e04:	4662      	mov	r2, ip
 8002e06:	42a3      	cmp	r3, r4
 8002e08:	419b      	sbcs	r3, r3
 8002e0a:	1a51      	subs	r1, r2, r1
 8002e0c:	425b      	negs	r3, r3
 8002e0e:	1acb      	subs	r3, r1, r3
 8002e10:	4699      	mov	r9, r3
 8002e12:	2301      	movs	r3, #1
 8002e14:	4698      	mov	r8, r3
 8002e16:	e5a4      	b.n	8002962 <__aeabi_dsub+0xa2>
 8002e18:	08ff      	lsrs	r7, r7, #3
 8002e1a:	074b      	lsls	r3, r1, #29
 8002e1c:	465d      	mov	r5, fp
 8002e1e:	433b      	orrs	r3, r7
 8002e20:	08cc      	lsrs	r4, r1, #3
 8002e22:	e6d7      	b.n	8002bd4 <__aeabi_dsub+0x314>
 8002e24:	4662      	mov	r2, ip
 8002e26:	431a      	orrs	r2, r3
 8002e28:	0014      	movs	r4, r2
 8002e2a:	1e63      	subs	r3, r4, #1
 8002e2c:	419c      	sbcs	r4, r3
 8002e2e:	e679      	b.n	8002b24 <__aeabi_dsub+0x264>
 8002e30:	0015      	movs	r5, r2
 8002e32:	4664      	mov	r4, ip
 8002e34:	3d20      	subs	r5, #32
 8002e36:	40ec      	lsrs	r4, r5
 8002e38:	46a0      	mov	r8, r4
 8002e3a:	2a20      	cmp	r2, #32
 8002e3c:	d005      	beq.n	8002e4a <__aeabi_dsub+0x58a>
 8002e3e:	2540      	movs	r5, #64	; 0x40
 8002e40:	4664      	mov	r4, ip
 8002e42:	1aaa      	subs	r2, r5, r2
 8002e44:	4094      	lsls	r4, r2
 8002e46:	4323      	orrs	r3, r4
 8002e48:	469a      	mov	sl, r3
 8002e4a:	4654      	mov	r4, sl
 8002e4c:	1e63      	subs	r3, r4, #1
 8002e4e:	419c      	sbcs	r4, r3
 8002e50:	4643      	mov	r3, r8
 8002e52:	4323      	orrs	r3, r4
 8002e54:	e773      	b.n	8002d3e <__aeabi_dsub+0x47e>
 8002e56:	4662      	mov	r2, ip
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	d023      	beq.n	8002ea4 <__aeabi_dsub+0x5e4>
 8002e5c:	000a      	movs	r2, r1
 8002e5e:	433a      	orrs	r2, r7
 8002e60:	d000      	beq.n	8002e64 <__aeabi_dsub+0x5a4>
 8002e62:	e0a0      	b.n	8002fa6 <__aeabi_dsub+0x6e6>
 8002e64:	4662      	mov	r2, ip
 8002e66:	08db      	lsrs	r3, r3, #3
 8002e68:	0752      	lsls	r2, r2, #29
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	4662      	mov	r2, ip
 8002e6e:	08d4      	lsrs	r4, r2, #3
 8002e70:	e6b0      	b.n	8002bd4 <__aeabi_dsub+0x314>
 8002e72:	000b      	movs	r3, r1
 8002e74:	433b      	orrs	r3, r7
 8002e76:	d100      	bne.n	8002e7a <__aeabi_dsub+0x5ba>
 8002e78:	e728      	b.n	8002ccc <__aeabi_dsub+0x40c>
 8002e7a:	08ff      	lsrs	r7, r7, #3
 8002e7c:	074b      	lsls	r3, r1, #29
 8002e7e:	465d      	mov	r5, fp
 8002e80:	433b      	orrs	r3, r7
 8002e82:	08cc      	lsrs	r4, r1, #3
 8002e84:	e697      	b.n	8002bb6 <__aeabi_dsub+0x2f6>
 8002e86:	2302      	movs	r3, #2
 8002e88:	4698      	mov	r8, r3
 8002e8a:	e736      	b.n	8002cfa <__aeabi_dsub+0x43a>
 8002e8c:	1afc      	subs	r4, r7, r3
 8002e8e:	42a7      	cmp	r7, r4
 8002e90:	41bf      	sbcs	r7, r7
 8002e92:	4663      	mov	r3, ip
 8002e94:	427f      	negs	r7, r7
 8002e96:	1ac9      	subs	r1, r1, r3
 8002e98:	1bcb      	subs	r3, r1, r7
 8002e9a:	4699      	mov	r9, r3
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	465d      	mov	r5, fp
 8002ea0:	4698      	mov	r8, r3
 8002ea2:	e55e      	b.n	8002962 <__aeabi_dsub+0xa2>
 8002ea4:	074b      	lsls	r3, r1, #29
 8002ea6:	08ff      	lsrs	r7, r7, #3
 8002ea8:	433b      	orrs	r3, r7
 8002eaa:	08cc      	lsrs	r4, r1, #3
 8002eac:	e692      	b.n	8002bd4 <__aeabi_dsub+0x314>
 8002eae:	1bdc      	subs	r4, r3, r7
 8002eb0:	4660      	mov	r0, ip
 8002eb2:	42a3      	cmp	r3, r4
 8002eb4:	41b6      	sbcs	r6, r6
 8002eb6:	1a40      	subs	r0, r0, r1
 8002eb8:	4276      	negs	r6, r6
 8002eba:	1b80      	subs	r0, r0, r6
 8002ebc:	4681      	mov	r9, r0
 8002ebe:	0200      	lsls	r0, r0, #8
 8002ec0:	d560      	bpl.n	8002f84 <__aeabi_dsub+0x6c4>
 8002ec2:	1afc      	subs	r4, r7, r3
 8002ec4:	42a7      	cmp	r7, r4
 8002ec6:	41bf      	sbcs	r7, r7
 8002ec8:	4663      	mov	r3, ip
 8002eca:	427f      	negs	r7, r7
 8002ecc:	1ac9      	subs	r1, r1, r3
 8002ece:	1bcb      	subs	r3, r1, r7
 8002ed0:	4699      	mov	r9, r3
 8002ed2:	465d      	mov	r5, fp
 8002ed4:	e576      	b.n	80029c4 <__aeabi_dsub+0x104>
 8002ed6:	08ff      	lsrs	r7, r7, #3
 8002ed8:	074b      	lsls	r3, r1, #29
 8002eda:	433b      	orrs	r3, r7
 8002edc:	08cc      	lsrs	r4, r1, #3
 8002ede:	e667      	b.n	8002bb0 <__aeabi_dsub+0x2f0>
 8002ee0:	000a      	movs	r2, r1
 8002ee2:	08db      	lsrs	r3, r3, #3
 8002ee4:	433a      	orrs	r2, r7
 8002ee6:	d100      	bne.n	8002eea <__aeabi_dsub+0x62a>
 8002ee8:	e66f      	b.n	8002bca <__aeabi_dsub+0x30a>
 8002eea:	4662      	mov	r2, ip
 8002eec:	0752      	lsls	r2, r2, #29
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	4662      	mov	r2, ip
 8002ef2:	08d4      	lsrs	r4, r2, #3
 8002ef4:	2280      	movs	r2, #128	; 0x80
 8002ef6:	0312      	lsls	r2, r2, #12
 8002ef8:	4214      	tst	r4, r2
 8002efa:	d007      	beq.n	8002f0c <__aeabi_dsub+0x64c>
 8002efc:	08c8      	lsrs	r0, r1, #3
 8002efe:	4210      	tst	r0, r2
 8002f00:	d104      	bne.n	8002f0c <__aeabi_dsub+0x64c>
 8002f02:	465d      	mov	r5, fp
 8002f04:	0004      	movs	r4, r0
 8002f06:	08fb      	lsrs	r3, r7, #3
 8002f08:	0749      	lsls	r1, r1, #29
 8002f0a:	430b      	orrs	r3, r1
 8002f0c:	0f5a      	lsrs	r2, r3, #29
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	08db      	lsrs	r3, r3, #3
 8002f12:	0752      	lsls	r2, r2, #29
 8002f14:	4313      	orrs	r3, r2
 8002f16:	e65d      	b.n	8002bd4 <__aeabi_dsub+0x314>
 8002f18:	074b      	lsls	r3, r1, #29
 8002f1a:	08ff      	lsrs	r7, r7, #3
 8002f1c:	433b      	orrs	r3, r7
 8002f1e:	08cc      	lsrs	r4, r1, #3
 8002f20:	e649      	b.n	8002bb6 <__aeabi_dsub+0x2f6>
 8002f22:	19dc      	adds	r4, r3, r7
 8002f24:	429c      	cmp	r4, r3
 8002f26:	419b      	sbcs	r3, r3
 8002f28:	4461      	add	r1, ip
 8002f2a:	4689      	mov	r9, r1
 8002f2c:	425b      	negs	r3, r3
 8002f2e:	4499      	add	r9, r3
 8002f30:	464b      	mov	r3, r9
 8002f32:	021b      	lsls	r3, r3, #8
 8002f34:	d400      	bmi.n	8002f38 <__aeabi_dsub+0x678>
 8002f36:	e631      	b.n	8002b9c <__aeabi_dsub+0x2dc>
 8002f38:	464a      	mov	r2, r9
 8002f3a:	4b17      	ldr	r3, [pc, #92]	; (8002f98 <__aeabi_dsub+0x6d8>)
 8002f3c:	401a      	ands	r2, r3
 8002f3e:	2301      	movs	r3, #1
 8002f40:	4691      	mov	r9, r2
 8002f42:	4698      	mov	r8, r3
 8002f44:	e62a      	b.n	8002b9c <__aeabi_dsub+0x2dc>
 8002f46:	0016      	movs	r6, r2
 8002f48:	4664      	mov	r4, ip
 8002f4a:	3e20      	subs	r6, #32
 8002f4c:	40f4      	lsrs	r4, r6
 8002f4e:	46a0      	mov	r8, r4
 8002f50:	2a20      	cmp	r2, #32
 8002f52:	d005      	beq.n	8002f60 <__aeabi_dsub+0x6a0>
 8002f54:	2640      	movs	r6, #64	; 0x40
 8002f56:	4664      	mov	r4, ip
 8002f58:	1ab2      	subs	r2, r6, r2
 8002f5a:	4094      	lsls	r4, r2
 8002f5c:	4323      	orrs	r3, r4
 8002f5e:	469a      	mov	sl, r3
 8002f60:	4654      	mov	r4, sl
 8002f62:	1e63      	subs	r3, r4, #1
 8002f64:	419c      	sbcs	r4, r3
 8002f66:	4643      	mov	r3, r8
 8002f68:	431c      	orrs	r4, r3
 8002f6a:	e5db      	b.n	8002b24 <__aeabi_dsub+0x264>
 8002f6c:	0002      	movs	r2, r0
 8002f6e:	2400      	movs	r4, #0
 8002f70:	2300      	movs	r3, #0
 8002f72:	e548      	b.n	8002a06 <__aeabi_dsub+0x146>
 8002f74:	19dc      	adds	r4, r3, r7
 8002f76:	42bc      	cmp	r4, r7
 8002f78:	41bf      	sbcs	r7, r7
 8002f7a:	4461      	add	r1, ip
 8002f7c:	4689      	mov	r9, r1
 8002f7e:	427f      	negs	r7, r7
 8002f80:	44b9      	add	r9, r7
 8002f82:	e738      	b.n	8002df6 <__aeabi_dsub+0x536>
 8002f84:	464b      	mov	r3, r9
 8002f86:	4323      	orrs	r3, r4
 8002f88:	d100      	bne.n	8002f8c <__aeabi_dsub+0x6cc>
 8002f8a:	e69f      	b.n	8002ccc <__aeabi_dsub+0x40c>
 8002f8c:	e606      	b.n	8002b9c <__aeabi_dsub+0x2dc>
 8002f8e:	46c0      	nop			; (mov r8, r8)
 8002f90:	000007fe 	.word	0x000007fe
 8002f94:	000007ff 	.word	0x000007ff
 8002f98:	ff7fffff 	.word	0xff7fffff
 8002f9c:	08ff      	lsrs	r7, r7, #3
 8002f9e:	074b      	lsls	r3, r1, #29
 8002fa0:	433b      	orrs	r3, r7
 8002fa2:	08cc      	lsrs	r4, r1, #3
 8002fa4:	e616      	b.n	8002bd4 <__aeabi_dsub+0x314>
 8002fa6:	4662      	mov	r2, ip
 8002fa8:	08db      	lsrs	r3, r3, #3
 8002faa:	0752      	lsls	r2, r2, #29
 8002fac:	4313      	orrs	r3, r2
 8002fae:	4662      	mov	r2, ip
 8002fb0:	08d4      	lsrs	r4, r2, #3
 8002fb2:	2280      	movs	r2, #128	; 0x80
 8002fb4:	0312      	lsls	r2, r2, #12
 8002fb6:	4214      	tst	r4, r2
 8002fb8:	d007      	beq.n	8002fca <__aeabi_dsub+0x70a>
 8002fba:	08c8      	lsrs	r0, r1, #3
 8002fbc:	4210      	tst	r0, r2
 8002fbe:	d104      	bne.n	8002fca <__aeabi_dsub+0x70a>
 8002fc0:	465d      	mov	r5, fp
 8002fc2:	0004      	movs	r4, r0
 8002fc4:	08fb      	lsrs	r3, r7, #3
 8002fc6:	0749      	lsls	r1, r1, #29
 8002fc8:	430b      	orrs	r3, r1
 8002fca:	0f5a      	lsrs	r2, r3, #29
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	0752      	lsls	r2, r2, #29
 8002fd0:	08db      	lsrs	r3, r3, #3
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	e5fe      	b.n	8002bd4 <__aeabi_dsub+0x314>
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	4a01      	ldr	r2, [pc, #4]	; (8002fe0 <__aeabi_dsub+0x720>)
 8002fda:	001c      	movs	r4, r3
 8002fdc:	e513      	b.n	8002a06 <__aeabi_dsub+0x146>
 8002fde:	46c0      	nop			; (mov r8, r8)
 8002fe0:	000007ff 	.word	0x000007ff

08002fe4 <__aeabi_dcmpun>:
 8002fe4:	b570      	push	{r4, r5, r6, lr}
 8002fe6:	0005      	movs	r5, r0
 8002fe8:	480c      	ldr	r0, [pc, #48]	; (800301c <__aeabi_dcmpun+0x38>)
 8002fea:	031c      	lsls	r4, r3, #12
 8002fec:	0016      	movs	r6, r2
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	030a      	lsls	r2, r1, #12
 8002ff2:	0049      	lsls	r1, r1, #1
 8002ff4:	0b12      	lsrs	r2, r2, #12
 8002ff6:	0d49      	lsrs	r1, r1, #21
 8002ff8:	0b24      	lsrs	r4, r4, #12
 8002ffa:	0d5b      	lsrs	r3, r3, #21
 8002ffc:	4281      	cmp	r1, r0
 8002ffe:	d008      	beq.n	8003012 <__aeabi_dcmpun+0x2e>
 8003000:	4a06      	ldr	r2, [pc, #24]	; (800301c <__aeabi_dcmpun+0x38>)
 8003002:	2000      	movs	r0, #0
 8003004:	4293      	cmp	r3, r2
 8003006:	d103      	bne.n	8003010 <__aeabi_dcmpun+0x2c>
 8003008:	0020      	movs	r0, r4
 800300a:	4330      	orrs	r0, r6
 800300c:	1e43      	subs	r3, r0, #1
 800300e:	4198      	sbcs	r0, r3
 8003010:	bd70      	pop	{r4, r5, r6, pc}
 8003012:	2001      	movs	r0, #1
 8003014:	432a      	orrs	r2, r5
 8003016:	d1fb      	bne.n	8003010 <__aeabi_dcmpun+0x2c>
 8003018:	e7f2      	b.n	8003000 <__aeabi_dcmpun+0x1c>
 800301a:	46c0      	nop			; (mov r8, r8)
 800301c:	000007ff 	.word	0x000007ff

08003020 <__aeabi_d2iz>:
 8003020:	000a      	movs	r2, r1
 8003022:	b530      	push	{r4, r5, lr}
 8003024:	4c13      	ldr	r4, [pc, #76]	; (8003074 <__aeabi_d2iz+0x54>)
 8003026:	0053      	lsls	r3, r2, #1
 8003028:	0309      	lsls	r1, r1, #12
 800302a:	0005      	movs	r5, r0
 800302c:	0b09      	lsrs	r1, r1, #12
 800302e:	2000      	movs	r0, #0
 8003030:	0d5b      	lsrs	r3, r3, #21
 8003032:	0fd2      	lsrs	r2, r2, #31
 8003034:	42a3      	cmp	r3, r4
 8003036:	dd04      	ble.n	8003042 <__aeabi_d2iz+0x22>
 8003038:	480f      	ldr	r0, [pc, #60]	; (8003078 <__aeabi_d2iz+0x58>)
 800303a:	4283      	cmp	r3, r0
 800303c:	dd02      	ble.n	8003044 <__aeabi_d2iz+0x24>
 800303e:	4b0f      	ldr	r3, [pc, #60]	; (800307c <__aeabi_d2iz+0x5c>)
 8003040:	18d0      	adds	r0, r2, r3
 8003042:	bd30      	pop	{r4, r5, pc}
 8003044:	2080      	movs	r0, #128	; 0x80
 8003046:	0340      	lsls	r0, r0, #13
 8003048:	4301      	orrs	r1, r0
 800304a:	480d      	ldr	r0, [pc, #52]	; (8003080 <__aeabi_d2iz+0x60>)
 800304c:	1ac0      	subs	r0, r0, r3
 800304e:	281f      	cmp	r0, #31
 8003050:	dd08      	ble.n	8003064 <__aeabi_d2iz+0x44>
 8003052:	480c      	ldr	r0, [pc, #48]	; (8003084 <__aeabi_d2iz+0x64>)
 8003054:	1ac3      	subs	r3, r0, r3
 8003056:	40d9      	lsrs	r1, r3
 8003058:	000b      	movs	r3, r1
 800305a:	4258      	negs	r0, r3
 800305c:	2a00      	cmp	r2, #0
 800305e:	d1f0      	bne.n	8003042 <__aeabi_d2iz+0x22>
 8003060:	0018      	movs	r0, r3
 8003062:	e7ee      	b.n	8003042 <__aeabi_d2iz+0x22>
 8003064:	4c08      	ldr	r4, [pc, #32]	; (8003088 <__aeabi_d2iz+0x68>)
 8003066:	40c5      	lsrs	r5, r0
 8003068:	46a4      	mov	ip, r4
 800306a:	4463      	add	r3, ip
 800306c:	4099      	lsls	r1, r3
 800306e:	000b      	movs	r3, r1
 8003070:	432b      	orrs	r3, r5
 8003072:	e7f2      	b.n	800305a <__aeabi_d2iz+0x3a>
 8003074:	000003fe 	.word	0x000003fe
 8003078:	0000041d 	.word	0x0000041d
 800307c:	7fffffff 	.word	0x7fffffff
 8003080:	00000433 	.word	0x00000433
 8003084:	00000413 	.word	0x00000413
 8003088:	fffffbed 	.word	0xfffffbed

0800308c <__aeabi_i2d>:
 800308c:	b570      	push	{r4, r5, r6, lr}
 800308e:	2800      	cmp	r0, #0
 8003090:	d016      	beq.n	80030c0 <__aeabi_i2d+0x34>
 8003092:	17c3      	asrs	r3, r0, #31
 8003094:	18c5      	adds	r5, r0, r3
 8003096:	405d      	eors	r5, r3
 8003098:	0fc4      	lsrs	r4, r0, #31
 800309a:	0028      	movs	r0, r5
 800309c:	f000 f91c 	bl	80032d8 <__clzsi2>
 80030a0:	4a11      	ldr	r2, [pc, #68]	; (80030e8 <__aeabi_i2d+0x5c>)
 80030a2:	1a12      	subs	r2, r2, r0
 80030a4:	280a      	cmp	r0, #10
 80030a6:	dc16      	bgt.n	80030d6 <__aeabi_i2d+0x4a>
 80030a8:	0003      	movs	r3, r0
 80030aa:	002e      	movs	r6, r5
 80030ac:	3315      	adds	r3, #21
 80030ae:	409e      	lsls	r6, r3
 80030b0:	230b      	movs	r3, #11
 80030b2:	1a18      	subs	r0, r3, r0
 80030b4:	40c5      	lsrs	r5, r0
 80030b6:	0552      	lsls	r2, r2, #21
 80030b8:	032d      	lsls	r5, r5, #12
 80030ba:	0b2d      	lsrs	r5, r5, #12
 80030bc:	0d53      	lsrs	r3, r2, #21
 80030be:	e003      	b.n	80030c8 <__aeabi_i2d+0x3c>
 80030c0:	2400      	movs	r4, #0
 80030c2:	2300      	movs	r3, #0
 80030c4:	2500      	movs	r5, #0
 80030c6:	2600      	movs	r6, #0
 80030c8:	051b      	lsls	r3, r3, #20
 80030ca:	432b      	orrs	r3, r5
 80030cc:	07e4      	lsls	r4, r4, #31
 80030ce:	4323      	orrs	r3, r4
 80030d0:	0030      	movs	r0, r6
 80030d2:	0019      	movs	r1, r3
 80030d4:	bd70      	pop	{r4, r5, r6, pc}
 80030d6:	380b      	subs	r0, #11
 80030d8:	4085      	lsls	r5, r0
 80030da:	0552      	lsls	r2, r2, #21
 80030dc:	032d      	lsls	r5, r5, #12
 80030de:	2600      	movs	r6, #0
 80030e0:	0b2d      	lsrs	r5, r5, #12
 80030e2:	0d53      	lsrs	r3, r2, #21
 80030e4:	e7f0      	b.n	80030c8 <__aeabi_i2d+0x3c>
 80030e6:	46c0      	nop			; (mov r8, r8)
 80030e8:	0000041e 	.word	0x0000041e

080030ec <__aeabi_ui2d>:
 80030ec:	b510      	push	{r4, lr}
 80030ee:	1e04      	subs	r4, r0, #0
 80030f0:	d010      	beq.n	8003114 <__aeabi_ui2d+0x28>
 80030f2:	f000 f8f1 	bl	80032d8 <__clzsi2>
 80030f6:	4b0f      	ldr	r3, [pc, #60]	; (8003134 <__aeabi_ui2d+0x48>)
 80030f8:	1a1b      	subs	r3, r3, r0
 80030fa:	280a      	cmp	r0, #10
 80030fc:	dc11      	bgt.n	8003122 <__aeabi_ui2d+0x36>
 80030fe:	220b      	movs	r2, #11
 8003100:	0021      	movs	r1, r4
 8003102:	1a12      	subs	r2, r2, r0
 8003104:	40d1      	lsrs	r1, r2
 8003106:	3015      	adds	r0, #21
 8003108:	030a      	lsls	r2, r1, #12
 800310a:	055b      	lsls	r3, r3, #21
 800310c:	4084      	lsls	r4, r0
 800310e:	0b12      	lsrs	r2, r2, #12
 8003110:	0d5b      	lsrs	r3, r3, #21
 8003112:	e001      	b.n	8003118 <__aeabi_ui2d+0x2c>
 8003114:	2300      	movs	r3, #0
 8003116:	2200      	movs	r2, #0
 8003118:	051b      	lsls	r3, r3, #20
 800311a:	4313      	orrs	r3, r2
 800311c:	0020      	movs	r0, r4
 800311e:	0019      	movs	r1, r3
 8003120:	bd10      	pop	{r4, pc}
 8003122:	0022      	movs	r2, r4
 8003124:	380b      	subs	r0, #11
 8003126:	4082      	lsls	r2, r0
 8003128:	055b      	lsls	r3, r3, #21
 800312a:	0312      	lsls	r2, r2, #12
 800312c:	2400      	movs	r4, #0
 800312e:	0b12      	lsrs	r2, r2, #12
 8003130:	0d5b      	lsrs	r3, r3, #21
 8003132:	e7f1      	b.n	8003118 <__aeabi_ui2d+0x2c>
 8003134:	0000041e 	.word	0x0000041e

08003138 <__aeabi_f2d>:
 8003138:	b570      	push	{r4, r5, r6, lr}
 800313a:	0043      	lsls	r3, r0, #1
 800313c:	0246      	lsls	r6, r0, #9
 800313e:	0fc4      	lsrs	r4, r0, #31
 8003140:	20fe      	movs	r0, #254	; 0xfe
 8003142:	0e1b      	lsrs	r3, r3, #24
 8003144:	1c59      	adds	r1, r3, #1
 8003146:	0a75      	lsrs	r5, r6, #9
 8003148:	4208      	tst	r0, r1
 800314a:	d00c      	beq.n	8003166 <__aeabi_f2d+0x2e>
 800314c:	22e0      	movs	r2, #224	; 0xe0
 800314e:	0092      	lsls	r2, r2, #2
 8003150:	4694      	mov	ip, r2
 8003152:	076d      	lsls	r5, r5, #29
 8003154:	0b36      	lsrs	r6, r6, #12
 8003156:	4463      	add	r3, ip
 8003158:	051b      	lsls	r3, r3, #20
 800315a:	4333      	orrs	r3, r6
 800315c:	07e4      	lsls	r4, r4, #31
 800315e:	4323      	orrs	r3, r4
 8003160:	0028      	movs	r0, r5
 8003162:	0019      	movs	r1, r3
 8003164:	bd70      	pop	{r4, r5, r6, pc}
 8003166:	2b00      	cmp	r3, #0
 8003168:	d114      	bne.n	8003194 <__aeabi_f2d+0x5c>
 800316a:	2d00      	cmp	r5, #0
 800316c:	d01b      	beq.n	80031a6 <__aeabi_f2d+0x6e>
 800316e:	0028      	movs	r0, r5
 8003170:	f000 f8b2 	bl	80032d8 <__clzsi2>
 8003174:	280a      	cmp	r0, #10
 8003176:	dc1c      	bgt.n	80031b2 <__aeabi_f2d+0x7a>
 8003178:	230b      	movs	r3, #11
 800317a:	002e      	movs	r6, r5
 800317c:	1a1b      	subs	r3, r3, r0
 800317e:	40de      	lsrs	r6, r3
 8003180:	0003      	movs	r3, r0
 8003182:	3315      	adds	r3, #21
 8003184:	409d      	lsls	r5, r3
 8003186:	4a0e      	ldr	r2, [pc, #56]	; (80031c0 <__aeabi_f2d+0x88>)
 8003188:	0336      	lsls	r6, r6, #12
 800318a:	1a12      	subs	r2, r2, r0
 800318c:	0552      	lsls	r2, r2, #21
 800318e:	0b36      	lsrs	r6, r6, #12
 8003190:	0d53      	lsrs	r3, r2, #21
 8003192:	e7e1      	b.n	8003158 <__aeabi_f2d+0x20>
 8003194:	2d00      	cmp	r5, #0
 8003196:	d009      	beq.n	80031ac <__aeabi_f2d+0x74>
 8003198:	2280      	movs	r2, #128	; 0x80
 800319a:	0b36      	lsrs	r6, r6, #12
 800319c:	0312      	lsls	r2, r2, #12
 800319e:	4b09      	ldr	r3, [pc, #36]	; (80031c4 <__aeabi_f2d+0x8c>)
 80031a0:	076d      	lsls	r5, r5, #29
 80031a2:	4316      	orrs	r6, r2
 80031a4:	e7d8      	b.n	8003158 <__aeabi_f2d+0x20>
 80031a6:	2300      	movs	r3, #0
 80031a8:	2600      	movs	r6, #0
 80031aa:	e7d5      	b.n	8003158 <__aeabi_f2d+0x20>
 80031ac:	2600      	movs	r6, #0
 80031ae:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <__aeabi_f2d+0x8c>)
 80031b0:	e7d2      	b.n	8003158 <__aeabi_f2d+0x20>
 80031b2:	0003      	movs	r3, r0
 80031b4:	3b0b      	subs	r3, #11
 80031b6:	409d      	lsls	r5, r3
 80031b8:	002e      	movs	r6, r5
 80031ba:	2500      	movs	r5, #0
 80031bc:	e7e3      	b.n	8003186 <__aeabi_f2d+0x4e>
 80031be:	46c0      	nop			; (mov r8, r8)
 80031c0:	00000389 	.word	0x00000389
 80031c4:	000007ff 	.word	0x000007ff

080031c8 <__aeabi_d2f>:
 80031c8:	0002      	movs	r2, r0
 80031ca:	004b      	lsls	r3, r1, #1
 80031cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031ce:	0d5b      	lsrs	r3, r3, #21
 80031d0:	030c      	lsls	r4, r1, #12
 80031d2:	4e3d      	ldr	r6, [pc, #244]	; (80032c8 <__aeabi_d2f+0x100>)
 80031d4:	0a64      	lsrs	r4, r4, #9
 80031d6:	0f40      	lsrs	r0, r0, #29
 80031d8:	1c5f      	adds	r7, r3, #1
 80031da:	0fc9      	lsrs	r1, r1, #31
 80031dc:	4304      	orrs	r4, r0
 80031de:	00d5      	lsls	r5, r2, #3
 80031e0:	4237      	tst	r7, r6
 80031e2:	d00a      	beq.n	80031fa <__aeabi_d2f+0x32>
 80031e4:	4839      	ldr	r0, [pc, #228]	; (80032cc <__aeabi_d2f+0x104>)
 80031e6:	181e      	adds	r6, r3, r0
 80031e8:	2efe      	cmp	r6, #254	; 0xfe
 80031ea:	dd16      	ble.n	800321a <__aeabi_d2f+0x52>
 80031ec:	20ff      	movs	r0, #255	; 0xff
 80031ee:	2400      	movs	r4, #0
 80031f0:	05c0      	lsls	r0, r0, #23
 80031f2:	4320      	orrs	r0, r4
 80031f4:	07c9      	lsls	r1, r1, #31
 80031f6:	4308      	orrs	r0, r1
 80031f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d106      	bne.n	800320c <__aeabi_d2f+0x44>
 80031fe:	432c      	orrs	r4, r5
 8003200:	d026      	beq.n	8003250 <__aeabi_d2f+0x88>
 8003202:	2205      	movs	r2, #5
 8003204:	0192      	lsls	r2, r2, #6
 8003206:	0a54      	lsrs	r4, r2, #9
 8003208:	b2d8      	uxtb	r0, r3
 800320a:	e7f1      	b.n	80031f0 <__aeabi_d2f+0x28>
 800320c:	4325      	orrs	r5, r4
 800320e:	d0ed      	beq.n	80031ec <__aeabi_d2f+0x24>
 8003210:	2080      	movs	r0, #128	; 0x80
 8003212:	03c0      	lsls	r0, r0, #15
 8003214:	4304      	orrs	r4, r0
 8003216:	20ff      	movs	r0, #255	; 0xff
 8003218:	e7ea      	b.n	80031f0 <__aeabi_d2f+0x28>
 800321a:	2e00      	cmp	r6, #0
 800321c:	dd1b      	ble.n	8003256 <__aeabi_d2f+0x8e>
 800321e:	0192      	lsls	r2, r2, #6
 8003220:	1e53      	subs	r3, r2, #1
 8003222:	419a      	sbcs	r2, r3
 8003224:	00e4      	lsls	r4, r4, #3
 8003226:	0f6d      	lsrs	r5, r5, #29
 8003228:	4322      	orrs	r2, r4
 800322a:	432a      	orrs	r2, r5
 800322c:	0753      	lsls	r3, r2, #29
 800322e:	d048      	beq.n	80032c2 <__aeabi_d2f+0xfa>
 8003230:	230f      	movs	r3, #15
 8003232:	4013      	ands	r3, r2
 8003234:	2b04      	cmp	r3, #4
 8003236:	d000      	beq.n	800323a <__aeabi_d2f+0x72>
 8003238:	3204      	adds	r2, #4
 800323a:	2380      	movs	r3, #128	; 0x80
 800323c:	04db      	lsls	r3, r3, #19
 800323e:	4013      	ands	r3, r2
 8003240:	d03f      	beq.n	80032c2 <__aeabi_d2f+0xfa>
 8003242:	1c70      	adds	r0, r6, #1
 8003244:	2efe      	cmp	r6, #254	; 0xfe
 8003246:	d0d1      	beq.n	80031ec <__aeabi_d2f+0x24>
 8003248:	0192      	lsls	r2, r2, #6
 800324a:	0a54      	lsrs	r4, r2, #9
 800324c:	b2c0      	uxtb	r0, r0
 800324e:	e7cf      	b.n	80031f0 <__aeabi_d2f+0x28>
 8003250:	2000      	movs	r0, #0
 8003252:	2400      	movs	r4, #0
 8003254:	e7cc      	b.n	80031f0 <__aeabi_d2f+0x28>
 8003256:	0032      	movs	r2, r6
 8003258:	3217      	adds	r2, #23
 800325a:	db22      	blt.n	80032a2 <__aeabi_d2f+0xda>
 800325c:	2080      	movs	r0, #128	; 0x80
 800325e:	0400      	lsls	r0, r0, #16
 8003260:	4320      	orrs	r0, r4
 8003262:	241e      	movs	r4, #30
 8003264:	1ba4      	subs	r4, r4, r6
 8003266:	2c1f      	cmp	r4, #31
 8003268:	dd1d      	ble.n	80032a6 <__aeabi_d2f+0xde>
 800326a:	2202      	movs	r2, #2
 800326c:	4252      	negs	r2, r2
 800326e:	1b96      	subs	r6, r2, r6
 8003270:	0002      	movs	r2, r0
 8003272:	40f2      	lsrs	r2, r6
 8003274:	0016      	movs	r6, r2
 8003276:	2c20      	cmp	r4, #32
 8003278:	d004      	beq.n	8003284 <__aeabi_d2f+0xbc>
 800327a:	4a15      	ldr	r2, [pc, #84]	; (80032d0 <__aeabi_d2f+0x108>)
 800327c:	4694      	mov	ip, r2
 800327e:	4463      	add	r3, ip
 8003280:	4098      	lsls	r0, r3
 8003282:	4305      	orrs	r5, r0
 8003284:	002a      	movs	r2, r5
 8003286:	1e53      	subs	r3, r2, #1
 8003288:	419a      	sbcs	r2, r3
 800328a:	4332      	orrs	r2, r6
 800328c:	2600      	movs	r6, #0
 800328e:	0753      	lsls	r3, r2, #29
 8003290:	d1ce      	bne.n	8003230 <__aeabi_d2f+0x68>
 8003292:	2480      	movs	r4, #128	; 0x80
 8003294:	0013      	movs	r3, r2
 8003296:	04e4      	lsls	r4, r4, #19
 8003298:	2001      	movs	r0, #1
 800329a:	4023      	ands	r3, r4
 800329c:	4222      	tst	r2, r4
 800329e:	d1d3      	bne.n	8003248 <__aeabi_d2f+0x80>
 80032a0:	e7b0      	b.n	8003204 <__aeabi_d2f+0x3c>
 80032a2:	2300      	movs	r3, #0
 80032a4:	e7ad      	b.n	8003202 <__aeabi_d2f+0x3a>
 80032a6:	4a0b      	ldr	r2, [pc, #44]	; (80032d4 <__aeabi_d2f+0x10c>)
 80032a8:	4694      	mov	ip, r2
 80032aa:	002a      	movs	r2, r5
 80032ac:	40e2      	lsrs	r2, r4
 80032ae:	0014      	movs	r4, r2
 80032b0:	002a      	movs	r2, r5
 80032b2:	4463      	add	r3, ip
 80032b4:	409a      	lsls	r2, r3
 80032b6:	4098      	lsls	r0, r3
 80032b8:	1e55      	subs	r5, r2, #1
 80032ba:	41aa      	sbcs	r2, r5
 80032bc:	4302      	orrs	r2, r0
 80032be:	4322      	orrs	r2, r4
 80032c0:	e7e4      	b.n	800328c <__aeabi_d2f+0xc4>
 80032c2:	0033      	movs	r3, r6
 80032c4:	e79e      	b.n	8003204 <__aeabi_d2f+0x3c>
 80032c6:	46c0      	nop			; (mov r8, r8)
 80032c8:	000007fe 	.word	0x000007fe
 80032cc:	fffffc80 	.word	0xfffffc80
 80032d0:	fffffca2 	.word	0xfffffca2
 80032d4:	fffffc82 	.word	0xfffffc82

080032d8 <__clzsi2>:
 80032d8:	211c      	movs	r1, #28
 80032da:	2301      	movs	r3, #1
 80032dc:	041b      	lsls	r3, r3, #16
 80032de:	4298      	cmp	r0, r3
 80032e0:	d301      	bcc.n	80032e6 <__clzsi2+0xe>
 80032e2:	0c00      	lsrs	r0, r0, #16
 80032e4:	3910      	subs	r1, #16
 80032e6:	0a1b      	lsrs	r3, r3, #8
 80032e8:	4298      	cmp	r0, r3
 80032ea:	d301      	bcc.n	80032f0 <__clzsi2+0x18>
 80032ec:	0a00      	lsrs	r0, r0, #8
 80032ee:	3908      	subs	r1, #8
 80032f0:	091b      	lsrs	r3, r3, #4
 80032f2:	4298      	cmp	r0, r3
 80032f4:	d301      	bcc.n	80032fa <__clzsi2+0x22>
 80032f6:	0900      	lsrs	r0, r0, #4
 80032f8:	3904      	subs	r1, #4
 80032fa:	a202      	add	r2, pc, #8	; (adr r2, 8003304 <__clzsi2+0x2c>)
 80032fc:	5c10      	ldrb	r0, [r2, r0]
 80032fe:	1840      	adds	r0, r0, r1
 8003300:	4770      	bx	lr
 8003302:	46c0      	nop			; (mov r8, r8)
 8003304:	02020304 	.word	0x02020304
 8003308:	01010101 	.word	0x01010101
	...

08003314 <__clzdi2>:
 8003314:	b510      	push	{r4, lr}
 8003316:	2900      	cmp	r1, #0
 8003318:	d103      	bne.n	8003322 <__clzdi2+0xe>
 800331a:	f7ff ffdd 	bl	80032d8 <__clzsi2>
 800331e:	3020      	adds	r0, #32
 8003320:	e002      	b.n	8003328 <__clzdi2+0x14>
 8003322:	0008      	movs	r0, r1
 8003324:	f7ff ffd8 	bl	80032d8 <__clzsi2>
 8003328:	bd10      	pop	{r4, pc}
 800332a:	46c0      	nop			; (mov r8, r8)

0800332c <Encoder_Run>:
float valor_Encoder   = 12.0;//valor inicial del encoder
float paso_Encoder    = 0.1; //con 12 sube aprox +-0.1V
/* Private functions ---------------------------------------------------------*/

/* Exported functions --------------------------------------------------------*/
float Encoder_Run(void){
 800332c:	b570      	push	{r4, r5, r6, lr}
    //FUNCION PARA LEER EL ENCODER ROTATIVOS, me base de aqui: https://www.youtube.com/watch?v=6c5nL2tcCs0&t=607s
    bit_actual = ((HAL_GPIO_ReadPin(DT_GPIO_Port, DT_Pin) << 1) | HAL_GPIO_ReadPin(CLK_GPIO_Port, CLK_Pin));                  //convierto a 'uint8_t' el valor ya que al compilar me daba un warning "la conversión implícita pierde precisión entera: 'int' a 'uint8_t'"
 800332e:	2140      	movs	r1, #64	; 0x40
 8003330:	481d      	ldr	r0, [pc, #116]	; (80033a8 <Encoder_Run+0x7c>)
 8003332:	f001 fff7 	bl	8005324 <HAL_GPIO_ReadPin>
 8003336:	2120      	movs	r1, #32
 8003338:	0004      	movs	r4, r0
 800333a:	481b      	ldr	r0, [pc, #108]	; (80033a8 <Encoder_Run+0x7c>)
 800333c:	f001 fff2 	bl	8005324 <HAL_GPIO_ReadPin>
 8003340:	0064      	lsls	r4, r4, #1
 8003342:	4320      	orrs	r0, r4
 8003344:	4a19      	ldr	r2, [pc, #100]	; (80033ac <Encoder_Run+0x80>)
    bit_armado = ((bit_anterior << 2) | bit_actual);
 8003346:	491a      	ldr	r1, [pc, #104]	; (80033b0 <Encoder_Run+0x84>)
    bit_actual = ((HAL_GPIO_ReadPin(DT_GPIO_Port, DT_Pin) << 1) | HAL_GPIO_ReadPin(CLK_GPIO_Port, CLK_Pin));                  //convierto a 'uint8_t' el valor ya que al compilar me daba un warning "la conversión implícita pierde precisión entera: 'int' a 'uint8_t'"
 8003348:	b243      	sxtb	r3, r0
 800334a:	b2c0      	uxtb	r0, r0
 800334c:	7010      	strb	r0, [r2, #0]
    bit_armado = ((bit_anterior << 2) | bit_actual);
 800334e:	780a      	ldrb	r2, [r1, #0]
 8003350:	4c18      	ldr	r4, [pc, #96]	; (80033b4 <Encoder_Run+0x88>)
 8003352:	0092      	lsls	r2, r2, #2
 8003354:	4313      	orrs	r3, r2
 8003356:	4a18      	ldr	r2, [pc, #96]	; (80033b8 <Encoder_Run+0x8c>)
 8003358:	b2db      	uxtb	r3, r3
 800335a:	7013      	strb	r3, [r2, #0]
    bit_anterior = bit_actual;
 800335c:	7008      	strb	r0, [r1, #0]

    //Lectura de encoder rotativo de 20 posiciones
    if(bit_armado==14){//horario
 800335e:	2b0e      	cmp	r3, #14
 8003360:	d119      	bne.n	8003396 <Encoder_Run+0x6a>
    	valor_Encoder-=paso_Encoder;
 8003362:	4b16      	ldr	r3, [pc, #88]	; (80033bc <Encoder_Run+0x90>)
 8003364:	6820      	ldr	r0, [r4, #0]
 8003366:	6819      	ldr	r1, [r3, #0]
 8003368:	f7fd fea2 	bl	80010b0 <__aeabi_fsub>
    }
    if(bit_armado==4){//antihorario
    	valor_Encoder+=paso_Encoder;
 800336c:	6020      	str	r0, [r4, #0]

    //Lectura de encoder rotativo de 30 posiciones
    //if( (bit_armado==14)||(bit_armado==7) ) valor_Encoder+=10;//horario
    //if( (bit_armado==4) ||(bit_armado==2) ) valor_Encoder-=10;//antihorario

    if(valor_Encoder <= val_Min_Encoder) valor_Encoder = val_Min_Encoder;
 800336e:	4b14      	ldr	r3, [pc, #80]	; (80033c0 <Encoder_Run+0x94>)
 8003370:	6820      	ldr	r0, [r4, #0]
 8003372:	681d      	ldr	r5, [r3, #0]
 8003374:	1c29      	adds	r1, r5, #0
 8003376:	f7fd f8bf 	bl	80004f8 <__aeabi_fcmple>
 800337a:	2800      	cmp	r0, #0
 800337c:	d000      	beq.n	8003380 <Encoder_Run+0x54>
 800337e:	6025      	str	r5, [r4, #0]
    if(valor_Encoder >= val_Max_Encoder) valor_Encoder = val_Max_Encoder;
 8003380:	4b10      	ldr	r3, [pc, #64]	; (80033c4 <Encoder_Run+0x98>)
 8003382:	6820      	ldr	r0, [r4, #0]
 8003384:	681d      	ldr	r5, [r3, #0]
 8003386:	1c29      	adds	r1, r5, #0
 8003388:	f7fd f8ca 	bl	8000520 <__aeabi_fcmpge>
 800338c:	2800      	cmp	r0, #0
 800338e:	d000      	beq.n	8003392 <Encoder_Run+0x66>
 8003390:	6025      	str	r5, [r4, #0]

    return valor_Encoder;
 8003392:	6820      	ldr	r0, [r4, #0]
}
 8003394:	bd70      	pop	{r4, r5, r6, pc}
    if(bit_armado==4){//antihorario
 8003396:	2b04      	cmp	r3, #4
 8003398:	d1e9      	bne.n	800336e <Encoder_Run+0x42>
    	valor_Encoder+=paso_Encoder;
 800339a:	4b08      	ldr	r3, [pc, #32]	; (80033bc <Encoder_Run+0x90>)
 800339c:	6821      	ldr	r1, [r4, #0]
 800339e:	6818      	ldr	r0, [r3, #0]
 80033a0:	f7fd f9fa 	bl	8000798 <__aeabi_fadd>
 80033a4:	e7e2      	b.n	800336c <Encoder_Run+0x40>
 80033a6:	46c0      	nop			; (mov r8, r8)
 80033a8:	48000400 	.word	0x48000400
 80033ac:	20000214 	.word	0x20000214
 80033b0:	20000215 	.word	0x20000215
 80033b4:	20000008 	.word	0x20000008
 80033b8:	20000216 	.word	0x20000216
 80033bc:	20000000 	.word	0x20000000
 80033c0:	20000218 	.word	0x20000218
 80033c4:	20000004 	.word	0x20000004

080033c8 <INA226_Init>:
/* Private macros ------------------------------------------------------------*/
/* Variables -----------------------------------------------------------------*/
Anglas_IN226 ina;
/* Private functions ---------------------------------------------------------*/
/* Exported functions --------------------------------------------------------*/
void INA226_Init(const uint16_t maxBusMiliampers, const uint16_t resMiliohmios, uint16_t AVG, uint16_t Time_Vbus, uint16_t Time_Vshunt, uint16_t ModeOperation){
 80033c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033ca:	b087      	sub	sp, #28
 80033cc:	9103      	str	r1, [sp, #12]
 80033ce:	0005      	movs	r5, r0
 80033d0:	a90c      	add	r1, sp, #48	; 0x30
 80033d2:	a80d      	add	r0, sp, #52	; 0x34
 80033d4:	8800      	ldrh	r0, [r0, #0]
 80033d6:	8809      	ldrh	r1, [r1, #0]
	 * bit 11-9 : 100 (AVG=128, promedio de numero de muestras)
	 * bit  8-6 : 100 (T=1.1ms, tiempo de conversion de Vbus)
	 * bit  5-3 : 111 (T=8.24ms, tiempo de conversion de Vshunt)
	 * bit  2-0 : 111 (Shunt & Bus continuo, modo de operacion)
	*/
	REGISTER = NO_RESET_INA226|(AVG << 9)|(Time_Vbus << 6)|(Time_Vshunt << 3)|ModeOperation;
 80033d8:	0252      	lsls	r2, r2, #9
 80033da:	4302      	orrs	r2, r0
 80033dc:	00c9      	lsls	r1, r1, #3
 80033de:	430a      	orrs	r2, r1
 80033e0:	019b      	lsls	r3, r3, #6
 80033e2:	431a      	orrs	r2, r3
 80033e4:	2380      	movs	r3, #128	; 0x80
 80033e6:	01db      	lsls	r3, r3, #7
	ina.Rshunt = resMiliohmios; //esto lo hago porq necesito Rshunt para la funcion "INA226_Alert_Limit_Write"
 80033e8:	4f25      	ldr	r7, [pc, #148]	; (8003480 <INA226_Init+0xb8>)
 80033ea:	9c03      	ldr	r4, [sp, #12]
	REGISTER = NO_RESET_INA226|(AVG << 9)|(Time_Vbus << 6)|(Time_Vshunt << 3)|ModeOperation;
 80033ec:	431a      	orrs	r2, r3

	MSB = (uint8_t)(REGISTER >> 8);
 80033ee:	b293      	uxth	r3, r2
	ina.Rshunt = resMiliohmios; //esto lo hago porq necesito Rshunt para la funcion "INA226_Alert_Limit_Write"
 80033f0:	81fc      	strh	r4, [r7, #14]
	MSB = (uint8_t)(REGISTER >> 8);
 80033f2:	0a1b      	lsrs	r3, r3, #8
	LSB = (uint8_t)(REGISTER & 0xFF);

	datos[0] = INA_CONFIGURATION_REGISTER;
 80033f4:	ac05      	add	r4, sp, #20
 80033f6:	2600      	movs	r6, #0
	datos[1] = MSB;
 80033f8:	7063      	strb	r3, [r4, #1]
	datos[2] = LSB;
	HAL_I2C_Master_Transmit (&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 3, 100);
 80033fa:	2364      	movs	r3, #100	; 0x64
	datos[0] = INA_CONFIGURATION_REGISTER;
 80033fc:	7026      	strb	r6, [r4, #0]
	datos[2] = LSB;
 80033fe:	70a2      	strb	r2, [r4, #2]
	HAL_I2C_Master_Transmit (&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 3, 100);
 8003400:	2180      	movs	r1, #128	; 0x80
 8003402:	0022      	movs	r2, r4
 8003404:	9300      	str	r3, [sp, #0]
 8003406:	481f      	ldr	r0, [pc, #124]	; (8003484 <INA226_Init+0xbc>)
 8003408:	3b61      	subs	r3, #97	; 0x61
 800340a:	f002 f96f 	bl	80056ec <HAL_I2C_Master_Transmit>

	ina.current_LSB = (uint64_t)maxBusMiliampers*1000000/32767; // Conseguir el mejor LSB posible en nA
 800340e:	2300      	movs	r3, #0
 8003410:	0028      	movs	r0, r5
 8003412:	0031      	movs	r1, r6
 8003414:	4a1c      	ldr	r2, [pc, #112]	; (8003488 <INA226_Init+0xc0>)
 8003416:	f7fd f8ad 	bl	8000574 <__aeabi_lmul>
 800341a:	2300      	movs	r3, #0
 800341c:	4a1b      	ldr	r2, [pc, #108]	; (800348c <INA226_Init+0xc4>)
 800341e:	f7fd f889 	bl	8000534 <__aeabi_uldivmod>
 8003422:	0005      	movs	r5, r0
 8003424:	000b      	movs	r3, r1
	ina.calibration = (uint64_t)5120000 / ((uint64_t)ina.current_LSB * (uint64_t)resMiliohmios / (uint64_t)1000);  // Compute calibration register
 8003426:	0002      	movs	r2, r0
	ina.current_LSB = (uint64_t)maxBusMiliampers*1000000/32767; // Conseguir el mejor LSB posible en nA
 8003428:	6078      	str	r0, [r7, #4]
	ina.calibration = (uint64_t)5120000 / ((uint64_t)ina.current_LSB * (uint64_t)resMiliohmios / (uint64_t)1000);  // Compute calibration register
 800342a:	0031      	movs	r1, r6
 800342c:	9803      	ldr	r0, [sp, #12]
 800342e:	f7fd f8a1 	bl	8000574 <__aeabi_lmul>
 8003432:	22fa      	movs	r2, #250	; 0xfa
 8003434:	2300      	movs	r3, #0
 8003436:	0092      	lsls	r2, r2, #2
 8003438:	f7fd f87c 	bl	8000534 <__aeabi_uldivmod>
 800343c:	000b      	movs	r3, r1
 800343e:	0002      	movs	r2, r0
 8003440:	2100      	movs	r1, #0
 8003442:	4813      	ldr	r0, [pc, #76]	; (8003490 <INA226_Init+0xc8>)
 8003444:	f7fd f876 	bl	8000534 <__aeabi_uldivmod>
 8003448:	0006      	movs	r6, r0
 800344a:	b282      	uxth	r2, r0

	//La formula para "power_LSB" es solo multiplicar "current_LSB" por 25 (pag.16 datasheet)
	//Lo resto 900 para calibrar(probar desde 600 - 1500 )
	//Lo divido entre 1000 porq el numero es muy grande y para la operacion de "INA226_Power()" el numero excede de uint32_t
	ina.power_LSB   = (uint32_t)25*(ina.current_LSB-900)/1000;
 800344c:	2019      	movs	r0, #25
 800344e:	21fa      	movs	r1, #250	; 0xfa
 8003450:	4368      	muls	r0, r5
	ina.calibration = (uint64_t)5120000 / ((uint64_t)ina.current_LSB * (uint64_t)resMiliohmios / (uint64_t)1000);  // Compute calibration register
 8003452:	807a      	strh	r2, [r7, #2]
	ina.power_LSB   = (uint32_t)25*(ina.current_LSB-900)/1000;
 8003454:	4a0f      	ldr	r2, [pc, #60]	; (8003494 <INA226_Init+0xcc>)
 8003456:	0089      	lsls	r1, r1, #2
 8003458:	1880      	adds	r0, r0, r2
 800345a:	f7fc fe71 	bl	8000140 <__udivsi3>

	MSB = (uint8_t)(ina.calibration >> 8);
	LSB = (uint8_t)(ina.calibration & 0xFF);

	datos[0] = INA_CALIBRATION_REGISTER;
 800345e:	2305      	movs	r3, #5
	MSB = (uint8_t)(ina.calibration >> 8);
 8003460:	b2b2      	uxth	r2, r6
	ina.power_LSB   = (uint32_t)25*(ina.current_LSB-900)/1000;
 8003462:	60b8      	str	r0, [r7, #8]
	datos[0] = INA_CALIBRATION_REGISTER;
 8003464:	7023      	strb	r3, [r4, #0]
	MSB = (uint8_t)(ina.calibration >> 8);
 8003466:	0a17      	lsrs	r7, r2, #8
	datos[1] = MSB;
	datos[2] = LSB;
	HAL_I2C_Master_Transmit (&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 3, 100);
 8003468:	335f      	adds	r3, #95	; 0x5f
	datos[1] = MSB;
 800346a:	7067      	strb	r7, [r4, #1]
	datos[2] = LSB;
 800346c:	70a6      	strb	r6, [r4, #2]
	HAL_I2C_Master_Transmit (&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 3, 100);
 800346e:	0022      	movs	r2, r4
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	2180      	movs	r1, #128	; 0x80
 8003474:	3b61      	subs	r3, #97	; 0x61
 8003476:	4803      	ldr	r0, [pc, #12]	; (8003484 <INA226_Init+0xbc>)
 8003478:	f002 f938 	bl	80056ec <HAL_I2C_Master_Transmit>
}
 800347c:	b007      	add	sp, #28
 800347e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003480:	2000021c 	.word	0x2000021c
 8003484:	200006bc 	.word	0x200006bc
 8003488:	000f4240 	.word	0x000f4240
 800348c:	00007fff 	.word	0x00007fff
 8003490:	004e2000 	.word	0x004e2000
 8003494:	ffffa81c 	.word	0xffffa81c

08003498 <INA226_Vshunt>:

float INA226_Vshunt(void){
 8003498:	b530      	push	{r4, r5, lr}
 800349a:	b085      	sub	sp, #20
	uint16_t dato;
	uint32_t Vshunt;
	uint8_t datos[3];

	datos[0] = INA_SHUNT_VOLTAGE_REGISTER;
 800349c:	2301      	movs	r3, #1
 800349e:	466a      	mov	r2, sp
	HAL_I2C_Master_Transmit (&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 1, 100);
 80034a0:	2564      	movs	r5, #100	; 0x64
 80034a2:	4c0f      	ldr	r4, [pc, #60]	; (80034e0 <INA226_Vshunt+0x48>)
	datos[0] = INA_SHUNT_VOLTAGE_REGISTER;
 80034a4:	7313      	strb	r3, [r2, #12]
	HAL_I2C_Master_Transmit (&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 1, 100);
 80034a6:	2180      	movs	r1, #128	; 0x80
 80034a8:	aa03      	add	r2, sp, #12
 80034aa:	0020      	movs	r0, r4
 80034ac:	9500      	str	r5, [sp, #0]
 80034ae:	f002 f91d 	bl	80056ec <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&hi2c1, INA226_I2C_ADDRESS_READ, (uint8_t*)datos, 2, 100);
 80034b2:	aa03      	add	r2, sp, #12
 80034b4:	2302      	movs	r3, #2
 80034b6:	2181      	movs	r1, #129	; 0x81
 80034b8:	0020      	movs	r0, r4
 80034ba:	9500      	str	r5, [sp, #0]
 80034bc:	f002 f9a8 	bl	8005810 <HAL_I2C_Master_Receive>
	dato = ((datos[0]<<8)|datos[1]);
	Vshunt = (uint32_t)dato * INA_SHUNT_VOLTAGE_LSB;
 80034c0:	466b      	mov	r3, sp
 80034c2:	8998      	ldrh	r0, [r3, #12]
 80034c4:	2319      	movs	r3, #25
 80034c6:	ba40      	rev16	r0, r0
 80034c8:	b280      	uxth	r0, r0
 80034ca:	4358      	muls	r0, r3
	return Vshunt/10000.0;
 80034cc:	f7ff fe0e 	bl	80030ec <__aeabi_ui2d>
 80034d0:	2200      	movs	r2, #0
 80034d2:	4b04      	ldr	r3, [pc, #16]	; (80034e4 <INA226_Vshunt+0x4c>)
 80034d4:	f7fe fb86 	bl	8001be4 <__aeabi_ddiv>
 80034d8:	f7ff fe76 	bl	80031c8 <__aeabi_d2f>
}
 80034dc:	b005      	add	sp, #20
 80034de:	bd30      	pop	{r4, r5, pc}
 80034e0:	200006bc 	.word	0x200006bc
 80034e4:	40c38800 	.word	0x40c38800

080034e8 <INA226_Vbus>:

float INA226_Vbus(void){
 80034e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint16_t dato;
	uint32_t Vbus;
	uint8_t datos[3];

	datos[0] = INA_BUS_VOLTAGE_REGISTER;
 80034ea:	2502      	movs	r5, #2
 80034ec:	466b      	mov	r3, sp
	HAL_I2C_Master_Transmit (&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 1, 100);
 80034ee:	2664      	movs	r6, #100	; 0x64
 80034f0:	4c0f      	ldr	r4, [pc, #60]	; (8003530 <INA226_Vbus+0x48>)
	datos[0] = INA_BUS_VOLTAGE_REGISTER;
 80034f2:	731d      	strb	r5, [r3, #12]
	HAL_I2C_Master_Transmit (&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 1, 100);
 80034f4:	aa03      	add	r2, sp, #12
 80034f6:	2301      	movs	r3, #1
 80034f8:	2180      	movs	r1, #128	; 0x80
 80034fa:	0020      	movs	r0, r4
 80034fc:	9600      	str	r6, [sp, #0]
 80034fe:	f002 f8f5 	bl	80056ec <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&hi2c1, INA226_I2C_ADDRESS_READ, (uint8_t*)datos, 2, 100);
 8003502:	aa03      	add	r2, sp, #12
 8003504:	002b      	movs	r3, r5
 8003506:	2181      	movs	r1, #129	; 0x81
 8003508:	0020      	movs	r0, r4
 800350a:	9600      	str	r6, [sp, #0]
 800350c:	f002 f980 	bl	8005810 <HAL_I2C_Master_Receive>
	dato = ((datos[0]<<8)|datos[1]);
	Vbus = (uint32_t)dato * INA_BUS_VOLTAGE_LSB;
 8003510:	466b      	mov	r3, sp
 8003512:	8998      	ldrh	r0, [r3, #12]
 8003514:	237d      	movs	r3, #125	; 0x7d
 8003516:	ba40      	rev16	r0, r0
 8003518:	b280      	uxth	r0, r0
 800351a:	4358      	muls	r0, r3

	return Vbus/100000.0;//Voltios;
 800351c:	f7ff fde6 	bl	80030ec <__aeabi_ui2d>
 8003520:	2200      	movs	r2, #0
 8003522:	4b04      	ldr	r3, [pc, #16]	; (8003534 <INA226_Vbus+0x4c>)
 8003524:	f7fe fb5e 	bl	8001be4 <__aeabi_ddiv>
 8003528:	f7ff fe4e 	bl	80031c8 <__aeabi_d2f>
}
 800352c:	b004      	add	sp, #16
 800352e:	bd70      	pop	{r4, r5, r6, pc}
 8003530:	200006bc 	.word	0x200006bc
 8003534:	40f86a00 	.word	0x40f86a00

08003538 <INA226_Current>:

float INA226_Current(void){
 8003538:	b530      	push	{r4, r5, lr}
 800353a:	b085      	sub	sp, #20
	uint32_t current;
	uint8_t datos[3];
	/*
	 * Cuando no hay conectada ninguna carga al INA226, el Vshunt tiene el valor de 65535
	 * */
	if(INA226_Vshunt()*10000/INA_SHUNT_VOLTAGE_LSB == 65535){
 800353c:	f7ff ffac 	bl	8003498 <INA226_Vshunt>
 8003540:	4919      	ldr	r1, [pc, #100]	; (80035a8 <INA226_Current+0x70>)
 8003542:	f7fd fc8f 	bl	8000e64 <__aeabi_fmul>
 8003546:	4919      	ldr	r1, [pc, #100]	; (80035ac <INA226_Current+0x74>)
 8003548:	f7fd fac4 	bl	8000ad4 <__aeabi_fdiv>
 800354c:	4918      	ldr	r1, [pc, #96]	; (80035b0 <INA226_Current+0x78>)
 800354e:	f7fc ffc3 	bl	80004d8 <__aeabi_fcmpeq>
 8003552:	2800      	cmp	r0, #0
 8003554:	d125      	bne.n	80035a2 <INA226_Current+0x6a>
		return 0;
	}else{
		datos[0] = INA_CURRENT_REGISTER;
 8003556:	2304      	movs	r3, #4
 8003558:	466a      	mov	r2, sp
		HAL_I2C_Master_Transmit (&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 1, 100);
 800355a:	2564      	movs	r5, #100	; 0x64
 800355c:	4c15      	ldr	r4, [pc, #84]	; (80035b4 <INA226_Current+0x7c>)
		datos[0] = INA_CURRENT_REGISTER;
 800355e:	7313      	strb	r3, [r2, #12]
		HAL_I2C_Master_Transmit (&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 1, 100);
 8003560:	2180      	movs	r1, #128	; 0x80
 8003562:	3b03      	subs	r3, #3
 8003564:	aa03      	add	r2, sp, #12
 8003566:	0020      	movs	r0, r4
 8003568:	9500      	str	r5, [sp, #0]
 800356a:	f002 f8bf 	bl	80056ec <HAL_I2C_Master_Transmit>

		HAL_I2C_Master_Receive(&hi2c1, INA226_I2C_ADDRESS_READ, (uint8_t*)datos, 2, 100);
 800356e:	2302      	movs	r3, #2
 8003570:	2181      	movs	r1, #129	; 0x81
 8003572:	aa03      	add	r2, sp, #12
 8003574:	0020      	movs	r0, r4
 8003576:	9500      	str	r5, [sp, #0]
 8003578:	f002 f94a 	bl	8005810 <HAL_I2C_Master_Receive>
		dato = ((datos[0]<<8)|datos[1]);
		current = (uint32_t)dato * (ina.current_LSB-900);
 800357c:	466b      	mov	r3, sp
 800357e:	8998      	ldrh	r0, [r3, #12]
 8003580:	4a0d      	ldr	r2, [pc, #52]	; (80035b8 <INA226_Current+0x80>)
 8003582:	ba40      	rev16	r0, r0
 8003584:	b283      	uxth	r3, r0
 8003586:	6850      	ldr	r0, [r2, #4]
 8003588:	4a0c      	ldr	r2, [pc, #48]	; (80035bc <INA226_Current+0x84>)
 800358a:	1880      	adds	r0, r0, r2
 800358c:	4358      	muls	r0, r3
		return current/1000000.0;//mA;
 800358e:	f7ff fdad 	bl	80030ec <__aeabi_ui2d>
 8003592:	2200      	movs	r2, #0
 8003594:	4b0a      	ldr	r3, [pc, #40]	; (80035c0 <INA226_Current+0x88>)
 8003596:	f7fe fb25 	bl	8001be4 <__aeabi_ddiv>
 800359a:	f7ff fe15 	bl	80031c8 <__aeabi_d2f>
	}
}
 800359e:	b005      	add	sp, #20
 80035a0:	bd30      	pop	{r4, r5, pc}
		return 0;
 80035a2:	2000      	movs	r0, #0
 80035a4:	e7fb      	b.n	800359e <INA226_Current+0x66>
 80035a6:	46c0      	nop			; (mov r8, r8)
 80035a8:	461c4000 	.word	0x461c4000
 80035ac:	41c80000 	.word	0x41c80000
 80035b0:	477fff00 	.word	0x477fff00
 80035b4:	200006bc 	.word	0x200006bc
 80035b8:	2000021c 	.word	0x2000021c
 80035bc:	fffffc7c 	.word	0xfffffc7c
 80035c0:	412e8480 	.word	0x412e8480

080035c4 <INA226_Power>:

float INA226_Power(void){
 80035c4:	b530      	push	{r4, r5, lr}
 80035c6:	b085      	sub	sp, #20
	uint16_t dato;
	uint32_t power;
	uint8_t datos[3];

	datos[0] = INA_POWER_REGISTER;
 80035c8:	466a      	mov	r2, sp
	HAL_I2C_Master_Transmit (&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 1, 100);
 80035ca:	2564      	movs	r5, #100	; 0x64
	datos[0] = INA_POWER_REGISTER;
 80035cc:	2303      	movs	r3, #3
	HAL_I2C_Master_Transmit (&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 1, 100);
 80035ce:	4c10      	ldr	r4, [pc, #64]	; (8003610 <INA226_Power+0x4c>)
	datos[0] = INA_POWER_REGISTER;
 80035d0:	7313      	strb	r3, [r2, #12]
	HAL_I2C_Master_Transmit (&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 1, 100);
 80035d2:	2180      	movs	r1, #128	; 0x80
 80035d4:	aa03      	add	r2, sp, #12
 80035d6:	0020      	movs	r0, r4
 80035d8:	9500      	str	r5, [sp, #0]
 80035da:	3b02      	subs	r3, #2
 80035dc:	f002 f886 	bl	80056ec <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&hi2c1, INA226_I2C_ADDRESS_READ, (uint8_t*)datos, 2, 100);
 80035e0:	aa03      	add	r2, sp, #12
 80035e2:	2302      	movs	r3, #2
 80035e4:	2181      	movs	r1, #129	; 0x81
 80035e6:	0020      	movs	r0, r4
 80035e8:	9500      	str	r5, [sp, #0]
 80035ea:	f002 f911 	bl	8005810 <HAL_I2C_Master_Receive>
	dato = ((datos[0]<<8)|datos[1]);
	power = (uint32_t)dato * ina.power_LSB;
 80035ee:	466b      	mov	r3, sp
 80035f0:	8998      	ldrh	r0, [r3, #12]
 80035f2:	4b08      	ldr	r3, [pc, #32]	; (8003614 <INA226_Power+0x50>)
 80035f4:	ba40      	rev16	r0, r0
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	b280      	uxth	r0, r0
 80035fa:	4358      	muls	r0, r3
	return power/1000000.0;//Watts;
 80035fc:	f7ff fd76 	bl	80030ec <__aeabi_ui2d>
 8003600:	2200      	movs	r2, #0
 8003602:	4b05      	ldr	r3, [pc, #20]	; (8003618 <INA226_Power+0x54>)
 8003604:	f7fe faee 	bl	8001be4 <__aeabi_ddiv>
 8003608:	f7ff fdde 	bl	80031c8 <__aeabi_d2f>
}
 800360c:	b005      	add	sp, #20
 800360e:	bd30      	pop	{r4, r5, pc}
 8003610:	200006bc 	.word	0x200006bc
 8003614:	2000021c 	.word	0x2000021c
 8003618:	412e8480 	.word	0x412e8480

0800361c <OLED_Write_Command_3bytes>:
	HAL_I2C_Master_Transmit (&hi2c1, SSD1306_I2C_ADDRESS, (uint8_t*)datos, 26, 100);

	OLED_Clear();
}

void OLED_Write_Command_3bytes(uint8_t byte1, uint8_t byte2, uint8_t byte3){
 800361c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t datos[4] = {CMD, byte1, byte2, byte3};
 800361e:	2300      	movs	r3, #0
 8003620:	ac03      	add	r4, sp, #12
 8003622:	7023      	strb	r3, [r4, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SSD1306_I2C_ADDRESS, (uint8_t*)datos, 4, 100);
 8003624:	3364      	adds	r3, #100	; 0x64
	uint8_t datos[4] = {CMD, byte1, byte2, byte3};
 8003626:	7060      	strb	r0, [r4, #1]
 8003628:	70a1      	strb	r1, [r4, #2]
 800362a:	70e2      	strb	r2, [r4, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SSD1306_I2C_ADDRESS, (uint8_t*)datos, 4, 100);
 800362c:	2178      	movs	r1, #120	; 0x78
 800362e:	9300      	str	r3, [sp, #0]
 8003630:	0022      	movs	r2, r4
 8003632:	3b60      	subs	r3, #96	; 0x60
 8003634:	4801      	ldr	r0, [pc, #4]	; (800363c <OLED_Write_Command_3bytes+0x20>)
 8003636:	f002 f859 	bl	80056ec <HAL_I2C_Master_Transmit>
}
 800363a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 800363c:	200006bc 	.word	0x200006bc

08003640 <OLED_Write_Data_1byte>:

void OLED_Write_Data_1byte(uint8_t byte1){
 8003640:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t datos[2] = {DAT, byte1};
 8003642:	2340      	movs	r3, #64	; 0x40
 8003644:	466a      	mov	r2, sp
 8003646:	7313      	strb	r3, [r2, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SSD1306_I2C_ADDRESS, (uint8_t*)datos, 2, 100);
 8003648:	2364      	movs	r3, #100	; 0x64
	uint8_t datos[2] = {DAT, byte1};
 800364a:	7350      	strb	r0, [r2, #13]
	HAL_I2C_Master_Transmit (&hi2c1, SSD1306_I2C_ADDRESS, (uint8_t*)datos, 2, 100);
 800364c:	2178      	movs	r1, #120	; 0x78
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	aa03      	add	r2, sp, #12
 8003652:	3b62      	subs	r3, #98	; 0x62
 8003654:	4802      	ldr	r0, [pc, #8]	; (8003660 <OLED_Write_Data_1byte+0x20>)
 8003656:	f002 f849 	bl	80056ec <HAL_I2C_Master_Transmit>
}
 800365a:	b005      	add	sp, #20
 800365c:	bd00      	pop	{pc}
 800365e:	46c0      	nop			; (mov r8, r8)
 8003660:	200006bc 	.word	0x200006bc

08003664 <OLED_Draw_Pixel>:

void OLED_Draw_Pixel(uint8_t pag_inicio, uint8_t pag_final, uint8_t col_inicio, uint16_t col_final, uint8_t pixel){
 8003664:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003666:	0015      	movs	r5, r2
 8003668:	001c      	movs	r4, r3
	uint8_t datos[2];
	OLED_Write_Command_3bytes(SSD1306_PAGEADDR,pag_inicio,pag_final);
 800366a:	000a      	movs	r2, r1
void OLED_Draw_Pixel(uint8_t pag_inicio, uint8_t pag_final, uint8_t col_inicio, uint16_t col_final, uint8_t pixel){
 800366c:	ab08      	add	r3, sp, #32
	OLED_Write_Command_3bytes(SSD1306_PAGEADDR,pag_inicio,pag_final);
 800366e:	0001      	movs	r1, r0
 8003670:	2022      	movs	r0, #34	; 0x22
void OLED_Draw_Pixel(uint8_t pag_inicio, uint8_t pag_final, uint8_t col_inicio, uint16_t col_final, uint8_t pixel){
 8003672:	781e      	ldrb	r6, [r3, #0]
	OLED_Write_Command_3bytes(SSD1306_PAGEADDR,pag_inicio,pag_final);
 8003674:	f7ff ffd2 	bl	800361c <OLED_Write_Command_3bytes>
	OLED_Write_Command_3bytes(SSD1306_COLUMNADDR,col_inicio,col_final);
 8003678:	0029      	movs	r1, r5
 800367a:	b2e2      	uxtb	r2, r4
 800367c:	2021      	movs	r0, #33	; 0x21
 800367e:	f7ff ffcd 	bl	800361c <OLED_Write_Command_3bytes>

	datos[0] = DAT;
 8003682:	466a      	mov	r2, sp
 8003684:	2340      	movs	r3, #64	; 0x40
 8003686:	7313      	strb	r3, [r2, #12]
	datos[1] = pixel;

	HAL_I2C_Master_Transmit (&hi2c1, SSD1306_I2C_ADDRESS, (uint8_t*)datos, 2, 100);
 8003688:	2364      	movs	r3, #100	; 0x64
	datos[1] = pixel;
 800368a:	7356      	strb	r6, [r2, #13]
	HAL_I2C_Master_Transmit (&hi2c1, SSD1306_I2C_ADDRESS, (uint8_t*)datos, 2, 100);
 800368c:	2178      	movs	r1, #120	; 0x78
 800368e:	9300      	str	r3, [sp, #0]
 8003690:	aa03      	add	r2, sp, #12
 8003692:	3b62      	subs	r3, #98	; 0x62
 8003694:	4801      	ldr	r0, [pc, #4]	; (800369c <OLED_Draw_Pixel+0x38>)
 8003696:	f002 f829 	bl	80056ec <HAL_I2C_Master_Transmit>
}
 800369a:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 800369c:	200006bc 	.word	0x200006bc

080036a0 <OLED_Clear>:

//Para limpiar la pantalla oled, esta funcion va desde la pag 0 hasta la pag 7
//Para la columna el datasheet menciona (en modo de direccionamiento horizontal):
//Si el puntero de la dirección de la columna alcanza la dirección final de la columna, el puntero de la dirección de la columna se restablece a la dirección de inicio de la columna y el puntero de dirección de página aumenta en 1.
//Es por eso que pongo de la columna 0 hasta la columna 1023(128columnas*8paginas)
void OLED_Clear(void){
 80036a0:	b597      	push	{r0, r1, r2, r4, r7, lr}
	uint8_t  pixel = 0;//lleno de ceros todos los pixeles
	//una pagina tiene 8pixeles de alto, entonces 128x8=1024, hay 1024 pixeles por pagina(cantidad de datos a enviar para limpiar la pantalla por cada pagina)
	//128x32: DAT +  512datos = 513
	//128x64: DAT + 1024datos = 1025
	//Es por eso que al tamaño de los datos[] a enviar le aumento 2
	uint8_t datos[col_final+2];
 80036a2:	4b10      	ldr	r3, [pc, #64]	; (80036e4 <OLED_Clear+0x44>)
void OLED_Clear(void){
 80036a4:	af02      	add	r7, sp, #8

	OLED_Write_Command_3bytes(SSD1306_PAGEADDR,pag_inicio,pag_final);
 80036a6:	2207      	movs	r2, #7
	uint8_t datos[col_final+2];
 80036a8:	449d      	add	sp, r3
	OLED_Write_Command_3bytes(SSD1306_PAGEADDR,pag_inicio,pag_final);
 80036aa:	2100      	movs	r1, #0
 80036ac:	2022      	movs	r0, #34	; 0x22
 80036ae:	f7ff ffb5 	bl	800361c <OLED_Write_Command_3bytes>
	OLED_Write_Command_3bytes(SSD1306_COLUMNADDR,col_inicio,col_final);
 80036b2:	22ff      	movs	r2, #255	; 0xff
 80036b4:	2100      	movs	r1, #0
 80036b6:	2021      	movs	r0, #33	; 0x21
 80036b8:	f7ff ffb0 	bl	800361c <OLED_Write_Command_3bytes>

	datos[0] = DAT;

	for(int j=col_inicio;j<=col_final;j++){
		datos[j+1] = pixel;//dato[1], dato[2], dato[3], .... , dato[1023]
 80036bc:	2009      	movs	r0, #9
 80036be:	2280      	movs	r2, #128	; 0x80
	datos[0] = DAT;
 80036c0:	2340      	movs	r3, #64	; 0x40
	uint8_t datos[col_final+2];
 80036c2:	ac02      	add	r4, sp, #8
		datos[j+1] = pixel;//dato[1], dato[2], dato[3], .... , dato[1023]
 80036c4:	2100      	movs	r1, #0
 80036c6:	4468      	add	r0, sp
 80036c8:	00d2      	lsls	r2, r2, #3
	datos[0] = DAT;
 80036ca:	7023      	strb	r3, [r4, #0]
		datos[j+1] = pixel;//dato[1], dato[2], dato[3], .... , dato[1023]
 80036cc:	f002 fe6b 	bl	80063a6 <memset>
		//HAL_Delay(10); //descomentar para probar la libreria y ver la impresion de pixeles de manera lenta
	}

	HAL_I2C_Master_Transmit (&hi2c1, SSD1306_I2C_ADDRESS, (uint8_t*)datos, col_final+2, 100);
 80036d0:	2364      	movs	r3, #100	; 0x64
 80036d2:	0022      	movs	r2, r4
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	2178      	movs	r1, #120	; 0x78
 80036d8:	4b03      	ldr	r3, [pc, #12]	; (80036e8 <OLED_Clear+0x48>)
 80036da:	4804      	ldr	r0, [pc, #16]	; (80036ec <OLED_Clear+0x4c>)
 80036dc:	f002 f806 	bl	80056ec <HAL_I2C_Master_Transmit>
}
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd91      	pop	{r0, r4, r7, pc}
 80036e4:	fffffbf8 	.word	0xfffffbf8
 80036e8:	00000401 	.word	0x00000401
 80036ec:	200006bc 	.word	0x200006bc

080036f0 <OLED_Init>:
	datos[0]  = CMD;
 80036f0:	2300      	movs	r3, #0
	datos[1]  = SSD1306_DISPLAYOFF;//0xAE
 80036f2:	22ae      	movs	r2, #174	; 0xae
	datos[9]  = SSD1306_CHARGEPUMP;		   //0x8D
 80036f4:	218d      	movs	r1, #141	; 0x8d
void OLED_Init(void){
 80036f6:	b510      	push	{r4, lr}
 80036f8:	b08a      	sub	sp, #40	; 0x28
	datos[0]  = CMD;
 80036fa:	ac03      	add	r4, sp, #12
 80036fc:	7023      	strb	r3, [r4, #0]
	datos[7]  = 0x00;						   //0x00
 80036fe:	71e3      	strb	r3, [r4, #7]
	datos[12] = HORIZONTAL_ADDRESSING_MODE;   //Modo de direccionamiento horizontal
 8003700:	7323      	strb	r3, [r4, #12]
	datos[13] = (SSD1306_SEGREMAP | COLUMN_ADDRESS_0_MAPPED_TO_SEG127);	   //0xA1
 8003702:	33a1      	adds	r3, #161	; 0xa1
 8003704:	7363      	strb	r3, [r4, #13]
	datos[14] = (SET_COM_OUTPUT_SCAN_DIRECTION | SCAN_FROM_COM63_TO_0);	   //0xC8
 8003706:	3327      	adds	r3, #39	; 0x27
 8003708:	73a3      	strb	r3, [r4, #14]
	datos[15] = SSD1306_SETCOMPINS;		   //0xDA
 800370a:	3312      	adds	r3, #18
 800370c:	73e3      	strb	r3, [r4, #15]
		case 64: datos[16] = 0x12;break;
 800370e:	3bc8      	subs	r3, #200	; 0xc8
 8003710:	7423      	strb	r3, [r4, #16]
	datos[17] = SSD1306_SETCONTRAST;		   //0x81
 8003712:	336f      	adds	r3, #111	; 0x6f
 8003714:	7463      	strb	r3, [r4, #17]
	datos[18] = 0xCF;						   //0xCF
 8003716:	334e      	adds	r3, #78	; 0x4e
	datos[1]  = SSD1306_DISPLAYOFF;//0xAE
 8003718:	7062      	strb	r2, [r4, #1]
	datos[18] = 0xCF;						   //0xCF
 800371a:	74a3      	strb	r3, [r4, #18]
	datos[2]  = SSD1306_SETDISPLAYCLOCKDIV;   //0xD5;
 800371c:	3227      	adds	r2, #39	; 0x27
	datos[19] = SSD1306_SETPRECHARGE;         //0xD9
 800371e:	330a      	adds	r3, #10
	datos[2]  = SSD1306_SETDISPLAYCLOCKDIV;   //0xD5;
 8003720:	70a2      	strb	r2, [r4, #2]
	datos[19] = SSD1306_SETPRECHARGE;         //0xD9
 8003722:	74e3      	strb	r3, [r4, #19]
	datos[3]  = 0x80;//0x80
 8003724:	3a55      	subs	r2, #85	; 0x55
	datos[20] = 0xF1;						   //0xF1
 8003726:	3318      	adds	r3, #24
	datos[3]  = 0x80;//0x80
 8003728:	70e2      	strb	r2, [r4, #3]
	datos[20] = 0xF1;						   //0xF1
 800372a:	7523      	strb	r3, [r4, #20]
	datos[4]  = SSD1306_SETMULTIPLEX;//0xA8
 800372c:	3228      	adds	r2, #40	; 0x28
	datos[21] = SET_VCOMH_LEVEL;			   //0xDB
 800372e:	3b16      	subs	r3, #22
	datos[4]  = SSD1306_SETMULTIPLEX;//0xA8
 8003730:	7122      	strb	r2, [r4, #4]
	datos[21] = SET_VCOMH_LEVEL;			   //0xDB
 8003732:	7563      	strb	r3, [r4, #21]
	datos[5]  = (SSD1306_LCDHEIGHT-1);		   //0x3F  ----> 64 (0-63) valores 63=0x3F
 8003734:	3a69      	subs	r2, #105	; 0x69
	datos[23] = SET_ENTIRE_DISPLAY_ON;        //0xA4
 8003736:	3b37      	subs	r3, #55	; 0x37
	datos[5]  = (SSD1306_LCDHEIGHT-1);		   //0x3F  ----> 64 (0-63) valores 63=0x3F
 8003738:	7162      	strb	r2, [r4, #5]
	datos[9]  = SSD1306_CHARGEPUMP;		   //0x8D
 800373a:	7261      	strb	r1, [r4, #9]
	datos[23] = SET_ENTIRE_DISPLAY_ON;        //0xA4
 800373c:	75e3      	strb	r3, [r4, #23]
	datos[6]  = SSD1306_SETDISPLAYOFFSET;     //0xD3
 800373e:	3294      	adds	r2, #148	; 0x94
	datos[10] = 0x14;						   //0x14 ----> VCC generado por el circuito interno de step up que eleva el voltaje de alimentacion a 7.5V para los pixeles del oled
 8003740:	3979      	subs	r1, #121	; 0x79
	datos[24] = SSD1306_NORMALDISPLAY;	       //0xA6
 8003742:	3302      	adds	r3, #2
	datos[6]  = SSD1306_SETDISPLAYOFFSET;     //0xD3
 8003744:	71a2      	strb	r2, [r4, #6]
	datos[10] = 0x14;						   //0x14 ----> VCC generado por el circuito interno de step up que eleva el voltaje de alimentacion a 7.5V para los pixeles del oled
 8003746:	72a1      	strb	r1, [r4, #10]
	datos[8]  = (SSD1306_SETSTARTLINE | 0x00);  //0x40 ----> empezamos en la linea cero
 8003748:	3a93      	subs	r2, #147	; 0x93
	datos[11] = SSD1306_MEMORYMODE;		   //0x20
 800374a:	310c      	adds	r1, #12
	datos[24] = SSD1306_NORMALDISPLAY;	       //0xA6
 800374c:	7623      	strb	r3, [r4, #24]
	HAL_Delay(100);
 800374e:	2064      	movs	r0, #100	; 0x64
	datos[25] = SSD1306_DISPLAYON;			   //0xAF -----> enciendo el display
 8003750:	3309      	adds	r3, #9
	datos[8]  = (SSD1306_SETSTARTLINE | 0x00);  //0x40 ----> empezamos en la linea cero
 8003752:	7222      	strb	r2, [r4, #8]
	datos[11] = SSD1306_MEMORYMODE;		   //0x20
 8003754:	72e1      	strb	r1, [r4, #11]
	datos[22] = 0x40;						   //0x40
 8003756:	75a2      	strb	r2, [r4, #22]
	datos[25] = SSD1306_DISPLAYON;			   //0xAF -----> enciendo el display
 8003758:	7663      	strb	r3, [r4, #25]
	HAL_Delay(100);
 800375a:	f001 f98f 	bl	8004a7c <HAL_Delay>
	HAL_I2C_Master_Transmit (&hi2c1, SSD1306_I2C_ADDRESS, (uint8_t*)datos, 26, 100);
 800375e:	2364      	movs	r3, #100	; 0x64
 8003760:	0022      	movs	r2, r4
 8003762:	2178      	movs	r1, #120	; 0x78
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	4804      	ldr	r0, [pc, #16]	; (8003778 <OLED_Init+0x88>)
 8003768:	3b4a      	subs	r3, #74	; 0x4a
 800376a:	f001 ffbf 	bl	80056ec <HAL_I2C_Master_Transmit>
	OLED_Clear();
 800376e:	f7ff ff97 	bl	80036a0 <OLED_Clear>
}
 8003772:	b00a      	add	sp, #40	; 0x28
 8003774:	bd10      	pop	{r4, pc}
 8003776:	46c0      	nop			; (mov r8, r8)
 8003778:	200006bc 	.word	0x200006bc

0800377c <OLED_Draw_8_Pixel>:

void OLED_Draw_8_Pixel(uint8_t pag_inicio, uint8_t col_inicio, uint8_t pixel_8bits){
 800377c:	b570      	push	{r4, r5, r6, lr}
 800377e:	000c      	movs	r4, r1
 8003780:	0015      	movs	r5, r2
	OLED_Write_Command_3bytes(SSD1306_PAGEADDR,pag_inicio,pag_inicio);
 8003782:	0001      	movs	r1, r0
 8003784:	0002      	movs	r2, r0
 8003786:	2022      	movs	r0, #34	; 0x22
 8003788:	f7ff ff48 	bl	800361c <OLED_Write_Command_3bytes>
	OLED_Write_Command_3bytes(SSD1306_COLUMNADDR,col_inicio,col_inicio);
 800378c:	0022      	movs	r2, r4
 800378e:	0021      	movs	r1, r4
 8003790:	2021      	movs	r0, #33	; 0x21
 8003792:	f7ff ff43 	bl	800361c <OLED_Write_Command_3bytes>
	OLED_Write_Data_1byte(pixel_8bits);
 8003796:	0028      	movs	r0, r5
 8003798:	f7ff ff52 	bl	8003640 <OLED_Write_Data_1byte>
}
 800379c:	bd70      	pop	{r4, r5, r6, pc}
	...

080037a0 <OLED_Print_Letra>:

void OLED_Print_Letra(uint8_t pag, uint8_t col, uint8_t font_size, char letra){ //pagina(0,7)  columna(0-127)    letra
 80037a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t pos;     //variable para almacenar la posicion recuperada de la matriz o arreglo
	letra = letra-32; //resto menos 32 para tener el codigo ASCCI
 80037a2:	3b20      	subs	r3, #32
void OLED_Print_Letra(uint8_t pag, uint8_t col, uint8_t font_size, char letra){ //pagina(0,7)  columna(0-127)    letra
 80037a4:	0007      	movs	r7, r0
 80037a6:	000c      	movs	r4, r1
 80037a8:	b087      	sub	sp, #28
	letra = letra-32; //resto menos 32 para tener el codigo ASCCI
 80037aa:	b2dd      	uxtb	r5, r3

	switch(font_size){
 80037ac:	2a02      	cmp	r2, #2
 80037ae:	d014      	beq.n	80037da <OLED_Print_Letra+0x3a>
 80037b0:	2a03      	cmp	r2, #3
 80037b2:	d037      	beq.n	8003824 <OLED_Print_Letra+0x84>
 80037b4:	2a01      	cmp	r2, #1
 80037b6:	d104      	bne.n	80037c2 <OLED_Print_Letra+0x22>
		case 1:
				pos = letra * FONT_1_WIDTH;  //me ubico en su array correcto multiplicando por 6
 80037b8:	2306      	movs	r3, #6
 80037ba:	435d      	muls	r5, r3
				for(int i=col; i<col+FONT_1_WIDTH; i++) {
 80037bc:	18ee      	adds	r6, r5, r3
 80037be:	42b5      	cmp	r5, r6
 80037c0:	d101      	bne.n	80037c6 <OLED_Print_Letra+0x26>
			OLED_Draw_8_Pixel(pag+2,i,FONT_3[pos3]);
			pos3+=3;
		}
		break;
    }
}
 80037c2:	b007      	add	sp, #28
 80037c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
					OLED_Draw_8_Pixel(pag,i,FONT_1[pos]);
 80037c6:	4b39      	ldr	r3, [pc, #228]	; (80038ac <OLED_Print_Letra+0x10c>)
 80037c8:	b2e1      	uxtb	r1, r4
 80037ca:	5d5a      	ldrb	r2, [r3, r5]
 80037cc:	0038      	movs	r0, r7
					pos++;
 80037ce:	3501      	adds	r5, #1
					OLED_Draw_8_Pixel(pag,i,FONT_1[pos]);
 80037d0:	f7ff ffd4 	bl	800377c <OLED_Draw_8_Pixel>
					pos++;
 80037d4:	b2ad      	uxth	r5, r5
				for(int i=col; i<col+FONT_1_WIDTH; i++) {
 80037d6:	3401      	adds	r4, #1
 80037d8:	e7f1      	b.n	80037be <OLED_Print_Letra+0x1e>
				pos = letra * (FONT_2_WIDTH*2);  //me ubico en su array correcto multiplico por 2 ya que la altura sera de 16pixeles utilizando 8pixles por pagina y en total usara 2 paginas
 80037da:	2312      	movs	r3, #18
 80037dc:	436b      	muls	r3, r5
 80037de:	001d      	movs	r5, r3
 80037e0:	001e      	movs	r6, r3
 80037e2:	9302      	str	r3, [sp, #8]
				for(int i=col; i<col+FONT_2_WIDTH; i++) {       //9
 80037e4:	3509      	adds	r5, #9
 80037e6:	9101      	str	r1, [sp, #4]
 80037e8:	42ae      	cmp	r6, r5
 80037ea:	d10e      	bne.n	800380a <OLED_Print_Letra+0x6a>
 80037ec:	9e02      	ldr	r6, [sp, #8]
 80037ee:	3612      	adds	r6, #18
				for(int i=col; i<col+FONT_2_WIDTH; i++) {      //9
 80037f0:	42b5      	cmp	r5, r6
 80037f2:	d0e6      	beq.n	80037c2 <OLED_Print_Letra+0x22>
					OLED_Draw_8_Pixel(pag+1,i,FONT_2[pos]);
 80037f4:	4b2e      	ldr	r3, [pc, #184]	; (80038b0 <OLED_Print_Letra+0x110>)
 80037f6:	1c78      	adds	r0, r7, #1
 80037f8:	5d5a      	ldrb	r2, [r3, r5]
 80037fa:	b2e1      	uxtb	r1, r4
 80037fc:	b2c0      	uxtb	r0, r0
					pos++;
 80037fe:	3501      	adds	r5, #1
					OLED_Draw_8_Pixel(pag+1,i,FONT_2[pos]);
 8003800:	f7ff ffbc 	bl	800377c <OLED_Draw_8_Pixel>
					pos++;
 8003804:	b2ad      	uxth	r5, r5
				for(int i=col; i<col+FONT_2_WIDTH; i++) {      //9
 8003806:	3401      	adds	r4, #1
 8003808:	e7f2      	b.n	80037f0 <OLED_Print_Letra+0x50>
					OLED_Draw_8_Pixel(pag,i,FONT_2[pos]);
 800380a:	4b29      	ldr	r3, [pc, #164]	; (80038b0 <OLED_Print_Letra+0x110>)
 800380c:	0038      	movs	r0, r7
 800380e:	5d9a      	ldrb	r2, [r3, r6]
 8003810:	466b      	mov	r3, sp
 8003812:	7919      	ldrb	r1, [r3, #4]
 8003814:	f7ff ffb2 	bl	800377c <OLED_Draw_8_Pixel>
				for(int i=col; i<col+FONT_2_WIDTH; i++) {       //9
 8003818:	9b01      	ldr	r3, [sp, #4]
					pos++;
 800381a:	3601      	adds	r6, #1
				for(int i=col; i<col+FONT_2_WIDTH; i++) {       //9
 800381c:	3301      	adds	r3, #1
					pos++;
 800381e:	b2b6      	uxth	r6, r6
				for(int i=col; i<col+FONT_2_WIDTH; i++) {       //9
 8003820:	9301      	str	r3, [sp, #4]
 8003822:	e7e1      	b.n	80037e8 <OLED_Print_Letra+0x48>
		pos = letra * (FONT_3_WIDTH*3);  //me ubico en su array correcto multiplico por 2 ya que la altura sera de 16pixeles utilizando 8pixles por pagina y en total usara 2 paginas
 8003824:	233c      	movs	r3, #60	; 0x3c
 8003826:	435d      	muls	r5, r3
 8003828:	002e      	movs	r6, r5
		uint16_t pos2 = (letra * (FONT_3_WIDTH*3))+1;
 800382a:	1c6b      	adds	r3, r5, #1
 800382c:	9301      	str	r3, [sp, #4]
		uint16_t pos3 = (letra * (FONT_3_WIDTH*3))+2;
 800382e:	1cab      	adds	r3, r5, #2
 8003830:	9302      	str	r3, [sp, #8]
		for(int i=col; i<col+FONT_3_WIDTH; i++) {
 8003832:	333a      	adds	r3, #58	; 0x3a
 8003834:	9104      	str	r1, [sp, #16]
 8003836:	9305      	str	r3, [sp, #20]
 8003838:	9103      	str	r1, [sp, #12]
 800383a:	9b05      	ldr	r3, [sp, #20]
 800383c:	429e      	cmp	r6, r3
 800383e:	d119      	bne.n	8003874 <OLED_Print_Letra+0xd4>
 8003840:	002e      	movs	r6, r5
 8003842:	363d      	adds	r6, #61	; 0x3d
		for(int i=col; i<col+FONT_3_WIDTH; i++) {
 8003844:	9b01      	ldr	r3, [sp, #4]
 8003846:	42b3      	cmp	r3, r6
 8003848:	d121      	bne.n	800388e <OLED_Print_Letra+0xee>
 800384a:	353e      	adds	r5, #62	; 0x3e
		for(int i=col; i<col+FONT_3_WIDTH; i++) {
 800384c:	9b02      	ldr	r3, [sp, #8]
 800384e:	42ab      	cmp	r3, r5
 8003850:	d0b7      	beq.n	80037c2 <OLED_Print_Letra+0x22>
			OLED_Draw_8_Pixel(pag+2,i,FONT_3[pos3]);
 8003852:	4b18      	ldr	r3, [pc, #96]	; (80038b4 <OLED_Print_Letra+0x114>)
 8003854:	9a02      	ldr	r2, [sp, #8]
 8003856:	1cb8      	adds	r0, r7, #2
 8003858:	5c9a      	ldrb	r2, [r3, r2]
 800385a:	466b      	mov	r3, sp
 800385c:	b2c0      	uxtb	r0, r0
 800385e:	7c19      	ldrb	r1, [r3, #16]
 8003860:	f7ff ff8c 	bl	800377c <OLED_Draw_8_Pixel>
			pos3+=3;
 8003864:	9b02      	ldr	r3, [sp, #8]
 8003866:	3303      	adds	r3, #3
 8003868:	b29b      	uxth	r3, r3
 800386a:	9302      	str	r3, [sp, #8]
		for(int i=col; i<col+FONT_3_WIDTH; i++) {
 800386c:	9b04      	ldr	r3, [sp, #16]
 800386e:	3301      	adds	r3, #1
 8003870:	9304      	str	r3, [sp, #16]
 8003872:	e7eb      	b.n	800384c <OLED_Print_Letra+0xac>
			OLED_Draw_8_Pixel(pag,i,FONT_3[pos]);
 8003874:	4b0f      	ldr	r3, [pc, #60]	; (80038b4 <OLED_Print_Letra+0x114>)
 8003876:	0038      	movs	r0, r7
 8003878:	5d9a      	ldrb	r2, [r3, r6]
 800387a:	466b      	mov	r3, sp
 800387c:	7b19      	ldrb	r1, [r3, #12]
 800387e:	f7ff ff7d 	bl	800377c <OLED_Draw_8_Pixel>
		for(int i=col; i<col+FONT_3_WIDTH; i++) {
 8003882:	9b03      	ldr	r3, [sp, #12]
			pos+=3;
 8003884:	3603      	adds	r6, #3
		for(int i=col; i<col+FONT_3_WIDTH; i++) {
 8003886:	3301      	adds	r3, #1
			pos+=3;
 8003888:	b2b6      	uxth	r6, r6
		for(int i=col; i<col+FONT_3_WIDTH; i++) {
 800388a:	9303      	str	r3, [sp, #12]
 800388c:	e7d5      	b.n	800383a <OLED_Print_Letra+0x9a>
			OLED_Draw_8_Pixel(pag+1,i,FONT_3[pos2]);
 800388e:	4b09      	ldr	r3, [pc, #36]	; (80038b4 <OLED_Print_Letra+0x114>)
 8003890:	9a01      	ldr	r2, [sp, #4]
 8003892:	1c78      	adds	r0, r7, #1
 8003894:	5c9a      	ldrb	r2, [r3, r2]
 8003896:	b2e1      	uxtb	r1, r4
 8003898:	b2c0      	uxtb	r0, r0
 800389a:	f7ff ff6f 	bl	800377c <OLED_Draw_8_Pixel>
			pos2+=3;
 800389e:	9b01      	ldr	r3, [sp, #4]
		for(int i=col; i<col+FONT_3_WIDTH; i++) {
 80038a0:	3401      	adds	r4, #1
			pos2+=3;
 80038a2:	3303      	adds	r3, #3
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	9301      	str	r3, [sp, #4]
		for(int i=col; i<col+FONT_3_WIDTH; i++) {
 80038a8:	e7cc      	b.n	8003844 <OLED_Print_Letra+0xa4>
 80038aa:	46c0      	nop			; (mov r8, r8)
 80038ac:	08009438 	.word	0x08009438
 80038b0:	08009660 	.word	0x08009660
 80038b4:	08009d0e 	.word	0x08009d0e

080038b8 <OLED_Print_Text>:


void OLED_Print_Text(uint8_t pag, uint8_t col, uint8_t font_size, char *texto){
 80038b8:	b570      	push	{r4, r5, r6, lr}
 80038ba:	0006      	movs	r6, r0
 80038bc:	000c      	movs	r4, r1
 80038be:	001d      	movs	r5, r3

	switch(font_size){
 80038c0:	2a02      	cmp	r2, #2
 80038c2:	d018      	beq.n	80038f6 <OLED_Print_Text+0x3e>
 80038c4:	2a03      	cmp	r2, #3
 80038c6:	d022      	beq.n	800390e <OLED_Print_Text+0x56>
 80038c8:	2a01      	cmp	r2, #1
 80038ca:	d102      	bne.n	80038d2 <OLED_Print_Text+0x1a>
		case 1:
				while(*texto != '\0'){
 80038cc:	782b      	ldrb	r3, [r5, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d100      	bne.n	80038d4 <OLED_Print_Text+0x1c>
					col=col+FONT_3_WIDTH; //aumento la posicion de la columna 9/11
		}
		break;
		///////////////////////////////////////////////////////////////////////////
	}
}
 80038d2:	bd70      	pop	{r4, r5, r6, pc}
					OLED_Print_Letra(pag,col,1,*texto++);
 80038d4:	0021      	movs	r1, r4
 80038d6:	2201      	movs	r2, #1
 80038d8:	0030      	movs	r0, r6
					col=col+FONT_1_WIDTH; //aumento la posicion de la columna
 80038da:	3406      	adds	r4, #6
					OLED_Print_Letra(pag,col,1,*texto++);
 80038dc:	f7ff ff60 	bl	80037a0 <OLED_Print_Letra>
 80038e0:	3501      	adds	r5, #1
					col=col+FONT_1_WIDTH; //aumento la posicion de la columna
 80038e2:	b2e4      	uxtb	r4, r4
 80038e4:	e7f2      	b.n	80038cc <OLED_Print_Text+0x14>
					OLED_Print_Letra(pag,col,2,*texto++);
 80038e6:	0021      	movs	r1, r4
 80038e8:	2202      	movs	r2, #2
 80038ea:	0030      	movs	r0, r6
 80038ec:	f7ff ff58 	bl	80037a0 <OLED_Print_Letra>
					col=col+FONT_2_WIDTH; //aumento la posicion de la columna 9/11
 80038f0:	3409      	adds	r4, #9
					OLED_Print_Letra(pag,col,2,*texto++);
 80038f2:	3501      	adds	r5, #1
					col=col+FONT_2_WIDTH; //aumento la posicion de la columna 9/11
 80038f4:	b2e4      	uxtb	r4, r4
				while(*texto != '\0'){
 80038f6:	782b      	ldrb	r3, [r5, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1f4      	bne.n	80038e6 <OLED_Print_Text+0x2e>
 80038fc:	e7e9      	b.n	80038d2 <OLED_Print_Text+0x1a>
					OLED_Print_Letra(pag,col,3,*texto++);
 80038fe:	0021      	movs	r1, r4
 8003900:	2203      	movs	r2, #3
 8003902:	0030      	movs	r0, r6
 8003904:	f7ff ff4c 	bl	80037a0 <OLED_Print_Letra>
					col=col+FONT_3_WIDTH; //aumento la posicion de la columna 9/11
 8003908:	3414      	adds	r4, #20
					OLED_Print_Letra(pag,col,3,*texto++);
 800390a:	3501      	adds	r5, #1
					col=col+FONT_3_WIDTH; //aumento la posicion de la columna 9/11
 800390c:	b2e4      	uxtb	r4, r4
				while(*texto != '\0'){
 800390e:	782b      	ldrb	r3, [r5, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1f4      	bne.n	80038fe <OLED_Print_Text+0x46>
 8003914:	e7dd      	b.n	80038d2 <OLED_Print_Text+0x1a>

08003916 <OLED_Imagen>:

void OLED_Imagen(const unsigned char imagen[]){
 8003916:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003918:	0007      	movs	r7, r0

	int k=0;

	for(int i=0;i<8;i++){
 800391a:	2500      	movs	r5, #0
		for(int j=0;j<128;j++){
 800391c:	2400      	movs	r4, #0
 800391e:	01ee      	lsls	r6, r5, #7
 8003920:	19be      	adds	r6, r7, r6
			OLED_Draw_Pixel(i,i, j,j, imagen[k]);
 8003922:	5d31      	ldrb	r1, [r6, r4]
 8003924:	b2e8      	uxtb	r0, r5
 8003926:	b2a3      	uxth	r3, r4
 8003928:	b2e2      	uxtb	r2, r4
 800392a:	9100      	str	r1, [sp, #0]
		for(int j=0;j<128;j++){
 800392c:	3401      	adds	r4, #1
			OLED_Draw_Pixel(i,i, j,j, imagen[k]);
 800392e:	0001      	movs	r1, r0
 8003930:	f7ff fe98 	bl	8003664 <OLED_Draw_Pixel>
		for(int j=0;j<128;j++){
 8003934:	2c80      	cmp	r4, #128	; 0x80
 8003936:	d1f4      	bne.n	8003922 <OLED_Imagen+0xc>
	for(int i=0;i<8;i++){
 8003938:	3501      	adds	r5, #1
 800393a:	2d08      	cmp	r5, #8
 800393c:	d1ee      	bne.n	800391c <OLED_Imagen+0x6>
			k++;
		}
	}
}
 800393e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08003940 <OLED_Imagen_Small>:

void OLED_Imagen_Small(uint8_t pag, uint8_t col, const unsigned char imagen[], uint8_t size_x, uint8_t size_y){
 8003940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003942:	b087      	sub	sp, #28
 8003944:	9305      	str	r3, [sp, #20]
 8003946:	ab0c      	add	r3, sp, #48	; 0x30
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	000d      	movs	r5, r1
//			OLED_Draw_Pixel(pag,size_y/8, col,col+size_x, imagen[k]);
//			k++;
//		}
//	}

	for(int i=pag;i<pag+size_y/8;i++){
 800394c:	08db      	lsrs	r3, r3, #3
 800394e:	181b      	adds	r3, r3, r0
 8003950:	9303      	str	r3, [sp, #12]
	int k=0;
 8003952:	2300      	movs	r3, #0
	for(int i=pag;i<pag+size_y/8;i++){
 8003954:	0004      	movs	r4, r0
void OLED_Imagen_Small(uint8_t pag, uint8_t col, const unsigned char imagen[], uint8_t size_x, uint8_t size_y){
 8003956:	9204      	str	r2, [sp, #16]
	int k=0;
 8003958:	9302      	str	r3, [sp, #8]
	for(int i=pag;i<pag+size_y/8;i++){
 800395a:	9b03      	ldr	r3, [sp, #12]
 800395c:	42a3      	cmp	r3, r4
 800395e:	dc01      	bgt.n	8003964 <OLED_Imagen_Small+0x24>
		for(int j=col;j<col+size_x;j++){
			OLED_Draw_Pixel(i,i, j,j, imagen[k]);
			k++;
		}
	}
}
 8003960:	b007      	add	sp, #28
 8003962:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for(int j=col;j<col+size_x;j++){
 8003964:	002e      	movs	r6, r5
 8003966:	9b04      	ldr	r3, [sp, #16]
 8003968:	9a02      	ldr	r2, [sp, #8]
 800396a:	189f      	adds	r7, r3, r2
 800396c:	9b05      	ldr	r3, [sp, #20]
 800396e:	195b      	adds	r3, r3, r5
 8003970:	42b3      	cmp	r3, r6
 8003972:	dc05      	bgt.n	8003980 <OLED_Imagen_Small+0x40>
 8003974:	9a02      	ldr	r2, [sp, #8]
 8003976:	1b5b      	subs	r3, r3, r5
 8003978:	18d3      	adds	r3, r2, r3
 800397a:	9302      	str	r3, [sp, #8]
	for(int i=pag;i<pag+size_y/8;i++){
 800397c:	3401      	adds	r4, #1
 800397e:	e7ec      	b.n	800395a <OLED_Imagen_Small+0x1a>
			OLED_Draw_Pixel(i,i, j,j, imagen[k]);
 8003980:	7839      	ldrb	r1, [r7, #0]
 8003982:	b2e0      	uxtb	r0, r4
 8003984:	b2b3      	uxth	r3, r6
 8003986:	b2f2      	uxtb	r2, r6
 8003988:	9100      	str	r1, [sp, #0]
 800398a:	0001      	movs	r1, r0
 800398c:	f7ff fe6a 	bl	8003664 <OLED_Draw_Pixel>
		for(int j=col;j<col+size_x;j++){
 8003990:	3601      	adds	r6, #1
 8003992:	3701      	adds	r7, #1
 8003994:	e7ea      	b.n	800396c <OLED_Imagen_Small+0x2c>
	...

08003998 <ee_write.part.0>:
#endif
  }
  return true;
}
//##########################################################################################################
bool ee_write(uint32_t startVirtualAddress, uint32_t len, uint8_t *data)
 8003998:	b5f0      	push	{r4, r5, r6, r7, lr}
 800399a:	0005      	movs	r5, r0
 800399c:	0014      	movs	r4, r2
 800399e:	b093      	sub	sp, #76	; 0x4c
 80039a0:	9103      	str	r1, [sp, #12]
      return false;
    }
  }	
#endif
#ifdef FLASH_TYPEPROGRAM_HALFWORD
  for (uint32_t i = 0; i < len ; i+=2)
 80039a2:	002e      	movs	r6, r5
  HAL_FLASH_Unlock();
 80039a4:	f001 fb10 	bl	8004fc8 <HAL_FLASH_Unlock>
  for (uint32_t i = 0; i < len ; i+=2)
 80039a8:	0027      	movs	r7, r4
 80039aa:	9a03      	ldr	r2, [sp, #12]
 80039ac:	1b73      	subs	r3, r6, r5
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d808      	bhi.n	80039c4 <ee_write.part.0+0x2c>
 80039b2:	002e      	movs	r6, r5
      return false;
    }
  }	
#endif
#ifdef FLASH_TYPEPROGRAM_DOUBLEWORD
  for (uint32_t i = 0; i < len; i += 8)
 80039b4:	9a03      	ldr	r2, [sp, #12]
 80039b6:	1b73      	subs	r3, r6, r5
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d816      	bhi.n	80039ea <ee_write.part.0+0x52>
      HAL_FLASH_Lock();
      return false;
    }
  }
#endif
  HAL_FLASH_Lock();
 80039bc:	f001 fb18 	bl	8004ff0 <HAL_FLASH_Lock>
  return true;
 80039c0:	2001      	movs	r0, #1
 80039c2:	e010      	b.n	80039e6 <ee_write.part.0+0x4e>
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, ((i + startVirtualAddress)) + _EE_ADDR_INUSE, (uint64_t)(data[i] | (data[i+1] << 8))) != HAL_OK)
 80039c4:	787a      	ldrb	r2, [r7, #1]
 80039c6:	783b      	ldrb	r3, [r7, #0]
 80039c8:	0212      	lsls	r2, r2, #8
 80039ca:	431a      	orrs	r2, r3
 80039cc:	4b2d      	ldr	r3, [pc, #180]	; (8003a84 <ee_write.part.0+0xec>)
 80039ce:	2001      	movs	r0, #1
 80039d0:	18f1      	adds	r1, r6, r3
 80039d2:	2300      	movs	r3, #0
 80039d4:	f001 fb40 	bl	8005058 <HAL_FLASH_Program>
 80039d8:	3702      	adds	r7, #2
 80039da:	3602      	adds	r6, #2
 80039dc:	2800      	cmp	r0, #0
 80039de:	d0e4      	beq.n	80039aa <ee_write.part.0+0x12>
      HAL_FLASH_Lock();
 80039e0:	f001 fb06 	bl	8004ff0 <HAL_FLASH_Lock>
      return false;
 80039e4:	2000      	movs	r0, #0
}
 80039e6:	b013      	add	sp, #76	; 0x4c
 80039e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint64_t data64 = data[i];
 80039ea:	2200      	movs	r2, #0
 80039ec:	7823      	ldrb	r3, [r4, #0]
    data64 += data[i + 2] * 0x10000;
 80039ee:	9207      	str	r2, [sp, #28]
    uint64_t data64 = data[i];
 80039f0:	9300      	str	r3, [sp, #0]
    data64 += data[i + 1] * 0x100;
 80039f2:	7863      	ldrb	r3, [r4, #1]
 80039f4:	9205      	str	r2, [sp, #20]
 80039f6:	021b      	lsls	r3, r3, #8
 80039f8:	9304      	str	r3, [sp, #16]
    data64 += data[i + 2] * 0x10000;
 80039fa:	78a3      	ldrb	r3, [r4, #2]
    uint64_t data64 = data[i];
 80039fc:	9201      	str	r2, [sp, #4]
    data64 += data[i + 2] * 0x10000;
 80039fe:	041b      	lsls	r3, r3, #16
 8003a00:	9306      	str	r3, [sp, #24]
 8003a02:	9806      	ldr	r0, [sp, #24]
 8003a04:	9907      	ldr	r1, [sp, #28]
 8003a06:	9a04      	ldr	r2, [sp, #16]
 8003a08:	9b05      	ldr	r3, [sp, #20]
 8003a0a:	1812      	adds	r2, r2, r0
 8003a0c:	414b      	adcs	r3, r1
 8003a0e:	9800      	ldr	r0, [sp, #0]
 8003a10:	9901      	ldr	r1, [sp, #4]
 8003a12:	1812      	adds	r2, r2, r0
 8003a14:	414b      	adcs	r3, r1
    data64 += data[i + 3] * 0x1000000;
 8003a16:	78e1      	ldrb	r1, [r4, #3]
 8003a18:	0609      	lsls	r1, r1, #24
 8003a1a:	9108      	str	r1, [sp, #32]
 8003a1c:	17c9      	asrs	r1, r1, #31
 8003a1e:	9109      	str	r1, [sp, #36]	; 0x24
 8003a20:	9808      	ldr	r0, [sp, #32]
 8003a22:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003a24:	1812      	adds	r2, r2, r0
 8003a26:	414b      	adcs	r3, r1
    data64 += data[i + 4] * 0x100000000;
 8003a28:	7921      	ldrb	r1, [r4, #4]
 8003a2a:	910b      	str	r1, [sp, #44]	; 0x2c
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	910a      	str	r1, [sp, #40]	; 0x28
 8003a30:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003a32:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003a34:	1812      	adds	r2, r2, r0
 8003a36:	414b      	adcs	r3, r1
    data64 += data[i + 5] * 0x10000000000;
 8003a38:	7961      	ldrb	r1, [r4, #5]
 8003a3a:	0209      	lsls	r1, r1, #8
 8003a3c:	910d      	str	r1, [sp, #52]	; 0x34
 8003a3e:	2100      	movs	r1, #0
 8003a40:	910c      	str	r1, [sp, #48]	; 0x30
 8003a42:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003a44:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003a46:	1812      	adds	r2, r2, r0
 8003a48:	414b      	adcs	r3, r1
    data64 += data[i + 6] * 0x1000000000000;
 8003a4a:	79a1      	ldrb	r1, [r4, #6]
 8003a4c:	0409      	lsls	r1, r1, #16
 8003a4e:	910f      	str	r1, [sp, #60]	; 0x3c
 8003a50:	2100      	movs	r1, #0
 8003a52:	910e      	str	r1, [sp, #56]	; 0x38
 8003a54:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003a56:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003a58:	1812      	adds	r2, r2, r0
 8003a5a:	414b      	adcs	r3, r1
    data64 += data[i + 7] * 0x100000000000000;
 8003a5c:	79e1      	ldrb	r1, [r4, #7]
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, ((i + startVirtualAddress)) + _EE_ADDR_INUSE, data64) != HAL_OK)
 8003a5e:	3408      	adds	r4, #8
    data64 += data[i + 7] * 0x100000000000000;
 8003a60:	0609      	lsls	r1, r1, #24
 8003a62:	9111      	str	r1, [sp, #68]	; 0x44
 8003a64:	2100      	movs	r1, #0
 8003a66:	9110      	str	r1, [sp, #64]	; 0x40
 8003a68:	9810      	ldr	r0, [sp, #64]	; 0x40
 8003a6a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8003a6c:	1812      	adds	r2, r2, r0
 8003a6e:	414b      	adcs	r3, r1
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, ((i + startVirtualAddress)) + _EE_ADDR_INUSE, data64) != HAL_OK)
 8003a70:	4904      	ldr	r1, [pc, #16]	; (8003a84 <ee_write.part.0+0xec>)
 8003a72:	2003      	movs	r0, #3
 8003a74:	1871      	adds	r1, r6, r1
 8003a76:	f001 faef 	bl	8005058 <HAL_FLASH_Program>
 8003a7a:	3608      	adds	r6, #8
 8003a7c:	2800      	cmp	r0, #0
 8003a7e:	d100      	bne.n	8003a82 <ee_write.part.0+0xea>
 8003a80:	e798      	b.n	80039b4 <ee_write.part.0+0x1c>
 8003a82:	e7ad      	b.n	80039e0 <ee_write.part.0+0x48>
 8003a84:	0800f000 	.word	0x0800f000

08003a88 <ee_format>:
{
 8003a88:	b5f0      	push	{r4, r5, r6, r7, lr}
	flashErase.NbPages = 1;
 8003a8a:	2701      	movs	r7, #1
  flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 8003a8c:	2600      	movs	r6, #0
{
 8003a8e:	b085      	sub	sp, #20
 8003a90:	0004      	movs	r4, r0
  HAL_FLASH_Unlock();
 8003a92:	f001 fa99 	bl	8004fc8 <HAL_FLASH_Unlock>
  flashErase.PageAddress = _EE_ADDR_INUSE;
 8003a96:	4b11      	ldr	r3, [pc, #68]	; (8003adc <ee_format+0x54>)
  if (HAL_FLASHEx_Erase(&flashErase, &error) == HAL_OK)
 8003a98:	4669      	mov	r1, sp
 8003a9a:	a801      	add	r0, sp, #4
	flashErase.NbPages = 1;
 8003a9c:	9703      	str	r7, [sp, #12]
  flashErase.PageAddress = _EE_ADDR_INUSE;
 8003a9e:	9302      	str	r3, [sp, #8]
  flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 8003aa0:	9601      	str	r6, [sp, #4]
  if (HAL_FLASHEx_Erase(&flashErase, &error) == HAL_OK)
 8003aa2:	f001 fb3f 	bl	8005124 <HAL_FLASHEx_Erase>
 8003aa6:	0005      	movs	r5, r0
 8003aa8:	42b0      	cmp	r0, r6
 8003aaa:	d110      	bne.n	8003ace <ee_format+0x46>
    HAL_FLASH_Lock();
 8003aac:	f001 faa0 	bl	8004ff0 <HAL_FLASH_Lock>
    if (error != 0xFFFFFFFF)
 8003ab0:	9b00      	ldr	r3, [sp, #0]
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	d10f      	bne.n	8003ad6 <ee_format+0x4e>
      if (keepRamData == false)
 8003ab6:	42b4      	cmp	r4, r6
 8003ab8:	d106      	bne.n	8003ac8 <ee_format+0x40>
        memset(ee_ram, 0xFF, _EE_USE_RAM_BYTE);
 8003aba:	2280      	movs	r2, #128	; 0x80
 8003abc:	21ff      	movs	r1, #255	; 0xff
 8003abe:	4808      	ldr	r0, [pc, #32]	; (8003ae0 <ee_format+0x58>)
 8003ac0:	00d2      	lsls	r2, r2, #3
 8003ac2:	f002 fc70 	bl	80063a6 <memset>
 8003ac6:	003c      	movs	r4, r7
}
 8003ac8:	0020      	movs	r0, r4
 8003aca:	b005      	add	sp, #20
 8003acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  HAL_FLASH_Lock();
 8003ace:	f001 fa8f 	bl	8004ff0 <HAL_FLASH_Lock>
  return false;
 8003ad2:	0034      	movs	r4, r6
 8003ad4:	e7f8      	b.n	8003ac8 <ee_format+0x40>
      return false;
 8003ad6:	002c      	movs	r4, r5
 8003ad8:	e7f6      	b.n	8003ac8 <ee_format+0x40>
 8003ada:	46c0      	nop			; (mov r8, r8)
 8003adc:	0800f000 	.word	0x0800f000
 8003ae0:	20000230 	.word	0x20000230

08003ae4 <ee_read>:
{
 8003ae4:	b530      	push	{r4, r5, lr}
  if ((startVirtualAddress + len) > _EE_SIZE)
 8003ae6:	2480      	movs	r4, #128	; 0x80
 8003ae8:	1841      	adds	r1, r0, r1
{
 8003aea:	0003      	movs	r3, r0
  if ((startVirtualAddress + len) > _EE_SIZE)
 8003aec:	00e4      	lsls	r4, r4, #3
    return false;
 8003aee:	2000      	movs	r0, #0
  if ((startVirtualAddress + len) > _EE_SIZE)
 8003af0:	42a1      	cmp	r1, r4
 8003af2:	d803      	bhi.n	8003afc <ee_read+0x18>
      ee_ram[i] = (*(__IO uint8_t*) (i + _EE_ADDR_INUSE));
 8003af4:	4c07      	ldr	r4, [pc, #28]	; (8003b14 <ee_read+0x30>)
  for (uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 8003af6:	4299      	cmp	r1, r3
 8003af8:	d801      	bhi.n	8003afe <ee_read+0x1a>
  return true;
 8003afa:	2001      	movs	r0, #1
}
 8003afc:	bd30      	pop	{r4, r5, pc}
    if (data != NULL)
 8003afe:	4806      	ldr	r0, [pc, #24]	; (8003b18 <ee_read+0x34>)
 8003b00:	1818      	adds	r0, r3, r0
 8003b02:	2a00      	cmp	r2, #0
 8003b04:	d002      	beq.n	8003b0c <ee_read+0x28>
      *data = (*(__IO uint8_t*) (i + _EE_ADDR_INUSE));
 8003b06:	7805      	ldrb	r5, [r0, #0]
 8003b08:	7015      	strb	r5, [r2, #0]
      data++;
 8003b0a:	3201      	adds	r2, #1
      ee_ram[i] = (*(__IO uint8_t*) (i + _EE_ADDR_INUSE));
 8003b0c:	7800      	ldrb	r0, [r0, #0]
 8003b0e:	54e0      	strb	r0, [r4, r3]
  for (uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 8003b10:	3301      	adds	r3, #1
 8003b12:	e7f0      	b.n	8003af6 <ee_read+0x12>
 8003b14:	20000230 	.word	0x20000230
 8003b18:	0800f000 	.word	0x0800f000

08003b1c <ee_writeToRam>:
//##########################################################################################################
bool ee_writeToRam(uint32_t startVirtualAddress, uint32_t len, uint8_t* data)
{
 8003b1c:	b570      	push	{r4, r5, r6, lr}
 8003b1e:	000c      	movs	r4, r1
 8003b20:	0011      	movs	r1, r2
#if (_EE_USE_RAM_BYTE > 0)
  if ((startVirtualAddress + len) > _EE_USE_RAM_BYTE)
 8003b22:	2280      	movs	r2, #128	; 0x80
 8003b24:	1905      	adds	r5, r0, r4
{
 8003b26:	0003      	movs	r3, r0
  if ((startVirtualAddress + len) > _EE_USE_RAM_BYTE)
 8003b28:	00d2      	lsls	r2, r2, #3
    return false;
 8003b2a:	2000      	movs	r0, #0
  if ((startVirtualAddress + len) > _EE_USE_RAM_BYTE)
 8003b2c:	4295      	cmp	r5, r2
 8003b2e:	d807      	bhi.n	8003b40 <ee_writeToRam+0x24>
    return false;
 8003b30:	1e08      	subs	r0, r1, #0
  if (data == NULL)
 8003b32:	d005      	beq.n	8003b40 <ee_writeToRam+0x24>
    return false;
  memcpy(&ee_ram[startVirtualAddress], data, len);
 8003b34:	4803      	ldr	r0, [pc, #12]	; (8003b44 <ee_writeToRam+0x28>)
 8003b36:	0022      	movs	r2, r4
 8003b38:	1818      	adds	r0, r3, r0
 8003b3a:	f002 fc2b 	bl	8006394 <memcpy>
  return true;
 8003b3e:	2001      	movs	r0, #1
#else
  return false;
#endif
}
 8003b40:	bd70      	pop	{r4, r5, r6, pc}
 8003b42:	46c0      	nop			; (mov r8, r8)
 8003b44:	20000230 	.word	0x20000230

08003b48 <ee_commit>:
//##########################################################################################################
bool  ee_commit(void)
{
 8003b48:	b510      	push	{r4, lr}
#if (_EE_USE_RAM_BYTE > 0)
  if (ee_format(true) == false)
 8003b4a:	2001      	movs	r0, #1
 8003b4c:	f7ff ff9c 	bl	8003a88 <ee_format>
 8003b50:	2800      	cmp	r0, #0
 8003b52:	d005      	beq.n	8003b60 <ee_commit+0x18>
  if (data == NULL)
 8003b54:	2180      	movs	r1, #128	; 0x80
 8003b56:	2000      	movs	r0, #0
 8003b58:	4a02      	ldr	r2, [pc, #8]	; (8003b64 <ee_commit+0x1c>)
 8003b5a:	00c9      	lsls	r1, r1, #3
 8003b5c:	f7ff ff1c 	bl	8003998 <ee_write.part.0>
    return false;
  return ee_write(0, _EE_USE_RAM_BYTE, ee_ram);
#else
  return false;
#endif
}
 8003b60:	bd10      	pop	{r4, pc}
 8003b62:	46c0      	nop			; (mov r8, r8)
 8003b64:	20000230 	.word	0x20000230

08003b68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b68:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b6a:	2410      	movs	r4, #16
{
 8003b6c:	b096      	sub	sp, #88	; 0x58
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b6e:	2228      	movs	r2, #40	; 0x28
 8003b70:	2100      	movs	r1, #0
 8003b72:	a80c      	add	r0, sp, #48	; 0x30
 8003b74:	f002 fc17 	bl	80063a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b78:	0022      	movs	r2, r4
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	a801      	add	r0, sp, #4
 8003b7e:	f002 fc12 	bl	80063a6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b82:	2214      	movs	r2, #20
 8003b84:	2100      	movs	r1, #0
 8003b86:	a805      	add	r0, sp, #20
 8003b88:	f002 fc0d 	bl	80063a6 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 8003b8c:	2311      	movs	r3, #17
 8003b8e:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003b90:	2380      	movs	r3, #128	; 0x80
 8003b92:	025b      	lsls	r3, r3, #9
 8003b94:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8003b96:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003b98:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b9a:	2602      	movs	r6, #2
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8003b9c:	035b      	lsls	r3, r3, #13
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b9e:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003ba0:	950b      	str	r5, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8003ba2:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8003ba4:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ba6:	9612      	str	r6, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8003ba8:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003baa:	f001 ff0d 	bl	80059c8 <HAL_RCC_OscConfig>
 8003bae:	2800      	cmp	r0, #0
 8003bb0:	d001      	beq.n	8003bb6 <SystemClock_Config+0x4e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003bb2:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003bb4:	e7fe      	b.n	8003bb4 <SystemClock_Config+0x4c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003bb6:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003bb8:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003bba:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003bbc:	0029      	movs	r1, r5
 8003bbe:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003bc0:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003bc2:	9602      	str	r6, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003bc4:	f002 f926 	bl	8005e14 <HAL_RCC_ClockConfig>
 8003bc8:	2800      	cmp	r0, #0
 8003bca:	d001      	beq.n	8003bd0 <SystemClock_Config+0x68>
 8003bcc:	b672      	cpsid	i
  while (1)
 8003bce:	e7fe      	b.n	8003bce <SystemClock_Config+0x66>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003bd0:	2320      	movs	r3, #32
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003bd2:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003bd4:	9305      	str	r3, [sp, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8003bd6:	9408      	str	r4, [sp, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003bd8:	f002 f9a0 	bl	8005f1c <HAL_RCCEx_PeriphCLKConfig>
 8003bdc:	2800      	cmp	r0, #0
 8003bde:	d001      	beq.n	8003be4 <SystemClock_Config+0x7c>
 8003be0:	b672      	cpsid	i
  while (1)
 8003be2:	e7fe      	b.n	8003be2 <SystemClock_Config+0x7a>
}
 8003be4:	b016      	add	sp, #88	; 0x58
 8003be6:	bd70      	pop	{r4, r5, r6, pc}

08003be8 <HAL_TIM_PeriodElapsedCallback>:
	if (htim->Instance == TIM6) {//Leemos el encoder cada 5ms
 8003be8:	4b06      	ldr	r3, [pc, #24]	; (8003c04 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8003bea:	6802      	ldr	r2, [r0, #0]
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003bec:	b510      	push	{r4, lr}
	if (htim->Instance == TIM6) {//Leemos el encoder cada 5ms
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d107      	bne.n	8003c02 <HAL_TIM_PeriodElapsedCallback+0x1a>
		VoutMath = Encoder_Run();
 8003bf2:	f7ff fb9b 	bl	800332c <Encoder_Run>
 8003bf6:	4b04      	ldr	r3, [pc, #16]	; (8003c08 <HAL_TIM_PeriodElapsedCallback+0x20>)
		contMillis++;
 8003bf8:	4a04      	ldr	r2, [pc, #16]	; (8003c0c <HAL_TIM_PeriodElapsedCallback+0x24>)
		VoutMath = Encoder_Run();
 8003bfa:	6018      	str	r0, [r3, #0]
		contMillis++;
 8003bfc:	8813      	ldrh	r3, [r2, #0]
 8003bfe:	3301      	adds	r3, #1
 8003c00:	8013      	strh	r3, [r2, #0]
}
 8003c02:	bd10      	pop	{r4, pc}
 8003c04:	40001000 	.word	0x40001000
 8003c08:	20000640 	.word	0x20000640
 8003c0c:	2000065a 	.word	0x2000065a

08003c10 <medirCorriente>:
void medirCorriente(void){
 8003c10:	b510      	push	{r4, lr}
	current = INA226_Current();
 8003c12:	f7ff fc91 	bl	8003538 <INA226_Current>
 8003c16:	4b0e      	ldr	r3, [pc, #56]	; (8003c50 <medirCorriente+0x40>)
	if(current>=0){
 8003c18:	2100      	movs	r1, #0
	current = INA226_Current();
 8003c1a:	6018      	str	r0, [r3, #0]
 8003c1c:	1c04      	adds	r4, r0, #0
	if(current>=0){
 8003c1e:	f7fc fc7f 	bl	8000520 <__aeabi_fcmpge>
 8003c22:	1e01      	subs	r1, r0, #0
 8003c24:	d010      	beq.n	8003c48 <medirCorriente+0x38>
		sprintf(buff,"%4.0fmA",current);
 8003c26:	1c20      	adds	r0, r4, #0
 8003c28:	f7ff fa86 	bl	8003138 <__aeabi_f2d>
 8003c2c:	4c09      	ldr	r4, [pc, #36]	; (8003c54 <medirCorriente+0x44>)
 8003c2e:	0002      	movs	r2, r0
 8003c30:	000b      	movs	r3, r1
 8003c32:	0020      	movs	r0, r4
 8003c34:	4908      	ldr	r1, [pc, #32]	; (8003c58 <medirCorriente+0x48>)
 8003c36:	f003 f82d 	bl	8006c94 <siprintf>
		OLED_Print_Text(6,0,2,buff);
 8003c3a:	0023      	movs	r3, r4
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	2100      	movs	r1, #0
		OLED_Print_Text(6,0,2,"   0mA");
 8003c40:	2006      	movs	r0, #6
 8003c42:	f7ff fe39 	bl	80038b8 <OLED_Print_Text>
}
 8003c46:	bd10      	pop	{r4, pc}
		OLED_Print_Text(6,0,2,"   0mA");
 8003c48:	2202      	movs	r2, #2
 8003c4a:	4b04      	ldr	r3, [pc, #16]	; (8003c5c <medirCorriente+0x4c>)
 8003c4c:	e7f8      	b.n	8003c40 <medirCorriente+0x30>
 8003c4e:	46c0      	nop			; (mov r8, r8)
 8003c50:	2000065c 	.word	0x2000065c
 8003c54:	20000648 	.word	0x20000648
 8003c58:	0800b395 	.word	0x0800b395
 8003c5c:	0800b39d 	.word	0x0800b39d

08003c60 <medirPotencia>:
void medirPotencia(void){
 8003c60:	b510      	push	{r4, lr}
	power = INA226_Power();
 8003c62:	f7ff fcaf 	bl	80035c4 <INA226_Power>
 8003c66:	4b0d      	ldr	r3, [pc, #52]	; (8003c9c <medirPotencia+0x3c>)
    if(power>=0){
 8003c68:	2100      	movs	r1, #0
	power = INA226_Power();
 8003c6a:	6018      	str	r0, [r3, #0]
 8003c6c:	1c04      	adds	r4, r0, #0
    if(power>=0){
 8003c6e:	f7fc fc57 	bl	8000520 <__aeabi_fcmpge>
	    OLED_Print_Text(5,96,1,"0.0W ");
 8003c72:	4b0b      	ldr	r3, [pc, #44]	; (8003ca0 <medirPotencia+0x40>)
    if(power>=0){
 8003c74:	2800      	cmp	r0, #0
 8003c76:	d00a      	beq.n	8003c8e <medirPotencia+0x2e>
	    sprintf(buff,"%2.1fW ",power);
 8003c78:	1c20      	adds	r0, r4, #0
 8003c7a:	f7ff fa5d 	bl	8003138 <__aeabi_f2d>
 8003c7e:	4c09      	ldr	r4, [pc, #36]	; (8003ca4 <medirPotencia+0x44>)
 8003c80:	000b      	movs	r3, r1
 8003c82:	0002      	movs	r2, r0
 8003c84:	4908      	ldr	r1, [pc, #32]	; (8003ca8 <medirPotencia+0x48>)
 8003c86:	0020      	movs	r0, r4
 8003c88:	f003 f804 	bl	8006c94 <siprintf>
	    OLED_Print_Text(5,96,1,buff);
 8003c8c:	0023      	movs	r3, r4
	    OLED_Print_Text(5,96,1,"0.0W ");
 8003c8e:	2201      	movs	r2, #1
 8003c90:	2160      	movs	r1, #96	; 0x60
 8003c92:	2005      	movs	r0, #5
 8003c94:	f7ff fe10 	bl	80038b8 <OLED_Print_Text>
}
 8003c98:	bd10      	pop	{r4, pc}
 8003c9a:	46c0      	nop			; (mov r8, r8)
 8003c9c:	2000075c 	.word	0x2000075c
 8003ca0:	0800b3ac 	.word	0x0800b3ac
 8003ca4:	20000648 	.word	0x20000648
 8003ca8:	0800b3a4 	.word	0x0800b3a4

08003cac <Control_Estabilizar>:
void Control_Estabilizar(void){
 8003cac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8003cae:	2100      	movs	r1, #0
 8003cb0:	48c8      	ldr	r0, [pc, #800]	; (8003fd4 <Control_Estabilizar+0x328>)
 8003cb2:	f001 f933 	bl	8004f1c <HAL_DAC_Start>
    if(VoutMath > voltage){
 8003cb6:	4bc8      	ldr	r3, [pc, #800]	; (8003fd8 <Control_Estabilizar+0x32c>)
 8003cb8:	681c      	ldr	r4, [r3, #0]
 8003cba:	4bc8      	ldr	r3, [pc, #800]	; (8003fdc <Control_Estabilizar+0x330>)
 8003cbc:	1c20      	adds	r0, r4, #0
 8003cbe:	681d      	ldr	r5, [r3, #0]
 8003cc0:	1c29      	adds	r1, r5, #0
 8003cc2:	f7fc fc23 	bl	800050c <__aeabi_fcmpgt>
 8003cc6:	2800      	cmp	r0, #0
 8003cc8:	d02d      	beq.n	8003d26 <Control_Estabilizar+0x7a>
    	difference = VoutMath - voltage;
 8003cca:	1c29      	adds	r1, r5, #0
 8003ccc:	1c20      	adds	r0, r4, #0
 8003cce:	f7fd f9ef 	bl	80010b0 <__aeabi_fsub>
 8003cd2:	4bc3      	ldr	r3, [pc, #780]	; (8003fe0 <Control_Estabilizar+0x334>)
    		ENCO=ENCO-step;
 8003cd4:	4dc3      	ldr	r5, [pc, #780]	; (8003fe4 <Control_Estabilizar+0x338>)
    	difference = VoutMath - voltage;
 8003cd6:	6018      	str	r0, [r3, #0]
    	if(difference>=0.001 && difference<=rango){
 8003cd8:	4bc3      	ldr	r3, [pc, #780]	; (8003fe8 <Control_Estabilizar+0x33c>)
    	difference = VoutMath - voltage;
 8003cda:	1c04      	adds	r4, r0, #0
    	if(difference>=0.001 && difference<=rango){
 8003cdc:	681e      	ldr	r6, [r3, #0]
 8003cde:	f7ff fa2b 	bl	8003138 <__aeabi_f2d>
 8003ce2:	4ac2      	ldr	r2, [pc, #776]	; (8003fec <Control_Estabilizar+0x340>)
 8003ce4:	4bc2      	ldr	r3, [pc, #776]	; (8003ff0 <Control_Estabilizar+0x344>)
    		ENCO=ENCO-step;
 8003ce6:	682f      	ldr	r7, [r5, #0]
    	if(difference>=0.001 && difference<=rango){
 8003ce8:	f7fc fbe0 	bl	80004ac <__aeabi_dcmpge>
 8003cec:	2800      	cmp	r0, #0
 8003cee:	d055      	beq.n	8003d9c <Control_Estabilizar+0xf0>
 8003cf0:	1c31      	adds	r1, r6, #0
 8003cf2:	1c20      	adds	r0, r4, #0
 8003cf4:	f7fc fc00 	bl	80004f8 <__aeabi_fcmple>
 8003cf8:	2800      	cmp	r0, #0
 8003cfa:	d04f      	beq.n	8003d9c <Control_Estabilizar+0xf0>
    		ENCO=ENCO-step;
 8003cfc:	4bbd      	ldr	r3, [pc, #756]	; (8003ff4 <Control_Estabilizar+0x348>)
 8003cfe:	6819      	ldr	r1, [r3, #0]
    		ENCO=ENCO-step*4;
 8003d00:	1c38      	adds	r0, r7, #0
 8003d02:	f7fd f9d5 	bl	80010b0 <__aeabi_fsub>
 8003d06:	6028      	str	r0, [r5, #0]
    	PWM = encoder+ENCO;
 8003d08:	4bbb      	ldr	r3, [pc, #748]	; (8003ff8 <Control_Estabilizar+0x34c>)
 8003d0a:	6829      	ldr	r1, [r5, #0]
 8003d0c:	6818      	ldr	r0, [r3, #0]
 8003d0e:	f7fc fd43 	bl	8000798 <__aeabi_fadd>
 8003d12:	4bba      	ldr	r3, [pc, #744]	; (8003ffc <Control_Estabilizar+0x350>)
 8003d14:	6018      	str	r0, [r3, #0]
    	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, PWM);
 8003d16:	f7fc fc5b 	bl	80005d0 <__aeabi_f2uiz>
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	0003      	movs	r3, r0
 8003d1e:	0011      	movs	r1, r2
 8003d20:	48ac      	ldr	r0, [pc, #688]	; (8003fd4 <Control_Estabilizar+0x328>)
 8003d22:	f001 f8cf 	bl	8004ec4 <HAL_DAC_SetValue>
    if(VoutMath < voltage){
 8003d26:	4bac      	ldr	r3, [pc, #688]	; (8003fd8 <Control_Estabilizar+0x32c>)
 8003d28:	681d      	ldr	r5, [r3, #0]
 8003d2a:	4bac      	ldr	r3, [pc, #688]	; (8003fdc <Control_Estabilizar+0x330>)
 8003d2c:	1c28      	adds	r0, r5, #0
 8003d2e:	681c      	ldr	r4, [r3, #0]
 8003d30:	1c21      	adds	r1, r4, #0
 8003d32:	f7fc fbd7 	bl	80004e4 <__aeabi_fcmplt>
 8003d36:	2800      	cmp	r0, #0
 8003d38:	d02f      	beq.n	8003d9a <Control_Estabilizar+0xee>
    	difference = voltage - VoutMath;
 8003d3a:	1c29      	adds	r1, r5, #0
 8003d3c:	1c20      	adds	r0, r4, #0
 8003d3e:	f7fd f9b7 	bl	80010b0 <__aeabi_fsub>
 8003d42:	4ba7      	ldr	r3, [pc, #668]	; (8003fe0 <Control_Estabilizar+0x334>)
    		ENCO=ENCO+step;
 8003d44:	4da7      	ldr	r5, [pc, #668]	; (8003fe4 <Control_Estabilizar+0x338>)
    	difference = voltage - VoutMath;
 8003d46:	6018      	str	r0, [r3, #0]
    	if(difference>=0.001 && difference<=rango){
 8003d48:	4ba7      	ldr	r3, [pc, #668]	; (8003fe8 <Control_Estabilizar+0x33c>)
    	difference = voltage - VoutMath;
 8003d4a:	1c04      	adds	r4, r0, #0
    	if(difference>=0.001 && difference<=rango){
 8003d4c:	681e      	ldr	r6, [r3, #0]
 8003d4e:	f7ff f9f3 	bl	8003138 <__aeabi_f2d>
 8003d52:	4aa6      	ldr	r2, [pc, #664]	; (8003fec <Control_Estabilizar+0x340>)
 8003d54:	4ba6      	ldr	r3, [pc, #664]	; (8003ff0 <Control_Estabilizar+0x344>)
    		ENCO=ENCO+step;
 8003d56:	682f      	ldr	r7, [r5, #0]
    	if(difference>=0.001 && difference<=rango){
 8003d58:	f7fc fba8 	bl	80004ac <__aeabi_dcmpge>
 8003d5c:	2800      	cmp	r0, #0
 8003d5e:	d100      	bne.n	8003d62 <Control_Estabilizar+0xb6>
 8003d60:	e0a9      	b.n	8003eb6 <Control_Estabilizar+0x20a>
 8003d62:	1c31      	adds	r1, r6, #0
 8003d64:	1c20      	adds	r0, r4, #0
 8003d66:	f7fc fbc7 	bl	80004f8 <__aeabi_fcmple>
 8003d6a:	2800      	cmp	r0, #0
 8003d6c:	d100      	bne.n	8003d70 <Control_Estabilizar+0xc4>
 8003d6e:	e0a2      	b.n	8003eb6 <Control_Estabilizar+0x20a>
    		ENCO=ENCO+step;
 8003d70:	4ba0      	ldr	r3, [pc, #640]	; (8003ff4 <Control_Estabilizar+0x348>)
 8003d72:	1c39      	adds	r1, r7, #0
 8003d74:	6818      	ldr	r0, [r3, #0]
    		ENCO=ENCO+step*4;
 8003d76:	f7fc fd0f 	bl	8000798 <__aeabi_fadd>
 8003d7a:	6028      	str	r0, [r5, #0]
    	PWM = encoder+ENCO;
 8003d7c:	4b9e      	ldr	r3, [pc, #632]	; (8003ff8 <Control_Estabilizar+0x34c>)
 8003d7e:	6829      	ldr	r1, [r5, #0]
 8003d80:	6818      	ldr	r0, [r3, #0]
 8003d82:	f7fc fd09 	bl	8000798 <__aeabi_fadd>
 8003d86:	4b9d      	ldr	r3, [pc, #628]	; (8003ffc <Control_Estabilizar+0x350>)
 8003d88:	6018      	str	r0, [r3, #0]
    	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, PWM);
 8003d8a:	f7fc fc21 	bl	80005d0 <__aeabi_f2uiz>
 8003d8e:	2200      	movs	r2, #0
 8003d90:	0003      	movs	r3, r0
 8003d92:	0011      	movs	r1, r2
 8003d94:	488f      	ldr	r0, [pc, #572]	; (8003fd4 <Control_Estabilizar+0x328>)
 8003d96:	f001 f895 	bl	8004ec4 <HAL_DAC_SetValue>
}
 8003d9a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    	}else if(difference>rango && difference<=rango*2){
 8003d9c:	1c31      	adds	r1, r6, #0
 8003d9e:	1c30      	adds	r0, r6, #0
 8003da0:	f7fc fcfa 	bl	8000798 <__aeabi_fadd>
 8003da4:	1c31      	adds	r1, r6, #0
 8003da6:	9000      	str	r0, [sp, #0]
 8003da8:	1c20      	adds	r0, r4, #0
 8003daa:	f7fc fbaf 	bl	800050c <__aeabi_fcmpgt>
 8003dae:	2800      	cmp	r0, #0
 8003db0:	d005      	beq.n	8003dbe <Control_Estabilizar+0x112>
 8003db2:	9900      	ldr	r1, [sp, #0]
 8003db4:	1c20      	adds	r0, r4, #0
 8003db6:	f7fc fb9f 	bl	80004f8 <__aeabi_fcmple>
 8003dba:	2800      	cmp	r0, #0
 8003dbc:	d19e      	bne.n	8003cfc <Control_Estabilizar+0x50>
    	}else if(difference>rango*2 && difference<=rango*3){
 8003dbe:	4990      	ldr	r1, [pc, #576]	; (8004000 <Control_Estabilizar+0x354>)
 8003dc0:	1c30      	adds	r0, r6, #0
 8003dc2:	f7fd f84f 	bl	8000e64 <__aeabi_fmul>
 8003dc6:	9900      	ldr	r1, [sp, #0]
 8003dc8:	9001      	str	r0, [sp, #4]
 8003dca:	1c20      	adds	r0, r4, #0
 8003dcc:	f7fc fb9e 	bl	800050c <__aeabi_fcmpgt>
 8003dd0:	2800      	cmp	r0, #0
 8003dd2:	d006      	beq.n	8003de2 <Control_Estabilizar+0x136>
 8003dd4:	9901      	ldr	r1, [sp, #4]
 8003dd6:	1c20      	adds	r0, r4, #0
 8003dd8:	f7fc fb8e 	bl	80004f8 <__aeabi_fcmple>
 8003ddc:	2800      	cmp	r0, #0
 8003dde:	d000      	beq.n	8003de2 <Control_Estabilizar+0x136>
 8003de0:	e78c      	b.n	8003cfc <Control_Estabilizar+0x50>
    	}else if(difference>rango*3 && difference<=rango*4){
 8003de2:	2181      	movs	r1, #129	; 0x81
 8003de4:	1c30      	adds	r0, r6, #0
 8003de6:	05c9      	lsls	r1, r1, #23
 8003de8:	f7fd f83c 	bl	8000e64 <__aeabi_fmul>
 8003dec:	9901      	ldr	r1, [sp, #4]
 8003dee:	9000      	str	r0, [sp, #0]
 8003df0:	1c20      	adds	r0, r4, #0
 8003df2:	f7fc fb8b 	bl	800050c <__aeabi_fcmpgt>
 8003df6:	2800      	cmp	r0, #0
 8003df8:	d006      	beq.n	8003e08 <Control_Estabilizar+0x15c>
 8003dfa:	9900      	ldr	r1, [sp, #0]
 8003dfc:	1c20      	adds	r0, r4, #0
 8003dfe:	f7fc fb7b 	bl	80004f8 <__aeabi_fcmple>
 8003e02:	2800      	cmp	r0, #0
 8003e04:	d000      	beq.n	8003e08 <Control_Estabilizar+0x15c>
 8003e06:	e779      	b.n	8003cfc <Control_Estabilizar+0x50>
    	}else if(difference>rango*4 && difference<=rango*5){
 8003e08:	497e      	ldr	r1, [pc, #504]	; (8004004 <Control_Estabilizar+0x358>)
 8003e0a:	1c30      	adds	r0, r6, #0
 8003e0c:	f7fd f82a 	bl	8000e64 <__aeabi_fmul>
 8003e10:	9900      	ldr	r1, [sp, #0]
 8003e12:	9001      	str	r0, [sp, #4]
 8003e14:	1c20      	adds	r0, r4, #0
 8003e16:	f7fc fb79 	bl	800050c <__aeabi_fcmpgt>
 8003e1a:	2800      	cmp	r0, #0
 8003e1c:	d006      	beq.n	8003e2c <Control_Estabilizar+0x180>
 8003e1e:	9901      	ldr	r1, [sp, #4]
 8003e20:	1c20      	adds	r0, r4, #0
 8003e22:	f7fc fb69 	bl	80004f8 <__aeabi_fcmple>
 8003e26:	2800      	cmp	r0, #0
 8003e28:	d000      	beq.n	8003e2c <Control_Estabilizar+0x180>
 8003e2a:	e767      	b.n	8003cfc <Control_Estabilizar+0x50>
    	}else if(difference>rango*5 && difference<=rango*6){
 8003e2c:	4976      	ldr	r1, [pc, #472]	; (8004008 <Control_Estabilizar+0x35c>)
 8003e2e:	1c30      	adds	r0, r6, #0
 8003e30:	f7fd f818 	bl	8000e64 <__aeabi_fmul>
 8003e34:	9901      	ldr	r1, [sp, #4]
 8003e36:	9000      	str	r0, [sp, #0]
 8003e38:	1c20      	adds	r0, r4, #0
 8003e3a:	f7fc fb67 	bl	800050c <__aeabi_fcmpgt>
 8003e3e:	2800      	cmp	r0, #0
 8003e40:	d00c      	beq.n	8003e5c <Control_Estabilizar+0x1b0>
 8003e42:	9900      	ldr	r1, [sp, #0]
 8003e44:	1c20      	adds	r0, r4, #0
 8003e46:	f7fc fb57 	bl	80004f8 <__aeabi_fcmple>
 8003e4a:	2800      	cmp	r0, #0
 8003e4c:	d006      	beq.n	8003e5c <Control_Estabilizar+0x1b0>
    		ENCO=ENCO-step*2;
 8003e4e:	4b69      	ldr	r3, [pc, #420]	; (8003ff4 <Control_Estabilizar+0x348>)
 8003e50:	6818      	ldr	r0, [r3, #0]
 8003e52:	1c01      	adds	r1, r0, #0
 8003e54:	f7fc fca0 	bl	8000798 <__aeabi_fadd>
    		ENCO=ENCO-step*4;
 8003e58:	1c01      	adds	r1, r0, #0
 8003e5a:	e751      	b.n	8003d00 <Control_Estabilizar+0x54>
    	}else if(difference>rango*6 && difference<=rango*7){
 8003e5c:	496b      	ldr	r1, [pc, #428]	; (800400c <Control_Estabilizar+0x360>)
 8003e5e:	1c30      	adds	r0, r6, #0
 8003e60:	f7fd f800 	bl	8000e64 <__aeabi_fmul>
 8003e64:	9900      	ldr	r1, [sp, #0]
 8003e66:	9001      	str	r0, [sp, #4]
 8003e68:	1c20      	adds	r0, r4, #0
 8003e6a:	f7fc fb4f 	bl	800050c <__aeabi_fcmpgt>
 8003e6e:	2800      	cmp	r0, #0
 8003e70:	d00b      	beq.n	8003e8a <Control_Estabilizar+0x1de>
 8003e72:	9901      	ldr	r1, [sp, #4]
 8003e74:	1c20      	adds	r0, r4, #0
 8003e76:	f7fc fb3f 	bl	80004f8 <__aeabi_fcmple>
 8003e7a:	2800      	cmp	r0, #0
 8003e7c:	d005      	beq.n	8003e8a <Control_Estabilizar+0x1de>
    		ENCO=ENCO-step*3;
 8003e7e:	4960      	ldr	r1, [pc, #384]	; (8004000 <Control_Estabilizar+0x354>)
    		ENCO=ENCO-step*4;
 8003e80:	4b5c      	ldr	r3, [pc, #368]	; (8003ff4 <Control_Estabilizar+0x348>)
 8003e82:	6818      	ldr	r0, [r3, #0]
 8003e84:	f7fc ffee 	bl	8000e64 <__aeabi_fmul>
 8003e88:	e7e6      	b.n	8003e58 <Control_Estabilizar+0x1ac>
    	}else if(difference>rango*7 && difference<=rango*8){
 8003e8a:	9901      	ldr	r1, [sp, #4]
 8003e8c:	1c20      	adds	r0, r4, #0
 8003e8e:	f7fc fb3d 	bl	800050c <__aeabi_fcmpgt>
 8003e92:	2800      	cmp	r0, #0
 8003e94:	d100      	bne.n	8003e98 <Control_Estabilizar+0x1ec>
 8003e96:	e737      	b.n	8003d08 <Control_Estabilizar+0x5c>
 8003e98:	2182      	movs	r1, #130	; 0x82
 8003e9a:	1c30      	adds	r0, r6, #0
 8003e9c:	05c9      	lsls	r1, r1, #23
 8003e9e:	f7fc ffe1 	bl	8000e64 <__aeabi_fmul>
 8003ea2:	1c01      	adds	r1, r0, #0
 8003ea4:	1c20      	adds	r0, r4, #0
 8003ea6:	f7fc fb27 	bl	80004f8 <__aeabi_fcmple>
 8003eaa:	2800      	cmp	r0, #0
 8003eac:	d100      	bne.n	8003eb0 <Control_Estabilizar+0x204>
 8003eae:	e72b      	b.n	8003d08 <Control_Estabilizar+0x5c>
    		ENCO=ENCO-step*4;
 8003eb0:	2181      	movs	r1, #129	; 0x81
 8003eb2:	05c9      	lsls	r1, r1, #23
 8003eb4:	e7e4      	b.n	8003e80 <Control_Estabilizar+0x1d4>
    	}else if(difference>rango && difference<=rango*2){
 8003eb6:	1c31      	adds	r1, r6, #0
 8003eb8:	1c30      	adds	r0, r6, #0
 8003eba:	f7fc fc6d 	bl	8000798 <__aeabi_fadd>
 8003ebe:	1c31      	adds	r1, r6, #0
 8003ec0:	9000      	str	r0, [sp, #0]
 8003ec2:	1c20      	adds	r0, r4, #0
 8003ec4:	f7fc fb22 	bl	800050c <__aeabi_fcmpgt>
 8003ec8:	2800      	cmp	r0, #0
 8003eca:	d006      	beq.n	8003eda <Control_Estabilizar+0x22e>
 8003ecc:	9900      	ldr	r1, [sp, #0]
 8003ece:	1c20      	adds	r0, r4, #0
 8003ed0:	f7fc fb12 	bl	80004f8 <__aeabi_fcmple>
 8003ed4:	2800      	cmp	r0, #0
 8003ed6:	d000      	beq.n	8003eda <Control_Estabilizar+0x22e>
 8003ed8:	e74a      	b.n	8003d70 <Control_Estabilizar+0xc4>
    	}else if(difference>rango*2 && difference<=rango*3){
 8003eda:	4949      	ldr	r1, [pc, #292]	; (8004000 <Control_Estabilizar+0x354>)
 8003edc:	1c30      	adds	r0, r6, #0
 8003ede:	f7fc ffc1 	bl	8000e64 <__aeabi_fmul>
 8003ee2:	9900      	ldr	r1, [sp, #0]
 8003ee4:	9001      	str	r0, [sp, #4]
 8003ee6:	1c20      	adds	r0, r4, #0
 8003ee8:	f7fc fb10 	bl	800050c <__aeabi_fcmpgt>
 8003eec:	2800      	cmp	r0, #0
 8003eee:	d006      	beq.n	8003efe <Control_Estabilizar+0x252>
 8003ef0:	9901      	ldr	r1, [sp, #4]
 8003ef2:	1c20      	adds	r0, r4, #0
 8003ef4:	f7fc fb00 	bl	80004f8 <__aeabi_fcmple>
 8003ef8:	2800      	cmp	r0, #0
 8003efa:	d000      	beq.n	8003efe <Control_Estabilizar+0x252>
 8003efc:	e738      	b.n	8003d70 <Control_Estabilizar+0xc4>
    	}else if(difference>rango*3 && difference<=rango*4){
 8003efe:	2181      	movs	r1, #129	; 0x81
 8003f00:	1c30      	adds	r0, r6, #0
 8003f02:	05c9      	lsls	r1, r1, #23
 8003f04:	f7fc ffae 	bl	8000e64 <__aeabi_fmul>
 8003f08:	9901      	ldr	r1, [sp, #4]
 8003f0a:	9000      	str	r0, [sp, #0]
 8003f0c:	1c20      	adds	r0, r4, #0
 8003f0e:	f7fc fafd 	bl	800050c <__aeabi_fcmpgt>
 8003f12:	2800      	cmp	r0, #0
 8003f14:	d006      	beq.n	8003f24 <Control_Estabilizar+0x278>
 8003f16:	9900      	ldr	r1, [sp, #0]
 8003f18:	1c20      	adds	r0, r4, #0
 8003f1a:	f7fc faed 	bl	80004f8 <__aeabi_fcmple>
 8003f1e:	2800      	cmp	r0, #0
 8003f20:	d000      	beq.n	8003f24 <Control_Estabilizar+0x278>
 8003f22:	e725      	b.n	8003d70 <Control_Estabilizar+0xc4>
    	}else if(difference>rango*4 && difference<=rango*5){
 8003f24:	4937      	ldr	r1, [pc, #220]	; (8004004 <Control_Estabilizar+0x358>)
 8003f26:	1c30      	adds	r0, r6, #0
 8003f28:	f7fc ff9c 	bl	8000e64 <__aeabi_fmul>
 8003f2c:	9900      	ldr	r1, [sp, #0]
 8003f2e:	9001      	str	r0, [sp, #4]
 8003f30:	1c20      	adds	r0, r4, #0
 8003f32:	f7fc faeb 	bl	800050c <__aeabi_fcmpgt>
 8003f36:	2800      	cmp	r0, #0
 8003f38:	d006      	beq.n	8003f48 <Control_Estabilizar+0x29c>
 8003f3a:	9901      	ldr	r1, [sp, #4]
 8003f3c:	1c20      	adds	r0, r4, #0
 8003f3e:	f7fc fadb 	bl	80004f8 <__aeabi_fcmple>
 8003f42:	2800      	cmp	r0, #0
 8003f44:	d000      	beq.n	8003f48 <Control_Estabilizar+0x29c>
 8003f46:	e713      	b.n	8003d70 <Control_Estabilizar+0xc4>
    	}else if(difference>rango*5 && difference<=rango*6){
 8003f48:	492f      	ldr	r1, [pc, #188]	; (8004008 <Control_Estabilizar+0x35c>)
 8003f4a:	1c30      	adds	r0, r6, #0
 8003f4c:	f7fc ff8a 	bl	8000e64 <__aeabi_fmul>
 8003f50:	9901      	ldr	r1, [sp, #4]
 8003f52:	9000      	str	r0, [sp, #0]
 8003f54:	1c20      	adds	r0, r4, #0
 8003f56:	f7fc fad9 	bl	800050c <__aeabi_fcmpgt>
 8003f5a:	2800      	cmp	r0, #0
 8003f5c:	d00c      	beq.n	8003f78 <Control_Estabilizar+0x2cc>
 8003f5e:	9900      	ldr	r1, [sp, #0]
 8003f60:	1c20      	adds	r0, r4, #0
 8003f62:	f7fc fac9 	bl	80004f8 <__aeabi_fcmple>
 8003f66:	2800      	cmp	r0, #0
 8003f68:	d006      	beq.n	8003f78 <Control_Estabilizar+0x2cc>
    		ENCO=ENCO+step*2;
 8003f6a:	4b22      	ldr	r3, [pc, #136]	; (8003ff4 <Control_Estabilizar+0x348>)
 8003f6c:	6818      	ldr	r0, [r3, #0]
 8003f6e:	1c01      	adds	r1, r0, #0
 8003f70:	f7fc fc12 	bl	8000798 <__aeabi_fadd>
    		ENCO=ENCO+step*4;
 8003f74:	1c39      	adds	r1, r7, #0
 8003f76:	e6fe      	b.n	8003d76 <Control_Estabilizar+0xca>
    	}else if(difference>rango*6 && difference<=rango*7){
 8003f78:	4924      	ldr	r1, [pc, #144]	; (800400c <Control_Estabilizar+0x360>)
 8003f7a:	1c30      	adds	r0, r6, #0
 8003f7c:	f7fc ff72 	bl	8000e64 <__aeabi_fmul>
 8003f80:	9900      	ldr	r1, [sp, #0]
 8003f82:	9001      	str	r0, [sp, #4]
 8003f84:	1c20      	adds	r0, r4, #0
 8003f86:	f7fc fac1 	bl	800050c <__aeabi_fcmpgt>
 8003f8a:	2800      	cmp	r0, #0
 8003f8c:	d00b      	beq.n	8003fa6 <Control_Estabilizar+0x2fa>
 8003f8e:	9901      	ldr	r1, [sp, #4]
 8003f90:	1c20      	adds	r0, r4, #0
 8003f92:	f7fc fab1 	bl	80004f8 <__aeabi_fcmple>
 8003f96:	2800      	cmp	r0, #0
 8003f98:	d005      	beq.n	8003fa6 <Control_Estabilizar+0x2fa>
    		ENCO=ENCO+step*3;
 8003f9a:	4919      	ldr	r1, [pc, #100]	; (8004000 <Control_Estabilizar+0x354>)
    		ENCO=ENCO+step*4;
 8003f9c:	4b15      	ldr	r3, [pc, #84]	; (8003ff4 <Control_Estabilizar+0x348>)
 8003f9e:	6818      	ldr	r0, [r3, #0]
 8003fa0:	f7fc ff60 	bl	8000e64 <__aeabi_fmul>
 8003fa4:	e7e6      	b.n	8003f74 <Control_Estabilizar+0x2c8>
    	}else if(difference>rango*7 && difference<=rango*8){
 8003fa6:	9901      	ldr	r1, [sp, #4]
 8003fa8:	1c20      	adds	r0, r4, #0
 8003faa:	f7fc faaf 	bl	800050c <__aeabi_fcmpgt>
 8003fae:	2800      	cmp	r0, #0
 8003fb0:	d100      	bne.n	8003fb4 <Control_Estabilizar+0x308>
 8003fb2:	e6e3      	b.n	8003d7c <Control_Estabilizar+0xd0>
 8003fb4:	2182      	movs	r1, #130	; 0x82
 8003fb6:	1c30      	adds	r0, r6, #0
 8003fb8:	05c9      	lsls	r1, r1, #23
 8003fba:	f7fc ff53 	bl	8000e64 <__aeabi_fmul>
 8003fbe:	1c01      	adds	r1, r0, #0
 8003fc0:	1c20      	adds	r0, r4, #0
 8003fc2:	f7fc fa99 	bl	80004f8 <__aeabi_fcmple>
 8003fc6:	2800      	cmp	r0, #0
 8003fc8:	d100      	bne.n	8003fcc <Control_Estabilizar+0x320>
 8003fca:	e6d7      	b.n	8003d7c <Control_Estabilizar+0xd0>
    		ENCO=ENCO+step*4;
 8003fcc:	2181      	movs	r1, #129	; 0x81
 8003fce:	05c9      	lsls	r1, r1, #23
 8003fd0:	e7e4      	b.n	8003f9c <Control_Estabilizar+0x2f0>
 8003fd2:	46c0      	nop			; (mov r8, r8)
 8003fd4:	200006a8 	.word	0x200006a8
 8003fd8:	20000640 	.word	0x20000640
 8003fdc:	20000764 	.word	0x20000764
 8003fe0:	20000660 	.word	0x20000660
 8003fe4:	20000630 	.word	0x20000630
 8003fe8:	20000010 	.word	0x20000010
 8003fec:	d2f1a9fc 	.word	0xd2f1a9fc
 8003ff0:	3f50624d 	.word	0x3f50624d
 8003ff4:	20000014 	.word	0x20000014
 8003ff8:	20000664 	.word	0x20000664
 8003ffc:	20000634 	.word	0x20000634
 8004000:	40400000 	.word	0x40400000
 8004004:	40a00000 	.word	0x40a00000
 8004008:	40c00000 	.word	0x40c00000
 800400c:	40e00000 	.word	0x40e00000

08004010 <main>:
{
 8004010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004012:	b08f      	sub	sp, #60	; 0x3c
  HAL_Init();
 8004014:	f000 fd10 	bl	8004a38 <HAL_Init>
  SystemClock_Config();
 8004018:	f7ff fda6 	bl	8003b68 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800401c:	2214      	movs	r2, #20
 800401e:	2100      	movs	r1, #0
 8004020:	a809      	add	r0, sp, #36	; 0x24
 8004022:	f002 f9c0 	bl	80063a6 <memset>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004026:	2080      	movs	r0, #128	; 0x80
 8004028:	4b75      	ldr	r3, [pc, #468]	; (8004200 <main+0x1f0>)
 800402a:	03c0      	lsls	r0, r0, #15
 800402c:	6959      	ldr	r1, [r3, #20]
  HAL_GPIO_WritePin(EN_XL6019_GPIO_Port, EN_XL6019_Pin, GPIO_PIN_RESET);
 800402e:	2580      	movs	r5, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004030:	4301      	orrs	r1, r0
 8004032:	6159      	str	r1, [r3, #20]
 8004034:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(EN_XL6019_GPIO_Port, EN_XL6019_Pin, GPIO_PIN_RESET);
 8004036:	006d      	lsls	r5, r5, #1
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004038:	4002      	ands	r2, r0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800403a:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800403c:	9206      	str	r2, [sp, #24]
 800403e:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004040:	6959      	ldr	r1, [r3, #20]
 8004042:	0280      	lsls	r0, r0, #10
 8004044:	4301      	orrs	r1, r0
 8004046:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004048:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800404a:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800404c:	02c9      	lsls	r1, r1, #11
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800404e:	4002      	ands	r2, r0
  HAL_GPIO_WritePin(EN_XL6019_GPIO_Port, EN_XL6019_Pin, GPIO_PIN_RESET);
 8004050:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004052:	9207      	str	r2, [sp, #28]
 8004054:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004056:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(EN_XL6019_GPIO_Port, EN_XL6019_Pin, GPIO_PIN_RESET);
 8004058:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800405a:	430a      	orrs	r2, r1
 800405c:	615a      	str	r2, [r3, #20]
 800405e:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(EN_XL6019_GPIO_Port, EN_XL6019_Pin, GPIO_PIN_RESET);
 8004060:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004062:	400b      	ands	r3, r1
 8004064:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(EN_XL6019_GPIO_Port, EN_XL6019_Pin, GPIO_PIN_RESET);
 8004066:	0029      	movs	r1, r5
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004068:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(EN_XL6019_GPIO_Port, EN_XL6019_Pin, GPIO_PIN_RESET);
 800406a:	f001 f961 	bl	8005330 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800406e:	2200      	movs	r2, #0
 8004070:	21c0      	movs	r1, #192	; 0xc0
 8004072:	4864      	ldr	r0, [pc, #400]	; (8004204 <main+0x1f4>)
 8004074:	f001 f95c 	bl	8005330 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = stateCharger_Pin;
 8004078:	2380      	movs	r3, #128	; 0x80
 800407a:	00db      	lsls	r3, r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800407c:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = stateCharger_Pin;
 800407e:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004080:	2302      	movs	r3, #2
  HAL_GPIO_Init(stateCharger_GPIO_Port, &GPIO_InitStruct);
 8004082:	4861      	ldr	r0, [pc, #388]	; (8004208 <main+0x1f8>)
 8004084:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004086:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004088:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(stateCharger_GPIO_Port, &GPIO_InitStruct);
 800408a:	f001 f895 	bl	80051b8 <HAL_GPIO_Init>
  HAL_GPIO_Init(EN_XL6019_GPIO_Port, &GPIO_InitStruct);
 800408e:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = EN_XL6019_Pin;
 8004090:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(EN_XL6019_GPIO_Port, &GPIO_InitStruct);
 8004092:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004094:	3dff      	subs	r5, #255	; 0xff
  HAL_GPIO_Init(EN_XL6019_GPIO_Port, &GPIO_InitStruct);
 8004096:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004098:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800409a:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800409c:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(EN_XL6019_GPIO_Port, &GPIO_InitStruct);
 800409e:	f001 f88b 	bl	80051b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 80040a2:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040a4:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 80040a6:	00db      	lsls	r3, r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040a8:	a909      	add	r1, sp, #36	; 0x24
 80040aa:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 80040ac:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040ae:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040b0:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040b2:	f001 f881 	bl	80051b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80040b6:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80040b8:	4852      	ldr	r0, [pc, #328]	; (8004204 <main+0x1f4>)
 80040ba:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80040bc:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040be:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c0:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040c2:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80040c4:	f001 f878 	bl	80051b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ALERT_Pin;
 80040c8:	2310      	movs	r3, #16
  HAL_GPIO_Init(ALERT_GPIO_Port, &GPIO_InitStruct);
 80040ca:	484f      	ldr	r0, [pc, #316]	; (8004208 <main+0x1f8>)
 80040cc:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = ALERT_Pin;
 80040ce:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040d0:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d2:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(ALERT_GPIO_Port, &GPIO_InitStruct);
 80040d4:	f001 f870 	bl	80051b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CLK_Pin|DT_Pin|SW_Pin;
 80040d8:	23e0      	movs	r3, #224	; 0xe0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040da:	a909      	add	r1, sp, #36	; 0x24
 80040dc:	484a      	ldr	r0, [pc, #296]	; (8004208 <main+0x1f8>)
  GPIO_InitStruct.Pin = CLK_Pin|DT_Pin|SW_Pin;
 80040de:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040e0:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040e2:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040e4:	f001 f868 	bl	80051b8 <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 80040e8:	4e48      	ldr	r6, [pc, #288]	; (800420c <main+0x1fc>)
 80040ea:	4b49      	ldr	r3, [pc, #292]	; (8004210 <main+0x200>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80040ec:	0030      	movs	r0, r6
  hi2c1.Instance = I2C1;
 80040ee:	6033      	str	r3, [r6, #0]
  hi2c1.Init.Timing = 0x20000209;
 80040f0:	4b48      	ldr	r3, [pc, #288]	; (8004214 <main+0x204>)
  hi2c1.Init.OwnAddress1 = 0;
 80040f2:	60b4      	str	r4, [r6, #8]
  hi2c1.Init.Timing = 0x20000209;
 80040f4:	6073      	str	r3, [r6, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80040f6:	60f5      	str	r5, [r6, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80040f8:	6134      	str	r4, [r6, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80040fa:	6174      	str	r4, [r6, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80040fc:	61b4      	str	r4, [r6, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80040fe:	61f4      	str	r4, [r6, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004100:	6234      	str	r4, [r6, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004102:	f001 fa9d 	bl	8005640 <HAL_I2C_Init>
 8004106:	0001      	movs	r1, r0
 8004108:	42a0      	cmp	r0, r4
 800410a:	d001      	beq.n	8004110 <main+0x100>
 800410c:	b672      	cpsid	i
  while (1)
 800410e:	e7fe      	b.n	800410e <main+0xfe>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004110:	0030      	movs	r0, r6
 8004112:	f001 fc0f 	bl	8005934 <HAL_I2CEx_ConfigAnalogFilter>
 8004116:	1e01      	subs	r1, r0, #0
 8004118:	d001      	beq.n	800411e <main+0x10e>
 800411a:	b672      	cpsid	i
  while (1)
 800411c:	e7fe      	b.n	800411c <main+0x10c>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800411e:	0030      	movs	r0, r6
 8004120:	f001 fc2e 	bl	8005980 <HAL_I2CEx_ConfigDigitalFilter>
 8004124:	1e04      	subs	r4, r0, #0
 8004126:	d001      	beq.n	800412c <main+0x11c>
 8004128:	b672      	cpsid	i
  while (1)
 800412a:	e7fe      	b.n	800412a <main+0x11a>
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(I2C_FASTMODEPLUS_I2C1);
 800412c:	4a3a      	ldr	r2, [pc, #232]	; (8004218 <main+0x208>)
 800412e:	4b3b      	ldr	r3, [pc, #236]	; (800421c <main+0x20c>)
 8004130:	6811      	ldr	r1, [r2, #0]
 8004132:	430b      	orrs	r3, r1
 8004134:	6013      	str	r3, [r2, #0]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004136:	0001      	movs	r1, r0
 8004138:	2208      	movs	r2, #8
 800413a:	a809      	add	r0, sp, #36	; 0x24
 800413c:	f002 f933 	bl	80063a6 <memset>
  htim6.Instance = TIM6;
 8004140:	4e37      	ldr	r6, [pc, #220]	; (8004220 <main+0x210>)
 8004142:	4b38      	ldr	r3, [pc, #224]	; (8004224 <main+0x214>)
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004144:	0030      	movs	r0, r6
  htim6.Instance = TIM6;
 8004146:	6033      	str	r3, [r6, #0]
  htim6.Init.Prescaler = 48000-1;
 8004148:	4b37      	ldr	r3, [pc, #220]	; (8004228 <main+0x218>)
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800414a:	60b4      	str	r4, [r6, #8]
  htim6.Init.Prescaler = 48000-1;
 800414c:	6073      	str	r3, [r6, #4]
  htim6.Init.Period = 5-1;
 800414e:	2304      	movs	r3, #4
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004150:	61b4      	str	r4, [r6, #24]
  htim6.Init.Period = 5-1;
 8004152:	60f3      	str	r3, [r6, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004154:	f002 f898 	bl	8006288 <HAL_TIM_Base_Init>
 8004158:	2800      	cmp	r0, #0
 800415a:	d001      	beq.n	8004160 <main+0x150>
 800415c:	b672      	cpsid	i
  while (1)
 800415e:	e7fe      	b.n	800415e <main+0x14e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004160:	9009      	str	r0, [sp, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004162:	900a      	str	r0, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004164:	a909      	add	r1, sp, #36	; 0x24
 8004166:	0030      	movs	r0, r6
 8004168:	f002 f8b6 	bl	80062d8 <HAL_TIMEx_MasterConfigSynchronization>
 800416c:	1e01      	subs	r1, r0, #0
 800416e:	d001      	beq.n	8004174 <main+0x164>
 8004170:	b672      	cpsid	i
  while (1)
 8004172:	e7fe      	b.n	8004172 <main+0x162>
  DAC_ChannelConfTypeDef sConfig = {0};
 8004174:	2208      	movs	r2, #8
 8004176:	a809      	add	r0, sp, #36	; 0x24
 8004178:	f002 f915 	bl	80063a6 <memset>
  hdac1.Instance = DAC;
 800417c:	4c2b      	ldr	r4, [pc, #172]	; (800422c <main+0x21c>)
 800417e:	4b2c      	ldr	r3, [pc, #176]	; (8004230 <main+0x220>)
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8004180:	0020      	movs	r0, r4
  hdac1.Instance = DAC;
 8004182:	6023      	str	r3, [r4, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8004184:	f000 fe8a 	bl	8004e9c <HAL_DAC_Init>
 8004188:	1e02      	subs	r2, r0, #0
 800418a:	d001      	beq.n	8004190 <main+0x180>
 800418c:	b672      	cpsid	i
  while (1)
 800418e:	e7fe      	b.n	800418e <main+0x17e>
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8004190:	9009      	str	r0, [sp, #36]	; 0x24
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8004192:	900a      	str	r0, [sp, #40]	; 0x28
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8004194:	a909      	add	r1, sp, #36	; 0x24
 8004196:	0020      	movs	r0, r4
 8004198:	f000 fea7 	bl	8004eea <HAL_DAC_ConfigChannel>
 800419c:	1e07      	subs	r7, r0, #0
 800419e:	d001      	beq.n	80041a4 <main+0x194>
 80041a0:	b672      	cpsid	i
  while (1)
 80041a2:	e7fe      	b.n	80041a2 <main+0x192>
  ADC_ChannelConfTypeDef sConfig = {0};
 80041a4:	0001      	movs	r1, r0
 80041a6:	220c      	movs	r2, #12
 80041a8:	a809      	add	r0, sp, #36	; 0x24
 80041aa:	f002 f8fc 	bl	80063a6 <memset>
  hadc.Instance = ADC1;
 80041ae:	4c21      	ldr	r4, [pc, #132]	; (8004234 <main+0x224>)
 80041b0:	4b21      	ldr	r3, [pc, #132]	; (8004238 <main+0x228>)
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80041b2:	0020      	movs	r0, r4
  hadc.Instance = ADC1;
 80041b4:	6023      	str	r3, [r4, #0]
  hadc.Init.Resolution = ADC_RESOLUTION_8B;
 80041b6:	2310      	movs	r3, #16
 80041b8:	60a3      	str	r3, [r4, #8]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80041ba:	3b0c      	subs	r3, #12
 80041bc:	6163      	str	r3, [r4, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80041be:	2380      	movs	r3, #128	; 0x80
 80041c0:	025b      	lsls	r3, r3, #9
 80041c2:	61a3      	str	r3, [r4, #24]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80041c4:	23c2      	movs	r3, #194	; 0xc2
 80041c6:	33ff      	adds	r3, #255	; 0xff
 80041c8:	61e3      	str	r3, [r4, #28]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80041ca:	1d63      	adds	r3, r4, #5
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80041cc:	6067      	str	r7, [r4, #4]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80041ce:	60e7      	str	r7, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80041d0:	6125      	str	r5, [r4, #16]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80041d2:	6227      	str	r7, [r4, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80041d4:	77df      	strb	r7, [r3, #31]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80041d6:	62a5      	str	r5, [r4, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80041d8:	f000 fcb2 	bl	8004b40 <HAL_ADC_Init>
 80041dc:	2800      	cmp	r0, #0
 80041de:	d001      	beq.n	80041e4 <main+0x1d4>
 80041e0:	b672      	cpsid	i
  while (1)
 80041e2:	e7fe      	b.n	80041e2 <main+0x1d2>
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80041e4:	2380      	movs	r3, #128	; 0x80
 80041e6:	015b      	lsls	r3, r3, #5
 80041e8:	930a      	str	r3, [sp, #40]	; 0x28
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80041ea:	2306      	movs	r3, #6
  sConfig.Channel = ADC_CHANNEL_0;
 80041ec:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80041ee:	a909      	add	r1, sp, #36	; 0x24
 80041f0:	0020      	movs	r0, r4
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80041f2:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80041f4:	f000 fd7c 	bl	8004cf0 <HAL_ADC_ConfigChannel>
 80041f8:	1e04      	subs	r4, r0, #0
 80041fa:	d01f      	beq.n	800423c <main+0x22c>
 80041fc:	b672      	cpsid	i
  while (1)
 80041fe:	e7fe      	b.n	80041fe <main+0x1ee>
 8004200:	40021000 	.word	0x40021000
 8004204:	48001400 	.word	0x48001400
 8004208:	48000400 	.word	0x48000400
 800420c:	200006bc 	.word	0x200006bc
 8004210:	40005400 	.word	0x40005400
 8004214:	20000209 	.word	0x20000209
 8004218:	40010000 	.word	0x40010000
 800421c:	aaaa0100 	.word	0xaaaa0100
 8004220:	20000710 	.word	0x20000710
 8004224:	40001000 	.word	0x40001000
 8004228:	0000bb7f 	.word	0x0000bb7f
 800422c:	200006a8 	.word	0x200006a8
 8004230:	40007400 	.word	0x40007400
 8004234:	20000668 	.word	0x20000668
 8004238:	40012400 	.word	0x40012400
  HAL_TIM_Base_Start_IT(&htim6);
 800423c:	0030      	movs	r0, r6
 800423e:	f001 fefb 	bl	8006038 <HAL_TIM_Base_Start_IT>
  ee_read(0, sizeof(float), (uint8_t*)&valor_Encoder);//leo el valor de la eeprom
 8004242:	2104      	movs	r1, #4
 8004244:	4add      	ldr	r2, [pc, #884]	; (80045bc <main+0x5ac>)
 8004246:	0020      	movs	r0, r4
 8004248:	f7ff fc4c 	bl	8003ae4 <ee_read>
  OLED_Init();
 800424c:	f7ff fa50 	bl	80036f0 <OLED_Init>
  OLED_Imagen(AM_INTRO);
 8004250:	48db      	ldr	r0, [pc, #876]	; (80045c0 <main+0x5b0>)
 8004252:	f7ff fb60 	bl	8003916 <OLED_Imagen>
  OLED_Print_Text(7,0,1,"Designed by G. Anglas");
 8004256:	0021      	movs	r1, r4
 8004258:	002a      	movs	r2, r5
 800425a:	2007      	movs	r0, #7
  while(HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin));
 800425c:	2490      	movs	r4, #144	; 0x90
  OLED_Print_Text(7,0,1,"Designed by G. Anglas");
 800425e:	4bd9      	ldr	r3, [pc, #868]	; (80045c4 <main+0x5b4>)
 8004260:	f7ff fb2a 	bl	80038b8 <OLED_Print_Text>
  while(HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin));
 8004264:	05e4      	lsls	r4, r4, #23
 8004266:	2180      	movs	r1, #128	; 0x80
 8004268:	0020      	movs	r0, r4
 800426a:	00c9      	lsls	r1, r1, #3
 800426c:	f001 f85a 	bl	8005324 <HAL_GPIO_ReadPin>
 8004270:	9003      	str	r0, [sp, #12]
 8004272:	2800      	cmp	r0, #0
 8004274:	d1f7      	bne.n	8004266 <main+0x256>
  OLED_Clear();
 8004276:	f7ff fa13 	bl	80036a0 <OLED_Clear>
  INA226_Init(3000,25,AVG_128,T_Vbus_588us,T_Vshunt_588us,MODE_SHUNT_BUS_CONTINUOUS);
 800427a:	2403      	movs	r4, #3
 800427c:	2307      	movs	r3, #7
 800427e:	2204      	movs	r2, #4
 8004280:	2119      	movs	r1, #25
 8004282:	48d1      	ldr	r0, [pc, #836]	; (80045c8 <main+0x5b8>)
 8004284:	9301      	str	r3, [sp, #4]
 8004286:	9400      	str	r4, [sp, #0]
 8004288:	0023      	movs	r3, r4
 800428a:	f7ff f89d 	bl	80033c8 <INA226_Init>
  OLED_Print_Text(3,104,2,"OFF");
 800428e:	2202      	movs	r2, #2
 8004290:	2168      	movs	r1, #104	; 0x68
 8004292:	0020      	movs	r0, r4
 8004294:	4bcd      	ldr	r3, [pc, #820]	; (80045cc <main+0x5bc>)
 8004296:	f7ff fb0f 	bl	80038b8 <OLED_Print_Text>
  OLED_Print_Text(2,104,1,"0.1");
 800429a:	2201      	movs	r2, #1
 800429c:	2168      	movs	r1, #104	; 0x68
 800429e:	2002      	movs	r0, #2
 80042a0:	4bcb      	ldr	r3, [pc, #812]	; (80045d0 <main+0x5c0>)
 80042a2:	f7ff fb09 	bl	80038b8 <OLED_Print_Text>
          suma=2;  //cambio el contador para que solo haga una vez todo lo que esta dentro del if
 80042a6:	2602      	movs	r6, #2
	  if(HAL_GPIO_ReadPin(stateCharger_GPIO_Port, stateCharger_Pin)==1){//Cuando se conecta el cargador
 80042a8:	2780      	movs	r7, #128	; 0x80
 80042aa:	00ff      	lsls	r7, r7, #3
 80042ac:	0039      	movs	r1, r7
 80042ae:	48c9      	ldr	r0, [pc, #804]	; (80045d4 <main+0x5c4>)
 80042b0:	f001 f838 	bl	8005324 <HAL_GPIO_ReadPin>
 80042b4:	2801      	cmp	r0, #1
 80042b6:	d104      	bne.n	80042c2 <main+0x2b2>
		  OLED_Print_Text(1,104,1,"ON ");
 80042b8:	0002      	movs	r2, r0
 80042ba:	2168      	movs	r1, #104	; 0x68
 80042bc:	4bc6      	ldr	r3, [pc, #792]	; (80045d8 <main+0x5c8>)
 80042be:	f7ff fafb 	bl	80038b8 <OLED_Print_Text>
      if(HAL_GPIO_ReadPin(SW_GPIO_Port, SW_Pin) == 0 && mem == 0){mem = 1;}
 80042c2:	2180      	movs	r1, #128	; 0x80
 80042c4:	48c3      	ldr	r0, [pc, #780]	; (80045d4 <main+0x5c4>)
 80042c6:	f001 f82d 	bl	8005324 <HAL_GPIO_ReadPin>
 80042ca:	4dc4      	ldr	r5, [pc, #784]	; (80045dc <main+0x5cc>)
 80042cc:	782b      	ldrb	r3, [r5, #0]
 80042ce:	4318      	orrs	r0, r3
 80042d0:	b2c0      	uxtb	r0, r0
 80042d2:	2800      	cmp	r0, #0
 80042d4:	d101      	bne.n	80042da <main+0x2ca>
 80042d6:	2301      	movs	r3, #1
 80042d8:	702b      	strb	r3, [r5, #0]
      if(HAL_GPIO_ReadPin(SW_GPIO_Port, SW_Pin) == 1 && mem == 1){suma++; mem = 0;}
 80042da:	2180      	movs	r1, #128	; 0x80
 80042dc:	48bd      	ldr	r0, [pc, #756]	; (80045d4 <main+0x5c4>)
 80042de:	f001 f821 	bl	8005324 <HAL_GPIO_ReadPin>
 80042e2:	4cbf      	ldr	r4, [pc, #764]	; (80045e0 <main+0x5d0>)
 80042e4:	2801      	cmp	r0, #1
 80042e6:	d107      	bne.n	80042f8 <main+0x2e8>
 80042e8:	782b      	ldrb	r3, [r5, #0]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d104      	bne.n	80042f8 <main+0x2e8>
 80042ee:	7823      	ldrb	r3, [r4, #0]
 80042f0:	3301      	adds	r3, #1
 80042f2:	7023      	strb	r3, [r4, #0]
 80042f4:	9b03      	ldr	r3, [sp, #12]
 80042f6:	702b      	strb	r3, [r5, #0]
      if(suma==1){
 80042f8:	7822      	ldrb	r2, [r4, #0]
 80042fa:	2a01      	cmp	r2, #1
 80042fc:	d109      	bne.n	8004312 <main+0x302>
          paso_Encoder = 1.0;
 80042fe:	21fe      	movs	r1, #254	; 0xfe
 8004300:	4bb8      	ldr	r3, [pc, #736]	; (80045e4 <main+0x5d4>)
 8004302:	0589      	lsls	r1, r1, #22
 8004304:	6019      	str	r1, [r3, #0]
          OLED_Print_Text(2,104,1,"1.0");
 8004306:	2002      	movs	r0, #2
 8004308:	2168      	movs	r1, #104	; 0x68
 800430a:	4bb7      	ldr	r3, [pc, #732]	; (80045e8 <main+0x5d8>)
          suma=2;  //cambio el contador para que solo haga una vez todo lo que esta dentro del if
 800430c:	7026      	strb	r6, [r4, #0]
          OLED_Print_Text(2,104,1,"1.0");
 800430e:	f7ff fad3 	bl	80038b8 <OLED_Print_Text>
      if(suma==3){
 8004312:	7823      	ldrb	r3, [r4, #0]
 8004314:	2b03      	cmp	r3, #3
 8004316:	d10a      	bne.n	800432e <main+0x31e>
          suma=0; //cambio el contador para que solo haga una vez todo lo que esta dentro del if
 8004318:	9b03      	ldr	r3, [sp, #12]
          paso_Encoder = 0.1;
 800431a:	4ab4      	ldr	r2, [pc, #720]	; (80045ec <main+0x5dc>)
          suma=0; //cambio el contador para que solo haga una vez todo lo que esta dentro del if
 800431c:	7023      	strb	r3, [r4, #0]
          paso_Encoder = 0.1;
 800431e:	4bb1      	ldr	r3, [pc, #708]	; (80045e4 <main+0x5d4>)
          OLED_Print_Text(2,104,1,"0.1");
 8004320:	2168      	movs	r1, #104	; 0x68
          paso_Encoder = 0.1;
 8004322:	601a      	str	r2, [r3, #0]
          OLED_Print_Text(2,104,1,"0.1");
 8004324:	0030      	movs	r0, r6
 8004326:	2201      	movs	r2, #1
 8004328:	4ba9      	ldr	r3, [pc, #676]	; (80045d0 <main+0x5c0>)
 800432a:	f7ff fac5 	bl	80038b8 <OLED_Print_Text>
      if(HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin) == 0){
 800432e:	2090      	movs	r0, #144	; 0x90
 8004330:	0039      	movs	r1, r7
 8004332:	05c0      	lsls	r0, r0, #23
 8004334:	f000 fff6 	bl	8005324 <HAL_GPIO_ReadPin>
 8004338:	4cad      	ldr	r4, [pc, #692]	; (80045f0 <main+0x5e0>)
 800433a:	2800      	cmp	r0, #0
 800433c:	d107      	bne.n	800434e <main+0x33e>
    	  contButton++;
 800433e:	4aad      	ldr	r2, [pc, #692]	; (80045f4 <main+0x5e4>)
 8004340:	8813      	ldrh	r3, [r2, #0]
 8004342:	3301      	adds	r3, #1
 8004344:	b29b      	uxth	r3, r3
    	  if(contButton>15){// 1.5seg aprox
 8004346:	2b0f      	cmp	r3, #15
 8004348:	d900      	bls.n	800434c <main+0x33c>
 800434a:	e113      	b.n	8004574 <main+0x564>
    	  contButton++;
 800434c:	8013      	strh	r3, [r2, #0]
      if(HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin) == 1 && contButton>0){contButton=0;}
 800434e:	2090      	movs	r0, #144	; 0x90
 8004350:	0039      	movs	r1, r7
 8004352:	05c0      	lsls	r0, r0, #23
 8004354:	f000 ffe6 	bl	8005324 <HAL_GPIO_ReadPin>
 8004358:	2801      	cmp	r0, #1
 800435a:	d105      	bne.n	8004368 <main+0x358>
 800435c:	4ba5      	ldr	r3, [pc, #660]	; (80045f4 <main+0x5e4>)
 800435e:	881a      	ldrh	r2, [r3, #0]
 8004360:	2a00      	cmp	r2, #0
 8004362:	d001      	beq.n	8004368 <main+0x358>
 8004364:	9a03      	ldr	r2, [sp, #12]
 8004366:	801a      	strh	r2, [r3, #0]
      if(powerSupply==1){
 8004368:	7825      	ldrb	r5, [r4, #0]
 800436a:	2d01      	cmp	r5, #1
 800436c:	d119      	bne.n	80043a2 <main+0x392>
    	  OLED_Print_Text(3,104,2,"ON ");
 800436e:	4b9a      	ldr	r3, [pc, #616]	; (80045d8 <main+0x5c8>)
 8004370:	2202      	movs	r2, #2
 8004372:	2168      	movs	r1, #104	; 0x68
 8004374:	2003      	movs	r0, #3
    	  powerSupply=2;
 8004376:	7026      	strb	r6, [r4, #0]
    	  OLED_Print_Text(3,104,2,"ON ");
 8004378:	f7ff fa9e 	bl	80038b8 <OLED_Print_Text>
    	  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
 800437c:	002a      	movs	r2, r5
 800437e:	2180      	movs	r1, #128	; 0x80
 8004380:	489d      	ldr	r0, [pc, #628]	; (80045f8 <main+0x5e8>)
 8004382:	f000 ffd5 	bl	8005330 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(EN_XL6019_GPIO_Port, EN_XL6019_Pin, SET);
 8004386:	2180      	movs	r1, #128	; 0x80
 8004388:	2090      	movs	r0, #144	; 0x90
 800438a:	002a      	movs	r2, r5
 800438c:	0049      	lsls	r1, r1, #1
 800438e:	05c0      	lsls	r0, r0, #23
 8004390:	f000 ffce 	bl	8005330 <HAL_GPIO_WritePin>
    	  ee_writeToRam(0, sizeof(float), (uint8_t*)&valor_Encoder);//escribo en al eeprom
 8004394:	2104      	movs	r1, #4
 8004396:	4a89      	ldr	r2, [pc, #548]	; (80045bc <main+0x5ac>)
 8004398:	2000      	movs	r0, #0
 800439a:	f7ff fbbf 	bl	8003b1c <ee_writeToRam>
    	  ee_commit();
 800439e:	f7ff fbd3 	bl	8003b48 <ee_commit>
      if(powerSupply==3){
 80043a2:	7820      	ldrb	r0, [r4, #0]
 80043a4:	2803      	cmp	r0, #3
 80043a6:	d115      	bne.n	80043d4 <main+0x3c4>
    	  powerSupply=0;
 80043a8:	9b03      	ldr	r3, [sp, #12]
    	  OLED_Print_Text(3,104,2,"OFF");
 80043aa:	0032      	movs	r2, r6
 80043ac:	2168      	movs	r1, #104	; 0x68
    	  powerSupply=0;
 80043ae:	7023      	strb	r3, [r4, #0]
    	  OLED_Print_Text(3,104,2,"OFF");
 80043b0:	4b86      	ldr	r3, [pc, #536]	; (80045cc <main+0x5bc>)
 80043b2:	f7ff fa81 	bl	80038b8 <OLED_Print_Text>
    	  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 80043b6:	2200      	movs	r2, #0
 80043b8:	2180      	movs	r1, #128	; 0x80
 80043ba:	488f      	ldr	r0, [pc, #572]	; (80045f8 <main+0x5e8>)
 80043bc:	f000 ffb8 	bl	8005330 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(EN_XL6019_GPIO_Port, EN_XL6019_Pin, RESET);
 80043c0:	2180      	movs	r1, #128	; 0x80
 80043c2:	2090      	movs	r0, #144	; 0x90
 80043c4:	2200      	movs	r2, #0
 80043c6:	0049      	lsls	r1, r1, #1
 80043c8:	05c0      	lsls	r0, r0, #23
 80043ca:	f000 ffb1 	bl	8005330 <HAL_GPIO_WritePin>
    	  ENCO=0;//ver si eliminar esta linea
 80043ce:	2200      	movs	r2, #0
 80043d0:	4b8a      	ldr	r3, [pc, #552]	; (80045fc <main+0x5ec>)
 80043d2:	601a      	str	r2, [r3, #0]
      voltage = INA226_Vbus();//medimos el voltaje de salida
 80043d4:	f7ff f888 	bl	80034e8 <INA226_Vbus>
 80043d8:	4b89      	ldr	r3, [pc, #548]	; (8004600 <main+0x5f0>)
      sprintf(buff,"SET:%2.1fV ",VoutMath);
 80043da:	4c8a      	ldr	r4, [pc, #552]	; (8004604 <main+0x5f4>)
      voltage = INA226_Vbus();//medimos el voltaje de salida
 80043dc:	6018      	str	r0, [r3, #0]
      sprintf(buff,"SET:%2.1fV ",VoutMath);
 80043de:	6820      	ldr	r0, [r4, #0]
 80043e0:	f7fe feaa 	bl	8003138 <__aeabi_f2d>
 80043e4:	0002      	movs	r2, r0
 80043e6:	000b      	movs	r3, r1
 80043e8:	4887      	ldr	r0, [pc, #540]	; (8004608 <main+0x5f8>)
 80043ea:	4988      	ldr	r1, [pc, #544]	; (800460c <main+0x5fc>)
 80043ec:	f002 fc52 	bl	8006c94 <siprintf>
      OLED_Print_Text(0,0,2,buff);
 80043f0:	2100      	movs	r1, #0
 80043f2:	0032      	movs	r2, r6
 80043f4:	0008      	movs	r0, r1
 80043f6:	4b84      	ldr	r3, [pc, #528]	; (8004608 <main+0x5f8>)
 80043f8:	f7ff fa5e 	bl	80038b8 <OLED_Print_Text>
      Vdac = 3.17 - VoutMath*0.1;
 80043fc:	6820      	ldr	r0, [r4, #0]
 80043fe:	f7fe fe9b 	bl	8003138 <__aeabi_f2d>
 8004402:	4a83      	ldr	r2, [pc, #524]	; (8004610 <main+0x600>)
 8004404:	4b83      	ldr	r3, [pc, #524]	; (8004614 <main+0x604>)
 8004406:	f7fd ffef 	bl	80023e8 <__aeabi_dmul>
 800440a:	0002      	movs	r2, r0
 800440c:	000b      	movs	r3, r1
 800440e:	4882      	ldr	r0, [pc, #520]	; (8004618 <main+0x608>)
 8004410:	4982      	ldr	r1, [pc, #520]	; (800461c <main+0x60c>)
 8004412:	f7fe fa55 	bl	80028c0 <__aeabi_dsub>
 8004416:	f7fe fed7 	bl	80031c8 <__aeabi_d2f>
 800441a:	4b81      	ldr	r3, [pc, #516]	; (8004620 <main+0x610>)
 800441c:	6018      	str	r0, [r3, #0]
      encoder = Vdac * 4096.0/3.26;
 800441e:	f7fe fe8b 	bl	8003138 <__aeabi_f2d>
 8004422:	2200      	movs	r2, #0
 8004424:	4b7f      	ldr	r3, [pc, #508]	; (8004624 <main+0x614>)
 8004426:	f7fd ffdf 	bl	80023e8 <__aeabi_dmul>
 800442a:	4a7f      	ldr	r2, [pc, #508]	; (8004628 <main+0x618>)
 800442c:	4b7f      	ldr	r3, [pc, #508]	; (800462c <main+0x61c>)
 800442e:	f7fd fbd9 	bl	8001be4 <__aeabi_ddiv>
 8004432:	f7fe fec9 	bl	80031c8 <__aeabi_d2f>
      encoder = encoder - (0.000008*encoder*encoder+0.0243*encoder-15.563);
 8004436:	f7fe fe7f 	bl	8003138 <__aeabi_f2d>
 800443a:	0004      	movs	r4, r0
 800443c:	000d      	movs	r5, r1
 800443e:	4a7c      	ldr	r2, [pc, #496]	; (8004630 <main+0x620>)
 8004440:	4b7c      	ldr	r3, [pc, #496]	; (8004634 <main+0x624>)
 8004442:	f7fd ffd1 	bl	80023e8 <__aeabi_dmul>
 8004446:	0022      	movs	r2, r4
 8004448:	002b      	movs	r3, r5
 800444a:	f7fd ffcd 	bl	80023e8 <__aeabi_dmul>
 800444e:	4a7a      	ldr	r2, [pc, #488]	; (8004638 <main+0x628>)
 8004450:	9004      	str	r0, [sp, #16]
 8004452:	9105      	str	r1, [sp, #20]
 8004454:	4b79      	ldr	r3, [pc, #484]	; (800463c <main+0x62c>)
 8004456:	0020      	movs	r0, r4
 8004458:	0029      	movs	r1, r5
 800445a:	f7fd ffc5 	bl	80023e8 <__aeabi_dmul>
 800445e:	0002      	movs	r2, r0
 8004460:	000b      	movs	r3, r1
 8004462:	9804      	ldr	r0, [sp, #16]
 8004464:	9905      	ldr	r1, [sp, #20]
 8004466:	f7fd f881 	bl	800156c <__aeabi_dadd>
 800446a:	4a75      	ldr	r2, [pc, #468]	; (8004640 <main+0x630>)
 800446c:	4b75      	ldr	r3, [pc, #468]	; (8004644 <main+0x634>)
 800446e:	f7fe fa27 	bl	80028c0 <__aeabi_dsub>
 8004472:	0002      	movs	r2, r0
 8004474:	000b      	movs	r3, r1
 8004476:	0020      	movs	r0, r4
 8004478:	0029      	movs	r1, r5
 800447a:	f7fe fa21 	bl	80028c0 <__aeabi_dsub>
 800447e:	f7fe fea3 	bl	80031c8 <__aeabi_d2f>
 8004482:	4b71      	ldr	r3, [pc, #452]	; (8004648 <main+0x638>)
      for(uint8_t i=0; i<muestras; i++) adcVbat += HAL_ADC_GetValue(&hadc);//Leo 20 muestras del adc para tener una lectura mas precisa
 8004484:	2500      	movs	r5, #0
      encoder = encoder - (0.000008*encoder*encoder+0.0243*encoder-15.563);
 8004486:	6018      	str	r0, [r3, #0]
      Control_Estabilizar();
 8004488:	f7ff fc10 	bl	8003cac <Control_Estabilizar>
	  HAL_ADC_Start(&hadc);
 800448c:	486f      	ldr	r0, [pc, #444]	; (800464c <main+0x63c>)
 800448e:	f000 fbff 	bl	8004c90 <HAL_ADC_Start>
	  adcVbat=0;
 8004492:	2300      	movs	r3, #0
 8004494:	4c6e      	ldr	r4, [pc, #440]	; (8004650 <main+0x640>)
 8004496:	6023      	str	r3, [r4, #0]
      for(uint8_t i=0; i<muestras; i++) adcVbat += HAL_ADC_GetValue(&hadc);//Leo 20 muestras del adc para tener una lectura mas precisa
 8004498:	4b6e      	ldr	r3, [pc, #440]	; (8004654 <main+0x644>)
 800449a:	7818      	ldrb	r0, [r3, #0]
 800449c:	42a8      	cmp	r0, r5
 800449e:	d86e      	bhi.n	800457e <main+0x56e>
      adcVbat /= muestras;
 80044a0:	f7fc ffd4 	bl	800144c <__aeabi_i2f>
 80044a4:	1c01      	adds	r1, r0, #0
 80044a6:	6820      	ldr	r0, [r4, #0]
 80044a8:	f7fc fb14 	bl	8000ad4 <__aeabi_fdiv>
 80044ac:	6020      	str	r0, [r4, #0]
      Vbat = adcVbat*0.05826;//(3.3/2^8)*4.3 ------ divisor resistivo V*10k/(10K+33K) -> V = 4.3
 80044ae:	f7fe fe43 	bl	8003138 <__aeabi_f2d>
 80044b2:	4a69      	ldr	r2, [pc, #420]	; (8004658 <main+0x648>)
 80044b4:	4b69      	ldr	r3, [pc, #420]	; (800465c <main+0x64c>)
 80044b6:	f7fd ff97 	bl	80023e8 <__aeabi_dmul>
 80044ba:	f7fe fe85 	bl	80031c8 <__aeabi_d2f>
 80044be:	4c68      	ldr	r4, [pc, #416]	; (8004660 <main+0x650>)
      if(voltage <= 9.9) OLED_Print_Text(2,80,3," ");
 80044c0:	4b4f      	ldr	r3, [pc, #316]	; (8004600 <main+0x5f0>)
      Vbat = adcVbat*0.05826;//(3.3/2^8)*4.3 ------ divisor resistivo V*10k/(10K+33K) -> V = 4.3
 80044c2:	6020      	str	r0, [r4, #0]
      if(voltage <= 9.9) OLED_Print_Text(2,80,3," ");
 80044c4:	6818      	ldr	r0, [r3, #0]
 80044c6:	f7fe fe37 	bl	8003138 <__aeabi_f2d>
 80044ca:	4a66      	ldr	r2, [pc, #408]	; (8004664 <main+0x654>)
 80044cc:	4b66      	ldr	r3, [pc, #408]	; (8004668 <main+0x658>)
 80044ce:	f7fb ffd9 	bl	8000484 <__aeabi_dcmple>
 80044d2:	2800      	cmp	r0, #0
 80044d4:	d005      	beq.n	80044e2 <main+0x4d2>
 80044d6:	2203      	movs	r2, #3
 80044d8:	2150      	movs	r1, #80	; 0x50
 80044da:	0030      	movs	r0, r6
 80044dc:	4b63      	ldr	r3, [pc, #396]	; (800466c <main+0x65c>)
 80044de:	f7ff f9eb 	bl	80038b8 <OLED_Print_Text>
      if(contMillis>=100){//cada (Xms * 5) imprimo en el oled
 80044e2:	4b63      	ldr	r3, [pc, #396]	; (8004670 <main+0x660>)
 80044e4:	881b      	ldrh	r3, [r3, #0]
 80044e6:	2b63      	cmp	r3, #99	; 0x63
 80044e8:	d800      	bhi.n	80044ec <main+0x4dc>
 80044ea:	e6df      	b.n	80042ac <main+0x29c>
    	  if(Vbat>9 && Vbat<=9.9){
 80044ec:	6827      	ldr	r7, [r4, #0]
 80044ee:	1c38      	adds	r0, r7, #0
 80044f0:	f7fe fe22 	bl	8003138 <__aeabi_f2d>
 80044f4:	0004      	movs	r4, r0
 80044f6:	000d      	movs	r5, r1
 80044f8:	1c38      	adds	r0, r7, #0
 80044fa:	495e      	ldr	r1, [pc, #376]	; (8004674 <main+0x664>)
 80044fc:	f7fc f806 	bl	800050c <__aeabi_fcmpgt>
 8004500:	2800      	cmp	r0, #0
 8004502:	d048      	beq.n	8004596 <main+0x586>
 8004504:	0020      	movs	r0, r4
 8004506:	0029      	movs	r1, r5
 8004508:	4a56      	ldr	r2, [pc, #344]	; (8004664 <main+0x654>)
 800450a:	4b57      	ldr	r3, [pc, #348]	; (8004668 <main+0x658>)
 800450c:	f7fb ffba 	bl	8000484 <__aeabi_dcmple>
 8004510:	2800      	cmp	r0, #0
 8004512:	d040      	beq.n	8004596 <main+0x586>
    		  OLED_Imagen_Small(0, 96, bateria0, 32, 16);
 8004514:	2310      	movs	r3, #16
 8004516:	4a58      	ldr	r2, [pc, #352]	; (8004678 <main+0x668>)
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	18db      	adds	r3, r3, r3
    		  OLED_Imagen_Small(0, 96, bateria100, 32, 16);
 800451c:	2160      	movs	r1, #96	; 0x60
 800451e:	2000      	movs	r0, #0
 8004520:	f7ff fa0e 	bl	8003940 <OLED_Imagen_Small>
    	  if(voltage <= 9.9) OLED_Print_Text(2,80,3," ");
 8004524:	4b36      	ldr	r3, [pc, #216]	; (8004600 <main+0x5f0>)
 8004526:	6818      	ldr	r0, [r3, #0]
 8004528:	f7fe fe06 	bl	8003138 <__aeabi_f2d>
 800452c:	4a4d      	ldr	r2, [pc, #308]	; (8004664 <main+0x654>)
 800452e:	4b4e      	ldr	r3, [pc, #312]	; (8004668 <main+0x658>)
 8004530:	f7fb ffa8 	bl	8000484 <__aeabi_dcmple>
 8004534:	2800      	cmp	r0, #0
 8004536:	d005      	beq.n	8004544 <main+0x534>
 8004538:	2203      	movs	r2, #3
 800453a:	2150      	movs	r1, #80	; 0x50
 800453c:	0030      	movs	r0, r6
 800453e:	4b4b      	ldr	r3, [pc, #300]	; (800466c <main+0x65c>)
 8004540:	f7ff f9ba 	bl	80038b8 <OLED_Print_Text>
    	  sprintf(buff,"%2.1fV",voltage);
 8004544:	4b2e      	ldr	r3, [pc, #184]	; (8004600 <main+0x5f0>)
 8004546:	6818      	ldr	r0, [r3, #0]
 8004548:	f7fe fdf6 	bl	8003138 <__aeabi_f2d>
 800454c:	0002      	movs	r2, r0
 800454e:	000b      	movs	r3, r1
 8004550:	482d      	ldr	r0, [pc, #180]	; (8004608 <main+0x5f8>)
 8004552:	494a      	ldr	r1, [pc, #296]	; (800467c <main+0x66c>)
 8004554:	f002 fb9e 	bl	8006c94 <siprintf>
    	  OLED_Print_Text(2,0,3,buff);
 8004558:	2203      	movs	r2, #3
 800455a:	4b2b      	ldr	r3, [pc, #172]	; (8004608 <main+0x5f8>)
 800455c:	2100      	movs	r1, #0
 800455e:	0030      	movs	r0, r6
 8004560:	f7ff f9aa 	bl	80038b8 <OLED_Print_Text>
    	  medirCorriente();
 8004564:	f7ff fb54 	bl	8003c10 <medirCorriente>
    	  medirPotencia();
 8004568:	f7ff fb7a 	bl	8003c60 <medirPotencia>
    	  contMillis=0;
 800456c:	4b40      	ldr	r3, [pc, #256]	; (8004670 <main+0x660>)
 800456e:	9a03      	ldr	r2, [sp, #12]
 8004570:	801a      	strh	r2, [r3, #0]
 8004572:	e699      	b.n	80042a8 <main+0x298>
    		  powerSupply++;
 8004574:	7823      	ldrb	r3, [r4, #0]
    		  contButton=0;
 8004576:	8010      	strh	r0, [r2, #0]
    		  powerSupply++;
 8004578:	3301      	adds	r3, #1
 800457a:	7023      	strb	r3, [r4, #0]
 800457c:	e6e7      	b.n	800434e <main+0x33e>
      for(uint8_t i=0; i<muestras; i++) adcVbat += HAL_ADC_GetValue(&hadc);//Leo 20 muestras del adc para tener una lectura mas precisa
 800457e:	4833      	ldr	r0, [pc, #204]	; (800464c <main+0x63c>)
 8004580:	f000 fbb2 	bl	8004ce8 <HAL_ADC_GetValue>
 8004584:	f7fc ffb0 	bl	80014e8 <__aeabi_ui2f>
 8004588:	6821      	ldr	r1, [r4, #0]
 800458a:	f7fc f905 	bl	8000798 <__aeabi_fadd>
 800458e:	3501      	adds	r5, #1
 8004590:	6020      	str	r0, [r4, #0]
 8004592:	b2ed      	uxtb	r5, r5
 8004594:	e780      	b.n	8004498 <main+0x488>
    	  }else if(Vbat>9.9 && Vbat<=10.5){
 8004596:	0020      	movs	r0, r4
 8004598:	0029      	movs	r1, r5
 800459a:	4a32      	ldr	r2, [pc, #200]	; (8004664 <main+0x654>)
 800459c:	4b32      	ldr	r3, [pc, #200]	; (8004668 <main+0x658>)
 800459e:	f7fb ff7b 	bl	8000498 <__aeabi_dcmpgt>
 80045a2:	2800      	cmp	r0, #0
 80045a4:	d070      	beq.n	8004688 <main+0x678>
 80045a6:	4936      	ldr	r1, [pc, #216]	; (8004680 <main+0x670>)
 80045a8:	1c38      	adds	r0, r7, #0
 80045aa:	f7fb ffa5 	bl	80004f8 <__aeabi_fcmple>
 80045ae:	2800      	cmp	r0, #0
 80045b0:	d06a      	beq.n	8004688 <main+0x678>
    		  OLED_Imagen_Small(0, 96, bateria25, 32, 16);
 80045b2:	2310      	movs	r3, #16
 80045b4:	4a33      	ldr	r2, [pc, #204]	; (8004684 <main+0x674>)
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	18db      	adds	r3, r3, r3
 80045ba:	e7af      	b.n	800451c <main+0x50c>
 80045bc:	20000008 	.word	0x20000008
 80045c0:	0800b3e4 	.word	0x0800b3e4
 80045c4:	0800b3b2 	.word	0x0800b3b2
 80045c8:	00000bb8 	.word	0x00000bb8
 80045cc:	0800b3c8 	.word	0x0800b3c8
 80045d0:	0800b3cc 	.word	0x0800b3cc
 80045d4:	48000400 	.word	0x48000400
 80045d8:	0800b3d0 	.word	0x0800b3d0
 80045dc:	20000758 	.word	0x20000758
 80045e0:	20000761 	.word	0x20000761
 80045e4:	20000000 	.word	0x20000000
 80045e8:	0800b3d4 	.word	0x0800b3d4
 80045ec:	3dcccccd 	.word	0x3dcccccd
 80045f0:	20000760 	.word	0x20000760
 80045f4:	20000658 	.word	0x20000658
 80045f8:	48001400 	.word	0x48001400
 80045fc:	20000630 	.word	0x20000630
 8004600:	20000764 	.word	0x20000764
 8004604:	20000640 	.word	0x20000640
 8004608:	20000648 	.word	0x20000648
 800460c:	0800b3d8 	.word	0x0800b3d8
 8004610:	9999999a 	.word	0x9999999a
 8004614:	3fb99999 	.word	0x3fb99999
 8004618:	f5c28f5c 	.word	0xf5c28f5c
 800461c:	40095c28 	.word	0x40095c28
 8004620:	2000063c 	.word	0x2000063c
 8004624:	40b00000 	.word	0x40b00000
 8004628:	e147ae14 	.word	0xe147ae14
 800462c:	400a147a 	.word	0x400a147a
 8004630:	a0b5ed8d 	.word	0xa0b5ed8d
 8004634:	3ee0c6f7 	.word	0x3ee0c6f7
 8004638:	652bd3c3 	.word	0x652bd3c3
 800463c:	3f98e219 	.word	0x3f98e219
 8004640:	89374bc7 	.word	0x89374bc7
 8004644:	402f2041 	.word	0x402f2041
 8004648:	20000664 	.word	0x20000664
 800464c:	20000668 	.word	0x20000668
 8004650:	20000644 	.word	0x20000644
 8004654:	2000000c 	.word	0x2000000c
 8004658:	355475a3 	.word	0x355475a3
 800465c:	3fadd441 	.word	0x3fadd441
 8004660:	20000638 	.word	0x20000638
 8004664:	cccccccd 	.word	0xcccccccd
 8004668:	4023cccc 	.word	0x4023cccc
 800466c:	0800bb78 	.word	0x0800bb78
 8004670:	2000065a 	.word	0x2000065a
 8004674:	41100000 	.word	0x41100000
 8004678:	0800b7e4 	.word	0x0800b7e4
 800467c:	0800b38e 	.word	0x0800b38e
 8004680:	41280000 	.word	0x41280000
 8004684:	0800b864 	.word	0x0800b864
    	  }else if(Vbat>10.5 && Vbat<=11.1){
 8004688:	491f      	ldr	r1, [pc, #124]	; (8004708 <main+0x6f8>)
 800468a:	1c38      	adds	r0, r7, #0
 800468c:	f7fb ff3e 	bl	800050c <__aeabi_fcmpgt>
 8004690:	2800      	cmp	r0, #0
 8004692:	d00c      	beq.n	80046ae <main+0x69e>
 8004694:	0020      	movs	r0, r4
 8004696:	0029      	movs	r1, r5
 8004698:	4a1c      	ldr	r2, [pc, #112]	; (800470c <main+0x6fc>)
 800469a:	4b1d      	ldr	r3, [pc, #116]	; (8004710 <main+0x700>)
 800469c:	f7fb fef2 	bl	8000484 <__aeabi_dcmple>
 80046a0:	2800      	cmp	r0, #0
 80046a2:	d004      	beq.n	80046ae <main+0x69e>
    		  OLED_Imagen_Small(0, 96, bateria50, 32, 16);
 80046a4:	2310      	movs	r3, #16
 80046a6:	4a1b      	ldr	r2, [pc, #108]	; (8004714 <main+0x704>)
 80046a8:	9300      	str	r3, [sp, #0]
 80046aa:	18db      	adds	r3, r3, r3
 80046ac:	e736      	b.n	800451c <main+0x50c>
    	  }else if(Vbat>11.1 && Vbat<=11.7){
 80046ae:	0020      	movs	r0, r4
 80046b0:	0029      	movs	r1, r5
 80046b2:	4a16      	ldr	r2, [pc, #88]	; (800470c <main+0x6fc>)
 80046b4:	4b16      	ldr	r3, [pc, #88]	; (8004710 <main+0x700>)
 80046b6:	f7fb feef 	bl	8000498 <__aeabi_dcmpgt>
 80046ba:	2800      	cmp	r0, #0
 80046bc:	d00c      	beq.n	80046d8 <main+0x6c8>
 80046be:	0020      	movs	r0, r4
 80046c0:	0029      	movs	r1, r5
 80046c2:	4a15      	ldr	r2, [pc, #84]	; (8004718 <main+0x708>)
 80046c4:	4b15      	ldr	r3, [pc, #84]	; (800471c <main+0x70c>)
 80046c6:	f7fb fedd 	bl	8000484 <__aeabi_dcmple>
 80046ca:	2800      	cmp	r0, #0
 80046cc:	d004      	beq.n	80046d8 <main+0x6c8>
    		  OLED_Imagen_Small(0, 96, bateria75, 32, 16);
 80046ce:	2310      	movs	r3, #16
 80046d0:	4a13      	ldr	r2, [pc, #76]	; (8004720 <main+0x710>)
 80046d2:	9300      	str	r3, [sp, #0]
 80046d4:	18db      	adds	r3, r3, r3
 80046d6:	e721      	b.n	800451c <main+0x50c>
    	  }else if(Vbat>11.7 && Vbat<=12.6){
 80046d8:	0020      	movs	r0, r4
 80046da:	0029      	movs	r1, r5
 80046dc:	4a0e      	ldr	r2, [pc, #56]	; (8004718 <main+0x708>)
 80046de:	4b0f      	ldr	r3, [pc, #60]	; (800471c <main+0x70c>)
 80046e0:	f7fb feda 	bl	8000498 <__aeabi_dcmpgt>
 80046e4:	2800      	cmp	r0, #0
 80046e6:	d100      	bne.n	80046ea <main+0x6da>
 80046e8:	e71c      	b.n	8004524 <main+0x514>
 80046ea:	0020      	movs	r0, r4
 80046ec:	0029      	movs	r1, r5
 80046ee:	4a07      	ldr	r2, [pc, #28]	; (800470c <main+0x6fc>)
 80046f0:	4b0c      	ldr	r3, [pc, #48]	; (8004724 <main+0x714>)
 80046f2:	f7fb fec7 	bl	8000484 <__aeabi_dcmple>
 80046f6:	2800      	cmp	r0, #0
 80046f8:	d100      	bne.n	80046fc <main+0x6ec>
 80046fa:	e713      	b.n	8004524 <main+0x514>
    		  OLED_Imagen_Small(0, 96, bateria100, 32, 16);
 80046fc:	2310      	movs	r3, #16
 80046fe:	4a0a      	ldr	r2, [pc, #40]	; (8004728 <main+0x718>)
 8004700:	9300      	str	r3, [sp, #0]
 8004702:	18db      	adds	r3, r3, r3
 8004704:	e70a      	b.n	800451c <main+0x50c>
 8004706:	46c0      	nop			; (mov r8, r8)
 8004708:	41280000 	.word	0x41280000
 800470c:	33333333 	.word	0x33333333
 8004710:	40263333 	.word	0x40263333
 8004714:	0800b8a4 	.word	0x0800b8a4
 8004718:	66666666 	.word	0x66666666
 800471c:	40276666 	.word	0x40276666
 8004720:	0800b8e4 	.word	0x0800b8e4
 8004724:	40293333 	.word	0x40293333
 8004728:	0800b824 	.word	0x0800b824

0800472c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800472c:	2001      	movs	r0, #1
 800472e:	4b0a      	ldr	r3, [pc, #40]	; (8004758 <HAL_MspInit+0x2c>)
{
 8004730:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004732:	6999      	ldr	r1, [r3, #24]
 8004734:	4301      	orrs	r1, r0
 8004736:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004738:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800473a:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 800473c:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800473e:	4002      	ands	r2, r0
 8004740:	9200      	str	r2, [sp, #0]
 8004742:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004744:	69da      	ldr	r2, [r3, #28]
 8004746:	430a      	orrs	r2, r1
 8004748:	61da      	str	r2, [r3, #28]
 800474a:	69db      	ldr	r3, [r3, #28]
 800474c:	400b      	ands	r3, r1
 800474e:	9301      	str	r3, [sp, #4]
 8004750:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004752:	b002      	add	sp, #8
 8004754:	4770      	bx	lr
 8004756:	46c0      	nop			; (mov r8, r8)
 8004758:	40021000 	.word	0x40021000

0800475c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800475c:	b510      	push	{r4, lr}
 800475e:	0004      	movs	r4, r0
 8004760:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004762:	2214      	movs	r2, #20
 8004764:	2100      	movs	r1, #0
 8004766:	a803      	add	r0, sp, #12
 8004768:	f001 fe1d 	bl	80063a6 <memset>
  if(hadc->Instance==ADC1)
 800476c:	4b10      	ldr	r3, [pc, #64]	; (80047b0 <HAL_ADC_MspInit+0x54>)
 800476e:	6822      	ldr	r2, [r4, #0]
 8004770:	429a      	cmp	r2, r3
 8004772:	d11b      	bne.n	80047ac <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004774:	2080      	movs	r0, #128	; 0x80
 8004776:	4b0f      	ldr	r3, [pc, #60]	; (80047b4 <HAL_ADC_MspInit+0x58>)
 8004778:	0080      	lsls	r0, r0, #2
 800477a:	6999      	ldr	r1, [r3, #24]
 800477c:	4301      	orrs	r1, r0
 800477e:	6199      	str	r1, [r3, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004780:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004782:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004784:	0289      	lsls	r1, r1, #10
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004786:	4002      	ands	r2, r0
 8004788:	9201      	str	r2, [sp, #4]
 800478a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800478c:	695a      	ldr	r2, [r3, #20]
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800478e:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004790:	430a      	orrs	r2, r1
 8004792:	615a      	str	r2, [r3, #20]
 8004794:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004796:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004798:	400b      	ands	r3, r1
 800479a:	9302      	str	r3, [sp, #8]
 800479c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800479e:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047a0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80047a2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047a4:	3302      	adds	r3, #2
 80047a6:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047a8:	f000 fd06 	bl	80051b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80047ac:	b008      	add	sp, #32
 80047ae:	bd10      	pop	{r4, pc}
 80047b0:	40012400 	.word	0x40012400
 80047b4:	40021000 	.word	0x40021000

080047b8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80047b8:	b510      	push	{r4, lr}
 80047ba:	0004      	movs	r4, r0
 80047bc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047be:	2214      	movs	r2, #20
 80047c0:	2100      	movs	r1, #0
 80047c2:	a803      	add	r0, sp, #12
 80047c4:	f001 fdef 	bl	80063a6 <memset>
  if(hdac->Instance==DAC)
 80047c8:	4b14      	ldr	r3, [pc, #80]	; (800481c <HAL_DAC_MspInit+0x64>)
 80047ca:	6822      	ldr	r2, [r4, #0]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d123      	bne.n	8004818 <HAL_DAC_MspInit+0x60>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80047d0:	2080      	movs	r0, #128	; 0x80
 80047d2:	4b13      	ldr	r3, [pc, #76]	; (8004820 <HAL_DAC_MspInit+0x68>)
 80047d4:	0580      	lsls	r0, r0, #22
 80047d6:	69d9      	ldr	r1, [r3, #28]
 80047d8:	4301      	orrs	r1, r0
 80047da:	61d9      	str	r1, [r3, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047dc:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_DAC1_CLK_ENABLE();
 80047de:	69da      	ldr	r2, [r3, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047e0:	0289      	lsls	r1, r1, #10
    __HAL_RCC_DAC1_CLK_ENABLE();
 80047e2:	4002      	ands	r2, r0
 80047e4:	9201      	str	r2, [sp, #4]
 80047e6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047e8:	695a      	ldr	r2, [r3, #20]
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047ea:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047ec:	430a      	orrs	r2, r1
 80047ee:	615a      	str	r2, [r3, #20]
 80047f0:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047f2:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047f4:	400b      	ands	r3, r1
 80047f6:	9302      	str	r3, [sp, #8]
 80047f8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80047fa:	2310      	movs	r3, #16
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047fc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80047fe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004800:	3b0d      	subs	r3, #13
 8004802:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004804:	f000 fcd8 	bl	80051b8 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004808:	2200      	movs	r2, #0
 800480a:	2011      	movs	r0, #17
 800480c:	0011      	movs	r1, r2
 800480e:	f000 faf5 	bl	8004dfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004812:	2011      	movs	r0, #17
 8004814:	f000 fb1c 	bl	8004e50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8004818:	b008      	add	sp, #32
 800481a:	bd10      	pop	{r4, pc}
 800481c:	40007400 	.word	0x40007400
 8004820:	40021000 	.word	0x40021000

08004824 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004824:	b510      	push	{r4, lr}
 8004826:	0004      	movs	r4, r0
 8004828:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800482a:	2214      	movs	r2, #20
 800482c:	2100      	movs	r1, #0
 800482e:	a803      	add	r0, sp, #12
 8004830:	f001 fdb9 	bl	80063a6 <memset>
  if(hi2c->Instance==I2C1)
 8004834:	4b12      	ldr	r3, [pc, #72]	; (8004880 <HAL_I2C_MspInit+0x5c>)
 8004836:	6822      	ldr	r2, [r4, #0]
 8004838:	429a      	cmp	r2, r3
 800483a:	d11f      	bne.n	800487c <HAL_I2C_MspInit+0x58>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800483c:	2180      	movs	r1, #128	; 0x80
 800483e:	4c11      	ldr	r4, [pc, #68]	; (8004884 <HAL_I2C_MspInit+0x60>)
 8004840:	02c9      	lsls	r1, r1, #11
 8004842:	6962      	ldr	r2, [r4, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004844:	4810      	ldr	r0, [pc, #64]	; (8004888 <HAL_I2C_MspInit+0x64>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004846:	430a      	orrs	r2, r1
 8004848:	6162      	str	r2, [r4, #20]
 800484a:	6963      	ldr	r3, [r4, #20]
 800484c:	400b      	ands	r3, r1
 800484e:	9301      	str	r3, [sp, #4]
 8004850:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004852:	23c0      	movs	r3, #192	; 0xc0
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004858:	2312      	movs	r3, #18
 800485a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800485c:	3b0f      	subs	r3, #15
 800485e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004860:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8004862:	3b02      	subs	r3, #2
 8004864:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004866:	f000 fca7 	bl	80051b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800486a:	2180      	movs	r1, #128	; 0x80
 800486c:	69e2      	ldr	r2, [r4, #28]
 800486e:	0389      	lsls	r1, r1, #14
 8004870:	430a      	orrs	r2, r1
 8004872:	61e2      	str	r2, [r4, #28]
 8004874:	69e3      	ldr	r3, [r4, #28]
 8004876:	400b      	ands	r3, r1
 8004878:	9302      	str	r3, [sp, #8]
 800487a:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800487c:	b008      	add	sp, #32
 800487e:	bd10      	pop	{r4, pc}
 8004880:	40005400 	.word	0x40005400
 8004884:	40021000 	.word	0x40021000
 8004888:	48000400 	.word	0x48000400

0800488c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800488c:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM6)
 800488e:	4b0b      	ldr	r3, [pc, #44]	; (80048bc <HAL_TIM_Base_MspInit+0x30>)
 8004890:	6802      	ldr	r2, [r0, #0]
 8004892:	429a      	cmp	r2, r3
 8004894:	d110      	bne.n	80048b8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004896:	2010      	movs	r0, #16
 8004898:	4a09      	ldr	r2, [pc, #36]	; (80048c0 <HAL_TIM_Base_MspInit+0x34>)
 800489a:	69d1      	ldr	r1, [r2, #28]
 800489c:	4301      	orrs	r1, r0
 800489e:	61d1      	str	r1, [r2, #28]
 80048a0:	69d3      	ldr	r3, [r2, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80048a2:	2200      	movs	r2, #0
    __HAL_RCC_TIM6_CLK_ENABLE();
 80048a4:	4003      	ands	r3, r0
 80048a6:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80048a8:	3001      	adds	r0, #1
 80048aa:	0011      	movs	r1, r2
    __HAL_RCC_TIM6_CLK_ENABLE();
 80048ac:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80048ae:	f000 faa5 	bl	8004dfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80048b2:	2011      	movs	r0, #17
 80048b4:	f000 facc 	bl	8004e50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80048b8:	bd07      	pop	{r0, r1, r2, pc}
 80048ba:	46c0      	nop			; (mov r8, r8)
 80048bc:	40001000 	.word	0x40001000
 80048c0:	40021000 	.word	0x40021000

080048c4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80048c4:	e7fe      	b.n	80048c4 <NMI_Handler>

080048c6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80048c6:	e7fe      	b.n	80048c6 <HardFault_Handler>

080048c8 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80048c8:	4770      	bx	lr

080048ca <PendSV_Handler>:
 80048ca:	4770      	bx	lr

080048cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80048cc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80048ce:	f000 f8c3 	bl	8004a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80048d2:	bd10      	pop	{r4, pc}

080048d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80048d4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80048d6:	4803      	ldr	r0, [pc, #12]	; (80048e4 <TIM6_DAC_IRQHandler+0x10>)
 80048d8:	f001 fbe2 	bl	80060a0 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 80048dc:	4802      	ldr	r0, [pc, #8]	; (80048e8 <TIM6_DAC_IRQHandler+0x14>)
 80048de:	f000 fb3b 	bl	8004f58 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80048e2:	bd10      	pop	{r4, pc}
 80048e4:	20000710 	.word	0x20000710
 80048e8:	200006a8 	.word	0x200006a8

080048ec <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80048ec:	2001      	movs	r0, #1
 80048ee:	4770      	bx	lr

080048f0 <_kill>:

int _kill(int pid, int sig)
{
 80048f0:	b510      	push	{r4, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80048f2:	f001 fd25 	bl	8006340 <__errno>
 80048f6:	2316      	movs	r3, #22
 80048f8:	6003      	str	r3, [r0, #0]
  return -1;
 80048fa:	2001      	movs	r0, #1
}
 80048fc:	4240      	negs	r0, r0
 80048fe:	bd10      	pop	{r4, pc}

08004900 <_exit>:

void _exit (int status)
{
 8004900:	b510      	push	{r4, lr}
  errno = EINVAL;
 8004902:	f001 fd1d 	bl	8006340 <__errno>
 8004906:	2316      	movs	r3, #22
 8004908:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 800490a:	e7fe      	b.n	800490a <_exit+0xa>

0800490c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800490c:	b570      	push	{r4, r5, r6, lr}
 800490e:	000e      	movs	r6, r1
 8004910:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004912:	2500      	movs	r5, #0
 8004914:	42a5      	cmp	r5, r4
 8004916:	db01      	blt.n	800491c <_read+0x10>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8004918:	0020      	movs	r0, r4
 800491a:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 800491c:	e000      	b.n	8004920 <_read+0x14>
 800491e:	bf00      	nop
 8004920:	5570      	strb	r0, [r6, r5]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004922:	3501      	adds	r5, #1
 8004924:	e7f6      	b.n	8004914 <_read+0x8>

08004926 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004926:	b570      	push	{r4, r5, r6, lr}
 8004928:	000e      	movs	r6, r1
 800492a:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800492c:	2500      	movs	r5, #0
 800492e:	42a5      	cmp	r5, r4
 8004930:	db01      	blt.n	8004936 <_write+0x10>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8004932:	0020      	movs	r0, r4
 8004934:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8004936:	5d70      	ldrb	r0, [r6, r5]
 8004938:	e000      	b.n	800493c <_write+0x16>
 800493a:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800493c:	3501      	adds	r5, #1
 800493e:	e7f6      	b.n	800492e <_write+0x8>

08004940 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
 8004940:	2001      	movs	r0, #1
}
 8004942:	4240      	negs	r0, r0
 8004944:	4770      	bx	lr

08004946 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8004946:	2380      	movs	r3, #128	; 0x80
 8004948:	019b      	lsls	r3, r3, #6
  return 0;
}
 800494a:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 800494c:	604b      	str	r3, [r1, #4]
}
 800494e:	4770      	bx	lr

08004950 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8004950:	2001      	movs	r0, #1
 8004952:	4770      	bx	lr

08004954 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8004954:	2000      	movs	r0, #0
 8004956:	4770      	bx	lr

08004958 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004958:	4a0b      	ldr	r2, [pc, #44]	; (8004988 <_sbrk+0x30>)
 800495a:	490c      	ldr	r1, [pc, #48]	; (800498c <_sbrk+0x34>)
{
 800495c:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800495e:	1a89      	subs	r1, r1, r2
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004960:	4a0b      	ldr	r2, [pc, #44]	; (8004990 <_sbrk+0x38>)
{
 8004962:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8004964:	6810      	ldr	r0, [r2, #0]
 8004966:	2800      	cmp	r0, #0
 8004968:	d101      	bne.n	800496e <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 800496a:	480a      	ldr	r0, [pc, #40]	; (8004994 <_sbrk+0x3c>)
 800496c:	6010      	str	r0, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800496e:	6810      	ldr	r0, [r2, #0]
 8004970:	18c3      	adds	r3, r0, r3
 8004972:	428b      	cmp	r3, r1
 8004974:	d906      	bls.n	8004984 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 8004976:	f001 fce3 	bl	8006340 <__errno>
 800497a:	230c      	movs	r3, #12
 800497c:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800497e:	2001      	movs	r0, #1
 8004980:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8004982:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8004984:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8004986:	e7fc      	b.n	8004982 <_sbrk+0x2a>
 8004988:	00000400 	.word	0x00000400
 800498c:	20002000 	.word	0x20002000
 8004990:	20000768 	.word	0x20000768
 8004994:	200007a0 	.word	0x200007a0

08004998 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8004998:	4770      	bx	lr
	...

0800499c <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

  ldr   r0, =_estack
 800499c:	480d      	ldr	r0, [pc, #52]	; (80049d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800499e:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 80049a0:	f7ff fffa 	bl	8004998 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80049a4:	480c      	ldr	r0, [pc, #48]	; (80049d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80049a6:	490d      	ldr	r1, [pc, #52]	; (80049dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80049a8:	4a0d      	ldr	r2, [pc, #52]	; (80049e0 <LoopForever+0xe>)
  movs r3, #0
 80049aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80049ac:	e002      	b.n	80049b4 <LoopCopyDataInit>

080049ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80049ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80049b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80049b2:	3304      	adds	r3, #4

080049b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80049b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80049b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80049b8:	d3f9      	bcc.n	80049ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80049ba:	4a0a      	ldr	r2, [pc, #40]	; (80049e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80049bc:	4c0a      	ldr	r4, [pc, #40]	; (80049e8 <LoopForever+0x16>)
  movs r3, #0
 80049be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80049c0:	e001      	b.n	80049c6 <LoopFillZerobss>

080049c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80049c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80049c4:	3204      	adds	r2, #4

080049c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80049c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80049c8:	d3fb      	bcc.n	80049c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80049ca:	f001 fcbf 	bl	800634c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80049ce:	f7ff fb1f 	bl	8004010 <main>

080049d2 <LoopForever>:

LoopForever:
    b LoopForever
 80049d2:	e7fe      	b.n	80049d2 <LoopForever>
  ldr   r0, =_estack
 80049d4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80049d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80049dc:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80049e0:	0800bd3c 	.word	0x0800bd3c
  ldr r2, =_sbss
 80049e4:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80049e8:	200007a0 	.word	0x200007a0

080049ec <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80049ec:	e7fe      	b.n	80049ec <ADC1_COMP_IRQHandler>
	...

080049f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80049f0:	b570      	push	{r4, r5, r6, lr}
 80049f2:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80049f4:	20fa      	movs	r0, #250	; 0xfa
 80049f6:	4b0d      	ldr	r3, [pc, #52]	; (8004a2c <HAL_InitTick+0x3c>)
 80049f8:	0080      	lsls	r0, r0, #2
 80049fa:	7819      	ldrb	r1, [r3, #0]
 80049fc:	f7fb fba0 	bl	8000140 <__udivsi3>
 8004a00:	4b0b      	ldr	r3, [pc, #44]	; (8004a30 <HAL_InitTick+0x40>)
 8004a02:	0001      	movs	r1, r0
 8004a04:	6818      	ldr	r0, [r3, #0]
 8004a06:	f7fb fb9b 	bl	8000140 <__udivsi3>
 8004a0a:	f000 fa2d 	bl	8004e68 <HAL_SYSTICK_Config>
 8004a0e:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8004a10:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a12:	2c00      	cmp	r4, #0
 8004a14:	d109      	bne.n	8004a2a <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a16:	2d03      	cmp	r5, #3
 8004a18:	d807      	bhi.n	8004a2a <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a1a:	3802      	subs	r0, #2
 8004a1c:	0022      	movs	r2, r4
 8004a1e:	0029      	movs	r1, r5
 8004a20:	f000 f9ec 	bl	8004dfc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a24:	0020      	movs	r0, r4
 8004a26:	4b03      	ldr	r3, [pc, #12]	; (8004a34 <HAL_InitTick+0x44>)
 8004a28:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8004a2a:	bd70      	pop	{r4, r5, r6, pc}
 8004a2c:	2000001c 	.word	0x2000001c
 8004a30:	20000018 	.word	0x20000018
 8004a34:	20000020 	.word	0x20000020

08004a38 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a38:	2310      	movs	r3, #16
 8004a3a:	4a06      	ldr	r2, [pc, #24]	; (8004a54 <HAL_Init+0x1c>)
{
 8004a3c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a3e:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a40:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a42:	430b      	orrs	r3, r1
 8004a44:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a46:	f7ff ffd3 	bl	80049f0 <HAL_InitTick>
  HAL_MspInit();
 8004a4a:	f7ff fe6f 	bl	800472c <HAL_MspInit>
}
 8004a4e:	2000      	movs	r0, #0
 8004a50:	bd10      	pop	{r4, pc}
 8004a52:	46c0      	nop			; (mov r8, r8)
 8004a54:	40022000 	.word	0x40022000

08004a58 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004a58:	4a03      	ldr	r2, [pc, #12]	; (8004a68 <HAL_IncTick+0x10>)
 8004a5a:	4b04      	ldr	r3, [pc, #16]	; (8004a6c <HAL_IncTick+0x14>)
 8004a5c:	6811      	ldr	r1, [r2, #0]
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	185b      	adds	r3, r3, r1
 8004a62:	6013      	str	r3, [r2, #0]
}
 8004a64:	4770      	bx	lr
 8004a66:	46c0      	nop			; (mov r8, r8)
 8004a68:	2000076c 	.word	0x2000076c
 8004a6c:	2000001c 	.word	0x2000001c

08004a70 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004a70:	4b01      	ldr	r3, [pc, #4]	; (8004a78 <HAL_GetTick+0x8>)
 8004a72:	6818      	ldr	r0, [r3, #0]
}
 8004a74:	4770      	bx	lr
 8004a76:	46c0      	nop			; (mov r8, r8)
 8004a78:	2000076c 	.word	0x2000076c

08004a7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a7c:	b570      	push	{r4, r5, r6, lr}
 8004a7e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004a80:	f7ff fff6 	bl	8004a70 <HAL_GetTick>
 8004a84:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a86:	1c63      	adds	r3, r4, #1
 8004a88:	d002      	beq.n	8004a90 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a8a:	4b04      	ldr	r3, [pc, #16]	; (8004a9c <HAL_Delay+0x20>)
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004a90:	f7ff ffee 	bl	8004a70 <HAL_GetTick>
 8004a94:	1b40      	subs	r0, r0, r5
 8004a96:	42a0      	cmp	r0, r4
 8004a98:	d3fa      	bcc.n	8004a90 <HAL_Delay+0x14>
  {
  }
}
 8004a9a:	bd70      	pop	{r4, r5, r6, pc}
 8004a9c:	2000001c 	.word	0x2000001c

08004aa0 <ADC_Enable>:
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8004aa0:	2300      	movs	r3, #0
{
 8004aa2:	b573      	push	{r0, r1, r4, r5, r6, lr}
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004aa4:	2103      	movs	r1, #3
  __IO uint32_t wait_loop_index = 0U;
 8004aa6:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004aa8:	6803      	ldr	r3, [r0, #0]
{
 8004aaa:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004aac:	689a      	ldr	r2, [r3, #8]
 8004aae:	400a      	ands	r2, r1
 8004ab0:	2a01      	cmp	r2, #1
 8004ab2:	d107      	bne.n	8004ac4 <ADC_Enable+0x24>
 8004ab4:	6819      	ldr	r1, [r3, #0]
 8004ab6:	4211      	tst	r1, r2
 8004ab8:	d001      	beq.n	8004abe <ADC_Enable+0x1e>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004aba:	2000      	movs	r0, #0
}
 8004abc:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004abe:	68da      	ldr	r2, [r3, #12]
 8004ac0:	0412      	lsls	r2, r2, #16
 8004ac2:	d4fa      	bmi.n	8004aba <ADC_Enable+0x1a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004ac4:	6899      	ldr	r1, [r3, #8]
 8004ac6:	4a1b      	ldr	r2, [pc, #108]	; (8004b34 <ADC_Enable+0x94>)
 8004ac8:	4211      	tst	r1, r2
 8004aca:	d008      	beq.n	8004ade <ADC_Enable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004acc:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ace:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ad0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ad6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004ad8:	4303      	orrs	r3, r0
 8004ada:	63e3      	str	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8004adc:	e7ee      	b.n	8004abc <ADC_Enable+0x1c>
    __HAL_ADC_ENABLE(hadc);
 8004ade:	2201      	movs	r2, #1
 8004ae0:	6899      	ldr	r1, [r3, #8]
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004ae6:	4b14      	ldr	r3, [pc, #80]	; (8004b38 <ADC_Enable+0x98>)
 8004ae8:	4914      	ldr	r1, [pc, #80]	; (8004b3c <ADC_Enable+0x9c>)
 8004aea:	6818      	ldr	r0, [r3, #0]
 8004aec:	f7fb fb28 	bl	8000140 <__udivsi3>
 8004af0:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 8004af2:	9b01      	ldr	r3, [sp, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d119      	bne.n	8004b2c <ADC_Enable+0x8c>
    tickstart = HAL_GetTick();
 8004af8:	f7ff ffba 	bl	8004a70 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004afc:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 8004afe:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004b00:	6823      	ldr	r3, [r4, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	422b      	tst	r3, r5
 8004b06:	d1d8      	bne.n	8004aba <ADC_Enable+0x1a>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004b08:	f7ff ffb2 	bl	8004a70 <HAL_GetTick>
 8004b0c:	1b80      	subs	r0, r0, r6
 8004b0e:	2802      	cmp	r0, #2
 8004b10:	d9f6      	bls.n	8004b00 <ADC_Enable+0x60>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004b12:	6823      	ldr	r3, [r4, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	422b      	tst	r3, r5
 8004b18:	d1f2      	bne.n	8004b00 <ADC_Enable+0x60>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b1a:	2310      	movs	r3, #16
 8004b1c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          return HAL_ERROR;
 8004b1e:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b20:	4313      	orrs	r3, r2
 8004b22:	63a3      	str	r3, [r4, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b24:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004b26:	431d      	orrs	r5, r3
 8004b28:	63e5      	str	r5, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8004b2a:	e7c7      	b.n	8004abc <ADC_Enable+0x1c>
      wait_loop_index--;
 8004b2c:	9b01      	ldr	r3, [sp, #4]
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	9301      	str	r3, [sp, #4]
 8004b32:	e7de      	b.n	8004af2 <ADC_Enable+0x52>
 8004b34:	80000017 	.word	0x80000017
 8004b38:	20000018 	.word	0x20000018
 8004b3c:	000f4240 	.word	0x000f4240

08004b40 <HAL_ADC_Init>:
{
 8004b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b42:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004b44:	2001      	movs	r0, #1
  if(hadc == NULL)
 8004b46:	2c00      	cmp	r4, #0
 8004b48:	d100      	bne.n	8004b4c <HAL_ADC_Init+0xc>
 8004b4a:	e080      	b.n	8004c4e <HAL_ADC_Init+0x10e>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004b4c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d106      	bne.n	8004b60 <HAL_ADC_Init+0x20>
    hadc->Lock = HAL_UNLOCKED;
 8004b52:	0022      	movs	r2, r4
 8004b54:	3234      	adds	r2, #52	; 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 8004b56:	63e3      	str	r3, [r4, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 8004b58:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8004b5a:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8004b5c:	f7ff fdfe 	bl	800475c <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004b60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004b62:	06db      	lsls	r3, r3, #27
 8004b64:	d500      	bpl.n	8004b68 <HAL_ADC_Init+0x28>
 8004b66:	e087      	b.n	8004c78 <HAL_ADC_Init+0x138>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8004b68:	6823      	ldr	r3, [r4, #0]
 8004b6a:	2204      	movs	r2, #4
 8004b6c:	6899      	ldr	r1, [r3, #8]
 8004b6e:	0008      	movs	r0, r1
 8004b70:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 8004b72:	4211      	tst	r1, r2
 8004b74:	d000      	beq.n	8004b78 <HAL_ADC_Init+0x38>
 8004b76:	e07f      	b.n	8004c78 <HAL_ADC_Init+0x138>
    ADC_STATE_CLR_SET(hadc->State,
 8004b78:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004b7a:	4942      	ldr	r1, [pc, #264]	; (8004c84 <HAL_ADC_Init+0x144>)
 8004b7c:	4011      	ands	r1, r2
 8004b7e:	2202      	movs	r2, #2
 8004b80:	430a      	orrs	r2, r1
    if (ADC_IS_ENABLE(hadc) == RESET)
 8004b82:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 8004b84:	63a2      	str	r2, [r4, #56]	; 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 8004b86:	689a      	ldr	r2, [r3, #8]
 8004b88:	400a      	ands	r2, r1
 8004b8a:	2a01      	cmp	r2, #1
 8004b8c:	d105      	bne.n	8004b9a <HAL_ADC_Init+0x5a>
 8004b8e:	6819      	ldr	r1, [r3, #0]
 8004b90:	4211      	tst	r1, r2
 8004b92:	d10e      	bne.n	8004bb2 <HAL_ADC_Init+0x72>
 8004b94:	68da      	ldr	r2, [r3, #12]
 8004b96:	0412      	lsls	r2, r2, #16
 8004b98:	d40b      	bmi.n	8004bb2 <HAL_ADC_Init+0x72>
      MODIFY_REG(hadc->Instance->CFGR1,
 8004b9a:	2118      	movs	r1, #24
 8004b9c:	68da      	ldr	r2, [r3, #12]
 8004b9e:	438a      	bics	r2, r1
 8004ba0:	68a1      	ldr	r1, [r4, #8]
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8004ba6:	6919      	ldr	r1, [r3, #16]
 8004ba8:	6862      	ldr	r2, [r4, #4]
 8004baa:	0089      	lsls	r1, r1, #2
 8004bac:	0889      	lsrs	r1, r1, #2
 8004bae:	4311      	orrs	r1, r2
 8004bb0:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8004bb2:	68da      	ldr	r2, [r3, #12]
 8004bb4:	4934      	ldr	r1, [pc, #208]	; (8004c88 <HAL_ADC_Init+0x148>)
 8004bb6:	400a      	ands	r2, r1
 8004bb8:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8004bba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004bbc:	7e26      	ldrb	r6, [r4, #24]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8004bbe:	1e57      	subs	r7, r2, #1
 8004bc0:	1e7a      	subs	r2, r7, #1
 8004bc2:	4197      	sbcs	r7, r2
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8004bc4:	7e61      	ldrb	r1, [r4, #25]
 8004bc6:	68e2      	ldr	r2, [r4, #12]
 8004bc8:	03c9      	lsls	r1, r1, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004bca:	03b6      	lsls	r6, r6, #14
 8004bcc:	430e      	orrs	r6, r1
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004bce:	7ea5      	ldrb	r5, [r4, #26]
 8004bd0:	4316      	orrs	r6, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8004bd2:	6922      	ldr	r2, [r4, #16]
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004bd4:	0369      	lsls	r1, r5, #13
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8004bd6:	033f      	lsls	r7, r7, #12
 8004bd8:	430e      	orrs	r6, r1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8004bda:	2a02      	cmp	r2, #2
 8004bdc:	d100      	bne.n	8004be0 <HAL_ADC_Init+0xa0>
 8004bde:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8004be0:	1d62      	adds	r2, r4, #5
 8004be2:	7fd2      	ldrb	r2, [r2, #31]
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004be4:	7ee1      	ldrb	r1, [r4, #27]
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8004be6:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8004be8:	4332      	orrs	r2, r6
 8004bea:	433a      	orrs	r2, r7
 8004bec:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004bee:	2901      	cmp	r1, #1
 8004bf0:	d104      	bne.n	8004bfc <HAL_ADC_Init+0xbc>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004bf2:	2d00      	cmp	r5, #0
 8004bf4:	d12c      	bne.n	8004c50 <HAL_ADC_Init+0x110>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8004bf6:	2180      	movs	r1, #128	; 0x80
 8004bf8:	0249      	lsls	r1, r1, #9
 8004bfa:	430a      	orrs	r2, r1
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004bfc:	20c2      	movs	r0, #194	; 0xc2
 8004bfe:	69e1      	ldr	r1, [r4, #28]
 8004c00:	30ff      	adds	r0, #255	; 0xff
 8004c02:	4281      	cmp	r1, r0
 8004c04:	d002      	beq.n	8004c0c <HAL_ADC_Init+0xcc>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8004c06:	6a20      	ldr	r0, [r4, #32]
 8004c08:	4301      	orrs	r1, r0
 8004c0a:	430a      	orrs	r2, r1
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004c0c:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8004c0e:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004c10:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8004c12:	4311      	orrs	r1, r2
 8004c14:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004c16:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004c18:	4281      	cmp	r1, r0
 8004c1a:	d002      	beq.n	8004c22 <HAL_ADC_Init+0xe2>
 8004c1c:	1e48      	subs	r0, r1, #1
 8004c1e:	2806      	cmp	r0, #6
 8004c20:	d807      	bhi.n	8004c32 <HAL_ADC_Init+0xf2>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8004c22:	2507      	movs	r5, #7
 8004c24:	6958      	ldr	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8004c26:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8004c28:	43a8      	bics	r0, r5
 8004c2a:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8004c2c:	6958      	ldr	r0, [r3, #20]
 8004c2e:	4301      	orrs	r1, r0
 8004c30:	6159      	str	r1, [r3, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	4915      	ldr	r1, [pc, #84]	; (8004c8c <HAL_ADC_Init+0x14c>)
 8004c36:	400b      	ands	r3, r1
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d111      	bne.n	8004c60 <HAL_ADC_Init+0x120>
      ADC_CLEAR_ERRORCODE(hadc);
 8004c3c:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8004c3e:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8004c40:	63e0      	str	r0, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 8004c42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c44:	4393      	bics	r3, r2
 8004c46:	001a      	movs	r2, r3
 8004c48:	2301      	movs	r3, #1
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8004c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c50:	2020      	movs	r0, #32
 8004c52:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8004c54:	4328      	orrs	r0, r5
 8004c56:	63a0      	str	r0, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c58:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004c5a:	4301      	orrs	r1, r0
 8004c5c:	63e1      	str	r1, [r4, #60]	; 0x3c
 8004c5e:	e7cd      	b.n	8004bfc <HAL_ADC_Init+0xbc>
      ADC_STATE_CLR_SET(hadc->State,
 8004c60:	2212      	movs	r2, #18
 8004c62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c64:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8004c66:	4393      	bics	r3, r2
 8004c68:	001a      	movs	r2, r3
 8004c6a:	2310      	movs	r3, #16
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004c72:	4303      	orrs	r3, r0
 8004c74:	63e3      	str	r3, [r4, #60]	; 0x3c
      tmp_hal_status = HAL_ERROR;
 8004c76:	e7ea      	b.n	8004c4e <HAL_ADC_Init+0x10e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c78:	2310      	movs	r3, #16
 8004c7a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8004c7c:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	63a3      	str	r3, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8004c82:	e7e4      	b.n	8004c4e <HAL_ADC_Init+0x10e>
 8004c84:	fffffefd 	.word	0xfffffefd
 8004c88:	fffe0219 	.word	0xfffe0219
 8004c8c:	833fffe7 	.word	0x833fffe7

08004c90 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004c90:	6803      	ldr	r3, [r0, #0]
{
 8004c92:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004c94:	689b      	ldr	r3, [r3, #8]
{
 8004c96:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 8004c98:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004c9a:	075b      	lsls	r3, r3, #29
 8004c9c:	d41a      	bmi.n	8004cd4 <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 8004c9e:	0025      	movs	r5, r4
 8004ca0:	3534      	adds	r5, #52	; 0x34
 8004ca2:	782b      	ldrb	r3, [r5, #0]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d015      	beq.n	8004cd4 <HAL_ADC_Start+0x44>
 8004ca8:	2301      	movs	r3, #1
 8004caa:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004cac:	7e63      	ldrb	r3, [r4, #25]
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d111      	bne.n	8004cd6 <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 8004cb2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004cb4:	4a0b      	ldr	r2, [pc, #44]	; (8004ce4 <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 8004cb6:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8004cb8:	401a      	ands	r2, r3
 8004cba:	2380      	movs	r3, #128	; 0x80
 8004cbc:	005b      	lsls	r3, r3, #1
 8004cbe:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004cc0:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 8004cc2:	63a3      	str	r3, [r4, #56]	; 0x38
      ADC_CLEAR_ERRORCODE(hadc);
 8004cc4:	63e0      	str	r0, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hadc);
 8004cc6:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004cc8:	6823      	ldr	r3, [r4, #0]
 8004cca:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8004ccc:	6899      	ldr	r1, [r3, #8]
 8004cce:	3a18      	subs	r2, #24
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	609a      	str	r2, [r3, #8]
}
 8004cd4:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8004cd6:	0020      	movs	r0, r4
 8004cd8:	f7ff fee2 	bl	8004aa0 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8004cdc:	2800      	cmp	r0, #0
 8004cde:	d0e8      	beq.n	8004cb2 <HAL_ADC_Start+0x22>
 8004ce0:	e7f8      	b.n	8004cd4 <HAL_ADC_Start+0x44>
 8004ce2:	46c0      	nop			; (mov r8, r8)
 8004ce4:	fffff0fe 	.word	0xfffff0fe

08004ce8 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8004ce8:	6803      	ldr	r3, [r0, #0]
 8004cea:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8004cec:	4770      	bx	lr
	...

08004cf0 <HAL_ADC_ConfigChannel>:
{
 8004cf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0U;
 8004cf2:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8004cf4:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 8004cf6:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8004cf8:	3434      	adds	r4, #52	; 0x34
 8004cfa:	7822      	ldrb	r2, [r4, #0]
{
 8004cfc:	0003      	movs	r3, r0
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004cfe:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  __HAL_LOCK(hadc);
 8004d00:	2002      	movs	r0, #2
 8004d02:	2a01      	cmp	r2, #1
 8004d04:	d02b      	beq.n	8004d5e <HAL_ADC_ConfigChannel+0x6e>
 8004d06:	3801      	subs	r0, #1
 8004d08:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	6896      	ldr	r6, [r2, #8]
 8004d0e:	0776      	lsls	r6, r6, #29
 8004d10:	d461      	bmi.n	8004dd6 <HAL_ADC_ConfigChannel+0xe6>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004d12:	680b      	ldr	r3, [r1, #0]
    if (sConfig->Rank != ADC_RANK_NONE)
 8004d14:	4f32      	ldr	r7, [pc, #200]	; (8004de0 <HAL_ADC_ConfigChannel+0xf0>)
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004d16:	4098      	lsls	r0, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004d18:	001e      	movs	r6, r3
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004d1a:	4684      	mov	ip, r0
    if (sConfig->Rank != ADC_RANK_NONE)
 8004d1c:	6848      	ldr	r0, [r1, #4]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004d1e:	3e10      	subs	r6, #16
    if (sConfig->Rank != ADC_RANK_NONE)
 8004d20:	42b8      	cmp	r0, r7
 8004d22:	d040      	beq.n	8004da6 <HAL_ADC_ConfigChannel+0xb6>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004d24:	4660      	mov	r0, ip
 8004d26:	6a97      	ldr	r7, [r2, #40]	; 0x28
 8004d28:	4338      	orrs	r0, r7
 8004d2a:	6290      	str	r0, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004d2c:	2080      	movs	r0, #128	; 0x80
 8004d2e:	0540      	lsls	r0, r0, #21
 8004d30:	4285      	cmp	r5, r0
 8004d32:	d00f      	beq.n	8004d54 <HAL_ADC_ConfigChannel+0x64>
 8004d34:	3d01      	subs	r5, #1
 8004d36:	2d06      	cmp	r5, #6
 8004d38:	d90c      	bls.n	8004d54 <HAL_ADC_ConfigChannel+0x64>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8004d3a:	2007      	movs	r0, #7
 8004d3c:	6955      	ldr	r5, [r2, #20]
 8004d3e:	6889      	ldr	r1, [r1, #8]
 8004d40:	4005      	ands	r5, r0
 8004d42:	42a9      	cmp	r1, r5
 8004d44:	d006      	beq.n	8004d54 <HAL_ADC_ConfigChannel+0x64>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8004d46:	6955      	ldr	r5, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8004d48:	4001      	ands	r1, r0
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8004d4a:	4385      	bics	r5, r0
 8004d4c:	6155      	str	r5, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8004d4e:	6955      	ldr	r5, [r2, #20]
 8004d50:	4329      	orrs	r1, r5
 8004d52:	6151      	str	r1, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004d54:	2e02      	cmp	r6, #2
 8004d56:	d903      	bls.n	8004d60 <HAL_ADC_ConfigChannel+0x70>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d58:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	7023      	strb	r3, [r4, #0]
}
 8004d5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004d60:	4820      	ldr	r0, [pc, #128]	; (8004de4 <HAL_ADC_ConfigChannel+0xf4>)
 8004d62:	6801      	ldr	r1, [r0, #0]
 8004d64:	2b10      	cmp	r3, #16
 8004d66:	d01b      	beq.n	8004da0 <HAL_ADC_ConfigChannel+0xb0>
 8004d68:	001a      	movs	r2, r3
 8004d6a:	3a11      	subs	r2, #17
 8004d6c:	4255      	negs	r5, r2
 8004d6e:	416a      	adcs	r2, r5
 8004d70:	4d1d      	ldr	r5, [pc, #116]	; (8004de8 <HAL_ADC_ConfigChannel+0xf8>)
 8004d72:	4252      	negs	r2, r2
 8004d74:	402a      	ands	r2, r5
 8004d76:	2580      	movs	r5, #128	; 0x80
 8004d78:	046d      	lsls	r5, r5, #17
 8004d7a:	1952      	adds	r2, r2, r5
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	6002      	str	r2, [r0, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004d80:	2b10      	cmp	r3, #16
 8004d82:	d1e9      	bne.n	8004d58 <HAL_ADC_ConfigChannel+0x68>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004d84:	4b19      	ldr	r3, [pc, #100]	; (8004dec <HAL_ADC_ConfigChannel+0xfc>)
 8004d86:	491a      	ldr	r1, [pc, #104]	; (8004df0 <HAL_ADC_ConfigChannel+0x100>)
 8004d88:	6818      	ldr	r0, [r3, #0]
 8004d8a:	f7fb f9d9 	bl	8000140 <__udivsi3>
 8004d8e:	230a      	movs	r3, #10
 8004d90:	4343      	muls	r3, r0
            wait_loop_index--;
 8004d92:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8004d94:	9b01      	ldr	r3, [sp, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d0de      	beq.n	8004d58 <HAL_ADC_ConfigChannel+0x68>
            wait_loop_index--;
 8004d9a:	9b01      	ldr	r3, [sp, #4]
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	e7f8      	b.n	8004d92 <HAL_ADC_ConfigChannel+0xa2>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004da0:	2280      	movs	r2, #128	; 0x80
 8004da2:	0412      	lsls	r2, r2, #16
 8004da4:	e7ea      	b.n	8004d7c <HAL_ADC_ConfigChannel+0x8c>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004da6:	4660      	mov	r0, ip
 8004da8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004daa:	4381      	bics	r1, r0
 8004dac:	6291      	str	r1, [r2, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004dae:	2e02      	cmp	r6, #2
 8004db0:	d8d2      	bhi.n	8004d58 <HAL_ADC_ConfigChannel+0x68>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004db2:	4a0c      	ldr	r2, [pc, #48]	; (8004de4 <HAL_ADC_ConfigChannel+0xf4>)
 8004db4:	6811      	ldr	r1, [r2, #0]
 8004db6:	2b10      	cmp	r3, #16
 8004db8:	d00b      	beq.n	8004dd2 <HAL_ADC_ConfigChannel+0xe2>
 8004dba:	3b11      	subs	r3, #17
 8004dbc:	4258      	negs	r0, r3
 8004dbe:	4143      	adcs	r3, r0
 8004dc0:	20c0      	movs	r0, #192	; 0xc0
 8004dc2:	425b      	negs	r3, r3
 8004dc4:	0400      	lsls	r0, r0, #16
 8004dc6:	4003      	ands	r3, r0
 8004dc8:	480a      	ldr	r0, [pc, #40]	; (8004df4 <HAL_ADC_ConfigChannel+0x104>)
 8004dca:	181b      	adds	r3, r3, r0
 8004dcc:	400b      	ands	r3, r1
 8004dce:	6013      	str	r3, [r2, #0]
 8004dd0:	e7c2      	b.n	8004d58 <HAL_ADC_ConfigChannel+0x68>
 8004dd2:	4b09      	ldr	r3, [pc, #36]	; (8004df8 <HAL_ADC_ConfigChannel+0x108>)
 8004dd4:	e7fa      	b.n	8004dcc <HAL_ADC_ConfigChannel+0xdc>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	639a      	str	r2, [r3, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8004dde:	e7bc      	b.n	8004d5a <HAL_ADC_ConfigChannel+0x6a>
 8004de0:	00001001 	.word	0x00001001
 8004de4:	40012708 	.word	0x40012708
 8004de8:	ff400000 	.word	0xff400000
 8004dec:	20000018 	.word	0x20000018
 8004df0:	000f4240 	.word	0x000f4240
 8004df4:	feffffff 	.word	0xfeffffff
 8004df8:	ff7fffff 	.word	0xff7fffff

08004dfc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004dfc:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004dfe:	25ff      	movs	r5, #255	; 0xff
 8004e00:	2403      	movs	r4, #3
 8004e02:	002a      	movs	r2, r5
 8004e04:	4004      	ands	r4, r0
 8004e06:	00e4      	lsls	r4, r4, #3
 8004e08:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004e0a:	0189      	lsls	r1, r1, #6
 8004e0c:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e0e:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004e10:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e12:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8004e14:	2800      	cmp	r0, #0
 8004e16:	db0a      	blt.n	8004e2e <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e18:	24c0      	movs	r4, #192	; 0xc0
 8004e1a:	4b0b      	ldr	r3, [pc, #44]	; (8004e48 <HAL_NVIC_SetPriority+0x4c>)
 8004e1c:	0880      	lsrs	r0, r0, #2
 8004e1e:	0080      	lsls	r0, r0, #2
 8004e20:	18c0      	adds	r0, r0, r3
 8004e22:	00a4      	lsls	r4, r4, #2
 8004e24:	5903      	ldr	r3, [r0, r4]
 8004e26:	401a      	ands	r2, r3
 8004e28:	4311      	orrs	r1, r2
 8004e2a:	5101      	str	r1, [r0, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8004e2c:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e2e:	200f      	movs	r0, #15
 8004e30:	4003      	ands	r3, r0
 8004e32:	3b08      	subs	r3, #8
 8004e34:	4805      	ldr	r0, [pc, #20]	; (8004e4c <HAL_NVIC_SetPriority+0x50>)
 8004e36:	089b      	lsrs	r3, r3, #2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	181b      	adds	r3, r3, r0
 8004e3c:	69d8      	ldr	r0, [r3, #28]
 8004e3e:	4002      	ands	r2, r0
 8004e40:	4311      	orrs	r1, r2
 8004e42:	61d9      	str	r1, [r3, #28]
 8004e44:	e7f2      	b.n	8004e2c <HAL_NVIC_SetPriority+0x30>
 8004e46:	46c0      	nop			; (mov r8, r8)
 8004e48:	e000e100 	.word	0xe000e100
 8004e4c:	e000ed00 	.word	0xe000ed00

08004e50 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004e50:	2800      	cmp	r0, #0
 8004e52:	db05      	blt.n	8004e60 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e54:	231f      	movs	r3, #31
 8004e56:	4018      	ands	r0, r3
 8004e58:	3b1e      	subs	r3, #30
 8004e5a:	4083      	lsls	r3, r0
 8004e5c:	4a01      	ldr	r2, [pc, #4]	; (8004e64 <HAL_NVIC_EnableIRQ+0x14>)
 8004e5e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004e60:	4770      	bx	lr
 8004e62:	46c0      	nop			; (mov r8, r8)
 8004e64:	e000e100 	.word	0xe000e100

08004e68 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e68:	2280      	movs	r2, #128	; 0x80
 8004e6a:	1e43      	subs	r3, r0, #1
 8004e6c:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e6e:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d20d      	bcs.n	8004e90 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e74:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e76:	4a07      	ldr	r2, [pc, #28]	; (8004e94 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e78:	4807      	ldr	r0, [pc, #28]	; (8004e98 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e7a:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e7c:	6a03      	ldr	r3, [r0, #32]
 8004e7e:	0609      	lsls	r1, r1, #24
 8004e80:	021b      	lsls	r3, r3, #8
 8004e82:	0a1b      	lsrs	r3, r3, #8
 8004e84:	430b      	orrs	r3, r1
 8004e86:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e88:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e8a:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e8c:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e8e:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004e90:	4770      	bx	lr
 8004e92:	46c0      	nop			; (mov r8, r8)
 8004e94:	e000e010 	.word	0xe000e010
 8004e98:	e000ed00 	.word	0xe000ed00

08004e9c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8004e9c:	b510      	push	{r4, lr}
 8004e9e:	0004      	movs	r4, r0
  /* Check DAC handle */
  if(hdac == NULL)
  {
     return HAL_ERROR;
 8004ea0:	2001      	movs	r0, #1
  if(hdac == NULL)
 8004ea2:	2c00      	cmp	r4, #0
 8004ea4:	d00d      	beq.n	8004ec2 <HAL_DAC_Init+0x26>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if (hdac->State == HAL_DAC_STATE_RESET)
 8004ea6:	7923      	ldrb	r3, [r4, #4]
 8004ea8:	b2da      	uxtb	r2, r3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d103      	bne.n	8004eb6 <HAL_DAC_Init+0x1a>
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004eae:	0020      	movs	r0, r4
    hdac->Lock = HAL_UNLOCKED;
 8004eb0:	7162      	strb	r2, [r4, #5]
    HAL_DAC_MspInit(hdac);
 8004eb2:	f7ff fc81 	bl	80047b8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004eb6:	2302      	movs	r3, #2
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004eb8:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8004eba:	7123      	strb	r3, [r4, #4]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004ebc:	3b01      	subs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004ebe:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8004ec0:	7123      	strb	r3, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
}
 8004ec2:	bd10      	pop	{r4, pc}

08004ec4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8004ec4:	b513      	push	{r0, r1, r4, lr}
 8004ec6:	0014      	movs	r4, r2
  __IO uint32_t tmp = 0;
 8004ec8:	2200      	movs	r2, #0
 8004eca:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 8004ecc:	6802      	ldr	r2, [r0, #0]
 8004ece:	9201      	str	r2, [sp, #4]
  if(Channel == DAC_CHANNEL_1)
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004ed0:	9a01      	ldr	r2, [sp, #4]
  if(Channel == DAC_CHANNEL_1)
 8004ed2:	2900      	cmp	r1, #0
 8004ed4:	d106      	bne.n	8004ee4 <HAL_DAC_SetValue+0x20>
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004ed6:	3208      	adds	r2, #8
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004ed8:	1912      	adds	r2, r2, r4
 8004eda:	9201      	str	r2, [sp, #4]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004edc:	9a01      	ldr	r2, [sp, #4]
  
  /* Return function status */
  return HAL_OK;
}
 8004ede:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 8004ee0:	6013      	str	r3, [r2, #0]
}
 8004ee2:	bd16      	pop	{r1, r2, r4, pc}
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004ee4:	3214      	adds	r2, #20
 8004ee6:	e7f7      	b.n	8004ed8 <HAL_DAC_SetValue+0x14>

08004ee8 <HAL_DAC_DMAUnderrunCallbackCh1>:
 8004ee8:	4770      	bx	lr

08004eea <HAL_DAC_ConfigChannel>:
  *          This parameter can be one of the following values:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8004eea:	b530      	push	{r4, r5, lr}
 8004eec:	0014      	movs	r4, r2
 8004eee:	2202      	movs	r2, #2
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8004ef0:	7945      	ldrb	r5, [r0, #5]
{
 8004ef2:	0003      	movs	r3, r0
  __HAL_LOCK(hdac);
 8004ef4:	0010      	movs	r0, r2
 8004ef6:	2d01      	cmp	r5, #1
 8004ef8:	d00f      	beq.n	8004f1a <HAL_DAC_ConfigChannel+0x30>
  hdac->State = HAL_DAC_STATE_BUSY;
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel); 
 8004efa:	303c      	adds	r0, #60	; 0x3c
 8004efc:	40a0      	lsls	r0, r4
  tmpreg1 = hdac->Instance->CR;
 8004efe:	681d      	ldr	r5, [r3, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 8004f00:	711a      	strb	r2, [r3, #4]
  tmpreg1 = hdac->Instance->CR;
 8004f02:	682a      	ldr	r2, [r5, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel); 
 8004f04:	4382      	bics	r2, r0
 8004f06:	0010      	movs	r0, r2
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004f08:	c906      	ldmia	r1, {r1, r2}
 8004f0a:	430a      	orrs	r2, r1
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8004f0c:	40a2      	lsls	r2, r4
 8004f0e:	4302      	orrs	r2, r0
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004f10:	602a      	str	r2, [r5, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004f12:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 8004f14:	2201      	movs	r2, #1
  __HAL_UNLOCK(hdac);
 8004f16:	7158      	strb	r0, [r3, #5]
  hdac->State = HAL_DAC_STATE_READY;
 8004f18:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
}
 8004f1a:	bd30      	pop	{r4, r5, pc}

08004f1c <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8004f1c:	2202      	movs	r2, #2
{
 8004f1e:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hdac);
 8004f20:	7944      	ldrb	r4, [r0, #5]
{
 8004f22:	0003      	movs	r3, r0
  __HAL_LOCK(hdac);
 8004f24:	0010      	movs	r0, r2
 8004f26:	2c01      	cmp	r4, #1
 8004f28:	d015      	beq.n	8004f56 <HAL_DAC_Start+0x3a>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
  
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004f2a:	3801      	subs	r0, #1
 8004f2c:	0004      	movs	r4, r0
 8004f2e:	408c      	lsls	r4, r1
  hdac->State = HAL_DAC_STATE_BUSY;
 8004f30:	711a      	strb	r2, [r3, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	6815      	ldr	r5, [r2, #0]
 8004f36:	432c      	orrs	r4, r5
 8004f38:	6014      	str	r4, [r2, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8004f3a:	2900      	cmp	r1, #0
 8004f3c:	d107      	bne.n	8004f4e <HAL_DAC_Start+0x32>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8004f3e:	243c      	movs	r4, #60	; 0x3c
 8004f40:	6811      	ldr	r1, [r2, #0]
 8004f42:	4021      	ands	r1, r4
 8004f44:	42a1      	cmp	r1, r4
 8004f46:	d102      	bne.n	8004f4e <HAL_DAC_Start+0x32>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004f48:	6851      	ldr	r1, [r2, #4]
 8004f4a:	4308      	orrs	r0, r1
 8004f4c:	6050      	str	r0, [r2, #4]
    }
  }
 
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004f4e:	2201      	movs	r2, #1
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004f50:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 8004f52:	711a      	strb	r2, [r3, #4]
  __HAL_UNLOCK(hdac);
 8004f54:	7158      	strb	r0, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
}
 8004f56:	bd30      	pop	{r4, r5, pc}

08004f58 <HAL_DAC_IRQHandler>:
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8004f58:	2280      	movs	r2, #128	; 0x80
 8004f5a:	6803      	ldr	r3, [r0, #0]
 8004f5c:	0192      	lsls	r2, r2, #6
 8004f5e:	6819      	ldr	r1, [r3, #0]
{
 8004f60:	b510      	push	{r4, lr}
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8004f62:	4211      	tst	r1, r2
 8004f64:	d00f      	beq.n	8004f86 <HAL_DAC_IRQHandler+0x2e>
  { 
  /* Check Overrun flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8004f66:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004f68:	4211      	tst	r1, r2
 8004f6a:	d00c      	beq.n	8004f86 <HAL_DAC_IRQHandler+0x2e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004f6c:	2104      	movs	r1, #4
 8004f6e:	7101      	strb	r1, [r0, #4]
    
      /* Set DAC error code to chanel1 DMA underrun error */
      hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8004f70:	6904      	ldr	r4, [r0, #16]
 8004f72:	3903      	subs	r1, #3
 8004f74:	4321      	orrs	r1, r4
 8004f76:	6101      	str	r1, [r0, #16]
    
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8004f78:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	4902      	ldr	r1, [pc, #8]	; (8004f88 <HAL_DAC_IRQHandler+0x30>)
 8004f7e:	400a      	ands	r2, r1
 8004f80:	601a      	str	r2, [r3, #0]
    
      /* Error callback */ 
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004f82:	f7ff ffb1 	bl	8004ee8 <HAL_DAC_DMAUnderrunCallbackCh1>
    }
  }
}
 8004f86:	bd10      	pop	{r4, pc}
 8004f88:	ffffefff 	.word	0xffffefff

08004f8c <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8004f8c:	4a0c      	ldr	r2, [pc, #48]	; (8004fc0 <FLASH_SetErrorCode+0x34>)
 8004f8e:	2110      	movs	r1, #16
 8004f90:	68d0      	ldr	r0, [r2, #12]
{
 8004f92:	b530      	push	{r4, r5, lr}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8004f94:	0003      	movs	r3, r0
 8004f96:	400b      	ands	r3, r1
 8004f98:	4208      	tst	r0, r1
 8004f9a:	d005      	beq.n	8004fa8 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	4809      	ldr	r0, [pc, #36]	; (8004fc4 <FLASH_SetErrorCode+0x38>)
 8004fa0:	69c4      	ldr	r4, [r0, #28]
 8004fa2:	4323      	orrs	r3, r4
 8004fa4:	61c3      	str	r3, [r0, #28]
    flags |= FLASH_FLAG_WRPERR;
 8004fa6:	000b      	movs	r3, r1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004fa8:	2004      	movs	r0, #4
 8004faa:	68d1      	ldr	r1, [r2, #12]
 8004fac:	4201      	tst	r1, r0
 8004fae:	d005      	beq.n	8004fbc <FLASH_SetErrorCode+0x30>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8004fb0:	2101      	movs	r1, #1
 8004fb2:	4c04      	ldr	r4, [pc, #16]	; (8004fc4 <FLASH_SetErrorCode+0x38>)
    flags |= FLASH_FLAG_PGERR;
 8004fb4:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8004fb6:	69e5      	ldr	r5, [r4, #28]
 8004fb8:	4329      	orrs	r1, r5
 8004fba:	61e1      	str	r1, [r4, #28]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004fbc:	60d3      	str	r3, [r2, #12]
}  
 8004fbe:	bd30      	pop	{r4, r5, pc}
 8004fc0:	40022000 	.word	0x40022000
 8004fc4:	20000770 	.word	0x20000770

08004fc8 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004fc8:	4b06      	ldr	r3, [pc, #24]	; (8004fe4 <HAL_FLASH_Unlock+0x1c>)
  HAL_StatusTypeDef status = HAL_OK;
 8004fca:	2000      	movs	r0, #0
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004fcc:	691a      	ldr	r2, [r3, #16]
 8004fce:	0612      	lsls	r2, r2, #24
 8004fd0:	d506      	bpl.n	8004fe0 <HAL_FLASH_Unlock+0x18>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004fd2:	4a05      	ldr	r2, [pc, #20]	; (8004fe8 <HAL_FLASH_Unlock+0x20>)
 8004fd4:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004fd6:	4a05      	ldr	r2, [pc, #20]	; (8004fec <HAL_FLASH_Unlock+0x24>)
 8004fd8:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004fda:	6918      	ldr	r0, [r3, #16]
 8004fdc:	0600      	lsls	r0, r0, #24
  HAL_StatusTypeDef status = HAL_OK;
 8004fde:	0fc0      	lsrs	r0, r0, #31
}
 8004fe0:	4770      	bx	lr
 8004fe2:	46c0      	nop			; (mov r8, r8)
 8004fe4:	40022000 	.word	0x40022000
 8004fe8:	45670123 	.word	0x45670123
 8004fec:	cdef89ab 	.word	0xcdef89ab

08004ff0 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004ff0:	2380      	movs	r3, #128	; 0x80
 8004ff2:	4a03      	ldr	r2, [pc, #12]	; (8005000 <HAL_FLASH_Lock+0x10>)
}
 8004ff4:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004ff6:	6911      	ldr	r1, [r2, #16]
 8004ff8:	430b      	orrs	r3, r1
 8004ffa:	6113      	str	r3, [r2, #16]
}
 8004ffc:	4770      	bx	lr
 8004ffe:	46c0      	nop			; (mov r8, r8)
 8005000:	40022000 	.word	0x40022000

08005004 <FLASH_WaitForLastOperation>:
{
 8005004:	b570      	push	{r4, r5, r6, lr}
 8005006:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005008:	f7ff fd32 	bl	8004a70 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800500c:	2601      	movs	r6, #1
  uint32_t tickstart = HAL_GetTick();
 800500e:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005010:	4b10      	ldr	r3, [pc, #64]	; (8005054 <FLASH_WaitForLastOperation+0x50>)
 8005012:	68da      	ldr	r2, [r3, #12]
 8005014:	4232      	tst	r2, r6
 8005016:	d111      	bne.n	800503c <FLASH_WaitForLastOperation+0x38>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8005018:	2220      	movs	r2, #32
 800501a:	68d9      	ldr	r1, [r3, #12]
 800501c:	4211      	tst	r1, r2
 800501e:	d000      	beq.n	8005022 <FLASH_WaitForLastOperation+0x1e>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005020:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005022:	68d9      	ldr	r1, [r3, #12]
 8005024:	2210      	movs	r2, #16
 8005026:	0008      	movs	r0, r1
 8005028:	4010      	ands	r0, r2
 800502a:	4211      	tst	r1, r2
 800502c:	d102      	bne.n	8005034 <FLASH_WaitForLastOperation+0x30>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800502e:	68db      	ldr	r3, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005030:	075b      	lsls	r3, r3, #29
 8005032:	d508      	bpl.n	8005046 <FLASH_WaitForLastOperation+0x42>
    FLASH_SetErrorCode();
 8005034:	f7ff ffaa 	bl	8004f8c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005038:	2001      	movs	r0, #1
 800503a:	e004      	b.n	8005046 <FLASH_WaitForLastOperation+0x42>
    if (Timeout != HAL_MAX_DELAY)
 800503c:	1c62      	adds	r2, r4, #1
 800503e:	d0e8      	beq.n	8005012 <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8005040:	2c00      	cmp	r4, #0
 8005042:	d101      	bne.n	8005048 <FLASH_WaitForLastOperation+0x44>
        return HAL_TIMEOUT;
 8005044:	2003      	movs	r0, #3
}
 8005046:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8005048:	f7ff fd12 	bl	8004a70 <HAL_GetTick>
 800504c:	1b40      	subs	r0, r0, r5
 800504e:	42a0      	cmp	r0, r4
 8005050:	d9de      	bls.n	8005010 <FLASH_WaitForLastOperation+0xc>
 8005052:	e7f7      	b.n	8005044 <FLASH_WaitForLastOperation+0x40>
 8005054:	40022000 	.word	0x40022000

08005058 <HAL_FLASH_Program>:
{
 8005058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800505a:	b085      	sub	sp, #20
 800505c:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(&pFlash);
 800505e:	4b1c      	ldr	r3, [pc, #112]	; (80050d0 <HAL_FLASH_Program+0x78>)
{
 8005060:	9101      	str	r1, [sp, #4]
 8005062:	9202      	str	r2, [sp, #8]
  __HAL_LOCK(&pFlash);
 8005064:	7e1a      	ldrb	r2, [r3, #24]
{
 8005066:	0004      	movs	r4, r0
  __HAL_LOCK(&pFlash);
 8005068:	2002      	movs	r0, #2
 800506a:	2a01      	cmp	r2, #1
 800506c:	d02e      	beq.n	80050cc <HAL_FLASH_Program+0x74>
 800506e:	2201      	movs	r2, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005070:	4818      	ldr	r0, [pc, #96]	; (80050d4 <HAL_FLASH_Program+0x7c>)
  __HAL_LOCK(&pFlash);
 8005072:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005074:	f7ff ffc6 	bl	8005004 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8005078:	2800      	cmp	r0, #0
 800507a:	d124      	bne.n	80050c6 <HAL_FLASH_Program+0x6e>
      nbiterations = 1U;
 800507c:	0026      	movs	r6, r4
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800507e:	2c01      	cmp	r4, #1
 8005080:	d002      	beq.n	8005088 <HAL_FLASH_Program+0x30>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005082:	2c02      	cmp	r4, #2
 8005084:	d000      	beq.n	8005088 <HAL_FLASH_Program+0x30>
      nbiterations = 4U;
 8005086:	2604      	movs	r6, #4
 8005088:	2400      	movs	r4, #0
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800508a:	9802      	ldr	r0, [sp, #8]
 800508c:	9903      	ldr	r1, [sp, #12]
 800508e:	0122      	lsls	r2, r4, #4
 8005090:	f7fb f9cc 	bl	800042c <__aeabi_llsr>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005094:	2200      	movs	r2, #0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005096:	2701      	movs	r7, #1
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005098:	4b0d      	ldr	r3, [pc, #52]	; (80050d0 <HAL_FLASH_Program+0x78>)
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800509a:	4d0f      	ldr	r5, [pc, #60]	; (80050d8 <HAL_FLASH_Program+0x80>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800509c:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800509e:	692b      	ldr	r3, [r5, #16]
 80050a0:	9a01      	ldr	r2, [sp, #4]
 80050a2:	433b      	orrs	r3, r7
 80050a4:	612b      	str	r3, [r5, #16]
 80050a6:	0063      	lsls	r3, r4, #1
 80050a8:	189b      	adds	r3, r3, r2
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80050aa:	b280      	uxth	r0, r0
  *(__IO uint16_t*)Address = Data;
 80050ac:	8018      	strh	r0, [r3, #0]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80050ae:	4809      	ldr	r0, [pc, #36]	; (80050d4 <HAL_FLASH_Program+0x7c>)
 80050b0:	f7ff ffa8 	bl	8005004 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80050b4:	692b      	ldr	r3, [r5, #16]
 80050b6:	43bb      	bics	r3, r7
 80050b8:	612b      	str	r3, [r5, #16]
      if (status != HAL_OK)
 80050ba:	2800      	cmp	r0, #0
 80050bc:	d103      	bne.n	80050c6 <HAL_FLASH_Program+0x6e>
    for (index = 0U; index < nbiterations; index++)
 80050be:	19e4      	adds	r4, r4, r7
 80050c0:	b2e3      	uxtb	r3, r4
 80050c2:	429e      	cmp	r6, r3
 80050c4:	d8e1      	bhi.n	800508a <HAL_FLASH_Program+0x32>
  __HAL_UNLOCK(&pFlash);
 80050c6:	2200      	movs	r2, #0
 80050c8:	4b01      	ldr	r3, [pc, #4]	; (80050d0 <HAL_FLASH_Program+0x78>)
 80050ca:	761a      	strb	r2, [r3, #24]
}
 80050cc:	b005      	add	sp, #20
 80050ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050d0:	20000770 	.word	0x20000770
 80050d4:	0000c350 	.word	0x0000c350
 80050d8:	40022000 	.word	0x40022000

080050dc <FLASH_MassErase>:
  * @retval None
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80050dc:	2200      	movs	r2, #0
 80050de:	4b06      	ldr	r3, [pc, #24]	; (80050f8 <FLASH_MassErase+0x1c>)
 80050e0:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80050e2:	4b06      	ldr	r3, [pc, #24]	; (80050fc <FLASH_MassErase+0x20>)
 80050e4:	3204      	adds	r2, #4
 80050e6:	6919      	ldr	r1, [r3, #16]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80050ec:	2240      	movs	r2, #64	; 0x40
 80050ee:	6919      	ldr	r1, [r3, #16]
 80050f0:	430a      	orrs	r2, r1
 80050f2:	611a      	str	r2, [r3, #16]
}
 80050f4:	4770      	bx	lr
 80050f6:	46c0      	nop			; (mov r8, r8)
 80050f8:	20000770 	.word	0x20000770
 80050fc:	40022000 	.word	0x40022000

08005100 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005100:	2200      	movs	r2, #0
 8005102:	4b06      	ldr	r3, [pc, #24]	; (800511c <FLASH_PageErase+0x1c>)
 8005104:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8005106:	4b06      	ldr	r3, [pc, #24]	; (8005120 <FLASH_PageErase+0x20>)
 8005108:	3202      	adds	r2, #2
 800510a:	6919      	ldr	r1, [r3, #16]
 800510c:	430a      	orrs	r2, r1
 800510e:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005110:	2240      	movs	r2, #64	; 0x40
    WRITE_REG(FLASH->AR, PageAddress);
 8005112:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005114:	6919      	ldr	r1, [r3, #16]
 8005116:	430a      	orrs	r2, r1
 8005118:	611a      	str	r2, [r3, #16]
}
 800511a:	4770      	bx	lr
 800511c:	20000770 	.word	0x20000770
 8005120:	40022000 	.word	0x40022000

08005124 <HAL_FLASHEx_Erase>:
{
 8005124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8005126:	4f21      	ldr	r7, [pc, #132]	; (80051ac <HAL_FLASHEx_Erase+0x88>)
{
 8005128:	0004      	movs	r4, r0
  __HAL_LOCK(&pFlash);
 800512a:	7e3b      	ldrb	r3, [r7, #24]
{
 800512c:	000e      	movs	r6, r1
  __HAL_LOCK(&pFlash);
 800512e:	2002      	movs	r0, #2
 8005130:	2b01      	cmp	r3, #1
 8005132:	d00c      	beq.n	800514e <HAL_FLASHEx_Erase+0x2a>
 8005134:	2301      	movs	r3, #1
 8005136:	763b      	strb	r3, [r7, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005138:	6823      	ldr	r3, [r4, #0]
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800513a:	481d      	ldr	r0, [pc, #116]	; (80051b0 <HAL_FLASHEx_Erase+0x8c>)
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800513c:	2b01      	cmp	r3, #1
 800513e:	d112      	bne.n	8005166 <HAL_FLASHEx_Erase+0x42>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005140:	f7ff ff60 	bl	8005004 <FLASH_WaitForLastOperation>
 8005144:	2800      	cmp	r0, #0
 8005146:	d003      	beq.n	8005150 <HAL_FLASHEx_Erase+0x2c>
  HAL_StatusTypeDef status = HAL_ERROR;
 8005148:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 800514a:	2300      	movs	r3, #0
 800514c:	763b      	strb	r3, [r7, #24]
}
 800514e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        FLASH_MassErase();
 8005150:	f7ff ffc4 	bl	80050dc <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005154:	4816      	ldr	r0, [pc, #88]	; (80051b0 <HAL_FLASHEx_Erase+0x8c>)
 8005156:	f7ff ff55 	bl	8005004 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800515a:	2104      	movs	r1, #4
 800515c:	4a15      	ldr	r2, [pc, #84]	; (80051b4 <HAL_FLASHEx_Erase+0x90>)
 800515e:	6913      	ldr	r3, [r2, #16]
 8005160:	438b      	bics	r3, r1
 8005162:	6113      	str	r3, [r2, #16]
 8005164:	e7f1      	b.n	800514a <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005166:	f7ff ff4d 	bl	8005004 <FLASH_WaitForLastOperation>
 800516a:	2800      	cmp	r0, #0
 800516c:	d1ec      	bne.n	8005148 <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 800516e:	2301      	movs	r3, #1
 8005170:	425b      	negs	r3, r3
 8005172:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 8005174:	6865      	ldr	r5, [r4, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005176:	3001      	adds	r0, #1
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8005178:	68a3      	ldr	r3, [r4, #8]
 800517a:	6862      	ldr	r2, [r4, #4]
 800517c:	029b      	lsls	r3, r3, #10
 800517e:	189b      	adds	r3, r3, r2
        for(address = pEraseInit->PageAddress;
 8005180:	42ab      	cmp	r3, r5
 8005182:	d9e2      	bls.n	800514a <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 8005184:	0028      	movs	r0, r5
 8005186:	f7ff ffbb 	bl	8005100 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800518a:	4809      	ldr	r0, [pc, #36]	; (80051b0 <HAL_FLASHEx_Erase+0x8c>)
 800518c:	f7ff ff3a 	bl	8005004 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8005190:	2102      	movs	r1, #2
 8005192:	4a08      	ldr	r2, [pc, #32]	; (80051b4 <HAL_FLASHEx_Erase+0x90>)
 8005194:	6913      	ldr	r3, [r2, #16]
 8005196:	438b      	bics	r3, r1
 8005198:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 800519a:	2800      	cmp	r0, #0
 800519c:	d001      	beq.n	80051a2 <HAL_FLASHEx_Erase+0x7e>
            *PageError = address;
 800519e:	6035      	str	r5, [r6, #0]
            break;
 80051a0:	e7d3      	b.n	800514a <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 80051a2:	2380      	movs	r3, #128	; 0x80
 80051a4:	00db      	lsls	r3, r3, #3
 80051a6:	18ed      	adds	r5, r5, r3
 80051a8:	e7e6      	b.n	8005178 <HAL_FLASHEx_Erase+0x54>
 80051aa:	46c0      	nop			; (mov r8, r8)
 80051ac:	20000770 	.word	0x20000770
 80051b0:	0000c350 	.word	0x0000c350
 80051b4:	40022000 	.word	0x40022000

080051b8 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 80051b8:	2300      	movs	r3, #0
{
 80051ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051bc:	b087      	sub	sp, #28
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80051be:	680a      	ldr	r2, [r1, #0]
 80051c0:	0014      	movs	r4, r2
 80051c2:	40dc      	lsrs	r4, r3
 80051c4:	d101      	bne.n	80051ca <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  } 
}
 80051c6:	b007      	add	sp, #28
 80051c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80051ca:	2501      	movs	r5, #1
 80051cc:	0014      	movs	r4, r2
 80051ce:	409d      	lsls	r5, r3
 80051d0:	402c      	ands	r4, r5
 80051d2:	9401      	str	r4, [sp, #4]
    if (iocurrent != 0x00u)
 80051d4:	422a      	tst	r2, r5
 80051d6:	d100      	bne.n	80051da <HAL_GPIO_Init+0x22>
 80051d8:	e095      	b.n	8005306 <HAL_GPIO_Init+0x14e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80051da:	684a      	ldr	r2, [r1, #4]
 80051dc:	005e      	lsls	r6, r3, #1
 80051de:	4694      	mov	ip, r2
 80051e0:	2203      	movs	r2, #3
 80051e2:	4664      	mov	r4, ip
 80051e4:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80051e6:	2403      	movs	r4, #3
 80051e8:	40b4      	lsls	r4, r6
 80051ea:	43e4      	mvns	r4, r4
 80051ec:	9402      	str	r4, [sp, #8]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80051ee:	1e54      	subs	r4, r2, #1
 80051f0:	2c01      	cmp	r4, #1
 80051f2:	d82a      	bhi.n	800524a <HAL_GPIO_Init+0x92>
        temp = GPIOx->OSPEEDR;
 80051f4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80051f6:	9c02      	ldr	r4, [sp, #8]
 80051f8:	4027      	ands	r7, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 80051fa:	68cc      	ldr	r4, [r1, #12]
 80051fc:	40b4      	lsls	r4, r6
 80051fe:	433c      	orrs	r4, r7
        GPIOx->OSPEEDR = temp;
 8005200:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8005202:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005204:	2701      	movs	r7, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005206:	43ac      	bics	r4, r5
 8005208:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800520a:	4664      	mov	r4, ip
 800520c:	0924      	lsrs	r4, r4, #4
 800520e:	403c      	ands	r4, r7
 8005210:	409c      	lsls	r4, r3
 8005212:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8005214:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8005216:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005218:	9c02      	ldr	r4, [sp, #8]
 800521a:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800521c:	688c      	ldr	r4, [r1, #8]
 800521e:	40b4      	lsls	r4, r6
 8005220:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8005222:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005224:	2a02      	cmp	r2, #2
 8005226:	d112      	bne.n	800524e <HAL_GPIO_Init+0x96>
        temp = GPIOx->AFR[position >> 3u];
 8005228:	08dc      	lsrs	r4, r3, #3
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800522a:	2507      	movs	r5, #7
 800522c:	00a4      	lsls	r4, r4, #2
 800522e:	1904      	adds	r4, r0, r4
        temp = GPIOx->AFR[position >> 3u];
 8005230:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005232:	9403      	str	r4, [sp, #12]
 8005234:	240f      	movs	r4, #15
 8005236:	401d      	ands	r5, r3
 8005238:	00ad      	lsls	r5, r5, #2
 800523a:	40ac      	lsls	r4, r5
 800523c:	43a7      	bics	r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800523e:	690c      	ldr	r4, [r1, #16]
 8005240:	40ac      	lsls	r4, r5
 8005242:	4327      	orrs	r7, r4
        GPIOx->AFR[position >> 3u] = temp;
 8005244:	9c03      	ldr	r4, [sp, #12]
 8005246:	6227      	str	r7, [r4, #32]
 8005248:	e001      	b.n	800524e <HAL_GPIO_Init+0x96>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800524a:	2a03      	cmp	r2, #3
 800524c:	d1e3      	bne.n	8005216 <HAL_GPIO_Init+0x5e>
      temp = GPIOx->MODER;
 800524e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005250:	9d02      	ldr	r5, [sp, #8]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005252:	40b2      	lsls	r2, r6
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005254:	4025      	ands	r5, r4
 8005256:	002c      	movs	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005258:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 800525a:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800525c:	24c0      	movs	r4, #192	; 0xc0
 800525e:	4662      	mov	r2, ip
 8005260:	02a4      	lsls	r4, r4, #10
 8005262:	4222      	tst	r2, r4
 8005264:	d04f      	beq.n	8005306 <HAL_GPIO_Init+0x14e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005266:	2501      	movs	r5, #1
 8005268:	4a28      	ldr	r2, [pc, #160]	; (800530c <HAL_GPIO_Init+0x154>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800526a:	2790      	movs	r7, #144	; 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800526c:	6994      	ldr	r4, [r2, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800526e:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005270:	432c      	orrs	r4, r5
 8005272:	6194      	str	r4, [r2, #24]
 8005274:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8005276:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005278:	402a      	ands	r2, r5
 800527a:	9205      	str	r2, [sp, #20]
 800527c:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 800527e:	4a24      	ldr	r2, [pc, #144]	; (8005310 <HAL_GPIO_Init+0x158>)
 8005280:	00a4      	lsls	r4, r4, #2
 8005282:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005284:	220f      	movs	r2, #15
 8005286:	3502      	adds	r5, #2
 8005288:	401d      	ands	r5, r3
 800528a:	00ad      	lsls	r5, r5, #2
 800528c:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2u];
 800528e:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005290:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005292:	2200      	movs	r2, #0
 8005294:	42b8      	cmp	r0, r7
 8005296:	d00c      	beq.n	80052b2 <HAL_GPIO_Init+0xfa>
 8005298:	4f1e      	ldr	r7, [pc, #120]	; (8005314 <HAL_GPIO_Init+0x15c>)
 800529a:	3201      	adds	r2, #1
 800529c:	42b8      	cmp	r0, r7
 800529e:	d008      	beq.n	80052b2 <HAL_GPIO_Init+0xfa>
 80052a0:	4f1d      	ldr	r7, [pc, #116]	; (8005318 <HAL_GPIO_Init+0x160>)
 80052a2:	3201      	adds	r2, #1
 80052a4:	42b8      	cmp	r0, r7
 80052a6:	d004      	beq.n	80052b2 <HAL_GPIO_Init+0xfa>
 80052a8:	4f1c      	ldr	r7, [pc, #112]	; (800531c <HAL_GPIO_Init+0x164>)
 80052aa:	3201      	adds	r2, #1
 80052ac:	42b8      	cmp	r0, r7
 80052ae:	d000      	beq.n	80052b2 <HAL_GPIO_Init+0xfa>
 80052b0:	3202      	adds	r2, #2
 80052b2:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80052b4:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80052b6:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 80052b8:	60a2      	str	r2, [r4, #8]
        temp = EXTI->RTSR;
 80052ba:	4a19      	ldr	r2, [pc, #100]	; (8005320 <HAL_GPIO_Init+0x168>)
        temp &= ~(iocurrent);
 80052bc:	9c01      	ldr	r4, [sp, #4]
        temp = EXTI->RTSR;
 80052be:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 80052c0:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(iocurrent);
 80052c2:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 80052c4:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80052c6:	02ff      	lsls	r7, r7, #11
 80052c8:	d401      	bmi.n	80052ce <HAL_GPIO_Init+0x116>
        temp &= ~(iocurrent);
 80052ca:	0035      	movs	r5, r6
 80052cc:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80052ce:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 80052d0:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80052d2:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 80052d4:	9d01      	ldr	r5, [sp, #4]
 80052d6:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80052d8:	02bf      	lsls	r7, r7, #10
 80052da:	d401      	bmi.n	80052e0 <HAL_GPIO_Init+0x128>
        temp &= ~(iocurrent);
 80052dc:	0035      	movs	r5, r6
 80052de:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80052e0:	4667      	mov	r7, ip
        EXTI->FTSR = temp;
 80052e2:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 80052e4:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 80052e6:	9d01      	ldr	r5, [sp, #4]
 80052e8:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80052ea:	03bf      	lsls	r7, r7, #14
 80052ec:	d401      	bmi.n	80052f2 <HAL_GPIO_Init+0x13a>
        temp &= ~(iocurrent);
 80052ee:	0035      	movs	r5, r6
 80052f0:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80052f2:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 80052f4:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 80052f6:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 80052f8:	9e01      	ldr	r6, [sp, #4]
 80052fa:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80052fc:	03ff      	lsls	r7, r7, #15
 80052fe:	d401      	bmi.n	8005304 <HAL_GPIO_Init+0x14c>
        temp &= ~(iocurrent);
 8005300:	4025      	ands	r5, r4
 8005302:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 8005304:	6016      	str	r6, [r2, #0]
    position++;
 8005306:	3301      	adds	r3, #1
 8005308:	e759      	b.n	80051be <HAL_GPIO_Init+0x6>
 800530a:	46c0      	nop			; (mov r8, r8)
 800530c:	40021000 	.word	0x40021000
 8005310:	40010000 	.word	0x40010000
 8005314:	48000400 	.word	0x48000400
 8005318:	48000800 	.word	0x48000800
 800531c:	48000c00 	.word	0x48000c00
 8005320:	40010400 	.word	0x40010400

08005324 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005324:	6900      	ldr	r0, [r0, #16]
 8005326:	4008      	ands	r0, r1
 8005328:	1e43      	subs	r3, r0, #1
 800532a:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 800532c:	b2c0      	uxtb	r0, r0
  }
 800532e:	4770      	bx	lr

08005330 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005330:	2a00      	cmp	r2, #0
 8005332:	d001      	beq.n	8005338 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005334:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005336:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005338:	6281      	str	r1, [r0, #40]	; 0x28
}
 800533a:	e7fc      	b.n	8005336 <HAL_GPIO_WritePin+0x6>

0800533c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800533c:	6803      	ldr	r3, [r0, #0]
 800533e:	699a      	ldr	r2, [r3, #24]
 8005340:	0792      	lsls	r2, r2, #30
 8005342:	d501      	bpl.n	8005348 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005344:	2200      	movs	r2, #0
 8005346:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005348:	2201      	movs	r2, #1
 800534a:	6999      	ldr	r1, [r3, #24]
 800534c:	4211      	tst	r1, r2
 800534e:	d102      	bne.n	8005356 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005350:	6999      	ldr	r1, [r3, #24]
 8005352:	430a      	orrs	r2, r1
 8005354:	619a      	str	r2, [r3, #24]
  }
}
 8005356:	4770      	bx	lr

08005358 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005358:	b530      	push	{r4, r5, lr}
 800535a:	9c03      	ldr	r4, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800535c:	6800      	ldr	r0, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800535e:	4323      	orrs	r3, r4
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005360:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005362:	0589      	lsls	r1, r1, #22
 8005364:	431a      	orrs	r2, r3
 8005366:	0d89      	lsrs	r1, r1, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8005368:	4b05      	ldr	r3, [pc, #20]	; (8005380 <I2C_TransferConfig+0x28>)
 800536a:	6845      	ldr	r5, [r0, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800536c:	430a      	orrs	r2, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 800536e:	0d64      	lsrs	r4, r4, #21
 8005370:	431c      	orrs	r4, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005372:	0052      	lsls	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8005374:	43a5      	bics	r5, r4
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005376:	0852      	lsrs	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8005378:	432a      	orrs	r2, r5
 800537a:	6042      	str	r2, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800537c:	bd30      	pop	{r4, r5, pc}
 800537e:	46c0      	nop			; (mov r8, r8)
 8005380:	03ff63ff 	.word	0x03ff63ff

08005384 <I2C_IsErrorOccurred>:
{
 8005384:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005386:	0015      	movs	r5, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8005388:	6802      	ldr	r2, [r0, #0]
{
 800538a:	000e      	movs	r6, r1
  uint32_t itflag   = hi2c->Instance->ISR;
 800538c:	6991      	ldr	r1, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800538e:	2310      	movs	r3, #16
 8005390:	000f      	movs	r7, r1
{
 8005392:	0004      	movs	r4, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005394:	401f      	ands	r7, r3
  HAL_StatusTypeDef status = HAL_OK;
 8005396:	2000      	movs	r0, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005398:	4219      	tst	r1, r3
 800539a:	d00e      	beq.n	80053ba <I2C_IsErrorOccurred+0x36>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800539c:	2720      	movs	r7, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800539e:	61d3      	str	r3, [r2, #28]
  uint32_t error_code = 0;
 80053a0:	9000      	str	r0, [sp, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053a2:	9001      	str	r0, [sp, #4]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80053a4:	6823      	ldr	r3, [r4, #0]
 80053a6:	699a      	ldr	r2, [r3, #24]
 80053a8:	423a      	tst	r2, r7
 80053aa:	d164      	bne.n	8005476 <I2C_IsErrorOccurred+0xf2>
 80053ac:	9a01      	ldr	r2, [sp, #4]
 80053ae:	2a00      	cmp	r2, #0
 80053b0:	d032      	beq.n	8005418 <I2C_IsErrorOccurred+0x94>
    error_code |= HAL_I2C_ERROR_AF;
 80053b2:	2704      	movs	r7, #4
    status = HAL_ERROR;
 80053b4:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_AF;
 80053b6:	9b00      	ldr	r3, [sp, #0]
 80053b8:	431f      	orrs	r7, r3
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80053ba:	2180      	movs	r1, #128	; 0x80
  itflag = hi2c->Instance->ISR;
 80053bc:	6823      	ldr	r3, [r4, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80053be:	0049      	lsls	r1, r1, #1
  itflag = hi2c->Instance->ISR;
 80053c0:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80053c2:	420a      	tst	r2, r1
 80053c4:	d002      	beq.n	80053cc <I2C_IsErrorOccurred+0x48>
    error_code |= HAL_I2C_ERROR_BERR;
 80053c6:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80053c8:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 80053ca:	4307      	orrs	r7, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80053cc:	2180      	movs	r1, #128	; 0x80
 80053ce:	00c9      	lsls	r1, r1, #3
 80053d0:	420a      	tst	r2, r1
 80053d2:	d003      	beq.n	80053dc <I2C_IsErrorOccurred+0x58>
    error_code |= HAL_I2C_ERROR_OVR;
 80053d4:	2008      	movs	r0, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80053d6:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 80053d8:	4307      	orrs	r7, r0
    status = HAL_ERROR;
 80053da:	3807      	subs	r0, #7
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80053dc:	2180      	movs	r1, #128	; 0x80
 80053de:	0089      	lsls	r1, r1, #2
 80053e0:	420a      	tst	r2, r1
 80053e2:	d04d      	beq.n	8005480 <I2C_IsErrorOccurred+0xfc>
    error_code |= HAL_I2C_ERROR_ARLO;
 80053e4:	2202      	movs	r2, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80053e6:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_ARLO;
 80053e8:	4317      	orrs	r7, r2
    I2C_Flush_TXDR(hi2c);
 80053ea:	0020      	movs	r0, r4
 80053ec:	f7ff ffa6 	bl	800533c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80053f0:	6822      	ldr	r2, [r4, #0]
 80053f2:	4925      	ldr	r1, [pc, #148]	; (8005488 <I2C_IsErrorOccurred+0x104>)
 80053f4:	6853      	ldr	r3, [r2, #4]
 80053f6:	400b      	ands	r3, r1
 80053f8:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80053fa:	0023      	movs	r3, r4
 80053fc:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 80053fe:	6c60      	ldr	r0, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005400:	3341      	adds	r3, #65	; 0x41
    hi2c->ErrorCode |= error_code;
 8005402:	4307      	orrs	r7, r0
 8005404:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005406:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005408:	0022      	movs	r2, r4
 800540a:	2300      	movs	r3, #0
 800540c:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 800540e:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005410:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8005412:	2001      	movs	r0, #1
 8005414:	7023      	strb	r3, [r4, #0]
 8005416:	e035      	b.n	8005484 <I2C_IsErrorOccurred+0x100>
      if (Timeout != HAL_MAX_DELAY)
 8005418:	1c72      	adds	r2, r6, #1
 800541a:	d0c4      	beq.n	80053a6 <I2C_IsErrorOccurred+0x22>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800541c:	f7ff fb28 	bl	8004a70 <HAL_GetTick>
 8005420:	1b40      	subs	r0, r0, r5
 8005422:	42b0      	cmp	r0, r6
 8005424:	d801      	bhi.n	800542a <I2C_IsErrorOccurred+0xa6>
 8005426:	2e00      	cmp	r6, #0
 8005428:	d1bc      	bne.n	80053a4 <I2C_IsErrorOccurred+0x20>
          tmp2 = hi2c->Mode;
 800542a:	0022      	movs	r2, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800542c:	6823      	ldr	r3, [r4, #0]
          tmp2 = hi2c->Mode;
 800542e:	3242      	adds	r2, #66	; 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005430:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8005432:	7811      	ldrb	r1, [r2, #0]
 8005434:	b2ca      	uxtb	r2, r1
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005436:	2180      	movs	r1, #128	; 0x80
          tmp2 = hi2c->Mode;
 8005438:	4694      	mov	ip, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800543a:	699a      	ldr	r2, [r3, #24]
 800543c:	0209      	lsls	r1, r1, #8
 800543e:	420a      	tst	r2, r1
 8005440:	d00c      	beq.n	800545c <I2C_IsErrorOccurred+0xd8>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005442:	2280      	movs	r2, #128	; 0x80
 8005444:	01d2      	lsls	r2, r2, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005446:	4210      	tst	r0, r2
 8005448:	d108      	bne.n	800545c <I2C_IsErrorOccurred+0xd8>
              (tmp1 != I2C_CR2_STOP) && \
 800544a:	4661      	mov	r1, ip
 800544c:	2920      	cmp	r1, #32
 800544e:	d005      	beq.n	800545c <I2C_IsErrorOccurred+0xd8>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005450:	6859      	ldr	r1, [r3, #4]
 8005452:	430a      	orrs	r2, r1
 8005454:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8005456:	f7ff fb0b 	bl	8004a70 <HAL_GetTick>
 800545a:	0005      	movs	r5, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800545c:	6823      	ldr	r3, [r4, #0]
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	423b      	tst	r3, r7
 8005462:	d19f      	bne.n	80053a4 <I2C_IsErrorOccurred+0x20>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005464:	f7ff fb04 	bl	8004a70 <HAL_GetTick>
 8005468:	1b40      	subs	r0, r0, r5
 800546a:	2819      	cmp	r0, #25
 800546c:	d9f6      	bls.n	800545c <I2C_IsErrorOccurred+0xd8>
              status = HAL_ERROR;
 800546e:	2301      	movs	r3, #1
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005470:	9700      	str	r7, [sp, #0]
              status = HAL_ERROR;
 8005472:	9301      	str	r3, [sp, #4]
 8005474:	e796      	b.n	80053a4 <I2C_IsErrorOccurred+0x20>
    if (status == HAL_OK)
 8005476:	9a01      	ldr	r2, [sp, #4]
 8005478:	2a00      	cmp	r2, #0
 800547a:	d19a      	bne.n	80053b2 <I2C_IsErrorOccurred+0x2e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800547c:	61df      	str	r7, [r3, #28]
 800547e:	e798      	b.n	80053b2 <I2C_IsErrorOccurred+0x2e>
  if (status != HAL_OK)
 8005480:	2800      	cmp	r0, #0
 8005482:	d1b2      	bne.n	80053ea <I2C_IsErrorOccurred+0x66>
}
 8005484:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005486:	46c0      	nop			; (mov r8, r8)
 8005488:	fe00e800 	.word	0xfe00e800

0800548c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800548c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800548e:	0004      	movs	r4, r0
 8005490:	000d      	movs	r5, r1
 8005492:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005494:	2702      	movs	r7, #2
 8005496:	6823      	ldr	r3, [r4, #0]
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	423b      	tst	r3, r7
 800549c:	d001      	beq.n	80054a2 <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 800549e:	2000      	movs	r0, #0
}
 80054a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80054a2:	0032      	movs	r2, r6
 80054a4:	0029      	movs	r1, r5
 80054a6:	0020      	movs	r0, r4
 80054a8:	f7ff ff6c 	bl	8005384 <I2C_IsErrorOccurred>
 80054ac:	2800      	cmp	r0, #0
 80054ae:	d118      	bne.n	80054e2 <I2C_WaitOnTXISFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 80054b0:	1c6b      	adds	r3, r5, #1
 80054b2:	d0f0      	beq.n	8005496 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054b4:	f7ff fadc 	bl	8004a70 <HAL_GetTick>
 80054b8:	1b80      	subs	r0, r0, r6
 80054ba:	42a8      	cmp	r0, r5
 80054bc:	d801      	bhi.n	80054c2 <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 80054be:	2d00      	cmp	r5, #0
 80054c0:	d1e9      	bne.n	8005496 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80054c2:	6823      	ldr	r3, [r4, #0]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	001a      	movs	r2, r3
 80054c8:	403a      	ands	r2, r7
 80054ca:	423b      	tst	r3, r7
 80054cc:	d1e3      	bne.n	8005496 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054ce:	2120      	movs	r1, #32
 80054d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80054d2:	430b      	orrs	r3, r1
 80054d4:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80054d6:	0023      	movs	r3, r4
          __HAL_UNLOCK(hi2c);
 80054d8:	3440      	adds	r4, #64	; 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 80054da:	3341      	adds	r3, #65	; 0x41
 80054dc:	7019      	strb	r1, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80054de:	705a      	strb	r2, [r3, #1]
          __HAL_UNLOCK(hi2c);
 80054e0:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 80054e2:	2001      	movs	r0, #1
 80054e4:	e7dc      	b.n	80054a0 <I2C_WaitOnTXISFlagUntilTimeout+0x14>

080054e6 <I2C_WaitOnFlagUntilTimeout>:
{
 80054e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054e8:	0004      	movs	r4, r0
 80054ea:	000d      	movs	r5, r1
 80054ec:	0017      	movs	r7, r2
 80054ee:	001e      	movs	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054f0:	6822      	ldr	r2, [r4, #0]
 80054f2:	6993      	ldr	r3, [r2, #24]
 80054f4:	402b      	ands	r3, r5
 80054f6:	1b5b      	subs	r3, r3, r5
 80054f8:	4259      	negs	r1, r3
 80054fa:	414b      	adcs	r3, r1
 80054fc:	42bb      	cmp	r3, r7
 80054fe:	d001      	beq.n	8005504 <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8005500:	2000      	movs	r0, #0
 8005502:	e01f      	b.n	8005544 <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 8005504:	1c73      	adds	r3, r6, #1
 8005506:	d0f4      	beq.n	80054f2 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005508:	f7ff fab2 	bl	8004a70 <HAL_GetTick>
 800550c:	9b06      	ldr	r3, [sp, #24]
 800550e:	1ac0      	subs	r0, r0, r3
 8005510:	42b0      	cmp	r0, r6
 8005512:	d801      	bhi.n	8005518 <I2C_WaitOnFlagUntilTimeout+0x32>
 8005514:	2e00      	cmp	r6, #0
 8005516:	d1eb      	bne.n	80054f0 <I2C_WaitOnFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005518:	6823      	ldr	r3, [r4, #0]
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	402b      	ands	r3, r5
 800551e:	1b5b      	subs	r3, r3, r5
 8005520:	425a      	negs	r2, r3
 8005522:	4153      	adcs	r3, r2
 8005524:	42bb      	cmp	r3, r7
 8005526:	d1e3      	bne.n	80054f0 <I2C_WaitOnFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005528:	2220      	movs	r2, #32
 800552a:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 800552c:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800552e:	4313      	orrs	r3, r2
 8005530:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005532:	0023      	movs	r3, r4
 8005534:	3341      	adds	r3, #65	; 0x41
 8005536:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005538:	0022      	movs	r2, r4
 800553a:	2300      	movs	r3, #0
 800553c:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 800553e:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005540:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 8005542:	7023      	strb	r3, [r4, #0]
}
 8005544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005546 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8005546:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005548:	0004      	movs	r4, r0
 800554a:	000e      	movs	r6, r1
 800554c:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800554e:	2520      	movs	r5, #32
 8005550:	6823      	ldr	r3, [r4, #0]
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	422b      	tst	r3, r5
 8005556:	d001      	beq.n	800555c <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8005558:	2000      	movs	r0, #0
}
 800555a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800555c:	003a      	movs	r2, r7
 800555e:	0031      	movs	r1, r6
 8005560:	0020      	movs	r0, r4
 8005562:	f7ff ff0f 	bl	8005384 <I2C_IsErrorOccurred>
 8005566:	2800      	cmp	r0, #0
 8005568:	d115      	bne.n	8005596 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800556a:	f7ff fa81 	bl	8004a70 <HAL_GetTick>
 800556e:	1bc0      	subs	r0, r0, r7
 8005570:	42b0      	cmp	r0, r6
 8005572:	d801      	bhi.n	8005578 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8005574:	2e00      	cmp	r6, #0
 8005576:	d1eb      	bne.n	8005550 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005578:	6823      	ldr	r3, [r4, #0]
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	001a      	movs	r2, r3
 800557e:	402a      	ands	r2, r5
 8005580:	422b      	tst	r3, r5
 8005582:	d1e5      	bne.n	8005550 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005584:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005586:	432b      	orrs	r3, r5
 8005588:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800558a:	0023      	movs	r3, r4
        __HAL_UNLOCK(hi2c);
 800558c:	3440      	adds	r4, #64	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 800558e:	3341      	adds	r3, #65	; 0x41
 8005590:	701d      	strb	r5, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005592:	705a      	strb	r2, [r3, #1]
        __HAL_UNLOCK(hi2c);
 8005594:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 8005596:	2001      	movs	r0, #1
 8005598:	e7df      	b.n	800555a <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
	...

0800559c <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800559c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800559e:	0004      	movs	r4, r0
 80055a0:	000d      	movs	r5, r1
 80055a2:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055a4:	2604      	movs	r6, #4
 80055a6:	6823      	ldr	r3, [r4, #0]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	4233      	tst	r3, r6
 80055ac:	d111      	bne.n	80055d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80055ae:	003a      	movs	r2, r7
 80055b0:	0029      	movs	r1, r5
 80055b2:	0020      	movs	r0, r4
 80055b4:	f7ff fee6 	bl	8005384 <I2C_IsErrorOccurred>
 80055b8:	2800      	cmp	r0, #0
 80055ba:	d124      	bne.n	8005606 <I2C_WaitOnRXNEFlagUntilTimeout+0x6a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80055bc:	2120      	movs	r1, #32
 80055be:	6823      	ldr	r3, [r4, #0]
 80055c0:	699a      	ldr	r2, [r3, #24]
 80055c2:	420a      	tst	r2, r1
 80055c4:	d023      	beq.n	800560e <I2C_WaitOnRXNEFlagUntilTimeout+0x72>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80055c6:	699a      	ldr	r2, [r3, #24]
 80055c8:	4232      	tst	r2, r6
 80055ca:	d004      	beq.n	80055d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 80055cc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80055ce:	2a00      	cmp	r2, #0
 80055d0:	d001      	beq.n	80055d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
        return HAL_OK;
 80055d2:	2000      	movs	r0, #0
}
 80055d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055d6:	6999      	ldr	r1, [r3, #24]
 80055d8:	2210      	movs	r2, #16
 80055da:	0008      	movs	r0, r1
 80055dc:	4010      	ands	r0, r2
 80055de:	4211      	tst	r1, r2
 80055e0:	d013      	beq.n	800560a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055e2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80055e4:	3a0c      	subs	r2, #12
 80055e6:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055e8:	2120      	movs	r1, #32
 80055ea:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 80055ec:	685a      	ldr	r2, [r3, #4]
 80055ee:	4813      	ldr	r0, [pc, #76]	; (800563c <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>)
 80055f0:	4002      	ands	r2, r0
 80055f2:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 80055f4:	0023      	movs	r3, r4
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055f6:	0022      	movs	r2, r4
        hi2c->State = HAL_I2C_STATE_READY;
 80055f8:	3341      	adds	r3, #65	; 0x41
 80055fa:	7019      	strb	r1, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055fc:	2300      	movs	r3, #0
 80055fe:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 8005600:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005602:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8005604:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8005606:	2001      	movs	r0, #1
 8005608:	e7e4      	b.n	80055d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800560a:	6460      	str	r0, [r4, #68]	; 0x44
 800560c:	e7ec      	b.n	80055e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800560e:	f7ff fa2f 	bl	8004a70 <HAL_GetTick>
 8005612:	1bc0      	subs	r0, r0, r7
 8005614:	42a8      	cmp	r0, r5
 8005616:	d801      	bhi.n	800561c <I2C_WaitOnRXNEFlagUntilTimeout+0x80>
 8005618:	2d00      	cmp	r5, #0
 800561a:	d1c4      	bne.n	80055a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800561c:	6823      	ldr	r3, [r4, #0]
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	0019      	movs	r1, r3
 8005622:	4031      	ands	r1, r6
 8005624:	4233      	tst	r3, r6
 8005626:	d1be      	bne.n	80055a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005628:	2220      	movs	r2, #32
 800562a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800562c:	4313      	orrs	r3, r2
 800562e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005630:	0023      	movs	r3, r4
        __HAL_UNLOCK(hi2c);
 8005632:	3440      	adds	r4, #64	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8005634:	3341      	adds	r3, #65	; 0x41
 8005636:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hi2c);
 8005638:	7021      	strb	r1, [r4, #0]
        return HAL_ERROR;
 800563a:	e7e4      	b.n	8005606 <I2C_WaitOnRXNEFlagUntilTimeout+0x6a>
 800563c:	fe00e800 	.word	0xfe00e800

08005640 <HAL_I2C_Init>:
{
 8005640:	b570      	push	{r4, r5, r6, lr}
 8005642:	0004      	movs	r4, r0
    return HAL_ERROR;
 8005644:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8005646:	2c00      	cmp	r4, #0
 8005648:	d03f      	beq.n	80056ca <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800564a:	0025      	movs	r5, r4
 800564c:	3541      	adds	r5, #65	; 0x41
 800564e:	782b      	ldrb	r3, [r5, #0]
 8005650:	b2da      	uxtb	r2, r3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d105      	bne.n	8005662 <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8005656:	0023      	movs	r3, r4
 8005658:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_MspInit(hi2c);
 800565a:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 800565c:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 800565e:	f7ff f8e1 	bl	8004824 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005662:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8005664:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005666:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8005668:	6823      	ldr	r3, [r4, #0]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800566a:	481d      	ldr	r0, [pc, #116]	; (80056e0 <HAL_I2C_Init+0xa0>)
  __HAL_I2C_DISABLE(hi2c);
 800566c:	681a      	ldr	r2, [r3, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800566e:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8005670:	438a      	bics	r2, r1
 8005672:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005674:	6861      	ldr	r1, [r4, #4]
 8005676:	4a1b      	ldr	r2, [pc, #108]	; (80056e4 <HAL_I2C_Init+0xa4>)
 8005678:	400a      	ands	r2, r1
 800567a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800567c:	689a      	ldr	r2, [r3, #8]
 800567e:	4002      	ands	r2, r0
 8005680:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005682:	68e2      	ldr	r2, [r4, #12]
 8005684:	2a01      	cmp	r2, #1
 8005686:	d121      	bne.n	80056cc <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005688:	2180      	movs	r1, #128	; 0x80
 800568a:	0209      	lsls	r1, r1, #8
 800568c:	4331      	orrs	r1, r6
 800568e:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005690:	685a      	ldr	r2, [r3, #4]
 8005692:	4915      	ldr	r1, [pc, #84]	; (80056e8 <HAL_I2C_Init+0xa8>)
 8005694:	4311      	orrs	r1, r2
 8005696:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005698:	68da      	ldr	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800569a:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800569c:	4002      	ands	r2, r0
 800569e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80056a0:	6922      	ldr	r2, [r4, #16]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056a2:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80056a4:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80056a6:	69a1      	ldr	r1, [r4, #24]
 80056a8:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80056aa:	430a      	orrs	r2, r1
 80056ac:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80056ae:	6a21      	ldr	r1, [r4, #32]
 80056b0:	69e2      	ldr	r2, [r4, #28]
 80056b2:	430a      	orrs	r2, r1
 80056b4:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80056b6:	2201      	movs	r2, #1
 80056b8:	6819      	ldr	r1, [r3, #0]
 80056ba:	430a      	orrs	r2, r1
 80056bc:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80056be:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056c0:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80056c2:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 80056c4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056c6:	3442      	adds	r4, #66	; 0x42
 80056c8:	7020      	strb	r0, [r4, #0]
}
 80056ca:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80056cc:	2184      	movs	r1, #132	; 0x84
 80056ce:	0209      	lsls	r1, r1, #8
 80056d0:	4331      	orrs	r1, r6
 80056d2:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80056d4:	2a02      	cmp	r2, #2
 80056d6:	d1db      	bne.n	8005690 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80056d8:	2280      	movs	r2, #128	; 0x80
 80056da:	0112      	lsls	r2, r2, #4
 80056dc:	605a      	str	r2, [r3, #4]
 80056de:	e7d7      	b.n	8005690 <HAL_I2C_Init+0x50>
 80056e0:	ffff7fff 	.word	0xffff7fff
 80056e4:	f0ffffff 	.word	0xf0ffffff
 80056e8:	02008000 	.word	0x02008000

080056ec <HAL_I2C_Master_Transmit>:
{
 80056ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056ee:	b087      	sub	sp, #28
 80056f0:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80056f2:	0003      	movs	r3, r0
 80056f4:	3341      	adds	r3, #65	; 0x41
{
 80056f6:	9204      	str	r2, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80056f8:	9303      	str	r3, [sp, #12]
 80056fa:	781b      	ldrb	r3, [r3, #0]
{
 80056fc:	0004      	movs	r4, r0
 80056fe:	000f      	movs	r7, r1
    return HAL_BUSY;
 8005700:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005702:	2b20      	cmp	r3, #32
 8005704:	d114      	bne.n	8005730 <HAL_I2C_Master_Transmit+0x44>
    __HAL_LOCK(hi2c);
 8005706:	0023      	movs	r3, r4
 8005708:	3340      	adds	r3, #64	; 0x40
 800570a:	781a      	ldrb	r2, [r3, #0]
 800570c:	2a01      	cmp	r2, #1
 800570e:	d00f      	beq.n	8005730 <HAL_I2C_Master_Transmit+0x44>
 8005710:	2601      	movs	r6, #1
 8005712:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8005714:	f7ff f9ac 	bl	8004a70 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005718:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 800571a:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800571c:	9000      	str	r0, [sp, #0]
 800571e:	2319      	movs	r3, #25
 8005720:	0032      	movs	r2, r6
 8005722:	0020      	movs	r0, r4
 8005724:	0209      	lsls	r1, r1, #8
 8005726:	f7ff fede 	bl	80054e6 <I2C_WaitOnFlagUntilTimeout>
 800572a:	2800      	cmp	r0, #0
 800572c:	d002      	beq.n	8005734 <HAL_I2C_Master_Transmit+0x48>
      return HAL_ERROR;
 800572e:	2001      	movs	r0, #1
}
 8005730:	b007      	add	sp, #28
 8005732:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005734:	2321      	movs	r3, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005736:	0026      	movs	r6, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005738:	9a03      	ldr	r2, [sp, #12]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800573a:	3642      	adds	r6, #66	; 0x42
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800573c:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800573e:	3b11      	subs	r3, #17
 8005740:	7033      	strb	r3, [r6, #0]
    hi2c->pBuffPtr  = pData;
 8005742:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005744:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8005746:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8005748:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 800574a:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 800574c:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800574e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005750:	4b2d      	ldr	r3, [pc, #180]	; (8005808 <HAL_I2C_Master_Transmit+0x11c>)
 8005752:	2aff      	cmp	r2, #255	; 0xff
 8005754:	d920      	bls.n	8005798 <HAL_I2C_Master_Transmit+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005756:	22ff      	movs	r2, #255	; 0xff
 8005758:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800575a:	9300      	str	r3, [sp, #0]
 800575c:	2380      	movs	r3, #128	; 0x80
 800575e:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005760:	0039      	movs	r1, r7
 8005762:	0020      	movs	r0, r4
 8005764:	f7ff fdf8 	bl	8005358 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005768:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800576a:	002a      	movs	r2, r5
 800576c:	0020      	movs	r0, r4
 800576e:	990c      	ldr	r1, [sp, #48]	; 0x30
    while (hi2c->XferCount > 0U)
 8005770:	2b00      	cmp	r3, #0
 8005772:	d119      	bne.n	80057a8 <HAL_I2C_Master_Transmit+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005774:	f7ff fee7 	bl	8005546 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005778:	2800      	cmp	r0, #0
 800577a:	d1d8      	bne.n	800572e <HAL_I2C_Master_Transmit+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800577c:	2120      	movs	r1, #32
 800577e:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8005780:	4d22      	ldr	r5, [pc, #136]	; (800580c <HAL_I2C_Master_Transmit+0x120>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005782:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005784:	685a      	ldr	r2, [r3, #4]
 8005786:	402a      	ands	r2, r5
 8005788:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800578a:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 800578c:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800578e:	3341      	adds	r3, #65	; 0x41
 8005790:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005792:	7030      	strb	r0, [r6, #0]
    __HAL_UNLOCK(hi2c);
 8005794:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8005796:	e7cb      	b.n	8005730 <HAL_I2C_Master_Transmit+0x44>
      hi2c->XferSize = hi2c->XferCount;
 8005798:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800579a:	b292      	uxth	r2, r2
 800579c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800579e:	b2d2      	uxtb	r2, r2
 80057a0:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80057a2:	2380      	movs	r3, #128	; 0x80
 80057a4:	049b      	lsls	r3, r3, #18
 80057a6:	e7db      	b.n	8005760 <HAL_I2C_Master_Transmit+0x74>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057a8:	f7ff fe70 	bl	800548c <I2C_WaitOnTXISFlagUntilTimeout>
 80057ac:	2800      	cmp	r0, #0
 80057ae:	d1be      	bne.n	800572e <HAL_I2C_Master_Transmit+0x42>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80057b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057b2:	6822      	ldr	r2, [r4, #0]
 80057b4:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 80057b6:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80057b8:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 80057ba:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80057bc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80057be:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80057c0:	3b01      	subs	r3, #1
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80057c6:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80057c8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80057ca:	b292      	uxth	r2, r2
 80057cc:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d0ca      	beq.n	8005768 <HAL_I2C_Master_Transmit+0x7c>
 80057d2:	2a00      	cmp	r2, #0
 80057d4:	d1c8      	bne.n	8005768 <HAL_I2C_Master_Transmit+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80057d6:	2180      	movs	r1, #128	; 0x80
 80057d8:	0020      	movs	r0, r4
 80057da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80057dc:	9500      	str	r5, [sp, #0]
 80057de:	f7ff fe82 	bl	80054e6 <I2C_WaitOnFlagUntilTimeout>
 80057e2:	2800      	cmp	r0, #0
 80057e4:	d1a3      	bne.n	800572e <HAL_I2C_Master_Transmit+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057e6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80057e8:	2bff      	cmp	r3, #255	; 0xff
 80057ea:	d906      	bls.n	80057fa <HAL_I2C_Master_Transmit+0x10e>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80057ec:	23ff      	movs	r3, #255	; 0xff
 80057ee:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80057f0:	2380      	movs	r3, #128	; 0x80
 80057f2:	22ff      	movs	r2, #255	; 0xff
 80057f4:	9000      	str	r0, [sp, #0]
 80057f6:	045b      	lsls	r3, r3, #17
 80057f8:	e7b2      	b.n	8005760 <HAL_I2C_Master_Transmit+0x74>
          hi2c->XferSize = hi2c->XferCount;
 80057fa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80057fc:	b292      	uxth	r2, r2
 80057fe:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005800:	b2d2      	uxtb	r2, r2
 8005802:	9000      	str	r0, [sp, #0]
 8005804:	e7cd      	b.n	80057a2 <HAL_I2C_Master_Transmit+0xb6>
 8005806:	46c0      	nop			; (mov r8, r8)
 8005808:	80002000 	.word	0x80002000
 800580c:	fe00e800 	.word	0xfe00e800

08005810 <HAL_I2C_Master_Receive>:
{
 8005810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005812:	b087      	sub	sp, #28
 8005814:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005816:	0003      	movs	r3, r0
 8005818:	3341      	adds	r3, #65	; 0x41
{
 800581a:	9204      	str	r2, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800581c:	9303      	str	r3, [sp, #12]
 800581e:	781b      	ldrb	r3, [r3, #0]
{
 8005820:	0004      	movs	r4, r0
 8005822:	000f      	movs	r7, r1
    return HAL_BUSY;
 8005824:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005826:	2b20      	cmp	r3, #32
 8005828:	d114      	bne.n	8005854 <HAL_I2C_Master_Receive+0x44>
    __HAL_LOCK(hi2c);
 800582a:	0023      	movs	r3, r4
 800582c:	3340      	adds	r3, #64	; 0x40
 800582e:	781a      	ldrb	r2, [r3, #0]
 8005830:	2a01      	cmp	r2, #1
 8005832:	d00f      	beq.n	8005854 <HAL_I2C_Master_Receive+0x44>
 8005834:	2601      	movs	r6, #1
 8005836:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8005838:	f7ff f91a 	bl	8004a70 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800583c:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 800583e:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005840:	9000      	str	r0, [sp, #0]
 8005842:	2319      	movs	r3, #25
 8005844:	0032      	movs	r2, r6
 8005846:	0020      	movs	r0, r4
 8005848:	0209      	lsls	r1, r1, #8
 800584a:	f7ff fe4c 	bl	80054e6 <I2C_WaitOnFlagUntilTimeout>
 800584e:	2800      	cmp	r0, #0
 8005850:	d002      	beq.n	8005858 <HAL_I2C_Master_Receive+0x48>
      return HAL_ERROR;
 8005852:	2001      	movs	r0, #1
}
 8005854:	b007      	add	sp, #28
 8005856:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005858:	2322      	movs	r3, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800585a:	0026      	movs	r6, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800585c:	9a03      	ldr	r2, [sp, #12]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800585e:	3642      	adds	r6, #66	; 0x42
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005860:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005862:	3b12      	subs	r3, #18
 8005864:	7033      	strb	r3, [r6, #0]
    hi2c->pBuffPtr  = pData;
 8005866:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005868:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800586a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800586c:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 800586e:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8005870:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005872:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005874:	4b2d      	ldr	r3, [pc, #180]	; (800592c <HAL_I2C_Master_Receive+0x11c>)
 8005876:	2aff      	cmp	r2, #255	; 0xff
 8005878:	d920      	bls.n	80058bc <HAL_I2C_Master_Receive+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800587a:	22ff      	movs	r2, #255	; 0xff
 800587c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800587e:	9300      	str	r3, [sp, #0]
 8005880:	2380      	movs	r3, #128	; 0x80
 8005882:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005884:	0039      	movs	r1, r7
 8005886:	0020      	movs	r0, r4
 8005888:	f7ff fd66 	bl	8005358 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800588c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800588e:	002a      	movs	r2, r5
 8005890:	0020      	movs	r0, r4
 8005892:	990c      	ldr	r1, [sp, #48]	; 0x30
    while (hi2c->XferCount > 0U)
 8005894:	2b00      	cmp	r3, #0
 8005896:	d119      	bne.n	80058cc <HAL_I2C_Master_Receive+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005898:	f7ff fe55 	bl	8005546 <I2C_WaitOnSTOPFlagUntilTimeout>
 800589c:	2800      	cmp	r0, #0
 800589e:	d1d8      	bne.n	8005852 <HAL_I2C_Master_Receive+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058a0:	2120      	movs	r1, #32
 80058a2:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80058a4:	4d22      	ldr	r5, [pc, #136]	; (8005930 <HAL_I2C_Master_Receive+0x120>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058a6:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80058a8:	685a      	ldr	r2, [r3, #4]
 80058aa:	402a      	ands	r2, r5
 80058ac:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80058ae:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 80058b0:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80058b2:	3341      	adds	r3, #65	; 0x41
 80058b4:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80058b6:	7030      	strb	r0, [r6, #0]
    __HAL_UNLOCK(hi2c);
 80058b8:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80058ba:	e7cb      	b.n	8005854 <HAL_I2C_Master_Receive+0x44>
      hi2c->XferSize = hi2c->XferCount;
 80058bc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80058be:	b292      	uxth	r2, r2
 80058c0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80058c2:	b2d2      	uxtb	r2, r2
 80058c4:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80058c6:	2380      	movs	r3, #128	; 0x80
 80058c8:	049b      	lsls	r3, r3, #18
 80058ca:	e7db      	b.n	8005884 <HAL_I2C_Master_Receive+0x74>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058cc:	f7ff fe66 	bl	800559c <I2C_WaitOnRXNEFlagUntilTimeout>
 80058d0:	2800      	cmp	r0, #0
 80058d2:	d1be      	bne.n	8005852 <HAL_I2C_Master_Receive+0x42>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80058d4:	6823      	ldr	r3, [r4, #0]
 80058d6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80058d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058da:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 80058dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80058de:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80058e0:	3301      	adds	r3, #1
 80058e2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80058e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80058e6:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80058e8:	3b01      	subs	r3, #1
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80058ee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80058f0:	b292      	uxth	r2, r2
 80058f2:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d0c9      	beq.n	800588c <HAL_I2C_Master_Receive+0x7c>
 80058f8:	2a00      	cmp	r2, #0
 80058fa:	d1c7      	bne.n	800588c <HAL_I2C_Master_Receive+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80058fc:	2180      	movs	r1, #128	; 0x80
 80058fe:	0020      	movs	r0, r4
 8005900:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005902:	9500      	str	r5, [sp, #0]
 8005904:	f7ff fdef 	bl	80054e6 <I2C_WaitOnFlagUntilTimeout>
 8005908:	2800      	cmp	r0, #0
 800590a:	d1a2      	bne.n	8005852 <HAL_I2C_Master_Receive+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800590c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800590e:	2bff      	cmp	r3, #255	; 0xff
 8005910:	d906      	bls.n	8005920 <HAL_I2C_Master_Receive+0x110>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005912:	23ff      	movs	r3, #255	; 0xff
 8005914:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005916:	2380      	movs	r3, #128	; 0x80
 8005918:	22ff      	movs	r2, #255	; 0xff
 800591a:	9000      	str	r0, [sp, #0]
 800591c:	045b      	lsls	r3, r3, #17
 800591e:	e7b1      	b.n	8005884 <HAL_I2C_Master_Receive+0x74>
          hi2c->XferSize = hi2c->XferCount;
 8005920:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005922:	b292      	uxth	r2, r2
 8005924:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005926:	b2d2      	uxtb	r2, r2
 8005928:	9000      	str	r0, [sp, #0]
 800592a:	e7cc      	b.n	80058c6 <HAL_I2C_Master_Receive+0xb6>
 800592c:	80002400 	.word	0x80002400
 8005930:	fe00e800 	.word	0xfe00e800

08005934 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005934:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005936:	0004      	movs	r4, r0
 8005938:	3441      	adds	r4, #65	; 0x41
 800593a:	7822      	ldrb	r2, [r4, #0]
{
 800593c:	0003      	movs	r3, r0
 800593e:	000f      	movs	r7, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8005940:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005942:	b2d6      	uxtb	r6, r2
 8005944:	2a20      	cmp	r2, #32
 8005946:	d118      	bne.n	800597a <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 8005948:	001d      	movs	r5, r3
 800594a:	3540      	adds	r5, #64	; 0x40
 800594c:	782a      	ldrb	r2, [r5, #0]
 800594e:	2a01      	cmp	r2, #1
 8005950:	d013      	beq.n	800597a <HAL_I2CEx_ConfigAnalogFilter+0x46>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005952:	2224      	movs	r2, #36	; 0x24
 8005954:	7022      	strb	r2, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	3a23      	subs	r2, #35	; 0x23
 800595a:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800595c:	4807      	ldr	r0, [pc, #28]	; (800597c <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 800595e:	4391      	bics	r1, r2
 8005960:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005962:	6819      	ldr	r1, [r3, #0]
 8005964:	4001      	ands	r1, r0
    __HAL_UNLOCK(hi2c);
 8005966:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005968:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800596a:	6819      	ldr	r1, [r3, #0]
 800596c:	4339      	orrs	r1, r7
 800596e:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8005970:	6819      	ldr	r1, [r3, #0]
 8005972:	430a      	orrs	r2, r1
 8005974:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8005976:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8005978:	7028      	strb	r0, [r5, #0]
  }
}
 800597a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800597c:	ffffefff 	.word	0xffffefff

08005980 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005980:	0002      	movs	r2, r0
{
 8005982:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005984:	3241      	adds	r2, #65	; 0x41
 8005986:	7814      	ldrb	r4, [r2, #0]
{
 8005988:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800598a:	b2e5      	uxtb	r5, r4

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800598c:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800598e:	2c20      	cmp	r4, #32
 8005990:	d117      	bne.n	80059c2 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8005992:	001c      	movs	r4, r3
 8005994:	3440      	adds	r4, #64	; 0x40
 8005996:	7826      	ldrb	r6, [r4, #0]
 8005998:	2e01      	cmp	r6, #1
 800599a:	d012      	beq.n	80059c2 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    hi2c->State = HAL_I2C_STATE_BUSY;
 800599c:	3022      	adds	r0, #34	; 0x22
 800599e:	7010      	strb	r0, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	3823      	subs	r0, #35	; 0x23
 80059a4:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 80059a6:	4f07      	ldr	r7, [pc, #28]	; (80059c4 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 80059a8:	4386      	bics	r6, r0
 80059aa:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 80059ac:	681e      	ldr	r6, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 80059ae:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 80059b0:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 80059b2:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 80059b4:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80059b6:	6819      	ldr	r1, [r3, #0]
 80059b8:	4308      	orrs	r0, r1
 80059ba:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80059bc:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80059be:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80059c0:	7020      	strb	r0, [r4, #0]
  }
}
 80059c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059c4:	fffff0ff 	.word	0xfffff0ff

080059c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059ca:	0004      	movs	r4, r0
 80059cc:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059ce:	2800      	cmp	r0, #0
 80059d0:	d045      	beq.n	8005a5e <HAL_RCC_OscConfig+0x96>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059d2:	6803      	ldr	r3, [r0, #0]
 80059d4:	07db      	lsls	r3, r3, #31
 80059d6:	d42f      	bmi.n	8005a38 <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059d8:	6823      	ldr	r3, [r4, #0]
 80059da:	079b      	lsls	r3, r3, #30
 80059dc:	d500      	bpl.n	80059e0 <HAL_RCC_OscConfig+0x18>
 80059de:	e081      	b.n	8005ae4 <HAL_RCC_OscConfig+0x11c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059e0:	6823      	ldr	r3, [r4, #0]
 80059e2:	071b      	lsls	r3, r3, #28
 80059e4:	d500      	bpl.n	80059e8 <HAL_RCC_OscConfig+0x20>
 80059e6:	e0bc      	b.n	8005b62 <HAL_RCC_OscConfig+0x19a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059e8:	6823      	ldr	r3, [r4, #0]
 80059ea:	075b      	lsls	r3, r3, #29
 80059ec:	d500      	bpl.n	80059f0 <HAL_RCC_OscConfig+0x28>
 80059ee:	e0df      	b.n	8005bb0 <HAL_RCC_OscConfig+0x1e8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80059f0:	6823      	ldr	r3, [r4, #0]
 80059f2:	06db      	lsls	r3, r3, #27
 80059f4:	d51a      	bpl.n	8005a2c <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80059f6:	6962      	ldr	r2, [r4, #20]
 80059f8:	2304      	movs	r3, #4
 80059fa:	4db5      	ldr	r5, [pc, #724]	; (8005cd0 <HAL_RCC_OscConfig+0x308>)
 80059fc:	2a01      	cmp	r2, #1
 80059fe:	d000      	beq.n	8005a02 <HAL_RCC_OscConfig+0x3a>
 8005a00:	e14a      	b.n	8005c98 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005a02:	6b69      	ldr	r1, [r5, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005a04:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8005a06:	430b      	orrs	r3, r1
 8005a08:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8005a0a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8005a0c:	431a      	orrs	r2, r3
 8005a0e:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8005a10:	f7ff f82e 	bl	8004a70 <HAL_GetTick>
 8005a14:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005a16:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8005a18:	423b      	tst	r3, r7
 8005a1a:	d100      	bne.n	8005a1e <HAL_RCC_OscConfig+0x56>
 8005a1c:	e135      	b.n	8005c8a <HAL_RCC_OscConfig+0x2c2>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005a1e:	21f8      	movs	r1, #248	; 0xf8
 8005a20:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8005a22:	69a3      	ldr	r3, [r4, #24]
 8005a24:	438a      	bics	r2, r1
 8005a26:	00db      	lsls	r3, r3, #3
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	636b      	str	r3, [r5, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a2c:	6a23      	ldr	r3, [r4, #32]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d000      	beq.n	8005a34 <HAL_RCC_OscConfig+0x6c>
 8005a32:	e159      	b.n	8005ce8 <HAL_RCC_OscConfig+0x320>
        }
      }
    }
  }

  return HAL_OK;
 8005a34:	2000      	movs	r0, #0
 8005a36:	e02a      	b.n	8005a8e <HAL_RCC_OscConfig+0xc6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005a38:	210c      	movs	r1, #12
 8005a3a:	4da5      	ldr	r5, [pc, #660]	; (8005cd0 <HAL_RCC_OscConfig+0x308>)
 8005a3c:	686a      	ldr	r2, [r5, #4]
 8005a3e:	400a      	ands	r2, r1
 8005a40:	2a04      	cmp	r2, #4
 8005a42:	d006      	beq.n	8005a52 <HAL_RCC_OscConfig+0x8a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005a44:	686b      	ldr	r3, [r5, #4]
 8005a46:	400b      	ands	r3, r1
 8005a48:	2b08      	cmp	r3, #8
 8005a4a:	d10a      	bne.n	8005a62 <HAL_RCC_OscConfig+0x9a>
 8005a4c:	686b      	ldr	r3, [r5, #4]
 8005a4e:	03db      	lsls	r3, r3, #15
 8005a50:	d507      	bpl.n	8005a62 <HAL_RCC_OscConfig+0x9a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a52:	682b      	ldr	r3, [r5, #0]
 8005a54:	039b      	lsls	r3, r3, #14
 8005a56:	d5bf      	bpl.n	80059d8 <HAL_RCC_OscConfig+0x10>
 8005a58:	6863      	ldr	r3, [r4, #4]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d1bc      	bne.n	80059d8 <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 8005a5e:	2001      	movs	r0, #1
 8005a60:	e015      	b.n	8005a8e <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a62:	6863      	ldr	r3, [r4, #4]
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d114      	bne.n	8005a92 <HAL_RCC_OscConfig+0xca>
 8005a68:	2380      	movs	r3, #128	; 0x80
 8005a6a:	682a      	ldr	r2, [r5, #0]
 8005a6c:	025b      	lsls	r3, r3, #9
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005a72:	f7fe fffd 	bl	8004a70 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a76:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8005a78:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a7a:	02bf      	lsls	r7, r7, #10
 8005a7c:	682b      	ldr	r3, [r5, #0]
 8005a7e:	423b      	tst	r3, r7
 8005a80:	d1aa      	bne.n	80059d8 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a82:	f7fe fff5 	bl	8004a70 <HAL_GetTick>
 8005a86:	1b80      	subs	r0, r0, r6
 8005a88:	2864      	cmp	r0, #100	; 0x64
 8005a8a:	d9f7      	bls.n	8005a7c <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
 8005a8c:	2003      	movs	r0, #3
}
 8005a8e:	b005      	add	sp, #20
 8005a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d116      	bne.n	8005ac4 <HAL_RCC_OscConfig+0xfc>
 8005a96:	682b      	ldr	r3, [r5, #0]
 8005a98:	4a8e      	ldr	r2, [pc, #568]	; (8005cd4 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a9a:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	602b      	str	r3, [r5, #0]
 8005aa0:	682b      	ldr	r3, [r5, #0]
 8005aa2:	4a8d      	ldr	r2, [pc, #564]	; (8005cd8 <HAL_RCC_OscConfig+0x310>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005aa4:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005aaa:	f7fe ffe1 	bl	8004a70 <HAL_GetTick>
 8005aae:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ab0:	682b      	ldr	r3, [r5, #0]
 8005ab2:	423b      	tst	r3, r7
 8005ab4:	d100      	bne.n	8005ab8 <HAL_RCC_OscConfig+0xf0>
 8005ab6:	e78f      	b.n	80059d8 <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ab8:	f7fe ffda 	bl	8004a70 <HAL_GetTick>
 8005abc:	1b80      	subs	r0, r0, r6
 8005abe:	2864      	cmp	r0, #100	; 0x64
 8005ac0:	d9f6      	bls.n	8005ab0 <HAL_RCC_OscConfig+0xe8>
 8005ac2:	e7e3      	b.n	8005a8c <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ac4:	2b05      	cmp	r3, #5
 8005ac6:	d105      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x10c>
 8005ac8:	2380      	movs	r3, #128	; 0x80
 8005aca:	682a      	ldr	r2, [r5, #0]
 8005acc:	02db      	lsls	r3, r3, #11
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	602b      	str	r3, [r5, #0]
 8005ad2:	e7c9      	b.n	8005a68 <HAL_RCC_OscConfig+0xa0>
 8005ad4:	682b      	ldr	r3, [r5, #0]
 8005ad6:	4a7f      	ldr	r2, [pc, #508]	; (8005cd4 <HAL_RCC_OscConfig+0x30c>)
 8005ad8:	4013      	ands	r3, r2
 8005ada:	602b      	str	r3, [r5, #0]
 8005adc:	682b      	ldr	r3, [r5, #0]
 8005ade:	4a7e      	ldr	r2, [pc, #504]	; (8005cd8 <HAL_RCC_OscConfig+0x310>)
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	e7c5      	b.n	8005a70 <HAL_RCC_OscConfig+0xa8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005ae4:	220c      	movs	r2, #12
 8005ae6:	4d7a      	ldr	r5, [pc, #488]	; (8005cd0 <HAL_RCC_OscConfig+0x308>)
 8005ae8:	686b      	ldr	r3, [r5, #4]
 8005aea:	4213      	tst	r3, r2
 8005aec:	d006      	beq.n	8005afc <HAL_RCC_OscConfig+0x134>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005aee:	686b      	ldr	r3, [r5, #4]
 8005af0:	4013      	ands	r3, r2
 8005af2:	2b08      	cmp	r3, #8
 8005af4:	d110      	bne.n	8005b18 <HAL_RCC_OscConfig+0x150>
 8005af6:	686b      	ldr	r3, [r5, #4]
 8005af8:	03db      	lsls	r3, r3, #15
 8005afa:	d40d      	bmi.n	8005b18 <HAL_RCC_OscConfig+0x150>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005afc:	682b      	ldr	r3, [r5, #0]
 8005afe:	079b      	lsls	r3, r3, #30
 8005b00:	d502      	bpl.n	8005b08 <HAL_RCC_OscConfig+0x140>
 8005b02:	68e3      	ldr	r3, [r4, #12]
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d1aa      	bne.n	8005a5e <HAL_RCC_OscConfig+0x96>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b08:	21f8      	movs	r1, #248	; 0xf8
 8005b0a:	682a      	ldr	r2, [r5, #0]
 8005b0c:	6923      	ldr	r3, [r4, #16]
 8005b0e:	438a      	bics	r2, r1
 8005b10:	00db      	lsls	r3, r3, #3
 8005b12:	4313      	orrs	r3, r2
 8005b14:	602b      	str	r3, [r5, #0]
 8005b16:	e763      	b.n	80059e0 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b18:	68e2      	ldr	r2, [r4, #12]
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	2a00      	cmp	r2, #0
 8005b1e:	d00f      	beq.n	8005b40 <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_ENABLE();
 8005b20:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b22:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8005b24:	4313      	orrs	r3, r2
 8005b26:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005b28:	f7fe ffa2 	bl	8004a70 <HAL_GetTick>
 8005b2c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b2e:	682b      	ldr	r3, [r5, #0]
 8005b30:	423b      	tst	r3, r7
 8005b32:	d1e9      	bne.n	8005b08 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b34:	f7fe ff9c 	bl	8004a70 <HAL_GetTick>
 8005b38:	1b80      	subs	r0, r0, r6
 8005b3a:	2802      	cmp	r0, #2
 8005b3c:	d9f7      	bls.n	8005b2e <HAL_RCC_OscConfig+0x166>
 8005b3e:	e7a5      	b.n	8005a8c <HAL_RCC_OscConfig+0xc4>
        __HAL_RCC_HSI_DISABLE();
 8005b40:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b42:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8005b44:	439a      	bics	r2, r3
 8005b46:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8005b48:	f7fe ff92 	bl	8004a70 <HAL_GetTick>
 8005b4c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b4e:	682b      	ldr	r3, [r5, #0]
 8005b50:	423b      	tst	r3, r7
 8005b52:	d100      	bne.n	8005b56 <HAL_RCC_OscConfig+0x18e>
 8005b54:	e744      	b.n	80059e0 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b56:	f7fe ff8b 	bl	8004a70 <HAL_GetTick>
 8005b5a:	1b80      	subs	r0, r0, r6
 8005b5c:	2802      	cmp	r0, #2
 8005b5e:	d9f6      	bls.n	8005b4e <HAL_RCC_OscConfig+0x186>
 8005b60:	e794      	b.n	8005a8c <HAL_RCC_OscConfig+0xc4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b62:	69e2      	ldr	r2, [r4, #28]
 8005b64:	2301      	movs	r3, #1
 8005b66:	4d5a      	ldr	r5, [pc, #360]	; (8005cd0 <HAL_RCC_OscConfig+0x308>)
 8005b68:	2a00      	cmp	r2, #0
 8005b6a:	d010      	beq.n	8005b8e <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_LSI_ENABLE();
 8005b6c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b6e:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8005b70:	4313      	orrs	r3, r2
 8005b72:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8005b74:	f7fe ff7c 	bl	8004a70 <HAL_GetTick>
 8005b78:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b7a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005b7c:	423b      	tst	r3, r7
 8005b7e:	d000      	beq.n	8005b82 <HAL_RCC_OscConfig+0x1ba>
 8005b80:	e732      	b.n	80059e8 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b82:	f7fe ff75 	bl	8004a70 <HAL_GetTick>
 8005b86:	1b80      	subs	r0, r0, r6
 8005b88:	2802      	cmp	r0, #2
 8005b8a:	d9f6      	bls.n	8005b7a <HAL_RCC_OscConfig+0x1b2>
 8005b8c:	e77e      	b.n	8005a8c <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_LSI_DISABLE();
 8005b8e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b90:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8005b92:	439a      	bics	r2, r3
 8005b94:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8005b96:	f7fe ff6b 	bl	8004a70 <HAL_GetTick>
 8005b9a:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b9c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005b9e:	423b      	tst	r3, r7
 8005ba0:	d100      	bne.n	8005ba4 <HAL_RCC_OscConfig+0x1dc>
 8005ba2:	e721      	b.n	80059e8 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ba4:	f7fe ff64 	bl	8004a70 <HAL_GetTick>
 8005ba8:	1b80      	subs	r0, r0, r6
 8005baa:	2802      	cmp	r0, #2
 8005bac:	d9f6      	bls.n	8005b9c <HAL_RCC_OscConfig+0x1d4>
 8005bae:	e76d      	b.n	8005a8c <HAL_RCC_OscConfig+0xc4>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bb0:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8005bb2:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bb4:	4d46      	ldr	r5, [pc, #280]	; (8005cd0 <HAL_RCC_OscConfig+0x308>)
 8005bb6:	0552      	lsls	r2, r2, #21
 8005bb8:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8005bba:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bbc:	4213      	tst	r3, r2
 8005bbe:	d108      	bne.n	8005bd2 <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bc0:	69eb      	ldr	r3, [r5, #28]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	61eb      	str	r3, [r5, #28]
 8005bc6:	69eb      	ldr	r3, [r5, #28]
 8005bc8:	4013      	ands	r3, r2
 8005bca:	9303      	str	r3, [sp, #12]
 8005bcc:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bd2:	2780      	movs	r7, #128	; 0x80
 8005bd4:	4e41      	ldr	r6, [pc, #260]	; (8005cdc <HAL_RCC_OscConfig+0x314>)
 8005bd6:	007f      	lsls	r7, r7, #1
 8005bd8:	6833      	ldr	r3, [r6, #0]
 8005bda:	423b      	tst	r3, r7
 8005bdc:	d006      	beq.n	8005bec <HAL_RCC_OscConfig+0x224>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bde:	68a3      	ldr	r3, [r4, #8]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d113      	bne.n	8005c0c <HAL_RCC_OscConfig+0x244>
 8005be4:	6a2a      	ldr	r2, [r5, #32]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	622b      	str	r3, [r5, #32]
 8005bea:	e030      	b.n	8005c4e <HAL_RCC_OscConfig+0x286>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bec:	6833      	ldr	r3, [r6, #0]
 8005bee:	433b      	orrs	r3, r7
 8005bf0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8005bf2:	f7fe ff3d 	bl	8004a70 <HAL_GetTick>
 8005bf6:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bf8:	6833      	ldr	r3, [r6, #0]
 8005bfa:	423b      	tst	r3, r7
 8005bfc:	d1ef      	bne.n	8005bde <HAL_RCC_OscConfig+0x216>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bfe:	f7fe ff37 	bl	8004a70 <HAL_GetTick>
 8005c02:	9b01      	ldr	r3, [sp, #4]
 8005c04:	1ac0      	subs	r0, r0, r3
 8005c06:	2864      	cmp	r0, #100	; 0x64
 8005c08:	d9f6      	bls.n	8005bf8 <HAL_RCC_OscConfig+0x230>
 8005c0a:	e73f      	b.n	8005a8c <HAL_RCC_OscConfig+0xc4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d114      	bne.n	8005c3c <HAL_RCC_OscConfig+0x274>
 8005c12:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c14:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c16:	4393      	bics	r3, r2
 8005c18:	622b      	str	r3, [r5, #32]
 8005c1a:	6a2b      	ldr	r3, [r5, #32]
 8005c1c:	3203      	adds	r2, #3
 8005c1e:	4393      	bics	r3, r2
 8005c20:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8005c22:	f7fe ff25 	bl	8004a70 <HAL_GetTick>
 8005c26:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c28:	6a2b      	ldr	r3, [r5, #32]
 8005c2a:	423b      	tst	r3, r7
 8005c2c:	d016      	beq.n	8005c5c <HAL_RCC_OscConfig+0x294>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c2e:	f7fe ff1f 	bl	8004a70 <HAL_GetTick>
 8005c32:	4b2b      	ldr	r3, [pc, #172]	; (8005ce0 <HAL_RCC_OscConfig+0x318>)
 8005c34:	1b80      	subs	r0, r0, r6
 8005c36:	4298      	cmp	r0, r3
 8005c38:	d9f6      	bls.n	8005c28 <HAL_RCC_OscConfig+0x260>
 8005c3a:	e727      	b.n	8005a8c <HAL_RCC_OscConfig+0xc4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c3c:	2b05      	cmp	r3, #5
 8005c3e:	d116      	bne.n	8005c6e <HAL_RCC_OscConfig+0x2a6>
 8005c40:	6a29      	ldr	r1, [r5, #32]
 8005c42:	3b01      	subs	r3, #1
 8005c44:	430b      	orrs	r3, r1
 8005c46:	622b      	str	r3, [r5, #32]
 8005c48:	6a2b      	ldr	r3, [r5, #32]
 8005c4a:	431a      	orrs	r2, r3
 8005c4c:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 8005c4e:	f7fe ff0f 	bl	8004a70 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c52:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8005c54:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c56:	6a2b      	ldr	r3, [r5, #32]
 8005c58:	423b      	tst	r3, r7
 8005c5a:	d00f      	beq.n	8005c7c <HAL_RCC_OscConfig+0x2b4>
    if(pwrclkchanged == SET)
 8005c5c:	9b00      	ldr	r3, [sp, #0]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d000      	beq.n	8005c64 <HAL_RCC_OscConfig+0x29c>
 8005c62:	e6c5      	b.n	80059f0 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c64:	69eb      	ldr	r3, [r5, #28]
 8005c66:	4a1f      	ldr	r2, [pc, #124]	; (8005ce4 <HAL_RCC_OscConfig+0x31c>)
 8005c68:	4013      	ands	r3, r2
 8005c6a:	61eb      	str	r3, [r5, #28]
 8005c6c:	e6c0      	b.n	80059f0 <HAL_RCC_OscConfig+0x28>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c6e:	6a2b      	ldr	r3, [r5, #32]
 8005c70:	4393      	bics	r3, r2
 8005c72:	2204      	movs	r2, #4
 8005c74:	622b      	str	r3, [r5, #32]
 8005c76:	6a2b      	ldr	r3, [r5, #32]
 8005c78:	4393      	bics	r3, r2
 8005c7a:	e7b5      	b.n	8005be8 <HAL_RCC_OscConfig+0x220>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c7c:	f7fe fef8 	bl	8004a70 <HAL_GetTick>
 8005c80:	4b17      	ldr	r3, [pc, #92]	; (8005ce0 <HAL_RCC_OscConfig+0x318>)
 8005c82:	1b80      	subs	r0, r0, r6
 8005c84:	4298      	cmp	r0, r3
 8005c86:	d9e6      	bls.n	8005c56 <HAL_RCC_OscConfig+0x28e>
 8005c88:	e700      	b.n	8005a8c <HAL_RCC_OscConfig+0xc4>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005c8a:	f7fe fef1 	bl	8004a70 <HAL_GetTick>
 8005c8e:	1b80      	subs	r0, r0, r6
 8005c90:	2802      	cmp	r0, #2
 8005c92:	d800      	bhi.n	8005c96 <HAL_RCC_OscConfig+0x2ce>
 8005c94:	e6bf      	b.n	8005a16 <HAL_RCC_OscConfig+0x4e>
 8005c96:	e6f9      	b.n	8005a8c <HAL_RCC_OscConfig+0xc4>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8005c98:	3205      	adds	r2, #5
 8005c9a:	d103      	bne.n	8005ca4 <HAL_RCC_OscConfig+0x2dc>
      __HAL_RCC_HSI14ADC_ENABLE();
 8005c9c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8005c9e:	439a      	bics	r2, r3
 8005ca0:	636a      	str	r2, [r5, #52]	; 0x34
 8005ca2:	e6bc      	b.n	8005a1e <HAL_RCC_OscConfig+0x56>
      __HAL_RCC_HSI14ADC_DISABLE();
 8005ca4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005ca6:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8005ca8:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8005caa:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8005cac:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8005cae:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8005cb0:	4393      	bics	r3, r2
 8005cb2:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8005cb4:	f7fe fedc 	bl	8004a70 <HAL_GetTick>
 8005cb8:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005cba:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8005cbc:	423b      	tst	r3, r7
 8005cbe:	d100      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x2fa>
 8005cc0:	e6b4      	b.n	8005a2c <HAL_RCC_OscConfig+0x64>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005cc2:	f7fe fed5 	bl	8004a70 <HAL_GetTick>
 8005cc6:	1b80      	subs	r0, r0, r6
 8005cc8:	2802      	cmp	r0, #2
 8005cca:	d9f6      	bls.n	8005cba <HAL_RCC_OscConfig+0x2f2>
 8005ccc:	e6de      	b.n	8005a8c <HAL_RCC_OscConfig+0xc4>
 8005cce:	46c0      	nop			; (mov r8, r8)
 8005cd0:	40021000 	.word	0x40021000
 8005cd4:	fffeffff 	.word	0xfffeffff
 8005cd8:	fffbffff 	.word	0xfffbffff
 8005cdc:	40007000 	.word	0x40007000
 8005ce0:	00001388 	.word	0x00001388
 8005ce4:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ce8:	210c      	movs	r1, #12
 8005cea:	4d34      	ldr	r5, [pc, #208]	; (8005dbc <HAL_RCC_OscConfig+0x3f4>)
 8005cec:	686a      	ldr	r2, [r5, #4]
 8005cee:	400a      	ands	r2, r1
 8005cf0:	2a08      	cmp	r2, #8
 8005cf2:	d047      	beq.n	8005d84 <HAL_RCC_OscConfig+0x3bc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cf4:	4a32      	ldr	r2, [pc, #200]	; (8005dc0 <HAL_RCC_OscConfig+0x3f8>)
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d132      	bne.n	8005d60 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_DISABLE();
 8005cfa:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005cfc:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8005cfe:	4013      	ands	r3, r2
 8005d00:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005d02:	f7fe feb5 	bl	8004a70 <HAL_GetTick>
 8005d06:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d08:	04bf      	lsls	r7, r7, #18
 8005d0a:	682b      	ldr	r3, [r5, #0]
 8005d0c:	423b      	tst	r3, r7
 8005d0e:	d121      	bne.n	8005d54 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d10:	220f      	movs	r2, #15
 8005d12:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d14:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d16:	4393      	bics	r3, r2
 8005d18:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d1a:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	62eb      	str	r3, [r5, #44]	; 0x2c
 8005d20:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005d22:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005d24:	686a      	ldr	r2, [r5, #4]
 8005d26:	430b      	orrs	r3, r1
 8005d28:	4926      	ldr	r1, [pc, #152]	; (8005dc4 <HAL_RCC_OscConfig+0x3fc>)
 8005d2a:	400a      	ands	r2, r1
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8005d30:	2380      	movs	r3, #128	; 0x80
 8005d32:	682a      	ldr	r2, [r5, #0]
 8005d34:	045b      	lsls	r3, r3, #17
 8005d36:	4313      	orrs	r3, r2
 8005d38:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005d3a:	f7fe fe99 	bl	8004a70 <HAL_GetTick>
 8005d3e:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d40:	682b      	ldr	r3, [r5, #0]
 8005d42:	4233      	tst	r3, r6
 8005d44:	d000      	beq.n	8005d48 <HAL_RCC_OscConfig+0x380>
 8005d46:	e675      	b.n	8005a34 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d48:	f7fe fe92 	bl	8004a70 <HAL_GetTick>
 8005d4c:	1b00      	subs	r0, r0, r4
 8005d4e:	2802      	cmp	r0, #2
 8005d50:	d9f6      	bls.n	8005d40 <HAL_RCC_OscConfig+0x378>
 8005d52:	e69b      	b.n	8005a8c <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d54:	f7fe fe8c 	bl	8004a70 <HAL_GetTick>
 8005d58:	1b80      	subs	r0, r0, r6
 8005d5a:	2802      	cmp	r0, #2
 8005d5c:	d9d5      	bls.n	8005d0a <HAL_RCC_OscConfig+0x342>
 8005d5e:	e695      	b.n	8005a8c <HAL_RCC_OscConfig+0xc4>
        __HAL_RCC_PLL_DISABLE();
 8005d60:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d62:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8005d64:	4013      	ands	r3, r2
 8005d66:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005d68:	f7fe fe82 	bl	8004a70 <HAL_GetTick>
 8005d6c:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d6e:	04b6      	lsls	r6, r6, #18
 8005d70:	682b      	ldr	r3, [r5, #0]
 8005d72:	4233      	tst	r3, r6
 8005d74:	d100      	bne.n	8005d78 <HAL_RCC_OscConfig+0x3b0>
 8005d76:	e65d      	b.n	8005a34 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d78:	f7fe fe7a 	bl	8004a70 <HAL_GetTick>
 8005d7c:	1b00      	subs	r0, r0, r4
 8005d7e:	2802      	cmp	r0, #2
 8005d80:	d9f6      	bls.n	8005d70 <HAL_RCC_OscConfig+0x3a8>
 8005d82:	e683      	b.n	8005a8c <HAL_RCC_OscConfig+0xc4>
        return HAL_ERROR;
 8005d84:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d100      	bne.n	8005d8c <HAL_RCC_OscConfig+0x3c4>
 8005d8a:	e680      	b.n	8005a8e <HAL_RCC_OscConfig+0xc6>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d8c:	2180      	movs	r1, #128	; 0x80
        pll_config  = RCC->CFGR;
 8005d8e:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d90:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005d92:	0249      	lsls	r1, r1, #9
        pll_config2 = RCC->CFGR2;
 8005d94:	6aea      	ldr	r2, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d96:	4019      	ands	r1, r3
 8005d98:	4281      	cmp	r1, r0
 8005d9a:	d000      	beq.n	8005d9e <HAL_RCC_OscConfig+0x3d6>
 8005d9c:	e65f      	b.n	8005a5e <HAL_RCC_OscConfig+0x96>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005d9e:	210f      	movs	r1, #15
 8005da0:	400a      	ands	r2, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005da2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005da4:	428a      	cmp	r2, r1
 8005da6:	d000      	beq.n	8005daa <HAL_RCC_OscConfig+0x3e2>
 8005da8:	e659      	b.n	8005a5e <HAL_RCC_OscConfig+0x96>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005daa:	22f0      	movs	r2, #240	; 0xf0
 8005dac:	0392      	lsls	r2, r2, #14
 8005dae:	4013      	ands	r3, r2
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005db0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d100      	bne.n	8005db8 <HAL_RCC_OscConfig+0x3f0>
 8005db6:	e63d      	b.n	8005a34 <HAL_RCC_OscConfig+0x6c>
 8005db8:	e651      	b.n	8005a5e <HAL_RCC_OscConfig+0x96>
 8005dba:	46c0      	nop			; (mov r8, r8)
 8005dbc:	40021000 	.word	0x40021000
 8005dc0:	feffffff 	.word	0xfeffffff
 8005dc4:	ffc2ffff 	.word	0xffc2ffff

08005dc8 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005dc8:	220c      	movs	r2, #12
{
 8005dca:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8005dcc:	4d0c      	ldr	r5, [pc, #48]	; (8005e00 <HAL_RCC_GetSysClockFreq+0x38>)
 8005dce:	686b      	ldr	r3, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8005dd0:	401a      	ands	r2, r3
 8005dd2:	2a08      	cmp	r2, #8
 8005dd4:	d111      	bne.n	8005dfa <HAL_RCC_GetSysClockFreq+0x32>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005dd6:	200f      	movs	r0, #15
 8005dd8:	4a0a      	ldr	r2, [pc, #40]	; (8005e04 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005dda:	0c99      	lsrs	r1, r3, #18
 8005ddc:	4001      	ands	r1, r0
 8005dde:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005de0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8005de2:	4909      	ldr	r1, [pc, #36]	; (8005e08 <HAL_RCC_GetSysClockFreq+0x40>)
 8005de4:	4002      	ands	r2, r0
 8005de6:	5c89      	ldrb	r1, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005de8:	03db      	lsls	r3, r3, #15
 8005dea:	d504      	bpl.n	8005df6 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005dec:	4807      	ldr	r0, [pc, #28]	; (8005e0c <HAL_RCC_GetSysClockFreq+0x44>)
 8005dee:	f7fa f9a7 	bl	8000140 <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005df2:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8005df4:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005df6:	4806      	ldr	r0, [pc, #24]	; (8005e10 <HAL_RCC_GetSysClockFreq+0x48>)
 8005df8:	e7fb      	b.n	8005df2 <HAL_RCC_GetSysClockFreq+0x2a>
      sysclockfreq = HSE_VALUE;
 8005dfa:	4804      	ldr	r0, [pc, #16]	; (8005e0c <HAL_RCC_GetSysClockFreq+0x44>)
  return sysclockfreq;
 8005dfc:	e7fa      	b.n	8005df4 <HAL_RCC_GetSysClockFreq+0x2c>
 8005dfe:	46c0      	nop			; (mov r8, r8)
 8005e00:	40021000 	.word	0x40021000
 8005e04:	0800b934 	.word	0x0800b934
 8005e08:	0800b944 	.word	0x0800b944
 8005e0c:	007a1200 	.word	0x007a1200
 8005e10:	003d0900 	.word	0x003d0900

08005e14 <HAL_RCC_ClockConfig>:
{
 8005e14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e16:	0004      	movs	r4, r0
 8005e18:	000e      	movs	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8005e1a:	2800      	cmp	r0, #0
 8005e1c:	d101      	bne.n	8005e22 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8005e1e:	2001      	movs	r0, #1
}
 8005e20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e22:	2201      	movs	r2, #1
 8005e24:	4d37      	ldr	r5, [pc, #220]	; (8005f04 <HAL_RCC_ClockConfig+0xf0>)
 8005e26:	682b      	ldr	r3, [r5, #0]
 8005e28:	4013      	ands	r3, r2
 8005e2a:	428b      	cmp	r3, r1
 8005e2c:	d31c      	bcc.n	8005e68 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e2e:	6821      	ldr	r1, [r4, #0]
 8005e30:	078b      	lsls	r3, r1, #30
 8005e32:	d422      	bmi.n	8005e7a <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e34:	07cb      	lsls	r3, r1, #31
 8005e36:	d42f      	bmi.n	8005e98 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e38:	2301      	movs	r3, #1
 8005e3a:	682a      	ldr	r2, [r5, #0]
 8005e3c:	401a      	ands	r2, r3
 8005e3e:	42b2      	cmp	r2, r6
 8005e40:	d851      	bhi.n	8005ee6 <HAL_RCC_ClockConfig+0xd2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e42:	6823      	ldr	r3, [r4, #0]
 8005e44:	4d30      	ldr	r5, [pc, #192]	; (8005f08 <HAL_RCC_ClockConfig+0xf4>)
 8005e46:	075b      	lsls	r3, r3, #29
 8005e48:	d454      	bmi.n	8005ef4 <HAL_RCC_ClockConfig+0xe0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005e4a:	f7ff ffbd 	bl	8005dc8 <HAL_RCC_GetSysClockFreq>
 8005e4e:	686b      	ldr	r3, [r5, #4]
 8005e50:	4a2e      	ldr	r2, [pc, #184]	; (8005f0c <HAL_RCC_ClockConfig+0xf8>)
 8005e52:	061b      	lsls	r3, r3, #24
 8005e54:	0f1b      	lsrs	r3, r3, #28
 8005e56:	5cd3      	ldrb	r3, [r2, r3]
 8005e58:	40d8      	lsrs	r0, r3
 8005e5a:	4b2d      	ldr	r3, [pc, #180]	; (8005f10 <HAL_RCC_ClockConfig+0xfc>)
 8005e5c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8005e5e:	2003      	movs	r0, #3
 8005e60:	f7fe fdc6 	bl	80049f0 <HAL_InitTick>
  return HAL_OK;
 8005e64:	2000      	movs	r0, #0
 8005e66:	e7db      	b.n	8005e20 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e68:	682b      	ldr	r3, [r5, #0]
 8005e6a:	4393      	bics	r3, r2
 8005e6c:	430b      	orrs	r3, r1
 8005e6e:	602b      	str	r3, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e70:	682b      	ldr	r3, [r5, #0]
 8005e72:	4013      	ands	r3, r2
 8005e74:	428b      	cmp	r3, r1
 8005e76:	d1d2      	bne.n	8005e1e <HAL_RCC_ClockConfig+0xa>
 8005e78:	e7d9      	b.n	8005e2e <HAL_RCC_ClockConfig+0x1a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e7a:	4a23      	ldr	r2, [pc, #140]	; (8005f08 <HAL_RCC_ClockConfig+0xf4>)
 8005e7c:	074b      	lsls	r3, r1, #29
 8005e7e:	d504      	bpl.n	8005e8a <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005e80:	23e0      	movs	r3, #224	; 0xe0
 8005e82:	6850      	ldr	r0, [r2, #4]
 8005e84:	00db      	lsls	r3, r3, #3
 8005e86:	4303      	orrs	r3, r0
 8005e88:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e8a:	20f0      	movs	r0, #240	; 0xf0
 8005e8c:	6853      	ldr	r3, [r2, #4]
 8005e8e:	4383      	bics	r3, r0
 8005e90:	68a0      	ldr	r0, [r4, #8]
 8005e92:	4303      	orrs	r3, r0
 8005e94:	6053      	str	r3, [r2, #4]
 8005e96:	e7cd      	b.n	8005e34 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e98:	4f1b      	ldr	r7, [pc, #108]	; (8005f08 <HAL_RCC_ClockConfig+0xf4>)
 8005e9a:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e9c:	683b      	ldr	r3, [r7, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e9e:	2a01      	cmp	r2, #1
 8005ea0:	d119      	bne.n	8005ed6 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ea2:	039b      	lsls	r3, r3, #14
 8005ea4:	d5bb      	bpl.n	8005e1e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ea6:	2103      	movs	r1, #3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	438b      	bics	r3, r1
 8005eac:	4313      	orrs	r3, r2
 8005eae:	607b      	str	r3, [r7, #4]
    tickstart = HAL_GetTick();
 8005eb0:	f7fe fdde 	bl	8004a70 <HAL_GetTick>
 8005eb4:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eb6:	230c      	movs	r3, #12
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	401a      	ands	r2, r3
 8005ebc:	6863      	ldr	r3, [r4, #4]
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d0b9      	beq.n	8005e38 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ec4:	f7fe fdd4 	bl	8004a70 <HAL_GetTick>
 8005ec8:	9b01      	ldr	r3, [sp, #4]
 8005eca:	1ac0      	subs	r0, r0, r3
 8005ecc:	4b11      	ldr	r3, [pc, #68]	; (8005f14 <HAL_RCC_ClockConfig+0x100>)
 8005ece:	4298      	cmp	r0, r3
 8005ed0:	d9f1      	bls.n	8005eb6 <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 8005ed2:	2003      	movs	r0, #3
 8005ed4:	e7a4      	b.n	8005e20 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ed6:	2a02      	cmp	r2, #2
 8005ed8:	d102      	bne.n	8005ee0 <HAL_RCC_ClockConfig+0xcc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005eda:	019b      	lsls	r3, r3, #6
 8005edc:	d4e3      	bmi.n	8005ea6 <HAL_RCC_ClockConfig+0x92>
 8005ede:	e79e      	b.n	8005e1e <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ee0:	079b      	lsls	r3, r3, #30
 8005ee2:	d4e0      	bmi.n	8005ea6 <HAL_RCC_ClockConfig+0x92>
 8005ee4:	e79b      	b.n	8005e1e <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ee6:	682a      	ldr	r2, [r5, #0]
 8005ee8:	439a      	bics	r2, r3
 8005eea:	602a      	str	r2, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eec:	682a      	ldr	r2, [r5, #0]
 8005eee:	421a      	tst	r2, r3
 8005ef0:	d0a7      	beq.n	8005e42 <HAL_RCC_ClockConfig+0x2e>
 8005ef2:	e794      	b.n	8005e1e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005ef4:	686b      	ldr	r3, [r5, #4]
 8005ef6:	4a08      	ldr	r2, [pc, #32]	; (8005f18 <HAL_RCC_ClockConfig+0x104>)
 8005ef8:	4013      	ands	r3, r2
 8005efa:	68e2      	ldr	r2, [r4, #12]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	606b      	str	r3, [r5, #4]
 8005f00:	e7a3      	b.n	8005e4a <HAL_RCC_ClockConfig+0x36>
 8005f02:	46c0      	nop			; (mov r8, r8)
 8005f04:	40022000 	.word	0x40022000
 8005f08:	40021000 	.word	0x40021000
 8005f0c:	0800b924 	.word	0x0800b924
 8005f10:	20000018 	.word	0x20000018
 8005f14:	00001388 	.word	0x00001388
 8005f18:	fffff8ff 	.word	0xfffff8ff

08005f1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f1c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005f1e:	6803      	ldr	r3, [r0, #0]
{
 8005f20:	0005      	movs	r5, r0
 8005f22:	b085      	sub	sp, #20
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005f24:	03db      	lsls	r3, r3, #15
 8005f26:	d52a      	bpl.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x62>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f28:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8005f2a:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f2c:	4c3c      	ldr	r4, [pc, #240]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8005f2e:	0552      	lsls	r2, r2, #21
 8005f30:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8005f32:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f34:	4213      	tst	r3, r2
 8005f36:	d108      	bne.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005f38:	69e3      	ldr	r3, [r4, #28]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	61e3      	str	r3, [r4, #28]
 8005f3e:	69e3      	ldr	r3, [r4, #28]
 8005f40:	4013      	ands	r3, r2
 8005f42:	9303      	str	r3, [sp, #12]
 8005f44:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8005f46:	2301      	movs	r3, #1
 8005f48:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f4a:	2780      	movs	r7, #128	; 0x80
 8005f4c:	4e35      	ldr	r6, [pc, #212]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8005f4e:	007f      	lsls	r7, r7, #1
 8005f50:	6833      	ldr	r3, [r6, #0]
 8005f52:	423b      	tst	r3, r7
 8005f54:	d031      	beq.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x9e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005f56:	6a22      	ldr	r2, [r4, #32]
 8005f58:	23c0      	movs	r3, #192	; 0xc0
 8005f5a:	0011      	movs	r1, r2
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	4e32      	ldr	r6, [pc, #200]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8005f60:	4019      	ands	r1, r3
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005f62:	421a      	tst	r2, r3
 8005f64:	d13b      	bne.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0xc2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f66:	6a23      	ldr	r3, [r4, #32]
 8005f68:	401e      	ands	r6, r3
 8005f6a:	686b      	ldr	r3, [r5, #4]
 8005f6c:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005f6e:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f70:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d103      	bne.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f76:	69e3      	ldr	r3, [r4, #28]
 8005f78:	4a2c      	ldr	r2, [pc, #176]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f7e:	682a      	ldr	r2, [r5, #0]
 8005f80:	07d3      	lsls	r3, r2, #31
 8005f82:	d506      	bpl.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f84:	2003      	movs	r0, #3
 8005f86:	4926      	ldr	r1, [pc, #152]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8005f88:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8005f8a:	4383      	bics	r3, r0
 8005f8c:	68a8      	ldr	r0, [r5, #8]
 8005f8e:	4303      	orrs	r3, r0
 8005f90:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f92:	0693      	lsls	r3, r2, #26
 8005f94:	d506      	bpl.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f96:	2010      	movs	r0, #16
 8005f98:	4921      	ldr	r1, [pc, #132]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8005f9a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8005f9c:	4383      	bics	r3, r0
 8005f9e:	68e8      	ldr	r0, [r5, #12]
 8005fa0:	4303      	orrs	r3, r0
 8005fa2:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8005fa4:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005fa6:	0553      	lsls	r3, r2, #21
 8005fa8:	d517      	bpl.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0xbe>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005faa:	2140      	movs	r1, #64	; 0x40
 8005fac:	4a1c      	ldr	r2, [pc, #112]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8005fae:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005fb0:	438b      	bics	r3, r1
 8005fb2:	6929      	ldr	r1, [r5, #16]
 8005fb4:	430b      	orrs	r3, r1
 8005fb6:	6313      	str	r3, [r2, #48]	; 0x30
 8005fb8:	e00f      	b.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0xbe>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fba:	6833      	ldr	r3, [r6, #0]
 8005fbc:	433b      	orrs	r3, r7
 8005fbe:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8005fc0:	f7fe fd56 	bl	8004a70 <HAL_GetTick>
 8005fc4:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fc6:	6833      	ldr	r3, [r6, #0]
 8005fc8:	423b      	tst	r3, r7
 8005fca:	d1c4      	bne.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fcc:	f7fe fd50 	bl	8004a70 <HAL_GetTick>
 8005fd0:	9b01      	ldr	r3, [sp, #4]
 8005fd2:	1ac0      	subs	r0, r0, r3
 8005fd4:	2864      	cmp	r0, #100	; 0x64
 8005fd6:	d9f6      	bls.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
          return HAL_TIMEOUT;
 8005fd8:	2003      	movs	r0, #3
}
 8005fda:	b005      	add	sp, #20
 8005fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005fde:	686a      	ldr	r2, [r5, #4]
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	428b      	cmp	r3, r1
 8005fe4:	d0bf      	beq.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x4a>
      __HAL_RCC_BACKUPRESET_FORCE();
 8005fe6:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005fe8:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8005fea:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005fec:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8005fee:	025b      	lsls	r3, r3, #9
 8005ff0:	4303      	orrs	r3, r0
 8005ff2:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ff4:	6a23      	ldr	r3, [r4, #32]
 8005ff6:	480e      	ldr	r0, [pc, #56]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x114>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ff8:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ffa:	4003      	ands	r3, r0
 8005ffc:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8005ffe:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006000:	07d3      	lsls	r3, r2, #31
 8006002:	d5b0      	bpl.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x4a>
        tickstart = HAL_GetTick();
 8006004:	f7fe fd34 	bl	8004a70 <HAL_GetTick>
 8006008:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800600a:	2202      	movs	r2, #2
 800600c:	6a23      	ldr	r3, [r4, #32]
 800600e:	4213      	tst	r3, r2
 8006010:	d1a9      	bne.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x4a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006012:	f7fe fd2d 	bl	8004a70 <HAL_GetTick>
 8006016:	4b07      	ldr	r3, [pc, #28]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8006018:	1bc0      	subs	r0, r0, r7
 800601a:	4298      	cmp	r0, r3
 800601c:	d9f5      	bls.n	800600a <HAL_RCCEx_PeriphCLKConfig+0xee>
 800601e:	e7db      	b.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
 8006020:	40021000 	.word	0x40021000
 8006024:	40007000 	.word	0x40007000
 8006028:	fffffcff 	.word	0xfffffcff
 800602c:	efffffff 	.word	0xefffffff
 8006030:	fffeffff 	.word	0xfffeffff
 8006034:	00001388 	.word	0x00001388

08006038 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006038:	0002      	movs	r2, r0
{
 800603a:	0003      	movs	r3, r0
  {
    return HAL_ERROR;
 800603c:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 800603e:	323d      	adds	r2, #61	; 0x3d
 8006040:	7811      	ldrb	r1, [r2, #0]
 8006042:	4281      	cmp	r1, r0
 8006044:	d11c      	bne.n	8006080 <HAL_TIM_Base_Start_IT+0x48>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006046:	2102      	movs	r1, #2
 8006048:	7011      	strb	r1, [r2, #0]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68da      	ldr	r2, [r3, #12]
 800604e:	4302      	orrs	r2, r0
 8006050:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006052:	4a0e      	ldr	r2, [pc, #56]	; (800608c <HAL_TIM_Base_Start_IT+0x54>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d009      	beq.n	800606c <HAL_TIM_Base_Start_IT+0x34>
 8006058:	2280      	movs	r2, #128	; 0x80
 800605a:	05d2      	lsls	r2, r2, #23
 800605c:	4293      	cmp	r3, r2
 800605e:	d005      	beq.n	800606c <HAL_TIM_Base_Start_IT+0x34>
 8006060:	4a0b      	ldr	r2, [pc, #44]	; (8006090 <HAL_TIM_Base_Start_IT+0x58>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d002      	beq.n	800606c <HAL_TIM_Base_Start_IT+0x34>
 8006066:	4a0b      	ldr	r2, [pc, #44]	; (8006094 <HAL_TIM_Base_Start_IT+0x5c>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d10a      	bne.n	8006082 <HAL_TIM_Base_Start_IT+0x4a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800606c:	2107      	movs	r1, #7
 800606e:	689a      	ldr	r2, [r3, #8]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8006070:	2000      	movs	r0, #0
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006072:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006074:	2a06      	cmp	r2, #6
 8006076:	d003      	beq.n	8006080 <HAL_TIM_Base_Start_IT+0x48>
      __HAL_TIM_ENABLE(htim);
 8006078:	2201      	movs	r2, #1
 800607a:	6819      	ldr	r1, [r3, #0]
 800607c:	430a      	orrs	r2, r1
 800607e:	601a      	str	r2, [r3, #0]
}
 8006080:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	4310      	orrs	r0, r2
 8006086:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 8006088:	2000      	movs	r0, #0
 800608a:	e7f9      	b.n	8006080 <HAL_TIM_Base_Start_IT+0x48>
 800608c:	40012c00 	.word	0x40012c00
 8006090:	40000400 	.word	0x40000400
 8006094:	40014000 	.word	0x40014000

08006098 <HAL_TIM_OC_DelayElapsedCallback>:
 8006098:	4770      	bx	lr

0800609a <HAL_TIM_IC_CaptureCallback>:
 800609a:	4770      	bx	lr

0800609c <HAL_TIM_PWM_PulseFinishedCallback>:
 800609c:	4770      	bx	lr

0800609e <HAL_TIM_TriggerCallback>:
 800609e:	4770      	bx	lr

080060a0 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80060a0:	2202      	movs	r2, #2
 80060a2:	6803      	ldr	r3, [r0, #0]
{
 80060a4:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80060a6:	6919      	ldr	r1, [r3, #16]
{
 80060a8:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80060aa:	4211      	tst	r1, r2
 80060ac:	d00e      	beq.n	80060cc <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80060ae:	68d9      	ldr	r1, [r3, #12]
 80060b0:	4211      	tst	r1, r2
 80060b2:	d00b      	beq.n	80060cc <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80060b4:	3a05      	subs	r2, #5
 80060b6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060b8:	3204      	adds	r2, #4
 80060ba:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	079b      	lsls	r3, r3, #30
 80060c0:	d100      	bne.n	80060c4 <HAL_TIM_IRQHandler+0x24>
 80060c2:	e079      	b.n	80061b8 <HAL_TIM_IRQHandler+0x118>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060c4:	f7ff ffe9 	bl	800609a <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060c8:	2300      	movs	r3, #0
 80060ca:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80060cc:	2204      	movs	r2, #4
 80060ce:	6823      	ldr	r3, [r4, #0]
 80060d0:	6919      	ldr	r1, [r3, #16]
 80060d2:	4211      	tst	r1, r2
 80060d4:	d010      	beq.n	80060f8 <HAL_TIM_IRQHandler+0x58>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80060d6:	68d9      	ldr	r1, [r3, #12]
 80060d8:	4211      	tst	r1, r2
 80060da:	d00d      	beq.n	80060f8 <HAL_TIM_IRQHandler+0x58>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80060dc:	3a09      	subs	r2, #9
 80060de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060e0:	3207      	adds	r2, #7
 80060e2:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060e4:	699a      	ldr	r2, [r3, #24]
 80060e6:	23c0      	movs	r3, #192	; 0xc0
 80060e8:	009b      	lsls	r3, r3, #2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060ea:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060ec:	421a      	tst	r2, r3
 80060ee:	d069      	beq.n	80061c4 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 80060f0:	f7ff ffd3 	bl	800609a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060f4:	2300      	movs	r3, #0
 80060f6:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80060f8:	2208      	movs	r2, #8
 80060fa:	6823      	ldr	r3, [r4, #0]
 80060fc:	6919      	ldr	r1, [r3, #16]
 80060fe:	4211      	tst	r1, r2
 8006100:	d00e      	beq.n	8006120 <HAL_TIM_IRQHandler+0x80>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006102:	68d9      	ldr	r1, [r3, #12]
 8006104:	4211      	tst	r1, r2
 8006106:	d00b      	beq.n	8006120 <HAL_TIM_IRQHandler+0x80>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006108:	3a11      	subs	r2, #17
 800610a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800610c:	320d      	adds	r2, #13
 800610e:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006110:	69db      	ldr	r3, [r3, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006112:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006114:	079b      	lsls	r3, r3, #30
 8006116:	d05b      	beq.n	80061d0 <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 8006118:	f7ff ffbf 	bl	800609a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800611c:	2300      	movs	r3, #0
 800611e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006120:	2210      	movs	r2, #16
 8006122:	6823      	ldr	r3, [r4, #0]
 8006124:	6919      	ldr	r1, [r3, #16]
 8006126:	4211      	tst	r1, r2
 8006128:	d010      	beq.n	800614c <HAL_TIM_IRQHandler+0xac>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800612a:	68d9      	ldr	r1, [r3, #12]
 800612c:	4211      	tst	r1, r2
 800612e:	d00d      	beq.n	800614c <HAL_TIM_IRQHandler+0xac>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006130:	3a21      	subs	r2, #33	; 0x21
 8006132:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006134:	3219      	adds	r2, #25
 8006136:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006138:	69da      	ldr	r2, [r3, #28]
 800613a:	23c0      	movs	r3, #192	; 0xc0
 800613c:	009b      	lsls	r3, r3, #2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800613e:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006140:	421a      	tst	r2, r3
 8006142:	d04b      	beq.n	80061dc <HAL_TIM_IRQHandler+0x13c>
        HAL_TIM_IC_CaptureCallback(htim);
 8006144:	f7ff ffa9 	bl	800609a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006148:	2300      	movs	r3, #0
 800614a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800614c:	2201      	movs	r2, #1
 800614e:	6823      	ldr	r3, [r4, #0]
 8006150:	6919      	ldr	r1, [r3, #16]
 8006152:	4211      	tst	r1, r2
 8006154:	d007      	beq.n	8006166 <HAL_TIM_IRQHandler+0xc6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006156:	68d9      	ldr	r1, [r3, #12]
 8006158:	4211      	tst	r1, r2
 800615a:	d004      	beq.n	8006166 <HAL_TIM_IRQHandler+0xc6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800615c:	3a03      	subs	r2, #3
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800615e:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006160:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006162:	f7fd fd41 	bl	8003be8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006166:	2280      	movs	r2, #128	; 0x80
 8006168:	6823      	ldr	r3, [r4, #0]
 800616a:	6919      	ldr	r1, [r3, #16]
 800616c:	4211      	tst	r1, r2
 800616e:	d008      	beq.n	8006182 <HAL_TIM_IRQHandler+0xe2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006170:	68d9      	ldr	r1, [r3, #12]
 8006172:	4211      	tst	r1, r2
 8006174:	d005      	beq.n	8006182 <HAL_TIM_IRQHandler+0xe2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006176:	3a02      	subs	r2, #2
 8006178:	3aff      	subs	r2, #255	; 0xff
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800617a:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800617c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800617e:	f000 f8de 	bl	800633e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006182:	2240      	movs	r2, #64	; 0x40
 8006184:	6823      	ldr	r3, [r4, #0]
 8006186:	6919      	ldr	r1, [r3, #16]
 8006188:	4211      	tst	r1, r2
 800618a:	d007      	beq.n	800619c <HAL_TIM_IRQHandler+0xfc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800618c:	68d9      	ldr	r1, [r3, #12]
 800618e:	4211      	tst	r1, r2
 8006190:	d004      	beq.n	800619c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006192:	3a81      	subs	r2, #129	; 0x81
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006194:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006196:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006198:	f7ff ff81 	bl	800609e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800619c:	2220      	movs	r2, #32
 800619e:	6823      	ldr	r3, [r4, #0]
 80061a0:	6919      	ldr	r1, [r3, #16]
 80061a2:	4211      	tst	r1, r2
 80061a4:	d007      	beq.n	80061b6 <HAL_TIM_IRQHandler+0x116>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80061a6:	68d9      	ldr	r1, [r3, #12]
 80061a8:	4211      	tst	r1, r2
 80061aa:	d004      	beq.n	80061b6 <HAL_TIM_IRQHandler+0x116>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80061ac:	3a41      	subs	r2, #65	; 0x41
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061ae:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80061b0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80061b2:	f000 f8c3 	bl	800633c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061b6:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061b8:	f7ff ff6e 	bl	8006098 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061bc:	0020      	movs	r0, r4
 80061be:	f7ff ff6d 	bl	800609c <HAL_TIM_PWM_PulseFinishedCallback>
 80061c2:	e781      	b.n	80060c8 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061c4:	f7ff ff68 	bl	8006098 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061c8:	0020      	movs	r0, r4
 80061ca:	f7ff ff67 	bl	800609c <HAL_TIM_PWM_PulseFinishedCallback>
 80061ce:	e791      	b.n	80060f4 <HAL_TIM_IRQHandler+0x54>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061d0:	f7ff ff62 	bl	8006098 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061d4:	0020      	movs	r0, r4
 80061d6:	f7ff ff61 	bl	800609c <HAL_TIM_PWM_PulseFinishedCallback>
 80061da:	e79f      	b.n	800611c <HAL_TIM_IRQHandler+0x7c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061dc:	f7ff ff5c 	bl	8006098 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061e0:	0020      	movs	r0, r4
 80061e2:	f7ff ff5b 	bl	800609c <HAL_TIM_PWM_PulseFinishedCallback>
 80061e6:	e7af      	b.n	8006148 <HAL_TIM_IRQHandler+0xa8>

080061e8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061e8:	4a20      	ldr	r2, [pc, #128]	; (800626c <TIM_Base_SetConfig+0x84>)
{
 80061ea:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 80061ec:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061ee:	4290      	cmp	r0, r2
 80061f0:	d006      	beq.n	8006200 <TIM_Base_SetConfig+0x18>
 80061f2:	2480      	movs	r4, #128	; 0x80
 80061f4:	05e4      	lsls	r4, r4, #23
 80061f6:	42a0      	cmp	r0, r4
 80061f8:	d002      	beq.n	8006200 <TIM_Base_SetConfig+0x18>
 80061fa:	4c1d      	ldr	r4, [pc, #116]	; (8006270 <TIM_Base_SetConfig+0x88>)
 80061fc:	42a0      	cmp	r0, r4
 80061fe:	d10c      	bne.n	800621a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006200:	2470      	movs	r4, #112	; 0x70
 8006202:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8006204:	684c      	ldr	r4, [r1, #4]
 8006206:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006208:	4290      	cmp	r0, r2
 800620a:	d012      	beq.n	8006232 <TIM_Base_SetConfig+0x4a>
 800620c:	2480      	movs	r4, #128	; 0x80
 800620e:	05e4      	lsls	r4, r4, #23
 8006210:	42a0      	cmp	r0, r4
 8006212:	d00e      	beq.n	8006232 <TIM_Base_SetConfig+0x4a>
 8006214:	4c16      	ldr	r4, [pc, #88]	; (8006270 <TIM_Base_SetConfig+0x88>)
 8006216:	42a0      	cmp	r0, r4
 8006218:	d00b      	beq.n	8006232 <TIM_Base_SetConfig+0x4a>
 800621a:	4c16      	ldr	r4, [pc, #88]	; (8006274 <TIM_Base_SetConfig+0x8c>)
 800621c:	42a0      	cmp	r0, r4
 800621e:	d008      	beq.n	8006232 <TIM_Base_SetConfig+0x4a>
 8006220:	4c15      	ldr	r4, [pc, #84]	; (8006278 <TIM_Base_SetConfig+0x90>)
 8006222:	42a0      	cmp	r0, r4
 8006224:	d005      	beq.n	8006232 <TIM_Base_SetConfig+0x4a>
 8006226:	4c15      	ldr	r4, [pc, #84]	; (800627c <TIM_Base_SetConfig+0x94>)
 8006228:	42a0      	cmp	r0, r4
 800622a:	d002      	beq.n	8006232 <TIM_Base_SetConfig+0x4a>
 800622c:	4c14      	ldr	r4, [pc, #80]	; (8006280 <TIM_Base_SetConfig+0x98>)
 800622e:	42a0      	cmp	r0, r4
 8006230:	d103      	bne.n	800623a <TIM_Base_SetConfig+0x52>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006232:	4c14      	ldr	r4, [pc, #80]	; (8006284 <TIM_Base_SetConfig+0x9c>)
 8006234:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006236:	68cc      	ldr	r4, [r1, #12]
 8006238:	4323      	orrs	r3, r4
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800623a:	2480      	movs	r4, #128	; 0x80
 800623c:	43a3      	bics	r3, r4
 800623e:	694c      	ldr	r4, [r1, #20]
 8006240:	4323      	orrs	r3, r4

  TIMx->CR1 = tmpcr1;
 8006242:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006244:	688b      	ldr	r3, [r1, #8]
 8006246:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006248:	680b      	ldr	r3, [r1, #0]
 800624a:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800624c:	4290      	cmp	r0, r2
 800624e:	d008      	beq.n	8006262 <TIM_Base_SetConfig+0x7a>
 8006250:	4b09      	ldr	r3, [pc, #36]	; (8006278 <TIM_Base_SetConfig+0x90>)
 8006252:	4298      	cmp	r0, r3
 8006254:	d005      	beq.n	8006262 <TIM_Base_SetConfig+0x7a>
 8006256:	4b09      	ldr	r3, [pc, #36]	; (800627c <TIM_Base_SetConfig+0x94>)
 8006258:	4298      	cmp	r0, r3
 800625a:	d002      	beq.n	8006262 <TIM_Base_SetConfig+0x7a>
 800625c:	4b08      	ldr	r3, [pc, #32]	; (8006280 <TIM_Base_SetConfig+0x98>)
 800625e:	4298      	cmp	r0, r3
 8006260:	d101      	bne.n	8006266 <TIM_Base_SetConfig+0x7e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006262:	690b      	ldr	r3, [r1, #16]
 8006264:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006266:	2301      	movs	r3, #1
 8006268:	6143      	str	r3, [r0, #20]
}
 800626a:	bd10      	pop	{r4, pc}
 800626c:	40012c00 	.word	0x40012c00
 8006270:	40000400 	.word	0x40000400
 8006274:	40002000 	.word	0x40002000
 8006278:	40014000 	.word	0x40014000
 800627c:	40014400 	.word	0x40014400
 8006280:	40014800 	.word	0x40014800
 8006284:	fffffcff 	.word	0xfffffcff

08006288 <HAL_TIM_Base_Init>:
{
 8006288:	b570      	push	{r4, r5, r6, lr}
 800628a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800628c:	2001      	movs	r0, #1
  if (htim == NULL)
 800628e:	2c00      	cmp	r4, #0
 8006290:	d021      	beq.n	80062d6 <HAL_TIM_Base_Init+0x4e>
  if (htim->State == HAL_TIM_STATE_RESET)
 8006292:	0025      	movs	r5, r4
 8006294:	353d      	adds	r5, #61	; 0x3d
 8006296:	782b      	ldrb	r3, [r5, #0]
 8006298:	b2da      	uxtb	r2, r3
 800629a:	2b00      	cmp	r3, #0
 800629c:	d105      	bne.n	80062aa <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 800629e:	0023      	movs	r3, r4
 80062a0:	333c      	adds	r3, #60	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80062a2:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 80062a4:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 80062a6:	f7fe faf1 	bl	800488c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80062aa:	2302      	movs	r3, #2
 80062ac:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062ae:	6820      	ldr	r0, [r4, #0]
 80062b0:	1d21      	adds	r1, r4, #4
 80062b2:	f7ff ff99 	bl	80061e8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062b6:	0022      	movs	r2, r4
 80062b8:	2301      	movs	r3, #1
  return HAL_OK;
 80062ba:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062bc:	3246      	adds	r2, #70	; 0x46
 80062be:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062c0:	3445      	adds	r4, #69	; 0x45
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062c2:	3a08      	subs	r2, #8
 80062c4:	7013      	strb	r3, [r2, #0]
 80062c6:	7053      	strb	r3, [r2, #1]
 80062c8:	7093      	strb	r3, [r2, #2]
 80062ca:	70d3      	strb	r3, [r2, #3]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062cc:	7113      	strb	r3, [r2, #4]
 80062ce:	7153      	strb	r3, [r2, #5]
 80062d0:	7193      	strb	r3, [r2, #6]
 80062d2:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 80062d4:	702b      	strb	r3, [r5, #0]
}
 80062d6:	bd70      	pop	{r4, r5, r6, pc}

080062d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062d8:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062da:	0004      	movs	r4, r0
 80062dc:	2202      	movs	r2, #2
 80062de:	343c      	adds	r4, #60	; 0x3c
 80062e0:	7825      	ldrb	r5, [r4, #0]
{
 80062e2:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 80062e4:	0010      	movs	r0, r2
 80062e6:	2d01      	cmp	r5, #1
 80062e8:	d020      	beq.n	800632c <HAL_TIMEx_MasterConfigSynchronization+0x54>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062ea:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062ec:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 80062ee:	353d      	adds	r5, #61	; 0x3d
 80062f0:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 80062f6:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80062f8:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062fa:	680e      	ldr	r6, [r1, #0]
 80062fc:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062fe:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006300:	480b      	ldr	r0, [pc, #44]	; (8006330 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8006302:	4283      	cmp	r3, r0
 8006304:	d009      	beq.n	800631a <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8006306:	2080      	movs	r0, #128	; 0x80
 8006308:	05c0      	lsls	r0, r0, #23
 800630a:	4283      	cmp	r3, r0
 800630c:	d005      	beq.n	800631a <HAL_TIMEx_MasterConfigSynchronization+0x42>
 800630e:	4809      	ldr	r0, [pc, #36]	; (8006334 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
 8006310:	4283      	cmp	r3, r0
 8006312:	d002      	beq.n	800631a <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8006314:	4808      	ldr	r0, [pc, #32]	; (8006338 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8006316:	4283      	cmp	r3, r0
 8006318:	d104      	bne.n	8006324 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800631a:	2080      	movs	r0, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800631c:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800631e:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006320:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006322:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006324:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8006326:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8006328:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 800632a:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 800632c:	bd70      	pop	{r4, r5, r6, pc}
 800632e:	46c0      	nop			; (mov r8, r8)
 8006330:	40012c00 	.word	0x40012c00
 8006334:	40000400 	.word	0x40000400
 8006338:	40014000 	.word	0x40014000

0800633c <HAL_TIMEx_CommutCallback>:
 800633c:	4770      	bx	lr

0800633e <HAL_TIMEx_BreakCallback>:
 800633e:	4770      	bx	lr

08006340 <__errno>:
 8006340:	4b01      	ldr	r3, [pc, #4]	; (8006348 <__errno+0x8>)
 8006342:	6818      	ldr	r0, [r3, #0]
 8006344:	4770      	bx	lr
 8006346:	46c0      	nop			; (mov r8, r8)
 8006348:	20000024 	.word	0x20000024

0800634c <__libc_init_array>:
 800634c:	b570      	push	{r4, r5, r6, lr}
 800634e:	2600      	movs	r6, #0
 8006350:	4d0c      	ldr	r5, [pc, #48]	; (8006384 <__libc_init_array+0x38>)
 8006352:	4c0d      	ldr	r4, [pc, #52]	; (8006388 <__libc_init_array+0x3c>)
 8006354:	1b64      	subs	r4, r4, r5
 8006356:	10a4      	asrs	r4, r4, #2
 8006358:	42a6      	cmp	r6, r4
 800635a:	d109      	bne.n	8006370 <__libc_init_array+0x24>
 800635c:	2600      	movs	r6, #0
 800635e:	f002 ffbd 	bl	80092dc <_init>
 8006362:	4d0a      	ldr	r5, [pc, #40]	; (800638c <__libc_init_array+0x40>)
 8006364:	4c0a      	ldr	r4, [pc, #40]	; (8006390 <__libc_init_array+0x44>)
 8006366:	1b64      	subs	r4, r4, r5
 8006368:	10a4      	asrs	r4, r4, #2
 800636a:	42a6      	cmp	r6, r4
 800636c:	d105      	bne.n	800637a <__libc_init_array+0x2e>
 800636e:	bd70      	pop	{r4, r5, r6, pc}
 8006370:	00b3      	lsls	r3, r6, #2
 8006372:	58eb      	ldr	r3, [r5, r3]
 8006374:	4798      	blx	r3
 8006376:	3601      	adds	r6, #1
 8006378:	e7ee      	b.n	8006358 <__libc_init_array+0xc>
 800637a:	00b3      	lsls	r3, r6, #2
 800637c:	58eb      	ldr	r3, [r5, r3]
 800637e:	4798      	blx	r3
 8006380:	3601      	adds	r6, #1
 8006382:	e7f2      	b.n	800636a <__libc_init_array+0x1e>
 8006384:	0800bd34 	.word	0x0800bd34
 8006388:	0800bd34 	.word	0x0800bd34
 800638c:	0800bd34 	.word	0x0800bd34
 8006390:	0800bd38 	.word	0x0800bd38

08006394 <memcpy>:
 8006394:	2300      	movs	r3, #0
 8006396:	b510      	push	{r4, lr}
 8006398:	429a      	cmp	r2, r3
 800639a:	d100      	bne.n	800639e <memcpy+0xa>
 800639c:	bd10      	pop	{r4, pc}
 800639e:	5ccc      	ldrb	r4, [r1, r3]
 80063a0:	54c4      	strb	r4, [r0, r3]
 80063a2:	3301      	adds	r3, #1
 80063a4:	e7f8      	b.n	8006398 <memcpy+0x4>

080063a6 <memset>:
 80063a6:	0003      	movs	r3, r0
 80063a8:	1882      	adds	r2, r0, r2
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d100      	bne.n	80063b0 <memset+0xa>
 80063ae:	4770      	bx	lr
 80063b0:	7019      	strb	r1, [r3, #0]
 80063b2:	3301      	adds	r3, #1
 80063b4:	e7f9      	b.n	80063aa <memset+0x4>

080063b6 <__cvt>:
 80063b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063b8:	001e      	movs	r6, r3
 80063ba:	2300      	movs	r3, #0
 80063bc:	0014      	movs	r4, r2
 80063be:	b08b      	sub	sp, #44	; 0x2c
 80063c0:	429e      	cmp	r6, r3
 80063c2:	da04      	bge.n	80063ce <__cvt+0x18>
 80063c4:	2180      	movs	r1, #128	; 0x80
 80063c6:	0609      	lsls	r1, r1, #24
 80063c8:	1873      	adds	r3, r6, r1
 80063ca:	001e      	movs	r6, r3
 80063cc:	232d      	movs	r3, #45	; 0x2d
 80063ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80063d0:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80063d2:	7013      	strb	r3, [r2, #0]
 80063d4:	2320      	movs	r3, #32
 80063d6:	2203      	movs	r2, #3
 80063d8:	439f      	bics	r7, r3
 80063da:	2f46      	cmp	r7, #70	; 0x46
 80063dc:	d007      	beq.n	80063ee <__cvt+0x38>
 80063de:	003b      	movs	r3, r7
 80063e0:	3b45      	subs	r3, #69	; 0x45
 80063e2:	4259      	negs	r1, r3
 80063e4:	414b      	adcs	r3, r1
 80063e6:	9910      	ldr	r1, [sp, #64]	; 0x40
 80063e8:	3a01      	subs	r2, #1
 80063ea:	18cb      	adds	r3, r1, r3
 80063ec:	9310      	str	r3, [sp, #64]	; 0x40
 80063ee:	ab09      	add	r3, sp, #36	; 0x24
 80063f0:	9304      	str	r3, [sp, #16]
 80063f2:	ab08      	add	r3, sp, #32
 80063f4:	9303      	str	r3, [sp, #12]
 80063f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80063f8:	9200      	str	r2, [sp, #0]
 80063fa:	9302      	str	r3, [sp, #8]
 80063fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80063fe:	0022      	movs	r2, r4
 8006400:	9301      	str	r3, [sp, #4]
 8006402:	0033      	movs	r3, r6
 8006404:	f000 fcf2 	bl	8006dec <_dtoa_r>
 8006408:	0005      	movs	r5, r0
 800640a:	2f47      	cmp	r7, #71	; 0x47
 800640c:	d102      	bne.n	8006414 <__cvt+0x5e>
 800640e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006410:	07db      	lsls	r3, r3, #31
 8006412:	d528      	bpl.n	8006466 <__cvt+0xb0>
 8006414:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006416:	18eb      	adds	r3, r5, r3
 8006418:	9307      	str	r3, [sp, #28]
 800641a:	2f46      	cmp	r7, #70	; 0x46
 800641c:	d114      	bne.n	8006448 <__cvt+0x92>
 800641e:	782b      	ldrb	r3, [r5, #0]
 8006420:	2b30      	cmp	r3, #48	; 0x30
 8006422:	d10c      	bne.n	800643e <__cvt+0x88>
 8006424:	2200      	movs	r2, #0
 8006426:	2300      	movs	r3, #0
 8006428:	0020      	movs	r0, r4
 800642a:	0031      	movs	r1, r6
 800642c:	f7fa f81a 	bl	8000464 <__aeabi_dcmpeq>
 8006430:	2800      	cmp	r0, #0
 8006432:	d104      	bne.n	800643e <__cvt+0x88>
 8006434:	2301      	movs	r3, #1
 8006436:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006438:	1a9b      	subs	r3, r3, r2
 800643a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800643c:	6013      	str	r3, [r2, #0]
 800643e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006440:	9a07      	ldr	r2, [sp, #28]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	18d3      	adds	r3, r2, r3
 8006446:	9307      	str	r3, [sp, #28]
 8006448:	2200      	movs	r2, #0
 800644a:	2300      	movs	r3, #0
 800644c:	0020      	movs	r0, r4
 800644e:	0031      	movs	r1, r6
 8006450:	f7fa f808 	bl	8000464 <__aeabi_dcmpeq>
 8006454:	2800      	cmp	r0, #0
 8006456:	d001      	beq.n	800645c <__cvt+0xa6>
 8006458:	9b07      	ldr	r3, [sp, #28]
 800645a:	9309      	str	r3, [sp, #36]	; 0x24
 800645c:	2230      	movs	r2, #48	; 0x30
 800645e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006460:	9907      	ldr	r1, [sp, #28]
 8006462:	428b      	cmp	r3, r1
 8006464:	d306      	bcc.n	8006474 <__cvt+0xbe>
 8006466:	0028      	movs	r0, r5
 8006468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800646a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800646c:	1b5b      	subs	r3, r3, r5
 800646e:	6013      	str	r3, [r2, #0]
 8006470:	b00b      	add	sp, #44	; 0x2c
 8006472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006474:	1c59      	adds	r1, r3, #1
 8006476:	9109      	str	r1, [sp, #36]	; 0x24
 8006478:	701a      	strb	r2, [r3, #0]
 800647a:	e7f0      	b.n	800645e <__cvt+0xa8>

0800647c <__exponent>:
 800647c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800647e:	1c83      	adds	r3, r0, #2
 8006480:	b087      	sub	sp, #28
 8006482:	9303      	str	r3, [sp, #12]
 8006484:	0005      	movs	r5, r0
 8006486:	000c      	movs	r4, r1
 8006488:	232b      	movs	r3, #43	; 0x2b
 800648a:	7002      	strb	r2, [r0, #0]
 800648c:	2900      	cmp	r1, #0
 800648e:	da01      	bge.n	8006494 <__exponent+0x18>
 8006490:	424c      	negs	r4, r1
 8006492:	3302      	adds	r3, #2
 8006494:	706b      	strb	r3, [r5, #1]
 8006496:	2c09      	cmp	r4, #9
 8006498:	dd31      	ble.n	80064fe <__exponent+0x82>
 800649a:	270a      	movs	r7, #10
 800649c:	ab04      	add	r3, sp, #16
 800649e:	1dde      	adds	r6, r3, #7
 80064a0:	0020      	movs	r0, r4
 80064a2:	0039      	movs	r1, r7
 80064a4:	9601      	str	r6, [sp, #4]
 80064a6:	f7f9 ffbb 	bl	8000420 <__aeabi_idivmod>
 80064aa:	3e01      	subs	r6, #1
 80064ac:	3130      	adds	r1, #48	; 0x30
 80064ae:	0020      	movs	r0, r4
 80064b0:	7031      	strb	r1, [r6, #0]
 80064b2:	0039      	movs	r1, r7
 80064b4:	9402      	str	r4, [sp, #8]
 80064b6:	f7f9 fecd 	bl	8000254 <__divsi3>
 80064ba:	9b02      	ldr	r3, [sp, #8]
 80064bc:	0004      	movs	r4, r0
 80064be:	2b63      	cmp	r3, #99	; 0x63
 80064c0:	dcee      	bgt.n	80064a0 <__exponent+0x24>
 80064c2:	9b01      	ldr	r3, [sp, #4]
 80064c4:	3430      	adds	r4, #48	; 0x30
 80064c6:	1e9a      	subs	r2, r3, #2
 80064c8:	0013      	movs	r3, r2
 80064ca:	9903      	ldr	r1, [sp, #12]
 80064cc:	7014      	strb	r4, [r2, #0]
 80064ce:	a804      	add	r0, sp, #16
 80064d0:	3007      	adds	r0, #7
 80064d2:	4298      	cmp	r0, r3
 80064d4:	d80e      	bhi.n	80064f4 <__exponent+0x78>
 80064d6:	ab04      	add	r3, sp, #16
 80064d8:	3307      	adds	r3, #7
 80064da:	2000      	movs	r0, #0
 80064dc:	429a      	cmp	r2, r3
 80064de:	d804      	bhi.n	80064ea <__exponent+0x6e>
 80064e0:	ab04      	add	r3, sp, #16
 80064e2:	3009      	adds	r0, #9
 80064e4:	18c0      	adds	r0, r0, r3
 80064e6:	9b01      	ldr	r3, [sp, #4]
 80064e8:	1ac0      	subs	r0, r0, r3
 80064ea:	9b03      	ldr	r3, [sp, #12]
 80064ec:	1818      	adds	r0, r3, r0
 80064ee:	1b40      	subs	r0, r0, r5
 80064f0:	b007      	add	sp, #28
 80064f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064f4:	7818      	ldrb	r0, [r3, #0]
 80064f6:	3301      	adds	r3, #1
 80064f8:	7008      	strb	r0, [r1, #0]
 80064fa:	3101      	adds	r1, #1
 80064fc:	e7e7      	b.n	80064ce <__exponent+0x52>
 80064fe:	2330      	movs	r3, #48	; 0x30
 8006500:	18e4      	adds	r4, r4, r3
 8006502:	70ab      	strb	r3, [r5, #2]
 8006504:	1d28      	adds	r0, r5, #4
 8006506:	70ec      	strb	r4, [r5, #3]
 8006508:	e7f1      	b.n	80064ee <__exponent+0x72>
	...

0800650c <_printf_float>:
 800650c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800650e:	b095      	sub	sp, #84	; 0x54
 8006510:	000c      	movs	r4, r1
 8006512:	9209      	str	r2, [sp, #36]	; 0x24
 8006514:	001e      	movs	r6, r3
 8006516:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006518:	0007      	movs	r7, r0
 800651a:	f001 fa81 	bl	8007a20 <_localeconv_r>
 800651e:	6803      	ldr	r3, [r0, #0]
 8006520:	0018      	movs	r0, r3
 8006522:	930c      	str	r3, [sp, #48]	; 0x30
 8006524:	f7f9 fdf0 	bl	8000108 <strlen>
 8006528:	2300      	movs	r3, #0
 800652a:	9312      	str	r3, [sp, #72]	; 0x48
 800652c:	7e23      	ldrb	r3, [r4, #24]
 800652e:	2207      	movs	r2, #7
 8006530:	930a      	str	r3, [sp, #40]	; 0x28
 8006532:	6823      	ldr	r3, [r4, #0]
 8006534:	900e      	str	r0, [sp, #56]	; 0x38
 8006536:	930d      	str	r3, [sp, #52]	; 0x34
 8006538:	990d      	ldr	r1, [sp, #52]	; 0x34
 800653a:	682b      	ldr	r3, [r5, #0]
 800653c:	05c9      	lsls	r1, r1, #23
 800653e:	d547      	bpl.n	80065d0 <_printf_float+0xc4>
 8006540:	189b      	adds	r3, r3, r2
 8006542:	4393      	bics	r3, r2
 8006544:	001a      	movs	r2, r3
 8006546:	3208      	adds	r2, #8
 8006548:	602a      	str	r2, [r5, #0]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	64a2      	str	r2, [r4, #72]	; 0x48
 8006550:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006552:	2201      	movs	r2, #1
 8006554:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006556:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8006558:	930b      	str	r3, [sp, #44]	; 0x2c
 800655a:	006b      	lsls	r3, r5, #1
 800655c:	085b      	lsrs	r3, r3, #1
 800655e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006560:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006562:	4ba7      	ldr	r3, [pc, #668]	; (8006800 <_printf_float+0x2f4>)
 8006564:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006566:	4252      	negs	r2, r2
 8006568:	f7fc fd3c 	bl	8002fe4 <__aeabi_dcmpun>
 800656c:	2800      	cmp	r0, #0
 800656e:	d131      	bne.n	80065d4 <_printf_float+0xc8>
 8006570:	2201      	movs	r2, #1
 8006572:	4ba3      	ldr	r3, [pc, #652]	; (8006800 <_printf_float+0x2f4>)
 8006574:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006576:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006578:	4252      	negs	r2, r2
 800657a:	f7f9 ff83 	bl	8000484 <__aeabi_dcmple>
 800657e:	2800      	cmp	r0, #0
 8006580:	d128      	bne.n	80065d4 <_printf_float+0xc8>
 8006582:	2200      	movs	r2, #0
 8006584:	2300      	movs	r3, #0
 8006586:	0029      	movs	r1, r5
 8006588:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800658a:	f7f9 ff71 	bl	8000470 <__aeabi_dcmplt>
 800658e:	2800      	cmp	r0, #0
 8006590:	d003      	beq.n	800659a <_printf_float+0x8e>
 8006592:	0023      	movs	r3, r4
 8006594:	222d      	movs	r2, #45	; 0x2d
 8006596:	3343      	adds	r3, #67	; 0x43
 8006598:	701a      	strb	r2, [r3, #0]
 800659a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800659c:	4d99      	ldr	r5, [pc, #612]	; (8006804 <_printf_float+0x2f8>)
 800659e:	2b47      	cmp	r3, #71	; 0x47
 80065a0:	d900      	bls.n	80065a4 <_printf_float+0x98>
 80065a2:	4d99      	ldr	r5, [pc, #612]	; (8006808 <_printf_float+0x2fc>)
 80065a4:	2303      	movs	r3, #3
 80065a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80065a8:	6123      	str	r3, [r4, #16]
 80065aa:	3301      	adds	r3, #1
 80065ac:	439a      	bics	r2, r3
 80065ae:	2300      	movs	r3, #0
 80065b0:	6022      	str	r2, [r4, #0]
 80065b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80065b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065b6:	0021      	movs	r1, r4
 80065b8:	0038      	movs	r0, r7
 80065ba:	9600      	str	r6, [sp, #0]
 80065bc:	aa13      	add	r2, sp, #76	; 0x4c
 80065be:	f000 f9e7 	bl	8006990 <_printf_common>
 80065c2:	1c43      	adds	r3, r0, #1
 80065c4:	d000      	beq.n	80065c8 <_printf_float+0xbc>
 80065c6:	e0a2      	b.n	800670e <_printf_float+0x202>
 80065c8:	2001      	movs	r0, #1
 80065ca:	4240      	negs	r0, r0
 80065cc:	b015      	add	sp, #84	; 0x54
 80065ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065d0:	3307      	adds	r3, #7
 80065d2:	e7b6      	b.n	8006542 <_printf_float+0x36>
 80065d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80065d6:	002b      	movs	r3, r5
 80065d8:	0010      	movs	r0, r2
 80065da:	0029      	movs	r1, r5
 80065dc:	f7fc fd02 	bl	8002fe4 <__aeabi_dcmpun>
 80065e0:	2800      	cmp	r0, #0
 80065e2:	d00b      	beq.n	80065fc <_printf_float+0xf0>
 80065e4:	2d00      	cmp	r5, #0
 80065e6:	da03      	bge.n	80065f0 <_printf_float+0xe4>
 80065e8:	0023      	movs	r3, r4
 80065ea:	222d      	movs	r2, #45	; 0x2d
 80065ec:	3343      	adds	r3, #67	; 0x43
 80065ee:	701a      	strb	r2, [r3, #0]
 80065f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065f2:	4d86      	ldr	r5, [pc, #536]	; (800680c <_printf_float+0x300>)
 80065f4:	2b47      	cmp	r3, #71	; 0x47
 80065f6:	d9d5      	bls.n	80065a4 <_printf_float+0x98>
 80065f8:	4d85      	ldr	r5, [pc, #532]	; (8006810 <_printf_float+0x304>)
 80065fa:	e7d3      	b.n	80065a4 <_printf_float+0x98>
 80065fc:	2220      	movs	r2, #32
 80065fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006600:	6863      	ldr	r3, [r4, #4]
 8006602:	4391      	bics	r1, r2
 8006604:	910f      	str	r1, [sp, #60]	; 0x3c
 8006606:	1c5a      	adds	r2, r3, #1
 8006608:	d149      	bne.n	800669e <_printf_float+0x192>
 800660a:	3307      	adds	r3, #7
 800660c:	6063      	str	r3, [r4, #4]
 800660e:	2380      	movs	r3, #128	; 0x80
 8006610:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006612:	00db      	lsls	r3, r3, #3
 8006614:	4313      	orrs	r3, r2
 8006616:	2200      	movs	r2, #0
 8006618:	9206      	str	r2, [sp, #24]
 800661a:	aa12      	add	r2, sp, #72	; 0x48
 800661c:	9205      	str	r2, [sp, #20]
 800661e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006620:	a908      	add	r1, sp, #32
 8006622:	9204      	str	r2, [sp, #16]
 8006624:	aa11      	add	r2, sp, #68	; 0x44
 8006626:	9203      	str	r2, [sp, #12]
 8006628:	2223      	movs	r2, #35	; 0x23
 800662a:	6023      	str	r3, [r4, #0]
 800662c:	9301      	str	r3, [sp, #4]
 800662e:	6863      	ldr	r3, [r4, #4]
 8006630:	1852      	adds	r2, r2, r1
 8006632:	9202      	str	r2, [sp, #8]
 8006634:	9300      	str	r3, [sp, #0]
 8006636:	0038      	movs	r0, r7
 8006638:	002b      	movs	r3, r5
 800663a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800663c:	f7ff febb 	bl	80063b6 <__cvt>
 8006640:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006642:	0005      	movs	r5, r0
 8006644:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006646:	2b47      	cmp	r3, #71	; 0x47
 8006648:	d108      	bne.n	800665c <_printf_float+0x150>
 800664a:	1ccb      	adds	r3, r1, #3
 800664c:	db02      	blt.n	8006654 <_printf_float+0x148>
 800664e:	6863      	ldr	r3, [r4, #4]
 8006650:	4299      	cmp	r1, r3
 8006652:	dd48      	ble.n	80066e6 <_printf_float+0x1da>
 8006654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006656:	3b02      	subs	r3, #2
 8006658:	b2db      	uxtb	r3, r3
 800665a:	930a      	str	r3, [sp, #40]	; 0x28
 800665c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800665e:	2b65      	cmp	r3, #101	; 0x65
 8006660:	d824      	bhi.n	80066ac <_printf_float+0x1a0>
 8006662:	0020      	movs	r0, r4
 8006664:	001a      	movs	r2, r3
 8006666:	3901      	subs	r1, #1
 8006668:	3050      	adds	r0, #80	; 0x50
 800666a:	9111      	str	r1, [sp, #68]	; 0x44
 800666c:	f7ff ff06 	bl	800647c <__exponent>
 8006670:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006672:	900b      	str	r0, [sp, #44]	; 0x2c
 8006674:	1813      	adds	r3, r2, r0
 8006676:	6123      	str	r3, [r4, #16]
 8006678:	2a01      	cmp	r2, #1
 800667a:	dc02      	bgt.n	8006682 <_printf_float+0x176>
 800667c:	6822      	ldr	r2, [r4, #0]
 800667e:	07d2      	lsls	r2, r2, #31
 8006680:	d501      	bpl.n	8006686 <_printf_float+0x17a>
 8006682:	3301      	adds	r3, #1
 8006684:	6123      	str	r3, [r4, #16]
 8006686:	2323      	movs	r3, #35	; 0x23
 8006688:	aa08      	add	r2, sp, #32
 800668a:	189b      	adds	r3, r3, r2
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d100      	bne.n	8006694 <_printf_float+0x188>
 8006692:	e78f      	b.n	80065b4 <_printf_float+0xa8>
 8006694:	0023      	movs	r3, r4
 8006696:	222d      	movs	r2, #45	; 0x2d
 8006698:	3343      	adds	r3, #67	; 0x43
 800669a:	701a      	strb	r2, [r3, #0]
 800669c:	e78a      	b.n	80065b4 <_printf_float+0xa8>
 800669e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80066a0:	2a47      	cmp	r2, #71	; 0x47
 80066a2:	d1b4      	bne.n	800660e <_printf_float+0x102>
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d1b2      	bne.n	800660e <_printf_float+0x102>
 80066a8:	3301      	adds	r3, #1
 80066aa:	e7af      	b.n	800660c <_printf_float+0x100>
 80066ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066ae:	2b66      	cmp	r3, #102	; 0x66
 80066b0:	d11b      	bne.n	80066ea <_printf_float+0x1de>
 80066b2:	6863      	ldr	r3, [r4, #4]
 80066b4:	2900      	cmp	r1, #0
 80066b6:	dd0d      	ble.n	80066d4 <_printf_float+0x1c8>
 80066b8:	6121      	str	r1, [r4, #16]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d102      	bne.n	80066c4 <_printf_float+0x1b8>
 80066be:	6822      	ldr	r2, [r4, #0]
 80066c0:	07d2      	lsls	r2, r2, #31
 80066c2:	d502      	bpl.n	80066ca <_printf_float+0x1be>
 80066c4:	3301      	adds	r3, #1
 80066c6:	1859      	adds	r1, r3, r1
 80066c8:	6121      	str	r1, [r4, #16]
 80066ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80066cc:	65a3      	str	r3, [r4, #88]	; 0x58
 80066ce:	2300      	movs	r3, #0
 80066d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80066d2:	e7d8      	b.n	8006686 <_printf_float+0x17a>
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d103      	bne.n	80066e0 <_printf_float+0x1d4>
 80066d8:	2201      	movs	r2, #1
 80066da:	6821      	ldr	r1, [r4, #0]
 80066dc:	4211      	tst	r1, r2
 80066de:	d000      	beq.n	80066e2 <_printf_float+0x1d6>
 80066e0:	1c9a      	adds	r2, r3, #2
 80066e2:	6122      	str	r2, [r4, #16]
 80066e4:	e7f1      	b.n	80066ca <_printf_float+0x1be>
 80066e6:	2367      	movs	r3, #103	; 0x67
 80066e8:	930a      	str	r3, [sp, #40]	; 0x28
 80066ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80066ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80066ee:	4293      	cmp	r3, r2
 80066f0:	db06      	blt.n	8006700 <_printf_float+0x1f4>
 80066f2:	6822      	ldr	r2, [r4, #0]
 80066f4:	6123      	str	r3, [r4, #16]
 80066f6:	07d2      	lsls	r2, r2, #31
 80066f8:	d5e7      	bpl.n	80066ca <_printf_float+0x1be>
 80066fa:	3301      	adds	r3, #1
 80066fc:	6123      	str	r3, [r4, #16]
 80066fe:	e7e4      	b.n	80066ca <_printf_float+0x1be>
 8006700:	2101      	movs	r1, #1
 8006702:	2b00      	cmp	r3, #0
 8006704:	dc01      	bgt.n	800670a <_printf_float+0x1fe>
 8006706:	1849      	adds	r1, r1, r1
 8006708:	1ac9      	subs	r1, r1, r3
 800670a:	1852      	adds	r2, r2, r1
 800670c:	e7e9      	b.n	80066e2 <_printf_float+0x1d6>
 800670e:	6822      	ldr	r2, [r4, #0]
 8006710:	0553      	lsls	r3, r2, #21
 8006712:	d407      	bmi.n	8006724 <_printf_float+0x218>
 8006714:	6923      	ldr	r3, [r4, #16]
 8006716:	002a      	movs	r2, r5
 8006718:	0038      	movs	r0, r7
 800671a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800671c:	47b0      	blx	r6
 800671e:	1c43      	adds	r3, r0, #1
 8006720:	d128      	bne.n	8006774 <_printf_float+0x268>
 8006722:	e751      	b.n	80065c8 <_printf_float+0xbc>
 8006724:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006726:	2b65      	cmp	r3, #101	; 0x65
 8006728:	d800      	bhi.n	800672c <_printf_float+0x220>
 800672a:	e0e1      	b.n	80068f0 <_printf_float+0x3e4>
 800672c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800672e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006730:	2200      	movs	r2, #0
 8006732:	2300      	movs	r3, #0
 8006734:	f7f9 fe96 	bl	8000464 <__aeabi_dcmpeq>
 8006738:	2800      	cmp	r0, #0
 800673a:	d031      	beq.n	80067a0 <_printf_float+0x294>
 800673c:	2301      	movs	r3, #1
 800673e:	0038      	movs	r0, r7
 8006740:	4a34      	ldr	r2, [pc, #208]	; (8006814 <_printf_float+0x308>)
 8006742:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006744:	47b0      	blx	r6
 8006746:	1c43      	adds	r3, r0, #1
 8006748:	d100      	bne.n	800674c <_printf_float+0x240>
 800674a:	e73d      	b.n	80065c8 <_printf_float+0xbc>
 800674c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800674e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006750:	4293      	cmp	r3, r2
 8006752:	db02      	blt.n	800675a <_printf_float+0x24e>
 8006754:	6823      	ldr	r3, [r4, #0]
 8006756:	07db      	lsls	r3, r3, #31
 8006758:	d50c      	bpl.n	8006774 <_printf_float+0x268>
 800675a:	0038      	movs	r0, r7
 800675c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800675e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006760:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006762:	47b0      	blx	r6
 8006764:	2500      	movs	r5, #0
 8006766:	1c43      	adds	r3, r0, #1
 8006768:	d100      	bne.n	800676c <_printf_float+0x260>
 800676a:	e72d      	b.n	80065c8 <_printf_float+0xbc>
 800676c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800676e:	3b01      	subs	r3, #1
 8006770:	42ab      	cmp	r3, r5
 8006772:	dc0a      	bgt.n	800678a <_printf_float+0x27e>
 8006774:	6823      	ldr	r3, [r4, #0]
 8006776:	079b      	lsls	r3, r3, #30
 8006778:	d500      	bpl.n	800677c <_printf_float+0x270>
 800677a:	e106      	b.n	800698a <_printf_float+0x47e>
 800677c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800677e:	68e0      	ldr	r0, [r4, #12]
 8006780:	4298      	cmp	r0, r3
 8006782:	db00      	blt.n	8006786 <_printf_float+0x27a>
 8006784:	e722      	b.n	80065cc <_printf_float+0xc0>
 8006786:	0018      	movs	r0, r3
 8006788:	e720      	b.n	80065cc <_printf_float+0xc0>
 800678a:	0022      	movs	r2, r4
 800678c:	2301      	movs	r3, #1
 800678e:	0038      	movs	r0, r7
 8006790:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006792:	321a      	adds	r2, #26
 8006794:	47b0      	blx	r6
 8006796:	1c43      	adds	r3, r0, #1
 8006798:	d100      	bne.n	800679c <_printf_float+0x290>
 800679a:	e715      	b.n	80065c8 <_printf_float+0xbc>
 800679c:	3501      	adds	r5, #1
 800679e:	e7e5      	b.n	800676c <_printf_float+0x260>
 80067a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	dc38      	bgt.n	8006818 <_printf_float+0x30c>
 80067a6:	2301      	movs	r3, #1
 80067a8:	0038      	movs	r0, r7
 80067aa:	4a1a      	ldr	r2, [pc, #104]	; (8006814 <_printf_float+0x308>)
 80067ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067ae:	47b0      	blx	r6
 80067b0:	1c43      	adds	r3, r0, #1
 80067b2:	d100      	bne.n	80067b6 <_printf_float+0x2aa>
 80067b4:	e708      	b.n	80065c8 <_printf_float+0xbc>
 80067b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80067b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80067ba:	4313      	orrs	r3, r2
 80067bc:	d102      	bne.n	80067c4 <_printf_float+0x2b8>
 80067be:	6823      	ldr	r3, [r4, #0]
 80067c0:	07db      	lsls	r3, r3, #31
 80067c2:	d5d7      	bpl.n	8006774 <_printf_float+0x268>
 80067c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067c6:	0038      	movs	r0, r7
 80067c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80067ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067cc:	47b0      	blx	r6
 80067ce:	1c43      	adds	r3, r0, #1
 80067d0:	d100      	bne.n	80067d4 <_printf_float+0x2c8>
 80067d2:	e6f9      	b.n	80065c8 <_printf_float+0xbc>
 80067d4:	2300      	movs	r3, #0
 80067d6:	930a      	str	r3, [sp, #40]	; 0x28
 80067d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80067da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067dc:	425b      	negs	r3, r3
 80067de:	4293      	cmp	r3, r2
 80067e0:	dc01      	bgt.n	80067e6 <_printf_float+0x2da>
 80067e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80067e4:	e797      	b.n	8006716 <_printf_float+0x20a>
 80067e6:	0022      	movs	r2, r4
 80067e8:	2301      	movs	r3, #1
 80067ea:	0038      	movs	r0, r7
 80067ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067ee:	321a      	adds	r2, #26
 80067f0:	47b0      	blx	r6
 80067f2:	1c43      	adds	r3, r0, #1
 80067f4:	d100      	bne.n	80067f8 <_printf_float+0x2ec>
 80067f6:	e6e7      	b.n	80065c8 <_printf_float+0xbc>
 80067f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067fa:	3301      	adds	r3, #1
 80067fc:	e7eb      	b.n	80067d6 <_printf_float+0x2ca>
 80067fe:	46c0      	nop			; (mov r8, r8)
 8006800:	7fefffff 	.word	0x7fefffff
 8006804:	0800b958 	.word	0x0800b958
 8006808:	0800b95c 	.word	0x0800b95c
 800680c:	0800b960 	.word	0x0800b960
 8006810:	0800b964 	.word	0x0800b964
 8006814:	0800b3d6 	.word	0x0800b3d6
 8006818:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800681a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800681c:	920a      	str	r2, [sp, #40]	; 0x28
 800681e:	429a      	cmp	r2, r3
 8006820:	dd00      	ble.n	8006824 <_printf_float+0x318>
 8006822:	930a      	str	r3, [sp, #40]	; 0x28
 8006824:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006826:	2b00      	cmp	r3, #0
 8006828:	dc3c      	bgt.n	80068a4 <_printf_float+0x398>
 800682a:	2300      	movs	r3, #0
 800682c:	930d      	str	r3, [sp, #52]	; 0x34
 800682e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006830:	43db      	mvns	r3, r3
 8006832:	17db      	asrs	r3, r3, #31
 8006834:	930f      	str	r3, [sp, #60]	; 0x3c
 8006836:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006838:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800683a:	930b      	str	r3, [sp, #44]	; 0x2c
 800683c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800683e:	4013      	ands	r3, r2
 8006840:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006846:	4293      	cmp	r3, r2
 8006848:	dc34      	bgt.n	80068b4 <_printf_float+0x3a8>
 800684a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800684c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800684e:	4293      	cmp	r3, r2
 8006850:	db3d      	blt.n	80068ce <_printf_float+0x3c2>
 8006852:	6823      	ldr	r3, [r4, #0]
 8006854:	07db      	lsls	r3, r3, #31
 8006856:	d43a      	bmi.n	80068ce <_printf_float+0x3c2>
 8006858:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800685a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800685c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800685e:	1ad3      	subs	r3, r2, r3
 8006860:	1a52      	subs	r2, r2, r1
 8006862:	920a      	str	r2, [sp, #40]	; 0x28
 8006864:	429a      	cmp	r2, r3
 8006866:	dd00      	ble.n	800686a <_printf_float+0x35e>
 8006868:	930a      	str	r3, [sp, #40]	; 0x28
 800686a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800686c:	2b00      	cmp	r3, #0
 800686e:	dc36      	bgt.n	80068de <_printf_float+0x3d2>
 8006870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006872:	2500      	movs	r5, #0
 8006874:	43db      	mvns	r3, r3
 8006876:	17db      	asrs	r3, r3, #31
 8006878:	930b      	str	r3, [sp, #44]	; 0x2c
 800687a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800687c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800687e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006880:	1a9b      	subs	r3, r3, r2
 8006882:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006884:	400a      	ands	r2, r1
 8006886:	1a9b      	subs	r3, r3, r2
 8006888:	42ab      	cmp	r3, r5
 800688a:	dc00      	bgt.n	800688e <_printf_float+0x382>
 800688c:	e772      	b.n	8006774 <_printf_float+0x268>
 800688e:	0022      	movs	r2, r4
 8006890:	2301      	movs	r3, #1
 8006892:	0038      	movs	r0, r7
 8006894:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006896:	321a      	adds	r2, #26
 8006898:	47b0      	blx	r6
 800689a:	1c43      	adds	r3, r0, #1
 800689c:	d100      	bne.n	80068a0 <_printf_float+0x394>
 800689e:	e693      	b.n	80065c8 <_printf_float+0xbc>
 80068a0:	3501      	adds	r5, #1
 80068a2:	e7ea      	b.n	800687a <_printf_float+0x36e>
 80068a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068a6:	002a      	movs	r2, r5
 80068a8:	0038      	movs	r0, r7
 80068aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068ac:	47b0      	blx	r6
 80068ae:	1c43      	adds	r3, r0, #1
 80068b0:	d1bb      	bne.n	800682a <_printf_float+0x31e>
 80068b2:	e689      	b.n	80065c8 <_printf_float+0xbc>
 80068b4:	0022      	movs	r2, r4
 80068b6:	2301      	movs	r3, #1
 80068b8:	0038      	movs	r0, r7
 80068ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068bc:	321a      	adds	r2, #26
 80068be:	47b0      	blx	r6
 80068c0:	1c43      	adds	r3, r0, #1
 80068c2:	d100      	bne.n	80068c6 <_printf_float+0x3ba>
 80068c4:	e680      	b.n	80065c8 <_printf_float+0xbc>
 80068c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068c8:	3301      	adds	r3, #1
 80068ca:	930d      	str	r3, [sp, #52]	; 0x34
 80068cc:	e7b3      	b.n	8006836 <_printf_float+0x32a>
 80068ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068d0:	0038      	movs	r0, r7
 80068d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80068d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068d6:	47b0      	blx	r6
 80068d8:	1c43      	adds	r3, r0, #1
 80068da:	d1bd      	bne.n	8006858 <_printf_float+0x34c>
 80068dc:	e674      	b.n	80065c8 <_printf_float+0xbc>
 80068de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068e0:	0038      	movs	r0, r7
 80068e2:	18ea      	adds	r2, r5, r3
 80068e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068e8:	47b0      	blx	r6
 80068ea:	1c43      	adds	r3, r0, #1
 80068ec:	d1c0      	bne.n	8006870 <_printf_float+0x364>
 80068ee:	e66b      	b.n	80065c8 <_printf_float+0xbc>
 80068f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	dc02      	bgt.n	80068fc <_printf_float+0x3f0>
 80068f6:	2301      	movs	r3, #1
 80068f8:	421a      	tst	r2, r3
 80068fa:	d034      	beq.n	8006966 <_printf_float+0x45a>
 80068fc:	2301      	movs	r3, #1
 80068fe:	002a      	movs	r2, r5
 8006900:	0038      	movs	r0, r7
 8006902:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006904:	47b0      	blx	r6
 8006906:	1c43      	adds	r3, r0, #1
 8006908:	d100      	bne.n	800690c <_printf_float+0x400>
 800690a:	e65d      	b.n	80065c8 <_printf_float+0xbc>
 800690c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800690e:	0038      	movs	r0, r7
 8006910:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006912:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006914:	47b0      	blx	r6
 8006916:	1c43      	adds	r3, r0, #1
 8006918:	d100      	bne.n	800691c <_printf_float+0x410>
 800691a:	e655      	b.n	80065c8 <_printf_float+0xbc>
 800691c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800691e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006920:	2200      	movs	r2, #0
 8006922:	2300      	movs	r3, #0
 8006924:	f7f9 fd9e 	bl	8000464 <__aeabi_dcmpeq>
 8006928:	2800      	cmp	r0, #0
 800692a:	d11a      	bne.n	8006962 <_printf_float+0x456>
 800692c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800692e:	1c6a      	adds	r2, r5, #1
 8006930:	3b01      	subs	r3, #1
 8006932:	0038      	movs	r0, r7
 8006934:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006936:	47b0      	blx	r6
 8006938:	1c43      	adds	r3, r0, #1
 800693a:	d10e      	bne.n	800695a <_printf_float+0x44e>
 800693c:	e644      	b.n	80065c8 <_printf_float+0xbc>
 800693e:	0022      	movs	r2, r4
 8006940:	2301      	movs	r3, #1
 8006942:	0038      	movs	r0, r7
 8006944:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006946:	321a      	adds	r2, #26
 8006948:	47b0      	blx	r6
 800694a:	1c43      	adds	r3, r0, #1
 800694c:	d100      	bne.n	8006950 <_printf_float+0x444>
 800694e:	e63b      	b.n	80065c8 <_printf_float+0xbc>
 8006950:	3501      	adds	r5, #1
 8006952:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006954:	3b01      	subs	r3, #1
 8006956:	42ab      	cmp	r3, r5
 8006958:	dcf1      	bgt.n	800693e <_printf_float+0x432>
 800695a:	0022      	movs	r2, r4
 800695c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800695e:	3250      	adds	r2, #80	; 0x50
 8006960:	e6da      	b.n	8006718 <_printf_float+0x20c>
 8006962:	2500      	movs	r5, #0
 8006964:	e7f5      	b.n	8006952 <_printf_float+0x446>
 8006966:	002a      	movs	r2, r5
 8006968:	e7e3      	b.n	8006932 <_printf_float+0x426>
 800696a:	0022      	movs	r2, r4
 800696c:	2301      	movs	r3, #1
 800696e:	0038      	movs	r0, r7
 8006970:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006972:	3219      	adds	r2, #25
 8006974:	47b0      	blx	r6
 8006976:	1c43      	adds	r3, r0, #1
 8006978:	d100      	bne.n	800697c <_printf_float+0x470>
 800697a:	e625      	b.n	80065c8 <_printf_float+0xbc>
 800697c:	3501      	adds	r5, #1
 800697e:	68e3      	ldr	r3, [r4, #12]
 8006980:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006982:	1a9b      	subs	r3, r3, r2
 8006984:	42ab      	cmp	r3, r5
 8006986:	dcf0      	bgt.n	800696a <_printf_float+0x45e>
 8006988:	e6f8      	b.n	800677c <_printf_float+0x270>
 800698a:	2500      	movs	r5, #0
 800698c:	e7f7      	b.n	800697e <_printf_float+0x472>
 800698e:	46c0      	nop			; (mov r8, r8)

08006990 <_printf_common>:
 8006990:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006992:	0015      	movs	r5, r2
 8006994:	9301      	str	r3, [sp, #4]
 8006996:	688a      	ldr	r2, [r1, #8]
 8006998:	690b      	ldr	r3, [r1, #16]
 800699a:	000c      	movs	r4, r1
 800699c:	9000      	str	r0, [sp, #0]
 800699e:	4293      	cmp	r3, r2
 80069a0:	da00      	bge.n	80069a4 <_printf_common+0x14>
 80069a2:	0013      	movs	r3, r2
 80069a4:	0022      	movs	r2, r4
 80069a6:	602b      	str	r3, [r5, #0]
 80069a8:	3243      	adds	r2, #67	; 0x43
 80069aa:	7812      	ldrb	r2, [r2, #0]
 80069ac:	2a00      	cmp	r2, #0
 80069ae:	d001      	beq.n	80069b4 <_printf_common+0x24>
 80069b0:	3301      	adds	r3, #1
 80069b2:	602b      	str	r3, [r5, #0]
 80069b4:	6823      	ldr	r3, [r4, #0]
 80069b6:	069b      	lsls	r3, r3, #26
 80069b8:	d502      	bpl.n	80069c0 <_printf_common+0x30>
 80069ba:	682b      	ldr	r3, [r5, #0]
 80069bc:	3302      	adds	r3, #2
 80069be:	602b      	str	r3, [r5, #0]
 80069c0:	6822      	ldr	r2, [r4, #0]
 80069c2:	2306      	movs	r3, #6
 80069c4:	0017      	movs	r7, r2
 80069c6:	401f      	ands	r7, r3
 80069c8:	421a      	tst	r2, r3
 80069ca:	d027      	beq.n	8006a1c <_printf_common+0x8c>
 80069cc:	0023      	movs	r3, r4
 80069ce:	3343      	adds	r3, #67	; 0x43
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	1e5a      	subs	r2, r3, #1
 80069d4:	4193      	sbcs	r3, r2
 80069d6:	6822      	ldr	r2, [r4, #0]
 80069d8:	0692      	lsls	r2, r2, #26
 80069da:	d430      	bmi.n	8006a3e <_printf_common+0xae>
 80069dc:	0022      	movs	r2, r4
 80069de:	9901      	ldr	r1, [sp, #4]
 80069e0:	9800      	ldr	r0, [sp, #0]
 80069e2:	9e08      	ldr	r6, [sp, #32]
 80069e4:	3243      	adds	r2, #67	; 0x43
 80069e6:	47b0      	blx	r6
 80069e8:	1c43      	adds	r3, r0, #1
 80069ea:	d025      	beq.n	8006a38 <_printf_common+0xa8>
 80069ec:	2306      	movs	r3, #6
 80069ee:	6820      	ldr	r0, [r4, #0]
 80069f0:	682a      	ldr	r2, [r5, #0]
 80069f2:	68e1      	ldr	r1, [r4, #12]
 80069f4:	2500      	movs	r5, #0
 80069f6:	4003      	ands	r3, r0
 80069f8:	2b04      	cmp	r3, #4
 80069fa:	d103      	bne.n	8006a04 <_printf_common+0x74>
 80069fc:	1a8d      	subs	r5, r1, r2
 80069fe:	43eb      	mvns	r3, r5
 8006a00:	17db      	asrs	r3, r3, #31
 8006a02:	401d      	ands	r5, r3
 8006a04:	68a3      	ldr	r3, [r4, #8]
 8006a06:	6922      	ldr	r2, [r4, #16]
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	dd01      	ble.n	8006a10 <_printf_common+0x80>
 8006a0c:	1a9b      	subs	r3, r3, r2
 8006a0e:	18ed      	adds	r5, r5, r3
 8006a10:	2700      	movs	r7, #0
 8006a12:	42bd      	cmp	r5, r7
 8006a14:	d120      	bne.n	8006a58 <_printf_common+0xc8>
 8006a16:	2000      	movs	r0, #0
 8006a18:	e010      	b.n	8006a3c <_printf_common+0xac>
 8006a1a:	3701      	adds	r7, #1
 8006a1c:	68e3      	ldr	r3, [r4, #12]
 8006a1e:	682a      	ldr	r2, [r5, #0]
 8006a20:	1a9b      	subs	r3, r3, r2
 8006a22:	42bb      	cmp	r3, r7
 8006a24:	ddd2      	ble.n	80069cc <_printf_common+0x3c>
 8006a26:	0022      	movs	r2, r4
 8006a28:	2301      	movs	r3, #1
 8006a2a:	9901      	ldr	r1, [sp, #4]
 8006a2c:	9800      	ldr	r0, [sp, #0]
 8006a2e:	9e08      	ldr	r6, [sp, #32]
 8006a30:	3219      	adds	r2, #25
 8006a32:	47b0      	blx	r6
 8006a34:	1c43      	adds	r3, r0, #1
 8006a36:	d1f0      	bne.n	8006a1a <_printf_common+0x8a>
 8006a38:	2001      	movs	r0, #1
 8006a3a:	4240      	negs	r0, r0
 8006a3c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006a3e:	2030      	movs	r0, #48	; 0x30
 8006a40:	18e1      	adds	r1, r4, r3
 8006a42:	3143      	adds	r1, #67	; 0x43
 8006a44:	7008      	strb	r0, [r1, #0]
 8006a46:	0021      	movs	r1, r4
 8006a48:	1c5a      	adds	r2, r3, #1
 8006a4a:	3145      	adds	r1, #69	; 0x45
 8006a4c:	7809      	ldrb	r1, [r1, #0]
 8006a4e:	18a2      	adds	r2, r4, r2
 8006a50:	3243      	adds	r2, #67	; 0x43
 8006a52:	3302      	adds	r3, #2
 8006a54:	7011      	strb	r1, [r2, #0]
 8006a56:	e7c1      	b.n	80069dc <_printf_common+0x4c>
 8006a58:	0022      	movs	r2, r4
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	9901      	ldr	r1, [sp, #4]
 8006a5e:	9800      	ldr	r0, [sp, #0]
 8006a60:	9e08      	ldr	r6, [sp, #32]
 8006a62:	321a      	adds	r2, #26
 8006a64:	47b0      	blx	r6
 8006a66:	1c43      	adds	r3, r0, #1
 8006a68:	d0e6      	beq.n	8006a38 <_printf_common+0xa8>
 8006a6a:	3701      	adds	r7, #1
 8006a6c:	e7d1      	b.n	8006a12 <_printf_common+0x82>
	...

08006a70 <_printf_i>:
 8006a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a72:	b08b      	sub	sp, #44	; 0x2c
 8006a74:	9206      	str	r2, [sp, #24]
 8006a76:	000a      	movs	r2, r1
 8006a78:	3243      	adds	r2, #67	; 0x43
 8006a7a:	9307      	str	r3, [sp, #28]
 8006a7c:	9005      	str	r0, [sp, #20]
 8006a7e:	9204      	str	r2, [sp, #16]
 8006a80:	7e0a      	ldrb	r2, [r1, #24]
 8006a82:	000c      	movs	r4, r1
 8006a84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006a86:	2a78      	cmp	r2, #120	; 0x78
 8006a88:	d807      	bhi.n	8006a9a <_printf_i+0x2a>
 8006a8a:	2a62      	cmp	r2, #98	; 0x62
 8006a8c:	d809      	bhi.n	8006aa2 <_printf_i+0x32>
 8006a8e:	2a00      	cmp	r2, #0
 8006a90:	d100      	bne.n	8006a94 <_printf_i+0x24>
 8006a92:	e0c1      	b.n	8006c18 <_printf_i+0x1a8>
 8006a94:	2a58      	cmp	r2, #88	; 0x58
 8006a96:	d100      	bne.n	8006a9a <_printf_i+0x2a>
 8006a98:	e08c      	b.n	8006bb4 <_printf_i+0x144>
 8006a9a:	0026      	movs	r6, r4
 8006a9c:	3642      	adds	r6, #66	; 0x42
 8006a9e:	7032      	strb	r2, [r6, #0]
 8006aa0:	e022      	b.n	8006ae8 <_printf_i+0x78>
 8006aa2:	0010      	movs	r0, r2
 8006aa4:	3863      	subs	r0, #99	; 0x63
 8006aa6:	2815      	cmp	r0, #21
 8006aa8:	d8f7      	bhi.n	8006a9a <_printf_i+0x2a>
 8006aaa:	f7f9 fb3f 	bl	800012c <__gnu_thumb1_case_shi>
 8006aae:	0016      	.short	0x0016
 8006ab0:	fff6001f 	.word	0xfff6001f
 8006ab4:	fff6fff6 	.word	0xfff6fff6
 8006ab8:	001ffff6 	.word	0x001ffff6
 8006abc:	fff6fff6 	.word	0xfff6fff6
 8006ac0:	fff6fff6 	.word	0xfff6fff6
 8006ac4:	003600a8 	.word	0x003600a8
 8006ac8:	fff6009a 	.word	0xfff6009a
 8006acc:	00b9fff6 	.word	0x00b9fff6
 8006ad0:	0036fff6 	.word	0x0036fff6
 8006ad4:	fff6fff6 	.word	0xfff6fff6
 8006ad8:	009e      	.short	0x009e
 8006ada:	0026      	movs	r6, r4
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	3642      	adds	r6, #66	; 0x42
 8006ae0:	1d11      	adds	r1, r2, #4
 8006ae2:	6019      	str	r1, [r3, #0]
 8006ae4:	6813      	ldr	r3, [r2, #0]
 8006ae6:	7033      	strb	r3, [r6, #0]
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e0a7      	b.n	8006c3c <_printf_i+0x1cc>
 8006aec:	6808      	ldr	r0, [r1, #0]
 8006aee:	6819      	ldr	r1, [r3, #0]
 8006af0:	1d0a      	adds	r2, r1, #4
 8006af2:	0605      	lsls	r5, r0, #24
 8006af4:	d50b      	bpl.n	8006b0e <_printf_i+0x9e>
 8006af6:	680d      	ldr	r5, [r1, #0]
 8006af8:	601a      	str	r2, [r3, #0]
 8006afa:	2d00      	cmp	r5, #0
 8006afc:	da03      	bge.n	8006b06 <_printf_i+0x96>
 8006afe:	232d      	movs	r3, #45	; 0x2d
 8006b00:	9a04      	ldr	r2, [sp, #16]
 8006b02:	426d      	negs	r5, r5
 8006b04:	7013      	strb	r3, [r2, #0]
 8006b06:	4b61      	ldr	r3, [pc, #388]	; (8006c8c <_printf_i+0x21c>)
 8006b08:	270a      	movs	r7, #10
 8006b0a:	9303      	str	r3, [sp, #12]
 8006b0c:	e01b      	b.n	8006b46 <_printf_i+0xd6>
 8006b0e:	680d      	ldr	r5, [r1, #0]
 8006b10:	601a      	str	r2, [r3, #0]
 8006b12:	0641      	lsls	r1, r0, #25
 8006b14:	d5f1      	bpl.n	8006afa <_printf_i+0x8a>
 8006b16:	b22d      	sxth	r5, r5
 8006b18:	e7ef      	b.n	8006afa <_printf_i+0x8a>
 8006b1a:	680d      	ldr	r5, [r1, #0]
 8006b1c:	6819      	ldr	r1, [r3, #0]
 8006b1e:	1d08      	adds	r0, r1, #4
 8006b20:	6018      	str	r0, [r3, #0]
 8006b22:	062e      	lsls	r6, r5, #24
 8006b24:	d501      	bpl.n	8006b2a <_printf_i+0xba>
 8006b26:	680d      	ldr	r5, [r1, #0]
 8006b28:	e003      	b.n	8006b32 <_printf_i+0xc2>
 8006b2a:	066d      	lsls	r5, r5, #25
 8006b2c:	d5fb      	bpl.n	8006b26 <_printf_i+0xb6>
 8006b2e:	680d      	ldr	r5, [r1, #0]
 8006b30:	b2ad      	uxth	r5, r5
 8006b32:	4b56      	ldr	r3, [pc, #344]	; (8006c8c <_printf_i+0x21c>)
 8006b34:	2708      	movs	r7, #8
 8006b36:	9303      	str	r3, [sp, #12]
 8006b38:	2a6f      	cmp	r2, #111	; 0x6f
 8006b3a:	d000      	beq.n	8006b3e <_printf_i+0xce>
 8006b3c:	3702      	adds	r7, #2
 8006b3e:	0023      	movs	r3, r4
 8006b40:	2200      	movs	r2, #0
 8006b42:	3343      	adds	r3, #67	; 0x43
 8006b44:	701a      	strb	r2, [r3, #0]
 8006b46:	6863      	ldr	r3, [r4, #4]
 8006b48:	60a3      	str	r3, [r4, #8]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	db03      	blt.n	8006b56 <_printf_i+0xe6>
 8006b4e:	2204      	movs	r2, #4
 8006b50:	6821      	ldr	r1, [r4, #0]
 8006b52:	4391      	bics	r1, r2
 8006b54:	6021      	str	r1, [r4, #0]
 8006b56:	2d00      	cmp	r5, #0
 8006b58:	d102      	bne.n	8006b60 <_printf_i+0xf0>
 8006b5a:	9e04      	ldr	r6, [sp, #16]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00c      	beq.n	8006b7a <_printf_i+0x10a>
 8006b60:	9e04      	ldr	r6, [sp, #16]
 8006b62:	0028      	movs	r0, r5
 8006b64:	0039      	movs	r1, r7
 8006b66:	f7f9 fb71 	bl	800024c <__aeabi_uidivmod>
 8006b6a:	9b03      	ldr	r3, [sp, #12]
 8006b6c:	3e01      	subs	r6, #1
 8006b6e:	5c5b      	ldrb	r3, [r3, r1]
 8006b70:	7033      	strb	r3, [r6, #0]
 8006b72:	002b      	movs	r3, r5
 8006b74:	0005      	movs	r5, r0
 8006b76:	429f      	cmp	r7, r3
 8006b78:	d9f3      	bls.n	8006b62 <_printf_i+0xf2>
 8006b7a:	2f08      	cmp	r7, #8
 8006b7c:	d109      	bne.n	8006b92 <_printf_i+0x122>
 8006b7e:	6823      	ldr	r3, [r4, #0]
 8006b80:	07db      	lsls	r3, r3, #31
 8006b82:	d506      	bpl.n	8006b92 <_printf_i+0x122>
 8006b84:	6863      	ldr	r3, [r4, #4]
 8006b86:	6922      	ldr	r2, [r4, #16]
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	dc02      	bgt.n	8006b92 <_printf_i+0x122>
 8006b8c:	2330      	movs	r3, #48	; 0x30
 8006b8e:	3e01      	subs	r6, #1
 8006b90:	7033      	strb	r3, [r6, #0]
 8006b92:	9b04      	ldr	r3, [sp, #16]
 8006b94:	1b9b      	subs	r3, r3, r6
 8006b96:	6123      	str	r3, [r4, #16]
 8006b98:	9b07      	ldr	r3, [sp, #28]
 8006b9a:	0021      	movs	r1, r4
 8006b9c:	9300      	str	r3, [sp, #0]
 8006b9e:	9805      	ldr	r0, [sp, #20]
 8006ba0:	9b06      	ldr	r3, [sp, #24]
 8006ba2:	aa09      	add	r2, sp, #36	; 0x24
 8006ba4:	f7ff fef4 	bl	8006990 <_printf_common>
 8006ba8:	1c43      	adds	r3, r0, #1
 8006baa:	d14c      	bne.n	8006c46 <_printf_i+0x1d6>
 8006bac:	2001      	movs	r0, #1
 8006bae:	4240      	negs	r0, r0
 8006bb0:	b00b      	add	sp, #44	; 0x2c
 8006bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bb4:	3145      	adds	r1, #69	; 0x45
 8006bb6:	700a      	strb	r2, [r1, #0]
 8006bb8:	4a34      	ldr	r2, [pc, #208]	; (8006c8c <_printf_i+0x21c>)
 8006bba:	9203      	str	r2, [sp, #12]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	6821      	ldr	r1, [r4, #0]
 8006bc0:	ca20      	ldmia	r2!, {r5}
 8006bc2:	601a      	str	r2, [r3, #0]
 8006bc4:	0608      	lsls	r0, r1, #24
 8006bc6:	d516      	bpl.n	8006bf6 <_printf_i+0x186>
 8006bc8:	07cb      	lsls	r3, r1, #31
 8006bca:	d502      	bpl.n	8006bd2 <_printf_i+0x162>
 8006bcc:	2320      	movs	r3, #32
 8006bce:	4319      	orrs	r1, r3
 8006bd0:	6021      	str	r1, [r4, #0]
 8006bd2:	2710      	movs	r7, #16
 8006bd4:	2d00      	cmp	r5, #0
 8006bd6:	d1b2      	bne.n	8006b3e <_printf_i+0xce>
 8006bd8:	2320      	movs	r3, #32
 8006bda:	6822      	ldr	r2, [r4, #0]
 8006bdc:	439a      	bics	r2, r3
 8006bde:	6022      	str	r2, [r4, #0]
 8006be0:	e7ad      	b.n	8006b3e <_printf_i+0xce>
 8006be2:	2220      	movs	r2, #32
 8006be4:	6809      	ldr	r1, [r1, #0]
 8006be6:	430a      	orrs	r2, r1
 8006be8:	6022      	str	r2, [r4, #0]
 8006bea:	0022      	movs	r2, r4
 8006bec:	2178      	movs	r1, #120	; 0x78
 8006bee:	3245      	adds	r2, #69	; 0x45
 8006bf0:	7011      	strb	r1, [r2, #0]
 8006bf2:	4a27      	ldr	r2, [pc, #156]	; (8006c90 <_printf_i+0x220>)
 8006bf4:	e7e1      	b.n	8006bba <_printf_i+0x14a>
 8006bf6:	0648      	lsls	r0, r1, #25
 8006bf8:	d5e6      	bpl.n	8006bc8 <_printf_i+0x158>
 8006bfa:	b2ad      	uxth	r5, r5
 8006bfc:	e7e4      	b.n	8006bc8 <_printf_i+0x158>
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	680d      	ldr	r5, [r1, #0]
 8006c02:	1d10      	adds	r0, r2, #4
 8006c04:	6949      	ldr	r1, [r1, #20]
 8006c06:	6018      	str	r0, [r3, #0]
 8006c08:	6813      	ldr	r3, [r2, #0]
 8006c0a:	062e      	lsls	r6, r5, #24
 8006c0c:	d501      	bpl.n	8006c12 <_printf_i+0x1a2>
 8006c0e:	6019      	str	r1, [r3, #0]
 8006c10:	e002      	b.n	8006c18 <_printf_i+0x1a8>
 8006c12:	066d      	lsls	r5, r5, #25
 8006c14:	d5fb      	bpl.n	8006c0e <_printf_i+0x19e>
 8006c16:	8019      	strh	r1, [r3, #0]
 8006c18:	2300      	movs	r3, #0
 8006c1a:	9e04      	ldr	r6, [sp, #16]
 8006c1c:	6123      	str	r3, [r4, #16]
 8006c1e:	e7bb      	b.n	8006b98 <_printf_i+0x128>
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	1d11      	adds	r1, r2, #4
 8006c24:	6019      	str	r1, [r3, #0]
 8006c26:	6816      	ldr	r6, [r2, #0]
 8006c28:	2100      	movs	r1, #0
 8006c2a:	0030      	movs	r0, r6
 8006c2c:	6862      	ldr	r2, [r4, #4]
 8006c2e:	f000 ff05 	bl	8007a3c <memchr>
 8006c32:	2800      	cmp	r0, #0
 8006c34:	d001      	beq.n	8006c3a <_printf_i+0x1ca>
 8006c36:	1b80      	subs	r0, r0, r6
 8006c38:	6060      	str	r0, [r4, #4]
 8006c3a:	6863      	ldr	r3, [r4, #4]
 8006c3c:	6123      	str	r3, [r4, #16]
 8006c3e:	2300      	movs	r3, #0
 8006c40:	9a04      	ldr	r2, [sp, #16]
 8006c42:	7013      	strb	r3, [r2, #0]
 8006c44:	e7a8      	b.n	8006b98 <_printf_i+0x128>
 8006c46:	6923      	ldr	r3, [r4, #16]
 8006c48:	0032      	movs	r2, r6
 8006c4a:	9906      	ldr	r1, [sp, #24]
 8006c4c:	9805      	ldr	r0, [sp, #20]
 8006c4e:	9d07      	ldr	r5, [sp, #28]
 8006c50:	47a8      	blx	r5
 8006c52:	1c43      	adds	r3, r0, #1
 8006c54:	d0aa      	beq.n	8006bac <_printf_i+0x13c>
 8006c56:	6823      	ldr	r3, [r4, #0]
 8006c58:	079b      	lsls	r3, r3, #30
 8006c5a:	d415      	bmi.n	8006c88 <_printf_i+0x218>
 8006c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c5e:	68e0      	ldr	r0, [r4, #12]
 8006c60:	4298      	cmp	r0, r3
 8006c62:	daa5      	bge.n	8006bb0 <_printf_i+0x140>
 8006c64:	0018      	movs	r0, r3
 8006c66:	e7a3      	b.n	8006bb0 <_printf_i+0x140>
 8006c68:	0022      	movs	r2, r4
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	9906      	ldr	r1, [sp, #24]
 8006c6e:	9805      	ldr	r0, [sp, #20]
 8006c70:	9e07      	ldr	r6, [sp, #28]
 8006c72:	3219      	adds	r2, #25
 8006c74:	47b0      	blx	r6
 8006c76:	1c43      	adds	r3, r0, #1
 8006c78:	d098      	beq.n	8006bac <_printf_i+0x13c>
 8006c7a:	3501      	adds	r5, #1
 8006c7c:	68e3      	ldr	r3, [r4, #12]
 8006c7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c80:	1a9b      	subs	r3, r3, r2
 8006c82:	42ab      	cmp	r3, r5
 8006c84:	dcf0      	bgt.n	8006c68 <_printf_i+0x1f8>
 8006c86:	e7e9      	b.n	8006c5c <_printf_i+0x1ec>
 8006c88:	2500      	movs	r5, #0
 8006c8a:	e7f7      	b.n	8006c7c <_printf_i+0x20c>
 8006c8c:	0800b968 	.word	0x0800b968
 8006c90:	0800b979 	.word	0x0800b979

08006c94 <siprintf>:
 8006c94:	b40e      	push	{r1, r2, r3}
 8006c96:	b500      	push	{lr}
 8006c98:	490b      	ldr	r1, [pc, #44]	; (8006cc8 <siprintf+0x34>)
 8006c9a:	b09c      	sub	sp, #112	; 0x70
 8006c9c:	ab1d      	add	r3, sp, #116	; 0x74
 8006c9e:	9002      	str	r0, [sp, #8]
 8006ca0:	9006      	str	r0, [sp, #24]
 8006ca2:	9107      	str	r1, [sp, #28]
 8006ca4:	9104      	str	r1, [sp, #16]
 8006ca6:	4809      	ldr	r0, [pc, #36]	; (8006ccc <siprintf+0x38>)
 8006ca8:	4909      	ldr	r1, [pc, #36]	; (8006cd0 <siprintf+0x3c>)
 8006caa:	cb04      	ldmia	r3!, {r2}
 8006cac:	9105      	str	r1, [sp, #20]
 8006cae:	6800      	ldr	r0, [r0, #0]
 8006cb0:	a902      	add	r1, sp, #8
 8006cb2:	9301      	str	r3, [sp, #4]
 8006cb4:	f001 fbda 	bl	800846c <_svfiprintf_r>
 8006cb8:	2300      	movs	r3, #0
 8006cba:	9a02      	ldr	r2, [sp, #8]
 8006cbc:	7013      	strb	r3, [r2, #0]
 8006cbe:	b01c      	add	sp, #112	; 0x70
 8006cc0:	bc08      	pop	{r3}
 8006cc2:	b003      	add	sp, #12
 8006cc4:	4718      	bx	r3
 8006cc6:	46c0      	nop			; (mov r8, r8)
 8006cc8:	7fffffff 	.word	0x7fffffff
 8006ccc:	20000024 	.word	0x20000024
 8006cd0:	ffff0208 	.word	0xffff0208

08006cd4 <quorem>:
 8006cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cd6:	0006      	movs	r6, r0
 8006cd8:	690b      	ldr	r3, [r1, #16]
 8006cda:	6932      	ldr	r2, [r6, #16]
 8006cdc:	b087      	sub	sp, #28
 8006cde:	2000      	movs	r0, #0
 8006ce0:	9103      	str	r1, [sp, #12]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	db65      	blt.n	8006db2 <quorem+0xde>
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	009c      	lsls	r4, r3, #2
 8006cea:	9300      	str	r3, [sp, #0]
 8006cec:	000b      	movs	r3, r1
 8006cee:	3314      	adds	r3, #20
 8006cf0:	9305      	str	r3, [sp, #20]
 8006cf2:	191b      	adds	r3, r3, r4
 8006cf4:	9304      	str	r3, [sp, #16]
 8006cf6:	0033      	movs	r3, r6
 8006cf8:	3314      	adds	r3, #20
 8006cfa:	9302      	str	r3, [sp, #8]
 8006cfc:	191c      	adds	r4, r3, r4
 8006cfe:	9b04      	ldr	r3, [sp, #16]
 8006d00:	6827      	ldr	r7, [r4, #0]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	0038      	movs	r0, r7
 8006d06:	1c5d      	adds	r5, r3, #1
 8006d08:	0029      	movs	r1, r5
 8006d0a:	9301      	str	r3, [sp, #4]
 8006d0c:	f7f9 fa18 	bl	8000140 <__udivsi3>
 8006d10:	9001      	str	r0, [sp, #4]
 8006d12:	42af      	cmp	r7, r5
 8006d14:	d324      	bcc.n	8006d60 <quorem+0x8c>
 8006d16:	2500      	movs	r5, #0
 8006d18:	46ac      	mov	ip, r5
 8006d1a:	9802      	ldr	r0, [sp, #8]
 8006d1c:	9f05      	ldr	r7, [sp, #20]
 8006d1e:	cf08      	ldmia	r7!, {r3}
 8006d20:	9a01      	ldr	r2, [sp, #4]
 8006d22:	b299      	uxth	r1, r3
 8006d24:	4351      	muls	r1, r2
 8006d26:	0c1b      	lsrs	r3, r3, #16
 8006d28:	4353      	muls	r3, r2
 8006d2a:	1949      	adds	r1, r1, r5
 8006d2c:	0c0a      	lsrs	r2, r1, #16
 8006d2e:	189b      	adds	r3, r3, r2
 8006d30:	6802      	ldr	r2, [r0, #0]
 8006d32:	b289      	uxth	r1, r1
 8006d34:	b292      	uxth	r2, r2
 8006d36:	4462      	add	r2, ip
 8006d38:	1a52      	subs	r2, r2, r1
 8006d3a:	6801      	ldr	r1, [r0, #0]
 8006d3c:	0c1d      	lsrs	r5, r3, #16
 8006d3e:	0c09      	lsrs	r1, r1, #16
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	1acb      	subs	r3, r1, r3
 8006d44:	1411      	asrs	r1, r2, #16
 8006d46:	185b      	adds	r3, r3, r1
 8006d48:	1419      	asrs	r1, r3, #16
 8006d4a:	b292      	uxth	r2, r2
 8006d4c:	041b      	lsls	r3, r3, #16
 8006d4e:	431a      	orrs	r2, r3
 8006d50:	9b04      	ldr	r3, [sp, #16]
 8006d52:	468c      	mov	ip, r1
 8006d54:	c004      	stmia	r0!, {r2}
 8006d56:	42bb      	cmp	r3, r7
 8006d58:	d2e1      	bcs.n	8006d1e <quorem+0x4a>
 8006d5a:	6823      	ldr	r3, [r4, #0]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d030      	beq.n	8006dc2 <quorem+0xee>
 8006d60:	0030      	movs	r0, r6
 8006d62:	9903      	ldr	r1, [sp, #12]
 8006d64:	f001 f8fa 	bl	8007f5c <__mcmp>
 8006d68:	2800      	cmp	r0, #0
 8006d6a:	db21      	blt.n	8006db0 <quorem+0xdc>
 8006d6c:	0030      	movs	r0, r6
 8006d6e:	2400      	movs	r4, #0
 8006d70:	9b01      	ldr	r3, [sp, #4]
 8006d72:	9903      	ldr	r1, [sp, #12]
 8006d74:	3301      	adds	r3, #1
 8006d76:	9301      	str	r3, [sp, #4]
 8006d78:	3014      	adds	r0, #20
 8006d7a:	3114      	adds	r1, #20
 8006d7c:	6803      	ldr	r3, [r0, #0]
 8006d7e:	c920      	ldmia	r1!, {r5}
 8006d80:	b29a      	uxth	r2, r3
 8006d82:	1914      	adds	r4, r2, r4
 8006d84:	b2aa      	uxth	r2, r5
 8006d86:	1aa2      	subs	r2, r4, r2
 8006d88:	0c1b      	lsrs	r3, r3, #16
 8006d8a:	0c2d      	lsrs	r5, r5, #16
 8006d8c:	1414      	asrs	r4, r2, #16
 8006d8e:	1b5b      	subs	r3, r3, r5
 8006d90:	191b      	adds	r3, r3, r4
 8006d92:	141c      	asrs	r4, r3, #16
 8006d94:	b292      	uxth	r2, r2
 8006d96:	041b      	lsls	r3, r3, #16
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	c008      	stmia	r0!, {r3}
 8006d9c:	9b04      	ldr	r3, [sp, #16]
 8006d9e:	428b      	cmp	r3, r1
 8006da0:	d2ec      	bcs.n	8006d7c <quorem+0xa8>
 8006da2:	9b00      	ldr	r3, [sp, #0]
 8006da4:	9a02      	ldr	r2, [sp, #8]
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	18d3      	adds	r3, r2, r3
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	2a00      	cmp	r2, #0
 8006dae:	d015      	beq.n	8006ddc <quorem+0x108>
 8006db0:	9801      	ldr	r0, [sp, #4]
 8006db2:	b007      	add	sp, #28
 8006db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006db6:	6823      	ldr	r3, [r4, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d106      	bne.n	8006dca <quorem+0xf6>
 8006dbc:	9b00      	ldr	r3, [sp, #0]
 8006dbe:	3b01      	subs	r3, #1
 8006dc0:	9300      	str	r3, [sp, #0]
 8006dc2:	9b02      	ldr	r3, [sp, #8]
 8006dc4:	3c04      	subs	r4, #4
 8006dc6:	42a3      	cmp	r3, r4
 8006dc8:	d3f5      	bcc.n	8006db6 <quorem+0xe2>
 8006dca:	9b00      	ldr	r3, [sp, #0]
 8006dcc:	6133      	str	r3, [r6, #16]
 8006dce:	e7c7      	b.n	8006d60 <quorem+0x8c>
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	2a00      	cmp	r2, #0
 8006dd4:	d106      	bne.n	8006de4 <quorem+0x110>
 8006dd6:	9a00      	ldr	r2, [sp, #0]
 8006dd8:	3a01      	subs	r2, #1
 8006dda:	9200      	str	r2, [sp, #0]
 8006ddc:	9a02      	ldr	r2, [sp, #8]
 8006dde:	3b04      	subs	r3, #4
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d3f5      	bcc.n	8006dd0 <quorem+0xfc>
 8006de4:	9b00      	ldr	r3, [sp, #0]
 8006de6:	6133      	str	r3, [r6, #16]
 8006de8:	e7e2      	b.n	8006db0 <quorem+0xdc>
	...

08006dec <_dtoa_r>:
 8006dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dee:	b09d      	sub	sp, #116	; 0x74
 8006df0:	9202      	str	r2, [sp, #8]
 8006df2:	9303      	str	r3, [sp, #12]
 8006df4:	9b02      	ldr	r3, [sp, #8]
 8006df6:	9c03      	ldr	r4, [sp, #12]
 8006df8:	9308      	str	r3, [sp, #32]
 8006dfa:	9409      	str	r4, [sp, #36]	; 0x24
 8006dfc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006dfe:	0007      	movs	r7, r0
 8006e00:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8006e02:	2c00      	cmp	r4, #0
 8006e04:	d10e      	bne.n	8006e24 <_dtoa_r+0x38>
 8006e06:	2010      	movs	r0, #16
 8006e08:	f000 fe0e 	bl	8007a28 <malloc>
 8006e0c:	1e02      	subs	r2, r0, #0
 8006e0e:	6278      	str	r0, [r7, #36]	; 0x24
 8006e10:	d104      	bne.n	8006e1c <_dtoa_r+0x30>
 8006e12:	21ea      	movs	r1, #234	; 0xea
 8006e14:	4bc7      	ldr	r3, [pc, #796]	; (8007134 <_dtoa_r+0x348>)
 8006e16:	48c8      	ldr	r0, [pc, #800]	; (8007138 <_dtoa_r+0x34c>)
 8006e18:	f001 fc3a 	bl	8008690 <__assert_func>
 8006e1c:	6044      	str	r4, [r0, #4]
 8006e1e:	6084      	str	r4, [r0, #8]
 8006e20:	6004      	str	r4, [r0, #0]
 8006e22:	60c4      	str	r4, [r0, #12]
 8006e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e26:	6819      	ldr	r1, [r3, #0]
 8006e28:	2900      	cmp	r1, #0
 8006e2a:	d00a      	beq.n	8006e42 <_dtoa_r+0x56>
 8006e2c:	685a      	ldr	r2, [r3, #4]
 8006e2e:	2301      	movs	r3, #1
 8006e30:	4093      	lsls	r3, r2
 8006e32:	604a      	str	r2, [r1, #4]
 8006e34:	608b      	str	r3, [r1, #8]
 8006e36:	0038      	movs	r0, r7
 8006e38:	f000 fe50 	bl	8007adc <_Bfree>
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e40:	601a      	str	r2, [r3, #0]
 8006e42:	9b03      	ldr	r3, [sp, #12]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	da20      	bge.n	8006e8a <_dtoa_r+0x9e>
 8006e48:	2301      	movs	r3, #1
 8006e4a:	602b      	str	r3, [r5, #0]
 8006e4c:	9b03      	ldr	r3, [sp, #12]
 8006e4e:	005b      	lsls	r3, r3, #1
 8006e50:	085b      	lsrs	r3, r3, #1
 8006e52:	9309      	str	r3, [sp, #36]	; 0x24
 8006e54:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006e56:	4bb9      	ldr	r3, [pc, #740]	; (800713c <_dtoa_r+0x350>)
 8006e58:	4ab8      	ldr	r2, [pc, #736]	; (800713c <_dtoa_r+0x350>)
 8006e5a:	402b      	ands	r3, r5
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d117      	bne.n	8006e90 <_dtoa_r+0xa4>
 8006e60:	4bb7      	ldr	r3, [pc, #732]	; (8007140 <_dtoa_r+0x354>)
 8006e62:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006e64:	0328      	lsls	r0, r5, #12
 8006e66:	6013      	str	r3, [r2, #0]
 8006e68:	9b02      	ldr	r3, [sp, #8]
 8006e6a:	0b00      	lsrs	r0, r0, #12
 8006e6c:	4318      	orrs	r0, r3
 8006e6e:	d101      	bne.n	8006e74 <_dtoa_r+0x88>
 8006e70:	f000 fdbf 	bl	80079f2 <_dtoa_r+0xc06>
 8006e74:	48b3      	ldr	r0, [pc, #716]	; (8007144 <_dtoa_r+0x358>)
 8006e76:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006e78:	9006      	str	r0, [sp, #24]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d002      	beq.n	8006e84 <_dtoa_r+0x98>
 8006e7e:	4bb2      	ldr	r3, [pc, #712]	; (8007148 <_dtoa_r+0x35c>)
 8006e80:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006e82:	6013      	str	r3, [r2, #0]
 8006e84:	9806      	ldr	r0, [sp, #24]
 8006e86:	b01d      	add	sp, #116	; 0x74
 8006e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	602b      	str	r3, [r5, #0]
 8006e8e:	e7e1      	b.n	8006e54 <_dtoa_r+0x68>
 8006e90:	9b08      	ldr	r3, [sp, #32]
 8006e92:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8006e94:	9312      	str	r3, [sp, #72]	; 0x48
 8006e96:	9413      	str	r4, [sp, #76]	; 0x4c
 8006e98:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006e9a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	f7f9 fae0 	bl	8000464 <__aeabi_dcmpeq>
 8006ea4:	1e04      	subs	r4, r0, #0
 8006ea6:	d009      	beq.n	8006ebc <_dtoa_r+0xd0>
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006eac:	6013      	str	r3, [r2, #0]
 8006eae:	4ba7      	ldr	r3, [pc, #668]	; (800714c <_dtoa_r+0x360>)
 8006eb0:	9306      	str	r3, [sp, #24]
 8006eb2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d0e5      	beq.n	8006e84 <_dtoa_r+0x98>
 8006eb8:	4ba5      	ldr	r3, [pc, #660]	; (8007150 <_dtoa_r+0x364>)
 8006eba:	e7e1      	b.n	8006e80 <_dtoa_r+0x94>
 8006ebc:	ab1a      	add	r3, sp, #104	; 0x68
 8006ebe:	9301      	str	r3, [sp, #4]
 8006ec0:	ab1b      	add	r3, sp, #108	; 0x6c
 8006ec2:	9300      	str	r3, [sp, #0]
 8006ec4:	0038      	movs	r0, r7
 8006ec6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006ec8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006eca:	f001 f8fb 	bl	80080c4 <__d2b>
 8006ece:	006e      	lsls	r6, r5, #1
 8006ed0:	9005      	str	r0, [sp, #20]
 8006ed2:	0d76      	lsrs	r6, r6, #21
 8006ed4:	d100      	bne.n	8006ed8 <_dtoa_r+0xec>
 8006ed6:	e07c      	b.n	8006fd2 <_dtoa_r+0x1e6>
 8006ed8:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006eda:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006edc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006ede:	4a9d      	ldr	r2, [pc, #628]	; (8007154 <_dtoa_r+0x368>)
 8006ee0:	031b      	lsls	r3, r3, #12
 8006ee2:	0b1b      	lsrs	r3, r3, #12
 8006ee4:	431a      	orrs	r2, r3
 8006ee6:	0011      	movs	r1, r2
 8006ee8:	4b9b      	ldr	r3, [pc, #620]	; (8007158 <_dtoa_r+0x36c>)
 8006eea:	9418      	str	r4, [sp, #96]	; 0x60
 8006eec:	18f6      	adds	r6, r6, r3
 8006eee:	2200      	movs	r2, #0
 8006ef0:	4b9a      	ldr	r3, [pc, #616]	; (800715c <_dtoa_r+0x370>)
 8006ef2:	f7fb fce5 	bl	80028c0 <__aeabi_dsub>
 8006ef6:	4a9a      	ldr	r2, [pc, #616]	; (8007160 <_dtoa_r+0x374>)
 8006ef8:	4b9a      	ldr	r3, [pc, #616]	; (8007164 <_dtoa_r+0x378>)
 8006efa:	f7fb fa75 	bl	80023e8 <__aeabi_dmul>
 8006efe:	4a9a      	ldr	r2, [pc, #616]	; (8007168 <_dtoa_r+0x37c>)
 8006f00:	4b9a      	ldr	r3, [pc, #616]	; (800716c <_dtoa_r+0x380>)
 8006f02:	f7fa fb33 	bl	800156c <__aeabi_dadd>
 8006f06:	0004      	movs	r4, r0
 8006f08:	0030      	movs	r0, r6
 8006f0a:	000d      	movs	r5, r1
 8006f0c:	f7fc f8be 	bl	800308c <__aeabi_i2d>
 8006f10:	4a97      	ldr	r2, [pc, #604]	; (8007170 <_dtoa_r+0x384>)
 8006f12:	4b98      	ldr	r3, [pc, #608]	; (8007174 <_dtoa_r+0x388>)
 8006f14:	f7fb fa68 	bl	80023e8 <__aeabi_dmul>
 8006f18:	0002      	movs	r2, r0
 8006f1a:	000b      	movs	r3, r1
 8006f1c:	0020      	movs	r0, r4
 8006f1e:	0029      	movs	r1, r5
 8006f20:	f7fa fb24 	bl	800156c <__aeabi_dadd>
 8006f24:	0004      	movs	r4, r0
 8006f26:	000d      	movs	r5, r1
 8006f28:	f7fc f87a 	bl	8003020 <__aeabi_d2iz>
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	9002      	str	r0, [sp, #8]
 8006f30:	2300      	movs	r3, #0
 8006f32:	0020      	movs	r0, r4
 8006f34:	0029      	movs	r1, r5
 8006f36:	f7f9 fa9b 	bl	8000470 <__aeabi_dcmplt>
 8006f3a:	2800      	cmp	r0, #0
 8006f3c:	d00b      	beq.n	8006f56 <_dtoa_r+0x16a>
 8006f3e:	9802      	ldr	r0, [sp, #8]
 8006f40:	f7fc f8a4 	bl	800308c <__aeabi_i2d>
 8006f44:	002b      	movs	r3, r5
 8006f46:	0022      	movs	r2, r4
 8006f48:	f7f9 fa8c 	bl	8000464 <__aeabi_dcmpeq>
 8006f4c:	4243      	negs	r3, r0
 8006f4e:	4158      	adcs	r0, r3
 8006f50:	9b02      	ldr	r3, [sp, #8]
 8006f52:	1a1b      	subs	r3, r3, r0
 8006f54:	9302      	str	r3, [sp, #8]
 8006f56:	2301      	movs	r3, #1
 8006f58:	9316      	str	r3, [sp, #88]	; 0x58
 8006f5a:	9b02      	ldr	r3, [sp, #8]
 8006f5c:	2b16      	cmp	r3, #22
 8006f5e:	d80f      	bhi.n	8006f80 <_dtoa_r+0x194>
 8006f60:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006f62:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006f64:	00da      	lsls	r2, r3, #3
 8006f66:	4b84      	ldr	r3, [pc, #528]	; (8007178 <_dtoa_r+0x38c>)
 8006f68:	189b      	adds	r3, r3, r2
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	f7f9 fa7f 	bl	8000470 <__aeabi_dcmplt>
 8006f72:	2800      	cmp	r0, #0
 8006f74:	d049      	beq.n	800700a <_dtoa_r+0x21e>
 8006f76:	9b02      	ldr	r3, [sp, #8]
 8006f78:	3b01      	subs	r3, #1
 8006f7a:	9302      	str	r3, [sp, #8]
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	9316      	str	r3, [sp, #88]	; 0x58
 8006f80:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006f82:	1b9e      	subs	r6, r3, r6
 8006f84:	2300      	movs	r3, #0
 8006f86:	930a      	str	r3, [sp, #40]	; 0x28
 8006f88:	0033      	movs	r3, r6
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	930d      	str	r3, [sp, #52]	; 0x34
 8006f8e:	d504      	bpl.n	8006f9a <_dtoa_r+0x1ae>
 8006f90:	2301      	movs	r3, #1
 8006f92:	1b9b      	subs	r3, r3, r6
 8006f94:	930a      	str	r3, [sp, #40]	; 0x28
 8006f96:	2300      	movs	r3, #0
 8006f98:	930d      	str	r3, [sp, #52]	; 0x34
 8006f9a:	9b02      	ldr	r3, [sp, #8]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	db36      	blt.n	800700e <_dtoa_r+0x222>
 8006fa0:	9a02      	ldr	r2, [sp, #8]
 8006fa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006fa4:	4694      	mov	ip, r2
 8006fa6:	4463      	add	r3, ip
 8006fa8:	930d      	str	r3, [sp, #52]	; 0x34
 8006faa:	2300      	movs	r3, #0
 8006fac:	9215      	str	r2, [sp, #84]	; 0x54
 8006fae:	930e      	str	r3, [sp, #56]	; 0x38
 8006fb0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006fb2:	2401      	movs	r4, #1
 8006fb4:	2b09      	cmp	r3, #9
 8006fb6:	d864      	bhi.n	8007082 <_dtoa_r+0x296>
 8006fb8:	2b05      	cmp	r3, #5
 8006fba:	dd02      	ble.n	8006fc2 <_dtoa_r+0x1d6>
 8006fbc:	2400      	movs	r4, #0
 8006fbe:	3b04      	subs	r3, #4
 8006fc0:	9322      	str	r3, [sp, #136]	; 0x88
 8006fc2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006fc4:	1e98      	subs	r0, r3, #2
 8006fc6:	2803      	cmp	r0, #3
 8006fc8:	d864      	bhi.n	8007094 <_dtoa_r+0x2a8>
 8006fca:	f7f9 f8a5 	bl	8000118 <__gnu_thumb1_case_uqi>
 8006fce:	3829      	.short	0x3829
 8006fd0:	5836      	.short	0x5836
 8006fd2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006fd4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006fd6:	189e      	adds	r6, r3, r2
 8006fd8:	4b68      	ldr	r3, [pc, #416]	; (800717c <_dtoa_r+0x390>)
 8006fda:	18f2      	adds	r2, r6, r3
 8006fdc:	2a20      	cmp	r2, #32
 8006fde:	dd0f      	ble.n	8007000 <_dtoa_r+0x214>
 8006fe0:	2340      	movs	r3, #64	; 0x40
 8006fe2:	1a9b      	subs	r3, r3, r2
 8006fe4:	409d      	lsls	r5, r3
 8006fe6:	4b66      	ldr	r3, [pc, #408]	; (8007180 <_dtoa_r+0x394>)
 8006fe8:	9802      	ldr	r0, [sp, #8]
 8006fea:	18f3      	adds	r3, r6, r3
 8006fec:	40d8      	lsrs	r0, r3
 8006fee:	4328      	orrs	r0, r5
 8006ff0:	f7fc f87c 	bl	80030ec <__aeabi_ui2d>
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	4c63      	ldr	r4, [pc, #396]	; (8007184 <_dtoa_r+0x398>)
 8006ff8:	3e01      	subs	r6, #1
 8006ffa:	1909      	adds	r1, r1, r4
 8006ffc:	9318      	str	r3, [sp, #96]	; 0x60
 8006ffe:	e776      	b.n	8006eee <_dtoa_r+0x102>
 8007000:	2320      	movs	r3, #32
 8007002:	9802      	ldr	r0, [sp, #8]
 8007004:	1a9b      	subs	r3, r3, r2
 8007006:	4098      	lsls	r0, r3
 8007008:	e7f2      	b.n	8006ff0 <_dtoa_r+0x204>
 800700a:	9016      	str	r0, [sp, #88]	; 0x58
 800700c:	e7b8      	b.n	8006f80 <_dtoa_r+0x194>
 800700e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007010:	9a02      	ldr	r2, [sp, #8]
 8007012:	1a9b      	subs	r3, r3, r2
 8007014:	930a      	str	r3, [sp, #40]	; 0x28
 8007016:	4253      	negs	r3, r2
 8007018:	930e      	str	r3, [sp, #56]	; 0x38
 800701a:	2300      	movs	r3, #0
 800701c:	9315      	str	r3, [sp, #84]	; 0x54
 800701e:	e7c7      	b.n	8006fb0 <_dtoa_r+0x1c4>
 8007020:	2300      	movs	r3, #0
 8007022:	930f      	str	r3, [sp, #60]	; 0x3c
 8007024:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007026:	930c      	str	r3, [sp, #48]	; 0x30
 8007028:	9307      	str	r3, [sp, #28]
 800702a:	2b00      	cmp	r3, #0
 800702c:	dc13      	bgt.n	8007056 <_dtoa_r+0x26a>
 800702e:	2301      	movs	r3, #1
 8007030:	001a      	movs	r2, r3
 8007032:	930c      	str	r3, [sp, #48]	; 0x30
 8007034:	9307      	str	r3, [sp, #28]
 8007036:	9223      	str	r2, [sp, #140]	; 0x8c
 8007038:	e00d      	b.n	8007056 <_dtoa_r+0x26a>
 800703a:	2301      	movs	r3, #1
 800703c:	e7f1      	b.n	8007022 <_dtoa_r+0x236>
 800703e:	2300      	movs	r3, #0
 8007040:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8007042:	930f      	str	r3, [sp, #60]	; 0x3c
 8007044:	4694      	mov	ip, r2
 8007046:	9b02      	ldr	r3, [sp, #8]
 8007048:	4463      	add	r3, ip
 800704a:	930c      	str	r3, [sp, #48]	; 0x30
 800704c:	3301      	adds	r3, #1
 800704e:	9307      	str	r3, [sp, #28]
 8007050:	2b00      	cmp	r3, #0
 8007052:	dc00      	bgt.n	8007056 <_dtoa_r+0x26a>
 8007054:	2301      	movs	r3, #1
 8007056:	2200      	movs	r2, #0
 8007058:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800705a:	6042      	str	r2, [r0, #4]
 800705c:	3204      	adds	r2, #4
 800705e:	0015      	movs	r5, r2
 8007060:	3514      	adds	r5, #20
 8007062:	6841      	ldr	r1, [r0, #4]
 8007064:	429d      	cmp	r5, r3
 8007066:	d919      	bls.n	800709c <_dtoa_r+0x2b0>
 8007068:	0038      	movs	r0, r7
 800706a:	f000 fcf3 	bl	8007a54 <_Balloc>
 800706e:	9006      	str	r0, [sp, #24]
 8007070:	2800      	cmp	r0, #0
 8007072:	d117      	bne.n	80070a4 <_dtoa_r+0x2b8>
 8007074:	21d5      	movs	r1, #213	; 0xd5
 8007076:	0002      	movs	r2, r0
 8007078:	4b43      	ldr	r3, [pc, #268]	; (8007188 <_dtoa_r+0x39c>)
 800707a:	0049      	lsls	r1, r1, #1
 800707c:	e6cb      	b.n	8006e16 <_dtoa_r+0x2a>
 800707e:	2301      	movs	r3, #1
 8007080:	e7de      	b.n	8007040 <_dtoa_r+0x254>
 8007082:	2300      	movs	r3, #0
 8007084:	940f      	str	r4, [sp, #60]	; 0x3c
 8007086:	9322      	str	r3, [sp, #136]	; 0x88
 8007088:	3b01      	subs	r3, #1
 800708a:	930c      	str	r3, [sp, #48]	; 0x30
 800708c:	9307      	str	r3, [sp, #28]
 800708e:	2200      	movs	r2, #0
 8007090:	3313      	adds	r3, #19
 8007092:	e7d0      	b.n	8007036 <_dtoa_r+0x24a>
 8007094:	2301      	movs	r3, #1
 8007096:	930f      	str	r3, [sp, #60]	; 0x3c
 8007098:	3b02      	subs	r3, #2
 800709a:	e7f6      	b.n	800708a <_dtoa_r+0x29e>
 800709c:	3101      	adds	r1, #1
 800709e:	6041      	str	r1, [r0, #4]
 80070a0:	0052      	lsls	r2, r2, #1
 80070a2:	e7dc      	b.n	800705e <_dtoa_r+0x272>
 80070a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a6:	9a06      	ldr	r2, [sp, #24]
 80070a8:	601a      	str	r2, [r3, #0]
 80070aa:	9b07      	ldr	r3, [sp, #28]
 80070ac:	2b0e      	cmp	r3, #14
 80070ae:	d900      	bls.n	80070b2 <_dtoa_r+0x2c6>
 80070b0:	e0eb      	b.n	800728a <_dtoa_r+0x49e>
 80070b2:	2c00      	cmp	r4, #0
 80070b4:	d100      	bne.n	80070b8 <_dtoa_r+0x2cc>
 80070b6:	e0e8      	b.n	800728a <_dtoa_r+0x49e>
 80070b8:	9b02      	ldr	r3, [sp, #8]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	dd68      	ble.n	8007190 <_dtoa_r+0x3a4>
 80070be:	001a      	movs	r2, r3
 80070c0:	210f      	movs	r1, #15
 80070c2:	4b2d      	ldr	r3, [pc, #180]	; (8007178 <_dtoa_r+0x38c>)
 80070c4:	400a      	ands	r2, r1
 80070c6:	00d2      	lsls	r2, r2, #3
 80070c8:	189b      	adds	r3, r3, r2
 80070ca:	681d      	ldr	r5, [r3, #0]
 80070cc:	685e      	ldr	r6, [r3, #4]
 80070ce:	9b02      	ldr	r3, [sp, #8]
 80070d0:	111c      	asrs	r4, r3, #4
 80070d2:	2302      	movs	r3, #2
 80070d4:	9310      	str	r3, [sp, #64]	; 0x40
 80070d6:	9b02      	ldr	r3, [sp, #8]
 80070d8:	05db      	lsls	r3, r3, #23
 80070da:	d50b      	bpl.n	80070f4 <_dtoa_r+0x308>
 80070dc:	4b2b      	ldr	r3, [pc, #172]	; (800718c <_dtoa_r+0x3a0>)
 80070de:	400c      	ands	r4, r1
 80070e0:	6a1a      	ldr	r2, [r3, #32]
 80070e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e4:	9812      	ldr	r0, [sp, #72]	; 0x48
 80070e6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80070e8:	f7fa fd7c 	bl	8001be4 <__aeabi_ddiv>
 80070ec:	2303      	movs	r3, #3
 80070ee:	9008      	str	r0, [sp, #32]
 80070f0:	9109      	str	r1, [sp, #36]	; 0x24
 80070f2:	9310      	str	r3, [sp, #64]	; 0x40
 80070f4:	4b25      	ldr	r3, [pc, #148]	; (800718c <_dtoa_r+0x3a0>)
 80070f6:	9314      	str	r3, [sp, #80]	; 0x50
 80070f8:	2c00      	cmp	r4, #0
 80070fa:	d108      	bne.n	800710e <_dtoa_r+0x322>
 80070fc:	9808      	ldr	r0, [sp, #32]
 80070fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007100:	002a      	movs	r2, r5
 8007102:	0033      	movs	r3, r6
 8007104:	f7fa fd6e 	bl	8001be4 <__aeabi_ddiv>
 8007108:	9008      	str	r0, [sp, #32]
 800710a:	9109      	str	r1, [sp, #36]	; 0x24
 800710c:	e05c      	b.n	80071c8 <_dtoa_r+0x3dc>
 800710e:	2301      	movs	r3, #1
 8007110:	421c      	tst	r4, r3
 8007112:	d00b      	beq.n	800712c <_dtoa_r+0x340>
 8007114:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007116:	0028      	movs	r0, r5
 8007118:	3301      	adds	r3, #1
 800711a:	9310      	str	r3, [sp, #64]	; 0x40
 800711c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800711e:	0031      	movs	r1, r6
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	f7fb f960 	bl	80023e8 <__aeabi_dmul>
 8007128:	0005      	movs	r5, r0
 800712a:	000e      	movs	r6, r1
 800712c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800712e:	1064      	asrs	r4, r4, #1
 8007130:	3308      	adds	r3, #8
 8007132:	e7e0      	b.n	80070f6 <_dtoa_r+0x30a>
 8007134:	0800b997 	.word	0x0800b997
 8007138:	0800b9ae 	.word	0x0800b9ae
 800713c:	7ff00000 	.word	0x7ff00000
 8007140:	0000270f 	.word	0x0000270f
 8007144:	0800b993 	.word	0x0800b993
 8007148:	0800b996 	.word	0x0800b996
 800714c:	0800b3d6 	.word	0x0800b3d6
 8007150:	0800b3d7 	.word	0x0800b3d7
 8007154:	3ff00000 	.word	0x3ff00000
 8007158:	fffffc01 	.word	0xfffffc01
 800715c:	3ff80000 	.word	0x3ff80000
 8007160:	636f4361 	.word	0x636f4361
 8007164:	3fd287a7 	.word	0x3fd287a7
 8007168:	8b60c8b3 	.word	0x8b60c8b3
 800716c:	3fc68a28 	.word	0x3fc68a28
 8007170:	509f79fb 	.word	0x509f79fb
 8007174:	3fd34413 	.word	0x3fd34413
 8007178:	0800baa0 	.word	0x0800baa0
 800717c:	00000432 	.word	0x00000432
 8007180:	00000412 	.word	0x00000412
 8007184:	fe100000 	.word	0xfe100000
 8007188:	0800ba09 	.word	0x0800ba09
 800718c:	0800ba78 	.word	0x0800ba78
 8007190:	2302      	movs	r3, #2
 8007192:	9310      	str	r3, [sp, #64]	; 0x40
 8007194:	9b02      	ldr	r3, [sp, #8]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d016      	beq.n	80071c8 <_dtoa_r+0x3dc>
 800719a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800719c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800719e:	425c      	negs	r4, r3
 80071a0:	230f      	movs	r3, #15
 80071a2:	4ab6      	ldr	r2, [pc, #728]	; (800747c <_dtoa_r+0x690>)
 80071a4:	4023      	ands	r3, r4
 80071a6:	00db      	lsls	r3, r3, #3
 80071a8:	18d3      	adds	r3, r2, r3
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	f7fb f91b 	bl	80023e8 <__aeabi_dmul>
 80071b2:	2601      	movs	r6, #1
 80071b4:	2300      	movs	r3, #0
 80071b6:	9008      	str	r0, [sp, #32]
 80071b8:	9109      	str	r1, [sp, #36]	; 0x24
 80071ba:	4db1      	ldr	r5, [pc, #708]	; (8007480 <_dtoa_r+0x694>)
 80071bc:	1124      	asrs	r4, r4, #4
 80071be:	2c00      	cmp	r4, #0
 80071c0:	d000      	beq.n	80071c4 <_dtoa_r+0x3d8>
 80071c2:	e094      	b.n	80072ee <_dtoa_r+0x502>
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d19f      	bne.n	8007108 <_dtoa_r+0x31c>
 80071c8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d100      	bne.n	80071d0 <_dtoa_r+0x3e4>
 80071ce:	e09b      	b.n	8007308 <_dtoa_r+0x51c>
 80071d0:	9c08      	ldr	r4, [sp, #32]
 80071d2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80071d4:	2200      	movs	r2, #0
 80071d6:	0020      	movs	r0, r4
 80071d8:	0029      	movs	r1, r5
 80071da:	4baa      	ldr	r3, [pc, #680]	; (8007484 <_dtoa_r+0x698>)
 80071dc:	f7f9 f948 	bl	8000470 <__aeabi_dcmplt>
 80071e0:	2800      	cmp	r0, #0
 80071e2:	d100      	bne.n	80071e6 <_dtoa_r+0x3fa>
 80071e4:	e090      	b.n	8007308 <_dtoa_r+0x51c>
 80071e6:	9b07      	ldr	r3, [sp, #28]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d100      	bne.n	80071ee <_dtoa_r+0x402>
 80071ec:	e08c      	b.n	8007308 <_dtoa_r+0x51c>
 80071ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	dd46      	ble.n	8007282 <_dtoa_r+0x496>
 80071f4:	9b02      	ldr	r3, [sp, #8]
 80071f6:	2200      	movs	r2, #0
 80071f8:	0020      	movs	r0, r4
 80071fa:	0029      	movs	r1, r5
 80071fc:	1e5e      	subs	r6, r3, #1
 80071fe:	4ba2      	ldr	r3, [pc, #648]	; (8007488 <_dtoa_r+0x69c>)
 8007200:	f7fb f8f2 	bl	80023e8 <__aeabi_dmul>
 8007204:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007206:	9008      	str	r0, [sp, #32]
 8007208:	9109      	str	r1, [sp, #36]	; 0x24
 800720a:	3301      	adds	r3, #1
 800720c:	9310      	str	r3, [sp, #64]	; 0x40
 800720e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007210:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007212:	9c08      	ldr	r4, [sp, #32]
 8007214:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007216:	9314      	str	r3, [sp, #80]	; 0x50
 8007218:	f7fb ff38 	bl	800308c <__aeabi_i2d>
 800721c:	0022      	movs	r2, r4
 800721e:	002b      	movs	r3, r5
 8007220:	f7fb f8e2 	bl	80023e8 <__aeabi_dmul>
 8007224:	2200      	movs	r2, #0
 8007226:	4b99      	ldr	r3, [pc, #612]	; (800748c <_dtoa_r+0x6a0>)
 8007228:	f7fa f9a0 	bl	800156c <__aeabi_dadd>
 800722c:	9010      	str	r0, [sp, #64]	; 0x40
 800722e:	9111      	str	r1, [sp, #68]	; 0x44
 8007230:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007232:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007234:	9208      	str	r2, [sp, #32]
 8007236:	9309      	str	r3, [sp, #36]	; 0x24
 8007238:	4a95      	ldr	r2, [pc, #596]	; (8007490 <_dtoa_r+0x6a4>)
 800723a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800723c:	4694      	mov	ip, r2
 800723e:	4463      	add	r3, ip
 8007240:	9317      	str	r3, [sp, #92]	; 0x5c
 8007242:	9309      	str	r3, [sp, #36]	; 0x24
 8007244:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007246:	2b00      	cmp	r3, #0
 8007248:	d161      	bne.n	800730e <_dtoa_r+0x522>
 800724a:	2200      	movs	r2, #0
 800724c:	0020      	movs	r0, r4
 800724e:	0029      	movs	r1, r5
 8007250:	4b90      	ldr	r3, [pc, #576]	; (8007494 <_dtoa_r+0x6a8>)
 8007252:	f7fb fb35 	bl	80028c0 <__aeabi_dsub>
 8007256:	9a08      	ldr	r2, [sp, #32]
 8007258:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800725a:	0004      	movs	r4, r0
 800725c:	000d      	movs	r5, r1
 800725e:	f7f9 f91b 	bl	8000498 <__aeabi_dcmpgt>
 8007262:	2800      	cmp	r0, #0
 8007264:	d000      	beq.n	8007268 <_dtoa_r+0x47c>
 8007266:	e2af      	b.n	80077c8 <_dtoa_r+0x9dc>
 8007268:	488b      	ldr	r0, [pc, #556]	; (8007498 <_dtoa_r+0x6ac>)
 800726a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800726c:	4684      	mov	ip, r0
 800726e:	4461      	add	r1, ip
 8007270:	000b      	movs	r3, r1
 8007272:	0020      	movs	r0, r4
 8007274:	0029      	movs	r1, r5
 8007276:	9a08      	ldr	r2, [sp, #32]
 8007278:	f7f9 f8fa 	bl	8000470 <__aeabi_dcmplt>
 800727c:	2800      	cmp	r0, #0
 800727e:	d000      	beq.n	8007282 <_dtoa_r+0x496>
 8007280:	e29f      	b.n	80077c2 <_dtoa_r+0x9d6>
 8007282:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007284:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8007286:	9308      	str	r3, [sp, #32]
 8007288:	9409      	str	r4, [sp, #36]	; 0x24
 800728a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800728c:	2b00      	cmp	r3, #0
 800728e:	da00      	bge.n	8007292 <_dtoa_r+0x4a6>
 8007290:	e172      	b.n	8007578 <_dtoa_r+0x78c>
 8007292:	9a02      	ldr	r2, [sp, #8]
 8007294:	2a0e      	cmp	r2, #14
 8007296:	dd00      	ble.n	800729a <_dtoa_r+0x4ae>
 8007298:	e16e      	b.n	8007578 <_dtoa_r+0x78c>
 800729a:	4b78      	ldr	r3, [pc, #480]	; (800747c <_dtoa_r+0x690>)
 800729c:	00d2      	lsls	r2, r2, #3
 800729e:	189b      	adds	r3, r3, r2
 80072a0:	685c      	ldr	r4, [r3, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	930a      	str	r3, [sp, #40]	; 0x28
 80072a6:	940b      	str	r4, [sp, #44]	; 0x2c
 80072a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	db00      	blt.n	80072b0 <_dtoa_r+0x4c4>
 80072ae:	e0f7      	b.n	80074a0 <_dtoa_r+0x6b4>
 80072b0:	9b07      	ldr	r3, [sp, #28]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	dd00      	ble.n	80072b8 <_dtoa_r+0x4cc>
 80072b6:	e0f3      	b.n	80074a0 <_dtoa_r+0x6b4>
 80072b8:	d000      	beq.n	80072bc <_dtoa_r+0x4d0>
 80072ba:	e282      	b.n	80077c2 <_dtoa_r+0x9d6>
 80072bc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80072be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80072c0:	2200      	movs	r2, #0
 80072c2:	4b74      	ldr	r3, [pc, #464]	; (8007494 <_dtoa_r+0x6a8>)
 80072c4:	f7fb f890 	bl	80023e8 <__aeabi_dmul>
 80072c8:	9a08      	ldr	r2, [sp, #32]
 80072ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072cc:	f7f9 f8ee 	bl	80004ac <__aeabi_dcmpge>
 80072d0:	9e07      	ldr	r6, [sp, #28]
 80072d2:	0035      	movs	r5, r6
 80072d4:	2800      	cmp	r0, #0
 80072d6:	d000      	beq.n	80072da <_dtoa_r+0x4ee>
 80072d8:	e259      	b.n	800778e <_dtoa_r+0x9a2>
 80072da:	9b06      	ldr	r3, [sp, #24]
 80072dc:	9a06      	ldr	r2, [sp, #24]
 80072de:	3301      	adds	r3, #1
 80072e0:	9308      	str	r3, [sp, #32]
 80072e2:	2331      	movs	r3, #49	; 0x31
 80072e4:	7013      	strb	r3, [r2, #0]
 80072e6:	9b02      	ldr	r3, [sp, #8]
 80072e8:	3301      	adds	r3, #1
 80072ea:	9302      	str	r3, [sp, #8]
 80072ec:	e254      	b.n	8007798 <_dtoa_r+0x9ac>
 80072ee:	4234      	tst	r4, r6
 80072f0:	d007      	beq.n	8007302 <_dtoa_r+0x516>
 80072f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80072f4:	3301      	adds	r3, #1
 80072f6:	9310      	str	r3, [sp, #64]	; 0x40
 80072f8:	682a      	ldr	r2, [r5, #0]
 80072fa:	686b      	ldr	r3, [r5, #4]
 80072fc:	f7fb f874 	bl	80023e8 <__aeabi_dmul>
 8007300:	0033      	movs	r3, r6
 8007302:	1064      	asrs	r4, r4, #1
 8007304:	3508      	adds	r5, #8
 8007306:	e75a      	b.n	80071be <_dtoa_r+0x3d2>
 8007308:	9e02      	ldr	r6, [sp, #8]
 800730a:	9b07      	ldr	r3, [sp, #28]
 800730c:	e780      	b.n	8007210 <_dtoa_r+0x424>
 800730e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007310:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007312:	1e5a      	subs	r2, r3, #1
 8007314:	4b59      	ldr	r3, [pc, #356]	; (800747c <_dtoa_r+0x690>)
 8007316:	00d2      	lsls	r2, r2, #3
 8007318:	189b      	adds	r3, r3, r2
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	2900      	cmp	r1, #0
 8007320:	d051      	beq.n	80073c6 <_dtoa_r+0x5da>
 8007322:	2000      	movs	r0, #0
 8007324:	495d      	ldr	r1, [pc, #372]	; (800749c <_dtoa_r+0x6b0>)
 8007326:	f7fa fc5d 	bl	8001be4 <__aeabi_ddiv>
 800732a:	9a08      	ldr	r2, [sp, #32]
 800732c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800732e:	f7fb fac7 	bl	80028c0 <__aeabi_dsub>
 8007332:	9a06      	ldr	r2, [sp, #24]
 8007334:	9b06      	ldr	r3, [sp, #24]
 8007336:	4694      	mov	ip, r2
 8007338:	9317      	str	r3, [sp, #92]	; 0x5c
 800733a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800733c:	9010      	str	r0, [sp, #64]	; 0x40
 800733e:	9111      	str	r1, [sp, #68]	; 0x44
 8007340:	4463      	add	r3, ip
 8007342:	9319      	str	r3, [sp, #100]	; 0x64
 8007344:	0029      	movs	r1, r5
 8007346:	0020      	movs	r0, r4
 8007348:	f7fb fe6a 	bl	8003020 <__aeabi_d2iz>
 800734c:	9014      	str	r0, [sp, #80]	; 0x50
 800734e:	f7fb fe9d 	bl	800308c <__aeabi_i2d>
 8007352:	0002      	movs	r2, r0
 8007354:	000b      	movs	r3, r1
 8007356:	0020      	movs	r0, r4
 8007358:	0029      	movs	r1, r5
 800735a:	f7fb fab1 	bl	80028c0 <__aeabi_dsub>
 800735e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007360:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007362:	3301      	adds	r3, #1
 8007364:	9308      	str	r3, [sp, #32]
 8007366:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007368:	0004      	movs	r4, r0
 800736a:	3330      	adds	r3, #48	; 0x30
 800736c:	7013      	strb	r3, [r2, #0]
 800736e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007370:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007372:	000d      	movs	r5, r1
 8007374:	f7f9 f87c 	bl	8000470 <__aeabi_dcmplt>
 8007378:	2800      	cmp	r0, #0
 800737a:	d175      	bne.n	8007468 <_dtoa_r+0x67c>
 800737c:	0022      	movs	r2, r4
 800737e:	002b      	movs	r3, r5
 8007380:	2000      	movs	r0, #0
 8007382:	4940      	ldr	r1, [pc, #256]	; (8007484 <_dtoa_r+0x698>)
 8007384:	f7fb fa9c 	bl	80028c0 <__aeabi_dsub>
 8007388:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800738a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800738c:	f7f9 f870 	bl	8000470 <__aeabi_dcmplt>
 8007390:	2800      	cmp	r0, #0
 8007392:	d000      	beq.n	8007396 <_dtoa_r+0x5aa>
 8007394:	e0d2      	b.n	800753c <_dtoa_r+0x750>
 8007396:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007398:	9a08      	ldr	r2, [sp, #32]
 800739a:	4293      	cmp	r3, r2
 800739c:	d100      	bne.n	80073a0 <_dtoa_r+0x5b4>
 800739e:	e770      	b.n	8007282 <_dtoa_r+0x496>
 80073a0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80073a2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80073a4:	2200      	movs	r2, #0
 80073a6:	4b38      	ldr	r3, [pc, #224]	; (8007488 <_dtoa_r+0x69c>)
 80073a8:	f7fb f81e 	bl	80023e8 <__aeabi_dmul>
 80073ac:	4b36      	ldr	r3, [pc, #216]	; (8007488 <_dtoa_r+0x69c>)
 80073ae:	9010      	str	r0, [sp, #64]	; 0x40
 80073b0:	9111      	str	r1, [sp, #68]	; 0x44
 80073b2:	2200      	movs	r2, #0
 80073b4:	0020      	movs	r0, r4
 80073b6:	0029      	movs	r1, r5
 80073b8:	f7fb f816 	bl	80023e8 <__aeabi_dmul>
 80073bc:	9b08      	ldr	r3, [sp, #32]
 80073be:	0004      	movs	r4, r0
 80073c0:	000d      	movs	r5, r1
 80073c2:	9317      	str	r3, [sp, #92]	; 0x5c
 80073c4:	e7be      	b.n	8007344 <_dtoa_r+0x558>
 80073c6:	9808      	ldr	r0, [sp, #32]
 80073c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073ca:	f7fb f80d 	bl	80023e8 <__aeabi_dmul>
 80073ce:	9a06      	ldr	r2, [sp, #24]
 80073d0:	9b06      	ldr	r3, [sp, #24]
 80073d2:	4694      	mov	ip, r2
 80073d4:	9308      	str	r3, [sp, #32]
 80073d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80073d8:	9010      	str	r0, [sp, #64]	; 0x40
 80073da:	9111      	str	r1, [sp, #68]	; 0x44
 80073dc:	4463      	add	r3, ip
 80073de:	9319      	str	r3, [sp, #100]	; 0x64
 80073e0:	0029      	movs	r1, r5
 80073e2:	0020      	movs	r0, r4
 80073e4:	f7fb fe1c 	bl	8003020 <__aeabi_d2iz>
 80073e8:	9017      	str	r0, [sp, #92]	; 0x5c
 80073ea:	f7fb fe4f 	bl	800308c <__aeabi_i2d>
 80073ee:	0002      	movs	r2, r0
 80073f0:	000b      	movs	r3, r1
 80073f2:	0020      	movs	r0, r4
 80073f4:	0029      	movs	r1, r5
 80073f6:	f7fb fa63 	bl	80028c0 <__aeabi_dsub>
 80073fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80073fc:	9a08      	ldr	r2, [sp, #32]
 80073fe:	3330      	adds	r3, #48	; 0x30
 8007400:	7013      	strb	r3, [r2, #0]
 8007402:	0013      	movs	r3, r2
 8007404:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007406:	3301      	adds	r3, #1
 8007408:	0004      	movs	r4, r0
 800740a:	000d      	movs	r5, r1
 800740c:	9308      	str	r3, [sp, #32]
 800740e:	4293      	cmp	r3, r2
 8007410:	d12c      	bne.n	800746c <_dtoa_r+0x680>
 8007412:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007414:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007416:	9a06      	ldr	r2, [sp, #24]
 8007418:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800741a:	4694      	mov	ip, r2
 800741c:	4463      	add	r3, ip
 800741e:	2200      	movs	r2, #0
 8007420:	9308      	str	r3, [sp, #32]
 8007422:	4b1e      	ldr	r3, [pc, #120]	; (800749c <_dtoa_r+0x6b0>)
 8007424:	f7fa f8a2 	bl	800156c <__aeabi_dadd>
 8007428:	0002      	movs	r2, r0
 800742a:	000b      	movs	r3, r1
 800742c:	0020      	movs	r0, r4
 800742e:	0029      	movs	r1, r5
 8007430:	f7f9 f832 	bl	8000498 <__aeabi_dcmpgt>
 8007434:	2800      	cmp	r0, #0
 8007436:	d000      	beq.n	800743a <_dtoa_r+0x64e>
 8007438:	e080      	b.n	800753c <_dtoa_r+0x750>
 800743a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800743c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800743e:	2000      	movs	r0, #0
 8007440:	4916      	ldr	r1, [pc, #88]	; (800749c <_dtoa_r+0x6b0>)
 8007442:	f7fb fa3d 	bl	80028c0 <__aeabi_dsub>
 8007446:	0002      	movs	r2, r0
 8007448:	000b      	movs	r3, r1
 800744a:	0020      	movs	r0, r4
 800744c:	0029      	movs	r1, r5
 800744e:	f7f9 f80f 	bl	8000470 <__aeabi_dcmplt>
 8007452:	2800      	cmp	r0, #0
 8007454:	d100      	bne.n	8007458 <_dtoa_r+0x66c>
 8007456:	e714      	b.n	8007282 <_dtoa_r+0x496>
 8007458:	9b08      	ldr	r3, [sp, #32]
 800745a:	001a      	movs	r2, r3
 800745c:	3a01      	subs	r2, #1
 800745e:	9208      	str	r2, [sp, #32]
 8007460:	7812      	ldrb	r2, [r2, #0]
 8007462:	2a30      	cmp	r2, #48	; 0x30
 8007464:	d0f8      	beq.n	8007458 <_dtoa_r+0x66c>
 8007466:	9308      	str	r3, [sp, #32]
 8007468:	9602      	str	r6, [sp, #8]
 800746a:	e055      	b.n	8007518 <_dtoa_r+0x72c>
 800746c:	2200      	movs	r2, #0
 800746e:	4b06      	ldr	r3, [pc, #24]	; (8007488 <_dtoa_r+0x69c>)
 8007470:	f7fa ffba 	bl	80023e8 <__aeabi_dmul>
 8007474:	0004      	movs	r4, r0
 8007476:	000d      	movs	r5, r1
 8007478:	e7b2      	b.n	80073e0 <_dtoa_r+0x5f4>
 800747a:	46c0      	nop			; (mov r8, r8)
 800747c:	0800baa0 	.word	0x0800baa0
 8007480:	0800ba78 	.word	0x0800ba78
 8007484:	3ff00000 	.word	0x3ff00000
 8007488:	40240000 	.word	0x40240000
 800748c:	401c0000 	.word	0x401c0000
 8007490:	fcc00000 	.word	0xfcc00000
 8007494:	40140000 	.word	0x40140000
 8007498:	7cc00000 	.word	0x7cc00000
 800749c:	3fe00000 	.word	0x3fe00000
 80074a0:	9b07      	ldr	r3, [sp, #28]
 80074a2:	9e06      	ldr	r6, [sp, #24]
 80074a4:	3b01      	subs	r3, #1
 80074a6:	199b      	adds	r3, r3, r6
 80074a8:	930c      	str	r3, [sp, #48]	; 0x30
 80074aa:	9c08      	ldr	r4, [sp, #32]
 80074ac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80074ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074b2:	0020      	movs	r0, r4
 80074b4:	0029      	movs	r1, r5
 80074b6:	f7fa fb95 	bl	8001be4 <__aeabi_ddiv>
 80074ba:	f7fb fdb1 	bl	8003020 <__aeabi_d2iz>
 80074be:	9007      	str	r0, [sp, #28]
 80074c0:	f7fb fde4 	bl	800308c <__aeabi_i2d>
 80074c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074c8:	f7fa ff8e 	bl	80023e8 <__aeabi_dmul>
 80074cc:	0002      	movs	r2, r0
 80074ce:	000b      	movs	r3, r1
 80074d0:	0020      	movs	r0, r4
 80074d2:	0029      	movs	r1, r5
 80074d4:	f7fb f9f4 	bl	80028c0 <__aeabi_dsub>
 80074d8:	0033      	movs	r3, r6
 80074da:	9a07      	ldr	r2, [sp, #28]
 80074dc:	3601      	adds	r6, #1
 80074de:	3230      	adds	r2, #48	; 0x30
 80074e0:	701a      	strb	r2, [r3, #0]
 80074e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80074e4:	9608      	str	r6, [sp, #32]
 80074e6:	429a      	cmp	r2, r3
 80074e8:	d139      	bne.n	800755e <_dtoa_r+0x772>
 80074ea:	0002      	movs	r2, r0
 80074ec:	000b      	movs	r3, r1
 80074ee:	f7fa f83d 	bl	800156c <__aeabi_dadd>
 80074f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074f6:	0004      	movs	r4, r0
 80074f8:	000d      	movs	r5, r1
 80074fa:	f7f8 ffcd 	bl	8000498 <__aeabi_dcmpgt>
 80074fe:	2800      	cmp	r0, #0
 8007500:	d11b      	bne.n	800753a <_dtoa_r+0x74e>
 8007502:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007504:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007506:	0020      	movs	r0, r4
 8007508:	0029      	movs	r1, r5
 800750a:	f7f8 ffab 	bl	8000464 <__aeabi_dcmpeq>
 800750e:	2800      	cmp	r0, #0
 8007510:	d002      	beq.n	8007518 <_dtoa_r+0x72c>
 8007512:	9b07      	ldr	r3, [sp, #28]
 8007514:	07db      	lsls	r3, r3, #31
 8007516:	d410      	bmi.n	800753a <_dtoa_r+0x74e>
 8007518:	0038      	movs	r0, r7
 800751a:	9905      	ldr	r1, [sp, #20]
 800751c:	f000 fade 	bl	8007adc <_Bfree>
 8007520:	2300      	movs	r3, #0
 8007522:	9a08      	ldr	r2, [sp, #32]
 8007524:	9802      	ldr	r0, [sp, #8]
 8007526:	7013      	strb	r3, [r2, #0]
 8007528:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800752a:	3001      	adds	r0, #1
 800752c:	6018      	str	r0, [r3, #0]
 800752e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007530:	2b00      	cmp	r3, #0
 8007532:	d100      	bne.n	8007536 <_dtoa_r+0x74a>
 8007534:	e4a6      	b.n	8006e84 <_dtoa_r+0x98>
 8007536:	601a      	str	r2, [r3, #0]
 8007538:	e4a4      	b.n	8006e84 <_dtoa_r+0x98>
 800753a:	9e02      	ldr	r6, [sp, #8]
 800753c:	9b08      	ldr	r3, [sp, #32]
 800753e:	9308      	str	r3, [sp, #32]
 8007540:	3b01      	subs	r3, #1
 8007542:	781a      	ldrb	r2, [r3, #0]
 8007544:	2a39      	cmp	r2, #57	; 0x39
 8007546:	d106      	bne.n	8007556 <_dtoa_r+0x76a>
 8007548:	9a06      	ldr	r2, [sp, #24]
 800754a:	429a      	cmp	r2, r3
 800754c:	d1f7      	bne.n	800753e <_dtoa_r+0x752>
 800754e:	2230      	movs	r2, #48	; 0x30
 8007550:	9906      	ldr	r1, [sp, #24]
 8007552:	3601      	adds	r6, #1
 8007554:	700a      	strb	r2, [r1, #0]
 8007556:	781a      	ldrb	r2, [r3, #0]
 8007558:	3201      	adds	r2, #1
 800755a:	701a      	strb	r2, [r3, #0]
 800755c:	e784      	b.n	8007468 <_dtoa_r+0x67c>
 800755e:	2200      	movs	r2, #0
 8007560:	4baa      	ldr	r3, [pc, #680]	; (800780c <_dtoa_r+0xa20>)
 8007562:	f7fa ff41 	bl	80023e8 <__aeabi_dmul>
 8007566:	2200      	movs	r2, #0
 8007568:	2300      	movs	r3, #0
 800756a:	0004      	movs	r4, r0
 800756c:	000d      	movs	r5, r1
 800756e:	f7f8 ff79 	bl	8000464 <__aeabi_dcmpeq>
 8007572:	2800      	cmp	r0, #0
 8007574:	d09b      	beq.n	80074ae <_dtoa_r+0x6c2>
 8007576:	e7cf      	b.n	8007518 <_dtoa_r+0x72c>
 8007578:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800757a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800757c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800757e:	2d00      	cmp	r5, #0
 8007580:	d012      	beq.n	80075a8 <_dtoa_r+0x7bc>
 8007582:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007584:	2a01      	cmp	r2, #1
 8007586:	dc66      	bgt.n	8007656 <_dtoa_r+0x86a>
 8007588:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800758a:	2a00      	cmp	r2, #0
 800758c:	d05d      	beq.n	800764a <_dtoa_r+0x85e>
 800758e:	4aa0      	ldr	r2, [pc, #640]	; (8007810 <_dtoa_r+0xa24>)
 8007590:	189b      	adds	r3, r3, r2
 8007592:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007594:	2101      	movs	r1, #1
 8007596:	18d2      	adds	r2, r2, r3
 8007598:	920a      	str	r2, [sp, #40]	; 0x28
 800759a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800759c:	0038      	movs	r0, r7
 800759e:	18d3      	adds	r3, r2, r3
 80075a0:	930d      	str	r3, [sp, #52]	; 0x34
 80075a2:	f000 fb4b 	bl	8007c3c <__i2b>
 80075a6:	0005      	movs	r5, r0
 80075a8:	2c00      	cmp	r4, #0
 80075aa:	dd0e      	ble.n	80075ca <_dtoa_r+0x7de>
 80075ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	dd0b      	ble.n	80075ca <_dtoa_r+0x7de>
 80075b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80075b4:	0023      	movs	r3, r4
 80075b6:	4294      	cmp	r4, r2
 80075b8:	dd00      	ble.n	80075bc <_dtoa_r+0x7d0>
 80075ba:	0013      	movs	r3, r2
 80075bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075be:	1ae4      	subs	r4, r4, r3
 80075c0:	1ad2      	subs	r2, r2, r3
 80075c2:	920a      	str	r2, [sp, #40]	; 0x28
 80075c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80075c6:	1ad3      	subs	r3, r2, r3
 80075c8:	930d      	str	r3, [sp, #52]	; 0x34
 80075ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d01f      	beq.n	8007610 <_dtoa_r+0x824>
 80075d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d054      	beq.n	8007680 <_dtoa_r+0x894>
 80075d6:	2e00      	cmp	r6, #0
 80075d8:	dd11      	ble.n	80075fe <_dtoa_r+0x812>
 80075da:	0029      	movs	r1, r5
 80075dc:	0032      	movs	r2, r6
 80075de:	0038      	movs	r0, r7
 80075e0:	f000 fbf2 	bl	8007dc8 <__pow5mult>
 80075e4:	9a05      	ldr	r2, [sp, #20]
 80075e6:	0001      	movs	r1, r0
 80075e8:	0005      	movs	r5, r0
 80075ea:	0038      	movs	r0, r7
 80075ec:	f000 fb3c 	bl	8007c68 <__multiply>
 80075f0:	9905      	ldr	r1, [sp, #20]
 80075f2:	9014      	str	r0, [sp, #80]	; 0x50
 80075f4:	0038      	movs	r0, r7
 80075f6:	f000 fa71 	bl	8007adc <_Bfree>
 80075fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80075fc:	9305      	str	r3, [sp, #20]
 80075fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007600:	1b9a      	subs	r2, r3, r6
 8007602:	42b3      	cmp	r3, r6
 8007604:	d004      	beq.n	8007610 <_dtoa_r+0x824>
 8007606:	0038      	movs	r0, r7
 8007608:	9905      	ldr	r1, [sp, #20]
 800760a:	f000 fbdd 	bl	8007dc8 <__pow5mult>
 800760e:	9005      	str	r0, [sp, #20]
 8007610:	2101      	movs	r1, #1
 8007612:	0038      	movs	r0, r7
 8007614:	f000 fb12 	bl	8007c3c <__i2b>
 8007618:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800761a:	0006      	movs	r6, r0
 800761c:	2b00      	cmp	r3, #0
 800761e:	dd31      	ble.n	8007684 <_dtoa_r+0x898>
 8007620:	001a      	movs	r2, r3
 8007622:	0001      	movs	r1, r0
 8007624:	0038      	movs	r0, r7
 8007626:	f000 fbcf 	bl	8007dc8 <__pow5mult>
 800762a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800762c:	0006      	movs	r6, r0
 800762e:	2b01      	cmp	r3, #1
 8007630:	dd2d      	ble.n	800768e <_dtoa_r+0x8a2>
 8007632:	2300      	movs	r3, #0
 8007634:	930e      	str	r3, [sp, #56]	; 0x38
 8007636:	6933      	ldr	r3, [r6, #16]
 8007638:	3303      	adds	r3, #3
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	18f3      	adds	r3, r6, r3
 800763e:	6858      	ldr	r0, [r3, #4]
 8007640:	f000 fab4 	bl	8007bac <__hi0bits>
 8007644:	2320      	movs	r3, #32
 8007646:	1a18      	subs	r0, r3, r0
 8007648:	e039      	b.n	80076be <_dtoa_r+0x8d2>
 800764a:	2336      	movs	r3, #54	; 0x36
 800764c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800764e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007650:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007652:	1a9b      	subs	r3, r3, r2
 8007654:	e79d      	b.n	8007592 <_dtoa_r+0x7a6>
 8007656:	9b07      	ldr	r3, [sp, #28]
 8007658:	1e5e      	subs	r6, r3, #1
 800765a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800765c:	42b3      	cmp	r3, r6
 800765e:	db07      	blt.n	8007670 <_dtoa_r+0x884>
 8007660:	1b9e      	subs	r6, r3, r6
 8007662:	9b07      	ldr	r3, [sp, #28]
 8007664:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007666:	2b00      	cmp	r3, #0
 8007668:	da93      	bge.n	8007592 <_dtoa_r+0x7a6>
 800766a:	1ae4      	subs	r4, r4, r3
 800766c:	2300      	movs	r3, #0
 800766e:	e790      	b.n	8007592 <_dtoa_r+0x7a6>
 8007670:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007672:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007674:	1af3      	subs	r3, r6, r3
 8007676:	18d3      	adds	r3, r2, r3
 8007678:	960e      	str	r6, [sp, #56]	; 0x38
 800767a:	9315      	str	r3, [sp, #84]	; 0x54
 800767c:	2600      	movs	r6, #0
 800767e:	e7f0      	b.n	8007662 <_dtoa_r+0x876>
 8007680:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007682:	e7c0      	b.n	8007606 <_dtoa_r+0x81a>
 8007684:	2300      	movs	r3, #0
 8007686:	930e      	str	r3, [sp, #56]	; 0x38
 8007688:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800768a:	2b01      	cmp	r3, #1
 800768c:	dc13      	bgt.n	80076b6 <_dtoa_r+0x8ca>
 800768e:	2300      	movs	r3, #0
 8007690:	930e      	str	r3, [sp, #56]	; 0x38
 8007692:	9b08      	ldr	r3, [sp, #32]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d10e      	bne.n	80076b6 <_dtoa_r+0x8ca>
 8007698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800769a:	031b      	lsls	r3, r3, #12
 800769c:	d10b      	bne.n	80076b6 <_dtoa_r+0x8ca>
 800769e:	4b5d      	ldr	r3, [pc, #372]	; (8007814 <_dtoa_r+0xa28>)
 80076a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076a2:	4213      	tst	r3, r2
 80076a4:	d007      	beq.n	80076b6 <_dtoa_r+0x8ca>
 80076a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076a8:	3301      	adds	r3, #1
 80076aa:	930a      	str	r3, [sp, #40]	; 0x28
 80076ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076ae:	3301      	adds	r3, #1
 80076b0:	930d      	str	r3, [sp, #52]	; 0x34
 80076b2:	2301      	movs	r3, #1
 80076b4:	930e      	str	r3, [sp, #56]	; 0x38
 80076b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80076b8:	2001      	movs	r0, #1
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d1bb      	bne.n	8007636 <_dtoa_r+0x84a>
 80076be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076c0:	221f      	movs	r2, #31
 80076c2:	1818      	adds	r0, r3, r0
 80076c4:	0003      	movs	r3, r0
 80076c6:	4013      	ands	r3, r2
 80076c8:	4210      	tst	r0, r2
 80076ca:	d046      	beq.n	800775a <_dtoa_r+0x96e>
 80076cc:	3201      	adds	r2, #1
 80076ce:	1ad2      	subs	r2, r2, r3
 80076d0:	2a04      	cmp	r2, #4
 80076d2:	dd3f      	ble.n	8007754 <_dtoa_r+0x968>
 80076d4:	221c      	movs	r2, #28
 80076d6:	1ad3      	subs	r3, r2, r3
 80076d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076da:	18e4      	adds	r4, r4, r3
 80076dc:	18d2      	adds	r2, r2, r3
 80076de:	920a      	str	r2, [sp, #40]	; 0x28
 80076e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80076e2:	18d3      	adds	r3, r2, r3
 80076e4:	930d      	str	r3, [sp, #52]	; 0x34
 80076e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	dd05      	ble.n	80076f8 <_dtoa_r+0x90c>
 80076ec:	001a      	movs	r2, r3
 80076ee:	0038      	movs	r0, r7
 80076f0:	9905      	ldr	r1, [sp, #20]
 80076f2:	f000 fbc5 	bl	8007e80 <__lshift>
 80076f6:	9005      	str	r0, [sp, #20]
 80076f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	dd05      	ble.n	800770a <_dtoa_r+0x91e>
 80076fe:	0031      	movs	r1, r6
 8007700:	001a      	movs	r2, r3
 8007702:	0038      	movs	r0, r7
 8007704:	f000 fbbc 	bl	8007e80 <__lshift>
 8007708:	0006      	movs	r6, r0
 800770a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800770c:	2b00      	cmp	r3, #0
 800770e:	d026      	beq.n	800775e <_dtoa_r+0x972>
 8007710:	0031      	movs	r1, r6
 8007712:	9805      	ldr	r0, [sp, #20]
 8007714:	f000 fc22 	bl	8007f5c <__mcmp>
 8007718:	2800      	cmp	r0, #0
 800771a:	da20      	bge.n	800775e <_dtoa_r+0x972>
 800771c:	9b02      	ldr	r3, [sp, #8]
 800771e:	220a      	movs	r2, #10
 8007720:	3b01      	subs	r3, #1
 8007722:	9302      	str	r3, [sp, #8]
 8007724:	0038      	movs	r0, r7
 8007726:	2300      	movs	r3, #0
 8007728:	9905      	ldr	r1, [sp, #20]
 800772a:	f000 f9fb 	bl	8007b24 <__multadd>
 800772e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007730:	9005      	str	r0, [sp, #20]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d100      	bne.n	8007738 <_dtoa_r+0x94c>
 8007736:	e166      	b.n	8007a06 <_dtoa_r+0xc1a>
 8007738:	2300      	movs	r3, #0
 800773a:	0029      	movs	r1, r5
 800773c:	220a      	movs	r2, #10
 800773e:	0038      	movs	r0, r7
 8007740:	f000 f9f0 	bl	8007b24 <__multadd>
 8007744:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007746:	0005      	movs	r5, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	dc47      	bgt.n	80077dc <_dtoa_r+0x9f0>
 800774c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800774e:	2b02      	cmp	r3, #2
 8007750:	dc0d      	bgt.n	800776e <_dtoa_r+0x982>
 8007752:	e043      	b.n	80077dc <_dtoa_r+0x9f0>
 8007754:	2a04      	cmp	r2, #4
 8007756:	d0c6      	beq.n	80076e6 <_dtoa_r+0x8fa>
 8007758:	0013      	movs	r3, r2
 800775a:	331c      	adds	r3, #28
 800775c:	e7bc      	b.n	80076d8 <_dtoa_r+0x8ec>
 800775e:	9b07      	ldr	r3, [sp, #28]
 8007760:	2b00      	cmp	r3, #0
 8007762:	dc35      	bgt.n	80077d0 <_dtoa_r+0x9e4>
 8007764:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007766:	2b02      	cmp	r3, #2
 8007768:	dd32      	ble.n	80077d0 <_dtoa_r+0x9e4>
 800776a:	9b07      	ldr	r3, [sp, #28]
 800776c:	930c      	str	r3, [sp, #48]	; 0x30
 800776e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007770:	2b00      	cmp	r3, #0
 8007772:	d10c      	bne.n	800778e <_dtoa_r+0x9a2>
 8007774:	0031      	movs	r1, r6
 8007776:	2205      	movs	r2, #5
 8007778:	0038      	movs	r0, r7
 800777a:	f000 f9d3 	bl	8007b24 <__multadd>
 800777e:	0006      	movs	r6, r0
 8007780:	0001      	movs	r1, r0
 8007782:	9805      	ldr	r0, [sp, #20]
 8007784:	f000 fbea 	bl	8007f5c <__mcmp>
 8007788:	2800      	cmp	r0, #0
 800778a:	dd00      	ble.n	800778e <_dtoa_r+0x9a2>
 800778c:	e5a5      	b.n	80072da <_dtoa_r+0x4ee>
 800778e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007790:	43db      	mvns	r3, r3
 8007792:	9302      	str	r3, [sp, #8]
 8007794:	9b06      	ldr	r3, [sp, #24]
 8007796:	9308      	str	r3, [sp, #32]
 8007798:	2400      	movs	r4, #0
 800779a:	0031      	movs	r1, r6
 800779c:	0038      	movs	r0, r7
 800779e:	f000 f99d 	bl	8007adc <_Bfree>
 80077a2:	2d00      	cmp	r5, #0
 80077a4:	d100      	bne.n	80077a8 <_dtoa_r+0x9bc>
 80077a6:	e6b7      	b.n	8007518 <_dtoa_r+0x72c>
 80077a8:	2c00      	cmp	r4, #0
 80077aa:	d005      	beq.n	80077b8 <_dtoa_r+0x9cc>
 80077ac:	42ac      	cmp	r4, r5
 80077ae:	d003      	beq.n	80077b8 <_dtoa_r+0x9cc>
 80077b0:	0021      	movs	r1, r4
 80077b2:	0038      	movs	r0, r7
 80077b4:	f000 f992 	bl	8007adc <_Bfree>
 80077b8:	0029      	movs	r1, r5
 80077ba:	0038      	movs	r0, r7
 80077bc:	f000 f98e 	bl	8007adc <_Bfree>
 80077c0:	e6aa      	b.n	8007518 <_dtoa_r+0x72c>
 80077c2:	2600      	movs	r6, #0
 80077c4:	0035      	movs	r5, r6
 80077c6:	e7e2      	b.n	800778e <_dtoa_r+0x9a2>
 80077c8:	9602      	str	r6, [sp, #8]
 80077ca:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80077cc:	0035      	movs	r5, r6
 80077ce:	e584      	b.n	80072da <_dtoa_r+0x4ee>
 80077d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d100      	bne.n	80077d8 <_dtoa_r+0x9ec>
 80077d6:	e0ce      	b.n	8007976 <_dtoa_r+0xb8a>
 80077d8:	9b07      	ldr	r3, [sp, #28]
 80077da:	930c      	str	r3, [sp, #48]	; 0x30
 80077dc:	2c00      	cmp	r4, #0
 80077de:	dd05      	ble.n	80077ec <_dtoa_r+0xa00>
 80077e0:	0029      	movs	r1, r5
 80077e2:	0022      	movs	r2, r4
 80077e4:	0038      	movs	r0, r7
 80077e6:	f000 fb4b 	bl	8007e80 <__lshift>
 80077ea:	0005      	movs	r5, r0
 80077ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077ee:	0028      	movs	r0, r5
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d022      	beq.n	800783a <_dtoa_r+0xa4e>
 80077f4:	0038      	movs	r0, r7
 80077f6:	6869      	ldr	r1, [r5, #4]
 80077f8:	f000 f92c 	bl	8007a54 <_Balloc>
 80077fc:	1e04      	subs	r4, r0, #0
 80077fe:	d10f      	bne.n	8007820 <_dtoa_r+0xa34>
 8007800:	0002      	movs	r2, r0
 8007802:	4b05      	ldr	r3, [pc, #20]	; (8007818 <_dtoa_r+0xa2c>)
 8007804:	4905      	ldr	r1, [pc, #20]	; (800781c <_dtoa_r+0xa30>)
 8007806:	f7ff fb06 	bl	8006e16 <_dtoa_r+0x2a>
 800780a:	46c0      	nop			; (mov r8, r8)
 800780c:	40240000 	.word	0x40240000
 8007810:	00000433 	.word	0x00000433
 8007814:	7ff00000 	.word	0x7ff00000
 8007818:	0800ba09 	.word	0x0800ba09
 800781c:	000002ea 	.word	0x000002ea
 8007820:	0029      	movs	r1, r5
 8007822:	692b      	ldr	r3, [r5, #16]
 8007824:	310c      	adds	r1, #12
 8007826:	1c9a      	adds	r2, r3, #2
 8007828:	0092      	lsls	r2, r2, #2
 800782a:	300c      	adds	r0, #12
 800782c:	f7fe fdb2 	bl	8006394 <memcpy>
 8007830:	2201      	movs	r2, #1
 8007832:	0021      	movs	r1, r4
 8007834:	0038      	movs	r0, r7
 8007836:	f000 fb23 	bl	8007e80 <__lshift>
 800783a:	9b06      	ldr	r3, [sp, #24]
 800783c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800783e:	930a      	str	r3, [sp, #40]	; 0x28
 8007840:	3b01      	subs	r3, #1
 8007842:	189b      	adds	r3, r3, r2
 8007844:	2201      	movs	r2, #1
 8007846:	002c      	movs	r4, r5
 8007848:	0005      	movs	r5, r0
 800784a:	9314      	str	r3, [sp, #80]	; 0x50
 800784c:	9b08      	ldr	r3, [sp, #32]
 800784e:	4013      	ands	r3, r2
 8007850:	930f      	str	r3, [sp, #60]	; 0x3c
 8007852:	0031      	movs	r1, r6
 8007854:	9805      	ldr	r0, [sp, #20]
 8007856:	f7ff fa3d 	bl	8006cd4 <quorem>
 800785a:	0003      	movs	r3, r0
 800785c:	0021      	movs	r1, r4
 800785e:	3330      	adds	r3, #48	; 0x30
 8007860:	900d      	str	r0, [sp, #52]	; 0x34
 8007862:	9805      	ldr	r0, [sp, #20]
 8007864:	9307      	str	r3, [sp, #28]
 8007866:	f000 fb79 	bl	8007f5c <__mcmp>
 800786a:	002a      	movs	r2, r5
 800786c:	900e      	str	r0, [sp, #56]	; 0x38
 800786e:	0031      	movs	r1, r6
 8007870:	0038      	movs	r0, r7
 8007872:	f000 fb8f 	bl	8007f94 <__mdiff>
 8007876:	68c3      	ldr	r3, [r0, #12]
 8007878:	9008      	str	r0, [sp, #32]
 800787a:	9310      	str	r3, [sp, #64]	; 0x40
 800787c:	2301      	movs	r3, #1
 800787e:	930c      	str	r3, [sp, #48]	; 0x30
 8007880:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007882:	2b00      	cmp	r3, #0
 8007884:	d104      	bne.n	8007890 <_dtoa_r+0xaa4>
 8007886:	0001      	movs	r1, r0
 8007888:	9805      	ldr	r0, [sp, #20]
 800788a:	f000 fb67 	bl	8007f5c <__mcmp>
 800788e:	900c      	str	r0, [sp, #48]	; 0x30
 8007890:	0038      	movs	r0, r7
 8007892:	9908      	ldr	r1, [sp, #32]
 8007894:	f000 f922 	bl	8007adc <_Bfree>
 8007898:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800789a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800789c:	3301      	adds	r3, #1
 800789e:	9308      	str	r3, [sp, #32]
 80078a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80078a2:	4313      	orrs	r3, r2
 80078a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80078a6:	4313      	orrs	r3, r2
 80078a8:	d10c      	bne.n	80078c4 <_dtoa_r+0xad8>
 80078aa:	9b07      	ldr	r3, [sp, #28]
 80078ac:	2b39      	cmp	r3, #57	; 0x39
 80078ae:	d026      	beq.n	80078fe <_dtoa_r+0xb12>
 80078b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	dd02      	ble.n	80078bc <_dtoa_r+0xad0>
 80078b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078b8:	3331      	adds	r3, #49	; 0x31
 80078ba:	9307      	str	r3, [sp, #28]
 80078bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078be:	9a07      	ldr	r2, [sp, #28]
 80078c0:	701a      	strb	r2, [r3, #0]
 80078c2:	e76a      	b.n	800779a <_dtoa_r+0x9ae>
 80078c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	db04      	blt.n	80078d4 <_dtoa_r+0xae8>
 80078ca:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80078cc:	4313      	orrs	r3, r2
 80078ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80078d0:	4313      	orrs	r3, r2
 80078d2:	d11f      	bne.n	8007914 <_dtoa_r+0xb28>
 80078d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	ddf0      	ble.n	80078bc <_dtoa_r+0xad0>
 80078da:	9905      	ldr	r1, [sp, #20]
 80078dc:	2201      	movs	r2, #1
 80078de:	0038      	movs	r0, r7
 80078e0:	f000 face 	bl	8007e80 <__lshift>
 80078e4:	0031      	movs	r1, r6
 80078e6:	9005      	str	r0, [sp, #20]
 80078e8:	f000 fb38 	bl	8007f5c <__mcmp>
 80078ec:	2800      	cmp	r0, #0
 80078ee:	dc03      	bgt.n	80078f8 <_dtoa_r+0xb0c>
 80078f0:	d1e4      	bne.n	80078bc <_dtoa_r+0xad0>
 80078f2:	9b07      	ldr	r3, [sp, #28]
 80078f4:	07db      	lsls	r3, r3, #31
 80078f6:	d5e1      	bpl.n	80078bc <_dtoa_r+0xad0>
 80078f8:	9b07      	ldr	r3, [sp, #28]
 80078fa:	2b39      	cmp	r3, #57	; 0x39
 80078fc:	d1db      	bne.n	80078b6 <_dtoa_r+0xaca>
 80078fe:	2339      	movs	r3, #57	; 0x39
 8007900:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007902:	7013      	strb	r3, [r2, #0]
 8007904:	9b08      	ldr	r3, [sp, #32]
 8007906:	9308      	str	r3, [sp, #32]
 8007908:	3b01      	subs	r3, #1
 800790a:	781a      	ldrb	r2, [r3, #0]
 800790c:	2a39      	cmp	r2, #57	; 0x39
 800790e:	d068      	beq.n	80079e2 <_dtoa_r+0xbf6>
 8007910:	3201      	adds	r2, #1
 8007912:	e7d5      	b.n	80078c0 <_dtoa_r+0xad4>
 8007914:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007916:	2b00      	cmp	r3, #0
 8007918:	dd07      	ble.n	800792a <_dtoa_r+0xb3e>
 800791a:	9b07      	ldr	r3, [sp, #28]
 800791c:	2b39      	cmp	r3, #57	; 0x39
 800791e:	d0ee      	beq.n	80078fe <_dtoa_r+0xb12>
 8007920:	9b07      	ldr	r3, [sp, #28]
 8007922:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007924:	3301      	adds	r3, #1
 8007926:	7013      	strb	r3, [r2, #0]
 8007928:	e737      	b.n	800779a <_dtoa_r+0x9ae>
 800792a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800792c:	9a07      	ldr	r2, [sp, #28]
 800792e:	701a      	strb	r2, [r3, #0]
 8007930:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007932:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007934:	4293      	cmp	r3, r2
 8007936:	d03e      	beq.n	80079b6 <_dtoa_r+0xbca>
 8007938:	2300      	movs	r3, #0
 800793a:	220a      	movs	r2, #10
 800793c:	9905      	ldr	r1, [sp, #20]
 800793e:	0038      	movs	r0, r7
 8007940:	f000 f8f0 	bl	8007b24 <__multadd>
 8007944:	2300      	movs	r3, #0
 8007946:	9005      	str	r0, [sp, #20]
 8007948:	220a      	movs	r2, #10
 800794a:	0021      	movs	r1, r4
 800794c:	0038      	movs	r0, r7
 800794e:	42ac      	cmp	r4, r5
 8007950:	d106      	bne.n	8007960 <_dtoa_r+0xb74>
 8007952:	f000 f8e7 	bl	8007b24 <__multadd>
 8007956:	0004      	movs	r4, r0
 8007958:	0005      	movs	r5, r0
 800795a:	9b08      	ldr	r3, [sp, #32]
 800795c:	930a      	str	r3, [sp, #40]	; 0x28
 800795e:	e778      	b.n	8007852 <_dtoa_r+0xa66>
 8007960:	f000 f8e0 	bl	8007b24 <__multadd>
 8007964:	0029      	movs	r1, r5
 8007966:	0004      	movs	r4, r0
 8007968:	2300      	movs	r3, #0
 800796a:	220a      	movs	r2, #10
 800796c:	0038      	movs	r0, r7
 800796e:	f000 f8d9 	bl	8007b24 <__multadd>
 8007972:	0005      	movs	r5, r0
 8007974:	e7f1      	b.n	800795a <_dtoa_r+0xb6e>
 8007976:	9b07      	ldr	r3, [sp, #28]
 8007978:	930c      	str	r3, [sp, #48]	; 0x30
 800797a:	2400      	movs	r4, #0
 800797c:	0031      	movs	r1, r6
 800797e:	9805      	ldr	r0, [sp, #20]
 8007980:	f7ff f9a8 	bl	8006cd4 <quorem>
 8007984:	9b06      	ldr	r3, [sp, #24]
 8007986:	3030      	adds	r0, #48	; 0x30
 8007988:	5518      	strb	r0, [r3, r4]
 800798a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800798c:	3401      	adds	r4, #1
 800798e:	9007      	str	r0, [sp, #28]
 8007990:	42a3      	cmp	r3, r4
 8007992:	dd07      	ble.n	80079a4 <_dtoa_r+0xbb8>
 8007994:	2300      	movs	r3, #0
 8007996:	220a      	movs	r2, #10
 8007998:	0038      	movs	r0, r7
 800799a:	9905      	ldr	r1, [sp, #20]
 800799c:	f000 f8c2 	bl	8007b24 <__multadd>
 80079a0:	9005      	str	r0, [sp, #20]
 80079a2:	e7eb      	b.n	800797c <_dtoa_r+0xb90>
 80079a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079a6:	2001      	movs	r0, #1
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	dd00      	ble.n	80079ae <_dtoa_r+0xbc2>
 80079ac:	0018      	movs	r0, r3
 80079ae:	2400      	movs	r4, #0
 80079b0:	9b06      	ldr	r3, [sp, #24]
 80079b2:	181b      	adds	r3, r3, r0
 80079b4:	9308      	str	r3, [sp, #32]
 80079b6:	9905      	ldr	r1, [sp, #20]
 80079b8:	2201      	movs	r2, #1
 80079ba:	0038      	movs	r0, r7
 80079bc:	f000 fa60 	bl	8007e80 <__lshift>
 80079c0:	0031      	movs	r1, r6
 80079c2:	9005      	str	r0, [sp, #20]
 80079c4:	f000 faca 	bl	8007f5c <__mcmp>
 80079c8:	2800      	cmp	r0, #0
 80079ca:	dc9b      	bgt.n	8007904 <_dtoa_r+0xb18>
 80079cc:	d102      	bne.n	80079d4 <_dtoa_r+0xbe8>
 80079ce:	9b07      	ldr	r3, [sp, #28]
 80079d0:	07db      	lsls	r3, r3, #31
 80079d2:	d497      	bmi.n	8007904 <_dtoa_r+0xb18>
 80079d4:	9b08      	ldr	r3, [sp, #32]
 80079d6:	9308      	str	r3, [sp, #32]
 80079d8:	3b01      	subs	r3, #1
 80079da:	781a      	ldrb	r2, [r3, #0]
 80079dc:	2a30      	cmp	r2, #48	; 0x30
 80079de:	d0fa      	beq.n	80079d6 <_dtoa_r+0xbea>
 80079e0:	e6db      	b.n	800779a <_dtoa_r+0x9ae>
 80079e2:	9a06      	ldr	r2, [sp, #24]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d18e      	bne.n	8007906 <_dtoa_r+0xb1a>
 80079e8:	9b02      	ldr	r3, [sp, #8]
 80079ea:	3301      	adds	r3, #1
 80079ec:	9302      	str	r3, [sp, #8]
 80079ee:	2331      	movs	r3, #49	; 0x31
 80079f0:	e799      	b.n	8007926 <_dtoa_r+0xb3a>
 80079f2:	4b09      	ldr	r3, [pc, #36]	; (8007a18 <_dtoa_r+0xc2c>)
 80079f4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80079f6:	9306      	str	r3, [sp, #24]
 80079f8:	4b08      	ldr	r3, [pc, #32]	; (8007a1c <_dtoa_r+0xc30>)
 80079fa:	2a00      	cmp	r2, #0
 80079fc:	d001      	beq.n	8007a02 <_dtoa_r+0xc16>
 80079fe:	f7ff fa3f 	bl	8006e80 <_dtoa_r+0x94>
 8007a02:	f7ff fa3f 	bl	8006e84 <_dtoa_r+0x98>
 8007a06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	dcb6      	bgt.n	800797a <_dtoa_r+0xb8e>
 8007a0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	dd00      	ble.n	8007a14 <_dtoa_r+0xc28>
 8007a12:	e6ac      	b.n	800776e <_dtoa_r+0x982>
 8007a14:	e7b1      	b.n	800797a <_dtoa_r+0xb8e>
 8007a16:	46c0      	nop			; (mov r8, r8)
 8007a18:	0800b98a 	.word	0x0800b98a
 8007a1c:	0800b992 	.word	0x0800b992

08007a20 <_localeconv_r>:
 8007a20:	4800      	ldr	r0, [pc, #0]	; (8007a24 <_localeconv_r+0x4>)
 8007a22:	4770      	bx	lr
 8007a24:	20000178 	.word	0x20000178

08007a28 <malloc>:
 8007a28:	b510      	push	{r4, lr}
 8007a2a:	4b03      	ldr	r3, [pc, #12]	; (8007a38 <malloc+0x10>)
 8007a2c:	0001      	movs	r1, r0
 8007a2e:	6818      	ldr	r0, [r3, #0]
 8007a30:	f000 fc44 	bl	80082bc <_malloc_r>
 8007a34:	bd10      	pop	{r4, pc}
 8007a36:	46c0      	nop			; (mov r8, r8)
 8007a38:	20000024 	.word	0x20000024

08007a3c <memchr>:
 8007a3c:	b2c9      	uxtb	r1, r1
 8007a3e:	1882      	adds	r2, r0, r2
 8007a40:	4290      	cmp	r0, r2
 8007a42:	d101      	bne.n	8007a48 <memchr+0xc>
 8007a44:	2000      	movs	r0, #0
 8007a46:	4770      	bx	lr
 8007a48:	7803      	ldrb	r3, [r0, #0]
 8007a4a:	428b      	cmp	r3, r1
 8007a4c:	d0fb      	beq.n	8007a46 <memchr+0xa>
 8007a4e:	3001      	adds	r0, #1
 8007a50:	e7f6      	b.n	8007a40 <memchr+0x4>
	...

08007a54 <_Balloc>:
 8007a54:	b570      	push	{r4, r5, r6, lr}
 8007a56:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007a58:	0006      	movs	r6, r0
 8007a5a:	000c      	movs	r4, r1
 8007a5c:	2d00      	cmp	r5, #0
 8007a5e:	d10e      	bne.n	8007a7e <_Balloc+0x2a>
 8007a60:	2010      	movs	r0, #16
 8007a62:	f7ff ffe1 	bl	8007a28 <malloc>
 8007a66:	1e02      	subs	r2, r0, #0
 8007a68:	6270      	str	r0, [r6, #36]	; 0x24
 8007a6a:	d104      	bne.n	8007a76 <_Balloc+0x22>
 8007a6c:	2166      	movs	r1, #102	; 0x66
 8007a6e:	4b19      	ldr	r3, [pc, #100]	; (8007ad4 <_Balloc+0x80>)
 8007a70:	4819      	ldr	r0, [pc, #100]	; (8007ad8 <_Balloc+0x84>)
 8007a72:	f000 fe0d 	bl	8008690 <__assert_func>
 8007a76:	6045      	str	r5, [r0, #4]
 8007a78:	6085      	str	r5, [r0, #8]
 8007a7a:	6005      	str	r5, [r0, #0]
 8007a7c:	60c5      	str	r5, [r0, #12]
 8007a7e:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8007a80:	68eb      	ldr	r3, [r5, #12]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d013      	beq.n	8007aae <_Balloc+0x5a>
 8007a86:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007a88:	00a2      	lsls	r2, r4, #2
 8007a8a:	68db      	ldr	r3, [r3, #12]
 8007a8c:	189b      	adds	r3, r3, r2
 8007a8e:	6818      	ldr	r0, [r3, #0]
 8007a90:	2800      	cmp	r0, #0
 8007a92:	d118      	bne.n	8007ac6 <_Balloc+0x72>
 8007a94:	2101      	movs	r1, #1
 8007a96:	000d      	movs	r5, r1
 8007a98:	40a5      	lsls	r5, r4
 8007a9a:	1d6a      	adds	r2, r5, #5
 8007a9c:	0030      	movs	r0, r6
 8007a9e:	0092      	lsls	r2, r2, #2
 8007aa0:	f000 fb74 	bl	800818c <_calloc_r>
 8007aa4:	2800      	cmp	r0, #0
 8007aa6:	d00c      	beq.n	8007ac2 <_Balloc+0x6e>
 8007aa8:	6044      	str	r4, [r0, #4]
 8007aaa:	6085      	str	r5, [r0, #8]
 8007aac:	e00d      	b.n	8007aca <_Balloc+0x76>
 8007aae:	2221      	movs	r2, #33	; 0x21
 8007ab0:	2104      	movs	r1, #4
 8007ab2:	0030      	movs	r0, r6
 8007ab4:	f000 fb6a 	bl	800818c <_calloc_r>
 8007ab8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007aba:	60e8      	str	r0, [r5, #12]
 8007abc:	68db      	ldr	r3, [r3, #12]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d1e1      	bne.n	8007a86 <_Balloc+0x32>
 8007ac2:	2000      	movs	r0, #0
 8007ac4:	bd70      	pop	{r4, r5, r6, pc}
 8007ac6:	6802      	ldr	r2, [r0, #0]
 8007ac8:	601a      	str	r2, [r3, #0]
 8007aca:	2300      	movs	r3, #0
 8007acc:	6103      	str	r3, [r0, #16]
 8007ace:	60c3      	str	r3, [r0, #12]
 8007ad0:	e7f8      	b.n	8007ac4 <_Balloc+0x70>
 8007ad2:	46c0      	nop			; (mov r8, r8)
 8007ad4:	0800b997 	.word	0x0800b997
 8007ad8:	0800ba1a 	.word	0x0800ba1a

08007adc <_Bfree>:
 8007adc:	b570      	push	{r4, r5, r6, lr}
 8007ade:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007ae0:	0005      	movs	r5, r0
 8007ae2:	000c      	movs	r4, r1
 8007ae4:	2e00      	cmp	r6, #0
 8007ae6:	d10e      	bne.n	8007b06 <_Bfree+0x2a>
 8007ae8:	2010      	movs	r0, #16
 8007aea:	f7ff ff9d 	bl	8007a28 <malloc>
 8007aee:	1e02      	subs	r2, r0, #0
 8007af0:	6268      	str	r0, [r5, #36]	; 0x24
 8007af2:	d104      	bne.n	8007afe <_Bfree+0x22>
 8007af4:	218a      	movs	r1, #138	; 0x8a
 8007af6:	4b09      	ldr	r3, [pc, #36]	; (8007b1c <_Bfree+0x40>)
 8007af8:	4809      	ldr	r0, [pc, #36]	; (8007b20 <_Bfree+0x44>)
 8007afa:	f000 fdc9 	bl	8008690 <__assert_func>
 8007afe:	6046      	str	r6, [r0, #4]
 8007b00:	6086      	str	r6, [r0, #8]
 8007b02:	6006      	str	r6, [r0, #0]
 8007b04:	60c6      	str	r6, [r0, #12]
 8007b06:	2c00      	cmp	r4, #0
 8007b08:	d007      	beq.n	8007b1a <_Bfree+0x3e>
 8007b0a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007b0c:	6862      	ldr	r2, [r4, #4]
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	0092      	lsls	r2, r2, #2
 8007b12:	189b      	adds	r3, r3, r2
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	6022      	str	r2, [r4, #0]
 8007b18:	601c      	str	r4, [r3, #0]
 8007b1a:	bd70      	pop	{r4, r5, r6, pc}
 8007b1c:	0800b997 	.word	0x0800b997
 8007b20:	0800ba1a 	.word	0x0800ba1a

08007b24 <__multadd>:
 8007b24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b26:	000e      	movs	r6, r1
 8007b28:	9001      	str	r0, [sp, #4]
 8007b2a:	000c      	movs	r4, r1
 8007b2c:	001d      	movs	r5, r3
 8007b2e:	2000      	movs	r0, #0
 8007b30:	690f      	ldr	r7, [r1, #16]
 8007b32:	3614      	adds	r6, #20
 8007b34:	6833      	ldr	r3, [r6, #0]
 8007b36:	3001      	adds	r0, #1
 8007b38:	b299      	uxth	r1, r3
 8007b3a:	4351      	muls	r1, r2
 8007b3c:	0c1b      	lsrs	r3, r3, #16
 8007b3e:	4353      	muls	r3, r2
 8007b40:	1949      	adds	r1, r1, r5
 8007b42:	0c0d      	lsrs	r5, r1, #16
 8007b44:	195b      	adds	r3, r3, r5
 8007b46:	0c1d      	lsrs	r5, r3, #16
 8007b48:	b289      	uxth	r1, r1
 8007b4a:	041b      	lsls	r3, r3, #16
 8007b4c:	185b      	adds	r3, r3, r1
 8007b4e:	c608      	stmia	r6!, {r3}
 8007b50:	4287      	cmp	r7, r0
 8007b52:	dcef      	bgt.n	8007b34 <__multadd+0x10>
 8007b54:	2d00      	cmp	r5, #0
 8007b56:	d022      	beq.n	8007b9e <__multadd+0x7a>
 8007b58:	68a3      	ldr	r3, [r4, #8]
 8007b5a:	42bb      	cmp	r3, r7
 8007b5c:	dc19      	bgt.n	8007b92 <__multadd+0x6e>
 8007b5e:	6863      	ldr	r3, [r4, #4]
 8007b60:	9801      	ldr	r0, [sp, #4]
 8007b62:	1c59      	adds	r1, r3, #1
 8007b64:	f7ff ff76 	bl	8007a54 <_Balloc>
 8007b68:	1e06      	subs	r6, r0, #0
 8007b6a:	d105      	bne.n	8007b78 <__multadd+0x54>
 8007b6c:	0002      	movs	r2, r0
 8007b6e:	21b5      	movs	r1, #181	; 0xb5
 8007b70:	4b0c      	ldr	r3, [pc, #48]	; (8007ba4 <__multadd+0x80>)
 8007b72:	480d      	ldr	r0, [pc, #52]	; (8007ba8 <__multadd+0x84>)
 8007b74:	f000 fd8c 	bl	8008690 <__assert_func>
 8007b78:	0021      	movs	r1, r4
 8007b7a:	6923      	ldr	r3, [r4, #16]
 8007b7c:	310c      	adds	r1, #12
 8007b7e:	1c9a      	adds	r2, r3, #2
 8007b80:	0092      	lsls	r2, r2, #2
 8007b82:	300c      	adds	r0, #12
 8007b84:	f7fe fc06 	bl	8006394 <memcpy>
 8007b88:	0021      	movs	r1, r4
 8007b8a:	9801      	ldr	r0, [sp, #4]
 8007b8c:	f7ff ffa6 	bl	8007adc <_Bfree>
 8007b90:	0034      	movs	r4, r6
 8007b92:	1d3b      	adds	r3, r7, #4
 8007b94:	009b      	lsls	r3, r3, #2
 8007b96:	18e3      	adds	r3, r4, r3
 8007b98:	605d      	str	r5, [r3, #4]
 8007b9a:	1c7b      	adds	r3, r7, #1
 8007b9c:	6123      	str	r3, [r4, #16]
 8007b9e:	0020      	movs	r0, r4
 8007ba0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007ba2:	46c0      	nop			; (mov r8, r8)
 8007ba4:	0800ba09 	.word	0x0800ba09
 8007ba8:	0800ba1a 	.word	0x0800ba1a

08007bac <__hi0bits>:
 8007bac:	0003      	movs	r3, r0
 8007bae:	0c02      	lsrs	r2, r0, #16
 8007bb0:	2000      	movs	r0, #0
 8007bb2:	4282      	cmp	r2, r0
 8007bb4:	d101      	bne.n	8007bba <__hi0bits+0xe>
 8007bb6:	041b      	lsls	r3, r3, #16
 8007bb8:	3010      	adds	r0, #16
 8007bba:	0e1a      	lsrs	r2, r3, #24
 8007bbc:	d101      	bne.n	8007bc2 <__hi0bits+0x16>
 8007bbe:	3008      	adds	r0, #8
 8007bc0:	021b      	lsls	r3, r3, #8
 8007bc2:	0f1a      	lsrs	r2, r3, #28
 8007bc4:	d101      	bne.n	8007bca <__hi0bits+0x1e>
 8007bc6:	3004      	adds	r0, #4
 8007bc8:	011b      	lsls	r3, r3, #4
 8007bca:	0f9a      	lsrs	r2, r3, #30
 8007bcc:	d101      	bne.n	8007bd2 <__hi0bits+0x26>
 8007bce:	3002      	adds	r0, #2
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	db03      	blt.n	8007bde <__hi0bits+0x32>
 8007bd6:	3001      	adds	r0, #1
 8007bd8:	005b      	lsls	r3, r3, #1
 8007bda:	d400      	bmi.n	8007bde <__hi0bits+0x32>
 8007bdc:	2020      	movs	r0, #32
 8007bde:	4770      	bx	lr

08007be0 <__lo0bits>:
 8007be0:	6803      	ldr	r3, [r0, #0]
 8007be2:	0002      	movs	r2, r0
 8007be4:	2107      	movs	r1, #7
 8007be6:	0018      	movs	r0, r3
 8007be8:	4008      	ands	r0, r1
 8007bea:	420b      	tst	r3, r1
 8007bec:	d00d      	beq.n	8007c0a <__lo0bits+0x2a>
 8007bee:	3906      	subs	r1, #6
 8007bf0:	2000      	movs	r0, #0
 8007bf2:	420b      	tst	r3, r1
 8007bf4:	d105      	bne.n	8007c02 <__lo0bits+0x22>
 8007bf6:	3002      	adds	r0, #2
 8007bf8:	4203      	tst	r3, r0
 8007bfa:	d003      	beq.n	8007c04 <__lo0bits+0x24>
 8007bfc:	40cb      	lsrs	r3, r1
 8007bfe:	0008      	movs	r0, r1
 8007c00:	6013      	str	r3, [r2, #0]
 8007c02:	4770      	bx	lr
 8007c04:	089b      	lsrs	r3, r3, #2
 8007c06:	6013      	str	r3, [r2, #0]
 8007c08:	e7fb      	b.n	8007c02 <__lo0bits+0x22>
 8007c0a:	b299      	uxth	r1, r3
 8007c0c:	2900      	cmp	r1, #0
 8007c0e:	d101      	bne.n	8007c14 <__lo0bits+0x34>
 8007c10:	2010      	movs	r0, #16
 8007c12:	0c1b      	lsrs	r3, r3, #16
 8007c14:	b2d9      	uxtb	r1, r3
 8007c16:	2900      	cmp	r1, #0
 8007c18:	d101      	bne.n	8007c1e <__lo0bits+0x3e>
 8007c1a:	3008      	adds	r0, #8
 8007c1c:	0a1b      	lsrs	r3, r3, #8
 8007c1e:	0719      	lsls	r1, r3, #28
 8007c20:	d101      	bne.n	8007c26 <__lo0bits+0x46>
 8007c22:	3004      	adds	r0, #4
 8007c24:	091b      	lsrs	r3, r3, #4
 8007c26:	0799      	lsls	r1, r3, #30
 8007c28:	d101      	bne.n	8007c2e <__lo0bits+0x4e>
 8007c2a:	3002      	adds	r0, #2
 8007c2c:	089b      	lsrs	r3, r3, #2
 8007c2e:	07d9      	lsls	r1, r3, #31
 8007c30:	d4e9      	bmi.n	8007c06 <__lo0bits+0x26>
 8007c32:	3001      	adds	r0, #1
 8007c34:	085b      	lsrs	r3, r3, #1
 8007c36:	d1e6      	bne.n	8007c06 <__lo0bits+0x26>
 8007c38:	2020      	movs	r0, #32
 8007c3a:	e7e2      	b.n	8007c02 <__lo0bits+0x22>

08007c3c <__i2b>:
 8007c3c:	b510      	push	{r4, lr}
 8007c3e:	000c      	movs	r4, r1
 8007c40:	2101      	movs	r1, #1
 8007c42:	f7ff ff07 	bl	8007a54 <_Balloc>
 8007c46:	2800      	cmp	r0, #0
 8007c48:	d106      	bne.n	8007c58 <__i2b+0x1c>
 8007c4a:	21a0      	movs	r1, #160	; 0xa0
 8007c4c:	0002      	movs	r2, r0
 8007c4e:	4b04      	ldr	r3, [pc, #16]	; (8007c60 <__i2b+0x24>)
 8007c50:	4804      	ldr	r0, [pc, #16]	; (8007c64 <__i2b+0x28>)
 8007c52:	0049      	lsls	r1, r1, #1
 8007c54:	f000 fd1c 	bl	8008690 <__assert_func>
 8007c58:	2301      	movs	r3, #1
 8007c5a:	6144      	str	r4, [r0, #20]
 8007c5c:	6103      	str	r3, [r0, #16]
 8007c5e:	bd10      	pop	{r4, pc}
 8007c60:	0800ba09 	.word	0x0800ba09
 8007c64:	0800ba1a 	.word	0x0800ba1a

08007c68 <__multiply>:
 8007c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c6a:	690b      	ldr	r3, [r1, #16]
 8007c6c:	0014      	movs	r4, r2
 8007c6e:	6912      	ldr	r2, [r2, #16]
 8007c70:	000d      	movs	r5, r1
 8007c72:	b089      	sub	sp, #36	; 0x24
 8007c74:	4293      	cmp	r3, r2
 8007c76:	da01      	bge.n	8007c7c <__multiply+0x14>
 8007c78:	0025      	movs	r5, r4
 8007c7a:	000c      	movs	r4, r1
 8007c7c:	692f      	ldr	r7, [r5, #16]
 8007c7e:	6926      	ldr	r6, [r4, #16]
 8007c80:	6869      	ldr	r1, [r5, #4]
 8007c82:	19bb      	adds	r3, r7, r6
 8007c84:	9302      	str	r3, [sp, #8]
 8007c86:	68ab      	ldr	r3, [r5, #8]
 8007c88:	19ba      	adds	r2, r7, r6
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	da00      	bge.n	8007c90 <__multiply+0x28>
 8007c8e:	3101      	adds	r1, #1
 8007c90:	f7ff fee0 	bl	8007a54 <_Balloc>
 8007c94:	9001      	str	r0, [sp, #4]
 8007c96:	2800      	cmp	r0, #0
 8007c98:	d106      	bne.n	8007ca8 <__multiply+0x40>
 8007c9a:	215e      	movs	r1, #94	; 0x5e
 8007c9c:	0002      	movs	r2, r0
 8007c9e:	4b48      	ldr	r3, [pc, #288]	; (8007dc0 <__multiply+0x158>)
 8007ca0:	4848      	ldr	r0, [pc, #288]	; (8007dc4 <__multiply+0x15c>)
 8007ca2:	31ff      	adds	r1, #255	; 0xff
 8007ca4:	f000 fcf4 	bl	8008690 <__assert_func>
 8007ca8:	9b01      	ldr	r3, [sp, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	3314      	adds	r3, #20
 8007cae:	469c      	mov	ip, r3
 8007cb0:	19bb      	adds	r3, r7, r6
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	4463      	add	r3, ip
 8007cb6:	9303      	str	r3, [sp, #12]
 8007cb8:	4663      	mov	r3, ip
 8007cba:	9903      	ldr	r1, [sp, #12]
 8007cbc:	428b      	cmp	r3, r1
 8007cbe:	d32c      	bcc.n	8007d1a <__multiply+0xb2>
 8007cc0:	002b      	movs	r3, r5
 8007cc2:	0022      	movs	r2, r4
 8007cc4:	3314      	adds	r3, #20
 8007cc6:	00bf      	lsls	r7, r7, #2
 8007cc8:	3214      	adds	r2, #20
 8007cca:	9306      	str	r3, [sp, #24]
 8007ccc:	00b6      	lsls	r6, r6, #2
 8007cce:	19db      	adds	r3, r3, r7
 8007cd0:	9304      	str	r3, [sp, #16]
 8007cd2:	1993      	adds	r3, r2, r6
 8007cd4:	9307      	str	r3, [sp, #28]
 8007cd6:	2304      	movs	r3, #4
 8007cd8:	9305      	str	r3, [sp, #20]
 8007cda:	002b      	movs	r3, r5
 8007cdc:	9904      	ldr	r1, [sp, #16]
 8007cde:	3315      	adds	r3, #21
 8007ce0:	9200      	str	r2, [sp, #0]
 8007ce2:	4299      	cmp	r1, r3
 8007ce4:	d305      	bcc.n	8007cf2 <__multiply+0x8a>
 8007ce6:	1b4b      	subs	r3, r1, r5
 8007ce8:	3b15      	subs	r3, #21
 8007cea:	089b      	lsrs	r3, r3, #2
 8007cec:	3301      	adds	r3, #1
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	9305      	str	r3, [sp, #20]
 8007cf2:	9b07      	ldr	r3, [sp, #28]
 8007cf4:	9a00      	ldr	r2, [sp, #0]
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d311      	bcc.n	8007d1e <__multiply+0xb6>
 8007cfa:	9b02      	ldr	r3, [sp, #8]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	dd06      	ble.n	8007d0e <__multiply+0xa6>
 8007d00:	9b03      	ldr	r3, [sp, #12]
 8007d02:	3b04      	subs	r3, #4
 8007d04:	9303      	str	r3, [sp, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	9300      	str	r3, [sp, #0]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d053      	beq.n	8007db6 <__multiply+0x14e>
 8007d0e:	9b01      	ldr	r3, [sp, #4]
 8007d10:	9a02      	ldr	r2, [sp, #8]
 8007d12:	0018      	movs	r0, r3
 8007d14:	611a      	str	r2, [r3, #16]
 8007d16:	b009      	add	sp, #36	; 0x24
 8007d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d1a:	c304      	stmia	r3!, {r2}
 8007d1c:	e7cd      	b.n	8007cba <__multiply+0x52>
 8007d1e:	9b00      	ldr	r3, [sp, #0]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	b298      	uxth	r0, r3
 8007d24:	2800      	cmp	r0, #0
 8007d26:	d01b      	beq.n	8007d60 <__multiply+0xf8>
 8007d28:	4667      	mov	r7, ip
 8007d2a:	2400      	movs	r4, #0
 8007d2c:	9e06      	ldr	r6, [sp, #24]
 8007d2e:	ce02      	ldmia	r6!, {r1}
 8007d30:	683a      	ldr	r2, [r7, #0]
 8007d32:	b28b      	uxth	r3, r1
 8007d34:	4343      	muls	r3, r0
 8007d36:	b292      	uxth	r2, r2
 8007d38:	189b      	adds	r3, r3, r2
 8007d3a:	191b      	adds	r3, r3, r4
 8007d3c:	0c0c      	lsrs	r4, r1, #16
 8007d3e:	4344      	muls	r4, r0
 8007d40:	683a      	ldr	r2, [r7, #0]
 8007d42:	0c11      	lsrs	r1, r2, #16
 8007d44:	1861      	adds	r1, r4, r1
 8007d46:	0c1c      	lsrs	r4, r3, #16
 8007d48:	1909      	adds	r1, r1, r4
 8007d4a:	0c0c      	lsrs	r4, r1, #16
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	0409      	lsls	r1, r1, #16
 8007d50:	430b      	orrs	r3, r1
 8007d52:	c708      	stmia	r7!, {r3}
 8007d54:	9b04      	ldr	r3, [sp, #16]
 8007d56:	42b3      	cmp	r3, r6
 8007d58:	d8e9      	bhi.n	8007d2e <__multiply+0xc6>
 8007d5a:	4663      	mov	r3, ip
 8007d5c:	9a05      	ldr	r2, [sp, #20]
 8007d5e:	509c      	str	r4, [r3, r2]
 8007d60:	9b00      	ldr	r3, [sp, #0]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	0c1e      	lsrs	r6, r3, #16
 8007d66:	d020      	beq.n	8007daa <__multiply+0x142>
 8007d68:	4663      	mov	r3, ip
 8007d6a:	002c      	movs	r4, r5
 8007d6c:	4660      	mov	r0, ip
 8007d6e:	2700      	movs	r7, #0
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	3414      	adds	r4, #20
 8007d74:	6822      	ldr	r2, [r4, #0]
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	b291      	uxth	r1, r2
 8007d7a:	4371      	muls	r1, r6
 8007d7c:	6802      	ldr	r2, [r0, #0]
 8007d7e:	0c12      	lsrs	r2, r2, #16
 8007d80:	1889      	adds	r1, r1, r2
 8007d82:	19cf      	adds	r7, r1, r7
 8007d84:	0439      	lsls	r1, r7, #16
 8007d86:	430b      	orrs	r3, r1
 8007d88:	6003      	str	r3, [r0, #0]
 8007d8a:	cc02      	ldmia	r4!, {r1}
 8007d8c:	6843      	ldr	r3, [r0, #4]
 8007d8e:	0c09      	lsrs	r1, r1, #16
 8007d90:	4371      	muls	r1, r6
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	0c3f      	lsrs	r7, r7, #16
 8007d96:	18cb      	adds	r3, r1, r3
 8007d98:	9a04      	ldr	r2, [sp, #16]
 8007d9a:	19db      	adds	r3, r3, r7
 8007d9c:	0c1f      	lsrs	r7, r3, #16
 8007d9e:	3004      	adds	r0, #4
 8007da0:	42a2      	cmp	r2, r4
 8007da2:	d8e7      	bhi.n	8007d74 <__multiply+0x10c>
 8007da4:	4662      	mov	r2, ip
 8007da6:	9905      	ldr	r1, [sp, #20]
 8007da8:	5053      	str	r3, [r2, r1]
 8007daa:	9b00      	ldr	r3, [sp, #0]
 8007dac:	3304      	adds	r3, #4
 8007dae:	9300      	str	r3, [sp, #0]
 8007db0:	2304      	movs	r3, #4
 8007db2:	449c      	add	ip, r3
 8007db4:	e79d      	b.n	8007cf2 <__multiply+0x8a>
 8007db6:	9b02      	ldr	r3, [sp, #8]
 8007db8:	3b01      	subs	r3, #1
 8007dba:	9302      	str	r3, [sp, #8]
 8007dbc:	e79d      	b.n	8007cfa <__multiply+0x92>
 8007dbe:	46c0      	nop			; (mov r8, r8)
 8007dc0:	0800ba09 	.word	0x0800ba09
 8007dc4:	0800ba1a 	.word	0x0800ba1a

08007dc8 <__pow5mult>:
 8007dc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007dca:	2303      	movs	r3, #3
 8007dcc:	0015      	movs	r5, r2
 8007dce:	0007      	movs	r7, r0
 8007dd0:	000e      	movs	r6, r1
 8007dd2:	401a      	ands	r2, r3
 8007dd4:	421d      	tst	r5, r3
 8007dd6:	d008      	beq.n	8007dea <__pow5mult+0x22>
 8007dd8:	4925      	ldr	r1, [pc, #148]	; (8007e70 <__pow5mult+0xa8>)
 8007dda:	3a01      	subs	r2, #1
 8007ddc:	0092      	lsls	r2, r2, #2
 8007dde:	5852      	ldr	r2, [r2, r1]
 8007de0:	2300      	movs	r3, #0
 8007de2:	0031      	movs	r1, r6
 8007de4:	f7ff fe9e 	bl	8007b24 <__multadd>
 8007de8:	0006      	movs	r6, r0
 8007dea:	10ad      	asrs	r5, r5, #2
 8007dec:	d03d      	beq.n	8007e6a <__pow5mult+0xa2>
 8007dee:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8007df0:	2c00      	cmp	r4, #0
 8007df2:	d10f      	bne.n	8007e14 <__pow5mult+0x4c>
 8007df4:	2010      	movs	r0, #16
 8007df6:	f7ff fe17 	bl	8007a28 <malloc>
 8007dfa:	1e02      	subs	r2, r0, #0
 8007dfc:	6278      	str	r0, [r7, #36]	; 0x24
 8007dfe:	d105      	bne.n	8007e0c <__pow5mult+0x44>
 8007e00:	21d7      	movs	r1, #215	; 0xd7
 8007e02:	4b1c      	ldr	r3, [pc, #112]	; (8007e74 <__pow5mult+0xac>)
 8007e04:	481c      	ldr	r0, [pc, #112]	; (8007e78 <__pow5mult+0xb0>)
 8007e06:	0049      	lsls	r1, r1, #1
 8007e08:	f000 fc42 	bl	8008690 <__assert_func>
 8007e0c:	6044      	str	r4, [r0, #4]
 8007e0e:	6084      	str	r4, [r0, #8]
 8007e10:	6004      	str	r4, [r0, #0]
 8007e12:	60c4      	str	r4, [r0, #12]
 8007e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e16:	689c      	ldr	r4, [r3, #8]
 8007e18:	9301      	str	r3, [sp, #4]
 8007e1a:	2c00      	cmp	r4, #0
 8007e1c:	d108      	bne.n	8007e30 <__pow5mult+0x68>
 8007e1e:	0038      	movs	r0, r7
 8007e20:	4916      	ldr	r1, [pc, #88]	; (8007e7c <__pow5mult+0xb4>)
 8007e22:	f7ff ff0b 	bl	8007c3c <__i2b>
 8007e26:	9b01      	ldr	r3, [sp, #4]
 8007e28:	0004      	movs	r4, r0
 8007e2a:	6098      	str	r0, [r3, #8]
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	6003      	str	r3, [r0, #0]
 8007e30:	2301      	movs	r3, #1
 8007e32:	421d      	tst	r5, r3
 8007e34:	d00a      	beq.n	8007e4c <__pow5mult+0x84>
 8007e36:	0031      	movs	r1, r6
 8007e38:	0022      	movs	r2, r4
 8007e3a:	0038      	movs	r0, r7
 8007e3c:	f7ff ff14 	bl	8007c68 <__multiply>
 8007e40:	0031      	movs	r1, r6
 8007e42:	9001      	str	r0, [sp, #4]
 8007e44:	0038      	movs	r0, r7
 8007e46:	f7ff fe49 	bl	8007adc <_Bfree>
 8007e4a:	9e01      	ldr	r6, [sp, #4]
 8007e4c:	106d      	asrs	r5, r5, #1
 8007e4e:	d00c      	beq.n	8007e6a <__pow5mult+0xa2>
 8007e50:	6820      	ldr	r0, [r4, #0]
 8007e52:	2800      	cmp	r0, #0
 8007e54:	d107      	bne.n	8007e66 <__pow5mult+0x9e>
 8007e56:	0022      	movs	r2, r4
 8007e58:	0021      	movs	r1, r4
 8007e5a:	0038      	movs	r0, r7
 8007e5c:	f7ff ff04 	bl	8007c68 <__multiply>
 8007e60:	2300      	movs	r3, #0
 8007e62:	6020      	str	r0, [r4, #0]
 8007e64:	6003      	str	r3, [r0, #0]
 8007e66:	0004      	movs	r4, r0
 8007e68:	e7e2      	b.n	8007e30 <__pow5mult+0x68>
 8007e6a:	0030      	movs	r0, r6
 8007e6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007e6e:	46c0      	nop			; (mov r8, r8)
 8007e70:	0800bb68 	.word	0x0800bb68
 8007e74:	0800b997 	.word	0x0800b997
 8007e78:	0800ba1a 	.word	0x0800ba1a
 8007e7c:	00000271 	.word	0x00000271

08007e80 <__lshift>:
 8007e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e82:	000c      	movs	r4, r1
 8007e84:	0017      	movs	r7, r2
 8007e86:	6923      	ldr	r3, [r4, #16]
 8007e88:	1155      	asrs	r5, r2, #5
 8007e8a:	b087      	sub	sp, #28
 8007e8c:	18eb      	adds	r3, r5, r3
 8007e8e:	9302      	str	r3, [sp, #8]
 8007e90:	3301      	adds	r3, #1
 8007e92:	9301      	str	r3, [sp, #4]
 8007e94:	6849      	ldr	r1, [r1, #4]
 8007e96:	68a3      	ldr	r3, [r4, #8]
 8007e98:	9004      	str	r0, [sp, #16]
 8007e9a:	9a01      	ldr	r2, [sp, #4]
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	db10      	blt.n	8007ec2 <__lshift+0x42>
 8007ea0:	9804      	ldr	r0, [sp, #16]
 8007ea2:	f7ff fdd7 	bl	8007a54 <_Balloc>
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	0002      	movs	r2, r0
 8007eaa:	0006      	movs	r6, r0
 8007eac:	0019      	movs	r1, r3
 8007eae:	3214      	adds	r2, #20
 8007eb0:	4298      	cmp	r0, r3
 8007eb2:	d10c      	bne.n	8007ece <__lshift+0x4e>
 8007eb4:	21da      	movs	r1, #218	; 0xda
 8007eb6:	0002      	movs	r2, r0
 8007eb8:	4b26      	ldr	r3, [pc, #152]	; (8007f54 <__lshift+0xd4>)
 8007eba:	4827      	ldr	r0, [pc, #156]	; (8007f58 <__lshift+0xd8>)
 8007ebc:	31ff      	adds	r1, #255	; 0xff
 8007ebe:	f000 fbe7 	bl	8008690 <__assert_func>
 8007ec2:	3101      	adds	r1, #1
 8007ec4:	005b      	lsls	r3, r3, #1
 8007ec6:	e7e8      	b.n	8007e9a <__lshift+0x1a>
 8007ec8:	0098      	lsls	r0, r3, #2
 8007eca:	5011      	str	r1, [r2, r0]
 8007ecc:	3301      	adds	r3, #1
 8007ece:	42ab      	cmp	r3, r5
 8007ed0:	dbfa      	blt.n	8007ec8 <__lshift+0x48>
 8007ed2:	43eb      	mvns	r3, r5
 8007ed4:	17db      	asrs	r3, r3, #31
 8007ed6:	401d      	ands	r5, r3
 8007ed8:	211f      	movs	r1, #31
 8007eda:	0023      	movs	r3, r4
 8007edc:	0038      	movs	r0, r7
 8007ede:	00ad      	lsls	r5, r5, #2
 8007ee0:	1955      	adds	r5, r2, r5
 8007ee2:	6922      	ldr	r2, [r4, #16]
 8007ee4:	3314      	adds	r3, #20
 8007ee6:	0092      	lsls	r2, r2, #2
 8007ee8:	4008      	ands	r0, r1
 8007eea:	4684      	mov	ip, r0
 8007eec:	189a      	adds	r2, r3, r2
 8007eee:	420f      	tst	r7, r1
 8007ef0:	d02a      	beq.n	8007f48 <__lshift+0xc8>
 8007ef2:	3101      	adds	r1, #1
 8007ef4:	1a09      	subs	r1, r1, r0
 8007ef6:	9105      	str	r1, [sp, #20]
 8007ef8:	2100      	movs	r1, #0
 8007efa:	9503      	str	r5, [sp, #12]
 8007efc:	4667      	mov	r7, ip
 8007efe:	6818      	ldr	r0, [r3, #0]
 8007f00:	40b8      	lsls	r0, r7
 8007f02:	4301      	orrs	r1, r0
 8007f04:	9803      	ldr	r0, [sp, #12]
 8007f06:	c002      	stmia	r0!, {r1}
 8007f08:	cb02      	ldmia	r3!, {r1}
 8007f0a:	9003      	str	r0, [sp, #12]
 8007f0c:	9805      	ldr	r0, [sp, #20]
 8007f0e:	40c1      	lsrs	r1, r0
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d8f3      	bhi.n	8007efc <__lshift+0x7c>
 8007f14:	0020      	movs	r0, r4
 8007f16:	3015      	adds	r0, #21
 8007f18:	2304      	movs	r3, #4
 8007f1a:	4282      	cmp	r2, r0
 8007f1c:	d304      	bcc.n	8007f28 <__lshift+0xa8>
 8007f1e:	1b13      	subs	r3, r2, r4
 8007f20:	3b15      	subs	r3, #21
 8007f22:	089b      	lsrs	r3, r3, #2
 8007f24:	3301      	adds	r3, #1
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	50e9      	str	r1, [r5, r3]
 8007f2a:	2900      	cmp	r1, #0
 8007f2c:	d002      	beq.n	8007f34 <__lshift+0xb4>
 8007f2e:	9b02      	ldr	r3, [sp, #8]
 8007f30:	3302      	adds	r3, #2
 8007f32:	9301      	str	r3, [sp, #4]
 8007f34:	9b01      	ldr	r3, [sp, #4]
 8007f36:	9804      	ldr	r0, [sp, #16]
 8007f38:	3b01      	subs	r3, #1
 8007f3a:	0021      	movs	r1, r4
 8007f3c:	6133      	str	r3, [r6, #16]
 8007f3e:	f7ff fdcd 	bl	8007adc <_Bfree>
 8007f42:	0030      	movs	r0, r6
 8007f44:	b007      	add	sp, #28
 8007f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f48:	cb02      	ldmia	r3!, {r1}
 8007f4a:	c502      	stmia	r5!, {r1}
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d8fb      	bhi.n	8007f48 <__lshift+0xc8>
 8007f50:	e7f0      	b.n	8007f34 <__lshift+0xb4>
 8007f52:	46c0      	nop			; (mov r8, r8)
 8007f54:	0800ba09 	.word	0x0800ba09
 8007f58:	0800ba1a 	.word	0x0800ba1a

08007f5c <__mcmp>:
 8007f5c:	6902      	ldr	r2, [r0, #16]
 8007f5e:	690b      	ldr	r3, [r1, #16]
 8007f60:	b530      	push	{r4, r5, lr}
 8007f62:	0004      	movs	r4, r0
 8007f64:	1ad0      	subs	r0, r2, r3
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d10d      	bne.n	8007f86 <__mcmp+0x2a>
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	3414      	adds	r4, #20
 8007f6e:	3114      	adds	r1, #20
 8007f70:	18e2      	adds	r2, r4, r3
 8007f72:	18c9      	adds	r1, r1, r3
 8007f74:	3a04      	subs	r2, #4
 8007f76:	3904      	subs	r1, #4
 8007f78:	6815      	ldr	r5, [r2, #0]
 8007f7a:	680b      	ldr	r3, [r1, #0]
 8007f7c:	429d      	cmp	r5, r3
 8007f7e:	d003      	beq.n	8007f88 <__mcmp+0x2c>
 8007f80:	2001      	movs	r0, #1
 8007f82:	429d      	cmp	r5, r3
 8007f84:	d303      	bcc.n	8007f8e <__mcmp+0x32>
 8007f86:	bd30      	pop	{r4, r5, pc}
 8007f88:	4294      	cmp	r4, r2
 8007f8a:	d3f3      	bcc.n	8007f74 <__mcmp+0x18>
 8007f8c:	e7fb      	b.n	8007f86 <__mcmp+0x2a>
 8007f8e:	4240      	negs	r0, r0
 8007f90:	e7f9      	b.n	8007f86 <__mcmp+0x2a>
	...

08007f94 <__mdiff>:
 8007f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f96:	000e      	movs	r6, r1
 8007f98:	0007      	movs	r7, r0
 8007f9a:	0011      	movs	r1, r2
 8007f9c:	0030      	movs	r0, r6
 8007f9e:	b087      	sub	sp, #28
 8007fa0:	0014      	movs	r4, r2
 8007fa2:	f7ff ffdb 	bl	8007f5c <__mcmp>
 8007fa6:	1e05      	subs	r5, r0, #0
 8007fa8:	d110      	bne.n	8007fcc <__mdiff+0x38>
 8007faa:	0001      	movs	r1, r0
 8007fac:	0038      	movs	r0, r7
 8007fae:	f7ff fd51 	bl	8007a54 <_Balloc>
 8007fb2:	1e02      	subs	r2, r0, #0
 8007fb4:	d104      	bne.n	8007fc0 <__mdiff+0x2c>
 8007fb6:	4b40      	ldr	r3, [pc, #256]	; (80080b8 <__mdiff+0x124>)
 8007fb8:	4940      	ldr	r1, [pc, #256]	; (80080bc <__mdiff+0x128>)
 8007fba:	4841      	ldr	r0, [pc, #260]	; (80080c0 <__mdiff+0x12c>)
 8007fbc:	f000 fb68 	bl	8008690 <__assert_func>
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	6145      	str	r5, [r0, #20]
 8007fc4:	6103      	str	r3, [r0, #16]
 8007fc6:	0010      	movs	r0, r2
 8007fc8:	b007      	add	sp, #28
 8007fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fcc:	2301      	movs	r3, #1
 8007fce:	9301      	str	r3, [sp, #4]
 8007fd0:	2800      	cmp	r0, #0
 8007fd2:	db04      	blt.n	8007fde <__mdiff+0x4a>
 8007fd4:	0023      	movs	r3, r4
 8007fd6:	0034      	movs	r4, r6
 8007fd8:	001e      	movs	r6, r3
 8007fda:	2300      	movs	r3, #0
 8007fdc:	9301      	str	r3, [sp, #4]
 8007fde:	0038      	movs	r0, r7
 8007fe0:	6861      	ldr	r1, [r4, #4]
 8007fe2:	f7ff fd37 	bl	8007a54 <_Balloc>
 8007fe6:	1e02      	subs	r2, r0, #0
 8007fe8:	d103      	bne.n	8007ff2 <__mdiff+0x5e>
 8007fea:	2190      	movs	r1, #144	; 0x90
 8007fec:	4b32      	ldr	r3, [pc, #200]	; (80080b8 <__mdiff+0x124>)
 8007fee:	0089      	lsls	r1, r1, #2
 8007ff0:	e7e3      	b.n	8007fba <__mdiff+0x26>
 8007ff2:	9b01      	ldr	r3, [sp, #4]
 8007ff4:	2700      	movs	r7, #0
 8007ff6:	60c3      	str	r3, [r0, #12]
 8007ff8:	6920      	ldr	r0, [r4, #16]
 8007ffa:	3414      	adds	r4, #20
 8007ffc:	9401      	str	r4, [sp, #4]
 8007ffe:	9b01      	ldr	r3, [sp, #4]
 8008000:	0084      	lsls	r4, r0, #2
 8008002:	191b      	adds	r3, r3, r4
 8008004:	0034      	movs	r4, r6
 8008006:	9302      	str	r3, [sp, #8]
 8008008:	6933      	ldr	r3, [r6, #16]
 800800a:	3414      	adds	r4, #20
 800800c:	0099      	lsls	r1, r3, #2
 800800e:	1863      	adds	r3, r4, r1
 8008010:	9303      	str	r3, [sp, #12]
 8008012:	0013      	movs	r3, r2
 8008014:	3314      	adds	r3, #20
 8008016:	469c      	mov	ip, r3
 8008018:	9305      	str	r3, [sp, #20]
 800801a:	9b01      	ldr	r3, [sp, #4]
 800801c:	9304      	str	r3, [sp, #16]
 800801e:	9b04      	ldr	r3, [sp, #16]
 8008020:	cc02      	ldmia	r4!, {r1}
 8008022:	cb20      	ldmia	r3!, {r5}
 8008024:	9304      	str	r3, [sp, #16]
 8008026:	b2ab      	uxth	r3, r5
 8008028:	19df      	adds	r7, r3, r7
 800802a:	b28b      	uxth	r3, r1
 800802c:	1afb      	subs	r3, r7, r3
 800802e:	0c09      	lsrs	r1, r1, #16
 8008030:	0c2d      	lsrs	r5, r5, #16
 8008032:	1a6d      	subs	r5, r5, r1
 8008034:	1419      	asrs	r1, r3, #16
 8008036:	186d      	adds	r5, r5, r1
 8008038:	4661      	mov	r1, ip
 800803a:	142f      	asrs	r7, r5, #16
 800803c:	b29b      	uxth	r3, r3
 800803e:	042d      	lsls	r5, r5, #16
 8008040:	432b      	orrs	r3, r5
 8008042:	c108      	stmia	r1!, {r3}
 8008044:	9b03      	ldr	r3, [sp, #12]
 8008046:	468c      	mov	ip, r1
 8008048:	42a3      	cmp	r3, r4
 800804a:	d8e8      	bhi.n	800801e <__mdiff+0x8a>
 800804c:	0031      	movs	r1, r6
 800804e:	9c03      	ldr	r4, [sp, #12]
 8008050:	3115      	adds	r1, #21
 8008052:	2304      	movs	r3, #4
 8008054:	428c      	cmp	r4, r1
 8008056:	d304      	bcc.n	8008062 <__mdiff+0xce>
 8008058:	1ba3      	subs	r3, r4, r6
 800805a:	3b15      	subs	r3, #21
 800805c:	089b      	lsrs	r3, r3, #2
 800805e:	3301      	adds	r3, #1
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	9901      	ldr	r1, [sp, #4]
 8008064:	18cc      	adds	r4, r1, r3
 8008066:	9905      	ldr	r1, [sp, #20]
 8008068:	0026      	movs	r6, r4
 800806a:	18cb      	adds	r3, r1, r3
 800806c:	469c      	mov	ip, r3
 800806e:	9902      	ldr	r1, [sp, #8]
 8008070:	428e      	cmp	r6, r1
 8008072:	d310      	bcc.n	8008096 <__mdiff+0x102>
 8008074:	9e02      	ldr	r6, [sp, #8]
 8008076:	1ee1      	subs	r1, r4, #3
 8008078:	2500      	movs	r5, #0
 800807a:	428e      	cmp	r6, r1
 800807c:	d304      	bcc.n	8008088 <__mdiff+0xf4>
 800807e:	0031      	movs	r1, r6
 8008080:	3103      	adds	r1, #3
 8008082:	1b0c      	subs	r4, r1, r4
 8008084:	08a4      	lsrs	r4, r4, #2
 8008086:	00a5      	lsls	r5, r4, #2
 8008088:	195b      	adds	r3, r3, r5
 800808a:	3b04      	subs	r3, #4
 800808c:	6819      	ldr	r1, [r3, #0]
 800808e:	2900      	cmp	r1, #0
 8008090:	d00f      	beq.n	80080b2 <__mdiff+0x11e>
 8008092:	6110      	str	r0, [r2, #16]
 8008094:	e797      	b.n	8007fc6 <__mdiff+0x32>
 8008096:	ce02      	ldmia	r6!, {r1}
 8008098:	b28d      	uxth	r5, r1
 800809a:	19ed      	adds	r5, r5, r7
 800809c:	0c0f      	lsrs	r7, r1, #16
 800809e:	1429      	asrs	r1, r5, #16
 80080a0:	1879      	adds	r1, r7, r1
 80080a2:	140f      	asrs	r7, r1, #16
 80080a4:	b2ad      	uxth	r5, r5
 80080a6:	0409      	lsls	r1, r1, #16
 80080a8:	430d      	orrs	r5, r1
 80080aa:	4661      	mov	r1, ip
 80080ac:	c120      	stmia	r1!, {r5}
 80080ae:	468c      	mov	ip, r1
 80080b0:	e7dd      	b.n	800806e <__mdiff+0xda>
 80080b2:	3801      	subs	r0, #1
 80080b4:	e7e9      	b.n	800808a <__mdiff+0xf6>
 80080b6:	46c0      	nop			; (mov r8, r8)
 80080b8:	0800ba09 	.word	0x0800ba09
 80080bc:	00000232 	.word	0x00000232
 80080c0:	0800ba1a 	.word	0x0800ba1a

080080c4 <__d2b>:
 80080c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080c6:	2101      	movs	r1, #1
 80080c8:	0014      	movs	r4, r2
 80080ca:	001e      	movs	r6, r3
 80080cc:	9f08      	ldr	r7, [sp, #32]
 80080ce:	f7ff fcc1 	bl	8007a54 <_Balloc>
 80080d2:	1e05      	subs	r5, r0, #0
 80080d4:	d105      	bne.n	80080e2 <__d2b+0x1e>
 80080d6:	0002      	movs	r2, r0
 80080d8:	4b26      	ldr	r3, [pc, #152]	; (8008174 <__d2b+0xb0>)
 80080da:	4927      	ldr	r1, [pc, #156]	; (8008178 <__d2b+0xb4>)
 80080dc:	4827      	ldr	r0, [pc, #156]	; (800817c <__d2b+0xb8>)
 80080de:	f000 fad7 	bl	8008690 <__assert_func>
 80080e2:	0333      	lsls	r3, r6, #12
 80080e4:	0076      	lsls	r6, r6, #1
 80080e6:	0b1b      	lsrs	r3, r3, #12
 80080e8:	0d76      	lsrs	r6, r6, #21
 80080ea:	d124      	bne.n	8008136 <__d2b+0x72>
 80080ec:	9301      	str	r3, [sp, #4]
 80080ee:	2c00      	cmp	r4, #0
 80080f0:	d027      	beq.n	8008142 <__d2b+0x7e>
 80080f2:	4668      	mov	r0, sp
 80080f4:	9400      	str	r4, [sp, #0]
 80080f6:	f7ff fd73 	bl	8007be0 <__lo0bits>
 80080fa:	9c00      	ldr	r4, [sp, #0]
 80080fc:	2800      	cmp	r0, #0
 80080fe:	d01e      	beq.n	800813e <__d2b+0x7a>
 8008100:	9b01      	ldr	r3, [sp, #4]
 8008102:	2120      	movs	r1, #32
 8008104:	001a      	movs	r2, r3
 8008106:	1a09      	subs	r1, r1, r0
 8008108:	408a      	lsls	r2, r1
 800810a:	40c3      	lsrs	r3, r0
 800810c:	4322      	orrs	r2, r4
 800810e:	616a      	str	r2, [r5, #20]
 8008110:	9301      	str	r3, [sp, #4]
 8008112:	9c01      	ldr	r4, [sp, #4]
 8008114:	61ac      	str	r4, [r5, #24]
 8008116:	1e63      	subs	r3, r4, #1
 8008118:	419c      	sbcs	r4, r3
 800811a:	3401      	adds	r4, #1
 800811c:	612c      	str	r4, [r5, #16]
 800811e:	2e00      	cmp	r6, #0
 8008120:	d018      	beq.n	8008154 <__d2b+0x90>
 8008122:	4b17      	ldr	r3, [pc, #92]	; (8008180 <__d2b+0xbc>)
 8008124:	18f6      	adds	r6, r6, r3
 8008126:	2335      	movs	r3, #53	; 0x35
 8008128:	1836      	adds	r6, r6, r0
 800812a:	1a18      	subs	r0, r3, r0
 800812c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800812e:	603e      	str	r6, [r7, #0]
 8008130:	6018      	str	r0, [r3, #0]
 8008132:	0028      	movs	r0, r5
 8008134:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008136:	2280      	movs	r2, #128	; 0x80
 8008138:	0352      	lsls	r2, r2, #13
 800813a:	4313      	orrs	r3, r2
 800813c:	e7d6      	b.n	80080ec <__d2b+0x28>
 800813e:	616c      	str	r4, [r5, #20]
 8008140:	e7e7      	b.n	8008112 <__d2b+0x4e>
 8008142:	a801      	add	r0, sp, #4
 8008144:	f7ff fd4c 	bl	8007be0 <__lo0bits>
 8008148:	2401      	movs	r4, #1
 800814a:	9b01      	ldr	r3, [sp, #4]
 800814c:	612c      	str	r4, [r5, #16]
 800814e:	616b      	str	r3, [r5, #20]
 8008150:	3020      	adds	r0, #32
 8008152:	e7e4      	b.n	800811e <__d2b+0x5a>
 8008154:	4b0b      	ldr	r3, [pc, #44]	; (8008184 <__d2b+0xc0>)
 8008156:	18c0      	adds	r0, r0, r3
 8008158:	4b0b      	ldr	r3, [pc, #44]	; (8008188 <__d2b+0xc4>)
 800815a:	6038      	str	r0, [r7, #0]
 800815c:	18e3      	adds	r3, r4, r3
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	18eb      	adds	r3, r5, r3
 8008162:	6958      	ldr	r0, [r3, #20]
 8008164:	f7ff fd22 	bl	8007bac <__hi0bits>
 8008168:	0164      	lsls	r4, r4, #5
 800816a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800816c:	1a24      	subs	r4, r4, r0
 800816e:	601c      	str	r4, [r3, #0]
 8008170:	e7df      	b.n	8008132 <__d2b+0x6e>
 8008172:	46c0      	nop			; (mov r8, r8)
 8008174:	0800ba09 	.word	0x0800ba09
 8008178:	0000030a 	.word	0x0000030a
 800817c:	0800ba1a 	.word	0x0800ba1a
 8008180:	fffffbcd 	.word	0xfffffbcd
 8008184:	fffffbce 	.word	0xfffffbce
 8008188:	3fffffff 	.word	0x3fffffff

0800818c <_calloc_r>:
 800818c:	b570      	push	{r4, r5, r6, lr}
 800818e:	0c13      	lsrs	r3, r2, #16
 8008190:	0c0d      	lsrs	r5, r1, #16
 8008192:	d11e      	bne.n	80081d2 <_calloc_r+0x46>
 8008194:	2b00      	cmp	r3, #0
 8008196:	d10c      	bne.n	80081b2 <_calloc_r+0x26>
 8008198:	b289      	uxth	r1, r1
 800819a:	b294      	uxth	r4, r2
 800819c:	434c      	muls	r4, r1
 800819e:	0021      	movs	r1, r4
 80081a0:	f000 f88c 	bl	80082bc <_malloc_r>
 80081a4:	1e05      	subs	r5, r0, #0
 80081a6:	d01b      	beq.n	80081e0 <_calloc_r+0x54>
 80081a8:	0022      	movs	r2, r4
 80081aa:	2100      	movs	r1, #0
 80081ac:	f7fe f8fb 	bl	80063a6 <memset>
 80081b0:	e016      	b.n	80081e0 <_calloc_r+0x54>
 80081b2:	1c1d      	adds	r5, r3, #0
 80081b4:	1c0b      	adds	r3, r1, #0
 80081b6:	b292      	uxth	r2, r2
 80081b8:	b289      	uxth	r1, r1
 80081ba:	b29c      	uxth	r4, r3
 80081bc:	4351      	muls	r1, r2
 80081be:	b2ab      	uxth	r3, r5
 80081c0:	4363      	muls	r3, r4
 80081c2:	0c0c      	lsrs	r4, r1, #16
 80081c4:	191c      	adds	r4, r3, r4
 80081c6:	0c22      	lsrs	r2, r4, #16
 80081c8:	d107      	bne.n	80081da <_calloc_r+0x4e>
 80081ca:	0424      	lsls	r4, r4, #16
 80081cc:	b289      	uxth	r1, r1
 80081ce:	430c      	orrs	r4, r1
 80081d0:	e7e5      	b.n	800819e <_calloc_r+0x12>
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d101      	bne.n	80081da <_calloc_r+0x4e>
 80081d6:	1c13      	adds	r3, r2, #0
 80081d8:	e7ed      	b.n	80081b6 <_calloc_r+0x2a>
 80081da:	230c      	movs	r3, #12
 80081dc:	2500      	movs	r5, #0
 80081de:	6003      	str	r3, [r0, #0]
 80081e0:	0028      	movs	r0, r5
 80081e2:	bd70      	pop	{r4, r5, r6, pc}

080081e4 <_free_r>:
 80081e4:	b570      	push	{r4, r5, r6, lr}
 80081e6:	0005      	movs	r5, r0
 80081e8:	2900      	cmp	r1, #0
 80081ea:	d010      	beq.n	800820e <_free_r+0x2a>
 80081ec:	1f0c      	subs	r4, r1, #4
 80081ee:	6823      	ldr	r3, [r4, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	da00      	bge.n	80081f6 <_free_r+0x12>
 80081f4:	18e4      	adds	r4, r4, r3
 80081f6:	0028      	movs	r0, r5
 80081f8:	f000 fa9e 	bl	8008738 <__malloc_lock>
 80081fc:	4a1d      	ldr	r2, [pc, #116]	; (8008274 <_free_r+0x90>)
 80081fe:	6813      	ldr	r3, [r2, #0]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d105      	bne.n	8008210 <_free_r+0x2c>
 8008204:	6063      	str	r3, [r4, #4]
 8008206:	6014      	str	r4, [r2, #0]
 8008208:	0028      	movs	r0, r5
 800820a:	f000 fa9d 	bl	8008748 <__malloc_unlock>
 800820e:	bd70      	pop	{r4, r5, r6, pc}
 8008210:	42a3      	cmp	r3, r4
 8008212:	d908      	bls.n	8008226 <_free_r+0x42>
 8008214:	6821      	ldr	r1, [r4, #0]
 8008216:	1860      	adds	r0, r4, r1
 8008218:	4283      	cmp	r3, r0
 800821a:	d1f3      	bne.n	8008204 <_free_r+0x20>
 800821c:	6818      	ldr	r0, [r3, #0]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	1841      	adds	r1, r0, r1
 8008222:	6021      	str	r1, [r4, #0]
 8008224:	e7ee      	b.n	8008204 <_free_r+0x20>
 8008226:	001a      	movs	r2, r3
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d001      	beq.n	8008232 <_free_r+0x4e>
 800822e:	42a3      	cmp	r3, r4
 8008230:	d9f9      	bls.n	8008226 <_free_r+0x42>
 8008232:	6811      	ldr	r1, [r2, #0]
 8008234:	1850      	adds	r0, r2, r1
 8008236:	42a0      	cmp	r0, r4
 8008238:	d10b      	bne.n	8008252 <_free_r+0x6e>
 800823a:	6820      	ldr	r0, [r4, #0]
 800823c:	1809      	adds	r1, r1, r0
 800823e:	1850      	adds	r0, r2, r1
 8008240:	6011      	str	r1, [r2, #0]
 8008242:	4283      	cmp	r3, r0
 8008244:	d1e0      	bne.n	8008208 <_free_r+0x24>
 8008246:	6818      	ldr	r0, [r3, #0]
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	1841      	adds	r1, r0, r1
 800824c:	6011      	str	r1, [r2, #0]
 800824e:	6053      	str	r3, [r2, #4]
 8008250:	e7da      	b.n	8008208 <_free_r+0x24>
 8008252:	42a0      	cmp	r0, r4
 8008254:	d902      	bls.n	800825c <_free_r+0x78>
 8008256:	230c      	movs	r3, #12
 8008258:	602b      	str	r3, [r5, #0]
 800825a:	e7d5      	b.n	8008208 <_free_r+0x24>
 800825c:	6821      	ldr	r1, [r4, #0]
 800825e:	1860      	adds	r0, r4, r1
 8008260:	4283      	cmp	r3, r0
 8008262:	d103      	bne.n	800826c <_free_r+0x88>
 8008264:	6818      	ldr	r0, [r3, #0]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	1841      	adds	r1, r0, r1
 800826a:	6021      	str	r1, [r4, #0]
 800826c:	6063      	str	r3, [r4, #4]
 800826e:	6054      	str	r4, [r2, #4]
 8008270:	e7ca      	b.n	8008208 <_free_r+0x24>
 8008272:	46c0      	nop			; (mov r8, r8)
 8008274:	20000790 	.word	0x20000790

08008278 <sbrk_aligned>:
 8008278:	b570      	push	{r4, r5, r6, lr}
 800827a:	4e0f      	ldr	r6, [pc, #60]	; (80082b8 <sbrk_aligned+0x40>)
 800827c:	000d      	movs	r5, r1
 800827e:	6831      	ldr	r1, [r6, #0]
 8008280:	0004      	movs	r4, r0
 8008282:	2900      	cmp	r1, #0
 8008284:	d102      	bne.n	800828c <sbrk_aligned+0x14>
 8008286:	f000 f9f1 	bl	800866c <_sbrk_r>
 800828a:	6030      	str	r0, [r6, #0]
 800828c:	0029      	movs	r1, r5
 800828e:	0020      	movs	r0, r4
 8008290:	f000 f9ec 	bl	800866c <_sbrk_r>
 8008294:	1c43      	adds	r3, r0, #1
 8008296:	d00a      	beq.n	80082ae <sbrk_aligned+0x36>
 8008298:	2303      	movs	r3, #3
 800829a:	1cc5      	adds	r5, r0, #3
 800829c:	439d      	bics	r5, r3
 800829e:	42a8      	cmp	r0, r5
 80082a0:	d007      	beq.n	80082b2 <sbrk_aligned+0x3a>
 80082a2:	1a29      	subs	r1, r5, r0
 80082a4:	0020      	movs	r0, r4
 80082a6:	f000 f9e1 	bl	800866c <_sbrk_r>
 80082aa:	1c43      	adds	r3, r0, #1
 80082ac:	d101      	bne.n	80082b2 <sbrk_aligned+0x3a>
 80082ae:	2501      	movs	r5, #1
 80082b0:	426d      	negs	r5, r5
 80082b2:	0028      	movs	r0, r5
 80082b4:	bd70      	pop	{r4, r5, r6, pc}
 80082b6:	46c0      	nop			; (mov r8, r8)
 80082b8:	20000794 	.word	0x20000794

080082bc <_malloc_r>:
 80082bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082be:	2203      	movs	r2, #3
 80082c0:	1ccb      	adds	r3, r1, #3
 80082c2:	4393      	bics	r3, r2
 80082c4:	3308      	adds	r3, #8
 80082c6:	0006      	movs	r6, r0
 80082c8:	001f      	movs	r7, r3
 80082ca:	2b0c      	cmp	r3, #12
 80082cc:	d232      	bcs.n	8008334 <_malloc_r+0x78>
 80082ce:	270c      	movs	r7, #12
 80082d0:	42b9      	cmp	r1, r7
 80082d2:	d831      	bhi.n	8008338 <_malloc_r+0x7c>
 80082d4:	0030      	movs	r0, r6
 80082d6:	f000 fa2f 	bl	8008738 <__malloc_lock>
 80082da:	4d32      	ldr	r5, [pc, #200]	; (80083a4 <_malloc_r+0xe8>)
 80082dc:	682b      	ldr	r3, [r5, #0]
 80082de:	001c      	movs	r4, r3
 80082e0:	2c00      	cmp	r4, #0
 80082e2:	d12e      	bne.n	8008342 <_malloc_r+0x86>
 80082e4:	0039      	movs	r1, r7
 80082e6:	0030      	movs	r0, r6
 80082e8:	f7ff ffc6 	bl	8008278 <sbrk_aligned>
 80082ec:	0004      	movs	r4, r0
 80082ee:	1c43      	adds	r3, r0, #1
 80082f0:	d11e      	bne.n	8008330 <_malloc_r+0x74>
 80082f2:	682c      	ldr	r4, [r5, #0]
 80082f4:	0025      	movs	r5, r4
 80082f6:	2d00      	cmp	r5, #0
 80082f8:	d14a      	bne.n	8008390 <_malloc_r+0xd4>
 80082fa:	6823      	ldr	r3, [r4, #0]
 80082fc:	0029      	movs	r1, r5
 80082fe:	18e3      	adds	r3, r4, r3
 8008300:	0030      	movs	r0, r6
 8008302:	9301      	str	r3, [sp, #4]
 8008304:	f000 f9b2 	bl	800866c <_sbrk_r>
 8008308:	9b01      	ldr	r3, [sp, #4]
 800830a:	4283      	cmp	r3, r0
 800830c:	d143      	bne.n	8008396 <_malloc_r+0xda>
 800830e:	6823      	ldr	r3, [r4, #0]
 8008310:	3703      	adds	r7, #3
 8008312:	1aff      	subs	r7, r7, r3
 8008314:	2303      	movs	r3, #3
 8008316:	439f      	bics	r7, r3
 8008318:	3708      	adds	r7, #8
 800831a:	2f0c      	cmp	r7, #12
 800831c:	d200      	bcs.n	8008320 <_malloc_r+0x64>
 800831e:	270c      	movs	r7, #12
 8008320:	0039      	movs	r1, r7
 8008322:	0030      	movs	r0, r6
 8008324:	f7ff ffa8 	bl	8008278 <sbrk_aligned>
 8008328:	1c43      	adds	r3, r0, #1
 800832a:	d034      	beq.n	8008396 <_malloc_r+0xda>
 800832c:	6823      	ldr	r3, [r4, #0]
 800832e:	19df      	adds	r7, r3, r7
 8008330:	6027      	str	r7, [r4, #0]
 8008332:	e013      	b.n	800835c <_malloc_r+0xa0>
 8008334:	2b00      	cmp	r3, #0
 8008336:	dacb      	bge.n	80082d0 <_malloc_r+0x14>
 8008338:	230c      	movs	r3, #12
 800833a:	2500      	movs	r5, #0
 800833c:	6033      	str	r3, [r6, #0]
 800833e:	0028      	movs	r0, r5
 8008340:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008342:	6822      	ldr	r2, [r4, #0]
 8008344:	1bd1      	subs	r1, r2, r7
 8008346:	d420      	bmi.n	800838a <_malloc_r+0xce>
 8008348:	290b      	cmp	r1, #11
 800834a:	d917      	bls.n	800837c <_malloc_r+0xc0>
 800834c:	19e2      	adds	r2, r4, r7
 800834e:	6027      	str	r7, [r4, #0]
 8008350:	42a3      	cmp	r3, r4
 8008352:	d111      	bne.n	8008378 <_malloc_r+0xbc>
 8008354:	602a      	str	r2, [r5, #0]
 8008356:	6863      	ldr	r3, [r4, #4]
 8008358:	6011      	str	r1, [r2, #0]
 800835a:	6053      	str	r3, [r2, #4]
 800835c:	0030      	movs	r0, r6
 800835e:	0025      	movs	r5, r4
 8008360:	f000 f9f2 	bl	8008748 <__malloc_unlock>
 8008364:	2207      	movs	r2, #7
 8008366:	350b      	adds	r5, #11
 8008368:	1d23      	adds	r3, r4, #4
 800836a:	4395      	bics	r5, r2
 800836c:	1aea      	subs	r2, r5, r3
 800836e:	429d      	cmp	r5, r3
 8008370:	d0e5      	beq.n	800833e <_malloc_r+0x82>
 8008372:	1b5b      	subs	r3, r3, r5
 8008374:	50a3      	str	r3, [r4, r2]
 8008376:	e7e2      	b.n	800833e <_malloc_r+0x82>
 8008378:	605a      	str	r2, [r3, #4]
 800837a:	e7ec      	b.n	8008356 <_malloc_r+0x9a>
 800837c:	6862      	ldr	r2, [r4, #4]
 800837e:	42a3      	cmp	r3, r4
 8008380:	d101      	bne.n	8008386 <_malloc_r+0xca>
 8008382:	602a      	str	r2, [r5, #0]
 8008384:	e7ea      	b.n	800835c <_malloc_r+0xa0>
 8008386:	605a      	str	r2, [r3, #4]
 8008388:	e7e8      	b.n	800835c <_malloc_r+0xa0>
 800838a:	0023      	movs	r3, r4
 800838c:	6864      	ldr	r4, [r4, #4]
 800838e:	e7a7      	b.n	80082e0 <_malloc_r+0x24>
 8008390:	002c      	movs	r4, r5
 8008392:	686d      	ldr	r5, [r5, #4]
 8008394:	e7af      	b.n	80082f6 <_malloc_r+0x3a>
 8008396:	230c      	movs	r3, #12
 8008398:	0030      	movs	r0, r6
 800839a:	6033      	str	r3, [r6, #0]
 800839c:	f000 f9d4 	bl	8008748 <__malloc_unlock>
 80083a0:	e7cd      	b.n	800833e <_malloc_r+0x82>
 80083a2:	46c0      	nop			; (mov r8, r8)
 80083a4:	20000790 	.word	0x20000790

080083a8 <__ssputs_r>:
 80083a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083aa:	688e      	ldr	r6, [r1, #8]
 80083ac:	b085      	sub	sp, #20
 80083ae:	0007      	movs	r7, r0
 80083b0:	000c      	movs	r4, r1
 80083b2:	9203      	str	r2, [sp, #12]
 80083b4:	9301      	str	r3, [sp, #4]
 80083b6:	429e      	cmp	r6, r3
 80083b8:	d83c      	bhi.n	8008434 <__ssputs_r+0x8c>
 80083ba:	2390      	movs	r3, #144	; 0x90
 80083bc:	898a      	ldrh	r2, [r1, #12]
 80083be:	00db      	lsls	r3, r3, #3
 80083c0:	421a      	tst	r2, r3
 80083c2:	d034      	beq.n	800842e <__ssputs_r+0x86>
 80083c4:	6909      	ldr	r1, [r1, #16]
 80083c6:	6823      	ldr	r3, [r4, #0]
 80083c8:	6960      	ldr	r0, [r4, #20]
 80083ca:	1a5b      	subs	r3, r3, r1
 80083cc:	9302      	str	r3, [sp, #8]
 80083ce:	2303      	movs	r3, #3
 80083d0:	4343      	muls	r3, r0
 80083d2:	0fdd      	lsrs	r5, r3, #31
 80083d4:	18ed      	adds	r5, r5, r3
 80083d6:	9b01      	ldr	r3, [sp, #4]
 80083d8:	9802      	ldr	r0, [sp, #8]
 80083da:	3301      	adds	r3, #1
 80083dc:	181b      	adds	r3, r3, r0
 80083de:	106d      	asrs	r5, r5, #1
 80083e0:	42ab      	cmp	r3, r5
 80083e2:	d900      	bls.n	80083e6 <__ssputs_r+0x3e>
 80083e4:	001d      	movs	r5, r3
 80083e6:	0553      	lsls	r3, r2, #21
 80083e8:	d532      	bpl.n	8008450 <__ssputs_r+0xa8>
 80083ea:	0029      	movs	r1, r5
 80083ec:	0038      	movs	r0, r7
 80083ee:	f7ff ff65 	bl	80082bc <_malloc_r>
 80083f2:	1e06      	subs	r6, r0, #0
 80083f4:	d109      	bne.n	800840a <__ssputs_r+0x62>
 80083f6:	230c      	movs	r3, #12
 80083f8:	603b      	str	r3, [r7, #0]
 80083fa:	2340      	movs	r3, #64	; 0x40
 80083fc:	2001      	movs	r0, #1
 80083fe:	89a2      	ldrh	r2, [r4, #12]
 8008400:	4240      	negs	r0, r0
 8008402:	4313      	orrs	r3, r2
 8008404:	81a3      	strh	r3, [r4, #12]
 8008406:	b005      	add	sp, #20
 8008408:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800840a:	9a02      	ldr	r2, [sp, #8]
 800840c:	6921      	ldr	r1, [r4, #16]
 800840e:	f7fd ffc1 	bl	8006394 <memcpy>
 8008412:	89a3      	ldrh	r3, [r4, #12]
 8008414:	4a14      	ldr	r2, [pc, #80]	; (8008468 <__ssputs_r+0xc0>)
 8008416:	401a      	ands	r2, r3
 8008418:	2380      	movs	r3, #128	; 0x80
 800841a:	4313      	orrs	r3, r2
 800841c:	81a3      	strh	r3, [r4, #12]
 800841e:	9b02      	ldr	r3, [sp, #8]
 8008420:	6126      	str	r6, [r4, #16]
 8008422:	18f6      	adds	r6, r6, r3
 8008424:	6026      	str	r6, [r4, #0]
 8008426:	6165      	str	r5, [r4, #20]
 8008428:	9e01      	ldr	r6, [sp, #4]
 800842a:	1aed      	subs	r5, r5, r3
 800842c:	60a5      	str	r5, [r4, #8]
 800842e:	9b01      	ldr	r3, [sp, #4]
 8008430:	429e      	cmp	r6, r3
 8008432:	d900      	bls.n	8008436 <__ssputs_r+0x8e>
 8008434:	9e01      	ldr	r6, [sp, #4]
 8008436:	0032      	movs	r2, r6
 8008438:	9903      	ldr	r1, [sp, #12]
 800843a:	6820      	ldr	r0, [r4, #0]
 800843c:	f000 f968 	bl	8008710 <memmove>
 8008440:	68a3      	ldr	r3, [r4, #8]
 8008442:	2000      	movs	r0, #0
 8008444:	1b9b      	subs	r3, r3, r6
 8008446:	60a3      	str	r3, [r4, #8]
 8008448:	6823      	ldr	r3, [r4, #0]
 800844a:	199e      	adds	r6, r3, r6
 800844c:	6026      	str	r6, [r4, #0]
 800844e:	e7da      	b.n	8008406 <__ssputs_r+0x5e>
 8008450:	002a      	movs	r2, r5
 8008452:	0038      	movs	r0, r7
 8008454:	f000 f980 	bl	8008758 <_realloc_r>
 8008458:	1e06      	subs	r6, r0, #0
 800845a:	d1e0      	bne.n	800841e <__ssputs_r+0x76>
 800845c:	0038      	movs	r0, r7
 800845e:	6921      	ldr	r1, [r4, #16]
 8008460:	f7ff fec0 	bl	80081e4 <_free_r>
 8008464:	e7c7      	b.n	80083f6 <__ssputs_r+0x4e>
 8008466:	46c0      	nop			; (mov r8, r8)
 8008468:	fffffb7f 	.word	0xfffffb7f

0800846c <_svfiprintf_r>:
 800846c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800846e:	b0a1      	sub	sp, #132	; 0x84
 8008470:	9003      	str	r0, [sp, #12]
 8008472:	001d      	movs	r5, r3
 8008474:	898b      	ldrh	r3, [r1, #12]
 8008476:	000f      	movs	r7, r1
 8008478:	0016      	movs	r6, r2
 800847a:	061b      	lsls	r3, r3, #24
 800847c:	d511      	bpl.n	80084a2 <_svfiprintf_r+0x36>
 800847e:	690b      	ldr	r3, [r1, #16]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d10e      	bne.n	80084a2 <_svfiprintf_r+0x36>
 8008484:	2140      	movs	r1, #64	; 0x40
 8008486:	f7ff ff19 	bl	80082bc <_malloc_r>
 800848a:	6038      	str	r0, [r7, #0]
 800848c:	6138      	str	r0, [r7, #16]
 800848e:	2800      	cmp	r0, #0
 8008490:	d105      	bne.n	800849e <_svfiprintf_r+0x32>
 8008492:	230c      	movs	r3, #12
 8008494:	9a03      	ldr	r2, [sp, #12]
 8008496:	3801      	subs	r0, #1
 8008498:	6013      	str	r3, [r2, #0]
 800849a:	b021      	add	sp, #132	; 0x84
 800849c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800849e:	2340      	movs	r3, #64	; 0x40
 80084a0:	617b      	str	r3, [r7, #20]
 80084a2:	2300      	movs	r3, #0
 80084a4:	ac08      	add	r4, sp, #32
 80084a6:	6163      	str	r3, [r4, #20]
 80084a8:	3320      	adds	r3, #32
 80084aa:	7663      	strb	r3, [r4, #25]
 80084ac:	3310      	adds	r3, #16
 80084ae:	76a3      	strb	r3, [r4, #26]
 80084b0:	9507      	str	r5, [sp, #28]
 80084b2:	0035      	movs	r5, r6
 80084b4:	782b      	ldrb	r3, [r5, #0]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d001      	beq.n	80084be <_svfiprintf_r+0x52>
 80084ba:	2b25      	cmp	r3, #37	; 0x25
 80084bc:	d147      	bne.n	800854e <_svfiprintf_r+0xe2>
 80084be:	1bab      	subs	r3, r5, r6
 80084c0:	9305      	str	r3, [sp, #20]
 80084c2:	42b5      	cmp	r5, r6
 80084c4:	d00c      	beq.n	80084e0 <_svfiprintf_r+0x74>
 80084c6:	0032      	movs	r2, r6
 80084c8:	0039      	movs	r1, r7
 80084ca:	9803      	ldr	r0, [sp, #12]
 80084cc:	f7ff ff6c 	bl	80083a8 <__ssputs_r>
 80084d0:	1c43      	adds	r3, r0, #1
 80084d2:	d100      	bne.n	80084d6 <_svfiprintf_r+0x6a>
 80084d4:	e0ae      	b.n	8008634 <_svfiprintf_r+0x1c8>
 80084d6:	6962      	ldr	r2, [r4, #20]
 80084d8:	9b05      	ldr	r3, [sp, #20]
 80084da:	4694      	mov	ip, r2
 80084dc:	4463      	add	r3, ip
 80084de:	6163      	str	r3, [r4, #20]
 80084e0:	782b      	ldrb	r3, [r5, #0]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d100      	bne.n	80084e8 <_svfiprintf_r+0x7c>
 80084e6:	e0a5      	b.n	8008634 <_svfiprintf_r+0x1c8>
 80084e8:	2201      	movs	r2, #1
 80084ea:	2300      	movs	r3, #0
 80084ec:	4252      	negs	r2, r2
 80084ee:	6062      	str	r2, [r4, #4]
 80084f0:	a904      	add	r1, sp, #16
 80084f2:	3254      	adds	r2, #84	; 0x54
 80084f4:	1852      	adds	r2, r2, r1
 80084f6:	1c6e      	adds	r6, r5, #1
 80084f8:	6023      	str	r3, [r4, #0]
 80084fa:	60e3      	str	r3, [r4, #12]
 80084fc:	60a3      	str	r3, [r4, #8]
 80084fe:	7013      	strb	r3, [r2, #0]
 8008500:	65a3      	str	r3, [r4, #88]	; 0x58
 8008502:	2205      	movs	r2, #5
 8008504:	7831      	ldrb	r1, [r6, #0]
 8008506:	4854      	ldr	r0, [pc, #336]	; (8008658 <_svfiprintf_r+0x1ec>)
 8008508:	f7ff fa98 	bl	8007a3c <memchr>
 800850c:	1c75      	adds	r5, r6, #1
 800850e:	2800      	cmp	r0, #0
 8008510:	d11f      	bne.n	8008552 <_svfiprintf_r+0xe6>
 8008512:	6822      	ldr	r2, [r4, #0]
 8008514:	06d3      	lsls	r3, r2, #27
 8008516:	d504      	bpl.n	8008522 <_svfiprintf_r+0xb6>
 8008518:	2353      	movs	r3, #83	; 0x53
 800851a:	a904      	add	r1, sp, #16
 800851c:	185b      	adds	r3, r3, r1
 800851e:	2120      	movs	r1, #32
 8008520:	7019      	strb	r1, [r3, #0]
 8008522:	0713      	lsls	r3, r2, #28
 8008524:	d504      	bpl.n	8008530 <_svfiprintf_r+0xc4>
 8008526:	2353      	movs	r3, #83	; 0x53
 8008528:	a904      	add	r1, sp, #16
 800852a:	185b      	adds	r3, r3, r1
 800852c:	212b      	movs	r1, #43	; 0x2b
 800852e:	7019      	strb	r1, [r3, #0]
 8008530:	7833      	ldrb	r3, [r6, #0]
 8008532:	2b2a      	cmp	r3, #42	; 0x2a
 8008534:	d016      	beq.n	8008564 <_svfiprintf_r+0xf8>
 8008536:	0035      	movs	r5, r6
 8008538:	2100      	movs	r1, #0
 800853a:	200a      	movs	r0, #10
 800853c:	68e3      	ldr	r3, [r4, #12]
 800853e:	782a      	ldrb	r2, [r5, #0]
 8008540:	1c6e      	adds	r6, r5, #1
 8008542:	3a30      	subs	r2, #48	; 0x30
 8008544:	2a09      	cmp	r2, #9
 8008546:	d94e      	bls.n	80085e6 <_svfiprintf_r+0x17a>
 8008548:	2900      	cmp	r1, #0
 800854a:	d111      	bne.n	8008570 <_svfiprintf_r+0x104>
 800854c:	e017      	b.n	800857e <_svfiprintf_r+0x112>
 800854e:	3501      	adds	r5, #1
 8008550:	e7b0      	b.n	80084b4 <_svfiprintf_r+0x48>
 8008552:	4b41      	ldr	r3, [pc, #260]	; (8008658 <_svfiprintf_r+0x1ec>)
 8008554:	6822      	ldr	r2, [r4, #0]
 8008556:	1ac0      	subs	r0, r0, r3
 8008558:	2301      	movs	r3, #1
 800855a:	4083      	lsls	r3, r0
 800855c:	4313      	orrs	r3, r2
 800855e:	002e      	movs	r6, r5
 8008560:	6023      	str	r3, [r4, #0]
 8008562:	e7ce      	b.n	8008502 <_svfiprintf_r+0x96>
 8008564:	9b07      	ldr	r3, [sp, #28]
 8008566:	1d19      	adds	r1, r3, #4
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	9107      	str	r1, [sp, #28]
 800856c:	2b00      	cmp	r3, #0
 800856e:	db01      	blt.n	8008574 <_svfiprintf_r+0x108>
 8008570:	930b      	str	r3, [sp, #44]	; 0x2c
 8008572:	e004      	b.n	800857e <_svfiprintf_r+0x112>
 8008574:	425b      	negs	r3, r3
 8008576:	60e3      	str	r3, [r4, #12]
 8008578:	2302      	movs	r3, #2
 800857a:	4313      	orrs	r3, r2
 800857c:	6023      	str	r3, [r4, #0]
 800857e:	782b      	ldrb	r3, [r5, #0]
 8008580:	2b2e      	cmp	r3, #46	; 0x2e
 8008582:	d10a      	bne.n	800859a <_svfiprintf_r+0x12e>
 8008584:	786b      	ldrb	r3, [r5, #1]
 8008586:	2b2a      	cmp	r3, #42	; 0x2a
 8008588:	d135      	bne.n	80085f6 <_svfiprintf_r+0x18a>
 800858a:	9b07      	ldr	r3, [sp, #28]
 800858c:	3502      	adds	r5, #2
 800858e:	1d1a      	adds	r2, r3, #4
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	9207      	str	r2, [sp, #28]
 8008594:	2b00      	cmp	r3, #0
 8008596:	db2b      	blt.n	80085f0 <_svfiprintf_r+0x184>
 8008598:	9309      	str	r3, [sp, #36]	; 0x24
 800859a:	4e30      	ldr	r6, [pc, #192]	; (800865c <_svfiprintf_r+0x1f0>)
 800859c:	2203      	movs	r2, #3
 800859e:	0030      	movs	r0, r6
 80085a0:	7829      	ldrb	r1, [r5, #0]
 80085a2:	f7ff fa4b 	bl	8007a3c <memchr>
 80085a6:	2800      	cmp	r0, #0
 80085a8:	d006      	beq.n	80085b8 <_svfiprintf_r+0x14c>
 80085aa:	2340      	movs	r3, #64	; 0x40
 80085ac:	1b80      	subs	r0, r0, r6
 80085ae:	4083      	lsls	r3, r0
 80085b0:	6822      	ldr	r2, [r4, #0]
 80085b2:	3501      	adds	r5, #1
 80085b4:	4313      	orrs	r3, r2
 80085b6:	6023      	str	r3, [r4, #0]
 80085b8:	7829      	ldrb	r1, [r5, #0]
 80085ba:	2206      	movs	r2, #6
 80085bc:	4828      	ldr	r0, [pc, #160]	; (8008660 <_svfiprintf_r+0x1f4>)
 80085be:	1c6e      	adds	r6, r5, #1
 80085c0:	7621      	strb	r1, [r4, #24]
 80085c2:	f7ff fa3b 	bl	8007a3c <memchr>
 80085c6:	2800      	cmp	r0, #0
 80085c8:	d03c      	beq.n	8008644 <_svfiprintf_r+0x1d8>
 80085ca:	4b26      	ldr	r3, [pc, #152]	; (8008664 <_svfiprintf_r+0x1f8>)
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d125      	bne.n	800861c <_svfiprintf_r+0x1b0>
 80085d0:	2207      	movs	r2, #7
 80085d2:	9b07      	ldr	r3, [sp, #28]
 80085d4:	3307      	adds	r3, #7
 80085d6:	4393      	bics	r3, r2
 80085d8:	3308      	adds	r3, #8
 80085da:	9307      	str	r3, [sp, #28]
 80085dc:	6963      	ldr	r3, [r4, #20]
 80085de:	9a04      	ldr	r2, [sp, #16]
 80085e0:	189b      	adds	r3, r3, r2
 80085e2:	6163      	str	r3, [r4, #20]
 80085e4:	e765      	b.n	80084b2 <_svfiprintf_r+0x46>
 80085e6:	4343      	muls	r3, r0
 80085e8:	0035      	movs	r5, r6
 80085ea:	2101      	movs	r1, #1
 80085ec:	189b      	adds	r3, r3, r2
 80085ee:	e7a6      	b.n	800853e <_svfiprintf_r+0xd2>
 80085f0:	2301      	movs	r3, #1
 80085f2:	425b      	negs	r3, r3
 80085f4:	e7d0      	b.n	8008598 <_svfiprintf_r+0x12c>
 80085f6:	2300      	movs	r3, #0
 80085f8:	200a      	movs	r0, #10
 80085fa:	001a      	movs	r2, r3
 80085fc:	3501      	adds	r5, #1
 80085fe:	6063      	str	r3, [r4, #4]
 8008600:	7829      	ldrb	r1, [r5, #0]
 8008602:	1c6e      	adds	r6, r5, #1
 8008604:	3930      	subs	r1, #48	; 0x30
 8008606:	2909      	cmp	r1, #9
 8008608:	d903      	bls.n	8008612 <_svfiprintf_r+0x1a6>
 800860a:	2b00      	cmp	r3, #0
 800860c:	d0c5      	beq.n	800859a <_svfiprintf_r+0x12e>
 800860e:	9209      	str	r2, [sp, #36]	; 0x24
 8008610:	e7c3      	b.n	800859a <_svfiprintf_r+0x12e>
 8008612:	4342      	muls	r2, r0
 8008614:	0035      	movs	r5, r6
 8008616:	2301      	movs	r3, #1
 8008618:	1852      	adds	r2, r2, r1
 800861a:	e7f1      	b.n	8008600 <_svfiprintf_r+0x194>
 800861c:	ab07      	add	r3, sp, #28
 800861e:	9300      	str	r3, [sp, #0]
 8008620:	003a      	movs	r2, r7
 8008622:	0021      	movs	r1, r4
 8008624:	4b10      	ldr	r3, [pc, #64]	; (8008668 <_svfiprintf_r+0x1fc>)
 8008626:	9803      	ldr	r0, [sp, #12]
 8008628:	f7fd ff70 	bl	800650c <_printf_float>
 800862c:	9004      	str	r0, [sp, #16]
 800862e:	9b04      	ldr	r3, [sp, #16]
 8008630:	3301      	adds	r3, #1
 8008632:	d1d3      	bne.n	80085dc <_svfiprintf_r+0x170>
 8008634:	89bb      	ldrh	r3, [r7, #12]
 8008636:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008638:	065b      	lsls	r3, r3, #25
 800863a:	d400      	bmi.n	800863e <_svfiprintf_r+0x1d2>
 800863c:	e72d      	b.n	800849a <_svfiprintf_r+0x2e>
 800863e:	2001      	movs	r0, #1
 8008640:	4240      	negs	r0, r0
 8008642:	e72a      	b.n	800849a <_svfiprintf_r+0x2e>
 8008644:	ab07      	add	r3, sp, #28
 8008646:	9300      	str	r3, [sp, #0]
 8008648:	003a      	movs	r2, r7
 800864a:	0021      	movs	r1, r4
 800864c:	4b06      	ldr	r3, [pc, #24]	; (8008668 <_svfiprintf_r+0x1fc>)
 800864e:	9803      	ldr	r0, [sp, #12]
 8008650:	f7fe fa0e 	bl	8006a70 <_printf_i>
 8008654:	e7ea      	b.n	800862c <_svfiprintf_r+0x1c0>
 8008656:	46c0      	nop			; (mov r8, r8)
 8008658:	0800bb74 	.word	0x0800bb74
 800865c:	0800bb7a 	.word	0x0800bb7a
 8008660:	0800bb7e 	.word	0x0800bb7e
 8008664:	0800650d 	.word	0x0800650d
 8008668:	080083a9 	.word	0x080083a9

0800866c <_sbrk_r>:
 800866c:	2300      	movs	r3, #0
 800866e:	b570      	push	{r4, r5, r6, lr}
 8008670:	4d06      	ldr	r5, [pc, #24]	; (800868c <_sbrk_r+0x20>)
 8008672:	0004      	movs	r4, r0
 8008674:	0008      	movs	r0, r1
 8008676:	602b      	str	r3, [r5, #0]
 8008678:	f7fc f96e 	bl	8004958 <_sbrk>
 800867c:	1c43      	adds	r3, r0, #1
 800867e:	d103      	bne.n	8008688 <_sbrk_r+0x1c>
 8008680:	682b      	ldr	r3, [r5, #0]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d000      	beq.n	8008688 <_sbrk_r+0x1c>
 8008686:	6023      	str	r3, [r4, #0]
 8008688:	bd70      	pop	{r4, r5, r6, pc}
 800868a:	46c0      	nop			; (mov r8, r8)
 800868c:	20000798 	.word	0x20000798

08008690 <__assert_func>:
 8008690:	b530      	push	{r4, r5, lr}
 8008692:	0014      	movs	r4, r2
 8008694:	001a      	movs	r2, r3
 8008696:	4b09      	ldr	r3, [pc, #36]	; (80086bc <__assert_func+0x2c>)
 8008698:	0005      	movs	r5, r0
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	b085      	sub	sp, #20
 800869e:	68d8      	ldr	r0, [r3, #12]
 80086a0:	4b07      	ldr	r3, [pc, #28]	; (80086c0 <__assert_func+0x30>)
 80086a2:	2c00      	cmp	r4, #0
 80086a4:	d101      	bne.n	80086aa <__assert_func+0x1a>
 80086a6:	4b07      	ldr	r3, [pc, #28]	; (80086c4 <__assert_func+0x34>)
 80086a8:	001c      	movs	r4, r3
 80086aa:	9301      	str	r3, [sp, #4]
 80086ac:	9100      	str	r1, [sp, #0]
 80086ae:	002b      	movs	r3, r5
 80086b0:	4905      	ldr	r1, [pc, #20]	; (80086c8 <__assert_func+0x38>)
 80086b2:	9402      	str	r4, [sp, #8]
 80086b4:	f000 f80a 	bl	80086cc <fiprintf>
 80086b8:	f000 faba 	bl	8008c30 <abort>
 80086bc:	20000024 	.word	0x20000024
 80086c0:	0800bb85 	.word	0x0800bb85
 80086c4:	0800bbc0 	.word	0x0800bbc0
 80086c8:	0800bb92 	.word	0x0800bb92

080086cc <fiprintf>:
 80086cc:	b40e      	push	{r1, r2, r3}
 80086ce:	b503      	push	{r0, r1, lr}
 80086d0:	0001      	movs	r1, r0
 80086d2:	ab03      	add	r3, sp, #12
 80086d4:	4804      	ldr	r0, [pc, #16]	; (80086e8 <fiprintf+0x1c>)
 80086d6:	cb04      	ldmia	r3!, {r2}
 80086d8:	6800      	ldr	r0, [r0, #0]
 80086da:	9301      	str	r3, [sp, #4]
 80086dc:	f000 f892 	bl	8008804 <_vfiprintf_r>
 80086e0:	b002      	add	sp, #8
 80086e2:	bc08      	pop	{r3}
 80086e4:	b003      	add	sp, #12
 80086e6:	4718      	bx	r3
 80086e8:	20000024 	.word	0x20000024

080086ec <__ascii_mbtowc>:
 80086ec:	b082      	sub	sp, #8
 80086ee:	2900      	cmp	r1, #0
 80086f0:	d100      	bne.n	80086f4 <__ascii_mbtowc+0x8>
 80086f2:	a901      	add	r1, sp, #4
 80086f4:	1e10      	subs	r0, r2, #0
 80086f6:	d006      	beq.n	8008706 <__ascii_mbtowc+0x1a>
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d006      	beq.n	800870a <__ascii_mbtowc+0x1e>
 80086fc:	7813      	ldrb	r3, [r2, #0]
 80086fe:	600b      	str	r3, [r1, #0]
 8008700:	7810      	ldrb	r0, [r2, #0]
 8008702:	1e43      	subs	r3, r0, #1
 8008704:	4198      	sbcs	r0, r3
 8008706:	b002      	add	sp, #8
 8008708:	4770      	bx	lr
 800870a:	2002      	movs	r0, #2
 800870c:	4240      	negs	r0, r0
 800870e:	e7fa      	b.n	8008706 <__ascii_mbtowc+0x1a>

08008710 <memmove>:
 8008710:	b510      	push	{r4, lr}
 8008712:	4288      	cmp	r0, r1
 8008714:	d902      	bls.n	800871c <memmove+0xc>
 8008716:	188b      	adds	r3, r1, r2
 8008718:	4298      	cmp	r0, r3
 800871a:	d303      	bcc.n	8008724 <memmove+0x14>
 800871c:	2300      	movs	r3, #0
 800871e:	e007      	b.n	8008730 <memmove+0x20>
 8008720:	5c8b      	ldrb	r3, [r1, r2]
 8008722:	5483      	strb	r3, [r0, r2]
 8008724:	3a01      	subs	r2, #1
 8008726:	d2fb      	bcs.n	8008720 <memmove+0x10>
 8008728:	bd10      	pop	{r4, pc}
 800872a:	5ccc      	ldrb	r4, [r1, r3]
 800872c:	54c4      	strb	r4, [r0, r3]
 800872e:	3301      	adds	r3, #1
 8008730:	429a      	cmp	r2, r3
 8008732:	d1fa      	bne.n	800872a <memmove+0x1a>
 8008734:	e7f8      	b.n	8008728 <memmove+0x18>
	...

08008738 <__malloc_lock>:
 8008738:	b510      	push	{r4, lr}
 800873a:	4802      	ldr	r0, [pc, #8]	; (8008744 <__malloc_lock+0xc>)
 800873c:	f000 fc4f 	bl	8008fde <__retarget_lock_acquire_recursive>
 8008740:	bd10      	pop	{r4, pc}
 8008742:	46c0      	nop			; (mov r8, r8)
 8008744:	2000079c 	.word	0x2000079c

08008748 <__malloc_unlock>:
 8008748:	b510      	push	{r4, lr}
 800874a:	4802      	ldr	r0, [pc, #8]	; (8008754 <__malloc_unlock+0xc>)
 800874c:	f000 fc48 	bl	8008fe0 <__retarget_lock_release_recursive>
 8008750:	bd10      	pop	{r4, pc}
 8008752:	46c0      	nop			; (mov r8, r8)
 8008754:	2000079c 	.word	0x2000079c

08008758 <_realloc_r>:
 8008758:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800875a:	0007      	movs	r7, r0
 800875c:	000e      	movs	r6, r1
 800875e:	0014      	movs	r4, r2
 8008760:	2900      	cmp	r1, #0
 8008762:	d105      	bne.n	8008770 <_realloc_r+0x18>
 8008764:	0011      	movs	r1, r2
 8008766:	f7ff fda9 	bl	80082bc <_malloc_r>
 800876a:	0005      	movs	r5, r0
 800876c:	0028      	movs	r0, r5
 800876e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008770:	2a00      	cmp	r2, #0
 8008772:	d103      	bne.n	800877c <_realloc_r+0x24>
 8008774:	f7ff fd36 	bl	80081e4 <_free_r>
 8008778:	0025      	movs	r5, r4
 800877a:	e7f7      	b.n	800876c <_realloc_r+0x14>
 800877c:	f000 fc9e 	bl	80090bc <_malloc_usable_size_r>
 8008780:	9001      	str	r0, [sp, #4]
 8008782:	4284      	cmp	r4, r0
 8008784:	d803      	bhi.n	800878e <_realloc_r+0x36>
 8008786:	0035      	movs	r5, r6
 8008788:	0843      	lsrs	r3, r0, #1
 800878a:	42a3      	cmp	r3, r4
 800878c:	d3ee      	bcc.n	800876c <_realloc_r+0x14>
 800878e:	0021      	movs	r1, r4
 8008790:	0038      	movs	r0, r7
 8008792:	f7ff fd93 	bl	80082bc <_malloc_r>
 8008796:	1e05      	subs	r5, r0, #0
 8008798:	d0e8      	beq.n	800876c <_realloc_r+0x14>
 800879a:	9b01      	ldr	r3, [sp, #4]
 800879c:	0022      	movs	r2, r4
 800879e:	429c      	cmp	r4, r3
 80087a0:	d900      	bls.n	80087a4 <_realloc_r+0x4c>
 80087a2:	001a      	movs	r2, r3
 80087a4:	0031      	movs	r1, r6
 80087a6:	0028      	movs	r0, r5
 80087a8:	f7fd fdf4 	bl	8006394 <memcpy>
 80087ac:	0031      	movs	r1, r6
 80087ae:	0038      	movs	r0, r7
 80087b0:	f7ff fd18 	bl	80081e4 <_free_r>
 80087b4:	e7da      	b.n	800876c <_realloc_r+0x14>

080087b6 <__sfputc_r>:
 80087b6:	6893      	ldr	r3, [r2, #8]
 80087b8:	b510      	push	{r4, lr}
 80087ba:	3b01      	subs	r3, #1
 80087bc:	6093      	str	r3, [r2, #8]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	da04      	bge.n	80087cc <__sfputc_r+0x16>
 80087c2:	6994      	ldr	r4, [r2, #24]
 80087c4:	42a3      	cmp	r3, r4
 80087c6:	db07      	blt.n	80087d8 <__sfputc_r+0x22>
 80087c8:	290a      	cmp	r1, #10
 80087ca:	d005      	beq.n	80087d8 <__sfputc_r+0x22>
 80087cc:	6813      	ldr	r3, [r2, #0]
 80087ce:	1c58      	adds	r0, r3, #1
 80087d0:	6010      	str	r0, [r2, #0]
 80087d2:	7019      	strb	r1, [r3, #0]
 80087d4:	0008      	movs	r0, r1
 80087d6:	bd10      	pop	{r4, pc}
 80087d8:	f000 f94e 	bl	8008a78 <__swbuf_r>
 80087dc:	0001      	movs	r1, r0
 80087de:	e7f9      	b.n	80087d4 <__sfputc_r+0x1e>

080087e0 <__sfputs_r>:
 80087e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087e2:	0006      	movs	r6, r0
 80087e4:	000f      	movs	r7, r1
 80087e6:	0014      	movs	r4, r2
 80087e8:	18d5      	adds	r5, r2, r3
 80087ea:	42ac      	cmp	r4, r5
 80087ec:	d101      	bne.n	80087f2 <__sfputs_r+0x12>
 80087ee:	2000      	movs	r0, #0
 80087f0:	e007      	b.n	8008802 <__sfputs_r+0x22>
 80087f2:	7821      	ldrb	r1, [r4, #0]
 80087f4:	003a      	movs	r2, r7
 80087f6:	0030      	movs	r0, r6
 80087f8:	f7ff ffdd 	bl	80087b6 <__sfputc_r>
 80087fc:	3401      	adds	r4, #1
 80087fe:	1c43      	adds	r3, r0, #1
 8008800:	d1f3      	bne.n	80087ea <__sfputs_r+0xa>
 8008802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008804 <_vfiprintf_r>:
 8008804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008806:	b0a1      	sub	sp, #132	; 0x84
 8008808:	0006      	movs	r6, r0
 800880a:	000c      	movs	r4, r1
 800880c:	001f      	movs	r7, r3
 800880e:	9203      	str	r2, [sp, #12]
 8008810:	2800      	cmp	r0, #0
 8008812:	d004      	beq.n	800881e <_vfiprintf_r+0x1a>
 8008814:	6983      	ldr	r3, [r0, #24]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d101      	bne.n	800881e <_vfiprintf_r+0x1a>
 800881a:	f000 fb3f 	bl	8008e9c <__sinit>
 800881e:	4b8e      	ldr	r3, [pc, #568]	; (8008a58 <_vfiprintf_r+0x254>)
 8008820:	429c      	cmp	r4, r3
 8008822:	d11c      	bne.n	800885e <_vfiprintf_r+0x5a>
 8008824:	6874      	ldr	r4, [r6, #4]
 8008826:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008828:	07db      	lsls	r3, r3, #31
 800882a:	d405      	bmi.n	8008838 <_vfiprintf_r+0x34>
 800882c:	89a3      	ldrh	r3, [r4, #12]
 800882e:	059b      	lsls	r3, r3, #22
 8008830:	d402      	bmi.n	8008838 <_vfiprintf_r+0x34>
 8008832:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008834:	f000 fbd3 	bl	8008fde <__retarget_lock_acquire_recursive>
 8008838:	89a3      	ldrh	r3, [r4, #12]
 800883a:	071b      	lsls	r3, r3, #28
 800883c:	d502      	bpl.n	8008844 <_vfiprintf_r+0x40>
 800883e:	6923      	ldr	r3, [r4, #16]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d11d      	bne.n	8008880 <_vfiprintf_r+0x7c>
 8008844:	0021      	movs	r1, r4
 8008846:	0030      	movs	r0, r6
 8008848:	f000 f97a 	bl	8008b40 <__swsetup_r>
 800884c:	2800      	cmp	r0, #0
 800884e:	d017      	beq.n	8008880 <_vfiprintf_r+0x7c>
 8008850:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008852:	07db      	lsls	r3, r3, #31
 8008854:	d50d      	bpl.n	8008872 <_vfiprintf_r+0x6e>
 8008856:	2001      	movs	r0, #1
 8008858:	4240      	negs	r0, r0
 800885a:	b021      	add	sp, #132	; 0x84
 800885c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800885e:	4b7f      	ldr	r3, [pc, #508]	; (8008a5c <_vfiprintf_r+0x258>)
 8008860:	429c      	cmp	r4, r3
 8008862:	d101      	bne.n	8008868 <_vfiprintf_r+0x64>
 8008864:	68b4      	ldr	r4, [r6, #8]
 8008866:	e7de      	b.n	8008826 <_vfiprintf_r+0x22>
 8008868:	4b7d      	ldr	r3, [pc, #500]	; (8008a60 <_vfiprintf_r+0x25c>)
 800886a:	429c      	cmp	r4, r3
 800886c:	d1db      	bne.n	8008826 <_vfiprintf_r+0x22>
 800886e:	68f4      	ldr	r4, [r6, #12]
 8008870:	e7d9      	b.n	8008826 <_vfiprintf_r+0x22>
 8008872:	89a3      	ldrh	r3, [r4, #12]
 8008874:	059b      	lsls	r3, r3, #22
 8008876:	d4ee      	bmi.n	8008856 <_vfiprintf_r+0x52>
 8008878:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800887a:	f000 fbb1 	bl	8008fe0 <__retarget_lock_release_recursive>
 800887e:	e7ea      	b.n	8008856 <_vfiprintf_r+0x52>
 8008880:	2300      	movs	r3, #0
 8008882:	ad08      	add	r5, sp, #32
 8008884:	616b      	str	r3, [r5, #20]
 8008886:	3320      	adds	r3, #32
 8008888:	766b      	strb	r3, [r5, #25]
 800888a:	3310      	adds	r3, #16
 800888c:	76ab      	strb	r3, [r5, #26]
 800888e:	9707      	str	r7, [sp, #28]
 8008890:	9f03      	ldr	r7, [sp, #12]
 8008892:	783b      	ldrb	r3, [r7, #0]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d001      	beq.n	800889c <_vfiprintf_r+0x98>
 8008898:	2b25      	cmp	r3, #37	; 0x25
 800889a:	d14e      	bne.n	800893a <_vfiprintf_r+0x136>
 800889c:	9b03      	ldr	r3, [sp, #12]
 800889e:	1afb      	subs	r3, r7, r3
 80088a0:	9305      	str	r3, [sp, #20]
 80088a2:	9b03      	ldr	r3, [sp, #12]
 80088a4:	429f      	cmp	r7, r3
 80088a6:	d00d      	beq.n	80088c4 <_vfiprintf_r+0xc0>
 80088a8:	9b05      	ldr	r3, [sp, #20]
 80088aa:	0021      	movs	r1, r4
 80088ac:	0030      	movs	r0, r6
 80088ae:	9a03      	ldr	r2, [sp, #12]
 80088b0:	f7ff ff96 	bl	80087e0 <__sfputs_r>
 80088b4:	1c43      	adds	r3, r0, #1
 80088b6:	d100      	bne.n	80088ba <_vfiprintf_r+0xb6>
 80088b8:	e0b5      	b.n	8008a26 <_vfiprintf_r+0x222>
 80088ba:	696a      	ldr	r2, [r5, #20]
 80088bc:	9b05      	ldr	r3, [sp, #20]
 80088be:	4694      	mov	ip, r2
 80088c0:	4463      	add	r3, ip
 80088c2:	616b      	str	r3, [r5, #20]
 80088c4:	783b      	ldrb	r3, [r7, #0]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d100      	bne.n	80088cc <_vfiprintf_r+0xc8>
 80088ca:	e0ac      	b.n	8008a26 <_vfiprintf_r+0x222>
 80088cc:	2201      	movs	r2, #1
 80088ce:	1c7b      	adds	r3, r7, #1
 80088d0:	9303      	str	r3, [sp, #12]
 80088d2:	2300      	movs	r3, #0
 80088d4:	4252      	negs	r2, r2
 80088d6:	606a      	str	r2, [r5, #4]
 80088d8:	a904      	add	r1, sp, #16
 80088da:	3254      	adds	r2, #84	; 0x54
 80088dc:	1852      	adds	r2, r2, r1
 80088de:	602b      	str	r3, [r5, #0]
 80088e0:	60eb      	str	r3, [r5, #12]
 80088e2:	60ab      	str	r3, [r5, #8]
 80088e4:	7013      	strb	r3, [r2, #0]
 80088e6:	65ab      	str	r3, [r5, #88]	; 0x58
 80088e8:	9b03      	ldr	r3, [sp, #12]
 80088ea:	2205      	movs	r2, #5
 80088ec:	7819      	ldrb	r1, [r3, #0]
 80088ee:	485d      	ldr	r0, [pc, #372]	; (8008a64 <_vfiprintf_r+0x260>)
 80088f0:	f7ff f8a4 	bl	8007a3c <memchr>
 80088f4:	9b03      	ldr	r3, [sp, #12]
 80088f6:	1c5f      	adds	r7, r3, #1
 80088f8:	2800      	cmp	r0, #0
 80088fa:	d120      	bne.n	800893e <_vfiprintf_r+0x13a>
 80088fc:	682a      	ldr	r2, [r5, #0]
 80088fe:	06d3      	lsls	r3, r2, #27
 8008900:	d504      	bpl.n	800890c <_vfiprintf_r+0x108>
 8008902:	2353      	movs	r3, #83	; 0x53
 8008904:	a904      	add	r1, sp, #16
 8008906:	185b      	adds	r3, r3, r1
 8008908:	2120      	movs	r1, #32
 800890a:	7019      	strb	r1, [r3, #0]
 800890c:	0713      	lsls	r3, r2, #28
 800890e:	d504      	bpl.n	800891a <_vfiprintf_r+0x116>
 8008910:	2353      	movs	r3, #83	; 0x53
 8008912:	a904      	add	r1, sp, #16
 8008914:	185b      	adds	r3, r3, r1
 8008916:	212b      	movs	r1, #43	; 0x2b
 8008918:	7019      	strb	r1, [r3, #0]
 800891a:	9b03      	ldr	r3, [sp, #12]
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	2b2a      	cmp	r3, #42	; 0x2a
 8008920:	d016      	beq.n	8008950 <_vfiprintf_r+0x14c>
 8008922:	2100      	movs	r1, #0
 8008924:	68eb      	ldr	r3, [r5, #12]
 8008926:	9f03      	ldr	r7, [sp, #12]
 8008928:	783a      	ldrb	r2, [r7, #0]
 800892a:	1c78      	adds	r0, r7, #1
 800892c:	3a30      	subs	r2, #48	; 0x30
 800892e:	4684      	mov	ip, r0
 8008930:	2a09      	cmp	r2, #9
 8008932:	d94f      	bls.n	80089d4 <_vfiprintf_r+0x1d0>
 8008934:	2900      	cmp	r1, #0
 8008936:	d111      	bne.n	800895c <_vfiprintf_r+0x158>
 8008938:	e017      	b.n	800896a <_vfiprintf_r+0x166>
 800893a:	3701      	adds	r7, #1
 800893c:	e7a9      	b.n	8008892 <_vfiprintf_r+0x8e>
 800893e:	4b49      	ldr	r3, [pc, #292]	; (8008a64 <_vfiprintf_r+0x260>)
 8008940:	682a      	ldr	r2, [r5, #0]
 8008942:	1ac0      	subs	r0, r0, r3
 8008944:	2301      	movs	r3, #1
 8008946:	4083      	lsls	r3, r0
 8008948:	4313      	orrs	r3, r2
 800894a:	602b      	str	r3, [r5, #0]
 800894c:	9703      	str	r7, [sp, #12]
 800894e:	e7cb      	b.n	80088e8 <_vfiprintf_r+0xe4>
 8008950:	9b07      	ldr	r3, [sp, #28]
 8008952:	1d19      	adds	r1, r3, #4
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	9107      	str	r1, [sp, #28]
 8008958:	2b00      	cmp	r3, #0
 800895a:	db01      	blt.n	8008960 <_vfiprintf_r+0x15c>
 800895c:	930b      	str	r3, [sp, #44]	; 0x2c
 800895e:	e004      	b.n	800896a <_vfiprintf_r+0x166>
 8008960:	425b      	negs	r3, r3
 8008962:	60eb      	str	r3, [r5, #12]
 8008964:	2302      	movs	r3, #2
 8008966:	4313      	orrs	r3, r2
 8008968:	602b      	str	r3, [r5, #0]
 800896a:	783b      	ldrb	r3, [r7, #0]
 800896c:	2b2e      	cmp	r3, #46	; 0x2e
 800896e:	d10a      	bne.n	8008986 <_vfiprintf_r+0x182>
 8008970:	787b      	ldrb	r3, [r7, #1]
 8008972:	2b2a      	cmp	r3, #42	; 0x2a
 8008974:	d137      	bne.n	80089e6 <_vfiprintf_r+0x1e2>
 8008976:	9b07      	ldr	r3, [sp, #28]
 8008978:	3702      	adds	r7, #2
 800897a:	1d1a      	adds	r2, r3, #4
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	9207      	str	r2, [sp, #28]
 8008980:	2b00      	cmp	r3, #0
 8008982:	db2d      	blt.n	80089e0 <_vfiprintf_r+0x1dc>
 8008984:	9309      	str	r3, [sp, #36]	; 0x24
 8008986:	2203      	movs	r2, #3
 8008988:	7839      	ldrb	r1, [r7, #0]
 800898a:	4837      	ldr	r0, [pc, #220]	; (8008a68 <_vfiprintf_r+0x264>)
 800898c:	f7ff f856 	bl	8007a3c <memchr>
 8008990:	2800      	cmp	r0, #0
 8008992:	d007      	beq.n	80089a4 <_vfiprintf_r+0x1a0>
 8008994:	4b34      	ldr	r3, [pc, #208]	; (8008a68 <_vfiprintf_r+0x264>)
 8008996:	682a      	ldr	r2, [r5, #0]
 8008998:	1ac0      	subs	r0, r0, r3
 800899a:	2340      	movs	r3, #64	; 0x40
 800899c:	4083      	lsls	r3, r0
 800899e:	4313      	orrs	r3, r2
 80089a0:	3701      	adds	r7, #1
 80089a2:	602b      	str	r3, [r5, #0]
 80089a4:	7839      	ldrb	r1, [r7, #0]
 80089a6:	1c7b      	adds	r3, r7, #1
 80089a8:	2206      	movs	r2, #6
 80089aa:	4830      	ldr	r0, [pc, #192]	; (8008a6c <_vfiprintf_r+0x268>)
 80089ac:	9303      	str	r3, [sp, #12]
 80089ae:	7629      	strb	r1, [r5, #24]
 80089b0:	f7ff f844 	bl	8007a3c <memchr>
 80089b4:	2800      	cmp	r0, #0
 80089b6:	d045      	beq.n	8008a44 <_vfiprintf_r+0x240>
 80089b8:	4b2d      	ldr	r3, [pc, #180]	; (8008a70 <_vfiprintf_r+0x26c>)
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d127      	bne.n	8008a0e <_vfiprintf_r+0x20a>
 80089be:	2207      	movs	r2, #7
 80089c0:	9b07      	ldr	r3, [sp, #28]
 80089c2:	3307      	adds	r3, #7
 80089c4:	4393      	bics	r3, r2
 80089c6:	3308      	adds	r3, #8
 80089c8:	9307      	str	r3, [sp, #28]
 80089ca:	696b      	ldr	r3, [r5, #20]
 80089cc:	9a04      	ldr	r2, [sp, #16]
 80089ce:	189b      	adds	r3, r3, r2
 80089d0:	616b      	str	r3, [r5, #20]
 80089d2:	e75d      	b.n	8008890 <_vfiprintf_r+0x8c>
 80089d4:	210a      	movs	r1, #10
 80089d6:	434b      	muls	r3, r1
 80089d8:	4667      	mov	r7, ip
 80089da:	189b      	adds	r3, r3, r2
 80089dc:	3909      	subs	r1, #9
 80089de:	e7a3      	b.n	8008928 <_vfiprintf_r+0x124>
 80089e0:	2301      	movs	r3, #1
 80089e2:	425b      	negs	r3, r3
 80089e4:	e7ce      	b.n	8008984 <_vfiprintf_r+0x180>
 80089e6:	2300      	movs	r3, #0
 80089e8:	001a      	movs	r2, r3
 80089ea:	3701      	adds	r7, #1
 80089ec:	606b      	str	r3, [r5, #4]
 80089ee:	7839      	ldrb	r1, [r7, #0]
 80089f0:	1c78      	adds	r0, r7, #1
 80089f2:	3930      	subs	r1, #48	; 0x30
 80089f4:	4684      	mov	ip, r0
 80089f6:	2909      	cmp	r1, #9
 80089f8:	d903      	bls.n	8008a02 <_vfiprintf_r+0x1fe>
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d0c3      	beq.n	8008986 <_vfiprintf_r+0x182>
 80089fe:	9209      	str	r2, [sp, #36]	; 0x24
 8008a00:	e7c1      	b.n	8008986 <_vfiprintf_r+0x182>
 8008a02:	230a      	movs	r3, #10
 8008a04:	435a      	muls	r2, r3
 8008a06:	4667      	mov	r7, ip
 8008a08:	1852      	adds	r2, r2, r1
 8008a0a:	3b09      	subs	r3, #9
 8008a0c:	e7ef      	b.n	80089ee <_vfiprintf_r+0x1ea>
 8008a0e:	ab07      	add	r3, sp, #28
 8008a10:	9300      	str	r3, [sp, #0]
 8008a12:	0022      	movs	r2, r4
 8008a14:	0029      	movs	r1, r5
 8008a16:	0030      	movs	r0, r6
 8008a18:	4b16      	ldr	r3, [pc, #88]	; (8008a74 <_vfiprintf_r+0x270>)
 8008a1a:	f7fd fd77 	bl	800650c <_printf_float>
 8008a1e:	9004      	str	r0, [sp, #16]
 8008a20:	9b04      	ldr	r3, [sp, #16]
 8008a22:	3301      	adds	r3, #1
 8008a24:	d1d1      	bne.n	80089ca <_vfiprintf_r+0x1c6>
 8008a26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a28:	07db      	lsls	r3, r3, #31
 8008a2a:	d405      	bmi.n	8008a38 <_vfiprintf_r+0x234>
 8008a2c:	89a3      	ldrh	r3, [r4, #12]
 8008a2e:	059b      	lsls	r3, r3, #22
 8008a30:	d402      	bmi.n	8008a38 <_vfiprintf_r+0x234>
 8008a32:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a34:	f000 fad4 	bl	8008fe0 <__retarget_lock_release_recursive>
 8008a38:	89a3      	ldrh	r3, [r4, #12]
 8008a3a:	065b      	lsls	r3, r3, #25
 8008a3c:	d500      	bpl.n	8008a40 <_vfiprintf_r+0x23c>
 8008a3e:	e70a      	b.n	8008856 <_vfiprintf_r+0x52>
 8008a40:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008a42:	e70a      	b.n	800885a <_vfiprintf_r+0x56>
 8008a44:	ab07      	add	r3, sp, #28
 8008a46:	9300      	str	r3, [sp, #0]
 8008a48:	0022      	movs	r2, r4
 8008a4a:	0029      	movs	r1, r5
 8008a4c:	0030      	movs	r0, r6
 8008a4e:	4b09      	ldr	r3, [pc, #36]	; (8008a74 <_vfiprintf_r+0x270>)
 8008a50:	f7fe f80e 	bl	8006a70 <_printf_i>
 8008a54:	e7e3      	b.n	8008a1e <_vfiprintf_r+0x21a>
 8008a56:	46c0      	nop			; (mov r8, r8)
 8008a58:	0800bcec 	.word	0x0800bcec
 8008a5c:	0800bd0c 	.word	0x0800bd0c
 8008a60:	0800bccc 	.word	0x0800bccc
 8008a64:	0800bb74 	.word	0x0800bb74
 8008a68:	0800bb7a 	.word	0x0800bb7a
 8008a6c:	0800bb7e 	.word	0x0800bb7e
 8008a70:	0800650d 	.word	0x0800650d
 8008a74:	080087e1 	.word	0x080087e1

08008a78 <__swbuf_r>:
 8008a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a7a:	0005      	movs	r5, r0
 8008a7c:	000e      	movs	r6, r1
 8008a7e:	0014      	movs	r4, r2
 8008a80:	2800      	cmp	r0, #0
 8008a82:	d004      	beq.n	8008a8e <__swbuf_r+0x16>
 8008a84:	6983      	ldr	r3, [r0, #24]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d101      	bne.n	8008a8e <__swbuf_r+0x16>
 8008a8a:	f000 fa07 	bl	8008e9c <__sinit>
 8008a8e:	4b22      	ldr	r3, [pc, #136]	; (8008b18 <__swbuf_r+0xa0>)
 8008a90:	429c      	cmp	r4, r3
 8008a92:	d12e      	bne.n	8008af2 <__swbuf_r+0x7a>
 8008a94:	686c      	ldr	r4, [r5, #4]
 8008a96:	69a3      	ldr	r3, [r4, #24]
 8008a98:	60a3      	str	r3, [r4, #8]
 8008a9a:	89a3      	ldrh	r3, [r4, #12]
 8008a9c:	071b      	lsls	r3, r3, #28
 8008a9e:	d532      	bpl.n	8008b06 <__swbuf_r+0x8e>
 8008aa0:	6923      	ldr	r3, [r4, #16]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d02f      	beq.n	8008b06 <__swbuf_r+0x8e>
 8008aa6:	6823      	ldr	r3, [r4, #0]
 8008aa8:	6922      	ldr	r2, [r4, #16]
 8008aaa:	b2f7      	uxtb	r7, r6
 8008aac:	1a98      	subs	r0, r3, r2
 8008aae:	6963      	ldr	r3, [r4, #20]
 8008ab0:	b2f6      	uxtb	r6, r6
 8008ab2:	4283      	cmp	r3, r0
 8008ab4:	dc05      	bgt.n	8008ac2 <__swbuf_r+0x4a>
 8008ab6:	0021      	movs	r1, r4
 8008ab8:	0028      	movs	r0, r5
 8008aba:	f000 f94d 	bl	8008d58 <_fflush_r>
 8008abe:	2800      	cmp	r0, #0
 8008ac0:	d127      	bne.n	8008b12 <__swbuf_r+0x9a>
 8008ac2:	68a3      	ldr	r3, [r4, #8]
 8008ac4:	3001      	adds	r0, #1
 8008ac6:	3b01      	subs	r3, #1
 8008ac8:	60a3      	str	r3, [r4, #8]
 8008aca:	6823      	ldr	r3, [r4, #0]
 8008acc:	1c5a      	adds	r2, r3, #1
 8008ace:	6022      	str	r2, [r4, #0]
 8008ad0:	701f      	strb	r7, [r3, #0]
 8008ad2:	6963      	ldr	r3, [r4, #20]
 8008ad4:	4283      	cmp	r3, r0
 8008ad6:	d004      	beq.n	8008ae2 <__swbuf_r+0x6a>
 8008ad8:	89a3      	ldrh	r3, [r4, #12]
 8008ada:	07db      	lsls	r3, r3, #31
 8008adc:	d507      	bpl.n	8008aee <__swbuf_r+0x76>
 8008ade:	2e0a      	cmp	r6, #10
 8008ae0:	d105      	bne.n	8008aee <__swbuf_r+0x76>
 8008ae2:	0021      	movs	r1, r4
 8008ae4:	0028      	movs	r0, r5
 8008ae6:	f000 f937 	bl	8008d58 <_fflush_r>
 8008aea:	2800      	cmp	r0, #0
 8008aec:	d111      	bne.n	8008b12 <__swbuf_r+0x9a>
 8008aee:	0030      	movs	r0, r6
 8008af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008af2:	4b0a      	ldr	r3, [pc, #40]	; (8008b1c <__swbuf_r+0xa4>)
 8008af4:	429c      	cmp	r4, r3
 8008af6:	d101      	bne.n	8008afc <__swbuf_r+0x84>
 8008af8:	68ac      	ldr	r4, [r5, #8]
 8008afa:	e7cc      	b.n	8008a96 <__swbuf_r+0x1e>
 8008afc:	4b08      	ldr	r3, [pc, #32]	; (8008b20 <__swbuf_r+0xa8>)
 8008afe:	429c      	cmp	r4, r3
 8008b00:	d1c9      	bne.n	8008a96 <__swbuf_r+0x1e>
 8008b02:	68ec      	ldr	r4, [r5, #12]
 8008b04:	e7c7      	b.n	8008a96 <__swbuf_r+0x1e>
 8008b06:	0021      	movs	r1, r4
 8008b08:	0028      	movs	r0, r5
 8008b0a:	f000 f819 	bl	8008b40 <__swsetup_r>
 8008b0e:	2800      	cmp	r0, #0
 8008b10:	d0c9      	beq.n	8008aa6 <__swbuf_r+0x2e>
 8008b12:	2601      	movs	r6, #1
 8008b14:	4276      	negs	r6, r6
 8008b16:	e7ea      	b.n	8008aee <__swbuf_r+0x76>
 8008b18:	0800bcec 	.word	0x0800bcec
 8008b1c:	0800bd0c 	.word	0x0800bd0c
 8008b20:	0800bccc 	.word	0x0800bccc

08008b24 <__ascii_wctomb>:
 8008b24:	0003      	movs	r3, r0
 8008b26:	1e08      	subs	r0, r1, #0
 8008b28:	d005      	beq.n	8008b36 <__ascii_wctomb+0x12>
 8008b2a:	2aff      	cmp	r2, #255	; 0xff
 8008b2c:	d904      	bls.n	8008b38 <__ascii_wctomb+0x14>
 8008b2e:	228a      	movs	r2, #138	; 0x8a
 8008b30:	2001      	movs	r0, #1
 8008b32:	601a      	str	r2, [r3, #0]
 8008b34:	4240      	negs	r0, r0
 8008b36:	4770      	bx	lr
 8008b38:	2001      	movs	r0, #1
 8008b3a:	700a      	strb	r2, [r1, #0]
 8008b3c:	e7fb      	b.n	8008b36 <__ascii_wctomb+0x12>
	...

08008b40 <__swsetup_r>:
 8008b40:	4b37      	ldr	r3, [pc, #220]	; (8008c20 <__swsetup_r+0xe0>)
 8008b42:	b570      	push	{r4, r5, r6, lr}
 8008b44:	681d      	ldr	r5, [r3, #0]
 8008b46:	0006      	movs	r6, r0
 8008b48:	000c      	movs	r4, r1
 8008b4a:	2d00      	cmp	r5, #0
 8008b4c:	d005      	beq.n	8008b5a <__swsetup_r+0x1a>
 8008b4e:	69ab      	ldr	r3, [r5, #24]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d102      	bne.n	8008b5a <__swsetup_r+0x1a>
 8008b54:	0028      	movs	r0, r5
 8008b56:	f000 f9a1 	bl	8008e9c <__sinit>
 8008b5a:	4b32      	ldr	r3, [pc, #200]	; (8008c24 <__swsetup_r+0xe4>)
 8008b5c:	429c      	cmp	r4, r3
 8008b5e:	d10f      	bne.n	8008b80 <__swsetup_r+0x40>
 8008b60:	686c      	ldr	r4, [r5, #4]
 8008b62:	230c      	movs	r3, #12
 8008b64:	5ee2      	ldrsh	r2, [r4, r3]
 8008b66:	b293      	uxth	r3, r2
 8008b68:	0711      	lsls	r1, r2, #28
 8008b6a:	d42d      	bmi.n	8008bc8 <__swsetup_r+0x88>
 8008b6c:	06d9      	lsls	r1, r3, #27
 8008b6e:	d411      	bmi.n	8008b94 <__swsetup_r+0x54>
 8008b70:	2309      	movs	r3, #9
 8008b72:	2001      	movs	r0, #1
 8008b74:	6033      	str	r3, [r6, #0]
 8008b76:	3337      	adds	r3, #55	; 0x37
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	81a3      	strh	r3, [r4, #12]
 8008b7c:	4240      	negs	r0, r0
 8008b7e:	bd70      	pop	{r4, r5, r6, pc}
 8008b80:	4b29      	ldr	r3, [pc, #164]	; (8008c28 <__swsetup_r+0xe8>)
 8008b82:	429c      	cmp	r4, r3
 8008b84:	d101      	bne.n	8008b8a <__swsetup_r+0x4a>
 8008b86:	68ac      	ldr	r4, [r5, #8]
 8008b88:	e7eb      	b.n	8008b62 <__swsetup_r+0x22>
 8008b8a:	4b28      	ldr	r3, [pc, #160]	; (8008c2c <__swsetup_r+0xec>)
 8008b8c:	429c      	cmp	r4, r3
 8008b8e:	d1e8      	bne.n	8008b62 <__swsetup_r+0x22>
 8008b90:	68ec      	ldr	r4, [r5, #12]
 8008b92:	e7e6      	b.n	8008b62 <__swsetup_r+0x22>
 8008b94:	075b      	lsls	r3, r3, #29
 8008b96:	d513      	bpl.n	8008bc0 <__swsetup_r+0x80>
 8008b98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b9a:	2900      	cmp	r1, #0
 8008b9c:	d008      	beq.n	8008bb0 <__swsetup_r+0x70>
 8008b9e:	0023      	movs	r3, r4
 8008ba0:	3344      	adds	r3, #68	; 0x44
 8008ba2:	4299      	cmp	r1, r3
 8008ba4:	d002      	beq.n	8008bac <__swsetup_r+0x6c>
 8008ba6:	0030      	movs	r0, r6
 8008ba8:	f7ff fb1c 	bl	80081e4 <_free_r>
 8008bac:	2300      	movs	r3, #0
 8008bae:	6363      	str	r3, [r4, #52]	; 0x34
 8008bb0:	2224      	movs	r2, #36	; 0x24
 8008bb2:	89a3      	ldrh	r3, [r4, #12]
 8008bb4:	4393      	bics	r3, r2
 8008bb6:	81a3      	strh	r3, [r4, #12]
 8008bb8:	2300      	movs	r3, #0
 8008bba:	6063      	str	r3, [r4, #4]
 8008bbc:	6923      	ldr	r3, [r4, #16]
 8008bbe:	6023      	str	r3, [r4, #0]
 8008bc0:	2308      	movs	r3, #8
 8008bc2:	89a2      	ldrh	r2, [r4, #12]
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	81a3      	strh	r3, [r4, #12]
 8008bc8:	6923      	ldr	r3, [r4, #16]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d10b      	bne.n	8008be6 <__swsetup_r+0xa6>
 8008bce:	21a0      	movs	r1, #160	; 0xa0
 8008bd0:	2280      	movs	r2, #128	; 0x80
 8008bd2:	89a3      	ldrh	r3, [r4, #12]
 8008bd4:	0089      	lsls	r1, r1, #2
 8008bd6:	0092      	lsls	r2, r2, #2
 8008bd8:	400b      	ands	r3, r1
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d003      	beq.n	8008be6 <__swsetup_r+0xa6>
 8008bde:	0021      	movs	r1, r4
 8008be0:	0030      	movs	r0, r6
 8008be2:	f000 fa27 	bl	8009034 <__smakebuf_r>
 8008be6:	220c      	movs	r2, #12
 8008be8:	5ea3      	ldrsh	r3, [r4, r2]
 8008bea:	2001      	movs	r0, #1
 8008bec:	001a      	movs	r2, r3
 8008bee:	b299      	uxth	r1, r3
 8008bf0:	4002      	ands	r2, r0
 8008bf2:	4203      	tst	r3, r0
 8008bf4:	d00f      	beq.n	8008c16 <__swsetup_r+0xd6>
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	60a2      	str	r2, [r4, #8]
 8008bfa:	6962      	ldr	r2, [r4, #20]
 8008bfc:	4252      	negs	r2, r2
 8008bfe:	61a2      	str	r2, [r4, #24]
 8008c00:	2000      	movs	r0, #0
 8008c02:	6922      	ldr	r2, [r4, #16]
 8008c04:	4282      	cmp	r2, r0
 8008c06:	d1ba      	bne.n	8008b7e <__swsetup_r+0x3e>
 8008c08:	060a      	lsls	r2, r1, #24
 8008c0a:	d5b8      	bpl.n	8008b7e <__swsetup_r+0x3e>
 8008c0c:	2240      	movs	r2, #64	; 0x40
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	81a3      	strh	r3, [r4, #12]
 8008c12:	3801      	subs	r0, #1
 8008c14:	e7b3      	b.n	8008b7e <__swsetup_r+0x3e>
 8008c16:	0788      	lsls	r0, r1, #30
 8008c18:	d400      	bmi.n	8008c1c <__swsetup_r+0xdc>
 8008c1a:	6962      	ldr	r2, [r4, #20]
 8008c1c:	60a2      	str	r2, [r4, #8]
 8008c1e:	e7ef      	b.n	8008c00 <__swsetup_r+0xc0>
 8008c20:	20000024 	.word	0x20000024
 8008c24:	0800bcec 	.word	0x0800bcec
 8008c28:	0800bd0c 	.word	0x0800bd0c
 8008c2c:	0800bccc 	.word	0x0800bccc

08008c30 <abort>:
 8008c30:	2006      	movs	r0, #6
 8008c32:	b510      	push	{r4, lr}
 8008c34:	f000 fa74 	bl	8009120 <raise>
 8008c38:	2001      	movs	r0, #1
 8008c3a:	f7fb fe61 	bl	8004900 <_exit>
	...

08008c40 <__sflush_r>:
 8008c40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c42:	898b      	ldrh	r3, [r1, #12]
 8008c44:	0005      	movs	r5, r0
 8008c46:	000c      	movs	r4, r1
 8008c48:	071a      	lsls	r2, r3, #28
 8008c4a:	d45f      	bmi.n	8008d0c <__sflush_r+0xcc>
 8008c4c:	684a      	ldr	r2, [r1, #4]
 8008c4e:	2a00      	cmp	r2, #0
 8008c50:	dc04      	bgt.n	8008c5c <__sflush_r+0x1c>
 8008c52:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8008c54:	2a00      	cmp	r2, #0
 8008c56:	dc01      	bgt.n	8008c5c <__sflush_r+0x1c>
 8008c58:	2000      	movs	r0, #0
 8008c5a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008c5c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008c5e:	2f00      	cmp	r7, #0
 8008c60:	d0fa      	beq.n	8008c58 <__sflush_r+0x18>
 8008c62:	2200      	movs	r2, #0
 8008c64:	2180      	movs	r1, #128	; 0x80
 8008c66:	682e      	ldr	r6, [r5, #0]
 8008c68:	602a      	str	r2, [r5, #0]
 8008c6a:	001a      	movs	r2, r3
 8008c6c:	0149      	lsls	r1, r1, #5
 8008c6e:	400a      	ands	r2, r1
 8008c70:	420b      	tst	r3, r1
 8008c72:	d034      	beq.n	8008cde <__sflush_r+0x9e>
 8008c74:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008c76:	89a3      	ldrh	r3, [r4, #12]
 8008c78:	075b      	lsls	r3, r3, #29
 8008c7a:	d506      	bpl.n	8008c8a <__sflush_r+0x4a>
 8008c7c:	6863      	ldr	r3, [r4, #4]
 8008c7e:	1ac0      	subs	r0, r0, r3
 8008c80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d001      	beq.n	8008c8a <__sflush_r+0x4a>
 8008c86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c88:	1ac0      	subs	r0, r0, r3
 8008c8a:	0002      	movs	r2, r0
 8008c8c:	6a21      	ldr	r1, [r4, #32]
 8008c8e:	2300      	movs	r3, #0
 8008c90:	0028      	movs	r0, r5
 8008c92:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008c94:	47b8      	blx	r7
 8008c96:	89a1      	ldrh	r1, [r4, #12]
 8008c98:	1c43      	adds	r3, r0, #1
 8008c9a:	d106      	bne.n	8008caa <__sflush_r+0x6a>
 8008c9c:	682b      	ldr	r3, [r5, #0]
 8008c9e:	2b1d      	cmp	r3, #29
 8008ca0:	d831      	bhi.n	8008d06 <__sflush_r+0xc6>
 8008ca2:	4a2c      	ldr	r2, [pc, #176]	; (8008d54 <__sflush_r+0x114>)
 8008ca4:	40da      	lsrs	r2, r3
 8008ca6:	07d3      	lsls	r3, r2, #31
 8008ca8:	d52d      	bpl.n	8008d06 <__sflush_r+0xc6>
 8008caa:	2300      	movs	r3, #0
 8008cac:	6063      	str	r3, [r4, #4]
 8008cae:	6923      	ldr	r3, [r4, #16]
 8008cb0:	6023      	str	r3, [r4, #0]
 8008cb2:	04cb      	lsls	r3, r1, #19
 8008cb4:	d505      	bpl.n	8008cc2 <__sflush_r+0x82>
 8008cb6:	1c43      	adds	r3, r0, #1
 8008cb8:	d102      	bne.n	8008cc0 <__sflush_r+0x80>
 8008cba:	682b      	ldr	r3, [r5, #0]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d100      	bne.n	8008cc2 <__sflush_r+0x82>
 8008cc0:	6560      	str	r0, [r4, #84]	; 0x54
 8008cc2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008cc4:	602e      	str	r6, [r5, #0]
 8008cc6:	2900      	cmp	r1, #0
 8008cc8:	d0c6      	beq.n	8008c58 <__sflush_r+0x18>
 8008cca:	0023      	movs	r3, r4
 8008ccc:	3344      	adds	r3, #68	; 0x44
 8008cce:	4299      	cmp	r1, r3
 8008cd0:	d002      	beq.n	8008cd8 <__sflush_r+0x98>
 8008cd2:	0028      	movs	r0, r5
 8008cd4:	f7ff fa86 	bl	80081e4 <_free_r>
 8008cd8:	2000      	movs	r0, #0
 8008cda:	6360      	str	r0, [r4, #52]	; 0x34
 8008cdc:	e7bd      	b.n	8008c5a <__sflush_r+0x1a>
 8008cde:	2301      	movs	r3, #1
 8008ce0:	0028      	movs	r0, r5
 8008ce2:	6a21      	ldr	r1, [r4, #32]
 8008ce4:	47b8      	blx	r7
 8008ce6:	1c43      	adds	r3, r0, #1
 8008ce8:	d1c5      	bne.n	8008c76 <__sflush_r+0x36>
 8008cea:	682b      	ldr	r3, [r5, #0]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d0c2      	beq.n	8008c76 <__sflush_r+0x36>
 8008cf0:	2b1d      	cmp	r3, #29
 8008cf2:	d001      	beq.n	8008cf8 <__sflush_r+0xb8>
 8008cf4:	2b16      	cmp	r3, #22
 8008cf6:	d101      	bne.n	8008cfc <__sflush_r+0xbc>
 8008cf8:	602e      	str	r6, [r5, #0]
 8008cfa:	e7ad      	b.n	8008c58 <__sflush_r+0x18>
 8008cfc:	2340      	movs	r3, #64	; 0x40
 8008cfe:	89a2      	ldrh	r2, [r4, #12]
 8008d00:	4313      	orrs	r3, r2
 8008d02:	81a3      	strh	r3, [r4, #12]
 8008d04:	e7a9      	b.n	8008c5a <__sflush_r+0x1a>
 8008d06:	2340      	movs	r3, #64	; 0x40
 8008d08:	430b      	orrs	r3, r1
 8008d0a:	e7fa      	b.n	8008d02 <__sflush_r+0xc2>
 8008d0c:	690f      	ldr	r7, [r1, #16]
 8008d0e:	2f00      	cmp	r7, #0
 8008d10:	d0a2      	beq.n	8008c58 <__sflush_r+0x18>
 8008d12:	680a      	ldr	r2, [r1, #0]
 8008d14:	600f      	str	r7, [r1, #0]
 8008d16:	1bd2      	subs	r2, r2, r7
 8008d18:	9201      	str	r2, [sp, #4]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	079b      	lsls	r3, r3, #30
 8008d1e:	d100      	bne.n	8008d22 <__sflush_r+0xe2>
 8008d20:	694a      	ldr	r2, [r1, #20]
 8008d22:	60a2      	str	r2, [r4, #8]
 8008d24:	9b01      	ldr	r3, [sp, #4]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	dc00      	bgt.n	8008d2c <__sflush_r+0xec>
 8008d2a:	e795      	b.n	8008c58 <__sflush_r+0x18>
 8008d2c:	003a      	movs	r2, r7
 8008d2e:	0028      	movs	r0, r5
 8008d30:	9b01      	ldr	r3, [sp, #4]
 8008d32:	6a21      	ldr	r1, [r4, #32]
 8008d34:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008d36:	47b0      	blx	r6
 8008d38:	2800      	cmp	r0, #0
 8008d3a:	dc06      	bgt.n	8008d4a <__sflush_r+0x10a>
 8008d3c:	2340      	movs	r3, #64	; 0x40
 8008d3e:	2001      	movs	r0, #1
 8008d40:	89a2      	ldrh	r2, [r4, #12]
 8008d42:	4240      	negs	r0, r0
 8008d44:	4313      	orrs	r3, r2
 8008d46:	81a3      	strh	r3, [r4, #12]
 8008d48:	e787      	b.n	8008c5a <__sflush_r+0x1a>
 8008d4a:	9b01      	ldr	r3, [sp, #4]
 8008d4c:	183f      	adds	r7, r7, r0
 8008d4e:	1a1b      	subs	r3, r3, r0
 8008d50:	9301      	str	r3, [sp, #4]
 8008d52:	e7e7      	b.n	8008d24 <__sflush_r+0xe4>
 8008d54:	20400001 	.word	0x20400001

08008d58 <_fflush_r>:
 8008d58:	690b      	ldr	r3, [r1, #16]
 8008d5a:	b570      	push	{r4, r5, r6, lr}
 8008d5c:	0005      	movs	r5, r0
 8008d5e:	000c      	movs	r4, r1
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d102      	bne.n	8008d6a <_fflush_r+0x12>
 8008d64:	2500      	movs	r5, #0
 8008d66:	0028      	movs	r0, r5
 8008d68:	bd70      	pop	{r4, r5, r6, pc}
 8008d6a:	2800      	cmp	r0, #0
 8008d6c:	d004      	beq.n	8008d78 <_fflush_r+0x20>
 8008d6e:	6983      	ldr	r3, [r0, #24]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d101      	bne.n	8008d78 <_fflush_r+0x20>
 8008d74:	f000 f892 	bl	8008e9c <__sinit>
 8008d78:	4b14      	ldr	r3, [pc, #80]	; (8008dcc <_fflush_r+0x74>)
 8008d7a:	429c      	cmp	r4, r3
 8008d7c:	d11b      	bne.n	8008db6 <_fflush_r+0x5e>
 8008d7e:	686c      	ldr	r4, [r5, #4]
 8008d80:	220c      	movs	r2, #12
 8008d82:	5ea3      	ldrsh	r3, [r4, r2]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d0ed      	beq.n	8008d64 <_fflush_r+0xc>
 8008d88:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008d8a:	07d2      	lsls	r2, r2, #31
 8008d8c:	d404      	bmi.n	8008d98 <_fflush_r+0x40>
 8008d8e:	059b      	lsls	r3, r3, #22
 8008d90:	d402      	bmi.n	8008d98 <_fflush_r+0x40>
 8008d92:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d94:	f000 f923 	bl	8008fde <__retarget_lock_acquire_recursive>
 8008d98:	0028      	movs	r0, r5
 8008d9a:	0021      	movs	r1, r4
 8008d9c:	f7ff ff50 	bl	8008c40 <__sflush_r>
 8008da0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008da2:	0005      	movs	r5, r0
 8008da4:	07db      	lsls	r3, r3, #31
 8008da6:	d4de      	bmi.n	8008d66 <_fflush_r+0xe>
 8008da8:	89a3      	ldrh	r3, [r4, #12]
 8008daa:	059b      	lsls	r3, r3, #22
 8008dac:	d4db      	bmi.n	8008d66 <_fflush_r+0xe>
 8008dae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008db0:	f000 f916 	bl	8008fe0 <__retarget_lock_release_recursive>
 8008db4:	e7d7      	b.n	8008d66 <_fflush_r+0xe>
 8008db6:	4b06      	ldr	r3, [pc, #24]	; (8008dd0 <_fflush_r+0x78>)
 8008db8:	429c      	cmp	r4, r3
 8008dba:	d101      	bne.n	8008dc0 <_fflush_r+0x68>
 8008dbc:	68ac      	ldr	r4, [r5, #8]
 8008dbe:	e7df      	b.n	8008d80 <_fflush_r+0x28>
 8008dc0:	4b04      	ldr	r3, [pc, #16]	; (8008dd4 <_fflush_r+0x7c>)
 8008dc2:	429c      	cmp	r4, r3
 8008dc4:	d1dc      	bne.n	8008d80 <_fflush_r+0x28>
 8008dc6:	68ec      	ldr	r4, [r5, #12]
 8008dc8:	e7da      	b.n	8008d80 <_fflush_r+0x28>
 8008dca:	46c0      	nop			; (mov r8, r8)
 8008dcc:	0800bcec 	.word	0x0800bcec
 8008dd0:	0800bd0c 	.word	0x0800bd0c
 8008dd4:	0800bccc 	.word	0x0800bccc

08008dd8 <std>:
 8008dd8:	2300      	movs	r3, #0
 8008dda:	b510      	push	{r4, lr}
 8008ddc:	0004      	movs	r4, r0
 8008dde:	6003      	str	r3, [r0, #0]
 8008de0:	6043      	str	r3, [r0, #4]
 8008de2:	6083      	str	r3, [r0, #8]
 8008de4:	8181      	strh	r1, [r0, #12]
 8008de6:	6643      	str	r3, [r0, #100]	; 0x64
 8008de8:	0019      	movs	r1, r3
 8008dea:	81c2      	strh	r2, [r0, #14]
 8008dec:	6103      	str	r3, [r0, #16]
 8008dee:	6143      	str	r3, [r0, #20]
 8008df0:	6183      	str	r3, [r0, #24]
 8008df2:	2208      	movs	r2, #8
 8008df4:	305c      	adds	r0, #92	; 0x5c
 8008df6:	f7fd fad6 	bl	80063a6 <memset>
 8008dfa:	4b05      	ldr	r3, [pc, #20]	; (8008e10 <std+0x38>)
 8008dfc:	6224      	str	r4, [r4, #32]
 8008dfe:	6263      	str	r3, [r4, #36]	; 0x24
 8008e00:	4b04      	ldr	r3, [pc, #16]	; (8008e14 <std+0x3c>)
 8008e02:	62a3      	str	r3, [r4, #40]	; 0x28
 8008e04:	4b04      	ldr	r3, [pc, #16]	; (8008e18 <std+0x40>)
 8008e06:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008e08:	4b04      	ldr	r3, [pc, #16]	; (8008e1c <std+0x44>)
 8008e0a:	6323      	str	r3, [r4, #48]	; 0x30
 8008e0c:	bd10      	pop	{r4, pc}
 8008e0e:	46c0      	nop			; (mov r8, r8)
 8008e10:	08009161 	.word	0x08009161
 8008e14:	08009189 	.word	0x08009189
 8008e18:	080091c1 	.word	0x080091c1
 8008e1c:	080091ed 	.word	0x080091ed

08008e20 <_cleanup_r>:
 8008e20:	b510      	push	{r4, lr}
 8008e22:	4902      	ldr	r1, [pc, #8]	; (8008e2c <_cleanup_r+0xc>)
 8008e24:	f000 f8ba 	bl	8008f9c <_fwalk_reent>
 8008e28:	bd10      	pop	{r4, pc}
 8008e2a:	46c0      	nop			; (mov r8, r8)
 8008e2c:	08008d59 	.word	0x08008d59

08008e30 <__sfmoreglue>:
 8008e30:	b570      	push	{r4, r5, r6, lr}
 8008e32:	2568      	movs	r5, #104	; 0x68
 8008e34:	1e4a      	subs	r2, r1, #1
 8008e36:	4355      	muls	r5, r2
 8008e38:	000e      	movs	r6, r1
 8008e3a:	0029      	movs	r1, r5
 8008e3c:	3174      	adds	r1, #116	; 0x74
 8008e3e:	f7ff fa3d 	bl	80082bc <_malloc_r>
 8008e42:	1e04      	subs	r4, r0, #0
 8008e44:	d008      	beq.n	8008e58 <__sfmoreglue+0x28>
 8008e46:	2100      	movs	r1, #0
 8008e48:	002a      	movs	r2, r5
 8008e4a:	6001      	str	r1, [r0, #0]
 8008e4c:	6046      	str	r6, [r0, #4]
 8008e4e:	300c      	adds	r0, #12
 8008e50:	60a0      	str	r0, [r4, #8]
 8008e52:	3268      	adds	r2, #104	; 0x68
 8008e54:	f7fd faa7 	bl	80063a6 <memset>
 8008e58:	0020      	movs	r0, r4
 8008e5a:	bd70      	pop	{r4, r5, r6, pc}

08008e5c <__sfp_lock_acquire>:
 8008e5c:	b510      	push	{r4, lr}
 8008e5e:	4802      	ldr	r0, [pc, #8]	; (8008e68 <__sfp_lock_acquire+0xc>)
 8008e60:	f000 f8bd 	bl	8008fde <__retarget_lock_acquire_recursive>
 8008e64:	bd10      	pop	{r4, pc}
 8008e66:	46c0      	nop			; (mov r8, r8)
 8008e68:	2000079d 	.word	0x2000079d

08008e6c <__sfp_lock_release>:
 8008e6c:	b510      	push	{r4, lr}
 8008e6e:	4802      	ldr	r0, [pc, #8]	; (8008e78 <__sfp_lock_release+0xc>)
 8008e70:	f000 f8b6 	bl	8008fe0 <__retarget_lock_release_recursive>
 8008e74:	bd10      	pop	{r4, pc}
 8008e76:	46c0      	nop			; (mov r8, r8)
 8008e78:	2000079d 	.word	0x2000079d

08008e7c <__sinit_lock_acquire>:
 8008e7c:	b510      	push	{r4, lr}
 8008e7e:	4802      	ldr	r0, [pc, #8]	; (8008e88 <__sinit_lock_acquire+0xc>)
 8008e80:	f000 f8ad 	bl	8008fde <__retarget_lock_acquire_recursive>
 8008e84:	bd10      	pop	{r4, pc}
 8008e86:	46c0      	nop			; (mov r8, r8)
 8008e88:	2000079e 	.word	0x2000079e

08008e8c <__sinit_lock_release>:
 8008e8c:	b510      	push	{r4, lr}
 8008e8e:	4802      	ldr	r0, [pc, #8]	; (8008e98 <__sinit_lock_release+0xc>)
 8008e90:	f000 f8a6 	bl	8008fe0 <__retarget_lock_release_recursive>
 8008e94:	bd10      	pop	{r4, pc}
 8008e96:	46c0      	nop			; (mov r8, r8)
 8008e98:	2000079e 	.word	0x2000079e

08008e9c <__sinit>:
 8008e9c:	b513      	push	{r0, r1, r4, lr}
 8008e9e:	0004      	movs	r4, r0
 8008ea0:	f7ff ffec 	bl	8008e7c <__sinit_lock_acquire>
 8008ea4:	69a3      	ldr	r3, [r4, #24]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d002      	beq.n	8008eb0 <__sinit+0x14>
 8008eaa:	f7ff ffef 	bl	8008e8c <__sinit_lock_release>
 8008eae:	bd13      	pop	{r0, r1, r4, pc}
 8008eb0:	64a3      	str	r3, [r4, #72]	; 0x48
 8008eb2:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008eb4:	6523      	str	r3, [r4, #80]	; 0x50
 8008eb6:	4b13      	ldr	r3, [pc, #76]	; (8008f04 <__sinit+0x68>)
 8008eb8:	4a13      	ldr	r2, [pc, #76]	; (8008f08 <__sinit+0x6c>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	62a2      	str	r2, [r4, #40]	; 0x28
 8008ebe:	9301      	str	r3, [sp, #4]
 8008ec0:	42a3      	cmp	r3, r4
 8008ec2:	d101      	bne.n	8008ec8 <__sinit+0x2c>
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	61a3      	str	r3, [r4, #24]
 8008ec8:	0020      	movs	r0, r4
 8008eca:	f000 f81f 	bl	8008f0c <__sfp>
 8008ece:	6060      	str	r0, [r4, #4]
 8008ed0:	0020      	movs	r0, r4
 8008ed2:	f000 f81b 	bl	8008f0c <__sfp>
 8008ed6:	60a0      	str	r0, [r4, #8]
 8008ed8:	0020      	movs	r0, r4
 8008eda:	f000 f817 	bl	8008f0c <__sfp>
 8008ede:	2200      	movs	r2, #0
 8008ee0:	2104      	movs	r1, #4
 8008ee2:	60e0      	str	r0, [r4, #12]
 8008ee4:	6860      	ldr	r0, [r4, #4]
 8008ee6:	f7ff ff77 	bl	8008dd8 <std>
 8008eea:	2201      	movs	r2, #1
 8008eec:	2109      	movs	r1, #9
 8008eee:	68a0      	ldr	r0, [r4, #8]
 8008ef0:	f7ff ff72 	bl	8008dd8 <std>
 8008ef4:	2202      	movs	r2, #2
 8008ef6:	2112      	movs	r1, #18
 8008ef8:	68e0      	ldr	r0, [r4, #12]
 8008efa:	f7ff ff6d 	bl	8008dd8 <std>
 8008efe:	2301      	movs	r3, #1
 8008f00:	61a3      	str	r3, [r4, #24]
 8008f02:	e7d2      	b.n	8008eaa <__sinit+0xe>
 8008f04:	0800b954 	.word	0x0800b954
 8008f08:	08008e21 	.word	0x08008e21

08008f0c <__sfp>:
 8008f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f0e:	0007      	movs	r7, r0
 8008f10:	f7ff ffa4 	bl	8008e5c <__sfp_lock_acquire>
 8008f14:	4b1f      	ldr	r3, [pc, #124]	; (8008f94 <__sfp+0x88>)
 8008f16:	681e      	ldr	r6, [r3, #0]
 8008f18:	69b3      	ldr	r3, [r6, #24]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d102      	bne.n	8008f24 <__sfp+0x18>
 8008f1e:	0030      	movs	r0, r6
 8008f20:	f7ff ffbc 	bl	8008e9c <__sinit>
 8008f24:	3648      	adds	r6, #72	; 0x48
 8008f26:	68b4      	ldr	r4, [r6, #8]
 8008f28:	6873      	ldr	r3, [r6, #4]
 8008f2a:	3b01      	subs	r3, #1
 8008f2c:	d504      	bpl.n	8008f38 <__sfp+0x2c>
 8008f2e:	6833      	ldr	r3, [r6, #0]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d022      	beq.n	8008f7a <__sfp+0x6e>
 8008f34:	6836      	ldr	r6, [r6, #0]
 8008f36:	e7f6      	b.n	8008f26 <__sfp+0x1a>
 8008f38:	220c      	movs	r2, #12
 8008f3a:	5ea5      	ldrsh	r5, [r4, r2]
 8008f3c:	2d00      	cmp	r5, #0
 8008f3e:	d11a      	bne.n	8008f76 <__sfp+0x6a>
 8008f40:	0020      	movs	r0, r4
 8008f42:	4b15      	ldr	r3, [pc, #84]	; (8008f98 <__sfp+0x8c>)
 8008f44:	3058      	adds	r0, #88	; 0x58
 8008f46:	60e3      	str	r3, [r4, #12]
 8008f48:	6665      	str	r5, [r4, #100]	; 0x64
 8008f4a:	f000 f847 	bl	8008fdc <__retarget_lock_init_recursive>
 8008f4e:	f7ff ff8d 	bl	8008e6c <__sfp_lock_release>
 8008f52:	0020      	movs	r0, r4
 8008f54:	2208      	movs	r2, #8
 8008f56:	0029      	movs	r1, r5
 8008f58:	6025      	str	r5, [r4, #0]
 8008f5a:	60a5      	str	r5, [r4, #8]
 8008f5c:	6065      	str	r5, [r4, #4]
 8008f5e:	6125      	str	r5, [r4, #16]
 8008f60:	6165      	str	r5, [r4, #20]
 8008f62:	61a5      	str	r5, [r4, #24]
 8008f64:	305c      	adds	r0, #92	; 0x5c
 8008f66:	f7fd fa1e 	bl	80063a6 <memset>
 8008f6a:	6365      	str	r5, [r4, #52]	; 0x34
 8008f6c:	63a5      	str	r5, [r4, #56]	; 0x38
 8008f6e:	64a5      	str	r5, [r4, #72]	; 0x48
 8008f70:	64e5      	str	r5, [r4, #76]	; 0x4c
 8008f72:	0020      	movs	r0, r4
 8008f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f76:	3468      	adds	r4, #104	; 0x68
 8008f78:	e7d7      	b.n	8008f2a <__sfp+0x1e>
 8008f7a:	2104      	movs	r1, #4
 8008f7c:	0038      	movs	r0, r7
 8008f7e:	f7ff ff57 	bl	8008e30 <__sfmoreglue>
 8008f82:	1e04      	subs	r4, r0, #0
 8008f84:	6030      	str	r0, [r6, #0]
 8008f86:	d1d5      	bne.n	8008f34 <__sfp+0x28>
 8008f88:	f7ff ff70 	bl	8008e6c <__sfp_lock_release>
 8008f8c:	230c      	movs	r3, #12
 8008f8e:	603b      	str	r3, [r7, #0]
 8008f90:	e7ef      	b.n	8008f72 <__sfp+0x66>
 8008f92:	46c0      	nop			; (mov r8, r8)
 8008f94:	0800b954 	.word	0x0800b954
 8008f98:	ffff0001 	.word	0xffff0001

08008f9c <_fwalk_reent>:
 8008f9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f9e:	0004      	movs	r4, r0
 8008fa0:	0006      	movs	r6, r0
 8008fa2:	2700      	movs	r7, #0
 8008fa4:	9101      	str	r1, [sp, #4]
 8008fa6:	3448      	adds	r4, #72	; 0x48
 8008fa8:	6863      	ldr	r3, [r4, #4]
 8008faa:	68a5      	ldr	r5, [r4, #8]
 8008fac:	9300      	str	r3, [sp, #0]
 8008fae:	9b00      	ldr	r3, [sp, #0]
 8008fb0:	3b01      	subs	r3, #1
 8008fb2:	9300      	str	r3, [sp, #0]
 8008fb4:	d504      	bpl.n	8008fc0 <_fwalk_reent+0x24>
 8008fb6:	6824      	ldr	r4, [r4, #0]
 8008fb8:	2c00      	cmp	r4, #0
 8008fba:	d1f5      	bne.n	8008fa8 <_fwalk_reent+0xc>
 8008fbc:	0038      	movs	r0, r7
 8008fbe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008fc0:	89ab      	ldrh	r3, [r5, #12]
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d908      	bls.n	8008fd8 <_fwalk_reent+0x3c>
 8008fc6:	220e      	movs	r2, #14
 8008fc8:	5eab      	ldrsh	r3, [r5, r2]
 8008fca:	3301      	adds	r3, #1
 8008fcc:	d004      	beq.n	8008fd8 <_fwalk_reent+0x3c>
 8008fce:	0029      	movs	r1, r5
 8008fd0:	0030      	movs	r0, r6
 8008fd2:	9b01      	ldr	r3, [sp, #4]
 8008fd4:	4798      	blx	r3
 8008fd6:	4307      	orrs	r7, r0
 8008fd8:	3568      	adds	r5, #104	; 0x68
 8008fda:	e7e8      	b.n	8008fae <_fwalk_reent+0x12>

08008fdc <__retarget_lock_init_recursive>:
 8008fdc:	4770      	bx	lr

08008fde <__retarget_lock_acquire_recursive>:
 8008fde:	4770      	bx	lr

08008fe0 <__retarget_lock_release_recursive>:
 8008fe0:	4770      	bx	lr
	...

08008fe4 <__swhatbuf_r>:
 8008fe4:	b570      	push	{r4, r5, r6, lr}
 8008fe6:	000e      	movs	r6, r1
 8008fe8:	001d      	movs	r5, r3
 8008fea:	230e      	movs	r3, #14
 8008fec:	5ec9      	ldrsh	r1, [r1, r3]
 8008fee:	0014      	movs	r4, r2
 8008ff0:	b096      	sub	sp, #88	; 0x58
 8008ff2:	2900      	cmp	r1, #0
 8008ff4:	da08      	bge.n	8009008 <__swhatbuf_r+0x24>
 8008ff6:	220c      	movs	r2, #12
 8008ff8:	5eb3      	ldrsh	r3, [r6, r2]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	602a      	str	r2, [r5, #0]
 8008ffe:	061b      	lsls	r3, r3, #24
 8009000:	d411      	bmi.n	8009026 <__swhatbuf_r+0x42>
 8009002:	2380      	movs	r3, #128	; 0x80
 8009004:	00db      	lsls	r3, r3, #3
 8009006:	e00f      	b.n	8009028 <__swhatbuf_r+0x44>
 8009008:	466a      	mov	r2, sp
 800900a:	f000 f91b 	bl	8009244 <_fstat_r>
 800900e:	2800      	cmp	r0, #0
 8009010:	dbf1      	blt.n	8008ff6 <__swhatbuf_r+0x12>
 8009012:	23f0      	movs	r3, #240	; 0xf0
 8009014:	9901      	ldr	r1, [sp, #4]
 8009016:	021b      	lsls	r3, r3, #8
 8009018:	4019      	ands	r1, r3
 800901a:	4b05      	ldr	r3, [pc, #20]	; (8009030 <__swhatbuf_r+0x4c>)
 800901c:	18c9      	adds	r1, r1, r3
 800901e:	424b      	negs	r3, r1
 8009020:	4159      	adcs	r1, r3
 8009022:	6029      	str	r1, [r5, #0]
 8009024:	e7ed      	b.n	8009002 <__swhatbuf_r+0x1e>
 8009026:	2340      	movs	r3, #64	; 0x40
 8009028:	2000      	movs	r0, #0
 800902a:	6023      	str	r3, [r4, #0]
 800902c:	b016      	add	sp, #88	; 0x58
 800902e:	bd70      	pop	{r4, r5, r6, pc}
 8009030:	ffffe000 	.word	0xffffe000

08009034 <__smakebuf_r>:
 8009034:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009036:	2602      	movs	r6, #2
 8009038:	898b      	ldrh	r3, [r1, #12]
 800903a:	0005      	movs	r5, r0
 800903c:	000c      	movs	r4, r1
 800903e:	4233      	tst	r3, r6
 8009040:	d006      	beq.n	8009050 <__smakebuf_r+0x1c>
 8009042:	0023      	movs	r3, r4
 8009044:	3347      	adds	r3, #71	; 0x47
 8009046:	6023      	str	r3, [r4, #0]
 8009048:	6123      	str	r3, [r4, #16]
 800904a:	2301      	movs	r3, #1
 800904c:	6163      	str	r3, [r4, #20]
 800904e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009050:	466a      	mov	r2, sp
 8009052:	ab01      	add	r3, sp, #4
 8009054:	f7ff ffc6 	bl	8008fe4 <__swhatbuf_r>
 8009058:	9900      	ldr	r1, [sp, #0]
 800905a:	0007      	movs	r7, r0
 800905c:	0028      	movs	r0, r5
 800905e:	f7ff f92d 	bl	80082bc <_malloc_r>
 8009062:	2800      	cmp	r0, #0
 8009064:	d108      	bne.n	8009078 <__smakebuf_r+0x44>
 8009066:	220c      	movs	r2, #12
 8009068:	5ea3      	ldrsh	r3, [r4, r2]
 800906a:	059a      	lsls	r2, r3, #22
 800906c:	d4ef      	bmi.n	800904e <__smakebuf_r+0x1a>
 800906e:	2203      	movs	r2, #3
 8009070:	4393      	bics	r3, r2
 8009072:	431e      	orrs	r6, r3
 8009074:	81a6      	strh	r6, [r4, #12]
 8009076:	e7e4      	b.n	8009042 <__smakebuf_r+0xe>
 8009078:	4b0f      	ldr	r3, [pc, #60]	; (80090b8 <__smakebuf_r+0x84>)
 800907a:	62ab      	str	r3, [r5, #40]	; 0x28
 800907c:	2380      	movs	r3, #128	; 0x80
 800907e:	89a2      	ldrh	r2, [r4, #12]
 8009080:	6020      	str	r0, [r4, #0]
 8009082:	4313      	orrs	r3, r2
 8009084:	81a3      	strh	r3, [r4, #12]
 8009086:	9b00      	ldr	r3, [sp, #0]
 8009088:	6120      	str	r0, [r4, #16]
 800908a:	6163      	str	r3, [r4, #20]
 800908c:	9b01      	ldr	r3, [sp, #4]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d00d      	beq.n	80090ae <__smakebuf_r+0x7a>
 8009092:	0028      	movs	r0, r5
 8009094:	230e      	movs	r3, #14
 8009096:	5ee1      	ldrsh	r1, [r4, r3]
 8009098:	f000 f8e6 	bl	8009268 <_isatty_r>
 800909c:	2800      	cmp	r0, #0
 800909e:	d006      	beq.n	80090ae <__smakebuf_r+0x7a>
 80090a0:	2203      	movs	r2, #3
 80090a2:	89a3      	ldrh	r3, [r4, #12]
 80090a4:	4393      	bics	r3, r2
 80090a6:	001a      	movs	r2, r3
 80090a8:	2301      	movs	r3, #1
 80090aa:	4313      	orrs	r3, r2
 80090ac:	81a3      	strh	r3, [r4, #12]
 80090ae:	89a0      	ldrh	r0, [r4, #12]
 80090b0:	4307      	orrs	r7, r0
 80090b2:	81a7      	strh	r7, [r4, #12]
 80090b4:	e7cb      	b.n	800904e <__smakebuf_r+0x1a>
 80090b6:	46c0      	nop			; (mov r8, r8)
 80090b8:	08008e21 	.word	0x08008e21

080090bc <_malloc_usable_size_r>:
 80090bc:	1f0b      	subs	r3, r1, #4
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	1f18      	subs	r0, r3, #4
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	da01      	bge.n	80090ca <_malloc_usable_size_r+0xe>
 80090c6:	580b      	ldr	r3, [r1, r0]
 80090c8:	18c0      	adds	r0, r0, r3
 80090ca:	4770      	bx	lr

080090cc <_raise_r>:
 80090cc:	b570      	push	{r4, r5, r6, lr}
 80090ce:	0004      	movs	r4, r0
 80090d0:	000d      	movs	r5, r1
 80090d2:	291f      	cmp	r1, #31
 80090d4:	d904      	bls.n	80090e0 <_raise_r+0x14>
 80090d6:	2316      	movs	r3, #22
 80090d8:	6003      	str	r3, [r0, #0]
 80090da:	2001      	movs	r0, #1
 80090dc:	4240      	negs	r0, r0
 80090de:	bd70      	pop	{r4, r5, r6, pc}
 80090e0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d004      	beq.n	80090f0 <_raise_r+0x24>
 80090e6:	008a      	lsls	r2, r1, #2
 80090e8:	189b      	adds	r3, r3, r2
 80090ea:	681a      	ldr	r2, [r3, #0]
 80090ec:	2a00      	cmp	r2, #0
 80090ee:	d108      	bne.n	8009102 <_raise_r+0x36>
 80090f0:	0020      	movs	r0, r4
 80090f2:	f000 f831 	bl	8009158 <_getpid_r>
 80090f6:	002a      	movs	r2, r5
 80090f8:	0001      	movs	r1, r0
 80090fa:	0020      	movs	r0, r4
 80090fc:	f000 f81a 	bl	8009134 <_kill_r>
 8009100:	e7ed      	b.n	80090de <_raise_r+0x12>
 8009102:	2000      	movs	r0, #0
 8009104:	2a01      	cmp	r2, #1
 8009106:	d0ea      	beq.n	80090de <_raise_r+0x12>
 8009108:	1c51      	adds	r1, r2, #1
 800910a:	d103      	bne.n	8009114 <_raise_r+0x48>
 800910c:	2316      	movs	r3, #22
 800910e:	3001      	adds	r0, #1
 8009110:	6023      	str	r3, [r4, #0]
 8009112:	e7e4      	b.n	80090de <_raise_r+0x12>
 8009114:	2400      	movs	r4, #0
 8009116:	0028      	movs	r0, r5
 8009118:	601c      	str	r4, [r3, #0]
 800911a:	4790      	blx	r2
 800911c:	0020      	movs	r0, r4
 800911e:	e7de      	b.n	80090de <_raise_r+0x12>

08009120 <raise>:
 8009120:	b510      	push	{r4, lr}
 8009122:	4b03      	ldr	r3, [pc, #12]	; (8009130 <raise+0x10>)
 8009124:	0001      	movs	r1, r0
 8009126:	6818      	ldr	r0, [r3, #0]
 8009128:	f7ff ffd0 	bl	80090cc <_raise_r>
 800912c:	bd10      	pop	{r4, pc}
 800912e:	46c0      	nop			; (mov r8, r8)
 8009130:	20000024 	.word	0x20000024

08009134 <_kill_r>:
 8009134:	2300      	movs	r3, #0
 8009136:	b570      	push	{r4, r5, r6, lr}
 8009138:	4d06      	ldr	r5, [pc, #24]	; (8009154 <_kill_r+0x20>)
 800913a:	0004      	movs	r4, r0
 800913c:	0008      	movs	r0, r1
 800913e:	0011      	movs	r1, r2
 8009140:	602b      	str	r3, [r5, #0]
 8009142:	f7fb fbd5 	bl	80048f0 <_kill>
 8009146:	1c43      	adds	r3, r0, #1
 8009148:	d103      	bne.n	8009152 <_kill_r+0x1e>
 800914a:	682b      	ldr	r3, [r5, #0]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d000      	beq.n	8009152 <_kill_r+0x1e>
 8009150:	6023      	str	r3, [r4, #0]
 8009152:	bd70      	pop	{r4, r5, r6, pc}
 8009154:	20000798 	.word	0x20000798

08009158 <_getpid_r>:
 8009158:	b510      	push	{r4, lr}
 800915a:	f7fb fbc7 	bl	80048ec <_getpid>
 800915e:	bd10      	pop	{r4, pc}

08009160 <__sread>:
 8009160:	b570      	push	{r4, r5, r6, lr}
 8009162:	000c      	movs	r4, r1
 8009164:	250e      	movs	r5, #14
 8009166:	5f49      	ldrsh	r1, [r1, r5]
 8009168:	f000 f8a4 	bl	80092b4 <_read_r>
 800916c:	2800      	cmp	r0, #0
 800916e:	db03      	blt.n	8009178 <__sread+0x18>
 8009170:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009172:	181b      	adds	r3, r3, r0
 8009174:	6563      	str	r3, [r4, #84]	; 0x54
 8009176:	bd70      	pop	{r4, r5, r6, pc}
 8009178:	89a3      	ldrh	r3, [r4, #12]
 800917a:	4a02      	ldr	r2, [pc, #8]	; (8009184 <__sread+0x24>)
 800917c:	4013      	ands	r3, r2
 800917e:	81a3      	strh	r3, [r4, #12]
 8009180:	e7f9      	b.n	8009176 <__sread+0x16>
 8009182:	46c0      	nop			; (mov r8, r8)
 8009184:	ffffefff 	.word	0xffffefff

08009188 <__swrite>:
 8009188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800918a:	001f      	movs	r7, r3
 800918c:	898b      	ldrh	r3, [r1, #12]
 800918e:	0005      	movs	r5, r0
 8009190:	000c      	movs	r4, r1
 8009192:	0016      	movs	r6, r2
 8009194:	05db      	lsls	r3, r3, #23
 8009196:	d505      	bpl.n	80091a4 <__swrite+0x1c>
 8009198:	230e      	movs	r3, #14
 800919a:	5ec9      	ldrsh	r1, [r1, r3]
 800919c:	2200      	movs	r2, #0
 800919e:	2302      	movs	r3, #2
 80091a0:	f000 f874 	bl	800928c <_lseek_r>
 80091a4:	89a3      	ldrh	r3, [r4, #12]
 80091a6:	4a05      	ldr	r2, [pc, #20]	; (80091bc <__swrite+0x34>)
 80091a8:	0028      	movs	r0, r5
 80091aa:	4013      	ands	r3, r2
 80091ac:	81a3      	strh	r3, [r4, #12]
 80091ae:	0032      	movs	r2, r6
 80091b0:	230e      	movs	r3, #14
 80091b2:	5ee1      	ldrsh	r1, [r4, r3]
 80091b4:	003b      	movs	r3, r7
 80091b6:	f000 f81f 	bl	80091f8 <_write_r>
 80091ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091bc:	ffffefff 	.word	0xffffefff

080091c0 <__sseek>:
 80091c0:	b570      	push	{r4, r5, r6, lr}
 80091c2:	000c      	movs	r4, r1
 80091c4:	250e      	movs	r5, #14
 80091c6:	5f49      	ldrsh	r1, [r1, r5]
 80091c8:	f000 f860 	bl	800928c <_lseek_r>
 80091cc:	89a3      	ldrh	r3, [r4, #12]
 80091ce:	1c42      	adds	r2, r0, #1
 80091d0:	d103      	bne.n	80091da <__sseek+0x1a>
 80091d2:	4a05      	ldr	r2, [pc, #20]	; (80091e8 <__sseek+0x28>)
 80091d4:	4013      	ands	r3, r2
 80091d6:	81a3      	strh	r3, [r4, #12]
 80091d8:	bd70      	pop	{r4, r5, r6, pc}
 80091da:	2280      	movs	r2, #128	; 0x80
 80091dc:	0152      	lsls	r2, r2, #5
 80091de:	4313      	orrs	r3, r2
 80091e0:	81a3      	strh	r3, [r4, #12]
 80091e2:	6560      	str	r0, [r4, #84]	; 0x54
 80091e4:	e7f8      	b.n	80091d8 <__sseek+0x18>
 80091e6:	46c0      	nop			; (mov r8, r8)
 80091e8:	ffffefff 	.word	0xffffefff

080091ec <__sclose>:
 80091ec:	b510      	push	{r4, lr}
 80091ee:	230e      	movs	r3, #14
 80091f0:	5ec9      	ldrsh	r1, [r1, r3]
 80091f2:	f000 f815 	bl	8009220 <_close_r>
 80091f6:	bd10      	pop	{r4, pc}

080091f8 <_write_r>:
 80091f8:	b570      	push	{r4, r5, r6, lr}
 80091fa:	0004      	movs	r4, r0
 80091fc:	0008      	movs	r0, r1
 80091fe:	0011      	movs	r1, r2
 8009200:	001a      	movs	r2, r3
 8009202:	2300      	movs	r3, #0
 8009204:	4d05      	ldr	r5, [pc, #20]	; (800921c <_write_r+0x24>)
 8009206:	602b      	str	r3, [r5, #0]
 8009208:	f7fb fb8d 	bl	8004926 <_write>
 800920c:	1c43      	adds	r3, r0, #1
 800920e:	d103      	bne.n	8009218 <_write_r+0x20>
 8009210:	682b      	ldr	r3, [r5, #0]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d000      	beq.n	8009218 <_write_r+0x20>
 8009216:	6023      	str	r3, [r4, #0]
 8009218:	bd70      	pop	{r4, r5, r6, pc}
 800921a:	46c0      	nop			; (mov r8, r8)
 800921c:	20000798 	.word	0x20000798

08009220 <_close_r>:
 8009220:	2300      	movs	r3, #0
 8009222:	b570      	push	{r4, r5, r6, lr}
 8009224:	4d06      	ldr	r5, [pc, #24]	; (8009240 <_close_r+0x20>)
 8009226:	0004      	movs	r4, r0
 8009228:	0008      	movs	r0, r1
 800922a:	602b      	str	r3, [r5, #0]
 800922c:	f7fb fb88 	bl	8004940 <_close>
 8009230:	1c43      	adds	r3, r0, #1
 8009232:	d103      	bne.n	800923c <_close_r+0x1c>
 8009234:	682b      	ldr	r3, [r5, #0]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d000      	beq.n	800923c <_close_r+0x1c>
 800923a:	6023      	str	r3, [r4, #0]
 800923c:	bd70      	pop	{r4, r5, r6, pc}
 800923e:	46c0      	nop			; (mov r8, r8)
 8009240:	20000798 	.word	0x20000798

08009244 <_fstat_r>:
 8009244:	2300      	movs	r3, #0
 8009246:	b570      	push	{r4, r5, r6, lr}
 8009248:	4d06      	ldr	r5, [pc, #24]	; (8009264 <_fstat_r+0x20>)
 800924a:	0004      	movs	r4, r0
 800924c:	0008      	movs	r0, r1
 800924e:	0011      	movs	r1, r2
 8009250:	602b      	str	r3, [r5, #0]
 8009252:	f7fb fb78 	bl	8004946 <_fstat>
 8009256:	1c43      	adds	r3, r0, #1
 8009258:	d103      	bne.n	8009262 <_fstat_r+0x1e>
 800925a:	682b      	ldr	r3, [r5, #0]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d000      	beq.n	8009262 <_fstat_r+0x1e>
 8009260:	6023      	str	r3, [r4, #0]
 8009262:	bd70      	pop	{r4, r5, r6, pc}
 8009264:	20000798 	.word	0x20000798

08009268 <_isatty_r>:
 8009268:	2300      	movs	r3, #0
 800926a:	b570      	push	{r4, r5, r6, lr}
 800926c:	4d06      	ldr	r5, [pc, #24]	; (8009288 <_isatty_r+0x20>)
 800926e:	0004      	movs	r4, r0
 8009270:	0008      	movs	r0, r1
 8009272:	602b      	str	r3, [r5, #0]
 8009274:	f7fb fb6c 	bl	8004950 <_isatty>
 8009278:	1c43      	adds	r3, r0, #1
 800927a:	d103      	bne.n	8009284 <_isatty_r+0x1c>
 800927c:	682b      	ldr	r3, [r5, #0]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d000      	beq.n	8009284 <_isatty_r+0x1c>
 8009282:	6023      	str	r3, [r4, #0]
 8009284:	bd70      	pop	{r4, r5, r6, pc}
 8009286:	46c0      	nop			; (mov r8, r8)
 8009288:	20000798 	.word	0x20000798

0800928c <_lseek_r>:
 800928c:	b570      	push	{r4, r5, r6, lr}
 800928e:	0004      	movs	r4, r0
 8009290:	0008      	movs	r0, r1
 8009292:	0011      	movs	r1, r2
 8009294:	001a      	movs	r2, r3
 8009296:	2300      	movs	r3, #0
 8009298:	4d05      	ldr	r5, [pc, #20]	; (80092b0 <_lseek_r+0x24>)
 800929a:	602b      	str	r3, [r5, #0]
 800929c:	f7fb fb5a 	bl	8004954 <_lseek>
 80092a0:	1c43      	adds	r3, r0, #1
 80092a2:	d103      	bne.n	80092ac <_lseek_r+0x20>
 80092a4:	682b      	ldr	r3, [r5, #0]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d000      	beq.n	80092ac <_lseek_r+0x20>
 80092aa:	6023      	str	r3, [r4, #0]
 80092ac:	bd70      	pop	{r4, r5, r6, pc}
 80092ae:	46c0      	nop			; (mov r8, r8)
 80092b0:	20000798 	.word	0x20000798

080092b4 <_read_r>:
 80092b4:	b570      	push	{r4, r5, r6, lr}
 80092b6:	0004      	movs	r4, r0
 80092b8:	0008      	movs	r0, r1
 80092ba:	0011      	movs	r1, r2
 80092bc:	001a      	movs	r2, r3
 80092be:	2300      	movs	r3, #0
 80092c0:	4d05      	ldr	r5, [pc, #20]	; (80092d8 <_read_r+0x24>)
 80092c2:	602b      	str	r3, [r5, #0]
 80092c4:	f7fb fb22 	bl	800490c <_read>
 80092c8:	1c43      	adds	r3, r0, #1
 80092ca:	d103      	bne.n	80092d4 <_read_r+0x20>
 80092cc:	682b      	ldr	r3, [r5, #0]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d000      	beq.n	80092d4 <_read_r+0x20>
 80092d2:	6023      	str	r3, [r4, #0]
 80092d4:	bd70      	pop	{r4, r5, r6, pc}
 80092d6:	46c0      	nop			; (mov r8, r8)
 80092d8:	20000798 	.word	0x20000798

080092dc <_init>:
 80092dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092de:	46c0      	nop			; (mov r8, r8)
 80092e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092e2:	bc08      	pop	{r3}
 80092e4:	469e      	mov	lr, r3
 80092e6:	4770      	bx	lr

080092e8 <_fini>:
 80092e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ea:	46c0      	nop			; (mov r8, r8)
 80092ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092ee:	bc08      	pop	{r3}
 80092f0:	469e      	mov	lr, r3
 80092f2:	4770      	bx	lr
