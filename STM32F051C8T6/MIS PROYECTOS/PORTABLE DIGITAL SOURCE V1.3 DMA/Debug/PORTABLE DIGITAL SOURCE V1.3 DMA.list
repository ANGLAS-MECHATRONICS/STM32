
PORTABLE DIGITAL SOURCE V1.3 DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aeac  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a4c  0800af70  0800af70  0001af70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d9bc  0800d9bc  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800d9bc  0800d9bc  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d9bc  0800d9bc  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d9bc  0800d9bc  0001d9bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d9c0  0800d9c0  0001d9c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800d9c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000894  200001f0  0800dbb4  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000a84  0800dbb4  00020a84  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018bbf  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e52  00000000  00000000  00038e1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f10  00000000  00000000  0003cc70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010d2  00000000  00000000  0003db80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014cae  00000000  00000000  0003ec52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001df3e  00000000  00000000  00053900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007576e  00000000  00000000  0007183e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004294  00000000  00000000  000e6fac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0000a73d  00000000  00000000  000eb240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008a  00000000  00000000  000f597d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001f0 	.word	0x200001f0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800af54 	.word	0x0800af54

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f4 	.word	0x200001f4
 8000104:	0800af54 	.word	0x0800af54

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_llsr>:
 800042c:	40d0      	lsrs	r0, r2
 800042e:	000b      	movs	r3, r1
 8000430:	40d1      	lsrs	r1, r2
 8000432:	469c      	mov	ip, r3
 8000434:	3a20      	subs	r2, #32
 8000436:	40d3      	lsrs	r3, r2
 8000438:	4318      	orrs	r0, r3
 800043a:	4252      	negs	r2, r2
 800043c:	4663      	mov	r3, ip
 800043e:	4093      	lsls	r3, r2
 8000440:	4318      	orrs	r0, r3
 8000442:	4770      	bx	lr

08000444 <__aeabi_cdrcmple>:
 8000444:	4684      	mov	ip, r0
 8000446:	0010      	movs	r0, r2
 8000448:	4662      	mov	r2, ip
 800044a:	468c      	mov	ip, r1
 800044c:	0019      	movs	r1, r3
 800044e:	4663      	mov	r3, ip
 8000450:	e000      	b.n	8000454 <__aeabi_cdcmpeq>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_cdcmpeq>:
 8000454:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000456:	f001 feab 	bl	80021b0 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	d401      	bmi.n	8000462 <__aeabi_cdcmpeq+0xe>
 800045e:	2100      	movs	r1, #0
 8000460:	42c8      	cmn	r0, r1
 8000462:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000464 <__aeabi_dcmpeq>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 fdfb 	bl	8002060 <__eqdf2>
 800046a:	4240      	negs	r0, r0
 800046c:	3001      	adds	r0, #1
 800046e:	bd10      	pop	{r4, pc}

08000470 <__aeabi_dcmplt>:
 8000470:	b510      	push	{r4, lr}
 8000472:	f001 fe9d 	bl	80021b0 <__ledf2>
 8000476:	2800      	cmp	r0, #0
 8000478:	db01      	blt.n	800047e <__aeabi_dcmplt+0xe>
 800047a:	2000      	movs	r0, #0
 800047c:	bd10      	pop	{r4, pc}
 800047e:	2001      	movs	r0, #1
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__aeabi_dcmple>:
 8000484:	b510      	push	{r4, lr}
 8000486:	f001 fe93 	bl	80021b0 <__ledf2>
 800048a:	2800      	cmp	r0, #0
 800048c:	dd01      	ble.n	8000492 <__aeabi_dcmple+0xe>
 800048e:	2000      	movs	r0, #0
 8000490:	bd10      	pop	{r4, pc}
 8000492:	2001      	movs	r0, #1
 8000494:	bd10      	pop	{r4, pc}
 8000496:	46c0      	nop			; (mov r8, r8)

08000498 <__aeabi_dcmpgt>:
 8000498:	b510      	push	{r4, lr}
 800049a:	f001 fe23 	bl	80020e4 <__gedf2>
 800049e:	2800      	cmp	r0, #0
 80004a0:	dc01      	bgt.n	80004a6 <__aeabi_dcmpgt+0xe>
 80004a2:	2000      	movs	r0, #0
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	2001      	movs	r0, #1
 80004a8:	bd10      	pop	{r4, pc}
 80004aa:	46c0      	nop			; (mov r8, r8)

080004ac <__aeabi_dcmpge>:
 80004ac:	b510      	push	{r4, lr}
 80004ae:	f001 fe19 	bl	80020e4 <__gedf2>
 80004b2:	2800      	cmp	r0, #0
 80004b4:	da01      	bge.n	80004ba <__aeabi_dcmpge+0xe>
 80004b6:	2000      	movs	r0, #0
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	2001      	movs	r0, #1
 80004bc:	bd10      	pop	{r4, pc}
 80004be:	46c0      	nop			; (mov r8, r8)

080004c0 <__aeabi_cfrcmple>:
 80004c0:	4684      	mov	ip, r0
 80004c2:	0008      	movs	r0, r1
 80004c4:	4661      	mov	r1, ip
 80004c6:	e7ff      	b.n	80004c8 <__aeabi_cfcmpeq>

080004c8 <__aeabi_cfcmpeq>:
 80004c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004ca:	f000 fb8f 	bl	8000bec <__lesf2>
 80004ce:	2800      	cmp	r0, #0
 80004d0:	d401      	bmi.n	80004d6 <__aeabi_cfcmpeq+0xe>
 80004d2:	2100      	movs	r1, #0
 80004d4:	42c8      	cmn	r0, r1
 80004d6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d8 <__aeabi_fcmpeq>:
 80004d8:	b510      	push	{r4, lr}
 80004da:	f000 fb1b 	bl	8000b14 <__eqsf2>
 80004de:	4240      	negs	r0, r0
 80004e0:	3001      	adds	r0, #1
 80004e2:	bd10      	pop	{r4, pc}

080004e4 <__aeabi_fcmplt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f000 fb81 	bl	8000bec <__lesf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	db01      	blt.n	80004f2 <__aeabi_fcmplt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			; (mov r8, r8)

080004f8 <__aeabi_fcmple>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f000 fb77 	bl	8000bec <__lesf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	dd01      	ble.n	8000506 <__aeabi_fcmple+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			; (mov r8, r8)

0800050c <__aeabi_fcmpgt>:
 800050c:	b510      	push	{r4, lr}
 800050e:	f000 fb27 	bl	8000b60 <__gesf2>
 8000512:	2800      	cmp	r0, #0
 8000514:	dc01      	bgt.n	800051a <__aeabi_fcmpgt+0xe>
 8000516:	2000      	movs	r0, #0
 8000518:	bd10      	pop	{r4, pc}
 800051a:	2001      	movs	r0, #1
 800051c:	bd10      	pop	{r4, pc}
 800051e:	46c0      	nop			; (mov r8, r8)

08000520 <__aeabi_fcmpge>:
 8000520:	b510      	push	{r4, lr}
 8000522:	f000 fb1d 	bl	8000b60 <__gesf2>
 8000526:	2800      	cmp	r0, #0
 8000528:	da01      	bge.n	800052e <__aeabi_fcmpge+0xe>
 800052a:	2000      	movs	r0, #0
 800052c:	bd10      	pop	{r4, pc}
 800052e:	2001      	movs	r0, #1
 8000530:	bd10      	pop	{r4, pc}
 8000532:	46c0      	nop			; (mov r8, r8)

08000534 <__aeabi_f2uiz>:
 8000534:	219e      	movs	r1, #158	; 0x9e
 8000536:	b510      	push	{r4, lr}
 8000538:	05c9      	lsls	r1, r1, #23
 800053a:	1c04      	adds	r4, r0, #0
 800053c:	f7ff fff0 	bl	8000520 <__aeabi_fcmpge>
 8000540:	2800      	cmp	r0, #0
 8000542:	d103      	bne.n	800054c <__aeabi_f2uiz+0x18>
 8000544:	1c20      	adds	r0, r4, #0
 8000546:	f000 fe83 	bl	8001250 <__aeabi_f2iz>
 800054a:	bd10      	pop	{r4, pc}
 800054c:	219e      	movs	r1, #158	; 0x9e
 800054e:	1c20      	adds	r0, r4, #0
 8000550:	05c9      	lsls	r1, r1, #23
 8000552:	f000 fcdd 	bl	8000f10 <__aeabi_fsub>
 8000556:	f000 fe7b 	bl	8001250 <__aeabi_f2iz>
 800055a:	2380      	movs	r3, #128	; 0x80
 800055c:	061b      	lsls	r3, r3, #24
 800055e:	469c      	mov	ip, r3
 8000560:	4460      	add	r0, ip
 8000562:	e7f2      	b.n	800054a <__aeabi_f2uiz+0x16>

08000564 <__aeabi_d2uiz>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	2200      	movs	r2, #0
 8000568:	4b0c      	ldr	r3, [pc, #48]	; (800059c <__aeabi_d2uiz+0x38>)
 800056a:	0004      	movs	r4, r0
 800056c:	000d      	movs	r5, r1
 800056e:	f7ff ff9d 	bl	80004ac <__aeabi_dcmpge>
 8000572:	2800      	cmp	r0, #0
 8000574:	d104      	bne.n	8000580 <__aeabi_d2uiz+0x1c>
 8000576:	0020      	movs	r0, r4
 8000578:	0029      	movs	r1, r5
 800057a:	f002 fcdf 	bl	8002f3c <__aeabi_d2iz>
 800057e:	bd70      	pop	{r4, r5, r6, pc}
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <__aeabi_d2uiz+0x38>)
 8000582:	2200      	movs	r2, #0
 8000584:	0020      	movs	r0, r4
 8000586:	0029      	movs	r1, r5
 8000588:	f002 f938 	bl	80027fc <__aeabi_dsub>
 800058c:	f002 fcd6 	bl	8002f3c <__aeabi_d2iz>
 8000590:	2380      	movs	r3, #128	; 0x80
 8000592:	061b      	lsls	r3, r3, #24
 8000594:	469c      	mov	ip, r3
 8000596:	4460      	add	r0, ip
 8000598:	e7f1      	b.n	800057e <__aeabi_d2uiz+0x1a>
 800059a:	46c0      	nop			; (mov r8, r8)
 800059c:	41e00000 	.word	0x41e00000

080005a0 <__aeabi_fadd>:
 80005a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005a2:	4647      	mov	r7, r8
 80005a4:	46ce      	mov	lr, r9
 80005a6:	024a      	lsls	r2, r1, #9
 80005a8:	0243      	lsls	r3, r0, #9
 80005aa:	0045      	lsls	r5, r0, #1
 80005ac:	0fc4      	lsrs	r4, r0, #31
 80005ae:	0a50      	lsrs	r0, r2, #9
 80005b0:	4680      	mov	r8, r0
 80005b2:	0048      	lsls	r0, r1, #1
 80005b4:	0a5b      	lsrs	r3, r3, #9
 80005b6:	0e00      	lsrs	r0, r0, #24
 80005b8:	0992      	lsrs	r2, r2, #6
 80005ba:	4694      	mov	ip, r2
 80005bc:	b580      	push	{r7, lr}
 80005be:	001e      	movs	r6, r3
 80005c0:	4681      	mov	r9, r0
 80005c2:	0002      	movs	r2, r0
 80005c4:	0e2d      	lsrs	r5, r5, #24
 80005c6:	00df      	lsls	r7, r3, #3
 80005c8:	0fc9      	lsrs	r1, r1, #31
 80005ca:	428c      	cmp	r4, r1
 80005cc:	d024      	beq.n	8000618 <__aeabi_fadd+0x78>
 80005ce:	1a28      	subs	r0, r5, r0
 80005d0:	2800      	cmp	r0, #0
 80005d2:	dd0e      	ble.n	80005f2 <__aeabi_fadd+0x52>
 80005d4:	2a00      	cmp	r2, #0
 80005d6:	d13e      	bne.n	8000656 <__aeabi_fadd+0xb6>
 80005d8:	4662      	mov	r2, ip
 80005da:	2a00      	cmp	r2, #0
 80005dc:	d100      	bne.n	80005e0 <__aeabi_fadd+0x40>
 80005de:	e0fd      	b.n	80007dc <__aeabi_fadd+0x23c>
 80005e0:	1e42      	subs	r2, r0, #1
 80005e2:	2801      	cmp	r0, #1
 80005e4:	d100      	bne.n	80005e8 <__aeabi_fadd+0x48>
 80005e6:	e137      	b.n	8000858 <__aeabi_fadd+0x2b8>
 80005e8:	28ff      	cmp	r0, #255	; 0xff
 80005ea:	d100      	bne.n	80005ee <__aeabi_fadd+0x4e>
 80005ec:	e0a9      	b.n	8000742 <__aeabi_fadd+0x1a2>
 80005ee:	0010      	movs	r0, r2
 80005f0:	e039      	b.n	8000666 <__aeabi_fadd+0xc6>
 80005f2:	2800      	cmp	r0, #0
 80005f4:	d063      	beq.n	80006be <__aeabi_fadd+0x11e>
 80005f6:	464b      	mov	r3, r9
 80005f8:	1b52      	subs	r2, r2, r5
 80005fa:	2d00      	cmp	r5, #0
 80005fc:	d000      	beq.n	8000600 <__aeabi_fadd+0x60>
 80005fe:	e0e0      	b.n	80007c2 <__aeabi_fadd+0x222>
 8000600:	2f00      	cmp	r7, #0
 8000602:	d100      	bne.n	8000606 <__aeabi_fadd+0x66>
 8000604:	e0ce      	b.n	80007a4 <__aeabi_fadd+0x204>
 8000606:	1e53      	subs	r3, r2, #1
 8000608:	2a01      	cmp	r2, #1
 800060a:	d100      	bne.n	800060e <__aeabi_fadd+0x6e>
 800060c:	e155      	b.n	80008ba <__aeabi_fadd+0x31a>
 800060e:	2aff      	cmp	r2, #255	; 0xff
 8000610:	d100      	bne.n	8000614 <__aeabi_fadd+0x74>
 8000612:	e094      	b.n	800073e <__aeabi_fadd+0x19e>
 8000614:	001a      	movs	r2, r3
 8000616:	e0d9      	b.n	80007cc <__aeabi_fadd+0x22c>
 8000618:	1a2a      	subs	r2, r5, r0
 800061a:	2a00      	cmp	r2, #0
 800061c:	dc00      	bgt.n	8000620 <__aeabi_fadd+0x80>
 800061e:	e099      	b.n	8000754 <__aeabi_fadd+0x1b4>
 8000620:	2800      	cmp	r0, #0
 8000622:	d062      	beq.n	80006ea <__aeabi_fadd+0x14a>
 8000624:	2dff      	cmp	r5, #255	; 0xff
 8000626:	d100      	bne.n	800062a <__aeabi_fadd+0x8a>
 8000628:	e08b      	b.n	8000742 <__aeabi_fadd+0x1a2>
 800062a:	2380      	movs	r3, #128	; 0x80
 800062c:	4661      	mov	r1, ip
 800062e:	04db      	lsls	r3, r3, #19
 8000630:	4319      	orrs	r1, r3
 8000632:	468c      	mov	ip, r1
 8000634:	2a1b      	cmp	r2, #27
 8000636:	dc00      	bgt.n	800063a <__aeabi_fadd+0x9a>
 8000638:	e0d2      	b.n	80007e0 <__aeabi_fadd+0x240>
 800063a:	2301      	movs	r3, #1
 800063c:	19db      	adds	r3, r3, r7
 800063e:	015a      	lsls	r2, r3, #5
 8000640:	d56a      	bpl.n	8000718 <__aeabi_fadd+0x178>
 8000642:	3501      	adds	r5, #1
 8000644:	2dff      	cmp	r5, #255	; 0xff
 8000646:	d05b      	beq.n	8000700 <__aeabi_fadd+0x160>
 8000648:	2201      	movs	r2, #1
 800064a:	49a3      	ldr	r1, [pc, #652]	; (80008d8 <__aeabi_fadd+0x338>)
 800064c:	401a      	ands	r2, r3
 800064e:	085b      	lsrs	r3, r3, #1
 8000650:	400b      	ands	r3, r1
 8000652:	4313      	orrs	r3, r2
 8000654:	e01c      	b.n	8000690 <__aeabi_fadd+0xf0>
 8000656:	2dff      	cmp	r5, #255	; 0xff
 8000658:	d100      	bne.n	800065c <__aeabi_fadd+0xbc>
 800065a:	e072      	b.n	8000742 <__aeabi_fadd+0x1a2>
 800065c:	2380      	movs	r3, #128	; 0x80
 800065e:	4662      	mov	r2, ip
 8000660:	04db      	lsls	r3, r3, #19
 8000662:	431a      	orrs	r2, r3
 8000664:	4694      	mov	ip, r2
 8000666:	281b      	cmp	r0, #27
 8000668:	dc00      	bgt.n	800066c <__aeabi_fadd+0xcc>
 800066a:	e090      	b.n	800078e <__aeabi_fadd+0x1ee>
 800066c:	2301      	movs	r3, #1
 800066e:	1afb      	subs	r3, r7, r3
 8000670:	015a      	lsls	r2, r3, #5
 8000672:	d551      	bpl.n	8000718 <__aeabi_fadd+0x178>
 8000674:	019b      	lsls	r3, r3, #6
 8000676:	099e      	lsrs	r6, r3, #6
 8000678:	0030      	movs	r0, r6
 800067a:	f002 fdb9 	bl	80031f0 <__clzsi2>
 800067e:	0033      	movs	r3, r6
 8000680:	3805      	subs	r0, #5
 8000682:	4083      	lsls	r3, r0
 8000684:	4285      	cmp	r5, r0
 8000686:	dc00      	bgt.n	800068a <__aeabi_fadd+0xea>
 8000688:	e075      	b.n	8000776 <__aeabi_fadd+0x1d6>
 800068a:	4a94      	ldr	r2, [pc, #592]	; (80008dc <__aeabi_fadd+0x33c>)
 800068c:	1a2d      	subs	r5, r5, r0
 800068e:	4013      	ands	r3, r2
 8000690:	075a      	lsls	r2, r3, #29
 8000692:	d004      	beq.n	800069e <__aeabi_fadd+0xfe>
 8000694:	220f      	movs	r2, #15
 8000696:	401a      	ands	r2, r3
 8000698:	2a04      	cmp	r2, #4
 800069a:	d000      	beq.n	800069e <__aeabi_fadd+0xfe>
 800069c:	3304      	adds	r3, #4
 800069e:	015a      	lsls	r2, r3, #5
 80006a0:	d53c      	bpl.n	800071c <__aeabi_fadd+0x17c>
 80006a2:	1c68      	adds	r0, r5, #1
 80006a4:	2dfe      	cmp	r5, #254	; 0xfe
 80006a6:	d02b      	beq.n	8000700 <__aeabi_fadd+0x160>
 80006a8:	019b      	lsls	r3, r3, #6
 80006aa:	0a5e      	lsrs	r6, r3, #9
 80006ac:	b2c0      	uxtb	r0, r0
 80006ae:	05c0      	lsls	r0, r0, #23
 80006b0:	4330      	orrs	r0, r6
 80006b2:	07e4      	lsls	r4, r4, #31
 80006b4:	4320      	orrs	r0, r4
 80006b6:	bcc0      	pop	{r6, r7}
 80006b8:	46b9      	mov	r9, r7
 80006ba:	46b0      	mov	r8, r6
 80006bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006be:	20fe      	movs	r0, #254	; 0xfe
 80006c0:	1c6a      	adds	r2, r5, #1
 80006c2:	4210      	tst	r0, r2
 80006c4:	d172      	bne.n	80007ac <__aeabi_fadd+0x20c>
 80006c6:	2d00      	cmp	r5, #0
 80006c8:	d000      	beq.n	80006cc <__aeabi_fadd+0x12c>
 80006ca:	e0ae      	b.n	800082a <__aeabi_fadd+0x28a>
 80006cc:	2f00      	cmp	r7, #0
 80006ce:	d100      	bne.n	80006d2 <__aeabi_fadd+0x132>
 80006d0:	e0ec      	b.n	80008ac <__aeabi_fadd+0x30c>
 80006d2:	4663      	mov	r3, ip
 80006d4:	2000      	movs	r0, #0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d0e9      	beq.n	80006ae <__aeabi_fadd+0x10e>
 80006da:	1afb      	subs	r3, r7, r3
 80006dc:	015a      	lsls	r2, r3, #5
 80006de:	d400      	bmi.n	80006e2 <__aeabi_fadd+0x142>
 80006e0:	e0f3      	b.n	80008ca <__aeabi_fadd+0x32a>
 80006e2:	4663      	mov	r3, ip
 80006e4:	000c      	movs	r4, r1
 80006e6:	1bdb      	subs	r3, r3, r7
 80006e8:	e7d2      	b.n	8000690 <__aeabi_fadd+0xf0>
 80006ea:	4661      	mov	r1, ip
 80006ec:	2900      	cmp	r1, #0
 80006ee:	d05b      	beq.n	80007a8 <__aeabi_fadd+0x208>
 80006f0:	1e51      	subs	r1, r2, #1
 80006f2:	2a01      	cmp	r2, #1
 80006f4:	d100      	bne.n	80006f8 <__aeabi_fadd+0x158>
 80006f6:	e0a7      	b.n	8000848 <__aeabi_fadd+0x2a8>
 80006f8:	2aff      	cmp	r2, #255	; 0xff
 80006fa:	d022      	beq.n	8000742 <__aeabi_fadd+0x1a2>
 80006fc:	000a      	movs	r2, r1
 80006fe:	e799      	b.n	8000634 <__aeabi_fadd+0x94>
 8000700:	20ff      	movs	r0, #255	; 0xff
 8000702:	2600      	movs	r6, #0
 8000704:	e7d3      	b.n	80006ae <__aeabi_fadd+0x10e>
 8000706:	21fe      	movs	r1, #254	; 0xfe
 8000708:	1c6a      	adds	r2, r5, #1
 800070a:	4211      	tst	r1, r2
 800070c:	d073      	beq.n	80007f6 <__aeabi_fadd+0x256>
 800070e:	2aff      	cmp	r2, #255	; 0xff
 8000710:	d0f6      	beq.n	8000700 <__aeabi_fadd+0x160>
 8000712:	0015      	movs	r5, r2
 8000714:	4467      	add	r7, ip
 8000716:	087b      	lsrs	r3, r7, #1
 8000718:	075a      	lsls	r2, r3, #29
 800071a:	d1bb      	bne.n	8000694 <__aeabi_fadd+0xf4>
 800071c:	08db      	lsrs	r3, r3, #3
 800071e:	2dff      	cmp	r5, #255	; 0xff
 8000720:	d00f      	beq.n	8000742 <__aeabi_fadd+0x1a2>
 8000722:	025b      	lsls	r3, r3, #9
 8000724:	0a5e      	lsrs	r6, r3, #9
 8000726:	b2e8      	uxtb	r0, r5
 8000728:	e7c1      	b.n	80006ae <__aeabi_fadd+0x10e>
 800072a:	4662      	mov	r2, ip
 800072c:	2a00      	cmp	r2, #0
 800072e:	d008      	beq.n	8000742 <__aeabi_fadd+0x1a2>
 8000730:	2280      	movs	r2, #128	; 0x80
 8000732:	03d2      	lsls	r2, r2, #15
 8000734:	4213      	tst	r3, r2
 8000736:	d004      	beq.n	8000742 <__aeabi_fadd+0x1a2>
 8000738:	4640      	mov	r0, r8
 800073a:	4210      	tst	r0, r2
 800073c:	d101      	bne.n	8000742 <__aeabi_fadd+0x1a2>
 800073e:	000c      	movs	r4, r1
 8000740:	4643      	mov	r3, r8
 8000742:	2b00      	cmp	r3, #0
 8000744:	d0dc      	beq.n	8000700 <__aeabi_fadd+0x160>
 8000746:	2680      	movs	r6, #128	; 0x80
 8000748:	03f6      	lsls	r6, r6, #15
 800074a:	431e      	orrs	r6, r3
 800074c:	0276      	lsls	r6, r6, #9
 800074e:	20ff      	movs	r0, #255	; 0xff
 8000750:	0a76      	lsrs	r6, r6, #9
 8000752:	e7ac      	b.n	80006ae <__aeabi_fadd+0x10e>
 8000754:	2a00      	cmp	r2, #0
 8000756:	d0d6      	beq.n	8000706 <__aeabi_fadd+0x166>
 8000758:	1b42      	subs	r2, r0, r5
 800075a:	2d00      	cmp	r5, #0
 800075c:	d05c      	beq.n	8000818 <__aeabi_fadd+0x278>
 800075e:	28ff      	cmp	r0, #255	; 0xff
 8000760:	d0ee      	beq.n	8000740 <__aeabi_fadd+0x1a0>
 8000762:	2380      	movs	r3, #128	; 0x80
 8000764:	04db      	lsls	r3, r3, #19
 8000766:	431f      	orrs	r7, r3
 8000768:	2a1b      	cmp	r2, #27
 800076a:	dc00      	bgt.n	800076e <__aeabi_fadd+0x1ce>
 800076c:	e082      	b.n	8000874 <__aeabi_fadd+0x2d4>
 800076e:	2301      	movs	r3, #1
 8000770:	464d      	mov	r5, r9
 8000772:	4463      	add	r3, ip
 8000774:	e763      	b.n	800063e <__aeabi_fadd+0x9e>
 8000776:	2220      	movs	r2, #32
 8000778:	1b40      	subs	r0, r0, r5
 800077a:	3001      	adds	r0, #1
 800077c:	1a12      	subs	r2, r2, r0
 800077e:	0019      	movs	r1, r3
 8000780:	4093      	lsls	r3, r2
 8000782:	40c1      	lsrs	r1, r0
 8000784:	1e5a      	subs	r2, r3, #1
 8000786:	4193      	sbcs	r3, r2
 8000788:	2500      	movs	r5, #0
 800078a:	430b      	orrs	r3, r1
 800078c:	e780      	b.n	8000690 <__aeabi_fadd+0xf0>
 800078e:	2320      	movs	r3, #32
 8000790:	4661      	mov	r1, ip
 8000792:	1a1b      	subs	r3, r3, r0
 8000794:	4099      	lsls	r1, r3
 8000796:	4662      	mov	r2, ip
 8000798:	000b      	movs	r3, r1
 800079a:	40c2      	lsrs	r2, r0
 800079c:	1e59      	subs	r1, r3, #1
 800079e:	418b      	sbcs	r3, r1
 80007a0:	4313      	orrs	r3, r2
 80007a2:	e764      	b.n	800066e <__aeabi_fadd+0xce>
 80007a4:	000c      	movs	r4, r1
 80007a6:	4643      	mov	r3, r8
 80007a8:	0015      	movs	r5, r2
 80007aa:	e7b8      	b.n	800071e <__aeabi_fadd+0x17e>
 80007ac:	4663      	mov	r3, ip
 80007ae:	1afe      	subs	r6, r7, r3
 80007b0:	0173      	lsls	r3, r6, #5
 80007b2:	d445      	bmi.n	8000840 <__aeabi_fadd+0x2a0>
 80007b4:	2e00      	cmp	r6, #0
 80007b6:	d000      	beq.n	80007ba <__aeabi_fadd+0x21a>
 80007b8:	e75e      	b.n	8000678 <__aeabi_fadd+0xd8>
 80007ba:	2400      	movs	r4, #0
 80007bc:	2000      	movs	r0, #0
 80007be:	2600      	movs	r6, #0
 80007c0:	e775      	b.n	80006ae <__aeabi_fadd+0x10e>
 80007c2:	2bff      	cmp	r3, #255	; 0xff
 80007c4:	d0bb      	beq.n	800073e <__aeabi_fadd+0x19e>
 80007c6:	2380      	movs	r3, #128	; 0x80
 80007c8:	04db      	lsls	r3, r3, #19
 80007ca:	431f      	orrs	r7, r3
 80007cc:	2a1b      	cmp	r2, #27
 80007ce:	dd47      	ble.n	8000860 <__aeabi_fadd+0x2c0>
 80007d0:	2301      	movs	r3, #1
 80007d2:	4662      	mov	r2, ip
 80007d4:	000c      	movs	r4, r1
 80007d6:	464d      	mov	r5, r9
 80007d8:	1ad3      	subs	r3, r2, r3
 80007da:	e749      	b.n	8000670 <__aeabi_fadd+0xd0>
 80007dc:	0005      	movs	r5, r0
 80007de:	e79e      	b.n	800071e <__aeabi_fadd+0x17e>
 80007e0:	4661      	mov	r1, ip
 80007e2:	2320      	movs	r3, #32
 80007e4:	40d1      	lsrs	r1, r2
 80007e6:	1a9b      	subs	r3, r3, r2
 80007e8:	4662      	mov	r2, ip
 80007ea:	409a      	lsls	r2, r3
 80007ec:	0013      	movs	r3, r2
 80007ee:	1e5a      	subs	r2, r3, #1
 80007f0:	4193      	sbcs	r3, r2
 80007f2:	430b      	orrs	r3, r1
 80007f4:	e722      	b.n	800063c <__aeabi_fadd+0x9c>
 80007f6:	2d00      	cmp	r5, #0
 80007f8:	d146      	bne.n	8000888 <__aeabi_fadd+0x2e8>
 80007fa:	2f00      	cmp	r7, #0
 80007fc:	d062      	beq.n	80008c4 <__aeabi_fadd+0x324>
 80007fe:	4663      	mov	r3, ip
 8000800:	2000      	movs	r0, #0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d100      	bne.n	8000808 <__aeabi_fadd+0x268>
 8000806:	e752      	b.n	80006ae <__aeabi_fadd+0x10e>
 8000808:	003b      	movs	r3, r7
 800080a:	4463      	add	r3, ip
 800080c:	015a      	lsls	r2, r3, #5
 800080e:	d583      	bpl.n	8000718 <__aeabi_fadd+0x178>
 8000810:	4a32      	ldr	r2, [pc, #200]	; (80008dc <__aeabi_fadd+0x33c>)
 8000812:	3501      	adds	r5, #1
 8000814:	4013      	ands	r3, r2
 8000816:	e77f      	b.n	8000718 <__aeabi_fadd+0x178>
 8000818:	2f00      	cmp	r7, #0
 800081a:	d0c4      	beq.n	80007a6 <__aeabi_fadd+0x206>
 800081c:	1e53      	subs	r3, r2, #1
 800081e:	2a01      	cmp	r2, #1
 8000820:	d012      	beq.n	8000848 <__aeabi_fadd+0x2a8>
 8000822:	2aff      	cmp	r2, #255	; 0xff
 8000824:	d08c      	beq.n	8000740 <__aeabi_fadd+0x1a0>
 8000826:	001a      	movs	r2, r3
 8000828:	e79e      	b.n	8000768 <__aeabi_fadd+0x1c8>
 800082a:	2f00      	cmp	r7, #0
 800082c:	d000      	beq.n	8000830 <__aeabi_fadd+0x290>
 800082e:	e77c      	b.n	800072a <__aeabi_fadd+0x18a>
 8000830:	4663      	mov	r3, ip
 8000832:	2b00      	cmp	r3, #0
 8000834:	d183      	bne.n	800073e <__aeabi_fadd+0x19e>
 8000836:	2680      	movs	r6, #128	; 0x80
 8000838:	2400      	movs	r4, #0
 800083a:	20ff      	movs	r0, #255	; 0xff
 800083c:	03f6      	lsls	r6, r6, #15
 800083e:	e736      	b.n	80006ae <__aeabi_fadd+0x10e>
 8000840:	4663      	mov	r3, ip
 8000842:	000c      	movs	r4, r1
 8000844:	1bde      	subs	r6, r3, r7
 8000846:	e717      	b.n	8000678 <__aeabi_fadd+0xd8>
 8000848:	003b      	movs	r3, r7
 800084a:	4463      	add	r3, ip
 800084c:	2501      	movs	r5, #1
 800084e:	015a      	lsls	r2, r3, #5
 8000850:	d400      	bmi.n	8000854 <__aeabi_fadd+0x2b4>
 8000852:	e761      	b.n	8000718 <__aeabi_fadd+0x178>
 8000854:	2502      	movs	r5, #2
 8000856:	e6f7      	b.n	8000648 <__aeabi_fadd+0xa8>
 8000858:	4663      	mov	r3, ip
 800085a:	2501      	movs	r5, #1
 800085c:	1afb      	subs	r3, r7, r3
 800085e:	e707      	b.n	8000670 <__aeabi_fadd+0xd0>
 8000860:	2320      	movs	r3, #32
 8000862:	1a9b      	subs	r3, r3, r2
 8000864:	0038      	movs	r0, r7
 8000866:	409f      	lsls	r7, r3
 8000868:	003b      	movs	r3, r7
 800086a:	40d0      	lsrs	r0, r2
 800086c:	1e5a      	subs	r2, r3, #1
 800086e:	4193      	sbcs	r3, r2
 8000870:	4303      	orrs	r3, r0
 8000872:	e7ae      	b.n	80007d2 <__aeabi_fadd+0x232>
 8000874:	2320      	movs	r3, #32
 8000876:	1a9b      	subs	r3, r3, r2
 8000878:	0039      	movs	r1, r7
 800087a:	409f      	lsls	r7, r3
 800087c:	003b      	movs	r3, r7
 800087e:	40d1      	lsrs	r1, r2
 8000880:	1e5a      	subs	r2, r3, #1
 8000882:	4193      	sbcs	r3, r2
 8000884:	430b      	orrs	r3, r1
 8000886:	e773      	b.n	8000770 <__aeabi_fadd+0x1d0>
 8000888:	2f00      	cmp	r7, #0
 800088a:	d100      	bne.n	800088e <__aeabi_fadd+0x2ee>
 800088c:	e758      	b.n	8000740 <__aeabi_fadd+0x1a0>
 800088e:	4662      	mov	r2, ip
 8000890:	2a00      	cmp	r2, #0
 8000892:	d100      	bne.n	8000896 <__aeabi_fadd+0x2f6>
 8000894:	e755      	b.n	8000742 <__aeabi_fadd+0x1a2>
 8000896:	2280      	movs	r2, #128	; 0x80
 8000898:	03d2      	lsls	r2, r2, #15
 800089a:	4213      	tst	r3, r2
 800089c:	d100      	bne.n	80008a0 <__aeabi_fadd+0x300>
 800089e:	e750      	b.n	8000742 <__aeabi_fadd+0x1a2>
 80008a0:	4641      	mov	r1, r8
 80008a2:	4211      	tst	r1, r2
 80008a4:	d000      	beq.n	80008a8 <__aeabi_fadd+0x308>
 80008a6:	e74c      	b.n	8000742 <__aeabi_fadd+0x1a2>
 80008a8:	4643      	mov	r3, r8
 80008aa:	e74a      	b.n	8000742 <__aeabi_fadd+0x1a2>
 80008ac:	4663      	mov	r3, ip
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d083      	beq.n	80007ba <__aeabi_fadd+0x21a>
 80008b2:	000c      	movs	r4, r1
 80008b4:	4646      	mov	r6, r8
 80008b6:	2000      	movs	r0, #0
 80008b8:	e6f9      	b.n	80006ae <__aeabi_fadd+0x10e>
 80008ba:	4663      	mov	r3, ip
 80008bc:	000c      	movs	r4, r1
 80008be:	1bdb      	subs	r3, r3, r7
 80008c0:	3501      	adds	r5, #1
 80008c2:	e6d5      	b.n	8000670 <__aeabi_fadd+0xd0>
 80008c4:	4646      	mov	r6, r8
 80008c6:	2000      	movs	r0, #0
 80008c8:	e6f1      	b.n	80006ae <__aeabi_fadd+0x10e>
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d000      	beq.n	80008d0 <__aeabi_fadd+0x330>
 80008ce:	e723      	b.n	8000718 <__aeabi_fadd+0x178>
 80008d0:	2400      	movs	r4, #0
 80008d2:	2600      	movs	r6, #0
 80008d4:	e6eb      	b.n	80006ae <__aeabi_fadd+0x10e>
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	7dffffff 	.word	0x7dffffff
 80008dc:	fbffffff 	.word	0xfbffffff

080008e0 <__aeabi_fdiv>:
 80008e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008e2:	464f      	mov	r7, r9
 80008e4:	4646      	mov	r6, r8
 80008e6:	46d6      	mov	lr, sl
 80008e8:	0245      	lsls	r5, r0, #9
 80008ea:	b5c0      	push	{r6, r7, lr}
 80008ec:	0047      	lsls	r7, r0, #1
 80008ee:	1c0c      	adds	r4, r1, #0
 80008f0:	0a6d      	lsrs	r5, r5, #9
 80008f2:	0e3f      	lsrs	r7, r7, #24
 80008f4:	0fc6      	lsrs	r6, r0, #31
 80008f6:	2f00      	cmp	r7, #0
 80008f8:	d100      	bne.n	80008fc <__aeabi_fdiv+0x1c>
 80008fa:	e06f      	b.n	80009dc <__aeabi_fdiv+0xfc>
 80008fc:	2fff      	cmp	r7, #255	; 0xff
 80008fe:	d100      	bne.n	8000902 <__aeabi_fdiv+0x22>
 8000900:	e074      	b.n	80009ec <__aeabi_fdiv+0x10c>
 8000902:	2300      	movs	r3, #0
 8000904:	2280      	movs	r2, #128	; 0x80
 8000906:	4699      	mov	r9, r3
 8000908:	469a      	mov	sl, r3
 800090a:	00ed      	lsls	r5, r5, #3
 800090c:	04d2      	lsls	r2, r2, #19
 800090e:	4315      	orrs	r5, r2
 8000910:	3f7f      	subs	r7, #127	; 0x7f
 8000912:	0263      	lsls	r3, r4, #9
 8000914:	0a5b      	lsrs	r3, r3, #9
 8000916:	4698      	mov	r8, r3
 8000918:	0063      	lsls	r3, r4, #1
 800091a:	0e1b      	lsrs	r3, r3, #24
 800091c:	0fe4      	lsrs	r4, r4, #31
 800091e:	2b00      	cmp	r3, #0
 8000920:	d04d      	beq.n	80009be <__aeabi_fdiv+0xde>
 8000922:	2bff      	cmp	r3, #255	; 0xff
 8000924:	d045      	beq.n	80009b2 <__aeabi_fdiv+0xd2>
 8000926:	4642      	mov	r2, r8
 8000928:	2180      	movs	r1, #128	; 0x80
 800092a:	00d2      	lsls	r2, r2, #3
 800092c:	04c9      	lsls	r1, r1, #19
 800092e:	4311      	orrs	r1, r2
 8000930:	4688      	mov	r8, r1
 8000932:	2200      	movs	r2, #0
 8000934:	3b7f      	subs	r3, #127	; 0x7f
 8000936:	0031      	movs	r1, r6
 8000938:	1aff      	subs	r7, r7, r3
 800093a:	464b      	mov	r3, r9
 800093c:	4061      	eors	r1, r4
 800093e:	b2c9      	uxtb	r1, r1
 8000940:	2b0f      	cmp	r3, #15
 8000942:	d900      	bls.n	8000946 <__aeabi_fdiv+0x66>
 8000944:	e0b8      	b.n	8000ab8 <__aeabi_fdiv+0x1d8>
 8000946:	4870      	ldr	r0, [pc, #448]	; (8000b08 <__aeabi_fdiv+0x228>)
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	58c3      	ldr	r3, [r0, r3]
 800094c:	469f      	mov	pc, r3
 800094e:	2300      	movs	r3, #0
 8000950:	4698      	mov	r8, r3
 8000952:	0026      	movs	r6, r4
 8000954:	4645      	mov	r5, r8
 8000956:	4692      	mov	sl, r2
 8000958:	4653      	mov	r3, sl
 800095a:	2b02      	cmp	r3, #2
 800095c:	d100      	bne.n	8000960 <__aeabi_fdiv+0x80>
 800095e:	e08d      	b.n	8000a7c <__aeabi_fdiv+0x19c>
 8000960:	2b03      	cmp	r3, #3
 8000962:	d100      	bne.n	8000966 <__aeabi_fdiv+0x86>
 8000964:	e0a1      	b.n	8000aaa <__aeabi_fdiv+0x1ca>
 8000966:	2b01      	cmp	r3, #1
 8000968:	d018      	beq.n	800099c <__aeabi_fdiv+0xbc>
 800096a:	003b      	movs	r3, r7
 800096c:	337f      	adds	r3, #127	; 0x7f
 800096e:	2b00      	cmp	r3, #0
 8000970:	dd6d      	ble.n	8000a4e <__aeabi_fdiv+0x16e>
 8000972:	076a      	lsls	r2, r5, #29
 8000974:	d004      	beq.n	8000980 <__aeabi_fdiv+0xa0>
 8000976:	220f      	movs	r2, #15
 8000978:	402a      	ands	r2, r5
 800097a:	2a04      	cmp	r2, #4
 800097c:	d000      	beq.n	8000980 <__aeabi_fdiv+0xa0>
 800097e:	3504      	adds	r5, #4
 8000980:	012a      	lsls	r2, r5, #4
 8000982:	d503      	bpl.n	800098c <__aeabi_fdiv+0xac>
 8000984:	4b61      	ldr	r3, [pc, #388]	; (8000b0c <__aeabi_fdiv+0x22c>)
 8000986:	401d      	ands	r5, r3
 8000988:	003b      	movs	r3, r7
 800098a:	3380      	adds	r3, #128	; 0x80
 800098c:	2bfe      	cmp	r3, #254	; 0xfe
 800098e:	dd00      	ble.n	8000992 <__aeabi_fdiv+0xb2>
 8000990:	e074      	b.n	8000a7c <__aeabi_fdiv+0x19c>
 8000992:	01aa      	lsls	r2, r5, #6
 8000994:	0a52      	lsrs	r2, r2, #9
 8000996:	b2d8      	uxtb	r0, r3
 8000998:	e002      	b.n	80009a0 <__aeabi_fdiv+0xc0>
 800099a:	000e      	movs	r6, r1
 800099c:	2000      	movs	r0, #0
 800099e:	2200      	movs	r2, #0
 80009a0:	05c0      	lsls	r0, r0, #23
 80009a2:	07f6      	lsls	r6, r6, #31
 80009a4:	4310      	orrs	r0, r2
 80009a6:	4330      	orrs	r0, r6
 80009a8:	bce0      	pop	{r5, r6, r7}
 80009aa:	46ba      	mov	sl, r7
 80009ac:	46b1      	mov	r9, r6
 80009ae:	46a8      	mov	r8, r5
 80009b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009b2:	4643      	mov	r3, r8
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d13f      	bne.n	8000a38 <__aeabi_fdiv+0x158>
 80009b8:	2202      	movs	r2, #2
 80009ba:	3fff      	subs	r7, #255	; 0xff
 80009bc:	e003      	b.n	80009c6 <__aeabi_fdiv+0xe6>
 80009be:	4643      	mov	r3, r8
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d12d      	bne.n	8000a20 <__aeabi_fdiv+0x140>
 80009c4:	2201      	movs	r2, #1
 80009c6:	0031      	movs	r1, r6
 80009c8:	464b      	mov	r3, r9
 80009ca:	4061      	eors	r1, r4
 80009cc:	b2c9      	uxtb	r1, r1
 80009ce:	4313      	orrs	r3, r2
 80009d0:	2b0f      	cmp	r3, #15
 80009d2:	d838      	bhi.n	8000a46 <__aeabi_fdiv+0x166>
 80009d4:	484e      	ldr	r0, [pc, #312]	; (8000b10 <__aeabi_fdiv+0x230>)
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	58c3      	ldr	r3, [r0, r3]
 80009da:	469f      	mov	pc, r3
 80009dc:	2d00      	cmp	r5, #0
 80009de:	d113      	bne.n	8000a08 <__aeabi_fdiv+0x128>
 80009e0:	2304      	movs	r3, #4
 80009e2:	4699      	mov	r9, r3
 80009e4:	3b03      	subs	r3, #3
 80009e6:	2700      	movs	r7, #0
 80009e8:	469a      	mov	sl, r3
 80009ea:	e792      	b.n	8000912 <__aeabi_fdiv+0x32>
 80009ec:	2d00      	cmp	r5, #0
 80009ee:	d105      	bne.n	80009fc <__aeabi_fdiv+0x11c>
 80009f0:	2308      	movs	r3, #8
 80009f2:	4699      	mov	r9, r3
 80009f4:	3b06      	subs	r3, #6
 80009f6:	27ff      	movs	r7, #255	; 0xff
 80009f8:	469a      	mov	sl, r3
 80009fa:	e78a      	b.n	8000912 <__aeabi_fdiv+0x32>
 80009fc:	230c      	movs	r3, #12
 80009fe:	4699      	mov	r9, r3
 8000a00:	3b09      	subs	r3, #9
 8000a02:	27ff      	movs	r7, #255	; 0xff
 8000a04:	469a      	mov	sl, r3
 8000a06:	e784      	b.n	8000912 <__aeabi_fdiv+0x32>
 8000a08:	0028      	movs	r0, r5
 8000a0a:	f002 fbf1 	bl	80031f0 <__clzsi2>
 8000a0e:	2776      	movs	r7, #118	; 0x76
 8000a10:	1f43      	subs	r3, r0, #5
 8000a12:	409d      	lsls	r5, r3
 8000a14:	2300      	movs	r3, #0
 8000a16:	427f      	negs	r7, r7
 8000a18:	4699      	mov	r9, r3
 8000a1a:	469a      	mov	sl, r3
 8000a1c:	1a3f      	subs	r7, r7, r0
 8000a1e:	e778      	b.n	8000912 <__aeabi_fdiv+0x32>
 8000a20:	4640      	mov	r0, r8
 8000a22:	f002 fbe5 	bl	80031f0 <__clzsi2>
 8000a26:	4642      	mov	r2, r8
 8000a28:	1f43      	subs	r3, r0, #5
 8000a2a:	409a      	lsls	r2, r3
 8000a2c:	2376      	movs	r3, #118	; 0x76
 8000a2e:	425b      	negs	r3, r3
 8000a30:	4690      	mov	r8, r2
 8000a32:	1a1b      	subs	r3, r3, r0
 8000a34:	2200      	movs	r2, #0
 8000a36:	e77e      	b.n	8000936 <__aeabi_fdiv+0x56>
 8000a38:	2303      	movs	r3, #3
 8000a3a:	464a      	mov	r2, r9
 8000a3c:	431a      	orrs	r2, r3
 8000a3e:	4691      	mov	r9, r2
 8000a40:	33fc      	adds	r3, #252	; 0xfc
 8000a42:	2203      	movs	r2, #3
 8000a44:	e777      	b.n	8000936 <__aeabi_fdiv+0x56>
 8000a46:	000e      	movs	r6, r1
 8000a48:	20ff      	movs	r0, #255	; 0xff
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	e7a8      	b.n	80009a0 <__aeabi_fdiv+0xc0>
 8000a4e:	2201      	movs	r2, #1
 8000a50:	1ad3      	subs	r3, r2, r3
 8000a52:	2b1b      	cmp	r3, #27
 8000a54:	dca2      	bgt.n	800099c <__aeabi_fdiv+0xbc>
 8000a56:	379e      	adds	r7, #158	; 0x9e
 8000a58:	002a      	movs	r2, r5
 8000a5a:	40bd      	lsls	r5, r7
 8000a5c:	40da      	lsrs	r2, r3
 8000a5e:	1e6b      	subs	r3, r5, #1
 8000a60:	419d      	sbcs	r5, r3
 8000a62:	4315      	orrs	r5, r2
 8000a64:	076a      	lsls	r2, r5, #29
 8000a66:	d004      	beq.n	8000a72 <__aeabi_fdiv+0x192>
 8000a68:	220f      	movs	r2, #15
 8000a6a:	402a      	ands	r2, r5
 8000a6c:	2a04      	cmp	r2, #4
 8000a6e:	d000      	beq.n	8000a72 <__aeabi_fdiv+0x192>
 8000a70:	3504      	adds	r5, #4
 8000a72:	016a      	lsls	r2, r5, #5
 8000a74:	d544      	bpl.n	8000b00 <__aeabi_fdiv+0x220>
 8000a76:	2001      	movs	r0, #1
 8000a78:	2200      	movs	r2, #0
 8000a7a:	e791      	b.n	80009a0 <__aeabi_fdiv+0xc0>
 8000a7c:	20ff      	movs	r0, #255	; 0xff
 8000a7e:	2200      	movs	r2, #0
 8000a80:	e78e      	b.n	80009a0 <__aeabi_fdiv+0xc0>
 8000a82:	2280      	movs	r2, #128	; 0x80
 8000a84:	2600      	movs	r6, #0
 8000a86:	20ff      	movs	r0, #255	; 0xff
 8000a88:	03d2      	lsls	r2, r2, #15
 8000a8a:	e789      	b.n	80009a0 <__aeabi_fdiv+0xc0>
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	4698      	mov	r8, r3
 8000a90:	2280      	movs	r2, #128	; 0x80
 8000a92:	03d2      	lsls	r2, r2, #15
 8000a94:	4215      	tst	r5, r2
 8000a96:	d008      	beq.n	8000aaa <__aeabi_fdiv+0x1ca>
 8000a98:	4643      	mov	r3, r8
 8000a9a:	4213      	tst	r3, r2
 8000a9c:	d105      	bne.n	8000aaa <__aeabi_fdiv+0x1ca>
 8000a9e:	431a      	orrs	r2, r3
 8000aa0:	0252      	lsls	r2, r2, #9
 8000aa2:	0026      	movs	r6, r4
 8000aa4:	20ff      	movs	r0, #255	; 0xff
 8000aa6:	0a52      	lsrs	r2, r2, #9
 8000aa8:	e77a      	b.n	80009a0 <__aeabi_fdiv+0xc0>
 8000aaa:	2280      	movs	r2, #128	; 0x80
 8000aac:	03d2      	lsls	r2, r2, #15
 8000aae:	432a      	orrs	r2, r5
 8000ab0:	0252      	lsls	r2, r2, #9
 8000ab2:	20ff      	movs	r0, #255	; 0xff
 8000ab4:	0a52      	lsrs	r2, r2, #9
 8000ab6:	e773      	b.n	80009a0 <__aeabi_fdiv+0xc0>
 8000ab8:	4642      	mov	r2, r8
 8000aba:	016b      	lsls	r3, r5, #5
 8000abc:	0155      	lsls	r5, r2, #5
 8000abe:	42ab      	cmp	r3, r5
 8000ac0:	d21a      	bcs.n	8000af8 <__aeabi_fdiv+0x218>
 8000ac2:	201b      	movs	r0, #27
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	3f01      	subs	r7, #1
 8000ac8:	2601      	movs	r6, #1
 8000aca:	001c      	movs	r4, r3
 8000acc:	0052      	lsls	r2, r2, #1
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	2c00      	cmp	r4, #0
 8000ad2:	db01      	blt.n	8000ad8 <__aeabi_fdiv+0x1f8>
 8000ad4:	429d      	cmp	r5, r3
 8000ad6:	d801      	bhi.n	8000adc <__aeabi_fdiv+0x1fc>
 8000ad8:	1b5b      	subs	r3, r3, r5
 8000ada:	4332      	orrs	r2, r6
 8000adc:	3801      	subs	r0, #1
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	d1f3      	bne.n	8000aca <__aeabi_fdiv+0x1ea>
 8000ae2:	1e58      	subs	r0, r3, #1
 8000ae4:	4183      	sbcs	r3, r0
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	001d      	movs	r5, r3
 8000aea:	003b      	movs	r3, r7
 8000aec:	337f      	adds	r3, #127	; 0x7f
 8000aee:	000e      	movs	r6, r1
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	dd00      	ble.n	8000af6 <__aeabi_fdiv+0x216>
 8000af4:	e73d      	b.n	8000972 <__aeabi_fdiv+0x92>
 8000af6:	e7aa      	b.n	8000a4e <__aeabi_fdiv+0x16e>
 8000af8:	201a      	movs	r0, #26
 8000afa:	2201      	movs	r2, #1
 8000afc:	1b5b      	subs	r3, r3, r5
 8000afe:	e7e3      	b.n	8000ac8 <__aeabi_fdiv+0x1e8>
 8000b00:	01aa      	lsls	r2, r5, #6
 8000b02:	2000      	movs	r0, #0
 8000b04:	0a52      	lsrs	r2, r2, #9
 8000b06:	e74b      	b.n	80009a0 <__aeabi_fdiv+0xc0>
 8000b08:	0800af70 	.word	0x0800af70
 8000b0c:	f7ffffff 	.word	0xf7ffffff
 8000b10:	0800afb0 	.word	0x0800afb0

08000b14 <__eqsf2>:
 8000b14:	b570      	push	{r4, r5, r6, lr}
 8000b16:	0042      	lsls	r2, r0, #1
 8000b18:	0245      	lsls	r5, r0, #9
 8000b1a:	024e      	lsls	r6, r1, #9
 8000b1c:	004c      	lsls	r4, r1, #1
 8000b1e:	0fc3      	lsrs	r3, r0, #31
 8000b20:	0a6d      	lsrs	r5, r5, #9
 8000b22:	2001      	movs	r0, #1
 8000b24:	0e12      	lsrs	r2, r2, #24
 8000b26:	0a76      	lsrs	r6, r6, #9
 8000b28:	0e24      	lsrs	r4, r4, #24
 8000b2a:	0fc9      	lsrs	r1, r1, #31
 8000b2c:	2aff      	cmp	r2, #255	; 0xff
 8000b2e:	d006      	beq.n	8000b3e <__eqsf2+0x2a>
 8000b30:	2cff      	cmp	r4, #255	; 0xff
 8000b32:	d003      	beq.n	8000b3c <__eqsf2+0x28>
 8000b34:	42a2      	cmp	r2, r4
 8000b36:	d101      	bne.n	8000b3c <__eqsf2+0x28>
 8000b38:	42b5      	cmp	r5, r6
 8000b3a:	d006      	beq.n	8000b4a <__eqsf2+0x36>
 8000b3c:	bd70      	pop	{r4, r5, r6, pc}
 8000b3e:	2d00      	cmp	r5, #0
 8000b40:	d1fc      	bne.n	8000b3c <__eqsf2+0x28>
 8000b42:	2cff      	cmp	r4, #255	; 0xff
 8000b44:	d1fa      	bne.n	8000b3c <__eqsf2+0x28>
 8000b46:	2e00      	cmp	r6, #0
 8000b48:	d1f8      	bne.n	8000b3c <__eqsf2+0x28>
 8000b4a:	428b      	cmp	r3, r1
 8000b4c:	d006      	beq.n	8000b5c <__eqsf2+0x48>
 8000b4e:	2001      	movs	r0, #1
 8000b50:	2a00      	cmp	r2, #0
 8000b52:	d1f3      	bne.n	8000b3c <__eqsf2+0x28>
 8000b54:	0028      	movs	r0, r5
 8000b56:	1e43      	subs	r3, r0, #1
 8000b58:	4198      	sbcs	r0, r3
 8000b5a:	e7ef      	b.n	8000b3c <__eqsf2+0x28>
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	e7ed      	b.n	8000b3c <__eqsf2+0x28>

08000b60 <__gesf2>:
 8000b60:	b570      	push	{r4, r5, r6, lr}
 8000b62:	0042      	lsls	r2, r0, #1
 8000b64:	0245      	lsls	r5, r0, #9
 8000b66:	024e      	lsls	r6, r1, #9
 8000b68:	004c      	lsls	r4, r1, #1
 8000b6a:	0fc3      	lsrs	r3, r0, #31
 8000b6c:	0a6d      	lsrs	r5, r5, #9
 8000b6e:	0e12      	lsrs	r2, r2, #24
 8000b70:	0a76      	lsrs	r6, r6, #9
 8000b72:	0e24      	lsrs	r4, r4, #24
 8000b74:	0fc8      	lsrs	r0, r1, #31
 8000b76:	2aff      	cmp	r2, #255	; 0xff
 8000b78:	d01b      	beq.n	8000bb2 <__gesf2+0x52>
 8000b7a:	2cff      	cmp	r4, #255	; 0xff
 8000b7c:	d00e      	beq.n	8000b9c <__gesf2+0x3c>
 8000b7e:	2a00      	cmp	r2, #0
 8000b80:	d11b      	bne.n	8000bba <__gesf2+0x5a>
 8000b82:	2c00      	cmp	r4, #0
 8000b84:	d101      	bne.n	8000b8a <__gesf2+0x2a>
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	d01c      	beq.n	8000bc4 <__gesf2+0x64>
 8000b8a:	2d00      	cmp	r5, #0
 8000b8c:	d00c      	beq.n	8000ba8 <__gesf2+0x48>
 8000b8e:	4283      	cmp	r3, r0
 8000b90:	d01c      	beq.n	8000bcc <__gesf2+0x6c>
 8000b92:	2102      	movs	r1, #2
 8000b94:	1e58      	subs	r0, r3, #1
 8000b96:	4008      	ands	r0, r1
 8000b98:	3801      	subs	r0, #1
 8000b9a:	bd70      	pop	{r4, r5, r6, pc}
 8000b9c:	2e00      	cmp	r6, #0
 8000b9e:	d122      	bne.n	8000be6 <__gesf2+0x86>
 8000ba0:	2a00      	cmp	r2, #0
 8000ba2:	d1f4      	bne.n	8000b8e <__gesf2+0x2e>
 8000ba4:	2d00      	cmp	r5, #0
 8000ba6:	d1f2      	bne.n	8000b8e <__gesf2+0x2e>
 8000ba8:	2800      	cmp	r0, #0
 8000baa:	d1f6      	bne.n	8000b9a <__gesf2+0x3a>
 8000bac:	2001      	movs	r0, #1
 8000bae:	4240      	negs	r0, r0
 8000bb0:	e7f3      	b.n	8000b9a <__gesf2+0x3a>
 8000bb2:	2d00      	cmp	r5, #0
 8000bb4:	d117      	bne.n	8000be6 <__gesf2+0x86>
 8000bb6:	2cff      	cmp	r4, #255	; 0xff
 8000bb8:	d0f0      	beq.n	8000b9c <__gesf2+0x3c>
 8000bba:	2c00      	cmp	r4, #0
 8000bbc:	d1e7      	bne.n	8000b8e <__gesf2+0x2e>
 8000bbe:	2e00      	cmp	r6, #0
 8000bc0:	d1e5      	bne.n	8000b8e <__gesf2+0x2e>
 8000bc2:	e7e6      	b.n	8000b92 <__gesf2+0x32>
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	2d00      	cmp	r5, #0
 8000bc8:	d0e7      	beq.n	8000b9a <__gesf2+0x3a>
 8000bca:	e7e2      	b.n	8000b92 <__gesf2+0x32>
 8000bcc:	42a2      	cmp	r2, r4
 8000bce:	dc05      	bgt.n	8000bdc <__gesf2+0x7c>
 8000bd0:	dbea      	blt.n	8000ba8 <__gesf2+0x48>
 8000bd2:	42b5      	cmp	r5, r6
 8000bd4:	d802      	bhi.n	8000bdc <__gesf2+0x7c>
 8000bd6:	d3e7      	bcc.n	8000ba8 <__gesf2+0x48>
 8000bd8:	2000      	movs	r0, #0
 8000bda:	e7de      	b.n	8000b9a <__gesf2+0x3a>
 8000bdc:	4243      	negs	r3, r0
 8000bde:	4158      	adcs	r0, r3
 8000be0:	0040      	lsls	r0, r0, #1
 8000be2:	3801      	subs	r0, #1
 8000be4:	e7d9      	b.n	8000b9a <__gesf2+0x3a>
 8000be6:	2002      	movs	r0, #2
 8000be8:	4240      	negs	r0, r0
 8000bea:	e7d6      	b.n	8000b9a <__gesf2+0x3a>

08000bec <__lesf2>:
 8000bec:	b570      	push	{r4, r5, r6, lr}
 8000bee:	0042      	lsls	r2, r0, #1
 8000bf0:	0245      	lsls	r5, r0, #9
 8000bf2:	024e      	lsls	r6, r1, #9
 8000bf4:	004c      	lsls	r4, r1, #1
 8000bf6:	0fc3      	lsrs	r3, r0, #31
 8000bf8:	0a6d      	lsrs	r5, r5, #9
 8000bfa:	0e12      	lsrs	r2, r2, #24
 8000bfc:	0a76      	lsrs	r6, r6, #9
 8000bfe:	0e24      	lsrs	r4, r4, #24
 8000c00:	0fc8      	lsrs	r0, r1, #31
 8000c02:	2aff      	cmp	r2, #255	; 0xff
 8000c04:	d00b      	beq.n	8000c1e <__lesf2+0x32>
 8000c06:	2cff      	cmp	r4, #255	; 0xff
 8000c08:	d00d      	beq.n	8000c26 <__lesf2+0x3a>
 8000c0a:	2a00      	cmp	r2, #0
 8000c0c:	d11f      	bne.n	8000c4e <__lesf2+0x62>
 8000c0e:	2c00      	cmp	r4, #0
 8000c10:	d116      	bne.n	8000c40 <__lesf2+0x54>
 8000c12:	2e00      	cmp	r6, #0
 8000c14:	d114      	bne.n	8000c40 <__lesf2+0x54>
 8000c16:	2000      	movs	r0, #0
 8000c18:	2d00      	cmp	r5, #0
 8000c1a:	d010      	beq.n	8000c3e <__lesf2+0x52>
 8000c1c:	e009      	b.n	8000c32 <__lesf2+0x46>
 8000c1e:	2d00      	cmp	r5, #0
 8000c20:	d10c      	bne.n	8000c3c <__lesf2+0x50>
 8000c22:	2cff      	cmp	r4, #255	; 0xff
 8000c24:	d113      	bne.n	8000c4e <__lesf2+0x62>
 8000c26:	2e00      	cmp	r6, #0
 8000c28:	d108      	bne.n	8000c3c <__lesf2+0x50>
 8000c2a:	2a00      	cmp	r2, #0
 8000c2c:	d008      	beq.n	8000c40 <__lesf2+0x54>
 8000c2e:	4283      	cmp	r3, r0
 8000c30:	d012      	beq.n	8000c58 <__lesf2+0x6c>
 8000c32:	2102      	movs	r1, #2
 8000c34:	1e58      	subs	r0, r3, #1
 8000c36:	4008      	ands	r0, r1
 8000c38:	3801      	subs	r0, #1
 8000c3a:	e000      	b.n	8000c3e <__lesf2+0x52>
 8000c3c:	2002      	movs	r0, #2
 8000c3e:	bd70      	pop	{r4, r5, r6, pc}
 8000c40:	2d00      	cmp	r5, #0
 8000c42:	d1f4      	bne.n	8000c2e <__lesf2+0x42>
 8000c44:	2800      	cmp	r0, #0
 8000c46:	d1fa      	bne.n	8000c3e <__lesf2+0x52>
 8000c48:	2001      	movs	r0, #1
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	e7f7      	b.n	8000c3e <__lesf2+0x52>
 8000c4e:	2c00      	cmp	r4, #0
 8000c50:	d1ed      	bne.n	8000c2e <__lesf2+0x42>
 8000c52:	2e00      	cmp	r6, #0
 8000c54:	d1eb      	bne.n	8000c2e <__lesf2+0x42>
 8000c56:	e7ec      	b.n	8000c32 <__lesf2+0x46>
 8000c58:	42a2      	cmp	r2, r4
 8000c5a:	dc05      	bgt.n	8000c68 <__lesf2+0x7c>
 8000c5c:	dbf2      	blt.n	8000c44 <__lesf2+0x58>
 8000c5e:	42b5      	cmp	r5, r6
 8000c60:	d802      	bhi.n	8000c68 <__lesf2+0x7c>
 8000c62:	d3ef      	bcc.n	8000c44 <__lesf2+0x58>
 8000c64:	2000      	movs	r0, #0
 8000c66:	e7ea      	b.n	8000c3e <__lesf2+0x52>
 8000c68:	4243      	negs	r3, r0
 8000c6a:	4158      	adcs	r0, r3
 8000c6c:	0040      	lsls	r0, r0, #1
 8000c6e:	3801      	subs	r0, #1
 8000c70:	e7e5      	b.n	8000c3e <__lesf2+0x52>
 8000c72:	46c0      	nop			; (mov r8, r8)

08000c74 <__aeabi_fmul>:
 8000c74:	0243      	lsls	r3, r0, #9
 8000c76:	0a5b      	lsrs	r3, r3, #9
 8000c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c7a:	464f      	mov	r7, r9
 8000c7c:	4646      	mov	r6, r8
 8000c7e:	4699      	mov	r9, r3
 8000c80:	46d6      	mov	lr, sl
 8000c82:	0fc3      	lsrs	r3, r0, #31
 8000c84:	0045      	lsls	r5, r0, #1
 8000c86:	4698      	mov	r8, r3
 8000c88:	b5c0      	push	{r6, r7, lr}
 8000c8a:	464b      	mov	r3, r9
 8000c8c:	1c0f      	adds	r7, r1, #0
 8000c8e:	0e2d      	lsrs	r5, r5, #24
 8000c90:	d100      	bne.n	8000c94 <__aeabi_fmul+0x20>
 8000c92:	e0cb      	b.n	8000e2c <__aeabi_fmul+0x1b8>
 8000c94:	2dff      	cmp	r5, #255	; 0xff
 8000c96:	d100      	bne.n	8000c9a <__aeabi_fmul+0x26>
 8000c98:	e0cf      	b.n	8000e3a <__aeabi_fmul+0x1c6>
 8000c9a:	2280      	movs	r2, #128	; 0x80
 8000c9c:	00db      	lsls	r3, r3, #3
 8000c9e:	04d2      	lsls	r2, r2, #19
 8000ca0:	431a      	orrs	r2, r3
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	4691      	mov	r9, r2
 8000ca6:	2600      	movs	r6, #0
 8000ca8:	469a      	mov	sl, r3
 8000caa:	3d7f      	subs	r5, #127	; 0x7f
 8000cac:	027c      	lsls	r4, r7, #9
 8000cae:	007b      	lsls	r3, r7, #1
 8000cb0:	0a64      	lsrs	r4, r4, #9
 8000cb2:	0e1b      	lsrs	r3, r3, #24
 8000cb4:	0fff      	lsrs	r7, r7, #31
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d100      	bne.n	8000cbc <__aeabi_fmul+0x48>
 8000cba:	e0a9      	b.n	8000e10 <__aeabi_fmul+0x19c>
 8000cbc:	2bff      	cmp	r3, #255	; 0xff
 8000cbe:	d011      	beq.n	8000ce4 <__aeabi_fmul+0x70>
 8000cc0:	2280      	movs	r2, #128	; 0x80
 8000cc2:	00e4      	lsls	r4, r4, #3
 8000cc4:	04d2      	lsls	r2, r2, #19
 8000cc6:	4314      	orrs	r4, r2
 8000cc8:	4642      	mov	r2, r8
 8000cca:	3b7f      	subs	r3, #127	; 0x7f
 8000ccc:	195b      	adds	r3, r3, r5
 8000cce:	407a      	eors	r2, r7
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	b2d2      	uxtb	r2, r2
 8000cd4:	1c5d      	adds	r5, r3, #1
 8000cd6:	2e0a      	cmp	r6, #10
 8000cd8:	dd13      	ble.n	8000d02 <__aeabi_fmul+0x8e>
 8000cda:	003a      	movs	r2, r7
 8000cdc:	2e0b      	cmp	r6, #11
 8000cde:	d047      	beq.n	8000d70 <__aeabi_fmul+0xfc>
 8000ce0:	4647      	mov	r7, r8
 8000ce2:	e03f      	b.n	8000d64 <__aeabi_fmul+0xf0>
 8000ce4:	002b      	movs	r3, r5
 8000ce6:	33ff      	adds	r3, #255	; 0xff
 8000ce8:	2c00      	cmp	r4, #0
 8000cea:	d11e      	bne.n	8000d2a <__aeabi_fmul+0xb6>
 8000cec:	2202      	movs	r2, #2
 8000cee:	4316      	orrs	r6, r2
 8000cf0:	4642      	mov	r2, r8
 8000cf2:	3501      	adds	r5, #1
 8000cf4:	407a      	eors	r2, r7
 8000cf6:	b2d2      	uxtb	r2, r2
 8000cf8:	35ff      	adds	r5, #255	; 0xff
 8000cfa:	2e0a      	cmp	r6, #10
 8000cfc:	dd00      	ble.n	8000d00 <__aeabi_fmul+0x8c>
 8000cfe:	e0e4      	b.n	8000eca <__aeabi_fmul+0x256>
 8000d00:	2002      	movs	r0, #2
 8000d02:	2e02      	cmp	r6, #2
 8000d04:	dc1c      	bgt.n	8000d40 <__aeabi_fmul+0xcc>
 8000d06:	3e01      	subs	r6, #1
 8000d08:	2e01      	cmp	r6, #1
 8000d0a:	d842      	bhi.n	8000d92 <__aeabi_fmul+0x11e>
 8000d0c:	2802      	cmp	r0, #2
 8000d0e:	d03d      	beq.n	8000d8c <__aeabi_fmul+0x118>
 8000d10:	2801      	cmp	r0, #1
 8000d12:	d166      	bne.n	8000de2 <__aeabi_fmul+0x16e>
 8000d14:	2000      	movs	r0, #0
 8000d16:	2100      	movs	r1, #0
 8000d18:	05c0      	lsls	r0, r0, #23
 8000d1a:	4308      	orrs	r0, r1
 8000d1c:	07d2      	lsls	r2, r2, #31
 8000d1e:	4310      	orrs	r0, r2
 8000d20:	bce0      	pop	{r5, r6, r7}
 8000d22:	46ba      	mov	sl, r7
 8000d24:	46b1      	mov	r9, r6
 8000d26:	46a8      	mov	r8, r5
 8000d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d2a:	2203      	movs	r2, #3
 8000d2c:	4316      	orrs	r6, r2
 8000d2e:	4642      	mov	r2, r8
 8000d30:	3501      	adds	r5, #1
 8000d32:	407a      	eors	r2, r7
 8000d34:	b2d2      	uxtb	r2, r2
 8000d36:	35ff      	adds	r5, #255	; 0xff
 8000d38:	2e0a      	cmp	r6, #10
 8000d3a:	dd00      	ble.n	8000d3e <__aeabi_fmul+0xca>
 8000d3c:	e0e4      	b.n	8000f08 <__aeabi_fmul+0x294>
 8000d3e:	2003      	movs	r0, #3
 8000d40:	2101      	movs	r1, #1
 8000d42:	40b1      	lsls	r1, r6
 8000d44:	26a6      	movs	r6, #166	; 0xa6
 8000d46:	00f6      	lsls	r6, r6, #3
 8000d48:	4231      	tst	r1, r6
 8000d4a:	d10a      	bne.n	8000d62 <__aeabi_fmul+0xee>
 8000d4c:	2690      	movs	r6, #144	; 0x90
 8000d4e:	00b6      	lsls	r6, r6, #2
 8000d50:	4231      	tst	r1, r6
 8000d52:	d116      	bne.n	8000d82 <__aeabi_fmul+0x10e>
 8000d54:	3eb9      	subs	r6, #185	; 0xb9
 8000d56:	3eff      	subs	r6, #255	; 0xff
 8000d58:	420e      	tst	r6, r1
 8000d5a:	d01a      	beq.n	8000d92 <__aeabi_fmul+0x11e>
 8000d5c:	46a1      	mov	r9, r4
 8000d5e:	4682      	mov	sl, r0
 8000d60:	e000      	b.n	8000d64 <__aeabi_fmul+0xf0>
 8000d62:	0017      	movs	r7, r2
 8000d64:	4653      	mov	r3, sl
 8000d66:	003a      	movs	r2, r7
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d00f      	beq.n	8000d8c <__aeabi_fmul+0x118>
 8000d6c:	464c      	mov	r4, r9
 8000d6e:	4650      	mov	r0, sl
 8000d70:	2803      	cmp	r0, #3
 8000d72:	d1cd      	bne.n	8000d10 <__aeabi_fmul+0x9c>
 8000d74:	2180      	movs	r1, #128	; 0x80
 8000d76:	03c9      	lsls	r1, r1, #15
 8000d78:	4321      	orrs	r1, r4
 8000d7a:	0249      	lsls	r1, r1, #9
 8000d7c:	20ff      	movs	r0, #255	; 0xff
 8000d7e:	0a49      	lsrs	r1, r1, #9
 8000d80:	e7ca      	b.n	8000d18 <__aeabi_fmul+0xa4>
 8000d82:	2180      	movs	r1, #128	; 0x80
 8000d84:	2200      	movs	r2, #0
 8000d86:	20ff      	movs	r0, #255	; 0xff
 8000d88:	03c9      	lsls	r1, r1, #15
 8000d8a:	e7c5      	b.n	8000d18 <__aeabi_fmul+0xa4>
 8000d8c:	20ff      	movs	r0, #255	; 0xff
 8000d8e:	2100      	movs	r1, #0
 8000d90:	e7c2      	b.n	8000d18 <__aeabi_fmul+0xa4>
 8000d92:	0c20      	lsrs	r0, r4, #16
 8000d94:	4649      	mov	r1, r9
 8000d96:	0424      	lsls	r4, r4, #16
 8000d98:	0c24      	lsrs	r4, r4, #16
 8000d9a:	0027      	movs	r7, r4
 8000d9c:	0c0e      	lsrs	r6, r1, #16
 8000d9e:	0409      	lsls	r1, r1, #16
 8000da0:	0c09      	lsrs	r1, r1, #16
 8000da2:	4374      	muls	r4, r6
 8000da4:	434f      	muls	r7, r1
 8000da6:	4346      	muls	r6, r0
 8000da8:	4348      	muls	r0, r1
 8000daa:	0c39      	lsrs	r1, r7, #16
 8000dac:	1900      	adds	r0, r0, r4
 8000dae:	1809      	adds	r1, r1, r0
 8000db0:	428c      	cmp	r4, r1
 8000db2:	d903      	bls.n	8000dbc <__aeabi_fmul+0x148>
 8000db4:	2080      	movs	r0, #128	; 0x80
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	4684      	mov	ip, r0
 8000dba:	4466      	add	r6, ip
 8000dbc:	043f      	lsls	r7, r7, #16
 8000dbe:	0408      	lsls	r0, r1, #16
 8000dc0:	0c3f      	lsrs	r7, r7, #16
 8000dc2:	19c0      	adds	r0, r0, r7
 8000dc4:	0184      	lsls	r4, r0, #6
 8000dc6:	1e67      	subs	r7, r4, #1
 8000dc8:	41bc      	sbcs	r4, r7
 8000dca:	0c09      	lsrs	r1, r1, #16
 8000dcc:	0e80      	lsrs	r0, r0, #26
 8000dce:	1989      	adds	r1, r1, r6
 8000dd0:	4304      	orrs	r4, r0
 8000dd2:	0189      	lsls	r1, r1, #6
 8000dd4:	430c      	orrs	r4, r1
 8000dd6:	0109      	lsls	r1, r1, #4
 8000dd8:	d571      	bpl.n	8000ebe <__aeabi_fmul+0x24a>
 8000dda:	2301      	movs	r3, #1
 8000ddc:	0861      	lsrs	r1, r4, #1
 8000dde:	401c      	ands	r4, r3
 8000de0:	430c      	orrs	r4, r1
 8000de2:	002b      	movs	r3, r5
 8000de4:	337f      	adds	r3, #127	; 0x7f
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	dd51      	ble.n	8000e8e <__aeabi_fmul+0x21a>
 8000dea:	0761      	lsls	r1, r4, #29
 8000dec:	d004      	beq.n	8000df8 <__aeabi_fmul+0x184>
 8000dee:	210f      	movs	r1, #15
 8000df0:	4021      	ands	r1, r4
 8000df2:	2904      	cmp	r1, #4
 8000df4:	d000      	beq.n	8000df8 <__aeabi_fmul+0x184>
 8000df6:	3404      	adds	r4, #4
 8000df8:	0121      	lsls	r1, r4, #4
 8000dfa:	d503      	bpl.n	8000e04 <__aeabi_fmul+0x190>
 8000dfc:	4b43      	ldr	r3, [pc, #268]	; (8000f0c <__aeabi_fmul+0x298>)
 8000dfe:	401c      	ands	r4, r3
 8000e00:	002b      	movs	r3, r5
 8000e02:	3380      	adds	r3, #128	; 0x80
 8000e04:	2bfe      	cmp	r3, #254	; 0xfe
 8000e06:	dcc1      	bgt.n	8000d8c <__aeabi_fmul+0x118>
 8000e08:	01a1      	lsls	r1, r4, #6
 8000e0a:	0a49      	lsrs	r1, r1, #9
 8000e0c:	b2d8      	uxtb	r0, r3
 8000e0e:	e783      	b.n	8000d18 <__aeabi_fmul+0xa4>
 8000e10:	2c00      	cmp	r4, #0
 8000e12:	d12c      	bne.n	8000e6e <__aeabi_fmul+0x1fa>
 8000e14:	2301      	movs	r3, #1
 8000e16:	4642      	mov	r2, r8
 8000e18:	431e      	orrs	r6, r3
 8000e1a:	002b      	movs	r3, r5
 8000e1c:	407a      	eors	r2, r7
 8000e1e:	2001      	movs	r0, #1
 8000e20:	b2d2      	uxtb	r2, r2
 8000e22:	1c5d      	adds	r5, r3, #1
 8000e24:	2e0a      	cmp	r6, #10
 8000e26:	dd00      	ble.n	8000e2a <__aeabi_fmul+0x1b6>
 8000e28:	e757      	b.n	8000cda <__aeabi_fmul+0x66>
 8000e2a:	e76a      	b.n	8000d02 <__aeabi_fmul+0x8e>
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d110      	bne.n	8000e52 <__aeabi_fmul+0x1de>
 8000e30:	2301      	movs	r3, #1
 8000e32:	2604      	movs	r6, #4
 8000e34:	2500      	movs	r5, #0
 8000e36:	469a      	mov	sl, r3
 8000e38:	e738      	b.n	8000cac <__aeabi_fmul+0x38>
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d104      	bne.n	8000e48 <__aeabi_fmul+0x1d4>
 8000e3e:	2302      	movs	r3, #2
 8000e40:	2608      	movs	r6, #8
 8000e42:	25ff      	movs	r5, #255	; 0xff
 8000e44:	469a      	mov	sl, r3
 8000e46:	e731      	b.n	8000cac <__aeabi_fmul+0x38>
 8000e48:	2303      	movs	r3, #3
 8000e4a:	260c      	movs	r6, #12
 8000e4c:	25ff      	movs	r5, #255	; 0xff
 8000e4e:	469a      	mov	sl, r3
 8000e50:	e72c      	b.n	8000cac <__aeabi_fmul+0x38>
 8000e52:	4648      	mov	r0, r9
 8000e54:	f002 f9cc 	bl	80031f0 <__clzsi2>
 8000e58:	464a      	mov	r2, r9
 8000e5a:	1f43      	subs	r3, r0, #5
 8000e5c:	2576      	movs	r5, #118	; 0x76
 8000e5e:	409a      	lsls	r2, r3
 8000e60:	2300      	movs	r3, #0
 8000e62:	426d      	negs	r5, r5
 8000e64:	4691      	mov	r9, r2
 8000e66:	2600      	movs	r6, #0
 8000e68:	469a      	mov	sl, r3
 8000e6a:	1a2d      	subs	r5, r5, r0
 8000e6c:	e71e      	b.n	8000cac <__aeabi_fmul+0x38>
 8000e6e:	0020      	movs	r0, r4
 8000e70:	f002 f9be 	bl	80031f0 <__clzsi2>
 8000e74:	4642      	mov	r2, r8
 8000e76:	1f43      	subs	r3, r0, #5
 8000e78:	409c      	lsls	r4, r3
 8000e7a:	1a2b      	subs	r3, r5, r0
 8000e7c:	3b76      	subs	r3, #118	; 0x76
 8000e7e:	407a      	eors	r2, r7
 8000e80:	2000      	movs	r0, #0
 8000e82:	b2d2      	uxtb	r2, r2
 8000e84:	1c5d      	adds	r5, r3, #1
 8000e86:	2e0a      	cmp	r6, #10
 8000e88:	dd00      	ble.n	8000e8c <__aeabi_fmul+0x218>
 8000e8a:	e726      	b.n	8000cda <__aeabi_fmul+0x66>
 8000e8c:	e739      	b.n	8000d02 <__aeabi_fmul+0x8e>
 8000e8e:	2101      	movs	r1, #1
 8000e90:	1acb      	subs	r3, r1, r3
 8000e92:	2b1b      	cmp	r3, #27
 8000e94:	dd00      	ble.n	8000e98 <__aeabi_fmul+0x224>
 8000e96:	e73d      	b.n	8000d14 <__aeabi_fmul+0xa0>
 8000e98:	359e      	adds	r5, #158	; 0x9e
 8000e9a:	0021      	movs	r1, r4
 8000e9c:	40ac      	lsls	r4, r5
 8000e9e:	40d9      	lsrs	r1, r3
 8000ea0:	1e63      	subs	r3, r4, #1
 8000ea2:	419c      	sbcs	r4, r3
 8000ea4:	4321      	orrs	r1, r4
 8000ea6:	074b      	lsls	r3, r1, #29
 8000ea8:	d004      	beq.n	8000eb4 <__aeabi_fmul+0x240>
 8000eaa:	230f      	movs	r3, #15
 8000eac:	400b      	ands	r3, r1
 8000eae:	2b04      	cmp	r3, #4
 8000eb0:	d000      	beq.n	8000eb4 <__aeabi_fmul+0x240>
 8000eb2:	3104      	adds	r1, #4
 8000eb4:	014b      	lsls	r3, r1, #5
 8000eb6:	d504      	bpl.n	8000ec2 <__aeabi_fmul+0x24e>
 8000eb8:	2001      	movs	r0, #1
 8000eba:	2100      	movs	r1, #0
 8000ebc:	e72c      	b.n	8000d18 <__aeabi_fmul+0xa4>
 8000ebe:	001d      	movs	r5, r3
 8000ec0:	e78f      	b.n	8000de2 <__aeabi_fmul+0x16e>
 8000ec2:	0189      	lsls	r1, r1, #6
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	0a49      	lsrs	r1, r1, #9
 8000ec8:	e726      	b.n	8000d18 <__aeabi_fmul+0xa4>
 8000eca:	2302      	movs	r3, #2
 8000ecc:	2e0f      	cmp	r6, #15
 8000ece:	d10c      	bne.n	8000eea <__aeabi_fmul+0x276>
 8000ed0:	2180      	movs	r1, #128	; 0x80
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	03c9      	lsls	r1, r1, #15
 8000ed6:	420b      	tst	r3, r1
 8000ed8:	d00d      	beq.n	8000ef6 <__aeabi_fmul+0x282>
 8000eda:	420c      	tst	r4, r1
 8000edc:	d10b      	bne.n	8000ef6 <__aeabi_fmul+0x282>
 8000ede:	4321      	orrs	r1, r4
 8000ee0:	0249      	lsls	r1, r1, #9
 8000ee2:	003a      	movs	r2, r7
 8000ee4:	20ff      	movs	r0, #255	; 0xff
 8000ee6:	0a49      	lsrs	r1, r1, #9
 8000ee8:	e716      	b.n	8000d18 <__aeabi_fmul+0xa4>
 8000eea:	2e0b      	cmp	r6, #11
 8000eec:	d000      	beq.n	8000ef0 <__aeabi_fmul+0x27c>
 8000eee:	e6f7      	b.n	8000ce0 <__aeabi_fmul+0x6c>
 8000ef0:	46a1      	mov	r9, r4
 8000ef2:	469a      	mov	sl, r3
 8000ef4:	e736      	b.n	8000d64 <__aeabi_fmul+0xf0>
 8000ef6:	2180      	movs	r1, #128	; 0x80
 8000ef8:	464b      	mov	r3, r9
 8000efa:	03c9      	lsls	r1, r1, #15
 8000efc:	4319      	orrs	r1, r3
 8000efe:	0249      	lsls	r1, r1, #9
 8000f00:	4642      	mov	r2, r8
 8000f02:	20ff      	movs	r0, #255	; 0xff
 8000f04:	0a49      	lsrs	r1, r1, #9
 8000f06:	e707      	b.n	8000d18 <__aeabi_fmul+0xa4>
 8000f08:	2303      	movs	r3, #3
 8000f0a:	e7df      	b.n	8000ecc <__aeabi_fmul+0x258>
 8000f0c:	f7ffffff 	.word	0xf7ffffff

08000f10 <__aeabi_fsub>:
 8000f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f12:	46c6      	mov	lr, r8
 8000f14:	0243      	lsls	r3, r0, #9
 8000f16:	0a5b      	lsrs	r3, r3, #9
 8000f18:	0045      	lsls	r5, r0, #1
 8000f1a:	00da      	lsls	r2, r3, #3
 8000f1c:	0fc4      	lsrs	r4, r0, #31
 8000f1e:	0248      	lsls	r0, r1, #9
 8000f20:	004f      	lsls	r7, r1, #1
 8000f22:	4694      	mov	ip, r2
 8000f24:	0a42      	lsrs	r2, r0, #9
 8000f26:	001e      	movs	r6, r3
 8000f28:	4690      	mov	r8, r2
 8000f2a:	b500      	push	{lr}
 8000f2c:	0e2d      	lsrs	r5, r5, #24
 8000f2e:	0e3f      	lsrs	r7, r7, #24
 8000f30:	0fc9      	lsrs	r1, r1, #31
 8000f32:	0980      	lsrs	r0, r0, #6
 8000f34:	2fff      	cmp	r7, #255	; 0xff
 8000f36:	d059      	beq.n	8000fec <__aeabi_fsub+0xdc>
 8000f38:	2201      	movs	r2, #1
 8000f3a:	4051      	eors	r1, r2
 8000f3c:	428c      	cmp	r4, r1
 8000f3e:	d039      	beq.n	8000fb4 <__aeabi_fsub+0xa4>
 8000f40:	1bea      	subs	r2, r5, r7
 8000f42:	2a00      	cmp	r2, #0
 8000f44:	dd58      	ble.n	8000ff8 <__aeabi_fsub+0xe8>
 8000f46:	2f00      	cmp	r7, #0
 8000f48:	d068      	beq.n	800101c <__aeabi_fsub+0x10c>
 8000f4a:	2dff      	cmp	r5, #255	; 0xff
 8000f4c:	d100      	bne.n	8000f50 <__aeabi_fsub+0x40>
 8000f4e:	e0d1      	b.n	80010f4 <__aeabi_fsub+0x1e4>
 8000f50:	2380      	movs	r3, #128	; 0x80
 8000f52:	04db      	lsls	r3, r3, #19
 8000f54:	4318      	orrs	r0, r3
 8000f56:	2a1b      	cmp	r2, #27
 8000f58:	dc00      	bgt.n	8000f5c <__aeabi_fsub+0x4c>
 8000f5a:	e0e3      	b.n	8001124 <__aeabi_fsub+0x214>
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	4662      	mov	r2, ip
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	015a      	lsls	r2, r3, #5
 8000f64:	d400      	bmi.n	8000f68 <__aeabi_fsub+0x58>
 8000f66:	e0ac      	b.n	80010c2 <__aeabi_fsub+0x1b2>
 8000f68:	019b      	lsls	r3, r3, #6
 8000f6a:	099e      	lsrs	r6, r3, #6
 8000f6c:	0030      	movs	r0, r6
 8000f6e:	f002 f93f 	bl	80031f0 <__clzsi2>
 8000f72:	0033      	movs	r3, r6
 8000f74:	3805      	subs	r0, #5
 8000f76:	4083      	lsls	r3, r0
 8000f78:	4285      	cmp	r5, r0
 8000f7a:	dc00      	bgt.n	8000f7e <__aeabi_fsub+0x6e>
 8000f7c:	e0c6      	b.n	800110c <__aeabi_fsub+0x1fc>
 8000f7e:	4ab2      	ldr	r2, [pc, #712]	; (8001248 <__aeabi_fsub+0x338>)
 8000f80:	1a2d      	subs	r5, r5, r0
 8000f82:	4013      	ands	r3, r2
 8000f84:	075a      	lsls	r2, r3, #29
 8000f86:	d004      	beq.n	8000f92 <__aeabi_fsub+0x82>
 8000f88:	220f      	movs	r2, #15
 8000f8a:	401a      	ands	r2, r3
 8000f8c:	2a04      	cmp	r2, #4
 8000f8e:	d000      	beq.n	8000f92 <__aeabi_fsub+0x82>
 8000f90:	3304      	adds	r3, #4
 8000f92:	015a      	lsls	r2, r3, #5
 8000f94:	d400      	bmi.n	8000f98 <__aeabi_fsub+0x88>
 8000f96:	e097      	b.n	80010c8 <__aeabi_fsub+0x1b8>
 8000f98:	1c6a      	adds	r2, r5, #1
 8000f9a:	2dfe      	cmp	r5, #254	; 0xfe
 8000f9c:	d100      	bne.n	8000fa0 <__aeabi_fsub+0x90>
 8000f9e:	e084      	b.n	80010aa <__aeabi_fsub+0x19a>
 8000fa0:	019b      	lsls	r3, r3, #6
 8000fa2:	0a5e      	lsrs	r6, r3, #9
 8000fa4:	b2d2      	uxtb	r2, r2
 8000fa6:	05d0      	lsls	r0, r2, #23
 8000fa8:	4330      	orrs	r0, r6
 8000faa:	07e4      	lsls	r4, r4, #31
 8000fac:	4320      	orrs	r0, r4
 8000fae:	bc80      	pop	{r7}
 8000fb0:	46b8      	mov	r8, r7
 8000fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fb4:	1bea      	subs	r2, r5, r7
 8000fb6:	2a00      	cmp	r2, #0
 8000fb8:	dd41      	ble.n	800103e <__aeabi_fsub+0x12e>
 8000fba:	2f00      	cmp	r7, #0
 8000fbc:	d06b      	beq.n	8001096 <__aeabi_fsub+0x186>
 8000fbe:	2dff      	cmp	r5, #255	; 0xff
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fsub+0xb4>
 8000fc2:	e097      	b.n	80010f4 <__aeabi_fsub+0x1e4>
 8000fc4:	2380      	movs	r3, #128	; 0x80
 8000fc6:	04db      	lsls	r3, r3, #19
 8000fc8:	4318      	orrs	r0, r3
 8000fca:	2a1b      	cmp	r2, #27
 8000fcc:	dc00      	bgt.n	8000fd0 <__aeabi_fsub+0xc0>
 8000fce:	e0cc      	b.n	800116a <__aeabi_fsub+0x25a>
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	4463      	add	r3, ip
 8000fd4:	015a      	lsls	r2, r3, #5
 8000fd6:	d574      	bpl.n	80010c2 <__aeabi_fsub+0x1b2>
 8000fd8:	3501      	adds	r5, #1
 8000fda:	2dff      	cmp	r5, #255	; 0xff
 8000fdc:	d065      	beq.n	80010aa <__aeabi_fsub+0x19a>
 8000fde:	2201      	movs	r2, #1
 8000fe0:	499a      	ldr	r1, [pc, #616]	; (800124c <__aeabi_fsub+0x33c>)
 8000fe2:	401a      	ands	r2, r3
 8000fe4:	085b      	lsrs	r3, r3, #1
 8000fe6:	400b      	ands	r3, r1
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	e7cb      	b.n	8000f84 <__aeabi_fsub+0x74>
 8000fec:	2800      	cmp	r0, #0
 8000fee:	d01f      	beq.n	8001030 <__aeabi_fsub+0x120>
 8000ff0:	428c      	cmp	r4, r1
 8000ff2:	d022      	beq.n	800103a <__aeabi_fsub+0x12a>
 8000ff4:	002a      	movs	r2, r5
 8000ff6:	3aff      	subs	r2, #255	; 0xff
 8000ff8:	2a00      	cmp	r2, #0
 8000ffa:	d035      	beq.n	8001068 <__aeabi_fsub+0x158>
 8000ffc:	1b7a      	subs	r2, r7, r5
 8000ffe:	2d00      	cmp	r5, #0
 8001000:	d000      	beq.n	8001004 <__aeabi_fsub+0xf4>
 8001002:	e099      	b.n	8001138 <__aeabi_fsub+0x228>
 8001004:	4663      	mov	r3, ip
 8001006:	2b00      	cmp	r3, #0
 8001008:	d100      	bne.n	800100c <__aeabi_fsub+0xfc>
 800100a:	e0dd      	b.n	80011c8 <__aeabi_fsub+0x2b8>
 800100c:	1e53      	subs	r3, r2, #1
 800100e:	2a01      	cmp	r2, #1
 8001010:	d100      	bne.n	8001014 <__aeabi_fsub+0x104>
 8001012:	e105      	b.n	8001220 <__aeabi_fsub+0x310>
 8001014:	2aff      	cmp	r2, #255	; 0xff
 8001016:	d06b      	beq.n	80010f0 <__aeabi_fsub+0x1e0>
 8001018:	001a      	movs	r2, r3
 800101a:	e094      	b.n	8001146 <__aeabi_fsub+0x236>
 800101c:	2800      	cmp	r0, #0
 800101e:	d073      	beq.n	8001108 <__aeabi_fsub+0x1f8>
 8001020:	1e51      	subs	r1, r2, #1
 8001022:	2a01      	cmp	r2, #1
 8001024:	d100      	bne.n	8001028 <__aeabi_fsub+0x118>
 8001026:	e0df      	b.n	80011e8 <__aeabi_fsub+0x2d8>
 8001028:	2aff      	cmp	r2, #255	; 0xff
 800102a:	d063      	beq.n	80010f4 <__aeabi_fsub+0x1e4>
 800102c:	000a      	movs	r2, r1
 800102e:	e792      	b.n	8000f56 <__aeabi_fsub+0x46>
 8001030:	2201      	movs	r2, #1
 8001032:	4051      	eors	r1, r2
 8001034:	42a1      	cmp	r1, r4
 8001036:	d000      	beq.n	800103a <__aeabi_fsub+0x12a>
 8001038:	e782      	b.n	8000f40 <__aeabi_fsub+0x30>
 800103a:	002a      	movs	r2, r5
 800103c:	3aff      	subs	r2, #255	; 0xff
 800103e:	2a00      	cmp	r2, #0
 8001040:	d036      	beq.n	80010b0 <__aeabi_fsub+0x1a0>
 8001042:	1b7a      	subs	r2, r7, r5
 8001044:	2d00      	cmp	r5, #0
 8001046:	d100      	bne.n	800104a <__aeabi_fsub+0x13a>
 8001048:	e0aa      	b.n	80011a0 <__aeabi_fsub+0x290>
 800104a:	2fff      	cmp	r7, #255	; 0xff
 800104c:	d100      	bne.n	8001050 <__aeabi_fsub+0x140>
 800104e:	e0da      	b.n	8001206 <__aeabi_fsub+0x2f6>
 8001050:	2380      	movs	r3, #128	; 0x80
 8001052:	4661      	mov	r1, ip
 8001054:	04db      	lsls	r3, r3, #19
 8001056:	4319      	orrs	r1, r3
 8001058:	468c      	mov	ip, r1
 800105a:	2a1b      	cmp	r2, #27
 800105c:	dc00      	bgt.n	8001060 <__aeabi_fsub+0x150>
 800105e:	e0d4      	b.n	800120a <__aeabi_fsub+0x2fa>
 8001060:	2301      	movs	r3, #1
 8001062:	003d      	movs	r5, r7
 8001064:	181b      	adds	r3, r3, r0
 8001066:	e7b5      	b.n	8000fd4 <__aeabi_fsub+0xc4>
 8001068:	27fe      	movs	r7, #254	; 0xfe
 800106a:	1c6a      	adds	r2, r5, #1
 800106c:	4217      	tst	r7, r2
 800106e:	d171      	bne.n	8001154 <__aeabi_fsub+0x244>
 8001070:	2d00      	cmp	r5, #0
 8001072:	d000      	beq.n	8001076 <__aeabi_fsub+0x166>
 8001074:	e09e      	b.n	80011b4 <__aeabi_fsub+0x2a4>
 8001076:	4663      	mov	r3, ip
 8001078:	2b00      	cmp	r3, #0
 800107a:	d100      	bne.n	800107e <__aeabi_fsub+0x16e>
 800107c:	e0d5      	b.n	800122a <__aeabi_fsub+0x31a>
 800107e:	2200      	movs	r2, #0
 8001080:	2800      	cmp	r0, #0
 8001082:	d100      	bne.n	8001086 <__aeabi_fsub+0x176>
 8001084:	e78f      	b.n	8000fa6 <__aeabi_fsub+0x96>
 8001086:	1a1b      	subs	r3, r3, r0
 8001088:	015e      	lsls	r6, r3, #5
 800108a:	d400      	bmi.n	800108e <__aeabi_fsub+0x17e>
 800108c:	e0d6      	b.n	800123c <__aeabi_fsub+0x32c>
 800108e:	4663      	mov	r3, ip
 8001090:	000c      	movs	r4, r1
 8001092:	1ac3      	subs	r3, r0, r3
 8001094:	e776      	b.n	8000f84 <__aeabi_fsub+0x74>
 8001096:	2800      	cmp	r0, #0
 8001098:	d036      	beq.n	8001108 <__aeabi_fsub+0x1f8>
 800109a:	1e51      	subs	r1, r2, #1
 800109c:	2a01      	cmp	r2, #1
 800109e:	d100      	bne.n	80010a2 <__aeabi_fsub+0x192>
 80010a0:	e09a      	b.n	80011d8 <__aeabi_fsub+0x2c8>
 80010a2:	2aff      	cmp	r2, #255	; 0xff
 80010a4:	d026      	beq.n	80010f4 <__aeabi_fsub+0x1e4>
 80010a6:	000a      	movs	r2, r1
 80010a8:	e78f      	b.n	8000fca <__aeabi_fsub+0xba>
 80010aa:	22ff      	movs	r2, #255	; 0xff
 80010ac:	2600      	movs	r6, #0
 80010ae:	e77a      	b.n	8000fa6 <__aeabi_fsub+0x96>
 80010b0:	27fe      	movs	r7, #254	; 0xfe
 80010b2:	1c6a      	adds	r2, r5, #1
 80010b4:	4217      	tst	r7, r2
 80010b6:	d062      	beq.n	800117e <__aeabi_fsub+0x26e>
 80010b8:	2aff      	cmp	r2, #255	; 0xff
 80010ba:	d0f6      	beq.n	80010aa <__aeabi_fsub+0x19a>
 80010bc:	0015      	movs	r5, r2
 80010be:	4460      	add	r0, ip
 80010c0:	0843      	lsrs	r3, r0, #1
 80010c2:	075a      	lsls	r2, r3, #29
 80010c4:	d000      	beq.n	80010c8 <__aeabi_fsub+0x1b8>
 80010c6:	e75f      	b.n	8000f88 <__aeabi_fsub+0x78>
 80010c8:	08db      	lsrs	r3, r3, #3
 80010ca:	2dff      	cmp	r5, #255	; 0xff
 80010cc:	d012      	beq.n	80010f4 <__aeabi_fsub+0x1e4>
 80010ce:	025b      	lsls	r3, r3, #9
 80010d0:	0a5e      	lsrs	r6, r3, #9
 80010d2:	b2ea      	uxtb	r2, r5
 80010d4:	e767      	b.n	8000fa6 <__aeabi_fsub+0x96>
 80010d6:	4662      	mov	r2, ip
 80010d8:	2a00      	cmp	r2, #0
 80010da:	d100      	bne.n	80010de <__aeabi_fsub+0x1ce>
 80010dc:	e093      	b.n	8001206 <__aeabi_fsub+0x2f6>
 80010de:	2800      	cmp	r0, #0
 80010e0:	d008      	beq.n	80010f4 <__aeabi_fsub+0x1e4>
 80010e2:	2280      	movs	r2, #128	; 0x80
 80010e4:	03d2      	lsls	r2, r2, #15
 80010e6:	4213      	tst	r3, r2
 80010e8:	d004      	beq.n	80010f4 <__aeabi_fsub+0x1e4>
 80010ea:	4640      	mov	r0, r8
 80010ec:	4210      	tst	r0, r2
 80010ee:	d101      	bne.n	80010f4 <__aeabi_fsub+0x1e4>
 80010f0:	000c      	movs	r4, r1
 80010f2:	4643      	mov	r3, r8
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d0d8      	beq.n	80010aa <__aeabi_fsub+0x19a>
 80010f8:	2680      	movs	r6, #128	; 0x80
 80010fa:	03f6      	lsls	r6, r6, #15
 80010fc:	431e      	orrs	r6, r3
 80010fe:	0276      	lsls	r6, r6, #9
 8001100:	22ff      	movs	r2, #255	; 0xff
 8001102:	0a76      	lsrs	r6, r6, #9
 8001104:	e74f      	b.n	8000fa6 <__aeabi_fsub+0x96>
 8001106:	4643      	mov	r3, r8
 8001108:	0015      	movs	r5, r2
 800110a:	e7de      	b.n	80010ca <__aeabi_fsub+0x1ba>
 800110c:	2220      	movs	r2, #32
 800110e:	1b40      	subs	r0, r0, r5
 8001110:	3001      	adds	r0, #1
 8001112:	1a12      	subs	r2, r2, r0
 8001114:	0019      	movs	r1, r3
 8001116:	4093      	lsls	r3, r2
 8001118:	40c1      	lsrs	r1, r0
 800111a:	1e5a      	subs	r2, r3, #1
 800111c:	4193      	sbcs	r3, r2
 800111e:	2500      	movs	r5, #0
 8001120:	430b      	orrs	r3, r1
 8001122:	e72f      	b.n	8000f84 <__aeabi_fsub+0x74>
 8001124:	2320      	movs	r3, #32
 8001126:	1a9b      	subs	r3, r3, r2
 8001128:	0001      	movs	r1, r0
 800112a:	4098      	lsls	r0, r3
 800112c:	0003      	movs	r3, r0
 800112e:	40d1      	lsrs	r1, r2
 8001130:	1e5a      	subs	r2, r3, #1
 8001132:	4193      	sbcs	r3, r2
 8001134:	430b      	orrs	r3, r1
 8001136:	e712      	b.n	8000f5e <__aeabi_fsub+0x4e>
 8001138:	2fff      	cmp	r7, #255	; 0xff
 800113a:	d0d9      	beq.n	80010f0 <__aeabi_fsub+0x1e0>
 800113c:	2380      	movs	r3, #128	; 0x80
 800113e:	4664      	mov	r4, ip
 8001140:	04db      	lsls	r3, r3, #19
 8001142:	431c      	orrs	r4, r3
 8001144:	46a4      	mov	ip, r4
 8001146:	2a1b      	cmp	r2, #27
 8001148:	dd52      	ble.n	80011f0 <__aeabi_fsub+0x2e0>
 800114a:	2301      	movs	r3, #1
 800114c:	000c      	movs	r4, r1
 800114e:	003d      	movs	r5, r7
 8001150:	1ac3      	subs	r3, r0, r3
 8001152:	e706      	b.n	8000f62 <__aeabi_fsub+0x52>
 8001154:	4663      	mov	r3, ip
 8001156:	1a1e      	subs	r6, r3, r0
 8001158:	0173      	lsls	r3, r6, #5
 800115a:	d439      	bmi.n	80011d0 <__aeabi_fsub+0x2c0>
 800115c:	2e00      	cmp	r6, #0
 800115e:	d000      	beq.n	8001162 <__aeabi_fsub+0x252>
 8001160:	e704      	b.n	8000f6c <__aeabi_fsub+0x5c>
 8001162:	2400      	movs	r4, #0
 8001164:	2200      	movs	r2, #0
 8001166:	2600      	movs	r6, #0
 8001168:	e71d      	b.n	8000fa6 <__aeabi_fsub+0x96>
 800116a:	2320      	movs	r3, #32
 800116c:	1a9b      	subs	r3, r3, r2
 800116e:	0001      	movs	r1, r0
 8001170:	4098      	lsls	r0, r3
 8001172:	0003      	movs	r3, r0
 8001174:	40d1      	lsrs	r1, r2
 8001176:	1e5a      	subs	r2, r3, #1
 8001178:	4193      	sbcs	r3, r2
 800117a:	430b      	orrs	r3, r1
 800117c:	e729      	b.n	8000fd2 <__aeabi_fsub+0xc2>
 800117e:	2d00      	cmp	r5, #0
 8001180:	d1a9      	bne.n	80010d6 <__aeabi_fsub+0x1c6>
 8001182:	4663      	mov	r3, ip
 8001184:	2b00      	cmp	r3, #0
 8001186:	d056      	beq.n	8001236 <__aeabi_fsub+0x326>
 8001188:	2200      	movs	r2, #0
 800118a:	2800      	cmp	r0, #0
 800118c:	d100      	bne.n	8001190 <__aeabi_fsub+0x280>
 800118e:	e70a      	b.n	8000fa6 <__aeabi_fsub+0x96>
 8001190:	0003      	movs	r3, r0
 8001192:	4463      	add	r3, ip
 8001194:	015a      	lsls	r2, r3, #5
 8001196:	d594      	bpl.n	80010c2 <__aeabi_fsub+0x1b2>
 8001198:	4a2b      	ldr	r2, [pc, #172]	; (8001248 <__aeabi_fsub+0x338>)
 800119a:	3501      	adds	r5, #1
 800119c:	4013      	ands	r3, r2
 800119e:	e790      	b.n	80010c2 <__aeabi_fsub+0x1b2>
 80011a0:	4663      	mov	r3, ip
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d0af      	beq.n	8001106 <__aeabi_fsub+0x1f6>
 80011a6:	1e53      	subs	r3, r2, #1
 80011a8:	2a01      	cmp	r2, #1
 80011aa:	d015      	beq.n	80011d8 <__aeabi_fsub+0x2c8>
 80011ac:	2aff      	cmp	r2, #255	; 0xff
 80011ae:	d02a      	beq.n	8001206 <__aeabi_fsub+0x2f6>
 80011b0:	001a      	movs	r2, r3
 80011b2:	e752      	b.n	800105a <__aeabi_fsub+0x14a>
 80011b4:	4662      	mov	r2, ip
 80011b6:	2a00      	cmp	r2, #0
 80011b8:	d191      	bne.n	80010de <__aeabi_fsub+0x1ce>
 80011ba:	2800      	cmp	r0, #0
 80011bc:	d198      	bne.n	80010f0 <__aeabi_fsub+0x1e0>
 80011be:	2680      	movs	r6, #128	; 0x80
 80011c0:	2400      	movs	r4, #0
 80011c2:	22ff      	movs	r2, #255	; 0xff
 80011c4:	03f6      	lsls	r6, r6, #15
 80011c6:	e6ee      	b.n	8000fa6 <__aeabi_fsub+0x96>
 80011c8:	000c      	movs	r4, r1
 80011ca:	4643      	mov	r3, r8
 80011cc:	0015      	movs	r5, r2
 80011ce:	e77c      	b.n	80010ca <__aeabi_fsub+0x1ba>
 80011d0:	4663      	mov	r3, ip
 80011d2:	000c      	movs	r4, r1
 80011d4:	1ac6      	subs	r6, r0, r3
 80011d6:	e6c9      	b.n	8000f6c <__aeabi_fsub+0x5c>
 80011d8:	0003      	movs	r3, r0
 80011da:	4463      	add	r3, ip
 80011dc:	2501      	movs	r5, #1
 80011de:	015a      	lsls	r2, r3, #5
 80011e0:	d400      	bmi.n	80011e4 <__aeabi_fsub+0x2d4>
 80011e2:	e76e      	b.n	80010c2 <__aeabi_fsub+0x1b2>
 80011e4:	2502      	movs	r5, #2
 80011e6:	e6fa      	b.n	8000fde <__aeabi_fsub+0xce>
 80011e8:	4663      	mov	r3, ip
 80011ea:	2501      	movs	r5, #1
 80011ec:	1a1b      	subs	r3, r3, r0
 80011ee:	e6b8      	b.n	8000f62 <__aeabi_fsub+0x52>
 80011f0:	4664      	mov	r4, ip
 80011f2:	2320      	movs	r3, #32
 80011f4:	40d4      	lsrs	r4, r2
 80011f6:	1a9b      	subs	r3, r3, r2
 80011f8:	4662      	mov	r2, ip
 80011fa:	409a      	lsls	r2, r3
 80011fc:	0013      	movs	r3, r2
 80011fe:	1e5a      	subs	r2, r3, #1
 8001200:	4193      	sbcs	r3, r2
 8001202:	4323      	orrs	r3, r4
 8001204:	e7a2      	b.n	800114c <__aeabi_fsub+0x23c>
 8001206:	4643      	mov	r3, r8
 8001208:	e774      	b.n	80010f4 <__aeabi_fsub+0x1e4>
 800120a:	4661      	mov	r1, ip
 800120c:	2320      	movs	r3, #32
 800120e:	40d1      	lsrs	r1, r2
 8001210:	1a9b      	subs	r3, r3, r2
 8001212:	4662      	mov	r2, ip
 8001214:	409a      	lsls	r2, r3
 8001216:	0013      	movs	r3, r2
 8001218:	1e5a      	subs	r2, r3, #1
 800121a:	4193      	sbcs	r3, r2
 800121c:	430b      	orrs	r3, r1
 800121e:	e720      	b.n	8001062 <__aeabi_fsub+0x152>
 8001220:	4663      	mov	r3, ip
 8001222:	000c      	movs	r4, r1
 8001224:	2501      	movs	r5, #1
 8001226:	1ac3      	subs	r3, r0, r3
 8001228:	e69b      	b.n	8000f62 <__aeabi_fsub+0x52>
 800122a:	2800      	cmp	r0, #0
 800122c:	d099      	beq.n	8001162 <__aeabi_fsub+0x252>
 800122e:	000c      	movs	r4, r1
 8001230:	4646      	mov	r6, r8
 8001232:	2200      	movs	r2, #0
 8001234:	e6b7      	b.n	8000fa6 <__aeabi_fsub+0x96>
 8001236:	4646      	mov	r6, r8
 8001238:	2200      	movs	r2, #0
 800123a:	e6b4      	b.n	8000fa6 <__aeabi_fsub+0x96>
 800123c:	2b00      	cmp	r3, #0
 800123e:	d000      	beq.n	8001242 <__aeabi_fsub+0x332>
 8001240:	e73f      	b.n	80010c2 <__aeabi_fsub+0x1b2>
 8001242:	2400      	movs	r4, #0
 8001244:	2600      	movs	r6, #0
 8001246:	e6ae      	b.n	8000fa6 <__aeabi_fsub+0x96>
 8001248:	fbffffff 	.word	0xfbffffff
 800124c:	7dffffff 	.word	0x7dffffff

08001250 <__aeabi_f2iz>:
 8001250:	0241      	lsls	r1, r0, #9
 8001252:	0042      	lsls	r2, r0, #1
 8001254:	0fc3      	lsrs	r3, r0, #31
 8001256:	0a49      	lsrs	r1, r1, #9
 8001258:	2000      	movs	r0, #0
 800125a:	0e12      	lsrs	r2, r2, #24
 800125c:	2a7e      	cmp	r2, #126	; 0x7e
 800125e:	dd03      	ble.n	8001268 <__aeabi_f2iz+0x18>
 8001260:	2a9d      	cmp	r2, #157	; 0x9d
 8001262:	dd02      	ble.n	800126a <__aeabi_f2iz+0x1a>
 8001264:	4a09      	ldr	r2, [pc, #36]	; (800128c <__aeabi_f2iz+0x3c>)
 8001266:	1898      	adds	r0, r3, r2
 8001268:	4770      	bx	lr
 800126a:	2080      	movs	r0, #128	; 0x80
 800126c:	0400      	lsls	r0, r0, #16
 800126e:	4301      	orrs	r1, r0
 8001270:	2a95      	cmp	r2, #149	; 0x95
 8001272:	dc07      	bgt.n	8001284 <__aeabi_f2iz+0x34>
 8001274:	2096      	movs	r0, #150	; 0x96
 8001276:	1a82      	subs	r2, r0, r2
 8001278:	40d1      	lsrs	r1, r2
 800127a:	4248      	negs	r0, r1
 800127c:	2b00      	cmp	r3, #0
 800127e:	d1f3      	bne.n	8001268 <__aeabi_f2iz+0x18>
 8001280:	0008      	movs	r0, r1
 8001282:	e7f1      	b.n	8001268 <__aeabi_f2iz+0x18>
 8001284:	3a96      	subs	r2, #150	; 0x96
 8001286:	4091      	lsls	r1, r2
 8001288:	e7f7      	b.n	800127a <__aeabi_f2iz+0x2a>
 800128a:	46c0      	nop			; (mov r8, r8)
 800128c:	7fffffff 	.word	0x7fffffff

08001290 <__aeabi_i2f>:
 8001290:	b570      	push	{r4, r5, r6, lr}
 8001292:	2800      	cmp	r0, #0
 8001294:	d013      	beq.n	80012be <__aeabi_i2f+0x2e>
 8001296:	17c3      	asrs	r3, r0, #31
 8001298:	18c5      	adds	r5, r0, r3
 800129a:	405d      	eors	r5, r3
 800129c:	0fc4      	lsrs	r4, r0, #31
 800129e:	0028      	movs	r0, r5
 80012a0:	f001 ffa6 	bl	80031f0 <__clzsi2>
 80012a4:	239e      	movs	r3, #158	; 0x9e
 80012a6:	0001      	movs	r1, r0
 80012a8:	1a1b      	subs	r3, r3, r0
 80012aa:	2b96      	cmp	r3, #150	; 0x96
 80012ac:	dc0f      	bgt.n	80012ce <__aeabi_i2f+0x3e>
 80012ae:	2808      	cmp	r0, #8
 80012b0:	d031      	beq.n	8001316 <__aeabi_i2f+0x86>
 80012b2:	3908      	subs	r1, #8
 80012b4:	408d      	lsls	r5, r1
 80012b6:	026d      	lsls	r5, r5, #9
 80012b8:	0a6d      	lsrs	r5, r5, #9
 80012ba:	b2d8      	uxtb	r0, r3
 80012bc:	e002      	b.n	80012c4 <__aeabi_i2f+0x34>
 80012be:	2400      	movs	r4, #0
 80012c0:	2000      	movs	r0, #0
 80012c2:	2500      	movs	r5, #0
 80012c4:	05c0      	lsls	r0, r0, #23
 80012c6:	4328      	orrs	r0, r5
 80012c8:	07e4      	lsls	r4, r4, #31
 80012ca:	4320      	orrs	r0, r4
 80012cc:	bd70      	pop	{r4, r5, r6, pc}
 80012ce:	2b99      	cmp	r3, #153	; 0x99
 80012d0:	dd0c      	ble.n	80012ec <__aeabi_i2f+0x5c>
 80012d2:	2205      	movs	r2, #5
 80012d4:	1a12      	subs	r2, r2, r0
 80012d6:	0028      	movs	r0, r5
 80012d8:	40d0      	lsrs	r0, r2
 80012da:	0002      	movs	r2, r0
 80012dc:	0008      	movs	r0, r1
 80012de:	301b      	adds	r0, #27
 80012e0:	4085      	lsls	r5, r0
 80012e2:	0028      	movs	r0, r5
 80012e4:	1e45      	subs	r5, r0, #1
 80012e6:	41a8      	sbcs	r0, r5
 80012e8:	4302      	orrs	r2, r0
 80012ea:	0015      	movs	r5, r2
 80012ec:	2905      	cmp	r1, #5
 80012ee:	dc16      	bgt.n	800131e <__aeabi_i2f+0x8e>
 80012f0:	002a      	movs	r2, r5
 80012f2:	480f      	ldr	r0, [pc, #60]	; (8001330 <__aeabi_i2f+0xa0>)
 80012f4:	4002      	ands	r2, r0
 80012f6:	076e      	lsls	r6, r5, #29
 80012f8:	d009      	beq.n	800130e <__aeabi_i2f+0x7e>
 80012fa:	260f      	movs	r6, #15
 80012fc:	4035      	ands	r5, r6
 80012fe:	2d04      	cmp	r5, #4
 8001300:	d005      	beq.n	800130e <__aeabi_i2f+0x7e>
 8001302:	3204      	adds	r2, #4
 8001304:	0155      	lsls	r5, r2, #5
 8001306:	d502      	bpl.n	800130e <__aeabi_i2f+0x7e>
 8001308:	239f      	movs	r3, #159	; 0x9f
 800130a:	4002      	ands	r2, r0
 800130c:	1a5b      	subs	r3, r3, r1
 800130e:	0192      	lsls	r2, r2, #6
 8001310:	0a55      	lsrs	r5, r2, #9
 8001312:	b2d8      	uxtb	r0, r3
 8001314:	e7d6      	b.n	80012c4 <__aeabi_i2f+0x34>
 8001316:	026d      	lsls	r5, r5, #9
 8001318:	2096      	movs	r0, #150	; 0x96
 800131a:	0a6d      	lsrs	r5, r5, #9
 800131c:	e7d2      	b.n	80012c4 <__aeabi_i2f+0x34>
 800131e:	1f4a      	subs	r2, r1, #5
 8001320:	4095      	lsls	r5, r2
 8001322:	002a      	movs	r2, r5
 8001324:	4802      	ldr	r0, [pc, #8]	; (8001330 <__aeabi_i2f+0xa0>)
 8001326:	4002      	ands	r2, r0
 8001328:	076e      	lsls	r6, r5, #29
 800132a:	d0f0      	beq.n	800130e <__aeabi_i2f+0x7e>
 800132c:	e7e5      	b.n	80012fa <__aeabi_i2f+0x6a>
 800132e:	46c0      	nop			; (mov r8, r8)
 8001330:	fbffffff 	.word	0xfbffffff

08001334 <__aeabi_ui2f>:
 8001334:	b570      	push	{r4, r5, r6, lr}
 8001336:	1e04      	subs	r4, r0, #0
 8001338:	d00e      	beq.n	8001358 <__aeabi_ui2f+0x24>
 800133a:	f001 ff59 	bl	80031f0 <__clzsi2>
 800133e:	239e      	movs	r3, #158	; 0x9e
 8001340:	0001      	movs	r1, r0
 8001342:	1a1b      	subs	r3, r3, r0
 8001344:	2b96      	cmp	r3, #150	; 0x96
 8001346:	dc0c      	bgt.n	8001362 <__aeabi_ui2f+0x2e>
 8001348:	2808      	cmp	r0, #8
 800134a:	d02c      	beq.n	80013a6 <__aeabi_ui2f+0x72>
 800134c:	3908      	subs	r1, #8
 800134e:	408c      	lsls	r4, r1
 8001350:	0264      	lsls	r4, r4, #9
 8001352:	0a64      	lsrs	r4, r4, #9
 8001354:	b2d8      	uxtb	r0, r3
 8001356:	e001      	b.n	800135c <__aeabi_ui2f+0x28>
 8001358:	2000      	movs	r0, #0
 800135a:	2400      	movs	r4, #0
 800135c:	05c0      	lsls	r0, r0, #23
 800135e:	4320      	orrs	r0, r4
 8001360:	bd70      	pop	{r4, r5, r6, pc}
 8001362:	2b99      	cmp	r3, #153	; 0x99
 8001364:	dd0a      	ble.n	800137c <__aeabi_ui2f+0x48>
 8001366:	0002      	movs	r2, r0
 8001368:	0020      	movs	r0, r4
 800136a:	321b      	adds	r2, #27
 800136c:	4090      	lsls	r0, r2
 800136e:	0002      	movs	r2, r0
 8001370:	1e50      	subs	r0, r2, #1
 8001372:	4182      	sbcs	r2, r0
 8001374:	2005      	movs	r0, #5
 8001376:	1a40      	subs	r0, r0, r1
 8001378:	40c4      	lsrs	r4, r0
 800137a:	4314      	orrs	r4, r2
 800137c:	2905      	cmp	r1, #5
 800137e:	dc16      	bgt.n	80013ae <__aeabi_ui2f+0x7a>
 8001380:	0022      	movs	r2, r4
 8001382:	480f      	ldr	r0, [pc, #60]	; (80013c0 <__aeabi_ui2f+0x8c>)
 8001384:	4002      	ands	r2, r0
 8001386:	0765      	lsls	r5, r4, #29
 8001388:	d009      	beq.n	800139e <__aeabi_ui2f+0x6a>
 800138a:	250f      	movs	r5, #15
 800138c:	402c      	ands	r4, r5
 800138e:	2c04      	cmp	r4, #4
 8001390:	d005      	beq.n	800139e <__aeabi_ui2f+0x6a>
 8001392:	3204      	adds	r2, #4
 8001394:	0154      	lsls	r4, r2, #5
 8001396:	d502      	bpl.n	800139e <__aeabi_ui2f+0x6a>
 8001398:	239f      	movs	r3, #159	; 0x9f
 800139a:	4002      	ands	r2, r0
 800139c:	1a5b      	subs	r3, r3, r1
 800139e:	0192      	lsls	r2, r2, #6
 80013a0:	0a54      	lsrs	r4, r2, #9
 80013a2:	b2d8      	uxtb	r0, r3
 80013a4:	e7da      	b.n	800135c <__aeabi_ui2f+0x28>
 80013a6:	0264      	lsls	r4, r4, #9
 80013a8:	2096      	movs	r0, #150	; 0x96
 80013aa:	0a64      	lsrs	r4, r4, #9
 80013ac:	e7d6      	b.n	800135c <__aeabi_ui2f+0x28>
 80013ae:	1f4a      	subs	r2, r1, #5
 80013b0:	4094      	lsls	r4, r2
 80013b2:	0022      	movs	r2, r4
 80013b4:	4802      	ldr	r0, [pc, #8]	; (80013c0 <__aeabi_ui2f+0x8c>)
 80013b6:	4002      	ands	r2, r0
 80013b8:	0765      	lsls	r5, r4, #29
 80013ba:	d0f0      	beq.n	800139e <__aeabi_ui2f+0x6a>
 80013bc:	e7e5      	b.n	800138a <__aeabi_ui2f+0x56>
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	fbffffff 	.word	0xfbffffff

080013c4 <__aeabi_dadd>:
 80013c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013c6:	464f      	mov	r7, r9
 80013c8:	4646      	mov	r6, r8
 80013ca:	46d6      	mov	lr, sl
 80013cc:	0004      	movs	r4, r0
 80013ce:	b5c0      	push	{r6, r7, lr}
 80013d0:	001f      	movs	r7, r3
 80013d2:	030b      	lsls	r3, r1, #12
 80013d4:	0010      	movs	r0, r2
 80013d6:	004e      	lsls	r6, r1, #1
 80013d8:	0a5b      	lsrs	r3, r3, #9
 80013da:	0fcd      	lsrs	r5, r1, #31
 80013dc:	0f61      	lsrs	r1, r4, #29
 80013de:	007a      	lsls	r2, r7, #1
 80013e0:	4319      	orrs	r1, r3
 80013e2:	00e3      	lsls	r3, r4, #3
 80013e4:	033c      	lsls	r4, r7, #12
 80013e6:	0fff      	lsrs	r7, r7, #31
 80013e8:	46bc      	mov	ip, r7
 80013ea:	0a64      	lsrs	r4, r4, #9
 80013ec:	0f47      	lsrs	r7, r0, #29
 80013ee:	4327      	orrs	r7, r4
 80013f0:	0d76      	lsrs	r6, r6, #21
 80013f2:	0d52      	lsrs	r2, r2, #21
 80013f4:	00c0      	lsls	r0, r0, #3
 80013f6:	46b9      	mov	r9, r7
 80013f8:	4680      	mov	r8, r0
 80013fa:	1ab7      	subs	r7, r6, r2
 80013fc:	4565      	cmp	r5, ip
 80013fe:	d100      	bne.n	8001402 <__aeabi_dadd+0x3e>
 8001400:	e09b      	b.n	800153a <__aeabi_dadd+0x176>
 8001402:	2f00      	cmp	r7, #0
 8001404:	dc00      	bgt.n	8001408 <__aeabi_dadd+0x44>
 8001406:	e084      	b.n	8001512 <__aeabi_dadd+0x14e>
 8001408:	2a00      	cmp	r2, #0
 800140a:	d100      	bne.n	800140e <__aeabi_dadd+0x4a>
 800140c:	e0be      	b.n	800158c <__aeabi_dadd+0x1c8>
 800140e:	4ac8      	ldr	r2, [pc, #800]	; (8001730 <__aeabi_dadd+0x36c>)
 8001410:	4296      	cmp	r6, r2
 8001412:	d100      	bne.n	8001416 <__aeabi_dadd+0x52>
 8001414:	e124      	b.n	8001660 <__aeabi_dadd+0x29c>
 8001416:	2280      	movs	r2, #128	; 0x80
 8001418:	464c      	mov	r4, r9
 800141a:	0412      	lsls	r2, r2, #16
 800141c:	4314      	orrs	r4, r2
 800141e:	46a1      	mov	r9, r4
 8001420:	2f38      	cmp	r7, #56	; 0x38
 8001422:	dd00      	ble.n	8001426 <__aeabi_dadd+0x62>
 8001424:	e167      	b.n	80016f6 <__aeabi_dadd+0x332>
 8001426:	2f1f      	cmp	r7, #31
 8001428:	dd00      	ble.n	800142c <__aeabi_dadd+0x68>
 800142a:	e1d6      	b.n	80017da <__aeabi_dadd+0x416>
 800142c:	2220      	movs	r2, #32
 800142e:	464c      	mov	r4, r9
 8001430:	1bd2      	subs	r2, r2, r7
 8001432:	4094      	lsls	r4, r2
 8001434:	46a2      	mov	sl, r4
 8001436:	4644      	mov	r4, r8
 8001438:	40fc      	lsrs	r4, r7
 800143a:	0020      	movs	r0, r4
 800143c:	4654      	mov	r4, sl
 800143e:	4304      	orrs	r4, r0
 8001440:	4640      	mov	r0, r8
 8001442:	4090      	lsls	r0, r2
 8001444:	1e42      	subs	r2, r0, #1
 8001446:	4190      	sbcs	r0, r2
 8001448:	464a      	mov	r2, r9
 800144a:	40fa      	lsrs	r2, r7
 800144c:	4304      	orrs	r4, r0
 800144e:	1a89      	subs	r1, r1, r2
 8001450:	1b1c      	subs	r4, r3, r4
 8001452:	42a3      	cmp	r3, r4
 8001454:	4192      	sbcs	r2, r2
 8001456:	4252      	negs	r2, r2
 8001458:	1a8b      	subs	r3, r1, r2
 800145a:	469a      	mov	sl, r3
 800145c:	4653      	mov	r3, sl
 800145e:	021b      	lsls	r3, r3, #8
 8001460:	d400      	bmi.n	8001464 <__aeabi_dadd+0xa0>
 8001462:	e0d4      	b.n	800160e <__aeabi_dadd+0x24a>
 8001464:	4653      	mov	r3, sl
 8001466:	025a      	lsls	r2, r3, #9
 8001468:	0a53      	lsrs	r3, r2, #9
 800146a:	469a      	mov	sl, r3
 800146c:	4653      	mov	r3, sl
 800146e:	2b00      	cmp	r3, #0
 8001470:	d100      	bne.n	8001474 <__aeabi_dadd+0xb0>
 8001472:	e104      	b.n	800167e <__aeabi_dadd+0x2ba>
 8001474:	4650      	mov	r0, sl
 8001476:	f001 febb 	bl	80031f0 <__clzsi2>
 800147a:	0003      	movs	r3, r0
 800147c:	3b08      	subs	r3, #8
 800147e:	2220      	movs	r2, #32
 8001480:	0020      	movs	r0, r4
 8001482:	1ad2      	subs	r2, r2, r3
 8001484:	4651      	mov	r1, sl
 8001486:	40d0      	lsrs	r0, r2
 8001488:	4099      	lsls	r1, r3
 800148a:	0002      	movs	r2, r0
 800148c:	409c      	lsls	r4, r3
 800148e:	430a      	orrs	r2, r1
 8001490:	42b3      	cmp	r3, r6
 8001492:	da00      	bge.n	8001496 <__aeabi_dadd+0xd2>
 8001494:	e102      	b.n	800169c <__aeabi_dadd+0x2d8>
 8001496:	1b9b      	subs	r3, r3, r6
 8001498:	1c59      	adds	r1, r3, #1
 800149a:	291f      	cmp	r1, #31
 800149c:	dd00      	ble.n	80014a0 <__aeabi_dadd+0xdc>
 800149e:	e0a7      	b.n	80015f0 <__aeabi_dadd+0x22c>
 80014a0:	2320      	movs	r3, #32
 80014a2:	0010      	movs	r0, r2
 80014a4:	0026      	movs	r6, r4
 80014a6:	1a5b      	subs	r3, r3, r1
 80014a8:	409c      	lsls	r4, r3
 80014aa:	4098      	lsls	r0, r3
 80014ac:	40ce      	lsrs	r6, r1
 80014ae:	40ca      	lsrs	r2, r1
 80014b0:	1e63      	subs	r3, r4, #1
 80014b2:	419c      	sbcs	r4, r3
 80014b4:	4330      	orrs	r0, r6
 80014b6:	4692      	mov	sl, r2
 80014b8:	2600      	movs	r6, #0
 80014ba:	4304      	orrs	r4, r0
 80014bc:	0763      	lsls	r3, r4, #29
 80014be:	d009      	beq.n	80014d4 <__aeabi_dadd+0x110>
 80014c0:	230f      	movs	r3, #15
 80014c2:	4023      	ands	r3, r4
 80014c4:	2b04      	cmp	r3, #4
 80014c6:	d005      	beq.n	80014d4 <__aeabi_dadd+0x110>
 80014c8:	1d23      	adds	r3, r4, #4
 80014ca:	42a3      	cmp	r3, r4
 80014cc:	41a4      	sbcs	r4, r4
 80014ce:	4264      	negs	r4, r4
 80014d0:	44a2      	add	sl, r4
 80014d2:	001c      	movs	r4, r3
 80014d4:	4653      	mov	r3, sl
 80014d6:	021b      	lsls	r3, r3, #8
 80014d8:	d400      	bmi.n	80014dc <__aeabi_dadd+0x118>
 80014da:	e09b      	b.n	8001614 <__aeabi_dadd+0x250>
 80014dc:	4b94      	ldr	r3, [pc, #592]	; (8001730 <__aeabi_dadd+0x36c>)
 80014de:	3601      	adds	r6, #1
 80014e0:	429e      	cmp	r6, r3
 80014e2:	d100      	bne.n	80014e6 <__aeabi_dadd+0x122>
 80014e4:	e0b8      	b.n	8001658 <__aeabi_dadd+0x294>
 80014e6:	4653      	mov	r3, sl
 80014e8:	4992      	ldr	r1, [pc, #584]	; (8001734 <__aeabi_dadd+0x370>)
 80014ea:	08e4      	lsrs	r4, r4, #3
 80014ec:	400b      	ands	r3, r1
 80014ee:	0019      	movs	r1, r3
 80014f0:	075b      	lsls	r3, r3, #29
 80014f2:	4323      	orrs	r3, r4
 80014f4:	0572      	lsls	r2, r6, #21
 80014f6:	024c      	lsls	r4, r1, #9
 80014f8:	0b24      	lsrs	r4, r4, #12
 80014fa:	0d52      	lsrs	r2, r2, #21
 80014fc:	0512      	lsls	r2, r2, #20
 80014fe:	07ed      	lsls	r5, r5, #31
 8001500:	4322      	orrs	r2, r4
 8001502:	432a      	orrs	r2, r5
 8001504:	0018      	movs	r0, r3
 8001506:	0011      	movs	r1, r2
 8001508:	bce0      	pop	{r5, r6, r7}
 800150a:	46ba      	mov	sl, r7
 800150c:	46b1      	mov	r9, r6
 800150e:	46a8      	mov	r8, r5
 8001510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001512:	2f00      	cmp	r7, #0
 8001514:	d048      	beq.n	80015a8 <__aeabi_dadd+0x1e4>
 8001516:	1b97      	subs	r7, r2, r6
 8001518:	2e00      	cmp	r6, #0
 800151a:	d000      	beq.n	800151e <__aeabi_dadd+0x15a>
 800151c:	e10e      	b.n	800173c <__aeabi_dadd+0x378>
 800151e:	000c      	movs	r4, r1
 8001520:	431c      	orrs	r4, r3
 8001522:	d100      	bne.n	8001526 <__aeabi_dadd+0x162>
 8001524:	e1b7      	b.n	8001896 <__aeabi_dadd+0x4d2>
 8001526:	1e7c      	subs	r4, r7, #1
 8001528:	2f01      	cmp	r7, #1
 800152a:	d100      	bne.n	800152e <__aeabi_dadd+0x16a>
 800152c:	e226      	b.n	800197c <__aeabi_dadd+0x5b8>
 800152e:	4d80      	ldr	r5, [pc, #512]	; (8001730 <__aeabi_dadd+0x36c>)
 8001530:	42af      	cmp	r7, r5
 8001532:	d100      	bne.n	8001536 <__aeabi_dadd+0x172>
 8001534:	e1d5      	b.n	80018e2 <__aeabi_dadd+0x51e>
 8001536:	0027      	movs	r7, r4
 8001538:	e107      	b.n	800174a <__aeabi_dadd+0x386>
 800153a:	2f00      	cmp	r7, #0
 800153c:	dc00      	bgt.n	8001540 <__aeabi_dadd+0x17c>
 800153e:	e0b2      	b.n	80016a6 <__aeabi_dadd+0x2e2>
 8001540:	2a00      	cmp	r2, #0
 8001542:	d047      	beq.n	80015d4 <__aeabi_dadd+0x210>
 8001544:	4a7a      	ldr	r2, [pc, #488]	; (8001730 <__aeabi_dadd+0x36c>)
 8001546:	4296      	cmp	r6, r2
 8001548:	d100      	bne.n	800154c <__aeabi_dadd+0x188>
 800154a:	e089      	b.n	8001660 <__aeabi_dadd+0x29c>
 800154c:	2280      	movs	r2, #128	; 0x80
 800154e:	464c      	mov	r4, r9
 8001550:	0412      	lsls	r2, r2, #16
 8001552:	4314      	orrs	r4, r2
 8001554:	46a1      	mov	r9, r4
 8001556:	2f38      	cmp	r7, #56	; 0x38
 8001558:	dc6b      	bgt.n	8001632 <__aeabi_dadd+0x26e>
 800155a:	2f1f      	cmp	r7, #31
 800155c:	dc00      	bgt.n	8001560 <__aeabi_dadd+0x19c>
 800155e:	e16e      	b.n	800183e <__aeabi_dadd+0x47a>
 8001560:	003a      	movs	r2, r7
 8001562:	4648      	mov	r0, r9
 8001564:	3a20      	subs	r2, #32
 8001566:	40d0      	lsrs	r0, r2
 8001568:	4684      	mov	ip, r0
 800156a:	2f20      	cmp	r7, #32
 800156c:	d007      	beq.n	800157e <__aeabi_dadd+0x1ba>
 800156e:	2240      	movs	r2, #64	; 0x40
 8001570:	4648      	mov	r0, r9
 8001572:	1bd2      	subs	r2, r2, r7
 8001574:	4090      	lsls	r0, r2
 8001576:	0002      	movs	r2, r0
 8001578:	4640      	mov	r0, r8
 800157a:	4310      	orrs	r0, r2
 800157c:	4680      	mov	r8, r0
 800157e:	4640      	mov	r0, r8
 8001580:	1e42      	subs	r2, r0, #1
 8001582:	4190      	sbcs	r0, r2
 8001584:	4662      	mov	r2, ip
 8001586:	0004      	movs	r4, r0
 8001588:	4314      	orrs	r4, r2
 800158a:	e057      	b.n	800163c <__aeabi_dadd+0x278>
 800158c:	464a      	mov	r2, r9
 800158e:	4302      	orrs	r2, r0
 8001590:	d100      	bne.n	8001594 <__aeabi_dadd+0x1d0>
 8001592:	e103      	b.n	800179c <__aeabi_dadd+0x3d8>
 8001594:	1e7a      	subs	r2, r7, #1
 8001596:	2f01      	cmp	r7, #1
 8001598:	d100      	bne.n	800159c <__aeabi_dadd+0x1d8>
 800159a:	e193      	b.n	80018c4 <__aeabi_dadd+0x500>
 800159c:	4c64      	ldr	r4, [pc, #400]	; (8001730 <__aeabi_dadd+0x36c>)
 800159e:	42a7      	cmp	r7, r4
 80015a0:	d100      	bne.n	80015a4 <__aeabi_dadd+0x1e0>
 80015a2:	e18a      	b.n	80018ba <__aeabi_dadd+0x4f6>
 80015a4:	0017      	movs	r7, r2
 80015a6:	e73b      	b.n	8001420 <__aeabi_dadd+0x5c>
 80015a8:	4c63      	ldr	r4, [pc, #396]	; (8001738 <__aeabi_dadd+0x374>)
 80015aa:	1c72      	adds	r2, r6, #1
 80015ac:	4222      	tst	r2, r4
 80015ae:	d000      	beq.n	80015b2 <__aeabi_dadd+0x1ee>
 80015b0:	e0e0      	b.n	8001774 <__aeabi_dadd+0x3b0>
 80015b2:	000a      	movs	r2, r1
 80015b4:	431a      	orrs	r2, r3
 80015b6:	2e00      	cmp	r6, #0
 80015b8:	d000      	beq.n	80015bc <__aeabi_dadd+0x1f8>
 80015ba:	e174      	b.n	80018a6 <__aeabi_dadd+0x4e2>
 80015bc:	2a00      	cmp	r2, #0
 80015be:	d100      	bne.n	80015c2 <__aeabi_dadd+0x1fe>
 80015c0:	e1d0      	b.n	8001964 <__aeabi_dadd+0x5a0>
 80015c2:	464a      	mov	r2, r9
 80015c4:	4302      	orrs	r2, r0
 80015c6:	d000      	beq.n	80015ca <__aeabi_dadd+0x206>
 80015c8:	e1e3      	b.n	8001992 <__aeabi_dadd+0x5ce>
 80015ca:	074a      	lsls	r2, r1, #29
 80015cc:	08db      	lsrs	r3, r3, #3
 80015ce:	4313      	orrs	r3, r2
 80015d0:	08c9      	lsrs	r1, r1, #3
 80015d2:	e029      	b.n	8001628 <__aeabi_dadd+0x264>
 80015d4:	464a      	mov	r2, r9
 80015d6:	4302      	orrs	r2, r0
 80015d8:	d100      	bne.n	80015dc <__aeabi_dadd+0x218>
 80015da:	e17d      	b.n	80018d8 <__aeabi_dadd+0x514>
 80015dc:	1e7a      	subs	r2, r7, #1
 80015de:	2f01      	cmp	r7, #1
 80015e0:	d100      	bne.n	80015e4 <__aeabi_dadd+0x220>
 80015e2:	e0e0      	b.n	80017a6 <__aeabi_dadd+0x3e2>
 80015e4:	4c52      	ldr	r4, [pc, #328]	; (8001730 <__aeabi_dadd+0x36c>)
 80015e6:	42a7      	cmp	r7, r4
 80015e8:	d100      	bne.n	80015ec <__aeabi_dadd+0x228>
 80015ea:	e166      	b.n	80018ba <__aeabi_dadd+0x4f6>
 80015ec:	0017      	movs	r7, r2
 80015ee:	e7b2      	b.n	8001556 <__aeabi_dadd+0x192>
 80015f0:	0010      	movs	r0, r2
 80015f2:	3b1f      	subs	r3, #31
 80015f4:	40d8      	lsrs	r0, r3
 80015f6:	2920      	cmp	r1, #32
 80015f8:	d003      	beq.n	8001602 <__aeabi_dadd+0x23e>
 80015fa:	2340      	movs	r3, #64	; 0x40
 80015fc:	1a5b      	subs	r3, r3, r1
 80015fe:	409a      	lsls	r2, r3
 8001600:	4314      	orrs	r4, r2
 8001602:	1e63      	subs	r3, r4, #1
 8001604:	419c      	sbcs	r4, r3
 8001606:	2300      	movs	r3, #0
 8001608:	2600      	movs	r6, #0
 800160a:	469a      	mov	sl, r3
 800160c:	4304      	orrs	r4, r0
 800160e:	0763      	lsls	r3, r4, #29
 8001610:	d000      	beq.n	8001614 <__aeabi_dadd+0x250>
 8001612:	e755      	b.n	80014c0 <__aeabi_dadd+0xfc>
 8001614:	4652      	mov	r2, sl
 8001616:	08e3      	lsrs	r3, r4, #3
 8001618:	0752      	lsls	r2, r2, #29
 800161a:	4313      	orrs	r3, r2
 800161c:	4652      	mov	r2, sl
 800161e:	0037      	movs	r7, r6
 8001620:	08d1      	lsrs	r1, r2, #3
 8001622:	4a43      	ldr	r2, [pc, #268]	; (8001730 <__aeabi_dadd+0x36c>)
 8001624:	4297      	cmp	r7, r2
 8001626:	d01f      	beq.n	8001668 <__aeabi_dadd+0x2a4>
 8001628:	0309      	lsls	r1, r1, #12
 800162a:	057a      	lsls	r2, r7, #21
 800162c:	0b0c      	lsrs	r4, r1, #12
 800162e:	0d52      	lsrs	r2, r2, #21
 8001630:	e764      	b.n	80014fc <__aeabi_dadd+0x138>
 8001632:	4642      	mov	r2, r8
 8001634:	464c      	mov	r4, r9
 8001636:	4314      	orrs	r4, r2
 8001638:	1e62      	subs	r2, r4, #1
 800163a:	4194      	sbcs	r4, r2
 800163c:	18e4      	adds	r4, r4, r3
 800163e:	429c      	cmp	r4, r3
 8001640:	4192      	sbcs	r2, r2
 8001642:	4252      	negs	r2, r2
 8001644:	4692      	mov	sl, r2
 8001646:	448a      	add	sl, r1
 8001648:	4653      	mov	r3, sl
 800164a:	021b      	lsls	r3, r3, #8
 800164c:	d5df      	bpl.n	800160e <__aeabi_dadd+0x24a>
 800164e:	4b38      	ldr	r3, [pc, #224]	; (8001730 <__aeabi_dadd+0x36c>)
 8001650:	3601      	adds	r6, #1
 8001652:	429e      	cmp	r6, r3
 8001654:	d000      	beq.n	8001658 <__aeabi_dadd+0x294>
 8001656:	e0b3      	b.n	80017c0 <__aeabi_dadd+0x3fc>
 8001658:	0032      	movs	r2, r6
 800165a:	2400      	movs	r4, #0
 800165c:	2300      	movs	r3, #0
 800165e:	e74d      	b.n	80014fc <__aeabi_dadd+0x138>
 8001660:	074a      	lsls	r2, r1, #29
 8001662:	08db      	lsrs	r3, r3, #3
 8001664:	4313      	orrs	r3, r2
 8001666:	08c9      	lsrs	r1, r1, #3
 8001668:	001a      	movs	r2, r3
 800166a:	430a      	orrs	r2, r1
 800166c:	d100      	bne.n	8001670 <__aeabi_dadd+0x2ac>
 800166e:	e200      	b.n	8001a72 <__aeabi_dadd+0x6ae>
 8001670:	2480      	movs	r4, #128	; 0x80
 8001672:	0324      	lsls	r4, r4, #12
 8001674:	430c      	orrs	r4, r1
 8001676:	0324      	lsls	r4, r4, #12
 8001678:	4a2d      	ldr	r2, [pc, #180]	; (8001730 <__aeabi_dadd+0x36c>)
 800167a:	0b24      	lsrs	r4, r4, #12
 800167c:	e73e      	b.n	80014fc <__aeabi_dadd+0x138>
 800167e:	0020      	movs	r0, r4
 8001680:	f001 fdb6 	bl	80031f0 <__clzsi2>
 8001684:	0003      	movs	r3, r0
 8001686:	3318      	adds	r3, #24
 8001688:	2b1f      	cmp	r3, #31
 800168a:	dc00      	bgt.n	800168e <__aeabi_dadd+0x2ca>
 800168c:	e6f7      	b.n	800147e <__aeabi_dadd+0xba>
 800168e:	0022      	movs	r2, r4
 8001690:	3808      	subs	r0, #8
 8001692:	4082      	lsls	r2, r0
 8001694:	2400      	movs	r4, #0
 8001696:	42b3      	cmp	r3, r6
 8001698:	db00      	blt.n	800169c <__aeabi_dadd+0x2d8>
 800169a:	e6fc      	b.n	8001496 <__aeabi_dadd+0xd2>
 800169c:	1af6      	subs	r6, r6, r3
 800169e:	4b25      	ldr	r3, [pc, #148]	; (8001734 <__aeabi_dadd+0x370>)
 80016a0:	401a      	ands	r2, r3
 80016a2:	4692      	mov	sl, r2
 80016a4:	e70a      	b.n	80014bc <__aeabi_dadd+0xf8>
 80016a6:	2f00      	cmp	r7, #0
 80016a8:	d02b      	beq.n	8001702 <__aeabi_dadd+0x33e>
 80016aa:	1b97      	subs	r7, r2, r6
 80016ac:	2e00      	cmp	r6, #0
 80016ae:	d100      	bne.n	80016b2 <__aeabi_dadd+0x2ee>
 80016b0:	e0b8      	b.n	8001824 <__aeabi_dadd+0x460>
 80016b2:	4c1f      	ldr	r4, [pc, #124]	; (8001730 <__aeabi_dadd+0x36c>)
 80016b4:	42a2      	cmp	r2, r4
 80016b6:	d100      	bne.n	80016ba <__aeabi_dadd+0x2f6>
 80016b8:	e11c      	b.n	80018f4 <__aeabi_dadd+0x530>
 80016ba:	2480      	movs	r4, #128	; 0x80
 80016bc:	0424      	lsls	r4, r4, #16
 80016be:	4321      	orrs	r1, r4
 80016c0:	2f38      	cmp	r7, #56	; 0x38
 80016c2:	dd00      	ble.n	80016c6 <__aeabi_dadd+0x302>
 80016c4:	e11e      	b.n	8001904 <__aeabi_dadd+0x540>
 80016c6:	2f1f      	cmp	r7, #31
 80016c8:	dd00      	ble.n	80016cc <__aeabi_dadd+0x308>
 80016ca:	e19e      	b.n	8001a0a <__aeabi_dadd+0x646>
 80016cc:	2620      	movs	r6, #32
 80016ce:	000c      	movs	r4, r1
 80016d0:	1bf6      	subs	r6, r6, r7
 80016d2:	0018      	movs	r0, r3
 80016d4:	40b3      	lsls	r3, r6
 80016d6:	40b4      	lsls	r4, r6
 80016d8:	40f8      	lsrs	r0, r7
 80016da:	1e5e      	subs	r6, r3, #1
 80016dc:	41b3      	sbcs	r3, r6
 80016de:	40f9      	lsrs	r1, r7
 80016e0:	4304      	orrs	r4, r0
 80016e2:	431c      	orrs	r4, r3
 80016e4:	4489      	add	r9, r1
 80016e6:	4444      	add	r4, r8
 80016e8:	4544      	cmp	r4, r8
 80016ea:	419b      	sbcs	r3, r3
 80016ec:	425b      	negs	r3, r3
 80016ee:	444b      	add	r3, r9
 80016f0:	469a      	mov	sl, r3
 80016f2:	0016      	movs	r6, r2
 80016f4:	e7a8      	b.n	8001648 <__aeabi_dadd+0x284>
 80016f6:	4642      	mov	r2, r8
 80016f8:	464c      	mov	r4, r9
 80016fa:	4314      	orrs	r4, r2
 80016fc:	1e62      	subs	r2, r4, #1
 80016fe:	4194      	sbcs	r4, r2
 8001700:	e6a6      	b.n	8001450 <__aeabi_dadd+0x8c>
 8001702:	4c0d      	ldr	r4, [pc, #52]	; (8001738 <__aeabi_dadd+0x374>)
 8001704:	1c72      	adds	r2, r6, #1
 8001706:	4222      	tst	r2, r4
 8001708:	d000      	beq.n	800170c <__aeabi_dadd+0x348>
 800170a:	e0a8      	b.n	800185e <__aeabi_dadd+0x49a>
 800170c:	000a      	movs	r2, r1
 800170e:	431a      	orrs	r2, r3
 8001710:	2e00      	cmp	r6, #0
 8001712:	d000      	beq.n	8001716 <__aeabi_dadd+0x352>
 8001714:	e10a      	b.n	800192c <__aeabi_dadd+0x568>
 8001716:	2a00      	cmp	r2, #0
 8001718:	d100      	bne.n	800171c <__aeabi_dadd+0x358>
 800171a:	e15e      	b.n	80019da <__aeabi_dadd+0x616>
 800171c:	464a      	mov	r2, r9
 800171e:	4302      	orrs	r2, r0
 8001720:	d000      	beq.n	8001724 <__aeabi_dadd+0x360>
 8001722:	e161      	b.n	80019e8 <__aeabi_dadd+0x624>
 8001724:	074a      	lsls	r2, r1, #29
 8001726:	08db      	lsrs	r3, r3, #3
 8001728:	4313      	orrs	r3, r2
 800172a:	08c9      	lsrs	r1, r1, #3
 800172c:	e77c      	b.n	8001628 <__aeabi_dadd+0x264>
 800172e:	46c0      	nop			; (mov r8, r8)
 8001730:	000007ff 	.word	0x000007ff
 8001734:	ff7fffff 	.word	0xff7fffff
 8001738:	000007fe 	.word	0x000007fe
 800173c:	4ccf      	ldr	r4, [pc, #828]	; (8001a7c <__aeabi_dadd+0x6b8>)
 800173e:	42a2      	cmp	r2, r4
 8001740:	d100      	bne.n	8001744 <__aeabi_dadd+0x380>
 8001742:	e0ce      	b.n	80018e2 <__aeabi_dadd+0x51e>
 8001744:	2480      	movs	r4, #128	; 0x80
 8001746:	0424      	lsls	r4, r4, #16
 8001748:	4321      	orrs	r1, r4
 800174a:	2f38      	cmp	r7, #56	; 0x38
 800174c:	dc5b      	bgt.n	8001806 <__aeabi_dadd+0x442>
 800174e:	2f1f      	cmp	r7, #31
 8001750:	dd00      	ble.n	8001754 <__aeabi_dadd+0x390>
 8001752:	e0dc      	b.n	800190e <__aeabi_dadd+0x54a>
 8001754:	2520      	movs	r5, #32
 8001756:	000c      	movs	r4, r1
 8001758:	1bed      	subs	r5, r5, r7
 800175a:	001e      	movs	r6, r3
 800175c:	40ab      	lsls	r3, r5
 800175e:	40ac      	lsls	r4, r5
 8001760:	40fe      	lsrs	r6, r7
 8001762:	1e5d      	subs	r5, r3, #1
 8001764:	41ab      	sbcs	r3, r5
 8001766:	4334      	orrs	r4, r6
 8001768:	40f9      	lsrs	r1, r7
 800176a:	431c      	orrs	r4, r3
 800176c:	464b      	mov	r3, r9
 800176e:	1a5b      	subs	r3, r3, r1
 8001770:	4699      	mov	r9, r3
 8001772:	e04c      	b.n	800180e <__aeabi_dadd+0x44a>
 8001774:	464a      	mov	r2, r9
 8001776:	1a1c      	subs	r4, r3, r0
 8001778:	1a88      	subs	r0, r1, r2
 800177a:	42a3      	cmp	r3, r4
 800177c:	4192      	sbcs	r2, r2
 800177e:	4252      	negs	r2, r2
 8001780:	4692      	mov	sl, r2
 8001782:	0002      	movs	r2, r0
 8001784:	4650      	mov	r0, sl
 8001786:	1a12      	subs	r2, r2, r0
 8001788:	4692      	mov	sl, r2
 800178a:	0212      	lsls	r2, r2, #8
 800178c:	d478      	bmi.n	8001880 <__aeabi_dadd+0x4bc>
 800178e:	4653      	mov	r3, sl
 8001790:	4323      	orrs	r3, r4
 8001792:	d000      	beq.n	8001796 <__aeabi_dadd+0x3d2>
 8001794:	e66a      	b.n	800146c <__aeabi_dadd+0xa8>
 8001796:	2100      	movs	r1, #0
 8001798:	2500      	movs	r5, #0
 800179a:	e745      	b.n	8001628 <__aeabi_dadd+0x264>
 800179c:	074a      	lsls	r2, r1, #29
 800179e:	08db      	lsrs	r3, r3, #3
 80017a0:	4313      	orrs	r3, r2
 80017a2:	08c9      	lsrs	r1, r1, #3
 80017a4:	e73d      	b.n	8001622 <__aeabi_dadd+0x25e>
 80017a6:	181c      	adds	r4, r3, r0
 80017a8:	429c      	cmp	r4, r3
 80017aa:	419b      	sbcs	r3, r3
 80017ac:	4449      	add	r1, r9
 80017ae:	468a      	mov	sl, r1
 80017b0:	425b      	negs	r3, r3
 80017b2:	449a      	add	sl, r3
 80017b4:	4653      	mov	r3, sl
 80017b6:	2601      	movs	r6, #1
 80017b8:	021b      	lsls	r3, r3, #8
 80017ba:	d400      	bmi.n	80017be <__aeabi_dadd+0x3fa>
 80017bc:	e727      	b.n	800160e <__aeabi_dadd+0x24a>
 80017be:	2602      	movs	r6, #2
 80017c0:	4652      	mov	r2, sl
 80017c2:	4baf      	ldr	r3, [pc, #700]	; (8001a80 <__aeabi_dadd+0x6bc>)
 80017c4:	2101      	movs	r1, #1
 80017c6:	401a      	ands	r2, r3
 80017c8:	0013      	movs	r3, r2
 80017ca:	4021      	ands	r1, r4
 80017cc:	0862      	lsrs	r2, r4, #1
 80017ce:	430a      	orrs	r2, r1
 80017d0:	07dc      	lsls	r4, r3, #31
 80017d2:	085b      	lsrs	r3, r3, #1
 80017d4:	469a      	mov	sl, r3
 80017d6:	4314      	orrs	r4, r2
 80017d8:	e670      	b.n	80014bc <__aeabi_dadd+0xf8>
 80017da:	003a      	movs	r2, r7
 80017dc:	464c      	mov	r4, r9
 80017de:	3a20      	subs	r2, #32
 80017e0:	40d4      	lsrs	r4, r2
 80017e2:	46a4      	mov	ip, r4
 80017e4:	2f20      	cmp	r7, #32
 80017e6:	d007      	beq.n	80017f8 <__aeabi_dadd+0x434>
 80017e8:	2240      	movs	r2, #64	; 0x40
 80017ea:	4648      	mov	r0, r9
 80017ec:	1bd2      	subs	r2, r2, r7
 80017ee:	4090      	lsls	r0, r2
 80017f0:	0002      	movs	r2, r0
 80017f2:	4640      	mov	r0, r8
 80017f4:	4310      	orrs	r0, r2
 80017f6:	4680      	mov	r8, r0
 80017f8:	4640      	mov	r0, r8
 80017fa:	1e42      	subs	r2, r0, #1
 80017fc:	4190      	sbcs	r0, r2
 80017fe:	4662      	mov	r2, ip
 8001800:	0004      	movs	r4, r0
 8001802:	4314      	orrs	r4, r2
 8001804:	e624      	b.n	8001450 <__aeabi_dadd+0x8c>
 8001806:	4319      	orrs	r1, r3
 8001808:	000c      	movs	r4, r1
 800180a:	1e63      	subs	r3, r4, #1
 800180c:	419c      	sbcs	r4, r3
 800180e:	4643      	mov	r3, r8
 8001810:	1b1c      	subs	r4, r3, r4
 8001812:	45a0      	cmp	r8, r4
 8001814:	419b      	sbcs	r3, r3
 8001816:	4649      	mov	r1, r9
 8001818:	425b      	negs	r3, r3
 800181a:	1acb      	subs	r3, r1, r3
 800181c:	469a      	mov	sl, r3
 800181e:	4665      	mov	r5, ip
 8001820:	0016      	movs	r6, r2
 8001822:	e61b      	b.n	800145c <__aeabi_dadd+0x98>
 8001824:	000c      	movs	r4, r1
 8001826:	431c      	orrs	r4, r3
 8001828:	d100      	bne.n	800182c <__aeabi_dadd+0x468>
 800182a:	e0c7      	b.n	80019bc <__aeabi_dadd+0x5f8>
 800182c:	1e7c      	subs	r4, r7, #1
 800182e:	2f01      	cmp	r7, #1
 8001830:	d100      	bne.n	8001834 <__aeabi_dadd+0x470>
 8001832:	e0f9      	b.n	8001a28 <__aeabi_dadd+0x664>
 8001834:	4e91      	ldr	r6, [pc, #580]	; (8001a7c <__aeabi_dadd+0x6b8>)
 8001836:	42b7      	cmp	r7, r6
 8001838:	d05c      	beq.n	80018f4 <__aeabi_dadd+0x530>
 800183a:	0027      	movs	r7, r4
 800183c:	e740      	b.n	80016c0 <__aeabi_dadd+0x2fc>
 800183e:	2220      	movs	r2, #32
 8001840:	464c      	mov	r4, r9
 8001842:	4640      	mov	r0, r8
 8001844:	1bd2      	subs	r2, r2, r7
 8001846:	4094      	lsls	r4, r2
 8001848:	40f8      	lsrs	r0, r7
 800184a:	4304      	orrs	r4, r0
 800184c:	4640      	mov	r0, r8
 800184e:	4090      	lsls	r0, r2
 8001850:	1e42      	subs	r2, r0, #1
 8001852:	4190      	sbcs	r0, r2
 8001854:	464a      	mov	r2, r9
 8001856:	40fa      	lsrs	r2, r7
 8001858:	4304      	orrs	r4, r0
 800185a:	1889      	adds	r1, r1, r2
 800185c:	e6ee      	b.n	800163c <__aeabi_dadd+0x278>
 800185e:	4c87      	ldr	r4, [pc, #540]	; (8001a7c <__aeabi_dadd+0x6b8>)
 8001860:	42a2      	cmp	r2, r4
 8001862:	d100      	bne.n	8001866 <__aeabi_dadd+0x4a2>
 8001864:	e6f9      	b.n	800165a <__aeabi_dadd+0x296>
 8001866:	1818      	adds	r0, r3, r0
 8001868:	4298      	cmp	r0, r3
 800186a:	419b      	sbcs	r3, r3
 800186c:	4449      	add	r1, r9
 800186e:	425b      	negs	r3, r3
 8001870:	18cb      	adds	r3, r1, r3
 8001872:	07dc      	lsls	r4, r3, #31
 8001874:	0840      	lsrs	r0, r0, #1
 8001876:	085b      	lsrs	r3, r3, #1
 8001878:	469a      	mov	sl, r3
 800187a:	0016      	movs	r6, r2
 800187c:	4304      	orrs	r4, r0
 800187e:	e6c6      	b.n	800160e <__aeabi_dadd+0x24a>
 8001880:	4642      	mov	r2, r8
 8001882:	1ad4      	subs	r4, r2, r3
 8001884:	45a0      	cmp	r8, r4
 8001886:	4180      	sbcs	r0, r0
 8001888:	464b      	mov	r3, r9
 800188a:	4240      	negs	r0, r0
 800188c:	1a59      	subs	r1, r3, r1
 800188e:	1a0b      	subs	r3, r1, r0
 8001890:	469a      	mov	sl, r3
 8001892:	4665      	mov	r5, ip
 8001894:	e5ea      	b.n	800146c <__aeabi_dadd+0xa8>
 8001896:	464b      	mov	r3, r9
 8001898:	464a      	mov	r2, r9
 800189a:	08c0      	lsrs	r0, r0, #3
 800189c:	075b      	lsls	r3, r3, #29
 800189e:	4665      	mov	r5, ip
 80018a0:	4303      	orrs	r3, r0
 80018a2:	08d1      	lsrs	r1, r2, #3
 80018a4:	e6bd      	b.n	8001622 <__aeabi_dadd+0x25e>
 80018a6:	2a00      	cmp	r2, #0
 80018a8:	d000      	beq.n	80018ac <__aeabi_dadd+0x4e8>
 80018aa:	e08e      	b.n	80019ca <__aeabi_dadd+0x606>
 80018ac:	464b      	mov	r3, r9
 80018ae:	4303      	orrs	r3, r0
 80018b0:	d117      	bne.n	80018e2 <__aeabi_dadd+0x51e>
 80018b2:	2180      	movs	r1, #128	; 0x80
 80018b4:	2500      	movs	r5, #0
 80018b6:	0309      	lsls	r1, r1, #12
 80018b8:	e6da      	b.n	8001670 <__aeabi_dadd+0x2ac>
 80018ba:	074a      	lsls	r2, r1, #29
 80018bc:	08db      	lsrs	r3, r3, #3
 80018be:	4313      	orrs	r3, r2
 80018c0:	08c9      	lsrs	r1, r1, #3
 80018c2:	e6d1      	b.n	8001668 <__aeabi_dadd+0x2a4>
 80018c4:	1a1c      	subs	r4, r3, r0
 80018c6:	464a      	mov	r2, r9
 80018c8:	42a3      	cmp	r3, r4
 80018ca:	419b      	sbcs	r3, r3
 80018cc:	1a89      	subs	r1, r1, r2
 80018ce:	425b      	negs	r3, r3
 80018d0:	1acb      	subs	r3, r1, r3
 80018d2:	469a      	mov	sl, r3
 80018d4:	2601      	movs	r6, #1
 80018d6:	e5c1      	b.n	800145c <__aeabi_dadd+0x98>
 80018d8:	074a      	lsls	r2, r1, #29
 80018da:	08db      	lsrs	r3, r3, #3
 80018dc:	4313      	orrs	r3, r2
 80018de:	08c9      	lsrs	r1, r1, #3
 80018e0:	e69f      	b.n	8001622 <__aeabi_dadd+0x25e>
 80018e2:	4643      	mov	r3, r8
 80018e4:	08d8      	lsrs	r0, r3, #3
 80018e6:	464b      	mov	r3, r9
 80018e8:	464a      	mov	r2, r9
 80018ea:	075b      	lsls	r3, r3, #29
 80018ec:	4665      	mov	r5, ip
 80018ee:	4303      	orrs	r3, r0
 80018f0:	08d1      	lsrs	r1, r2, #3
 80018f2:	e6b9      	b.n	8001668 <__aeabi_dadd+0x2a4>
 80018f4:	4643      	mov	r3, r8
 80018f6:	08d8      	lsrs	r0, r3, #3
 80018f8:	464b      	mov	r3, r9
 80018fa:	464a      	mov	r2, r9
 80018fc:	075b      	lsls	r3, r3, #29
 80018fe:	4303      	orrs	r3, r0
 8001900:	08d1      	lsrs	r1, r2, #3
 8001902:	e6b1      	b.n	8001668 <__aeabi_dadd+0x2a4>
 8001904:	4319      	orrs	r1, r3
 8001906:	000c      	movs	r4, r1
 8001908:	1e63      	subs	r3, r4, #1
 800190a:	419c      	sbcs	r4, r3
 800190c:	e6eb      	b.n	80016e6 <__aeabi_dadd+0x322>
 800190e:	003c      	movs	r4, r7
 8001910:	000d      	movs	r5, r1
 8001912:	3c20      	subs	r4, #32
 8001914:	40e5      	lsrs	r5, r4
 8001916:	2f20      	cmp	r7, #32
 8001918:	d003      	beq.n	8001922 <__aeabi_dadd+0x55e>
 800191a:	2440      	movs	r4, #64	; 0x40
 800191c:	1be4      	subs	r4, r4, r7
 800191e:	40a1      	lsls	r1, r4
 8001920:	430b      	orrs	r3, r1
 8001922:	001c      	movs	r4, r3
 8001924:	1e63      	subs	r3, r4, #1
 8001926:	419c      	sbcs	r4, r3
 8001928:	432c      	orrs	r4, r5
 800192a:	e770      	b.n	800180e <__aeabi_dadd+0x44a>
 800192c:	2a00      	cmp	r2, #0
 800192e:	d0e1      	beq.n	80018f4 <__aeabi_dadd+0x530>
 8001930:	464a      	mov	r2, r9
 8001932:	4302      	orrs	r2, r0
 8001934:	d0c1      	beq.n	80018ba <__aeabi_dadd+0x4f6>
 8001936:	074a      	lsls	r2, r1, #29
 8001938:	08db      	lsrs	r3, r3, #3
 800193a:	4313      	orrs	r3, r2
 800193c:	2280      	movs	r2, #128	; 0x80
 800193e:	08c9      	lsrs	r1, r1, #3
 8001940:	0312      	lsls	r2, r2, #12
 8001942:	4211      	tst	r1, r2
 8001944:	d008      	beq.n	8001958 <__aeabi_dadd+0x594>
 8001946:	4648      	mov	r0, r9
 8001948:	08c4      	lsrs	r4, r0, #3
 800194a:	4214      	tst	r4, r2
 800194c:	d104      	bne.n	8001958 <__aeabi_dadd+0x594>
 800194e:	4643      	mov	r3, r8
 8001950:	0021      	movs	r1, r4
 8001952:	08db      	lsrs	r3, r3, #3
 8001954:	0742      	lsls	r2, r0, #29
 8001956:	4313      	orrs	r3, r2
 8001958:	0f5a      	lsrs	r2, r3, #29
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	0752      	lsls	r2, r2, #29
 800195e:	08db      	lsrs	r3, r3, #3
 8001960:	4313      	orrs	r3, r2
 8001962:	e681      	b.n	8001668 <__aeabi_dadd+0x2a4>
 8001964:	464b      	mov	r3, r9
 8001966:	4303      	orrs	r3, r0
 8001968:	d100      	bne.n	800196c <__aeabi_dadd+0x5a8>
 800196a:	e714      	b.n	8001796 <__aeabi_dadd+0x3d2>
 800196c:	464b      	mov	r3, r9
 800196e:	464a      	mov	r2, r9
 8001970:	08c0      	lsrs	r0, r0, #3
 8001972:	075b      	lsls	r3, r3, #29
 8001974:	4665      	mov	r5, ip
 8001976:	4303      	orrs	r3, r0
 8001978:	08d1      	lsrs	r1, r2, #3
 800197a:	e655      	b.n	8001628 <__aeabi_dadd+0x264>
 800197c:	1ac4      	subs	r4, r0, r3
 800197e:	45a0      	cmp	r8, r4
 8001980:	4180      	sbcs	r0, r0
 8001982:	464b      	mov	r3, r9
 8001984:	4240      	negs	r0, r0
 8001986:	1a59      	subs	r1, r3, r1
 8001988:	1a0b      	subs	r3, r1, r0
 800198a:	469a      	mov	sl, r3
 800198c:	4665      	mov	r5, ip
 800198e:	2601      	movs	r6, #1
 8001990:	e564      	b.n	800145c <__aeabi_dadd+0x98>
 8001992:	1a1c      	subs	r4, r3, r0
 8001994:	464a      	mov	r2, r9
 8001996:	42a3      	cmp	r3, r4
 8001998:	4180      	sbcs	r0, r0
 800199a:	1a8a      	subs	r2, r1, r2
 800199c:	4240      	negs	r0, r0
 800199e:	1a12      	subs	r2, r2, r0
 80019a0:	4692      	mov	sl, r2
 80019a2:	0212      	lsls	r2, r2, #8
 80019a4:	d549      	bpl.n	8001a3a <__aeabi_dadd+0x676>
 80019a6:	4642      	mov	r2, r8
 80019a8:	1ad4      	subs	r4, r2, r3
 80019aa:	45a0      	cmp	r8, r4
 80019ac:	4180      	sbcs	r0, r0
 80019ae:	464b      	mov	r3, r9
 80019b0:	4240      	negs	r0, r0
 80019b2:	1a59      	subs	r1, r3, r1
 80019b4:	1a0b      	subs	r3, r1, r0
 80019b6:	469a      	mov	sl, r3
 80019b8:	4665      	mov	r5, ip
 80019ba:	e57f      	b.n	80014bc <__aeabi_dadd+0xf8>
 80019bc:	464b      	mov	r3, r9
 80019be:	464a      	mov	r2, r9
 80019c0:	08c0      	lsrs	r0, r0, #3
 80019c2:	075b      	lsls	r3, r3, #29
 80019c4:	4303      	orrs	r3, r0
 80019c6:	08d1      	lsrs	r1, r2, #3
 80019c8:	e62b      	b.n	8001622 <__aeabi_dadd+0x25e>
 80019ca:	464a      	mov	r2, r9
 80019cc:	08db      	lsrs	r3, r3, #3
 80019ce:	4302      	orrs	r2, r0
 80019d0:	d138      	bne.n	8001a44 <__aeabi_dadd+0x680>
 80019d2:	074a      	lsls	r2, r1, #29
 80019d4:	4313      	orrs	r3, r2
 80019d6:	08c9      	lsrs	r1, r1, #3
 80019d8:	e646      	b.n	8001668 <__aeabi_dadd+0x2a4>
 80019da:	464b      	mov	r3, r9
 80019dc:	464a      	mov	r2, r9
 80019de:	08c0      	lsrs	r0, r0, #3
 80019e0:	075b      	lsls	r3, r3, #29
 80019e2:	4303      	orrs	r3, r0
 80019e4:	08d1      	lsrs	r1, r2, #3
 80019e6:	e61f      	b.n	8001628 <__aeabi_dadd+0x264>
 80019e8:	181c      	adds	r4, r3, r0
 80019ea:	429c      	cmp	r4, r3
 80019ec:	419b      	sbcs	r3, r3
 80019ee:	4449      	add	r1, r9
 80019f0:	468a      	mov	sl, r1
 80019f2:	425b      	negs	r3, r3
 80019f4:	449a      	add	sl, r3
 80019f6:	4653      	mov	r3, sl
 80019f8:	021b      	lsls	r3, r3, #8
 80019fa:	d400      	bmi.n	80019fe <__aeabi_dadd+0x63a>
 80019fc:	e607      	b.n	800160e <__aeabi_dadd+0x24a>
 80019fe:	4652      	mov	r2, sl
 8001a00:	4b1f      	ldr	r3, [pc, #124]	; (8001a80 <__aeabi_dadd+0x6bc>)
 8001a02:	2601      	movs	r6, #1
 8001a04:	401a      	ands	r2, r3
 8001a06:	4692      	mov	sl, r2
 8001a08:	e601      	b.n	800160e <__aeabi_dadd+0x24a>
 8001a0a:	003c      	movs	r4, r7
 8001a0c:	000e      	movs	r6, r1
 8001a0e:	3c20      	subs	r4, #32
 8001a10:	40e6      	lsrs	r6, r4
 8001a12:	2f20      	cmp	r7, #32
 8001a14:	d003      	beq.n	8001a1e <__aeabi_dadd+0x65a>
 8001a16:	2440      	movs	r4, #64	; 0x40
 8001a18:	1be4      	subs	r4, r4, r7
 8001a1a:	40a1      	lsls	r1, r4
 8001a1c:	430b      	orrs	r3, r1
 8001a1e:	001c      	movs	r4, r3
 8001a20:	1e63      	subs	r3, r4, #1
 8001a22:	419c      	sbcs	r4, r3
 8001a24:	4334      	orrs	r4, r6
 8001a26:	e65e      	b.n	80016e6 <__aeabi_dadd+0x322>
 8001a28:	4443      	add	r3, r8
 8001a2a:	4283      	cmp	r3, r0
 8001a2c:	4180      	sbcs	r0, r0
 8001a2e:	4449      	add	r1, r9
 8001a30:	468a      	mov	sl, r1
 8001a32:	4240      	negs	r0, r0
 8001a34:	001c      	movs	r4, r3
 8001a36:	4482      	add	sl, r0
 8001a38:	e6bc      	b.n	80017b4 <__aeabi_dadd+0x3f0>
 8001a3a:	4653      	mov	r3, sl
 8001a3c:	4323      	orrs	r3, r4
 8001a3e:	d100      	bne.n	8001a42 <__aeabi_dadd+0x67e>
 8001a40:	e6a9      	b.n	8001796 <__aeabi_dadd+0x3d2>
 8001a42:	e5e4      	b.n	800160e <__aeabi_dadd+0x24a>
 8001a44:	074a      	lsls	r2, r1, #29
 8001a46:	4313      	orrs	r3, r2
 8001a48:	2280      	movs	r2, #128	; 0x80
 8001a4a:	08c9      	lsrs	r1, r1, #3
 8001a4c:	0312      	lsls	r2, r2, #12
 8001a4e:	4211      	tst	r1, r2
 8001a50:	d009      	beq.n	8001a66 <__aeabi_dadd+0x6a2>
 8001a52:	4648      	mov	r0, r9
 8001a54:	08c4      	lsrs	r4, r0, #3
 8001a56:	4214      	tst	r4, r2
 8001a58:	d105      	bne.n	8001a66 <__aeabi_dadd+0x6a2>
 8001a5a:	4643      	mov	r3, r8
 8001a5c:	4665      	mov	r5, ip
 8001a5e:	0021      	movs	r1, r4
 8001a60:	08db      	lsrs	r3, r3, #3
 8001a62:	0742      	lsls	r2, r0, #29
 8001a64:	4313      	orrs	r3, r2
 8001a66:	0f5a      	lsrs	r2, r3, #29
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	08db      	lsrs	r3, r3, #3
 8001a6c:	0752      	lsls	r2, r2, #29
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	e5fa      	b.n	8001668 <__aeabi_dadd+0x2a4>
 8001a72:	2300      	movs	r3, #0
 8001a74:	4a01      	ldr	r2, [pc, #4]	; (8001a7c <__aeabi_dadd+0x6b8>)
 8001a76:	001c      	movs	r4, r3
 8001a78:	e540      	b.n	80014fc <__aeabi_dadd+0x138>
 8001a7a:	46c0      	nop			; (mov r8, r8)
 8001a7c:	000007ff 	.word	0x000007ff
 8001a80:	ff7fffff 	.word	0xff7fffff

08001a84 <__aeabi_ddiv>:
 8001a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a86:	4657      	mov	r7, sl
 8001a88:	464e      	mov	r6, r9
 8001a8a:	4645      	mov	r5, r8
 8001a8c:	46de      	mov	lr, fp
 8001a8e:	b5e0      	push	{r5, r6, r7, lr}
 8001a90:	030c      	lsls	r4, r1, #12
 8001a92:	001f      	movs	r7, r3
 8001a94:	004b      	lsls	r3, r1, #1
 8001a96:	4681      	mov	r9, r0
 8001a98:	4692      	mov	sl, r2
 8001a9a:	0005      	movs	r5, r0
 8001a9c:	b085      	sub	sp, #20
 8001a9e:	0b24      	lsrs	r4, r4, #12
 8001aa0:	0d5b      	lsrs	r3, r3, #21
 8001aa2:	0fce      	lsrs	r6, r1, #31
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d100      	bne.n	8001aaa <__aeabi_ddiv+0x26>
 8001aa8:	e152      	b.n	8001d50 <__aeabi_ddiv+0x2cc>
 8001aaa:	4ad2      	ldr	r2, [pc, #840]	; (8001df4 <__aeabi_ddiv+0x370>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d100      	bne.n	8001ab2 <__aeabi_ddiv+0x2e>
 8001ab0:	e16e      	b.n	8001d90 <__aeabi_ddiv+0x30c>
 8001ab2:	0f42      	lsrs	r2, r0, #29
 8001ab4:	00e4      	lsls	r4, r4, #3
 8001ab6:	4314      	orrs	r4, r2
 8001ab8:	2280      	movs	r2, #128	; 0x80
 8001aba:	0412      	lsls	r2, r2, #16
 8001abc:	4322      	orrs	r2, r4
 8001abe:	4690      	mov	r8, r2
 8001ac0:	4acd      	ldr	r2, [pc, #820]	; (8001df8 <__aeabi_ddiv+0x374>)
 8001ac2:	00c5      	lsls	r5, r0, #3
 8001ac4:	4693      	mov	fp, r2
 8001ac6:	449b      	add	fp, r3
 8001ac8:	2300      	movs	r3, #0
 8001aca:	4699      	mov	r9, r3
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	033c      	lsls	r4, r7, #12
 8001ad0:	007b      	lsls	r3, r7, #1
 8001ad2:	4650      	mov	r0, sl
 8001ad4:	0b24      	lsrs	r4, r4, #12
 8001ad6:	0d5b      	lsrs	r3, r3, #21
 8001ad8:	0fff      	lsrs	r7, r7, #31
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d100      	bne.n	8001ae0 <__aeabi_ddiv+0x5c>
 8001ade:	e11a      	b.n	8001d16 <__aeabi_ddiv+0x292>
 8001ae0:	4ac4      	ldr	r2, [pc, #784]	; (8001df4 <__aeabi_ddiv+0x370>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d100      	bne.n	8001ae8 <__aeabi_ddiv+0x64>
 8001ae6:	e15e      	b.n	8001da6 <__aeabi_ddiv+0x322>
 8001ae8:	0f42      	lsrs	r2, r0, #29
 8001aea:	00e4      	lsls	r4, r4, #3
 8001aec:	4322      	orrs	r2, r4
 8001aee:	2480      	movs	r4, #128	; 0x80
 8001af0:	0424      	lsls	r4, r4, #16
 8001af2:	4314      	orrs	r4, r2
 8001af4:	4ac0      	ldr	r2, [pc, #768]	; (8001df8 <__aeabi_ddiv+0x374>)
 8001af6:	00c1      	lsls	r1, r0, #3
 8001af8:	4694      	mov	ip, r2
 8001afa:	465a      	mov	r2, fp
 8001afc:	4463      	add	r3, ip
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	469b      	mov	fp, r3
 8001b02:	2000      	movs	r0, #0
 8001b04:	0033      	movs	r3, r6
 8001b06:	407b      	eors	r3, r7
 8001b08:	469a      	mov	sl, r3
 8001b0a:	464b      	mov	r3, r9
 8001b0c:	2b0f      	cmp	r3, #15
 8001b0e:	d827      	bhi.n	8001b60 <__aeabi_ddiv+0xdc>
 8001b10:	4aba      	ldr	r2, [pc, #744]	; (8001dfc <__aeabi_ddiv+0x378>)
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	58d3      	ldr	r3, [r2, r3]
 8001b16:	469f      	mov	pc, r3
 8001b18:	46b2      	mov	sl, r6
 8001b1a:	9b00      	ldr	r3, [sp, #0]
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d016      	beq.n	8001b4e <__aeabi_ddiv+0xca>
 8001b20:	2b03      	cmp	r3, #3
 8001b22:	d100      	bne.n	8001b26 <__aeabi_ddiv+0xa2>
 8001b24:	e287      	b.n	8002036 <__aeabi_ddiv+0x5b2>
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d000      	beq.n	8001b2c <__aeabi_ddiv+0xa8>
 8001b2a:	e0d5      	b.n	8001cd8 <__aeabi_ddiv+0x254>
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2500      	movs	r5, #0
 8001b32:	051b      	lsls	r3, r3, #20
 8001b34:	4313      	orrs	r3, r2
 8001b36:	4652      	mov	r2, sl
 8001b38:	07d2      	lsls	r2, r2, #31
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	0028      	movs	r0, r5
 8001b3e:	0019      	movs	r1, r3
 8001b40:	b005      	add	sp, #20
 8001b42:	bcf0      	pop	{r4, r5, r6, r7}
 8001b44:	46bb      	mov	fp, r7
 8001b46:	46b2      	mov	sl, r6
 8001b48:	46a9      	mov	r9, r5
 8001b4a:	46a0      	mov	r8, r4
 8001b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2500      	movs	r5, #0
 8001b52:	4ba8      	ldr	r3, [pc, #672]	; (8001df4 <__aeabi_ddiv+0x370>)
 8001b54:	e7ed      	b.n	8001b32 <__aeabi_ddiv+0xae>
 8001b56:	46ba      	mov	sl, r7
 8001b58:	46a0      	mov	r8, r4
 8001b5a:	000d      	movs	r5, r1
 8001b5c:	9000      	str	r0, [sp, #0]
 8001b5e:	e7dc      	b.n	8001b1a <__aeabi_ddiv+0x96>
 8001b60:	4544      	cmp	r4, r8
 8001b62:	d200      	bcs.n	8001b66 <__aeabi_ddiv+0xe2>
 8001b64:	e1c4      	b.n	8001ef0 <__aeabi_ddiv+0x46c>
 8001b66:	d100      	bne.n	8001b6a <__aeabi_ddiv+0xe6>
 8001b68:	e1bf      	b.n	8001eea <__aeabi_ddiv+0x466>
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	425b      	negs	r3, r3
 8001b6e:	469c      	mov	ip, r3
 8001b70:	002e      	movs	r6, r5
 8001b72:	4640      	mov	r0, r8
 8001b74:	2500      	movs	r5, #0
 8001b76:	44e3      	add	fp, ip
 8001b78:	0223      	lsls	r3, r4, #8
 8001b7a:	0e0c      	lsrs	r4, r1, #24
 8001b7c:	431c      	orrs	r4, r3
 8001b7e:	0c1b      	lsrs	r3, r3, #16
 8001b80:	4699      	mov	r9, r3
 8001b82:	0423      	lsls	r3, r4, #16
 8001b84:	020a      	lsls	r2, r1, #8
 8001b86:	0c1f      	lsrs	r7, r3, #16
 8001b88:	4649      	mov	r1, r9
 8001b8a:	9200      	str	r2, [sp, #0]
 8001b8c:	9701      	str	r7, [sp, #4]
 8001b8e:	f7fe fb5d 	bl	800024c <__aeabi_uidivmod>
 8001b92:	0002      	movs	r2, r0
 8001b94:	437a      	muls	r2, r7
 8001b96:	040b      	lsls	r3, r1, #16
 8001b98:	0c31      	lsrs	r1, r6, #16
 8001b9a:	4680      	mov	r8, r0
 8001b9c:	4319      	orrs	r1, r3
 8001b9e:	428a      	cmp	r2, r1
 8001ba0:	d907      	bls.n	8001bb2 <__aeabi_ddiv+0x12e>
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	425b      	negs	r3, r3
 8001ba6:	469c      	mov	ip, r3
 8001ba8:	1909      	adds	r1, r1, r4
 8001baa:	44e0      	add	r8, ip
 8001bac:	428c      	cmp	r4, r1
 8001bae:	d800      	bhi.n	8001bb2 <__aeabi_ddiv+0x12e>
 8001bb0:	e201      	b.n	8001fb6 <__aeabi_ddiv+0x532>
 8001bb2:	1a88      	subs	r0, r1, r2
 8001bb4:	4649      	mov	r1, r9
 8001bb6:	f7fe fb49 	bl	800024c <__aeabi_uidivmod>
 8001bba:	9a01      	ldr	r2, [sp, #4]
 8001bbc:	0436      	lsls	r6, r6, #16
 8001bbe:	4342      	muls	r2, r0
 8001bc0:	0409      	lsls	r1, r1, #16
 8001bc2:	0c36      	lsrs	r6, r6, #16
 8001bc4:	0003      	movs	r3, r0
 8001bc6:	430e      	orrs	r6, r1
 8001bc8:	42b2      	cmp	r2, r6
 8001bca:	d904      	bls.n	8001bd6 <__aeabi_ddiv+0x152>
 8001bcc:	1936      	adds	r6, r6, r4
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	42b4      	cmp	r4, r6
 8001bd2:	d800      	bhi.n	8001bd6 <__aeabi_ddiv+0x152>
 8001bd4:	e1e9      	b.n	8001faa <__aeabi_ddiv+0x526>
 8001bd6:	1ab0      	subs	r0, r6, r2
 8001bd8:	4642      	mov	r2, r8
 8001bda:	9e00      	ldr	r6, [sp, #0]
 8001bdc:	0412      	lsls	r2, r2, #16
 8001bde:	431a      	orrs	r2, r3
 8001be0:	0c33      	lsrs	r3, r6, #16
 8001be2:	001f      	movs	r7, r3
 8001be4:	0c11      	lsrs	r1, r2, #16
 8001be6:	4690      	mov	r8, r2
 8001be8:	9302      	str	r3, [sp, #8]
 8001bea:	0413      	lsls	r3, r2, #16
 8001bec:	0432      	lsls	r2, r6, #16
 8001bee:	0c16      	lsrs	r6, r2, #16
 8001bf0:	0032      	movs	r2, r6
 8001bf2:	0c1b      	lsrs	r3, r3, #16
 8001bf4:	435a      	muls	r2, r3
 8001bf6:	9603      	str	r6, [sp, #12]
 8001bf8:	437b      	muls	r3, r7
 8001bfa:	434e      	muls	r6, r1
 8001bfc:	4379      	muls	r1, r7
 8001bfe:	0c17      	lsrs	r7, r2, #16
 8001c00:	46bc      	mov	ip, r7
 8001c02:	199b      	adds	r3, r3, r6
 8001c04:	4463      	add	r3, ip
 8001c06:	429e      	cmp	r6, r3
 8001c08:	d903      	bls.n	8001c12 <__aeabi_ddiv+0x18e>
 8001c0a:	2680      	movs	r6, #128	; 0x80
 8001c0c:	0276      	lsls	r6, r6, #9
 8001c0e:	46b4      	mov	ip, r6
 8001c10:	4461      	add	r1, ip
 8001c12:	0c1e      	lsrs	r6, r3, #16
 8001c14:	1871      	adds	r1, r6, r1
 8001c16:	0416      	lsls	r6, r2, #16
 8001c18:	041b      	lsls	r3, r3, #16
 8001c1a:	0c36      	lsrs	r6, r6, #16
 8001c1c:	199e      	adds	r6, r3, r6
 8001c1e:	4288      	cmp	r0, r1
 8001c20:	d302      	bcc.n	8001c28 <__aeabi_ddiv+0x1a4>
 8001c22:	d112      	bne.n	8001c4a <__aeabi_ddiv+0x1c6>
 8001c24:	42b5      	cmp	r5, r6
 8001c26:	d210      	bcs.n	8001c4a <__aeabi_ddiv+0x1c6>
 8001c28:	4643      	mov	r3, r8
 8001c2a:	1e5a      	subs	r2, r3, #1
 8001c2c:	9b00      	ldr	r3, [sp, #0]
 8001c2e:	469c      	mov	ip, r3
 8001c30:	4465      	add	r5, ip
 8001c32:	001f      	movs	r7, r3
 8001c34:	429d      	cmp	r5, r3
 8001c36:	419b      	sbcs	r3, r3
 8001c38:	425b      	negs	r3, r3
 8001c3a:	191b      	adds	r3, r3, r4
 8001c3c:	18c0      	adds	r0, r0, r3
 8001c3e:	4284      	cmp	r4, r0
 8001c40:	d200      	bcs.n	8001c44 <__aeabi_ddiv+0x1c0>
 8001c42:	e19e      	b.n	8001f82 <__aeabi_ddiv+0x4fe>
 8001c44:	d100      	bne.n	8001c48 <__aeabi_ddiv+0x1c4>
 8001c46:	e199      	b.n	8001f7c <__aeabi_ddiv+0x4f8>
 8001c48:	4690      	mov	r8, r2
 8001c4a:	1bae      	subs	r6, r5, r6
 8001c4c:	42b5      	cmp	r5, r6
 8001c4e:	41ad      	sbcs	r5, r5
 8001c50:	1a40      	subs	r0, r0, r1
 8001c52:	426d      	negs	r5, r5
 8001c54:	1b40      	subs	r0, r0, r5
 8001c56:	4284      	cmp	r4, r0
 8001c58:	d100      	bne.n	8001c5c <__aeabi_ddiv+0x1d8>
 8001c5a:	e1d2      	b.n	8002002 <__aeabi_ddiv+0x57e>
 8001c5c:	4649      	mov	r1, r9
 8001c5e:	f7fe faf5 	bl	800024c <__aeabi_uidivmod>
 8001c62:	9a01      	ldr	r2, [sp, #4]
 8001c64:	040b      	lsls	r3, r1, #16
 8001c66:	4342      	muls	r2, r0
 8001c68:	0c31      	lsrs	r1, r6, #16
 8001c6a:	0005      	movs	r5, r0
 8001c6c:	4319      	orrs	r1, r3
 8001c6e:	428a      	cmp	r2, r1
 8001c70:	d900      	bls.n	8001c74 <__aeabi_ddiv+0x1f0>
 8001c72:	e16c      	b.n	8001f4e <__aeabi_ddiv+0x4ca>
 8001c74:	1a88      	subs	r0, r1, r2
 8001c76:	4649      	mov	r1, r9
 8001c78:	f7fe fae8 	bl	800024c <__aeabi_uidivmod>
 8001c7c:	9a01      	ldr	r2, [sp, #4]
 8001c7e:	0436      	lsls	r6, r6, #16
 8001c80:	4342      	muls	r2, r0
 8001c82:	0409      	lsls	r1, r1, #16
 8001c84:	0c36      	lsrs	r6, r6, #16
 8001c86:	0003      	movs	r3, r0
 8001c88:	430e      	orrs	r6, r1
 8001c8a:	42b2      	cmp	r2, r6
 8001c8c:	d900      	bls.n	8001c90 <__aeabi_ddiv+0x20c>
 8001c8e:	e153      	b.n	8001f38 <__aeabi_ddiv+0x4b4>
 8001c90:	9803      	ldr	r0, [sp, #12]
 8001c92:	1ab6      	subs	r6, r6, r2
 8001c94:	0002      	movs	r2, r0
 8001c96:	042d      	lsls	r5, r5, #16
 8001c98:	431d      	orrs	r5, r3
 8001c9a:	9f02      	ldr	r7, [sp, #8]
 8001c9c:	042b      	lsls	r3, r5, #16
 8001c9e:	0c1b      	lsrs	r3, r3, #16
 8001ca0:	435a      	muls	r2, r3
 8001ca2:	437b      	muls	r3, r7
 8001ca4:	469c      	mov	ip, r3
 8001ca6:	0c29      	lsrs	r1, r5, #16
 8001ca8:	4348      	muls	r0, r1
 8001caa:	0c13      	lsrs	r3, r2, #16
 8001cac:	4484      	add	ip, r0
 8001cae:	4463      	add	r3, ip
 8001cb0:	4379      	muls	r1, r7
 8001cb2:	4298      	cmp	r0, r3
 8001cb4:	d903      	bls.n	8001cbe <__aeabi_ddiv+0x23a>
 8001cb6:	2080      	movs	r0, #128	; 0x80
 8001cb8:	0240      	lsls	r0, r0, #9
 8001cba:	4684      	mov	ip, r0
 8001cbc:	4461      	add	r1, ip
 8001cbe:	0c18      	lsrs	r0, r3, #16
 8001cc0:	0412      	lsls	r2, r2, #16
 8001cc2:	041b      	lsls	r3, r3, #16
 8001cc4:	0c12      	lsrs	r2, r2, #16
 8001cc6:	1840      	adds	r0, r0, r1
 8001cc8:	189b      	adds	r3, r3, r2
 8001cca:	4286      	cmp	r6, r0
 8001ccc:	d200      	bcs.n	8001cd0 <__aeabi_ddiv+0x24c>
 8001cce:	e100      	b.n	8001ed2 <__aeabi_ddiv+0x44e>
 8001cd0:	d100      	bne.n	8001cd4 <__aeabi_ddiv+0x250>
 8001cd2:	e0fb      	b.n	8001ecc <__aeabi_ddiv+0x448>
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	431d      	orrs	r5, r3
 8001cd8:	4b49      	ldr	r3, [pc, #292]	; (8001e00 <__aeabi_ddiv+0x37c>)
 8001cda:	445b      	add	r3, fp
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	dc00      	bgt.n	8001ce2 <__aeabi_ddiv+0x25e>
 8001ce0:	e0aa      	b.n	8001e38 <__aeabi_ddiv+0x3b4>
 8001ce2:	076a      	lsls	r2, r5, #29
 8001ce4:	d000      	beq.n	8001ce8 <__aeabi_ddiv+0x264>
 8001ce6:	e13d      	b.n	8001f64 <__aeabi_ddiv+0x4e0>
 8001ce8:	08e9      	lsrs	r1, r5, #3
 8001cea:	4642      	mov	r2, r8
 8001cec:	01d2      	lsls	r2, r2, #7
 8001cee:	d506      	bpl.n	8001cfe <__aeabi_ddiv+0x27a>
 8001cf0:	4642      	mov	r2, r8
 8001cf2:	4b44      	ldr	r3, [pc, #272]	; (8001e04 <__aeabi_ddiv+0x380>)
 8001cf4:	401a      	ands	r2, r3
 8001cf6:	2380      	movs	r3, #128	; 0x80
 8001cf8:	4690      	mov	r8, r2
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	445b      	add	r3, fp
 8001cfe:	4a42      	ldr	r2, [pc, #264]	; (8001e08 <__aeabi_ddiv+0x384>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	dd00      	ble.n	8001d06 <__aeabi_ddiv+0x282>
 8001d04:	e723      	b.n	8001b4e <__aeabi_ddiv+0xca>
 8001d06:	4642      	mov	r2, r8
 8001d08:	055b      	lsls	r3, r3, #21
 8001d0a:	0755      	lsls	r5, r2, #29
 8001d0c:	0252      	lsls	r2, r2, #9
 8001d0e:	430d      	orrs	r5, r1
 8001d10:	0b12      	lsrs	r2, r2, #12
 8001d12:	0d5b      	lsrs	r3, r3, #21
 8001d14:	e70d      	b.n	8001b32 <__aeabi_ddiv+0xae>
 8001d16:	4651      	mov	r1, sl
 8001d18:	4321      	orrs	r1, r4
 8001d1a:	d100      	bne.n	8001d1e <__aeabi_ddiv+0x29a>
 8001d1c:	e07c      	b.n	8001e18 <__aeabi_ddiv+0x394>
 8001d1e:	2c00      	cmp	r4, #0
 8001d20:	d100      	bne.n	8001d24 <__aeabi_ddiv+0x2a0>
 8001d22:	e0fb      	b.n	8001f1c <__aeabi_ddiv+0x498>
 8001d24:	0020      	movs	r0, r4
 8001d26:	f001 fa63 	bl	80031f0 <__clzsi2>
 8001d2a:	0002      	movs	r2, r0
 8001d2c:	3a0b      	subs	r2, #11
 8001d2e:	231d      	movs	r3, #29
 8001d30:	1a9b      	subs	r3, r3, r2
 8001d32:	4652      	mov	r2, sl
 8001d34:	0001      	movs	r1, r0
 8001d36:	40da      	lsrs	r2, r3
 8001d38:	4653      	mov	r3, sl
 8001d3a:	3908      	subs	r1, #8
 8001d3c:	408b      	lsls	r3, r1
 8001d3e:	408c      	lsls	r4, r1
 8001d40:	0019      	movs	r1, r3
 8001d42:	4314      	orrs	r4, r2
 8001d44:	4b31      	ldr	r3, [pc, #196]	; (8001e0c <__aeabi_ddiv+0x388>)
 8001d46:	4458      	add	r0, fp
 8001d48:	469b      	mov	fp, r3
 8001d4a:	4483      	add	fp, r0
 8001d4c:	2000      	movs	r0, #0
 8001d4e:	e6d9      	b.n	8001b04 <__aeabi_ddiv+0x80>
 8001d50:	0003      	movs	r3, r0
 8001d52:	4323      	orrs	r3, r4
 8001d54:	4698      	mov	r8, r3
 8001d56:	d044      	beq.n	8001de2 <__aeabi_ddiv+0x35e>
 8001d58:	2c00      	cmp	r4, #0
 8001d5a:	d100      	bne.n	8001d5e <__aeabi_ddiv+0x2da>
 8001d5c:	e0cf      	b.n	8001efe <__aeabi_ddiv+0x47a>
 8001d5e:	0020      	movs	r0, r4
 8001d60:	f001 fa46 	bl	80031f0 <__clzsi2>
 8001d64:	0001      	movs	r1, r0
 8001d66:	0002      	movs	r2, r0
 8001d68:	390b      	subs	r1, #11
 8001d6a:	231d      	movs	r3, #29
 8001d6c:	1a5b      	subs	r3, r3, r1
 8001d6e:	4649      	mov	r1, r9
 8001d70:	0010      	movs	r0, r2
 8001d72:	40d9      	lsrs	r1, r3
 8001d74:	3808      	subs	r0, #8
 8001d76:	4084      	lsls	r4, r0
 8001d78:	000b      	movs	r3, r1
 8001d7a:	464d      	mov	r5, r9
 8001d7c:	4323      	orrs	r3, r4
 8001d7e:	4698      	mov	r8, r3
 8001d80:	4085      	lsls	r5, r0
 8001d82:	4b23      	ldr	r3, [pc, #140]	; (8001e10 <__aeabi_ddiv+0x38c>)
 8001d84:	1a9b      	subs	r3, r3, r2
 8001d86:	469b      	mov	fp, r3
 8001d88:	2300      	movs	r3, #0
 8001d8a:	4699      	mov	r9, r3
 8001d8c:	9300      	str	r3, [sp, #0]
 8001d8e:	e69e      	b.n	8001ace <__aeabi_ddiv+0x4a>
 8001d90:	0002      	movs	r2, r0
 8001d92:	4322      	orrs	r2, r4
 8001d94:	4690      	mov	r8, r2
 8001d96:	d11d      	bne.n	8001dd4 <__aeabi_ddiv+0x350>
 8001d98:	2208      	movs	r2, #8
 8001d9a:	469b      	mov	fp, r3
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	2500      	movs	r5, #0
 8001da0:	4691      	mov	r9, r2
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	e693      	b.n	8001ace <__aeabi_ddiv+0x4a>
 8001da6:	4651      	mov	r1, sl
 8001da8:	4321      	orrs	r1, r4
 8001daa:	d109      	bne.n	8001dc0 <__aeabi_ddiv+0x33c>
 8001dac:	2302      	movs	r3, #2
 8001dae:	464a      	mov	r2, r9
 8001db0:	431a      	orrs	r2, r3
 8001db2:	4b18      	ldr	r3, [pc, #96]	; (8001e14 <__aeabi_ddiv+0x390>)
 8001db4:	4691      	mov	r9, r2
 8001db6:	469c      	mov	ip, r3
 8001db8:	2400      	movs	r4, #0
 8001dba:	2002      	movs	r0, #2
 8001dbc:	44e3      	add	fp, ip
 8001dbe:	e6a1      	b.n	8001b04 <__aeabi_ddiv+0x80>
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	464a      	mov	r2, r9
 8001dc4:	431a      	orrs	r2, r3
 8001dc6:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <__aeabi_ddiv+0x390>)
 8001dc8:	4691      	mov	r9, r2
 8001dca:	469c      	mov	ip, r3
 8001dcc:	4651      	mov	r1, sl
 8001dce:	2003      	movs	r0, #3
 8001dd0:	44e3      	add	fp, ip
 8001dd2:	e697      	b.n	8001b04 <__aeabi_ddiv+0x80>
 8001dd4:	220c      	movs	r2, #12
 8001dd6:	469b      	mov	fp, r3
 8001dd8:	2303      	movs	r3, #3
 8001dda:	46a0      	mov	r8, r4
 8001ddc:	4691      	mov	r9, r2
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	e675      	b.n	8001ace <__aeabi_ddiv+0x4a>
 8001de2:	2304      	movs	r3, #4
 8001de4:	4699      	mov	r9, r3
 8001de6:	2300      	movs	r3, #0
 8001de8:	469b      	mov	fp, r3
 8001dea:	3301      	adds	r3, #1
 8001dec:	2500      	movs	r5, #0
 8001dee:	9300      	str	r3, [sp, #0]
 8001df0:	e66d      	b.n	8001ace <__aeabi_ddiv+0x4a>
 8001df2:	46c0      	nop			; (mov r8, r8)
 8001df4:	000007ff 	.word	0x000007ff
 8001df8:	fffffc01 	.word	0xfffffc01
 8001dfc:	0800aff0 	.word	0x0800aff0
 8001e00:	000003ff 	.word	0x000003ff
 8001e04:	feffffff 	.word	0xfeffffff
 8001e08:	000007fe 	.word	0x000007fe
 8001e0c:	000003f3 	.word	0x000003f3
 8001e10:	fffffc0d 	.word	0xfffffc0d
 8001e14:	fffff801 	.word	0xfffff801
 8001e18:	464a      	mov	r2, r9
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	4691      	mov	r9, r2
 8001e20:	2400      	movs	r4, #0
 8001e22:	2001      	movs	r0, #1
 8001e24:	e66e      	b.n	8001b04 <__aeabi_ddiv+0x80>
 8001e26:	2300      	movs	r3, #0
 8001e28:	2280      	movs	r2, #128	; 0x80
 8001e2a:	469a      	mov	sl, r3
 8001e2c:	2500      	movs	r5, #0
 8001e2e:	4b88      	ldr	r3, [pc, #544]	; (8002050 <__aeabi_ddiv+0x5cc>)
 8001e30:	0312      	lsls	r2, r2, #12
 8001e32:	e67e      	b.n	8001b32 <__aeabi_ddiv+0xae>
 8001e34:	2501      	movs	r5, #1
 8001e36:	426d      	negs	r5, r5
 8001e38:	2201      	movs	r2, #1
 8001e3a:	1ad2      	subs	r2, r2, r3
 8001e3c:	2a38      	cmp	r2, #56	; 0x38
 8001e3e:	dd00      	ble.n	8001e42 <__aeabi_ddiv+0x3be>
 8001e40:	e674      	b.n	8001b2c <__aeabi_ddiv+0xa8>
 8001e42:	2a1f      	cmp	r2, #31
 8001e44:	dc00      	bgt.n	8001e48 <__aeabi_ddiv+0x3c4>
 8001e46:	e0bd      	b.n	8001fc4 <__aeabi_ddiv+0x540>
 8001e48:	211f      	movs	r1, #31
 8001e4a:	4249      	negs	r1, r1
 8001e4c:	1acb      	subs	r3, r1, r3
 8001e4e:	4641      	mov	r1, r8
 8001e50:	40d9      	lsrs	r1, r3
 8001e52:	000b      	movs	r3, r1
 8001e54:	2a20      	cmp	r2, #32
 8001e56:	d004      	beq.n	8001e62 <__aeabi_ddiv+0x3de>
 8001e58:	4641      	mov	r1, r8
 8001e5a:	4a7e      	ldr	r2, [pc, #504]	; (8002054 <__aeabi_ddiv+0x5d0>)
 8001e5c:	445a      	add	r2, fp
 8001e5e:	4091      	lsls	r1, r2
 8001e60:	430d      	orrs	r5, r1
 8001e62:	0029      	movs	r1, r5
 8001e64:	1e4a      	subs	r2, r1, #1
 8001e66:	4191      	sbcs	r1, r2
 8001e68:	4319      	orrs	r1, r3
 8001e6a:	2307      	movs	r3, #7
 8001e6c:	001d      	movs	r5, r3
 8001e6e:	2200      	movs	r2, #0
 8001e70:	400d      	ands	r5, r1
 8001e72:	420b      	tst	r3, r1
 8001e74:	d100      	bne.n	8001e78 <__aeabi_ddiv+0x3f4>
 8001e76:	e0d0      	b.n	800201a <__aeabi_ddiv+0x596>
 8001e78:	220f      	movs	r2, #15
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	400a      	ands	r2, r1
 8001e7e:	2a04      	cmp	r2, #4
 8001e80:	d100      	bne.n	8001e84 <__aeabi_ddiv+0x400>
 8001e82:	e0c7      	b.n	8002014 <__aeabi_ddiv+0x590>
 8001e84:	1d0a      	adds	r2, r1, #4
 8001e86:	428a      	cmp	r2, r1
 8001e88:	4189      	sbcs	r1, r1
 8001e8a:	4249      	negs	r1, r1
 8001e8c:	185b      	adds	r3, r3, r1
 8001e8e:	0011      	movs	r1, r2
 8001e90:	021a      	lsls	r2, r3, #8
 8001e92:	d400      	bmi.n	8001e96 <__aeabi_ddiv+0x412>
 8001e94:	e0be      	b.n	8002014 <__aeabi_ddiv+0x590>
 8001e96:	2301      	movs	r3, #1
 8001e98:	2200      	movs	r2, #0
 8001e9a:	2500      	movs	r5, #0
 8001e9c:	e649      	b.n	8001b32 <__aeabi_ddiv+0xae>
 8001e9e:	2280      	movs	r2, #128	; 0x80
 8001ea0:	4643      	mov	r3, r8
 8001ea2:	0312      	lsls	r2, r2, #12
 8001ea4:	4213      	tst	r3, r2
 8001ea6:	d008      	beq.n	8001eba <__aeabi_ddiv+0x436>
 8001ea8:	4214      	tst	r4, r2
 8001eaa:	d106      	bne.n	8001eba <__aeabi_ddiv+0x436>
 8001eac:	4322      	orrs	r2, r4
 8001eae:	0312      	lsls	r2, r2, #12
 8001eb0:	46ba      	mov	sl, r7
 8001eb2:	000d      	movs	r5, r1
 8001eb4:	4b66      	ldr	r3, [pc, #408]	; (8002050 <__aeabi_ddiv+0x5cc>)
 8001eb6:	0b12      	lsrs	r2, r2, #12
 8001eb8:	e63b      	b.n	8001b32 <__aeabi_ddiv+0xae>
 8001eba:	2280      	movs	r2, #128	; 0x80
 8001ebc:	4643      	mov	r3, r8
 8001ebe:	0312      	lsls	r2, r2, #12
 8001ec0:	431a      	orrs	r2, r3
 8001ec2:	0312      	lsls	r2, r2, #12
 8001ec4:	46b2      	mov	sl, r6
 8001ec6:	4b62      	ldr	r3, [pc, #392]	; (8002050 <__aeabi_ddiv+0x5cc>)
 8001ec8:	0b12      	lsrs	r2, r2, #12
 8001eca:	e632      	b.n	8001b32 <__aeabi_ddiv+0xae>
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d100      	bne.n	8001ed2 <__aeabi_ddiv+0x44e>
 8001ed0:	e702      	b.n	8001cd8 <__aeabi_ddiv+0x254>
 8001ed2:	19a6      	adds	r6, r4, r6
 8001ed4:	1e6a      	subs	r2, r5, #1
 8001ed6:	42a6      	cmp	r6, r4
 8001ed8:	d200      	bcs.n	8001edc <__aeabi_ddiv+0x458>
 8001eda:	e089      	b.n	8001ff0 <__aeabi_ddiv+0x56c>
 8001edc:	4286      	cmp	r6, r0
 8001ede:	d200      	bcs.n	8001ee2 <__aeabi_ddiv+0x45e>
 8001ee0:	e09f      	b.n	8002022 <__aeabi_ddiv+0x59e>
 8001ee2:	d100      	bne.n	8001ee6 <__aeabi_ddiv+0x462>
 8001ee4:	e0af      	b.n	8002046 <__aeabi_ddiv+0x5c2>
 8001ee6:	0015      	movs	r5, r2
 8001ee8:	e6f4      	b.n	8001cd4 <__aeabi_ddiv+0x250>
 8001eea:	42a9      	cmp	r1, r5
 8001eec:	d900      	bls.n	8001ef0 <__aeabi_ddiv+0x46c>
 8001eee:	e63c      	b.n	8001b6a <__aeabi_ddiv+0xe6>
 8001ef0:	4643      	mov	r3, r8
 8001ef2:	07de      	lsls	r6, r3, #31
 8001ef4:	0858      	lsrs	r0, r3, #1
 8001ef6:	086b      	lsrs	r3, r5, #1
 8001ef8:	431e      	orrs	r6, r3
 8001efa:	07ed      	lsls	r5, r5, #31
 8001efc:	e63c      	b.n	8001b78 <__aeabi_ddiv+0xf4>
 8001efe:	f001 f977 	bl	80031f0 <__clzsi2>
 8001f02:	0001      	movs	r1, r0
 8001f04:	0002      	movs	r2, r0
 8001f06:	3115      	adds	r1, #21
 8001f08:	3220      	adds	r2, #32
 8001f0a:	291c      	cmp	r1, #28
 8001f0c:	dc00      	bgt.n	8001f10 <__aeabi_ddiv+0x48c>
 8001f0e:	e72c      	b.n	8001d6a <__aeabi_ddiv+0x2e6>
 8001f10:	464b      	mov	r3, r9
 8001f12:	3808      	subs	r0, #8
 8001f14:	4083      	lsls	r3, r0
 8001f16:	2500      	movs	r5, #0
 8001f18:	4698      	mov	r8, r3
 8001f1a:	e732      	b.n	8001d82 <__aeabi_ddiv+0x2fe>
 8001f1c:	f001 f968 	bl	80031f0 <__clzsi2>
 8001f20:	0003      	movs	r3, r0
 8001f22:	001a      	movs	r2, r3
 8001f24:	3215      	adds	r2, #21
 8001f26:	3020      	adds	r0, #32
 8001f28:	2a1c      	cmp	r2, #28
 8001f2a:	dc00      	bgt.n	8001f2e <__aeabi_ddiv+0x4aa>
 8001f2c:	e6ff      	b.n	8001d2e <__aeabi_ddiv+0x2aa>
 8001f2e:	4654      	mov	r4, sl
 8001f30:	3b08      	subs	r3, #8
 8001f32:	2100      	movs	r1, #0
 8001f34:	409c      	lsls	r4, r3
 8001f36:	e705      	b.n	8001d44 <__aeabi_ddiv+0x2c0>
 8001f38:	1936      	adds	r6, r6, r4
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	42b4      	cmp	r4, r6
 8001f3e:	d900      	bls.n	8001f42 <__aeabi_ddiv+0x4be>
 8001f40:	e6a6      	b.n	8001c90 <__aeabi_ddiv+0x20c>
 8001f42:	42b2      	cmp	r2, r6
 8001f44:	d800      	bhi.n	8001f48 <__aeabi_ddiv+0x4c4>
 8001f46:	e6a3      	b.n	8001c90 <__aeabi_ddiv+0x20c>
 8001f48:	1e83      	subs	r3, r0, #2
 8001f4a:	1936      	adds	r6, r6, r4
 8001f4c:	e6a0      	b.n	8001c90 <__aeabi_ddiv+0x20c>
 8001f4e:	1909      	adds	r1, r1, r4
 8001f50:	3d01      	subs	r5, #1
 8001f52:	428c      	cmp	r4, r1
 8001f54:	d900      	bls.n	8001f58 <__aeabi_ddiv+0x4d4>
 8001f56:	e68d      	b.n	8001c74 <__aeabi_ddiv+0x1f0>
 8001f58:	428a      	cmp	r2, r1
 8001f5a:	d800      	bhi.n	8001f5e <__aeabi_ddiv+0x4da>
 8001f5c:	e68a      	b.n	8001c74 <__aeabi_ddiv+0x1f0>
 8001f5e:	1e85      	subs	r5, r0, #2
 8001f60:	1909      	adds	r1, r1, r4
 8001f62:	e687      	b.n	8001c74 <__aeabi_ddiv+0x1f0>
 8001f64:	220f      	movs	r2, #15
 8001f66:	402a      	ands	r2, r5
 8001f68:	2a04      	cmp	r2, #4
 8001f6a:	d100      	bne.n	8001f6e <__aeabi_ddiv+0x4ea>
 8001f6c:	e6bc      	b.n	8001ce8 <__aeabi_ddiv+0x264>
 8001f6e:	1d29      	adds	r1, r5, #4
 8001f70:	42a9      	cmp	r1, r5
 8001f72:	41ad      	sbcs	r5, r5
 8001f74:	426d      	negs	r5, r5
 8001f76:	08c9      	lsrs	r1, r1, #3
 8001f78:	44a8      	add	r8, r5
 8001f7a:	e6b6      	b.n	8001cea <__aeabi_ddiv+0x266>
 8001f7c:	42af      	cmp	r7, r5
 8001f7e:	d900      	bls.n	8001f82 <__aeabi_ddiv+0x4fe>
 8001f80:	e662      	b.n	8001c48 <__aeabi_ddiv+0x1c4>
 8001f82:	4281      	cmp	r1, r0
 8001f84:	d804      	bhi.n	8001f90 <__aeabi_ddiv+0x50c>
 8001f86:	d000      	beq.n	8001f8a <__aeabi_ddiv+0x506>
 8001f88:	e65e      	b.n	8001c48 <__aeabi_ddiv+0x1c4>
 8001f8a:	42ae      	cmp	r6, r5
 8001f8c:	d800      	bhi.n	8001f90 <__aeabi_ddiv+0x50c>
 8001f8e:	e65b      	b.n	8001c48 <__aeabi_ddiv+0x1c4>
 8001f90:	2302      	movs	r3, #2
 8001f92:	425b      	negs	r3, r3
 8001f94:	469c      	mov	ip, r3
 8001f96:	9b00      	ldr	r3, [sp, #0]
 8001f98:	44e0      	add	r8, ip
 8001f9a:	469c      	mov	ip, r3
 8001f9c:	4465      	add	r5, ip
 8001f9e:	429d      	cmp	r5, r3
 8001fa0:	419b      	sbcs	r3, r3
 8001fa2:	425b      	negs	r3, r3
 8001fa4:	191b      	adds	r3, r3, r4
 8001fa6:	18c0      	adds	r0, r0, r3
 8001fa8:	e64f      	b.n	8001c4a <__aeabi_ddiv+0x1c6>
 8001faa:	42b2      	cmp	r2, r6
 8001fac:	d800      	bhi.n	8001fb0 <__aeabi_ddiv+0x52c>
 8001fae:	e612      	b.n	8001bd6 <__aeabi_ddiv+0x152>
 8001fb0:	1e83      	subs	r3, r0, #2
 8001fb2:	1936      	adds	r6, r6, r4
 8001fb4:	e60f      	b.n	8001bd6 <__aeabi_ddiv+0x152>
 8001fb6:	428a      	cmp	r2, r1
 8001fb8:	d800      	bhi.n	8001fbc <__aeabi_ddiv+0x538>
 8001fba:	e5fa      	b.n	8001bb2 <__aeabi_ddiv+0x12e>
 8001fbc:	1e83      	subs	r3, r0, #2
 8001fbe:	4698      	mov	r8, r3
 8001fc0:	1909      	adds	r1, r1, r4
 8001fc2:	e5f6      	b.n	8001bb2 <__aeabi_ddiv+0x12e>
 8001fc4:	4b24      	ldr	r3, [pc, #144]	; (8002058 <__aeabi_ddiv+0x5d4>)
 8001fc6:	0028      	movs	r0, r5
 8001fc8:	445b      	add	r3, fp
 8001fca:	4641      	mov	r1, r8
 8001fcc:	409d      	lsls	r5, r3
 8001fce:	4099      	lsls	r1, r3
 8001fd0:	40d0      	lsrs	r0, r2
 8001fd2:	1e6b      	subs	r3, r5, #1
 8001fd4:	419d      	sbcs	r5, r3
 8001fd6:	4643      	mov	r3, r8
 8001fd8:	4301      	orrs	r1, r0
 8001fda:	4329      	orrs	r1, r5
 8001fdc:	40d3      	lsrs	r3, r2
 8001fde:	074a      	lsls	r2, r1, #29
 8001fe0:	d100      	bne.n	8001fe4 <__aeabi_ddiv+0x560>
 8001fe2:	e755      	b.n	8001e90 <__aeabi_ddiv+0x40c>
 8001fe4:	220f      	movs	r2, #15
 8001fe6:	400a      	ands	r2, r1
 8001fe8:	2a04      	cmp	r2, #4
 8001fea:	d000      	beq.n	8001fee <__aeabi_ddiv+0x56a>
 8001fec:	e74a      	b.n	8001e84 <__aeabi_ddiv+0x400>
 8001fee:	e74f      	b.n	8001e90 <__aeabi_ddiv+0x40c>
 8001ff0:	0015      	movs	r5, r2
 8001ff2:	4286      	cmp	r6, r0
 8001ff4:	d000      	beq.n	8001ff8 <__aeabi_ddiv+0x574>
 8001ff6:	e66d      	b.n	8001cd4 <__aeabi_ddiv+0x250>
 8001ff8:	9a00      	ldr	r2, [sp, #0]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d000      	beq.n	8002000 <__aeabi_ddiv+0x57c>
 8001ffe:	e669      	b.n	8001cd4 <__aeabi_ddiv+0x250>
 8002000:	e66a      	b.n	8001cd8 <__aeabi_ddiv+0x254>
 8002002:	4b16      	ldr	r3, [pc, #88]	; (800205c <__aeabi_ddiv+0x5d8>)
 8002004:	445b      	add	r3, fp
 8002006:	2b00      	cmp	r3, #0
 8002008:	dc00      	bgt.n	800200c <__aeabi_ddiv+0x588>
 800200a:	e713      	b.n	8001e34 <__aeabi_ddiv+0x3b0>
 800200c:	2501      	movs	r5, #1
 800200e:	2100      	movs	r1, #0
 8002010:	44a8      	add	r8, r5
 8002012:	e66a      	b.n	8001cea <__aeabi_ddiv+0x266>
 8002014:	075d      	lsls	r5, r3, #29
 8002016:	025b      	lsls	r3, r3, #9
 8002018:	0b1a      	lsrs	r2, r3, #12
 800201a:	08c9      	lsrs	r1, r1, #3
 800201c:	2300      	movs	r3, #0
 800201e:	430d      	orrs	r5, r1
 8002020:	e587      	b.n	8001b32 <__aeabi_ddiv+0xae>
 8002022:	9900      	ldr	r1, [sp, #0]
 8002024:	3d02      	subs	r5, #2
 8002026:	004a      	lsls	r2, r1, #1
 8002028:	428a      	cmp	r2, r1
 800202a:	41bf      	sbcs	r7, r7
 800202c:	427f      	negs	r7, r7
 800202e:	193f      	adds	r7, r7, r4
 8002030:	19f6      	adds	r6, r6, r7
 8002032:	9200      	str	r2, [sp, #0]
 8002034:	e7dd      	b.n	8001ff2 <__aeabi_ddiv+0x56e>
 8002036:	2280      	movs	r2, #128	; 0x80
 8002038:	4643      	mov	r3, r8
 800203a:	0312      	lsls	r2, r2, #12
 800203c:	431a      	orrs	r2, r3
 800203e:	0312      	lsls	r2, r2, #12
 8002040:	4b03      	ldr	r3, [pc, #12]	; (8002050 <__aeabi_ddiv+0x5cc>)
 8002042:	0b12      	lsrs	r2, r2, #12
 8002044:	e575      	b.n	8001b32 <__aeabi_ddiv+0xae>
 8002046:	9900      	ldr	r1, [sp, #0]
 8002048:	4299      	cmp	r1, r3
 800204a:	d3ea      	bcc.n	8002022 <__aeabi_ddiv+0x59e>
 800204c:	0015      	movs	r5, r2
 800204e:	e7d3      	b.n	8001ff8 <__aeabi_ddiv+0x574>
 8002050:	000007ff 	.word	0x000007ff
 8002054:	0000043e 	.word	0x0000043e
 8002058:	0000041e 	.word	0x0000041e
 800205c:	000003ff 	.word	0x000003ff

08002060 <__eqdf2>:
 8002060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002062:	464e      	mov	r6, r9
 8002064:	4645      	mov	r5, r8
 8002066:	46de      	mov	lr, fp
 8002068:	4657      	mov	r7, sl
 800206a:	4690      	mov	r8, r2
 800206c:	b5e0      	push	{r5, r6, r7, lr}
 800206e:	0017      	movs	r7, r2
 8002070:	031a      	lsls	r2, r3, #12
 8002072:	0b12      	lsrs	r2, r2, #12
 8002074:	0005      	movs	r5, r0
 8002076:	4684      	mov	ip, r0
 8002078:	4819      	ldr	r0, [pc, #100]	; (80020e0 <__eqdf2+0x80>)
 800207a:	030e      	lsls	r6, r1, #12
 800207c:	004c      	lsls	r4, r1, #1
 800207e:	4691      	mov	r9, r2
 8002080:	005a      	lsls	r2, r3, #1
 8002082:	0fdb      	lsrs	r3, r3, #31
 8002084:	469b      	mov	fp, r3
 8002086:	0b36      	lsrs	r6, r6, #12
 8002088:	0d64      	lsrs	r4, r4, #21
 800208a:	0fc9      	lsrs	r1, r1, #31
 800208c:	0d52      	lsrs	r2, r2, #21
 800208e:	4284      	cmp	r4, r0
 8002090:	d019      	beq.n	80020c6 <__eqdf2+0x66>
 8002092:	4282      	cmp	r2, r0
 8002094:	d010      	beq.n	80020b8 <__eqdf2+0x58>
 8002096:	2001      	movs	r0, #1
 8002098:	4294      	cmp	r4, r2
 800209a:	d10e      	bne.n	80020ba <__eqdf2+0x5a>
 800209c:	454e      	cmp	r6, r9
 800209e:	d10c      	bne.n	80020ba <__eqdf2+0x5a>
 80020a0:	2001      	movs	r0, #1
 80020a2:	45c4      	cmp	ip, r8
 80020a4:	d109      	bne.n	80020ba <__eqdf2+0x5a>
 80020a6:	4559      	cmp	r1, fp
 80020a8:	d017      	beq.n	80020da <__eqdf2+0x7a>
 80020aa:	2c00      	cmp	r4, #0
 80020ac:	d105      	bne.n	80020ba <__eqdf2+0x5a>
 80020ae:	0030      	movs	r0, r6
 80020b0:	4328      	orrs	r0, r5
 80020b2:	1e43      	subs	r3, r0, #1
 80020b4:	4198      	sbcs	r0, r3
 80020b6:	e000      	b.n	80020ba <__eqdf2+0x5a>
 80020b8:	2001      	movs	r0, #1
 80020ba:	bcf0      	pop	{r4, r5, r6, r7}
 80020bc:	46bb      	mov	fp, r7
 80020be:	46b2      	mov	sl, r6
 80020c0:	46a9      	mov	r9, r5
 80020c2:	46a0      	mov	r8, r4
 80020c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020c6:	0033      	movs	r3, r6
 80020c8:	2001      	movs	r0, #1
 80020ca:	432b      	orrs	r3, r5
 80020cc:	d1f5      	bne.n	80020ba <__eqdf2+0x5a>
 80020ce:	42a2      	cmp	r2, r4
 80020d0:	d1f3      	bne.n	80020ba <__eqdf2+0x5a>
 80020d2:	464b      	mov	r3, r9
 80020d4:	433b      	orrs	r3, r7
 80020d6:	d1f0      	bne.n	80020ba <__eqdf2+0x5a>
 80020d8:	e7e2      	b.n	80020a0 <__eqdf2+0x40>
 80020da:	2000      	movs	r0, #0
 80020dc:	e7ed      	b.n	80020ba <__eqdf2+0x5a>
 80020de:	46c0      	nop			; (mov r8, r8)
 80020e0:	000007ff 	.word	0x000007ff

080020e4 <__gedf2>:
 80020e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020e6:	4647      	mov	r7, r8
 80020e8:	46ce      	mov	lr, r9
 80020ea:	0004      	movs	r4, r0
 80020ec:	0018      	movs	r0, r3
 80020ee:	0016      	movs	r6, r2
 80020f0:	031b      	lsls	r3, r3, #12
 80020f2:	0b1b      	lsrs	r3, r3, #12
 80020f4:	4d2d      	ldr	r5, [pc, #180]	; (80021ac <__gedf2+0xc8>)
 80020f6:	004a      	lsls	r2, r1, #1
 80020f8:	4699      	mov	r9, r3
 80020fa:	b580      	push	{r7, lr}
 80020fc:	0043      	lsls	r3, r0, #1
 80020fe:	030f      	lsls	r7, r1, #12
 8002100:	46a4      	mov	ip, r4
 8002102:	46b0      	mov	r8, r6
 8002104:	0b3f      	lsrs	r7, r7, #12
 8002106:	0d52      	lsrs	r2, r2, #21
 8002108:	0fc9      	lsrs	r1, r1, #31
 800210a:	0d5b      	lsrs	r3, r3, #21
 800210c:	0fc0      	lsrs	r0, r0, #31
 800210e:	42aa      	cmp	r2, r5
 8002110:	d021      	beq.n	8002156 <__gedf2+0x72>
 8002112:	42ab      	cmp	r3, r5
 8002114:	d013      	beq.n	800213e <__gedf2+0x5a>
 8002116:	2a00      	cmp	r2, #0
 8002118:	d122      	bne.n	8002160 <__gedf2+0x7c>
 800211a:	433c      	orrs	r4, r7
 800211c:	2b00      	cmp	r3, #0
 800211e:	d102      	bne.n	8002126 <__gedf2+0x42>
 8002120:	464d      	mov	r5, r9
 8002122:	432e      	orrs	r6, r5
 8002124:	d022      	beq.n	800216c <__gedf2+0x88>
 8002126:	2c00      	cmp	r4, #0
 8002128:	d010      	beq.n	800214c <__gedf2+0x68>
 800212a:	4281      	cmp	r1, r0
 800212c:	d022      	beq.n	8002174 <__gedf2+0x90>
 800212e:	2002      	movs	r0, #2
 8002130:	3901      	subs	r1, #1
 8002132:	4008      	ands	r0, r1
 8002134:	3801      	subs	r0, #1
 8002136:	bcc0      	pop	{r6, r7}
 8002138:	46b9      	mov	r9, r7
 800213a:	46b0      	mov	r8, r6
 800213c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800213e:	464d      	mov	r5, r9
 8002140:	432e      	orrs	r6, r5
 8002142:	d129      	bne.n	8002198 <__gedf2+0xb4>
 8002144:	2a00      	cmp	r2, #0
 8002146:	d1f0      	bne.n	800212a <__gedf2+0x46>
 8002148:	433c      	orrs	r4, r7
 800214a:	d1ee      	bne.n	800212a <__gedf2+0x46>
 800214c:	2800      	cmp	r0, #0
 800214e:	d1f2      	bne.n	8002136 <__gedf2+0x52>
 8002150:	2001      	movs	r0, #1
 8002152:	4240      	negs	r0, r0
 8002154:	e7ef      	b.n	8002136 <__gedf2+0x52>
 8002156:	003d      	movs	r5, r7
 8002158:	4325      	orrs	r5, r4
 800215a:	d11d      	bne.n	8002198 <__gedf2+0xb4>
 800215c:	4293      	cmp	r3, r2
 800215e:	d0ee      	beq.n	800213e <__gedf2+0x5a>
 8002160:	2b00      	cmp	r3, #0
 8002162:	d1e2      	bne.n	800212a <__gedf2+0x46>
 8002164:	464c      	mov	r4, r9
 8002166:	4326      	orrs	r6, r4
 8002168:	d1df      	bne.n	800212a <__gedf2+0x46>
 800216a:	e7e0      	b.n	800212e <__gedf2+0x4a>
 800216c:	2000      	movs	r0, #0
 800216e:	2c00      	cmp	r4, #0
 8002170:	d0e1      	beq.n	8002136 <__gedf2+0x52>
 8002172:	e7dc      	b.n	800212e <__gedf2+0x4a>
 8002174:	429a      	cmp	r2, r3
 8002176:	dc0a      	bgt.n	800218e <__gedf2+0xaa>
 8002178:	dbe8      	blt.n	800214c <__gedf2+0x68>
 800217a:	454f      	cmp	r7, r9
 800217c:	d8d7      	bhi.n	800212e <__gedf2+0x4a>
 800217e:	d00e      	beq.n	800219e <__gedf2+0xba>
 8002180:	2000      	movs	r0, #0
 8002182:	454f      	cmp	r7, r9
 8002184:	d2d7      	bcs.n	8002136 <__gedf2+0x52>
 8002186:	2900      	cmp	r1, #0
 8002188:	d0e2      	beq.n	8002150 <__gedf2+0x6c>
 800218a:	0008      	movs	r0, r1
 800218c:	e7d3      	b.n	8002136 <__gedf2+0x52>
 800218e:	4243      	negs	r3, r0
 8002190:	4158      	adcs	r0, r3
 8002192:	0040      	lsls	r0, r0, #1
 8002194:	3801      	subs	r0, #1
 8002196:	e7ce      	b.n	8002136 <__gedf2+0x52>
 8002198:	2002      	movs	r0, #2
 800219a:	4240      	negs	r0, r0
 800219c:	e7cb      	b.n	8002136 <__gedf2+0x52>
 800219e:	45c4      	cmp	ip, r8
 80021a0:	d8c5      	bhi.n	800212e <__gedf2+0x4a>
 80021a2:	2000      	movs	r0, #0
 80021a4:	45c4      	cmp	ip, r8
 80021a6:	d2c6      	bcs.n	8002136 <__gedf2+0x52>
 80021a8:	e7ed      	b.n	8002186 <__gedf2+0xa2>
 80021aa:	46c0      	nop			; (mov r8, r8)
 80021ac:	000007ff 	.word	0x000007ff

080021b0 <__ledf2>:
 80021b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021b2:	4647      	mov	r7, r8
 80021b4:	46ce      	mov	lr, r9
 80021b6:	0004      	movs	r4, r0
 80021b8:	0018      	movs	r0, r3
 80021ba:	0016      	movs	r6, r2
 80021bc:	031b      	lsls	r3, r3, #12
 80021be:	0b1b      	lsrs	r3, r3, #12
 80021c0:	4d2c      	ldr	r5, [pc, #176]	; (8002274 <__ledf2+0xc4>)
 80021c2:	004a      	lsls	r2, r1, #1
 80021c4:	4699      	mov	r9, r3
 80021c6:	b580      	push	{r7, lr}
 80021c8:	0043      	lsls	r3, r0, #1
 80021ca:	030f      	lsls	r7, r1, #12
 80021cc:	46a4      	mov	ip, r4
 80021ce:	46b0      	mov	r8, r6
 80021d0:	0b3f      	lsrs	r7, r7, #12
 80021d2:	0d52      	lsrs	r2, r2, #21
 80021d4:	0fc9      	lsrs	r1, r1, #31
 80021d6:	0d5b      	lsrs	r3, r3, #21
 80021d8:	0fc0      	lsrs	r0, r0, #31
 80021da:	42aa      	cmp	r2, r5
 80021dc:	d00d      	beq.n	80021fa <__ledf2+0x4a>
 80021de:	42ab      	cmp	r3, r5
 80021e0:	d010      	beq.n	8002204 <__ledf2+0x54>
 80021e2:	2a00      	cmp	r2, #0
 80021e4:	d127      	bne.n	8002236 <__ledf2+0x86>
 80021e6:	433c      	orrs	r4, r7
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d111      	bne.n	8002210 <__ledf2+0x60>
 80021ec:	464d      	mov	r5, r9
 80021ee:	432e      	orrs	r6, r5
 80021f0:	d10e      	bne.n	8002210 <__ledf2+0x60>
 80021f2:	2000      	movs	r0, #0
 80021f4:	2c00      	cmp	r4, #0
 80021f6:	d015      	beq.n	8002224 <__ledf2+0x74>
 80021f8:	e00e      	b.n	8002218 <__ledf2+0x68>
 80021fa:	003d      	movs	r5, r7
 80021fc:	4325      	orrs	r5, r4
 80021fe:	d110      	bne.n	8002222 <__ledf2+0x72>
 8002200:	4293      	cmp	r3, r2
 8002202:	d118      	bne.n	8002236 <__ledf2+0x86>
 8002204:	464d      	mov	r5, r9
 8002206:	432e      	orrs	r6, r5
 8002208:	d10b      	bne.n	8002222 <__ledf2+0x72>
 800220a:	2a00      	cmp	r2, #0
 800220c:	d102      	bne.n	8002214 <__ledf2+0x64>
 800220e:	433c      	orrs	r4, r7
 8002210:	2c00      	cmp	r4, #0
 8002212:	d00b      	beq.n	800222c <__ledf2+0x7c>
 8002214:	4281      	cmp	r1, r0
 8002216:	d014      	beq.n	8002242 <__ledf2+0x92>
 8002218:	2002      	movs	r0, #2
 800221a:	3901      	subs	r1, #1
 800221c:	4008      	ands	r0, r1
 800221e:	3801      	subs	r0, #1
 8002220:	e000      	b.n	8002224 <__ledf2+0x74>
 8002222:	2002      	movs	r0, #2
 8002224:	bcc0      	pop	{r6, r7}
 8002226:	46b9      	mov	r9, r7
 8002228:	46b0      	mov	r8, r6
 800222a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800222c:	2800      	cmp	r0, #0
 800222e:	d1f9      	bne.n	8002224 <__ledf2+0x74>
 8002230:	2001      	movs	r0, #1
 8002232:	4240      	negs	r0, r0
 8002234:	e7f6      	b.n	8002224 <__ledf2+0x74>
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1ec      	bne.n	8002214 <__ledf2+0x64>
 800223a:	464c      	mov	r4, r9
 800223c:	4326      	orrs	r6, r4
 800223e:	d1e9      	bne.n	8002214 <__ledf2+0x64>
 8002240:	e7ea      	b.n	8002218 <__ledf2+0x68>
 8002242:	429a      	cmp	r2, r3
 8002244:	dd04      	ble.n	8002250 <__ledf2+0xa0>
 8002246:	4243      	negs	r3, r0
 8002248:	4158      	adcs	r0, r3
 800224a:	0040      	lsls	r0, r0, #1
 800224c:	3801      	subs	r0, #1
 800224e:	e7e9      	b.n	8002224 <__ledf2+0x74>
 8002250:	429a      	cmp	r2, r3
 8002252:	dbeb      	blt.n	800222c <__ledf2+0x7c>
 8002254:	454f      	cmp	r7, r9
 8002256:	d8df      	bhi.n	8002218 <__ledf2+0x68>
 8002258:	d006      	beq.n	8002268 <__ledf2+0xb8>
 800225a:	2000      	movs	r0, #0
 800225c:	454f      	cmp	r7, r9
 800225e:	d2e1      	bcs.n	8002224 <__ledf2+0x74>
 8002260:	2900      	cmp	r1, #0
 8002262:	d0e5      	beq.n	8002230 <__ledf2+0x80>
 8002264:	0008      	movs	r0, r1
 8002266:	e7dd      	b.n	8002224 <__ledf2+0x74>
 8002268:	45c4      	cmp	ip, r8
 800226a:	d8d5      	bhi.n	8002218 <__ledf2+0x68>
 800226c:	2000      	movs	r0, #0
 800226e:	45c4      	cmp	ip, r8
 8002270:	d2d8      	bcs.n	8002224 <__ledf2+0x74>
 8002272:	e7f5      	b.n	8002260 <__ledf2+0xb0>
 8002274:	000007ff 	.word	0x000007ff

08002278 <__aeabi_dmul>:
 8002278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800227a:	4645      	mov	r5, r8
 800227c:	46de      	mov	lr, fp
 800227e:	4657      	mov	r7, sl
 8002280:	464e      	mov	r6, r9
 8002282:	b5e0      	push	{r5, r6, r7, lr}
 8002284:	001f      	movs	r7, r3
 8002286:	030b      	lsls	r3, r1, #12
 8002288:	0b1b      	lsrs	r3, r3, #12
 800228a:	469b      	mov	fp, r3
 800228c:	004d      	lsls	r5, r1, #1
 800228e:	0fcb      	lsrs	r3, r1, #31
 8002290:	0004      	movs	r4, r0
 8002292:	4691      	mov	r9, r2
 8002294:	4698      	mov	r8, r3
 8002296:	b087      	sub	sp, #28
 8002298:	0d6d      	lsrs	r5, r5, #21
 800229a:	d100      	bne.n	800229e <__aeabi_dmul+0x26>
 800229c:	e1cd      	b.n	800263a <__aeabi_dmul+0x3c2>
 800229e:	4bce      	ldr	r3, [pc, #824]	; (80025d8 <__aeabi_dmul+0x360>)
 80022a0:	429d      	cmp	r5, r3
 80022a2:	d100      	bne.n	80022a6 <__aeabi_dmul+0x2e>
 80022a4:	e1e9      	b.n	800267a <__aeabi_dmul+0x402>
 80022a6:	465a      	mov	r2, fp
 80022a8:	0f43      	lsrs	r3, r0, #29
 80022aa:	00d2      	lsls	r2, r2, #3
 80022ac:	4313      	orrs	r3, r2
 80022ae:	2280      	movs	r2, #128	; 0x80
 80022b0:	0412      	lsls	r2, r2, #16
 80022b2:	431a      	orrs	r2, r3
 80022b4:	00c3      	lsls	r3, r0, #3
 80022b6:	469a      	mov	sl, r3
 80022b8:	4bc8      	ldr	r3, [pc, #800]	; (80025dc <__aeabi_dmul+0x364>)
 80022ba:	4693      	mov	fp, r2
 80022bc:	469c      	mov	ip, r3
 80022be:	2300      	movs	r3, #0
 80022c0:	2600      	movs	r6, #0
 80022c2:	4465      	add	r5, ip
 80022c4:	9300      	str	r3, [sp, #0]
 80022c6:	033c      	lsls	r4, r7, #12
 80022c8:	007b      	lsls	r3, r7, #1
 80022ca:	4648      	mov	r0, r9
 80022cc:	0b24      	lsrs	r4, r4, #12
 80022ce:	0d5b      	lsrs	r3, r3, #21
 80022d0:	0fff      	lsrs	r7, r7, #31
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d100      	bne.n	80022d8 <__aeabi_dmul+0x60>
 80022d6:	e189      	b.n	80025ec <__aeabi_dmul+0x374>
 80022d8:	4abf      	ldr	r2, [pc, #764]	; (80025d8 <__aeabi_dmul+0x360>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d019      	beq.n	8002312 <__aeabi_dmul+0x9a>
 80022de:	0f42      	lsrs	r2, r0, #29
 80022e0:	00e4      	lsls	r4, r4, #3
 80022e2:	4322      	orrs	r2, r4
 80022e4:	2480      	movs	r4, #128	; 0x80
 80022e6:	0424      	lsls	r4, r4, #16
 80022e8:	4314      	orrs	r4, r2
 80022ea:	4abc      	ldr	r2, [pc, #752]	; (80025dc <__aeabi_dmul+0x364>)
 80022ec:	2100      	movs	r1, #0
 80022ee:	4694      	mov	ip, r2
 80022f0:	4642      	mov	r2, r8
 80022f2:	4463      	add	r3, ip
 80022f4:	195b      	adds	r3, r3, r5
 80022f6:	9301      	str	r3, [sp, #4]
 80022f8:	9b01      	ldr	r3, [sp, #4]
 80022fa:	407a      	eors	r2, r7
 80022fc:	3301      	adds	r3, #1
 80022fe:	00c0      	lsls	r0, r0, #3
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	9302      	str	r3, [sp, #8]
 8002304:	2e0a      	cmp	r6, #10
 8002306:	dd1c      	ble.n	8002342 <__aeabi_dmul+0xca>
 8002308:	003a      	movs	r2, r7
 800230a:	2e0b      	cmp	r6, #11
 800230c:	d05e      	beq.n	80023cc <__aeabi_dmul+0x154>
 800230e:	4647      	mov	r7, r8
 8002310:	e056      	b.n	80023c0 <__aeabi_dmul+0x148>
 8002312:	4649      	mov	r1, r9
 8002314:	4bb0      	ldr	r3, [pc, #704]	; (80025d8 <__aeabi_dmul+0x360>)
 8002316:	4321      	orrs	r1, r4
 8002318:	18eb      	adds	r3, r5, r3
 800231a:	9301      	str	r3, [sp, #4]
 800231c:	2900      	cmp	r1, #0
 800231e:	d12a      	bne.n	8002376 <__aeabi_dmul+0xfe>
 8002320:	2080      	movs	r0, #128	; 0x80
 8002322:	2202      	movs	r2, #2
 8002324:	0100      	lsls	r0, r0, #4
 8002326:	002b      	movs	r3, r5
 8002328:	4684      	mov	ip, r0
 800232a:	4316      	orrs	r6, r2
 800232c:	4642      	mov	r2, r8
 800232e:	4463      	add	r3, ip
 8002330:	407a      	eors	r2, r7
 8002332:	b2d2      	uxtb	r2, r2
 8002334:	9302      	str	r3, [sp, #8]
 8002336:	2e0a      	cmp	r6, #10
 8002338:	dd00      	ble.n	800233c <__aeabi_dmul+0xc4>
 800233a:	e231      	b.n	80027a0 <__aeabi_dmul+0x528>
 800233c:	2000      	movs	r0, #0
 800233e:	2400      	movs	r4, #0
 8002340:	2102      	movs	r1, #2
 8002342:	2e02      	cmp	r6, #2
 8002344:	dc26      	bgt.n	8002394 <__aeabi_dmul+0x11c>
 8002346:	3e01      	subs	r6, #1
 8002348:	2e01      	cmp	r6, #1
 800234a:	d852      	bhi.n	80023f2 <__aeabi_dmul+0x17a>
 800234c:	2902      	cmp	r1, #2
 800234e:	d04c      	beq.n	80023ea <__aeabi_dmul+0x172>
 8002350:	2901      	cmp	r1, #1
 8002352:	d000      	beq.n	8002356 <__aeabi_dmul+0xde>
 8002354:	e118      	b.n	8002588 <__aeabi_dmul+0x310>
 8002356:	2300      	movs	r3, #0
 8002358:	2400      	movs	r4, #0
 800235a:	2500      	movs	r5, #0
 800235c:	051b      	lsls	r3, r3, #20
 800235e:	4323      	orrs	r3, r4
 8002360:	07d2      	lsls	r2, r2, #31
 8002362:	4313      	orrs	r3, r2
 8002364:	0028      	movs	r0, r5
 8002366:	0019      	movs	r1, r3
 8002368:	b007      	add	sp, #28
 800236a:	bcf0      	pop	{r4, r5, r6, r7}
 800236c:	46bb      	mov	fp, r7
 800236e:	46b2      	mov	sl, r6
 8002370:	46a9      	mov	r9, r5
 8002372:	46a0      	mov	r8, r4
 8002374:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002376:	2180      	movs	r1, #128	; 0x80
 8002378:	2203      	movs	r2, #3
 800237a:	0109      	lsls	r1, r1, #4
 800237c:	002b      	movs	r3, r5
 800237e:	468c      	mov	ip, r1
 8002380:	4316      	orrs	r6, r2
 8002382:	4642      	mov	r2, r8
 8002384:	4463      	add	r3, ip
 8002386:	407a      	eors	r2, r7
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	9302      	str	r3, [sp, #8]
 800238c:	2e0a      	cmp	r6, #10
 800238e:	dd00      	ble.n	8002392 <__aeabi_dmul+0x11a>
 8002390:	e228      	b.n	80027e4 <__aeabi_dmul+0x56c>
 8002392:	2103      	movs	r1, #3
 8002394:	2501      	movs	r5, #1
 8002396:	40b5      	lsls	r5, r6
 8002398:	46ac      	mov	ip, r5
 800239a:	26a6      	movs	r6, #166	; 0xa6
 800239c:	4663      	mov	r3, ip
 800239e:	00f6      	lsls	r6, r6, #3
 80023a0:	4035      	ands	r5, r6
 80023a2:	4233      	tst	r3, r6
 80023a4:	d10b      	bne.n	80023be <__aeabi_dmul+0x146>
 80023a6:	2690      	movs	r6, #144	; 0x90
 80023a8:	00b6      	lsls	r6, r6, #2
 80023aa:	4233      	tst	r3, r6
 80023ac:	d118      	bne.n	80023e0 <__aeabi_dmul+0x168>
 80023ae:	3eb9      	subs	r6, #185	; 0xb9
 80023b0:	3eff      	subs	r6, #255	; 0xff
 80023b2:	421e      	tst	r6, r3
 80023b4:	d01d      	beq.n	80023f2 <__aeabi_dmul+0x17a>
 80023b6:	46a3      	mov	fp, r4
 80023b8:	4682      	mov	sl, r0
 80023ba:	9100      	str	r1, [sp, #0]
 80023bc:	e000      	b.n	80023c0 <__aeabi_dmul+0x148>
 80023be:	0017      	movs	r7, r2
 80023c0:	9900      	ldr	r1, [sp, #0]
 80023c2:	003a      	movs	r2, r7
 80023c4:	2902      	cmp	r1, #2
 80023c6:	d010      	beq.n	80023ea <__aeabi_dmul+0x172>
 80023c8:	465c      	mov	r4, fp
 80023ca:	4650      	mov	r0, sl
 80023cc:	2903      	cmp	r1, #3
 80023ce:	d1bf      	bne.n	8002350 <__aeabi_dmul+0xd8>
 80023d0:	2380      	movs	r3, #128	; 0x80
 80023d2:	031b      	lsls	r3, r3, #12
 80023d4:	431c      	orrs	r4, r3
 80023d6:	0324      	lsls	r4, r4, #12
 80023d8:	0005      	movs	r5, r0
 80023da:	4b7f      	ldr	r3, [pc, #508]	; (80025d8 <__aeabi_dmul+0x360>)
 80023dc:	0b24      	lsrs	r4, r4, #12
 80023de:	e7bd      	b.n	800235c <__aeabi_dmul+0xe4>
 80023e0:	2480      	movs	r4, #128	; 0x80
 80023e2:	2200      	movs	r2, #0
 80023e4:	4b7c      	ldr	r3, [pc, #496]	; (80025d8 <__aeabi_dmul+0x360>)
 80023e6:	0324      	lsls	r4, r4, #12
 80023e8:	e7b8      	b.n	800235c <__aeabi_dmul+0xe4>
 80023ea:	2400      	movs	r4, #0
 80023ec:	2500      	movs	r5, #0
 80023ee:	4b7a      	ldr	r3, [pc, #488]	; (80025d8 <__aeabi_dmul+0x360>)
 80023f0:	e7b4      	b.n	800235c <__aeabi_dmul+0xe4>
 80023f2:	4653      	mov	r3, sl
 80023f4:	041e      	lsls	r6, r3, #16
 80023f6:	0c36      	lsrs	r6, r6, #16
 80023f8:	0c1f      	lsrs	r7, r3, #16
 80023fa:	0033      	movs	r3, r6
 80023fc:	0c01      	lsrs	r1, r0, #16
 80023fe:	0400      	lsls	r0, r0, #16
 8002400:	0c00      	lsrs	r0, r0, #16
 8002402:	4343      	muls	r3, r0
 8002404:	4698      	mov	r8, r3
 8002406:	0003      	movs	r3, r0
 8002408:	437b      	muls	r3, r7
 800240a:	4699      	mov	r9, r3
 800240c:	0033      	movs	r3, r6
 800240e:	434b      	muls	r3, r1
 8002410:	469c      	mov	ip, r3
 8002412:	4643      	mov	r3, r8
 8002414:	000d      	movs	r5, r1
 8002416:	0c1b      	lsrs	r3, r3, #16
 8002418:	469a      	mov	sl, r3
 800241a:	437d      	muls	r5, r7
 800241c:	44cc      	add	ip, r9
 800241e:	44d4      	add	ip, sl
 8002420:	9500      	str	r5, [sp, #0]
 8002422:	45e1      	cmp	r9, ip
 8002424:	d904      	bls.n	8002430 <__aeabi_dmul+0x1b8>
 8002426:	2380      	movs	r3, #128	; 0x80
 8002428:	025b      	lsls	r3, r3, #9
 800242a:	4699      	mov	r9, r3
 800242c:	444d      	add	r5, r9
 800242e:	9500      	str	r5, [sp, #0]
 8002430:	4663      	mov	r3, ip
 8002432:	0c1b      	lsrs	r3, r3, #16
 8002434:	001d      	movs	r5, r3
 8002436:	4663      	mov	r3, ip
 8002438:	041b      	lsls	r3, r3, #16
 800243a:	469c      	mov	ip, r3
 800243c:	4643      	mov	r3, r8
 800243e:	041b      	lsls	r3, r3, #16
 8002440:	0c1b      	lsrs	r3, r3, #16
 8002442:	4698      	mov	r8, r3
 8002444:	4663      	mov	r3, ip
 8002446:	4443      	add	r3, r8
 8002448:	9303      	str	r3, [sp, #12]
 800244a:	0c23      	lsrs	r3, r4, #16
 800244c:	4698      	mov	r8, r3
 800244e:	0033      	movs	r3, r6
 8002450:	0424      	lsls	r4, r4, #16
 8002452:	0c24      	lsrs	r4, r4, #16
 8002454:	4363      	muls	r3, r4
 8002456:	469c      	mov	ip, r3
 8002458:	0023      	movs	r3, r4
 800245a:	437b      	muls	r3, r7
 800245c:	4699      	mov	r9, r3
 800245e:	4643      	mov	r3, r8
 8002460:	435e      	muls	r6, r3
 8002462:	435f      	muls	r7, r3
 8002464:	444e      	add	r6, r9
 8002466:	4663      	mov	r3, ip
 8002468:	46b2      	mov	sl, r6
 800246a:	0c1e      	lsrs	r6, r3, #16
 800246c:	4456      	add	r6, sl
 800246e:	45b1      	cmp	r9, r6
 8002470:	d903      	bls.n	800247a <__aeabi_dmul+0x202>
 8002472:	2380      	movs	r3, #128	; 0x80
 8002474:	025b      	lsls	r3, r3, #9
 8002476:	4699      	mov	r9, r3
 8002478:	444f      	add	r7, r9
 800247a:	0c33      	lsrs	r3, r6, #16
 800247c:	4699      	mov	r9, r3
 800247e:	003b      	movs	r3, r7
 8002480:	444b      	add	r3, r9
 8002482:	9305      	str	r3, [sp, #20]
 8002484:	4663      	mov	r3, ip
 8002486:	46ac      	mov	ip, r5
 8002488:	041f      	lsls	r7, r3, #16
 800248a:	0c3f      	lsrs	r7, r7, #16
 800248c:	0436      	lsls	r6, r6, #16
 800248e:	19f6      	adds	r6, r6, r7
 8002490:	44b4      	add	ip, r6
 8002492:	4663      	mov	r3, ip
 8002494:	9304      	str	r3, [sp, #16]
 8002496:	465b      	mov	r3, fp
 8002498:	0c1b      	lsrs	r3, r3, #16
 800249a:	469c      	mov	ip, r3
 800249c:	465b      	mov	r3, fp
 800249e:	041f      	lsls	r7, r3, #16
 80024a0:	0c3f      	lsrs	r7, r7, #16
 80024a2:	003b      	movs	r3, r7
 80024a4:	4343      	muls	r3, r0
 80024a6:	4699      	mov	r9, r3
 80024a8:	4663      	mov	r3, ip
 80024aa:	4343      	muls	r3, r0
 80024ac:	469a      	mov	sl, r3
 80024ae:	464b      	mov	r3, r9
 80024b0:	4660      	mov	r0, ip
 80024b2:	0c1b      	lsrs	r3, r3, #16
 80024b4:	469b      	mov	fp, r3
 80024b6:	4348      	muls	r0, r1
 80024b8:	4379      	muls	r1, r7
 80024ba:	4451      	add	r1, sl
 80024bc:	4459      	add	r1, fp
 80024be:	458a      	cmp	sl, r1
 80024c0:	d903      	bls.n	80024ca <__aeabi_dmul+0x252>
 80024c2:	2380      	movs	r3, #128	; 0x80
 80024c4:	025b      	lsls	r3, r3, #9
 80024c6:	469a      	mov	sl, r3
 80024c8:	4450      	add	r0, sl
 80024ca:	0c0b      	lsrs	r3, r1, #16
 80024cc:	469a      	mov	sl, r3
 80024ce:	464b      	mov	r3, r9
 80024d0:	041b      	lsls	r3, r3, #16
 80024d2:	0c1b      	lsrs	r3, r3, #16
 80024d4:	4699      	mov	r9, r3
 80024d6:	003b      	movs	r3, r7
 80024d8:	4363      	muls	r3, r4
 80024da:	0409      	lsls	r1, r1, #16
 80024dc:	4645      	mov	r5, r8
 80024de:	4449      	add	r1, r9
 80024e0:	4699      	mov	r9, r3
 80024e2:	4663      	mov	r3, ip
 80024e4:	435c      	muls	r4, r3
 80024e6:	436b      	muls	r3, r5
 80024e8:	469c      	mov	ip, r3
 80024ea:	464b      	mov	r3, r9
 80024ec:	0c1b      	lsrs	r3, r3, #16
 80024ee:	4698      	mov	r8, r3
 80024f0:	436f      	muls	r7, r5
 80024f2:	193f      	adds	r7, r7, r4
 80024f4:	4447      	add	r7, r8
 80024f6:	4450      	add	r0, sl
 80024f8:	42bc      	cmp	r4, r7
 80024fa:	d903      	bls.n	8002504 <__aeabi_dmul+0x28c>
 80024fc:	2380      	movs	r3, #128	; 0x80
 80024fe:	025b      	lsls	r3, r3, #9
 8002500:	4698      	mov	r8, r3
 8002502:	44c4      	add	ip, r8
 8002504:	9b04      	ldr	r3, [sp, #16]
 8002506:	9d00      	ldr	r5, [sp, #0]
 8002508:	4698      	mov	r8, r3
 800250a:	4445      	add	r5, r8
 800250c:	42b5      	cmp	r5, r6
 800250e:	41b6      	sbcs	r6, r6
 8002510:	4273      	negs	r3, r6
 8002512:	4698      	mov	r8, r3
 8002514:	464b      	mov	r3, r9
 8002516:	041e      	lsls	r6, r3, #16
 8002518:	9b05      	ldr	r3, [sp, #20]
 800251a:	043c      	lsls	r4, r7, #16
 800251c:	4699      	mov	r9, r3
 800251e:	0c36      	lsrs	r6, r6, #16
 8002520:	19a4      	adds	r4, r4, r6
 8002522:	444c      	add	r4, r9
 8002524:	46a1      	mov	r9, r4
 8002526:	4683      	mov	fp, r0
 8002528:	186e      	adds	r6, r5, r1
 800252a:	44c1      	add	r9, r8
 800252c:	428e      	cmp	r6, r1
 800252e:	4189      	sbcs	r1, r1
 8002530:	44cb      	add	fp, r9
 8002532:	465d      	mov	r5, fp
 8002534:	4249      	negs	r1, r1
 8002536:	186d      	adds	r5, r5, r1
 8002538:	429c      	cmp	r4, r3
 800253a:	41a4      	sbcs	r4, r4
 800253c:	45c1      	cmp	r9, r8
 800253e:	419b      	sbcs	r3, r3
 8002540:	4583      	cmp	fp, r0
 8002542:	4180      	sbcs	r0, r0
 8002544:	428d      	cmp	r5, r1
 8002546:	4189      	sbcs	r1, r1
 8002548:	425b      	negs	r3, r3
 800254a:	4264      	negs	r4, r4
 800254c:	431c      	orrs	r4, r3
 800254e:	4240      	negs	r0, r0
 8002550:	9b03      	ldr	r3, [sp, #12]
 8002552:	4249      	negs	r1, r1
 8002554:	4301      	orrs	r1, r0
 8002556:	0270      	lsls	r0, r6, #9
 8002558:	0c3f      	lsrs	r7, r7, #16
 800255a:	4318      	orrs	r0, r3
 800255c:	19e4      	adds	r4, r4, r7
 800255e:	1e47      	subs	r7, r0, #1
 8002560:	41b8      	sbcs	r0, r7
 8002562:	1864      	adds	r4, r4, r1
 8002564:	4464      	add	r4, ip
 8002566:	0df6      	lsrs	r6, r6, #23
 8002568:	0261      	lsls	r1, r4, #9
 800256a:	4330      	orrs	r0, r6
 800256c:	0dec      	lsrs	r4, r5, #23
 800256e:	026e      	lsls	r6, r5, #9
 8002570:	430c      	orrs	r4, r1
 8002572:	4330      	orrs	r0, r6
 8002574:	01c9      	lsls	r1, r1, #7
 8002576:	d400      	bmi.n	800257a <__aeabi_dmul+0x302>
 8002578:	e0f1      	b.n	800275e <__aeabi_dmul+0x4e6>
 800257a:	2101      	movs	r1, #1
 800257c:	0843      	lsrs	r3, r0, #1
 800257e:	4001      	ands	r1, r0
 8002580:	430b      	orrs	r3, r1
 8002582:	07e0      	lsls	r0, r4, #31
 8002584:	4318      	orrs	r0, r3
 8002586:	0864      	lsrs	r4, r4, #1
 8002588:	4915      	ldr	r1, [pc, #84]	; (80025e0 <__aeabi_dmul+0x368>)
 800258a:	9b02      	ldr	r3, [sp, #8]
 800258c:	468c      	mov	ip, r1
 800258e:	4463      	add	r3, ip
 8002590:	2b00      	cmp	r3, #0
 8002592:	dc00      	bgt.n	8002596 <__aeabi_dmul+0x31e>
 8002594:	e097      	b.n	80026c6 <__aeabi_dmul+0x44e>
 8002596:	0741      	lsls	r1, r0, #29
 8002598:	d009      	beq.n	80025ae <__aeabi_dmul+0x336>
 800259a:	210f      	movs	r1, #15
 800259c:	4001      	ands	r1, r0
 800259e:	2904      	cmp	r1, #4
 80025a0:	d005      	beq.n	80025ae <__aeabi_dmul+0x336>
 80025a2:	1d01      	adds	r1, r0, #4
 80025a4:	4281      	cmp	r1, r0
 80025a6:	4180      	sbcs	r0, r0
 80025a8:	4240      	negs	r0, r0
 80025aa:	1824      	adds	r4, r4, r0
 80025ac:	0008      	movs	r0, r1
 80025ae:	01e1      	lsls	r1, r4, #7
 80025b0:	d506      	bpl.n	80025c0 <__aeabi_dmul+0x348>
 80025b2:	2180      	movs	r1, #128	; 0x80
 80025b4:	00c9      	lsls	r1, r1, #3
 80025b6:	468c      	mov	ip, r1
 80025b8:	4b0a      	ldr	r3, [pc, #40]	; (80025e4 <__aeabi_dmul+0x36c>)
 80025ba:	401c      	ands	r4, r3
 80025bc:	9b02      	ldr	r3, [sp, #8]
 80025be:	4463      	add	r3, ip
 80025c0:	4909      	ldr	r1, [pc, #36]	; (80025e8 <__aeabi_dmul+0x370>)
 80025c2:	428b      	cmp	r3, r1
 80025c4:	dd00      	ble.n	80025c8 <__aeabi_dmul+0x350>
 80025c6:	e710      	b.n	80023ea <__aeabi_dmul+0x172>
 80025c8:	0761      	lsls	r1, r4, #29
 80025ca:	08c5      	lsrs	r5, r0, #3
 80025cc:	0264      	lsls	r4, r4, #9
 80025ce:	055b      	lsls	r3, r3, #21
 80025d0:	430d      	orrs	r5, r1
 80025d2:	0b24      	lsrs	r4, r4, #12
 80025d4:	0d5b      	lsrs	r3, r3, #21
 80025d6:	e6c1      	b.n	800235c <__aeabi_dmul+0xe4>
 80025d8:	000007ff 	.word	0x000007ff
 80025dc:	fffffc01 	.word	0xfffffc01
 80025e0:	000003ff 	.word	0x000003ff
 80025e4:	feffffff 	.word	0xfeffffff
 80025e8:	000007fe 	.word	0x000007fe
 80025ec:	464b      	mov	r3, r9
 80025ee:	4323      	orrs	r3, r4
 80025f0:	d059      	beq.n	80026a6 <__aeabi_dmul+0x42e>
 80025f2:	2c00      	cmp	r4, #0
 80025f4:	d100      	bne.n	80025f8 <__aeabi_dmul+0x380>
 80025f6:	e0a3      	b.n	8002740 <__aeabi_dmul+0x4c8>
 80025f8:	0020      	movs	r0, r4
 80025fa:	f000 fdf9 	bl	80031f0 <__clzsi2>
 80025fe:	0001      	movs	r1, r0
 8002600:	0003      	movs	r3, r0
 8002602:	390b      	subs	r1, #11
 8002604:	221d      	movs	r2, #29
 8002606:	1a52      	subs	r2, r2, r1
 8002608:	4649      	mov	r1, r9
 800260a:	0018      	movs	r0, r3
 800260c:	40d1      	lsrs	r1, r2
 800260e:	464a      	mov	r2, r9
 8002610:	3808      	subs	r0, #8
 8002612:	4082      	lsls	r2, r0
 8002614:	4084      	lsls	r4, r0
 8002616:	0010      	movs	r0, r2
 8002618:	430c      	orrs	r4, r1
 800261a:	4a74      	ldr	r2, [pc, #464]	; (80027ec <__aeabi_dmul+0x574>)
 800261c:	1aeb      	subs	r3, r5, r3
 800261e:	4694      	mov	ip, r2
 8002620:	4642      	mov	r2, r8
 8002622:	4463      	add	r3, ip
 8002624:	9301      	str	r3, [sp, #4]
 8002626:	9b01      	ldr	r3, [sp, #4]
 8002628:	407a      	eors	r2, r7
 800262a:	3301      	adds	r3, #1
 800262c:	2100      	movs	r1, #0
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	9302      	str	r3, [sp, #8]
 8002632:	2e0a      	cmp	r6, #10
 8002634:	dd00      	ble.n	8002638 <__aeabi_dmul+0x3c0>
 8002636:	e667      	b.n	8002308 <__aeabi_dmul+0x90>
 8002638:	e683      	b.n	8002342 <__aeabi_dmul+0xca>
 800263a:	465b      	mov	r3, fp
 800263c:	4303      	orrs	r3, r0
 800263e:	469a      	mov	sl, r3
 8002640:	d02a      	beq.n	8002698 <__aeabi_dmul+0x420>
 8002642:	465b      	mov	r3, fp
 8002644:	2b00      	cmp	r3, #0
 8002646:	d06d      	beq.n	8002724 <__aeabi_dmul+0x4ac>
 8002648:	4658      	mov	r0, fp
 800264a:	f000 fdd1 	bl	80031f0 <__clzsi2>
 800264e:	0001      	movs	r1, r0
 8002650:	0003      	movs	r3, r0
 8002652:	390b      	subs	r1, #11
 8002654:	221d      	movs	r2, #29
 8002656:	1a52      	subs	r2, r2, r1
 8002658:	0021      	movs	r1, r4
 800265a:	0018      	movs	r0, r3
 800265c:	465d      	mov	r5, fp
 800265e:	40d1      	lsrs	r1, r2
 8002660:	3808      	subs	r0, #8
 8002662:	4085      	lsls	r5, r0
 8002664:	000a      	movs	r2, r1
 8002666:	4084      	lsls	r4, r0
 8002668:	432a      	orrs	r2, r5
 800266a:	4693      	mov	fp, r2
 800266c:	46a2      	mov	sl, r4
 800266e:	4d5f      	ldr	r5, [pc, #380]	; (80027ec <__aeabi_dmul+0x574>)
 8002670:	2600      	movs	r6, #0
 8002672:	1aed      	subs	r5, r5, r3
 8002674:	2300      	movs	r3, #0
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	e625      	b.n	80022c6 <__aeabi_dmul+0x4e>
 800267a:	465b      	mov	r3, fp
 800267c:	4303      	orrs	r3, r0
 800267e:	469a      	mov	sl, r3
 8002680:	d105      	bne.n	800268e <__aeabi_dmul+0x416>
 8002682:	2300      	movs	r3, #0
 8002684:	469b      	mov	fp, r3
 8002686:	3302      	adds	r3, #2
 8002688:	2608      	movs	r6, #8
 800268a:	9300      	str	r3, [sp, #0]
 800268c:	e61b      	b.n	80022c6 <__aeabi_dmul+0x4e>
 800268e:	2303      	movs	r3, #3
 8002690:	4682      	mov	sl, r0
 8002692:	260c      	movs	r6, #12
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	e616      	b.n	80022c6 <__aeabi_dmul+0x4e>
 8002698:	2300      	movs	r3, #0
 800269a:	469b      	mov	fp, r3
 800269c:	3301      	adds	r3, #1
 800269e:	2604      	movs	r6, #4
 80026a0:	2500      	movs	r5, #0
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	e60f      	b.n	80022c6 <__aeabi_dmul+0x4e>
 80026a6:	4642      	mov	r2, r8
 80026a8:	3301      	adds	r3, #1
 80026aa:	9501      	str	r5, [sp, #4]
 80026ac:	431e      	orrs	r6, r3
 80026ae:	9b01      	ldr	r3, [sp, #4]
 80026b0:	407a      	eors	r2, r7
 80026b2:	3301      	adds	r3, #1
 80026b4:	2400      	movs	r4, #0
 80026b6:	2000      	movs	r0, #0
 80026b8:	2101      	movs	r1, #1
 80026ba:	b2d2      	uxtb	r2, r2
 80026bc:	9302      	str	r3, [sp, #8]
 80026be:	2e0a      	cmp	r6, #10
 80026c0:	dd00      	ble.n	80026c4 <__aeabi_dmul+0x44c>
 80026c2:	e621      	b.n	8002308 <__aeabi_dmul+0x90>
 80026c4:	e63d      	b.n	8002342 <__aeabi_dmul+0xca>
 80026c6:	2101      	movs	r1, #1
 80026c8:	1ac9      	subs	r1, r1, r3
 80026ca:	2938      	cmp	r1, #56	; 0x38
 80026cc:	dd00      	ble.n	80026d0 <__aeabi_dmul+0x458>
 80026ce:	e642      	b.n	8002356 <__aeabi_dmul+0xde>
 80026d0:	291f      	cmp	r1, #31
 80026d2:	dd47      	ble.n	8002764 <__aeabi_dmul+0x4ec>
 80026d4:	261f      	movs	r6, #31
 80026d6:	0025      	movs	r5, r4
 80026d8:	4276      	negs	r6, r6
 80026da:	1af3      	subs	r3, r6, r3
 80026dc:	40dd      	lsrs	r5, r3
 80026de:	002b      	movs	r3, r5
 80026e0:	2920      	cmp	r1, #32
 80026e2:	d005      	beq.n	80026f0 <__aeabi_dmul+0x478>
 80026e4:	4942      	ldr	r1, [pc, #264]	; (80027f0 <__aeabi_dmul+0x578>)
 80026e6:	9d02      	ldr	r5, [sp, #8]
 80026e8:	468c      	mov	ip, r1
 80026ea:	4465      	add	r5, ip
 80026ec:	40ac      	lsls	r4, r5
 80026ee:	4320      	orrs	r0, r4
 80026f0:	1e41      	subs	r1, r0, #1
 80026f2:	4188      	sbcs	r0, r1
 80026f4:	4318      	orrs	r0, r3
 80026f6:	2307      	movs	r3, #7
 80026f8:	001d      	movs	r5, r3
 80026fa:	2400      	movs	r4, #0
 80026fc:	4005      	ands	r5, r0
 80026fe:	4203      	tst	r3, r0
 8002700:	d04a      	beq.n	8002798 <__aeabi_dmul+0x520>
 8002702:	230f      	movs	r3, #15
 8002704:	2400      	movs	r4, #0
 8002706:	4003      	ands	r3, r0
 8002708:	2b04      	cmp	r3, #4
 800270a:	d042      	beq.n	8002792 <__aeabi_dmul+0x51a>
 800270c:	1d03      	adds	r3, r0, #4
 800270e:	4283      	cmp	r3, r0
 8002710:	4180      	sbcs	r0, r0
 8002712:	4240      	negs	r0, r0
 8002714:	1824      	adds	r4, r4, r0
 8002716:	0018      	movs	r0, r3
 8002718:	0223      	lsls	r3, r4, #8
 800271a:	d53a      	bpl.n	8002792 <__aeabi_dmul+0x51a>
 800271c:	2301      	movs	r3, #1
 800271e:	2400      	movs	r4, #0
 8002720:	2500      	movs	r5, #0
 8002722:	e61b      	b.n	800235c <__aeabi_dmul+0xe4>
 8002724:	f000 fd64 	bl	80031f0 <__clzsi2>
 8002728:	0001      	movs	r1, r0
 800272a:	0003      	movs	r3, r0
 800272c:	3115      	adds	r1, #21
 800272e:	3320      	adds	r3, #32
 8002730:	291c      	cmp	r1, #28
 8002732:	dd8f      	ble.n	8002654 <__aeabi_dmul+0x3dc>
 8002734:	3808      	subs	r0, #8
 8002736:	2200      	movs	r2, #0
 8002738:	4084      	lsls	r4, r0
 800273a:	4692      	mov	sl, r2
 800273c:	46a3      	mov	fp, r4
 800273e:	e796      	b.n	800266e <__aeabi_dmul+0x3f6>
 8002740:	f000 fd56 	bl	80031f0 <__clzsi2>
 8002744:	0001      	movs	r1, r0
 8002746:	0003      	movs	r3, r0
 8002748:	3115      	adds	r1, #21
 800274a:	3320      	adds	r3, #32
 800274c:	291c      	cmp	r1, #28
 800274e:	dc00      	bgt.n	8002752 <__aeabi_dmul+0x4da>
 8002750:	e758      	b.n	8002604 <__aeabi_dmul+0x38c>
 8002752:	0002      	movs	r2, r0
 8002754:	464c      	mov	r4, r9
 8002756:	3a08      	subs	r2, #8
 8002758:	2000      	movs	r0, #0
 800275a:	4094      	lsls	r4, r2
 800275c:	e75d      	b.n	800261a <__aeabi_dmul+0x3a2>
 800275e:	9b01      	ldr	r3, [sp, #4]
 8002760:	9302      	str	r3, [sp, #8]
 8002762:	e711      	b.n	8002588 <__aeabi_dmul+0x310>
 8002764:	4b23      	ldr	r3, [pc, #140]	; (80027f4 <__aeabi_dmul+0x57c>)
 8002766:	0026      	movs	r6, r4
 8002768:	469c      	mov	ip, r3
 800276a:	0003      	movs	r3, r0
 800276c:	9d02      	ldr	r5, [sp, #8]
 800276e:	40cb      	lsrs	r3, r1
 8002770:	4465      	add	r5, ip
 8002772:	40ae      	lsls	r6, r5
 8002774:	431e      	orrs	r6, r3
 8002776:	0003      	movs	r3, r0
 8002778:	40ab      	lsls	r3, r5
 800277a:	1e58      	subs	r0, r3, #1
 800277c:	4183      	sbcs	r3, r0
 800277e:	0030      	movs	r0, r6
 8002780:	4318      	orrs	r0, r3
 8002782:	40cc      	lsrs	r4, r1
 8002784:	0743      	lsls	r3, r0, #29
 8002786:	d0c7      	beq.n	8002718 <__aeabi_dmul+0x4a0>
 8002788:	230f      	movs	r3, #15
 800278a:	4003      	ands	r3, r0
 800278c:	2b04      	cmp	r3, #4
 800278e:	d1bd      	bne.n	800270c <__aeabi_dmul+0x494>
 8002790:	e7c2      	b.n	8002718 <__aeabi_dmul+0x4a0>
 8002792:	0765      	lsls	r5, r4, #29
 8002794:	0264      	lsls	r4, r4, #9
 8002796:	0b24      	lsrs	r4, r4, #12
 8002798:	08c0      	lsrs	r0, r0, #3
 800279a:	2300      	movs	r3, #0
 800279c:	4305      	orrs	r5, r0
 800279e:	e5dd      	b.n	800235c <__aeabi_dmul+0xe4>
 80027a0:	2500      	movs	r5, #0
 80027a2:	2302      	movs	r3, #2
 80027a4:	2e0f      	cmp	r6, #15
 80027a6:	d10c      	bne.n	80027c2 <__aeabi_dmul+0x54a>
 80027a8:	2480      	movs	r4, #128	; 0x80
 80027aa:	465b      	mov	r3, fp
 80027ac:	0324      	lsls	r4, r4, #12
 80027ae:	4223      	tst	r3, r4
 80027b0:	d00e      	beq.n	80027d0 <__aeabi_dmul+0x558>
 80027b2:	4221      	tst	r1, r4
 80027b4:	d10c      	bne.n	80027d0 <__aeabi_dmul+0x558>
 80027b6:	430c      	orrs	r4, r1
 80027b8:	0324      	lsls	r4, r4, #12
 80027ba:	003a      	movs	r2, r7
 80027bc:	4b0e      	ldr	r3, [pc, #56]	; (80027f8 <__aeabi_dmul+0x580>)
 80027be:	0b24      	lsrs	r4, r4, #12
 80027c0:	e5cc      	b.n	800235c <__aeabi_dmul+0xe4>
 80027c2:	2e0b      	cmp	r6, #11
 80027c4:	d000      	beq.n	80027c8 <__aeabi_dmul+0x550>
 80027c6:	e5a2      	b.n	800230e <__aeabi_dmul+0x96>
 80027c8:	468b      	mov	fp, r1
 80027ca:	46aa      	mov	sl, r5
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	e5f7      	b.n	80023c0 <__aeabi_dmul+0x148>
 80027d0:	2480      	movs	r4, #128	; 0x80
 80027d2:	465b      	mov	r3, fp
 80027d4:	0324      	lsls	r4, r4, #12
 80027d6:	431c      	orrs	r4, r3
 80027d8:	0324      	lsls	r4, r4, #12
 80027da:	4642      	mov	r2, r8
 80027dc:	4655      	mov	r5, sl
 80027de:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <__aeabi_dmul+0x580>)
 80027e0:	0b24      	lsrs	r4, r4, #12
 80027e2:	e5bb      	b.n	800235c <__aeabi_dmul+0xe4>
 80027e4:	464d      	mov	r5, r9
 80027e6:	0021      	movs	r1, r4
 80027e8:	2303      	movs	r3, #3
 80027ea:	e7db      	b.n	80027a4 <__aeabi_dmul+0x52c>
 80027ec:	fffffc0d 	.word	0xfffffc0d
 80027f0:	0000043e 	.word	0x0000043e
 80027f4:	0000041e 	.word	0x0000041e
 80027f8:	000007ff 	.word	0x000007ff

080027fc <__aeabi_dsub>:
 80027fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027fe:	4657      	mov	r7, sl
 8002800:	464e      	mov	r6, r9
 8002802:	4645      	mov	r5, r8
 8002804:	46de      	mov	lr, fp
 8002806:	b5e0      	push	{r5, r6, r7, lr}
 8002808:	000d      	movs	r5, r1
 800280a:	0004      	movs	r4, r0
 800280c:	0019      	movs	r1, r3
 800280e:	0010      	movs	r0, r2
 8002810:	032b      	lsls	r3, r5, #12
 8002812:	0a5b      	lsrs	r3, r3, #9
 8002814:	0f62      	lsrs	r2, r4, #29
 8002816:	431a      	orrs	r2, r3
 8002818:	00e3      	lsls	r3, r4, #3
 800281a:	030c      	lsls	r4, r1, #12
 800281c:	0a64      	lsrs	r4, r4, #9
 800281e:	0f47      	lsrs	r7, r0, #29
 8002820:	4327      	orrs	r7, r4
 8002822:	4cd0      	ldr	r4, [pc, #832]	; (8002b64 <__aeabi_dsub+0x368>)
 8002824:	006e      	lsls	r6, r5, #1
 8002826:	4691      	mov	r9, r2
 8002828:	b083      	sub	sp, #12
 800282a:	004a      	lsls	r2, r1, #1
 800282c:	00c0      	lsls	r0, r0, #3
 800282e:	4698      	mov	r8, r3
 8002830:	46a2      	mov	sl, r4
 8002832:	0d76      	lsrs	r6, r6, #21
 8002834:	0fed      	lsrs	r5, r5, #31
 8002836:	0d52      	lsrs	r2, r2, #21
 8002838:	0fc9      	lsrs	r1, r1, #31
 800283a:	9001      	str	r0, [sp, #4]
 800283c:	42a2      	cmp	r2, r4
 800283e:	d100      	bne.n	8002842 <__aeabi_dsub+0x46>
 8002840:	e0b9      	b.n	80029b6 <__aeabi_dsub+0x1ba>
 8002842:	2401      	movs	r4, #1
 8002844:	4061      	eors	r1, r4
 8002846:	468b      	mov	fp, r1
 8002848:	428d      	cmp	r5, r1
 800284a:	d100      	bne.n	800284e <__aeabi_dsub+0x52>
 800284c:	e08d      	b.n	800296a <__aeabi_dsub+0x16e>
 800284e:	1ab4      	subs	r4, r6, r2
 8002850:	46a4      	mov	ip, r4
 8002852:	2c00      	cmp	r4, #0
 8002854:	dc00      	bgt.n	8002858 <__aeabi_dsub+0x5c>
 8002856:	e0b7      	b.n	80029c8 <__aeabi_dsub+0x1cc>
 8002858:	2a00      	cmp	r2, #0
 800285a:	d100      	bne.n	800285e <__aeabi_dsub+0x62>
 800285c:	e0cb      	b.n	80029f6 <__aeabi_dsub+0x1fa>
 800285e:	4ac1      	ldr	r2, [pc, #772]	; (8002b64 <__aeabi_dsub+0x368>)
 8002860:	4296      	cmp	r6, r2
 8002862:	d100      	bne.n	8002866 <__aeabi_dsub+0x6a>
 8002864:	e186      	b.n	8002b74 <__aeabi_dsub+0x378>
 8002866:	2280      	movs	r2, #128	; 0x80
 8002868:	0412      	lsls	r2, r2, #16
 800286a:	4317      	orrs	r7, r2
 800286c:	4662      	mov	r2, ip
 800286e:	2a38      	cmp	r2, #56	; 0x38
 8002870:	dd00      	ble.n	8002874 <__aeabi_dsub+0x78>
 8002872:	e1a4      	b.n	8002bbe <__aeabi_dsub+0x3c2>
 8002874:	2a1f      	cmp	r2, #31
 8002876:	dd00      	ble.n	800287a <__aeabi_dsub+0x7e>
 8002878:	e21d      	b.n	8002cb6 <__aeabi_dsub+0x4ba>
 800287a:	4661      	mov	r1, ip
 800287c:	2220      	movs	r2, #32
 800287e:	003c      	movs	r4, r7
 8002880:	1a52      	subs	r2, r2, r1
 8002882:	0001      	movs	r1, r0
 8002884:	4090      	lsls	r0, r2
 8002886:	4094      	lsls	r4, r2
 8002888:	1e42      	subs	r2, r0, #1
 800288a:	4190      	sbcs	r0, r2
 800288c:	4662      	mov	r2, ip
 800288e:	46a0      	mov	r8, r4
 8002890:	4664      	mov	r4, ip
 8002892:	40d7      	lsrs	r7, r2
 8002894:	464a      	mov	r2, r9
 8002896:	40e1      	lsrs	r1, r4
 8002898:	4644      	mov	r4, r8
 800289a:	1bd2      	subs	r2, r2, r7
 800289c:	4691      	mov	r9, r2
 800289e:	430c      	orrs	r4, r1
 80028a0:	4304      	orrs	r4, r0
 80028a2:	1b1c      	subs	r4, r3, r4
 80028a4:	42a3      	cmp	r3, r4
 80028a6:	4192      	sbcs	r2, r2
 80028a8:	464b      	mov	r3, r9
 80028aa:	4252      	negs	r2, r2
 80028ac:	1a9b      	subs	r3, r3, r2
 80028ae:	469a      	mov	sl, r3
 80028b0:	4653      	mov	r3, sl
 80028b2:	021b      	lsls	r3, r3, #8
 80028b4:	d400      	bmi.n	80028b8 <__aeabi_dsub+0xbc>
 80028b6:	e12b      	b.n	8002b10 <__aeabi_dsub+0x314>
 80028b8:	4653      	mov	r3, sl
 80028ba:	025a      	lsls	r2, r3, #9
 80028bc:	0a53      	lsrs	r3, r2, #9
 80028be:	469a      	mov	sl, r3
 80028c0:	4653      	mov	r3, sl
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d100      	bne.n	80028c8 <__aeabi_dsub+0xcc>
 80028c6:	e166      	b.n	8002b96 <__aeabi_dsub+0x39a>
 80028c8:	4650      	mov	r0, sl
 80028ca:	f000 fc91 	bl	80031f0 <__clzsi2>
 80028ce:	0003      	movs	r3, r0
 80028d0:	3b08      	subs	r3, #8
 80028d2:	2220      	movs	r2, #32
 80028d4:	0020      	movs	r0, r4
 80028d6:	1ad2      	subs	r2, r2, r3
 80028d8:	4651      	mov	r1, sl
 80028da:	40d0      	lsrs	r0, r2
 80028dc:	4099      	lsls	r1, r3
 80028de:	0002      	movs	r2, r0
 80028e0:	409c      	lsls	r4, r3
 80028e2:	430a      	orrs	r2, r1
 80028e4:	429e      	cmp	r6, r3
 80028e6:	dd00      	ble.n	80028ea <__aeabi_dsub+0xee>
 80028e8:	e164      	b.n	8002bb4 <__aeabi_dsub+0x3b8>
 80028ea:	1b9b      	subs	r3, r3, r6
 80028ec:	1c59      	adds	r1, r3, #1
 80028ee:	291f      	cmp	r1, #31
 80028f0:	dd00      	ble.n	80028f4 <__aeabi_dsub+0xf8>
 80028f2:	e0fe      	b.n	8002af2 <__aeabi_dsub+0x2f6>
 80028f4:	2320      	movs	r3, #32
 80028f6:	0010      	movs	r0, r2
 80028f8:	0026      	movs	r6, r4
 80028fa:	1a5b      	subs	r3, r3, r1
 80028fc:	409c      	lsls	r4, r3
 80028fe:	4098      	lsls	r0, r3
 8002900:	40ce      	lsrs	r6, r1
 8002902:	40ca      	lsrs	r2, r1
 8002904:	1e63      	subs	r3, r4, #1
 8002906:	419c      	sbcs	r4, r3
 8002908:	4330      	orrs	r0, r6
 800290a:	4692      	mov	sl, r2
 800290c:	2600      	movs	r6, #0
 800290e:	4304      	orrs	r4, r0
 8002910:	0763      	lsls	r3, r4, #29
 8002912:	d009      	beq.n	8002928 <__aeabi_dsub+0x12c>
 8002914:	230f      	movs	r3, #15
 8002916:	4023      	ands	r3, r4
 8002918:	2b04      	cmp	r3, #4
 800291a:	d005      	beq.n	8002928 <__aeabi_dsub+0x12c>
 800291c:	1d23      	adds	r3, r4, #4
 800291e:	42a3      	cmp	r3, r4
 8002920:	41a4      	sbcs	r4, r4
 8002922:	4264      	negs	r4, r4
 8002924:	44a2      	add	sl, r4
 8002926:	001c      	movs	r4, r3
 8002928:	4653      	mov	r3, sl
 800292a:	021b      	lsls	r3, r3, #8
 800292c:	d400      	bmi.n	8002930 <__aeabi_dsub+0x134>
 800292e:	e0f2      	b.n	8002b16 <__aeabi_dsub+0x31a>
 8002930:	4b8c      	ldr	r3, [pc, #560]	; (8002b64 <__aeabi_dsub+0x368>)
 8002932:	3601      	adds	r6, #1
 8002934:	429e      	cmp	r6, r3
 8002936:	d100      	bne.n	800293a <__aeabi_dsub+0x13e>
 8002938:	e10f      	b.n	8002b5a <__aeabi_dsub+0x35e>
 800293a:	4653      	mov	r3, sl
 800293c:	498a      	ldr	r1, [pc, #552]	; (8002b68 <__aeabi_dsub+0x36c>)
 800293e:	08e4      	lsrs	r4, r4, #3
 8002940:	400b      	ands	r3, r1
 8002942:	0019      	movs	r1, r3
 8002944:	075b      	lsls	r3, r3, #29
 8002946:	4323      	orrs	r3, r4
 8002948:	0572      	lsls	r2, r6, #21
 800294a:	024c      	lsls	r4, r1, #9
 800294c:	0b24      	lsrs	r4, r4, #12
 800294e:	0d52      	lsrs	r2, r2, #21
 8002950:	0512      	lsls	r2, r2, #20
 8002952:	4322      	orrs	r2, r4
 8002954:	07ed      	lsls	r5, r5, #31
 8002956:	432a      	orrs	r2, r5
 8002958:	0018      	movs	r0, r3
 800295a:	0011      	movs	r1, r2
 800295c:	b003      	add	sp, #12
 800295e:	bcf0      	pop	{r4, r5, r6, r7}
 8002960:	46bb      	mov	fp, r7
 8002962:	46b2      	mov	sl, r6
 8002964:	46a9      	mov	r9, r5
 8002966:	46a0      	mov	r8, r4
 8002968:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800296a:	1ab4      	subs	r4, r6, r2
 800296c:	46a4      	mov	ip, r4
 800296e:	2c00      	cmp	r4, #0
 8002970:	dd59      	ble.n	8002a26 <__aeabi_dsub+0x22a>
 8002972:	2a00      	cmp	r2, #0
 8002974:	d100      	bne.n	8002978 <__aeabi_dsub+0x17c>
 8002976:	e0b0      	b.n	8002ada <__aeabi_dsub+0x2de>
 8002978:	4556      	cmp	r6, sl
 800297a:	d100      	bne.n	800297e <__aeabi_dsub+0x182>
 800297c:	e0fa      	b.n	8002b74 <__aeabi_dsub+0x378>
 800297e:	2280      	movs	r2, #128	; 0x80
 8002980:	0412      	lsls	r2, r2, #16
 8002982:	4317      	orrs	r7, r2
 8002984:	4662      	mov	r2, ip
 8002986:	2a38      	cmp	r2, #56	; 0x38
 8002988:	dd00      	ble.n	800298c <__aeabi_dsub+0x190>
 800298a:	e0d4      	b.n	8002b36 <__aeabi_dsub+0x33a>
 800298c:	2a1f      	cmp	r2, #31
 800298e:	dc00      	bgt.n	8002992 <__aeabi_dsub+0x196>
 8002990:	e1c0      	b.n	8002d14 <__aeabi_dsub+0x518>
 8002992:	0039      	movs	r1, r7
 8002994:	3a20      	subs	r2, #32
 8002996:	40d1      	lsrs	r1, r2
 8002998:	4662      	mov	r2, ip
 800299a:	2a20      	cmp	r2, #32
 800299c:	d006      	beq.n	80029ac <__aeabi_dsub+0x1b0>
 800299e:	4664      	mov	r4, ip
 80029a0:	2240      	movs	r2, #64	; 0x40
 80029a2:	1b12      	subs	r2, r2, r4
 80029a4:	003c      	movs	r4, r7
 80029a6:	4094      	lsls	r4, r2
 80029a8:	4304      	orrs	r4, r0
 80029aa:	9401      	str	r4, [sp, #4]
 80029ac:	9c01      	ldr	r4, [sp, #4]
 80029ae:	1e62      	subs	r2, r4, #1
 80029b0:	4194      	sbcs	r4, r2
 80029b2:	430c      	orrs	r4, r1
 80029b4:	e0c3      	b.n	8002b3e <__aeabi_dsub+0x342>
 80029b6:	003c      	movs	r4, r7
 80029b8:	4304      	orrs	r4, r0
 80029ba:	d02b      	beq.n	8002a14 <__aeabi_dsub+0x218>
 80029bc:	468b      	mov	fp, r1
 80029be:	428d      	cmp	r5, r1
 80029c0:	d02e      	beq.n	8002a20 <__aeabi_dsub+0x224>
 80029c2:	4c6a      	ldr	r4, [pc, #424]	; (8002b6c <__aeabi_dsub+0x370>)
 80029c4:	46a4      	mov	ip, r4
 80029c6:	44b4      	add	ip, r6
 80029c8:	4664      	mov	r4, ip
 80029ca:	2c00      	cmp	r4, #0
 80029cc:	d05f      	beq.n	8002a8e <__aeabi_dsub+0x292>
 80029ce:	1b94      	subs	r4, r2, r6
 80029d0:	46a4      	mov	ip, r4
 80029d2:	2e00      	cmp	r6, #0
 80029d4:	d000      	beq.n	80029d8 <__aeabi_dsub+0x1dc>
 80029d6:	e120      	b.n	8002c1a <__aeabi_dsub+0x41e>
 80029d8:	464c      	mov	r4, r9
 80029da:	431c      	orrs	r4, r3
 80029dc:	d100      	bne.n	80029e0 <__aeabi_dsub+0x1e4>
 80029de:	e1c7      	b.n	8002d70 <__aeabi_dsub+0x574>
 80029e0:	4661      	mov	r1, ip
 80029e2:	1e4c      	subs	r4, r1, #1
 80029e4:	2901      	cmp	r1, #1
 80029e6:	d100      	bne.n	80029ea <__aeabi_dsub+0x1ee>
 80029e8:	e223      	b.n	8002e32 <__aeabi_dsub+0x636>
 80029ea:	4d5e      	ldr	r5, [pc, #376]	; (8002b64 <__aeabi_dsub+0x368>)
 80029ec:	45ac      	cmp	ip, r5
 80029ee:	d100      	bne.n	80029f2 <__aeabi_dsub+0x1f6>
 80029f0:	e1d8      	b.n	8002da4 <__aeabi_dsub+0x5a8>
 80029f2:	46a4      	mov	ip, r4
 80029f4:	e11a      	b.n	8002c2c <__aeabi_dsub+0x430>
 80029f6:	003a      	movs	r2, r7
 80029f8:	4302      	orrs	r2, r0
 80029fa:	d100      	bne.n	80029fe <__aeabi_dsub+0x202>
 80029fc:	e0e4      	b.n	8002bc8 <__aeabi_dsub+0x3cc>
 80029fe:	0022      	movs	r2, r4
 8002a00:	3a01      	subs	r2, #1
 8002a02:	2c01      	cmp	r4, #1
 8002a04:	d100      	bne.n	8002a08 <__aeabi_dsub+0x20c>
 8002a06:	e1c3      	b.n	8002d90 <__aeabi_dsub+0x594>
 8002a08:	4956      	ldr	r1, [pc, #344]	; (8002b64 <__aeabi_dsub+0x368>)
 8002a0a:	428c      	cmp	r4, r1
 8002a0c:	d100      	bne.n	8002a10 <__aeabi_dsub+0x214>
 8002a0e:	e0b1      	b.n	8002b74 <__aeabi_dsub+0x378>
 8002a10:	4694      	mov	ip, r2
 8002a12:	e72b      	b.n	800286c <__aeabi_dsub+0x70>
 8002a14:	2401      	movs	r4, #1
 8002a16:	4061      	eors	r1, r4
 8002a18:	468b      	mov	fp, r1
 8002a1a:	428d      	cmp	r5, r1
 8002a1c:	d000      	beq.n	8002a20 <__aeabi_dsub+0x224>
 8002a1e:	e716      	b.n	800284e <__aeabi_dsub+0x52>
 8002a20:	4952      	ldr	r1, [pc, #328]	; (8002b6c <__aeabi_dsub+0x370>)
 8002a22:	468c      	mov	ip, r1
 8002a24:	44b4      	add	ip, r6
 8002a26:	4664      	mov	r4, ip
 8002a28:	2c00      	cmp	r4, #0
 8002a2a:	d100      	bne.n	8002a2e <__aeabi_dsub+0x232>
 8002a2c:	e0d3      	b.n	8002bd6 <__aeabi_dsub+0x3da>
 8002a2e:	1b91      	subs	r1, r2, r6
 8002a30:	468c      	mov	ip, r1
 8002a32:	2e00      	cmp	r6, #0
 8002a34:	d100      	bne.n	8002a38 <__aeabi_dsub+0x23c>
 8002a36:	e15e      	b.n	8002cf6 <__aeabi_dsub+0x4fa>
 8002a38:	494a      	ldr	r1, [pc, #296]	; (8002b64 <__aeabi_dsub+0x368>)
 8002a3a:	428a      	cmp	r2, r1
 8002a3c:	d100      	bne.n	8002a40 <__aeabi_dsub+0x244>
 8002a3e:	e1be      	b.n	8002dbe <__aeabi_dsub+0x5c2>
 8002a40:	2180      	movs	r1, #128	; 0x80
 8002a42:	464c      	mov	r4, r9
 8002a44:	0409      	lsls	r1, r1, #16
 8002a46:	430c      	orrs	r4, r1
 8002a48:	46a1      	mov	r9, r4
 8002a4a:	4661      	mov	r1, ip
 8002a4c:	2938      	cmp	r1, #56	; 0x38
 8002a4e:	dd00      	ble.n	8002a52 <__aeabi_dsub+0x256>
 8002a50:	e1ba      	b.n	8002dc8 <__aeabi_dsub+0x5cc>
 8002a52:	291f      	cmp	r1, #31
 8002a54:	dd00      	ble.n	8002a58 <__aeabi_dsub+0x25c>
 8002a56:	e227      	b.n	8002ea8 <__aeabi_dsub+0x6ac>
 8002a58:	2420      	movs	r4, #32
 8002a5a:	1a64      	subs	r4, r4, r1
 8002a5c:	4649      	mov	r1, r9
 8002a5e:	40a1      	lsls	r1, r4
 8002a60:	001e      	movs	r6, r3
 8002a62:	4688      	mov	r8, r1
 8002a64:	4661      	mov	r1, ip
 8002a66:	40a3      	lsls	r3, r4
 8002a68:	40ce      	lsrs	r6, r1
 8002a6a:	4641      	mov	r1, r8
 8002a6c:	1e5c      	subs	r4, r3, #1
 8002a6e:	41a3      	sbcs	r3, r4
 8002a70:	4331      	orrs	r1, r6
 8002a72:	4319      	orrs	r1, r3
 8002a74:	000c      	movs	r4, r1
 8002a76:	4663      	mov	r3, ip
 8002a78:	4649      	mov	r1, r9
 8002a7a:	40d9      	lsrs	r1, r3
 8002a7c:	187f      	adds	r7, r7, r1
 8002a7e:	1824      	adds	r4, r4, r0
 8002a80:	4284      	cmp	r4, r0
 8002a82:	419b      	sbcs	r3, r3
 8002a84:	425b      	negs	r3, r3
 8002a86:	469a      	mov	sl, r3
 8002a88:	0016      	movs	r6, r2
 8002a8a:	44ba      	add	sl, r7
 8002a8c:	e05d      	b.n	8002b4a <__aeabi_dsub+0x34e>
 8002a8e:	4c38      	ldr	r4, [pc, #224]	; (8002b70 <__aeabi_dsub+0x374>)
 8002a90:	1c72      	adds	r2, r6, #1
 8002a92:	4222      	tst	r2, r4
 8002a94:	d000      	beq.n	8002a98 <__aeabi_dsub+0x29c>
 8002a96:	e0df      	b.n	8002c58 <__aeabi_dsub+0x45c>
 8002a98:	464a      	mov	r2, r9
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	2e00      	cmp	r6, #0
 8002a9e:	d000      	beq.n	8002aa2 <__aeabi_dsub+0x2a6>
 8002aa0:	e15c      	b.n	8002d5c <__aeabi_dsub+0x560>
 8002aa2:	2a00      	cmp	r2, #0
 8002aa4:	d100      	bne.n	8002aa8 <__aeabi_dsub+0x2ac>
 8002aa6:	e1cf      	b.n	8002e48 <__aeabi_dsub+0x64c>
 8002aa8:	003a      	movs	r2, r7
 8002aaa:	4302      	orrs	r2, r0
 8002aac:	d100      	bne.n	8002ab0 <__aeabi_dsub+0x2b4>
 8002aae:	e17f      	b.n	8002db0 <__aeabi_dsub+0x5b4>
 8002ab0:	1a1c      	subs	r4, r3, r0
 8002ab2:	464a      	mov	r2, r9
 8002ab4:	42a3      	cmp	r3, r4
 8002ab6:	4189      	sbcs	r1, r1
 8002ab8:	1bd2      	subs	r2, r2, r7
 8002aba:	4249      	negs	r1, r1
 8002abc:	1a52      	subs	r2, r2, r1
 8002abe:	4692      	mov	sl, r2
 8002ac0:	0212      	lsls	r2, r2, #8
 8002ac2:	d400      	bmi.n	8002ac6 <__aeabi_dsub+0x2ca>
 8002ac4:	e20a      	b.n	8002edc <__aeabi_dsub+0x6e0>
 8002ac6:	1ac4      	subs	r4, r0, r3
 8002ac8:	42a0      	cmp	r0, r4
 8002aca:	4180      	sbcs	r0, r0
 8002acc:	464b      	mov	r3, r9
 8002ace:	4240      	negs	r0, r0
 8002ad0:	1aff      	subs	r7, r7, r3
 8002ad2:	1a3b      	subs	r3, r7, r0
 8002ad4:	469a      	mov	sl, r3
 8002ad6:	465d      	mov	r5, fp
 8002ad8:	e71a      	b.n	8002910 <__aeabi_dsub+0x114>
 8002ada:	003a      	movs	r2, r7
 8002adc:	4302      	orrs	r2, r0
 8002ade:	d073      	beq.n	8002bc8 <__aeabi_dsub+0x3cc>
 8002ae0:	0022      	movs	r2, r4
 8002ae2:	3a01      	subs	r2, #1
 8002ae4:	2c01      	cmp	r4, #1
 8002ae6:	d100      	bne.n	8002aea <__aeabi_dsub+0x2ee>
 8002ae8:	e0cb      	b.n	8002c82 <__aeabi_dsub+0x486>
 8002aea:	4554      	cmp	r4, sl
 8002aec:	d042      	beq.n	8002b74 <__aeabi_dsub+0x378>
 8002aee:	4694      	mov	ip, r2
 8002af0:	e748      	b.n	8002984 <__aeabi_dsub+0x188>
 8002af2:	0010      	movs	r0, r2
 8002af4:	3b1f      	subs	r3, #31
 8002af6:	40d8      	lsrs	r0, r3
 8002af8:	2920      	cmp	r1, #32
 8002afa:	d003      	beq.n	8002b04 <__aeabi_dsub+0x308>
 8002afc:	2340      	movs	r3, #64	; 0x40
 8002afe:	1a5b      	subs	r3, r3, r1
 8002b00:	409a      	lsls	r2, r3
 8002b02:	4314      	orrs	r4, r2
 8002b04:	1e63      	subs	r3, r4, #1
 8002b06:	419c      	sbcs	r4, r3
 8002b08:	2300      	movs	r3, #0
 8002b0a:	2600      	movs	r6, #0
 8002b0c:	469a      	mov	sl, r3
 8002b0e:	4304      	orrs	r4, r0
 8002b10:	0763      	lsls	r3, r4, #29
 8002b12:	d000      	beq.n	8002b16 <__aeabi_dsub+0x31a>
 8002b14:	e6fe      	b.n	8002914 <__aeabi_dsub+0x118>
 8002b16:	4652      	mov	r2, sl
 8002b18:	08e3      	lsrs	r3, r4, #3
 8002b1a:	0752      	lsls	r2, r2, #29
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	4652      	mov	r2, sl
 8002b20:	46b4      	mov	ip, r6
 8002b22:	08d2      	lsrs	r2, r2, #3
 8002b24:	490f      	ldr	r1, [pc, #60]	; (8002b64 <__aeabi_dsub+0x368>)
 8002b26:	458c      	cmp	ip, r1
 8002b28:	d02a      	beq.n	8002b80 <__aeabi_dsub+0x384>
 8002b2a:	0312      	lsls	r2, r2, #12
 8002b2c:	0b14      	lsrs	r4, r2, #12
 8002b2e:	4662      	mov	r2, ip
 8002b30:	0552      	lsls	r2, r2, #21
 8002b32:	0d52      	lsrs	r2, r2, #21
 8002b34:	e70c      	b.n	8002950 <__aeabi_dsub+0x154>
 8002b36:	003c      	movs	r4, r7
 8002b38:	4304      	orrs	r4, r0
 8002b3a:	1e62      	subs	r2, r4, #1
 8002b3c:	4194      	sbcs	r4, r2
 8002b3e:	18e4      	adds	r4, r4, r3
 8002b40:	429c      	cmp	r4, r3
 8002b42:	4192      	sbcs	r2, r2
 8002b44:	4252      	negs	r2, r2
 8002b46:	444a      	add	r2, r9
 8002b48:	4692      	mov	sl, r2
 8002b4a:	4653      	mov	r3, sl
 8002b4c:	021b      	lsls	r3, r3, #8
 8002b4e:	d5df      	bpl.n	8002b10 <__aeabi_dsub+0x314>
 8002b50:	4b04      	ldr	r3, [pc, #16]	; (8002b64 <__aeabi_dsub+0x368>)
 8002b52:	3601      	adds	r6, #1
 8002b54:	429e      	cmp	r6, r3
 8002b56:	d000      	beq.n	8002b5a <__aeabi_dsub+0x35e>
 8002b58:	e0a0      	b.n	8002c9c <__aeabi_dsub+0x4a0>
 8002b5a:	0032      	movs	r2, r6
 8002b5c:	2400      	movs	r4, #0
 8002b5e:	2300      	movs	r3, #0
 8002b60:	e6f6      	b.n	8002950 <__aeabi_dsub+0x154>
 8002b62:	46c0      	nop			; (mov r8, r8)
 8002b64:	000007ff 	.word	0x000007ff
 8002b68:	ff7fffff 	.word	0xff7fffff
 8002b6c:	fffff801 	.word	0xfffff801
 8002b70:	000007fe 	.word	0x000007fe
 8002b74:	08db      	lsrs	r3, r3, #3
 8002b76:	464a      	mov	r2, r9
 8002b78:	0752      	lsls	r2, r2, #29
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	464a      	mov	r2, r9
 8002b7e:	08d2      	lsrs	r2, r2, #3
 8002b80:	0019      	movs	r1, r3
 8002b82:	4311      	orrs	r1, r2
 8002b84:	d100      	bne.n	8002b88 <__aeabi_dsub+0x38c>
 8002b86:	e1b5      	b.n	8002ef4 <__aeabi_dsub+0x6f8>
 8002b88:	2480      	movs	r4, #128	; 0x80
 8002b8a:	0324      	lsls	r4, r4, #12
 8002b8c:	4314      	orrs	r4, r2
 8002b8e:	0324      	lsls	r4, r4, #12
 8002b90:	4ad5      	ldr	r2, [pc, #852]	; (8002ee8 <__aeabi_dsub+0x6ec>)
 8002b92:	0b24      	lsrs	r4, r4, #12
 8002b94:	e6dc      	b.n	8002950 <__aeabi_dsub+0x154>
 8002b96:	0020      	movs	r0, r4
 8002b98:	f000 fb2a 	bl	80031f0 <__clzsi2>
 8002b9c:	0003      	movs	r3, r0
 8002b9e:	3318      	adds	r3, #24
 8002ba0:	2b1f      	cmp	r3, #31
 8002ba2:	dc00      	bgt.n	8002ba6 <__aeabi_dsub+0x3aa>
 8002ba4:	e695      	b.n	80028d2 <__aeabi_dsub+0xd6>
 8002ba6:	0022      	movs	r2, r4
 8002ba8:	3808      	subs	r0, #8
 8002baa:	4082      	lsls	r2, r0
 8002bac:	2400      	movs	r4, #0
 8002bae:	429e      	cmp	r6, r3
 8002bb0:	dc00      	bgt.n	8002bb4 <__aeabi_dsub+0x3b8>
 8002bb2:	e69a      	b.n	80028ea <__aeabi_dsub+0xee>
 8002bb4:	1af6      	subs	r6, r6, r3
 8002bb6:	4bcd      	ldr	r3, [pc, #820]	; (8002eec <__aeabi_dsub+0x6f0>)
 8002bb8:	401a      	ands	r2, r3
 8002bba:	4692      	mov	sl, r2
 8002bbc:	e6a8      	b.n	8002910 <__aeabi_dsub+0x114>
 8002bbe:	003c      	movs	r4, r7
 8002bc0:	4304      	orrs	r4, r0
 8002bc2:	1e62      	subs	r2, r4, #1
 8002bc4:	4194      	sbcs	r4, r2
 8002bc6:	e66c      	b.n	80028a2 <__aeabi_dsub+0xa6>
 8002bc8:	464a      	mov	r2, r9
 8002bca:	08db      	lsrs	r3, r3, #3
 8002bcc:	0752      	lsls	r2, r2, #29
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	464a      	mov	r2, r9
 8002bd2:	08d2      	lsrs	r2, r2, #3
 8002bd4:	e7a6      	b.n	8002b24 <__aeabi_dsub+0x328>
 8002bd6:	4cc6      	ldr	r4, [pc, #792]	; (8002ef0 <__aeabi_dsub+0x6f4>)
 8002bd8:	1c72      	adds	r2, r6, #1
 8002bda:	4222      	tst	r2, r4
 8002bdc:	d000      	beq.n	8002be0 <__aeabi_dsub+0x3e4>
 8002bde:	e0ac      	b.n	8002d3a <__aeabi_dsub+0x53e>
 8002be0:	464a      	mov	r2, r9
 8002be2:	431a      	orrs	r2, r3
 8002be4:	2e00      	cmp	r6, #0
 8002be6:	d000      	beq.n	8002bea <__aeabi_dsub+0x3ee>
 8002be8:	e105      	b.n	8002df6 <__aeabi_dsub+0x5fa>
 8002bea:	2a00      	cmp	r2, #0
 8002bec:	d100      	bne.n	8002bf0 <__aeabi_dsub+0x3f4>
 8002bee:	e156      	b.n	8002e9e <__aeabi_dsub+0x6a2>
 8002bf0:	003a      	movs	r2, r7
 8002bf2:	4302      	orrs	r2, r0
 8002bf4:	d100      	bne.n	8002bf8 <__aeabi_dsub+0x3fc>
 8002bf6:	e0db      	b.n	8002db0 <__aeabi_dsub+0x5b4>
 8002bf8:	181c      	adds	r4, r3, r0
 8002bfa:	429c      	cmp	r4, r3
 8002bfc:	419b      	sbcs	r3, r3
 8002bfe:	444f      	add	r7, r9
 8002c00:	46ba      	mov	sl, r7
 8002c02:	425b      	negs	r3, r3
 8002c04:	449a      	add	sl, r3
 8002c06:	4653      	mov	r3, sl
 8002c08:	021b      	lsls	r3, r3, #8
 8002c0a:	d400      	bmi.n	8002c0e <__aeabi_dsub+0x412>
 8002c0c:	e780      	b.n	8002b10 <__aeabi_dsub+0x314>
 8002c0e:	4652      	mov	r2, sl
 8002c10:	4bb6      	ldr	r3, [pc, #728]	; (8002eec <__aeabi_dsub+0x6f0>)
 8002c12:	2601      	movs	r6, #1
 8002c14:	401a      	ands	r2, r3
 8002c16:	4692      	mov	sl, r2
 8002c18:	e77a      	b.n	8002b10 <__aeabi_dsub+0x314>
 8002c1a:	4cb3      	ldr	r4, [pc, #716]	; (8002ee8 <__aeabi_dsub+0x6ec>)
 8002c1c:	42a2      	cmp	r2, r4
 8002c1e:	d100      	bne.n	8002c22 <__aeabi_dsub+0x426>
 8002c20:	e0c0      	b.n	8002da4 <__aeabi_dsub+0x5a8>
 8002c22:	2480      	movs	r4, #128	; 0x80
 8002c24:	464d      	mov	r5, r9
 8002c26:	0424      	lsls	r4, r4, #16
 8002c28:	4325      	orrs	r5, r4
 8002c2a:	46a9      	mov	r9, r5
 8002c2c:	4664      	mov	r4, ip
 8002c2e:	2c38      	cmp	r4, #56	; 0x38
 8002c30:	dc53      	bgt.n	8002cda <__aeabi_dsub+0x4de>
 8002c32:	4661      	mov	r1, ip
 8002c34:	2c1f      	cmp	r4, #31
 8002c36:	dd00      	ble.n	8002c3a <__aeabi_dsub+0x43e>
 8002c38:	e0cd      	b.n	8002dd6 <__aeabi_dsub+0x5da>
 8002c3a:	2520      	movs	r5, #32
 8002c3c:	001e      	movs	r6, r3
 8002c3e:	1b2d      	subs	r5, r5, r4
 8002c40:	464c      	mov	r4, r9
 8002c42:	40ab      	lsls	r3, r5
 8002c44:	40ac      	lsls	r4, r5
 8002c46:	40ce      	lsrs	r6, r1
 8002c48:	1e5d      	subs	r5, r3, #1
 8002c4a:	41ab      	sbcs	r3, r5
 8002c4c:	4334      	orrs	r4, r6
 8002c4e:	4323      	orrs	r3, r4
 8002c50:	464c      	mov	r4, r9
 8002c52:	40cc      	lsrs	r4, r1
 8002c54:	1b3f      	subs	r7, r7, r4
 8002c56:	e045      	b.n	8002ce4 <__aeabi_dsub+0x4e8>
 8002c58:	464a      	mov	r2, r9
 8002c5a:	1a1c      	subs	r4, r3, r0
 8002c5c:	1bd1      	subs	r1, r2, r7
 8002c5e:	42a3      	cmp	r3, r4
 8002c60:	4192      	sbcs	r2, r2
 8002c62:	4252      	negs	r2, r2
 8002c64:	4692      	mov	sl, r2
 8002c66:	000a      	movs	r2, r1
 8002c68:	4651      	mov	r1, sl
 8002c6a:	1a52      	subs	r2, r2, r1
 8002c6c:	4692      	mov	sl, r2
 8002c6e:	0212      	lsls	r2, r2, #8
 8002c70:	d500      	bpl.n	8002c74 <__aeabi_dsub+0x478>
 8002c72:	e083      	b.n	8002d7c <__aeabi_dsub+0x580>
 8002c74:	4653      	mov	r3, sl
 8002c76:	4323      	orrs	r3, r4
 8002c78:	d000      	beq.n	8002c7c <__aeabi_dsub+0x480>
 8002c7a:	e621      	b.n	80028c0 <__aeabi_dsub+0xc4>
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	2500      	movs	r5, #0
 8002c80:	e753      	b.n	8002b2a <__aeabi_dsub+0x32e>
 8002c82:	181c      	adds	r4, r3, r0
 8002c84:	429c      	cmp	r4, r3
 8002c86:	419b      	sbcs	r3, r3
 8002c88:	444f      	add	r7, r9
 8002c8a:	46ba      	mov	sl, r7
 8002c8c:	425b      	negs	r3, r3
 8002c8e:	449a      	add	sl, r3
 8002c90:	4653      	mov	r3, sl
 8002c92:	2601      	movs	r6, #1
 8002c94:	021b      	lsls	r3, r3, #8
 8002c96:	d400      	bmi.n	8002c9a <__aeabi_dsub+0x49e>
 8002c98:	e73a      	b.n	8002b10 <__aeabi_dsub+0x314>
 8002c9a:	2602      	movs	r6, #2
 8002c9c:	4652      	mov	r2, sl
 8002c9e:	4b93      	ldr	r3, [pc, #588]	; (8002eec <__aeabi_dsub+0x6f0>)
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	401a      	ands	r2, r3
 8002ca4:	0013      	movs	r3, r2
 8002ca6:	4021      	ands	r1, r4
 8002ca8:	0862      	lsrs	r2, r4, #1
 8002caa:	430a      	orrs	r2, r1
 8002cac:	07dc      	lsls	r4, r3, #31
 8002cae:	085b      	lsrs	r3, r3, #1
 8002cb0:	469a      	mov	sl, r3
 8002cb2:	4314      	orrs	r4, r2
 8002cb4:	e62c      	b.n	8002910 <__aeabi_dsub+0x114>
 8002cb6:	0039      	movs	r1, r7
 8002cb8:	3a20      	subs	r2, #32
 8002cba:	40d1      	lsrs	r1, r2
 8002cbc:	4662      	mov	r2, ip
 8002cbe:	2a20      	cmp	r2, #32
 8002cc0:	d006      	beq.n	8002cd0 <__aeabi_dsub+0x4d4>
 8002cc2:	4664      	mov	r4, ip
 8002cc4:	2240      	movs	r2, #64	; 0x40
 8002cc6:	1b12      	subs	r2, r2, r4
 8002cc8:	003c      	movs	r4, r7
 8002cca:	4094      	lsls	r4, r2
 8002ccc:	4304      	orrs	r4, r0
 8002cce:	9401      	str	r4, [sp, #4]
 8002cd0:	9c01      	ldr	r4, [sp, #4]
 8002cd2:	1e62      	subs	r2, r4, #1
 8002cd4:	4194      	sbcs	r4, r2
 8002cd6:	430c      	orrs	r4, r1
 8002cd8:	e5e3      	b.n	80028a2 <__aeabi_dsub+0xa6>
 8002cda:	4649      	mov	r1, r9
 8002cdc:	4319      	orrs	r1, r3
 8002cde:	000b      	movs	r3, r1
 8002ce0:	1e5c      	subs	r4, r3, #1
 8002ce2:	41a3      	sbcs	r3, r4
 8002ce4:	1ac4      	subs	r4, r0, r3
 8002ce6:	42a0      	cmp	r0, r4
 8002ce8:	419b      	sbcs	r3, r3
 8002cea:	425b      	negs	r3, r3
 8002cec:	1afb      	subs	r3, r7, r3
 8002cee:	469a      	mov	sl, r3
 8002cf0:	465d      	mov	r5, fp
 8002cf2:	0016      	movs	r6, r2
 8002cf4:	e5dc      	b.n	80028b0 <__aeabi_dsub+0xb4>
 8002cf6:	4649      	mov	r1, r9
 8002cf8:	4319      	orrs	r1, r3
 8002cfa:	d100      	bne.n	8002cfe <__aeabi_dsub+0x502>
 8002cfc:	e0ae      	b.n	8002e5c <__aeabi_dsub+0x660>
 8002cfe:	4661      	mov	r1, ip
 8002d00:	4664      	mov	r4, ip
 8002d02:	3901      	subs	r1, #1
 8002d04:	2c01      	cmp	r4, #1
 8002d06:	d100      	bne.n	8002d0a <__aeabi_dsub+0x50e>
 8002d08:	e0e0      	b.n	8002ecc <__aeabi_dsub+0x6d0>
 8002d0a:	4c77      	ldr	r4, [pc, #476]	; (8002ee8 <__aeabi_dsub+0x6ec>)
 8002d0c:	45a4      	cmp	ip, r4
 8002d0e:	d056      	beq.n	8002dbe <__aeabi_dsub+0x5c2>
 8002d10:	468c      	mov	ip, r1
 8002d12:	e69a      	b.n	8002a4a <__aeabi_dsub+0x24e>
 8002d14:	4661      	mov	r1, ip
 8002d16:	2220      	movs	r2, #32
 8002d18:	003c      	movs	r4, r7
 8002d1a:	1a52      	subs	r2, r2, r1
 8002d1c:	4094      	lsls	r4, r2
 8002d1e:	0001      	movs	r1, r0
 8002d20:	4090      	lsls	r0, r2
 8002d22:	46a0      	mov	r8, r4
 8002d24:	4664      	mov	r4, ip
 8002d26:	1e42      	subs	r2, r0, #1
 8002d28:	4190      	sbcs	r0, r2
 8002d2a:	4662      	mov	r2, ip
 8002d2c:	40e1      	lsrs	r1, r4
 8002d2e:	4644      	mov	r4, r8
 8002d30:	40d7      	lsrs	r7, r2
 8002d32:	430c      	orrs	r4, r1
 8002d34:	4304      	orrs	r4, r0
 8002d36:	44b9      	add	r9, r7
 8002d38:	e701      	b.n	8002b3e <__aeabi_dsub+0x342>
 8002d3a:	496b      	ldr	r1, [pc, #428]	; (8002ee8 <__aeabi_dsub+0x6ec>)
 8002d3c:	428a      	cmp	r2, r1
 8002d3e:	d100      	bne.n	8002d42 <__aeabi_dsub+0x546>
 8002d40:	e70c      	b.n	8002b5c <__aeabi_dsub+0x360>
 8002d42:	1818      	adds	r0, r3, r0
 8002d44:	4298      	cmp	r0, r3
 8002d46:	419b      	sbcs	r3, r3
 8002d48:	444f      	add	r7, r9
 8002d4a:	425b      	negs	r3, r3
 8002d4c:	18fb      	adds	r3, r7, r3
 8002d4e:	07dc      	lsls	r4, r3, #31
 8002d50:	0840      	lsrs	r0, r0, #1
 8002d52:	085b      	lsrs	r3, r3, #1
 8002d54:	469a      	mov	sl, r3
 8002d56:	0016      	movs	r6, r2
 8002d58:	4304      	orrs	r4, r0
 8002d5a:	e6d9      	b.n	8002b10 <__aeabi_dsub+0x314>
 8002d5c:	2a00      	cmp	r2, #0
 8002d5e:	d000      	beq.n	8002d62 <__aeabi_dsub+0x566>
 8002d60:	e081      	b.n	8002e66 <__aeabi_dsub+0x66a>
 8002d62:	003b      	movs	r3, r7
 8002d64:	4303      	orrs	r3, r0
 8002d66:	d11d      	bne.n	8002da4 <__aeabi_dsub+0x5a8>
 8002d68:	2280      	movs	r2, #128	; 0x80
 8002d6a:	2500      	movs	r5, #0
 8002d6c:	0312      	lsls	r2, r2, #12
 8002d6e:	e70b      	b.n	8002b88 <__aeabi_dsub+0x38c>
 8002d70:	08c0      	lsrs	r0, r0, #3
 8002d72:	077b      	lsls	r3, r7, #29
 8002d74:	465d      	mov	r5, fp
 8002d76:	4303      	orrs	r3, r0
 8002d78:	08fa      	lsrs	r2, r7, #3
 8002d7a:	e6d3      	b.n	8002b24 <__aeabi_dsub+0x328>
 8002d7c:	1ac4      	subs	r4, r0, r3
 8002d7e:	42a0      	cmp	r0, r4
 8002d80:	4180      	sbcs	r0, r0
 8002d82:	464b      	mov	r3, r9
 8002d84:	4240      	negs	r0, r0
 8002d86:	1aff      	subs	r7, r7, r3
 8002d88:	1a3b      	subs	r3, r7, r0
 8002d8a:	469a      	mov	sl, r3
 8002d8c:	465d      	mov	r5, fp
 8002d8e:	e597      	b.n	80028c0 <__aeabi_dsub+0xc4>
 8002d90:	1a1c      	subs	r4, r3, r0
 8002d92:	464a      	mov	r2, r9
 8002d94:	42a3      	cmp	r3, r4
 8002d96:	419b      	sbcs	r3, r3
 8002d98:	1bd7      	subs	r7, r2, r7
 8002d9a:	425b      	negs	r3, r3
 8002d9c:	1afb      	subs	r3, r7, r3
 8002d9e:	469a      	mov	sl, r3
 8002da0:	2601      	movs	r6, #1
 8002da2:	e585      	b.n	80028b0 <__aeabi_dsub+0xb4>
 8002da4:	08c0      	lsrs	r0, r0, #3
 8002da6:	077b      	lsls	r3, r7, #29
 8002da8:	465d      	mov	r5, fp
 8002daa:	4303      	orrs	r3, r0
 8002dac:	08fa      	lsrs	r2, r7, #3
 8002dae:	e6e7      	b.n	8002b80 <__aeabi_dsub+0x384>
 8002db0:	464a      	mov	r2, r9
 8002db2:	08db      	lsrs	r3, r3, #3
 8002db4:	0752      	lsls	r2, r2, #29
 8002db6:	4313      	orrs	r3, r2
 8002db8:	464a      	mov	r2, r9
 8002dba:	08d2      	lsrs	r2, r2, #3
 8002dbc:	e6b5      	b.n	8002b2a <__aeabi_dsub+0x32e>
 8002dbe:	08c0      	lsrs	r0, r0, #3
 8002dc0:	077b      	lsls	r3, r7, #29
 8002dc2:	4303      	orrs	r3, r0
 8002dc4:	08fa      	lsrs	r2, r7, #3
 8002dc6:	e6db      	b.n	8002b80 <__aeabi_dsub+0x384>
 8002dc8:	4649      	mov	r1, r9
 8002dca:	4319      	orrs	r1, r3
 8002dcc:	000b      	movs	r3, r1
 8002dce:	1e59      	subs	r1, r3, #1
 8002dd0:	418b      	sbcs	r3, r1
 8002dd2:	001c      	movs	r4, r3
 8002dd4:	e653      	b.n	8002a7e <__aeabi_dsub+0x282>
 8002dd6:	464d      	mov	r5, r9
 8002dd8:	3c20      	subs	r4, #32
 8002dda:	40e5      	lsrs	r5, r4
 8002ddc:	2920      	cmp	r1, #32
 8002dde:	d005      	beq.n	8002dec <__aeabi_dsub+0x5f0>
 8002de0:	2440      	movs	r4, #64	; 0x40
 8002de2:	1a64      	subs	r4, r4, r1
 8002de4:	4649      	mov	r1, r9
 8002de6:	40a1      	lsls	r1, r4
 8002de8:	430b      	orrs	r3, r1
 8002dea:	4698      	mov	r8, r3
 8002dec:	4643      	mov	r3, r8
 8002dee:	1e5c      	subs	r4, r3, #1
 8002df0:	41a3      	sbcs	r3, r4
 8002df2:	432b      	orrs	r3, r5
 8002df4:	e776      	b.n	8002ce4 <__aeabi_dsub+0x4e8>
 8002df6:	2a00      	cmp	r2, #0
 8002df8:	d0e1      	beq.n	8002dbe <__aeabi_dsub+0x5c2>
 8002dfa:	003a      	movs	r2, r7
 8002dfc:	08db      	lsrs	r3, r3, #3
 8002dfe:	4302      	orrs	r2, r0
 8002e00:	d100      	bne.n	8002e04 <__aeabi_dsub+0x608>
 8002e02:	e6b8      	b.n	8002b76 <__aeabi_dsub+0x37a>
 8002e04:	464a      	mov	r2, r9
 8002e06:	0752      	lsls	r2, r2, #29
 8002e08:	2480      	movs	r4, #128	; 0x80
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	464a      	mov	r2, r9
 8002e0e:	0324      	lsls	r4, r4, #12
 8002e10:	08d2      	lsrs	r2, r2, #3
 8002e12:	4222      	tst	r2, r4
 8002e14:	d007      	beq.n	8002e26 <__aeabi_dsub+0x62a>
 8002e16:	08fe      	lsrs	r6, r7, #3
 8002e18:	4226      	tst	r6, r4
 8002e1a:	d104      	bne.n	8002e26 <__aeabi_dsub+0x62a>
 8002e1c:	465d      	mov	r5, fp
 8002e1e:	0032      	movs	r2, r6
 8002e20:	08c3      	lsrs	r3, r0, #3
 8002e22:	077f      	lsls	r7, r7, #29
 8002e24:	433b      	orrs	r3, r7
 8002e26:	0f59      	lsrs	r1, r3, #29
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	0749      	lsls	r1, r1, #29
 8002e2c:	08db      	lsrs	r3, r3, #3
 8002e2e:	430b      	orrs	r3, r1
 8002e30:	e6a6      	b.n	8002b80 <__aeabi_dsub+0x384>
 8002e32:	1ac4      	subs	r4, r0, r3
 8002e34:	42a0      	cmp	r0, r4
 8002e36:	4180      	sbcs	r0, r0
 8002e38:	464b      	mov	r3, r9
 8002e3a:	4240      	negs	r0, r0
 8002e3c:	1aff      	subs	r7, r7, r3
 8002e3e:	1a3b      	subs	r3, r7, r0
 8002e40:	469a      	mov	sl, r3
 8002e42:	465d      	mov	r5, fp
 8002e44:	2601      	movs	r6, #1
 8002e46:	e533      	b.n	80028b0 <__aeabi_dsub+0xb4>
 8002e48:	003b      	movs	r3, r7
 8002e4a:	4303      	orrs	r3, r0
 8002e4c:	d100      	bne.n	8002e50 <__aeabi_dsub+0x654>
 8002e4e:	e715      	b.n	8002c7c <__aeabi_dsub+0x480>
 8002e50:	08c0      	lsrs	r0, r0, #3
 8002e52:	077b      	lsls	r3, r7, #29
 8002e54:	465d      	mov	r5, fp
 8002e56:	4303      	orrs	r3, r0
 8002e58:	08fa      	lsrs	r2, r7, #3
 8002e5a:	e666      	b.n	8002b2a <__aeabi_dsub+0x32e>
 8002e5c:	08c0      	lsrs	r0, r0, #3
 8002e5e:	077b      	lsls	r3, r7, #29
 8002e60:	4303      	orrs	r3, r0
 8002e62:	08fa      	lsrs	r2, r7, #3
 8002e64:	e65e      	b.n	8002b24 <__aeabi_dsub+0x328>
 8002e66:	003a      	movs	r2, r7
 8002e68:	08db      	lsrs	r3, r3, #3
 8002e6a:	4302      	orrs	r2, r0
 8002e6c:	d100      	bne.n	8002e70 <__aeabi_dsub+0x674>
 8002e6e:	e682      	b.n	8002b76 <__aeabi_dsub+0x37a>
 8002e70:	464a      	mov	r2, r9
 8002e72:	0752      	lsls	r2, r2, #29
 8002e74:	2480      	movs	r4, #128	; 0x80
 8002e76:	4313      	orrs	r3, r2
 8002e78:	464a      	mov	r2, r9
 8002e7a:	0324      	lsls	r4, r4, #12
 8002e7c:	08d2      	lsrs	r2, r2, #3
 8002e7e:	4222      	tst	r2, r4
 8002e80:	d007      	beq.n	8002e92 <__aeabi_dsub+0x696>
 8002e82:	08fe      	lsrs	r6, r7, #3
 8002e84:	4226      	tst	r6, r4
 8002e86:	d104      	bne.n	8002e92 <__aeabi_dsub+0x696>
 8002e88:	465d      	mov	r5, fp
 8002e8a:	0032      	movs	r2, r6
 8002e8c:	08c3      	lsrs	r3, r0, #3
 8002e8e:	077f      	lsls	r7, r7, #29
 8002e90:	433b      	orrs	r3, r7
 8002e92:	0f59      	lsrs	r1, r3, #29
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	08db      	lsrs	r3, r3, #3
 8002e98:	0749      	lsls	r1, r1, #29
 8002e9a:	430b      	orrs	r3, r1
 8002e9c:	e670      	b.n	8002b80 <__aeabi_dsub+0x384>
 8002e9e:	08c0      	lsrs	r0, r0, #3
 8002ea0:	077b      	lsls	r3, r7, #29
 8002ea2:	4303      	orrs	r3, r0
 8002ea4:	08fa      	lsrs	r2, r7, #3
 8002ea6:	e640      	b.n	8002b2a <__aeabi_dsub+0x32e>
 8002ea8:	464c      	mov	r4, r9
 8002eaa:	3920      	subs	r1, #32
 8002eac:	40cc      	lsrs	r4, r1
 8002eae:	4661      	mov	r1, ip
 8002eb0:	2920      	cmp	r1, #32
 8002eb2:	d006      	beq.n	8002ec2 <__aeabi_dsub+0x6c6>
 8002eb4:	4666      	mov	r6, ip
 8002eb6:	2140      	movs	r1, #64	; 0x40
 8002eb8:	1b89      	subs	r1, r1, r6
 8002eba:	464e      	mov	r6, r9
 8002ebc:	408e      	lsls	r6, r1
 8002ebe:	4333      	orrs	r3, r6
 8002ec0:	4698      	mov	r8, r3
 8002ec2:	4643      	mov	r3, r8
 8002ec4:	1e59      	subs	r1, r3, #1
 8002ec6:	418b      	sbcs	r3, r1
 8002ec8:	431c      	orrs	r4, r3
 8002eca:	e5d8      	b.n	8002a7e <__aeabi_dsub+0x282>
 8002ecc:	181c      	adds	r4, r3, r0
 8002ece:	4284      	cmp	r4, r0
 8002ed0:	4180      	sbcs	r0, r0
 8002ed2:	444f      	add	r7, r9
 8002ed4:	46ba      	mov	sl, r7
 8002ed6:	4240      	negs	r0, r0
 8002ed8:	4482      	add	sl, r0
 8002eda:	e6d9      	b.n	8002c90 <__aeabi_dsub+0x494>
 8002edc:	4653      	mov	r3, sl
 8002ede:	4323      	orrs	r3, r4
 8002ee0:	d100      	bne.n	8002ee4 <__aeabi_dsub+0x6e8>
 8002ee2:	e6cb      	b.n	8002c7c <__aeabi_dsub+0x480>
 8002ee4:	e614      	b.n	8002b10 <__aeabi_dsub+0x314>
 8002ee6:	46c0      	nop			; (mov r8, r8)
 8002ee8:	000007ff 	.word	0x000007ff
 8002eec:	ff7fffff 	.word	0xff7fffff
 8002ef0:	000007fe 	.word	0x000007fe
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	4a01      	ldr	r2, [pc, #4]	; (8002efc <__aeabi_dsub+0x700>)
 8002ef8:	001c      	movs	r4, r3
 8002efa:	e529      	b.n	8002950 <__aeabi_dsub+0x154>
 8002efc:	000007ff 	.word	0x000007ff

08002f00 <__aeabi_dcmpun>:
 8002f00:	b570      	push	{r4, r5, r6, lr}
 8002f02:	0005      	movs	r5, r0
 8002f04:	480c      	ldr	r0, [pc, #48]	; (8002f38 <__aeabi_dcmpun+0x38>)
 8002f06:	031c      	lsls	r4, r3, #12
 8002f08:	0016      	movs	r6, r2
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	030a      	lsls	r2, r1, #12
 8002f0e:	0049      	lsls	r1, r1, #1
 8002f10:	0b12      	lsrs	r2, r2, #12
 8002f12:	0d49      	lsrs	r1, r1, #21
 8002f14:	0b24      	lsrs	r4, r4, #12
 8002f16:	0d5b      	lsrs	r3, r3, #21
 8002f18:	4281      	cmp	r1, r0
 8002f1a:	d008      	beq.n	8002f2e <__aeabi_dcmpun+0x2e>
 8002f1c:	4a06      	ldr	r2, [pc, #24]	; (8002f38 <__aeabi_dcmpun+0x38>)
 8002f1e:	2000      	movs	r0, #0
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d103      	bne.n	8002f2c <__aeabi_dcmpun+0x2c>
 8002f24:	0020      	movs	r0, r4
 8002f26:	4330      	orrs	r0, r6
 8002f28:	1e43      	subs	r3, r0, #1
 8002f2a:	4198      	sbcs	r0, r3
 8002f2c:	bd70      	pop	{r4, r5, r6, pc}
 8002f2e:	2001      	movs	r0, #1
 8002f30:	432a      	orrs	r2, r5
 8002f32:	d1fb      	bne.n	8002f2c <__aeabi_dcmpun+0x2c>
 8002f34:	e7f2      	b.n	8002f1c <__aeabi_dcmpun+0x1c>
 8002f36:	46c0      	nop			; (mov r8, r8)
 8002f38:	000007ff 	.word	0x000007ff

08002f3c <__aeabi_d2iz>:
 8002f3c:	000a      	movs	r2, r1
 8002f3e:	b530      	push	{r4, r5, lr}
 8002f40:	4c13      	ldr	r4, [pc, #76]	; (8002f90 <__aeabi_d2iz+0x54>)
 8002f42:	0053      	lsls	r3, r2, #1
 8002f44:	0309      	lsls	r1, r1, #12
 8002f46:	0005      	movs	r5, r0
 8002f48:	0b09      	lsrs	r1, r1, #12
 8002f4a:	2000      	movs	r0, #0
 8002f4c:	0d5b      	lsrs	r3, r3, #21
 8002f4e:	0fd2      	lsrs	r2, r2, #31
 8002f50:	42a3      	cmp	r3, r4
 8002f52:	dd04      	ble.n	8002f5e <__aeabi_d2iz+0x22>
 8002f54:	480f      	ldr	r0, [pc, #60]	; (8002f94 <__aeabi_d2iz+0x58>)
 8002f56:	4283      	cmp	r3, r0
 8002f58:	dd02      	ble.n	8002f60 <__aeabi_d2iz+0x24>
 8002f5a:	4b0f      	ldr	r3, [pc, #60]	; (8002f98 <__aeabi_d2iz+0x5c>)
 8002f5c:	18d0      	adds	r0, r2, r3
 8002f5e:	bd30      	pop	{r4, r5, pc}
 8002f60:	2080      	movs	r0, #128	; 0x80
 8002f62:	0340      	lsls	r0, r0, #13
 8002f64:	4301      	orrs	r1, r0
 8002f66:	480d      	ldr	r0, [pc, #52]	; (8002f9c <__aeabi_d2iz+0x60>)
 8002f68:	1ac0      	subs	r0, r0, r3
 8002f6a:	281f      	cmp	r0, #31
 8002f6c:	dd08      	ble.n	8002f80 <__aeabi_d2iz+0x44>
 8002f6e:	480c      	ldr	r0, [pc, #48]	; (8002fa0 <__aeabi_d2iz+0x64>)
 8002f70:	1ac3      	subs	r3, r0, r3
 8002f72:	40d9      	lsrs	r1, r3
 8002f74:	000b      	movs	r3, r1
 8002f76:	4258      	negs	r0, r3
 8002f78:	2a00      	cmp	r2, #0
 8002f7a:	d1f0      	bne.n	8002f5e <__aeabi_d2iz+0x22>
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	e7ee      	b.n	8002f5e <__aeabi_d2iz+0x22>
 8002f80:	4c08      	ldr	r4, [pc, #32]	; (8002fa4 <__aeabi_d2iz+0x68>)
 8002f82:	40c5      	lsrs	r5, r0
 8002f84:	46a4      	mov	ip, r4
 8002f86:	4463      	add	r3, ip
 8002f88:	4099      	lsls	r1, r3
 8002f8a:	000b      	movs	r3, r1
 8002f8c:	432b      	orrs	r3, r5
 8002f8e:	e7f2      	b.n	8002f76 <__aeabi_d2iz+0x3a>
 8002f90:	000003fe 	.word	0x000003fe
 8002f94:	0000041d 	.word	0x0000041d
 8002f98:	7fffffff 	.word	0x7fffffff
 8002f9c:	00000433 	.word	0x00000433
 8002fa0:	00000413 	.word	0x00000413
 8002fa4:	fffffbed 	.word	0xfffffbed

08002fa8 <__aeabi_i2d>:
 8002fa8:	b570      	push	{r4, r5, r6, lr}
 8002faa:	2800      	cmp	r0, #0
 8002fac:	d016      	beq.n	8002fdc <__aeabi_i2d+0x34>
 8002fae:	17c3      	asrs	r3, r0, #31
 8002fb0:	18c5      	adds	r5, r0, r3
 8002fb2:	405d      	eors	r5, r3
 8002fb4:	0fc4      	lsrs	r4, r0, #31
 8002fb6:	0028      	movs	r0, r5
 8002fb8:	f000 f91a 	bl	80031f0 <__clzsi2>
 8002fbc:	4b11      	ldr	r3, [pc, #68]	; (8003004 <__aeabi_i2d+0x5c>)
 8002fbe:	1a1b      	subs	r3, r3, r0
 8002fc0:	280a      	cmp	r0, #10
 8002fc2:	dc16      	bgt.n	8002ff2 <__aeabi_i2d+0x4a>
 8002fc4:	0002      	movs	r2, r0
 8002fc6:	002e      	movs	r6, r5
 8002fc8:	3215      	adds	r2, #21
 8002fca:	4096      	lsls	r6, r2
 8002fcc:	220b      	movs	r2, #11
 8002fce:	1a12      	subs	r2, r2, r0
 8002fd0:	40d5      	lsrs	r5, r2
 8002fd2:	055b      	lsls	r3, r3, #21
 8002fd4:	032d      	lsls	r5, r5, #12
 8002fd6:	0b2d      	lsrs	r5, r5, #12
 8002fd8:	0d5b      	lsrs	r3, r3, #21
 8002fda:	e003      	b.n	8002fe4 <__aeabi_i2d+0x3c>
 8002fdc:	2400      	movs	r4, #0
 8002fde:	2300      	movs	r3, #0
 8002fe0:	2500      	movs	r5, #0
 8002fe2:	2600      	movs	r6, #0
 8002fe4:	051b      	lsls	r3, r3, #20
 8002fe6:	432b      	orrs	r3, r5
 8002fe8:	07e4      	lsls	r4, r4, #31
 8002fea:	4323      	orrs	r3, r4
 8002fec:	0030      	movs	r0, r6
 8002fee:	0019      	movs	r1, r3
 8002ff0:	bd70      	pop	{r4, r5, r6, pc}
 8002ff2:	380b      	subs	r0, #11
 8002ff4:	4085      	lsls	r5, r0
 8002ff6:	055b      	lsls	r3, r3, #21
 8002ff8:	032d      	lsls	r5, r5, #12
 8002ffa:	2600      	movs	r6, #0
 8002ffc:	0b2d      	lsrs	r5, r5, #12
 8002ffe:	0d5b      	lsrs	r3, r3, #21
 8003000:	e7f0      	b.n	8002fe4 <__aeabi_i2d+0x3c>
 8003002:	46c0      	nop			; (mov r8, r8)
 8003004:	0000041e 	.word	0x0000041e

08003008 <__aeabi_ui2d>:
 8003008:	b510      	push	{r4, lr}
 800300a:	1e04      	subs	r4, r0, #0
 800300c:	d010      	beq.n	8003030 <__aeabi_ui2d+0x28>
 800300e:	f000 f8ef 	bl	80031f0 <__clzsi2>
 8003012:	4b0f      	ldr	r3, [pc, #60]	; (8003050 <__aeabi_ui2d+0x48>)
 8003014:	1a1b      	subs	r3, r3, r0
 8003016:	280a      	cmp	r0, #10
 8003018:	dc11      	bgt.n	800303e <__aeabi_ui2d+0x36>
 800301a:	220b      	movs	r2, #11
 800301c:	0021      	movs	r1, r4
 800301e:	1a12      	subs	r2, r2, r0
 8003020:	40d1      	lsrs	r1, r2
 8003022:	3015      	adds	r0, #21
 8003024:	030a      	lsls	r2, r1, #12
 8003026:	055b      	lsls	r3, r3, #21
 8003028:	4084      	lsls	r4, r0
 800302a:	0b12      	lsrs	r2, r2, #12
 800302c:	0d5b      	lsrs	r3, r3, #21
 800302e:	e001      	b.n	8003034 <__aeabi_ui2d+0x2c>
 8003030:	2300      	movs	r3, #0
 8003032:	2200      	movs	r2, #0
 8003034:	051b      	lsls	r3, r3, #20
 8003036:	4313      	orrs	r3, r2
 8003038:	0020      	movs	r0, r4
 800303a:	0019      	movs	r1, r3
 800303c:	bd10      	pop	{r4, pc}
 800303e:	0022      	movs	r2, r4
 8003040:	380b      	subs	r0, #11
 8003042:	4082      	lsls	r2, r0
 8003044:	055b      	lsls	r3, r3, #21
 8003046:	0312      	lsls	r2, r2, #12
 8003048:	2400      	movs	r4, #0
 800304a:	0b12      	lsrs	r2, r2, #12
 800304c:	0d5b      	lsrs	r3, r3, #21
 800304e:	e7f1      	b.n	8003034 <__aeabi_ui2d+0x2c>
 8003050:	0000041e 	.word	0x0000041e

08003054 <__aeabi_f2d>:
 8003054:	b570      	push	{r4, r5, r6, lr}
 8003056:	0242      	lsls	r2, r0, #9
 8003058:	0043      	lsls	r3, r0, #1
 800305a:	0fc4      	lsrs	r4, r0, #31
 800305c:	20fe      	movs	r0, #254	; 0xfe
 800305e:	0e1b      	lsrs	r3, r3, #24
 8003060:	1c59      	adds	r1, r3, #1
 8003062:	0a55      	lsrs	r5, r2, #9
 8003064:	4208      	tst	r0, r1
 8003066:	d00c      	beq.n	8003082 <__aeabi_f2d+0x2e>
 8003068:	21e0      	movs	r1, #224	; 0xe0
 800306a:	0089      	lsls	r1, r1, #2
 800306c:	468c      	mov	ip, r1
 800306e:	076d      	lsls	r5, r5, #29
 8003070:	0b12      	lsrs	r2, r2, #12
 8003072:	4463      	add	r3, ip
 8003074:	051b      	lsls	r3, r3, #20
 8003076:	4313      	orrs	r3, r2
 8003078:	07e4      	lsls	r4, r4, #31
 800307a:	4323      	orrs	r3, r4
 800307c:	0028      	movs	r0, r5
 800307e:	0019      	movs	r1, r3
 8003080:	bd70      	pop	{r4, r5, r6, pc}
 8003082:	2b00      	cmp	r3, #0
 8003084:	d114      	bne.n	80030b0 <__aeabi_f2d+0x5c>
 8003086:	2d00      	cmp	r5, #0
 8003088:	d01b      	beq.n	80030c2 <__aeabi_f2d+0x6e>
 800308a:	0028      	movs	r0, r5
 800308c:	f000 f8b0 	bl	80031f0 <__clzsi2>
 8003090:	280a      	cmp	r0, #10
 8003092:	dc1c      	bgt.n	80030ce <__aeabi_f2d+0x7a>
 8003094:	230b      	movs	r3, #11
 8003096:	002a      	movs	r2, r5
 8003098:	1a1b      	subs	r3, r3, r0
 800309a:	40da      	lsrs	r2, r3
 800309c:	0003      	movs	r3, r0
 800309e:	3315      	adds	r3, #21
 80030a0:	409d      	lsls	r5, r3
 80030a2:	4b0e      	ldr	r3, [pc, #56]	; (80030dc <__aeabi_f2d+0x88>)
 80030a4:	0312      	lsls	r2, r2, #12
 80030a6:	1a1b      	subs	r3, r3, r0
 80030a8:	055b      	lsls	r3, r3, #21
 80030aa:	0b12      	lsrs	r2, r2, #12
 80030ac:	0d5b      	lsrs	r3, r3, #21
 80030ae:	e7e1      	b.n	8003074 <__aeabi_f2d+0x20>
 80030b0:	2d00      	cmp	r5, #0
 80030b2:	d009      	beq.n	80030c8 <__aeabi_f2d+0x74>
 80030b4:	0b13      	lsrs	r3, r2, #12
 80030b6:	2280      	movs	r2, #128	; 0x80
 80030b8:	0312      	lsls	r2, r2, #12
 80030ba:	431a      	orrs	r2, r3
 80030bc:	076d      	lsls	r5, r5, #29
 80030be:	4b08      	ldr	r3, [pc, #32]	; (80030e0 <__aeabi_f2d+0x8c>)
 80030c0:	e7d8      	b.n	8003074 <__aeabi_f2d+0x20>
 80030c2:	2300      	movs	r3, #0
 80030c4:	2200      	movs	r2, #0
 80030c6:	e7d5      	b.n	8003074 <__aeabi_f2d+0x20>
 80030c8:	2200      	movs	r2, #0
 80030ca:	4b05      	ldr	r3, [pc, #20]	; (80030e0 <__aeabi_f2d+0x8c>)
 80030cc:	e7d2      	b.n	8003074 <__aeabi_f2d+0x20>
 80030ce:	0003      	movs	r3, r0
 80030d0:	002a      	movs	r2, r5
 80030d2:	3b0b      	subs	r3, #11
 80030d4:	409a      	lsls	r2, r3
 80030d6:	2500      	movs	r5, #0
 80030d8:	e7e3      	b.n	80030a2 <__aeabi_f2d+0x4e>
 80030da:	46c0      	nop			; (mov r8, r8)
 80030dc:	00000389 	.word	0x00000389
 80030e0:	000007ff 	.word	0x000007ff

080030e4 <__aeabi_d2f>:
 80030e4:	0002      	movs	r2, r0
 80030e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030e8:	004b      	lsls	r3, r1, #1
 80030ea:	030d      	lsls	r5, r1, #12
 80030ec:	0f40      	lsrs	r0, r0, #29
 80030ee:	0d5b      	lsrs	r3, r3, #21
 80030f0:	0fcc      	lsrs	r4, r1, #31
 80030f2:	0a6d      	lsrs	r5, r5, #9
 80030f4:	493a      	ldr	r1, [pc, #232]	; (80031e0 <__aeabi_d2f+0xfc>)
 80030f6:	4305      	orrs	r5, r0
 80030f8:	1c58      	adds	r0, r3, #1
 80030fa:	00d7      	lsls	r7, r2, #3
 80030fc:	4208      	tst	r0, r1
 80030fe:	d00a      	beq.n	8003116 <__aeabi_d2f+0x32>
 8003100:	4938      	ldr	r1, [pc, #224]	; (80031e4 <__aeabi_d2f+0x100>)
 8003102:	1859      	adds	r1, r3, r1
 8003104:	29fe      	cmp	r1, #254	; 0xfe
 8003106:	dd16      	ble.n	8003136 <__aeabi_d2f+0x52>
 8003108:	20ff      	movs	r0, #255	; 0xff
 800310a:	2200      	movs	r2, #0
 800310c:	05c0      	lsls	r0, r0, #23
 800310e:	4310      	orrs	r0, r2
 8003110:	07e4      	lsls	r4, r4, #31
 8003112:	4320      	orrs	r0, r4
 8003114:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003116:	2b00      	cmp	r3, #0
 8003118:	d106      	bne.n	8003128 <__aeabi_d2f+0x44>
 800311a:	433d      	orrs	r5, r7
 800311c:	d026      	beq.n	800316c <__aeabi_d2f+0x88>
 800311e:	2205      	movs	r2, #5
 8003120:	0192      	lsls	r2, r2, #6
 8003122:	0a52      	lsrs	r2, r2, #9
 8003124:	b2d8      	uxtb	r0, r3
 8003126:	e7f1      	b.n	800310c <__aeabi_d2f+0x28>
 8003128:	432f      	orrs	r7, r5
 800312a:	d0ed      	beq.n	8003108 <__aeabi_d2f+0x24>
 800312c:	2280      	movs	r2, #128	; 0x80
 800312e:	03d2      	lsls	r2, r2, #15
 8003130:	20ff      	movs	r0, #255	; 0xff
 8003132:	432a      	orrs	r2, r5
 8003134:	e7ea      	b.n	800310c <__aeabi_d2f+0x28>
 8003136:	2900      	cmp	r1, #0
 8003138:	dd1b      	ble.n	8003172 <__aeabi_d2f+0x8e>
 800313a:	0192      	lsls	r2, r2, #6
 800313c:	1e50      	subs	r0, r2, #1
 800313e:	4182      	sbcs	r2, r0
 8003140:	00ed      	lsls	r5, r5, #3
 8003142:	0f7f      	lsrs	r7, r7, #29
 8003144:	432a      	orrs	r2, r5
 8003146:	433a      	orrs	r2, r7
 8003148:	0753      	lsls	r3, r2, #29
 800314a:	d047      	beq.n	80031dc <__aeabi_d2f+0xf8>
 800314c:	230f      	movs	r3, #15
 800314e:	4013      	ands	r3, r2
 8003150:	2b04      	cmp	r3, #4
 8003152:	d000      	beq.n	8003156 <__aeabi_d2f+0x72>
 8003154:	3204      	adds	r2, #4
 8003156:	2380      	movs	r3, #128	; 0x80
 8003158:	04db      	lsls	r3, r3, #19
 800315a:	4013      	ands	r3, r2
 800315c:	d03e      	beq.n	80031dc <__aeabi_d2f+0xf8>
 800315e:	1c48      	adds	r0, r1, #1
 8003160:	29fe      	cmp	r1, #254	; 0xfe
 8003162:	d0d1      	beq.n	8003108 <__aeabi_d2f+0x24>
 8003164:	0192      	lsls	r2, r2, #6
 8003166:	0a52      	lsrs	r2, r2, #9
 8003168:	b2c0      	uxtb	r0, r0
 800316a:	e7cf      	b.n	800310c <__aeabi_d2f+0x28>
 800316c:	2000      	movs	r0, #0
 800316e:	2200      	movs	r2, #0
 8003170:	e7cc      	b.n	800310c <__aeabi_d2f+0x28>
 8003172:	000a      	movs	r2, r1
 8003174:	3217      	adds	r2, #23
 8003176:	db2f      	blt.n	80031d8 <__aeabi_d2f+0xf4>
 8003178:	2680      	movs	r6, #128	; 0x80
 800317a:	0436      	lsls	r6, r6, #16
 800317c:	432e      	orrs	r6, r5
 800317e:	251e      	movs	r5, #30
 8003180:	1a6d      	subs	r5, r5, r1
 8003182:	2d1f      	cmp	r5, #31
 8003184:	dd11      	ble.n	80031aa <__aeabi_d2f+0xc6>
 8003186:	2202      	movs	r2, #2
 8003188:	4252      	negs	r2, r2
 800318a:	1a52      	subs	r2, r2, r1
 800318c:	0031      	movs	r1, r6
 800318e:	40d1      	lsrs	r1, r2
 8003190:	2d20      	cmp	r5, #32
 8003192:	d004      	beq.n	800319e <__aeabi_d2f+0xba>
 8003194:	4a14      	ldr	r2, [pc, #80]	; (80031e8 <__aeabi_d2f+0x104>)
 8003196:	4694      	mov	ip, r2
 8003198:	4463      	add	r3, ip
 800319a:	409e      	lsls	r6, r3
 800319c:	4337      	orrs	r7, r6
 800319e:	003a      	movs	r2, r7
 80031a0:	1e53      	subs	r3, r2, #1
 80031a2:	419a      	sbcs	r2, r3
 80031a4:	430a      	orrs	r2, r1
 80031a6:	2100      	movs	r1, #0
 80031a8:	e7ce      	b.n	8003148 <__aeabi_d2f+0x64>
 80031aa:	4a10      	ldr	r2, [pc, #64]	; (80031ec <__aeabi_d2f+0x108>)
 80031ac:	0038      	movs	r0, r7
 80031ae:	4694      	mov	ip, r2
 80031b0:	4463      	add	r3, ip
 80031b2:	4098      	lsls	r0, r3
 80031b4:	003a      	movs	r2, r7
 80031b6:	1e41      	subs	r1, r0, #1
 80031b8:	4188      	sbcs	r0, r1
 80031ba:	409e      	lsls	r6, r3
 80031bc:	40ea      	lsrs	r2, r5
 80031be:	4330      	orrs	r0, r6
 80031c0:	4302      	orrs	r2, r0
 80031c2:	2100      	movs	r1, #0
 80031c4:	0753      	lsls	r3, r2, #29
 80031c6:	d1c1      	bne.n	800314c <__aeabi_d2f+0x68>
 80031c8:	2180      	movs	r1, #128	; 0x80
 80031ca:	0013      	movs	r3, r2
 80031cc:	04c9      	lsls	r1, r1, #19
 80031ce:	2001      	movs	r0, #1
 80031d0:	400b      	ands	r3, r1
 80031d2:	420a      	tst	r2, r1
 80031d4:	d1c6      	bne.n	8003164 <__aeabi_d2f+0x80>
 80031d6:	e7a3      	b.n	8003120 <__aeabi_d2f+0x3c>
 80031d8:	2300      	movs	r3, #0
 80031da:	e7a0      	b.n	800311e <__aeabi_d2f+0x3a>
 80031dc:	000b      	movs	r3, r1
 80031de:	e79f      	b.n	8003120 <__aeabi_d2f+0x3c>
 80031e0:	000007fe 	.word	0x000007fe
 80031e4:	fffffc80 	.word	0xfffffc80
 80031e8:	fffffca2 	.word	0xfffffca2
 80031ec:	fffffc82 	.word	0xfffffc82

080031f0 <__clzsi2>:
 80031f0:	211c      	movs	r1, #28
 80031f2:	2301      	movs	r3, #1
 80031f4:	041b      	lsls	r3, r3, #16
 80031f6:	4298      	cmp	r0, r3
 80031f8:	d301      	bcc.n	80031fe <__clzsi2+0xe>
 80031fa:	0c00      	lsrs	r0, r0, #16
 80031fc:	3910      	subs	r1, #16
 80031fe:	0a1b      	lsrs	r3, r3, #8
 8003200:	4298      	cmp	r0, r3
 8003202:	d301      	bcc.n	8003208 <__clzsi2+0x18>
 8003204:	0a00      	lsrs	r0, r0, #8
 8003206:	3908      	subs	r1, #8
 8003208:	091b      	lsrs	r3, r3, #4
 800320a:	4298      	cmp	r0, r3
 800320c:	d301      	bcc.n	8003212 <__clzsi2+0x22>
 800320e:	0900      	lsrs	r0, r0, #4
 8003210:	3904      	subs	r1, #4
 8003212:	a202      	add	r2, pc, #8	; (adr r2, 800321c <__clzsi2+0x2c>)
 8003214:	5c10      	ldrb	r0, [r2, r0]
 8003216:	1840      	adds	r0, r0, r1
 8003218:	4770      	bx	lr
 800321a:	46c0      	nop			; (mov r8, r8)
 800321c:	02020304 	.word	0x02020304
 8003220:	01010101 	.word	0x01010101
	...

0800322c <Encoder_Run>:
float valor_Encoder   = 12.0;//valor inicial del encoder
float paso_Encoder    = 1.0;
/* Private functions ---------------------------------------------------------*/

/* Exported functions --------------------------------------------------------*/
float Encoder_Run(void){
 800322c:	b570      	push	{r4, r5, r6, lr}
    //FUNCION PARA LEER EL ENCODER ROTATIVOS, me base de aqui: https://www.youtube.com/watch?v=6c5nL2tcCs0&t=607s
    bit_actual = ((HAL_GPIO_ReadPin(DT_GPIO_Port, DT_Pin) << 1) | HAL_GPIO_ReadPin(CLK_GPIO_Port, CLK_Pin));                  //convierto a 'uint8_t' el valor ya que al compilar me daba un warning "la conversión implícita pierde precisión entera: 'int' a 'uint8_t'"
 800322e:	2140      	movs	r1, #64	; 0x40
 8003230:	481c      	ldr	r0, [pc, #112]	; (80032a4 <Encoder_Run+0x78>)
 8003232:	f002 fdc3 	bl	8005dbc <HAL_GPIO_ReadPin>
 8003236:	2120      	movs	r1, #32
 8003238:	0004      	movs	r4, r0
 800323a:	481a      	ldr	r0, [pc, #104]	; (80032a4 <Encoder_Run+0x78>)
 800323c:	f002 fdbe 	bl	8005dbc <HAL_GPIO_ReadPin>
 8003240:	0064      	lsls	r4, r4, #1
 8003242:	4b19      	ldr	r3, [pc, #100]	; (80032a8 <Encoder_Run+0x7c>)
    bit_armado = ((bit_anterior << 2) | bit_actual);
 8003244:	4a19      	ldr	r2, [pc, #100]	; (80032ac <Encoder_Run+0x80>)
    bit_actual = ((HAL_GPIO_ReadPin(DT_GPIO_Port, DT_Pin) << 1) | HAL_GPIO_ReadPin(CLK_GPIO_Port, CLK_Pin));                  //convierto a 'uint8_t' el valor ya que al compilar me daba un warning "la conversión implícita pierde precisión entera: 'int' a 'uint8_t'"
 8003246:	4320      	orrs	r0, r4
 8003248:	b2c0      	uxtb	r0, r0
 800324a:	7018      	strb	r0, [r3, #0]
    bit_armado = ((bit_anterior << 2) | bit_actual);
 800324c:	7813      	ldrb	r3, [r2, #0]
 800324e:	4918      	ldr	r1, [pc, #96]	; (80032b0 <Encoder_Run+0x84>)
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4303      	orrs	r3, r0
 8003254:	b2db      	uxtb	r3, r3
 8003256:	4c17      	ldr	r4, [pc, #92]	; (80032b4 <Encoder_Run+0x88>)
 8003258:	700b      	strb	r3, [r1, #0]
    bit_anterior = bit_actual;
 800325a:	7010      	strb	r0, [r2, #0]

    //Lectura de encoder rotativo de 20 posiciones
    if(bit_armado==14){//horario
 800325c:	2b0e      	cmp	r3, #14
 800325e:	d119      	bne.n	8003294 <Encoder_Run+0x68>
    	valor_Encoder-=paso_Encoder;
 8003260:	4b15      	ldr	r3, [pc, #84]	; (80032b8 <Encoder_Run+0x8c>)
 8003262:	6820      	ldr	r0, [r4, #0]
 8003264:	6819      	ldr	r1, [r3, #0]
 8003266:	f7fd fe53 	bl	8000f10 <__aeabi_fsub>
    }
    if(bit_armado==4){//antihorario
    	valor_Encoder+=paso_Encoder;
 800326a:	6020      	str	r0, [r4, #0]

    //Lectura de encoder rotativo de 30 posiciones
    //if( (bit_armado==14)||(bit_armado==7) ) valor_Encoder+=10;//horario
    //if( (bit_armado==4) ||(bit_armado==2) ) valor_Encoder-=10;//antihorario

    if(valor_Encoder <= val_Min_Encoder) valor_Encoder = val_Min_Encoder;
 800326c:	4b13      	ldr	r3, [pc, #76]	; (80032bc <Encoder_Run+0x90>)
 800326e:	6820      	ldr	r0, [r4, #0]
 8003270:	681d      	ldr	r5, [r3, #0]
 8003272:	1c29      	adds	r1, r5, #0
 8003274:	f7fd f940 	bl	80004f8 <__aeabi_fcmple>
 8003278:	2800      	cmp	r0, #0
 800327a:	d000      	beq.n	800327e <Encoder_Run+0x52>
 800327c:	6025      	str	r5, [r4, #0]
    if(valor_Encoder >= val_Max_Encoder) valor_Encoder = val_Max_Encoder;
 800327e:	4b10      	ldr	r3, [pc, #64]	; (80032c0 <Encoder_Run+0x94>)
 8003280:	6820      	ldr	r0, [r4, #0]
 8003282:	681d      	ldr	r5, [r3, #0]
 8003284:	1c29      	adds	r1, r5, #0
 8003286:	f7fd f94b 	bl	8000520 <__aeabi_fcmpge>
 800328a:	2800      	cmp	r0, #0
 800328c:	d000      	beq.n	8003290 <Encoder_Run+0x64>
 800328e:	6025      	str	r5, [r4, #0]

    return valor_Encoder;
 8003290:	6820      	ldr	r0, [r4, #0]
}
 8003292:	bd70      	pop	{r4, r5, r6, pc}
    if(bit_armado==4){//antihorario
 8003294:	2b04      	cmp	r3, #4
 8003296:	d1e9      	bne.n	800326c <Encoder_Run+0x40>
    	valor_Encoder+=paso_Encoder;
 8003298:	4b07      	ldr	r3, [pc, #28]	; (80032b8 <Encoder_Run+0x8c>)
 800329a:	6821      	ldr	r1, [r4, #0]
 800329c:	6818      	ldr	r0, [r3, #0]
 800329e:	f7fd f97f 	bl	80005a0 <__aeabi_fadd>
 80032a2:	e7e2      	b.n	800326a <Encoder_Run+0x3e>
 80032a4:	48000400 	.word	0x48000400
 80032a8:	2000020c 	.word	0x2000020c
 80032ac:	2000020d 	.word	0x2000020d
 80032b0:	2000020e 	.word	0x2000020e
 80032b4:	2000000c 	.word	0x2000000c
 80032b8:	20000000 	.word	0x20000000
 80032bc:	20000008 	.word	0x20000008
 80032c0:	20000004 	.word	0x20000004

080032c4 <INA226_Init_DMA>:
/* Private macros ------------------------------------------------------------*/
/* Variables -----------------------------------------------------------------*/
Anglas_IN226 ina;
/* Private functions ---------------------------------------------------------*/
/* Exported functions --------------------------------------------------------*/
void INA226_Init_DMA(const double Maximum_Expected_Current, const uint16_t resMiliohmios, uint16_t AVG, uint16_t Time_Vbus, uint16_t Time_Vshunt, uint16_t ModeOperation){
 80032c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t datos[3];
	uint8_t MSB,LSB;
	uint16_t REGISTER;

	ina.Rshunt = resMiliohmios; //esto lo hago porq necesito Rshunt para la funcion "INA226_Alert_Limit_Write"
 80032c6:	4e37      	ldr	r6, [pc, #220]	; (80033a4 <INA226_Init_DMA+0xe0>)
void INA226_Init_DMA(const double Maximum_Expected_Current, const uint16_t resMiliohmios, uint16_t AVG, uint16_t Time_Vbus, uint16_t Time_Vshunt, uint16_t ModeOperation){
 80032c8:	b085      	sub	sp, #20
	ina.Rshunt = resMiliohmios; //esto lo hago porq necesito Rshunt para la funcion "INA226_Alert_Limit_Write"
 80032ca:	81f2      	strh	r2, [r6, #14]
	 * bit 11-9 : 100 (AVG=128, promedio de numero de muestras)
	 * bit  8-6 : 100 (T=1.1ms, tiempo de conversion de Vbus)
	 * bit  5-3 : 111 (T=8.24ms, tiempo de conversion de Vshunt)
	 * bit  2-0 : 111 (Shunt & Bus continuo, modo de operacion)
	*/
	REGISTER = NO_RESET_INA226|(AVG << 9)|(Time_Vbus << 6)|(Time_Vshunt << 3)|ModeOperation;
 80032cc:	2280      	movs	r2, #128	; 0x80
void INA226_Init_DMA(const double Maximum_Expected_Current, const uint16_t resMiliohmios, uint16_t AVG, uint16_t Time_Vbus, uint16_t Time_Vshunt, uint16_t ModeOperation){
 80032ce:	9000      	str	r0, [sp, #0]
 80032d0:	9101      	str	r1, [sp, #4]
 80032d2:	a90a      	add	r1, sp, #40	; 0x28
 80032d4:	8808      	ldrh	r0, [r1, #0]
 80032d6:	a90b      	add	r1, sp, #44	; 0x2c
 80032d8:	880c      	ldrh	r4, [r1, #0]
	REGISTER = NO_RESET_INA226|(AVG << 9)|(Time_Vbus << 6)|(Time_Vshunt << 3)|ModeOperation;
 80032da:	025b      	lsls	r3, r3, #9
 80032dc:	00e4      	lsls	r4, r4, #3
 80032de:	4323      	orrs	r3, r4
 80032e0:	0180      	lsls	r0, r0, #6
 80032e2:	4303      	orrs	r3, r0
 80032e4:	01d2      	lsls	r2, r2, #7
 80032e6:	4313      	orrs	r3, r2

	MSB = (uint8_t)(REGISTER >> 8);
	LSB = (uint8_t)(REGISTER & 0xFF);

	datos[0] = INA_CONFIGURATION_REGISTER;
 80032e8:	2200      	movs	r2, #0
void INA226_Init_DMA(const double Maximum_Expected_Current, const uint16_t resMiliohmios, uint16_t AVG, uint16_t Time_Vbus, uint16_t Time_Vshunt, uint16_t ModeOperation){
 80032ea:	a90c      	add	r1, sp, #48	; 0x30
 80032ec:	8809      	ldrh	r1, [r1, #0]
	datos[0] = INA_CONFIGURATION_REGISTER;
 80032ee:	ac03      	add	r4, sp, #12
	REGISTER = NO_RESET_INA226|(AVG << 9)|(Time_Vbus << 6)|(Time_Vshunt << 3)|ModeOperation;
 80032f0:	4319      	orrs	r1, r3
 80032f2:	b289      	uxth	r1, r1
	datos[1] = MSB;
	datos[2] = LSB;
	HAL_I2C_Master_Transmit_DMA(&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 3);
 80032f4:	4f2c      	ldr	r7, [pc, #176]	; (80033a8 <INA226_Init_DMA+0xe4>)
	datos[0] = INA_CONFIGURATION_REGISTER;
 80032f6:	7022      	strb	r2, [r4, #0]
	MSB = (uint8_t)(REGISTER >> 8);
 80032f8:	0a0a      	lsrs	r2, r1, #8
	datos[1] = MSB;
 80032fa:	7062      	strb	r2, [r4, #1]
	datos[2] = LSB;
 80032fc:	70a1      	strb	r1, [r4, #2]
	HAL_I2C_Master_Transmit_DMA(&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 3);
 80032fe:	2303      	movs	r3, #3
 8003300:	0022      	movs	r2, r4
 8003302:	2180      	movs	r1, #128	; 0x80
 8003304:	0038      	movs	r0, r7
 8003306:	f003 f813 	bl	8006330 <HAL_I2C_Master_Transmit_DMA>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {}
 800330a:	0038      	movs	r0, r7
 800330c:	f003 fe9b 	bl	8007046 <HAL_I2C_GetState>
 8003310:	2820      	cmp	r0, #32
 8003312:	d1fa      	bne.n	800330a <INA226_Init_DMA+0x46>

	ina.current_LSB = (Maximum_Expected_Current*1000000000/32768); // Conseguir el mejor LSB posible en nA
 8003314:	9800      	ldr	r0, [sp, #0]
 8003316:	9901      	ldr	r1, [sp, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	4b24      	ldr	r3, [pc, #144]	; (80033ac <INA226_Init_DMA+0xe8>)
 800331c:	f7fe ffac 	bl	8002278 <__aeabi_dmul>
 8003320:	23fc      	movs	r3, #252	; 0xfc
 8003322:	2200      	movs	r2, #0
 8003324:	059b      	lsls	r3, r3, #22
 8003326:	f7fe ffa7 	bl	8002278 <__aeabi_dmul>
 800332a:	f7fd f91b 	bl	8000564 <__aeabi_d2uiz>
 800332e:	0005      	movs	r5, r0
 8003330:	6070      	str	r0, [r6, #4]
	ina.calibration = (float)5120000 / ((float)ina.current_LSB * ina.Rshunt/1000);  // Compute calibration register(CAL)
 8003332:	89f0      	ldrh	r0, [r6, #14]
 8003334:	f7fd ffac 	bl	8001290 <__aeabi_i2f>
 8003338:	9000      	str	r0, [sp, #0]
 800333a:	0028      	movs	r0, r5
 800333c:	f7fd fffa 	bl	8001334 <__aeabi_ui2f>
 8003340:	1c01      	adds	r1, r0, #0
 8003342:	9800      	ldr	r0, [sp, #0]
 8003344:	f7fd fc96 	bl	8000c74 <__aeabi_fmul>
 8003348:	4919      	ldr	r1, [pc, #100]	; (80033b0 <INA226_Init_DMA+0xec>)
 800334a:	f7fd fac9 	bl	80008e0 <__aeabi_fdiv>
 800334e:	1c01      	adds	r1, r0, #0
 8003350:	4818      	ldr	r0, [pc, #96]	; (80033b4 <INA226_Init_DMA+0xf0>)
 8003352:	f7fd fac5 	bl	80008e0 <__aeabi_fdiv>
 8003356:	f7fd f8ed 	bl	8000534 <__aeabi_f2uiz>
 800335a:	b283      	uxth	r3, r0
 800335c:	9300      	str	r3, [sp, #0]
 800335e:	8073      	strh	r3, [r6, #2]

	//La formula para "power_LSB" es solo multiplicar "current_LSB" por 25 (pag.16 datasheet)
	//Lo resto 3750 para calibrar(probar desde 2000 - 7000 )
	//Lo divido entre 1000 porq el numero es muy grande y para la operacion de "INA226_Power()" el numero excede de uint32_t
	ina.power_LSB   = (float)25 * (ina.current_LSB-3750)/1000;
 8003360:	4b15      	ldr	r3, [pc, #84]	; (80033b8 <INA226_Init_DMA+0xf4>)
 8003362:	18e8      	adds	r0, r5, r3
 8003364:	f7fd ffe6 	bl	8001334 <__aeabi_ui2f>
 8003368:	4914      	ldr	r1, [pc, #80]	; (80033bc <INA226_Init_DMA+0xf8>)
 800336a:	f7fd fc83 	bl	8000c74 <__aeabi_fmul>
 800336e:	4910      	ldr	r1, [pc, #64]	; (80033b0 <INA226_Init_DMA+0xec>)
 8003370:	f7fd fab6 	bl	80008e0 <__aeabi_fdiv>
 8003374:	f7fd f8de 	bl	8000534 <__aeabi_f2uiz>

	MSB = (uint8_t)(ina.calibration >> 8);
	LSB = (uint8_t)(ina.calibration & 0xFF);

	datos[0] = INA_CALIBRATION_REGISTER;
 8003378:	2305      	movs	r3, #5
 800337a:	7023      	strb	r3, [r4, #0]
	MSB = (uint8_t)(ina.calibration >> 8);
 800337c:	9b00      	ldr	r3, [sp, #0]
	ina.power_LSB   = (float)25 * (ina.current_LSB-3750)/1000;
 800337e:	60b0      	str	r0, [r6, #8]
	MSB = (uint8_t)(ina.calibration >> 8);
 8003380:	0a1b      	lsrs	r3, r3, #8
	datos[1] = MSB;
 8003382:	7063      	strb	r3, [r4, #1]
	datos[2] = LSB;
 8003384:	9b00      	ldr	r3, [sp, #0]
	HAL_I2C_Master_Transmit_DMA(&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 3);
 8003386:	0022      	movs	r2, r4
	datos[2] = LSB;
 8003388:	70a3      	strb	r3, [r4, #2]
	HAL_I2C_Master_Transmit_DMA(&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 3);
 800338a:	2180      	movs	r1, #128	; 0x80
 800338c:	2303      	movs	r3, #3
 800338e:	0038      	movs	r0, r7
 8003390:	f002 ffce 	bl	8006330 <HAL_I2C_Master_Transmit_DMA>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {}
 8003394:	0038      	movs	r0, r7
 8003396:	f003 fe56 	bl	8007046 <HAL_I2C_GetState>
 800339a:	2820      	cmp	r0, #32
 800339c:	d1fa      	bne.n	8003394 <INA226_Init_DMA+0xd0>
}
 800339e:	b005      	add	sp, #20
 80033a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033a2:	46c0      	nop			; (mov r8, r8)
 80033a4:	20000210 	.word	0x20000210
 80033a8:	20000740 	.word	0x20000740
 80033ac:	41cdcd65 	.word	0x41cdcd65
 80033b0:	447a0000 	.word	0x447a0000
 80033b4:	4a9c4000 	.word	0x4a9c4000
 80033b8:	fffff15a 	.word	0xfffff15a
 80033bc:	41c80000 	.word	0x41c80000

080033c0 <INA226_Vbus_DMA>:
		Vshunt = (uint32_t)dato * INA_SHUNT_VOLTAGE_LSB;
		return Vshunt/10000.0;
	}
}

float INA226_Vbus_DMA(void){
 80033c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint16_t dato;
	uint32_t Vbus;
	uint8_t datos[3];

	datos[0] = INA_BUS_VOLTAGE_REGISTER;
 80033c2:	2302      	movs	r3, #2
 80033c4:	466a      	mov	r2, sp
	HAL_I2C_Master_Transmit_DMA(&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 1);
 80033c6:	4c12      	ldr	r4, [pc, #72]	; (8003410 <INA226_Vbus_DMA+0x50>)
	datos[0] = INA_BUS_VOLTAGE_REGISTER;
 80033c8:	7313      	strb	r3, [r2, #12]
	HAL_I2C_Master_Transmit_DMA(&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 1);
 80033ca:	2180      	movs	r1, #128	; 0x80
 80033cc:	0020      	movs	r0, r4
 80033ce:	3b01      	subs	r3, #1
 80033d0:	aa03      	add	r2, sp, #12
 80033d2:	f002 ffad 	bl	8006330 <HAL_I2C_Master_Transmit_DMA>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {}
 80033d6:	0020      	movs	r0, r4
 80033d8:	f003 fe35 	bl	8007046 <HAL_I2C_GetState>
 80033dc:	2820      	cmp	r0, #32
 80033de:	d1fa      	bne.n	80033d6 <INA226_Vbus_DMA+0x16>

	HAL_I2C_Master_Receive(&hi2c1, INA226_I2C_ADDRESS_READ, (uint8_t*)datos, 2, 100);
 80033e0:	2364      	movs	r3, #100	; 0x64
 80033e2:	aa03      	add	r2, sp, #12
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	2181      	movs	r1, #129	; 0x81
 80033e8:	0020      	movs	r0, r4
 80033ea:	3b62      	subs	r3, #98	; 0x62
 80033ec:	f002 ff0e 	bl	800620c <HAL_I2C_Master_Receive>

	dato = ((datos[0]<<8)|datos[1]);
	Vbus = (uint32_t)dato * INA_BUS_VOLTAGE_LSB;
 80033f0:	466b      	mov	r3, sp
 80033f2:	207d      	movs	r0, #125	; 0x7d
 80033f4:	899b      	ldrh	r3, [r3, #12]
 80033f6:	ba5b      	rev16	r3, r3
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	4358      	muls	r0, r3

	return Vbus/100000.0;//Voltios;
 80033fc:	f7ff fe04 	bl	8003008 <__aeabi_ui2d>
 8003400:	2200      	movs	r2, #0
 8003402:	4b04      	ldr	r3, [pc, #16]	; (8003414 <INA226_Vbus_DMA+0x54>)
 8003404:	f7fe fb3e 	bl	8001a84 <__aeabi_ddiv>
 8003408:	f7ff fe6c 	bl	80030e4 <__aeabi_d2f>
}
 800340c:	b004      	add	sp, #16
 800340e:	bd10      	pop	{r4, pc}
 8003410:	20000740 	.word	0x20000740
 8003414:	40f86a00 	.word	0x40f86a00

08003418 <INA226_Current_DMA>:
	uint16_t dato;
	uint32_t current;
	uint8_t datos[3];

	//todo esto es lo mismo que float INA226_Vshunt(void) ya que si ingreso esta funcion dentro de esta funcion, no me deja hacer debug
	datos[0] = INA_SHUNT_VOLTAGE_REGISTER;
 8003418:	2301      	movs	r3, #1
float INA226_Current_DMA(void){
 800341a:	b530      	push	{r4, r5, lr}
	HAL_I2C_Master_Transmit_DMA(&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 1);
 800341c:	4d20      	ldr	r5, [pc, #128]	; (80034a0 <INA226_Current_DMA+0x88>)
float INA226_Current_DMA(void){
 800341e:	b085      	sub	sp, #20
	datos[0] = INA_SHUNT_VOLTAGE_REGISTER;
 8003420:	ac03      	add	r4, sp, #12
	HAL_I2C_Master_Transmit_DMA(&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 1);
 8003422:	0022      	movs	r2, r4
 8003424:	2180      	movs	r1, #128	; 0x80
 8003426:	0028      	movs	r0, r5
	datos[0] = INA_SHUNT_VOLTAGE_REGISTER;
 8003428:	7023      	strb	r3, [r4, #0]
	HAL_I2C_Master_Transmit_DMA(&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 1);
 800342a:	f002 ff81 	bl	8006330 <HAL_I2C_Master_Transmit_DMA>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {}
 800342e:	0028      	movs	r0, r5
 8003430:	f003 fe09 	bl	8007046 <HAL_I2C_GetState>
 8003434:	2820      	cmp	r0, #32
 8003436:	d1fa      	bne.n	800342e <INA226_Current_DMA+0x16>

	HAL_I2C_Master_Receive(&hi2c1, INA226_I2C_ADDRESS_READ, (uint8_t*)datos, 2, 100);
 8003438:	2364      	movs	r3, #100	; 0x64
 800343a:	0022      	movs	r2, r4
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	2181      	movs	r1, #129	; 0x81
 8003440:	3b62      	subs	r3, #98	; 0x62
 8003442:	0028      	movs	r0, r5
 8003444:	f002 fee2 	bl	800620c <HAL_I2C_Master_Receive>

	dato = ((datos[0]<<8)|datos[1]);

	if(dato >= 65534){//si no hay carga conectada, devuelve el dato 65535(puede oscilar entre 65534 y 65535)
 8003448:	8823      	ldrh	r3, [r4, #0]
 800344a:	4a16      	ldr	r2, [pc, #88]	; (80034a4 <INA226_Current_DMA+0x8c>)
 800344c:	ba5b      	rev16	r3, r3
 800344e:	b29b      	uxth	r3, r3
		return 0;
 8003450:	2000      	movs	r0, #0
	if(dato >= 65534){//si no hay carga conectada, devuelve el dato 65535(puede oscilar entre 65534 y 65535)
 8003452:	4293      	cmp	r3, r2
 8003454:	d821      	bhi.n	800349a <INA226_Current_DMA+0x82>
	///////////////////////////////////////////////////////////////////////////////////////////////////////////
	}else{
		datos[0] = INA_CURRENT_REGISTER;
 8003456:	2304      	movs	r3, #4
		HAL_I2C_Master_Transmit_DMA(&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 1);
 8003458:	0022      	movs	r2, r4
		datos[0] = INA_CURRENT_REGISTER;
 800345a:	7023      	strb	r3, [r4, #0]
		HAL_I2C_Master_Transmit_DMA(&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 1);
 800345c:	2180      	movs	r1, #128	; 0x80
 800345e:	0028      	movs	r0, r5
 8003460:	3b03      	subs	r3, #3
 8003462:	f002 ff65 	bl	8006330 <HAL_I2C_Master_Transmit_DMA>
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {}
 8003466:	0028      	movs	r0, r5
 8003468:	f003 fded 	bl	8007046 <HAL_I2C_GetState>
 800346c:	2820      	cmp	r0, #32
 800346e:	d1fa      	bne.n	8003466 <INA226_Current_DMA+0x4e>

		HAL_I2C_Master_Receive(&hi2c1, INA226_I2C_ADDRESS_READ, (uint8_t*)datos, 2, 100);
 8003470:	2364      	movs	r3, #100	; 0x64
 8003472:	0022      	movs	r2, r4
 8003474:	2181      	movs	r1, #129	; 0x81
 8003476:	9300      	str	r3, [sp, #0]
 8003478:	0028      	movs	r0, r5
 800347a:	3b62      	subs	r3, #98	; 0x62
 800347c:	f002 fec6 	bl	800620c <HAL_I2C_Master_Receive>


		dato = ((datos[0]<<8)|datos[1]);
		current = (uint32_t)dato * (ina.current_LSB - 3750);//restar un valor entre 3000 y 5000 para calibrar las medidas (estoy lo hice con prueba error)
 8003480:	4a09      	ldr	r2, [pc, #36]	; (80034a8 <INA226_Current_DMA+0x90>)
 8003482:	8823      	ldrh	r3, [r4, #0]
 8003484:	6850      	ldr	r0, [r2, #4]
 8003486:	4a09      	ldr	r2, [pc, #36]	; (80034ac <INA226_Current_DMA+0x94>)
 8003488:	ba5b      	rev16	r3, r3
 800348a:	b29b      	uxth	r3, r3
 800348c:	1880      	adds	r0, r0, r2
 800348e:	4358      	muls	r0, r3
		return current/1000000;//mA;
 8003490:	4907      	ldr	r1, [pc, #28]	; (80034b0 <INA226_Current_DMA+0x98>)
 8003492:	f7fc fe55 	bl	8000140 <__udivsi3>
 8003496:	f7fd ff4d 	bl	8001334 <__aeabi_ui2f>
		HAL_I2C_Master_Receive(&hi2c1, INA226_I2C_ADDRESS_READ, (uint8_t*)datos, 2, 100);
		dato = ((datos[0]<<8)|datos[1]);
		current = (uint32_t)dato * (ina.current_LSB-900);
		return current/1000000.0;//mA;
	}*/
}
 800349a:	b005      	add	sp, #20
 800349c:	bd30      	pop	{r4, r5, pc}
 800349e:	46c0      	nop			; (mov r8, r8)
 80034a0:	20000740 	.word	0x20000740
 80034a4:	0000fffd 	.word	0x0000fffd
 80034a8:	20000210 	.word	0x20000210
 80034ac:	fffff15a 	.word	0xfffff15a
 80034b0:	000f4240 	.word	0x000f4240

080034b4 <INA226_Power_DMA>:

float INA226_Power_DMA(void){
 80034b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint16_t dato;
	uint32_t power;
	uint8_t datos[3];

	datos[0] = INA_POWER_REGISTER;
 80034b6:	2303      	movs	r3, #3
 80034b8:	466a      	mov	r2, sp
	HAL_I2C_Master_Transmit_DMA(&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 1);
 80034ba:	4c13      	ldr	r4, [pc, #76]	; (8003508 <INA226_Power_DMA+0x54>)
	datos[0] = INA_POWER_REGISTER;
 80034bc:	7313      	strb	r3, [r2, #12]
	HAL_I2C_Master_Transmit_DMA(&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 1);
 80034be:	2180      	movs	r1, #128	; 0x80
 80034c0:	0020      	movs	r0, r4
 80034c2:	3b02      	subs	r3, #2
 80034c4:	aa03      	add	r2, sp, #12
 80034c6:	f002 ff33 	bl	8006330 <HAL_I2C_Master_Transmit_DMA>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {}
 80034ca:	0020      	movs	r0, r4
 80034cc:	f003 fdbb 	bl	8007046 <HAL_I2C_GetState>
 80034d0:	2820      	cmp	r0, #32
 80034d2:	d1fa      	bne.n	80034ca <INA226_Power_DMA+0x16>

	HAL_I2C_Master_Receive(&hi2c1, INA226_I2C_ADDRESS_READ, (uint8_t*)datos, 2, 100);
 80034d4:	2364      	movs	r3, #100	; 0x64
 80034d6:	aa03      	add	r2, sp, #12
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	2181      	movs	r1, #129	; 0x81
 80034dc:	0020      	movs	r0, r4
 80034de:	3b62      	subs	r3, #98	; 0x62
 80034e0:	f002 fe94 	bl	800620c <HAL_I2C_Master_Receive>

	dato = ((datos[0]<<8)|datos[1]);
	power = (uint32_t)dato * ina.power_LSB;
 80034e4:	466b      	mov	r3, sp
 80034e6:	4a09      	ldr	r2, [pc, #36]	; (800350c <INA226_Power_DMA+0x58>)
 80034e8:	899b      	ldrh	r3, [r3, #12]
 80034ea:	6890      	ldr	r0, [r2, #8]
 80034ec:	ba5b      	rev16	r3, r3
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	4358      	muls	r0, r3
	return power/1000000.0;//Watts;
 80034f2:	f7ff fd89 	bl	8003008 <__aeabi_ui2d>
 80034f6:	2200      	movs	r2, #0
 80034f8:	4b05      	ldr	r3, [pc, #20]	; (8003510 <INA226_Power_DMA+0x5c>)
 80034fa:	f7fe fac3 	bl	8001a84 <__aeabi_ddiv>
 80034fe:	f7ff fdf1 	bl	80030e4 <__aeabi_d2f>
}
 8003502:	b004      	add	sp, #16
 8003504:	bd10      	pop	{r4, pc}
 8003506:	46c0      	nop			; (mov r8, r8)
 8003508:	20000740 	.word	0x20000740
 800350c:	20000210 	.word	0x20000210
 8003510:	412e8480 	.word	0x412e8480

08003514 <INA226_Mode_pinAlert_DMA>:
uint16_t INA226_Mode_pinAlert_DMA(uint16_t umbral){// 1000 0xxx xxx0 0010 = 0x2002
	uint16_t dato;
	uint8_t datos[3];
	uint8_t MSB,LSB;

	ina.mask_Enable = umbral;
 8003514:	4b17      	ldr	r3, [pc, #92]	; (8003574 <INA226_Mode_pinAlert_DMA+0x60>)
uint16_t INA226_Mode_pinAlert_DMA(uint16_t umbral){// 1000 0xxx xxx0 0010 = 0x2002
 8003516:	b530      	push	{r4, r5, lr}
	ina.mask_Enable = umbral;
 8003518:	8218      	strh	r0, [r3, #16]

	MSB = (uint8_t)(umbral >> 8);
	LSB = (uint8_t)(umbral & 0xFF);

	//Envio el "umbral" al registro mask/enable
	datos[0] = INA_MASK_ENABLE_REGISTER;
 800351a:	2306      	movs	r3, #6
uint16_t INA226_Mode_pinAlert_DMA(uint16_t umbral){// 1000 0xxx xxx0 0010 = 0x2002
 800351c:	b085      	sub	sp, #20
	datos[0] = INA_MASK_ENABLE_REGISTER;
 800351e:	ac03      	add	r4, sp, #12
	datos[1] = MSB;
	datos[2] = LSB;
	HAL_I2C_Master_Transmit_DMA(&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 3);
 8003520:	4d15      	ldr	r5, [pc, #84]	; (8003578 <INA226_Mode_pinAlert_DMA+0x64>)
	datos[0] = INA_MASK_ENABLE_REGISTER;
 8003522:	7023      	strb	r3, [r4, #0]
	MSB = (uint8_t)(umbral >> 8);
 8003524:	0a03      	lsrs	r3, r0, #8
	datos[1] = MSB;
 8003526:	7063      	strb	r3, [r4, #1]
	datos[2] = LSB;
 8003528:	70a0      	strb	r0, [r4, #2]
	HAL_I2C_Master_Transmit_DMA(&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 3);
 800352a:	2303      	movs	r3, #3
 800352c:	0022      	movs	r2, r4
 800352e:	2180      	movs	r1, #128	; 0x80
 8003530:	0028      	movs	r0, r5
 8003532:	f002 fefd 	bl	8006330 <HAL_I2C_Master_Transmit_DMA>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {}
 8003536:	0028      	movs	r0, r5
 8003538:	f003 fd85 	bl	8007046 <HAL_I2C_GetState>
 800353c:	2820      	cmp	r0, #32
 800353e:	d1fa      	bne.n	8003536 <INA226_Mode_pinAlert_DMA+0x22>

	//Leo el dato "umbral" que envie, para verificar que llego correctamente
	datos[0] = INA_MASK_ENABLE_REGISTER;
 8003540:	2306      	movs	r3, #6
	HAL_I2C_Master_Transmit_DMA(&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 1);
 8003542:	0022      	movs	r2, r4
	datos[0] = INA_MASK_ENABLE_REGISTER;
 8003544:	7023      	strb	r3, [r4, #0]
	HAL_I2C_Master_Transmit_DMA(&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 1);
 8003546:	2180      	movs	r1, #128	; 0x80
 8003548:	0028      	movs	r0, r5
 800354a:	3b05      	subs	r3, #5
 800354c:	f002 fef0 	bl	8006330 <HAL_I2C_Master_Transmit_DMA>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {}
 8003550:	0028      	movs	r0, r5
 8003552:	f003 fd78 	bl	8007046 <HAL_I2C_GetState>
 8003556:	2820      	cmp	r0, #32
 8003558:	d1fa      	bne.n	8003550 <INA226_Mode_pinAlert_DMA+0x3c>

	HAL_I2C_Master_Receive(&hi2c1, INA226_I2C_ADDRESS_READ, (uint8_t*)datos, 2, 100);
 800355a:	2364      	movs	r3, #100	; 0x64
 800355c:	0022      	movs	r2, r4
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	2181      	movs	r1, #129	; 0x81
 8003562:	0028      	movs	r0, r5
 8003564:	3b62      	subs	r3, #98	; 0x62
 8003566:	f002 fe51 	bl	800620c <HAL_I2C_Master_Receive>
	dato = ((datos[0]<<8)|datos[1]);
 800356a:	8820      	ldrh	r0, [r4, #0]
 800356c:	ba40      	rev16	r0, r0
 800356e:	b280      	uxth	r0, r0
	return dato;
}
 8003570:	b005      	add	sp, #20
 8003572:	bd30      	pop	{r4, r5, pc}
 8003574:	20000210 	.word	0x20000210
 8003578:	20000740 	.word	0x20000740

0800357c <INA226_Alert_Limit_DMA>:

uint16_t INA226_Alert_Limit_DMA(uint16_t limite){//presicion ±2mA, el mV y mW falta probar, pero es muy preciso
 800357c:	b5f0      	push	{r4, r5, r6, r7, lr}
	 * dato = power/ina.power_LSB;
	 * dato = (power*1000)/ina.power_LSB;      se multiplica por 1000 para tener el "dato" en 16bits
	 * 										   dato: es el valor(0-32767) que nos devuelve el IN226 en "INA226_Vbus()"
	 * 										   limite = power (Ingresar "uint16_t limite" en miliwatts)
	*/
	switch(ina.mask_Enable){
 800357e:	4d3d      	ldr	r5, [pc, #244]	; (8003674 <INA226_Alert_Limit_DMA+0xf8>)
 8003580:	4a3d      	ldr	r2, [pc, #244]	; (8003678 <INA226_Alert_Limit_DMA+0xfc>)
 8003582:	8a2b      	ldrh	r3, [r5, #16]
uint16_t INA226_Alert_Limit_DMA(uint16_t limite){//presicion ±2mA, el mV y mW falta probar, pero es muy preciso
 8003584:	0004      	movs	r4, r0
 8003586:	b085      	sub	sp, #20
	switch(ina.mask_Enable){
 8003588:	4293      	cmp	r3, r2
 800358a:	d053      	beq.n	8003634 <INA226_Alert_Limit_DMA+0xb8>
 800358c:	d831      	bhi.n	80035f2 <INA226_Alert_Limit_DMA+0x76>
 800358e:	4a3b      	ldr	r2, [pc, #236]	; (800367c <INA226_Alert_Limit_DMA+0x100>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d05c      	beq.n	800364e <INA226_Alert_Limit_DMA+0xd2>
 8003594:	4a3a      	ldr	r2, [pc, #232]	; (8003680 <INA226_Alert_Limit_DMA+0x104>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d04c      	beq.n	8003634 <INA226_Alert_Limit_DMA+0xb8>

	MSB = (uint8_t)(limite >> 8);
	LSB = (uint8_t)(limite & 0xFF);

	//Envio el "limite" al registro mask/enable
	datos[0] = INA_ALERT_LIMIT_REGISTER;
 800359a:	2307      	movs	r3, #7
 800359c:	ad03      	add	r5, sp, #12
 800359e:	702b      	strb	r3, [r5, #0]
	datos[1] = MSB;
	datos[2] = LSB;
 80035a0:	70ac      	strb	r4, [r5, #2]
	MSB = (uint8_t)(limite >> 8);
 80035a2:	0a23      	lsrs	r3, r4, #8
	HAL_I2C_Master_Transmit_DMA(&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 3);
 80035a4:	4c37      	ldr	r4, [pc, #220]	; (8003684 <INA226_Alert_Limit_DMA+0x108>)
	datos[1] = MSB;
 80035a6:	706b      	strb	r3, [r5, #1]
	HAL_I2C_Master_Transmit_DMA(&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 3);
 80035a8:	002a      	movs	r2, r5
 80035aa:	2303      	movs	r3, #3
 80035ac:	2180      	movs	r1, #128	; 0x80
 80035ae:	0020      	movs	r0, r4
 80035b0:	f002 febe 	bl	8006330 <HAL_I2C_Master_Transmit_DMA>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {}
 80035b4:	0020      	movs	r0, r4
 80035b6:	f003 fd46 	bl	8007046 <HAL_I2C_GetState>
 80035ba:	2820      	cmp	r0, #32
 80035bc:	d1fa      	bne.n	80035b4 <INA226_Alert_Limit_DMA+0x38>

	//Leo el dato "limite" que envie, para verificar que llego correctamente
	datos[0] = INA_ALERT_LIMIT_REGISTER;
 80035be:	2307      	movs	r3, #7
	HAL_I2C_Master_Transmit_DMA(&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 1);
 80035c0:	002a      	movs	r2, r5
	datos[0] = INA_ALERT_LIMIT_REGISTER;
 80035c2:	702b      	strb	r3, [r5, #0]
	HAL_I2C_Master_Transmit_DMA(&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 1);
 80035c4:	2180      	movs	r1, #128	; 0x80
 80035c6:	0020      	movs	r0, r4
 80035c8:	3b06      	subs	r3, #6
 80035ca:	f002 feb1 	bl	8006330 <HAL_I2C_Master_Transmit_DMA>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {}
 80035ce:	0020      	movs	r0, r4
 80035d0:	f003 fd39 	bl	8007046 <HAL_I2C_GetState>
 80035d4:	2820      	cmp	r0, #32
 80035d6:	d1fa      	bne.n	80035ce <INA226_Alert_Limit_DMA+0x52>

	HAL_I2C_Master_Receive(&hi2c1, INA226_I2C_ADDRESS_READ, (uint8_t*)datos, 2, 100);
 80035d8:	2364      	movs	r3, #100	; 0x64
 80035da:	002a      	movs	r2, r5
 80035dc:	9300      	str	r3, [sp, #0]
 80035de:	2181      	movs	r1, #129	; 0x81
 80035e0:	0020      	movs	r0, r4
 80035e2:	3b62      	subs	r3, #98	; 0x62
 80035e4:	f002 fe12 	bl	800620c <HAL_I2C_Master_Receive>
	dato = ((datos[0]<<8)|datos[1]);
 80035e8:	8828      	ldrh	r0, [r5, #0]
 80035ea:	ba40      	rev16	r0, r0
 80035ec:	b280      	uxth	r0, r0
	return dato;
}
 80035ee:	b005      	add	sp, #20
 80035f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch(ina.mask_Enable){
 80035f2:	4a25      	ldr	r2, [pc, #148]	; (8003688 <INA226_Alert_Limit_DMA+0x10c>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d002      	beq.n	80035fe <INA226_Alert_Limit_DMA+0x82>
 80035f8:	4a24      	ldr	r2, [pc, #144]	; (800368c <INA226_Alert_Limit_DMA+0x110>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d1cd      	bne.n	800359a <INA226_Alert_Limit_DMA+0x1e>
		case SHUNT_VOLTAGE_UNDER: limite = ((float)limite*ina.Rshunt*10.0*calibrar)/INA_SHUNT_VOLTAGE_LSB;break;
 80035fe:	89e8      	ldrh	r0, [r5, #14]
 8003600:	f7fd fe46 	bl	8001290 <__aeabi_i2f>
 8003604:	1c05      	adds	r5, r0, #0
 8003606:	0020      	movs	r0, r4
 8003608:	f7fd fe94 	bl	8001334 <__aeabi_ui2f>
 800360c:	1c01      	adds	r1, r0, #0
 800360e:	1c28      	adds	r0, r5, #0
 8003610:	f7fd fb30 	bl	8000c74 <__aeabi_fmul>
 8003614:	f7ff fd1e 	bl	8003054 <__aeabi_f2d>
 8003618:	2200      	movs	r2, #0
 800361a:	4b1d      	ldr	r3, [pc, #116]	; (8003690 <INA226_Alert_Limit_DMA+0x114>)
 800361c:	f7fe fe2c 	bl	8002278 <__aeabi_dmul>
 8003620:	22e0      	movs	r2, #224	; 0xe0
 8003622:	4b1c      	ldr	r3, [pc, #112]	; (8003694 <INA226_Alert_Limit_DMA+0x118>)
 8003624:	0612      	lsls	r2, r2, #24
 8003626:	f7fe fe27 	bl	8002278 <__aeabi_dmul>
 800362a:	2200      	movs	r2, #0
 800362c:	4b1a      	ldr	r3, [pc, #104]	; (8003698 <INA226_Alert_Limit_DMA+0x11c>)
		case OVER_LIMIT_POWER   : limite = ((float)limite*1000.0)/ina.power_LSB;break;
 800362e:	f7fe fa29 	bl	8001a84 <__aeabi_ddiv>
 8003632:	e008      	b.n	8003646 <INA226_Alert_Limit_DMA+0xca>
		case BUS_VOLTAGE_UNDER  : limite = ((float)limite*0.8);break;
 8003634:	0020      	movs	r0, r4
 8003636:	f7fd fe7d 	bl	8001334 <__aeabi_ui2f>
 800363a:	f7ff fd0b 	bl	8003054 <__aeabi_f2d>
 800363e:	4a17      	ldr	r2, [pc, #92]	; (800369c <INA226_Alert_Limit_DMA+0x120>)
 8003640:	4b17      	ldr	r3, [pc, #92]	; (80036a0 <INA226_Alert_Limit_DMA+0x124>)
 8003642:	f7fe fe19 	bl	8002278 <__aeabi_dmul>
		case OVER_LIMIT_POWER   : limite = ((float)limite*1000.0)/ina.power_LSB;break;
 8003646:	f7fc ff8d 	bl	8000564 <__aeabi_d2uiz>
 800364a:	b284      	uxth	r4, r0
 800364c:	e7a5      	b.n	800359a <INA226_Alert_Limit_DMA+0x1e>
 800364e:	f7fd fe71 	bl	8001334 <__aeabi_ui2f>
 8003652:	f7ff fcff 	bl	8003054 <__aeabi_f2d>
 8003656:	2200      	movs	r2, #0
 8003658:	4b12      	ldr	r3, [pc, #72]	; (80036a4 <INA226_Alert_Limit_DMA+0x128>)
 800365a:	f7fe fe0d 	bl	8002278 <__aeabi_dmul>
 800365e:	0006      	movs	r6, r0
 8003660:	68a8      	ldr	r0, [r5, #8]
 8003662:	000f      	movs	r7, r1
 8003664:	f7ff fcd0 	bl	8003008 <__aeabi_ui2d>
 8003668:	0002      	movs	r2, r0
 800366a:	000b      	movs	r3, r1
 800366c:	0030      	movs	r0, r6
 800366e:	0039      	movs	r1, r7
 8003670:	e7dd      	b.n	800362e <INA226_Alert_Limit_DMA+0xb2>
 8003672:	46c0      	nop			; (mov r8, r8)
 8003674:	20000210 	.word	0x20000210
 8003678:	00002002 	.word	0x00002002
 800367c:	00000802 	.word	0x00000802
 8003680:	00001002 	.word	0x00001002
 8003684:	20000740 	.word	0x20000740
 8003688:	00004002 	.word	0x00004002
 800368c:	00008002 	.word	0x00008002
 8003690:	40240000 	.word	0x40240000
 8003694:	3ff0288c 	.word	0x3ff0288c
 8003698:	40390000 	.word	0x40390000
 800369c:	9999999a 	.word	0x9999999a
 80036a0:	3fe99999 	.word	0x3fe99999
 80036a4:	408f4000 	.word	0x408f4000

080036a8 <OLED_Write_Command_3bytes>:

	OLED_Clear_DMA();
}

static void OLED_Write_Command_3bytes(uint8_t byte1, uint8_t byte2, uint8_t byte3){
	uint8_t datos[4] = {CMD, byte1, byte2, byte3};
 80036a8:	2300      	movs	r3, #0
static void OLED_Write_Command_3bytes(uint8_t byte1, uint8_t byte2, uint8_t byte3){
 80036aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
	HAL_I2C_Master_Transmit_DMA(&hi2c1, SSD1306_I2C_ADDRESS, (uint8_t*)datos, 4);
 80036ac:	4d08      	ldr	r5, [pc, #32]	; (80036d0 <OLED_Write_Command_3bytes+0x28>)
	uint8_t datos[4] = {CMD, byte1, byte2, byte3};
 80036ae:	ac01      	add	r4, sp, #4
 80036b0:	7023      	strb	r3, [r4, #0]
 80036b2:	7060      	strb	r0, [r4, #1]
 80036b4:	70a1      	strb	r1, [r4, #2]
 80036b6:	70e2      	strb	r2, [r4, #3]
	HAL_I2C_Master_Transmit_DMA(&hi2c1, SSD1306_I2C_ADDRESS, (uint8_t*)datos, 4);
 80036b8:	2178      	movs	r1, #120	; 0x78
 80036ba:	0022      	movs	r2, r4
 80036bc:	0028      	movs	r0, r5
 80036be:	3304      	adds	r3, #4
 80036c0:	f002 fe36 	bl	8006330 <HAL_I2C_Master_Transmit_DMA>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {}
 80036c4:	0028      	movs	r0, r5
 80036c6:	f003 fcbe 	bl	8007046 <HAL_I2C_GetState>
 80036ca:	2820      	cmp	r0, #32
 80036cc:	d1fa      	bne.n	80036c4 <OLED_Write_Command_3bytes+0x1c>
}
 80036ce:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 80036d0:	20000740 	.word	0x20000740

080036d4 <OLED_Draw_8_Pixel>:

	HAL_I2C_Master_Transmit_DMA(&hi2c1, SSD1306_I2C_ADDRESS, (uint8_t*)datos, col_final+2);
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {}
}

static void OLED_Draw_8_Pixel(uint8_t pag_inicio, uint8_t col_inicio, uint8_t pixel_8bits){
 80036d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80036d6:	000c      	movs	r4, r1
 80036d8:	0015      	movs	r5, r2
	OLED_Write_Command_3bytes(SSD1306_PAGEADDR,pag_inicio,pag_inicio);
 80036da:	0001      	movs	r1, r0
 80036dc:	0002      	movs	r2, r0
 80036de:	2022      	movs	r0, #34	; 0x22
 80036e0:	f7ff ffe2 	bl	80036a8 <OLED_Write_Command_3bytes>
	OLED_Write_Command_3bytes(SSD1306_COLUMNADDR,col_inicio,col_inicio);
 80036e4:	0022      	movs	r2, r4
 80036e6:	0021      	movs	r1, r4
 80036e8:	2021      	movs	r0, #33	; 0x21
 80036ea:	f7ff ffdd 	bl	80036a8 <OLED_Write_Command_3bytes>
	uint8_t datos[2] = {DAT, byte1};
 80036ee:	466a      	mov	r2, sp
 80036f0:	2340      	movs	r3, #64	; 0x40
	HAL_I2C_Master_Transmit_DMA(&hi2c1, SSD1306_I2C_ADDRESS, (uint8_t*)datos, 2);
 80036f2:	4c07      	ldr	r4, [pc, #28]	; (8003710 <OLED_Draw_8_Pixel+0x3c>)
	uint8_t datos[2] = {DAT, byte1};
 80036f4:	7113      	strb	r3, [r2, #4]
 80036f6:	7155      	strb	r5, [r2, #5]
	HAL_I2C_Master_Transmit_DMA(&hi2c1, SSD1306_I2C_ADDRESS, (uint8_t*)datos, 2);
 80036f8:	2302      	movs	r3, #2
 80036fa:	2178      	movs	r1, #120	; 0x78
 80036fc:	0020      	movs	r0, r4
 80036fe:	aa01      	add	r2, sp, #4
 8003700:	f002 fe16 	bl	8006330 <HAL_I2C_Master_Transmit_DMA>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {}
 8003704:	0020      	movs	r0, r4
 8003706:	f003 fc9e 	bl	8007046 <HAL_I2C_GetState>
 800370a:	2820      	cmp	r0, #32
 800370c:	d1fa      	bne.n	8003704 <OLED_Draw_8_Pixel+0x30>
	OLED_Write_Data_1byte(pixel_8bits);
}
 800370e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8003710:	20000740 	.word	0x20000740

08003714 <OLED_Draw_Pixel>:
static void OLED_Draw_Pixel(uint8_t pag_inicio, uint8_t pag_final, uint8_t col_inicio, uint16_t col_final, uint8_t pixel){
 8003714:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003716:	001c      	movs	r4, r3
 8003718:	0015      	movs	r5, r2
 800371a:	ab06      	add	r3, sp, #24
	OLED_Write_Command_3bytes(SSD1306_PAGEADDR,pag_inicio,pag_final);
 800371c:	000a      	movs	r2, r1
 800371e:	0001      	movs	r1, r0
 8003720:	2022      	movs	r0, #34	; 0x22
static void OLED_Draw_Pixel(uint8_t pag_inicio, uint8_t pag_final, uint8_t col_inicio, uint16_t col_final, uint8_t pixel){
 8003722:	781e      	ldrb	r6, [r3, #0]
	OLED_Write_Command_3bytes(SSD1306_PAGEADDR,pag_inicio,pag_final);
 8003724:	f7ff ffc0 	bl	80036a8 <OLED_Write_Command_3bytes>
	OLED_Write_Command_3bytes(SSD1306_COLUMNADDR,col_inicio,col_final);
 8003728:	b2e2      	uxtb	r2, r4
 800372a:	0029      	movs	r1, r5
 800372c:	2021      	movs	r0, #33	; 0x21
 800372e:	f7ff ffbb 	bl	80036a8 <OLED_Write_Command_3bytes>
	datos[0] = DAT;
 8003732:	466a      	mov	r2, sp
 8003734:	2340      	movs	r3, #64	; 0x40
	HAL_I2C_Master_Transmit_DMA(&hi2c1, SSD1306_I2C_ADDRESS, (uint8_t*)datos, 2);
 8003736:	4c07      	ldr	r4, [pc, #28]	; (8003754 <OLED_Draw_Pixel+0x40>)
	datos[0] = DAT;
 8003738:	7113      	strb	r3, [r2, #4]
	datos[1] = pixel;
 800373a:	7156      	strb	r6, [r2, #5]
	HAL_I2C_Master_Transmit_DMA(&hi2c1, SSD1306_I2C_ADDRESS, (uint8_t*)datos, 2);
 800373c:	2302      	movs	r3, #2
 800373e:	2178      	movs	r1, #120	; 0x78
 8003740:	0020      	movs	r0, r4
 8003742:	aa01      	add	r2, sp, #4
 8003744:	f002 fdf4 	bl	8006330 <HAL_I2C_Master_Transmit_DMA>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {}
 8003748:	0020      	movs	r0, r4
 800374a:	f003 fc7c 	bl	8007046 <HAL_I2C_GetState>
 800374e:	2820      	cmp	r0, #32
 8003750:	d1fa      	bne.n	8003748 <OLED_Draw_Pixel+0x34>
}
 8003752:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 8003754:	20000740 	.word	0x20000740

08003758 <OLED_Clear_DMA>:
void OLED_Clear_DMA(void){
 8003758:	b5b0      	push	{r4, r5, r7, lr}
	uint8_t datos[col_final+2];
 800375a:	4b12      	ldr	r3, [pc, #72]	; (80037a4 <OLED_Clear_DMA+0x4c>)
void OLED_Clear_DMA(void){
 800375c:	af00      	add	r7, sp, #0
	OLED_Write_Command_3bytes(SSD1306_PAGEADDR,pag_inicio,pag_final);
 800375e:	2207      	movs	r2, #7
	uint8_t datos[col_final+2];
 8003760:	449d      	add	sp, r3
	OLED_Write_Command_3bytes(SSD1306_PAGEADDR,pag_inicio,pag_final);
 8003762:	2100      	movs	r1, #0
 8003764:	2022      	movs	r0, #34	; 0x22
 8003766:	f7ff ff9f 	bl	80036a8 <OLED_Write_Command_3bytes>
	OLED_Write_Command_3bytes(SSD1306_COLUMNADDR,col_inicio,col_final);
 800376a:	22ff      	movs	r2, #255	; 0xff
 800376c:	2100      	movs	r1, #0
 800376e:	2021      	movs	r0, #33	; 0x21
 8003770:	f7ff ff9a 	bl	80036a8 <OLED_Write_Command_3bytes>
	uint8_t datos[col_final+2];
 8003774:	466c      	mov	r4, sp
	datos[0] = DAT;
 8003776:	2340      	movs	r3, #64	; 0x40
		datos[j+1] = pixel;//dato[1], dato[2], dato[3], .... , dato[1023]
 8003778:	2280      	movs	r2, #128	; 0x80
	datos[0] = DAT;
 800377a:	7023      	strb	r3, [r4, #0]
		datos[j+1] = pixel;//dato[1], dato[2], dato[3], .... , dato[1023]
 800377c:	2100      	movs	r1, #0
 800377e:	1c60      	adds	r0, r4, #1
 8003780:	00d2      	lsls	r2, r2, #3
 8003782:	f005 fa5b 	bl	8008c3c <memset>
	HAL_I2C_Master_Transmit_DMA(&hi2c1, SSD1306_I2C_ADDRESS, (uint8_t*)datos, col_final+2);
 8003786:	4c08      	ldr	r4, [pc, #32]	; (80037a8 <OLED_Clear_DMA+0x50>)
 8003788:	466a      	mov	r2, sp
 800378a:	2178      	movs	r1, #120	; 0x78
 800378c:	0020      	movs	r0, r4
 800378e:	4b07      	ldr	r3, [pc, #28]	; (80037ac <OLED_Clear_DMA+0x54>)
 8003790:	f002 fdce 	bl	8006330 <HAL_I2C_Master_Transmit_DMA>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {}
 8003794:	0020      	movs	r0, r4
 8003796:	f003 fc56 	bl	8007046 <HAL_I2C_GetState>
 800379a:	2820      	cmp	r0, #32
 800379c:	d1fa      	bne.n	8003794 <OLED_Clear_DMA+0x3c>
}
 800379e:	46bd      	mov	sp, r7
 80037a0:	bdb0      	pop	{r4, r5, r7, pc}
 80037a2:	46c0      	nop			; (mov r8, r8)
 80037a4:	fffffbf8 	.word	0xfffffbf8
 80037a8:	20000740 	.word	0x20000740
 80037ac:	00000401 	.word	0x00000401

080037b0 <OLED_Init_DMA>:
void OLED_Init_DMA(void){
 80037b0:	b530      	push	{r4, r5, lr}
	datos[0]  = CMD;
 80037b2:	4b11      	ldr	r3, [pc, #68]	; (80037f8 <OLED_Init_DMA+0x48>)
void OLED_Init_DMA(void){
 80037b4:	b089      	sub	sp, #36	; 0x24
	datos[0]  = CMD;
 80037b6:	9301      	str	r3, [sp, #4]
	datos[4]  = SSD1306_SETMULTIPLEX;//0xA8
 80037b8:	4b10      	ldr	r3, [pc, #64]	; (80037fc <OLED_Init_DMA+0x4c>)
	HAL_Delay(100);
 80037ba:	2064      	movs	r0, #100	; 0x64
	datos[4]  = SSD1306_SETMULTIPLEX;//0xA8
 80037bc:	9302      	str	r3, [sp, #8]
	datos[8]  = (SSD1306_SETSTARTLINE | 0x00);  //0x40 ----> empezamos en la linea cero
 80037be:	4b10      	ldr	r3, [pc, #64]	; (8003800 <OLED_Init_DMA+0x50>)
	datos[24] = SSD1306_NORMALDISPLAY;	       //0xA6
 80037c0:	ad01      	add	r5, sp, #4
	datos[8]  = (SSD1306_SETSTARTLINE | 0x00);  //0x40 ----> empezamos en la linea cero
 80037c2:	9303      	str	r3, [sp, #12]
	datos[12] = HORIZONTAL_ADDRESSING_MODE;   //Modo de direccionamiento horizontal
 80037c4:	4b0f      	ldr	r3, [pc, #60]	; (8003804 <OLED_Init_DMA+0x54>)
 80037c6:	9304      	str	r3, [sp, #16]
		case 64: datos[16] = 0x12;break;
 80037c8:	4b0f      	ldr	r3, [pc, #60]	; (8003808 <OLED_Init_DMA+0x58>)
 80037ca:	9305      	str	r3, [sp, #20]
	datos[20] = 0xF1;						   //0xF1
 80037cc:	4b0f      	ldr	r3, [pc, #60]	; (800380c <OLED_Init_DMA+0x5c>)
 80037ce:	9306      	str	r3, [sp, #24]
	datos[24] = SSD1306_NORMALDISPLAY;	       //0xA6
 80037d0:	4b0f      	ldr	r3, [pc, #60]	; (8003810 <OLED_Init_DMA+0x60>)
 80037d2:	832b      	strh	r3, [r5, #24]
	HAL_Delay(100);
 80037d4:	f001 fd68 	bl	80052a8 <HAL_Delay>
	HAL_I2C_Master_Transmit_DMA(&hi2c1, SSD1306_I2C_ADDRESS, (uint8_t*)datos, 26);
 80037d8:	4c0e      	ldr	r4, [pc, #56]	; (8003814 <OLED_Init_DMA+0x64>)
 80037da:	231a      	movs	r3, #26
 80037dc:	002a      	movs	r2, r5
 80037de:	2178      	movs	r1, #120	; 0x78
 80037e0:	0020      	movs	r0, r4
 80037e2:	f002 fda5 	bl	8006330 <HAL_I2C_Master_Transmit_DMA>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {}
 80037e6:	0020      	movs	r0, r4
 80037e8:	f003 fc2d 	bl	8007046 <HAL_I2C_GetState>
 80037ec:	2820      	cmp	r0, #32
 80037ee:	d1fa      	bne.n	80037e6 <OLED_Init_DMA+0x36>
	OLED_Clear_DMA();
 80037f0:	f7ff ffb2 	bl	8003758 <OLED_Clear_DMA>
}
 80037f4:	b009      	add	sp, #36	; 0x24
 80037f6:	bd30      	pop	{r4, r5, pc}
 80037f8:	80d5ae00 	.word	0x80d5ae00
 80037fc:	00d33fa8 	.word	0x00d33fa8
 8003800:	20148d40 	.word	0x20148d40
 8003804:	dac8a100 	.word	0xdac8a100
 8003808:	d9cf8112 	.word	0xd9cf8112
 800380c:	a440dbf1 	.word	0xa440dbf1
 8003810:	ffffafa6 	.word	0xffffafa6
 8003814:	20000740 	.word	0x20000740

08003818 <OLED_Print_Text_DMA>:
		break;
    }
}


void OLED_Print_Text_DMA(uint8_t pag, uint8_t col, uint8_t font_size, char *texto){
 8003818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800381a:	b087      	sub	sp, #28
 800381c:	000f      	movs	r7, r1
 800381e:	9001      	str	r0, [sp, #4]
 8003820:	9300      	str	r3, [sp, #0]

	switch(font_size){
 8003822:	2a02      	cmp	r2, #2
 8003824:	d039      	beq.n	800389a <OLED_Print_Text_DMA+0x82>
 8003826:	2a03      	cmp	r2, #3
 8003828:	d100      	bne.n	800382c <OLED_Print_Text_DMA+0x14>
 800382a:	e073      	b.n	8003914 <OLED_Print_Text_DMA+0xfc>
				pos = letra * FONT_1_WIDTH;  //me ubico en su array correcto multiplicando por 6
 800382c:	2606      	movs	r6, #6
	switch(font_size){
 800382e:	2a01      	cmp	r2, #1
 8003830:	d00f      	beq.n	8003852 <OLED_Print_Text_DMA+0x3a>
					col=col+FONT_3_WIDTH; //aumento la posicion de la columna 9/11
		}
		break;
		///////////////////////////////////////////////////////////////////////////
	}
}
 8003832:	b007      	add	sp, #28
 8003834:	bdf0      	pop	{r4, r5, r6, r7, pc}
				for(int i=col; i<col+FONT_1_WIDTH; i++) {
 8003836:	003d      	movs	r5, r7
	letra = letra-32; //resto menos 32 para tener el codigo ASCCI
 8003838:	3c20      	subs	r4, #32
				pos = letra * FONT_1_WIDTH;  //me ubico en su array correcto multiplicando por 6
 800383a:	b2e4      	uxtb	r4, r4
 800383c:	4374      	muls	r4, r6
					OLED_Print_Letra(pag,col,1,*texto++);
 800383e:	9b00      	ldr	r3, [sp, #0]
 8003840:	3301      	adds	r3, #1
 8003842:	9300      	str	r3, [sp, #0]
				for(int i=col; i<col+FONT_1_WIDTH; i++) {
 8003844:	1da3      	adds	r3, r4, #6
 8003846:	9302      	str	r3, [sp, #8]
 8003848:	9b02      	ldr	r3, [sp, #8]
 800384a:	429c      	cmp	r4, r3
 800384c:	d106      	bne.n	800385c <OLED_Print_Text_DMA+0x44>
					col=col+FONT_1_WIDTH; //aumento la posicion de la columna
 800384e:	3706      	adds	r7, #6
 8003850:	b2ff      	uxtb	r7, r7
				while(*texto != '\0'){
 8003852:	9b00      	ldr	r3, [sp, #0]
 8003854:	781c      	ldrb	r4, [r3, #0]
 8003856:	2c00      	cmp	r4, #0
 8003858:	d1ed      	bne.n	8003836 <OLED_Print_Text_DMA+0x1e>
 800385a:	e7ea      	b.n	8003832 <OLED_Print_Text_DMA+0x1a>
					OLED_Draw_8_Pixel(pag,i,FONT_1[pos]);
 800385c:	4b45      	ldr	r3, [pc, #276]	; (8003974 <OLED_Print_Text_DMA+0x15c>)
 800385e:	b2e9      	uxtb	r1, r5
 8003860:	5d1a      	ldrb	r2, [r3, r4]
 8003862:	9801      	ldr	r0, [sp, #4]
					pos++;
 8003864:	3401      	adds	r4, #1
					OLED_Draw_8_Pixel(pag,i,FONT_1[pos]);
 8003866:	f7ff ff35 	bl	80036d4 <OLED_Draw_8_Pixel>
					pos++;
 800386a:	b2a4      	uxth	r4, r4
				for(int i=col; i<col+FONT_1_WIDTH; i++) {
 800386c:	3501      	adds	r5, #1
 800386e:	e7eb      	b.n	8003848 <OLED_Print_Text_DMA+0x30>
					OLED_Print_Letra(pag,col,2,*texto++);
 8003870:	9b00      	ldr	r3, [sp, #0]
	letra = letra-32; //resto menos 32 para tener el codigo ASCCI
 8003872:	3d20      	subs	r5, #32
					OLED_Print_Letra(pag,col,2,*texto++);
 8003874:	3301      	adds	r3, #1
 8003876:	9300      	str	r3, [sp, #0]
				pos = letra * (FONT_2_WIDTH*2);  //me ubico en su array correcto multiplico por 2 ya que la altura sera de 16pixeles utilizando 8pixles por pagina y en total usara 2 paginas
 8003878:	2312      	movs	r3, #18
 800387a:	b2ed      	uxtb	r5, r5
 800387c:	435d      	muls	r5, r3
				for(int i=col; i<col+FONT_2_WIDTH; i++) {       //9
 800387e:	002b      	movs	r3, r5
 8003880:	003e      	movs	r6, r7
				pos = letra * (FONT_2_WIDTH*2);  //me ubico en su array correcto multiplico por 2 ya que la altura sera de 16pixeles utilizando 8pixles por pagina y en total usara 2 paginas
 8003882:	002c      	movs	r4, r5
 8003884:	3309      	adds	r3, #9
 8003886:	9303      	str	r3, [sp, #12]
				for(int i=col; i<col+FONT_2_WIDTH; i++) {       //9
 8003888:	9702      	str	r7, [sp, #8]
 800388a:	9b03      	ldr	r3, [sp, #12]
 800388c:	42a3      	cmp	r3, r4
 800388e:	d109      	bne.n	80038a4 <OLED_Print_Text_DMA+0x8c>
 8003890:	3512      	adds	r5, #18
				for(int i=col; i<col+FONT_2_WIDTH; i++) {      //9
 8003892:	42a5      	cmp	r5, r4
 8003894:	d113      	bne.n	80038be <OLED_Print_Text_DMA+0xa6>
					col=col+FONT_2_WIDTH; //aumento la posicion de la columna 9/11
 8003896:	3709      	adds	r7, #9
 8003898:	b2ff      	uxtb	r7, r7
				while(*texto != '\0'){
 800389a:	9b00      	ldr	r3, [sp, #0]
 800389c:	781d      	ldrb	r5, [r3, #0]
 800389e:	2d00      	cmp	r5, #0
 80038a0:	d1e6      	bne.n	8003870 <OLED_Print_Text_DMA+0x58>
 80038a2:	e7c6      	b.n	8003832 <OLED_Print_Text_DMA+0x1a>
					OLED_Draw_8_Pixel(pag,i,FONT_2[pos]);
 80038a4:	4b34      	ldr	r3, [pc, #208]	; (8003978 <OLED_Print_Text_DMA+0x160>)
 80038a6:	9801      	ldr	r0, [sp, #4]
 80038a8:	5d1a      	ldrb	r2, [r3, r4]
 80038aa:	466b      	mov	r3, sp
 80038ac:	7a19      	ldrb	r1, [r3, #8]
 80038ae:	f7ff ff11 	bl	80036d4 <OLED_Draw_8_Pixel>
				for(int i=col; i<col+FONT_2_WIDTH; i++) {       //9
 80038b2:	9b02      	ldr	r3, [sp, #8]
					pos++;
 80038b4:	3401      	adds	r4, #1
				for(int i=col; i<col+FONT_2_WIDTH; i++) {       //9
 80038b6:	3301      	adds	r3, #1
					pos++;
 80038b8:	b2a4      	uxth	r4, r4
				for(int i=col; i<col+FONT_2_WIDTH; i++) {       //9
 80038ba:	9302      	str	r3, [sp, #8]
 80038bc:	e7e5      	b.n	800388a <OLED_Print_Text_DMA+0x72>
					OLED_Draw_8_Pixel(pag+1,i,FONT_2[pos]);
 80038be:	4b2e      	ldr	r3, [pc, #184]	; (8003978 <OLED_Print_Text_DMA+0x160>)
 80038c0:	b2f1      	uxtb	r1, r6
 80038c2:	5d1a      	ldrb	r2, [r3, r4]
 80038c4:	9b01      	ldr	r3, [sp, #4]
					pos++;
 80038c6:	3401      	adds	r4, #1
					OLED_Draw_8_Pixel(pag+1,i,FONT_2[pos]);
 80038c8:	1c58      	adds	r0, r3, #1
 80038ca:	b2c0      	uxtb	r0, r0
 80038cc:	f7ff ff02 	bl	80036d4 <OLED_Draw_8_Pixel>
					pos++;
 80038d0:	b2a4      	uxth	r4, r4
				for(int i=col; i<col+FONT_2_WIDTH; i++) {      //9
 80038d2:	3601      	adds	r6, #1
 80038d4:	e7dd      	b.n	8003892 <OLED_Print_Text_DMA+0x7a>
					OLED_Print_Letra(pag,col,3,*texto++);
 80038d6:	9b00      	ldr	r3, [sp, #0]
	letra = letra-32; //resto menos 32 para tener el codigo ASCCI
 80038d8:	3c20      	subs	r4, #32
					OLED_Print_Letra(pag,col,3,*texto++);
 80038da:	3301      	adds	r3, #1
 80038dc:	9300      	str	r3, [sp, #0]
		pos = letra * (FONT_3_WIDTH*3);  //me ubico en su array correcto multiplico por 2 ya que la altura sera de 16pixeles utilizando 8pixles por pagina y en total usara 2 paginas
 80038de:	233c      	movs	r3, #60	; 0x3c
 80038e0:	b2e4      	uxtb	r4, r4
 80038e2:	435c      	muls	r4, r3
		for(int i=col; i<col+FONT_3_WIDTH; i++) {
 80038e4:	003e      	movs	r6, r7
		pos = letra * (FONT_3_WIDTH*3);  //me ubico en su array correcto multiplico por 2 ya que la altura sera de 16pixeles utilizando 8pixles por pagina y en total usara 2 paginas
 80038e6:	0025      	movs	r5, r4
		uint16_t pos2 = (letra * (FONT_3_WIDTH*3))+1;
 80038e8:	1c63      	adds	r3, r4, #1
 80038ea:	9302      	str	r3, [sp, #8]
		uint16_t pos3 = (letra * (FONT_3_WIDTH*3))+2;
 80038ec:	1ca3      	adds	r3, r4, #2
 80038ee:	9303      	str	r3, [sp, #12]
		for(int i=col; i<col+FONT_3_WIDTH; i++) {
 80038f0:	333a      	adds	r3, #58	; 0x3a
 80038f2:	9704      	str	r7, [sp, #16]
 80038f4:	9305      	str	r3, [sp, #20]
 80038f6:	9b05      	ldr	r3, [sp, #20]
 80038f8:	42ab      	cmp	r3, r5
 80038fa:	d110      	bne.n	800391e <OLED_Print_Text_DMA+0x106>
 80038fc:	0026      	movs	r6, r4
		for(int i=col; i<col+FONT_3_WIDTH; i++) {
 80038fe:	003d      	movs	r5, r7
 8003900:	363d      	adds	r6, #61	; 0x3d
 8003902:	9b02      	ldr	r3, [sp, #8]
 8003904:	429e      	cmp	r6, r3
 8003906:	d114      	bne.n	8003932 <OLED_Print_Text_DMA+0x11a>
 8003908:	343e      	adds	r4, #62	; 0x3e
		for(int i=col; i<col+FONT_3_WIDTH; i++) {
 800390a:	9b03      	ldr	r3, [sp, #12]
 800390c:	429c      	cmp	r4, r3
 800390e:	d11f      	bne.n	8003950 <OLED_Print_Text_DMA+0x138>
					col=col+FONT_3_WIDTH; //aumento la posicion de la columna 9/11
 8003910:	3714      	adds	r7, #20
 8003912:	b2ff      	uxtb	r7, r7
				while(*texto != '\0'){
 8003914:	9b00      	ldr	r3, [sp, #0]
 8003916:	781c      	ldrb	r4, [r3, #0]
 8003918:	2c00      	cmp	r4, #0
 800391a:	d1dc      	bne.n	80038d6 <OLED_Print_Text_DMA+0xbe>
 800391c:	e789      	b.n	8003832 <OLED_Print_Text_DMA+0x1a>
			OLED_Draw_8_Pixel(pag,i,FONT_3[pos]);
 800391e:	4b17      	ldr	r3, [pc, #92]	; (800397c <OLED_Print_Text_DMA+0x164>)
 8003920:	b2f1      	uxtb	r1, r6
 8003922:	5d5a      	ldrb	r2, [r3, r5]
 8003924:	9801      	ldr	r0, [sp, #4]
			pos+=3;
 8003926:	3503      	adds	r5, #3
			OLED_Draw_8_Pixel(pag,i,FONT_3[pos]);
 8003928:	f7ff fed4 	bl	80036d4 <OLED_Draw_8_Pixel>
			pos+=3;
 800392c:	b2ad      	uxth	r5, r5
		for(int i=col; i<col+FONT_3_WIDTH; i++) {
 800392e:	3601      	adds	r6, #1
 8003930:	e7e1      	b.n	80038f6 <OLED_Print_Text_DMA+0xde>
			OLED_Draw_8_Pixel(pag+1,i,FONT_3[pos2]);
 8003932:	4b12      	ldr	r3, [pc, #72]	; (800397c <OLED_Print_Text_DMA+0x164>)
 8003934:	9a02      	ldr	r2, [sp, #8]
 8003936:	b2e9      	uxtb	r1, r5
 8003938:	5c9a      	ldrb	r2, [r3, r2]
 800393a:	9b01      	ldr	r3, [sp, #4]
		for(int i=col; i<col+FONT_3_WIDTH; i++) {
 800393c:	3501      	adds	r5, #1
			OLED_Draw_8_Pixel(pag+1,i,FONT_3[pos2]);
 800393e:	1c58      	adds	r0, r3, #1
 8003940:	b2c0      	uxtb	r0, r0
 8003942:	f7ff fec7 	bl	80036d4 <OLED_Draw_8_Pixel>
			pos2+=3;
 8003946:	9b02      	ldr	r3, [sp, #8]
 8003948:	3303      	adds	r3, #3
 800394a:	b29b      	uxth	r3, r3
 800394c:	9302      	str	r3, [sp, #8]
		for(int i=col; i<col+FONT_3_WIDTH; i++) {
 800394e:	e7d8      	b.n	8003902 <OLED_Print_Text_DMA+0xea>
			OLED_Draw_8_Pixel(pag+2,i,FONT_3[pos3]);
 8003950:	4b0a      	ldr	r3, [pc, #40]	; (800397c <OLED_Print_Text_DMA+0x164>)
 8003952:	9a03      	ldr	r2, [sp, #12]
 8003954:	5c9a      	ldrb	r2, [r3, r2]
 8003956:	466b      	mov	r3, sp
 8003958:	7c19      	ldrb	r1, [r3, #16]
 800395a:	9b01      	ldr	r3, [sp, #4]
 800395c:	1c98      	adds	r0, r3, #2
 800395e:	b2c0      	uxtb	r0, r0
 8003960:	f7ff feb8 	bl	80036d4 <OLED_Draw_8_Pixel>
			pos3+=3;
 8003964:	9b03      	ldr	r3, [sp, #12]
 8003966:	3303      	adds	r3, #3
 8003968:	b29b      	uxth	r3, r3
 800396a:	9303      	str	r3, [sp, #12]
		for(int i=col; i<col+FONT_3_WIDTH; i++) {
 800396c:	9b04      	ldr	r3, [sp, #16]
 800396e:	3301      	adds	r3, #1
 8003970:	9304      	str	r3, [sp, #16]
 8003972:	e7ca      	b.n	800390a <OLED_Print_Text_DMA+0xf2>
 8003974:	0800b030 	.word	0x0800b030
 8003978:	0800b258 	.word	0x0800b258
 800397c:	0800b906 	.word	0x0800b906

08003980 <OLED_Imagen_Small_DMA>:
			k++;
		}
	}
}

void OLED_Imagen_Small_DMA(uint8_t pag, uint8_t col, const unsigned char imagen[], uint8_t size_x, uint8_t size_y){
 8003980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003982:	b087      	sub	sp, #28
 8003984:	9305      	str	r3, [sp, #20]
 8003986:	ab0c      	add	r3, sp, #48	; 0x30
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	000d      	movs	r5, r1

	int k=0;

	for(int i=pag;i<pag+size_y/8;i++){
 800398c:	08db      	lsrs	r3, r3, #3
 800398e:	181b      	adds	r3, r3, r0
 8003990:	9303      	str	r3, [sp, #12]
	int k=0;
 8003992:	2300      	movs	r3, #0
	for(int i=pag;i<pag+size_y/8;i++){
 8003994:	0004      	movs	r4, r0
void OLED_Imagen_Small_DMA(uint8_t pag, uint8_t col, const unsigned char imagen[], uint8_t size_x, uint8_t size_y){
 8003996:	9204      	str	r2, [sp, #16]
	int k=0;
 8003998:	9302      	str	r3, [sp, #8]
	for(int i=pag;i<pag+size_y/8;i++){
 800399a:	9b03      	ldr	r3, [sp, #12]
 800399c:	42a3      	cmp	r3, r4
 800399e:	dc01      	bgt.n	80039a4 <OLED_Imagen_Small_DMA+0x24>
		for(int j=col;j<col+size_x;j++){
			OLED_Draw_Pixel(i,i, j,j, imagen[k]);
			k++;
		}
	}
}
 80039a0:	b007      	add	sp, #28
 80039a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for(int j=col;j<col+size_x;j++){
 80039a4:	002e      	movs	r6, r5
 80039a6:	9b04      	ldr	r3, [sp, #16]
 80039a8:	9a02      	ldr	r2, [sp, #8]
 80039aa:	189f      	adds	r7, r3, r2
 80039ac:	9b05      	ldr	r3, [sp, #20]
 80039ae:	195b      	adds	r3, r3, r5
 80039b0:	42b3      	cmp	r3, r6
 80039b2:	dc05      	bgt.n	80039c0 <OLED_Imagen_Small_DMA+0x40>
 80039b4:	9a02      	ldr	r2, [sp, #8]
 80039b6:	1b5b      	subs	r3, r3, r5
 80039b8:	18d3      	adds	r3, r2, r3
 80039ba:	9302      	str	r3, [sp, #8]
	for(int i=pag;i<pag+size_y/8;i++){
 80039bc:	3401      	adds	r4, #1
 80039be:	e7ec      	b.n	800399a <OLED_Imagen_Small_DMA+0x1a>
			OLED_Draw_Pixel(i,i, j,j, imagen[k]);
 80039c0:	7839      	ldrb	r1, [r7, #0]
 80039c2:	b2e0      	uxtb	r0, r4
 80039c4:	b2b3      	uxth	r3, r6
 80039c6:	b2f2      	uxtb	r2, r6
 80039c8:	9100      	str	r1, [sp, #0]
 80039ca:	0001      	movs	r1, r0
 80039cc:	f7ff fea2 	bl	8003714 <OLED_Draw_Pixel>
		for(int j=col;j<col+size_x;j++){
 80039d0:	3601      	adds	r6, #1
 80039d2:	3701      	adds	r7, #1
 80039d4:	e7ea      	b.n	80039ac <OLED_Imagen_Small_DMA+0x2c>
	...

080039d8 <ee_write.part.0>:
#endif
  }
  return true;
}
//##########################################################################################################
bool ee_write(uint32_t startVirtualAddress, uint32_t len, uint8_t *data)
 80039d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039da:	0005      	movs	r5, r0
 80039dc:	0014      	movs	r4, r2
 80039de:	b093      	sub	sp, #76	; 0x4c
 80039e0:	9103      	str	r1, [sp, #12]
      return false;
    }
  }	
#endif
#ifdef FLASH_TYPEPROGRAM_HALFWORD
  for (uint32_t i = 0; i < len ; i+=2)
 80039e2:	002e      	movs	r6, r5
  HAL_FLASH_Unlock();
 80039e4:	f002 f838 	bl	8005a58 <HAL_FLASH_Unlock>
  for (uint32_t i = 0; i < len ; i+=2)
 80039e8:	0027      	movs	r7, r4
 80039ea:	9a03      	ldr	r2, [sp, #12]
 80039ec:	1b73      	subs	r3, r6, r5
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d808      	bhi.n	8003a04 <ee_write.part.0+0x2c>
 80039f2:	002e      	movs	r6, r5
      return false;
    }
  }	
#endif
#ifdef FLASH_TYPEPROGRAM_DOUBLEWORD
  for (uint32_t i = 0; i < len; i += 8)
 80039f4:	9a03      	ldr	r2, [sp, #12]
 80039f6:	1b73      	subs	r3, r6, r5
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d816      	bhi.n	8003a2a <ee_write.part.0+0x52>
      HAL_FLASH_Lock();
      return false;
    }
  }
#endif
  HAL_FLASH_Lock();
 80039fc:	f002 f840 	bl	8005a80 <HAL_FLASH_Lock>
  return true;
 8003a00:	2001      	movs	r0, #1
 8003a02:	e010      	b.n	8003a26 <ee_write.part.0+0x4e>
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, ((i + startVirtualAddress)) + _EE_ADDR_INUSE, (uint64_t)(data[i] | (data[i+1] << 8))) != HAL_OK)
 8003a04:	787a      	ldrb	r2, [r7, #1]
 8003a06:	783b      	ldrb	r3, [r7, #0]
 8003a08:	0212      	lsls	r2, r2, #8
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	4b2d      	ldr	r3, [pc, #180]	; (8003ac4 <ee_write.part.0+0xec>)
 8003a0e:	2001      	movs	r0, #1
 8003a10:	18f1      	adds	r1, r6, r3
 8003a12:	2300      	movs	r3, #0
 8003a14:	f002 f868 	bl	8005ae8 <HAL_FLASH_Program>
 8003a18:	3702      	adds	r7, #2
 8003a1a:	3602      	adds	r6, #2
 8003a1c:	2800      	cmp	r0, #0
 8003a1e:	d0e4      	beq.n	80039ea <ee_write.part.0+0x12>
      HAL_FLASH_Lock();
 8003a20:	f002 f82e 	bl	8005a80 <HAL_FLASH_Lock>
      return false;
 8003a24:	2000      	movs	r0, #0
}
 8003a26:	b013      	add	sp, #76	; 0x4c
 8003a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint64_t data64 = data[i];
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	7823      	ldrb	r3, [r4, #0]
    data64 += data[i + 2] * 0x10000;
 8003a2e:	9207      	str	r2, [sp, #28]
    uint64_t data64 = data[i];
 8003a30:	9300      	str	r3, [sp, #0]
    data64 += data[i + 1] * 0x100;
 8003a32:	7863      	ldrb	r3, [r4, #1]
 8003a34:	9205      	str	r2, [sp, #20]
 8003a36:	021b      	lsls	r3, r3, #8
 8003a38:	9304      	str	r3, [sp, #16]
    data64 += data[i + 2] * 0x10000;
 8003a3a:	78a3      	ldrb	r3, [r4, #2]
    uint64_t data64 = data[i];
 8003a3c:	9201      	str	r2, [sp, #4]
    data64 += data[i + 2] * 0x10000;
 8003a3e:	041b      	lsls	r3, r3, #16
 8003a40:	9306      	str	r3, [sp, #24]
 8003a42:	9806      	ldr	r0, [sp, #24]
 8003a44:	9907      	ldr	r1, [sp, #28]
 8003a46:	9a04      	ldr	r2, [sp, #16]
 8003a48:	9b05      	ldr	r3, [sp, #20]
 8003a4a:	1812      	adds	r2, r2, r0
 8003a4c:	414b      	adcs	r3, r1
 8003a4e:	9800      	ldr	r0, [sp, #0]
 8003a50:	9901      	ldr	r1, [sp, #4]
 8003a52:	1812      	adds	r2, r2, r0
 8003a54:	414b      	adcs	r3, r1
    data64 += data[i + 3] * 0x1000000;
 8003a56:	78e1      	ldrb	r1, [r4, #3]
 8003a58:	0609      	lsls	r1, r1, #24
 8003a5a:	9108      	str	r1, [sp, #32]
 8003a5c:	17c9      	asrs	r1, r1, #31
 8003a5e:	9109      	str	r1, [sp, #36]	; 0x24
 8003a60:	9808      	ldr	r0, [sp, #32]
 8003a62:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003a64:	1812      	adds	r2, r2, r0
 8003a66:	414b      	adcs	r3, r1
    data64 += data[i + 4] * 0x100000000;
 8003a68:	7921      	ldrb	r1, [r4, #4]
 8003a6a:	910b      	str	r1, [sp, #44]	; 0x2c
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	910a      	str	r1, [sp, #40]	; 0x28
 8003a70:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003a72:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003a74:	1812      	adds	r2, r2, r0
 8003a76:	414b      	adcs	r3, r1
    data64 += data[i + 5] * 0x10000000000;
 8003a78:	7961      	ldrb	r1, [r4, #5]
 8003a7a:	0209      	lsls	r1, r1, #8
 8003a7c:	910d      	str	r1, [sp, #52]	; 0x34
 8003a7e:	2100      	movs	r1, #0
 8003a80:	910c      	str	r1, [sp, #48]	; 0x30
 8003a82:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003a84:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003a86:	1812      	adds	r2, r2, r0
 8003a88:	414b      	adcs	r3, r1
    data64 += data[i + 6] * 0x1000000000000;
 8003a8a:	79a1      	ldrb	r1, [r4, #6]
 8003a8c:	0409      	lsls	r1, r1, #16
 8003a8e:	910f      	str	r1, [sp, #60]	; 0x3c
 8003a90:	2100      	movs	r1, #0
 8003a92:	910e      	str	r1, [sp, #56]	; 0x38
 8003a94:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003a96:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003a98:	1812      	adds	r2, r2, r0
 8003a9a:	414b      	adcs	r3, r1
    data64 += data[i + 7] * 0x100000000000000;
 8003a9c:	79e1      	ldrb	r1, [r4, #7]
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, ((i + startVirtualAddress)) + _EE_ADDR_INUSE, data64) != HAL_OK)
 8003a9e:	3408      	adds	r4, #8
    data64 += data[i + 7] * 0x100000000000000;
 8003aa0:	0609      	lsls	r1, r1, #24
 8003aa2:	9111      	str	r1, [sp, #68]	; 0x44
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	9110      	str	r1, [sp, #64]	; 0x40
 8003aa8:	9810      	ldr	r0, [sp, #64]	; 0x40
 8003aaa:	9911      	ldr	r1, [sp, #68]	; 0x44
 8003aac:	1812      	adds	r2, r2, r0
 8003aae:	414b      	adcs	r3, r1
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, ((i + startVirtualAddress)) + _EE_ADDR_INUSE, data64) != HAL_OK)
 8003ab0:	4904      	ldr	r1, [pc, #16]	; (8003ac4 <ee_write.part.0+0xec>)
 8003ab2:	2003      	movs	r0, #3
 8003ab4:	1871      	adds	r1, r6, r1
 8003ab6:	f002 f817 	bl	8005ae8 <HAL_FLASH_Program>
 8003aba:	3608      	adds	r6, #8
 8003abc:	2800      	cmp	r0, #0
 8003abe:	d100      	bne.n	8003ac2 <ee_write.part.0+0xea>
 8003ac0:	e798      	b.n	80039f4 <ee_write.part.0+0x1c>
 8003ac2:	e7ad      	b.n	8003a20 <ee_write.part.0+0x48>
 8003ac4:	0800f000 	.word	0x0800f000

08003ac8 <ee_format>:
{
 8003ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
	flashErase.NbPages = 1;
 8003aca:	2601      	movs	r6, #1
  flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 8003acc:	2700      	movs	r7, #0
{
 8003ace:	b085      	sub	sp, #20
 8003ad0:	0004      	movs	r4, r0
  HAL_FLASH_Unlock();
 8003ad2:	f001 ffc1 	bl	8005a58 <HAL_FLASH_Unlock>
  flashErase.PageAddress = _EE_ADDR_INUSE;
 8003ad6:	4b11      	ldr	r3, [pc, #68]	; (8003b1c <ee_format+0x54>)
  if (HAL_FLASHEx_Erase(&flashErase, &error) == HAL_OK)
 8003ad8:	4669      	mov	r1, sp
 8003ada:	a801      	add	r0, sp, #4
	flashErase.NbPages = 1;
 8003adc:	9603      	str	r6, [sp, #12]
  flashErase.PageAddress = _EE_ADDR_INUSE;
 8003ade:	9302      	str	r3, [sp, #8]
  flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 8003ae0:	9701      	str	r7, [sp, #4]
  if (HAL_FLASHEx_Erase(&flashErase, &error) == HAL_OK)
 8003ae2:	f002 f869 	bl	8005bb8 <HAL_FLASHEx_Erase>
 8003ae6:	0005      	movs	r5, r0
 8003ae8:	42b8      	cmp	r0, r7
 8003aea:	d110      	bne.n	8003b0e <ee_format+0x46>
    HAL_FLASH_Lock();
 8003aec:	f001 ffc8 	bl	8005a80 <HAL_FLASH_Lock>
    if (error != 0xFFFFFFFF)
 8003af0:	9b00      	ldr	r3, [sp, #0]
 8003af2:	3301      	adds	r3, #1
 8003af4:	d10f      	bne.n	8003b16 <ee_format+0x4e>
      if (keepRamData == false)
 8003af6:	42bc      	cmp	r4, r7
 8003af8:	d106      	bne.n	8003b08 <ee_format+0x40>
        memset(ee_ram, 0xFF, _EE_USE_RAM_BYTE);
 8003afa:	2280      	movs	r2, #128	; 0x80
 8003afc:	21ff      	movs	r1, #255	; 0xff
 8003afe:	4808      	ldr	r0, [pc, #32]	; (8003b20 <ee_format+0x58>)
 8003b00:	00d2      	lsls	r2, r2, #3
 8003b02:	f005 f89b 	bl	8008c3c <memset>
 8003b06:	0034      	movs	r4, r6
}
 8003b08:	0020      	movs	r0, r4
 8003b0a:	b005      	add	sp, #20
 8003b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  HAL_FLASH_Lock();
 8003b0e:	f001 ffb7 	bl	8005a80 <HAL_FLASH_Lock>
  return false;
 8003b12:	003c      	movs	r4, r7
 8003b14:	e7f8      	b.n	8003b08 <ee_format+0x40>
      return false;
 8003b16:	002c      	movs	r4, r5
 8003b18:	e7f6      	b.n	8003b08 <ee_format+0x40>
 8003b1a:	46c0      	nop			; (mov r8, r8)
 8003b1c:	0800f000 	.word	0x0800f000
 8003b20:	20000224 	.word	0x20000224

08003b24 <ee_read>:
{
 8003b24:	b530      	push	{r4, r5, lr}
  if ((startVirtualAddress + len) > _EE_SIZE)
 8003b26:	2480      	movs	r4, #128	; 0x80
 8003b28:	1841      	adds	r1, r0, r1
{
 8003b2a:	0003      	movs	r3, r0
  if ((startVirtualAddress + len) > _EE_SIZE)
 8003b2c:	00e4      	lsls	r4, r4, #3
    return false;
 8003b2e:	2000      	movs	r0, #0
  if ((startVirtualAddress + len) > _EE_SIZE)
 8003b30:	42a1      	cmp	r1, r4
 8003b32:	d803      	bhi.n	8003b3c <ee_read+0x18>
      ee_ram[i] = (*(__IO uint8_t*) (i + _EE_ADDR_INUSE));
 8003b34:	4c07      	ldr	r4, [pc, #28]	; (8003b54 <ee_read+0x30>)
  for (uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 8003b36:	4299      	cmp	r1, r3
 8003b38:	d801      	bhi.n	8003b3e <ee_read+0x1a>
  return true;
 8003b3a:	2001      	movs	r0, #1
}
 8003b3c:	bd30      	pop	{r4, r5, pc}
    if (data != NULL)
 8003b3e:	4806      	ldr	r0, [pc, #24]	; (8003b58 <ee_read+0x34>)
 8003b40:	1818      	adds	r0, r3, r0
 8003b42:	2a00      	cmp	r2, #0
 8003b44:	d002      	beq.n	8003b4c <ee_read+0x28>
      *data = (*(__IO uint8_t*) (i + _EE_ADDR_INUSE));
 8003b46:	7805      	ldrb	r5, [r0, #0]
 8003b48:	7015      	strb	r5, [r2, #0]
      data++;
 8003b4a:	3201      	adds	r2, #1
      ee_ram[i] = (*(__IO uint8_t*) (i + _EE_ADDR_INUSE));
 8003b4c:	7800      	ldrb	r0, [r0, #0]
 8003b4e:	54e0      	strb	r0, [r4, r3]
  for (uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 8003b50:	3301      	adds	r3, #1
 8003b52:	e7f0      	b.n	8003b36 <ee_read+0x12>
 8003b54:	20000224 	.word	0x20000224
 8003b58:	0800f000 	.word	0x0800f000

08003b5c <ee_writeToRam>:
//##########################################################################################################
bool ee_writeToRam(uint32_t startVirtualAddress, uint32_t len, uint8_t* data)
{
 8003b5c:	b570      	push	{r4, r5, r6, lr}
 8003b5e:	000c      	movs	r4, r1
 8003b60:	0011      	movs	r1, r2
#if (_EE_USE_RAM_BYTE > 0)
  if ((startVirtualAddress + len) > _EE_USE_RAM_BYTE)
 8003b62:	2280      	movs	r2, #128	; 0x80
 8003b64:	1905      	adds	r5, r0, r4
{
 8003b66:	0003      	movs	r3, r0
  if ((startVirtualAddress + len) > _EE_USE_RAM_BYTE)
 8003b68:	00d2      	lsls	r2, r2, #3
    return false;
 8003b6a:	2000      	movs	r0, #0
  if ((startVirtualAddress + len) > _EE_USE_RAM_BYTE)
 8003b6c:	4295      	cmp	r5, r2
 8003b6e:	d807      	bhi.n	8003b80 <ee_writeToRam+0x24>
    return false;
 8003b70:	1e08      	subs	r0, r1, #0
  if (data == NULL)
 8003b72:	d005      	beq.n	8003b80 <ee_writeToRam+0x24>
    return false;
  memcpy(&ee_ram[startVirtualAddress], data, len);
 8003b74:	4803      	ldr	r0, [pc, #12]	; (8003b84 <ee_writeToRam+0x28>)
 8003b76:	0022      	movs	r2, r4
 8003b78:	1818      	adds	r0, r3, r0
 8003b7a:	f005 f8f1 	bl	8008d60 <memcpy>
  return true;
 8003b7e:	2001      	movs	r0, #1
#else
  return false;
#endif
}
 8003b80:	bd70      	pop	{r4, r5, r6, pc}
 8003b82:	46c0      	nop			; (mov r8, r8)
 8003b84:	20000224 	.word	0x20000224

08003b88 <ee_commit>:
//##########################################################################################################
bool  ee_commit(void)
{
 8003b88:	b510      	push	{r4, lr}
#if (_EE_USE_RAM_BYTE > 0)
  if (ee_format(true) == false)
 8003b8a:	2001      	movs	r0, #1
 8003b8c:	f7ff ff9c 	bl	8003ac8 <ee_format>
 8003b90:	2800      	cmp	r0, #0
 8003b92:	d005      	beq.n	8003ba0 <ee_commit+0x18>
  if (data == NULL)
 8003b94:	2180      	movs	r1, #128	; 0x80
 8003b96:	2000      	movs	r0, #0
 8003b98:	4a02      	ldr	r2, [pc, #8]	; (8003ba4 <ee_commit+0x1c>)
 8003b9a:	00c9      	lsls	r1, r1, #3
 8003b9c:	f7ff ff1c 	bl	80039d8 <ee_write.part.0>
    return false;
  return ee_write(0, _EE_USE_RAM_BYTE, ee_ram);
#else
  return false;
#endif
}
 8003ba0:	bd10      	pop	{r4, pc}
 8003ba2:	46c0      	nop			; (mov r8, r8)
 8003ba4:	20000224 	.word	0x20000224

08003ba8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ba8:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003baa:	2410      	movs	r4, #16
{
 8003bac:	b096      	sub	sp, #88	; 0x58
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003bae:	222c      	movs	r2, #44	; 0x2c
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	a80b      	add	r0, sp, #44	; 0x2c
 8003bb4:	f005 f842 	bl	8008c3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003bb8:	0022      	movs	r2, r4
 8003bba:	2100      	movs	r1, #0
 8003bbc:	a801      	add	r0, sp, #4
 8003bbe:	f005 f83d 	bl	8008c3c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003bc2:	2214      	movs	r2, #20
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	a805      	add	r0, sp, #20
 8003bc8:	f005 f838 	bl	8008c3c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8003bcc:	2312      	movs	r3, #18
 8003bce:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8003bd0:	23a0      	movs	r3, #160	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003bd2:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003bd4:	2602      	movs	r6, #2
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8003bd6:	039b      	lsls	r3, r3, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003bd8:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003bda:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8003bdc:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003bde:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8003be0:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003be2:	9612      	str	r6, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8003be4:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003be6:	f003 fa7d 	bl	80070e4 <HAL_RCC_OscConfig>
 8003bea:	2800      	cmp	r0, #0
 8003bec:	d001      	beq.n	8003bf2 <SystemClock_Config+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003bee:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003bf0:	e7fe      	b.n	8003bf0 <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003bf2:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003bf4:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003bf6:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003bf8:	0029      	movs	r1, r5
 8003bfa:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003bfc:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003bfe:	9602      	str	r6, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003c00:	f003 fc94 	bl	800752c <HAL_RCC_ClockConfig>
 8003c04:	2800      	cmp	r0, #0
 8003c06:	d001      	beq.n	8003c0c <SystemClock_Config+0x64>
 8003c08:	b672      	cpsid	i
  while (1)
 8003c0a:	e7fe      	b.n	8003c0a <SystemClock_Config+0x62>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003c0c:	2320      	movs	r3, #32
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c0e:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003c10:	9305      	str	r3, [sp, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8003c12:	9408      	str	r4, [sp, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c14:	f003 fd0e 	bl	8007634 <HAL_RCCEx_PeriphCLKConfig>
 8003c18:	2800      	cmp	r0, #0
 8003c1a:	d001      	beq.n	8003c20 <SystemClock_Config+0x78>
 8003c1c:	b672      	cpsid	i
  while (1)
 8003c1e:	e7fe      	b.n	8003c1e <SystemClock_Config+0x76>
}
 8003c20:	b016      	add	sp, #88	; 0x58
 8003c22:	bd70      	pop	{r4, r5, r6, pc}

08003c24 <HAL_GPIO_EXTI_Callback>:
	powerSupply=3;
 8003c24:	2203      	movs	r2, #3
 8003c26:	4b01      	ldr	r3, [pc, #4]	; (8003c2c <HAL_GPIO_EXTI_Callback+0x8>)
 8003c28:	701a      	strb	r2, [r3, #0]
}
 8003c2a:	4770      	bx	lr
 8003c2c:	20000904 	.word	0x20000904

08003c30 <HAL_TIM_PeriodElapsedCallback>:
	if (htim->Instance == TIM14) {//Leemos el encoder cada 5ms
 8003c30:	4b0b      	ldr	r3, [pc, #44]	; (8003c60 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003c32:	6802      	ldr	r2, [r0, #0]
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003c34:	b510      	push	{r4, lr}
 8003c36:	0004      	movs	r4, r0
	if (htim->Instance == TIM14) {//Leemos el encoder cada 5ms
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d103      	bne.n	8003c44 <HAL_TIM_PeriodElapsedCallback+0x14>
		VoutMath = Encoder_Run();
 8003c3c:	f7ff faf6 	bl	800322c <Encoder_Run>
 8003c40:	4b08      	ldr	r3, [pc, #32]	; (8003c64 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003c42:	6018      	str	r0, [r3, #0]
	if (htim->Instance == TIM16) {//Mostramos el icono de bateria en el oled cada 1000ms
 8003c44:	6823      	ldr	r3, [r4, #0]
 8003c46:	4a08      	ldr	r2, [pc, #32]	; (8003c68 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d104      	bne.n	8003c56 <HAL_TIM_PeriodElapsedCallback+0x26>
		timerShowIconBattery++;
 8003c4c:	4a07      	ldr	r2, [pc, #28]	; (8003c6c <HAL_TIM_PeriodElapsedCallback+0x3c>)
		timerShowAllData++;
 8003c4e:	8813      	ldrh	r3, [r2, #0]
 8003c50:	3301      	adds	r3, #1
 8003c52:	8013      	strh	r3, [r2, #0]
}
 8003c54:	bd10      	pop	{r4, pc}
	if (htim->Instance == TIM17) {//Mostramos el todos los datos en el oled cada 100ms
 8003c56:	4a06      	ldr	r2, [pc, #24]	; (8003c70 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d1fb      	bne.n	8003c54 <HAL_TIM_PeriodElapsedCallback+0x24>
		timerShowAllData++;
 8003c5c:	4a05      	ldr	r2, [pc, #20]	; (8003c74 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8003c5e:	e7f6      	b.n	8003c4e <HAL_TIM_PeriodElapsedCallback+0x1e>
 8003c60:	40002000 	.word	0x40002000
 8003c64:	20000634 	.word	0x20000634
 8003c68:	40014400 	.word	0x40014400
 8003c6c:	2000090a 	.word	0x2000090a
 8003c70:	40014800 	.word	0x40014800
 8003c74:	20000908 	.word	0x20000908

08003c78 <medirVoltage>:
void medirVoltage(void){
 8003c78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	voltage = INA226_Vbus_DMA();
 8003c7a:	f7ff fba1 	bl	80033c0 <INA226_Vbus_DMA>
 8003c7e:	4d17      	ldr	r5, [pc, #92]	; (8003cdc <medirVoltage+0x64>)
 8003c80:	6028      	str	r0, [r5, #0]
    if(voltage <= 9.9) {
 8003c82:	f7ff f9e7 	bl	8003054 <__aeabi_f2d>
 8003c86:	4a16      	ldr	r2, [pc, #88]	; (8003ce0 <medirVoltage+0x68>)
 8003c88:	4b16      	ldr	r3, [pc, #88]	; (8003ce4 <medirVoltage+0x6c>)
 8003c8a:	0006      	movs	r6, r0
 8003c8c:	000f      	movs	r7, r1
 8003c8e:	f7fc fbf9 	bl	8000484 <__aeabi_dcmple>
 8003c92:	4c15      	ldr	r4, [pc, #84]	; (8003ce8 <medirVoltage+0x70>)
 8003c94:	9001      	str	r0, [sp, #4]
 8003c96:	2800      	cmp	r0, #0
 8003c98:	d015      	beq.n	8003cc6 <medirVoltage+0x4e>
    	OLED_Print_Text_DMA(2,80,3," ");
 8003c9a:	2203      	movs	r2, #3
 8003c9c:	4b13      	ldr	r3, [pc, #76]	; (8003cec <medirVoltage+0x74>)
 8003c9e:	2150      	movs	r1, #80	; 0x50
 8003ca0:	2002      	movs	r0, #2
 8003ca2:	f7ff fdb9 	bl	8003818 <OLED_Print_Text_DMA>
    	sprintf(buff,"%1.1fV ",voltage);
 8003ca6:	6828      	ldr	r0, [r5, #0]
 8003ca8:	f7ff f9d4 	bl	8003054 <__aeabi_f2d>
 8003cac:	0002      	movs	r2, r0
 8003cae:	000b      	movs	r3, r1
 8003cb0:	0020      	movs	r0, r4
 8003cb2:	490f      	ldr	r1, [pc, #60]	; (8003cf0 <medirVoltage+0x78>)
 8003cb4:	f004 ff56 	bl	8008b64 <siprintf>
    	OLED_Print_Text_DMA(2,0,3,buff);
 8003cb8:	0023      	movs	r3, r4
 8003cba:	2203      	movs	r2, #3
 8003cbc:	2100      	movs	r1, #0
    	OLED_Print_Text_DMA(2,0,3,buff);
 8003cbe:	2002      	movs	r0, #2
 8003cc0:	f7ff fdaa 	bl	8003818 <OLED_Print_Text_DMA>
}
 8003cc4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    	sprintf(buff,"%2.1fV",voltage);
 8003cc6:	0032      	movs	r2, r6
 8003cc8:	003b      	movs	r3, r7
 8003cca:	490a      	ldr	r1, [pc, #40]	; (8003cf4 <medirVoltage+0x7c>)
 8003ccc:	0020      	movs	r0, r4
 8003cce:	f004 ff49 	bl	8008b64 <siprintf>
    	OLED_Print_Text_DMA(2,0,3,buff);
 8003cd2:	0023      	movs	r3, r4
 8003cd4:	2203      	movs	r2, #3
 8003cd6:	9901      	ldr	r1, [sp, #4]
 8003cd8:	e7f1      	b.n	8003cbe <medirVoltage+0x46>
 8003cda:	46c0      	nop			; (mov r8, r8)
 8003cdc:	2000090c 	.word	0x2000090c
 8003ce0:	cccccccd 	.word	0xcccccccd
 8003ce4:	4023cccc 	.word	0x4023cccc
 8003ce8:	2000063c 	.word	0x2000063c
 8003cec:	0800d868 	.word	0x0800d868
 8003cf0:	0800cf86 	.word	0x0800cf86
 8003cf4:	0800cf8e 	.word	0x0800cf8e

08003cf8 <medirCorriente>:
void medirCorriente(void){
 8003cf8:	b510      	push	{r4, lr}
	current = INA226_Current_DMA();
 8003cfa:	f7ff fb8d 	bl	8003418 <INA226_Current_DMA>
 8003cfe:	4b0e      	ldr	r3, [pc, #56]	; (8003d38 <medirCorriente+0x40>)
	if(current>=0){
 8003d00:	2100      	movs	r1, #0
	current = INA226_Current_DMA();
 8003d02:	6018      	str	r0, [r3, #0]
 8003d04:	1c04      	adds	r4, r0, #0
	if(current>=0){
 8003d06:	f7fc fc0b 	bl	8000520 <__aeabi_fcmpge>
 8003d0a:	1e01      	subs	r1, r0, #0
 8003d0c:	d010      	beq.n	8003d30 <medirCorriente+0x38>
		sprintf(buff,"%4.0fmA",current);
 8003d0e:	1c20      	adds	r0, r4, #0
 8003d10:	f7ff f9a0 	bl	8003054 <__aeabi_f2d>
 8003d14:	4c09      	ldr	r4, [pc, #36]	; (8003d3c <medirCorriente+0x44>)
 8003d16:	0002      	movs	r2, r0
 8003d18:	000b      	movs	r3, r1
 8003d1a:	0020      	movs	r0, r4
 8003d1c:	4908      	ldr	r1, [pc, #32]	; (8003d40 <medirCorriente+0x48>)
 8003d1e:	f004 ff21 	bl	8008b64 <siprintf>
		OLED_Print_Text_DMA(6,0,2,buff);
 8003d22:	0023      	movs	r3, r4
 8003d24:	2202      	movs	r2, #2
 8003d26:	2100      	movs	r1, #0
		OLED_Print_Text_DMA(6,0,2,"   0mA");
 8003d28:	2006      	movs	r0, #6
 8003d2a:	f7ff fd75 	bl	8003818 <OLED_Print_Text_DMA>
}
 8003d2e:	bd10      	pop	{r4, pc}
		OLED_Print_Text_DMA(6,0,2,"   0mA");
 8003d30:	2202      	movs	r2, #2
 8003d32:	4b04      	ldr	r3, [pc, #16]	; (8003d44 <medirCorriente+0x4c>)
 8003d34:	e7f8      	b.n	8003d28 <medirCorriente+0x30>
 8003d36:	46c0      	nop			; (mov r8, r8)
 8003d38:	20000650 	.word	0x20000650
 8003d3c:	2000063c 	.word	0x2000063c
 8003d40:	0800cf95 	.word	0x0800cf95
 8003d44:	0800cf9d 	.word	0x0800cf9d

08003d48 <medirPotencia>:
void medirPotencia(void){
 8003d48:	b510      	push	{r4, lr}
	power = INA226_Power_DMA();
 8003d4a:	f7ff fbb3 	bl	80034b4 <INA226_Power_DMA>
 8003d4e:	4b0d      	ldr	r3, [pc, #52]	; (8003d84 <medirPotencia+0x3c>)
    if(power>=0){
 8003d50:	2100      	movs	r1, #0
	power = INA226_Power_DMA();
 8003d52:	6018      	str	r0, [r3, #0]
 8003d54:	1c04      	adds	r4, r0, #0
    if(power>=0){
 8003d56:	f7fc fbe3 	bl	8000520 <__aeabi_fcmpge>
	    OLED_Print_Text_DMA(5,96,1,"0.0W ");
 8003d5a:	4b0b      	ldr	r3, [pc, #44]	; (8003d88 <medirPotencia+0x40>)
    if(power>=0){
 8003d5c:	2800      	cmp	r0, #0
 8003d5e:	d00a      	beq.n	8003d76 <medirPotencia+0x2e>
	    sprintf(buff,"%2.1fW ",power);
 8003d60:	1c20      	adds	r0, r4, #0
 8003d62:	f7ff f977 	bl	8003054 <__aeabi_f2d>
 8003d66:	4c09      	ldr	r4, [pc, #36]	; (8003d8c <medirPotencia+0x44>)
 8003d68:	000b      	movs	r3, r1
 8003d6a:	0002      	movs	r2, r0
 8003d6c:	4908      	ldr	r1, [pc, #32]	; (8003d90 <medirPotencia+0x48>)
 8003d6e:	0020      	movs	r0, r4
 8003d70:	f004 fef8 	bl	8008b64 <siprintf>
	    OLED_Print_Text_DMA(5,96,1,buff);
 8003d74:	0023      	movs	r3, r4
	    OLED_Print_Text_DMA(5,96,1,"0.0W ");
 8003d76:	2201      	movs	r2, #1
 8003d78:	2160      	movs	r1, #96	; 0x60
 8003d7a:	2005      	movs	r0, #5
 8003d7c:	f7ff fd4c 	bl	8003818 <OLED_Print_Text_DMA>
}
 8003d80:	bd10      	pop	{r4, pc}
 8003d82:	46c0      	nop			; (mov r8, r8)
 8003d84:	20000900 	.word	0x20000900
 8003d88:	0800cfac 	.word	0x0800cfac
 8003d8c:	2000063c 	.word	0x2000063c
 8003d90:	0800cfa4 	.word	0x0800cfa4

08003d94 <Control_Estabilizar>:
void Control_Estabilizar(void){
 8003d94:	b5f0      	push	{r4, r5, r6, r7, lr}
    HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8003d96:	2100      	movs	r1, #0
void Control_Estabilizar(void){
 8003d98:	b085      	sub	sp, #20
    HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8003d9a:	48c4      	ldr	r0, [pc, #784]	; (80040ac <Control_Estabilizar+0x318>)
 8003d9c:	f001 fcd7 	bl	800574e <HAL_DAC_Start>
    if(VoutMath > voltage){
 8003da0:	4bc3      	ldr	r3, [pc, #780]	; (80040b0 <Control_Estabilizar+0x31c>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	9300      	str	r3, [sp, #0]
 8003da6:	4bc3      	ldr	r3, [pc, #780]	; (80040b4 <Control_Estabilizar+0x320>)
 8003da8:	9800      	ldr	r0, [sp, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	1c19      	adds	r1, r3, #0
 8003dae:	9301      	str	r3, [sp, #4]
 8003db0:	f7fc fbac 	bl	800050c <__aeabi_fcmpgt>
 8003db4:	2800      	cmp	r0, #0
 8003db6:	d029      	beq.n	8003e0c <Control_Estabilizar+0x78>
    	difference = VoutMath - voltage;
 8003db8:	9901      	ldr	r1, [sp, #4]
 8003dba:	9800      	ldr	r0, [sp, #0]
 8003dbc:	f7fd f8a8 	bl	8000f10 <__aeabi_fsub>
 8003dc0:	4bbd      	ldr	r3, [pc, #756]	; (80040b8 <Control_Estabilizar+0x324>)
    		ENCO=ENCO-step;
 8003dc2:	4ebe      	ldr	r6, [pc, #760]	; (80040bc <Control_Estabilizar+0x328>)
    	difference = VoutMath - voltage;
 8003dc4:	6018      	str	r0, [r3, #0]
    	if(difference>=0.001 && difference<=rango){
 8003dc6:	4bbe      	ldr	r3, [pc, #760]	; (80040c0 <Control_Estabilizar+0x32c>)
    	difference = VoutMath - voltage;
 8003dc8:	1c04      	adds	r4, r0, #0
    	if(difference>=0.001 && difference<=rango){
 8003dca:	681f      	ldr	r7, [r3, #0]
 8003dcc:	f7ff f942 	bl	8003054 <__aeabi_f2d>
 8003dd0:	4abc      	ldr	r2, [pc, #752]	; (80040c4 <Control_Estabilizar+0x330>)
 8003dd2:	4bbd      	ldr	r3, [pc, #756]	; (80040c8 <Control_Estabilizar+0x334>)
    		ENCO=ENCO-step;
 8003dd4:	6835      	ldr	r5, [r6, #0]
    	if(difference>=0.001 && difference<=rango){
 8003dd6:	f7fc fb69 	bl	80004ac <__aeabi_dcmpge>
 8003dda:	2800      	cmp	r0, #0
 8003ddc:	d04a      	beq.n	8003e74 <Control_Estabilizar+0xe0>
 8003dde:	1c39      	adds	r1, r7, #0
 8003de0:	1c20      	adds	r0, r4, #0
 8003de2:	f7fc fb89 	bl	80004f8 <__aeabi_fcmple>
 8003de6:	2800      	cmp	r0, #0
 8003de8:	d044      	beq.n	8003e74 <Control_Estabilizar+0xe0>
    		ENCO=ENCO-step;
 8003dea:	4bb8      	ldr	r3, [pc, #736]	; (80040cc <Control_Estabilizar+0x338>)
 8003dec:	6819      	ldr	r1, [r3, #0]
    		ENCO=ENCO-step*4;
 8003dee:	1c28      	adds	r0, r5, #0
 8003df0:	f7fd f88e 	bl	8000f10 <__aeabi_fsub>
 8003df4:	6030      	str	r0, [r6, #0]
    	PWM = encoder+ENCO;
 8003df6:	4bb6      	ldr	r3, [pc, #728]	; (80040d0 <Control_Estabilizar+0x33c>)
 8003df8:	6831      	ldr	r1, [r6, #0]
 8003dfa:	6818      	ldr	r0, [r3, #0]
 8003dfc:	f7fc fbd0 	bl	80005a0 <__aeabi_fadd>
 8003e00:	4bb4      	ldr	r3, [pc, #720]	; (80040d4 <Control_Estabilizar+0x340>)
    	dacDMA[0]=PWM;
 8003e02:	4cb5      	ldr	r4, [pc, #724]	; (80040d8 <Control_Estabilizar+0x344>)
    	PWM = encoder+ENCO;
 8003e04:	6018      	str	r0, [r3, #0]
    	dacDMA[0]=PWM;
 8003e06:	f7fc fb95 	bl	8000534 <__aeabi_f2uiz>
 8003e0a:	6020      	str	r0, [r4, #0]
    if(VoutMath < voltage){
 8003e0c:	9901      	ldr	r1, [sp, #4]
 8003e0e:	9800      	ldr	r0, [sp, #0]
 8003e10:	f7fc fb68 	bl	80004e4 <__aeabi_fcmplt>
 8003e14:	2800      	cmp	r0, #0
 8003e16:	d02b      	beq.n	8003e70 <Control_Estabilizar+0xdc>
    	difference = voltage - VoutMath;
 8003e18:	9900      	ldr	r1, [sp, #0]
 8003e1a:	9801      	ldr	r0, [sp, #4]
 8003e1c:	f7fd f878 	bl	8000f10 <__aeabi_fsub>
 8003e20:	4ba5      	ldr	r3, [pc, #660]	; (80040b8 <Control_Estabilizar+0x324>)
    		ENCO=ENCO+step;
 8003e22:	4da6      	ldr	r5, [pc, #664]	; (80040bc <Control_Estabilizar+0x328>)
    	difference = voltage - VoutMath;
 8003e24:	6018      	str	r0, [r3, #0]
    	if(difference>=0.001 && difference<=rango){
 8003e26:	4ba6      	ldr	r3, [pc, #664]	; (80040c0 <Control_Estabilizar+0x32c>)
    	difference = voltage - VoutMath;
 8003e28:	1c04      	adds	r4, r0, #0
    	if(difference>=0.001 && difference<=rango){
 8003e2a:	681e      	ldr	r6, [r3, #0]
    	if(difference>=0.001 && difference<=rango){
 8003e2c:	f7ff f912 	bl	8003054 <__aeabi_f2d>
 8003e30:	4aa4      	ldr	r2, [pc, #656]	; (80040c4 <Control_Estabilizar+0x330>)
 8003e32:	4ba5      	ldr	r3, [pc, #660]	; (80040c8 <Control_Estabilizar+0x334>)
    		ENCO=ENCO+step;
 8003e34:	682f      	ldr	r7, [r5, #0]
    	if(difference>=0.001 && difference<=rango){
 8003e36:	f7fc fb39 	bl	80004ac <__aeabi_dcmpge>
 8003e3a:	2800      	cmp	r0, #0
 8003e3c:	d100      	bne.n	8003e40 <Control_Estabilizar+0xac>
 8003e3e:	e0a6      	b.n	8003f8e <Control_Estabilizar+0x1fa>
 8003e40:	1c31      	adds	r1, r6, #0
 8003e42:	1c20      	adds	r0, r4, #0
 8003e44:	f7fc fb58 	bl	80004f8 <__aeabi_fcmple>
 8003e48:	2800      	cmp	r0, #0
 8003e4a:	d100      	bne.n	8003e4e <Control_Estabilizar+0xba>
 8003e4c:	e09f      	b.n	8003f8e <Control_Estabilizar+0x1fa>
    		ENCO=ENCO+step;
 8003e4e:	4b9f      	ldr	r3, [pc, #636]	; (80040cc <Control_Estabilizar+0x338>)
 8003e50:	1c39      	adds	r1, r7, #0
 8003e52:	6818      	ldr	r0, [r3, #0]
    		ENCO=ENCO+step*4;
 8003e54:	f7fc fba4 	bl	80005a0 <__aeabi_fadd>
 8003e58:	6028      	str	r0, [r5, #0]
    	PWM = encoder+ENCO;
 8003e5a:	4b9d      	ldr	r3, [pc, #628]	; (80040d0 <Control_Estabilizar+0x33c>)
 8003e5c:	6829      	ldr	r1, [r5, #0]
 8003e5e:	6818      	ldr	r0, [r3, #0]
 8003e60:	f7fc fb9e 	bl	80005a0 <__aeabi_fadd>
 8003e64:	4b9b      	ldr	r3, [pc, #620]	; (80040d4 <Control_Estabilizar+0x340>)
    	dacDMA[0]=PWM;
 8003e66:	4c9c      	ldr	r4, [pc, #624]	; (80040d8 <Control_Estabilizar+0x344>)
    	PWM = encoder+ENCO;
 8003e68:	6018      	str	r0, [r3, #0]
    	dacDMA[0]=PWM;
 8003e6a:	f7fc fb63 	bl	8000534 <__aeabi_f2uiz>
 8003e6e:	6020      	str	r0, [r4, #0]
}
 8003e70:	b005      	add	sp, #20
 8003e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    	}else if(difference>rango && difference<=rango*2){
 8003e74:	1c39      	adds	r1, r7, #0
 8003e76:	1c38      	adds	r0, r7, #0
 8003e78:	f7fc fb92 	bl	80005a0 <__aeabi_fadd>
 8003e7c:	1c39      	adds	r1, r7, #0
 8003e7e:	9002      	str	r0, [sp, #8]
 8003e80:	1c20      	adds	r0, r4, #0
 8003e82:	f7fc fb43 	bl	800050c <__aeabi_fcmpgt>
 8003e86:	2800      	cmp	r0, #0
 8003e88:	d005      	beq.n	8003e96 <Control_Estabilizar+0x102>
 8003e8a:	9902      	ldr	r1, [sp, #8]
 8003e8c:	1c20      	adds	r0, r4, #0
 8003e8e:	f7fc fb33 	bl	80004f8 <__aeabi_fcmple>
 8003e92:	2800      	cmp	r0, #0
 8003e94:	d1a9      	bne.n	8003dea <Control_Estabilizar+0x56>
    	}else if(difference>rango*2 && difference<=rango*3){
 8003e96:	4991      	ldr	r1, [pc, #580]	; (80040dc <Control_Estabilizar+0x348>)
 8003e98:	1c38      	adds	r0, r7, #0
 8003e9a:	f7fc feeb 	bl	8000c74 <__aeabi_fmul>
 8003e9e:	9902      	ldr	r1, [sp, #8]
 8003ea0:	9003      	str	r0, [sp, #12]
 8003ea2:	1c20      	adds	r0, r4, #0
 8003ea4:	f7fc fb32 	bl	800050c <__aeabi_fcmpgt>
 8003ea8:	2800      	cmp	r0, #0
 8003eaa:	d005      	beq.n	8003eb8 <Control_Estabilizar+0x124>
 8003eac:	9903      	ldr	r1, [sp, #12]
 8003eae:	1c20      	adds	r0, r4, #0
 8003eb0:	f7fc fb22 	bl	80004f8 <__aeabi_fcmple>
 8003eb4:	2800      	cmp	r0, #0
 8003eb6:	d198      	bne.n	8003dea <Control_Estabilizar+0x56>
    	}else if(difference>rango*3 && difference<=rango*4){
 8003eb8:	2181      	movs	r1, #129	; 0x81
 8003eba:	1c38      	adds	r0, r7, #0
 8003ebc:	05c9      	lsls	r1, r1, #23
 8003ebe:	f7fc fed9 	bl	8000c74 <__aeabi_fmul>
 8003ec2:	9903      	ldr	r1, [sp, #12]
 8003ec4:	9002      	str	r0, [sp, #8]
 8003ec6:	1c20      	adds	r0, r4, #0
 8003ec8:	f7fc fb20 	bl	800050c <__aeabi_fcmpgt>
 8003ecc:	2800      	cmp	r0, #0
 8003ece:	d006      	beq.n	8003ede <Control_Estabilizar+0x14a>
 8003ed0:	9902      	ldr	r1, [sp, #8]
 8003ed2:	1c20      	adds	r0, r4, #0
 8003ed4:	f7fc fb10 	bl	80004f8 <__aeabi_fcmple>
 8003ed8:	2800      	cmp	r0, #0
 8003eda:	d000      	beq.n	8003ede <Control_Estabilizar+0x14a>
 8003edc:	e785      	b.n	8003dea <Control_Estabilizar+0x56>
    	}else if(difference>rango*4 && difference<=rango*5){
 8003ede:	4980      	ldr	r1, [pc, #512]	; (80040e0 <Control_Estabilizar+0x34c>)
 8003ee0:	1c38      	adds	r0, r7, #0
 8003ee2:	f7fc fec7 	bl	8000c74 <__aeabi_fmul>
 8003ee6:	9902      	ldr	r1, [sp, #8]
 8003ee8:	9003      	str	r0, [sp, #12]
 8003eea:	1c20      	adds	r0, r4, #0
 8003eec:	f7fc fb0e 	bl	800050c <__aeabi_fcmpgt>
 8003ef0:	2800      	cmp	r0, #0
 8003ef2:	d006      	beq.n	8003f02 <Control_Estabilizar+0x16e>
 8003ef4:	9903      	ldr	r1, [sp, #12]
 8003ef6:	1c20      	adds	r0, r4, #0
 8003ef8:	f7fc fafe 	bl	80004f8 <__aeabi_fcmple>
 8003efc:	2800      	cmp	r0, #0
 8003efe:	d000      	beq.n	8003f02 <Control_Estabilizar+0x16e>
 8003f00:	e773      	b.n	8003dea <Control_Estabilizar+0x56>
    	}else if(difference>rango*5 && difference<=rango*6){
 8003f02:	4978      	ldr	r1, [pc, #480]	; (80040e4 <Control_Estabilizar+0x350>)
 8003f04:	1c38      	adds	r0, r7, #0
 8003f06:	f7fc feb5 	bl	8000c74 <__aeabi_fmul>
 8003f0a:	9903      	ldr	r1, [sp, #12]
 8003f0c:	9002      	str	r0, [sp, #8]
 8003f0e:	1c20      	adds	r0, r4, #0
 8003f10:	f7fc fafc 	bl	800050c <__aeabi_fcmpgt>
 8003f14:	2800      	cmp	r0, #0
 8003f16:	d00c      	beq.n	8003f32 <Control_Estabilizar+0x19e>
 8003f18:	9902      	ldr	r1, [sp, #8]
 8003f1a:	1c20      	adds	r0, r4, #0
 8003f1c:	f7fc faec 	bl	80004f8 <__aeabi_fcmple>
 8003f20:	2800      	cmp	r0, #0
 8003f22:	d006      	beq.n	8003f32 <Control_Estabilizar+0x19e>
    		ENCO=ENCO-step*2;
 8003f24:	4b69      	ldr	r3, [pc, #420]	; (80040cc <Control_Estabilizar+0x338>)
 8003f26:	6818      	ldr	r0, [r3, #0]
 8003f28:	1c01      	adds	r1, r0, #0
 8003f2a:	f7fc fb39 	bl	80005a0 <__aeabi_fadd>
    		ENCO=ENCO-step*4;
 8003f2e:	1c01      	adds	r1, r0, #0
 8003f30:	e75d      	b.n	8003dee <Control_Estabilizar+0x5a>
    	}else if(difference>rango*6 && difference<=rango*7){
 8003f32:	496d      	ldr	r1, [pc, #436]	; (80040e8 <Control_Estabilizar+0x354>)
 8003f34:	1c38      	adds	r0, r7, #0
 8003f36:	f7fc fe9d 	bl	8000c74 <__aeabi_fmul>
 8003f3a:	9902      	ldr	r1, [sp, #8]
 8003f3c:	9003      	str	r0, [sp, #12]
 8003f3e:	1c20      	adds	r0, r4, #0
 8003f40:	f7fc fae4 	bl	800050c <__aeabi_fcmpgt>
 8003f44:	2800      	cmp	r0, #0
 8003f46:	d00b      	beq.n	8003f60 <Control_Estabilizar+0x1cc>
 8003f48:	9903      	ldr	r1, [sp, #12]
 8003f4a:	1c20      	adds	r0, r4, #0
 8003f4c:	f7fc fad4 	bl	80004f8 <__aeabi_fcmple>
 8003f50:	2800      	cmp	r0, #0
 8003f52:	d005      	beq.n	8003f60 <Control_Estabilizar+0x1cc>
    		ENCO=ENCO-step*3;
 8003f54:	4b5d      	ldr	r3, [pc, #372]	; (80040cc <Control_Estabilizar+0x338>)
 8003f56:	4961      	ldr	r1, [pc, #388]	; (80040dc <Control_Estabilizar+0x348>)
    		ENCO=ENCO-step*4;
 8003f58:	6818      	ldr	r0, [r3, #0]
 8003f5a:	f7fc fe8b 	bl	8000c74 <__aeabi_fmul>
 8003f5e:	e7e6      	b.n	8003f2e <Control_Estabilizar+0x19a>
    	}else if(difference>rango*7 && difference<=rango*8){
 8003f60:	9903      	ldr	r1, [sp, #12]
 8003f62:	1c20      	adds	r0, r4, #0
 8003f64:	f7fc fad2 	bl	800050c <__aeabi_fcmpgt>
 8003f68:	2800      	cmp	r0, #0
 8003f6a:	d100      	bne.n	8003f6e <Control_Estabilizar+0x1da>
 8003f6c:	e743      	b.n	8003df6 <Control_Estabilizar+0x62>
 8003f6e:	2182      	movs	r1, #130	; 0x82
 8003f70:	1c38      	adds	r0, r7, #0
 8003f72:	05c9      	lsls	r1, r1, #23
 8003f74:	f7fc fe7e 	bl	8000c74 <__aeabi_fmul>
 8003f78:	1c01      	adds	r1, r0, #0
 8003f7a:	1c20      	adds	r0, r4, #0
 8003f7c:	f7fc fabc 	bl	80004f8 <__aeabi_fcmple>
 8003f80:	2800      	cmp	r0, #0
 8003f82:	d100      	bne.n	8003f86 <Control_Estabilizar+0x1f2>
 8003f84:	e737      	b.n	8003df6 <Control_Estabilizar+0x62>
    		ENCO=ENCO-step*4;
 8003f86:	2181      	movs	r1, #129	; 0x81
 8003f88:	4b50      	ldr	r3, [pc, #320]	; (80040cc <Control_Estabilizar+0x338>)
 8003f8a:	05c9      	lsls	r1, r1, #23
 8003f8c:	e7e4      	b.n	8003f58 <Control_Estabilizar+0x1c4>
    	}else if(difference>rango && difference<=rango*2){
 8003f8e:	1c31      	adds	r1, r6, #0
 8003f90:	1c30      	adds	r0, r6, #0
 8003f92:	f7fc fb05 	bl	80005a0 <__aeabi_fadd>
    	}else if(difference>rango && difference<=rango*2){
 8003f96:	1c31      	adds	r1, r6, #0
    	}else if(difference>rango && difference<=rango*2){
 8003f98:	9000      	str	r0, [sp, #0]
    	}else if(difference>rango && difference<=rango*2){
 8003f9a:	1c20      	adds	r0, r4, #0
 8003f9c:	f7fc fab6 	bl	800050c <__aeabi_fcmpgt>
 8003fa0:	2800      	cmp	r0, #0
 8003fa2:	d006      	beq.n	8003fb2 <Control_Estabilizar+0x21e>
 8003fa4:	9900      	ldr	r1, [sp, #0]
 8003fa6:	1c20      	adds	r0, r4, #0
 8003fa8:	f7fc faa6 	bl	80004f8 <__aeabi_fcmple>
 8003fac:	2800      	cmp	r0, #0
 8003fae:	d000      	beq.n	8003fb2 <Control_Estabilizar+0x21e>
 8003fb0:	e74d      	b.n	8003e4e <Control_Estabilizar+0xba>
    	}else if(difference>rango*2 && difference<=rango*3){
 8003fb2:	494a      	ldr	r1, [pc, #296]	; (80040dc <Control_Estabilizar+0x348>)
 8003fb4:	1c30      	adds	r0, r6, #0
 8003fb6:	f7fc fe5d 	bl	8000c74 <__aeabi_fmul>
    	}else if(difference>rango*2 && difference<=rango*3){
 8003fba:	9900      	ldr	r1, [sp, #0]
    	}else if(difference>rango*2 && difference<=rango*3){
 8003fbc:	9001      	str	r0, [sp, #4]
    	}else if(difference>rango*2 && difference<=rango*3){
 8003fbe:	1c20      	adds	r0, r4, #0
 8003fc0:	f7fc faa4 	bl	800050c <__aeabi_fcmpgt>
 8003fc4:	2800      	cmp	r0, #0
 8003fc6:	d006      	beq.n	8003fd6 <Control_Estabilizar+0x242>
 8003fc8:	9901      	ldr	r1, [sp, #4]
 8003fca:	1c20      	adds	r0, r4, #0
 8003fcc:	f7fc fa94 	bl	80004f8 <__aeabi_fcmple>
 8003fd0:	2800      	cmp	r0, #0
 8003fd2:	d000      	beq.n	8003fd6 <Control_Estabilizar+0x242>
 8003fd4:	e73b      	b.n	8003e4e <Control_Estabilizar+0xba>
    	}else if(difference>rango*3 && difference<=rango*4){
 8003fd6:	2181      	movs	r1, #129	; 0x81
 8003fd8:	1c30      	adds	r0, r6, #0
 8003fda:	05c9      	lsls	r1, r1, #23
 8003fdc:	f7fc fe4a 	bl	8000c74 <__aeabi_fmul>
    	}else if(difference>rango*3 && difference<=rango*4){
 8003fe0:	9901      	ldr	r1, [sp, #4]
    	}else if(difference>rango*3 && difference<=rango*4){
 8003fe2:	9000      	str	r0, [sp, #0]
    	}else if(difference>rango*3 && difference<=rango*4){
 8003fe4:	1c20      	adds	r0, r4, #0
 8003fe6:	f7fc fa91 	bl	800050c <__aeabi_fcmpgt>
 8003fea:	2800      	cmp	r0, #0
 8003fec:	d006      	beq.n	8003ffc <Control_Estabilizar+0x268>
 8003fee:	9900      	ldr	r1, [sp, #0]
 8003ff0:	1c20      	adds	r0, r4, #0
 8003ff2:	f7fc fa81 	bl	80004f8 <__aeabi_fcmple>
 8003ff6:	2800      	cmp	r0, #0
 8003ff8:	d000      	beq.n	8003ffc <Control_Estabilizar+0x268>
 8003ffa:	e728      	b.n	8003e4e <Control_Estabilizar+0xba>
    	}else if(difference>rango*4 && difference<=rango*5){
 8003ffc:	4938      	ldr	r1, [pc, #224]	; (80040e0 <Control_Estabilizar+0x34c>)
 8003ffe:	1c30      	adds	r0, r6, #0
 8004000:	f7fc fe38 	bl	8000c74 <__aeabi_fmul>
    	}else if(difference>rango*4 && difference<=rango*5){
 8004004:	9900      	ldr	r1, [sp, #0]
    	}else if(difference>rango*4 && difference<=rango*5){
 8004006:	9001      	str	r0, [sp, #4]
    	}else if(difference>rango*4 && difference<=rango*5){
 8004008:	1c20      	adds	r0, r4, #0
 800400a:	f7fc fa7f 	bl	800050c <__aeabi_fcmpgt>
 800400e:	2800      	cmp	r0, #0
 8004010:	d006      	beq.n	8004020 <Control_Estabilizar+0x28c>
 8004012:	9901      	ldr	r1, [sp, #4]
 8004014:	1c20      	adds	r0, r4, #0
 8004016:	f7fc fa6f 	bl	80004f8 <__aeabi_fcmple>
 800401a:	2800      	cmp	r0, #0
 800401c:	d000      	beq.n	8004020 <Control_Estabilizar+0x28c>
 800401e:	e716      	b.n	8003e4e <Control_Estabilizar+0xba>
    	}else if(difference>rango*5 && difference<=rango*6){
 8004020:	4930      	ldr	r1, [pc, #192]	; (80040e4 <Control_Estabilizar+0x350>)
 8004022:	1c30      	adds	r0, r6, #0
 8004024:	f7fc fe26 	bl	8000c74 <__aeabi_fmul>
    	}else if(difference>rango*5 && difference<=rango*6){
 8004028:	9901      	ldr	r1, [sp, #4]
    	}else if(difference>rango*5 && difference<=rango*6){
 800402a:	9000      	str	r0, [sp, #0]
    	}else if(difference>rango*5 && difference<=rango*6){
 800402c:	1c20      	adds	r0, r4, #0
 800402e:	f7fc fa6d 	bl	800050c <__aeabi_fcmpgt>
 8004032:	2800      	cmp	r0, #0
 8004034:	d00c      	beq.n	8004050 <Control_Estabilizar+0x2bc>
 8004036:	9900      	ldr	r1, [sp, #0]
 8004038:	1c20      	adds	r0, r4, #0
 800403a:	f7fc fa5d 	bl	80004f8 <__aeabi_fcmple>
 800403e:	2800      	cmp	r0, #0
 8004040:	d006      	beq.n	8004050 <Control_Estabilizar+0x2bc>
    		ENCO=ENCO+step*2;
 8004042:	4b22      	ldr	r3, [pc, #136]	; (80040cc <Control_Estabilizar+0x338>)
 8004044:	6818      	ldr	r0, [r3, #0]
 8004046:	1c01      	adds	r1, r0, #0
 8004048:	f7fc faaa 	bl	80005a0 <__aeabi_fadd>
    		ENCO=ENCO+step*4;
 800404c:	1c39      	adds	r1, r7, #0
 800404e:	e701      	b.n	8003e54 <Control_Estabilizar+0xc0>
    	}else if(difference>rango*6 && difference<=rango*7){
 8004050:	4925      	ldr	r1, [pc, #148]	; (80040e8 <Control_Estabilizar+0x354>)
 8004052:	1c30      	adds	r0, r6, #0
 8004054:	f7fc fe0e 	bl	8000c74 <__aeabi_fmul>
    	}else if(difference>rango*6 && difference<=rango*7){
 8004058:	9900      	ldr	r1, [sp, #0]
    	}else if(difference>rango*6 && difference<=rango*7){
 800405a:	9001      	str	r0, [sp, #4]
    	}else if(difference>rango*6 && difference<=rango*7){
 800405c:	1c20      	adds	r0, r4, #0
 800405e:	f7fc fa55 	bl	800050c <__aeabi_fcmpgt>
 8004062:	2800      	cmp	r0, #0
 8004064:	d00b      	beq.n	800407e <Control_Estabilizar+0x2ea>
 8004066:	9901      	ldr	r1, [sp, #4]
 8004068:	1c20      	adds	r0, r4, #0
 800406a:	f7fc fa45 	bl	80004f8 <__aeabi_fcmple>
 800406e:	2800      	cmp	r0, #0
 8004070:	d005      	beq.n	800407e <Control_Estabilizar+0x2ea>
    		ENCO=ENCO+step*3;
 8004072:	4b16      	ldr	r3, [pc, #88]	; (80040cc <Control_Estabilizar+0x338>)
 8004074:	4919      	ldr	r1, [pc, #100]	; (80040dc <Control_Estabilizar+0x348>)
    		ENCO=ENCO+step*4;
 8004076:	6818      	ldr	r0, [r3, #0]
 8004078:	f7fc fdfc 	bl	8000c74 <__aeabi_fmul>
 800407c:	e7e6      	b.n	800404c <Control_Estabilizar+0x2b8>
    	}else if(difference>rango*7 && difference<=rango*8){
 800407e:	9901      	ldr	r1, [sp, #4]
 8004080:	1c20      	adds	r0, r4, #0
 8004082:	f7fc fa43 	bl	800050c <__aeabi_fcmpgt>
 8004086:	2800      	cmp	r0, #0
 8004088:	d100      	bne.n	800408c <Control_Estabilizar+0x2f8>
 800408a:	e6e6      	b.n	8003e5a <Control_Estabilizar+0xc6>
 800408c:	2182      	movs	r1, #130	; 0x82
 800408e:	1c30      	adds	r0, r6, #0
 8004090:	05c9      	lsls	r1, r1, #23
 8004092:	f7fc fdef 	bl	8000c74 <__aeabi_fmul>
 8004096:	1c01      	adds	r1, r0, #0
 8004098:	1c20      	adds	r0, r4, #0
 800409a:	f7fc fa2d 	bl	80004f8 <__aeabi_fcmple>
 800409e:	2800      	cmp	r0, #0
 80040a0:	d100      	bne.n	80040a4 <Control_Estabilizar+0x310>
 80040a2:	e6da      	b.n	8003e5a <Control_Estabilizar+0xc6>
    		ENCO=ENCO+step*4;
 80040a4:	2181      	movs	r1, #129	; 0x81
 80040a6:	4b09      	ldr	r3, [pc, #36]	; (80040cc <Control_Estabilizar+0x338>)
 80040a8:	05c9      	lsls	r1, r1, #23
 80040aa:	e7e4      	b.n	8004076 <Control_Estabilizar+0x2e2>
 80040ac:	200006a4 	.word	0x200006a4
 80040b0:	20000634 	.word	0x20000634
 80040b4:	2000090c 	.word	0x2000090c
 80040b8:	20000658 	.word	0x20000658
 80040bc:	20000624 	.word	0x20000624
 80040c0:	20000014 	.word	0x20000014
 80040c4:	d2f1a9fc 	.word	0xd2f1a9fc
 80040c8:	3f50624d 	.word	0x3f50624d
 80040cc:	20000018 	.word	0x20000018
 80040d0:	2000065c 	.word	0x2000065c
 80040d4:	20000628 	.word	0x20000628
 80040d8:	20000654 	.word	0x20000654
 80040dc:	40400000 	.word	0x40400000
 80040e0:	40a00000 	.word	0x40a00000
 80040e4:	40c00000 	.word	0x40c00000
 80040e8:	40e00000 	.word	0x40e00000

080040ec <PWM_set_Freq_DutyCycle>:
void PWM_set_Freq_DutyCycle(uint16_t freq, uint8_t duty, uint32_t tiempo){
 80040ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80040ee:	4c13      	ldr	r4, [pc, #76]	; (800413c <PWM_set_Freq_DutyCycle+0x50>)
void PWM_set_Freq_DutyCycle(uint16_t freq, uint8_t duty, uint32_t tiempo){
 80040f0:	000d      	movs	r5, r1
 80040f2:	9001      	str	r0, [sp, #4]
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80040f4:	2100      	movs	r1, #0
 80040f6:	0020      	movs	r0, r4
void PWM_set_Freq_DutyCycle(uint16_t freq, uint8_t duty, uint32_t tiempo){
 80040f8:	0016      	movs	r6, r2
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80040fa:	f003 ff39 	bl	8007f70 <HAL_TIM_PWM_Start>
	freq = freqOsc/(freq*prescaler);
 80040fe:	2118      	movs	r1, #24
 8004100:	9b01      	ldr	r3, [sp, #4]
 8004102:	480f      	ldr	r0, [pc, #60]	; (8004140 <PWM_set_Freq_DutyCycle+0x54>)
 8004104:	4359      	muls	r1, r3
 8004106:	f7fc f81b 	bl	8000140 <__udivsi3>
	__HAL_TIM_SET_AUTORELOAD(&htim15,freq);//Si quiero cambiar la frecuencia modifico: __HAL_TIM_SET_AUTORELOAD(&htim15, frecuencia que quiero)
 800410a:	6827      	ldr	r7, [r4, #0]
 800410c:	b280      	uxth	r0, r0
 800410e:	62f8      	str	r0, [r7, #44]	; 0x2c
	valor_CCR = (__HAL_TIM_GET_AUTORELOAD(&htim15)+1)*duty/100;//__HAL_TIM_GET_AUTORELOAD(&htim15): esto es el valor de 10-1 osea 9, por eso le sumo 1 para volver a tener 10, y por 0.5 ya que quiero 50% del duty cycle
 8004110:	6afa      	ldr	r2, [r7, #44]	; 0x2c
	__HAL_TIM_SET_AUTORELOAD(&htim15,freq);//Si quiero cambiar la frecuencia modifico: __HAL_TIM_SET_AUTORELOAD(&htim15, frecuencia que quiero)
 8004112:	60e0      	str	r0, [r4, #12]
	valor_CCR = (__HAL_TIM_GET_AUTORELOAD(&htim15)+1)*duty/100;//__HAL_TIM_GET_AUTORELOAD(&htim15): esto es el valor de 10-1 osea 9, por eso le sumo 1 para volver a tener 10, y por 0.5 ya que quiero 50% del duty cycle
 8004114:	3201      	adds	r2, #1
 8004116:	1c28      	adds	r0, r5, #0
 8004118:	2d64      	cmp	r5, #100	; 0x64
 800411a:	d900      	bls.n	800411e <PWM_set_Freq_DutyCycle+0x32>
 800411c:	2064      	movs	r0, #100	; 0x64
 800411e:	b2c0      	uxtb	r0, r0
 8004120:	4350      	muls	r0, r2
 8004122:	2164      	movs	r1, #100	; 0x64
 8004124:	f7fc f80c 	bl	8000140 <__udivsi3>
 8004128:	b280      	uxth	r0, r0
    __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, valor_CCR);
 800412a:	6378      	str	r0, [r7, #52]	; 0x34
    HAL_Delay(tiempo);
 800412c:	0030      	movs	r0, r6
 800412e:	f001 f8bb 	bl	80052a8 <HAL_Delay>
    HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 8004132:	2100      	movs	r1, #0
 8004134:	0020      	movs	r0, r4
 8004136:	f003 ff69 	bl	800800c <HAL_TIM_PWM_Stop>
}
 800413a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800413c:	200007dc 	.word	0x200007dc
 8004140:	02dc6c00 	.word	0x02dc6c00

08004144 <medirCargaBateria>:
	if(Vbat>9 && Vbat<=9.9){
 8004144:	4b2f      	ldr	r3, [pc, #188]	; (8004204 <medirCargaBateria+0xc0>)
void medirCargaBateria(void){
 8004146:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if(Vbat>9 && Vbat<=9.9){
 8004148:	681e      	ldr	r6, [r3, #0]
 800414a:	1c30      	adds	r0, r6, #0
 800414c:	f7fe ff82 	bl	8003054 <__aeabi_f2d>
 8004150:	0004      	movs	r4, r0
 8004152:	000d      	movs	r5, r1
 8004154:	1c30      	adds	r0, r6, #0
 8004156:	492c      	ldr	r1, [pc, #176]	; (8004208 <medirCargaBateria+0xc4>)
 8004158:	f7fc f9d8 	bl	800050c <__aeabi_fcmpgt>
 800415c:	2800      	cmp	r0, #0
 800415e:	d008      	beq.n	8004172 <medirCargaBateria+0x2e>
 8004160:	4a2a      	ldr	r2, [pc, #168]	; (800420c <medirCargaBateria+0xc8>)
 8004162:	0020      	movs	r0, r4
 8004164:	0029      	movs	r1, r5
 8004166:	4b2a      	ldr	r3, [pc, #168]	; (8004210 <medirCargaBateria+0xcc>)
 8004168:	f7fc f98c 	bl	8000484 <__aeabi_dcmple>
		OLED_Imagen_Small_DMA(0, 96, bateria0, 32, 16);
 800416c:	4a29      	ldr	r2, [pc, #164]	; (8004214 <medirCargaBateria+0xd0>)
	if(Vbat>9 && Vbat<=9.9){
 800416e:	2800      	cmp	r0, #0
 8004170:	d13f      	bne.n	80041f2 <medirCargaBateria+0xae>
	}else if(Vbat>9.9 && Vbat<=10.5){
 8004172:	0020      	movs	r0, r4
 8004174:	0029      	movs	r1, r5
 8004176:	4a25      	ldr	r2, [pc, #148]	; (800420c <medirCargaBateria+0xc8>)
 8004178:	4b25      	ldr	r3, [pc, #148]	; (8004210 <medirCargaBateria+0xcc>)
 800417a:	f7fc f98d 	bl	8000498 <__aeabi_dcmpgt>
 800417e:	2800      	cmp	r0, #0
 8004180:	d006      	beq.n	8004190 <medirCargaBateria+0x4c>
 8004182:	4925      	ldr	r1, [pc, #148]	; (8004218 <medirCargaBateria+0xd4>)
 8004184:	1c30      	adds	r0, r6, #0
 8004186:	f7fc f9b7 	bl	80004f8 <__aeabi_fcmple>
		OLED_Imagen_Small_DMA(0, 96, bateria25, 32, 16);
 800418a:	4a24      	ldr	r2, [pc, #144]	; (800421c <medirCargaBateria+0xd8>)
	}else if(Vbat>9.9 && Vbat<=10.5){
 800418c:	2800      	cmp	r0, #0
 800418e:	d130      	bne.n	80041f2 <medirCargaBateria+0xae>
	}else if(Vbat>10.5 && Vbat<=11.1){
 8004190:	4921      	ldr	r1, [pc, #132]	; (8004218 <medirCargaBateria+0xd4>)
 8004192:	1c30      	adds	r0, r6, #0
 8004194:	f7fc f9ba 	bl	800050c <__aeabi_fcmpgt>
 8004198:	2800      	cmp	r0, #0
 800419a:	d008      	beq.n	80041ae <medirCargaBateria+0x6a>
 800419c:	4a20      	ldr	r2, [pc, #128]	; (8004220 <medirCargaBateria+0xdc>)
 800419e:	0020      	movs	r0, r4
 80041a0:	0029      	movs	r1, r5
 80041a2:	4b20      	ldr	r3, [pc, #128]	; (8004224 <medirCargaBateria+0xe0>)
 80041a4:	f7fc f96e 	bl	8000484 <__aeabi_dcmple>
		OLED_Imagen_Small_DMA(0, 96, bateria50, 32, 16);
 80041a8:	4a1f      	ldr	r2, [pc, #124]	; (8004228 <medirCargaBateria+0xe4>)
	}else if(Vbat>10.5 && Vbat<=11.1){
 80041aa:	2800      	cmp	r0, #0
 80041ac:	d121      	bne.n	80041f2 <medirCargaBateria+0xae>
	}else if(Vbat>11.1 && Vbat<=11.7){
 80041ae:	0020      	movs	r0, r4
 80041b0:	0029      	movs	r1, r5
 80041b2:	4a1b      	ldr	r2, [pc, #108]	; (8004220 <medirCargaBateria+0xdc>)
 80041b4:	4b1b      	ldr	r3, [pc, #108]	; (8004224 <medirCargaBateria+0xe0>)
 80041b6:	f7fc f96f 	bl	8000498 <__aeabi_dcmpgt>
 80041ba:	2800      	cmp	r0, #0
 80041bc:	d008      	beq.n	80041d0 <medirCargaBateria+0x8c>
 80041be:	4a1b      	ldr	r2, [pc, #108]	; (800422c <medirCargaBateria+0xe8>)
 80041c0:	0020      	movs	r0, r4
 80041c2:	0029      	movs	r1, r5
 80041c4:	4b1a      	ldr	r3, [pc, #104]	; (8004230 <medirCargaBateria+0xec>)
 80041c6:	f7fc f95d 	bl	8000484 <__aeabi_dcmple>
		OLED_Imagen_Small_DMA(0, 96, bateria75, 32, 16);
 80041ca:	4a1a      	ldr	r2, [pc, #104]	; (8004234 <medirCargaBateria+0xf0>)
	}else if(Vbat>11.1 && Vbat<=11.7){
 80041cc:	2800      	cmp	r0, #0
 80041ce:	d110      	bne.n	80041f2 <medirCargaBateria+0xae>
	}else if(Vbat>11.7 && Vbat<=12.6){
 80041d0:	0020      	movs	r0, r4
 80041d2:	0029      	movs	r1, r5
 80041d4:	4a15      	ldr	r2, [pc, #84]	; (800422c <medirCargaBateria+0xe8>)
 80041d6:	4b16      	ldr	r3, [pc, #88]	; (8004230 <medirCargaBateria+0xec>)
 80041d8:	f7fc f95e 	bl	8000498 <__aeabi_dcmpgt>
 80041dc:	2800      	cmp	r0, #0
 80041de:	d00f      	beq.n	8004200 <medirCargaBateria+0xbc>
 80041e0:	0020      	movs	r0, r4
 80041e2:	0029      	movs	r1, r5
 80041e4:	4a0e      	ldr	r2, [pc, #56]	; (8004220 <medirCargaBateria+0xdc>)
 80041e6:	4b14      	ldr	r3, [pc, #80]	; (8004238 <medirCargaBateria+0xf4>)
 80041e8:	f7fc f94c 	bl	8000484 <__aeabi_dcmple>
 80041ec:	2800      	cmp	r0, #0
 80041ee:	d007      	beq.n	8004200 <medirCargaBateria+0xbc>
		OLED_Imagen_Small_DMA(0, 96, bateria100, 32, 16);
 80041f0:	4a12      	ldr	r2, [pc, #72]	; (800423c <medirCargaBateria+0xf8>)
 80041f2:	2310      	movs	r3, #16
 80041f4:	2160      	movs	r1, #96	; 0x60
 80041f6:	9300      	str	r3, [sp, #0]
 80041f8:	2000      	movs	r0, #0
 80041fa:	18db      	adds	r3, r3, r3
 80041fc:	f7ff fbc0 	bl	8003980 <OLED_Imagen_Small_DMA>
}
 8004200:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 8004202:	46c0      	nop			; (mov r8, r8)
 8004204:	2000062c 	.word	0x2000062c
 8004208:	41100000 	.word	0x41100000
 800420c:	cccccccd 	.word	0xcccccccd
 8004210:	4023cccc 	.word	0x4023cccc
 8004214:	0800d45e 	.word	0x0800d45e
 8004218:	41280000 	.word	0x41280000
 800421c:	0800d4de 	.word	0x0800d4de
 8004220:	33333333 	.word	0x33333333
 8004224:	40263333 	.word	0x40263333
 8004228:	0800d51e 	.word	0x0800d51e
 800422c:	66666666 	.word	0x66666666
 8004230:	40276666 	.word	0x40276666
 8004234:	0800d55e 	.word	0x0800d55e
 8004238:	40293333 	.word	0x40293333
 800423c:	0800d49e 	.word	0x0800d49e

08004240 <main>:
{
 8004240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004242:	b0a5      	sub	sp, #148	; 0x94
  HAL_Init();
 8004244:	f001 f80e 	bl	8005264 <HAL_Init>
  SystemClock_Config();
 8004248:	f7ff fcae 	bl	8003ba8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800424c:	2214      	movs	r2, #20
 800424e:	2100      	movs	r1, #0
 8004250:	a81c      	add	r0, sp, #112	; 0x70
 8004252:	f004 fcf3 	bl	8008c3c <memset>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004256:	2280      	movs	r2, #128	; 0x80
 8004258:	4dd2      	ldr	r5, [pc, #840]	; (80045a4 <main+0x364>)
 800425a:	03d2      	lsls	r2, r2, #15
 800425c:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(EN_XL6019_GPIO_Port, EN_XL6019_Pin, GPIO_PIN_RESET);
 800425e:	2680      	movs	r6, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004260:	4313      	orrs	r3, r2
 8004262:	616b      	str	r3, [r5, #20]
 8004264:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(EN_XL6019_GPIO_Port, EN_XL6019_Pin, GPIO_PIN_RESET);
 8004266:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004268:	4013      	ands	r3, r2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800426a:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800426c:	930c      	str	r3, [sp, #48]	; 0x30
 800426e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004270:	696b      	ldr	r3, [r5, #20]
 8004272:	0292      	lsls	r2, r2, #10
 8004274:	4313      	orrs	r3, r2
 8004276:	616b      	str	r3, [r5, #20]
 8004278:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(EN_XL6019_GPIO_Port, EN_XL6019_Pin, GPIO_PIN_RESET);
 800427a:	0076      	lsls	r6, r6, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800427c:	4013      	ands	r3, r2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800427e:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004280:	930d      	str	r3, [sp, #52]	; 0x34
 8004282:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004284:	696b      	ldr	r3, [r5, #20]
 8004286:	02d2      	lsls	r2, r2, #11
 8004288:	4313      	orrs	r3, r2
 800428a:	616b      	str	r3, [r5, #20]
 800428c:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(EN_XL6019_GPIO_Port, EN_XL6019_Pin, GPIO_PIN_RESET);
 800428e:	0031      	movs	r1, r6
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004290:	4013      	ands	r3, r2
 8004292:	930e      	str	r3, [sp, #56]	; 0x38
  HAL_GPIO_WritePin(EN_XL6019_GPIO_Port, EN_XL6019_Pin, GPIO_PIN_RESET);
 8004294:	2200      	movs	r2, #0
 8004296:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004298:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  HAL_GPIO_WritePin(EN_XL6019_GPIO_Port, EN_XL6019_Pin, GPIO_PIN_RESET);
 800429a:	f001 fd95 	bl	8005dc8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800429e:	2200      	movs	r2, #0
 80042a0:	21c0      	movs	r1, #192	; 0xc0
 80042a2:	48c1      	ldr	r0, [pc, #772]	; (80045a8 <main+0x368>)
 80042a4:	f001 fd90 	bl	8005dc8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = stateCharger_Pin;
 80042a8:	2380      	movs	r3, #128	; 0x80
 80042aa:	00db      	lsls	r3, r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042ac:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = stateCharger_Pin;
 80042ae:	931c      	str	r3, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80042b0:	2302      	movs	r3, #2
  HAL_GPIO_Init(stateCharger_GPIO_Port, &GPIO_InitStruct);
 80042b2:	48be      	ldr	r0, [pc, #760]	; (80045ac <main+0x36c>)
 80042b4:	a91c      	add	r1, sp, #112	; 0x70
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80042b6:	931e      	str	r3, [sp, #120]	; 0x78
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042b8:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(stateCharger_GPIO_Port, &GPIO_InitStruct);
 80042ba:	f001 fcc7 	bl	8005c4c <HAL_GPIO_Init>
  HAL_GPIO_Init(EN_XL6019_GPIO_Port, &GPIO_InitStruct);
 80042be:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = EN_XL6019_Pin;
 80042c0:	961c      	str	r6, [sp, #112]	; 0x70
  HAL_GPIO_Init(EN_XL6019_GPIO_Port, &GPIO_InitStruct);
 80042c2:	a91c      	add	r1, sp, #112	; 0x70
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042c4:	3eff      	subs	r6, #255	; 0xff
  HAL_GPIO_Init(EN_XL6019_GPIO_Port, &GPIO_InitStruct);
 80042c6:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042c8:	961d      	str	r6, [sp, #116]	; 0x74
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ca:	941e      	str	r4, [sp, #120]	; 0x78
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042cc:	941f      	str	r4, [sp, #124]	; 0x7c
  HAL_GPIO_Init(EN_XL6019_GPIO_Port, &GPIO_InitStruct);
 80042ce:	f001 fcbd 	bl	8005c4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 80042d2:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042d4:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 80042d6:	00db      	lsls	r3, r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042d8:	a91c      	add	r1, sp, #112	; 0x70
 80042da:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 80042dc:	931c      	str	r3, [sp, #112]	; 0x70
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042de:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80042e0:	961e      	str	r6, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042e2:	f001 fcb3 	bl	8005c4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80042e6:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80042e8:	48af      	ldr	r0, [pc, #700]	; (80045a8 <main+0x368>)
 80042ea:	a91c      	add	r1, sp, #112	; 0x70
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80042ec:	931c      	str	r3, [sp, #112]	; 0x70
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042ee:	961d      	str	r6, [sp, #116]	; 0x74
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f0:	941e      	str	r4, [sp, #120]	; 0x78
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042f2:	941f      	str	r4, [sp, #124]	; 0x7c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80042f4:	f001 fcaa 	bl	8005c4c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80042f8:	2388      	movs	r3, #136	; 0x88
 80042fa:	035b      	lsls	r3, r3, #13
 80042fc:	931d      	str	r3, [sp, #116]	; 0x74
  GPIO_InitStruct.Pin = INT_OVER_CURRENT_Pin;
 80042fe:	2710      	movs	r7, #16
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004300:	2302      	movs	r3, #2
  HAL_GPIO_Init(INT_OVER_CURRENT_GPIO_Port, &GPIO_InitStruct);
 8004302:	48aa      	ldr	r0, [pc, #680]	; (80045ac <main+0x36c>)
 8004304:	a91c      	add	r1, sp, #112	; 0x70
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004306:	931e      	str	r3, [sp, #120]	; 0x78
  GPIO_InitStruct.Pin = INT_OVER_CURRENT_Pin;
 8004308:	971c      	str	r7, [sp, #112]	; 0x70
  HAL_GPIO_Init(INT_OVER_CURRENT_GPIO_Port, &GPIO_InitStruct);
 800430a:	f001 fc9f 	bl	8005c4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CLK_Pin|DT_Pin|SW_Pin;
 800430e:	23e0      	movs	r3, #224	; 0xe0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004310:	48a6      	ldr	r0, [pc, #664]	; (80045ac <main+0x36c>)
 8004312:	a91c      	add	r1, sp, #112	; 0x70
  GPIO_InitStruct.Pin = CLK_Pin|DT_Pin|SW_Pin;
 8004314:	931c      	str	r3, [sp, #112]	; 0x70
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004316:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004318:	961e      	str	r6, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800431a:	f001 fc97 	bl	8005c4c <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800431e:	0022      	movs	r2, r4
 8004320:	0021      	movs	r1, r4
 8004322:	2007      	movs	r0, #7
 8004324:	f001 f97a 	bl	800561c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8004328:	2007      	movs	r0, #7
 800432a:	f001 f9a1 	bl	8005670 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800432e:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8004330:	0021      	movs	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004332:	4333      	orrs	r3, r6
 8004334:	616b      	str	r3, [r5, #20]
 8004336:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8004338:	0022      	movs	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 800433a:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800433c:	200a      	movs	r0, #10
  __HAL_RCC_DMA1_CLK_ENABLE();
 800433e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004340:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8004342:	f001 f96b 	bl	800561c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8004346:	200a      	movs	r0, #10
 8004348:	f001 f992 	bl	8005670 <HAL_NVIC_EnableIRQ>
  hi2c1.Instance = I2C1;
 800434c:	4d98      	ldr	r5, [pc, #608]	; (80045b0 <main+0x370>)
 800434e:	4b99      	ldr	r3, [pc, #612]	; (80045b4 <main+0x374>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004350:	0028      	movs	r0, r5
  hi2c1.Instance = I2C1;
 8004352:	602b      	str	r3, [r5, #0]
  hi2c1.Init.Timing = 0x20000209;
 8004354:	4b98      	ldr	r3, [pc, #608]	; (80045b8 <main+0x378>)
  hi2c1.Init.OwnAddress1 = 0;
 8004356:	60ac      	str	r4, [r5, #8]
  hi2c1.Init.Timing = 0x20000209;
 8004358:	606b      	str	r3, [r5, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800435a:	60ee      	str	r6, [r5, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800435c:	612c      	str	r4, [r5, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800435e:	616c      	str	r4, [r5, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004360:	61ac      	str	r4, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004362:	61ec      	str	r4, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004364:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004366:	f001 fefb 	bl	8006160 <HAL_I2C_Init>
 800436a:	0001      	movs	r1, r0
 800436c:	42a0      	cmp	r0, r4
 800436e:	d001      	beq.n	8004374 <main+0x134>
 8004370:	b672      	cpsid	i
  while (1)
 8004372:	e7fe      	b.n	8004372 <main+0x132>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004374:	0028      	movs	r0, r5
 8004376:	f002 fe6b 	bl	8007050 <HAL_I2CEx_ConfigAnalogFilter>
 800437a:	1e01      	subs	r1, r0, #0
 800437c:	d001      	beq.n	8004382 <main+0x142>
 800437e:	b672      	cpsid	i
  while (1)
 8004380:	e7fe      	b.n	8004380 <main+0x140>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004382:	0028      	movs	r0, r5
 8004384:	f002 fe8a 	bl	800709c <HAL_I2CEx_ConfigDigitalFilter>
 8004388:	1e01      	subs	r1, r0, #0
 800438a:	d001      	beq.n	8004390 <main+0x150>
 800438c:	b672      	cpsid	i
  while (1)
 800438e:	e7fe      	b.n	800438e <main+0x14e>
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(I2C_FASTMODEPLUS_I2C1);
 8004390:	4a8a      	ldr	r2, [pc, #552]	; (80045bc <main+0x37c>)
 8004392:	4b8b      	ldr	r3, [pc, #556]	; (80045c0 <main+0x380>)
 8004394:	6810      	ldr	r0, [r2, #0]
 8004396:	4303      	orrs	r3, r0
 8004398:	6013      	str	r3, [r2, #0]
  DAC_ChannelConfTypeDef sConfig = {0};
 800439a:	a81c      	add	r0, sp, #112	; 0x70
 800439c:	2208      	movs	r2, #8
 800439e:	f004 fc4d 	bl	8008c3c <memset>
  hdac1.Instance = DAC;
 80043a2:	4b88      	ldr	r3, [pc, #544]	; (80045c4 <main+0x384>)
 80043a4:	9306      	str	r3, [sp, #24]
 80043a6:	9a06      	ldr	r2, [sp, #24]
 80043a8:	4b87      	ldr	r3, [pc, #540]	; (80045c8 <main+0x388>)
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80043aa:	0010      	movs	r0, r2
  hdac1.Instance = DAC;
 80043ac:	6013      	str	r3, [r2, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80043ae:	f001 f985 	bl	80056bc <HAL_DAC_Init>
 80043b2:	1e02      	subs	r2, r0, #0
 80043b4:	d001      	beq.n	80043ba <main+0x17a>
 80043b6:	b672      	cpsid	i
  while (1)
 80043b8:	e7fe      	b.n	80043b8 <main+0x178>
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80043ba:	2304      	movs	r3, #4
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80043bc:	901d      	str	r0, [sp, #116]	; 0x74
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80043be:	a91c      	add	r1, sp, #112	; 0x70
 80043c0:	9806      	ldr	r0, [sp, #24]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80043c2:	931c      	str	r3, [sp, #112]	; 0x70
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80043c4:	f001 f9ab 	bl	800571e <HAL_DAC_ConfigChannel>
 80043c8:	1e05      	subs	r5, r0, #0
 80043ca:	d001      	beq.n	80043d0 <main+0x190>
 80043cc:	b672      	cpsid	i
  while (1)
 80043ce:	e7fe      	b.n	80043ce <main+0x18e>
  ADC_ChannelConfTypeDef sConfig = {0};
 80043d0:	0001      	movs	r1, r0
 80043d2:	220c      	movs	r2, #12
 80043d4:	a81c      	add	r0, sp, #112	; 0x70
 80043d6:	f004 fc31 	bl	8008c3c <memset>
  hadc.Instance = ADC1;
 80043da:	4c7c      	ldr	r4, [pc, #496]	; (80045cc <main+0x38c>)
 80043dc:	4b7c      	ldr	r3, [pc, #496]	; (80045d0 <main+0x390>)
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80043de:	0020      	movs	r0, r4
  hadc.Instance = ADC1;
 80043e0:	6023      	str	r3, [r4, #0]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80043e2:	2304      	movs	r3, #4
 80043e4:	6163      	str	r3, [r4, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80043e6:	2380      	movs	r3, #128	; 0x80
 80043e8:	025b      	lsls	r3, r3, #9
 80043ea:	61a3      	str	r3, [r4, #24]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80043ec:	23c2      	movs	r3, #194	; 0xc2
 80043ee:	33ff      	adds	r3, #255	; 0xff
 80043f0:	61e3      	str	r3, [r4, #28]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80043f2:	1d63      	adds	r3, r4, #5
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80043f4:	6065      	str	r5, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_8B;
 80043f6:	60a7      	str	r7, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80043f8:	60e5      	str	r5, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80043fa:	6126      	str	r6, [r4, #16]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80043fc:	6225      	str	r5, [r4, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80043fe:	77dd      	strb	r5, [r3, #31]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004400:	62a6      	str	r6, [r4, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8004402:	f000 ffb3 	bl	800536c <HAL_ADC_Init>
 8004406:	2800      	cmp	r0, #0
 8004408:	d001      	beq.n	800440e <main+0x1ce>
 800440a:	b672      	cpsid	i
  while (1)
 800440c:	e7fe      	b.n	800440c <main+0x1cc>
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800440e:	2580      	movs	r5, #128	; 0x80
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8004410:	2306      	movs	r3, #6
  sConfig.Channel = ADC_CHANNEL_0;
 8004412:	901c      	str	r0, [sp, #112]	; 0x70
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004414:	016d      	lsls	r5, r5, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004416:	0020      	movs	r0, r4
 8004418:	a91c      	add	r1, sp, #112	; 0x70
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800441a:	951d      	str	r5, [sp, #116]	; 0x74
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 800441c:	931e      	str	r3, [sp, #120]	; 0x78
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800441e:	f001 f879 	bl	8005514 <HAL_ADC_ConfigChannel>
 8004422:	1e06      	subs	r6, r0, #0
 8004424:	d001      	beq.n	800442a <main+0x1ea>
 8004426:	b672      	cpsid	i
  while (1)
 8004428:	e7fe      	b.n	8004428 <main+0x1e8>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800442a:	0001      	movs	r1, r0
 800442c:	003a      	movs	r2, r7
 800442e:	a811      	add	r0, sp, #68	; 0x44
 8004430:	f004 fc04 	bl	8008c3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004434:	2208      	movs	r2, #8
 8004436:	0031      	movs	r1, r6
 8004438:	a80f      	add	r0, sp, #60	; 0x3c
 800443a:	f004 fbff 	bl	8008c3c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800443e:	221c      	movs	r2, #28
 8004440:	0031      	movs	r1, r6
 8004442:	a815      	add	r0, sp, #84	; 0x54
 8004444:	f004 fbfa 	bl	8008c3c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004448:	2220      	movs	r2, #32
 800444a:	0031      	movs	r1, r6
 800444c:	a81c      	add	r0, sp, #112	; 0x70
 800444e:	f004 fbf5 	bl	8008c3c <memset>
  htim15.Instance = TIM15;
 8004452:	4c60      	ldr	r4, [pc, #384]	; (80045d4 <main+0x394>)
 8004454:	4b60      	ldr	r3, [pc, #384]	; (80045d8 <main+0x398>)
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8004456:	0020      	movs	r0, r4
  htim15.Instance = TIM15;
 8004458:	6023      	str	r3, [r4, #0]
  htim15.Init.Prescaler = 24-1;
 800445a:	2317      	movs	r3, #23
 800445c:	6063      	str	r3, [r4, #4]
  htim15.Init.Period = 20000-1;
 800445e:	4b5f      	ldr	r3, [pc, #380]	; (80045dc <main+0x39c>)
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004460:	60a6      	str	r6, [r4, #8]
  htim15.Init.Period = 20000-1;
 8004462:	60e3      	str	r3, [r4, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004464:	6126      	str	r6, [r4, #16]
  htim15.Init.RepetitionCounter = 0;
 8004466:	6166      	str	r6, [r4, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004468:	61a6      	str	r6, [r4, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800446a:	f003 fb77 	bl	8007b5c <HAL_TIM_Base_Init>
 800446e:	2800      	cmp	r0, #0
 8004470:	d001      	beq.n	8004476 <main+0x236>
 8004472:	b672      	cpsid	i
  while (1)
 8004474:	e7fe      	b.n	8004474 <main+0x234>
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8004476:	0020      	movs	r0, r4
 8004478:	a911      	add	r1, sp, #68	; 0x44
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800447a:	9511      	str	r5, [sp, #68]	; 0x44
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800447c:	f003 fc6c 	bl	8007d58 <HAL_TIM_ConfigClockSource>
 8004480:	2800      	cmp	r0, #0
 8004482:	d001      	beq.n	8004488 <main+0x248>
 8004484:	b672      	cpsid	i
  while (1)
 8004486:	e7fe      	b.n	8004486 <main+0x246>
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8004488:	0020      	movs	r0, r4
 800448a:	f003 fb8f 	bl	8007bac <HAL_TIM_PWM_Init>
 800448e:	2800      	cmp	r0, #0
 8004490:	d001      	beq.n	8004496 <main+0x256>
 8004492:	b672      	cpsid	i
  while (1)
 8004494:	e7fe      	b.n	8004494 <main+0x254>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004496:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004498:	0020      	movs	r0, r4
 800449a:	a90f      	add	r1, sp, #60	; 0x3c
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800449c:	930f      	str	r3, [sp, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800449e:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80044a0:	f003 fdb8 	bl	8008014 <HAL_TIMEx_MasterConfigSynchronization>
 80044a4:	1e02      	subs	r2, r0, #0
 80044a6:	d001      	beq.n	80044ac <main+0x26c>
 80044a8:	b672      	cpsid	i
  while (1)
 80044aa:	e7fe      	b.n	80044aa <main+0x26a>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80044ac:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 80044ae:	9016      	str	r0, [sp, #88]	; 0x58
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80044b0:	9017      	str	r0, [sp, #92]	; 0x5c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80044b2:	9018      	str	r0, [sp, #96]	; 0x60
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80044b4:	9019      	str	r0, [sp, #100]	; 0x64
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80044b6:	901a      	str	r0, [sp, #104]	; 0x68
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80044b8:	901b      	str	r0, [sp, #108]	; 0x6c
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80044ba:	a915      	add	r1, sp, #84	; 0x54
 80044bc:	0020      	movs	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80044be:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80044c0:	f003 fbdc 	bl	8007c7c <HAL_TIM_PWM_ConfigChannel>
 80044c4:	2800      	cmp	r0, #0
 80044c6:	d001      	beq.n	80044cc <main+0x28c>
 80044c8:	b672      	cpsid	i
  while (1)
 80044ca:	e7fe      	b.n	80044ca <main+0x28a>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80044cc:	2380      	movs	r3, #128	; 0x80
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80044ce:	901c      	str	r0, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80044d0:	901d      	str	r0, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80044d2:	901e      	str	r0, [sp, #120]	; 0x78
  sBreakDeadTimeConfig.DeadTime = 0;
 80044d4:	901f      	str	r0, [sp, #124]	; 0x7c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80044d6:	9020      	str	r0, [sp, #128]	; 0x80
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80044d8:	019b      	lsls	r3, r3, #6
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80044da:	9023      	str	r0, [sp, #140]	; 0x8c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80044dc:	a91c      	add	r1, sp, #112	; 0x70
 80044de:	0020      	movs	r0, r4
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80044e0:	9321      	str	r3, [sp, #132]	; 0x84
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80044e2:	f003 fdc9 	bl	8008078 <HAL_TIMEx_ConfigBreakDeadTime>
 80044e6:	1e05      	subs	r5, r0, #0
 80044e8:	d001      	beq.n	80044ee <main+0x2ae>
 80044ea:	b672      	cpsid	i
  while (1)
 80044ec:	e7fe      	b.n	80044ec <main+0x2ac>
  HAL_TIM_MspPostInit(&htim15);
 80044ee:	0020      	movs	r0, r4
 80044f0:	f000 fd9e 	bl	8005030 <HAL_TIM_MspPostInit>
  htim14.Instance = TIM14;
 80044f4:	4f3a      	ldr	r7, [pc, #232]	; (80045e0 <main+0x3a0>)
 80044f6:	4b3b      	ldr	r3, [pc, #236]	; (80045e4 <main+0x3a4>)
  htim14.Init.Prescaler = 48000-1;
 80044f8:	4e3b      	ldr	r6, [pc, #236]	; (80045e8 <main+0x3a8>)
  htim14.Instance = TIM14;
 80044fa:	603b      	str	r3, [r7, #0]
  htim14.Init.Period = 5-1;
 80044fc:	2304      	movs	r3, #4
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80044fe:	0038      	movs	r0, r7
  htim14.Init.Prescaler = 48000-1;
 8004500:	607e      	str	r6, [r7, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004502:	60bd      	str	r5, [r7, #8]
  htim14.Init.Period = 5-1;
 8004504:	60fb      	str	r3, [r7, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004506:	613d      	str	r5, [r7, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004508:	61bd      	str	r5, [r7, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800450a:	f003 fb27 	bl	8007b5c <HAL_TIM_Base_Init>
 800450e:	1e04      	subs	r4, r0, #0
 8004510:	d001      	beq.n	8004516 <main+0x2d6>
 8004512:	b672      	cpsid	i
  while (1)
 8004514:	e7fe      	b.n	8004514 <main+0x2d4>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004516:	2208      	movs	r2, #8
 8004518:	0001      	movs	r1, r0
 800451a:	a81c      	add	r0, sp, #112	; 0x70
 800451c:	f004 fb8e 	bl	8008c3c <memset>
  htim6.Instance = TIM6;
 8004520:	4b32      	ldr	r3, [pc, #200]	; (80045ec <main+0x3ac>)
 8004522:	9305      	str	r3, [sp, #20]
 8004524:	9a05      	ldr	r2, [sp, #20]
 8004526:	4b32      	ldr	r3, [pc, #200]	; (80045f0 <main+0x3b0>)
  htim6.Init.Prescaler = 0;
 8004528:	6054      	str	r4, [r2, #4]
  htim6.Instance = TIM6;
 800452a:	6013      	str	r3, [r2, #0]
  htim6.Init.Period = 32000;
 800452c:	23fa      	movs	r3, #250	; 0xfa
 800452e:	01db      	lsls	r3, r3, #7
 8004530:	60d3      	str	r3, [r2, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004532:	0013      	movs	r3, r2
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004534:	6094      	str	r4, [r2, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004536:	2280      	movs	r2, #128	; 0x80
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004538:	0018      	movs	r0, r3
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800453a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800453c:	f003 fb0e 	bl	8007b5c <HAL_TIM_Base_Init>
 8004540:	2800      	cmp	r0, #0
 8004542:	d001      	beq.n	8004548 <main+0x308>
 8004544:	b672      	cpsid	i
  while (1)
 8004546:	e7fe      	b.n	8004546 <main+0x306>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004548:	2320      	movs	r3, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800454a:	901d      	str	r0, [sp, #116]	; 0x74
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800454c:	a91c      	add	r1, sp, #112	; 0x70
 800454e:	9805      	ldr	r0, [sp, #20]
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004550:	931c      	str	r3, [sp, #112]	; 0x70
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004552:	f003 fd5f 	bl	8008014 <HAL_TIMEx_MasterConfigSynchronization>
 8004556:	2800      	cmp	r0, #0
 8004558:	d001      	beq.n	800455e <main+0x31e>
 800455a:	b672      	cpsid	i
  while (1)
 800455c:	e7fe      	b.n	800455c <main+0x31c>
  htim16.Instance = TIM16;
 800455e:	4d25      	ldr	r5, [pc, #148]	; (80045f4 <main+0x3b4>)
 8004560:	4b25      	ldr	r3, [pc, #148]	; (80045f8 <main+0x3b8>)
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004562:	60a8      	str	r0, [r5, #8]
  htim16.Instance = TIM16;
 8004564:	602b      	str	r3, [r5, #0]
  htim16.Init.Period = 1000-1;
 8004566:	4b25      	ldr	r3, [pc, #148]	; (80045fc <main+0x3bc>)
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004568:	6128      	str	r0, [r5, #16]
  htim16.Init.RepetitionCounter = 0;
 800456a:	6168      	str	r0, [r5, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800456c:	61a8      	str	r0, [r5, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800456e:	0028      	movs	r0, r5
  htim16.Init.Prescaler = 48000-1;
 8004570:	606e      	str	r6, [r5, #4]
  htim16.Init.Period = 1000-1;
 8004572:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8004574:	f003 faf2 	bl	8007b5c <HAL_TIM_Base_Init>
 8004578:	2800      	cmp	r0, #0
 800457a:	d001      	beq.n	8004580 <main+0x340>
 800457c:	b672      	cpsid	i
  while (1)
 800457e:	e7fe      	b.n	800457e <main+0x33e>
  htim17.Instance = TIM17;
 8004580:	4c1f      	ldr	r4, [pc, #124]	; (8004600 <main+0x3c0>)
 8004582:	4b20      	ldr	r3, [pc, #128]	; (8004604 <main+0x3c4>)
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004584:	60a0      	str	r0, [r4, #8]
  htim17.Instance = TIM17;
 8004586:	6023      	str	r3, [r4, #0]
  htim17.Init.Period = 100-1;
 8004588:	2363      	movs	r3, #99	; 0x63
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800458a:	6120      	str	r0, [r4, #16]
  htim17.Init.RepetitionCounter = 0;
 800458c:	6160      	str	r0, [r4, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800458e:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8004590:	0020      	movs	r0, r4
  htim17.Init.Prescaler = 48000-1;
 8004592:	6066      	str	r6, [r4, #4]
  htim17.Init.Period = 100-1;
 8004594:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8004596:	f003 fae1 	bl	8007b5c <HAL_TIM_Base_Init>
 800459a:	1e06      	subs	r6, r0, #0
 800459c:	d034      	beq.n	8004608 <main+0x3c8>
 800459e:	b672      	cpsid	i
  while (1)
 80045a0:	e7fe      	b.n	80045a0 <main+0x360>
 80045a2:	46c0      	nop			; (mov r8, r8)
 80045a4:	40021000 	.word	0x40021000
 80045a8:	48001400 	.word	0x48001400
 80045ac:	48000400 	.word	0x48000400
 80045b0:	20000740 	.word	0x20000740
 80045b4:	40005400 	.word	0x40005400
 80045b8:	20000209 	.word	0x20000209
 80045bc:	40010000 	.word	0x40010000
 80045c0:	aaaa0100 	.word	0xaaaa0100
 80045c4:	200006a4 	.word	0x200006a4
 80045c8:	40007400 	.word	0x40007400
 80045cc:	20000664 	.word	0x20000664
 80045d0:	40012400 	.word	0x40012400
 80045d4:	200007dc 	.word	0x200007dc
 80045d8:	40014000 	.word	0x40014000
 80045dc:	00004e1f 	.word	0x00004e1f
 80045e0:	20000794 	.word	0x20000794
 80045e4:	40002000 	.word	0x40002000
 80045e8:	0000bb7f 	.word	0x0000bb7f
 80045ec:	200008b4 	.word	0x200008b4
 80045f0:	40001000 	.word	0x40001000
 80045f4:	20000824 	.word	0x20000824
 80045f8:	40014400 	.word	0x40014400
 80045fc:	000003e7 	.word	0x000003e7
 8004600:	2000086c 	.word	0x2000086c
 8004604:	40014800 	.word	0x40014800
  ee_read(0, sizeof(float), (uint8_t*)&valor_Encoder);//leo el valor de la eeprom
 8004608:	2104      	movs	r1, #4
 800460a:	4ae7      	ldr	r2, [pc, #924]	; (80049a8 <main+0x768>)
 800460c:	f7ff fa8a 	bl	8003b24 <ee_read>
  OLED_Init_DMA();
 8004610:	f7ff f8ce 	bl	80037b0 <OLED_Init_DMA>
  OLED_Imagen_Small_DMA(2,0, AM_INTRO, 128, 64);
 8004614:	2340      	movs	r3, #64	; 0x40
 8004616:	0031      	movs	r1, r6
 8004618:	2002      	movs	r0, #2
 800461a:	4ae4      	ldr	r2, [pc, #912]	; (80049ac <main+0x76c>)
 800461c:	9300      	str	r3, [sp, #0]
 800461e:	18db      	adds	r3, r3, r3
 8004620:	f7ff f9ae 	bl	8003980 <OLED_Imagen_Small_DMA>
  OLED_Print_Text_DMA(1,0,1,"Designed by G. Anglas");
 8004624:	2201      	movs	r2, #1
 8004626:	0031      	movs	r1, r6
 8004628:	0010      	movs	r0, r2
 800462a:	4be1      	ldr	r3, [pc, #900]	; (80049b0 <main+0x770>)
 800462c:	f7ff f8f4 	bl	8003818 <OLED_Print_Text_DMA>
  while(HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin));
 8004630:	2180      	movs	r1, #128	; 0x80
 8004632:	2090      	movs	r0, #144	; 0x90
 8004634:	00c9      	lsls	r1, r1, #3
 8004636:	05c0      	lsls	r0, r0, #23
 8004638:	f001 fbc0 	bl	8005dbc <HAL_GPIO_ReadPin>
 800463c:	1e06      	subs	r6, r0, #0
 800463e:	d1f7      	bne.n	8004630 <main+0x3f0>
  HAL_TIM_Base_Start_IT(&htim14);//encoder
 8004640:	0038      	movs	r0, r7
 8004642:	f003 f947 	bl	80078d4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);//dac_dma
 8004646:	9805      	ldr	r0, [sp, #20]
 8004648:	f003 f944 	bl	80078d4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim16);//icono de bateria
 800464c:	0028      	movs	r0, r5
 800464e:	f003 f941 	bl	80078d4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim17);//todos los datos del oled
 8004652:	0020      	movs	r0, r4
 8004654:	f003 f93e 	bl	80078d4 <HAL_TIM_Base_Start_IT>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8004658:	0031      	movs	r1, r6
 800465a:	9806      	ldr	r0, [sp, #24]
 800465c:	f001 f877 	bl	800574e <HAL_DAC_Start>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *)dacDMA, 1, DAC_ALIGN_12B_R);
 8004660:	2301      	movs	r3, #1
 8004662:	0031      	movs	r1, r6
 8004664:	4ad3      	ldr	r2, [pc, #844]	; (80049b4 <main+0x774>)
 8004666:	9806      	ldr	r0, [sp, #24]
 8004668:	9600      	str	r6, [sp, #0]
 800466a:	f001 f88f 	bl	800578c <HAL_DAC_Start_DMA>
  OLED_Clear_DMA();
 800466e:	f7ff f873 	bl	8003758 <OLED_Clear_DMA>
  INA226_Init_DMA(3.2768,25,AVG_64,T_Vbus_1_1ms,T_Vshunt_1_1ms,MODE_SHUNT_BUS_CONTINUOUS);
 8004672:	2307      	movs	r3, #7
 8004674:	9302      	str	r3, [sp, #8]
 8004676:	3b03      	subs	r3, #3
 8004678:	2219      	movs	r2, #25
 800467a:	49cf      	ldr	r1, [pc, #828]	; (80049b8 <main+0x778>)
 800467c:	48cf      	ldr	r0, [pc, #828]	; (80049bc <main+0x77c>)
 800467e:	9301      	str	r3, [sp, #4]
 8004680:	9300      	str	r3, [sp, #0]
 8004682:	3b01      	subs	r3, #1
 8004684:	f7fe fe1e 	bl	80032c4 <INA226_Init_DMA>
  INA226_Mode_pinAlert_DMA(SHUNT_VOLTAGE_OVER);
 8004688:	48cd      	ldr	r0, [pc, #820]	; (80049c0 <main+0x780>)
 800468a:	f7fe ff43 	bl	8003514 <INA226_Mode_pinAlert_DMA>
  INA226_Alert_Limit_DMA(2550);
 800468e:	48cd      	ldr	r0, [pc, #820]	; (80049c4 <main+0x784>)
 8004690:	f7fe ff74 	bl	800357c <INA226_Alert_Limit_DMA>
  OLED_Print_Text_DMA(3,104,2,"OFF");
 8004694:	2202      	movs	r2, #2
 8004696:	2168      	movs	r1, #104	; 0x68
 8004698:	2003      	movs	r0, #3
 800469a:	4bcb      	ldr	r3, [pc, #812]	; (80049c8 <main+0x788>)
 800469c:	f7ff f8bc 	bl	8003818 <OLED_Print_Text_DMA>
  OLED_Print_Text_DMA(2,104,1,"1.0");
 80046a0:	2201      	movs	r2, #1
 80046a2:	2168      	movs	r1, #104	; 0x68
 80046a4:	2002      	movs	r0, #2
 80046a6:	4bc9      	ldr	r3, [pc, #804]	; (80049cc <main+0x78c>)
 80046a8:	f7ff f8b6 	bl	8003818 <OLED_Print_Text_DMA>
  OLED_Print_Text_DMA(2,0,3,"0.0V ");
 80046ac:	2203      	movs	r2, #3
 80046ae:	0031      	movs	r1, r6
 80046b0:	2002      	movs	r0, #2
 80046b2:	4bc7      	ldr	r3, [pc, #796]	; (80049d0 <main+0x790>)
 80046b4:	f7ff f8b0 	bl	8003818 <OLED_Print_Text_DMA>
  OLED_Print_Text_DMA(6,0,2,"   0mA");
 80046b8:	2202      	movs	r2, #2
 80046ba:	0031      	movs	r1, r6
 80046bc:	2006      	movs	r0, #6
 80046be:	4bc5      	ldr	r3, [pc, #788]	; (80049d4 <main+0x794>)
 80046c0:	f7ff f8aa 	bl	8003818 <OLED_Print_Text_DMA>
  OLED_Print_Text_DMA(5,96,1,"0.0W ");
 80046c4:	2201      	movs	r2, #1
 80046c6:	2160      	movs	r1, #96	; 0x60
 80046c8:	2005      	movs	r0, #5
 80046ca:	4bc3      	ldr	r3, [pc, #780]	; (80049d8 <main+0x798>)
 80046cc:	f7ff f8a4 	bl	8003818 <OLED_Print_Text_DMA>
      if(HAL_GPIO_ReadPin(SW_GPIO_Port, SW_Pin) == 0 && mem == 0){mem = 1;}
 80046d0:	2701      	movs	r7, #1
      if(HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin) == 0){
 80046d2:	2690      	movs	r6, #144	; 0x90
 80046d4:	05f6      	lsls	r6, r6, #23
      if(HAL_GPIO_ReadPin(SW_GPIO_Port, SW_Pin) == 0 && mem == 0){mem = 1;}
 80046d6:	2180      	movs	r1, #128	; 0x80
 80046d8:	48c0      	ldr	r0, [pc, #768]	; (80049dc <main+0x79c>)
 80046da:	f001 fb6f 	bl	8005dbc <HAL_GPIO_ReadPin>
 80046de:	4dc0      	ldr	r5, [pc, #768]	; (80049e0 <main+0x7a0>)
 80046e0:	782b      	ldrb	r3, [r5, #0]
 80046e2:	4318      	orrs	r0, r3
 80046e4:	b2c0      	uxtb	r0, r0
 80046e6:	2800      	cmp	r0, #0
 80046e8:	d100      	bne.n	80046ec <main+0x4ac>
 80046ea:	702f      	strb	r7, [r5, #0]
      if(HAL_GPIO_ReadPin(SW_GPIO_Port, SW_Pin) == 1 && mem == 1){suma++; mem = 0;}
 80046ec:	2180      	movs	r1, #128	; 0x80
 80046ee:	48bb      	ldr	r0, [pc, #748]	; (80049dc <main+0x79c>)
 80046f0:	f001 fb64 	bl	8005dbc <HAL_GPIO_ReadPin>
 80046f4:	4cbb      	ldr	r4, [pc, #748]	; (80049e4 <main+0x7a4>)
 80046f6:	2801      	cmp	r0, #1
 80046f8:	d107      	bne.n	800470a <main+0x4ca>
 80046fa:	782b      	ldrb	r3, [r5, #0]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d104      	bne.n	800470a <main+0x4ca>
 8004700:	7823      	ldrb	r3, [r4, #0]
 8004702:	3301      	adds	r3, #1
 8004704:	7023      	strb	r3, [r4, #0]
 8004706:	2300      	movs	r3, #0
 8004708:	702b      	strb	r3, [r5, #0]
      if(suma==1){
 800470a:	7823      	ldrb	r3, [r4, #0]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d10a      	bne.n	8004726 <main+0x4e6>
          suma=2;
 8004710:	3301      	adds	r3, #1
          paso_Encoder = 0.1;
 8004712:	4ab5      	ldr	r2, [pc, #724]	; (80049e8 <main+0x7a8>)
          suma=2;
 8004714:	7023      	strb	r3, [r4, #0]
          paso_Encoder = 0.1;
 8004716:	4bb5      	ldr	r3, [pc, #724]	; (80049ec <main+0x7ac>)
          OLED_Print_Text_DMA(2,104,1,"0.1");
 8004718:	2168      	movs	r1, #104	; 0x68
          paso_Encoder = 0.1;
 800471a:	601a      	str	r2, [r3, #0]
          OLED_Print_Text_DMA(2,104,1,"0.1");
 800471c:	2002      	movs	r0, #2
 800471e:	003a      	movs	r2, r7
 8004720:	4bb3      	ldr	r3, [pc, #716]	; (80049f0 <main+0x7b0>)
 8004722:	f7ff f879 	bl	8003818 <OLED_Print_Text_DMA>
      if(suma==3){
 8004726:	7823      	ldrb	r3, [r4, #0]
 8004728:	2b03      	cmp	r3, #3
 800472a:	d10b      	bne.n	8004744 <main+0x504>
          suma=0;
 800472c:	2300      	movs	r3, #0
          paso_Encoder = 1.0;
 800472e:	22fe      	movs	r2, #254	; 0xfe
          suma=0;
 8004730:	7023      	strb	r3, [r4, #0]
          paso_Encoder = 1.0;
 8004732:	4bae      	ldr	r3, [pc, #696]	; (80049ec <main+0x7ac>)
 8004734:	0592      	lsls	r2, r2, #22
 8004736:	601a      	str	r2, [r3, #0]
          OLED_Print_Text_DMA(2,104,1,"1.0");
 8004738:	2168      	movs	r1, #104	; 0x68
 800473a:	003a      	movs	r2, r7
 800473c:	2002      	movs	r0, #2
 800473e:	4ba3      	ldr	r3, [pc, #652]	; (80049cc <main+0x78c>)
 8004740:	f7ff f86a 	bl	8003818 <OLED_Print_Text_DMA>
      if(HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin) == 0){
 8004744:	2180      	movs	r1, #128	; 0x80
 8004746:	0030      	movs	r0, r6
 8004748:	00c9      	lsls	r1, r1, #3
 800474a:	f001 fb37 	bl	8005dbc <HAL_GPIO_ReadPin>
 800474e:	4ba9      	ldr	r3, [pc, #676]	; (80049f4 <main+0x7b4>)
 8004750:	9305      	str	r3, [sp, #20]
 8004752:	2800      	cmp	r0, #0
 8004754:	d107      	bne.n	8004766 <main+0x526>
    	  contButton++;
 8004756:	4aa8      	ldr	r2, [pc, #672]	; (80049f8 <main+0x7b8>)
 8004758:	8813      	ldrh	r3, [r2, #0]
 800475a:	3301      	adds	r3, #1
 800475c:	b29b      	uxth	r3, r3
    	  if(contButton>15){// 1.5seg aprox
 800475e:	2b0f      	cmp	r3, #15
 8004760:	d900      	bls.n	8004764 <main+0x524>
 8004762:	e23a      	b.n	8004bda <main+0x99a>
    	  contButton++;
 8004764:	8013      	strh	r3, [r2, #0]
      if(HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin) == 1 && contButton>0){contButton=0;}
 8004766:	2180      	movs	r1, #128	; 0x80
 8004768:	0030      	movs	r0, r6
 800476a:	00c9      	lsls	r1, r1, #3
 800476c:	f001 fb26 	bl	8005dbc <HAL_GPIO_ReadPin>
 8004770:	2801      	cmp	r0, #1
 8004772:	d105      	bne.n	8004780 <main+0x540>
 8004774:	4ba0      	ldr	r3, [pc, #640]	; (80049f8 <main+0x7b8>)
 8004776:	881a      	ldrh	r2, [r3, #0]
 8004778:	2a00      	cmp	r2, #0
 800477a:	d001      	beq.n	8004780 <main+0x540>
 800477c:	2200      	movs	r2, #0
 800477e:	801a      	strh	r2, [r3, #0]
      if(powerSupply==1){
 8004780:	9b05      	ldr	r3, [sp, #20]
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d11f      	bne.n	80047c8 <main+0x588>
    	  powerSupply=2;
 8004788:	2202      	movs	r2, #2
 800478a:	9b05      	ldr	r3, [sp, #20]
    	  OLED_Print_Text_DMA(3,104,2,"ON ");
 800478c:	2168      	movs	r1, #104	; 0x68
    	  powerSupply=2;
 800478e:	701a      	strb	r2, [r3, #0]
    	  OLED_Print_Text_DMA(3,104,2,"ON ");
 8004790:	2003      	movs	r0, #3
 8004792:	4b9a      	ldr	r3, [pc, #616]	; (80049fc <main+0x7bc>)
 8004794:	f7ff f840 	bl	8003818 <OLED_Print_Text_DMA>
    	  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
 8004798:	003a      	movs	r2, r7
 800479a:	2180      	movs	r1, #128	; 0x80
 800479c:	4898      	ldr	r0, [pc, #608]	; (8004a00 <main+0x7c0>)
 800479e:	f001 fb13 	bl	8005dc8 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(EN_XL6019_GPIO_Port, EN_XL6019_Pin, SET);
 80047a2:	2180      	movs	r1, #128	; 0x80
 80047a4:	003a      	movs	r2, r7
 80047a6:	0030      	movs	r0, r6
 80047a8:	0049      	lsls	r1, r1, #1
 80047aa:	f001 fb0d 	bl	8005dc8 <HAL_GPIO_WritePin>
    	  PWM_set_Freq_DutyCycle(4000,50,100);
 80047ae:	20fa      	movs	r0, #250	; 0xfa
 80047b0:	2264      	movs	r2, #100	; 0x64
 80047b2:	2132      	movs	r1, #50	; 0x32
 80047b4:	0100      	lsls	r0, r0, #4
 80047b6:	f7ff fc99 	bl	80040ec <PWM_set_Freq_DutyCycle>
    	  ee_writeToRam(0, sizeof(float), (uint8_t*)&valor_Encoder);//escribo en al eeprom
 80047ba:	2104      	movs	r1, #4
 80047bc:	4a7a      	ldr	r2, [pc, #488]	; (80049a8 <main+0x768>)
 80047be:	2000      	movs	r0, #0
 80047c0:	f7ff f9cc 	bl	8003b5c <ee_writeToRam>
    	  ee_commit();
 80047c4:	f7ff f9e0 	bl	8003b88 <ee_commit>
      if(powerSupply==3){
 80047c8:	9b05      	ldr	r3, [sp, #20]
 80047ca:	7818      	ldrb	r0, [r3, #0]
 80047cc:	2803      	cmp	r0, #3
 80047ce:	d11a      	bne.n	8004806 <main+0x5c6>
    	  powerSupply=0;
 80047d0:	2200      	movs	r2, #0
    	  OLED_Print_Text_DMA(3,104,2,"OFF");
 80047d2:	2168      	movs	r1, #104	; 0x68
    	  powerSupply=0;
 80047d4:	701a      	strb	r2, [r3, #0]
    	  OLED_Print_Text_DMA(3,104,2,"OFF");
 80047d6:	4b7c      	ldr	r3, [pc, #496]	; (80049c8 <main+0x788>)
 80047d8:	3202      	adds	r2, #2
 80047da:	f7ff f81d 	bl	8003818 <OLED_Print_Text_DMA>
    	  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 80047de:	2200      	movs	r2, #0
 80047e0:	2180      	movs	r1, #128	; 0x80
 80047e2:	4887      	ldr	r0, [pc, #540]	; (8004a00 <main+0x7c0>)
 80047e4:	f001 faf0 	bl	8005dc8 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(EN_XL6019_GPIO_Port, EN_XL6019_Pin, RESET);
 80047e8:	2180      	movs	r1, #128	; 0x80
 80047ea:	2200      	movs	r2, #0
 80047ec:	0030      	movs	r0, r6
 80047ee:	0049      	lsls	r1, r1, #1
 80047f0:	f001 faea 	bl	8005dc8 <HAL_GPIO_WritePin>
    	  PWM_set_Freq_DutyCycle(1000,50,100);
 80047f4:	20fa      	movs	r0, #250	; 0xfa
 80047f6:	2264      	movs	r2, #100	; 0x64
 80047f8:	2132      	movs	r1, #50	; 0x32
 80047fa:	0080      	lsls	r0, r0, #2
 80047fc:	f7ff fc76 	bl	80040ec <PWM_set_Freq_DutyCycle>
    	  ENCO=0;//ver si eliminar esta linea
 8004800:	2200      	movs	r2, #0
 8004802:	4b80      	ldr	r3, [pc, #512]	; (8004a04 <main+0x7c4>)
 8004804:	601a      	str	r2, [r3, #0]
      if(HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin) == 0 && mem1 == 0 && powerSupply==0){mem1 = 1;}
 8004806:	2180      	movs	r1, #128	; 0x80
 8004808:	0030      	movs	r0, r6
 800480a:	0089      	lsls	r1, r1, #2
 800480c:	f001 fad6 	bl	8005dbc <HAL_GPIO_ReadPin>
 8004810:	4d7d      	ldr	r5, [pc, #500]	; (8004a08 <main+0x7c8>)
 8004812:	9a05      	ldr	r2, [sp, #20]
 8004814:	782b      	ldrb	r3, [r5, #0]
 8004816:	7812      	ldrb	r2, [r2, #0]
 8004818:	4313      	orrs	r3, r2
 800481a:	4318      	orrs	r0, r3
 800481c:	b2c0      	uxtb	r0, r0
 800481e:	2800      	cmp	r0, #0
 8004820:	d100      	bne.n	8004824 <main+0x5e4>
 8004822:	702f      	strb	r7, [r5, #0]
      if(HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin) == 0 && mem1 == 1 && powerSupply==0){
 8004824:	2180      	movs	r1, #128	; 0x80
 8004826:	0030      	movs	r0, r6
 8004828:	0089      	lsls	r1, r1, #2
 800482a:	f001 fac7 	bl	8005dbc <HAL_GPIO_ReadPin>
 800482e:	782b      	ldrb	r3, [r5, #0]
 8004830:	0004      	movs	r4, r0
 8004832:	9308      	str	r3, [sp, #32]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d000      	beq.n	800483a <main+0x5fa>
 8004838:	e098      	b.n	800496c <main+0x72c>
 800483a:	9b05      	ldr	r3, [sp, #20]
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	431c      	orrs	r4, r3
 8004840:	b2e4      	uxtb	r4, r4
 8004842:	2c00      	cmp	r4, #0
 8004844:	d000      	beq.n	8004848 <main+0x608>
 8004846:	e091      	b.n	800496c <main+0x72c>
    	  contSW1++;
 8004848:	4b70      	ldr	r3, [pc, #448]	; (8004a0c <main+0x7cc>)
 800484a:	9306      	str	r3, [sp, #24]
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	9a06      	ldr	r2, [sp, #24]
 8004850:	3301      	adds	r3, #1
 8004852:	b2db      	uxtb	r3, r3
 8004854:	7013      	strb	r3, [r2, #0]
    	  if(contSW1>25){
 8004856:	2b19      	cmp	r3, #25
 8004858:	d800      	bhi.n	800485c <main+0x61c>
 800485a:	e087      	b.n	800496c <main+0x72c>
    		  HAL_TIM_Base_Stop_IT(&htim14);//desactivo la lectura del encoder
 800485c:	4b6c      	ldr	r3, [pc, #432]	; (8004a10 <main+0x7d0>)
 800485e:	0018      	movs	r0, r3
 8004860:	9309      	str	r3, [sp, #36]	; 0x24
 8004862:	f003 f867 	bl	8007934 <HAL_TIM_Base_Stop_IT>
    		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
 8004866:	003a      	movs	r2, r7
 8004868:	2140      	movs	r1, #64	; 0x40
 800486a:	4865      	ldr	r0, [pc, #404]	; (8004a00 <main+0x7c0>)
 800486c:	f001 faac 	bl	8005dc8 <HAL_GPIO_WritePin>
    		  OLED_Clear_DMA();
 8004870:	f7fe ff72 	bl	8003758 <OLED_Clear_DMA>
			  OLED_Print_Text_DMA(0,27,1," 1.8V 2500mA");
 8004874:	0020      	movs	r0, r4
 8004876:	003a      	movs	r2, r7
 8004878:	211b      	movs	r1, #27
 800487a:	4b66      	ldr	r3, [pc, #408]	; (8004a14 <main+0x7d4>)
 800487c:	f7fe ffcc 	bl	8003818 <OLED_Print_Text_DMA>
			  OLED_Print_Text_DMA(1,27,1," 3.3V 2250mA");
 8004880:	003a      	movs	r2, r7
 8004882:	211b      	movs	r1, #27
 8004884:	0038      	movs	r0, r7
 8004886:	4b64      	ldr	r3, [pc, #400]	; (8004a18 <main+0x7d8>)
 8004888:	f7fe ffc6 	bl	8003818 <OLED_Print_Text_DMA>
			  OLED_Print_Text_DMA(2,27,1," 5.0V 2000mA");
 800488c:	003a      	movs	r2, r7
 800488e:	211b      	movs	r1, #27
 8004890:	2002      	movs	r0, #2
 8004892:	4b62      	ldr	r3, [pc, #392]	; (8004a1c <main+0x7dc>)
 8004894:	f7fe ffc0 	bl	8003818 <OLED_Print_Text_DMA>
			  OLED_Print_Text_DMA(3,27,1," 9.0V 1250mA");
 8004898:	003a      	movs	r2, r7
 800489a:	211b      	movs	r1, #27
 800489c:	2003      	movs	r0, #3
 800489e:	4b60      	ldr	r3, [pc, #384]	; (8004a20 <main+0x7e0>)
 80048a0:	f7fe ffba 	bl	8003818 <OLED_Print_Text_DMA>
			  OLED_Print_Text_DMA(4,27,1,"12.0V 1000mA");
 80048a4:	003a      	movs	r2, r7
 80048a6:	211b      	movs	r1, #27
 80048a8:	2004      	movs	r0, #4
 80048aa:	4b5e      	ldr	r3, [pc, #376]	; (8004a24 <main+0x7e4>)
 80048ac:	f7fe ffb4 	bl	8003818 <OLED_Print_Text_DMA>
			  OLED_Print_Text_DMA(5,27,1,"15.0V  750mA");
 80048b0:	003a      	movs	r2, r7
 80048b2:	211b      	movs	r1, #27
 80048b4:	2005      	movs	r0, #5
 80048b6:	4b5c      	ldr	r3, [pc, #368]	; (8004a28 <main+0x7e8>)
 80048b8:	f7fe ffae 	bl	8003818 <OLED_Print_Text_DMA>
			  OLED_Print_Text_DMA(6,27,1,"24.0V  500mA");
 80048bc:	003a      	movs	r2, r7
 80048be:	211b      	movs	r1, #27
 80048c0:	2006      	movs	r0, #6
 80048c2:	4b5a      	ldr	r3, [pc, #360]	; (8004a2c <main+0x7ec>)
 80048c4:	f7fe ffa8 	bl	8003818 <OLED_Print_Text_DMA>
			  OLED_Print_Text_DMA(7,27,1,"30.0V  250mA");
 80048c8:	003a      	movs	r2, r7
 80048ca:	4b59      	ldr	r3, [pc, #356]	; (8004a30 <main+0x7f0>)
 80048cc:	211b      	movs	r1, #27
 80048ce:	2007      	movs	r0, #7
 80048d0:	f7fe ffa2 	bl	8003818 <OLED_Print_Text_DMA>
			  mem1 = 0;
 80048d4:	702c      	strb	r4, [r5, #0]
    			  PWM_set_Freq_DutyCycle(2000,50,100);
 80048d6:	2564      	movs	r5, #100	; 0x64
			  contSW1=0;
 80048d8:	9b06      	ldr	r3, [sp, #24]
			  flagSW1 = 1;
 80048da:	9a08      	ldr	r2, [sp, #32]
			  contSW1=0;
 80048dc:	701c      	strb	r4, [r3, #0]
			  flagSW1 = 1;
 80048de:	4b55      	ldr	r3, [pc, #340]	; (8004a34 <main+0x7f4>)
 80048e0:	3403      	adds	r4, #3
 80048e2:	9306      	str	r3, [sp, #24]
 80048e4:	701a      	strb	r2, [r3, #0]
    			  PWM_set_Freq_DutyCycle(2000,50,100);
 80048e6:	20fa      	movs	r0, #250	; 0xfa
 80048e8:	002a      	movs	r2, r5
 80048ea:	2132      	movs	r1, #50	; 0x32
 80048ec:	00c0      	lsls	r0, r0, #3
    		  for(uint8_t i=0; i<3; i++){
 80048ee:	3c01      	subs	r4, #1
    			  PWM_set_Freq_DutyCycle(2000,50,100);
 80048f0:	f7ff fbfc 	bl	80040ec <PWM_set_Freq_DutyCycle>
    		  for(uint8_t i=0; i<3; i++){
 80048f4:	b2e4      	uxtb	r4, r4
    			  HAL_Delay(100);
 80048f6:	0028      	movs	r0, r5
 80048f8:	f000 fcd6 	bl	80052a8 <HAL_Delay>
    		  for(uint8_t i=0; i<3; i++){
 80048fc:	2c00      	cmp	r4, #0
 80048fe:	d1f2      	bne.n	80048e6 <main+0x6a6>
    		  HAL_Delay(1000);//tiempo para soltar el pulsador luego de entrar a esta pantalla o de escuchar el buzzer
 8004900:	20fa      	movs	r0, #250	; 0xfa
 8004902:	0080      	lsls	r0, r0, #2
 8004904:	f000 fcd0 	bl	80052a8 <HAL_Delay>
			  while(flagSW1 == 1){
 8004908:	9b06      	ldr	r3, [sp, #24]
 800490a:	781d      	ldrb	r5, [r3, #0]
 800490c:	2d01      	cmp	r5, #1
 800490e:	d100      	bne.n	8004912 <main+0x6d2>
 8004910:	e16a      	b.n	8004be8 <main+0x9a8>
			  sprintf(buff,"%1.1f",paso_Encoder);
 8004912:	4b36      	ldr	r3, [pc, #216]	; (80049ec <main+0x7ac>)
 8004914:	6818      	ldr	r0, [r3, #0]
 8004916:	f7fe fb9d 	bl	8003054 <__aeabi_f2d>
 800491a:	4c47      	ldr	r4, [pc, #284]	; (8004a38 <main+0x7f8>)
 800491c:	0002      	movs	r2, r0
 800491e:	000b      	movs	r3, r1
 8004920:	0020      	movs	r0, r4
 8004922:	4946      	ldr	r1, [pc, #280]	; (8004a3c <main+0x7fc>)
 8004924:	f004 f91e 	bl	8008b64 <siprintf>
			  OLED_Print_Text_DMA(2,104,1,buff);
 8004928:	0023      	movs	r3, r4
 800492a:	003a      	movs	r2, r7
 800492c:	2168      	movs	r1, #104	; 0x68
 800492e:	2002      	movs	r0, #2
 8004930:	f7fe ff72 	bl	8003818 <OLED_Print_Text_DMA>
			  if(powerSupply==2) OLED_Print_Text_DMA(3,104,2,"ON ");
 8004934:	9b05      	ldr	r3, [sp, #20]
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	2b02      	cmp	r3, #2
 800493a:	d105      	bne.n	8004948 <main+0x708>
 800493c:	2202      	movs	r2, #2
 800493e:	2168      	movs	r1, #104	; 0x68
 8004940:	2003      	movs	r0, #3
 8004942:	4b2e      	ldr	r3, [pc, #184]	; (80049fc <main+0x7bc>)
 8004944:	f7fe ff68 	bl	8003818 <OLED_Print_Text_DMA>
			  if(powerSupply==0) OLED_Print_Text_DMA(3,104,2,"OFF");
 8004948:	9b05      	ldr	r3, [sp, #20]
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d105      	bne.n	800495c <main+0x71c>
 8004950:	2202      	movs	r2, #2
 8004952:	2168      	movs	r1, #104	; 0x68
 8004954:	2003      	movs	r0, #3
 8004956:	4b1c      	ldr	r3, [pc, #112]	; (80049c8 <main+0x788>)
 8004958:	f7fe ff5e 	bl	8003818 <OLED_Print_Text_DMA>
			  HAL_TIM_Base_Start_IT(&htim14);//activo nuevamente la lectura del encoder
 800495c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800495e:	f002 ffb9 	bl	80078d4 <HAL_TIM_Base_Start_IT>
			  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 8004962:	2200      	movs	r2, #0
 8004964:	2140      	movs	r1, #64	; 0x40
 8004966:	4826      	ldr	r0, [pc, #152]	; (8004a00 <main+0x7c0>)
 8004968:	f001 fa2e 	bl	8005dc8 <HAL_GPIO_WritePin>
      if(HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin) == 1 && mem1 == 1 && contSW1<=10){suma1++; mem1 = 0; contSW1=0;}
 800496c:	2180      	movs	r1, #128	; 0x80
 800496e:	0030      	movs	r0, r6
 8004970:	0089      	lsls	r1, r1, #2
 8004972:	f001 fa23 	bl	8005dbc <HAL_GPIO_ReadPin>
 8004976:	4b32      	ldr	r3, [pc, #200]	; (8004a40 <main+0x800>)
 8004978:	2801      	cmp	r0, #1
 800497a:	d10d      	bne.n	8004998 <main+0x758>
 800497c:	4822      	ldr	r0, [pc, #136]	; (8004a08 <main+0x7c8>)
 800497e:	7802      	ldrb	r2, [r0, #0]
 8004980:	2a01      	cmp	r2, #1
 8004982:	d109      	bne.n	8004998 <main+0x758>
 8004984:	4921      	ldr	r1, [pc, #132]	; (8004a0c <main+0x7cc>)
 8004986:	780a      	ldrb	r2, [r1, #0]
 8004988:	2a0a      	cmp	r2, #10
 800498a:	d805      	bhi.n	8004998 <main+0x758>
 800498c:	781a      	ldrb	r2, [r3, #0]
 800498e:	3201      	adds	r2, #1
 8004990:	701a      	strb	r2, [r3, #0]
 8004992:	2200      	movs	r2, #0
 8004994:	7002      	strb	r2, [r0, #0]
 8004996:	700a      	strb	r2, [r1, #0]
      if(suma1==1) {suma1=2; valor_Encoder = 3.3; }
 8004998:	781a      	ldrb	r2, [r3, #0]
 800499a:	2a01      	cmp	r2, #1
 800499c:	d000      	beq.n	80049a0 <main+0x760>
 800499e:	e14f      	b.n	8004c40 <main+0xa00>
 80049a0:	3201      	adds	r2, #1
 80049a2:	4928      	ldr	r1, [pc, #160]	; (8004a44 <main+0x804>)
 80049a4:	701a      	strb	r2, [r3, #0]
 80049a6:	e04f      	b.n	8004a48 <main+0x808>
 80049a8:	2000000c 	.word	0x2000000c
 80049ac:	0800d05e 	.word	0x0800d05e
 80049b0:	0800cfb2 	.word	0x0800cfb2
 80049b4:	20000654 	.word	0x20000654
 80049b8:	400a36e2 	.word	0x400a36e2
 80049bc:	eb1c432d 	.word	0xeb1c432d
 80049c0:	00008002 	.word	0x00008002
 80049c4:	000009f6 	.word	0x000009f6
 80049c8:	0800cfc8 	.word	0x0800cfc8
 80049cc:	0800cfcc 	.word	0x0800cfcc
 80049d0:	0800cfd0 	.word	0x0800cfd0
 80049d4:	0800cf9d 	.word	0x0800cf9d
 80049d8:	0800cfac 	.word	0x0800cfac
 80049dc:	48000400 	.word	0x48000400
 80049e0:	200008fc 	.word	0x200008fc
 80049e4:	20000905 	.word	0x20000905
 80049e8:	3dcccccd 	.word	0x3dcccccd
 80049ec:	20000000 	.word	0x20000000
 80049f0:	0800cfd6 	.word	0x0800cfd6
 80049f4:	20000904 	.word	0x20000904
 80049f8:	2000064c 	.word	0x2000064c
 80049fc:	0800cfda 	.word	0x0800cfda
 8004a00:	48001400 	.word	0x48001400
 8004a04:	20000624 	.word	0x20000624
 8004a08:	200008fd 	.word	0x200008fd
 8004a0c:	2000064e 	.word	0x2000064e
 8004a10:	20000794 	.word	0x20000794
 8004a14:	0800cfde 	.word	0x0800cfde
 8004a18:	0800cfeb 	.word	0x0800cfeb
 8004a1c:	0800cff8 	.word	0x0800cff8
 8004a20:	0800d005 	.word	0x0800d005
 8004a24:	0800d012 	.word	0x0800d012
 8004a28:	0800d01f 	.word	0x0800d01f
 8004a2c:	0800d02c 	.word	0x0800d02c
 8004a30:	0800d039 	.word	0x0800d039
 8004a34:	20000661 	.word	0x20000661
 8004a38:	2000063c 	.word	0x2000063c
 8004a3c:	0800d046 	.word	0x0800d046
 8004a40:	20000906 	.word	0x20000906
 8004a44:	40533333 	.word	0x40533333
 8004a48:	4a9f      	ldr	r2, [pc, #636]	; (8004cc8 <main+0xa88>)
 8004a4a:	6011      	str	r1, [r2, #0]
      if(suma1==7) {suma1=8; valor_Encoder = 12.0;}
 8004a4c:	781a      	ldrb	r2, [r3, #0]
 8004a4e:	2a07      	cmp	r2, #7
 8004a50:	d000      	beq.n	8004a54 <main+0x814>
 8004a52:	e0fc      	b.n	8004c4e <main+0xa0e>
 8004a54:	3201      	adds	r2, #1
 8004a56:	701a      	strb	r2, [r3, #0]
 8004a58:	4b9b      	ldr	r3, [pc, #620]	; (8004cc8 <main+0xa88>)
 8004a5a:	4a9c      	ldr	r2, [pc, #624]	; (8004ccc <main+0xa8c>)
      if(suma1==11){suma1=0; valor_Encoder = 24.0;}
 8004a5c:	601a      	str	r2, [r3, #0]
      voltage = INA226_Vbus_DMA();
 8004a5e:	f7fe fcaf 	bl	80033c0 <INA226_Vbus_DMA>
 8004a62:	4b9b      	ldr	r3, [pc, #620]	; (8004cd0 <main+0xa90>)
      sprintf(buff,"SET:%2.1fV ",VoutMath);
 8004a64:	4d9b      	ldr	r5, [pc, #620]	; (8004cd4 <main+0xa94>)
      voltage = INA226_Vbus_DMA();
 8004a66:	6018      	str	r0, [r3, #0]
      sprintf(buff,"SET:%2.1fV ",VoutMath);
 8004a68:	6828      	ldr	r0, [r5, #0]
 8004a6a:	f7fe faf3 	bl	8003054 <__aeabi_f2d>
 8004a6e:	4c9a      	ldr	r4, [pc, #616]	; (8004cd8 <main+0xa98>)
 8004a70:	0002      	movs	r2, r0
 8004a72:	000b      	movs	r3, r1
 8004a74:	0020      	movs	r0, r4
 8004a76:	4999      	ldr	r1, [pc, #612]	; (8004cdc <main+0xa9c>)
 8004a78:	f004 f874 	bl	8008b64 <siprintf>
      OLED_Print_Text_DMA(0,0,2,buff);
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	0023      	movs	r3, r4
 8004a80:	2202      	movs	r2, #2
 8004a82:	0008      	movs	r0, r1
 8004a84:	f7fe fec8 	bl	8003818 <OLED_Print_Text_DMA>
      Vdac = 3.1677 - VoutMath*0.09825;//coloque R1=560k pero para mejorar los calculos utilizo el valor de 570k y obtuve esta formula
 8004a88:	6828      	ldr	r0, [r5, #0]
 8004a8a:	f7fe fae3 	bl	8003054 <__aeabi_f2d>
 8004a8e:	4a94      	ldr	r2, [pc, #592]	; (8004ce0 <main+0xaa0>)
 8004a90:	4b94      	ldr	r3, [pc, #592]	; (8004ce4 <main+0xaa4>)
 8004a92:	f7fd fbf1 	bl	8002278 <__aeabi_dmul>
 8004a96:	0002      	movs	r2, r0
 8004a98:	000b      	movs	r3, r1
 8004a9a:	4893      	ldr	r0, [pc, #588]	; (8004ce8 <main+0xaa8>)
 8004a9c:	4993      	ldr	r1, [pc, #588]	; (8004cec <main+0xaac>)
 8004a9e:	f7fd fead 	bl	80027fc <__aeabi_dsub>
 8004aa2:	f7fe fb1f 	bl	80030e4 <__aeabi_d2f>
 8004aa6:	4b92      	ldr	r3, [pc, #584]	; (8004cf0 <main+0xab0>)
 8004aa8:	6018      	str	r0, [r3, #0]
      encoder = Vdac * 4096.0/3.26;
 8004aaa:	f7fe fad3 	bl	8003054 <__aeabi_f2d>
 8004aae:	2200      	movs	r2, #0
 8004ab0:	4b90      	ldr	r3, [pc, #576]	; (8004cf4 <main+0xab4>)
 8004ab2:	f7fd fbe1 	bl	8002278 <__aeabi_dmul>
 8004ab6:	4a90      	ldr	r2, [pc, #576]	; (8004cf8 <main+0xab8>)
 8004ab8:	4b90      	ldr	r3, [pc, #576]	; (8004cfc <main+0xabc>)
 8004aba:	f7fc ffe3 	bl	8001a84 <__aeabi_ddiv>
 8004abe:	f7fe fb11 	bl	80030e4 <__aeabi_d2f>
 8004ac2:	4b8f      	ldr	r3, [pc, #572]	; (8004d00 <main+0xac0>)
 8004ac4:	6018      	str	r0, [r3, #0]
 8004ac6:	9305      	str	r3, [sp, #20]
      sprintf(buff,"%4.0f",encoder);
 8004ac8:	f7fe fac4 	bl	8003054 <__aeabi_f2d>
 8004acc:	4d8d      	ldr	r5, [pc, #564]	; (8004d04 <main+0xac4>)
 8004ace:	0002      	movs	r2, r0
 8004ad0:	000b      	movs	r3, r1
 8004ad2:	0020      	movs	r0, r4
 8004ad4:	0029      	movs	r1, r5
 8004ad6:	f004 f845 	bl	8008b64 <siprintf>
      OLED_Print_Text_DMA(6,96,1,buff);
 8004ada:	0023      	movs	r3, r4
 8004adc:	003a      	movs	r2, r7
 8004ade:	2160      	movs	r1, #96	; 0x60
 8004ae0:	2006      	movs	r0, #6
 8004ae2:	f7fe fe99 	bl	8003818 <OLED_Print_Text_DMA>
      sprintf(buff,"%4.0f",PWM);
 8004ae6:	4b88      	ldr	r3, [pc, #544]	; (8004d08 <main+0xac8>)
 8004ae8:	6818      	ldr	r0, [r3, #0]
 8004aea:	f7fe fab3 	bl	8003054 <__aeabi_f2d>
 8004aee:	0002      	movs	r2, r0
 8004af0:	000b      	movs	r3, r1
 8004af2:	0020      	movs	r0, r4
 8004af4:	0029      	movs	r1, r5
 8004af6:	f004 f835 	bl	8008b64 <siprintf>
      OLED_Print_Text_DMA(7,96,1,buff);
 8004afa:	0023      	movs	r3, r4
 8004afc:	003a      	movs	r2, r7
 8004afe:	2160      	movs	r1, #96	; 0x60
 8004b00:	2007      	movs	r0, #7
 8004b02:	f7fe fe89 	bl	8003818 <OLED_Print_Text_DMA>
      encoder = encoder - (8.0E-06 * encoder * encoder + 0.002 * encoder + 1.1844);
 8004b06:	9b05      	ldr	r3, [sp, #20]
 8004b08:	6818      	ldr	r0, [r3, #0]
 8004b0a:	f7fe faa3 	bl	8003054 <__aeabi_f2d>
 8004b0e:	0004      	movs	r4, r0
 8004b10:	000d      	movs	r5, r1
 8004b12:	4a7e      	ldr	r2, [pc, #504]	; (8004d0c <main+0xacc>)
 8004b14:	4b7e      	ldr	r3, [pc, #504]	; (8004d10 <main+0xad0>)
 8004b16:	f7fd fbaf 	bl	8002278 <__aeabi_dmul>
 8004b1a:	0022      	movs	r2, r4
 8004b1c:	002b      	movs	r3, r5
 8004b1e:	f7fd fbab 	bl	8002278 <__aeabi_dmul>
 8004b22:	4a7c      	ldr	r2, [pc, #496]	; (8004d14 <main+0xad4>)
 8004b24:	9006      	str	r0, [sp, #24]
 8004b26:	9107      	str	r1, [sp, #28]
 8004b28:	4b7b      	ldr	r3, [pc, #492]	; (8004d18 <main+0xad8>)
 8004b2a:	0020      	movs	r0, r4
 8004b2c:	0029      	movs	r1, r5
 8004b2e:	f7fd fba3 	bl	8002278 <__aeabi_dmul>
 8004b32:	0002      	movs	r2, r0
 8004b34:	000b      	movs	r3, r1
 8004b36:	9806      	ldr	r0, [sp, #24]
 8004b38:	9907      	ldr	r1, [sp, #28]
 8004b3a:	f7fc fc43 	bl	80013c4 <__aeabi_dadd>
 8004b3e:	4a77      	ldr	r2, [pc, #476]	; (8004d1c <main+0xadc>)
 8004b40:	4b77      	ldr	r3, [pc, #476]	; (8004d20 <main+0xae0>)
 8004b42:	f7fc fc3f 	bl	80013c4 <__aeabi_dadd>
 8004b46:	0002      	movs	r2, r0
 8004b48:	000b      	movs	r3, r1
 8004b4a:	0020      	movs	r0, r4
 8004b4c:	0029      	movs	r1, r5
 8004b4e:	f7fd fe55 	bl	80027fc <__aeabi_dsub>
 8004b52:	f7fe fac7 	bl	80030e4 <__aeabi_d2f>
 8004b56:	9b05      	ldr	r3, [sp, #20]
      for(uint8_t i=0; i<muestras; i++) adcVbat += HAL_ADC_GetValue(&hadc);//Leo 20 muestras del adc para tener una lectura mas precisa
 8004b58:	2400      	movs	r4, #0
      encoder = encoder - (8.0E-06 * encoder * encoder + 0.002 * encoder + 1.1844);
 8004b5a:	6018      	str	r0, [r3, #0]
      Control_Estabilizar();
 8004b5c:	f7ff f91a 	bl	8003d94 <Control_Estabilizar>
	  HAL_ADC_Start(&hadc);
 8004b60:	4b70      	ldr	r3, [pc, #448]	; (8004d24 <main+0xae4>)
 8004b62:	0018      	movs	r0, r3
 8004b64:	9306      	str	r3, [sp, #24]
 8004b66:	f000 fca5 	bl	80054b4 <HAL_ADC_Start>
      for(uint8_t i=0; i<muestras; i++) adcVbat += HAL_ADC_GetValue(&hadc);//Leo 20 muestras del adc para tener una lectura mas precisa
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	9305      	str	r3, [sp, #20]
 8004b6e:	4b6e      	ldr	r3, [pc, #440]	; (8004d28 <main+0xae8>)
	  adcVbat=0;
 8004b70:	4d6e      	ldr	r5, [pc, #440]	; (8004d2c <main+0xaec>)
      for(uint8_t i=0; i<muestras; i++) adcVbat += HAL_ADC_GetValue(&hadc);//Leo 20 muestras del adc para tener una lectura mas precisa
 8004b72:	7818      	ldrb	r0, [r3, #0]
 8004b74:	9b05      	ldr	r3, [sp, #20]
	  adcVbat=0;
 8004b76:	602c      	str	r4, [r5, #0]
      for(uint8_t i=0; i<muestras; i++) adcVbat += HAL_ADC_GetValue(&hadc);//Leo 20 muestras del adc para tener una lectura mas precisa
 8004b78:	4298      	cmp	r0, r3
 8004b7a:	d900      	bls.n	8004b7e <main+0x93e>
 8004b7c:	e080      	b.n	8004c80 <main+0xa40>
      adcVbat /= muestras;
 8004b7e:	f7fc fb87 	bl	8001290 <__aeabi_i2f>
 8004b82:	1c01      	adds	r1, r0, #0
 8004b84:	1c20      	adds	r0, r4, #0
 8004b86:	f7fb feab 	bl	80008e0 <__aeabi_fdiv>
 8004b8a:	6028      	str	r0, [r5, #0]
      Vbat = adcVbat*0.05826;//(3.3/2^8)*4.3 ------ divisor resistivo V*10k/(10K+33K) -> V = 4.3
 8004b8c:	f7fe fa62 	bl	8003054 <__aeabi_f2d>
 8004b90:	4b67      	ldr	r3, [pc, #412]	; (8004d30 <main+0xaf0>)
 8004b92:	4a68      	ldr	r2, [pc, #416]	; (8004d34 <main+0xaf4>)
 8004b94:	f7fd fb70 	bl	8002278 <__aeabi_dmul>
 8004b98:	f7fe faa4 	bl	80030e4 <__aeabi_d2f>
 8004b9c:	4c66      	ldr	r4, [pc, #408]	; (8004d38 <main+0xaf8>)
 8004b9e:	6020      	str	r0, [r4, #0]
      if(timerShowAllData>=7){//cada x * 100ms
 8004ba0:	4c66      	ldr	r4, [pc, #408]	; (8004d3c <main+0xafc>)
 8004ba2:	8823      	ldrh	r3, [r4, #0]
 8004ba4:	2b06      	cmp	r3, #6
 8004ba6:	d907      	bls.n	8004bb8 <main+0x978>
    	  medirVoltage();
 8004ba8:	f7ff f866 	bl	8003c78 <medirVoltage>
		  medirCorriente();
 8004bac:	f7ff f8a4 	bl	8003cf8 <medirCorriente>
		  medirPotencia();
 8004bb0:	f7ff f8ca 	bl	8003d48 <medirPotencia>
		  timerShowAllData=0;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	8023      	strh	r3, [r4, #0]
      if(timerShowIconBattery>=1){//cada 1 segundo
 8004bb8:	4c61      	ldr	r4, [pc, #388]	; (8004d40 <main+0xb00>)
 8004bba:	8823      	ldrh	r3, [r4, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d100      	bne.n	8004bc2 <main+0x982>
 8004bc0:	e589      	b.n	80046d6 <main+0x496>
    	  if(HAL_GPIO_ReadPin(stateCharger_GPIO_Port, stateCharger_Pin)==0){
 8004bc2:	2180      	movs	r1, #128	; 0x80
 8004bc4:	485f      	ldr	r0, [pc, #380]	; (8004d44 <main+0xb04>)
 8004bc6:	00c9      	lsls	r1, r1, #3
 8004bc8:	f001 f8f8 	bl	8005dbc <HAL_GPIO_ReadPin>
 8004bcc:	2800      	cmp	r0, #0
 8004bce:	d165      	bne.n	8004c9c <main+0xa5c>
    		  medirCargaBateria();
 8004bd0:	f7ff fab8 	bl	8004144 <medirCargaBateria>
    	  timerShowIconBattery=0;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	8023      	strh	r3, [r4, #0]
 8004bd8:	e57b      	b.n	80046d2 <main+0x492>
    		  powerSupply++;
 8004bda:	9b05      	ldr	r3, [sp, #20]
    		  contButton=0;
 8004bdc:	8010      	strh	r0, [r2, #0]
    		  powerSupply++;
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	9a05      	ldr	r2, [sp, #20]
 8004be2:	3301      	adds	r3, #1
 8004be4:	7013      	strb	r3, [r2, #0]
 8004be6:	e5be      	b.n	8004766 <main+0x526>
				  if(HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin) == 0 && mem1 == 0){mem1 = 1;}
 8004be8:	2180      	movs	r1, #128	; 0x80
 8004bea:	0030      	movs	r0, r6
 8004bec:	0089      	lsls	r1, r1, #2
 8004bee:	f001 f8e5 	bl	8005dbc <HAL_GPIO_ReadPin>
 8004bf2:	4c55      	ldr	r4, [pc, #340]	; (8004d48 <main+0xb08>)
 8004bf4:	7823      	ldrb	r3, [r4, #0]
 8004bf6:	4318      	orrs	r0, r3
 8004bf8:	b2c0      	uxtb	r0, r0
 8004bfa:	2800      	cmp	r0, #0
 8004bfc:	d100      	bne.n	8004c00 <main+0x9c0>
 8004bfe:	7025      	strb	r5, [r4, #0]
				  if(HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin) == 1 && mem1 == 1 && contSW1<=10){sumaSW1++; mem1 = 0; contSW1=0;}
 8004c00:	2180      	movs	r1, #128	; 0x80
 8004c02:	0030      	movs	r0, r6
 8004c04:	0089      	lsls	r1, r1, #2
 8004c06:	f001 f8d9 	bl	8005dbc <HAL_GPIO_ReadPin>
 8004c0a:	4b50      	ldr	r3, [pc, #320]	; (8004d4c <main+0xb0c>)
 8004c0c:	2801      	cmp	r0, #1
 8004c0e:	d10c      	bne.n	8004c2a <main+0x9ea>
 8004c10:	7821      	ldrb	r1, [r4, #0]
 8004c12:	781a      	ldrb	r2, [r3, #0]
 8004c14:	2901      	cmp	r1, #1
 8004c16:	d108      	bne.n	8004c2a <main+0x9ea>
 8004c18:	494d      	ldr	r1, [pc, #308]	; (8004d50 <main+0xb10>)
 8004c1a:	7808      	ldrb	r0, [r1, #0]
 8004c1c:	280a      	cmp	r0, #10
 8004c1e:	d804      	bhi.n	8004c2a <main+0x9ea>
 8004c20:	3201      	adds	r2, #1
 8004c22:	701a      	strb	r2, [r3, #0]
 8004c24:	2200      	movs	r2, #0
 8004c26:	7022      	strb	r2, [r4, #0]
 8004c28:	700a      	strb	r2, [r1, #0]
				  if(sumaSW1==1) {sumaSW1=0; OLED_Clear_DMA(); flagSW1=0;}
 8004c2a:	781a      	ldrb	r2, [r3, #0]
 8004c2c:	2a01      	cmp	r2, #1
 8004c2e:	d000      	beq.n	8004c32 <main+0x9f2>
 8004c30:	e66a      	b.n	8004908 <main+0x6c8>
 8004c32:	2400      	movs	r4, #0
 8004c34:	701c      	strb	r4, [r3, #0]
 8004c36:	f7fe fd8f 	bl	8003758 <OLED_Clear_DMA>
 8004c3a:	9b06      	ldr	r3, [sp, #24]
 8004c3c:	701c      	strb	r4, [r3, #0]
 8004c3e:	e663      	b.n	8004908 <main+0x6c8>
      if(suma1==3) {suma1=4; valor_Encoder = 5.0; }
 8004c40:	2a03      	cmp	r2, #3
 8004c42:	d10c      	bne.n	8004c5e <main+0xa1e>
 8004c44:	3201      	adds	r2, #1
 8004c46:	4943      	ldr	r1, [pc, #268]	; (8004d54 <main+0xb14>)
 8004c48:	701a      	strb	r2, [r3, #0]
 8004c4a:	4a1f      	ldr	r2, [pc, #124]	; (8004cc8 <main+0xa88>)
 8004c4c:	6011      	str	r1, [r2, #0]
      if(suma1==9) {suma1=10;valor_Encoder = 15.0;}
 8004c4e:	781a      	ldrb	r2, [r3, #0]
 8004c50:	2a09      	cmp	r2, #9
 8004c52:	d10c      	bne.n	8004c6e <main+0xa2e>
 8004c54:	3201      	adds	r2, #1
 8004c56:	701a      	strb	r2, [r3, #0]
 8004c58:	4b1b      	ldr	r3, [pc, #108]	; (8004cc8 <main+0xa88>)
 8004c5a:	4a3f      	ldr	r2, [pc, #252]	; (8004d58 <main+0xb18>)
 8004c5c:	e6fe      	b.n	8004a5c <main+0x81c>
      if(suma1==5) {suma1=6; valor_Encoder = 9.0; }
 8004c5e:	2a05      	cmp	r2, #5
 8004c60:	d000      	beq.n	8004c64 <main+0xa24>
 8004c62:	e6f3      	b.n	8004a4c <main+0x80c>
 8004c64:	3201      	adds	r2, #1
 8004c66:	493d      	ldr	r1, [pc, #244]	; (8004d5c <main+0xb1c>)
 8004c68:	701a      	strb	r2, [r3, #0]
 8004c6a:	4a17      	ldr	r2, [pc, #92]	; (8004cc8 <main+0xa88>)
 8004c6c:	6011      	str	r1, [r2, #0]
      if(suma1==11){suma1=0; valor_Encoder = 24.0;}
 8004c6e:	781a      	ldrb	r2, [r3, #0]
 8004c70:	2a0b      	cmp	r2, #11
 8004c72:	d000      	beq.n	8004c76 <main+0xa36>
 8004c74:	e6f3      	b.n	8004a5e <main+0x81e>
 8004c76:	2200      	movs	r2, #0
 8004c78:	701a      	strb	r2, [r3, #0]
 8004c7a:	4b13      	ldr	r3, [pc, #76]	; (8004cc8 <main+0xa88>)
 8004c7c:	4a38      	ldr	r2, [pc, #224]	; (8004d60 <main+0xb20>)
 8004c7e:	e6ed      	b.n	8004a5c <main+0x81c>
      for(uint8_t i=0; i<muestras; i++) adcVbat += HAL_ADC_GetValue(&hadc);//Leo 20 muestras del adc para tener una lectura mas precisa
 8004c80:	9806      	ldr	r0, [sp, #24]
 8004c82:	f000 fc43 	bl	800550c <HAL_ADC_GetValue>
 8004c86:	f7fc fb55 	bl	8001334 <__aeabi_ui2f>
 8004c8a:	6829      	ldr	r1, [r5, #0]
 8004c8c:	f7fb fc88 	bl	80005a0 <__aeabi_fadd>
 8004c90:	9d05      	ldr	r5, [sp, #20]
 8004c92:	1c04      	adds	r4, r0, #0
 8004c94:	3501      	adds	r5, #1
 8004c96:	b2eb      	uxtb	r3, r5
 8004c98:	9305      	str	r3, [sp, #20]
 8004c9a:	e768      	b.n	8004b6e <main+0x92e>
    		  flagBattery = !flagBattery;
 8004c9c:	4b31      	ldr	r3, [pc, #196]	; (8004d64 <main+0xb24>)
 8004c9e:	7818      	ldrb	r0, [r3, #0]
 8004ca0:	4242      	negs	r2, r0
 8004ca2:	4142      	adcs	r2, r0
 8004ca4:	701a      	strb	r2, [r3, #0]
    		  if(flagBattery){
 8004ca6:	2310      	movs	r3, #16
 8004ca8:	2800      	cmp	r0, #0
 8004caa:	d106      	bne.n	8004cba <main+0xa7a>
    			  OLED_Imagen_Small_DMA(0, 96, chargerBattery, 32, 16);
 8004cac:	2160      	movs	r1, #96	; 0x60
 8004cae:	4a2e      	ldr	r2, [pc, #184]	; (8004d68 <main+0xb28>)
 8004cb0:	9300      	str	r3, [sp, #0]
 8004cb2:	18db      	adds	r3, r3, r3
    			  OLED_Imagen_Small_DMA(0, 96, chargerBattery2, 32, 16);
 8004cb4:	f7fe fe64 	bl	8003980 <OLED_Imagen_Small_DMA>
 8004cb8:	e78c      	b.n	8004bd4 <main+0x994>
 8004cba:	9300      	str	r3, [sp, #0]
 8004cbc:	2160      	movs	r1, #96	; 0x60
 8004cbe:	2320      	movs	r3, #32
 8004cc0:	2000      	movs	r0, #0
 8004cc2:	4a2a      	ldr	r2, [pc, #168]	; (8004d6c <main+0xb2c>)
 8004cc4:	e7f6      	b.n	8004cb4 <main+0xa74>
 8004cc6:	46c0      	nop			; (mov r8, r8)
 8004cc8:	2000000c 	.word	0x2000000c
 8004ccc:	41400000 	.word	0x41400000
 8004cd0:	2000090c 	.word	0x2000090c
 8004cd4:	20000634 	.word	0x20000634
 8004cd8:	2000063c 	.word	0x2000063c
 8004cdc:	0800d04c 	.word	0x0800d04c
 8004ce0:	78d4fdf4 	.word	0x78d4fdf4
 8004ce4:	3fb926e9 	.word	0x3fb926e9
 8004ce8:	18fc5048 	.word	0x18fc5048
 8004cec:	40095773 	.word	0x40095773
 8004cf0:	20000630 	.word	0x20000630
 8004cf4:	40b00000 	.word	0x40b00000
 8004cf8:	e147ae14 	.word	0xe147ae14
 8004cfc:	400a147a 	.word	0x400a147a
 8004d00:	2000065c 	.word	0x2000065c
 8004d04:	0800d058 	.word	0x0800d058
 8004d08:	20000628 	.word	0x20000628
 8004d0c:	a0b5ed8d 	.word	0xa0b5ed8d
 8004d10:	3ee0c6f7 	.word	0x3ee0c6f7
 8004d14:	d2f1a9fc 	.word	0xd2f1a9fc
 8004d18:	3f60624d 	.word	0x3f60624d
 8004d1c:	6a161e4f 	.word	0x6a161e4f
 8004d20:	3ff2f34d 	.word	0x3ff2f34d
 8004d24:	20000664 	.word	0x20000664
 8004d28:	20000010 	.word	0x20000010
 8004d2c:	20000638 	.word	0x20000638
 8004d30:	3fadd441 	.word	0x3fadd441
 8004d34:	355475a3 	.word	0x355475a3
 8004d38:	2000062c 	.word	0x2000062c
 8004d3c:	20000908 	.word	0x20000908
 8004d40:	2000090a 	.word	0x2000090a
 8004d44:	48000400 	.word	0x48000400
 8004d48:	200008fd 	.word	0x200008fd
 8004d4c:	20000907 	.word	0x20000907
 8004d50:	2000064e 	.word	0x2000064e
 8004d54:	40a00000 	.word	0x40a00000
 8004d58:	41700000 	.word	0x41700000
 8004d5c:	41100000 	.word	0x41100000
 8004d60:	41c00000 	.word	0x41c00000
 8004d64:	20000660 	.word	0x20000660
 8004d68:	0800d59e 	.word	0x0800d59e
 8004d6c:	0800d5de 	.word	0x0800d5de

08004d70 <Error_Handler>:
 8004d70:	b672      	cpsid	i
  while (1)
 8004d72:	e7fe      	b.n	8004d72 <Error_Handler+0x2>

08004d74 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d74:	2101      	movs	r1, #1
 8004d76:	4b0a      	ldr	r3, [pc, #40]	; (8004da0 <HAL_MspInit+0x2c>)
{
 8004d78:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d7a:	699a      	ldr	r2, [r3, #24]
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	619a      	str	r2, [r3, #24]
 8004d80:	699a      	ldr	r2, [r3, #24]
 8004d82:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d84:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d86:	9200      	str	r2, [sp, #0]
 8004d88:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d8a:	69da      	ldr	r2, [r3, #28]
 8004d8c:	0549      	lsls	r1, r1, #21
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	61da      	str	r2, [r3, #28]
 8004d92:	69db      	ldr	r3, [r3, #28]
 8004d94:	400b      	ands	r3, r1
 8004d96:	9301      	str	r3, [sp, #4]
 8004d98:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d9a:	b002      	add	sp, #8
 8004d9c:	4770      	bx	lr
 8004d9e:	46c0      	nop			; (mov r8, r8)
 8004da0:	40021000 	.word	0x40021000

08004da4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004da4:	b510      	push	{r4, lr}
 8004da6:	0004      	movs	r4, r0
 8004da8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004daa:	2214      	movs	r2, #20
 8004dac:	2100      	movs	r1, #0
 8004dae:	a803      	add	r0, sp, #12
 8004db0:	f003 ff44 	bl	8008c3c <memset>
  if(hadc->Instance==ADC1)
 8004db4:	4b10      	ldr	r3, [pc, #64]	; (8004df8 <HAL_ADC_MspInit+0x54>)
 8004db6:	6822      	ldr	r2, [r4, #0]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d11b      	bne.n	8004df4 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004dbc:	2180      	movs	r1, #128	; 0x80
 8004dbe:	4b0f      	ldr	r3, [pc, #60]	; (8004dfc <HAL_ADC_MspInit+0x58>)
 8004dc0:	0089      	lsls	r1, r1, #2
 8004dc2:	699a      	ldr	r2, [r3, #24]
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dc4:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	619a      	str	r2, [r3, #24]
 8004dca:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dcc:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004dce:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dd0:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004dd2:	9201      	str	r2, [sp, #4]
 8004dd4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dd6:	695a      	ldr	r2, [r3, #20]
 8004dd8:	0289      	lsls	r1, r1, #10
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	615a      	str	r2, [r3, #20]
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	400b      	ands	r3, r1
 8004de2:	9302      	str	r3, [sp, #8]
 8004de4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004de6:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004de8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004dea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004dec:	3302      	adds	r3, #2
 8004dee:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004df0:	f000 ff2c 	bl	8005c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004df4:	b008      	add	sp, #32
 8004df6:	bd10      	pop	{r4, pc}
 8004df8:	40012400 	.word	0x40012400
 8004dfc:	40021000 	.word	0x40021000

08004e00 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8004e00:	b570      	push	{r4, r5, r6, lr}
 8004e02:	0005      	movs	r5, r0
 8004e04:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e06:	2214      	movs	r2, #20
 8004e08:	2100      	movs	r1, #0
 8004e0a:	a803      	add	r0, sp, #12
 8004e0c:	f003 ff16 	bl	8008c3c <memset>
  if(hdac->Instance==DAC)
 8004e10:	4b21      	ldr	r3, [pc, #132]	; (8004e98 <HAL_DAC_MspInit+0x98>)
 8004e12:	682a      	ldr	r2, [r5, #0]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d13c      	bne.n	8004e92 <HAL_DAC_MspInit+0x92>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8004e18:	2180      	movs	r1, #128	; 0x80
 8004e1a:	4b20      	ldr	r3, [pc, #128]	; (8004e9c <HAL_DAC_MspInit+0x9c>)
 8004e1c:	0589      	lsls	r1, r1, #22
 8004e1e:	69da      	ldr	r2, [r3, #28]
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e20:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_DAC1_CLK_ENABLE();
 8004e22:	430a      	orrs	r2, r1
 8004e24:	61da      	str	r2, [r3, #28]
 8004e26:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004e28:	2610      	movs	r6, #16
    __HAL_RCC_DAC1_CLK_ENABLE();
 8004e2a:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e2c:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_DAC1_CLK_ENABLE();
 8004e2e:	9201      	str	r2, [sp, #4]
 8004e30:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e32:	695a      	ldr	r2, [r3, #20]
 8004e34:	0289      	lsls	r1, r1, #10
 8004e36:	430a      	orrs	r2, r1
 8004e38:	615a      	str	r2, [r3, #20]
 8004e3a:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e3c:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e3e:	400b      	ands	r3, r1
 8004e40:	9302      	str	r3, [sp, #8]
 8004e42:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e44:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e46:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e48:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004e4a:	9603      	str	r6, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e4c:	f000 fefe 	bl	8005c4c <HAL_GPIO_Init>
    /* DAC DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8004e50:	2280      	movs	r2, #128	; 0x80
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8004e52:	4c13      	ldr	r4, [pc, #76]	; (8004ea0 <HAL_DAC_MspInit+0xa0>)
 8004e54:	4b13      	ldr	r3, [pc, #76]	; (8004ea4 <HAL_DAC_MspInit+0xa4>)
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8004e56:	60e2      	str	r2, [r4, #12]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004e58:	1892      	adds	r2, r2, r2
 8004e5a:	6122      	str	r2, [r4, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004e5c:	2280      	movs	r2, #128	; 0x80
 8004e5e:	00d2      	lsls	r2, r2, #3
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8004e60:	6023      	str	r3, [r4, #0]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004e62:	6162      	str	r2, [r4, #20]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e64:	2300      	movs	r3, #0
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8004e66:	2220      	movs	r2, #32
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8004e68:	0020      	movs	r0, r4
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004e6a:	6066      	str	r6, [r4, #4]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e6c:	60a3      	str	r3, [r4, #8]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8004e6e:	61a2      	str	r2, [r4, #24]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8004e70:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8004e72:	f000 fcf3 	bl	800585c <HAL_DMA_Init>
 8004e76:	2800      	cmp	r0, #0
 8004e78:	d001      	beq.n	8004e7e <HAL_DAC_MspInit+0x7e>
    {
      Error_Handler();
 8004e7a:	f7ff ff79 	bl	8004d70 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004e7e:	2200      	movs	r2, #0
 8004e80:	2011      	movs	r0, #17
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8004e82:	60ac      	str	r4, [r5, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004e84:	0011      	movs	r1, r2
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8004e86:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004e88:	f000 fbc8 	bl	800561c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004e8c:	2011      	movs	r0, #17
 8004e8e:	f000 fbef 	bl	8005670 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8004e92:	b008      	add	sp, #32
 8004e94:	bd70      	pop	{r4, r5, r6, pc}
 8004e96:	46c0      	nop			; (mov r8, r8)
 8004e98:	40007400 	.word	0x40007400
 8004e9c:	40021000 	.word	0x40021000
 8004ea0:	200006b8 	.word	0x200006b8
 8004ea4:	40020030 	.word	0x40020030

08004ea8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004ea8:	b530      	push	{r4, r5, lr}
 8004eaa:	0005      	movs	r5, r0
 8004eac:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004eae:	2214      	movs	r2, #20
 8004eb0:	2100      	movs	r1, #0
 8004eb2:	a803      	add	r0, sp, #12
 8004eb4:	f003 fec2 	bl	8008c3c <memset>
  if(hi2c->Instance==I2C1)
 8004eb8:	4b21      	ldr	r3, [pc, #132]	; (8004f40 <HAL_I2C_MspInit+0x98>)
 8004eba:	682a      	ldr	r2, [r5, #0]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d13d      	bne.n	8004f3c <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ec0:	2280      	movs	r2, #128	; 0x80
 8004ec2:	4c20      	ldr	r4, [pc, #128]	; (8004f44 <HAL_I2C_MspInit+0x9c>)
 8004ec4:	02d2      	lsls	r2, r2, #11
 8004ec6:	6963      	ldr	r3, [r4, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ec8:	481f      	ldr	r0, [pc, #124]	; (8004f48 <HAL_I2C_MspInit+0xa0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	6163      	str	r3, [r4, #20]
 8004ece:	6963      	ldr	r3, [r4, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ed0:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	9301      	str	r3, [sp, #4]
 8004ed6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004ed8:	23c0      	movs	r3, #192	; 0xc0
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ede:	2312      	movs	r3, #18
 8004ee0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004ee2:	3b0f      	subs	r3, #15
 8004ee4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8004ee6:	3b02      	subs	r3, #2
 8004ee8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004eea:	f000 feaf 	bl	8005c4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004eee:	2280      	movs	r2, #128	; 0x80
 8004ef0:	69e3      	ldr	r3, [r4, #28]
 8004ef2:	0392      	lsls	r2, r2, #14
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	61e3      	str	r3, [r4, #28]
 8004ef8:	69e3      	ldr	r3, [r4, #28]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8004efa:	4c14      	ldr	r4, [pc, #80]	; (8004f4c <HAL_I2C_MspInit+0xa4>)
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004efc:	4013      	ands	r3, r2
 8004efe:	9302      	str	r3, [sp, #8]
 8004f00:	9b02      	ldr	r3, [sp, #8]
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8004f02:	4b13      	ldr	r3, [pc, #76]	; (8004f50 <HAL_I2C_MspInit+0xa8>)
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004f04:	2280      	movs	r2, #128	; 0x80
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8004f06:	6023      	str	r3, [r4, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004f08:	2310      	movs	r3, #16
 8004f0a:	6063      	str	r3, [r4, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f0c:	2300      	movs	r3, #0
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8004f0e:	0020      	movs	r0, r4
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f10:	60a3      	str	r3, [r4, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004f12:	60e2      	str	r2, [r4, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004f14:	6123      	str	r3, [r4, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004f16:	6163      	str	r3, [r4, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8004f18:	61a3      	str	r3, [r4, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004f1a:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8004f1c:	f000 fc9e 	bl	800585c <HAL_DMA_Init>
 8004f20:	2800      	cmp	r0, #0
 8004f22:	d001      	beq.n	8004f28 <HAL_I2C_MspInit+0x80>
    {
      Error_Handler();
 8004f24:	f7ff ff24 	bl	8004d70 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8004f28:	2200      	movs	r2, #0
 8004f2a:	2017      	movs	r0, #23
 8004f2c:	0011      	movs	r1, r2
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8004f2e:	63ac      	str	r4, [r5, #56]	; 0x38
 8004f30:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8004f32:	f000 fb73 	bl	800561c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8004f36:	2017      	movs	r0, #23
 8004f38:	f000 fb9a 	bl	8005670 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004f3c:	b009      	add	sp, #36	; 0x24
 8004f3e:	bd30      	pop	{r4, r5, pc}
 8004f40:	40005400 	.word	0x40005400
 8004f44:	40021000 	.word	0x40021000
 8004f48:	48000400 	.word	0x48000400
 8004f4c:	200006fc 	.word	0x200006fc
 8004f50:	4002001c 	.word	0x4002001c

08004f54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004f54:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if(htim_base->Instance==TIM6)
 8004f56:	6803      	ldr	r3, [r0, #0]
 8004f58:	4a2f      	ldr	r2, [pc, #188]	; (8005018 <HAL_TIM_Base_MspInit+0xc4>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d111      	bne.n	8004f82 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004f5e:	2110      	movs	r1, #16
 8004f60:	4b2e      	ldr	r3, [pc, #184]	; (800501c <HAL_TIM_Base_MspInit+0xc8>)
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004f62:	2011      	movs	r0, #17
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004f64:	69da      	ldr	r2, [r3, #28]
 8004f66:	430a      	orrs	r2, r1
 8004f68:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004f6a:	2200      	movs	r2, #0
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004f6c:	69db      	ldr	r3, [r3, #28]
 8004f6e:	400b      	ands	r3, r1
 8004f70:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004f72:	0011      	movs	r1, r2
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004f74:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004f76:	f000 fb51 	bl	800561c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004f7a:	2011      	movs	r0, #17
  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8004f7c:	f000 fb78 	bl	8005670 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8004f80:	e020      	b.n	8004fc4 <HAL_TIM_Base_MspInit+0x70>
  else if(htim_base->Instance==TIM14)
 8004f82:	4a27      	ldr	r2, [pc, #156]	; (8005020 <HAL_TIM_Base_MspInit+0xcc>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d110      	bne.n	8004faa <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004f88:	2180      	movs	r1, #128	; 0x80
 8004f8a:	4b24      	ldr	r3, [pc, #144]	; (800501c <HAL_TIM_Base_MspInit+0xc8>)
 8004f8c:	0049      	lsls	r1, r1, #1
 8004f8e:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8004f90:	2013      	movs	r0, #19
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004f92:	430a      	orrs	r2, r1
 8004f94:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8004f96:	2200      	movs	r2, #0
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004f98:	69db      	ldr	r3, [r3, #28]
 8004f9a:	400b      	ands	r3, r1
 8004f9c:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8004f9e:	0011      	movs	r1, r2
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004fa0:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8004fa2:	f000 fb3b 	bl	800561c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8004fa6:	2013      	movs	r0, #19
 8004fa8:	e7e8      	b.n	8004f7c <HAL_TIM_Base_MspInit+0x28>
  else if(htim_base->Instance==TIM15)
 8004faa:	4a1e      	ldr	r2, [pc, #120]	; (8005024 <HAL_TIM_Base_MspInit+0xd0>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d10b      	bne.n	8004fc8 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004fb0:	2180      	movs	r1, #128	; 0x80
 8004fb2:	4b1a      	ldr	r3, [pc, #104]	; (800501c <HAL_TIM_Base_MspInit+0xc8>)
 8004fb4:	0249      	lsls	r1, r1, #9
 8004fb6:	699a      	ldr	r2, [r3, #24]
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	619a      	str	r2, [r3, #24]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	400b      	ands	r3, r1
 8004fc0:	9303      	str	r3, [sp, #12]
 8004fc2:	9b03      	ldr	r3, [sp, #12]
}
 8004fc4:	b007      	add	sp, #28
 8004fc6:	bd00      	pop	{pc}
  else if(htim_base->Instance==TIM16)
 8004fc8:	4a17      	ldr	r2, [pc, #92]	; (8005028 <HAL_TIM_Base_MspInit+0xd4>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d110      	bne.n	8004ff0 <HAL_TIM_Base_MspInit+0x9c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004fce:	2180      	movs	r1, #128	; 0x80
 8004fd0:	4b12      	ldr	r3, [pc, #72]	; (800501c <HAL_TIM_Base_MspInit+0xc8>)
 8004fd2:	0289      	lsls	r1, r1, #10
 8004fd4:	699a      	ldr	r2, [r3, #24]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8004fd6:	2015      	movs	r0, #21
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	619a      	str	r2, [r3, #24]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8004fdc:	2200      	movs	r2, #0
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004fde:	699b      	ldr	r3, [r3, #24]
 8004fe0:	400b      	ands	r3, r1
 8004fe2:	9304      	str	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8004fe4:	0011      	movs	r1, r2
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004fe6:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8004fe8:	f000 fb18 	bl	800561c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8004fec:	2015      	movs	r0, #21
 8004fee:	e7c5      	b.n	8004f7c <HAL_TIM_Base_MspInit+0x28>
  else if(htim_base->Instance==TIM17)
 8004ff0:	4a0e      	ldr	r2, [pc, #56]	; (800502c <HAL_TIM_Base_MspInit+0xd8>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d1e6      	bne.n	8004fc4 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8004ff6:	2180      	movs	r1, #128	; 0x80
 8004ff8:	4b08      	ldr	r3, [pc, #32]	; (800501c <HAL_TIM_Base_MspInit+0xc8>)
 8004ffa:	02c9      	lsls	r1, r1, #11
 8004ffc:	699a      	ldr	r2, [r3, #24]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8004ffe:	2016      	movs	r0, #22
    __HAL_RCC_TIM17_CLK_ENABLE();
 8005000:	430a      	orrs	r2, r1
 8005002:	619a      	str	r2, [r3, #24]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8005004:	2200      	movs	r2, #0
    __HAL_RCC_TIM17_CLK_ENABLE();
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	400b      	ands	r3, r1
 800500a:	9305      	str	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 800500c:	0011      	movs	r1, r2
    __HAL_RCC_TIM17_CLK_ENABLE();
 800500e:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8005010:	f000 fb04 	bl	800561c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8005014:	2016      	movs	r0, #22
 8005016:	e7b1      	b.n	8004f7c <HAL_TIM_Base_MspInit+0x28>
 8005018:	40001000 	.word	0x40001000
 800501c:	40021000 	.word	0x40021000
 8005020:	40002000 	.word	0x40002000
 8005024:	40014000 	.word	0x40014000
 8005028:	40014400 	.word	0x40014400
 800502c:	40014800 	.word	0x40014800

08005030 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005030:	b510      	push	{r4, lr}
 8005032:	0004      	movs	r4, r0
 8005034:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005036:	2214      	movs	r2, #20
 8005038:	2100      	movs	r1, #0
 800503a:	a801      	add	r0, sp, #4
 800503c:	f003 fdfe 	bl	8008c3c <memset>
  if(htim->Instance==TIM15)
 8005040:	4b0c      	ldr	r3, [pc, #48]	; (8005074 <HAL_TIM_MspPostInit+0x44>)
 8005042:	6822      	ldr	r2, [r4, #0]
 8005044:	429a      	cmp	r2, r3
 8005046:	d112      	bne.n	800506e <HAL_TIM_MspPostInit+0x3e>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005048:	2180      	movs	r1, #128	; 0x80
 800504a:	4b0b      	ldr	r3, [pc, #44]	; (8005078 <HAL_TIM_MspPostInit+0x48>)
 800504c:	0289      	lsls	r1, r1, #10
 800504e:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM15;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005050:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005052:	430a      	orrs	r2, r1
 8005054:	615a      	str	r2, [r3, #20]
 8005056:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005058:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800505a:	400b      	ands	r3, r1
 800505c:	9300      	str	r3, [sp, #0]
 800505e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005060:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005062:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005064:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005066:	3b02      	subs	r3, #2
 8005068:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800506a:	f000 fdef 	bl	8005c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800506e:	b006      	add	sp, #24
 8005070:	bd10      	pop	{r4, pc}
 8005072:	46c0      	nop			; (mov r8, r8)
 8005074:	40014000 	.word	0x40014000
 8005078:	40021000 	.word	0x40021000

0800507c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800507c:	e7fe      	b.n	800507c <NMI_Handler>

0800507e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800507e:	e7fe      	b.n	800507e <HardFault_Handler>

08005080 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005080:	4770      	bx	lr

08005082 <PendSV_Handler>:
 8005082:	4770      	bx	lr

08005084 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005084:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005086:	f000 f8fd 	bl	8005284 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800508a:	bd10      	pop	{r4, pc}

0800508c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800508c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_OVER_CURRENT_Pin);
 800508e:	2010      	movs	r0, #16
 8005090:	f000 fea0 	bl	8005dd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8005094:	bd10      	pop	{r4, pc}
	...

08005098 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8005098:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800509a:	4803      	ldr	r0, [pc, #12]	; (80050a8 <DMA1_Channel2_3_IRQHandler+0x10>)
 800509c:	f000 fc71 	bl	8005982 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80050a0:	4802      	ldr	r0, [pc, #8]	; (80050ac <DMA1_Channel2_3_IRQHandler+0x14>)
 80050a2:	f000 fc6e 	bl	8005982 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80050a6:	bd10      	pop	{r4, pc}
 80050a8:	200006fc 	.word	0x200006fc
 80050ac:	200006b8 	.word	0x200006b8

080050b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80050b0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80050b2:	4803      	ldr	r0, [pc, #12]	; (80050c0 <TIM6_DAC_IRQHandler+0x10>)
 80050b4:	f002 fc5d 	bl	8007972 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 80050b8:	4802      	ldr	r0, [pc, #8]	; (80050c4 <TIM6_DAC_IRQHandler+0x14>)
 80050ba:	f000 fbb5 	bl	8005828 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80050be:	bd10      	pop	{r4, pc}
 80050c0:	200008b4 	.word	0x200008b4
 80050c4:	200006a4 	.word	0x200006a4

080050c8 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80050c8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80050ca:	4802      	ldr	r0, [pc, #8]	; (80050d4 <TIM14_IRQHandler+0xc>)
 80050cc:	f002 fc51 	bl	8007972 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80050d0:	bd10      	pop	{r4, pc}
 80050d2:	46c0      	nop			; (mov r8, r8)
 80050d4:	20000794 	.word	0x20000794

080050d8 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80050d8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80050da:	4802      	ldr	r0, [pc, #8]	; (80050e4 <TIM16_IRQHandler+0xc>)
 80050dc:	f002 fc49 	bl	8007972 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80050e0:	bd10      	pop	{r4, pc}
 80050e2:	46c0      	nop			; (mov r8, r8)
 80050e4:	20000824 	.word	0x20000824

080050e8 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 80050e8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80050ea:	4802      	ldr	r0, [pc, #8]	; (80050f4 <TIM17_IRQHandler+0xc>)
 80050ec:	f002 fc41 	bl	8007972 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80050f0:	bd10      	pop	{r4, pc}
 80050f2:	46c0      	nop			; (mov r8, r8)
 80050f4:	2000086c 	.word	0x2000086c

080050f8 <I2C1_IRQHandler>:
void I2C1_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80050f8:	4806      	ldr	r0, [pc, #24]	; (8005114 <I2C1_IRQHandler+0x1c>)
{
 80050fa:	b510      	push	{r4, lr}
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80050fc:	6803      	ldr	r3, [r0, #0]
 80050fe:	699a      	ldr	r2, [r3, #24]
 8005100:	23e0      	movs	r3, #224	; 0xe0
 8005102:	00db      	lsls	r3, r3, #3
 8005104:	421a      	tst	r2, r3
 8005106:	d002      	beq.n	800510e <I2C1_IRQHandler+0x16>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8005108:	f001 fdb0 	bl	8006c6c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800510c:	bd10      	pop	{r4, pc}
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800510e:	f001 f9ad 	bl	800646c <HAL_I2C_EV_IRQHandler>
}
 8005112:	e7fb      	b.n	800510c <I2C1_IRQHandler+0x14>
 8005114:	20000740 	.word	0x20000740

08005118 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8005118:	2001      	movs	r0, #1
 800511a:	4770      	bx	lr

0800511c <_kill>:

int _kill(int pid, int sig)
{
 800511c:	b510      	push	{r4, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800511e:	f003 fde7 	bl	8008cf0 <__errno>
 8005122:	2316      	movs	r3, #22
 8005124:	6003      	str	r3, [r0, #0]
  return -1;
 8005126:	2001      	movs	r0, #1
}
 8005128:	4240      	negs	r0, r0
 800512a:	bd10      	pop	{r4, pc}

0800512c <_exit>:

void _exit (int status)
{
 800512c:	b510      	push	{r4, lr}
  errno = EINVAL;
 800512e:	f003 fddf 	bl	8008cf0 <__errno>
 8005132:	2316      	movs	r3, #22
 8005134:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8005136:	e7fe      	b.n	8005136 <_exit+0xa>

08005138 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005138:	b570      	push	{r4, r5, r6, lr}
 800513a:	000e      	movs	r6, r1
 800513c:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800513e:	2500      	movs	r5, #0
 8005140:	42a5      	cmp	r5, r4
 8005142:	db01      	blt.n	8005148 <_read+0x10>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8005144:	0020      	movs	r0, r4
 8005146:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8005148:	e000      	b.n	800514c <_read+0x14>
 800514a:	bf00      	nop
 800514c:	5570      	strb	r0, [r6, r5]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800514e:	3501      	adds	r5, #1
 8005150:	e7f6      	b.n	8005140 <_read+0x8>

08005152 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005152:	b570      	push	{r4, r5, r6, lr}
 8005154:	000e      	movs	r6, r1
 8005156:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005158:	2500      	movs	r5, #0
 800515a:	42a5      	cmp	r5, r4
 800515c:	db01      	blt.n	8005162 <_write+0x10>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 800515e:	0020      	movs	r0, r4
 8005160:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8005162:	5d70      	ldrb	r0, [r6, r5]
 8005164:	e000      	b.n	8005168 <_write+0x16>
 8005166:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005168:	3501      	adds	r5, #1
 800516a:	e7f6      	b.n	800515a <_write+0x8>

0800516c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
 800516c:	2001      	movs	r0, #1
}
 800516e:	4240      	negs	r0, r0
 8005170:	4770      	bx	lr

08005172 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8005172:	2380      	movs	r3, #128	; 0x80
 8005174:	019b      	lsls	r3, r3, #6
  return 0;
}
 8005176:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8005178:	604b      	str	r3, [r1, #4]
}
 800517a:	4770      	bx	lr

0800517c <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 800517c:	2001      	movs	r0, #1
 800517e:	4770      	bx	lr

08005180 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8005180:	2000      	movs	r0, #0
 8005182:	4770      	bx	lr

08005184 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005184:	490b      	ldr	r1, [pc, #44]	; (80051b4 <_sbrk+0x30>)
 8005186:	4a0c      	ldr	r2, [pc, #48]	; (80051b8 <_sbrk+0x34>)
{
 8005188:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800518a:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800518c:	490b      	ldr	r1, [pc, #44]	; (80051bc <_sbrk+0x38>)
{
 800518e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8005190:	6808      	ldr	r0, [r1, #0]
 8005192:	2800      	cmp	r0, #0
 8005194:	d101      	bne.n	800519a <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 8005196:	480a      	ldr	r0, [pc, #40]	; (80051c0 <_sbrk+0x3c>)
 8005198:	6008      	str	r0, [r1, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800519a:	6808      	ldr	r0, [r1, #0]
 800519c:	18c3      	adds	r3, r0, r3
 800519e:	4293      	cmp	r3, r2
 80051a0:	d906      	bls.n	80051b0 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 80051a2:	f003 fda5 	bl	8008cf0 <__errno>
 80051a6:	230c      	movs	r3, #12
 80051a8:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80051aa:	2001      	movs	r0, #1
 80051ac:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80051ae:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80051b0:	600b      	str	r3, [r1, #0]
  return (void *)prev_heap_end;
 80051b2:	e7fc      	b.n	80051ae <_sbrk+0x2a>
 80051b4:	00000400 	.word	0x00000400
 80051b8:	20002000 	.word	0x20002000
 80051bc:	20000910 	.word	0x20000910
 80051c0:	20000a88 	.word	0x20000a88

080051c4 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80051c4:	4770      	bx	lr
	...

080051c8 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

  ldr   r0, =_estack
 80051c8:	480d      	ldr	r0, [pc, #52]	; (8005200 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80051ca:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 80051cc:	f7ff fffa 	bl	80051c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80051d0:	480c      	ldr	r0, [pc, #48]	; (8005204 <LoopForever+0x6>)
  ldr r1, =_edata
 80051d2:	490d      	ldr	r1, [pc, #52]	; (8005208 <LoopForever+0xa>)
  ldr r2, =_sidata
 80051d4:	4a0d      	ldr	r2, [pc, #52]	; (800520c <LoopForever+0xe>)
  movs r3, #0
 80051d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80051d8:	e002      	b.n	80051e0 <LoopCopyDataInit>

080051da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80051da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80051dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80051de:	3304      	adds	r3, #4

080051e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80051e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80051e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80051e4:	d3f9      	bcc.n	80051da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80051e6:	4a0a      	ldr	r2, [pc, #40]	; (8005210 <LoopForever+0x12>)
  ldr r4, =_ebss
 80051e8:	4c0a      	ldr	r4, [pc, #40]	; (8005214 <LoopForever+0x16>)
  movs r3, #0
 80051ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80051ec:	e001      	b.n	80051f2 <LoopFillZerobss>

080051ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80051ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80051f0:	3204      	adds	r2, #4

080051f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80051f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80051f4:	d3fb      	bcc.n	80051ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80051f6:	f003 fd81 	bl	8008cfc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80051fa:	f7ff f821 	bl	8004240 <main>

080051fe <LoopForever>:

LoopForever:
    b LoopForever
 80051fe:	e7fe      	b.n	80051fe <LoopForever>
  ldr   r0, =_estack
 8005200:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8005204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005208:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 800520c:	0800d9c4 	.word	0x0800d9c4
  ldr r2, =_sbss
 8005210:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8005214:	20000a84 	.word	0x20000a84

08005218 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005218:	e7fe      	b.n	8005218 <ADC1_COMP_IRQHandler>
	...

0800521c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800521c:	b570      	push	{r4, r5, r6, lr}
 800521e:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005220:	20fa      	movs	r0, #250	; 0xfa
 8005222:	4b0d      	ldr	r3, [pc, #52]	; (8005258 <HAL_InitTick+0x3c>)
 8005224:	0080      	lsls	r0, r0, #2
 8005226:	7819      	ldrb	r1, [r3, #0]
 8005228:	f7fa ff8a 	bl	8000140 <__udivsi3>
 800522c:	4c0b      	ldr	r4, [pc, #44]	; (800525c <HAL_InitTick+0x40>)
 800522e:	0001      	movs	r1, r0
 8005230:	6820      	ldr	r0, [r4, #0]
 8005232:	f7fa ff85 	bl	8000140 <__udivsi3>
 8005236:	f000 fa27 	bl	8005688 <HAL_SYSTICK_Config>
 800523a:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 800523c:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800523e:	2c00      	cmp	r4, #0
 8005240:	d109      	bne.n	8005256 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005242:	2d03      	cmp	r5, #3
 8005244:	d807      	bhi.n	8005256 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005246:	3802      	subs	r0, #2
 8005248:	0022      	movs	r2, r4
 800524a:	0029      	movs	r1, r5
 800524c:	f000 f9e6 	bl	800561c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005250:	0020      	movs	r0, r4
 8005252:	4b03      	ldr	r3, [pc, #12]	; (8005260 <HAL_InitTick+0x44>)
 8005254:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8005256:	bd70      	pop	{r4, r5, r6, pc}
 8005258:	20000020 	.word	0x20000020
 800525c:	2000001c 	.word	0x2000001c
 8005260:	20000024 	.word	0x20000024

08005264 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005264:	2310      	movs	r3, #16
 8005266:	4a06      	ldr	r2, [pc, #24]	; (8005280 <HAL_Init+0x1c>)
{
 8005268:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800526a:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800526c:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800526e:	430b      	orrs	r3, r1
 8005270:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8005272:	f7ff ffd3 	bl	800521c <HAL_InitTick>
  HAL_MspInit();
 8005276:	f7ff fd7d 	bl	8004d74 <HAL_MspInit>
}
 800527a:	2000      	movs	r0, #0
 800527c:	bd10      	pop	{r4, pc}
 800527e:	46c0      	nop			; (mov r8, r8)
 8005280:	40022000 	.word	0x40022000

08005284 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8005284:	4a03      	ldr	r2, [pc, #12]	; (8005294 <HAL_IncTick+0x10>)
 8005286:	4b04      	ldr	r3, [pc, #16]	; (8005298 <HAL_IncTick+0x14>)
 8005288:	6811      	ldr	r1, [r2, #0]
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	185b      	adds	r3, r3, r1
 800528e:	6013      	str	r3, [r2, #0]
}
 8005290:	4770      	bx	lr
 8005292:	46c0      	nop			; (mov r8, r8)
 8005294:	20000914 	.word	0x20000914
 8005298:	20000020 	.word	0x20000020

0800529c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800529c:	4b01      	ldr	r3, [pc, #4]	; (80052a4 <HAL_GetTick+0x8>)
 800529e:	6818      	ldr	r0, [r3, #0]
}
 80052a0:	4770      	bx	lr
 80052a2:	46c0      	nop			; (mov r8, r8)
 80052a4:	20000914 	.word	0x20000914

080052a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80052a8:	b570      	push	{r4, r5, r6, lr}
 80052aa:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80052ac:	f7ff fff6 	bl	800529c <HAL_GetTick>
 80052b0:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80052b2:	1c63      	adds	r3, r4, #1
 80052b4:	d002      	beq.n	80052bc <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80052b6:	4b04      	ldr	r3, [pc, #16]	; (80052c8 <HAL_Delay+0x20>)
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80052bc:	f7ff ffee 	bl	800529c <HAL_GetTick>
 80052c0:	1b40      	subs	r0, r0, r5
 80052c2:	42a0      	cmp	r0, r4
 80052c4:	d3fa      	bcc.n	80052bc <HAL_Delay+0x14>
  {
  }
}
 80052c6:	bd70      	pop	{r4, r5, r6, pc}
 80052c8:	20000020 	.word	0x20000020

080052cc <ADC_Enable.constprop.0>:
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 80052cc:	2300      	movs	r3, #0
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
 80052ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80052d0:	2103      	movs	r1, #3
  __IO uint32_t wait_loop_index = 0U;
 80052d2:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80052d4:	6803      	ldr	r3, [r0, #0]
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
 80052d6:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80052d8:	689a      	ldr	r2, [r3, #8]
 80052da:	400a      	ands	r2, r1
 80052dc:	2a01      	cmp	r2, #1
 80052de:	d107      	bne.n	80052f0 <ADC_Enable.constprop.0+0x24>
 80052e0:	6819      	ldr	r1, [r3, #0]
 80052e2:	4211      	tst	r1, r2
 80052e4:	d001      	beq.n	80052ea <ADC_Enable.constprop.0+0x1e>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80052e6:	2000      	movs	r0, #0
}
 80052e8:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80052ea:	68da      	ldr	r2, [r3, #12]
 80052ec:	0412      	lsls	r2, r2, #16
 80052ee:	d4fa      	bmi.n	80052e6 <ADC_Enable.constprop.0+0x1a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80052f0:	6899      	ldr	r1, [r3, #8]
 80052f2:	4a1b      	ldr	r2, [pc, #108]	; (8005360 <ADC_Enable.constprop.0+0x94>)
 80052f4:	4211      	tst	r1, r2
 80052f6:	d008      	beq.n	800530a <ADC_Enable.constprop.0+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052f8:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052fa:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052fc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80052fe:	4313      	orrs	r3, r2
 8005300:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005302:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005304:	4303      	orrs	r3, r0
 8005306:	63e3      	str	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8005308:	e7ee      	b.n	80052e8 <ADC_Enable.constprop.0+0x1c>
    __HAL_ADC_ENABLE(hadc);
 800530a:	2201      	movs	r2, #1
 800530c:	6899      	ldr	r1, [r3, #8]
 800530e:	430a      	orrs	r2, r1
 8005310:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005312:	4b14      	ldr	r3, [pc, #80]	; (8005364 <ADC_Enable.constprop.0+0x98>)
 8005314:	4914      	ldr	r1, [pc, #80]	; (8005368 <ADC_Enable.constprop.0+0x9c>)
 8005316:	6818      	ldr	r0, [r3, #0]
 8005318:	f7fa ff12 	bl	8000140 <__udivsi3>
 800531c:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 800531e:	9b01      	ldr	r3, [sp, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d119      	bne.n	8005358 <ADC_Enable.constprop.0+0x8c>
    tickstart = HAL_GetTick();
 8005324:	f7ff ffba 	bl	800529c <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005328:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 800532a:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800532c:	6823      	ldr	r3, [r4, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	422b      	tst	r3, r5
 8005332:	d1d8      	bne.n	80052e6 <ADC_Enable.constprop.0+0x1a>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005334:	f7ff ffb2 	bl	800529c <HAL_GetTick>
 8005338:	1b80      	subs	r0, r0, r6
 800533a:	2802      	cmp	r0, #2
 800533c:	d9f6      	bls.n	800532c <ADC_Enable.constprop.0+0x60>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800533e:	6823      	ldr	r3, [r4, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	422b      	tst	r3, r5
 8005344:	d1f2      	bne.n	800532c <ADC_Enable.constprop.0+0x60>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005346:	2310      	movs	r3, #16
 8005348:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          return HAL_ERROR;
 800534a:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800534c:	4313      	orrs	r3, r2
 800534e:	63a3      	str	r3, [r4, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005350:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005352:	432b      	orrs	r3, r5
 8005354:	63e3      	str	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8005356:	e7c7      	b.n	80052e8 <ADC_Enable.constprop.0+0x1c>
      wait_loop_index--;
 8005358:	9b01      	ldr	r3, [sp, #4]
 800535a:	3b01      	subs	r3, #1
 800535c:	9301      	str	r3, [sp, #4]
 800535e:	e7de      	b.n	800531e <ADC_Enable.constprop.0+0x52>
 8005360:	80000017 	.word	0x80000017
 8005364:	2000001c 	.word	0x2000001c
 8005368:	000f4240 	.word	0x000f4240

0800536c <HAL_ADC_Init>:
{
 800536c:	b570      	push	{r4, r5, r6, lr}
 800536e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8005370:	2001      	movs	r0, #1
  if(hadc == NULL)
 8005372:	2c00      	cmp	r4, #0
 8005374:	d07e      	beq.n	8005474 <HAL_ADC_Init+0x108>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005376:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005378:	2b00      	cmp	r3, #0
 800537a:	d106      	bne.n	800538a <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 800537c:	0022      	movs	r2, r4
 800537e:	3234      	adds	r2, #52	; 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 8005380:	63e3      	str	r3, [r4, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 8005382:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8005384:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8005386:	f7ff fd0d 	bl	8004da4 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800538a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800538c:	06db      	lsls	r3, r3, #27
 800538e:	d500      	bpl.n	8005392 <HAL_ADC_Init+0x26>
 8005390:	e084      	b.n	800549c <HAL_ADC_Init+0x130>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8005392:	6822      	ldr	r2, [r4, #0]
 8005394:	6893      	ldr	r3, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8005396:	075b      	lsls	r3, r3, #29
 8005398:	d500      	bpl.n	800539c <HAL_ADC_Init+0x30>
 800539a:	e07f      	b.n	800549c <HAL_ADC_Init+0x130>
    ADC_STATE_CLR_SET(hadc->State,
 800539c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800539e:	4b42      	ldr	r3, [pc, #264]	; (80054a8 <HAL_ADC_Init+0x13c>)
 80053a0:	4019      	ands	r1, r3
 80053a2:	3306      	adds	r3, #6
 80053a4:	33ff      	adds	r3, #255	; 0xff
 80053a6:	430b      	orrs	r3, r1
    if (ADC_IS_ENABLE(hadc) == RESET)
 80053a8:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 80053aa:	63a3      	str	r3, [r4, #56]	; 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 80053ac:	6893      	ldr	r3, [r2, #8]
 80053ae:	400b      	ands	r3, r1
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d105      	bne.n	80053c0 <HAL_ADC_Init+0x54>
 80053b4:	6811      	ldr	r1, [r2, #0]
 80053b6:	4219      	tst	r1, r3
 80053b8:	d10e      	bne.n	80053d8 <HAL_ADC_Init+0x6c>
 80053ba:	68d3      	ldr	r3, [r2, #12]
 80053bc:	041b      	lsls	r3, r3, #16
 80053be:	d40b      	bmi.n	80053d8 <HAL_ADC_Init+0x6c>
      MODIFY_REG(hadc->Instance->CFGR1,
 80053c0:	2118      	movs	r1, #24
 80053c2:	68d3      	ldr	r3, [r2, #12]
 80053c4:	438b      	bics	r3, r1
 80053c6:	68a1      	ldr	r1, [r4, #8]
 80053c8:	430b      	orrs	r3, r1
 80053ca:	60d3      	str	r3, [r2, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80053cc:	6913      	ldr	r3, [r2, #16]
 80053ce:	6861      	ldr	r1, [r4, #4]
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	089b      	lsrs	r3, r3, #2
 80053d4:	430b      	orrs	r3, r1
 80053d6:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80053d8:	68d3      	ldr	r3, [r2, #12]
 80053da:	4934      	ldr	r1, [pc, #208]	; (80054ac <HAL_ADC_Init+0x140>)
 80053dc:	400b      	ands	r3, r1
 80053de:	60d3      	str	r3, [r2, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80053e0:	7e23      	ldrb	r3, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80053e2:	7e60      	ldrb	r0, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80053e4:	039b      	lsls	r3, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80053e6:	03c0      	lsls	r0, r0, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80053e8:	4303      	orrs	r3, r0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80053ea:	7ea1      	ldrb	r1, [r4, #26]
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80053ec:	68e0      	ldr	r0, [r4, #12]
 80053ee:	4303      	orrs	r3, r0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80053f0:	0348      	lsls	r0, r1, #13
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80053f2:	4303      	orrs	r3, r0
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80053f4:	1d60      	adds	r0, r4, #5
 80053f6:	7fc0      	ldrb	r0, [r0, #31]
 80053f8:	0040      	lsls	r0, r0, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80053fa:	4303      	orrs	r3, r0
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80053fc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80053fe:	3801      	subs	r0, #1
 8005400:	1e45      	subs	r5, r0, #1
 8005402:	41a8      	sbcs	r0, r5
 8005404:	0300      	lsls	r0, r0, #12
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8005406:	4303      	orrs	r3, r0
 8005408:	6920      	ldr	r0, [r4, #16]
 800540a:	3802      	subs	r0, #2
 800540c:	4245      	negs	r5, r0
 800540e:	4168      	adcs	r0, r5
 8005410:	0080      	lsls	r0, r0, #2
 8005412:	4303      	orrs	r3, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005414:	7ee0      	ldrb	r0, [r4, #27]
 8005416:	2801      	cmp	r0, #1
 8005418:	d104      	bne.n	8005424 <HAL_ADC_Init+0xb8>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800541a:	2900      	cmp	r1, #0
 800541c:	d12b      	bne.n	8005476 <HAL_ADC_Init+0x10a>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800541e:	2180      	movs	r1, #128	; 0x80
 8005420:	0249      	lsls	r1, r1, #9
 8005422:	430b      	orrs	r3, r1
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005424:	20c2      	movs	r0, #194	; 0xc2
 8005426:	69e1      	ldr	r1, [r4, #28]
 8005428:	30ff      	adds	r0, #255	; 0xff
 800542a:	4281      	cmp	r1, r0
 800542c:	d002      	beq.n	8005434 <HAL_ADC_Init+0xc8>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800542e:	6a20      	ldr	r0, [r4, #32]
 8005430:	4301      	orrs	r1, r0
 8005432:	430b      	orrs	r3, r1
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8005434:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8005436:	68d1      	ldr	r1, [r2, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8005438:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800543a:	4319      	orrs	r1, r3
 800543c:	60d1      	str	r1, [r2, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800543e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005440:	4281      	cmp	r1, r0
 8005442:	d002      	beq.n	800544a <HAL_ADC_Init+0xde>
 8005444:	1e48      	subs	r0, r1, #1
 8005446:	2806      	cmp	r0, #6
 8005448:	d807      	bhi.n	800545a <HAL_ADC_Init+0xee>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800544a:	2507      	movs	r5, #7
 800544c:	6950      	ldr	r0, [r2, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800544e:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8005450:	43a8      	bics	r0, r5
 8005452:	6150      	str	r0, [r2, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8005454:	6950      	ldr	r0, [r2, #20]
 8005456:	4301      	orrs	r1, r0
 8005458:	6151      	str	r1, [r2, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800545a:	68d2      	ldr	r2, [r2, #12]
 800545c:	4914      	ldr	r1, [pc, #80]	; (80054b0 <HAL_ADC_Init+0x144>)
 800545e:	400a      	ands	r2, r1
 8005460:	429a      	cmp	r2, r3
 8005462:	d110      	bne.n	8005486 <HAL_ADC_Init+0x11a>
      ADC_CLEAR_ERRORCODE(hadc);
 8005464:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8005466:	2303      	movs	r3, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8005468:	63e0      	str	r0, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 800546a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800546c:	439a      	bics	r2, r3
 800546e:	3b02      	subs	r3, #2
 8005470:	4313      	orrs	r3, r2
 8005472:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8005474:	bd70      	pop	{r4, r5, r6, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005476:	2120      	movs	r1, #32
 8005478:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800547a:	4329      	orrs	r1, r5
 800547c:	63a1      	str	r1, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800547e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005480:	4308      	orrs	r0, r1
 8005482:	63e0      	str	r0, [r4, #60]	; 0x3c
 8005484:	e7ce      	b.n	8005424 <HAL_ADC_Init+0xb8>
      ADC_STATE_CLR_SET(hadc->State,
 8005486:	2312      	movs	r3, #18
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005488:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 800548a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800548c:	439a      	bics	r2, r3
 800548e:	3b02      	subs	r3, #2
 8005490:	4313      	orrs	r3, r2
 8005492:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005494:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005496:	4303      	orrs	r3, r0
 8005498:	63e3      	str	r3, [r4, #60]	; 0x3c
      tmp_hal_status = HAL_ERROR;
 800549a:	e7eb      	b.n	8005474 <HAL_ADC_Init+0x108>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800549c:	2310      	movs	r3, #16
 800549e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 80054a0:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054a2:	4313      	orrs	r3, r2
 80054a4:	63a3      	str	r3, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 80054a6:	e7e5      	b.n	8005474 <HAL_ADC_Init+0x108>
 80054a8:	fffffefd 	.word	0xfffffefd
 80054ac:	fffe0219 	.word	0xfffe0219
 80054b0:	833fffe7 	.word	0x833fffe7

080054b4 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80054b4:	6803      	ldr	r3, [r0, #0]
{
 80054b6:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80054b8:	689b      	ldr	r3, [r3, #8]
{
 80054ba:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 80054bc:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80054be:	075b      	lsls	r3, r3, #29
 80054c0:	d41a      	bmi.n	80054f8 <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 80054c2:	0025      	movs	r5, r4
 80054c4:	3534      	adds	r5, #52	; 0x34
 80054c6:	782b      	ldrb	r3, [r5, #0]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d015      	beq.n	80054f8 <HAL_ADC_Start+0x44>
 80054cc:	2301      	movs	r3, #1
 80054ce:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80054d0:	7e63      	ldrb	r3, [r4, #25]
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d111      	bne.n	80054fa <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 80054d6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80054d8:	4b0b      	ldr	r3, [pc, #44]	; (8005508 <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 80054da:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 80054dc:	401a      	ands	r2, r3
 80054de:	2380      	movs	r3, #128	; 0x80
 80054e0:	005b      	lsls	r3, r3, #1
 80054e2:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80054e4:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 80054e6:	63a3      	str	r3, [r4, #56]	; 0x38
      ADC_CLEAR_ERRORCODE(hadc);
 80054e8:	63e0      	str	r0, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hadc);
 80054ea:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80054ec:	6823      	ldr	r3, [r4, #0]
 80054ee:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80054f0:	6899      	ldr	r1, [r3, #8]
 80054f2:	3a18      	subs	r2, #24
 80054f4:	430a      	orrs	r2, r1
 80054f6:	609a      	str	r2, [r3, #8]
}
 80054f8:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 80054fa:	0020      	movs	r0, r4
 80054fc:	f7ff fee6 	bl	80052cc <ADC_Enable.constprop.0>
    if (tmp_hal_status == HAL_OK)
 8005500:	2800      	cmp	r0, #0
 8005502:	d0e8      	beq.n	80054d6 <HAL_ADC_Start+0x22>
 8005504:	e7f8      	b.n	80054f8 <HAL_ADC_Start+0x44>
 8005506:	46c0      	nop			; (mov r8, r8)
 8005508:	fffff0fe 	.word	0xfffff0fe

0800550c <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 800550c:	6803      	ldr	r3, [r0, #0]
 800550e:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8005510:	4770      	bx	lr
	...

08005514 <HAL_ADC_ConfigChannel>:
{
 8005514:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0U;
 8005516:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8005518:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 800551a:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800551c:	3434      	adds	r4, #52	; 0x34
 800551e:	7822      	ldrb	r2, [r4, #0]
{
 8005520:	0003      	movs	r3, r0
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8005522:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  __HAL_LOCK(hadc);
 8005524:	2002      	movs	r0, #2
 8005526:	2a01      	cmp	r2, #1
 8005528:	d02a      	beq.n	8005580 <HAL_ADC_ConfigChannel+0x6c>
 800552a:	3801      	subs	r0, #1
 800552c:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	6896      	ldr	r6, [r2, #8]
 8005532:	0776      	lsls	r6, r6, #29
 8005534:	d45f      	bmi.n	80055f6 <HAL_ADC_ConfigChannel+0xe2>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8005536:	680b      	ldr	r3, [r1, #0]
    if (sConfig->Rank != ADC_RANK_NONE)
 8005538:	684f      	ldr	r7, [r1, #4]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800553a:	001e      	movs	r6, r3
    if (sConfig->Rank != ADC_RANK_NONE)
 800553c:	46bc      	mov	ip, r7
 800553e:	4f30      	ldr	r7, [pc, #192]	; (8005600 <HAL_ADC_ConfigChannel+0xec>)
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8005540:	4098      	lsls	r0, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005542:	3e10      	subs	r6, #16
    if (sConfig->Rank != ADC_RANK_NONE)
 8005544:	45bc      	cmp	ip, r7
 8005546:	d03f      	beq.n	80055c8 <HAL_ADC_ConfigChannel+0xb4>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8005548:	6a97      	ldr	r7, [r2, #40]	; 0x28
 800554a:	4338      	orrs	r0, r7
 800554c:	6290      	str	r0, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800554e:	2080      	movs	r0, #128	; 0x80
 8005550:	0540      	lsls	r0, r0, #21
 8005552:	4285      	cmp	r5, r0
 8005554:	d00f      	beq.n	8005576 <HAL_ADC_ConfigChannel+0x62>
 8005556:	3d01      	subs	r5, #1
 8005558:	2d06      	cmp	r5, #6
 800555a:	d90c      	bls.n	8005576 <HAL_ADC_ConfigChannel+0x62>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800555c:	2007      	movs	r0, #7
 800555e:	6955      	ldr	r5, [r2, #20]
 8005560:	6889      	ldr	r1, [r1, #8]
 8005562:	4005      	ands	r5, r0
 8005564:	42a9      	cmp	r1, r5
 8005566:	d006      	beq.n	8005576 <HAL_ADC_ConfigChannel+0x62>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8005568:	6955      	ldr	r5, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800556a:	4001      	ands	r1, r0
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800556c:	4385      	bics	r5, r0
 800556e:	6155      	str	r5, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8005570:	6955      	ldr	r5, [r2, #20]
 8005572:	4329      	orrs	r1, r5
 8005574:	6151      	str	r1, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005576:	2e02      	cmp	r6, #2
 8005578:	d903      	bls.n	8005582 <HAL_ADC_ConfigChannel+0x6e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800557a:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 800557c:	2300      	movs	r3, #0
 800557e:	7023      	strb	r3, [r4, #0]
}
 8005580:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8005582:	4820      	ldr	r0, [pc, #128]	; (8005604 <HAL_ADC_ConfigChannel+0xf0>)
 8005584:	6801      	ldr	r1, [r0, #0]
 8005586:	2b10      	cmp	r3, #16
 8005588:	d01b      	beq.n	80055c2 <HAL_ADC_ConfigChannel+0xae>
 800558a:	001a      	movs	r2, r3
 800558c:	3a11      	subs	r2, #17
 800558e:	4255      	negs	r5, r2
 8005590:	416a      	adcs	r2, r5
 8005592:	4d1d      	ldr	r5, [pc, #116]	; (8005608 <HAL_ADC_ConfigChannel+0xf4>)
 8005594:	4252      	negs	r2, r2
 8005596:	402a      	ands	r2, r5
 8005598:	2580      	movs	r5, #128	; 0x80
 800559a:	046d      	lsls	r5, r5, #17
 800559c:	1952      	adds	r2, r2, r5
 800559e:	430a      	orrs	r2, r1
 80055a0:	6002      	str	r2, [r0, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80055a2:	2b10      	cmp	r3, #16
 80055a4:	d1e9      	bne.n	800557a <HAL_ADC_ConfigChannel+0x66>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80055a6:	4b19      	ldr	r3, [pc, #100]	; (800560c <HAL_ADC_ConfigChannel+0xf8>)
 80055a8:	4919      	ldr	r1, [pc, #100]	; (8005610 <HAL_ADC_ConfigChannel+0xfc>)
 80055aa:	6818      	ldr	r0, [r3, #0]
 80055ac:	f7fa fdc8 	bl	8000140 <__udivsi3>
 80055b0:	230a      	movs	r3, #10
 80055b2:	4343      	muls	r3, r0
            wait_loop_index--;
 80055b4:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80055b6:	9b01      	ldr	r3, [sp, #4]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d0de      	beq.n	800557a <HAL_ADC_ConfigChannel+0x66>
            wait_loop_index--;
 80055bc:	9b01      	ldr	r3, [sp, #4]
 80055be:	3b01      	subs	r3, #1
 80055c0:	e7f8      	b.n	80055b4 <HAL_ADC_ConfigChannel+0xa0>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80055c2:	2280      	movs	r2, #128	; 0x80
 80055c4:	0412      	lsls	r2, r2, #16
 80055c6:	e7ea      	b.n	800559e <HAL_ADC_ConfigChannel+0x8a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80055c8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80055ca:	4381      	bics	r1, r0
 80055cc:	6291      	str	r1, [r2, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80055ce:	2e02      	cmp	r6, #2
 80055d0:	d8d3      	bhi.n	800557a <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80055d2:	4a0c      	ldr	r2, [pc, #48]	; (8005604 <HAL_ADC_ConfigChannel+0xf0>)
 80055d4:	6811      	ldr	r1, [r2, #0]
 80055d6:	2b10      	cmp	r3, #16
 80055d8:	d00b      	beq.n	80055f2 <HAL_ADC_ConfigChannel+0xde>
 80055da:	3b11      	subs	r3, #17
 80055dc:	4258      	negs	r0, r3
 80055de:	4143      	adcs	r3, r0
 80055e0:	20c0      	movs	r0, #192	; 0xc0
 80055e2:	425b      	negs	r3, r3
 80055e4:	0400      	lsls	r0, r0, #16
 80055e6:	4003      	ands	r3, r0
 80055e8:	480a      	ldr	r0, [pc, #40]	; (8005614 <HAL_ADC_ConfigChannel+0x100>)
 80055ea:	181b      	adds	r3, r3, r0
 80055ec:	400b      	ands	r3, r1
 80055ee:	6013      	str	r3, [r2, #0]
 80055f0:	e7c3      	b.n	800557a <HAL_ADC_ConfigChannel+0x66>
 80055f2:	4b09      	ldr	r3, [pc, #36]	; (8005618 <HAL_ADC_ConfigChannel+0x104>)
 80055f4:	e7fa      	b.n	80055ec <HAL_ADC_ConfigChannel+0xd8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80055f6:	2220      	movs	r2, #32
 80055f8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80055fa:	430a      	orrs	r2, r1
 80055fc:	639a      	str	r2, [r3, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 80055fe:	e7bd      	b.n	800557c <HAL_ADC_ConfigChannel+0x68>
 8005600:	00001001 	.word	0x00001001
 8005604:	40012708 	.word	0x40012708
 8005608:	ff400000 	.word	0xff400000
 800560c:	2000001c 	.word	0x2000001c
 8005610:	000f4240 	.word	0x000f4240
 8005614:	feffffff 	.word	0xfeffffff
 8005618:	ff7fffff 	.word	0xff7fffff

0800561c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800561c:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800561e:	25ff      	movs	r5, #255	; 0xff
 8005620:	2403      	movs	r4, #3
 8005622:	002a      	movs	r2, r5
 8005624:	4004      	ands	r4, r0
 8005626:	00e4      	lsls	r4, r4, #3
 8005628:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800562a:	0189      	lsls	r1, r1, #6
 800562c:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800562e:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005630:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005632:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8005634:	2800      	cmp	r0, #0
 8005636:	db0a      	blt.n	800564e <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005638:	24c0      	movs	r4, #192	; 0xc0
 800563a:	4b0b      	ldr	r3, [pc, #44]	; (8005668 <HAL_NVIC_SetPriority+0x4c>)
 800563c:	0880      	lsrs	r0, r0, #2
 800563e:	0080      	lsls	r0, r0, #2
 8005640:	18c0      	adds	r0, r0, r3
 8005642:	00a4      	lsls	r4, r4, #2
 8005644:	5903      	ldr	r3, [r0, r4]
 8005646:	4013      	ands	r3, r2
 8005648:	430b      	orrs	r3, r1
 800564a:	5103      	str	r3, [r0, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800564c:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800564e:	200f      	movs	r0, #15
 8005650:	4003      	ands	r3, r0
 8005652:	3b08      	subs	r3, #8
 8005654:	4805      	ldr	r0, [pc, #20]	; (800566c <HAL_NVIC_SetPriority+0x50>)
 8005656:	089b      	lsrs	r3, r3, #2
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	181b      	adds	r3, r3, r0
 800565c:	69d8      	ldr	r0, [r3, #28]
 800565e:	4002      	ands	r2, r0
 8005660:	430a      	orrs	r2, r1
 8005662:	61da      	str	r2, [r3, #28]
 8005664:	e7f2      	b.n	800564c <HAL_NVIC_SetPriority+0x30>
 8005666:	46c0      	nop			; (mov r8, r8)
 8005668:	e000e100 	.word	0xe000e100
 800566c:	e000ed00 	.word	0xe000ed00

08005670 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005670:	2800      	cmp	r0, #0
 8005672:	db05      	blt.n	8005680 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005674:	231f      	movs	r3, #31
 8005676:	4018      	ands	r0, r3
 8005678:	3b1e      	subs	r3, #30
 800567a:	4083      	lsls	r3, r0
 800567c:	4a01      	ldr	r2, [pc, #4]	; (8005684 <HAL_NVIC_EnableIRQ+0x14>)
 800567e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005680:	4770      	bx	lr
 8005682:	46c0      	nop			; (mov r8, r8)
 8005684:	e000e100 	.word	0xe000e100

08005688 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005688:	2280      	movs	r2, #128	; 0x80
 800568a:	1e43      	subs	r3, r0, #1
 800568c:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 800568e:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005690:	4293      	cmp	r3, r2
 8005692:	d20d      	bcs.n	80056b0 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005694:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005696:	4a07      	ldr	r2, [pc, #28]	; (80056b4 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005698:	4807      	ldr	r0, [pc, #28]	; (80056b8 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800569a:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800569c:	6a03      	ldr	r3, [r0, #32]
 800569e:	0609      	lsls	r1, r1, #24
 80056a0:	021b      	lsls	r3, r3, #8
 80056a2:	0a1b      	lsrs	r3, r3, #8
 80056a4:	430b      	orrs	r3, r1
 80056a6:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056a8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056aa:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056ac:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056ae:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80056b0:	4770      	bx	lr
 80056b2:	46c0      	nop			; (mov r8, r8)
 80056b4:	e000e010 	.word	0xe000e010
 80056b8:	e000ed00 	.word	0xe000ed00

080056bc <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80056bc:	b510      	push	{r4, lr}
 80056be:	0004      	movs	r4, r0
  /* Check DAC handle */
  if(hdac == NULL)
  {
     return HAL_ERROR;
 80056c0:	2001      	movs	r0, #1
  if(hdac == NULL)
 80056c2:	2c00      	cmp	r4, #0
 80056c4:	d00d      	beq.n	80056e2 <HAL_DAC_Init+0x26>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if (hdac->State == HAL_DAC_STATE_RESET)
 80056c6:	7923      	ldrb	r3, [r4, #4]
 80056c8:	b2da      	uxtb	r2, r3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d103      	bne.n	80056d6 <HAL_DAC_Init+0x1a>
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80056ce:	0020      	movs	r0, r4
    hdac->Lock = HAL_UNLOCKED;
 80056d0:	7162      	strb	r2, [r4, #5]
    HAL_DAC_MspInit(hdac);
 80056d2:	f7ff fb95 	bl	8004e00 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80056d6:	2302      	movs	r3, #2
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80056d8:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 80056da:	7123      	strb	r3, [r4, #4]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80056dc:	3b01      	subs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80056de:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 80056e0:	7123      	strb	r3, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
}
 80056e2:	bd10      	pop	{r4, pc}

080056e4 <HAL_DAC_ConvCpltCallbackCh1>:
 80056e4:	4770      	bx	lr

080056e6 <HAL_DAC_ConvHalfCpltCallbackCh1>:
 80056e6:	4770      	bx	lr

080056e8 <HAL_DAC_ErrorCallbackCh1>:
 80056e8:	4770      	bx	lr

080056ea <HAL_DAC_DMAUnderrunCallbackCh1>:
 80056ea:	4770      	bx	lr

080056ec <DAC_DMAErrorCh1>:
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80056ec:	2304      	movs	r3, #4
{
 80056ee:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80056f0:	6a44      	ldr	r4, [r0, #36]	; 0x24
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80056f2:	6922      	ldr	r2, [r4, #16]
    
  HAL_DAC_ErrorCallbackCh1(hdac); 
 80056f4:	0020      	movs	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80056f6:	4313      	orrs	r3, r2
 80056f8:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac); 
 80056fa:	f7ff fff5 	bl	80056e8 <HAL_DAC_ErrorCallbackCh1>
    
  hdac->State= HAL_DAC_STATE_READY;
 80056fe:	2301      	movs	r3, #1
 8005700:	7123      	strb	r3, [r4, #4]
}
 8005702:	bd10      	pop	{r4, pc}

08005704 <DAC_DMAHalfConvCpltCh1>:
{
 8005704:	b510      	push	{r4, lr}
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8005706:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8005708:	f7ff ffed 	bl	80056e6 <HAL_DAC_ConvHalfCpltCallbackCh1>
}
 800570c:	bd10      	pop	{r4, pc}

0800570e <DAC_DMAConvCpltCh1>:
{
 800570e:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005710:	6a44      	ldr	r4, [r0, #36]	; 0x24
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8005712:	0020      	movs	r0, r4
 8005714:	f7ff ffe6 	bl	80056e4 <HAL_DAC_ConvCpltCallbackCh1>
  hdac->State= HAL_DAC_STATE_READY;
 8005718:	2301      	movs	r3, #1
 800571a:	7123      	strb	r3, [r4, #4]
}
 800571c:	bd10      	pop	{r4, pc}

0800571e <HAL_DAC_ConfigChannel>:
{
 800571e:	b530      	push	{r4, r5, lr}
 8005720:	0014      	movs	r4, r2
 8005722:	2202      	movs	r2, #2
  __HAL_LOCK(hdac);
 8005724:	7945      	ldrb	r5, [r0, #5]
{
 8005726:	0003      	movs	r3, r0
  __HAL_LOCK(hdac);
 8005728:	0010      	movs	r0, r2
 800572a:	2d01      	cmp	r5, #1
 800572c:	d00e      	beq.n	800574c <HAL_DAC_ConfigChannel+0x2e>
  hdac->State = HAL_DAC_STATE_BUSY;
 800572e:	711a      	strb	r2, [r3, #4]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel); 
 8005730:	323c      	adds	r2, #60	; 0x3c
 8005732:	40a2      	lsls	r2, r4
  tmpreg1 = hdac->Instance->CR;
 8005734:	681d      	ldr	r5, [r3, #0]
 8005736:	6828      	ldr	r0, [r5, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel); 
 8005738:	4390      	bics	r0, r2
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800573a:	c906      	ldmia	r1, {r1, r2}
 800573c:	430a      	orrs	r2, r1
  tmpreg1 |= tmpreg2 << Channel;
 800573e:	40a2      	lsls	r2, r4
 8005740:	4302      	orrs	r2, r0
  hdac->Instance->CR = tmpreg1;
 8005742:	602a      	str	r2, [r5, #0]
  __HAL_UNLOCK(hdac);
 8005744:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 8005746:	2201      	movs	r2, #1
  __HAL_UNLOCK(hdac);
 8005748:	7158      	strb	r0, [r3, #5]
  hdac->State = HAL_DAC_STATE_READY;
 800574a:	711a      	strb	r2, [r3, #4]
}
 800574c:	bd30      	pop	{r4, r5, pc}

0800574e <HAL_DAC_Start>:
  __HAL_LOCK(hdac);
 800574e:	2202      	movs	r2, #2
{
 8005750:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hdac);
 8005752:	7944      	ldrb	r4, [r0, #5]
{
 8005754:	0003      	movs	r3, r0
  __HAL_LOCK(hdac);
 8005756:	0010      	movs	r0, r2
 8005758:	2c01      	cmp	r4, #1
 800575a:	d015      	beq.n	8005788 <HAL_DAC_Start+0x3a>
  __HAL_DAC_ENABLE(hdac, Channel);
 800575c:	3801      	subs	r0, #1
 800575e:	0004      	movs	r4, r0
 8005760:	408c      	lsls	r4, r1
  hdac->State = HAL_DAC_STATE_BUSY;
 8005762:	711a      	strb	r2, [r3, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	6815      	ldr	r5, [r2, #0]
 8005768:	432c      	orrs	r4, r5
 800576a:	6014      	str	r4, [r2, #0]
  if(Channel == DAC_CHANNEL_1)
 800576c:	2900      	cmp	r1, #0
 800576e:	d107      	bne.n	8005780 <HAL_DAC_Start+0x32>
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8005770:	243c      	movs	r4, #60	; 0x3c
 8005772:	6811      	ldr	r1, [r2, #0]
 8005774:	4021      	ands	r1, r4
 8005776:	42a1      	cmp	r1, r4
 8005778:	d102      	bne.n	8005780 <HAL_DAC_Start+0x32>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800577a:	6851      	ldr	r1, [r2, #4]
 800577c:	4308      	orrs	r0, r1
 800577e:	6050      	str	r0, [r2, #4]
  hdac->State = HAL_DAC_STATE_READY;
 8005780:	2201      	movs	r2, #1
  __HAL_UNLOCK(hdac);
 8005782:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 8005784:	711a      	strb	r2, [r3, #4]
  __HAL_UNLOCK(hdac);
 8005786:	7158      	strb	r0, [r3, #5]
}
 8005788:	bd30      	pop	{r4, r5, pc}
	...

0800578c <HAL_DAC_Start_DMA>:
{
 800578c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800578e:	001f      	movs	r7, r3
 8005790:	2302      	movs	r3, #2
 8005792:	9101      	str	r1, [sp, #4]
  __HAL_LOCK(hdac);
 8005794:	7941      	ldrb	r1, [r0, #5]
{
 8005796:	0004      	movs	r4, r0
 8005798:	0016      	movs	r6, r2
  __HAL_LOCK(hdac);
 800579a:	0018      	movs	r0, r3
{
 800579c:	9a08      	ldr	r2, [sp, #32]
  __HAL_LOCK(hdac);
 800579e:	2901      	cmp	r1, #1
 80057a0:	d03a      	beq.n	8005818 <HAL_DAC_Start_DMA+0x8c>
 80057a2:	2101      	movs	r1, #1
 80057a4:	7161      	strb	r1, [r4, #5]
  SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80057a6:	2180      	movs	r1, #128	; 0x80
  hdac->State = HAL_DAC_STATE_BUSY;
 80057a8:	7123      	strb	r3, [r4, #4]
  hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80057aa:	68a0      	ldr	r0, [r4, #8]
 80057ac:	4b1b      	ldr	r3, [pc, #108]	; (800581c <HAL_DAC_Start_DMA+0x90>)
  SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80057ae:	0149      	lsls	r1, r1, #5
  hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80057b0:	6283      	str	r3, [r0, #40]	; 0x28
  hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80057b2:	4b1b      	ldr	r3, [pc, #108]	; (8005820 <HAL_DAC_Start_DMA+0x94>)
 80057b4:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80057b6:	4b1b      	ldr	r3, [pc, #108]	; (8005824 <HAL_DAC_Start_DMA+0x98>)
 80057b8:	6303      	str	r3, [r0, #48]	; 0x30
  SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80057ba:	6823      	ldr	r3, [r4, #0]
 80057bc:	681d      	ldr	r5, [r3, #0]
 80057be:	4329      	orrs	r1, r5
      tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80057c0:	001d      	movs	r5, r3
  SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80057c2:	6019      	str	r1, [r3, #0]
      tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80057c4:	350c      	adds	r5, #12
  switch(Alignment)
 80057c6:	2a04      	cmp	r2, #4
 80057c8:	d007      	beq.n	80057da <HAL_DAC_Start_DMA+0x4e>
      tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80057ca:	3504      	adds	r5, #4
  switch(Alignment)
 80057cc:	2a08      	cmp	r2, #8
 80057ce:	d004      	beq.n	80057da <HAL_DAC_Start_DMA+0x4e>
 80057d0:	2500      	movs	r5, #0
 80057d2:	42aa      	cmp	r2, r5
 80057d4:	d101      	bne.n	80057da <HAL_DAC_Start_DMA+0x4e>
      tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80057d6:	001d      	movs	r5, r3
 80057d8:	3508      	adds	r5, #8
  __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80057da:	2180      	movs	r1, #128	; 0x80
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	0189      	lsls	r1, r1, #6
 80057e0:	430a      	orrs	r2, r1
 80057e2:	601a      	str	r2, [r3, #0]
  HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80057e4:	0031      	movs	r1, r6
 80057e6:	003b      	movs	r3, r7
 80057e8:	002a      	movs	r2, r5
 80057ea:	f000 f869 	bl	80058c0 <HAL_DMA_Start_IT>
  __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80057ee:	2180      	movs	r1, #128	; 0x80
 80057f0:	6822      	ldr	r2, [r4, #0]
 80057f2:	0189      	lsls	r1, r1, #6
 80057f4:	6813      	ldr	r3, [r2, #0]
  HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80057f6:	68a0      	ldr	r0, [r4, #8]
  __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80057f8:	430b      	orrs	r3, r1
 80057fa:	6013      	str	r3, [r2, #0]
  HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80057fc:	0031      	movs	r1, r6
 80057fe:	003b      	movs	r3, r7
 8005800:	002a      	movs	r2, r5
 8005802:	f000 f85d 	bl	80058c0 <HAL_DMA_Start_IT>
  __HAL_DAC_ENABLE(hdac, Channel);
 8005806:	2301      	movs	r3, #1
 8005808:	9801      	ldr	r0, [sp, #4]
 800580a:	6822      	ldr	r2, [r4, #0]
 800580c:	4083      	lsls	r3, r0
  __HAL_UNLOCK(hdac);
 800580e:	2000      	movs	r0, #0
  __HAL_DAC_ENABLE(hdac, Channel);
 8005810:	6811      	ldr	r1, [r2, #0]
 8005812:	430b      	orrs	r3, r1
 8005814:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hdac);
 8005816:	7160      	strb	r0, [r4, #5]
}
 8005818:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800581a:	46c0      	nop			; (mov r8, r8)
 800581c:	0800570f 	.word	0x0800570f
 8005820:	08005705 	.word	0x08005705
 8005824:	080056ed 	.word	0x080056ed

08005828 <HAL_DAC_IRQHandler>:
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8005828:	2280      	movs	r2, #128	; 0x80
 800582a:	6803      	ldr	r3, [r0, #0]
 800582c:	0192      	lsls	r2, r2, #6
 800582e:	6819      	ldr	r1, [r3, #0]
{
 8005830:	b510      	push	{r4, lr}
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8005832:	4211      	tst	r1, r2
 8005834:	d00f      	beq.n	8005856 <HAL_DAC_IRQHandler+0x2e>
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8005836:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005838:	4211      	tst	r1, r2
 800583a:	d00c      	beq.n	8005856 <HAL_DAC_IRQHandler+0x2e>
      hdac->State = HAL_DAC_STATE_ERROR;
 800583c:	2104      	movs	r1, #4
 800583e:	7101      	strb	r1, [r0, #4]
      hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8005840:	6904      	ldr	r4, [r0, #16]
 8005842:	3903      	subs	r1, #3
 8005844:	4321      	orrs	r1, r4
 8005846:	6101      	str	r1, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8005848:	635a      	str	r2, [r3, #52]	; 0x34
      hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	4902      	ldr	r1, [pc, #8]	; (8005858 <HAL_DAC_IRQHandler+0x30>)
 800584e:	400a      	ands	r2, r1
 8005850:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005852:	f7ff ff4a 	bl	80056ea <HAL_DAC_DMAUnderrunCallbackCh1>
}
 8005856:	bd10      	pop	{r4, pc}
 8005858:	ffffefff 	.word	0xffffefff

0800585c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800585c:	b570      	push	{r4, r5, r6, lr}
 800585e:	0004      	movs	r4, r0
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if (NULL == hdma)
  {
    return HAL_ERROR;
 8005860:	2001      	movs	r0, #1
  if (NULL == hdma)
 8005862:	2c00      	cmp	r4, #0
 8005864:	d024      	beq.n	80058b0 <HAL_DMA_Init+0x54>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005866:	2302      	movs	r3, #2
 8005868:	1ca5      	adds	r5, r4, #2
 800586a:	77eb      	strb	r3, [r5, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800586c:	6820      	ldr	r0, [r4, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800586e:	4b11      	ldr	r3, [pc, #68]	; (80058b4 <HAL_DMA_Init+0x58>)
  tmp = hdma->Instance->CCR;
 8005870:	6802      	ldr	r2, [r0, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005872:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005874:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8005876:	6863      	ldr	r3, [r4, #4]
 8005878:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800587a:	68e1      	ldr	r1, [r4, #12]
 800587c:	430b      	orrs	r3, r1
 800587e:	6921      	ldr	r1, [r4, #16]
 8005880:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005882:	6961      	ldr	r1, [r4, #20]
 8005884:	430b      	orrs	r3, r1
 8005886:	69a1      	ldr	r1, [r4, #24]
 8005888:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 800588a:	69e1      	ldr	r1, [r4, #28]
 800588c:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 800588e:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005890:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005892:	4b09      	ldr	r3, [pc, #36]	; (80058b8 <HAL_DMA_Init+0x5c>)
 8005894:	2114      	movs	r1, #20
 8005896:	18c0      	adds	r0, r0, r3
 8005898:	f7fa fc52 	bl	8000140 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 800589c:	4b07      	ldr	r3, [pc, #28]	; (80058bc <HAL_DMA_Init+0x60>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800589e:	0080      	lsls	r0, r0, #2
 80058a0:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80058a2:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058a4:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80058a6:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058a8:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 80058aa:	18e4      	adds	r4, r4, r3
  hdma->State = HAL_DMA_STATE_READY;
 80058ac:	77eb      	strb	r3, [r5, #31]
  hdma->Lock = HAL_UNLOCKED;
 80058ae:	77e0      	strb	r0, [r4, #31]
}
 80058b0:	bd70      	pop	{r4, r5, r6, pc}
 80058b2:	46c0      	nop			; (mov r8, r8)
 80058b4:	ffffc00f 	.word	0xffffc00f
 80058b8:	bffdfff8 	.word	0xbffdfff8
 80058bc:	40020000 	.word	0x40020000

080058c0 <HAL_DMA_Start_IT>:
{
 80058c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 80058c2:	1c45      	adds	r5, r0, #1
{
 80058c4:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 80058c6:	7feb      	ldrb	r3, [r5, #31]
{
 80058c8:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 80058ca:	2002      	movs	r0, #2
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d027      	beq.n	8005920 <HAL_DMA_Start_IT+0x60>
 80058d0:	2301      	movs	r3, #1
  if (HAL_DMA_STATE_READY == hdma->State)
 80058d2:	1827      	adds	r7, r4, r0
  __HAL_LOCK(hdma);
 80058d4:	77eb      	strb	r3, [r5, #31]
  if (HAL_DMA_STATE_READY == hdma->State)
 80058d6:	7ffb      	ldrb	r3, [r7, #31]
 80058d8:	2600      	movs	r6, #0
 80058da:	469c      	mov	ip, r3
 80058dc:	4660      	mov	r0, ip
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	2801      	cmp	r0, #1
 80058e2:	d128      	bne.n	8005936 <HAL_DMA_Start_IT+0x76>
    hdma->State = HAL_DMA_STATE_BUSY;
 80058e4:	3001      	adds	r0, #1
 80058e6:	77f8      	strb	r0, [r7, #31]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80058e8:	6820      	ldr	r0, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058ea:	63a6      	str	r6, [r4, #56]	; 0x38
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80058ec:	6805      	ldr	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80058ee:	6c26      	ldr	r6, [r4, #64]	; 0x40
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80058f0:	439d      	bics	r5, r3
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80058f2:	40b3      	lsls	r3, r6
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80058f4:	6005      	str	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80058f6:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80058f8:	606b      	str	r3, [r5, #4]
  hdma->Instance->CNDTR = DataLength;
 80058fa:	9b01      	ldr	r3, [sp, #4]
 80058fc:	6043      	str	r3, [r0, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80058fe:	6863      	ldr	r3, [r4, #4]
 8005900:	2b10      	cmp	r3, #16
 8005902:	d10e      	bne.n	8005922 <HAL_DMA_Start_IT+0x62>
    hdma->Instance->CPAR = DstAddress;
 8005904:	6082      	str	r2, [r0, #8]
    hdma->Instance->CMAR = SrcAddress;
 8005906:	60c1      	str	r1, [r0, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 8005908:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800590a:	6802      	ldr	r2, [r0, #0]
    if (NULL != hdma->XferHalfCpltCallback)
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00b      	beq.n	8005928 <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005910:	230e      	movs	r3, #14
 8005912:	4313      	orrs	r3, r2
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8005914:	6003      	str	r3, [r0, #0]
    hdma->Instance->CCR |= DMA_CCR_EN;
 8005916:	2301      	movs	r3, #1
 8005918:	6802      	ldr	r2, [r0, #0]
 800591a:	4313      	orrs	r3, r2
 800591c:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800591e:	2000      	movs	r0, #0
}
 8005920:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = SrcAddress;
 8005922:	6081      	str	r1, [r0, #8]
    hdma->Instance->CMAR = DstAddress;
 8005924:	60c2      	str	r2, [r0, #12]
 8005926:	e7ef      	b.n	8005908 <HAL_DMA_Start_IT+0x48>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8005928:	230a      	movs	r3, #10
 800592a:	4313      	orrs	r3, r2
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800592c:	2204      	movs	r2, #4
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800592e:	6003      	str	r3, [r0, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8005930:	6803      	ldr	r3, [r0, #0]
 8005932:	4393      	bics	r3, r2
 8005934:	e7ee      	b.n	8005914 <HAL_DMA_Start_IT+0x54>
    status = HAL_BUSY;
 8005936:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);
 8005938:	77ee      	strb	r6, [r5, #31]
    status = HAL_BUSY;
 800593a:	e7f1      	b.n	8005920 <HAL_DMA_Start_IT+0x60>

0800593c <HAL_DMA_Abort_IT>:
{
 800593c:	b570      	push	{r4, r5, r6, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 800593e:	1c84      	adds	r4, r0, #2
 8005940:	7fe3      	ldrb	r3, [r4, #31]
 8005942:	2b02      	cmp	r3, #2
 8005944:	d004      	beq.n	8005950 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005946:	2304      	movs	r3, #4
 8005948:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 800594a:	3b03      	subs	r3, #3
}
 800594c:	0018      	movs	r0, r3
 800594e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005950:	210e      	movs	r1, #14
 8005952:	6803      	ldr	r3, [r0, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	438a      	bics	r2, r1
 8005958:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800595a:	2201      	movs	r2, #1
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800595c:	0015      	movs	r5, r2
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800595e:	6819      	ldr	r1, [r3, #0]
 8005960:	4391      	bics	r1, r2
 8005962:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005964:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8005966:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8005968:	408d      	lsls	r5, r1
 800596a:	605d      	str	r5, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800596c:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 800596e:	2400      	movs	r4, #0
 8005970:	1883      	adds	r3, r0, r2
 8005972:	77dc      	strb	r4, [r3, #31]
    if (hdma->XferAbortCallback != NULL)
 8005974:	6b42      	ldr	r2, [r0, #52]	; 0x34
  HAL_StatusTypeDef status = HAL_OK;
 8005976:	0013      	movs	r3, r2
    if (hdma->XferAbortCallback != NULL)
 8005978:	42a2      	cmp	r2, r4
 800597a:	d0e7      	beq.n	800594c <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 800597c:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 800597e:	0023      	movs	r3, r4
 8005980:	e7e4      	b.n	800594c <HAL_DMA_Abort_IT+0x10>

08005982 <HAL_DMA_IRQHandler>:
{
 8005982:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8005984:	2704      	movs	r7, #4
 8005986:	003e      	movs	r6, r7
 8005988:	6c01      	ldr	r1, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800598a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800598c:	408e      	lsls	r6, r1
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800598e:	6815      	ldr	r5, [r2, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8005990:	6803      	ldr	r3, [r0, #0]
 8005992:	681c      	ldr	r4, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8005994:	4235      	tst	r5, r6
 8005996:	d00d      	beq.n	80059b4 <HAL_DMA_IRQHandler+0x32>
 8005998:	423c      	tst	r4, r7
 800599a:	d00b      	beq.n	80059b4 <HAL_DMA_IRQHandler+0x32>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800599c:	6819      	ldr	r1, [r3, #0]
 800599e:	0689      	lsls	r1, r1, #26
 80059a0:	d402      	bmi.n	80059a8 <HAL_DMA_IRQHandler+0x26>
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80059a2:	6819      	ldr	r1, [r3, #0]
 80059a4:	43b9      	bics	r1, r7
 80059a6:	6019      	str	r1, [r3, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 80059a8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80059aa:	6056      	str	r6, [r2, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d019      	beq.n	80059e4 <HAL_DMA_IRQHandler+0x62>
      hdma->XferErrorCallback(hdma);
 80059b0:	4798      	blx	r3
}
 80059b2:	e017      	b.n	80059e4 <HAL_DMA_IRQHandler+0x62>
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80059b4:	2702      	movs	r7, #2
 80059b6:	003e      	movs	r6, r7
 80059b8:	408e      	lsls	r6, r1
 80059ba:	4235      	tst	r5, r6
 80059bc:	d013      	beq.n	80059e6 <HAL_DMA_IRQHandler+0x64>
 80059be:	423c      	tst	r4, r7
 80059c0:	d011      	beq.n	80059e6 <HAL_DMA_IRQHandler+0x64>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80059c2:	6819      	ldr	r1, [r3, #0]
 80059c4:	0689      	lsls	r1, r1, #26
 80059c6:	d406      	bmi.n	80059d6 <HAL_DMA_IRQHandler+0x54>
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80059c8:	240a      	movs	r4, #10
 80059ca:	6819      	ldr	r1, [r3, #0]
 80059cc:	43a1      	bics	r1, r4
 80059ce:	6019      	str	r1, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80059d0:	2101      	movs	r1, #1
 80059d2:	19c3      	adds	r3, r0, r7
 80059d4:	77d9      	strb	r1, [r3, #31]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80059d6:	6056      	str	r6, [r2, #4]
    __HAL_UNLOCK(hdma);
 80059d8:	2200      	movs	r2, #0
 80059da:	1c43      	adds	r3, r0, #1
 80059dc:	77da      	strb	r2, [r3, #31]
    if (hdma->XferCpltCallback != NULL)
 80059de:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if (hdma->XferErrorCallback != NULL)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d1e5      	bne.n	80059b0 <HAL_DMA_IRQHandler+0x2e>
}
 80059e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80059e6:	2608      	movs	r6, #8
 80059e8:	0037      	movs	r7, r6
 80059ea:	408f      	lsls	r7, r1
 80059ec:	423d      	tst	r5, r7
 80059ee:	d0f9      	beq.n	80059e4 <HAL_DMA_IRQHandler+0x62>
 80059f0:	4234      	tst	r4, r6
 80059f2:	d0f7      	beq.n	80059e4 <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80059f4:	250e      	movs	r5, #14
 80059f6:	681c      	ldr	r4, [r3, #0]
 80059f8:	43ac      	bics	r4, r5
 80059fa:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80059fc:	2301      	movs	r3, #1
 80059fe:	001c      	movs	r4, r3
 8005a00:	408c      	lsls	r4, r1
 8005a02:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8005a04:	1c82      	adds	r2, r0, #2
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005a06:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8005a08:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	18c3      	adds	r3, r0, r3
 8005a0e:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8005a10:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005a12:	e7e5      	b.n	80059e0 <HAL_DMA_IRQHandler+0x5e>

08005a14 <HAL_DMA_GetState>:
  return hdma->State;
 8005a14:	3002      	adds	r0, #2
 8005a16:	7fc0      	ldrb	r0, [r0, #31]
 8005a18:	b2c0      	uxtb	r0, r0
}
 8005a1a:	4770      	bx	lr

08005a1c <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8005a1c:	4a0c      	ldr	r2, [pc, #48]	; (8005a50 <FLASH_SetErrorCode+0x34>)
 8005a1e:	2110      	movs	r1, #16
 8005a20:	68d0      	ldr	r0, [r2, #12]
{
 8005a22:	b530      	push	{r4, r5, lr}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8005a24:	0003      	movs	r3, r0
 8005a26:	400b      	ands	r3, r1
 8005a28:	4208      	tst	r0, r1
 8005a2a:	d005      	beq.n	8005a38 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005a2c:	2302      	movs	r3, #2
 8005a2e:	4809      	ldr	r0, [pc, #36]	; (8005a54 <FLASH_SetErrorCode+0x38>)
 8005a30:	69c4      	ldr	r4, [r0, #28]
 8005a32:	4323      	orrs	r3, r4
 8005a34:	61c3      	str	r3, [r0, #28]
    flags |= FLASH_FLAG_WRPERR;
 8005a36:	000b      	movs	r3, r1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005a38:	2004      	movs	r0, #4
 8005a3a:	68d1      	ldr	r1, [r2, #12]
 8005a3c:	4201      	tst	r1, r0
 8005a3e:	d005      	beq.n	8005a4c <FLASH_SetErrorCode+0x30>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8005a40:	2101      	movs	r1, #1
 8005a42:	4c04      	ldr	r4, [pc, #16]	; (8005a54 <FLASH_SetErrorCode+0x38>)
    flags |= FLASH_FLAG_PGERR;
 8005a44:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8005a46:	69e5      	ldr	r5, [r4, #28]
 8005a48:	4329      	orrs	r1, r5
 8005a4a:	61e1      	str	r1, [r4, #28]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8005a4c:	60d3      	str	r3, [r2, #12]
}  
 8005a4e:	bd30      	pop	{r4, r5, pc}
 8005a50:	40022000 	.word	0x40022000
 8005a54:	20000918 	.word	0x20000918

08005a58 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005a58:	4b06      	ldr	r3, [pc, #24]	; (8005a74 <HAL_FLASH_Unlock+0x1c>)
  HAL_StatusTypeDef status = HAL_OK;
 8005a5a:	2000      	movs	r0, #0
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005a5c:	691a      	ldr	r2, [r3, #16]
 8005a5e:	0612      	lsls	r2, r2, #24
 8005a60:	d506      	bpl.n	8005a70 <HAL_FLASH_Unlock+0x18>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005a62:	4a05      	ldr	r2, [pc, #20]	; (8005a78 <HAL_FLASH_Unlock+0x20>)
 8005a64:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005a66:	4a05      	ldr	r2, [pc, #20]	; (8005a7c <HAL_FLASH_Unlock+0x24>)
 8005a68:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005a6a:	6918      	ldr	r0, [r3, #16]
 8005a6c:	0600      	lsls	r0, r0, #24
  HAL_StatusTypeDef status = HAL_OK;
 8005a6e:	0fc0      	lsrs	r0, r0, #31
}
 8005a70:	4770      	bx	lr
 8005a72:	46c0      	nop			; (mov r8, r8)
 8005a74:	40022000 	.word	0x40022000
 8005a78:	45670123 	.word	0x45670123
 8005a7c:	cdef89ab 	.word	0xcdef89ab

08005a80 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005a80:	2380      	movs	r3, #128	; 0x80
 8005a82:	4a03      	ldr	r2, [pc, #12]	; (8005a90 <HAL_FLASH_Lock+0x10>)
}
 8005a84:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005a86:	6911      	ldr	r1, [r2, #16]
 8005a88:	430b      	orrs	r3, r1
 8005a8a:	6113      	str	r3, [r2, #16]
}
 8005a8c:	4770      	bx	lr
 8005a8e:	46c0      	nop			; (mov r8, r8)
 8005a90:	40022000 	.word	0x40022000

08005a94 <FLASH_WaitForLastOperation>:
{
 8005a94:	b570      	push	{r4, r5, r6, lr}
 8005a96:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005a98:	f7ff fc00 	bl	800529c <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005a9c:	2601      	movs	r6, #1
  uint32_t tickstart = HAL_GetTick();
 8005a9e:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005aa0:	4b10      	ldr	r3, [pc, #64]	; (8005ae4 <FLASH_WaitForLastOperation+0x50>)
 8005aa2:	68da      	ldr	r2, [r3, #12]
 8005aa4:	4232      	tst	r2, r6
 8005aa6:	d111      	bne.n	8005acc <FLASH_WaitForLastOperation+0x38>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8005aa8:	2220      	movs	r2, #32
 8005aaa:	68d9      	ldr	r1, [r3, #12]
 8005aac:	4211      	tst	r1, r2
 8005aae:	d000      	beq.n	8005ab2 <FLASH_WaitForLastOperation+0x1e>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005ab0:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005ab2:	68d9      	ldr	r1, [r3, #12]
 8005ab4:	2210      	movs	r2, #16
 8005ab6:	0008      	movs	r0, r1
 8005ab8:	4010      	ands	r0, r2
 8005aba:	4211      	tst	r1, r2
 8005abc:	d102      	bne.n	8005ac4 <FLASH_WaitForLastOperation+0x30>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005abe:	68db      	ldr	r3, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005ac0:	075b      	lsls	r3, r3, #29
 8005ac2:	d508      	bpl.n	8005ad6 <FLASH_WaitForLastOperation+0x42>
    FLASH_SetErrorCode();
 8005ac4:	f7ff ffaa 	bl	8005a1c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005ac8:	2001      	movs	r0, #1
 8005aca:	e004      	b.n	8005ad6 <FLASH_WaitForLastOperation+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8005acc:	1c62      	adds	r2, r4, #1
 8005ace:	d0e8      	beq.n	8005aa2 <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8005ad0:	2c00      	cmp	r4, #0
 8005ad2:	d101      	bne.n	8005ad8 <FLASH_WaitForLastOperation+0x44>
        return HAL_TIMEOUT;
 8005ad4:	2003      	movs	r0, #3
}
 8005ad6:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8005ad8:	f7ff fbe0 	bl	800529c <HAL_GetTick>
 8005adc:	1b40      	subs	r0, r0, r5
 8005ade:	42a0      	cmp	r0, r4
 8005ae0:	d9de      	bls.n	8005aa0 <FLASH_WaitForLastOperation+0xc>
 8005ae2:	e7f7      	b.n	8005ad4 <FLASH_WaitForLastOperation+0x40>
 8005ae4:	40022000 	.word	0x40022000

08005ae8 <HAL_FLASH_Program>:
{
 8005ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005aea:	b085      	sub	sp, #20
 8005aec:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(&pFlash);
 8005aee:	4b1d      	ldr	r3, [pc, #116]	; (8005b64 <HAL_FLASH_Program+0x7c>)
{
 8005af0:	9100      	str	r1, [sp, #0]
 8005af2:	9202      	str	r2, [sp, #8]
  __HAL_LOCK(&pFlash);
 8005af4:	7e1a      	ldrb	r2, [r3, #24]
{
 8005af6:	0004      	movs	r4, r0
  __HAL_LOCK(&pFlash);
 8005af8:	2002      	movs	r0, #2
 8005afa:	2a01      	cmp	r2, #1
 8005afc:	d030      	beq.n	8005b60 <HAL_FLASH_Program+0x78>
 8005afe:	2201      	movs	r2, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005b00:	4819      	ldr	r0, [pc, #100]	; (8005b68 <HAL_FLASH_Program+0x80>)
  __HAL_LOCK(&pFlash);
 8005b02:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005b04:	f7ff ffc6 	bl	8005a94 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8005b08:	2800      	cmp	r0, #0
 8005b0a:	d126      	bne.n	8005b5a <HAL_FLASH_Program+0x72>
      nbiterations = 1U;
 8005b0c:	0026      	movs	r6, r4
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005b0e:	2c01      	cmp	r4, #1
 8005b10:	d002      	beq.n	8005b18 <HAL_FLASH_Program+0x30>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005b12:	2c02      	cmp	r4, #2
 8005b14:	d000      	beq.n	8005b18 <HAL_FLASH_Program+0x30>
      nbiterations = 4U;
 8005b16:	2604      	movs	r6, #4
 8005b18:	2400      	movs	r4, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005b1a:	4b12      	ldr	r3, [pc, #72]	; (8005b64 <HAL_FLASH_Program+0x7c>)
 8005b1c:	9301      	str	r3, [sp, #4]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8005b1e:	9802      	ldr	r0, [sp, #8]
 8005b20:	9903      	ldr	r1, [sp, #12]
 8005b22:	0122      	lsls	r2, r4, #4
 8005b24:	f7fa fc82 	bl	800042c <__aeabi_llsr>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005b28:	2200      	movs	r2, #0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005b2a:	2701      	movs	r7, #1
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005b2c:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005b2e:	4d0f      	ldr	r5, [pc, #60]	; (8005b6c <HAL_FLASH_Program+0x84>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005b30:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005b32:	692b      	ldr	r3, [r5, #16]
 8005b34:	9a00      	ldr	r2, [sp, #0]
 8005b36:	433b      	orrs	r3, r7
 8005b38:	612b      	str	r3, [r5, #16]
 8005b3a:	0063      	lsls	r3, r4, #1
 8005b3c:	189b      	adds	r3, r3, r2
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8005b3e:	b280      	uxth	r0, r0
  *(__IO uint16_t*)Address = Data;
 8005b40:	8018      	strh	r0, [r3, #0]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005b42:	4809      	ldr	r0, [pc, #36]	; (8005b68 <HAL_FLASH_Program+0x80>)
 8005b44:	f7ff ffa6 	bl	8005a94 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8005b48:	692b      	ldr	r3, [r5, #16]
 8005b4a:	43bb      	bics	r3, r7
 8005b4c:	612b      	str	r3, [r5, #16]
      if (status != HAL_OK)
 8005b4e:	2800      	cmp	r0, #0
 8005b50:	d103      	bne.n	8005b5a <HAL_FLASH_Program+0x72>
    for (index = 0U; index < nbiterations; index++)
 8005b52:	19e4      	adds	r4, r4, r7
 8005b54:	b2e3      	uxtb	r3, r4
 8005b56:	429e      	cmp	r6, r3
 8005b58:	d8e1      	bhi.n	8005b1e <HAL_FLASH_Program+0x36>
  __HAL_UNLOCK(&pFlash);
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	4b01      	ldr	r3, [pc, #4]	; (8005b64 <HAL_FLASH_Program+0x7c>)
 8005b5e:	761a      	strb	r2, [r3, #24]
}
 8005b60:	b005      	add	sp, #20
 8005b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b64:	20000918 	.word	0x20000918
 8005b68:	0000c350 	.word	0x0000c350
 8005b6c:	40022000 	.word	0x40022000

08005b70 <FLASH_MassErase>:
  * @retval None
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005b70:	2200      	movs	r2, #0
 8005b72:	4b06      	ldr	r3, [pc, #24]	; (8005b8c <FLASH_MassErase+0x1c>)
 8005b74:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8005b76:	4b06      	ldr	r3, [pc, #24]	; (8005b90 <FLASH_MassErase+0x20>)
 8005b78:	3204      	adds	r2, #4
 8005b7a:	6919      	ldr	r1, [r3, #16]
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005b80:	2240      	movs	r2, #64	; 0x40
 8005b82:	6919      	ldr	r1, [r3, #16]
 8005b84:	430a      	orrs	r2, r1
 8005b86:	611a      	str	r2, [r3, #16]
}
 8005b88:	4770      	bx	lr
 8005b8a:	46c0      	nop			; (mov r8, r8)
 8005b8c:	20000918 	.word	0x20000918
 8005b90:	40022000 	.word	0x40022000

08005b94 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005b94:	2200      	movs	r2, #0
 8005b96:	4b06      	ldr	r3, [pc, #24]	; (8005bb0 <FLASH_PageErase+0x1c>)
 8005b98:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8005b9a:	4b06      	ldr	r3, [pc, #24]	; (8005bb4 <FLASH_PageErase+0x20>)
 8005b9c:	3202      	adds	r2, #2
 8005b9e:	6919      	ldr	r1, [r3, #16]
 8005ba0:	430a      	orrs	r2, r1
 8005ba2:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005ba4:	2240      	movs	r2, #64	; 0x40
    WRITE_REG(FLASH->AR, PageAddress);
 8005ba6:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005ba8:	6919      	ldr	r1, [r3, #16]
 8005baa:	430a      	orrs	r2, r1
 8005bac:	611a      	str	r2, [r3, #16]
}
 8005bae:	4770      	bx	lr
 8005bb0:	20000918 	.word	0x20000918
 8005bb4:	40022000 	.word	0x40022000

08005bb8 <HAL_FLASHEx_Erase>:
{
 8005bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8005bba:	4f21      	ldr	r7, [pc, #132]	; (8005c40 <HAL_FLASHEx_Erase+0x88>)
{
 8005bbc:	0004      	movs	r4, r0
  __HAL_LOCK(&pFlash);
 8005bbe:	7e3b      	ldrb	r3, [r7, #24]
{
 8005bc0:	000e      	movs	r6, r1
  __HAL_LOCK(&pFlash);
 8005bc2:	2002      	movs	r0, #2
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d00c      	beq.n	8005be2 <HAL_FLASHEx_Erase+0x2a>
 8005bc8:	2301      	movs	r3, #1
 8005bca:	763b      	strb	r3, [r7, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005bcc:	6823      	ldr	r3, [r4, #0]
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005bce:	481d      	ldr	r0, [pc, #116]	; (8005c44 <HAL_FLASHEx_Erase+0x8c>)
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d112      	bne.n	8005bfa <HAL_FLASHEx_Erase+0x42>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005bd4:	f7ff ff5e 	bl	8005a94 <FLASH_WaitForLastOperation>
 8005bd8:	2800      	cmp	r0, #0
 8005bda:	d003      	beq.n	8005be4 <HAL_FLASHEx_Erase+0x2c>
  HAL_StatusTypeDef status = HAL_ERROR;
 8005bdc:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8005bde:	2300      	movs	r3, #0
 8005be0:	763b      	strb	r3, [r7, #24]
}
 8005be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        FLASH_MassErase();
 8005be4:	f7ff ffc4 	bl	8005b70 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005be8:	4816      	ldr	r0, [pc, #88]	; (8005c44 <HAL_FLASHEx_Erase+0x8c>)
 8005bea:	f7ff ff53 	bl	8005a94 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8005bee:	2104      	movs	r1, #4
 8005bf0:	4a15      	ldr	r2, [pc, #84]	; (8005c48 <HAL_FLASHEx_Erase+0x90>)
 8005bf2:	6913      	ldr	r3, [r2, #16]
 8005bf4:	438b      	bics	r3, r1
 8005bf6:	6113      	str	r3, [r2, #16]
 8005bf8:	e7f1      	b.n	8005bde <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005bfa:	f7ff ff4b 	bl	8005a94 <FLASH_WaitForLastOperation>
 8005bfe:	2800      	cmp	r0, #0
 8005c00:	d1ec      	bne.n	8005bdc <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 8005c02:	2301      	movs	r3, #1
 8005c04:	425b      	negs	r3, r3
 8005c06:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 8005c08:	6865      	ldr	r5, [r4, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005c0a:	3001      	adds	r0, #1
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8005c0c:	68a3      	ldr	r3, [r4, #8]
 8005c0e:	6862      	ldr	r2, [r4, #4]
 8005c10:	029b      	lsls	r3, r3, #10
 8005c12:	189b      	adds	r3, r3, r2
 8005c14:	42ab      	cmp	r3, r5
 8005c16:	d9e2      	bls.n	8005bde <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 8005c18:	0028      	movs	r0, r5
 8005c1a:	f7ff ffbb 	bl	8005b94 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005c1e:	4809      	ldr	r0, [pc, #36]	; (8005c44 <HAL_FLASHEx_Erase+0x8c>)
 8005c20:	f7ff ff38 	bl	8005a94 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8005c24:	2102      	movs	r1, #2
 8005c26:	4a08      	ldr	r2, [pc, #32]	; (8005c48 <HAL_FLASHEx_Erase+0x90>)
 8005c28:	6913      	ldr	r3, [r2, #16]
 8005c2a:	438b      	bics	r3, r1
 8005c2c:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 8005c2e:	2800      	cmp	r0, #0
 8005c30:	d001      	beq.n	8005c36 <HAL_FLASHEx_Erase+0x7e>
            *PageError = address;
 8005c32:	6035      	str	r5, [r6, #0]
            break;
 8005c34:	e7d3      	b.n	8005bde <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 8005c36:	2380      	movs	r3, #128	; 0x80
 8005c38:	00db      	lsls	r3, r3, #3
 8005c3a:	18ed      	adds	r5, r5, r3
 8005c3c:	e7e6      	b.n	8005c0c <HAL_FLASHEx_Erase+0x54>
 8005c3e:	46c0      	nop			; (mov r8, r8)
 8005c40:	20000918 	.word	0x20000918
 8005c44:	0000c350 	.word	0x0000c350
 8005c48:	40022000 	.word	0x40022000

08005c4c <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 8005c4c:	2300      	movs	r3, #0
{
 8005c4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c50:	b087      	sub	sp, #28
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005c52:	680a      	ldr	r2, [r1, #0]
 8005c54:	0014      	movs	r4, r2
 8005c56:	40dc      	lsrs	r4, r3
 8005c58:	d101      	bne.n	8005c5e <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  } 
}
 8005c5a:	b007      	add	sp, #28
 8005c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005c5e:	2501      	movs	r5, #1
 8005c60:	0014      	movs	r4, r2
 8005c62:	409d      	lsls	r5, r3
 8005c64:	402c      	ands	r4, r5
 8005c66:	9400      	str	r4, [sp, #0]
    if (iocurrent != 0x00u)
 8005c68:	422a      	tst	r2, r5
 8005c6a:	d100      	bne.n	8005c6e <HAL_GPIO_Init+0x22>
 8005c6c:	e098      	b.n	8005da0 <HAL_GPIO_Init+0x154>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005c6e:	684a      	ldr	r2, [r1, #4]
 8005c70:	005f      	lsls	r7, r3, #1
 8005c72:	4694      	mov	ip, r2
 8005c74:	2203      	movs	r2, #3
 8005c76:	4664      	mov	r4, ip
 8005c78:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005c7a:	2403      	movs	r4, #3
 8005c7c:	40bc      	lsls	r4, r7
 8005c7e:	43e4      	mvns	r4, r4
 8005c80:	9401      	str	r4, [sp, #4]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005c82:	1e54      	subs	r4, r2, #1
 8005c84:	2c01      	cmp	r4, #1
 8005c86:	d82e      	bhi.n	8005ce6 <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 8005c88:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005c8a:	9c01      	ldr	r4, [sp, #4]
 8005c8c:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005c8e:	68cc      	ldr	r4, [r1, #12]
 8005c90:	40bc      	lsls	r4, r7
 8005c92:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8005c94:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8005c96:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c98:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c9a:	43ac      	bics	r4, r5
 8005c9c:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c9e:	4664      	mov	r4, ip
 8005ca0:	0924      	lsrs	r4, r4, #4
 8005ca2:	4034      	ands	r4, r6
 8005ca4:	409c      	lsls	r4, r3
 8005ca6:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8005ca8:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8005caa:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005cac:	9c01      	ldr	r4, [sp, #4]
 8005cae:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005cb0:	688c      	ldr	r4, [r1, #8]
 8005cb2:	40bc      	lsls	r4, r7
 8005cb4:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8005cb6:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005cb8:	2a02      	cmp	r2, #2
 8005cba:	d116      	bne.n	8005cea <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005cbc:	2507      	movs	r5, #7
 8005cbe:	260f      	movs	r6, #15
 8005cc0:	401d      	ands	r5, r3
 8005cc2:	00ad      	lsls	r5, r5, #2
 8005cc4:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3u];
 8005cc6:	08dc      	lsrs	r4, r3, #3
 8005cc8:	00a4      	lsls	r4, r4, #2
 8005cca:	1904      	adds	r4, r0, r4
 8005ccc:	9402      	str	r4, [sp, #8]
 8005cce:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005cd0:	9603      	str	r6, [sp, #12]
 8005cd2:	0026      	movs	r6, r4
 8005cd4:	9c03      	ldr	r4, [sp, #12]
 8005cd6:	43a6      	bics	r6, r4
 8005cd8:	0034      	movs	r4, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005cda:	690e      	ldr	r6, [r1, #16]
 8005cdc:	40ae      	lsls	r6, r5
 8005cde:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3u] = temp;
 8005ce0:	9c02      	ldr	r4, [sp, #8]
 8005ce2:	6226      	str	r6, [r4, #32]
 8005ce4:	e001      	b.n	8005cea <HAL_GPIO_Init+0x9e>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ce6:	2a03      	cmp	r2, #3
 8005ce8:	d1df      	bne.n	8005caa <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005cea:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8005cec:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005cee:	9d01      	ldr	r5, [sp, #4]
 8005cf0:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005cf2:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005cf4:	24c0      	movs	r4, #192	; 0xc0
      GPIOx->MODER = temp;
 8005cf6:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005cf8:	4662      	mov	r2, ip
 8005cfa:	02a4      	lsls	r4, r4, #10
 8005cfc:	4222      	tst	r2, r4
 8005cfe:	d04f      	beq.n	8005da0 <HAL_GPIO_Init+0x154>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d00:	2501      	movs	r5, #1
 8005d02:	4a28      	ldr	r2, [pc, #160]	; (8005da4 <HAL_GPIO_Init+0x158>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005d04:	2790      	movs	r7, #144	; 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d06:	6994      	ldr	r4, [r2, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005d08:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d0a:	432c      	orrs	r4, r5
 8005d0c:	6194      	str	r4, [r2, #24]
 8005d0e:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8005d10:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d12:	402a      	ands	r2, r5
 8005d14:	9205      	str	r2, [sp, #20]
 8005d16:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 8005d18:	4a23      	ldr	r2, [pc, #140]	; (8005da8 <HAL_GPIO_Init+0x15c>)
 8005d1a:	00a4      	lsls	r4, r4, #2
 8005d1c:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005d1e:	220f      	movs	r2, #15
 8005d20:	3502      	adds	r5, #2
 8005d22:	401d      	ands	r5, r3
 8005d24:	00ad      	lsls	r5, r5, #2
 8005d26:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2u];
 8005d28:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005d2a:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	42b8      	cmp	r0, r7
 8005d30:	d00c      	beq.n	8005d4c <HAL_GPIO_Init+0x100>
 8005d32:	4f1e      	ldr	r7, [pc, #120]	; (8005dac <HAL_GPIO_Init+0x160>)
 8005d34:	3201      	adds	r2, #1
 8005d36:	42b8      	cmp	r0, r7
 8005d38:	d008      	beq.n	8005d4c <HAL_GPIO_Init+0x100>
 8005d3a:	4f1d      	ldr	r7, [pc, #116]	; (8005db0 <HAL_GPIO_Init+0x164>)
 8005d3c:	3201      	adds	r2, #1
 8005d3e:	42b8      	cmp	r0, r7
 8005d40:	d004      	beq.n	8005d4c <HAL_GPIO_Init+0x100>
 8005d42:	4f1c      	ldr	r7, [pc, #112]	; (8005db4 <HAL_GPIO_Init+0x168>)
 8005d44:	3201      	adds	r2, #1
 8005d46:	42b8      	cmp	r0, r7
 8005d48:	d000      	beq.n	8005d4c <HAL_GPIO_Init+0x100>
 8005d4a:	3202      	adds	r2, #2
 8005d4c:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005d4e:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005d50:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005d52:	60a2      	str	r2, [r4, #8]
        temp = EXTI->RTSR;
 8005d54:	4a18      	ldr	r2, [pc, #96]	; (8005db8 <HAL_GPIO_Init+0x16c>)
        temp &= ~(iocurrent);
 8005d56:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->RTSR;
 8005d58:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8005d5a:	9d00      	ldr	r5, [sp, #0]
        temp &= ~(iocurrent);
 8005d5c:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8005d5e:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005d60:	02ff      	lsls	r7, r7, #11
 8005d62:	d401      	bmi.n	8005d68 <HAL_GPIO_Init+0x11c>
        temp &= ~(iocurrent);
 8005d64:	0035      	movs	r5, r6
 8005d66:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005d68:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8005d6a:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8005d6c:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 8005d6e:	9d00      	ldr	r5, [sp, #0]
 8005d70:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005d72:	02bf      	lsls	r7, r7, #10
 8005d74:	d401      	bmi.n	8005d7a <HAL_GPIO_Init+0x12e>
        temp &= ~(iocurrent);
 8005d76:	0035      	movs	r5, r6
 8005d78:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005d7a:	4667      	mov	r7, ip
        EXTI->FTSR = temp;
 8005d7c:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 8005d7e:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8005d80:	9d00      	ldr	r5, [sp, #0]
 8005d82:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005d84:	03bf      	lsls	r7, r7, #14
 8005d86:	d401      	bmi.n	8005d8c <HAL_GPIO_Init+0x140>
        temp &= ~(iocurrent);
 8005d88:	0035      	movs	r5, r6
 8005d8a:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005d8c:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 8005d8e:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 8005d90:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 8005d92:	9e00      	ldr	r6, [sp, #0]
 8005d94:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005d96:	03ff      	lsls	r7, r7, #15
 8005d98:	d401      	bmi.n	8005d9e <HAL_GPIO_Init+0x152>
        temp &= ~(iocurrent);
 8005d9a:	4025      	ands	r5, r4
 8005d9c:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 8005d9e:	6016      	str	r6, [r2, #0]
    position++;
 8005da0:	3301      	adds	r3, #1
 8005da2:	e756      	b.n	8005c52 <HAL_GPIO_Init+0x6>
 8005da4:	40021000 	.word	0x40021000
 8005da8:	40010000 	.word	0x40010000
 8005dac:	48000400 	.word	0x48000400
 8005db0:	48000800 	.word	0x48000800
 8005db4:	48000c00 	.word	0x48000c00
 8005db8:	40010400 	.word	0x40010400

08005dbc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005dbc:	6900      	ldr	r0, [r0, #16]
 8005dbe:	4008      	ands	r0, r1
 8005dc0:	1e43      	subs	r3, r0, #1
 8005dc2:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8005dc4:	b2c0      	uxtb	r0, r0
  }
 8005dc6:	4770      	bx	lr

08005dc8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005dc8:	2a00      	cmp	r2, #0
 8005dca:	d001      	beq.n	8005dd0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005dcc:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005dce:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005dd0:	6281      	str	r1, [r0, #40]	; 0x28
}
 8005dd2:	e7fc      	b.n	8005dce <HAL_GPIO_WritePin+0x6>

08005dd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005dd4:	4b04      	ldr	r3, [pc, #16]	; (8005de8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8005dd6:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005dd8:	695a      	ldr	r2, [r3, #20]
 8005dda:	4210      	tst	r0, r2
 8005ddc:	d002      	beq.n	8005de4 <HAL_GPIO_EXTI_IRQHandler+0x10>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005dde:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005de0:	f7fd ff20 	bl	8003c24 <HAL_GPIO_EXTI_Callback>
  }
}
 8005de4:	bd10      	pop	{r4, pc}
 8005de6:	46c0      	nop			; (mov r8, r8)
 8005de8:	40010400 	.word	0x40010400

08005dec <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005dec:	6803      	ldr	r3, [r0, #0]
 8005dee:	699a      	ldr	r2, [r3, #24]
 8005df0:	0792      	lsls	r2, r2, #30
 8005df2:	d501      	bpl.n	8005df8 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005df4:	2200      	movs	r2, #0
 8005df6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005df8:	2201      	movs	r2, #1
 8005dfa:	6999      	ldr	r1, [r3, #24]
 8005dfc:	4211      	tst	r1, r2
 8005dfe:	d102      	bne.n	8005e06 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005e00:	6999      	ldr	r1, [r3, #24]
 8005e02:	430a      	orrs	r2, r1
 8005e04:	619a      	str	r2, [r3, #24]
  }
}
 8005e06:	4770      	bx	lr

08005e08 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005e08:	b530      	push	{r4, r5, lr}
 8005e0a:	9c03      	ldr	r4, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005e0c:	6800      	ldr	r0, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e0e:	4323      	orrs	r3, r4
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005e10:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e12:	0589      	lsls	r1, r1, #22
 8005e14:	431a      	orrs	r2, r3
 8005e16:	0d89      	lsrs	r1, r1, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8005e18:	4b05      	ldr	r3, [pc, #20]	; (8005e30 <I2C_TransferConfig+0x28>)
 8005e1a:	6845      	ldr	r5, [r0, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e1c:	430a      	orrs	r2, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8005e1e:	0d64      	lsrs	r4, r4, #21
 8005e20:	4323      	orrs	r3, r4
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e22:	0052      	lsls	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8005e24:	439d      	bics	r5, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e26:	0852      	lsrs	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8005e28:	432a      	orrs	r2, r5
 8005e2a:	6042      	str	r2, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005e2c:	bd30      	pop	{r4, r5, pc}
 8005e2e:	46c0      	nop			; (mov r8, r8)
 8005e30:	03ff63ff 	.word	0x03ff63ff

08005e34 <I2C_Enable_IRQ>:
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005e34:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8005e36:	4b1e      	ldr	r3, [pc, #120]	; (8005eb0 <I2C_Enable_IRQ+0x7c>)
{
 8005e38:	b510      	push	{r4, lr}
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005e3a:	b20c      	sxth	r4, r1
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d01e      	beq.n	8005e7e <I2C_Enable_IRQ+0x4a>
 8005e40:	4b1c      	ldr	r3, [pc, #112]	; (8005eb4 <I2C_Enable_IRQ+0x80>)
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d01b      	beq.n	8005e7e <I2C_Enable_IRQ+0x4a>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005e46:	4b1c      	ldr	r3, [pc, #112]	; (8005eb8 <I2C_Enable_IRQ+0x84>)
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d018      	beq.n	8005e7e <I2C_Enable_IRQ+0x4a>
  uint32_t tmpisr = 0U;
 8005e4c:	2300      	movs	r3, #0
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005e4e:	429c      	cmp	r4, r3
 8005e50:	da00      	bge.n	8005e54 <I2C_Enable_IRQ+0x20>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005e52:	33b8      	adds	r3, #184	; 0xb8
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005e54:	07ca      	lsls	r2, r1, #31
 8005e56:	d501      	bpl.n	8005e5c <I2C_Enable_IRQ+0x28>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005e58:	22f2      	movs	r2, #242	; 0xf2
 8005e5a:	4313      	orrs	r3, r2
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005e5c:	078a      	lsls	r2, r1, #30
 8005e5e:	d501      	bpl.n	8005e64 <I2C_Enable_IRQ+0x30>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005e60:	22f4      	movs	r2, #244	; 0xf4
 8005e62:	4313      	orrs	r3, r2
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005e64:	2910      	cmp	r1, #16
 8005e66:	d106      	bne.n	8005e76 <I2C_Enable_IRQ+0x42>
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005e68:	2290      	movs	r2, #144	; 0x90
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8005e6a:	4313      	orrs	r3, r2
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8005e6c:	6801      	ldr	r1, [r0, #0]
 8005e6e:	680a      	ldr	r2, [r1, #0]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	600b      	str	r3, [r1, #0]
}
 8005e74:	bd10      	pop	{r4, pc}
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005e76:	2920      	cmp	r1, #32
 8005e78:	d1f8      	bne.n	8005e6c <I2C_Enable_IRQ+0x38>
      tmpisr |= I2C_IT_TCI;
 8005e7a:	430b      	orrs	r3, r1
 8005e7c:	e7f6      	b.n	8005e6c <I2C_Enable_IRQ+0x38>
  uint32_t tmpisr = 0U;
 8005e7e:	2300      	movs	r3, #0
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005e80:	429c      	cmp	r4, r3
 8005e82:	da00      	bge.n	8005e86 <I2C_Enable_IRQ+0x52>
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005e84:	33b8      	adds	r3, #184	; 0xb8
    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005e86:	07cc      	lsls	r4, r1, #31
 8005e88:	d501      	bpl.n	8005e8e <I2C_Enable_IRQ+0x5a>
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005e8a:	24f2      	movs	r4, #242	; 0xf2
 8005e8c:	4323      	orrs	r3, r4
    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005e8e:	078c      	lsls	r4, r1, #30
 8005e90:	d501      	bpl.n	8005e96 <I2C_Enable_IRQ+0x62>
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005e92:	24f4      	movs	r4, #244	; 0xf4
 8005e94:	4323      	orrs	r3, r4
    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005e96:	2910      	cmp	r1, #16
 8005e98:	d0e6      	beq.n	8005e68 <I2C_Enable_IRQ+0x34>
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005e9a:	2920      	cmp	r1, #32
 8005e9c:	d101      	bne.n	8005ea2 <I2C_Enable_IRQ+0x6e>
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8005e9e:	2260      	movs	r2, #96	; 0x60
 8005ea0:	e7e3      	b.n	8005e6a <I2C_Enable_IRQ+0x36>
    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8005ea2:	4c05      	ldr	r4, [pc, #20]	; (8005eb8 <I2C_Enable_IRQ+0x84>)
 8005ea4:	42a2      	cmp	r2, r4
 8005ea6:	d0e1      	beq.n	8005e6c <I2C_Enable_IRQ+0x38>
 8005ea8:	2940      	cmp	r1, #64	; 0x40
 8005eaa:	d0e6      	beq.n	8005e7a <I2C_Enable_IRQ+0x46>
 8005eac:	e7de      	b.n	8005e6c <I2C_Enable_IRQ+0x38>
 8005eae:	46c0      	nop			; (mov r8, r8)
 8005eb0:	08006afd 	.word	0x08006afd
 8005eb4:	08006df5 	.word	0x08006df5
 8005eb8:	080069b5 	.word	0x080069b5

08005ebc <I2C_Disable_IRQ>:
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;
 8005ebc:	2300      	movs	r3, #0
{
 8005ebe:	b510      	push	{r4, lr}

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005ec0:	07ca      	lsls	r2, r1, #31
 8005ec2:	d508      	bpl.n	8005ed6 <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005ec4:	0003      	movs	r3, r0
 8005ec6:	3341      	adds	r3, #65	; 0x41
 8005ec8:	781a      	ldrb	r2, [r3, #0]
 8005eca:	2328      	movs	r3, #40	; 0x28
 8005ecc:	401a      	ands	r2, r3
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005ece:	331a      	adds	r3, #26
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005ed0:	2a28      	cmp	r2, #40	; 0x28
 8005ed2:	d000      	beq.n	8005ed6 <I2C_Disable_IRQ+0x1a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005ed4:	33b0      	adds	r3, #176	; 0xb0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005ed6:	078a      	lsls	r2, r1, #30
 8005ed8:	d508      	bpl.n	8005eec <I2C_Disable_IRQ+0x30>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005eda:	0002      	movs	r2, r0
 8005edc:	2428      	movs	r4, #40	; 0x28
 8005ede:	3241      	adds	r2, #65	; 0x41
 8005ee0:	7812      	ldrb	r2, [r2, #0]
 8005ee2:	4022      	ands	r2, r4
 8005ee4:	42a2      	cmp	r2, r4
 8005ee6:	d10b      	bne.n	8005f00 <I2C_Disable_IRQ+0x44>
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005ee8:	2244      	movs	r2, #68	; 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005eea:	4313      	orrs	r3, r2
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005eec:	b209      	sxth	r1, r1
 8005eee:	2900      	cmp	r1, #0
 8005ef0:	da01      	bge.n	8005ef6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005ef2:	22b8      	movs	r2, #184	; 0xb8
 8005ef4:	4313      	orrs	r3, r2
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005ef6:	6801      	ldr	r1, [r0, #0]
 8005ef8:	680a      	ldr	r2, [r1, #0]
 8005efa:	439a      	bics	r2, r3
 8005efc:	600a      	str	r2, [r1, #0]
}
 8005efe:	bd10      	pop	{r4, pc}
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005f00:	22f4      	movs	r2, #244	; 0xf4
 8005f02:	e7f2      	b.n	8005eea <I2C_Disable_IRQ+0x2e>

08005f04 <I2C_IsErrorOccurred>:
{
 8005f04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f06:	0015      	movs	r5, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8005f08:	6802      	ldr	r2, [r0, #0]
{
 8005f0a:	000e      	movs	r6, r1
  uint32_t itflag   = hi2c->Instance->ISR;
 8005f0c:	6991      	ldr	r1, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005f0e:	2310      	movs	r3, #16
 8005f10:	000f      	movs	r7, r1
{
 8005f12:	0004      	movs	r4, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005f14:	401f      	ands	r7, r3
  HAL_StatusTypeDef status = HAL_OK;
 8005f16:	2000      	movs	r0, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005f18:	4219      	tst	r1, r3
 8005f1a:	d00e      	beq.n	8005f3a <I2C_IsErrorOccurred+0x36>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005f1c:	2720      	movs	r7, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f1e:	61d3      	str	r3, [r2, #28]
  uint32_t error_code = 0;
 8005f20:	9000      	str	r0, [sp, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f22:	9001      	str	r0, [sp, #4]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005f24:	6823      	ldr	r3, [r4, #0]
 8005f26:	699a      	ldr	r2, [r3, #24]
 8005f28:	423a      	tst	r2, r7
 8005f2a:	d163      	bne.n	8005ff4 <I2C_IsErrorOccurred+0xf0>
 8005f2c:	9a01      	ldr	r2, [sp, #4]
 8005f2e:	2a00      	cmp	r2, #0
 8005f30:	d031      	beq.n	8005f96 <I2C_IsErrorOccurred+0x92>
    error_code |= HAL_I2C_ERROR_AF;
 8005f32:	2704      	movs	r7, #4
    status = HAL_ERROR;
 8005f34:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_AF;
 8005f36:	9b00      	ldr	r3, [sp, #0]
 8005f38:	431f      	orrs	r7, r3
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005f3a:	2280      	movs	r2, #128	; 0x80
  itflag = hi2c->Instance->ISR;
 8005f3c:	6825      	ldr	r5, [r4, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005f3e:	0052      	lsls	r2, r2, #1
  itflag = hi2c->Instance->ISR;
 8005f40:	69ab      	ldr	r3, [r5, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005f42:	4213      	tst	r3, r2
 8005f44:	d002      	beq.n	8005f4c <I2C_IsErrorOccurred+0x48>
    error_code |= HAL_I2C_ERROR_BERR;
 8005f46:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005f48:	61ea      	str	r2, [r5, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8005f4a:	4307      	orrs	r7, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005f4c:	2280      	movs	r2, #128	; 0x80
 8005f4e:	00d2      	lsls	r2, r2, #3
 8005f50:	4213      	tst	r3, r2
 8005f52:	d003      	beq.n	8005f5c <I2C_IsErrorOccurred+0x58>
    error_code |= HAL_I2C_ERROR_OVR;
 8005f54:	2108      	movs	r1, #8
    status = HAL_ERROR;
 8005f56:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_OVR;
 8005f58:	430f      	orrs	r7, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005f5a:	61ea      	str	r2, [r5, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005f5c:	2280      	movs	r2, #128	; 0x80
 8005f5e:	0092      	lsls	r2, r2, #2
 8005f60:	4213      	tst	r3, r2
 8005f62:	d04c      	beq.n	8005ffe <I2C_IsErrorOccurred+0xfa>
    error_code |= HAL_I2C_ERROR_ARLO;
 8005f64:	2302      	movs	r3, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005f66:	61ea      	str	r2, [r5, #28]
    error_code |= HAL_I2C_ERROR_ARLO;
 8005f68:	431f      	orrs	r7, r3
    I2C_Flush_TXDR(hi2c);
 8005f6a:	0020      	movs	r0, r4
 8005f6c:	f7ff ff3e 	bl	8005dec <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8005f70:	686b      	ldr	r3, [r5, #4]
 8005f72:	4a24      	ldr	r2, [pc, #144]	; (8006004 <I2C_IsErrorOccurred+0x100>)
    __HAL_UNLOCK(hi2c);
 8005f74:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8005f76:	4013      	ands	r3, r2
 8005f78:	606b      	str	r3, [r5, #4]
    hi2c->ErrorCode |= error_code;
 8005f7a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005f7c:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 8005f7e:	433b      	orrs	r3, r7
 8005f80:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005f82:	0023      	movs	r3, r4
 8005f84:	3341      	adds	r3, #65	; 0x41
 8005f86:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f88:	0022      	movs	r2, r4
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 8005f8e:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f90:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8005f92:	7023      	strb	r3, [r4, #0]
 8005f94:	e035      	b.n	8006002 <I2C_IsErrorOccurred+0xfe>
      if (Timeout != HAL_MAX_DELAY)
 8005f96:	1c72      	adds	r2, r6, #1
 8005f98:	d0c5      	beq.n	8005f26 <I2C_IsErrorOccurred+0x22>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005f9a:	f7ff f97f 	bl	800529c <HAL_GetTick>
 8005f9e:	1b40      	subs	r0, r0, r5
 8005fa0:	42b0      	cmp	r0, r6
 8005fa2:	d801      	bhi.n	8005fa8 <I2C_IsErrorOccurred+0xa4>
 8005fa4:	2e00      	cmp	r6, #0
 8005fa6:	d1bd      	bne.n	8005f24 <I2C_IsErrorOccurred+0x20>
          tmp2 = hi2c->Mode;
 8005fa8:	0022      	movs	r2, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005faa:	6823      	ldr	r3, [r4, #0]
          tmp2 = hi2c->Mode;
 8005fac:	3242      	adds	r2, #66	; 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005fae:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8005fb0:	7811      	ldrb	r1, [r2, #0]
 8005fb2:	b2ca      	uxtb	r2, r1
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005fb4:	2180      	movs	r1, #128	; 0x80
          tmp2 = hi2c->Mode;
 8005fb6:	4694      	mov	ip, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005fb8:	699a      	ldr	r2, [r3, #24]
 8005fba:	0209      	lsls	r1, r1, #8
 8005fbc:	420a      	tst	r2, r1
 8005fbe:	d00c      	beq.n	8005fda <I2C_IsErrorOccurred+0xd6>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005fc0:	2280      	movs	r2, #128	; 0x80
 8005fc2:	01d2      	lsls	r2, r2, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005fc4:	4210      	tst	r0, r2
 8005fc6:	d108      	bne.n	8005fda <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005fc8:	4661      	mov	r1, ip
 8005fca:	2920      	cmp	r1, #32
 8005fcc:	d005      	beq.n	8005fda <I2C_IsErrorOccurred+0xd6>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005fce:	6859      	ldr	r1, [r3, #4]
 8005fd0:	430a      	orrs	r2, r1
 8005fd2:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8005fd4:	f7ff f962 	bl	800529c <HAL_GetTick>
 8005fd8:	0005      	movs	r5, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005fda:	6823      	ldr	r3, [r4, #0]
 8005fdc:	699b      	ldr	r3, [r3, #24]
 8005fde:	423b      	tst	r3, r7
 8005fe0:	d1a0      	bne.n	8005f24 <I2C_IsErrorOccurred+0x20>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005fe2:	f7ff f95b 	bl	800529c <HAL_GetTick>
 8005fe6:	1b40      	subs	r0, r0, r5
 8005fe8:	2819      	cmp	r0, #25
 8005fea:	d9f6      	bls.n	8005fda <I2C_IsErrorOccurred+0xd6>
              status = HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005fee:	9700      	str	r7, [sp, #0]
              status = HAL_ERROR;
 8005ff0:	9301      	str	r3, [sp, #4]
 8005ff2:	e797      	b.n	8005f24 <I2C_IsErrorOccurred+0x20>
    if (status == HAL_OK)
 8005ff4:	9a01      	ldr	r2, [sp, #4]
 8005ff6:	2a00      	cmp	r2, #0
 8005ff8:	d19b      	bne.n	8005f32 <I2C_IsErrorOccurred+0x2e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ffa:	61df      	str	r7, [r3, #28]
 8005ffc:	e799      	b.n	8005f32 <I2C_IsErrorOccurred+0x2e>
  if (status != HAL_OK)
 8005ffe:	2800      	cmp	r0, #0
 8006000:	d1b3      	bne.n	8005f6a <I2C_IsErrorOccurred+0x66>
}
 8006002:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006004:	fe00e800 	.word	0xfe00e800

08006008 <I2C_WaitOnFlagUntilTimeout>:
{
 8006008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800600a:	0004      	movs	r4, r0
 800600c:	000d      	movs	r5, r1
 800600e:	0017      	movs	r7, r2
 8006010:	001e      	movs	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006012:	6822      	ldr	r2, [r4, #0]
 8006014:	6993      	ldr	r3, [r2, #24]
 8006016:	402b      	ands	r3, r5
 8006018:	1b5b      	subs	r3, r3, r5
 800601a:	4259      	negs	r1, r3
 800601c:	414b      	adcs	r3, r1
 800601e:	42bb      	cmp	r3, r7
 8006020:	d001      	beq.n	8006026 <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8006022:	2000      	movs	r0, #0
 8006024:	e01f      	b.n	8006066 <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 8006026:	1c73      	adds	r3, r6, #1
 8006028:	d0f4      	beq.n	8006014 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800602a:	f7ff f937 	bl	800529c <HAL_GetTick>
 800602e:	9b06      	ldr	r3, [sp, #24]
 8006030:	1ac0      	subs	r0, r0, r3
 8006032:	42b0      	cmp	r0, r6
 8006034:	d801      	bhi.n	800603a <I2C_WaitOnFlagUntilTimeout+0x32>
 8006036:	2e00      	cmp	r6, #0
 8006038:	d1eb      	bne.n	8006012 <I2C_WaitOnFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800603a:	6823      	ldr	r3, [r4, #0]
 800603c:	699b      	ldr	r3, [r3, #24]
 800603e:	402b      	ands	r3, r5
 8006040:	1b5b      	subs	r3, r3, r5
 8006042:	425a      	negs	r2, r3
 8006044:	4153      	adcs	r3, r2
 8006046:	42bb      	cmp	r3, r7
 8006048:	d1e3      	bne.n	8006012 <I2C_WaitOnFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800604a:	2220      	movs	r2, #32
 800604c:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 800604e:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006050:	4313      	orrs	r3, r2
 8006052:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006054:	0023      	movs	r3, r4
 8006056:	3341      	adds	r3, #65	; 0x41
 8006058:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800605a:	0022      	movs	r2, r4
 800605c:	2300      	movs	r3, #0
 800605e:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 8006060:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006062:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 8006064:	7023      	strb	r3, [r4, #0]
}
 8006066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006068 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8006068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800606a:	0004      	movs	r4, r0
 800606c:	000e      	movs	r6, r1
 800606e:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006070:	2520      	movs	r5, #32
 8006072:	6823      	ldr	r3, [r4, #0]
 8006074:	699b      	ldr	r3, [r3, #24]
 8006076:	422b      	tst	r3, r5
 8006078:	d001      	beq.n	800607e <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 800607a:	2000      	movs	r0, #0
}
 800607c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800607e:	003a      	movs	r2, r7
 8006080:	0031      	movs	r1, r6
 8006082:	0020      	movs	r0, r4
 8006084:	f7ff ff3e 	bl	8005f04 <I2C_IsErrorOccurred>
 8006088:	2800      	cmp	r0, #0
 800608a:	d115      	bne.n	80060b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800608c:	f7ff f906 	bl	800529c <HAL_GetTick>
 8006090:	1bc0      	subs	r0, r0, r7
 8006092:	42b0      	cmp	r0, r6
 8006094:	d801      	bhi.n	800609a <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8006096:	2e00      	cmp	r6, #0
 8006098:	d1eb      	bne.n	8006072 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800609a:	6823      	ldr	r3, [r4, #0]
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	001a      	movs	r2, r3
 80060a0:	402a      	ands	r2, r5
 80060a2:	422b      	tst	r3, r5
 80060a4:	d1e5      	bne.n	8006072 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80060a8:	432b      	orrs	r3, r5
 80060aa:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80060ac:	0023      	movs	r3, r4
        __HAL_UNLOCK(hi2c);
 80060ae:	3440      	adds	r4, #64	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 80060b0:	3341      	adds	r3, #65	; 0x41
 80060b2:	701d      	strb	r5, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80060b4:	705a      	strb	r2, [r3, #1]
        __HAL_UNLOCK(hi2c);
 80060b6:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 80060b8:	2001      	movs	r0, #1
 80060ba:	e7df      	b.n	800607c <I2C_WaitOnSTOPFlagUntilTimeout+0x14>

080060bc <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80060bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060be:	0004      	movs	r4, r0
 80060c0:	000d      	movs	r5, r1
 80060c2:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80060c4:	2604      	movs	r6, #4
 80060c6:	6823      	ldr	r3, [r4, #0]
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	4233      	tst	r3, r6
 80060cc:	d111      	bne.n	80060f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80060ce:	003a      	movs	r2, r7
 80060d0:	0029      	movs	r1, r5
 80060d2:	0020      	movs	r0, r4
 80060d4:	f7ff ff16 	bl	8005f04 <I2C_IsErrorOccurred>
 80060d8:	2800      	cmp	r0, #0
 80060da:	d124      	bne.n	8006126 <I2C_WaitOnRXNEFlagUntilTimeout+0x6a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80060dc:	2120      	movs	r1, #32
 80060de:	6823      	ldr	r3, [r4, #0]
 80060e0:	699a      	ldr	r2, [r3, #24]
 80060e2:	420a      	tst	r2, r1
 80060e4:	d023      	beq.n	800612e <I2C_WaitOnRXNEFlagUntilTimeout+0x72>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80060e6:	699a      	ldr	r2, [r3, #24]
 80060e8:	4232      	tst	r2, r6
 80060ea:	d004      	beq.n	80060f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 80060ec:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80060ee:	2a00      	cmp	r2, #0
 80060f0:	d001      	beq.n	80060f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
        return HAL_OK;
 80060f2:	2000      	movs	r0, #0
}
 80060f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80060f6:	6999      	ldr	r1, [r3, #24]
 80060f8:	2210      	movs	r2, #16
 80060fa:	0008      	movs	r0, r1
 80060fc:	4010      	ands	r0, r2
 80060fe:	4211      	tst	r1, r2
 8006100:	d013      	beq.n	800612a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006102:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006104:	3a0c      	subs	r2, #12
 8006106:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006108:	2120      	movs	r1, #32
 800610a:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 800610c:	685a      	ldr	r2, [r3, #4]
 800610e:	4813      	ldr	r0, [pc, #76]	; (800615c <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>)
 8006110:	4002      	ands	r2, r0
 8006112:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 8006114:	0023      	movs	r3, r4
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006116:	0022      	movs	r2, r4
        hi2c->State = HAL_I2C_STATE_READY;
 8006118:	3341      	adds	r3, #65	; 0x41
 800611a:	7019      	strb	r1, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800611c:	2300      	movs	r3, #0
 800611e:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 8006120:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006122:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8006124:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8006126:	2001      	movs	r0, #1
 8006128:	e7e4      	b.n	80060f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800612a:	6460      	str	r0, [r4, #68]	; 0x44
 800612c:	e7ec      	b.n	8006108 <I2C_WaitOnRXNEFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800612e:	f7ff f8b5 	bl	800529c <HAL_GetTick>
 8006132:	1bc0      	subs	r0, r0, r7
 8006134:	42a8      	cmp	r0, r5
 8006136:	d801      	bhi.n	800613c <I2C_WaitOnRXNEFlagUntilTimeout+0x80>
 8006138:	2d00      	cmp	r5, #0
 800613a:	d1c4      	bne.n	80060c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800613c:	6823      	ldr	r3, [r4, #0]
 800613e:	699b      	ldr	r3, [r3, #24]
 8006140:	0019      	movs	r1, r3
 8006142:	4031      	ands	r1, r6
 8006144:	4233      	tst	r3, r6
 8006146:	d1be      	bne.n	80060c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006148:	2220      	movs	r2, #32
 800614a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800614c:	4313      	orrs	r3, r2
 800614e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006150:	0023      	movs	r3, r4
        __HAL_UNLOCK(hi2c);
 8006152:	3440      	adds	r4, #64	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8006154:	3341      	adds	r3, #65	; 0x41
 8006156:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hi2c);
 8006158:	7021      	strb	r1, [r4, #0]
        return HAL_ERROR;
 800615a:	e7e4      	b.n	8006126 <I2C_WaitOnRXNEFlagUntilTimeout+0x6a>
 800615c:	fe00e800 	.word	0xfe00e800

08006160 <HAL_I2C_Init>:
{
 8006160:	b570      	push	{r4, r5, r6, lr}
 8006162:	0004      	movs	r4, r0
    return HAL_ERROR;
 8006164:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8006166:	2c00      	cmp	r4, #0
 8006168:	d03f      	beq.n	80061ea <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800616a:	0025      	movs	r5, r4
 800616c:	3541      	adds	r5, #65	; 0x41
 800616e:	782b      	ldrb	r3, [r5, #0]
 8006170:	b2da      	uxtb	r2, r3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d105      	bne.n	8006182 <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8006176:	0023      	movs	r3, r4
 8006178:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_MspInit(hi2c);
 800617a:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 800617c:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 800617e:	f7fe fe93 	bl	8004ea8 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006182:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8006184:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006186:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8006188:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800618a:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 800618c:	681a      	ldr	r2, [r3, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800618e:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8006190:	438a      	bics	r2, r1
 8006192:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006194:	491a      	ldr	r1, [pc, #104]	; (8006200 <HAL_I2C_Init+0xa0>)
 8006196:	6862      	ldr	r2, [r4, #4]
 8006198:	400a      	ands	r2, r1
 800619a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800619c:	689a      	ldr	r2, [r3, #8]
 800619e:	4919      	ldr	r1, [pc, #100]	; (8006204 <HAL_I2C_Init+0xa4>)
 80061a0:	400a      	ands	r2, r1
 80061a2:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80061a4:	2801      	cmp	r0, #1
 80061a6:	d121      	bne.n	80061ec <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80061a8:	2280      	movs	r2, #128	; 0x80
 80061aa:	0212      	lsls	r2, r2, #8
 80061ac:	4332      	orrs	r2, r6
 80061ae:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80061b0:	6858      	ldr	r0, [r3, #4]
 80061b2:	4a15      	ldr	r2, [pc, #84]	; (8006208 <HAL_I2C_Init+0xa8>)
 80061b4:	4302      	orrs	r2, r0
 80061b6:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80061b8:	68da      	ldr	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061ba:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80061bc:	400a      	ands	r2, r1
 80061be:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80061c0:	6961      	ldr	r1, [r4, #20]
 80061c2:	6922      	ldr	r2, [r4, #16]
 80061c4:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80061c6:	69a1      	ldr	r1, [r4, #24]
 80061c8:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80061ca:	430a      	orrs	r2, r1
 80061cc:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80061ce:	6a21      	ldr	r1, [r4, #32]
 80061d0:	69e2      	ldr	r2, [r4, #28]
 80061d2:	430a      	orrs	r2, r1
 80061d4:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80061d6:	2201      	movs	r2, #1
 80061d8:	6819      	ldr	r1, [r3, #0]
 80061da:	430a      	orrs	r2, r1
 80061dc:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80061de:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061e0:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80061e2:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 80061e4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061e6:	3442      	adds	r4, #66	; 0x42
 80061e8:	7020      	strb	r0, [r4, #0]
}
 80061ea:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80061ec:	2284      	movs	r2, #132	; 0x84
 80061ee:	0212      	lsls	r2, r2, #8
 80061f0:	4332      	orrs	r2, r6
 80061f2:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80061f4:	2802      	cmp	r0, #2
 80061f6:	d1db      	bne.n	80061b0 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80061f8:	2280      	movs	r2, #128	; 0x80
 80061fa:	0112      	lsls	r2, r2, #4
 80061fc:	605a      	str	r2, [r3, #4]
 80061fe:	e7d7      	b.n	80061b0 <HAL_I2C_Init+0x50>
 8006200:	f0ffffff 	.word	0xf0ffffff
 8006204:	ffff7fff 	.word	0xffff7fff
 8006208:	02008000 	.word	0x02008000

0800620c <HAL_I2C_Master_Receive>:
{
 800620c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800620e:	b087      	sub	sp, #28
 8006210:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006212:	0003      	movs	r3, r0
 8006214:	3341      	adds	r3, #65	; 0x41
{
 8006216:	9204      	str	r2, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006218:	9303      	str	r3, [sp, #12]
 800621a:	781b      	ldrb	r3, [r3, #0]
{
 800621c:	0004      	movs	r4, r0
 800621e:	000f      	movs	r7, r1
    return HAL_BUSY;
 8006220:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006222:	2b20      	cmp	r3, #32
 8006224:	d114      	bne.n	8006250 <HAL_I2C_Master_Receive+0x44>
    __HAL_LOCK(hi2c);
 8006226:	0023      	movs	r3, r4
 8006228:	3340      	adds	r3, #64	; 0x40
 800622a:	781a      	ldrb	r2, [r3, #0]
 800622c:	2a01      	cmp	r2, #1
 800622e:	d00f      	beq.n	8006250 <HAL_I2C_Master_Receive+0x44>
 8006230:	2601      	movs	r6, #1
 8006232:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8006234:	f7ff f832 	bl	800529c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006238:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 800623a:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800623c:	9000      	str	r0, [sp, #0]
 800623e:	2319      	movs	r3, #25
 8006240:	0032      	movs	r2, r6
 8006242:	0020      	movs	r0, r4
 8006244:	0209      	lsls	r1, r1, #8
 8006246:	f7ff fedf 	bl	8006008 <I2C_WaitOnFlagUntilTimeout>
 800624a:	2800      	cmp	r0, #0
 800624c:	d002      	beq.n	8006254 <HAL_I2C_Master_Receive+0x48>
      return HAL_ERROR;
 800624e:	2001      	movs	r0, #1
}
 8006250:	b007      	add	sp, #28
 8006252:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006254:	2322      	movs	r3, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006256:	0026      	movs	r6, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006258:	9a03      	ldr	r2, [sp, #12]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800625a:	3642      	adds	r6, #66	; 0x42
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800625c:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800625e:	3b12      	subs	r3, #18
 8006260:	7033      	strb	r3, [r6, #0]
    hi2c->pBuffPtr  = pData;
 8006262:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006264:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8006266:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8006268:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 800626a:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 800626c:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800626e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8006270:	4b2d      	ldr	r3, [pc, #180]	; (8006328 <HAL_I2C_Master_Receive+0x11c>)
 8006272:	2aff      	cmp	r2, #255	; 0xff
 8006274:	d920      	bls.n	80062b8 <HAL_I2C_Master_Receive+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006276:	22ff      	movs	r2, #255	; 0xff
 8006278:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800627a:	9300      	str	r3, [sp, #0]
 800627c:	2380      	movs	r3, #128	; 0x80
 800627e:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006280:	0039      	movs	r1, r7
 8006282:	0020      	movs	r0, r4
 8006284:	f7ff fdc0 	bl	8005e08 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006288:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800628a:	002a      	movs	r2, r5
 800628c:	0020      	movs	r0, r4
 800628e:	990c      	ldr	r1, [sp, #48]	; 0x30
    while (hi2c->XferCount > 0U)
 8006290:	2b00      	cmp	r3, #0
 8006292:	d119      	bne.n	80062c8 <HAL_I2C_Master_Receive+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006294:	f7ff fee8 	bl	8006068 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006298:	2800      	cmp	r0, #0
 800629a:	d1d8      	bne.n	800624e <HAL_I2C_Master_Receive+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800629c:	2120      	movs	r1, #32
 800629e:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80062a0:	4d22      	ldr	r5, [pc, #136]	; (800632c <HAL_I2C_Master_Receive+0x120>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062a2:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80062a4:	685a      	ldr	r2, [r3, #4]
 80062a6:	402a      	ands	r2, r5
 80062a8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80062aa:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 80062ac:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80062ae:	3341      	adds	r3, #65	; 0x41
 80062b0:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80062b2:	7030      	strb	r0, [r6, #0]
    __HAL_UNLOCK(hi2c);
 80062b4:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80062b6:	e7cb      	b.n	8006250 <HAL_I2C_Master_Receive+0x44>
      hi2c->XferSize = hi2c->XferCount;
 80062b8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80062ba:	b292      	uxth	r2, r2
 80062bc:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80062be:	b2d2      	uxtb	r2, r2
 80062c0:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80062c2:	2380      	movs	r3, #128	; 0x80
 80062c4:	049b      	lsls	r3, r3, #18
 80062c6:	e7db      	b.n	8006280 <HAL_I2C_Master_Receive+0x74>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062c8:	f7ff fef8 	bl	80060bc <I2C_WaitOnRXNEFlagUntilTimeout>
 80062cc:	2800      	cmp	r0, #0
 80062ce:	d1be      	bne.n	800624e <HAL_I2C_Master_Receive+0x42>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80062d0:	6823      	ldr	r3, [r4, #0]
 80062d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062d6:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80062d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80062da:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80062dc:	3301      	adds	r3, #1
 80062de:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80062e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80062e2:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80062e4:	3b01      	subs	r3, #1
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80062ea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80062ec:	b292      	uxth	r2, r2
 80062ee:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d0c9      	beq.n	8006288 <HAL_I2C_Master_Receive+0x7c>
 80062f4:	2a00      	cmp	r2, #0
 80062f6:	d1c7      	bne.n	8006288 <HAL_I2C_Master_Receive+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80062f8:	2180      	movs	r1, #128	; 0x80
 80062fa:	0020      	movs	r0, r4
 80062fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062fe:	9500      	str	r5, [sp, #0]
 8006300:	f7ff fe82 	bl	8006008 <I2C_WaitOnFlagUntilTimeout>
 8006304:	2800      	cmp	r0, #0
 8006306:	d1a2      	bne.n	800624e <HAL_I2C_Master_Receive+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006308:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800630a:	2bff      	cmp	r3, #255	; 0xff
 800630c:	d906      	bls.n	800631c <HAL_I2C_Master_Receive+0x110>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800630e:	23ff      	movs	r3, #255	; 0xff
 8006310:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006312:	2380      	movs	r3, #128	; 0x80
 8006314:	22ff      	movs	r2, #255	; 0xff
 8006316:	9000      	str	r0, [sp, #0]
 8006318:	045b      	lsls	r3, r3, #17
 800631a:	e7b1      	b.n	8006280 <HAL_I2C_Master_Receive+0x74>
          hi2c->XferSize = hi2c->XferCount;
 800631c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800631e:	b292      	uxth	r2, r2
 8006320:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006322:	b2d2      	uxtb	r2, r2
 8006324:	9000      	str	r0, [sp, #0]
 8006326:	e7cc      	b.n	80062c2 <HAL_I2C_Master_Receive+0xb6>
 8006328:	80002400 	.word	0x80002400
 800632c:	fe00e800 	.word	0xfe00e800

08006330 <HAL_I2C_Master_Transmit_DMA>:
{
 8006330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006332:	b087      	sub	sp, #28
 8006334:	9105      	str	r1, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006336:	0001      	movs	r1, r0
 8006338:	3141      	adds	r1, #65	; 0x41
{
 800633a:	4694      	mov	ip, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800633c:	780a      	ldrb	r2, [r1, #0]
{
 800633e:	0004      	movs	r4, r0
    return HAL_BUSY;
 8006340:	2502      	movs	r5, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006342:	2a20      	cmp	r2, #32
 8006344:	d154      	bne.n	80063f0 <HAL_I2C_Master_Transmit_DMA+0xc0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006346:	6802      	ldr	r2, [r0, #0]
 8006348:	2080      	movs	r0, #128	; 0x80
 800634a:	6996      	ldr	r6, [r2, #24]
 800634c:	0200      	lsls	r0, r0, #8
 800634e:	0037      	movs	r7, r6
 8006350:	4007      	ands	r7, r0
 8006352:	4206      	tst	r6, r0
 8006354:	d14c      	bne.n	80063f0 <HAL_I2C_Master_Transmit_DMA+0xc0>
    __HAL_LOCK(hi2c);
 8006356:	0020      	movs	r0, r4
 8006358:	3040      	adds	r0, #64	; 0x40
 800635a:	7806      	ldrb	r6, [r0, #0]
 800635c:	2e01      	cmp	r6, #1
 800635e:	d047      	beq.n	80063f0 <HAL_I2C_Master_Transmit_DMA+0xc0>
 8006360:	3d01      	subs	r5, #1
 8006362:	7005      	strb	r5, [r0, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006364:	2021      	movs	r0, #33	; 0x21
 8006366:	7008      	strb	r0, [r1, #0]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006368:	3101      	adds	r1, #1
 800636a:	9103      	str	r1, [sp, #12]
 800636c:	2110      	movs	r1, #16
 800636e:	9803      	ldr	r0, [sp, #12]
 8006370:	7001      	strb	r1, [r0, #0]
    hi2c->pBuffPtr    = pData;
 8006372:	4661      	mov	r1, ip
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006374:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->XferCount   = Size;
 8006376:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006378:	4b36      	ldr	r3, [pc, #216]	; (8006454 <HAL_I2C_Master_Transmit_DMA+0x124>)
    hi2c->pBuffPtr    = pData;
 800637a:	6261      	str	r1, [r4, #36]	; 0x24
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800637c:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800637e:	4b36      	ldr	r3, [pc, #216]	; (8006458 <HAL_I2C_Master_Transmit_DMA+0x128>)
 8006380:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006382:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006384:	2bff      	cmp	r3, #255	; 0xff
 8006386:	d836      	bhi.n	80063f6 <HAL_I2C_Master_Transmit_DMA+0xc6>
      xfermode = I2C_AUTOEND_MODE;
 8006388:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = hi2c->XferCount;
 800638a:	8d65      	ldrh	r5, [r4, #42]	; 0x2a
      xfermode = I2C_AUTOEND_MODE;
 800638c:	049b      	lsls	r3, r3, #18
      hi2c->XferSize = hi2c->XferCount;
 800638e:	b2ad      	uxth	r5, r5
      xfermode = I2C_AUTOEND_MODE;
 8006390:	0026      	movs	r6, r4
      xfermode = I2C_RELOAD_MODE;
 8006392:	9304      	str	r3, [sp, #16]
 8006394:	8525      	strh	r5, [r4, #40]	; 0x28
    if (hi2c->XferSize > 0U)
 8006396:	3640      	adds	r6, #64	; 0x40
 8006398:	2d00      	cmp	r5, #0
 800639a:	d049      	beq.n	8006430 <HAL_I2C_Master_Transmit_DMA+0x100>
      if (hi2c->hdmatx != NULL)
 800639c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800639e:	2800      	cmp	r0, #0
 80063a0:	d02d      	beq.n	80063fe <HAL_I2C_Master_Transmit_DMA+0xce>
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80063a2:	2700      	movs	r7, #0
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80063a4:	4b2d      	ldr	r3, [pc, #180]	; (800645c <HAL_I2C_Master_Transmit_DMA+0x12c>)
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80063a6:	4661      	mov	r1, ip
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80063a8:	6283      	str	r3, [r0, #40]	; 0x28
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80063aa:	4b2d      	ldr	r3, [pc, #180]	; (8006460 <HAL_I2C_Master_Transmit_DMA+0x130>)
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80063ac:	62c7      	str	r7, [r0, #44]	; 0x2c
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80063ae:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 80063b0:	6347      	str	r7, [r0, #52]	; 0x34
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80063b2:	002b      	movs	r3, r5
 80063b4:	3228      	adds	r2, #40	; 0x28
 80063b6:	f7ff fa83 	bl	80058c0 <HAL_DMA_Start_IT>
 80063ba:	0005      	movs	r5, r0
      if (dmaxferstatus == HAL_OK)
 80063bc:	42b8      	cmp	r0, r7
 80063be:	d12b      	bne.n	8006418 <HAL_I2C_Master_Transmit_DMA+0xe8>
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 80063c0:	8d27      	ldrh	r7, [r4, #40]	; 0x28
 80063c2:	4b28      	ldr	r3, [pc, #160]	; (8006464 <HAL_I2C_Master_Transmit_DMA+0x134>)
 80063c4:	b2fa      	uxtb	r2, r7
 80063c6:	0020      	movs	r0, r4
 80063c8:	9905      	ldr	r1, [sp, #20]
 80063ca:	9300      	str	r3, [sp, #0]
 80063cc:	9b04      	ldr	r3, [sp, #16]
 80063ce:	f7ff fd1b 	bl	8005e08 <I2C_TransferConfig>
        hi2c->XferCount -= hi2c->XferSize;
 80063d2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80063d4:	2110      	movs	r1, #16
        hi2c->XferCount -= hi2c->XferSize;
 80063d6:	1bdb      	subs	r3, r3, r7
 80063d8:	b29b      	uxth	r3, r3
 80063da:	8563      	strh	r3, [r4, #42]	; 0x2a
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80063dc:	0020      	movs	r0, r4
        __HAL_UNLOCK(hi2c);
 80063de:	7035      	strb	r5, [r6, #0]
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80063e0:	f7ff fd28 	bl	8005e34 <I2C_Enable_IRQ>
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80063e4:	2380      	movs	r3, #128	; 0x80
 80063e6:	6822      	ldr	r2, [r4, #0]
 80063e8:	01db      	lsls	r3, r3, #7
 80063ea:	6811      	ldr	r1, [r2, #0]
 80063ec:	430b      	orrs	r3, r1
 80063ee:	6013      	str	r3, [r2, #0]
}
 80063f0:	0028      	movs	r0, r5
 80063f2:	b007      	add	sp, #28
 80063f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      xfermode = I2C_RELOAD_MODE;
 80063f6:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80063f8:	25ff      	movs	r5, #255	; 0xff
      xfermode = I2C_RELOAD_MODE;
 80063fa:	045b      	lsls	r3, r3, #17
 80063fc:	e7c8      	b.n	8006390 <HAL_I2C_Master_Transmit_DMA+0x60>
        hi2c->State     = HAL_I2C_STATE_READY;
 80063fe:	0023      	movs	r3, r4
 8006400:	2220      	movs	r2, #32
 8006402:	3341      	adds	r3, #65	; 0x41
 8006404:	701a      	strb	r2, [r3, #0]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006406:	9b03      	ldr	r3, [sp, #12]
 8006408:	7018      	strb	r0, [r3, #0]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800640a:	2380      	movs	r3, #128	; 0x80
 800640c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800640e:	4313      	orrs	r3, r2
 8006410:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8006412:	7030      	strb	r0, [r6, #0]
        return HAL_ERROR;
 8006414:	2501      	movs	r5, #1
 8006416:	e7eb      	b.n	80063f0 <HAL_I2C_Master_Transmit_DMA+0xc0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8006418:	0023      	movs	r3, r4
 800641a:	2220      	movs	r2, #32
 800641c:	3341      	adds	r3, #65	; 0x41
 800641e:	701a      	strb	r2, [r3, #0]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006420:	9b03      	ldr	r3, [sp, #12]
 8006422:	701f      	strb	r7, [r3, #0]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006424:	2310      	movs	r3, #16
 8006426:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006428:	4313      	orrs	r3, r2
 800642a:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800642c:	7037      	strb	r7, [r6, #0]
 800642e:	e7f1      	b.n	8006414 <HAL_I2C_Master_Transmit_DMA+0xe4>
      hi2c->XferISR = I2C_Master_ISR_IT;
 8006430:	4b0d      	ldr	r3, [pc, #52]	; (8006468 <HAL_I2C_Master_Transmit_DMA+0x138>)
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006432:	0020      	movs	r0, r4
      hi2c->XferISR = I2C_Master_ISR_IT;
 8006434:	6363      	str	r3, [r4, #52]	; 0x34
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006436:	4b0b      	ldr	r3, [pc, #44]	; (8006464 <HAL_I2C_Master_Transmit_DMA+0x134>)
 8006438:	9905      	ldr	r1, [sp, #20]
 800643a:	9300      	str	r3, [sp, #0]
 800643c:	2380      	movs	r3, #128	; 0x80
 800643e:	002a      	movs	r2, r5
 8006440:	049b      	lsls	r3, r3, #18
 8006442:	f7ff fce1 	bl	8005e08 <I2C_TransferConfig>
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006446:	2101      	movs	r1, #1
 8006448:	0020      	movs	r0, r4
      __HAL_UNLOCK(hi2c);
 800644a:	7035      	strb	r5, [r6, #0]
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800644c:	f7ff fcf2 	bl	8005e34 <I2C_Enable_IRQ>
 8006450:	e7ce      	b.n	80063f0 <HAL_I2C_Master_Transmit_DMA+0xc0>
 8006452:	46c0      	nop			; (mov r8, r8)
 8006454:	ffff0000 	.word	0xffff0000
 8006458:	08006afd 	.word	0x08006afd
 800645c:	08006c1d 	.word	0x08006c1d
 8006460:	08006c05 	.word	0x08006c05
 8006464:	80002000 	.word	0x80002000
 8006468:	08006889 	.word	0x08006889

0800646c <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800646c:	6803      	ldr	r3, [r0, #0]
{
 800646e:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006470:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006472:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8006474:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006476:	2b00      	cmp	r3, #0
 8006478:	d000      	beq.n	800647c <HAL_I2C_EV_IRQHandler+0x10>
    hi2c->XferISR(hi2c, itflags, itsources);
 800647a:	4798      	blx	r3
}
 800647c:	bd10      	pop	{r4, pc}

0800647e <HAL_I2C_MasterTxCpltCallback>:
 800647e:	4770      	bx	lr

08006480 <HAL_I2C_MasterRxCpltCallback>:
 8006480:	4770      	bx	lr

08006482 <I2C_ITMasterSeqCplt>:
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006482:	0003      	movs	r3, r0
{
 8006484:	b570      	push	{r4, r5, r6, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006486:	2500      	movs	r5, #0
 8006488:	2220      	movs	r2, #32
 800648a:	0006      	movs	r6, r0
 800648c:	3342      	adds	r3, #66	; 0x42
 800648e:	701d      	strb	r5, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006490:	3b01      	subs	r3, #1
 8006492:	7819      	ldrb	r1, [r3, #0]
{
 8006494:	0004      	movs	r4, r0
 8006496:	3640      	adds	r6, #64	; 0x40
    hi2c->State         = HAL_I2C_STATE_READY;
 8006498:	701a      	strb	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800649a:	2921      	cmp	r1, #33	; 0x21
 800649c:	d10a      	bne.n	80064b4 <I2C_ITMasterSeqCplt+0x32>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800649e:	2311      	movs	r3, #17
    hi2c->XferISR       = NULL;
 80064a0:	6345      	str	r5, [r0, #52]	; 0x34
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80064a2:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80064a4:	3920      	subs	r1, #32
 80064a6:	f7ff fd09 	bl	8005ebc <I2C_Disable_IRQ>
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80064aa:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 80064ac:	7035      	strb	r5, [r6, #0]
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80064ae:	f7ff ffe6 	bl	800647e <HAL_I2C_MasterTxCpltCallback>
}
 80064b2:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80064b4:	2312      	movs	r3, #18
    hi2c->XferISR       = NULL;
 80064b6:	6345      	str	r5, [r0, #52]	; 0x34
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80064b8:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80064ba:	2102      	movs	r1, #2
 80064bc:	f7ff fcfe 	bl	8005ebc <I2C_Disable_IRQ>
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80064c0:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 80064c2:	7035      	strb	r5, [r6, #0]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80064c4:	f7ff ffdc 	bl	8006480 <HAL_I2C_MasterRxCpltCallback>
}
 80064c8:	e7f3      	b.n	80064b2 <I2C_ITMasterSeqCplt+0x30>

080064ca <HAL_I2C_SlaveTxCpltCallback>:
 80064ca:	4770      	bx	lr

080064cc <HAL_I2C_SlaveRxCpltCallback>:
 80064cc:	4770      	bx	lr
	...

080064d0 <I2C_ITSlaveSeqCplt>:
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80064d0:	0001      	movs	r1, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80064d2:	6803      	ldr	r3, [r0, #0]
{
 80064d4:	b510      	push	{r4, lr}
 80064d6:	0004      	movs	r4, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80064d8:	2000      	movs	r0, #0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80064da:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80064dc:	3142      	adds	r1, #66	; 0x42
 80064de:	7008      	strb	r0, [r1, #0]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80064e0:	0451      	lsls	r1, r2, #17
 80064e2:	d518      	bpl.n	8006516 <I2C_ITSlaveSeqCplt+0x46>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	4918      	ldr	r1, [pc, #96]	; (8006548 <I2C_ITSlaveSeqCplt+0x78>)
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80064e8:	400a      	ands	r2, r1
 80064ea:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80064ec:	0023      	movs	r3, r4
 80064ee:	3341      	adds	r3, #65	; 0x41
 80064f0:	781a      	ldrb	r2, [r3, #0]
 80064f2:	2a29      	cmp	r2, #41	; 0x29
 80064f4:	d114      	bne.n	8006520 <I2C_ITSlaveSeqCplt+0x50>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80064f6:	3a01      	subs	r2, #1
 80064f8:	701a      	strb	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80064fa:	2321      	movs	r3, #33	; 0x21
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80064fc:	0020      	movs	r0, r4
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80064fe:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006500:	2101      	movs	r1, #1
 8006502:	f7ff fcdb 	bl	8005ebc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006506:	0023      	movs	r3, r4
 8006508:	2200      	movs	r2, #0
 800650a:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800650c:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 800650e:	701a      	strb	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006510:	f7ff ffdb 	bl	80064ca <HAL_I2C_SlaveTxCpltCallback>
}
 8006514:	bd10      	pop	{r4, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006516:	0412      	lsls	r2, r2, #16
 8006518:	d5e8      	bpl.n	80064ec <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	490b      	ldr	r1, [pc, #44]	; (800654c <I2C_ITSlaveSeqCplt+0x7c>)
 800651e:	e7e3      	b.n	80064e8 <I2C_ITSlaveSeqCplt+0x18>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006520:	781a      	ldrb	r2, [r3, #0]
 8006522:	2a2a      	cmp	r2, #42	; 0x2a
 8006524:	d1f6      	bne.n	8006514 <I2C_ITSlaveSeqCplt+0x44>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006526:	3a02      	subs	r2, #2
 8006528:	701a      	strb	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800652a:	2322      	movs	r3, #34	; 0x22
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800652c:	0020      	movs	r0, r4
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800652e:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006530:	2102      	movs	r1, #2
 8006532:	f7ff fcc3 	bl	8005ebc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006536:	0023      	movs	r3, r4
 8006538:	2200      	movs	r2, #0
 800653a:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800653c:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 800653e:	701a      	strb	r2, [r3, #0]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006540:	f7ff ffc4 	bl	80064cc <HAL_I2C_SlaveRxCpltCallback>
}
 8006544:	e7e6      	b.n	8006514 <I2C_ITSlaveSeqCplt+0x44>
 8006546:	46c0      	nop			; (mov r8, r8)
 8006548:	ffffbfff 	.word	0xffffbfff
 800654c:	ffff7fff 	.word	0xffff7fff

08006550 <HAL_I2C_AddrCallback>:
}
 8006550:	4770      	bx	lr

08006552 <I2C_ITAddrCplt.constprop.0>:
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006552:	0003      	movs	r3, r0
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8006554:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006556:	2228      	movs	r2, #40	; 0x28
 8006558:	3341      	adds	r3, #65	; 0x41
 800655a:	781b      	ldrb	r3, [r3, #0]
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 800655c:	0004      	movs	r4, r0
    transferdirection = I2C_GET_DIR(hi2c);
 800655e:	6801      	ldr	r1, [r0, #0]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006560:	4013      	ands	r3, r2
 8006562:	4293      	cmp	r3, r2
 8006564:	d13c      	bne.n	80065e0 <I2C_ITAddrCplt.constprop.0+0x8e>
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006566:	27fe      	movs	r7, #254	; 0xfe
    transferdirection = I2C_GET_DIR(hi2c);
 8006568:	698d      	ldr	r5, [r1, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800656a:	698e      	ldr	r6, [r1, #24]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800656c:	688b      	ldr	r3, [r1, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800656e:	68ca      	ldr	r2, [r1, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 8006570:	03ed      	lsls	r5, r5, #15
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006572:	9201      	str	r2, [sp, #4]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006574:	68c2      	ldr	r2, [r0, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006576:	0c36      	lsrs	r6, r6, #16
    transferdirection = I2C_GET_DIR(hi2c);
 8006578:	0fed      	lsrs	r5, r5, #31
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800657a:	403e      	ands	r6, r7
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800657c:	2a02      	cmp	r2, #2
 800657e:	d125      	bne.n	80065cc <I2C_ITAddrCplt.constprop.0+0x7a>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006580:	059b      	lsls	r3, r3, #22
 8006582:	0d9a      	lsrs	r2, r3, #22
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006584:	0f5b      	lsrs	r3, r3, #29
 8006586:	4073      	eors	r3, r6
 8006588:	0018      	movs	r0, r3
 800658a:	2606      	movs	r6, #6
 800658c:	4030      	ands	r0, r6
 800658e:	4233      	tst	r3, r6
 8006590:	d110      	bne.n	80065b4 <I2C_ITAddrCplt.constprop.0+0x62>
        hi2c->AddrEventCount++;
 8006592:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006594:	3301      	adds	r3, #1
 8006596:	64a3      	str	r3, [r4, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006598:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800659a:	2b02      	cmp	r3, #2
 800659c:	d109      	bne.n	80065b2 <I2C_ITAddrCplt.constprop.0+0x60>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800659e:	199b      	adds	r3, r3, r6
          hi2c->AddrEventCount = 0U;
 80065a0:	64a0      	str	r0, [r4, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80065a2:	61cb      	str	r3, [r1, #28]
          __HAL_UNLOCK(hi2c);
 80065a4:	0023      	movs	r3, r4
 80065a6:	3340      	adds	r3, #64	; 0x40
 80065a8:	7018      	strb	r0, [r3, #0]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80065aa:	0029      	movs	r1, r5
 80065ac:	0020      	movs	r0, r4
 80065ae:	f7ff ffcf 	bl	8006550 <HAL_I2C_AddrCallback>
}
 80065b2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80065b4:	2180      	movs	r1, #128	; 0x80
 80065b6:	0020      	movs	r0, r4
 80065b8:	0209      	lsls	r1, r1, #8
 80065ba:	f7ff fc7f 	bl	8005ebc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80065be:	0023      	movs	r3, r4
 80065c0:	2200      	movs	r2, #0
 80065c2:	3340      	adds	r3, #64	; 0x40
 80065c4:	701a      	strb	r2, [r3, #0]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80065c6:	9a01      	ldr	r2, [sp, #4]
 80065c8:	403a      	ands	r2, r7
 80065ca:	e7ee      	b.n	80065aa <I2C_ITAddrCplt.constprop.0+0x58>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80065cc:	2180      	movs	r1, #128	; 0x80
 80065ce:	0209      	lsls	r1, r1, #8
 80065d0:	f7ff fc74 	bl	8005ebc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80065d4:	0023      	movs	r3, r4
 80065d6:	2200      	movs	r2, #0
 80065d8:	3340      	adds	r3, #64	; 0x40
 80065da:	701a      	strb	r2, [r3, #0]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80065dc:	0032      	movs	r2, r6
 80065de:	e7e4      	b.n	80065aa <I2C_ITAddrCplt.constprop.0+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80065e0:	2308      	movs	r3, #8
 80065e2:	61cb      	str	r3, [r1, #28]
    __HAL_UNLOCK(hi2c);
 80065e4:	2300      	movs	r3, #0
 80065e6:	3440      	adds	r4, #64	; 0x40
 80065e8:	7023      	strb	r3, [r4, #0]
}
 80065ea:	e7e2      	b.n	80065b2 <I2C_ITAddrCplt.constprop.0+0x60>

080065ec <HAL_I2C_ListenCpltCallback>:
 80065ec:	4770      	bx	lr
	...

080065f0 <I2C_ITListenCplt>:
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80065f0:	4b18      	ldr	r3, [pc, #96]	; (8006654 <I2C_ITListenCplt+0x64>)
{
 80065f2:	b510      	push	{r4, lr}
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80065f4:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80065f6:	2300      	movs	r3, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80065f8:	0002      	movs	r2, r0
  hi2c->PreviousState = I2C_STATE_NONE;
 80065fa:	6303      	str	r3, [r0, #48]	; 0x30
{
 80065fc:	0004      	movs	r4, r0
  hi2c->State = HAL_I2C_STATE_READY;
 80065fe:	2020      	movs	r0, #32
 8006600:	3241      	adds	r2, #65	; 0x41
 8006602:	7010      	strb	r0, [r2, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006604:	7053      	strb	r3, [r2, #1]
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006606:	2204      	movs	r2, #4
  hi2c->XferISR = NULL;
 8006608:	6363      	str	r3, [r4, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800660a:	4211      	tst	r1, r2
 800660c:	d012      	beq.n	8006634 <I2C_ITListenCplt+0x44>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800660e:	6823      	ldr	r3, [r4, #0]
 8006610:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006612:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006614:	7019      	strb	r1, [r3, #0]
    hi2c->pBuffPtr++;
 8006616:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006618:	3301      	adds	r3, #1
 800661a:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800661c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800661e:	2b00      	cmp	r3, #0
 8006620:	d008      	beq.n	8006634 <I2C_ITListenCplt+0x44>
      hi2c->XferSize--;
 8006622:	3b01      	subs	r3, #1
 8006624:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006626:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006628:	3b01      	subs	r3, #1
 800662a:	b29b      	uxth	r3, r3
 800662c:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800662e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006630:	431a      	orrs	r2, r3
 8006632:	6462      	str	r2, [r4, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006634:	0020      	movs	r0, r4
 8006636:	4908      	ldr	r1, [pc, #32]	; (8006658 <I2C_ITListenCplt+0x68>)
 8006638:	f7ff fc40 	bl	8005ebc <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800663c:	2210      	movs	r2, #16
 800663e:	6823      	ldr	r3, [r4, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 8006640:	0020      	movs	r0, r4
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006642:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8006644:	0023      	movs	r3, r4
 8006646:	2200      	movs	r2, #0
 8006648:	3340      	adds	r3, #64	; 0x40
 800664a:	701a      	strb	r2, [r3, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 800664c:	f7ff ffce 	bl	80065ec <HAL_I2C_ListenCpltCallback>
}
 8006650:	bd10      	pop	{r4, pc}
 8006652:	46c0      	nop			; (mov r8, r8)
 8006654:	ffff0000 	.word	0xffff0000
 8006658:	00008003 	.word	0x00008003

0800665c <HAL_I2C_MemTxCpltCallback>:
 800665c:	4770      	bx	lr

0800665e <HAL_I2C_MemRxCpltCallback>:
 800665e:	4770      	bx	lr

08006660 <HAL_I2C_ErrorCallback>:
 8006660:	4770      	bx	lr

08006662 <HAL_I2C_AbortCpltCallback>:
 8006662:	4770      	bx	lr

08006664 <I2C_TreatErrorCallback>:
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006664:	0001      	movs	r1, r0
 8006666:	0002      	movs	r2, r0
{
 8006668:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800666a:	3141      	adds	r1, #65	; 0x41
 800666c:	780c      	ldrb	r4, [r1, #0]
 800666e:	2300      	movs	r3, #0
 8006670:	3240      	adds	r2, #64	; 0x40
 8006672:	2c60      	cmp	r4, #96	; 0x60
 8006674:	d106      	bne.n	8006684 <I2C_TreatErrorCallback+0x20>
    hi2c->State = HAL_I2C_STATE_READY;
 8006676:	3c40      	subs	r4, #64	; 0x40
 8006678:	700c      	strb	r4, [r1, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 800667a:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800667c:	7013      	strb	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 800667e:	f7ff fff0 	bl	8006662 <HAL_I2C_AbortCpltCallback>
}
 8006682:	bd10      	pop	{r4, pc}
    hi2c->PreviousState = I2C_STATE_NONE;
 8006684:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006686:	7013      	strb	r3, [r2, #0]
    HAL_I2C_ErrorCallback(hi2c);
 8006688:	f7ff ffea 	bl	8006660 <HAL_I2C_ErrorCallback>
}
 800668c:	e7f9      	b.n	8006682 <I2C_TreatErrorCallback+0x1e>
	...

08006690 <I2C_ITError>:
{
 8006690:	b570      	push	{r4, r5, r6, lr}
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006692:	0005      	movs	r5, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006694:	2200      	movs	r2, #0
{
 8006696:	0004      	movs	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006698:	3541      	adds	r5, #65	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800669a:	3042      	adds	r0, #66	; 0x42
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800669c:	782b      	ldrb	r3, [r5, #0]
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800669e:	7002      	strb	r2, [r0, #0]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80066a0:	483a      	ldr	r0, [pc, #232]	; (800678c <I2C_ITError+0xfc>)
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80066a2:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80066a4:	62e0      	str	r0, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80066a6:	8562      	strh	r2, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 80066a8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80066aa:	430a      	orrs	r2, r1
 80066ac:	6462      	str	r2, [r4, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80066ae:	2b02      	cmp	r3, #2
 80066b0:	d82b      	bhi.n	800670a <I2C_ITError+0x7a>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80066b2:	2103      	movs	r1, #3
 80066b4:	0020      	movs	r0, r4
 80066b6:	f7ff fc01 	bl	8005ebc <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80066ba:	2328      	movs	r3, #40	; 0x28
 80066bc:	702b      	strb	r3, [r5, #0]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80066be:	4b34      	ldr	r3, [pc, #208]	; (8006790 <I2C_ITError+0x100>)
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80066c0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80066c2:	6363      	str	r3, [r4, #52]	; 0x34
  tmppreviousstate = hi2c->PreviousState;
 80066c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80066c6:	2800      	cmp	r0, #0
 80066c8:	d040      	beq.n	800674c <I2C_ITError+0xbc>
 80066ca:	001a      	movs	r2, r3
 80066cc:	2110      	movs	r1, #16
 80066ce:	3a11      	subs	r2, #17
 80066d0:	438a      	bics	r2, r1
 80066d2:	d13b      	bne.n	800674c <I2C_ITError+0xbc>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80066d4:	6823      	ldr	r3, [r4, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	0452      	lsls	r2, r2, #17
 80066da:	d503      	bpl.n	80066e4 <I2C_ITError+0x54>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	492d      	ldr	r1, [pc, #180]	; (8006794 <I2C_ITError+0x104>)
 80066e0:	400a      	ands	r2, r1
 80066e2:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80066e4:	f7ff f996 	bl	8005a14 <HAL_DMA_GetState>
 80066e8:	2801      	cmp	r0, #1
 80066ea:	d02b      	beq.n	8006744 <I2C_ITError+0xb4>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80066ec:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80066ee:	4b2a      	ldr	r3, [pc, #168]	; (8006798 <I2C_ITError+0x108>)
      __HAL_UNLOCK(hi2c);
 80066f0:	2200      	movs	r2, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80066f2:	6343      	str	r3, [r0, #52]	; 0x34
      __HAL_UNLOCK(hi2c);
 80066f4:	0023      	movs	r3, r4
 80066f6:	3340      	adds	r3, #64	; 0x40
 80066f8:	701a      	strb	r2, [r3, #0]
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80066fa:	f7ff f91f 	bl	800593c <HAL_DMA_Abort_IT>
 80066fe:	2800      	cmp	r0, #0
 8006700:	d023      	beq.n	800674a <I2C_ITError+0xba>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006702:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006704:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006706:	4798      	blx	r3
}
 8006708:	e01f      	b.n	800674a <I2C_ITError+0xba>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800670a:	0020      	movs	r0, r4
 800670c:	4923      	ldr	r1, [pc, #140]	; (800679c <I2C_ITError+0x10c>)
 800670e:	f7ff fbd5 	bl	8005ebc <I2C_Disable_IRQ>
    I2C_Flush_TXDR(hi2c);
 8006712:	0020      	movs	r0, r4
 8006714:	f7ff fb6a 	bl	8005dec <I2C_Flush_TXDR>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006718:	782b      	ldrb	r3, [r5, #0]
 800671a:	2b60      	cmp	r3, #96	; 0x60
 800671c:	d010      	beq.n	8006740 <I2C_ITError+0xb0>
      hi2c->State         = HAL_I2C_STATE_READY;
 800671e:	2220      	movs	r2, #32
 8006720:	702a      	strb	r2, [r5, #0]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006722:	6823      	ldr	r3, [r4, #0]
 8006724:	6999      	ldr	r1, [r3, #24]
 8006726:	4211      	tst	r1, r2
 8006728:	d00a      	beq.n	8006740 <I2C_ITError+0xb0>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800672a:	6999      	ldr	r1, [r3, #24]
 800672c:	3a10      	subs	r2, #16
 800672e:	4211      	tst	r1, r2
 8006730:	d004      	beq.n	800673c <I2C_ITError+0xac>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006732:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006734:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006736:	3a0c      	subs	r2, #12
 8006738:	430a      	orrs	r2, r1
 800673a:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800673c:	2220      	movs	r2, #32
 800673e:	61da      	str	r2, [r3, #28]
    hi2c->XferISR       = NULL;
 8006740:	2300      	movs	r3, #0
 8006742:	e7bd      	b.n	80066c0 <I2C_ITError+0x30>
      I2C_TreatErrorCallback(hi2c);
 8006744:	0020      	movs	r0, r4
 8006746:	f7ff ff8d 	bl	8006664 <I2C_TreatErrorCallback>
}
 800674a:	bd70      	pop	{r4, r5, r6, pc}
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800674c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800674e:	2800      	cmp	r0, #0
 8006750:	d0f8      	beq.n	8006744 <I2C_ITError+0xb4>
 8006752:	2210      	movs	r2, #16
 8006754:	3b12      	subs	r3, #18
 8006756:	4393      	bics	r3, r2
 8006758:	d1f4      	bne.n	8006744 <I2C_ITError+0xb4>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800675a:	6823      	ldr	r3, [r4, #0]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	0412      	lsls	r2, r2, #16
 8006760:	d503      	bpl.n	800676a <I2C_ITError+0xda>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	490e      	ldr	r1, [pc, #56]	; (80067a0 <I2C_ITError+0x110>)
 8006766:	400a      	ands	r2, r1
 8006768:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800676a:	f7ff f953 	bl	8005a14 <HAL_DMA_GetState>
 800676e:	2801      	cmp	r0, #1
 8006770:	d0e8      	beq.n	8006744 <I2C_ITError+0xb4>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006772:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006774:	4b08      	ldr	r3, [pc, #32]	; (8006798 <I2C_ITError+0x108>)
      __HAL_UNLOCK(hi2c);
 8006776:	2200      	movs	r2, #0
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006778:	6343      	str	r3, [r0, #52]	; 0x34
      __HAL_UNLOCK(hi2c);
 800677a:	0023      	movs	r3, r4
 800677c:	3340      	adds	r3, #64	; 0x40
 800677e:	701a      	strb	r2, [r3, #0]
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006780:	f7ff f8dc 	bl	800593c <HAL_DMA_Abort_IT>
 8006784:	2800      	cmp	r0, #0
 8006786:	d0e0      	beq.n	800674a <I2C_ITError+0xba>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006788:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800678a:	e7bb      	b.n	8006704 <I2C_ITError+0x74>
 800678c:	ffff0000 	.word	0xffff0000
 8006790:	08006f05 	.word	0x08006f05
 8006794:	ffffbfff 	.word	0xffffbfff
 8006798:	08007029 	.word	0x08007029
 800679c:	00008003 	.word	0x00008003
 80067a0:	ffff7fff 	.word	0xffff7fff

080067a4 <I2C_ITMasterCplt>:
{
 80067a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067a6:	2320      	movs	r3, #32
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80067a8:	0005      	movs	r5, r0
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067aa:	6806      	ldr	r6, [r0, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80067ac:	3541      	adds	r5, #65	; 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067ae:	61f3      	str	r3, [r6, #28]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80067b0:	782b      	ldrb	r3, [r5, #0]
{
 80067b2:	0004      	movs	r4, r0
 80067b4:	000f      	movs	r7, r1
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80067b6:	2b21      	cmp	r3, #33	; 0x21
 80067b8:	d12b      	bne.n	8006812 <I2C_ITMasterCplt+0x6e>
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80067ba:	2101      	movs	r1, #1
 80067bc:	f7ff fb7e 	bl	8005ebc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80067c0:	2311      	movs	r3, #17
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80067c2:	6323      	str	r3, [r4, #48]	; 0x30
  I2C_RESET_CR2(hi2c);
 80067c4:	6873      	ldr	r3, [r6, #4]
 80067c6:	4a2e      	ldr	r2, [pc, #184]	; (8006880 <I2C_ITMasterCplt+0xdc>)
 80067c8:	4013      	ands	r3, r2
 80067ca:	6073      	str	r3, [r6, #4]
  hi2c->XferISR       = NULL;
 80067cc:	2300      	movs	r3, #0
 80067ce:	6363      	str	r3, [r4, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80067d0:	4b2c      	ldr	r3, [pc, #176]	; (8006884 <I2C_ITMasterCplt+0xe0>)
 80067d2:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80067d4:	2310      	movs	r3, #16
 80067d6:	421f      	tst	r7, r3
 80067d8:	d004      	beq.n	80067e4 <I2C_ITMasterCplt+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067da:	61f3      	str	r3, [r6, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80067dc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80067de:	3b0c      	subs	r3, #12
 80067e0:	4313      	orrs	r3, r2
 80067e2:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80067e4:	782b      	ldrb	r3, [r5, #0]
 80067e6:	2b60      	cmp	r3, #96	; 0x60
 80067e8:	d105      	bne.n	80067f6 <I2C_ITMasterCplt+0x52>
 80067ea:	077f      	lsls	r7, r7, #29
 80067ec:	d503      	bpl.n	80067f6 <I2C_ITMasterCplt+0x52>
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80067ee:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	9301      	str	r3, [sp, #4]
    UNUSED(tmpreg);
 80067f4:	9b01      	ldr	r3, [sp, #4]
  I2C_Flush_TXDR(hi2c);
 80067f6:	0020      	movs	r0, r4
 80067f8:	f7ff faf8 	bl	8005dec <I2C_Flush_TXDR>
  tmperror = hi2c->ErrorCode;
 80067fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80067fe:	782a      	ldrb	r2, [r5, #0]
 8006800:	2a60      	cmp	r2, #96	; 0x60
 8006802:	d001      	beq.n	8006808 <I2C_ITMasterCplt+0x64>
 8006804:	2b00      	cmp	r3, #0
 8006806:	d00c      	beq.n	8006822 <I2C_ITMasterCplt+0x7e>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006808:	0020      	movs	r0, r4
 800680a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800680c:	f7ff ff40 	bl	8006690 <I2C_ITError>
}
 8006810:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006812:	782b      	ldrb	r3, [r5, #0]
 8006814:	2b22      	cmp	r3, #34	; 0x22
 8006816:	d1d5      	bne.n	80067c4 <I2C_ITMasterCplt+0x20>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006818:	2102      	movs	r1, #2
 800681a:	f7ff fb4f 	bl	8005ebc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800681e:	2312      	movs	r3, #18
 8006820:	e7cf      	b.n	80067c2 <I2C_ITMasterCplt+0x1e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006822:	782a      	ldrb	r2, [r5, #0]
 8006824:	2a21      	cmp	r2, #33	; 0x21
 8006826:	d113      	bne.n	8006850 <I2C_ITMasterCplt+0xac>
    hi2c->State = HAL_I2C_STATE_READY;
 8006828:	3a01      	subs	r2, #1
 800682a:	702a      	strb	r2, [r5, #0]
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800682c:	0022      	movs	r2, r4
 800682e:	0021      	movs	r1, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 8006830:	6323      	str	r3, [r4, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006832:	3242      	adds	r2, #66	; 0x42
 8006834:	7810      	ldrb	r0, [r2, #0]
 8006836:	3140      	adds	r1, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006838:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 800683a:	700b      	strb	r3, [r1, #0]
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800683c:	2840      	cmp	r0, #64	; 0x40
 800683e:	d103      	bne.n	8006848 <I2C_ITMasterCplt+0xa4>
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006840:	0020      	movs	r0, r4
 8006842:	f7ff ff0b 	bl	800665c <HAL_I2C_MemTxCpltCallback>
 8006846:	e7e3      	b.n	8006810 <I2C_ITMasterCplt+0x6c>
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006848:	0020      	movs	r0, r4
 800684a:	f7ff fe18 	bl	800647e <HAL_I2C_MasterTxCpltCallback>
 800684e:	e7df      	b.n	8006810 <I2C_ITMasterCplt+0x6c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006850:	782a      	ldrb	r2, [r5, #0]
 8006852:	2a22      	cmp	r2, #34	; 0x22
 8006854:	d1dc      	bne.n	8006810 <I2C_ITMasterCplt+0x6c>
    hi2c->State = HAL_I2C_STATE_READY;
 8006856:	3a02      	subs	r2, #2
 8006858:	702a      	strb	r2, [r5, #0]
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800685a:	0022      	movs	r2, r4
 800685c:	0021      	movs	r1, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 800685e:	6323      	str	r3, [r4, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006860:	3242      	adds	r2, #66	; 0x42
 8006862:	7810      	ldrb	r0, [r2, #0]
 8006864:	3140      	adds	r1, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006866:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 8006868:	700b      	strb	r3, [r1, #0]
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800686a:	2840      	cmp	r0, #64	; 0x40
 800686c:	d103      	bne.n	8006876 <I2C_ITMasterCplt+0xd2>
      HAL_I2C_MemRxCpltCallback(hi2c);
 800686e:	0020      	movs	r0, r4
 8006870:	f7ff fef5 	bl	800665e <HAL_I2C_MemRxCpltCallback>
 8006874:	e7cc      	b.n	8006810 <I2C_ITMasterCplt+0x6c>
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006876:	0020      	movs	r0, r4
 8006878:	f7ff fe02 	bl	8006480 <HAL_I2C_MasterRxCpltCallback>
}
 800687c:	e7c8      	b.n	8006810 <I2C_ITMasterCplt+0x6c>
 800687e:	46c0      	nop			; (mov r8, r8)
 8006880:	fe00e800 	.word	0xfe00e800
 8006884:	ffff0000 	.word	0xffff0000

08006888 <I2C_Master_ISR_IT>:
{
 8006888:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 800688a:	0007      	movs	r7, r0
 800688c:	3740      	adds	r7, #64	; 0x40
 800688e:	783b      	ldrb	r3, [r7, #0]
{
 8006890:	0004      	movs	r4, r0
 8006892:	000d      	movs	r5, r1
 8006894:	0016      	movs	r6, r2
  __HAL_LOCK(hi2c);
 8006896:	2002      	movs	r0, #2
 8006898:	2b01      	cmp	r3, #1
 800689a:	d01a      	beq.n	80068d2 <I2C_Master_ISR_IT+0x4a>
 800689c:	2301      	movs	r3, #1
 800689e:	703b      	strb	r3, [r7, #0]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80068a0:	330f      	adds	r3, #15
 80068a2:	4219      	tst	r1, r3
 80068a4:	d016      	beq.n	80068d4 <I2C_Master_ISR_IT+0x4c>
 80068a6:	421a      	tst	r2, r3
 80068a8:	d014      	beq.n	80068d4 <I2C_Master_ISR_IT+0x4c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068aa:	6822      	ldr	r2, [r4, #0]
    I2C_Flush_TXDR(hi2c);
 80068ac:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068ae:	61d3      	str	r3, [r2, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80068b0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80068b2:	3b0c      	subs	r3, #12
 80068b4:	4313      	orrs	r3, r2
 80068b6:	6463      	str	r3, [r4, #68]	; 0x44
    I2C_Flush_TXDR(hi2c);
 80068b8:	f7ff fa98 	bl	8005dec <I2C_Flush_TXDR>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80068bc:	2320      	movs	r3, #32
 80068be:	421d      	tst	r5, r3
 80068c0:	d005      	beq.n	80068ce <I2C_Master_ISR_IT+0x46>
 80068c2:	421e      	tst	r6, r3
 80068c4:	d003      	beq.n	80068ce <I2C_Master_ISR_IT+0x46>
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80068c6:	0029      	movs	r1, r5
 80068c8:	0020      	movs	r0, r4
 80068ca:	f7ff ff6b 	bl	80067a4 <I2C_ITMasterCplt>
  __HAL_UNLOCK(hi2c);
 80068ce:	2000      	movs	r0, #0
 80068d0:	7038      	strb	r0, [r7, #0]
}
 80068d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80068d4:	2304      	movs	r3, #4
 80068d6:	421d      	tst	r5, r3
 80068d8:	d011      	beq.n	80068fe <I2C_Master_ISR_IT+0x76>
 80068da:	421e      	tst	r6, r3
 80068dc:	d00f      	beq.n	80068fe <I2C_Master_ISR_IT+0x76>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80068de:	439d      	bics	r5, r3
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80068e0:	6823      	ldr	r3, [r4, #0]
 80068e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80068e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068e6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80068e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    hi2c->pBuffPtr++;
 80068ea:	3301      	adds	r3, #1
 80068ec:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferSize--;
 80068ee:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80068f0:	3b01      	subs	r3, #1
 80068f2:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferCount--;
 80068f4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80068f6:	3b01      	subs	r3, #1
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	8563      	strh	r3, [r4, #42]	; 0x2a
 80068fc:	e7de      	b.n	80068bc <I2C_Master_ISR_IT+0x34>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80068fe:	2302      	movs	r3, #2
 8006900:	421d      	tst	r5, r3
 8006902:	d006      	beq.n	8006912 <I2C_Master_ISR_IT+0x8a>
 8006904:	421e      	tst	r6, r3
 8006906:	d004      	beq.n	8006912 <I2C_Master_ISR_IT+0x8a>
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006908:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800690a:	6822      	ldr	r2, [r4, #0]
 800690c:	7819      	ldrb	r1, [r3, #0]
 800690e:	6291      	str	r1, [r2, #40]	; 0x28
 8006910:	e7eb      	b.n	80068ea <I2C_Master_ISR_IT+0x62>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8006912:	2340      	movs	r3, #64	; 0x40
 8006914:	062a      	lsls	r2, r5, #24
 8006916:	d533      	bpl.n	8006980 <I2C_Master_ISR_IT+0xf8>
 8006918:	421e      	tst	r6, r3
 800691a:	d031      	beq.n	8006980 <I2C_Master_ISR_IT+0xf8>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800691c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800691e:	6823      	ldr	r3, [r4, #0]
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006920:	2a00      	cmp	r2, #0
 8006922:	d021      	beq.n	8006968 <I2C_Master_ISR_IT+0xe0>
 8006924:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 8006926:	2800      	cmp	r0, #0
 8006928:	d11e      	bne.n	8006968 <I2C_Master_ISR_IT+0xe0>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800692a:	6859      	ldr	r1, [r3, #4]
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800692c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800692e:	0589      	lsls	r1, r1, #22
 8006930:	0d89      	lsrs	r1, r1, #22
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006932:	2bff      	cmp	r3, #255	; 0xff
 8006934:	d908      	bls.n	8006948 <I2C_Master_ISR_IT+0xc0>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006936:	22ff      	movs	r2, #255	; 0xff
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006938:	2380      	movs	r3, #128	; 0x80
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800693a:	8522      	strh	r2, [r4, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800693c:	9000      	str	r0, [sp, #0]
 800693e:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006940:	0020      	movs	r0, r4
 8006942:	f7ff fa61 	bl	8005e08 <I2C_TransferConfig>
 8006946:	e7b9      	b.n	80068bc <I2C_Master_ISR_IT+0x34>
        hi2c->XferSize = hi2c->XferCount;
 8006948:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800694a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        hi2c->XferSize = hi2c->XferCount;
 800694c:	b292      	uxth	r2, r2
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800694e:	469c      	mov	ip, r3
 8006950:	4b17      	ldr	r3, [pc, #92]	; (80069b0 <I2C_Master_ISR_IT+0x128>)
        hi2c->XferSize = hi2c->XferCount;
 8006952:	8522      	strh	r2, [r4, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006954:	b2d2      	uxtb	r2, r2
 8006956:	459c      	cmp	ip, r3
 8006958:	d002      	beq.n	8006960 <I2C_Master_ISR_IT+0xd8>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800695a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800695c:	9000      	str	r0, [sp, #0]
 800695e:	e7ef      	b.n	8006940 <I2C_Master_ISR_IT+0xb8>
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006960:	2380      	movs	r3, #128	; 0x80
 8006962:	9000      	str	r0, [sp, #0]
 8006964:	049b      	lsls	r3, r3, #18
 8006966:	e7eb      	b.n	8006940 <I2C_Master_ISR_IT+0xb8>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	019b      	lsls	r3, r3, #6
 800696c:	d403      	bmi.n	8006976 <I2C_Master_ISR_IT+0xee>
        I2C_ITMasterSeqCplt(hi2c);
 800696e:	0020      	movs	r0, r4
 8006970:	f7ff fd87 	bl	8006482 <I2C_ITMasterSeqCplt>
 8006974:	e7a2      	b.n	80068bc <I2C_Master_ISR_IT+0x34>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006976:	2140      	movs	r1, #64	; 0x40
 8006978:	0020      	movs	r0, r4
 800697a:	f7ff fe89 	bl	8006690 <I2C_ITError>
 800697e:	e79d      	b.n	80068bc <I2C_Master_ISR_IT+0x34>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8006980:	421d      	tst	r5, r3
 8006982:	d09b      	beq.n	80068bc <I2C_Master_ISR_IT+0x34>
 8006984:	421e      	tst	r6, r3
 8006986:	d100      	bne.n	800698a <I2C_Master_ISR_IT+0x102>
 8006988:	e798      	b.n	80068bc <I2C_Master_ISR_IT+0x34>
    if (hi2c->XferCount == 0U)
 800698a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1f2      	bne.n	8006976 <I2C_Master_ISR_IT+0xee>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006990:	6823      	ldr	r3, [r4, #0]
 8006992:	685a      	ldr	r2, [r3, #4]
 8006994:	0192      	lsls	r2, r2, #6
 8006996:	d500      	bpl.n	800699a <I2C_Master_ISR_IT+0x112>
 8006998:	e790      	b.n	80068bc <I2C_Master_ISR_IT+0x34>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800699a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800699c:	4a04      	ldr	r2, [pc, #16]	; (80069b0 <I2C_Master_ISR_IT+0x128>)
 800699e:	4291      	cmp	r1, r2
 80069a0:	d1e5      	bne.n	800696e <I2C_Master_ISR_IT+0xe6>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80069a2:	2280      	movs	r2, #128	; 0x80
 80069a4:	6859      	ldr	r1, [r3, #4]
 80069a6:	01d2      	lsls	r2, r2, #7
 80069a8:	430a      	orrs	r2, r1
 80069aa:	605a      	str	r2, [r3, #4]
 80069ac:	e786      	b.n	80068bc <I2C_Master_ISR_IT+0x34>
 80069ae:	46c0      	nop			; (mov r8, r8)
 80069b0:	ffff0000 	.word	0xffff0000

080069b4 <I2C_Mem_ISR_DMA>:
{
 80069b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hi2c);
 80069b6:	0005      	movs	r5, r0
 80069b8:	3540      	adds	r5, #64	; 0x40
 80069ba:	782b      	ldrb	r3, [r5, #0]
{
 80069bc:	0004      	movs	r4, r0
  __HAL_LOCK(hi2c);
 80069be:	2002      	movs	r0, #2
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d015      	beq.n	80069f0 <I2C_Mem_ISR_DMA+0x3c>
 80069c4:	2301      	movs	r3, #1
 80069c6:	702b      	strb	r3, [r5, #0]
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80069c8:	330f      	adds	r3, #15
 80069ca:	4219      	tst	r1, r3
 80069cc:	d011      	beq.n	80069f2 <I2C_Mem_ISR_DMA+0x3e>
 80069ce:	421a      	tst	r2, r3
 80069d0:	d00f      	beq.n	80069f2 <I2C_Mem_ISR_DMA+0x3e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069d2:	6822      	ldr	r2, [r4, #0]
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80069d4:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069d6:	61d3      	str	r3, [r2, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80069d8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80069da:	3b0c      	subs	r3, #12
 80069dc:	4313      	orrs	r3, r2
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80069de:	2120      	movs	r1, #32
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80069e0:	6463      	str	r3, [r4, #68]	; 0x44
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80069e2:	f7ff fa27 	bl	8005e34 <I2C_Enable_IRQ>
    I2C_Flush_TXDR(hi2c);
 80069e6:	0020      	movs	r0, r4
 80069e8:	f7ff fa00 	bl	8005dec <I2C_Flush_TXDR>
  __HAL_UNLOCK(hi2c);
 80069ec:	2000      	movs	r0, #0
 80069ee:	7028      	strb	r0, [r5, #0]
}
 80069f0:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80069f2:	2302      	movs	r3, #2
 80069f4:	4219      	tst	r1, r3
 80069f6:	d008      	beq.n	8006a0a <I2C_Mem_ISR_DMA+0x56>
 80069f8:	421a      	tst	r2, r3
 80069fa:	d006      	beq.n	8006a0a <I2C_Mem_ISR_DMA+0x56>
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80069fc:	6823      	ldr	r3, [r4, #0]
 80069fe:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006a00:	629a      	str	r2, [r3, #40]	; 0x28
    hi2c->Memaddress = 0xFFFFFFFFU;
 8006a02:	2301      	movs	r3, #1
 8006a04:	425b      	negs	r3, r3
 8006a06:	6523      	str	r3, [r4, #80]	; 0x50
 8006a08:	e7f0      	b.n	80069ec <I2C_Mem_ISR_DMA+0x38>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006a0a:	2640      	movs	r6, #64	; 0x40
 8006a0c:	060b      	lsls	r3, r1, #24
 8006a0e:	d537      	bpl.n	8006a80 <I2C_Mem_ISR_DMA+0xcc>
 8006a10:	4232      	tst	r2, r6
 8006a12:	d035      	beq.n	8006a80 <I2C_Mem_ISR_DMA+0xcc>
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006a14:	2110      	movs	r1, #16
 8006a16:	0020      	movs	r0, r4
 8006a18:	f7ff fa0c 	bl	8005e34 <I2C_Enable_IRQ>
    if (hi2c->XferCount != 0U)
 8006a1c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d029      	beq.n	8006a76 <I2C_Mem_ISR_DMA+0xc2>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a22:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006a24:	2bff      	cmp	r3, #255	; 0xff
 8006a26:	d91b      	bls.n	8006a60 <I2C_Mem_ISR_DMA+0xac>
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006a28:	2300      	movs	r3, #0
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a2a:	22ff      	movs	r2, #255	; 0xff
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006a2c:	9300      	str	r3, [sp, #0]
 8006a2e:	2380      	movs	r3, #128	; 0x80
 8006a30:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a32:	8522      	strh	r2, [r4, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006a34:	b289      	uxth	r1, r1
 8006a36:	045b      	lsls	r3, r3, #17
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006a38:	0020      	movs	r0, r4
 8006a3a:	f7ff f9e5 	bl	8005e08 <I2C_TransferConfig>
      hi2c->XferCount -= hi2c->XferSize;
 8006a3e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006a40:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8006a42:	1a9b      	subs	r3, r3, r2
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006a48:	0023      	movs	r3, r4
 8006a4a:	3341      	adds	r3, #65	; 0x41
 8006a4c:	781a      	ldrb	r2, [r3, #0]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a4e:	6823      	ldr	r3, [r4, #0]
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006a50:	6819      	ldr	r1, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006a52:	2a22      	cmp	r2, #34	; 0x22
 8006a54:	d141      	bne.n	8006ada <I2C_Mem_ISR_DMA+0x126>
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006a56:	2280      	movs	r2, #128	; 0x80
 8006a58:	0212      	lsls	r2, r2, #8
 8006a5a:	430a      	orrs	r2, r1
 8006a5c:	601a      	str	r2, [r3, #0]
 8006a5e:	e7c5      	b.n	80069ec <I2C_Mem_ISR_DMA+0x38>
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006a60:	2300      	movs	r3, #0
 8006a62:	9300      	str	r3, [sp, #0]
 8006a64:	2380      	movs	r3, #128	; 0x80
        hi2c->XferSize = hi2c->XferCount;
 8006a66:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006a68:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
        hi2c->XferSize = hi2c->XferCount;
 8006a6a:	b292      	uxth	r2, r2
 8006a6c:	8522      	strh	r2, [r4, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006a6e:	b289      	uxth	r1, r1
 8006a70:	b2d2      	uxtb	r2, r2
 8006a72:	049b      	lsls	r3, r3, #18
 8006a74:	e7e0      	b.n	8006a38 <I2C_Mem_ISR_DMA+0x84>
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006a76:	0031      	movs	r1, r6
 8006a78:	0020      	movs	r0, r4
 8006a7a:	f7ff fe09 	bl	8006690 <I2C_ITError>
 8006a7e:	e7b5      	b.n	80069ec <I2C_Mem_ISR_DMA+0x38>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006a80:	4231      	tst	r1, r6
 8006a82:	d02d      	beq.n	8006ae0 <I2C_Mem_ISR_DMA+0x12c>
 8006a84:	4232      	tst	r2, r6
 8006a86:	d02b      	beq.n	8006ae0 <I2C_Mem_ISR_DMA+0x12c>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006a88:	0026      	movs	r6, r4
 8006a8a:	3641      	adds	r6, #65	; 0x41
 8006a8c:	7833      	ldrb	r3, [r6, #0]
      direction = I2C_GENERATE_START_READ;
 8006a8e:	3b22      	subs	r3, #34	; 0x22
 8006a90:	1e5a      	subs	r2, r3, #1
 8006a92:	4193      	sbcs	r3, r2
 8006a94:	425b      	negs	r3, r3
 8006a96:	4a18      	ldr	r2, [pc, #96]	; (8006af8 <I2C_Mem_ISR_DMA+0x144>)
 8006a98:	0a9b      	lsrs	r3, r3, #10
 8006a9a:	029b      	lsls	r3, r3, #10
 8006a9c:	189b      	adds	r3, r3, r2
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a9e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8006aa0:	2aff      	cmp	r2, #255	; 0xff
 8006aa2:	d910      	bls.n	8006ac6 <I2C_Mem_ISR_DMA+0x112>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006aa4:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006aa6:	9300      	str	r3, [sp, #0]
 8006aa8:	2380      	movs	r3, #128	; 0x80
 8006aaa:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006aac:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006aae:	b289      	uxth	r1, r1
 8006ab0:	045b      	lsls	r3, r3, #17
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006ab2:	0020      	movs	r0, r4
 8006ab4:	f7ff f9a8 	bl	8005e08 <I2C_TransferConfig>
    hi2c->XferCount -= hi2c->XferSize;
 8006ab8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006aba:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8006abc:	1a9b      	subs	r3, r3, r2
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006ac2:	7832      	ldrb	r2, [r6, #0]
 8006ac4:	e7c3      	b.n	8006a4e <I2C_Mem_ISR_DMA+0x9a>
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006ac6:	9300      	str	r3, [sp, #0]
 8006ac8:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = hi2c->XferCount;
 8006aca:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006acc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
      hi2c->XferSize = hi2c->XferCount;
 8006ace:	b292      	uxth	r2, r2
 8006ad0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006ad2:	b289      	uxth	r1, r1
 8006ad4:	b2d2      	uxtb	r2, r2
 8006ad6:	049b      	lsls	r3, r3, #18
 8006ad8:	e7eb      	b.n	8006ab2 <I2C_Mem_ISR_DMA+0xfe>
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006ada:	2280      	movs	r2, #128	; 0x80
 8006adc:	01d2      	lsls	r2, r2, #7
 8006ade:	e7bc      	b.n	8006a5a <I2C_Mem_ISR_DMA+0xa6>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006ae0:	2320      	movs	r3, #32
 8006ae2:	4219      	tst	r1, r3
 8006ae4:	d100      	bne.n	8006ae8 <I2C_Mem_ISR_DMA+0x134>
 8006ae6:	e781      	b.n	80069ec <I2C_Mem_ISR_DMA+0x38>
 8006ae8:	421a      	tst	r2, r3
 8006aea:	d100      	bne.n	8006aee <I2C_Mem_ISR_DMA+0x13a>
 8006aec:	e77e      	b.n	80069ec <I2C_Mem_ISR_DMA+0x38>
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006aee:	0020      	movs	r0, r4
 8006af0:	f7ff fe58 	bl	80067a4 <I2C_ITMasterCplt>
 8006af4:	e77a      	b.n	80069ec <I2C_Mem_ISR_DMA+0x38>
 8006af6:	46c0      	nop			; (mov r8, r8)
 8006af8:	80002400 	.word	0x80002400

08006afc <I2C_Master_ISR_DMA>:
{
 8006afc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 8006afe:	0006      	movs	r6, r0
 8006b00:	3640      	adds	r6, #64	; 0x40
 8006b02:	7833      	ldrb	r3, [r6, #0]
{
 8006b04:	0004      	movs	r4, r0
  __HAL_LOCK(hi2c);
 8006b06:	2002      	movs	r0, #2
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d015      	beq.n	8006b38 <I2C_Master_ISR_DMA+0x3c>
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	7033      	strb	r3, [r6, #0]
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006b10:	330f      	adds	r3, #15
 8006b12:	4219      	tst	r1, r3
 8006b14:	d011      	beq.n	8006b3a <I2C_Master_ISR_DMA+0x3e>
 8006b16:	421a      	tst	r2, r3
 8006b18:	d00f      	beq.n	8006b3a <I2C_Master_ISR_DMA+0x3e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b1a:	6822      	ldr	r2, [r4, #0]
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006b1c:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b1e:	61d3      	str	r3, [r2, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b20:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006b22:	3b0c      	subs	r3, #12
 8006b24:	4313      	orrs	r3, r2
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006b26:	2120      	movs	r1, #32
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b28:	6463      	str	r3, [r4, #68]	; 0x44
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006b2a:	f7ff f983 	bl	8005e34 <I2C_Enable_IRQ>
    I2C_Flush_TXDR(hi2c);
 8006b2e:	0020      	movs	r0, r4
 8006b30:	f7ff f95c 	bl	8005dec <I2C_Flush_TXDR>
  __HAL_UNLOCK(hi2c);
 8006b34:	2000      	movs	r0, #0
 8006b36:	7030      	strb	r0, [r6, #0]
}
 8006b38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006b3a:	2340      	movs	r3, #64	; 0x40
 8006b3c:	0608      	lsls	r0, r1, #24
 8006b3e:	d541      	bpl.n	8006bc4 <I2C_Master_ISR_DMA+0xc8>
 8006b40:	421a      	tst	r2, r3
 8006b42:	d03f      	beq.n	8006bc4 <I2C_Master_ISR_DMA+0xc8>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8006b44:	6825      	ldr	r5, [r4, #0]
 8006b46:	682a      	ldr	r2, [r5, #0]
 8006b48:	439a      	bics	r2, r3
 8006b4a:	602a      	str	r2, [r5, #0]
    if (hi2c->XferCount != 0U)
 8006b4c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d02c      	beq.n	8006bac <I2C_Master_ISR_DMA+0xb0>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006b52:	6869      	ldr	r1, [r5, #4]
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b54:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006b56:	0589      	lsls	r1, r1, #22
 8006b58:	0d89      	lsrs	r1, r1, #22
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b5a:	2bff      	cmp	r3, #255	; 0xff
 8006b5c:	d918      	bls.n	8006b90 <I2C_Master_ISR_DMA+0x94>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b5e:	23ff      	movs	r3, #255	; 0xff
 8006b60:	8523      	strh	r3, [r4, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8006b62:	2380      	movs	r3, #128	; 0x80
 8006b64:	045b      	lsls	r3, r3, #17
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8006b66:	2000      	movs	r0, #0
 8006b68:	8d27      	ldrh	r7, [r4, #40]	; 0x28
 8006b6a:	9000      	str	r0, [sp, #0]
 8006b6c:	b2fa      	uxtb	r2, r7
 8006b6e:	0020      	movs	r0, r4
 8006b70:	f7ff f94a 	bl	8005e08 <I2C_TransferConfig>
      hi2c->XferCount -= hi2c->XferSize;
 8006b74:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006b76:	1bdb      	subs	r3, r3, r7
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006b7c:	3441      	adds	r4, #65	; 0x41
 8006b7e:	7823      	ldrb	r3, [r4, #0]
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006b80:	682a      	ldr	r2, [r5, #0]
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006b82:	2b22      	cmp	r3, #34	; 0x22
 8006b84:	d10f      	bne.n	8006ba6 <I2C_Master_ISR_DMA+0xaa>
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006b86:	2380      	movs	r3, #128	; 0x80
 8006b88:	021b      	lsls	r3, r3, #8
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	602b      	str	r3, [r5, #0]
 8006b8e:	e7d1      	b.n	8006b34 <I2C_Master_ISR_DMA+0x38>
        hi2c->XferSize = hi2c->XferCount;
 8006b90:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006b92:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        hi2c->XferSize = hi2c->XferCount;
 8006b94:	8523      	strh	r3, [r4, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006b96:	4b1a      	ldr	r3, [pc, #104]	; (8006c00 <I2C_Master_ISR_DMA+0x104>)
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d001      	beq.n	8006ba0 <I2C_Master_ISR_DMA+0xa4>
          xfermode = hi2c->XferOptions;
 8006b9c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006b9e:	e7e2      	b.n	8006b66 <I2C_Master_ISR_DMA+0x6a>
          xfermode = I2C_AUTOEND_MODE;
 8006ba0:	2380      	movs	r3, #128	; 0x80
 8006ba2:	049b      	lsls	r3, r3, #18
 8006ba4:	e7df      	b.n	8006b66 <I2C_Master_ISR_DMA+0x6a>
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006ba6:	2380      	movs	r3, #128	; 0x80
 8006ba8:	01db      	lsls	r3, r3, #7
 8006baa:	e7ee      	b.n	8006b8a <I2C_Master_ISR_DMA+0x8e>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006bac:	686b      	ldr	r3, [r5, #4]
 8006bae:	019b      	lsls	r3, r3, #6
 8006bb0:	d403      	bmi.n	8006bba <I2C_Master_ISR_DMA+0xbe>
        I2C_ITMasterSeqCplt(hi2c);
 8006bb2:	0020      	movs	r0, r4
 8006bb4:	f7ff fc65 	bl	8006482 <I2C_ITMasterSeqCplt>
 8006bb8:	e7bc      	b.n	8006b34 <I2C_Master_ISR_DMA+0x38>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006bba:	2140      	movs	r1, #64	; 0x40
 8006bbc:	0020      	movs	r0, r4
 8006bbe:	f7ff fd67 	bl	8006690 <I2C_ITError>
 8006bc2:	e7b7      	b.n	8006b34 <I2C_Master_ISR_DMA+0x38>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006bc4:	4219      	tst	r1, r3
 8006bc6:	d012      	beq.n	8006bee <I2C_Master_ISR_DMA+0xf2>
 8006bc8:	421a      	tst	r2, r3
 8006bca:	d010      	beq.n	8006bee <I2C_Master_ISR_DMA+0xf2>
    if (hi2c->XferCount == 0U)
 8006bcc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1f3      	bne.n	8006bba <I2C_Master_ISR_DMA+0xbe>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006bd2:	6822      	ldr	r2, [r4, #0]
 8006bd4:	6853      	ldr	r3, [r2, #4]
 8006bd6:	019b      	lsls	r3, r3, #6
 8006bd8:	d4ac      	bmi.n	8006b34 <I2C_Master_ISR_DMA+0x38>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006bda:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006bdc:	4b08      	ldr	r3, [pc, #32]	; (8006c00 <I2C_Master_ISR_DMA+0x104>)
 8006bde:	4299      	cmp	r1, r3
 8006be0:	d1e7      	bne.n	8006bb2 <I2C_Master_ISR_DMA+0xb6>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006be2:	2380      	movs	r3, #128	; 0x80
 8006be4:	6851      	ldr	r1, [r2, #4]
 8006be6:	01db      	lsls	r3, r3, #7
 8006be8:	430b      	orrs	r3, r1
 8006bea:	6053      	str	r3, [r2, #4]
 8006bec:	e7a2      	b.n	8006b34 <I2C_Master_ISR_DMA+0x38>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006bee:	2320      	movs	r3, #32
 8006bf0:	4219      	tst	r1, r3
 8006bf2:	d09f      	beq.n	8006b34 <I2C_Master_ISR_DMA+0x38>
 8006bf4:	421a      	tst	r2, r3
 8006bf6:	d09d      	beq.n	8006b34 <I2C_Master_ISR_DMA+0x38>
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006bf8:	0020      	movs	r0, r4
 8006bfa:	f7ff fdd3 	bl	80067a4 <I2C_ITMasterCplt>
 8006bfe:	e799      	b.n	8006b34 <I2C_Master_ISR_DMA+0x38>
 8006c00:	ffff0000 	.word	0xffff0000

08006c04 <I2C_DMAError>:
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006c04:	2380      	movs	r3, #128	; 0x80
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006c06:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8006c08:	b510      	push	{r4, lr}
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006c0a:	6802      	ldr	r2, [r0, #0]
 8006c0c:	021b      	lsls	r3, r3, #8
 8006c0e:	6851      	ldr	r1, [r2, #4]
 8006c10:	430b      	orrs	r3, r1
 8006c12:	6053      	str	r3, [r2, #4]
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006c14:	2110      	movs	r1, #16
 8006c16:	f7ff fd3b 	bl	8006690 <I2C_ITError>
}
 8006c1a:	bd10      	pop	{r4, pc}

08006c1c <I2C_DMAMasterTransmitCplt>:
{
 8006c1c:	b510      	push	{r4, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006c1e:	6a44      	ldr	r4, [r0, #36]	; 0x24
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006c20:	4911      	ldr	r1, [pc, #68]	; (8006c68 <I2C_DMAMasterTransmitCplt+0x4c>)
 8006c22:	6822      	ldr	r2, [r4, #0]
 8006c24:	6813      	ldr	r3, [r2, #0]
 8006c26:	400b      	ands	r3, r1
 8006c28:	6013      	str	r3, [r2, #0]
  if (hi2c->XferCount == 0U)
 8006c2a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006c2c:	2120      	movs	r1, #32
  if (hi2c->XferCount == 0U)
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d016      	beq.n	8006c60 <I2C_DMAMasterTransmitCplt+0x44>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006c32:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006c34:	6a61      	ldr	r1, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c36:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
    hi2c->pBuffPtr += hi2c->XferSize;
 8006c38:	18c9      	adds	r1, r1, r3
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c3a:	23ff      	movs	r3, #255	; 0xff
    hi2c->pBuffPtr += hi2c->XferSize;
 8006c3c:	6261      	str	r1, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c3e:	4298      	cmp	r0, r3
 8006c40:	d801      	bhi.n	8006c46 <I2C_DMAMasterTransmitCplt+0x2a>
      hi2c->XferSize = hi2c->XferCount;
 8006c42:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006c44:	b29b      	uxth	r3, r3
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006c46:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006c48:	8523      	strh	r3, [r4, #40]	; 0x28
 8006c4a:	3228      	adds	r2, #40	; 0x28
 8006c4c:	f7fe fe38 	bl	80058c0 <HAL_DMA_Start_IT>
 8006c50:	2800      	cmp	r0, #0
 8006c52:	d004      	beq.n	8006c5e <I2C_DMAMasterTransmitCplt+0x42>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006c54:	2110      	movs	r1, #16
 8006c56:	0020      	movs	r0, r4
 8006c58:	f7ff fd1a 	bl	8006690 <I2C_ITError>
}
 8006c5c:	bd10      	pop	{r4, pc}
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006c5e:	2140      	movs	r1, #64	; 0x40
 8006c60:	0020      	movs	r0, r4
 8006c62:	f7ff f8e7 	bl	8005e34 <I2C_Enable_IRQ>
}
 8006c66:	e7f9      	b.n	8006c5c <I2C_DMAMasterTransmitCplt+0x40>
 8006c68:	ffffbfff 	.word	0xffffbfff

08006c6c <HAL_I2C_ER_IRQHandler>:
{
 8006c6c:	b570      	push	{r4, r5, r6, lr}
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006c6e:	2580      	movs	r5, #128	; 0x80
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006c70:	6803      	ldr	r3, [r0, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006c72:	006d      	lsls	r5, r5, #1
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006c74:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006c76:	681a      	ldr	r2, [r3, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006c78:	4229      	tst	r1, r5
 8006c7a:	d006      	beq.n	8006c8a <HAL_I2C_ER_IRQHandler+0x1e>
 8006c7c:	0614      	lsls	r4, r2, #24
 8006c7e:	d504      	bpl.n	8006c8a <HAL_I2C_ER_IRQHandler+0x1e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006c80:	2401      	movs	r4, #1
 8006c82:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8006c84:	4334      	orrs	r4, r6
 8006c86:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006c88:	61dd      	str	r5, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006c8a:	2580      	movs	r5, #128	; 0x80
 8006c8c:	00ed      	lsls	r5, r5, #3
 8006c8e:	4229      	tst	r1, r5
 8006c90:	d006      	beq.n	8006ca0 <HAL_I2C_ER_IRQHandler+0x34>
 8006c92:	0614      	lsls	r4, r2, #24
 8006c94:	d504      	bpl.n	8006ca0 <HAL_I2C_ER_IRQHandler+0x34>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8006c96:	2408      	movs	r4, #8
 8006c98:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8006c9a:	4334      	orrs	r4, r6
 8006c9c:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006c9e:	61dd      	str	r5, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006ca0:	2480      	movs	r4, #128	; 0x80
 8006ca2:	00a4      	lsls	r4, r4, #2
 8006ca4:	4221      	tst	r1, r4
 8006ca6:	d006      	beq.n	8006cb6 <HAL_I2C_ER_IRQHandler+0x4a>
 8006ca8:	0612      	lsls	r2, r2, #24
 8006caa:	d504      	bpl.n	8006cb6 <HAL_I2C_ER_IRQHandler+0x4a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006cac:	2202      	movs	r2, #2
 8006cae:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8006cb0:	430a      	orrs	r2, r1
 8006cb2:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006cb4:	61dc      	str	r4, [r3, #28]
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006cb6:	230b      	movs	r3, #11
  tmperror = hi2c->ErrorCode;
 8006cb8:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006cba:	4219      	tst	r1, r3
 8006cbc:	d001      	beq.n	8006cc2 <HAL_I2C_ER_IRQHandler+0x56>
    I2C_ITError(hi2c, tmperror);
 8006cbe:	f7ff fce7 	bl	8006690 <I2C_ITError>
}
 8006cc2:	bd70      	pop	{r4, r5, r6, pc}

08006cc4 <I2C_ITSlaveCplt.constprop.0>:
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8006cc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006cc6:	6805      	ldr	r5, [r0, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006cc8:	0006      	movs	r6, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006cca:	682b      	ldr	r3, [r5, #0]
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8006ccc:	9100      	str	r1, [sp, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006cce:	9301      	str	r3, [sp, #4]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cd0:	2320      	movs	r3, #32
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006cd2:	3641      	adds	r6, #65	; 0x41
 8006cd4:	7837      	ldrb	r7, [r6, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cd6:	61eb      	str	r3, [r5, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006cd8:	3b18      	subs	r3, #24
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8006cda:	0004      	movs	r4, r0
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006cdc:	439f      	bics	r7, r3
 8006cde:	2f21      	cmp	r7, #33	; 0x21
 8006ce0:	d14e      	bne.n	8006d80 <I2C_ITSlaveCplt.constprop.0+0xbc>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006ce2:	493e      	ldr	r1, [pc, #248]	; (8006ddc <I2C_ITSlaveCplt.constprop.0+0x118>)
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006ce4:	0020      	movs	r0, r4
 8006ce6:	f7ff f8e9 	bl	8005ebc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006cea:	6327      	str	r7, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006cec:	2780      	movs	r7, #128	; 0x80
 8006cee:	686b      	ldr	r3, [r5, #4]
 8006cf0:	023f      	lsls	r7, r7, #8
 8006cf2:	433b      	orrs	r3, r7
 8006cf4:	606b      	str	r3, [r5, #4]
  I2C_RESET_CR2(hi2c);
 8006cf6:	686b      	ldr	r3, [r5, #4]
 8006cf8:	4a39      	ldr	r2, [pc, #228]	; (8006de0 <I2C_ITSlaveCplt.constprop.0+0x11c>)
  I2C_Flush_TXDR(hi2c);
 8006cfa:	0020      	movs	r0, r4
  I2C_RESET_CR2(hi2c);
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	606b      	str	r3, [r5, #4]
  I2C_Flush_TXDR(hi2c);
 8006d00:	f7ff f874 	bl	8005dec <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006d04:	9b01      	ldr	r3, [sp, #4]
 8006d06:	045b      	lsls	r3, r3, #17
 8006d08:	d53e      	bpl.n	8006d88 <I2C_ITSlaveCplt.constprop.0+0xc4>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006d0a:	682b      	ldr	r3, [r5, #0]
 8006d0c:	4a35      	ldr	r2, [pc, #212]	; (8006de4 <I2C_ITSlaveCplt.constprop.0+0x120>)
 8006d0e:	4013      	ands	r3, r2
 8006d10:	602b      	str	r3, [r5, #0]
    if (hi2c->hdmatx != NULL)
 8006d12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if (hi2c->hdmarx != NULL)
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d003      	beq.n	8006d20 <I2C_ITSlaveCplt.constprop.0+0x5c>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006d20:	2304      	movs	r3, #4
 8006d22:	9a00      	ldr	r2, [sp, #0]
 8006d24:	421a      	tst	r2, r3
 8006d26:	d010      	beq.n	8006d4a <I2C_ITSlaveCplt.constprop.0+0x86>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006d28:	439a      	bics	r2, r3
 8006d2a:	9200      	str	r2, [sp, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006d2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d2e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8006d30:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006d32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d34:	3301      	adds	r3, #1
 8006d36:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8006d38:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d005      	beq.n	8006d4a <I2C_ITSlaveCplt.constprop.0+0x86>
      hi2c->XferSize--;
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006d42:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006d44:	3b01      	subs	r3, #1
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8006d4a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d003      	beq.n	8006d58 <I2C_ITSlaveCplt.constprop.0+0x94>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006d50:	2304      	movs	r3, #4
 8006d52:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006d54:	4313      	orrs	r3, r2
 8006d56:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d58:	0023      	movs	r3, r4
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	3342      	adds	r3, #66	; 0x42
 8006d5e:	701a      	strb	r2, [r3, #0]
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006d60:	6c65      	ldr	r5, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 8006d62:	6362      	str	r2, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006d64:	4295      	cmp	r5, r2
 8006d66:	d018      	beq.n	8006d9a <I2C_ITSlaveCplt.constprop.0+0xd6>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006d68:	0020      	movs	r0, r4
 8006d6a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006d6c:	f7ff fc90 	bl	8006690 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006d70:	7833      	ldrb	r3, [r6, #0]
 8006d72:	2b28      	cmp	r3, #40	; 0x28
 8006d74:	d103      	bne.n	8006d7e <I2C_ITSlaveCplt.constprop.0+0xba>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006d76:	0020      	movs	r0, r4
 8006d78:	9900      	ldr	r1, [sp, #0]
 8006d7a:	f7ff fc39 	bl	80065f0 <I2C_ITListenCplt>
}
 8006d7e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006d80:	2f22      	cmp	r7, #34	; 0x22
 8006d82:	d1b3      	bne.n	8006cec <I2C_ITSlaveCplt.constprop.0+0x28>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006d84:	4918      	ldr	r1, [pc, #96]	; (8006de8 <I2C_ITSlaveCplt.constprop.0+0x124>)
 8006d86:	e7ad      	b.n	8006ce4 <I2C_ITSlaveCplt.constprop.0+0x20>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006d88:	9b01      	ldr	r3, [sp, #4]
 8006d8a:	423b      	tst	r3, r7
 8006d8c:	d0c8      	beq.n	8006d20 <I2C_ITSlaveCplt.constprop.0+0x5c>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006d8e:	682b      	ldr	r3, [r5, #0]
 8006d90:	4a16      	ldr	r2, [pc, #88]	; (8006dec <I2C_ITSlaveCplt.constprop.0+0x128>)
 8006d92:	4013      	ands	r3, r2
 8006d94:	602b      	str	r3, [r5, #0]
    if (hi2c->hdmarx != NULL)
 8006d96:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006d98:	e7bc      	b.n	8006d14 <I2C_ITSlaveCplt.constprop.0+0x50>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006d9a:	0027      	movs	r7, r4
 8006d9c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006d9e:	4a14      	ldr	r2, [pc, #80]	; (8006df0 <I2C_ITSlaveCplt.constprop.0+0x12c>)
 8006da0:	3740      	adds	r7, #64	; 0x40
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d00c      	beq.n	8006dc0 <I2C_ITSlaveCplt.constprop.0+0xfc>
    I2C_ITSlaveSeqCplt(hi2c);
 8006da6:	0020      	movs	r0, r4
 8006da8:	f7ff fb92 	bl	80064d0 <I2C_ITSlaveSeqCplt>
    hi2c->State = HAL_I2C_STATE_READY;
 8006dac:	2320      	movs	r3, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006dae:	4a10      	ldr	r2, [pc, #64]	; (8006df0 <I2C_ITSlaveCplt.constprop.0+0x12c>)
    HAL_I2C_ListenCpltCallback(hi2c);
 8006db0:	0020      	movs	r0, r4
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006db2:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006db4:	7033      	strb	r3, [r6, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006db6:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006db8:	703d      	strb	r5, [r7, #0]
    HAL_I2C_ListenCpltCallback(hi2c);
 8006dba:	f7ff fc17 	bl	80065ec <HAL_I2C_ListenCpltCallback>
 8006dbe:	e7de      	b.n	8006d7e <I2C_ITSlaveCplt.constprop.0+0xba>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006dc0:	2320      	movs	r3, #32
 8006dc2:	7832      	ldrb	r2, [r6, #0]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006dc4:	0020      	movs	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 8006dc6:	7033      	strb	r3, [r6, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006dc8:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006dca:	703d      	strb	r5, [r7, #0]
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006dcc:	2a22      	cmp	r2, #34	; 0x22
 8006dce:	d102      	bne.n	8006dd6 <I2C_ITSlaveCplt.constprop.0+0x112>
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006dd0:	f7ff fb7c 	bl	80064cc <HAL_I2C_SlaveRxCpltCallback>
 8006dd4:	e7d3      	b.n	8006d7e <I2C_ITSlaveCplt.constprop.0+0xba>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006dd6:	f7ff fb78 	bl	80064ca <HAL_I2C_SlaveTxCpltCallback>
}
 8006dda:	e7d0      	b.n	8006d7e <I2C_ITSlaveCplt.constprop.0+0xba>
 8006ddc:	00008001 	.word	0x00008001
 8006de0:	fe00e800 	.word	0xfe00e800
 8006de4:	ffffbfff 	.word	0xffffbfff
 8006de8:	00008002 	.word	0x00008002
 8006dec:	ffff7fff 	.word	0xffff7fff
 8006df0:	ffff0000 	.word	0xffff0000

08006df4 <I2C_Slave_ISR_DMA>:
  __HAL_LOCK(hi2c);
 8006df4:	0003      	movs	r3, r0
{
 8006df6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 8006df8:	3340      	adds	r3, #64	; 0x40
 8006dfa:	9301      	str	r3, [sp, #4]
 8006dfc:	781b      	ldrb	r3, [r3, #0]
{
 8006dfe:	0004      	movs	r4, r0
  uint32_t tmpoptions = hi2c->XferOptions;
 8006e00:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
{
 8006e02:	000e      	movs	r6, r1
 8006e04:	0015      	movs	r5, r2
  __HAL_LOCK(hi2c);
 8006e06:	2002      	movs	r0, #2
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d03b      	beq.n	8006e84 <I2C_Slave_ISR_DMA+0x90>
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	9a01      	ldr	r2, [sp, #4]
 8006e10:	7013      	strb	r3, [r2, #0]
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006e12:	331f      	adds	r3, #31
 8006e14:	4219      	tst	r1, r3
 8006e16:	d004      	beq.n	8006e22 <I2C_Slave_ISR_DMA+0x2e>
 8006e18:	421d      	tst	r5, r3
 8006e1a:	d002      	beq.n	8006e22 <I2C_Slave_ISR_DMA+0x2e>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006e1c:	0020      	movs	r0, r4
 8006e1e:	f7ff ff51 	bl	8006cc4 <I2C_ITSlaveCplt.constprop.0>
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006e22:	2310      	movs	r3, #16
 8006e24:	421e      	tst	r6, r3
 8006e26:	d060      	beq.n	8006eea <I2C_Slave_ISR_DMA+0xf6>
 8006e28:	421d      	tst	r5, r3
 8006e2a:	d05e      	beq.n	8006eea <I2C_Slave_ISR_DMA+0xf6>
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006e2c:	22c0      	movs	r2, #192	; 0xc0
 8006e2e:	0212      	lsls	r2, r2, #8
 8006e30:	4215      	tst	r5, r2
 8006e32:	d057      	beq.n	8006ee4 <I2C_Slave_ISR_DMA+0xf0>
      if (hi2c->hdmarx != NULL)
 8006e34:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  uint32_t treatdmanack = 0U;
 8006e36:	1e13      	subs	r3, r2, #0
      if (hi2c->hdmarx != NULL)
 8006e38:	d009      	beq.n	8006e4e <I2C_Slave_ISR_DMA+0x5a>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8006e3a:	2180      	movs	r1, #128	; 0x80
 8006e3c:	002b      	movs	r3, r5
 8006e3e:	0209      	lsls	r1, r1, #8
 8006e40:	400b      	ands	r3, r1
 8006e42:	420d      	tst	r5, r1
 8006e44:	d003      	beq.n	8006e4e <I2C_Slave_ISR_DMA+0x5a>
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006e46:	6813      	ldr	r3, [r2, #0]
 8006e48:	685b      	ldr	r3, [r3, #4]
  uint32_t treatdmanack = 0U;
 8006e4a:	425a      	negs	r2, r3
 8006e4c:	4153      	adcs	r3, r2
      if (hi2c->hdmatx != NULL)
 8006e4e:	0022      	movs	r2, r4
 8006e50:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006e52:	3241      	adds	r2, #65	; 0x41
 8006e54:	2900      	cmp	r1, #0
 8006e56:	d005      	beq.n	8006e64 <I2C_Slave_ISR_DMA+0x70>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006e58:	046d      	lsls	r5, r5, #17
 8006e5a:	d503      	bpl.n	8006e64 <I2C_Slave_ISR_DMA+0x70>
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8006e5c:	6809      	ldr	r1, [r1, #0]
 8006e5e:	6849      	ldr	r1, [r1, #4]
 8006e60:	2900      	cmp	r1, #0
 8006e62:	d001      	beq.n	8006e68 <I2C_Slave_ISR_DMA+0x74>
      if (treatdmanack == 1U)
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d11e      	bne.n	8006ea6 <I2C_Slave_ISR_DMA+0xb2>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006e68:	7813      	ldrb	r3, [r2, #0]
 8006e6a:	2b28      	cmp	r3, #40	; 0x28
 8006e6c:	d10b      	bne.n	8006e86 <I2C_Slave_ISR_DMA+0x92>
 8006e6e:	2380      	movs	r3, #128	; 0x80
 8006e70:	049b      	lsls	r3, r3, #18
 8006e72:	429f      	cmp	r7, r3
 8006e74:	d107      	bne.n	8006e86 <I2C_Slave_ISR_DMA+0x92>
          I2C_ITListenCplt(hi2c, ITFlags);
 8006e76:	0031      	movs	r1, r6
 8006e78:	0020      	movs	r0, r4
 8006e7a:	f7ff fbb9 	bl	80065f0 <I2C_ITListenCplt>
  __HAL_UNLOCK(hi2c);
 8006e7e:	2000      	movs	r0, #0
 8006e80:	9b01      	ldr	r3, [sp, #4]
 8006e82:	7018      	strb	r0, [r3, #0]
}
 8006e84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006e86:	7811      	ldrb	r1, [r2, #0]
 8006e88:	2210      	movs	r2, #16
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e8a:	6823      	ldr	r3, [r4, #0]
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e8c:	61da      	str	r2, [r3, #28]
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006e8e:	2929      	cmp	r1, #41	; 0x29
 8006e90:	d1f5      	bne.n	8006e7e <I2C_Slave_ISR_DMA+0x8a>
 8006e92:	491a      	ldr	r1, [pc, #104]	; (8006efc <I2C_Slave_ISR_DMA+0x108>)
 8006e94:	428f      	cmp	r7, r1
 8006e96:	d0f2      	beq.n	8006e7e <I2C_Slave_ISR_DMA+0x8a>
          I2C_Flush_TXDR(hi2c);
 8006e98:	0020      	movs	r0, r4
 8006e9a:	f7fe ffa7 	bl	8005dec <I2C_Flush_TXDR>
          I2C_ITSlaveSeqCplt(hi2c);
 8006e9e:	0020      	movs	r0, r4
 8006ea0:	f7ff fb16 	bl	80064d0 <I2C_ITSlaveSeqCplt>
 8006ea4:	e7eb      	b.n	8006e7e <I2C_Slave_ISR_DMA+0x8a>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ea6:	2110      	movs	r1, #16
 8006ea8:	6823      	ldr	r3, [r4, #0]
 8006eaa:	61d9      	str	r1, [r3, #28]
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006eac:	2304      	movs	r3, #4
 8006eae:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006eb0:	430b      	orrs	r3, r1
 8006eb2:	6463      	str	r3, [r4, #68]	; 0x44
        tmpstate = hi2c->State;
 8006eb4:	7810      	ldrb	r0, [r2, #0]
        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006eb6:	4b12      	ldr	r3, [pc, #72]	; (8006f00 <I2C_Slave_ISR_DMA+0x10c>)
        tmpstate = hi2c->State;
 8006eb8:	b2c0      	uxtb	r0, r0
        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006eba:	421f      	tst	r7, r3
 8006ebc:	d1df      	bne.n	8006e7e <I2C_Slave_ISR_DMA+0x8a>
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006ebe:	3821      	subs	r0, #33	; 0x21
 8006ec0:	2809      	cmp	r0, #9
 8006ec2:	d808      	bhi.n	8006ed6 <I2C_Slave_ISR_DMA+0xe2>
 8006ec4:	f7f9 f928 	bl	8000118 <__gnu_thumb1_case_uqi>
 8006ec8:	07070c05 	.word	0x07070c05
 8006ecc:	07070707 	.word	0x07070707
 8006ed0:	0c05      	.short	0x0c05
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006ed2:	2321      	movs	r3, #33	; 0x21
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006ed4:	6323      	str	r3, [r4, #48]	; 0x30
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8006ed6:	0020      	movs	r0, r4
 8006ed8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006eda:	f7ff fbd9 	bl	8006690 <I2C_ITError>
 8006ede:	e7ce      	b.n	8006e7e <I2C_Slave_ISR_DMA+0x8a>
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006ee0:	2322      	movs	r3, #34	; 0x22
 8006ee2:	e7f7      	b.n	8006ed4 <I2C_Slave_ISR_DMA+0xe0>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ee4:	6822      	ldr	r2, [r4, #0]
 8006ee6:	61d3      	str	r3, [r2, #28]
 8006ee8:	e7c9      	b.n	8006e7e <I2C_Slave_ISR_DMA+0x8a>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006eea:	2308      	movs	r3, #8
 8006eec:	421e      	tst	r6, r3
 8006eee:	d0c6      	beq.n	8006e7e <I2C_Slave_ISR_DMA+0x8a>
 8006ef0:	421d      	tst	r5, r3
 8006ef2:	d0c4      	beq.n	8006e7e <I2C_Slave_ISR_DMA+0x8a>
    I2C_ITAddrCplt(hi2c, ITFlags);
 8006ef4:	0020      	movs	r0, r4
 8006ef6:	f7ff fb2c 	bl	8006552 <I2C_ITAddrCplt.constprop.0>
 8006efa:	e7c0      	b.n	8006e7e <I2C_Slave_ISR_DMA+0x8a>
 8006efc:	ffff0000 	.word	0xffff0000
 8006f00:	feffffff 	.word	0xfeffffff

08006f04 <I2C_Slave_ISR_IT>:
  __HAL_LOCK(hi2c);
 8006f04:	0003      	movs	r3, r0
{
 8006f06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 8006f08:	3340      	adds	r3, #64	; 0x40
 8006f0a:	9301      	str	r3, [sp, #4]
 8006f0c:	781b      	ldrb	r3, [r3, #0]
{
 8006f0e:	0004      	movs	r4, r0
  uint32_t tmpoptions = hi2c->XferOptions;
 8006f10:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
{
 8006f12:	000d      	movs	r5, r1
 8006f14:	0016      	movs	r6, r2
  __HAL_LOCK(hi2c);
 8006f16:	2002      	movs	r0, #2
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d022      	beq.n	8006f62 <I2C_Slave_ISR_IT+0x5e>
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	9a01      	ldr	r2, [sp, #4]
 8006f20:	7013      	strb	r3, [r2, #0]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006f22:	331f      	adds	r3, #31
 8006f24:	4219      	tst	r1, r3
 8006f26:	d004      	beq.n	8006f32 <I2C_Slave_ISR_IT+0x2e>
 8006f28:	421e      	tst	r6, r3
 8006f2a:	d002      	beq.n	8006f32 <I2C_Slave_ISR_IT+0x2e>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006f2c:	0020      	movs	r0, r4
 8006f2e:	f7ff fec9 	bl	8006cc4 <I2C_ITSlaveCplt.constprop.0>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006f32:	2310      	movs	r3, #16
 8006f34:	421d      	tst	r5, r3
 8006f36:	d033      	beq.n	8006fa0 <I2C_Slave_ISR_IT+0x9c>
 8006f38:	421e      	tst	r6, r3
 8006f3a:	d031      	beq.n	8006fa0 <I2C_Slave_ISR_IT+0x9c>
    if (hi2c->XferCount == 0U)
 8006f3c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8006f3e:	2a00      	cmp	r2, #0
 8006f40:	d120      	bne.n	8006f84 <I2C_Slave_ISR_IT+0x80>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006f42:	0023      	movs	r3, r4
 8006f44:	3341      	adds	r3, #65	; 0x41
 8006f46:	781a      	ldrb	r2, [r3, #0]
 8006f48:	2a28      	cmp	r2, #40	; 0x28
 8006f4a:	d10b      	bne.n	8006f64 <I2C_Slave_ISR_IT+0x60>
 8006f4c:	2280      	movs	r2, #128	; 0x80
 8006f4e:	0492      	lsls	r2, r2, #18
 8006f50:	4297      	cmp	r7, r2
 8006f52:	d107      	bne.n	8006f64 <I2C_Slave_ISR_IT+0x60>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006f54:	0029      	movs	r1, r5
 8006f56:	0020      	movs	r0, r4
 8006f58:	f7ff fb4a 	bl	80065f0 <I2C_ITListenCplt>
  __HAL_UNLOCK(hi2c);
 8006f5c:	2000      	movs	r0, #0
 8006f5e:	9b01      	ldr	r3, [sp, #4]
 8006f60:	7018      	strb	r0, [r3, #0]
}
 8006f62:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006f64:	2210      	movs	r2, #16
 8006f66:	7819      	ldrb	r1, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f68:	6823      	ldr	r3, [r4, #0]
 8006f6a:	61da      	str	r2, [r3, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006f6c:	2929      	cmp	r1, #41	; 0x29
 8006f6e:	d1f5      	bne.n	8006f5c <I2C_Slave_ISR_IT+0x58>
 8006f70:	492b      	ldr	r1, [pc, #172]	; (8007020 <I2C_Slave_ISR_IT+0x11c>)
 8006f72:	428f      	cmp	r7, r1
 8006f74:	d0f2      	beq.n	8006f5c <I2C_Slave_ISR_IT+0x58>
        I2C_Flush_TXDR(hi2c);
 8006f76:	0020      	movs	r0, r4
 8006f78:	f7fe ff38 	bl	8005dec <I2C_Flush_TXDR>
      I2C_ITSlaveSeqCplt(hi2c);
 8006f7c:	0020      	movs	r0, r4
 8006f7e:	f7ff faa7 	bl	80064d0 <I2C_ITSlaveSeqCplt>
 8006f82:	e7eb      	b.n	8006f5c <I2C_Slave_ISR_IT+0x58>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f84:	6822      	ldr	r2, [r4, #0]
 8006f86:	61d3      	str	r3, [r2, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006f88:	2304      	movs	r3, #4
 8006f8a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006f90:	4b24      	ldr	r3, [pc, #144]	; (8007024 <I2C_Slave_ISR_IT+0x120>)
 8006f92:	421f      	tst	r7, r3
 8006f94:	d1e2      	bne.n	8006f5c <I2C_Slave_ISR_IT+0x58>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006f96:	0020      	movs	r0, r4
 8006f98:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006f9a:	f7ff fb79 	bl	8006690 <I2C_ITError>
 8006f9e:	e7dd      	b.n	8006f5c <I2C_Slave_ISR_IT+0x58>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006fa0:	2304      	movs	r3, #4
 8006fa2:	421d      	tst	r5, r3
 8006fa4:	d019      	beq.n	8006fda <I2C_Slave_ISR_IT+0xd6>
 8006fa6:	421e      	tst	r6, r3
 8006fa8:	d017      	beq.n	8006fda <I2C_Slave_ISR_IT+0xd6>
    if (hi2c->XferCount > 0U)
 8006faa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d00d      	beq.n	8006fcc <I2C_Slave_ISR_IT+0xc8>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006fb0:	6823      	ldr	r3, [r4, #0]
 8006fb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006fb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fb6:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8006fb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fba:	3301      	adds	r3, #1
 8006fbc:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8006fbe:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006fc0:	3b01      	subs	r3, #1
 8006fc2:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006fc4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8006fcc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d1c4      	bne.n	8006f5c <I2C_Slave_ISR_IT+0x58>
 8006fd2:	4b13      	ldr	r3, [pc, #76]	; (8007020 <I2C_Slave_ISR_IT+0x11c>)
 8006fd4:	429f      	cmp	r7, r3
 8006fd6:	d0c1      	beq.n	8006f5c <I2C_Slave_ISR_IT+0x58>
 8006fd8:	e7d0      	b.n	8006f7c <I2C_Slave_ISR_IT+0x78>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006fda:	2308      	movs	r3, #8
 8006fdc:	421d      	tst	r5, r3
 8006fde:	d005      	beq.n	8006fec <I2C_Slave_ISR_IT+0xe8>
 8006fe0:	421e      	tst	r6, r3
 8006fe2:	d003      	beq.n	8006fec <I2C_Slave_ISR_IT+0xe8>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006fe4:	0020      	movs	r0, r4
 8006fe6:	f7ff fab4 	bl	8006552 <I2C_ITAddrCplt.constprop.0>
 8006fea:	e7b7      	b.n	8006f5c <I2C_Slave_ISR_IT+0x58>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006fec:	2302      	movs	r3, #2
 8006fee:	421d      	tst	r5, r3
 8006ff0:	d0b4      	beq.n	8006f5c <I2C_Slave_ISR_IT+0x58>
 8006ff2:	421e      	tst	r6, r3
 8006ff4:	d0b2      	beq.n	8006f5c <I2C_Slave_ISR_IT+0x58>
    if (hi2c->XferCount > 0U)
 8006ff6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d00d      	beq.n	8007018 <I2C_Slave_ISR_IT+0x114>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006ffc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ffe:	6822      	ldr	r2, [r4, #0]
 8007000:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8007002:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007004:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8007006:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8007008:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800700a:	3b01      	subs	r3, #1
 800700c:	b29b      	uxth	r3, r3
 800700e:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8007010:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007012:	3b01      	subs	r3, #1
 8007014:	8523      	strh	r3, [r4, #40]	; 0x28
 8007016:	e7a1      	b.n	8006f5c <I2C_Slave_ISR_IT+0x58>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007018:	4b02      	ldr	r3, [pc, #8]	; (8007024 <I2C_Slave_ISR_IT+0x120>)
 800701a:	421f      	tst	r7, r3
 800701c:	d0ae      	beq.n	8006f7c <I2C_Slave_ISR_IT+0x78>
 800701e:	e79d      	b.n	8006f5c <I2C_Slave_ISR_IT+0x58>
 8007020:	ffff0000 	.word	0xffff0000
 8007024:	feffffff 	.word	0xfeffffff

08007028 <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007028:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 800702a:	b510      	push	{r4, lr}
  if (hi2c->hdmatx != NULL)
 800702c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800702e:	2b00      	cmp	r3, #0
 8007030:	d001      	beq.n	8007036 <I2C_DMAAbort+0xe>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007032:	2200      	movs	r2, #0
 8007034:	635a      	str	r2, [r3, #52]	; 0x34
  if (hi2c->hdmarx != NULL)
 8007036:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8007038:	2b00      	cmp	r3, #0
 800703a:	d001      	beq.n	8007040 <I2C_DMAAbort+0x18>
    hi2c->hdmarx->XferAbortCallback = NULL;
 800703c:	2200      	movs	r2, #0
 800703e:	635a      	str	r2, [r3, #52]	; 0x34
  I2C_TreatErrorCallback(hi2c);
 8007040:	f7ff fb10 	bl	8006664 <I2C_TreatErrorCallback>
}
 8007044:	bd10      	pop	{r4, pc}

08007046 <HAL_I2C_GetState>:
  return hi2c->State;
 8007046:	3041      	adds	r0, #65	; 0x41
 8007048:	7800      	ldrb	r0, [r0, #0]
 800704a:	b2c0      	uxtb	r0, r0
}
 800704c:	4770      	bx	lr
	...

08007050 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007050:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007052:	0004      	movs	r4, r0
 8007054:	3441      	adds	r4, #65	; 0x41
 8007056:	7822      	ldrb	r2, [r4, #0]
{
 8007058:	0003      	movs	r3, r0
 800705a:	000f      	movs	r7, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800705c:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800705e:	b2d6      	uxtb	r6, r2
 8007060:	2a20      	cmp	r2, #32
 8007062:	d118      	bne.n	8007096 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 8007064:	001d      	movs	r5, r3
 8007066:	3540      	adds	r5, #64	; 0x40
 8007068:	782a      	ldrb	r2, [r5, #0]
 800706a:	2a01      	cmp	r2, #1
 800706c:	d013      	beq.n	8007096 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    hi2c->State = HAL_I2C_STATE_BUSY;
 800706e:	2224      	movs	r2, #36	; 0x24
 8007070:	7022      	strb	r2, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	3a23      	subs	r2, #35	; 0x23
 8007076:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007078:	4807      	ldr	r0, [pc, #28]	; (8007098 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 800707a:	4391      	bics	r1, r2
 800707c:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800707e:	6819      	ldr	r1, [r3, #0]
 8007080:	4001      	ands	r1, r0
    __HAL_UNLOCK(hi2c);
 8007082:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007084:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8007086:	6819      	ldr	r1, [r3, #0]
 8007088:	4339      	orrs	r1, r7
 800708a:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 800708c:	6819      	ldr	r1, [r3, #0]
 800708e:	430a      	orrs	r2, r1
 8007090:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8007092:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8007094:	7028      	strb	r0, [r5, #0]
  }
}
 8007096:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007098:	ffffefff 	.word	0xffffefff

0800709c <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800709c:	0002      	movs	r2, r0
{
 800709e:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80070a0:	3241      	adds	r2, #65	; 0x41
 80070a2:	7814      	ldrb	r4, [r2, #0]
{
 80070a4:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80070a6:	b2e5      	uxtb	r5, r4

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80070a8:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80070aa:	2c20      	cmp	r4, #32
 80070ac:	d117      	bne.n	80070de <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 80070ae:	001c      	movs	r4, r3
 80070b0:	3440      	adds	r4, #64	; 0x40
 80070b2:	7826      	ldrb	r6, [r4, #0]
 80070b4:	2e01      	cmp	r6, #1
 80070b6:	d012      	beq.n	80070de <HAL_I2CEx_ConfigDigitalFilter+0x42>
    hi2c->State = HAL_I2C_STATE_BUSY;
 80070b8:	3022      	adds	r0, #34	; 0x22
 80070ba:	7010      	strb	r0, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	3823      	subs	r0, #35	; 0x23
 80070c0:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 80070c2:	4f07      	ldr	r7, [pc, #28]	; (80070e0 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 80070c4:	4386      	bics	r6, r0
 80070c6:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 80070c8:	681e      	ldr	r6, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 80070ca:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 80070cc:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 80070ce:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 80070d0:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80070d2:	6819      	ldr	r1, [r3, #0]
 80070d4:	4308      	orrs	r0, r1
 80070d6:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80070d8:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80070da:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80070dc:	7020      	strb	r0, [r4, #0]
  }
}
 80070de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070e0:	fffff0ff 	.word	0xfffff0ff

080070e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80070e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070e6:	0004      	movs	r4, r0
 80070e8:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80070ea:	2800      	cmp	r0, #0
 80070ec:	d045      	beq.n	800717a <HAL_RCC_OscConfig+0x96>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070ee:	6803      	ldr	r3, [r0, #0]
 80070f0:	07db      	lsls	r3, r3, #31
 80070f2:	d42f      	bmi.n	8007154 <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070f4:	6823      	ldr	r3, [r4, #0]
 80070f6:	079b      	lsls	r3, r3, #30
 80070f8:	d500      	bpl.n	80070fc <HAL_RCC_OscConfig+0x18>
 80070fa:	e081      	b.n	8007200 <HAL_RCC_OscConfig+0x11c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80070fc:	6823      	ldr	r3, [r4, #0]
 80070fe:	071b      	lsls	r3, r3, #28
 8007100:	d500      	bpl.n	8007104 <HAL_RCC_OscConfig+0x20>
 8007102:	e0bc      	b.n	800727e <HAL_RCC_OscConfig+0x19a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007104:	6823      	ldr	r3, [r4, #0]
 8007106:	075b      	lsls	r3, r3, #29
 8007108:	d500      	bpl.n	800710c <HAL_RCC_OscConfig+0x28>
 800710a:	e0df      	b.n	80072cc <HAL_RCC_OscConfig+0x1e8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800710c:	6823      	ldr	r3, [r4, #0]
 800710e:	06db      	lsls	r3, r3, #27
 8007110:	d51a      	bpl.n	8007148 <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8007112:	6962      	ldr	r2, [r4, #20]
 8007114:	2304      	movs	r3, #4
 8007116:	4db4      	ldr	r5, [pc, #720]	; (80073e8 <HAL_RCC_OscConfig+0x304>)
 8007118:	2a01      	cmp	r2, #1
 800711a:	d000      	beq.n	800711e <HAL_RCC_OscConfig+0x3a>
 800711c:	e148      	b.n	80073b0 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800711e:	6b69      	ldr	r1, [r5, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8007120:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8007122:	430b      	orrs	r3, r1
 8007124:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8007126:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8007128:	431a      	orrs	r2, r3
 800712a:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 800712c:	f7fe f8b6 	bl	800529c <HAL_GetTick>
 8007130:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8007132:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8007134:	423b      	tst	r3, r7
 8007136:	d100      	bne.n	800713a <HAL_RCC_OscConfig+0x56>
 8007138:	e133      	b.n	80073a2 <HAL_RCC_OscConfig+0x2be>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800713a:	21f8      	movs	r1, #248	; 0xf8
 800713c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800713e:	69a3      	ldr	r3, [r4, #24]
 8007140:	438a      	bics	r2, r1
 8007142:	00db      	lsls	r3, r3, #3
 8007144:	4313      	orrs	r3, r2
 8007146:	636b      	str	r3, [r5, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007148:	6a23      	ldr	r3, [r4, #32]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d000      	beq.n	8007150 <HAL_RCC_OscConfig+0x6c>
 800714e:	e157      	b.n	8007400 <HAL_RCC_OscConfig+0x31c>
        }
      }
    }
  }

  return HAL_OK;
 8007150:	2000      	movs	r0, #0
 8007152:	e02a      	b.n	80071aa <HAL_RCC_OscConfig+0xc6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8007154:	220c      	movs	r2, #12
 8007156:	4da4      	ldr	r5, [pc, #656]	; (80073e8 <HAL_RCC_OscConfig+0x304>)
 8007158:	686b      	ldr	r3, [r5, #4]
 800715a:	4013      	ands	r3, r2
 800715c:	2b04      	cmp	r3, #4
 800715e:	d006      	beq.n	800716e <HAL_RCC_OscConfig+0x8a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007160:	686b      	ldr	r3, [r5, #4]
 8007162:	4013      	ands	r3, r2
 8007164:	2b08      	cmp	r3, #8
 8007166:	d10a      	bne.n	800717e <HAL_RCC_OscConfig+0x9a>
 8007168:	686b      	ldr	r3, [r5, #4]
 800716a:	03db      	lsls	r3, r3, #15
 800716c:	d507      	bpl.n	800717e <HAL_RCC_OscConfig+0x9a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800716e:	682b      	ldr	r3, [r5, #0]
 8007170:	039b      	lsls	r3, r3, #14
 8007172:	d5bf      	bpl.n	80070f4 <HAL_RCC_OscConfig+0x10>
 8007174:	6863      	ldr	r3, [r4, #4]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d1bc      	bne.n	80070f4 <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 800717a:	2001      	movs	r0, #1
 800717c:	e015      	b.n	80071aa <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800717e:	6863      	ldr	r3, [r4, #4]
 8007180:	2b01      	cmp	r3, #1
 8007182:	d114      	bne.n	80071ae <HAL_RCC_OscConfig+0xca>
 8007184:	2380      	movs	r3, #128	; 0x80
 8007186:	682a      	ldr	r2, [r5, #0]
 8007188:	025b      	lsls	r3, r3, #9
 800718a:	4313      	orrs	r3, r2
 800718c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800718e:	f7fe f885 	bl	800529c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007192:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8007194:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007196:	02bf      	lsls	r7, r7, #10
 8007198:	682b      	ldr	r3, [r5, #0]
 800719a:	423b      	tst	r3, r7
 800719c:	d1aa      	bne.n	80070f4 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800719e:	f7fe f87d 	bl	800529c <HAL_GetTick>
 80071a2:	1b80      	subs	r0, r0, r6
 80071a4:	2864      	cmp	r0, #100	; 0x64
 80071a6:	d9f7      	bls.n	8007198 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
 80071a8:	2003      	movs	r0, #3
}
 80071aa:	b005      	add	sp, #20
 80071ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d116      	bne.n	80071e0 <HAL_RCC_OscConfig+0xfc>
 80071b2:	682b      	ldr	r3, [r5, #0]
 80071b4:	4a8d      	ldr	r2, [pc, #564]	; (80073ec <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071b6:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80071b8:	4013      	ands	r3, r2
 80071ba:	602b      	str	r3, [r5, #0]
 80071bc:	682b      	ldr	r3, [r5, #0]
 80071be:	4a8c      	ldr	r2, [pc, #560]	; (80073f0 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071c0:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80071c2:	4013      	ands	r3, r2
 80071c4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80071c6:	f7fe f869 	bl	800529c <HAL_GetTick>
 80071ca:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071cc:	682b      	ldr	r3, [r5, #0]
 80071ce:	423b      	tst	r3, r7
 80071d0:	d100      	bne.n	80071d4 <HAL_RCC_OscConfig+0xf0>
 80071d2:	e78f      	b.n	80070f4 <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80071d4:	f7fe f862 	bl	800529c <HAL_GetTick>
 80071d8:	1b80      	subs	r0, r0, r6
 80071da:	2864      	cmp	r0, #100	; 0x64
 80071dc:	d9f6      	bls.n	80071cc <HAL_RCC_OscConfig+0xe8>
 80071de:	e7e3      	b.n	80071a8 <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80071e0:	2b05      	cmp	r3, #5
 80071e2:	d105      	bne.n	80071f0 <HAL_RCC_OscConfig+0x10c>
 80071e4:	2380      	movs	r3, #128	; 0x80
 80071e6:	682a      	ldr	r2, [r5, #0]
 80071e8:	02db      	lsls	r3, r3, #11
 80071ea:	4313      	orrs	r3, r2
 80071ec:	602b      	str	r3, [r5, #0]
 80071ee:	e7c9      	b.n	8007184 <HAL_RCC_OscConfig+0xa0>
 80071f0:	682b      	ldr	r3, [r5, #0]
 80071f2:	4a7e      	ldr	r2, [pc, #504]	; (80073ec <HAL_RCC_OscConfig+0x308>)
 80071f4:	4013      	ands	r3, r2
 80071f6:	602b      	str	r3, [r5, #0]
 80071f8:	682b      	ldr	r3, [r5, #0]
 80071fa:	4a7d      	ldr	r2, [pc, #500]	; (80073f0 <HAL_RCC_OscConfig+0x30c>)
 80071fc:	4013      	ands	r3, r2
 80071fe:	e7c5      	b.n	800718c <HAL_RCC_OscConfig+0xa8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8007200:	220c      	movs	r2, #12
 8007202:	4d79      	ldr	r5, [pc, #484]	; (80073e8 <HAL_RCC_OscConfig+0x304>)
 8007204:	686b      	ldr	r3, [r5, #4]
 8007206:	4213      	tst	r3, r2
 8007208:	d006      	beq.n	8007218 <HAL_RCC_OscConfig+0x134>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800720a:	686b      	ldr	r3, [r5, #4]
 800720c:	4013      	ands	r3, r2
 800720e:	2b08      	cmp	r3, #8
 8007210:	d110      	bne.n	8007234 <HAL_RCC_OscConfig+0x150>
 8007212:	686b      	ldr	r3, [r5, #4]
 8007214:	03db      	lsls	r3, r3, #15
 8007216:	d40d      	bmi.n	8007234 <HAL_RCC_OscConfig+0x150>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007218:	682b      	ldr	r3, [r5, #0]
 800721a:	079b      	lsls	r3, r3, #30
 800721c:	d502      	bpl.n	8007224 <HAL_RCC_OscConfig+0x140>
 800721e:	68e3      	ldr	r3, [r4, #12]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d1aa      	bne.n	800717a <HAL_RCC_OscConfig+0x96>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007224:	21f8      	movs	r1, #248	; 0xf8
 8007226:	682a      	ldr	r2, [r5, #0]
 8007228:	6923      	ldr	r3, [r4, #16]
 800722a:	438a      	bics	r2, r1
 800722c:	00db      	lsls	r3, r3, #3
 800722e:	4313      	orrs	r3, r2
 8007230:	602b      	str	r3, [r5, #0]
 8007232:	e763      	b.n	80070fc <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007234:	68e2      	ldr	r2, [r4, #12]
 8007236:	2301      	movs	r3, #1
 8007238:	2a00      	cmp	r2, #0
 800723a:	d00f      	beq.n	800725c <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_ENABLE();
 800723c:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800723e:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8007240:	4313      	orrs	r3, r2
 8007242:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007244:	f7fe f82a 	bl	800529c <HAL_GetTick>
 8007248:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800724a:	682b      	ldr	r3, [r5, #0]
 800724c:	423b      	tst	r3, r7
 800724e:	d1e9      	bne.n	8007224 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007250:	f7fe f824 	bl	800529c <HAL_GetTick>
 8007254:	1b80      	subs	r0, r0, r6
 8007256:	2802      	cmp	r0, #2
 8007258:	d9f7      	bls.n	800724a <HAL_RCC_OscConfig+0x166>
 800725a:	e7a5      	b.n	80071a8 <HAL_RCC_OscConfig+0xc4>
        __HAL_RCC_HSI_DISABLE();
 800725c:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800725e:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8007260:	439a      	bics	r2, r3
 8007262:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8007264:	f7fe f81a 	bl	800529c <HAL_GetTick>
 8007268:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800726a:	682b      	ldr	r3, [r5, #0]
 800726c:	423b      	tst	r3, r7
 800726e:	d100      	bne.n	8007272 <HAL_RCC_OscConfig+0x18e>
 8007270:	e744      	b.n	80070fc <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007272:	f7fe f813 	bl	800529c <HAL_GetTick>
 8007276:	1b80      	subs	r0, r0, r6
 8007278:	2802      	cmp	r0, #2
 800727a:	d9f6      	bls.n	800726a <HAL_RCC_OscConfig+0x186>
 800727c:	e794      	b.n	80071a8 <HAL_RCC_OscConfig+0xc4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800727e:	69e2      	ldr	r2, [r4, #28]
 8007280:	2301      	movs	r3, #1
 8007282:	4d59      	ldr	r5, [pc, #356]	; (80073e8 <HAL_RCC_OscConfig+0x304>)
 8007284:	2a00      	cmp	r2, #0
 8007286:	d010      	beq.n	80072aa <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_LSI_ENABLE();
 8007288:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800728a:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 800728c:	4313      	orrs	r3, r2
 800728e:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8007290:	f7fe f804 	bl	800529c <HAL_GetTick>
 8007294:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007296:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007298:	423b      	tst	r3, r7
 800729a:	d000      	beq.n	800729e <HAL_RCC_OscConfig+0x1ba>
 800729c:	e732      	b.n	8007104 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800729e:	f7fd fffd 	bl	800529c <HAL_GetTick>
 80072a2:	1b80      	subs	r0, r0, r6
 80072a4:	2802      	cmp	r0, #2
 80072a6:	d9f6      	bls.n	8007296 <HAL_RCC_OscConfig+0x1b2>
 80072a8:	e77e      	b.n	80071a8 <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_LSI_DISABLE();
 80072aa:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072ac:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 80072ae:	439a      	bics	r2, r3
 80072b0:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80072b2:	f7fd fff3 	bl	800529c <HAL_GetTick>
 80072b6:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072b8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80072ba:	423b      	tst	r3, r7
 80072bc:	d100      	bne.n	80072c0 <HAL_RCC_OscConfig+0x1dc>
 80072be:	e721      	b.n	8007104 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80072c0:	f7fd ffec 	bl	800529c <HAL_GetTick>
 80072c4:	1b80      	subs	r0, r0, r6
 80072c6:	2802      	cmp	r0, #2
 80072c8:	d9f6      	bls.n	80072b8 <HAL_RCC_OscConfig+0x1d4>
 80072ca:	e76d      	b.n	80071a8 <HAL_RCC_OscConfig+0xc4>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80072cc:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80072ce:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80072d0:	4d45      	ldr	r5, [pc, #276]	; (80073e8 <HAL_RCC_OscConfig+0x304>)
 80072d2:	0552      	lsls	r2, r2, #21
 80072d4:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 80072d6:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80072d8:	4213      	tst	r3, r2
 80072da:	d108      	bne.n	80072ee <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 80072dc:	69eb      	ldr	r3, [r5, #28]
 80072de:	4313      	orrs	r3, r2
 80072e0:	61eb      	str	r3, [r5, #28]
 80072e2:	69eb      	ldr	r3, [r5, #28]
 80072e4:	4013      	ands	r3, r2
 80072e6:	9303      	str	r3, [sp, #12]
 80072e8:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80072ea:	2301      	movs	r3, #1
 80072ec:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072ee:	2780      	movs	r7, #128	; 0x80
 80072f0:	4e40      	ldr	r6, [pc, #256]	; (80073f4 <HAL_RCC_OscConfig+0x310>)
 80072f2:	007f      	lsls	r7, r7, #1
 80072f4:	6833      	ldr	r3, [r6, #0]
 80072f6:	423b      	tst	r3, r7
 80072f8:	d015      	beq.n	8007326 <HAL_RCC_OscConfig+0x242>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072fa:	68a3      	ldr	r3, [r4, #8]
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d122      	bne.n	8007346 <HAL_RCC_OscConfig+0x262>
 8007300:	6a2a      	ldr	r2, [r5, #32]
 8007302:	4313      	orrs	r3, r2
 8007304:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8007306:	f7fd ffc9 	bl	800529c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800730a:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 800730c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800730e:	6a2b      	ldr	r3, [r5, #32]
 8007310:	423b      	tst	r3, r7
 8007312:	d03f      	beq.n	8007394 <HAL_RCC_OscConfig+0x2b0>
    if(pwrclkchanged == SET)
 8007314:	9b00      	ldr	r3, [sp, #0]
 8007316:	2b01      	cmp	r3, #1
 8007318:	d000      	beq.n	800731c <HAL_RCC_OscConfig+0x238>
 800731a:	e6f7      	b.n	800710c <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 800731c:	69eb      	ldr	r3, [r5, #28]
 800731e:	4a36      	ldr	r2, [pc, #216]	; (80073f8 <HAL_RCC_OscConfig+0x314>)
 8007320:	4013      	ands	r3, r2
 8007322:	61eb      	str	r3, [r5, #28]
 8007324:	e6f2      	b.n	800710c <HAL_RCC_OscConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007326:	6833      	ldr	r3, [r6, #0]
 8007328:	433b      	orrs	r3, r7
 800732a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800732c:	f7fd ffb6 	bl	800529c <HAL_GetTick>
 8007330:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007332:	6833      	ldr	r3, [r6, #0]
 8007334:	423b      	tst	r3, r7
 8007336:	d1e0      	bne.n	80072fa <HAL_RCC_OscConfig+0x216>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007338:	f7fd ffb0 	bl	800529c <HAL_GetTick>
 800733c:	9b01      	ldr	r3, [sp, #4]
 800733e:	1ac0      	subs	r0, r0, r3
 8007340:	2864      	cmp	r0, #100	; 0x64
 8007342:	d9f6      	bls.n	8007332 <HAL_RCC_OscConfig+0x24e>
 8007344:	e730      	b.n	80071a8 <HAL_RCC_OscConfig+0xc4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007346:	2201      	movs	r2, #1
 8007348:	2b00      	cmp	r3, #0
 800734a:	d114      	bne.n	8007376 <HAL_RCC_OscConfig+0x292>
 800734c:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800734e:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007350:	4393      	bics	r3, r2
 8007352:	622b      	str	r3, [r5, #32]
 8007354:	6a2b      	ldr	r3, [r5, #32]
 8007356:	3203      	adds	r2, #3
 8007358:	4393      	bics	r3, r2
 800735a:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 800735c:	f7fd ff9e 	bl	800529c <HAL_GetTick>
 8007360:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007362:	6a2b      	ldr	r3, [r5, #32]
 8007364:	423b      	tst	r3, r7
 8007366:	d0d5      	beq.n	8007314 <HAL_RCC_OscConfig+0x230>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007368:	f7fd ff98 	bl	800529c <HAL_GetTick>
 800736c:	4b23      	ldr	r3, [pc, #140]	; (80073fc <HAL_RCC_OscConfig+0x318>)
 800736e:	1b80      	subs	r0, r0, r6
 8007370:	4298      	cmp	r0, r3
 8007372:	d9f6      	bls.n	8007362 <HAL_RCC_OscConfig+0x27e>
 8007374:	e718      	b.n	80071a8 <HAL_RCC_OscConfig+0xc4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007376:	2b05      	cmp	r3, #5
 8007378:	d105      	bne.n	8007386 <HAL_RCC_OscConfig+0x2a2>
 800737a:	6a29      	ldr	r1, [r5, #32]
 800737c:	3b01      	subs	r3, #1
 800737e:	430b      	orrs	r3, r1
 8007380:	622b      	str	r3, [r5, #32]
 8007382:	6a2b      	ldr	r3, [r5, #32]
 8007384:	e7bd      	b.n	8007302 <HAL_RCC_OscConfig+0x21e>
 8007386:	6a2b      	ldr	r3, [r5, #32]
 8007388:	4393      	bics	r3, r2
 800738a:	2204      	movs	r2, #4
 800738c:	622b      	str	r3, [r5, #32]
 800738e:	6a2b      	ldr	r3, [r5, #32]
 8007390:	4393      	bics	r3, r2
 8007392:	e7b7      	b.n	8007304 <HAL_RCC_OscConfig+0x220>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007394:	f7fd ff82 	bl	800529c <HAL_GetTick>
 8007398:	4b18      	ldr	r3, [pc, #96]	; (80073fc <HAL_RCC_OscConfig+0x318>)
 800739a:	1b80      	subs	r0, r0, r6
 800739c:	4298      	cmp	r0, r3
 800739e:	d9b6      	bls.n	800730e <HAL_RCC_OscConfig+0x22a>
 80073a0:	e702      	b.n	80071a8 <HAL_RCC_OscConfig+0xc4>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80073a2:	f7fd ff7b 	bl	800529c <HAL_GetTick>
 80073a6:	1b80      	subs	r0, r0, r6
 80073a8:	2802      	cmp	r0, #2
 80073aa:	d800      	bhi.n	80073ae <HAL_RCC_OscConfig+0x2ca>
 80073ac:	e6c1      	b.n	8007132 <HAL_RCC_OscConfig+0x4e>
 80073ae:	e6fb      	b.n	80071a8 <HAL_RCC_OscConfig+0xc4>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80073b0:	3205      	adds	r2, #5
 80073b2:	d103      	bne.n	80073bc <HAL_RCC_OscConfig+0x2d8>
      __HAL_RCC_HSI14ADC_ENABLE();
 80073b4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80073b6:	439a      	bics	r2, r3
 80073b8:	636a      	str	r2, [r5, #52]	; 0x34
 80073ba:	e6be      	b.n	800713a <HAL_RCC_OscConfig+0x56>
      __HAL_RCC_HSI14ADC_DISABLE();
 80073bc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80073be:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80073c0:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 80073c2:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 80073c4:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80073c6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80073c8:	4393      	bics	r3, r2
 80073ca:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80073cc:	f7fd ff66 	bl	800529c <HAL_GetTick>
 80073d0:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80073d2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80073d4:	423b      	tst	r3, r7
 80073d6:	d100      	bne.n	80073da <HAL_RCC_OscConfig+0x2f6>
 80073d8:	e6b6      	b.n	8007148 <HAL_RCC_OscConfig+0x64>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80073da:	f7fd ff5f 	bl	800529c <HAL_GetTick>
 80073de:	1b80      	subs	r0, r0, r6
 80073e0:	2802      	cmp	r0, #2
 80073e2:	d9f6      	bls.n	80073d2 <HAL_RCC_OscConfig+0x2ee>
 80073e4:	e6e0      	b.n	80071a8 <HAL_RCC_OscConfig+0xc4>
 80073e6:	46c0      	nop			; (mov r8, r8)
 80073e8:	40021000 	.word	0x40021000
 80073ec:	fffeffff 	.word	0xfffeffff
 80073f0:	fffbffff 	.word	0xfffbffff
 80073f4:	40007000 	.word	0x40007000
 80073f8:	efffffff 	.word	0xefffffff
 80073fc:	00001388 	.word	0x00001388
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007400:	210c      	movs	r1, #12
 8007402:	4d34      	ldr	r5, [pc, #208]	; (80074d4 <HAL_RCC_OscConfig+0x3f0>)
 8007404:	686a      	ldr	r2, [r5, #4]
 8007406:	400a      	ands	r2, r1
 8007408:	2a08      	cmp	r2, #8
 800740a:	d047      	beq.n	800749c <HAL_RCC_OscConfig+0x3b8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800740c:	4a32      	ldr	r2, [pc, #200]	; (80074d8 <HAL_RCC_OscConfig+0x3f4>)
 800740e:	2b02      	cmp	r3, #2
 8007410:	d132      	bne.n	8007478 <HAL_RCC_OscConfig+0x394>
        __HAL_RCC_PLL_DISABLE();
 8007412:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007414:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8007416:	4013      	ands	r3, r2
 8007418:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800741a:	f7fd ff3f 	bl	800529c <HAL_GetTick>
 800741e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007420:	04bf      	lsls	r7, r7, #18
 8007422:	682b      	ldr	r3, [r5, #0]
 8007424:	423b      	tst	r3, r7
 8007426:	d121      	bne.n	800746c <HAL_RCC_OscConfig+0x388>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007428:	220f      	movs	r2, #15
 800742a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800742c:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800742e:	4393      	bics	r3, r2
 8007430:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007432:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007434:	4313      	orrs	r3, r2
 8007436:	62eb      	str	r3, [r5, #44]	; 0x2c
 8007438:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800743a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800743c:	686a      	ldr	r2, [r5, #4]
 800743e:	430b      	orrs	r3, r1
 8007440:	4926      	ldr	r1, [pc, #152]	; (80074dc <HAL_RCC_OscConfig+0x3f8>)
 8007442:	400a      	ands	r2, r1
 8007444:	4313      	orrs	r3, r2
 8007446:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8007448:	2380      	movs	r3, #128	; 0x80
 800744a:	682a      	ldr	r2, [r5, #0]
 800744c:	045b      	lsls	r3, r3, #17
 800744e:	4313      	orrs	r3, r2
 8007450:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007452:	f7fd ff23 	bl	800529c <HAL_GetTick>
 8007456:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007458:	682b      	ldr	r3, [r5, #0]
 800745a:	4233      	tst	r3, r6
 800745c:	d000      	beq.n	8007460 <HAL_RCC_OscConfig+0x37c>
 800745e:	e677      	b.n	8007150 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007460:	f7fd ff1c 	bl	800529c <HAL_GetTick>
 8007464:	1b00      	subs	r0, r0, r4
 8007466:	2802      	cmp	r0, #2
 8007468:	d9f6      	bls.n	8007458 <HAL_RCC_OscConfig+0x374>
 800746a:	e69d      	b.n	80071a8 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800746c:	f7fd ff16 	bl	800529c <HAL_GetTick>
 8007470:	1b80      	subs	r0, r0, r6
 8007472:	2802      	cmp	r0, #2
 8007474:	d9d5      	bls.n	8007422 <HAL_RCC_OscConfig+0x33e>
 8007476:	e697      	b.n	80071a8 <HAL_RCC_OscConfig+0xc4>
        __HAL_RCC_PLL_DISABLE();
 8007478:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800747a:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800747c:	4013      	ands	r3, r2
 800747e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007480:	f7fd ff0c 	bl	800529c <HAL_GetTick>
 8007484:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007486:	04b6      	lsls	r6, r6, #18
 8007488:	682b      	ldr	r3, [r5, #0]
 800748a:	4233      	tst	r3, r6
 800748c:	d100      	bne.n	8007490 <HAL_RCC_OscConfig+0x3ac>
 800748e:	e65f      	b.n	8007150 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007490:	f7fd ff04 	bl	800529c <HAL_GetTick>
 8007494:	1b00      	subs	r0, r0, r4
 8007496:	2802      	cmp	r0, #2
 8007498:	d9f6      	bls.n	8007488 <HAL_RCC_OscConfig+0x3a4>
 800749a:	e685      	b.n	80071a8 <HAL_RCC_OscConfig+0xc4>
        return HAL_ERROR;
 800749c:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d100      	bne.n	80074a4 <HAL_RCC_OscConfig+0x3c0>
 80074a2:	e682      	b.n	80071aa <HAL_RCC_OscConfig+0xc6>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80074a4:	2180      	movs	r1, #128	; 0x80
        pll_config  = RCC->CFGR;
 80074a6:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80074a8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80074aa:	0249      	lsls	r1, r1, #9
        pll_config2 = RCC->CFGR2;
 80074ac:	6aea      	ldr	r2, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80074ae:	4019      	ands	r1, r3
 80074b0:	4281      	cmp	r1, r0
 80074b2:	d000      	beq.n	80074b6 <HAL_RCC_OscConfig+0x3d2>
 80074b4:	e661      	b.n	800717a <HAL_RCC_OscConfig+0x96>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80074b6:	210f      	movs	r1, #15
 80074b8:	400a      	ands	r2, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80074ba:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80074bc:	428a      	cmp	r2, r1
 80074be:	d000      	beq.n	80074c2 <HAL_RCC_OscConfig+0x3de>
 80074c0:	e65b      	b.n	800717a <HAL_RCC_OscConfig+0x96>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80074c2:	22f0      	movs	r2, #240	; 0xf0
 80074c4:	0392      	lsls	r2, r2, #14
 80074c6:	4013      	ands	r3, r2
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80074c8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d100      	bne.n	80074d0 <HAL_RCC_OscConfig+0x3ec>
 80074ce:	e63f      	b.n	8007150 <HAL_RCC_OscConfig+0x6c>
 80074d0:	e653      	b.n	800717a <HAL_RCC_OscConfig+0x96>
 80074d2:	46c0      	nop			; (mov r8, r8)
 80074d4:	40021000 	.word	0x40021000
 80074d8:	feffffff 	.word	0xfeffffff
 80074dc:	ffc2ffff 	.word	0xffc2ffff

080074e0 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80074e0:	220c      	movs	r2, #12
{
 80074e2:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 80074e4:	4d0c      	ldr	r5, [pc, #48]	; (8007518 <HAL_RCC_GetSysClockFreq+0x38>)
 80074e6:	686b      	ldr	r3, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80074e8:	401a      	ands	r2, r3
 80074ea:	2a08      	cmp	r2, #8
 80074ec:	d111      	bne.n	8007512 <HAL_RCC_GetSysClockFreq+0x32>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80074ee:	200f      	movs	r0, #15
 80074f0:	490a      	ldr	r1, [pc, #40]	; (800751c <HAL_RCC_GetSysClockFreq+0x3c>)
 80074f2:	0c9a      	lsrs	r2, r3, #18
 80074f4:	4002      	ands	r2, r0
 80074f6:	5c8c      	ldrb	r4, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80074f8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80074fa:	03db      	lsls	r3, r3, #15
 80074fc:	d507      	bpl.n	800750e <HAL_RCC_GetSysClockFreq+0x2e>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80074fe:	4908      	ldr	r1, [pc, #32]	; (8007520 <HAL_RCC_GetSysClockFreq+0x40>)
 8007500:	4002      	ands	r2, r0
 8007502:	5c89      	ldrb	r1, [r1, r2]
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007504:	4807      	ldr	r0, [pc, #28]	; (8007524 <HAL_RCC_GetSysClockFreq+0x44>)
 8007506:	f7f8 fe1b 	bl	8000140 <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800750a:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800750c:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800750e:	4806      	ldr	r0, [pc, #24]	; (8007528 <HAL_RCC_GetSysClockFreq+0x48>)
 8007510:	e7fb      	b.n	800750a <HAL_RCC_GetSysClockFreq+0x2a>
      sysclockfreq = HSE_VALUE;
 8007512:	4804      	ldr	r0, [pc, #16]	; (8007524 <HAL_RCC_GetSysClockFreq+0x44>)
  return sysclockfreq;
 8007514:	e7fa      	b.n	800750c <HAL_RCC_GetSysClockFreq+0x2c>
 8007516:	46c0      	nop			; (mov r8, r8)
 8007518:	40021000 	.word	0x40021000
 800751c:	0800d62e 	.word	0x0800d62e
 8007520:	0800d63e 	.word	0x0800d63e
 8007524:	007a1200 	.word	0x007a1200
 8007528:	003d0900 	.word	0x003d0900

0800752c <HAL_RCC_ClockConfig>:
{
 800752c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800752e:	0004      	movs	r4, r0
 8007530:	000e      	movs	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8007532:	2800      	cmp	r0, #0
 8007534:	d101      	bne.n	800753a <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8007536:	2001      	movs	r0, #1
}
 8007538:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800753a:	2201      	movs	r2, #1
 800753c:	4d37      	ldr	r5, [pc, #220]	; (800761c <HAL_RCC_ClockConfig+0xf0>)
 800753e:	682b      	ldr	r3, [r5, #0]
 8007540:	4013      	ands	r3, r2
 8007542:	428b      	cmp	r3, r1
 8007544:	d31c      	bcc.n	8007580 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007546:	6822      	ldr	r2, [r4, #0]
 8007548:	0793      	lsls	r3, r2, #30
 800754a:	d422      	bmi.n	8007592 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800754c:	07d2      	lsls	r2, r2, #31
 800754e:	d42f      	bmi.n	80075b0 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007550:	2301      	movs	r3, #1
 8007552:	682a      	ldr	r2, [r5, #0]
 8007554:	401a      	ands	r2, r3
 8007556:	42b2      	cmp	r2, r6
 8007558:	d851      	bhi.n	80075fe <HAL_RCC_ClockConfig+0xd2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800755a:	6823      	ldr	r3, [r4, #0]
 800755c:	4d30      	ldr	r5, [pc, #192]	; (8007620 <HAL_RCC_ClockConfig+0xf4>)
 800755e:	075b      	lsls	r3, r3, #29
 8007560:	d454      	bmi.n	800760c <HAL_RCC_ClockConfig+0xe0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8007562:	f7ff ffbd 	bl	80074e0 <HAL_RCC_GetSysClockFreq>
 8007566:	686b      	ldr	r3, [r5, #4]
 8007568:	4a2e      	ldr	r2, [pc, #184]	; (8007624 <HAL_RCC_ClockConfig+0xf8>)
 800756a:	061b      	lsls	r3, r3, #24
 800756c:	0f1b      	lsrs	r3, r3, #28
 800756e:	5cd3      	ldrb	r3, [r2, r3]
 8007570:	492d      	ldr	r1, [pc, #180]	; (8007628 <HAL_RCC_ClockConfig+0xfc>)
 8007572:	40d8      	lsrs	r0, r3
 8007574:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8007576:	2003      	movs	r0, #3
 8007578:	f7fd fe50 	bl	800521c <HAL_InitTick>
  return HAL_OK;
 800757c:	2000      	movs	r0, #0
 800757e:	e7db      	b.n	8007538 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007580:	682b      	ldr	r3, [r5, #0]
 8007582:	4393      	bics	r3, r2
 8007584:	430b      	orrs	r3, r1
 8007586:	602b      	str	r3, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007588:	682b      	ldr	r3, [r5, #0]
 800758a:	4013      	ands	r3, r2
 800758c:	428b      	cmp	r3, r1
 800758e:	d1d2      	bne.n	8007536 <HAL_RCC_ClockConfig+0xa>
 8007590:	e7d9      	b.n	8007546 <HAL_RCC_ClockConfig+0x1a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007592:	4923      	ldr	r1, [pc, #140]	; (8007620 <HAL_RCC_ClockConfig+0xf4>)
 8007594:	0753      	lsls	r3, r2, #29
 8007596:	d504      	bpl.n	80075a2 <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8007598:	23e0      	movs	r3, #224	; 0xe0
 800759a:	6848      	ldr	r0, [r1, #4]
 800759c:	00db      	lsls	r3, r3, #3
 800759e:	4303      	orrs	r3, r0
 80075a0:	604b      	str	r3, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075a2:	20f0      	movs	r0, #240	; 0xf0
 80075a4:	684b      	ldr	r3, [r1, #4]
 80075a6:	4383      	bics	r3, r0
 80075a8:	68a0      	ldr	r0, [r4, #8]
 80075aa:	4303      	orrs	r3, r0
 80075ac:	604b      	str	r3, [r1, #4]
 80075ae:	e7cd      	b.n	800754c <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80075b0:	4f1b      	ldr	r7, [pc, #108]	; (8007620 <HAL_RCC_ClockConfig+0xf4>)
 80075b2:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075b4:	683b      	ldr	r3, [r7, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80075b6:	2a01      	cmp	r2, #1
 80075b8:	d119      	bne.n	80075ee <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075ba:	039b      	lsls	r3, r3, #14
 80075bc:	d5bb      	bpl.n	8007536 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80075be:	2103      	movs	r1, #3
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	438b      	bics	r3, r1
 80075c4:	4313      	orrs	r3, r2
 80075c6:	607b      	str	r3, [r7, #4]
    tickstart = HAL_GetTick();
 80075c8:	f7fd fe68 	bl	800529c <HAL_GetTick>
 80075cc:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075ce:	230c      	movs	r3, #12
 80075d0:	687a      	ldr	r2, [r7, #4]
 80075d2:	401a      	ands	r2, r3
 80075d4:	6863      	ldr	r3, [r4, #4]
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	429a      	cmp	r2, r3
 80075da:	d0b9      	beq.n	8007550 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075dc:	f7fd fe5e 	bl	800529c <HAL_GetTick>
 80075e0:	9b01      	ldr	r3, [sp, #4]
 80075e2:	1ac0      	subs	r0, r0, r3
 80075e4:	4b11      	ldr	r3, [pc, #68]	; (800762c <HAL_RCC_ClockConfig+0x100>)
 80075e6:	4298      	cmp	r0, r3
 80075e8:	d9f1      	bls.n	80075ce <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 80075ea:	2003      	movs	r0, #3
 80075ec:	e7a4      	b.n	8007538 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80075ee:	2a02      	cmp	r2, #2
 80075f0:	d102      	bne.n	80075f8 <HAL_RCC_ClockConfig+0xcc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075f2:	019b      	lsls	r3, r3, #6
 80075f4:	d4e3      	bmi.n	80075be <HAL_RCC_ClockConfig+0x92>
 80075f6:	e79e      	b.n	8007536 <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075f8:	079b      	lsls	r3, r3, #30
 80075fa:	d4e0      	bmi.n	80075be <HAL_RCC_ClockConfig+0x92>
 80075fc:	e79b      	b.n	8007536 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075fe:	682a      	ldr	r2, [r5, #0]
 8007600:	439a      	bics	r2, r3
 8007602:	602a      	str	r2, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007604:	682a      	ldr	r2, [r5, #0]
 8007606:	421a      	tst	r2, r3
 8007608:	d0a7      	beq.n	800755a <HAL_RCC_ClockConfig+0x2e>
 800760a:	e794      	b.n	8007536 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800760c:	686b      	ldr	r3, [r5, #4]
 800760e:	4a08      	ldr	r2, [pc, #32]	; (8007630 <HAL_RCC_ClockConfig+0x104>)
 8007610:	4013      	ands	r3, r2
 8007612:	68e2      	ldr	r2, [r4, #12]
 8007614:	4313      	orrs	r3, r2
 8007616:	606b      	str	r3, [r5, #4]
 8007618:	e7a3      	b.n	8007562 <HAL_RCC_ClockConfig+0x36>
 800761a:	46c0      	nop			; (mov r8, r8)
 800761c:	40022000 	.word	0x40022000
 8007620:	40021000 	.word	0x40021000
 8007624:	0800d61e 	.word	0x0800d61e
 8007628:	2000001c 	.word	0x2000001c
 800762c:	00001388 	.word	0x00001388
 8007630:	fffff8ff 	.word	0xfffff8ff

08007634 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007634:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007636:	6803      	ldr	r3, [r0, #0]
{
 8007638:	0005      	movs	r5, r0
 800763a:	b085      	sub	sp, #20
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800763c:	03db      	lsls	r3, r3, #15
 800763e:	d52b      	bpl.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x64>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007640:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8007642:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007644:	4c3c      	ldr	r4, [pc, #240]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8007646:	0552      	lsls	r2, r2, #21
 8007648:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 800764a:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800764c:	4213      	tst	r3, r2
 800764e:	d108      	bne.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007650:	69e3      	ldr	r3, [r4, #28]
 8007652:	4313      	orrs	r3, r2
 8007654:	61e3      	str	r3, [r4, #28]
 8007656:	69e3      	ldr	r3, [r4, #28]
 8007658:	4013      	ands	r3, r2
 800765a:	9303      	str	r3, [sp, #12]
 800765c:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 800765e:	2301      	movs	r3, #1
 8007660:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007662:	2780      	movs	r7, #128	; 0x80
 8007664:	4e35      	ldr	r6, [pc, #212]	; (800773c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8007666:	007f      	lsls	r7, r7, #1
 8007668:	6833      	ldr	r3, [r6, #0]
 800766a:	423b      	tst	r3, r7
 800766c:	d032      	beq.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800766e:	6a21      	ldr	r1, [r4, #32]
 8007670:	22c0      	movs	r2, #192	; 0xc0
 8007672:	0008      	movs	r0, r1
 8007674:	0092      	lsls	r2, r2, #2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007676:	686b      	ldr	r3, [r5, #4]
 8007678:	4e31      	ldr	r6, [pc, #196]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800767a:	4010      	ands	r0, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800767c:	4211      	tst	r1, r2
 800767e:	d13b      	bne.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007680:	6a23      	ldr	r3, [r4, #32]
 8007682:	686a      	ldr	r2, [r5, #4]
 8007684:	4033      	ands	r3, r6
 8007686:	4313      	orrs	r3, r2
 8007688:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800768a:	9b00      	ldr	r3, [sp, #0]
 800768c:	2b01      	cmp	r3, #1
 800768e:	d103      	bne.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007690:	69e3      	ldr	r3, [r4, #28]
 8007692:	4a2c      	ldr	r2, [pc, #176]	; (8007744 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8007694:	4013      	ands	r3, r2
 8007696:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007698:	682a      	ldr	r2, [r5, #0]
 800769a:	07d3      	lsls	r3, r2, #31
 800769c:	d506      	bpl.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800769e:	2003      	movs	r0, #3
 80076a0:	4925      	ldr	r1, [pc, #148]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 80076a2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80076a4:	4383      	bics	r3, r0
 80076a6:	68a8      	ldr	r0, [r5, #8]
 80076a8:	4303      	orrs	r3, r0
 80076aa:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80076ac:	0693      	lsls	r3, r2, #26
 80076ae:	d506      	bpl.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80076b0:	2010      	movs	r0, #16
 80076b2:	4921      	ldr	r1, [pc, #132]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 80076b4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80076b6:	4383      	bics	r3, r0
 80076b8:	68e8      	ldr	r0, [r5, #12]
 80076ba:	4303      	orrs	r3, r0
 80076bc:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80076be:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80076c0:	0552      	lsls	r2, r2, #21
 80076c2:	d517      	bpl.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80076c4:	2140      	movs	r1, #64	; 0x40
 80076c6:	4a1c      	ldr	r2, [pc, #112]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 80076c8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80076ca:	438b      	bics	r3, r1
 80076cc:	6929      	ldr	r1, [r5, #16]
 80076ce:	430b      	orrs	r3, r1
 80076d0:	6313      	str	r3, [r2, #48]	; 0x30
 80076d2:	e00f      	b.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80076d4:	6833      	ldr	r3, [r6, #0]
 80076d6:	433b      	orrs	r3, r7
 80076d8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80076da:	f7fd fddf 	bl	800529c <HAL_GetTick>
 80076de:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076e0:	6833      	ldr	r3, [r6, #0]
 80076e2:	423b      	tst	r3, r7
 80076e4:	d1c3      	bne.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076e6:	f7fd fdd9 	bl	800529c <HAL_GetTick>
 80076ea:	9b01      	ldr	r3, [sp, #4]
 80076ec:	1ac0      	subs	r0, r0, r3
 80076ee:	2864      	cmp	r0, #100	; 0x64
 80076f0:	d9f6      	bls.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0xac>
          return HAL_TIMEOUT;
 80076f2:	2003      	movs	r0, #3
}
 80076f4:	b005      	add	sp, #20
 80076f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80076f8:	4013      	ands	r3, r2
 80076fa:	4283      	cmp	r3, r0
 80076fc:	d0c0      	beq.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      __HAL_RCC_BACKUPRESET_FORCE();
 80076fe:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007700:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8007702:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007704:	0019      	movs	r1, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8007706:	0252      	lsls	r2, r2, #9
 8007708:	4302      	orrs	r2, r0
 800770a:	6222      	str	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800770c:	6a22      	ldr	r2, [r4, #32]
 800770e:	480e      	ldr	r0, [pc, #56]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0x114>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007710:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007712:	4002      	ands	r2, r0
 8007714:	6222      	str	r2, [r4, #32]
      RCC->BDCR = temp_reg;
 8007716:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007718:	07db      	lsls	r3, r3, #31
 800771a:	d5b1      	bpl.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x4c>
        tickstart = HAL_GetTick();
 800771c:	f7fd fdbe 	bl	800529c <HAL_GetTick>
 8007720:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007722:	2202      	movs	r2, #2
 8007724:	6a23      	ldr	r3, [r4, #32]
 8007726:	4213      	tst	r3, r2
 8007728:	d1aa      	bne.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x4c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800772a:	f7fd fdb7 	bl	800529c <HAL_GetTick>
 800772e:	4b07      	ldr	r3, [pc, #28]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8007730:	1bc0      	subs	r0, r0, r7
 8007732:	4298      	cmp	r0, r3
 8007734:	d9f5      	bls.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0xee>
 8007736:	e7dc      	b.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8007738:	40021000 	.word	0x40021000
 800773c:	40007000 	.word	0x40007000
 8007740:	fffffcff 	.word	0xfffffcff
 8007744:	efffffff 	.word	0xefffffff
 8007748:	fffeffff 	.word	0xfffeffff
 800774c:	00001388 	.word	0x00001388

08007750 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007750:	2201      	movs	r2, #1
 8007752:	6a03      	ldr	r3, [r0, #32]
{
 8007754:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007756:	4393      	bics	r3, r2
 8007758:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800775a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800775c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800775e:	6985      	ldr	r5, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007760:	3272      	adds	r2, #114	; 0x72
 8007762:	4395      	bics	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007764:	680a      	ldr	r2, [r1, #0]
 8007766:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007768:	2202      	movs	r2, #2
 800776a:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800776c:	688a      	ldr	r2, [r1, #8]
 800776e:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007770:	4a14      	ldr	r2, [pc, #80]	; (80077c4 <TIM_OC1_SetConfig+0x74>)
 8007772:	4290      	cmp	r0, r2
 8007774:	d008      	beq.n	8007788 <TIM_OC1_SetConfig+0x38>
 8007776:	4e14      	ldr	r6, [pc, #80]	; (80077c8 <TIM_OC1_SetConfig+0x78>)
 8007778:	42b0      	cmp	r0, r6
 800777a:	d005      	beq.n	8007788 <TIM_OC1_SetConfig+0x38>
 800777c:	4e13      	ldr	r6, [pc, #76]	; (80077cc <TIM_OC1_SetConfig+0x7c>)
 800777e:	42b0      	cmp	r0, r6
 8007780:	d002      	beq.n	8007788 <TIM_OC1_SetConfig+0x38>
 8007782:	4e13      	ldr	r6, [pc, #76]	; (80077d0 <TIM_OC1_SetConfig+0x80>)
 8007784:	42b0      	cmp	r0, r6
 8007786:	d116      	bne.n	80077b6 <TIM_OC1_SetConfig+0x66>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007788:	2608      	movs	r6, #8
 800778a:	43b3      	bics	r3, r6
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800778c:	68ce      	ldr	r6, [r1, #12]
 800778e:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007790:	2604      	movs	r6, #4
 8007792:	43b3      	bics	r3, r6
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007794:	4290      	cmp	r0, r2
 8007796:	d008      	beq.n	80077aa <TIM_OC1_SetConfig+0x5a>
 8007798:	4a0b      	ldr	r2, [pc, #44]	; (80077c8 <TIM_OC1_SetConfig+0x78>)
 800779a:	4290      	cmp	r0, r2
 800779c:	d005      	beq.n	80077aa <TIM_OC1_SetConfig+0x5a>
 800779e:	4a0b      	ldr	r2, [pc, #44]	; (80077cc <TIM_OC1_SetConfig+0x7c>)
 80077a0:	4290      	cmp	r0, r2
 80077a2:	d002      	beq.n	80077aa <TIM_OC1_SetConfig+0x5a>
 80077a4:	4a0a      	ldr	r2, [pc, #40]	; (80077d0 <TIM_OC1_SetConfig+0x80>)
 80077a6:	4290      	cmp	r0, r2
 80077a8:	d105      	bne.n	80077b6 <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80077aa:	4a0a      	ldr	r2, [pc, #40]	; (80077d4 <TIM_OC1_SetConfig+0x84>)
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80077ac:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80077ae:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 80077b0:	694c      	ldr	r4, [r1, #20]
 80077b2:	4334      	orrs	r4, r6
 80077b4:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80077b6:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80077b8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80077ba:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80077bc:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077be:	6203      	str	r3, [r0, #32]
}
 80077c0:	bd70      	pop	{r4, r5, r6, pc}
 80077c2:	46c0      	nop			; (mov r8, r8)
 80077c4:	40012c00 	.word	0x40012c00
 80077c8:	40014000 	.word	0x40014000
 80077cc:	40014400 	.word	0x40014400
 80077d0:	40014800 	.word	0x40014800
 80077d4:	fffffcff 	.word	0xfffffcff

080077d8 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80077d8:	6a03      	ldr	r3, [r0, #32]
 80077da:	4a18      	ldr	r2, [pc, #96]	; (800783c <TIM_OC3_SetConfig+0x64>)
{
 80077dc:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80077de:	4013      	ands	r3, r2
 80077e0:	6203      	str	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80077e2:	2373      	movs	r3, #115	; 0x73
  tmpccer = TIMx->CCER;
 80077e4:	6a05      	ldr	r5, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80077e6:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80077e8:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80077ea:	439c      	bics	r4, r3
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077ec:	680b      	ldr	r3, [r1, #0]
 80077ee:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80077f0:	4b13      	ldr	r3, [pc, #76]	; (8007840 <TIM_OC3_SetConfig+0x68>)
 80077f2:	401d      	ands	r5, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80077f4:	688b      	ldr	r3, [r1, #8]
 80077f6:	021b      	lsls	r3, r3, #8
 80077f8:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80077fa:	4d12      	ldr	r5, [pc, #72]	; (8007844 <TIM_OC3_SetConfig+0x6c>)
 80077fc:	42a8      	cmp	r0, r5
 80077fe:	d10e      	bne.n	800781e <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007800:	4d11      	ldr	r5, [pc, #68]	; (8007848 <TIM_OC3_SetConfig+0x70>)
 8007802:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007804:	68cb      	ldr	r3, [r1, #12]
 8007806:	021b      	lsls	r3, r3, #8
 8007808:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800780a:	4d10      	ldr	r5, [pc, #64]	; (800784c <TIM_OC3_SetConfig+0x74>)
 800780c:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800780e:	4d10      	ldr	r5, [pc, #64]	; (8007850 <TIM_OC3_SetConfig+0x78>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007810:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007812:	4015      	ands	r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007814:	698a      	ldr	r2, [r1, #24]
 8007816:	4332      	orrs	r2, r6
 8007818:	0112      	lsls	r2, r2, #4
 800781a:	432a      	orrs	r2, r5
 800781c:	e008      	b.n	8007830 <TIM_OC3_SetConfig+0x58>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800781e:	4d0d      	ldr	r5, [pc, #52]	; (8007854 <TIM_OC3_SetConfig+0x7c>)
 8007820:	42a8      	cmp	r0, r5
 8007822:	d0f4      	beq.n	800780e <TIM_OC3_SetConfig+0x36>
 8007824:	4d0c      	ldr	r5, [pc, #48]	; (8007858 <TIM_OC3_SetConfig+0x80>)
 8007826:	42a8      	cmp	r0, r5
 8007828:	d0f1      	beq.n	800780e <TIM_OC3_SetConfig+0x36>
 800782a:	4d0c      	ldr	r5, [pc, #48]	; (800785c <TIM_OC3_SetConfig+0x84>)
 800782c:	42a8      	cmp	r0, r5
 800782e:	d0ee      	beq.n	800780e <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007830:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007832:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8007834:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8007836:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007838:	6203      	str	r3, [r0, #32]
}
 800783a:	bd70      	pop	{r4, r5, r6, pc}
 800783c:	fffffeff 	.word	0xfffffeff
 8007840:	fffffdff 	.word	0xfffffdff
 8007844:	40012c00 	.word	0x40012c00
 8007848:	fffff7ff 	.word	0xfffff7ff
 800784c:	fffffbff 	.word	0xfffffbff
 8007850:	ffffcfff 	.word	0xffffcfff
 8007854:	40014000 	.word	0x40014000
 8007858:	40014400 	.word	0x40014400
 800785c:	40014800 	.word	0x40014800

08007860 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007860:	6a03      	ldr	r3, [r0, #32]
 8007862:	4a14      	ldr	r2, [pc, #80]	; (80078b4 <TIM_OC4_SetConfig+0x54>)
{
 8007864:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007866:	4013      	ands	r3, r2
 8007868:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800786a:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800786c:	4d12      	ldr	r5, [pc, #72]	; (80078b8 <TIM_OC4_SetConfig+0x58>)
  tmpcr2 =  TIMx->CR2;
 800786e:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8007870:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007872:	402a      	ands	r2, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007874:	680d      	ldr	r5, [r1, #0]
 8007876:	022d      	lsls	r5, r5, #8
 8007878:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800787a:	4a10      	ldr	r2, [pc, #64]	; (80078bc <TIM_OC4_SetConfig+0x5c>)
 800787c:	4014      	ands	r4, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800787e:	688a      	ldr	r2, [r1, #8]
 8007880:	0312      	lsls	r2, r2, #12
 8007882:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007884:	4c0e      	ldr	r4, [pc, #56]	; (80078c0 <TIM_OC4_SetConfig+0x60>)
 8007886:	42a0      	cmp	r0, r4
 8007888:	d008      	beq.n	800789c <TIM_OC4_SetConfig+0x3c>
 800788a:	4c0e      	ldr	r4, [pc, #56]	; (80078c4 <TIM_OC4_SetConfig+0x64>)
 800788c:	42a0      	cmp	r0, r4
 800788e:	d005      	beq.n	800789c <TIM_OC4_SetConfig+0x3c>
 8007890:	4c0d      	ldr	r4, [pc, #52]	; (80078c8 <TIM_OC4_SetConfig+0x68>)
 8007892:	42a0      	cmp	r0, r4
 8007894:	d002      	beq.n	800789c <TIM_OC4_SetConfig+0x3c>
 8007896:	4c0d      	ldr	r4, [pc, #52]	; (80078cc <TIM_OC4_SetConfig+0x6c>)
 8007898:	42a0      	cmp	r0, r4
 800789a:	d104      	bne.n	80078a6 <TIM_OC4_SetConfig+0x46>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800789c:	4c0c      	ldr	r4, [pc, #48]	; (80078d0 <TIM_OC4_SetConfig+0x70>)
 800789e:	401c      	ands	r4, r3

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80078a0:	694b      	ldr	r3, [r1, #20]
 80078a2:	019b      	lsls	r3, r3, #6
 80078a4:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078a6:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80078a8:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80078aa:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80078ac:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078ae:	6202      	str	r2, [r0, #32]
}
 80078b0:	bd30      	pop	{r4, r5, pc}
 80078b2:	46c0      	nop			; (mov r8, r8)
 80078b4:	ffffefff 	.word	0xffffefff
 80078b8:	ffff8cff 	.word	0xffff8cff
 80078bc:	ffffdfff 	.word	0xffffdfff
 80078c0:	40012c00 	.word	0x40012c00
 80078c4:	40014000 	.word	0x40014000
 80078c8:	40014400 	.word	0x40014400
 80078cc:	40014800 	.word	0x40014800
 80078d0:	ffffbfff 	.word	0xffffbfff

080078d4 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80078d4:	0002      	movs	r2, r0
{
 80078d6:	0003      	movs	r3, r0
    return HAL_ERROR;
 80078d8:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 80078da:	323d      	adds	r2, #61	; 0x3d
 80078dc:	7811      	ldrb	r1, [r2, #0]
 80078de:	4281      	cmp	r1, r0
 80078e0:	d11c      	bne.n	800791c <HAL_TIM_Base_Start_IT+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 80078e2:	2102      	movs	r1, #2
 80078e4:	7011      	strb	r1, [r2, #0]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	68da      	ldr	r2, [r3, #12]
 80078ea:	4302      	orrs	r2, r0
 80078ec:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078ee:	4a0e      	ldr	r2, [pc, #56]	; (8007928 <HAL_TIM_Base_Start_IT+0x54>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d009      	beq.n	8007908 <HAL_TIM_Base_Start_IT+0x34>
 80078f4:	2280      	movs	r2, #128	; 0x80
 80078f6:	05d2      	lsls	r2, r2, #23
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d005      	beq.n	8007908 <HAL_TIM_Base_Start_IT+0x34>
 80078fc:	4a0b      	ldr	r2, [pc, #44]	; (800792c <HAL_TIM_Base_Start_IT+0x58>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d002      	beq.n	8007908 <HAL_TIM_Base_Start_IT+0x34>
 8007902:	4a0b      	ldr	r2, [pc, #44]	; (8007930 <HAL_TIM_Base_Start_IT+0x5c>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d10a      	bne.n	800791e <HAL_TIM_Base_Start_IT+0x4a>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007908:	2107      	movs	r1, #7
 800790a:	689a      	ldr	r2, [r3, #8]
  return HAL_OK;
 800790c:	2000      	movs	r0, #0
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800790e:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007910:	2a06      	cmp	r2, #6
 8007912:	d003      	beq.n	800791c <HAL_TIM_Base_Start_IT+0x48>
      __HAL_TIM_ENABLE(htim);
 8007914:	2201      	movs	r2, #1
 8007916:	6819      	ldr	r1, [r3, #0]
 8007918:	430a      	orrs	r2, r1
 800791a:	601a      	str	r2, [r3, #0]
}
 800791c:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	4302      	orrs	r2, r0
 8007922:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007924:	2000      	movs	r0, #0
 8007926:	e7f9      	b.n	800791c <HAL_TIM_Base_Start_IT+0x48>
 8007928:	40012c00 	.word	0x40012c00
 800792c:	40000400 	.word	0x40000400
 8007930:	40014000 	.word	0x40014000

08007934 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007934:	2101      	movs	r1, #1
 8007936:	6803      	ldr	r3, [r0, #0]
{
 8007938:	b510      	push	{r4, lr}
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800793a:	68da      	ldr	r2, [r3, #12]
 800793c:	438a      	bics	r2, r1
 800793e:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 8007940:	6a1c      	ldr	r4, [r3, #32]
 8007942:	4a07      	ldr	r2, [pc, #28]	; (8007960 <HAL_TIM_Base_Stop_IT+0x2c>)
 8007944:	4214      	tst	r4, r2
 8007946:	d106      	bne.n	8007956 <HAL_TIM_Base_Stop_IT+0x22>
 8007948:	6a1c      	ldr	r4, [r3, #32]
 800794a:	4a06      	ldr	r2, [pc, #24]	; (8007964 <HAL_TIM_Base_Stop_IT+0x30>)
 800794c:	4214      	tst	r4, r2
 800794e:	d102      	bne.n	8007956 <HAL_TIM_Base_Stop_IT+0x22>
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	438a      	bics	r2, r1
 8007954:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8007956:	2301      	movs	r3, #1
 8007958:	303d      	adds	r0, #61	; 0x3d
 800795a:	7003      	strb	r3, [r0, #0]
}
 800795c:	2000      	movs	r0, #0
 800795e:	bd10      	pop	{r4, pc}
 8007960:	00001111 	.word	0x00001111
 8007964:	00000444 	.word	0x00000444

08007968 <HAL_TIM_PWM_MspInit>:
 8007968:	4770      	bx	lr

0800796a <HAL_TIM_OC_DelayElapsedCallback>:
 800796a:	4770      	bx	lr

0800796c <HAL_TIM_IC_CaptureCallback>:
 800796c:	4770      	bx	lr

0800796e <HAL_TIM_PWM_PulseFinishedCallback>:
 800796e:	4770      	bx	lr

08007970 <HAL_TIM_TriggerCallback>:
 8007970:	4770      	bx	lr

08007972 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007972:	2202      	movs	r2, #2
 8007974:	6803      	ldr	r3, [r0, #0]
{
 8007976:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007978:	6919      	ldr	r1, [r3, #16]
{
 800797a:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800797c:	4211      	tst	r1, r2
 800797e:	d00e      	beq.n	800799e <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007980:	68d9      	ldr	r1, [r3, #12]
 8007982:	4211      	tst	r1, r2
 8007984:	d00b      	beq.n	800799e <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007986:	3a05      	subs	r2, #5
 8007988:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800798a:	3204      	adds	r2, #4
 800798c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800798e:	699b      	ldr	r3, [r3, #24]
 8007990:	079b      	lsls	r3, r3, #30
 8007992:	d100      	bne.n	8007996 <HAL_TIM_IRQHandler+0x24>
 8007994:	e079      	b.n	8007a8a <HAL_TIM_IRQHandler+0x118>
          HAL_TIM_IC_CaptureCallback(htim);
 8007996:	f7ff ffe9 	bl	800796c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800799a:	2300      	movs	r3, #0
 800799c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800799e:	2204      	movs	r2, #4
 80079a0:	6823      	ldr	r3, [r4, #0]
 80079a2:	6919      	ldr	r1, [r3, #16]
 80079a4:	4211      	tst	r1, r2
 80079a6:	d010      	beq.n	80079ca <HAL_TIM_IRQHandler+0x58>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80079a8:	68d9      	ldr	r1, [r3, #12]
 80079aa:	4211      	tst	r1, r2
 80079ac:	d00d      	beq.n	80079ca <HAL_TIM_IRQHandler+0x58>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80079ae:	3a09      	subs	r2, #9
 80079b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079b2:	3207      	adds	r2, #7
 80079b4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80079b6:	699a      	ldr	r2, [r3, #24]
 80079b8:	23c0      	movs	r3, #192	; 0xc0
 80079ba:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80079bc:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80079be:	421a      	tst	r2, r3
 80079c0:	d069      	beq.n	8007a96 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 80079c2:	f7ff ffd3 	bl	800796c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079c6:	2300      	movs	r3, #0
 80079c8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80079ca:	2208      	movs	r2, #8
 80079cc:	6823      	ldr	r3, [r4, #0]
 80079ce:	6919      	ldr	r1, [r3, #16]
 80079d0:	4211      	tst	r1, r2
 80079d2:	d00e      	beq.n	80079f2 <HAL_TIM_IRQHandler+0x80>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80079d4:	68d9      	ldr	r1, [r3, #12]
 80079d6:	4211      	tst	r1, r2
 80079d8:	d00b      	beq.n	80079f2 <HAL_TIM_IRQHandler+0x80>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80079da:	3a11      	subs	r2, #17
 80079dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80079de:	320d      	adds	r2, #13
 80079e0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80079e2:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80079e4:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80079e6:	079b      	lsls	r3, r3, #30
 80079e8:	d05b      	beq.n	8007aa2 <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 80079ea:	f7ff ffbf 	bl	800796c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079ee:	2300      	movs	r3, #0
 80079f0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80079f2:	2210      	movs	r2, #16
 80079f4:	6823      	ldr	r3, [r4, #0]
 80079f6:	6919      	ldr	r1, [r3, #16]
 80079f8:	4211      	tst	r1, r2
 80079fa:	d010      	beq.n	8007a1e <HAL_TIM_IRQHandler+0xac>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80079fc:	68d9      	ldr	r1, [r3, #12]
 80079fe:	4211      	tst	r1, r2
 8007a00:	d00d      	beq.n	8007a1e <HAL_TIM_IRQHandler+0xac>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007a02:	3a21      	subs	r2, #33	; 0x21
 8007a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a06:	3219      	adds	r2, #25
 8007a08:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a0a:	69da      	ldr	r2, [r3, #28]
 8007a0c:	23c0      	movs	r3, #192	; 0xc0
 8007a0e:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8007a10:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a12:	421a      	tst	r2, r3
 8007a14:	d04b      	beq.n	8007aae <HAL_TIM_IRQHandler+0x13c>
        HAL_TIM_IC_CaptureCallback(htim);
 8007a16:	f7ff ffa9 	bl	800796c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007a1e:	2201      	movs	r2, #1
 8007a20:	6823      	ldr	r3, [r4, #0]
 8007a22:	6919      	ldr	r1, [r3, #16]
 8007a24:	4211      	tst	r1, r2
 8007a26:	d007      	beq.n	8007a38 <HAL_TIM_IRQHandler+0xc6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007a28:	68d9      	ldr	r1, [r3, #12]
 8007a2a:	4211      	tst	r1, r2
 8007a2c:	d004      	beq.n	8007a38 <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007a2e:	3a03      	subs	r2, #3
      HAL_TIM_PeriodElapsedCallback(htim);
 8007a30:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007a32:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8007a34:	f7fc f8fc 	bl	8003c30 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007a38:	2280      	movs	r2, #128	; 0x80
 8007a3a:	6823      	ldr	r3, [r4, #0]
 8007a3c:	6919      	ldr	r1, [r3, #16]
 8007a3e:	4211      	tst	r1, r2
 8007a40:	d008      	beq.n	8007a54 <HAL_TIM_IRQHandler+0xe2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007a42:	68d9      	ldr	r1, [r3, #12]
 8007a44:	4211      	tst	r1, r2
 8007a46:	d005      	beq.n	8007a54 <HAL_TIM_IRQHandler+0xe2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007a48:	3a02      	subs	r2, #2
 8007a4a:	3aff      	subs	r2, #255	; 0xff
      HAL_TIMEx_BreakCallback(htim);
 8007a4c:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007a4e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007a50:	f000 fb45 	bl	80080de <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007a54:	2240      	movs	r2, #64	; 0x40
 8007a56:	6823      	ldr	r3, [r4, #0]
 8007a58:	6919      	ldr	r1, [r3, #16]
 8007a5a:	4211      	tst	r1, r2
 8007a5c:	d007      	beq.n	8007a6e <HAL_TIM_IRQHandler+0xfc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007a5e:	68d9      	ldr	r1, [r3, #12]
 8007a60:	4211      	tst	r1, r2
 8007a62:	d004      	beq.n	8007a6e <HAL_TIM_IRQHandler+0xfc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007a64:	3a81      	subs	r2, #129	; 0x81
      HAL_TIM_TriggerCallback(htim);
 8007a66:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007a68:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007a6a:	f7ff ff81 	bl	8007970 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007a6e:	2220      	movs	r2, #32
 8007a70:	6823      	ldr	r3, [r4, #0]
 8007a72:	6919      	ldr	r1, [r3, #16]
 8007a74:	4211      	tst	r1, r2
 8007a76:	d007      	beq.n	8007a88 <HAL_TIM_IRQHandler+0x116>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a78:	68d9      	ldr	r1, [r3, #12]
 8007a7a:	4211      	tst	r1, r2
 8007a7c:	d004      	beq.n	8007a88 <HAL_TIM_IRQHandler+0x116>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a7e:	3a41      	subs	r2, #65	; 0x41
      HAL_TIMEx_CommutCallback(htim);
 8007a80:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a82:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8007a84:	f000 fb2a 	bl	80080dc <HAL_TIMEx_CommutCallback>
}
 8007a88:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a8a:	f7ff ff6e 	bl	800796a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a8e:	0020      	movs	r0, r4
 8007a90:	f7ff ff6d 	bl	800796e <HAL_TIM_PWM_PulseFinishedCallback>
 8007a94:	e781      	b.n	800799a <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a96:	f7ff ff68 	bl	800796a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a9a:	0020      	movs	r0, r4
 8007a9c:	f7ff ff67 	bl	800796e <HAL_TIM_PWM_PulseFinishedCallback>
 8007aa0:	e791      	b.n	80079c6 <HAL_TIM_IRQHandler+0x54>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007aa2:	f7ff ff62 	bl	800796a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007aa6:	0020      	movs	r0, r4
 8007aa8:	f7ff ff61 	bl	800796e <HAL_TIM_PWM_PulseFinishedCallback>
 8007aac:	e79f      	b.n	80079ee <HAL_TIM_IRQHandler+0x7c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007aae:	f7ff ff5c 	bl	800796a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ab2:	0020      	movs	r0, r4
 8007ab4:	f7ff ff5b 	bl	800796e <HAL_TIM_PWM_PulseFinishedCallback>
 8007ab8:	e7af      	b.n	8007a1a <HAL_TIM_IRQHandler+0xa8>
	...

08007abc <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007abc:	4a20      	ldr	r2, [pc, #128]	; (8007b40 <TIM_Base_SetConfig+0x84>)
{
 8007abe:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8007ac0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ac2:	4290      	cmp	r0, r2
 8007ac4:	d006      	beq.n	8007ad4 <TIM_Base_SetConfig+0x18>
 8007ac6:	2480      	movs	r4, #128	; 0x80
 8007ac8:	05e4      	lsls	r4, r4, #23
 8007aca:	42a0      	cmp	r0, r4
 8007acc:	d002      	beq.n	8007ad4 <TIM_Base_SetConfig+0x18>
 8007ace:	4c1d      	ldr	r4, [pc, #116]	; (8007b44 <TIM_Base_SetConfig+0x88>)
 8007ad0:	42a0      	cmp	r0, r4
 8007ad2:	d10c      	bne.n	8007aee <TIM_Base_SetConfig+0x32>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ad4:	2470      	movs	r4, #112	; 0x70
 8007ad6:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8007ad8:	684c      	ldr	r4, [r1, #4]
 8007ada:	4323      	orrs	r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007adc:	4290      	cmp	r0, r2
 8007ade:	d012      	beq.n	8007b06 <TIM_Base_SetConfig+0x4a>
 8007ae0:	2480      	movs	r4, #128	; 0x80
 8007ae2:	05e4      	lsls	r4, r4, #23
 8007ae4:	42a0      	cmp	r0, r4
 8007ae6:	d00e      	beq.n	8007b06 <TIM_Base_SetConfig+0x4a>
 8007ae8:	4c16      	ldr	r4, [pc, #88]	; (8007b44 <TIM_Base_SetConfig+0x88>)
 8007aea:	42a0      	cmp	r0, r4
 8007aec:	d00b      	beq.n	8007b06 <TIM_Base_SetConfig+0x4a>
 8007aee:	4c16      	ldr	r4, [pc, #88]	; (8007b48 <TIM_Base_SetConfig+0x8c>)
 8007af0:	42a0      	cmp	r0, r4
 8007af2:	d008      	beq.n	8007b06 <TIM_Base_SetConfig+0x4a>
 8007af4:	4c15      	ldr	r4, [pc, #84]	; (8007b4c <TIM_Base_SetConfig+0x90>)
 8007af6:	42a0      	cmp	r0, r4
 8007af8:	d005      	beq.n	8007b06 <TIM_Base_SetConfig+0x4a>
 8007afa:	4c15      	ldr	r4, [pc, #84]	; (8007b50 <TIM_Base_SetConfig+0x94>)
 8007afc:	42a0      	cmp	r0, r4
 8007afe:	d002      	beq.n	8007b06 <TIM_Base_SetConfig+0x4a>
 8007b00:	4c14      	ldr	r4, [pc, #80]	; (8007b54 <TIM_Base_SetConfig+0x98>)
 8007b02:	42a0      	cmp	r0, r4
 8007b04:	d103      	bne.n	8007b0e <TIM_Base_SetConfig+0x52>
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b06:	4c14      	ldr	r4, [pc, #80]	; (8007b58 <TIM_Base_SetConfig+0x9c>)
 8007b08:	401c      	ands	r4, r3
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b0a:	68cb      	ldr	r3, [r1, #12]
 8007b0c:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b0e:	2480      	movs	r4, #128	; 0x80
 8007b10:	43a3      	bics	r3, r4
 8007b12:	694c      	ldr	r4, [r1, #20]
 8007b14:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 8007b16:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b18:	688b      	ldr	r3, [r1, #8]
 8007b1a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007b1c:	680b      	ldr	r3, [r1, #0]
 8007b1e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b20:	4290      	cmp	r0, r2
 8007b22:	d008      	beq.n	8007b36 <TIM_Base_SetConfig+0x7a>
 8007b24:	4b09      	ldr	r3, [pc, #36]	; (8007b4c <TIM_Base_SetConfig+0x90>)
 8007b26:	4298      	cmp	r0, r3
 8007b28:	d005      	beq.n	8007b36 <TIM_Base_SetConfig+0x7a>
 8007b2a:	4b09      	ldr	r3, [pc, #36]	; (8007b50 <TIM_Base_SetConfig+0x94>)
 8007b2c:	4298      	cmp	r0, r3
 8007b2e:	d002      	beq.n	8007b36 <TIM_Base_SetConfig+0x7a>
 8007b30:	4b08      	ldr	r3, [pc, #32]	; (8007b54 <TIM_Base_SetConfig+0x98>)
 8007b32:	4298      	cmp	r0, r3
 8007b34:	d101      	bne.n	8007b3a <TIM_Base_SetConfig+0x7e>
    TIMx->RCR = Structure->RepetitionCounter;
 8007b36:	690b      	ldr	r3, [r1, #16]
 8007b38:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	6143      	str	r3, [r0, #20]
}
 8007b3e:	bd10      	pop	{r4, pc}
 8007b40:	40012c00 	.word	0x40012c00
 8007b44:	40000400 	.word	0x40000400
 8007b48:	40002000 	.word	0x40002000
 8007b4c:	40014000 	.word	0x40014000
 8007b50:	40014400 	.word	0x40014400
 8007b54:	40014800 	.word	0x40014800
 8007b58:	fffffcff 	.word	0xfffffcff

08007b5c <HAL_TIM_Base_Init>:
{
 8007b5c:	b570      	push	{r4, r5, r6, lr}
 8007b5e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8007b60:	2001      	movs	r0, #1
  if (htim == NULL)
 8007b62:	2c00      	cmp	r4, #0
 8007b64:	d021      	beq.n	8007baa <HAL_TIM_Base_Init+0x4e>
  if (htim->State == HAL_TIM_STATE_RESET)
 8007b66:	0025      	movs	r5, r4
 8007b68:	353d      	adds	r5, #61	; 0x3d
 8007b6a:	782b      	ldrb	r3, [r5, #0]
 8007b6c:	b2da      	uxtb	r2, r3
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d105      	bne.n	8007b7e <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8007b72:	0023      	movs	r3, r4
 8007b74:	333c      	adds	r3, #60	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007b76:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8007b78:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 8007b7a:	f7fd f9eb 	bl	8004f54 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8007b7e:	2302      	movs	r3, #2
 8007b80:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b82:	6820      	ldr	r0, [r4, #0]
 8007b84:	1d21      	adds	r1, r4, #4
 8007b86:	f7ff ff99 	bl	8007abc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b8a:	0022      	movs	r2, r4
 8007b8c:	2301      	movs	r3, #1
  return HAL_OK;
 8007b8e:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b90:	3246      	adds	r2, #70	; 0x46
 8007b92:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b94:	3445      	adds	r4, #69	; 0x45
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b96:	3a08      	subs	r2, #8
 8007b98:	7013      	strb	r3, [r2, #0]
 8007b9a:	7053      	strb	r3, [r2, #1]
 8007b9c:	7093      	strb	r3, [r2, #2]
 8007b9e:	70d3      	strb	r3, [r2, #3]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ba0:	7113      	strb	r3, [r2, #4]
 8007ba2:	7153      	strb	r3, [r2, #5]
 8007ba4:	7193      	strb	r3, [r2, #6]
 8007ba6:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8007ba8:	702b      	strb	r3, [r5, #0]
}
 8007baa:	bd70      	pop	{r4, r5, r6, pc}

08007bac <HAL_TIM_PWM_Init>:
{
 8007bac:	b570      	push	{r4, r5, r6, lr}
 8007bae:	0004      	movs	r4, r0
    return HAL_ERROR;
 8007bb0:	2001      	movs	r0, #1
  if (htim == NULL)
 8007bb2:	2c00      	cmp	r4, #0
 8007bb4:	d021      	beq.n	8007bfa <HAL_TIM_PWM_Init+0x4e>
  if (htim->State == HAL_TIM_STATE_RESET)
 8007bb6:	0025      	movs	r5, r4
 8007bb8:	353d      	adds	r5, #61	; 0x3d
 8007bba:	782b      	ldrb	r3, [r5, #0]
 8007bbc:	b2da      	uxtb	r2, r3
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d105      	bne.n	8007bce <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8007bc2:	0023      	movs	r3, r4
 8007bc4:	333c      	adds	r3, #60	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8007bc6:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8007bc8:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_MspInit(htim);
 8007bca:	f7ff fecd 	bl	8007968 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8007bce:	2302      	movs	r3, #2
 8007bd0:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bd2:	6820      	ldr	r0, [r4, #0]
 8007bd4:	1d21      	adds	r1, r4, #4
 8007bd6:	f7ff ff71 	bl	8007abc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bda:	0022      	movs	r2, r4
 8007bdc:	2301      	movs	r3, #1
  return HAL_OK;
 8007bde:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007be0:	3246      	adds	r2, #70	; 0x46
 8007be2:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007be4:	3445      	adds	r4, #69	; 0x45
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007be6:	3a08      	subs	r2, #8
 8007be8:	7013      	strb	r3, [r2, #0]
 8007bea:	7053      	strb	r3, [r2, #1]
 8007bec:	7093      	strb	r3, [r2, #2]
 8007bee:	70d3      	strb	r3, [r2, #3]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bf0:	7113      	strb	r3, [r2, #4]
 8007bf2:	7153      	strb	r3, [r2, #5]
 8007bf4:	7193      	strb	r3, [r2, #6]
 8007bf6:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8007bf8:	702b      	strb	r3, [r5, #0]
}
 8007bfa:	bd70      	pop	{r4, r5, r6, pc}

08007bfc <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007bfc:	2210      	movs	r2, #16
 8007bfe:	6a03      	ldr	r3, [r0, #32]
{
 8007c00:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c02:	4393      	bics	r3, r2
 8007c04:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8007c06:	6a05      	ldr	r5, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c08:	4c16      	ldr	r4, [pc, #88]	; (8007c64 <TIM_OC2_SetConfig+0x68>)
  tmpcr2 =  TIMx->CR2;
 8007c0a:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8007c0c:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c0e:	4022      	ands	r2, r4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c10:	680c      	ldr	r4, [r1, #0]
 8007c12:	0224      	lsls	r4, r4, #8
 8007c14:	4314      	orrs	r4, r2
  tmpccer &= ~TIM_CCER_CC2P;
 8007c16:	2220      	movs	r2, #32
 8007c18:	4395      	bics	r5, r2
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c1a:	688a      	ldr	r2, [r1, #8]
 8007c1c:	0112      	lsls	r2, r2, #4
 8007c1e:	432a      	orrs	r2, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c20:	4d11      	ldr	r5, [pc, #68]	; (8007c68 <TIM_OC2_SetConfig+0x6c>)
 8007c22:	42a8      	cmp	r0, r5
 8007c24:	d10f      	bne.n	8007c46 <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c26:	2580      	movs	r5, #128	; 0x80
 8007c28:	43aa      	bics	r2, r5
 8007c2a:	0016      	movs	r6, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c2c:	68ca      	ldr	r2, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c2e:	3d40      	subs	r5, #64	; 0x40
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c30:	0112      	lsls	r2, r2, #4
 8007c32:	4332      	orrs	r2, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c34:	43aa      	bics	r2, r5
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c36:	4d0d      	ldr	r5, [pc, #52]	; (8007c6c <TIM_OC2_SetConfig+0x70>)
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007c38:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c3a:	401d      	ands	r5, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c3c:	698b      	ldr	r3, [r1, #24]
 8007c3e:	4333      	orrs	r3, r6
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	432b      	orrs	r3, r5
 8007c44:	e008      	b.n	8007c58 <TIM_OC2_SetConfig+0x5c>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c46:	4d0a      	ldr	r5, [pc, #40]	; (8007c70 <TIM_OC2_SetConfig+0x74>)
 8007c48:	42a8      	cmp	r0, r5
 8007c4a:	d0f4      	beq.n	8007c36 <TIM_OC2_SetConfig+0x3a>
 8007c4c:	4d09      	ldr	r5, [pc, #36]	; (8007c74 <TIM_OC2_SetConfig+0x78>)
 8007c4e:	42a8      	cmp	r0, r5
 8007c50:	d0f1      	beq.n	8007c36 <TIM_OC2_SetConfig+0x3a>
 8007c52:	4d09      	ldr	r5, [pc, #36]	; (8007c78 <TIM_OC2_SetConfig+0x7c>)
 8007c54:	42a8      	cmp	r0, r5
 8007c56:	d0ee      	beq.n	8007c36 <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 8007c58:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8007c5a:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8007c5c:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8007c5e:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8007c60:	6202      	str	r2, [r0, #32]
}
 8007c62:	bd70      	pop	{r4, r5, r6, pc}
 8007c64:	ffff8cff 	.word	0xffff8cff
 8007c68:	40012c00 	.word	0x40012c00
 8007c6c:	fffff3ff 	.word	0xfffff3ff
 8007c70:	40014000 	.word	0x40014000
 8007c74:	40014400 	.word	0x40014400
 8007c78:	40014800 	.word	0x40014800

08007c7c <HAL_TIM_PWM_ConfigChannel>:
{
 8007c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8007c7e:	0006      	movs	r6, r0
 8007c80:	363c      	adds	r6, #60	; 0x3c
{
 8007c82:	0014      	movs	r4, r2
  __HAL_LOCK(htim);
 8007c84:	7832      	ldrb	r2, [r6, #0]
{
 8007c86:	0003      	movs	r3, r0
 8007c88:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 8007c8a:	2002      	movs	r0, #2
 8007c8c:	2a01      	cmp	r2, #1
 8007c8e:	d00a      	beq.n	8007ca6 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8007c90:	3801      	subs	r0, #1
 8007c92:	7030      	strb	r0, [r6, #0]
  switch (Channel)
 8007c94:	2c08      	cmp	r4, #8
 8007c96:	d041      	beq.n	8007d1c <HAL_TIM_PWM_ConfigChannel+0xa0>
 8007c98:	d806      	bhi.n	8007ca8 <HAL_TIM_PWM_ConfigChannel+0x2c>
 8007c9a:	2c00      	cmp	r4, #0
 8007c9c:	d019      	beq.n	8007cd2 <HAL_TIM_PWM_ConfigChannel+0x56>
 8007c9e:	2c04      	cmp	r4, #4
 8007ca0:	d029      	beq.n	8007cf6 <HAL_TIM_PWM_ConfigChannel+0x7a>
  __HAL_UNLOCK(htim);
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	7033      	strb	r3, [r6, #0]
}
 8007ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (Channel)
 8007ca8:	2c0c      	cmp	r4, #12
 8007caa:	d1fa      	bne.n	8007ca2 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007cac:	681c      	ldr	r4, [r3, #0]
 8007cae:	0020      	movs	r0, r4
 8007cb0:	f7ff fdd6 	bl	8007860 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007cb4:	2380      	movs	r3, #128	; 0x80
 8007cb6:	69e2      	ldr	r2, [r4, #28]
 8007cb8:	011b      	lsls	r3, r3, #4
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	61e3      	str	r3, [r4, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007cbe:	69e3      	ldr	r3, [r4, #28]
 8007cc0:	4a1e      	ldr	r2, [pc, #120]	; (8007d3c <HAL_TIM_PWM_ConfigChannel+0xc0>)
 8007cc2:	4013      	ands	r3, r2
 8007cc4:	61e3      	str	r3, [r4, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007cc6:	692b      	ldr	r3, [r5, #16]
 8007cc8:	69e2      	ldr	r2, [r4, #28]
 8007cca:	021b      	lsls	r3, r3, #8
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	61e3      	str	r3, [r4, #28]
 8007cd0:	e00f      	b.n	8007cf2 <HAL_TIM_PWM_ConfigChannel+0x76>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007cd2:	681f      	ldr	r7, [r3, #0]
 8007cd4:	0038      	movs	r0, r7
 8007cd6:	f7ff fd3b 	bl	8007750 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007cda:	2308      	movs	r3, #8
 8007cdc:	69ba      	ldr	r2, [r7, #24]
 8007cde:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007ce0:	2204      	movs	r2, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007ce2:	61bb      	str	r3, [r7, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007ce4:	69bb      	ldr	r3, [r7, #24]
 8007ce6:	4393      	bics	r3, r2
 8007ce8:	61bb      	str	r3, [r7, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007cea:	69bb      	ldr	r3, [r7, #24]
 8007cec:	692a      	ldr	r2, [r5, #16]
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8007cf2:	2000      	movs	r0, #0
      break;
 8007cf4:	e7d5      	b.n	8007ca2 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007cf6:	681c      	ldr	r4, [r3, #0]
 8007cf8:	0020      	movs	r0, r4
 8007cfa:	f7ff ff7f 	bl	8007bfc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007cfe:	2380      	movs	r3, #128	; 0x80
 8007d00:	69a2      	ldr	r2, [r4, #24]
 8007d02:	011b      	lsls	r3, r3, #4
 8007d04:	4313      	orrs	r3, r2
 8007d06:	61a3      	str	r3, [r4, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007d08:	69a3      	ldr	r3, [r4, #24]
 8007d0a:	4a0c      	ldr	r2, [pc, #48]	; (8007d3c <HAL_TIM_PWM_ConfigChannel+0xc0>)
 8007d0c:	4013      	ands	r3, r2
 8007d0e:	61a3      	str	r3, [r4, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007d10:	692b      	ldr	r3, [r5, #16]
 8007d12:	69a2      	ldr	r2, [r4, #24]
 8007d14:	021b      	lsls	r3, r3, #8
 8007d16:	4313      	orrs	r3, r2
 8007d18:	61a3      	str	r3, [r4, #24]
      break;
 8007d1a:	e7ea      	b.n	8007cf2 <HAL_TIM_PWM_ConfigChannel+0x76>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007d1c:	681f      	ldr	r7, [r3, #0]
 8007d1e:	0038      	movs	r0, r7
 8007d20:	f7ff fd5a 	bl	80077d8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007d24:	2204      	movs	r2, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007d26:	69fb      	ldr	r3, [r7, #28]
 8007d28:	431c      	orrs	r4, r3
 8007d2a:	61fc      	str	r4, [r7, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007d2c:	69fb      	ldr	r3, [r7, #28]
 8007d2e:	4393      	bics	r3, r2
 8007d30:	61fb      	str	r3, [r7, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007d32:	69fb      	ldr	r3, [r7, #28]
 8007d34:	692a      	ldr	r2, [r5, #16]
 8007d36:	4313      	orrs	r3, r2
 8007d38:	61fb      	str	r3, [r7, #28]
      break;
 8007d3a:	e7da      	b.n	8007cf2 <HAL_TIM_PWM_ConfigChannel+0x76>
 8007d3c:	fffffbff 	.word	0xfffffbff

08007d40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d40:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d42:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d44:	4d03      	ldr	r5, [pc, #12]	; (8007d54 <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d46:	430a      	orrs	r2, r1
 8007d48:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d4a:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d50:	6083      	str	r3, [r0, #8]
}
 8007d52:	bd30      	pop	{r4, r5, pc}
 8007d54:	ffff00ff 	.word	0xffff00ff

08007d58 <HAL_TIM_ConfigClockSource>:
{
 8007d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8007d5a:	0005      	movs	r5, r0
 8007d5c:	2402      	movs	r4, #2
 8007d5e:	353c      	adds	r5, #60	; 0x3c
 8007d60:	782a      	ldrb	r2, [r5, #0]
{
 8007d62:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8007d64:	0020      	movs	r0, r4
 8007d66:	2a01      	cmp	r2, #1
 8007d68:	d01c      	beq.n	8007da4 <HAL_TIM_ConfigClockSource+0x4c>
  htim->State = HAL_TIM_STATE_BUSY;
 8007d6a:	001e      	movs	r6, r3
  __HAL_LOCK(htim);
 8007d6c:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8007d6e:	363d      	adds	r6, #61	; 0x3d
  __HAL_LOCK(htim);
 8007d70:	702a      	strb	r2, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8007d72:	7034      	strb	r4, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 8007d74:	681c      	ldr	r4, [r3, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d76:	4843      	ldr	r0, [pc, #268]	; (8007e84 <HAL_TIM_ConfigClockSource+0x12c>)
  tmpsmcr = htim->Instance->SMCR;
 8007d78:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d7a:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8007d7c:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8007d7e:	680b      	ldr	r3, [r1, #0]
 8007d80:	2b60      	cmp	r3, #96	; 0x60
 8007d82:	d052      	beq.n	8007e2a <HAL_TIM_ConfigClockSource+0xd2>
 8007d84:	d82f      	bhi.n	8007de6 <HAL_TIM_ConfigClockSource+0x8e>
 8007d86:	2b40      	cmp	r3, #64	; 0x40
 8007d88:	d066      	beq.n	8007e58 <HAL_TIM_ConfigClockSource+0x100>
 8007d8a:	d814      	bhi.n	8007db6 <HAL_TIM_ConfigClockSource+0x5e>
 8007d8c:	2b20      	cmp	r3, #32
 8007d8e:	d00c      	beq.n	8007daa <HAL_TIM_ConfigClockSource+0x52>
 8007d90:	d809      	bhi.n	8007da6 <HAL_TIM_ConfigClockSource+0x4e>
 8007d92:	2110      	movs	r1, #16
 8007d94:	0018      	movs	r0, r3
 8007d96:	4388      	bics	r0, r1
 8007d98:	d007      	beq.n	8007daa <HAL_TIM_ConfigClockSource+0x52>
 8007d9a:	0010      	movs	r0, r2
  htim->State = HAL_TIM_STATE_READY;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 8007da0:	2300      	movs	r3, #0
 8007da2:	702b      	strb	r3, [r5, #0]
}
 8007da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 8007da6:	2b30      	cmp	r3, #48	; 0x30
 8007da8:	d1f7      	bne.n	8007d9a <HAL_TIM_ConfigClockSource+0x42>
  tmpsmcr &= ~TIM_SMCR_TS;
 8007daa:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8007dac:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007dae:	438a      	bics	r2, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007db0:	4313      	orrs	r3, r2
 8007db2:	2207      	movs	r2, #7
 8007db4:	e02b      	b.n	8007e0e <HAL_TIM_ConfigClockSource+0xb6>
  switch (sClockSourceConfig->ClockSource)
 8007db6:	2b50      	cmp	r3, #80	; 0x50
 8007db8:	d1ef      	bne.n	8007d9a <HAL_TIM_ConfigClockSource+0x42>
                               sClockSourceConfig->ClockPolarity,
 8007dba:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8007dbc:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8007dbe:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dc0:	6a27      	ldr	r7, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007dc2:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dc4:	4397      	bics	r7, r2
 8007dc6:	6227      	str	r7, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007dc8:	27f0      	movs	r7, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8007dca:	69a2      	ldr	r2, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007dcc:	43ba      	bics	r2, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007dce:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007dd0:	220a      	movs	r2, #10
 8007dd2:	4391      	bics	r1, r2
 8007dd4:	000a      	movs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8007dd6:	61a3      	str	r3, [r4, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007dd8:	2370      	movs	r3, #112	; 0x70
  tmpccer |= TIM_ICPolarity;
 8007dda:	4302      	orrs	r2, r0
  TIMx->CCER = tmpccer;
 8007ddc:	6222      	str	r2, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8007dde:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007de0:	439a      	bics	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007de2:	3b19      	subs	r3, #25
 8007de4:	e013      	b.n	8007e0e <HAL_TIM_ConfigClockSource+0xb6>
  switch (sClockSourceConfig->ClockSource)
 8007de6:	2780      	movs	r7, #128	; 0x80
  HAL_StatusTypeDef status = HAL_OK;
 8007de8:	2000      	movs	r0, #0
  switch (sClockSourceConfig->ClockSource)
 8007dea:	017f      	lsls	r7, r7, #5
 8007dec:	42bb      	cmp	r3, r7
 8007dee:	d0d5      	beq.n	8007d9c <HAL_TIM_ConfigClockSource+0x44>
 8007df0:	2080      	movs	r0, #128	; 0x80
 8007df2:	0180      	lsls	r0, r0, #6
 8007df4:	4283      	cmp	r3, r0
 8007df6:	d00e      	beq.n	8007e16 <HAL_TIM_ConfigClockSource+0xbe>
 8007df8:	0010      	movs	r0, r2
 8007dfa:	2b70      	cmp	r3, #112	; 0x70
 8007dfc:	d1ce      	bne.n	8007d9c <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8007dfe:	68cb      	ldr	r3, [r1, #12]
 8007e00:	684a      	ldr	r2, [r1, #4]
 8007e02:	0020      	movs	r0, r4
 8007e04:	6889      	ldr	r1, [r1, #8]
 8007e06:	f7ff ff9b 	bl	8007d40 <TIM_ETR_SetConfig>
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e0a:	2377      	movs	r3, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 8007e0c:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e0e:	4313      	orrs	r3, r2
  HAL_StatusTypeDef status = HAL_OK;
 8007e10:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8007e12:	60a3      	str	r3, [r4, #8]
}
 8007e14:	e7c2      	b.n	8007d9c <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8007e16:	68cb      	ldr	r3, [r1, #12]
 8007e18:	684a      	ldr	r2, [r1, #4]
 8007e1a:	0020      	movs	r0, r4
 8007e1c:	6889      	ldr	r1, [r1, #8]
 8007e1e:	f7ff ff8f 	bl	8007d40 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e22:	2380      	movs	r3, #128	; 0x80
 8007e24:	68a2      	ldr	r2, [r4, #8]
 8007e26:	01db      	lsls	r3, r3, #7
 8007e28:	e7f1      	b.n	8007e0e <HAL_TIM_ConfigClockSource+0xb6>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e2a:	2010      	movs	r0, #16
                               sClockSourceConfig->ClockPolarity,
 8007e2c:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8007e2e:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e30:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e32:	4f15      	ldr	r7, [pc, #84]	; (8007e88 <HAL_TIM_ConfigClockSource+0x130>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e34:	4381      	bics	r1, r0
 8007e36:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e38:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e3a:	0312      	lsls	r2, r2, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e3c:	4038      	ands	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e3e:	4302      	orrs	r2, r0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e40:	20a0      	movs	r0, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8007e42:	6a21      	ldr	r1, [r4, #32]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e44:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e46:	4381      	bics	r1, r0
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e48:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1 ;
 8007e4a:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 8007e4c:	6223      	str	r3, [r4, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e4e:	2370      	movs	r3, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8007e50:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e52:	439a      	bics	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e54:	3b09      	subs	r3, #9
 8007e56:	e7da      	b.n	8007e0e <HAL_TIM_ConfigClockSource+0xb6>
                               sClockSourceConfig->ClockPolarity,
 8007e58:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8007e5a:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8007e5c:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e5e:	6a27      	ldr	r7, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e60:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e62:	4397      	bics	r7, r2
 8007e64:	6227      	str	r7, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e66:	27f0      	movs	r7, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8007e68:	69a2      	ldr	r2, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e6a:	43ba      	bics	r2, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e6c:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e6e:	220a      	movs	r2, #10
 8007e70:	4391      	bics	r1, r2
 8007e72:	000a      	movs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8007e74:	61a3      	str	r3, [r4, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e76:	2370      	movs	r3, #112	; 0x70
  tmpccer |= TIM_ICPolarity;
 8007e78:	4302      	orrs	r2, r0
  TIMx->CCER = tmpccer;
 8007e7a:	6222      	str	r2, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8007e7c:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e7e:	439a      	bics	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e80:	3b29      	subs	r3, #41	; 0x29
 8007e82:	e7c4      	b.n	8007e0e <HAL_TIM_ConfigClockSource+0xb6>
 8007e84:	ffff0088 	.word	0xffff0088
 8007e88:	ffff0fff 	.word	0xffff0fff

08007e8c <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e8c:	231f      	movs	r3, #31
{
 8007e8e:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e90:	2401      	movs	r4, #1
 8007e92:	4019      	ands	r1, r3
 8007e94:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007e96:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8007e98:	6a03      	ldr	r3, [r0, #32]
 8007e9a:	43a3      	bics	r3, r4
 8007e9c:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007e9e:	6a03      	ldr	r3, [r0, #32]
 8007ea0:	431a      	orrs	r2, r3
 8007ea2:	6202      	str	r2, [r0, #32]
}
 8007ea4:	bd10      	pop	{r4, pc}
	...

08007ea8 <HAL_TIM_OC_Start>:
{
 8007ea8:	0002      	movs	r2, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007eaa:	0003      	movs	r3, r0
{
 8007eac:	b510      	push	{r4, lr}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007eae:	2900      	cmp	r1, #0
 8007eb0:	d105      	bne.n	8007ebe <HAL_TIM_OC_Start+0x16>
    return HAL_ERROR;
 8007eb2:	2001      	movs	r0, #1
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007eb4:	333e      	adds	r3, #62	; 0x3e
 8007eb6:	781c      	ldrb	r4, [r3, #0]
 8007eb8:	4284      	cmp	r4, r0
 8007eba:	d018      	beq.n	8007eee <HAL_TIM_OC_Start+0x46>
}
 8007ebc:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007ebe:	2904      	cmp	r1, #4
 8007ec0:	d10f      	bne.n	8007ee2 <HAL_TIM_OC_Start+0x3a>
 8007ec2:	333f      	adds	r3, #63	; 0x3f
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	3b01      	subs	r3, #1
 8007ec8:	1e58      	subs	r0, r3, #1
 8007eca:	4183      	sbcs	r3, r0
 8007ecc:	b2db      	uxtb	r3, r3
    return HAL_ERROR;
 8007ece:	2001      	movs	r0, #1
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d1f3      	bne.n	8007ebc <HAL_TIM_OC_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ed4:	2302      	movs	r3, #2
 8007ed6:	0010      	movs	r0, r2
 8007ed8:	2904      	cmp	r1, #4
 8007eda:	d126      	bne.n	8007f2a <HAL_TIM_OC_Start+0x82>
 8007edc:	303f      	adds	r0, #63	; 0x3f
 8007ede:	7003      	strb	r3, [r0, #0]
 8007ee0:	e007      	b.n	8007ef2 <HAL_TIM_OC_Start+0x4a>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007ee2:	2908      	cmp	r1, #8
 8007ee4:	d101      	bne.n	8007eea <HAL_TIM_OC_Start+0x42>
 8007ee6:	3340      	adds	r3, #64	; 0x40
 8007ee8:	e7ec      	b.n	8007ec4 <HAL_TIM_OC_Start+0x1c>
 8007eea:	3341      	adds	r3, #65	; 0x41
 8007eec:	e7ea      	b.n	8007ec4 <HAL_TIM_OC_Start+0x1c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007eee:	2002      	movs	r0, #2
 8007ef0:	7018      	strb	r0, [r3, #0]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007ef2:	6814      	ldr	r4, [r2, #0]
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	0020      	movs	r0, r4
 8007ef8:	f7ff ffc8 	bl	8007e8c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007efc:	4a17      	ldr	r2, [pc, #92]	; (8007f5c <HAL_TIM_OC_Start+0xb4>)
 8007efe:	4294      	cmp	r4, r2
 8007f00:	d019      	beq.n	8007f36 <HAL_TIM_OC_Start+0x8e>
 8007f02:	4b17      	ldr	r3, [pc, #92]	; (8007f60 <HAL_TIM_OC_Start+0xb8>)
 8007f04:	429c      	cmp	r4, r3
 8007f06:	d016      	beq.n	8007f36 <HAL_TIM_OC_Start+0x8e>
 8007f08:	4b16      	ldr	r3, [pc, #88]	; (8007f64 <HAL_TIM_OC_Start+0xbc>)
 8007f0a:	429c      	cmp	r4, r3
 8007f0c:	d013      	beq.n	8007f36 <HAL_TIM_OC_Start+0x8e>
 8007f0e:	4b16      	ldr	r3, [pc, #88]	; (8007f68 <HAL_TIM_OC_Start+0xc0>)
 8007f10:	429c      	cmp	r4, r3
 8007f12:	d010      	beq.n	8007f36 <HAL_TIM_OC_Start+0x8e>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f14:	2380      	movs	r3, #128	; 0x80
 8007f16:	05db      	lsls	r3, r3, #23
 8007f18:	429c      	cmp	r4, r3
 8007f1a:	d114      	bne.n	8007f46 <HAL_TIM_OC_Start+0x9e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f1c:	2207      	movs	r2, #7
 8007f1e:	68a3      	ldr	r3, [r4, #8]
 8007f20:	4013      	ands	r3, r2
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f22:	2b06      	cmp	r3, #6
 8007f24:	d115      	bne.n	8007f52 <HAL_TIM_OC_Start+0xaa>
  return HAL_OK;
 8007f26:	2000      	movs	r0, #0
 8007f28:	e7c8      	b.n	8007ebc <HAL_TIM_OC_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f2a:	2908      	cmp	r1, #8
 8007f2c:	d101      	bne.n	8007f32 <HAL_TIM_OC_Start+0x8a>
 8007f2e:	3040      	adds	r0, #64	; 0x40
 8007f30:	e7d5      	b.n	8007ede <HAL_TIM_OC_Start+0x36>
 8007f32:	3041      	adds	r0, #65	; 0x41
 8007f34:	e7d3      	b.n	8007ede <HAL_TIM_OC_Start+0x36>
    __HAL_TIM_MOE_ENABLE(htim);
 8007f36:	2380      	movs	r3, #128	; 0x80
 8007f38:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007f3a:	021b      	lsls	r3, r3, #8
 8007f3c:	430b      	orrs	r3, r1
 8007f3e:	6463      	str	r3, [r4, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f40:	4294      	cmp	r4, r2
 8007f42:	d1e7      	bne.n	8007f14 <HAL_TIM_OC_Start+0x6c>
 8007f44:	e7ea      	b.n	8007f1c <HAL_TIM_OC_Start+0x74>
 8007f46:	4b09      	ldr	r3, [pc, #36]	; (8007f6c <HAL_TIM_OC_Start+0xc4>)
 8007f48:	429c      	cmp	r4, r3
 8007f4a:	d0e7      	beq.n	8007f1c <HAL_TIM_OC_Start+0x74>
 8007f4c:	4b04      	ldr	r3, [pc, #16]	; (8007f60 <HAL_TIM_OC_Start+0xb8>)
 8007f4e:	429c      	cmp	r4, r3
 8007f50:	d0e4      	beq.n	8007f1c <HAL_TIM_OC_Start+0x74>
      __HAL_TIM_ENABLE(htim);
 8007f52:	2301      	movs	r3, #1
 8007f54:	6822      	ldr	r2, [r4, #0]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	6023      	str	r3, [r4, #0]
 8007f5a:	e7e4      	b.n	8007f26 <HAL_TIM_OC_Start+0x7e>
 8007f5c:	40012c00 	.word	0x40012c00
 8007f60:	40014000 	.word	0x40014000
 8007f64:	40014400 	.word	0x40014400
 8007f68:	40014800 	.word	0x40014800
 8007f6c:	40000400 	.word	0x40000400

08007f70 <HAL_TIM_PWM_Start>:
 8007f70:	b510      	push	{r4, lr}
 8007f72:	f7ff ff99 	bl	8007ea8 <HAL_TIM_OC_Start>
 8007f76:	bd10      	pop	{r4, pc}

08007f78 <HAL_TIM_OC_Stop>:
{
 8007f78:	b570      	push	{r4, r5, r6, lr}
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007f7a:	6805      	ldr	r5, [r0, #0]
 8007f7c:	2200      	movs	r2, #0
{
 8007f7e:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007f80:	0028      	movs	r0, r5
{
 8007f82:	000e      	movs	r6, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007f84:	f7ff ff82 	bl	8007e8c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007f88:	4b19      	ldr	r3, [pc, #100]	; (8007ff0 <HAL_TIM_OC_Stop+0x78>)
 8007f8a:	4a1a      	ldr	r2, [pc, #104]	; (8007ff4 <HAL_TIM_OC_Stop+0x7c>)
 8007f8c:	429d      	cmp	r5, r3
 8007f8e:	d008      	beq.n	8007fa2 <HAL_TIM_OC_Stop+0x2a>
 8007f90:	4b19      	ldr	r3, [pc, #100]	; (8007ff8 <HAL_TIM_OC_Stop+0x80>)
 8007f92:	429d      	cmp	r5, r3
 8007f94:	d005      	beq.n	8007fa2 <HAL_TIM_OC_Stop+0x2a>
 8007f96:	4b19      	ldr	r3, [pc, #100]	; (8007ffc <HAL_TIM_OC_Stop+0x84>)
 8007f98:	429d      	cmp	r5, r3
 8007f9a:	d002      	beq.n	8007fa2 <HAL_TIM_OC_Stop+0x2a>
 8007f9c:	4b18      	ldr	r3, [pc, #96]	; (8008000 <HAL_TIM_OC_Stop+0x88>)
 8007f9e:	429d      	cmp	r5, r3
 8007fa0:	d10a      	bne.n	8007fb8 <HAL_TIM_OC_Stop+0x40>
    __HAL_TIM_MOE_DISABLE(htim);
 8007fa2:	6a2b      	ldr	r3, [r5, #32]
 8007fa4:	4213      	tst	r3, r2
 8007fa6:	d107      	bne.n	8007fb8 <HAL_TIM_OC_Stop+0x40>
 8007fa8:	6a29      	ldr	r1, [r5, #32]
 8007faa:	4b16      	ldr	r3, [pc, #88]	; (8008004 <HAL_TIM_OC_Stop+0x8c>)
 8007fac:	4219      	tst	r1, r3
 8007fae:	d103      	bne.n	8007fb8 <HAL_TIM_OC_Stop+0x40>
 8007fb0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8007fb2:	4915      	ldr	r1, [pc, #84]	; (8008008 <HAL_TIM_OC_Stop+0x90>)
 8007fb4:	400b      	ands	r3, r1
 8007fb6:	646b      	str	r3, [r5, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8007fb8:	6a2b      	ldr	r3, [r5, #32]
 8007fba:	4213      	tst	r3, r2
 8007fbc:	d107      	bne.n	8007fce <HAL_TIM_OC_Stop+0x56>
 8007fbe:	6a2a      	ldr	r2, [r5, #32]
 8007fc0:	4b10      	ldr	r3, [pc, #64]	; (8008004 <HAL_TIM_OC_Stop+0x8c>)
 8007fc2:	421a      	tst	r2, r3
 8007fc4:	d103      	bne.n	8007fce <HAL_TIM_OC_Stop+0x56>
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	682b      	ldr	r3, [r5, #0]
 8007fca:	4393      	bics	r3, r2
 8007fcc:	602b      	str	r3, [r5, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007fce:	2301      	movs	r3, #1
 8007fd0:	2e00      	cmp	r6, #0
 8007fd2:	d103      	bne.n	8007fdc <HAL_TIM_OC_Stop+0x64>
 8007fd4:	343e      	adds	r4, #62	; 0x3e
}
 8007fd6:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007fd8:	7023      	strb	r3, [r4, #0]
}
 8007fda:	bd70      	pop	{r4, r5, r6, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007fdc:	2e04      	cmp	r6, #4
 8007fde:	d101      	bne.n	8007fe4 <HAL_TIM_OC_Stop+0x6c>
 8007fe0:	343f      	adds	r4, #63	; 0x3f
 8007fe2:	e7f8      	b.n	8007fd6 <HAL_TIM_OC_Stop+0x5e>
 8007fe4:	2e08      	cmp	r6, #8
 8007fe6:	d101      	bne.n	8007fec <HAL_TIM_OC_Stop+0x74>
 8007fe8:	3440      	adds	r4, #64	; 0x40
 8007fea:	e7f4      	b.n	8007fd6 <HAL_TIM_OC_Stop+0x5e>
 8007fec:	3441      	adds	r4, #65	; 0x41
 8007fee:	e7f2      	b.n	8007fd6 <HAL_TIM_OC_Stop+0x5e>
 8007ff0:	40012c00 	.word	0x40012c00
 8007ff4:	00001111 	.word	0x00001111
 8007ff8:	40014000 	.word	0x40014000
 8007ffc:	40014400 	.word	0x40014400
 8008000:	40014800 	.word	0x40014800
 8008004:	00000444 	.word	0x00000444
 8008008:	ffff7fff 	.word	0xffff7fff

0800800c <HAL_TIM_PWM_Stop>:
 800800c:	b510      	push	{r4, lr}
 800800e:	f7ff ffb3 	bl	8007f78 <HAL_TIM_OC_Stop>
 8008012:	bd10      	pop	{r4, pc}

08008014 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008014:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008016:	0004      	movs	r4, r0
 8008018:	2202      	movs	r2, #2
 800801a:	343c      	adds	r4, #60	; 0x3c
 800801c:	7825      	ldrb	r5, [r4, #0]
{
 800801e:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8008020:	0010      	movs	r0, r2
 8008022:	2d01      	cmp	r5, #1
 8008024:	d020      	beq.n	8008068 <HAL_TIMEx_MasterConfigSynchronization+0x54>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008026:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008028:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 800802a:	353d      	adds	r5, #61	; 0x3d
 800802c:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8008032:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8008034:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008036:	680e      	ldr	r6, [r1, #0]
 8008038:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800803a:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800803c:	480b      	ldr	r0, [pc, #44]	; (800806c <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 800803e:	4283      	cmp	r3, r0
 8008040:	d009      	beq.n	8008056 <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8008042:	2080      	movs	r0, #128	; 0x80
 8008044:	05c0      	lsls	r0, r0, #23
 8008046:	4283      	cmp	r3, r0
 8008048:	d005      	beq.n	8008056 <HAL_TIMEx_MasterConfigSynchronization+0x42>
 800804a:	4809      	ldr	r0, [pc, #36]	; (8008070 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
 800804c:	4283      	cmp	r3, r0
 800804e:	d002      	beq.n	8008056 <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8008050:	4808      	ldr	r0, [pc, #32]	; (8008074 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8008052:	4283      	cmp	r3, r0
 8008054:	d104      	bne.n	8008060 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008056:	2080      	movs	r0, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008058:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800805a:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800805c:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800805e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008060:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8008062:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8008064:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8008066:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8008068:	bd70      	pop	{r4, r5, r6, pc}
 800806a:	46c0      	nop			; (mov r8, r8)
 800806c:	40012c00 	.word	0x40012c00
 8008070:	40000400 	.word	0x40000400
 8008074:	40014000 	.word	0x40014000

08008078 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008078:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800807a:	0004      	movs	r4, r0
 800807c:	343c      	adds	r4, #60	; 0x3c
 800807e:	7823      	ldrb	r3, [r4, #0]
{
 8008080:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 8008082:	2002      	movs	r0, #2
 8008084:	2b01      	cmp	r3, #1
 8008086:	d01c      	beq.n	80080c2 <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008088:	68cb      	ldr	r3, [r1, #12]
 800808a:	480e      	ldr	r0, [pc, #56]	; (80080c4 <HAL_TIMEx_ConfigBreakDeadTime+0x4c>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800808c:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800808e:	4003      	ands	r3, r0
 8008090:	6888      	ldr	r0, [r1, #8]
 8008092:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008094:	480c      	ldr	r0, [pc, #48]	; (80080c8 <HAL_TIMEx_ConfigBreakDeadTime+0x50>)
 8008096:	4003      	ands	r3, r0
 8008098:	6848      	ldr	r0, [r1, #4]
 800809a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800809c:	480b      	ldr	r0, [pc, #44]	; (80080cc <HAL_TIMEx_ConfigBreakDeadTime+0x54>)
 800809e:	4003      	ands	r3, r0
 80080a0:	6808      	ldr	r0, [r1, #0]
 80080a2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80080a4:	480a      	ldr	r0, [pc, #40]	; (80080d0 <HAL_TIMEx_ConfigBreakDeadTime+0x58>)
 80080a6:	4003      	ands	r3, r0
 80080a8:	6908      	ldr	r0, [r1, #16]
 80080aa:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80080ac:	4809      	ldr	r0, [pc, #36]	; (80080d4 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>)
 80080ae:	4003      	ands	r3, r0
 80080b0:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80080b2:	69c9      	ldr	r1, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80080b4:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80080b6:	4808      	ldr	r0, [pc, #32]	; (80080d8 <HAL_TIMEx_ConfigBreakDeadTime+0x60>)
 80080b8:	4003      	ands	r3, r0

  __HAL_UNLOCK(htim);
 80080ba:	2000      	movs	r0, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80080bc:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 80080be:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 80080c0:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 80080c2:	bd10      	pop	{r4, pc}
 80080c4:	fffffcff 	.word	0xfffffcff
 80080c8:	fffffbff 	.word	0xfffffbff
 80080cc:	fffff7ff 	.word	0xfffff7ff
 80080d0:	ffffefff 	.word	0xffffefff
 80080d4:	ffffdfff 	.word	0xffffdfff
 80080d8:	ffffbfff 	.word	0xffffbfff

080080dc <HAL_TIMEx_CommutCallback>:
 80080dc:	4770      	bx	lr

080080de <HAL_TIMEx_BreakCallback>:
 80080de:	4770      	bx	lr

080080e0 <__cvt>:
 80080e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080e2:	001e      	movs	r6, r3
 80080e4:	2300      	movs	r3, #0
 80080e6:	0014      	movs	r4, r2
 80080e8:	b08b      	sub	sp, #44	; 0x2c
 80080ea:	429e      	cmp	r6, r3
 80080ec:	da04      	bge.n	80080f8 <__cvt+0x18>
 80080ee:	2180      	movs	r1, #128	; 0x80
 80080f0:	0609      	lsls	r1, r1, #24
 80080f2:	1873      	adds	r3, r6, r1
 80080f4:	001e      	movs	r6, r3
 80080f6:	232d      	movs	r3, #45	; 0x2d
 80080f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80080fa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80080fc:	7013      	strb	r3, [r2, #0]
 80080fe:	2320      	movs	r3, #32
 8008100:	2203      	movs	r2, #3
 8008102:	439f      	bics	r7, r3
 8008104:	2f46      	cmp	r7, #70	; 0x46
 8008106:	d007      	beq.n	8008118 <__cvt+0x38>
 8008108:	003b      	movs	r3, r7
 800810a:	3b45      	subs	r3, #69	; 0x45
 800810c:	4259      	negs	r1, r3
 800810e:	414b      	adcs	r3, r1
 8008110:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008112:	3a01      	subs	r2, #1
 8008114:	18cb      	adds	r3, r1, r3
 8008116:	9310      	str	r3, [sp, #64]	; 0x40
 8008118:	ab09      	add	r3, sp, #36	; 0x24
 800811a:	9304      	str	r3, [sp, #16]
 800811c:	ab08      	add	r3, sp, #32
 800811e:	9303      	str	r3, [sp, #12]
 8008120:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008122:	9200      	str	r2, [sp, #0]
 8008124:	9302      	str	r3, [sp, #8]
 8008126:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008128:	0022      	movs	r2, r4
 800812a:	9301      	str	r3, [sp, #4]
 800812c:	0033      	movs	r3, r6
 800812e:	f000 feaf 	bl	8008e90 <_dtoa_r>
 8008132:	0005      	movs	r5, r0
 8008134:	2f47      	cmp	r7, #71	; 0x47
 8008136:	d102      	bne.n	800813e <__cvt+0x5e>
 8008138:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800813a:	07db      	lsls	r3, r3, #31
 800813c:	d528      	bpl.n	8008190 <__cvt+0xb0>
 800813e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008140:	18eb      	adds	r3, r5, r3
 8008142:	9307      	str	r3, [sp, #28]
 8008144:	2f46      	cmp	r7, #70	; 0x46
 8008146:	d114      	bne.n	8008172 <__cvt+0x92>
 8008148:	782b      	ldrb	r3, [r5, #0]
 800814a:	2b30      	cmp	r3, #48	; 0x30
 800814c:	d10c      	bne.n	8008168 <__cvt+0x88>
 800814e:	2200      	movs	r2, #0
 8008150:	2300      	movs	r3, #0
 8008152:	0020      	movs	r0, r4
 8008154:	0031      	movs	r1, r6
 8008156:	f7f8 f985 	bl	8000464 <__aeabi_dcmpeq>
 800815a:	2800      	cmp	r0, #0
 800815c:	d104      	bne.n	8008168 <__cvt+0x88>
 800815e:	2301      	movs	r3, #1
 8008160:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008162:	1a9b      	subs	r3, r3, r2
 8008164:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008166:	6013      	str	r3, [r2, #0]
 8008168:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800816a:	9a07      	ldr	r2, [sp, #28]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	18d3      	adds	r3, r2, r3
 8008170:	9307      	str	r3, [sp, #28]
 8008172:	2200      	movs	r2, #0
 8008174:	2300      	movs	r3, #0
 8008176:	0020      	movs	r0, r4
 8008178:	0031      	movs	r1, r6
 800817a:	f7f8 f973 	bl	8000464 <__aeabi_dcmpeq>
 800817e:	2800      	cmp	r0, #0
 8008180:	d001      	beq.n	8008186 <__cvt+0xa6>
 8008182:	9b07      	ldr	r3, [sp, #28]
 8008184:	9309      	str	r3, [sp, #36]	; 0x24
 8008186:	2230      	movs	r2, #48	; 0x30
 8008188:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800818a:	9907      	ldr	r1, [sp, #28]
 800818c:	428b      	cmp	r3, r1
 800818e:	d306      	bcc.n	800819e <__cvt+0xbe>
 8008190:	0028      	movs	r0, r5
 8008192:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008194:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008196:	1b5b      	subs	r3, r3, r5
 8008198:	6013      	str	r3, [r2, #0]
 800819a:	b00b      	add	sp, #44	; 0x2c
 800819c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800819e:	1c59      	adds	r1, r3, #1
 80081a0:	9109      	str	r1, [sp, #36]	; 0x24
 80081a2:	701a      	strb	r2, [r3, #0]
 80081a4:	e7f0      	b.n	8008188 <__cvt+0xa8>

080081a6 <__exponent>:
 80081a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081a8:	1c83      	adds	r3, r0, #2
 80081aa:	b087      	sub	sp, #28
 80081ac:	9303      	str	r3, [sp, #12]
 80081ae:	0005      	movs	r5, r0
 80081b0:	000c      	movs	r4, r1
 80081b2:	232b      	movs	r3, #43	; 0x2b
 80081b4:	7002      	strb	r2, [r0, #0]
 80081b6:	2900      	cmp	r1, #0
 80081b8:	da01      	bge.n	80081be <__exponent+0x18>
 80081ba:	424c      	negs	r4, r1
 80081bc:	3302      	adds	r3, #2
 80081be:	706b      	strb	r3, [r5, #1]
 80081c0:	2c09      	cmp	r4, #9
 80081c2:	dd2f      	ble.n	8008224 <__exponent+0x7e>
 80081c4:	270a      	movs	r7, #10
 80081c6:	ab04      	add	r3, sp, #16
 80081c8:	1dde      	adds	r6, r3, #7
 80081ca:	0020      	movs	r0, r4
 80081cc:	0039      	movs	r1, r7
 80081ce:	9601      	str	r6, [sp, #4]
 80081d0:	f7f8 f926 	bl	8000420 <__aeabi_idivmod>
 80081d4:	3e01      	subs	r6, #1
 80081d6:	3130      	adds	r1, #48	; 0x30
 80081d8:	0020      	movs	r0, r4
 80081da:	7031      	strb	r1, [r6, #0]
 80081dc:	0039      	movs	r1, r7
 80081de:	9402      	str	r4, [sp, #8]
 80081e0:	f7f8 f838 	bl	8000254 <__divsi3>
 80081e4:	9b02      	ldr	r3, [sp, #8]
 80081e6:	0004      	movs	r4, r0
 80081e8:	2b63      	cmp	r3, #99	; 0x63
 80081ea:	dcee      	bgt.n	80081ca <__exponent+0x24>
 80081ec:	9b01      	ldr	r3, [sp, #4]
 80081ee:	3430      	adds	r4, #48	; 0x30
 80081f0:	1e9a      	subs	r2, r3, #2
 80081f2:	0013      	movs	r3, r2
 80081f4:	9903      	ldr	r1, [sp, #12]
 80081f6:	7014      	strb	r4, [r2, #0]
 80081f8:	a804      	add	r0, sp, #16
 80081fa:	3007      	adds	r0, #7
 80081fc:	4298      	cmp	r0, r3
 80081fe:	d80c      	bhi.n	800821a <__exponent+0x74>
 8008200:	2300      	movs	r3, #0
 8008202:	4282      	cmp	r2, r0
 8008204:	d804      	bhi.n	8008210 <__exponent+0x6a>
 8008206:	aa04      	add	r2, sp, #16
 8008208:	3309      	adds	r3, #9
 800820a:	189b      	adds	r3, r3, r2
 800820c:	9a01      	ldr	r2, [sp, #4]
 800820e:	1a9b      	subs	r3, r3, r2
 8008210:	9a03      	ldr	r2, [sp, #12]
 8008212:	18d3      	adds	r3, r2, r3
 8008214:	1b58      	subs	r0, r3, r5
 8008216:	b007      	add	sp, #28
 8008218:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800821a:	7818      	ldrb	r0, [r3, #0]
 800821c:	3301      	adds	r3, #1
 800821e:	7008      	strb	r0, [r1, #0]
 8008220:	3101      	adds	r1, #1
 8008222:	e7e9      	b.n	80081f8 <__exponent+0x52>
 8008224:	2330      	movs	r3, #48	; 0x30
 8008226:	3430      	adds	r4, #48	; 0x30
 8008228:	70ab      	strb	r3, [r5, #2]
 800822a:	70ec      	strb	r4, [r5, #3]
 800822c:	1d2b      	adds	r3, r5, #4
 800822e:	e7f1      	b.n	8008214 <__exponent+0x6e>

08008230 <_printf_float>:
 8008230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008232:	b095      	sub	sp, #84	; 0x54
 8008234:	000c      	movs	r4, r1
 8008236:	9208      	str	r2, [sp, #32]
 8008238:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800823a:	9309      	str	r3, [sp, #36]	; 0x24
 800823c:	0007      	movs	r7, r0
 800823e:	f000 fd05 	bl	8008c4c <_localeconv_r>
 8008242:	6803      	ldr	r3, [r0, #0]
 8008244:	0018      	movs	r0, r3
 8008246:	930c      	str	r3, [sp, #48]	; 0x30
 8008248:	f7f7 ff5e 	bl	8000108 <strlen>
 800824c:	2300      	movs	r3, #0
 800824e:	9312      	str	r3, [sp, #72]	; 0x48
 8008250:	7e23      	ldrb	r3, [r4, #24]
 8008252:	2207      	movs	r2, #7
 8008254:	930a      	str	r3, [sp, #40]	; 0x28
 8008256:	6823      	ldr	r3, [r4, #0]
 8008258:	900d      	str	r0, [sp, #52]	; 0x34
 800825a:	930b      	str	r3, [sp, #44]	; 0x2c
 800825c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800825e:	682b      	ldr	r3, [r5, #0]
 8008260:	05c9      	lsls	r1, r1, #23
 8008262:	d547      	bpl.n	80082f4 <_printf_float+0xc4>
 8008264:	189b      	adds	r3, r3, r2
 8008266:	4393      	bics	r3, r2
 8008268:	001a      	movs	r2, r3
 800826a:	3208      	adds	r2, #8
 800826c:	602a      	str	r2, [r5, #0]
 800826e:	681e      	ldr	r6, [r3, #0]
 8008270:	685d      	ldr	r5, [r3, #4]
 8008272:	0032      	movs	r2, r6
 8008274:	002b      	movs	r3, r5
 8008276:	64a2      	str	r2, [r4, #72]	; 0x48
 8008278:	64e3      	str	r3, [r4, #76]	; 0x4c
 800827a:	2201      	movs	r2, #1
 800827c:	006b      	lsls	r3, r5, #1
 800827e:	085b      	lsrs	r3, r3, #1
 8008280:	930e      	str	r3, [sp, #56]	; 0x38
 8008282:	0030      	movs	r0, r6
 8008284:	4bab      	ldr	r3, [pc, #684]	; (8008534 <_printf_float+0x304>)
 8008286:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008288:	4252      	negs	r2, r2
 800828a:	f7fa fe39 	bl	8002f00 <__aeabi_dcmpun>
 800828e:	2800      	cmp	r0, #0
 8008290:	d132      	bne.n	80082f8 <_printf_float+0xc8>
 8008292:	2201      	movs	r2, #1
 8008294:	0030      	movs	r0, r6
 8008296:	4ba7      	ldr	r3, [pc, #668]	; (8008534 <_printf_float+0x304>)
 8008298:	990e      	ldr	r1, [sp, #56]	; 0x38
 800829a:	4252      	negs	r2, r2
 800829c:	f7f8 f8f2 	bl	8000484 <__aeabi_dcmple>
 80082a0:	2800      	cmp	r0, #0
 80082a2:	d129      	bne.n	80082f8 <_printf_float+0xc8>
 80082a4:	2200      	movs	r2, #0
 80082a6:	2300      	movs	r3, #0
 80082a8:	0030      	movs	r0, r6
 80082aa:	0029      	movs	r1, r5
 80082ac:	f7f8 f8e0 	bl	8000470 <__aeabi_dcmplt>
 80082b0:	2800      	cmp	r0, #0
 80082b2:	d003      	beq.n	80082bc <_printf_float+0x8c>
 80082b4:	0023      	movs	r3, r4
 80082b6:	222d      	movs	r2, #45	; 0x2d
 80082b8:	3343      	adds	r3, #67	; 0x43
 80082ba:	701a      	strb	r2, [r3, #0]
 80082bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082be:	4d9e      	ldr	r5, [pc, #632]	; (8008538 <_printf_float+0x308>)
 80082c0:	2b47      	cmp	r3, #71	; 0x47
 80082c2:	d900      	bls.n	80082c6 <_printf_float+0x96>
 80082c4:	4d9d      	ldr	r5, [pc, #628]	; (800853c <_printf_float+0x30c>)
 80082c6:	2303      	movs	r3, #3
 80082c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80082ca:	6123      	str	r3, [r4, #16]
 80082cc:	3301      	adds	r3, #1
 80082ce:	439a      	bics	r2, r3
 80082d0:	2300      	movs	r3, #0
 80082d2:	6022      	str	r2, [r4, #0]
 80082d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80082d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082d8:	0021      	movs	r1, r4
 80082da:	9300      	str	r3, [sp, #0]
 80082dc:	0038      	movs	r0, r7
 80082de:	9b08      	ldr	r3, [sp, #32]
 80082e0:	aa13      	add	r2, sp, #76	; 0x4c
 80082e2:	f000 f9fb 	bl	80086dc <_printf_common>
 80082e6:	3001      	adds	r0, #1
 80082e8:	d000      	beq.n	80082ec <_printf_float+0xbc>
 80082ea:	e0a3      	b.n	8008434 <_printf_float+0x204>
 80082ec:	2001      	movs	r0, #1
 80082ee:	4240      	negs	r0, r0
 80082f0:	b015      	add	sp, #84	; 0x54
 80082f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082f4:	3307      	adds	r3, #7
 80082f6:	e7b6      	b.n	8008266 <_printf_float+0x36>
 80082f8:	0032      	movs	r2, r6
 80082fa:	002b      	movs	r3, r5
 80082fc:	0030      	movs	r0, r6
 80082fe:	0029      	movs	r1, r5
 8008300:	f7fa fdfe 	bl	8002f00 <__aeabi_dcmpun>
 8008304:	2800      	cmp	r0, #0
 8008306:	d00b      	beq.n	8008320 <_printf_float+0xf0>
 8008308:	2d00      	cmp	r5, #0
 800830a:	da03      	bge.n	8008314 <_printf_float+0xe4>
 800830c:	0023      	movs	r3, r4
 800830e:	222d      	movs	r2, #45	; 0x2d
 8008310:	3343      	adds	r3, #67	; 0x43
 8008312:	701a      	strb	r2, [r3, #0]
 8008314:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008316:	4d8a      	ldr	r5, [pc, #552]	; (8008540 <_printf_float+0x310>)
 8008318:	2b47      	cmp	r3, #71	; 0x47
 800831a:	d9d4      	bls.n	80082c6 <_printf_float+0x96>
 800831c:	4d89      	ldr	r5, [pc, #548]	; (8008544 <_printf_float+0x314>)
 800831e:	e7d2      	b.n	80082c6 <_printf_float+0x96>
 8008320:	2220      	movs	r2, #32
 8008322:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008324:	6863      	ldr	r3, [r4, #4]
 8008326:	4391      	bics	r1, r2
 8008328:	910e      	str	r1, [sp, #56]	; 0x38
 800832a:	1c5a      	adds	r2, r3, #1
 800832c:	d14a      	bne.n	80083c4 <_printf_float+0x194>
 800832e:	3307      	adds	r3, #7
 8008330:	6063      	str	r3, [r4, #4]
 8008332:	2380      	movs	r3, #128	; 0x80
 8008334:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008336:	00db      	lsls	r3, r3, #3
 8008338:	4313      	orrs	r3, r2
 800833a:	2200      	movs	r2, #0
 800833c:	9206      	str	r2, [sp, #24]
 800833e:	aa12      	add	r2, sp, #72	; 0x48
 8008340:	9205      	str	r2, [sp, #20]
 8008342:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008344:	6023      	str	r3, [r4, #0]
 8008346:	9204      	str	r2, [sp, #16]
 8008348:	aa11      	add	r2, sp, #68	; 0x44
 800834a:	9203      	str	r2, [sp, #12]
 800834c:	2223      	movs	r2, #35	; 0x23
 800834e:	a908      	add	r1, sp, #32
 8008350:	9301      	str	r3, [sp, #4]
 8008352:	6863      	ldr	r3, [r4, #4]
 8008354:	1852      	adds	r2, r2, r1
 8008356:	9202      	str	r2, [sp, #8]
 8008358:	9300      	str	r3, [sp, #0]
 800835a:	0032      	movs	r2, r6
 800835c:	002b      	movs	r3, r5
 800835e:	0038      	movs	r0, r7
 8008360:	f7ff febe 	bl	80080e0 <__cvt>
 8008364:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008366:	0005      	movs	r5, r0
 8008368:	2b47      	cmp	r3, #71	; 0x47
 800836a:	d109      	bne.n	8008380 <_printf_float+0x150>
 800836c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800836e:	1cda      	adds	r2, r3, #3
 8008370:	db02      	blt.n	8008378 <_printf_float+0x148>
 8008372:	6862      	ldr	r2, [r4, #4]
 8008374:	4293      	cmp	r3, r2
 8008376:	dd49      	ble.n	800840c <_printf_float+0x1dc>
 8008378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800837a:	3b02      	subs	r3, #2
 800837c:	b2db      	uxtb	r3, r3
 800837e:	930a      	str	r3, [sp, #40]	; 0x28
 8008380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008382:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008384:	2b65      	cmp	r3, #101	; 0x65
 8008386:	d824      	bhi.n	80083d2 <_printf_float+0x1a2>
 8008388:	0020      	movs	r0, r4
 800838a:	001a      	movs	r2, r3
 800838c:	3901      	subs	r1, #1
 800838e:	3050      	adds	r0, #80	; 0x50
 8008390:	9111      	str	r1, [sp, #68]	; 0x44
 8008392:	f7ff ff08 	bl	80081a6 <__exponent>
 8008396:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008398:	900b      	str	r0, [sp, #44]	; 0x2c
 800839a:	1813      	adds	r3, r2, r0
 800839c:	6123      	str	r3, [r4, #16]
 800839e:	2a01      	cmp	r2, #1
 80083a0:	dc02      	bgt.n	80083a8 <_printf_float+0x178>
 80083a2:	6822      	ldr	r2, [r4, #0]
 80083a4:	07d2      	lsls	r2, r2, #31
 80083a6:	d501      	bpl.n	80083ac <_printf_float+0x17c>
 80083a8:	3301      	adds	r3, #1
 80083aa:	6123      	str	r3, [r4, #16]
 80083ac:	2323      	movs	r3, #35	; 0x23
 80083ae:	aa08      	add	r2, sp, #32
 80083b0:	189b      	adds	r3, r3, r2
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d100      	bne.n	80083ba <_printf_float+0x18a>
 80083b8:	e78d      	b.n	80082d6 <_printf_float+0xa6>
 80083ba:	0023      	movs	r3, r4
 80083bc:	222d      	movs	r2, #45	; 0x2d
 80083be:	3343      	adds	r3, #67	; 0x43
 80083c0:	701a      	strb	r2, [r3, #0]
 80083c2:	e788      	b.n	80082d6 <_printf_float+0xa6>
 80083c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80083c6:	2a47      	cmp	r2, #71	; 0x47
 80083c8:	d1b3      	bne.n	8008332 <_printf_float+0x102>
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d1b1      	bne.n	8008332 <_printf_float+0x102>
 80083ce:	3301      	adds	r3, #1
 80083d0:	e7ae      	b.n	8008330 <_printf_float+0x100>
 80083d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083d4:	2b66      	cmp	r3, #102	; 0x66
 80083d6:	d11b      	bne.n	8008410 <_printf_float+0x1e0>
 80083d8:	6863      	ldr	r3, [r4, #4]
 80083da:	2900      	cmp	r1, #0
 80083dc:	dd09      	ble.n	80083f2 <_printf_float+0x1c2>
 80083de:	6121      	str	r1, [r4, #16]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d102      	bne.n	80083ea <_printf_float+0x1ba>
 80083e4:	6822      	ldr	r2, [r4, #0]
 80083e6:	07d2      	lsls	r2, r2, #31
 80083e8:	d50b      	bpl.n	8008402 <_printf_float+0x1d2>
 80083ea:	3301      	adds	r3, #1
 80083ec:	185b      	adds	r3, r3, r1
 80083ee:	6123      	str	r3, [r4, #16]
 80083f0:	e007      	b.n	8008402 <_printf_float+0x1d2>
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d103      	bne.n	80083fe <_printf_float+0x1ce>
 80083f6:	2201      	movs	r2, #1
 80083f8:	6821      	ldr	r1, [r4, #0]
 80083fa:	4211      	tst	r1, r2
 80083fc:	d000      	beq.n	8008400 <_printf_float+0x1d0>
 80083fe:	1c9a      	adds	r2, r3, #2
 8008400:	6122      	str	r2, [r4, #16]
 8008402:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008404:	65a3      	str	r3, [r4, #88]	; 0x58
 8008406:	2300      	movs	r3, #0
 8008408:	930b      	str	r3, [sp, #44]	; 0x2c
 800840a:	e7cf      	b.n	80083ac <_printf_float+0x17c>
 800840c:	2367      	movs	r3, #103	; 0x67
 800840e:	930a      	str	r3, [sp, #40]	; 0x28
 8008410:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008412:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008414:	4299      	cmp	r1, r3
 8008416:	db06      	blt.n	8008426 <_printf_float+0x1f6>
 8008418:	6823      	ldr	r3, [r4, #0]
 800841a:	6121      	str	r1, [r4, #16]
 800841c:	07db      	lsls	r3, r3, #31
 800841e:	d5f0      	bpl.n	8008402 <_printf_float+0x1d2>
 8008420:	3101      	adds	r1, #1
 8008422:	6121      	str	r1, [r4, #16]
 8008424:	e7ed      	b.n	8008402 <_printf_float+0x1d2>
 8008426:	2201      	movs	r2, #1
 8008428:	2900      	cmp	r1, #0
 800842a:	dc01      	bgt.n	8008430 <_printf_float+0x200>
 800842c:	1892      	adds	r2, r2, r2
 800842e:	1a52      	subs	r2, r2, r1
 8008430:	189b      	adds	r3, r3, r2
 8008432:	e7dc      	b.n	80083ee <_printf_float+0x1be>
 8008434:	6822      	ldr	r2, [r4, #0]
 8008436:	0553      	lsls	r3, r2, #21
 8008438:	d408      	bmi.n	800844c <_printf_float+0x21c>
 800843a:	6923      	ldr	r3, [r4, #16]
 800843c:	002a      	movs	r2, r5
 800843e:	0038      	movs	r0, r7
 8008440:	9908      	ldr	r1, [sp, #32]
 8008442:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008444:	47a8      	blx	r5
 8008446:	3001      	adds	r0, #1
 8008448:	d12a      	bne.n	80084a0 <_printf_float+0x270>
 800844a:	e74f      	b.n	80082ec <_printf_float+0xbc>
 800844c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800844e:	2b65      	cmp	r3, #101	; 0x65
 8008450:	d800      	bhi.n	8008454 <_printf_float+0x224>
 8008452:	e0ec      	b.n	800862e <_printf_float+0x3fe>
 8008454:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008456:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008458:	2200      	movs	r2, #0
 800845a:	2300      	movs	r3, #0
 800845c:	f7f8 f802 	bl	8000464 <__aeabi_dcmpeq>
 8008460:	2800      	cmp	r0, #0
 8008462:	d034      	beq.n	80084ce <_printf_float+0x29e>
 8008464:	2301      	movs	r3, #1
 8008466:	0038      	movs	r0, r7
 8008468:	4a37      	ldr	r2, [pc, #220]	; (8008548 <_printf_float+0x318>)
 800846a:	9908      	ldr	r1, [sp, #32]
 800846c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800846e:	47a8      	blx	r5
 8008470:	3001      	adds	r0, #1
 8008472:	d100      	bne.n	8008476 <_printf_float+0x246>
 8008474:	e73a      	b.n	80082ec <_printf_float+0xbc>
 8008476:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008478:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800847a:	429a      	cmp	r2, r3
 800847c:	db02      	blt.n	8008484 <_printf_float+0x254>
 800847e:	6823      	ldr	r3, [r4, #0]
 8008480:	07db      	lsls	r3, r3, #31
 8008482:	d50d      	bpl.n	80084a0 <_printf_float+0x270>
 8008484:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008486:	0038      	movs	r0, r7
 8008488:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800848a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800848c:	9908      	ldr	r1, [sp, #32]
 800848e:	47a8      	blx	r5
 8008490:	2500      	movs	r5, #0
 8008492:	3001      	adds	r0, #1
 8008494:	d100      	bne.n	8008498 <_printf_float+0x268>
 8008496:	e729      	b.n	80082ec <_printf_float+0xbc>
 8008498:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800849a:	3b01      	subs	r3, #1
 800849c:	42ab      	cmp	r3, r5
 800849e:	dc0a      	bgt.n	80084b6 <_printf_float+0x286>
 80084a0:	6823      	ldr	r3, [r4, #0]
 80084a2:	079b      	lsls	r3, r3, #30
 80084a4:	d500      	bpl.n	80084a8 <_printf_float+0x278>
 80084a6:	e116      	b.n	80086d6 <_printf_float+0x4a6>
 80084a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80084aa:	68e0      	ldr	r0, [r4, #12]
 80084ac:	4298      	cmp	r0, r3
 80084ae:	db00      	blt.n	80084b2 <_printf_float+0x282>
 80084b0:	e71e      	b.n	80082f0 <_printf_float+0xc0>
 80084b2:	0018      	movs	r0, r3
 80084b4:	e71c      	b.n	80082f0 <_printf_float+0xc0>
 80084b6:	0022      	movs	r2, r4
 80084b8:	2301      	movs	r3, #1
 80084ba:	0038      	movs	r0, r7
 80084bc:	9908      	ldr	r1, [sp, #32]
 80084be:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80084c0:	321a      	adds	r2, #26
 80084c2:	47b0      	blx	r6
 80084c4:	3001      	adds	r0, #1
 80084c6:	d100      	bne.n	80084ca <_printf_float+0x29a>
 80084c8:	e710      	b.n	80082ec <_printf_float+0xbc>
 80084ca:	3501      	adds	r5, #1
 80084cc:	e7e4      	b.n	8008498 <_printf_float+0x268>
 80084ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	dc3b      	bgt.n	800854c <_printf_float+0x31c>
 80084d4:	2301      	movs	r3, #1
 80084d6:	0038      	movs	r0, r7
 80084d8:	4a1b      	ldr	r2, [pc, #108]	; (8008548 <_printf_float+0x318>)
 80084da:	9908      	ldr	r1, [sp, #32]
 80084dc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80084de:	47b0      	blx	r6
 80084e0:	3001      	adds	r0, #1
 80084e2:	d100      	bne.n	80084e6 <_printf_float+0x2b6>
 80084e4:	e702      	b.n	80082ec <_printf_float+0xbc>
 80084e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80084ea:	4313      	orrs	r3, r2
 80084ec:	d102      	bne.n	80084f4 <_printf_float+0x2c4>
 80084ee:	6823      	ldr	r3, [r4, #0]
 80084f0:	07db      	lsls	r3, r3, #31
 80084f2:	d5d5      	bpl.n	80084a0 <_printf_float+0x270>
 80084f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084f6:	0038      	movs	r0, r7
 80084f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80084fa:	9908      	ldr	r1, [sp, #32]
 80084fc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80084fe:	47b0      	blx	r6
 8008500:	2300      	movs	r3, #0
 8008502:	3001      	adds	r0, #1
 8008504:	d100      	bne.n	8008508 <_printf_float+0x2d8>
 8008506:	e6f1      	b.n	80082ec <_printf_float+0xbc>
 8008508:	930a      	str	r3, [sp, #40]	; 0x28
 800850a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800850c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800850e:	425b      	negs	r3, r3
 8008510:	4293      	cmp	r3, r2
 8008512:	dc01      	bgt.n	8008518 <_printf_float+0x2e8>
 8008514:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008516:	e791      	b.n	800843c <_printf_float+0x20c>
 8008518:	0022      	movs	r2, r4
 800851a:	2301      	movs	r3, #1
 800851c:	0038      	movs	r0, r7
 800851e:	9908      	ldr	r1, [sp, #32]
 8008520:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008522:	321a      	adds	r2, #26
 8008524:	47b0      	blx	r6
 8008526:	3001      	adds	r0, #1
 8008528:	d100      	bne.n	800852c <_printf_float+0x2fc>
 800852a:	e6df      	b.n	80082ec <_printf_float+0xbc>
 800852c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800852e:	3301      	adds	r3, #1
 8008530:	e7ea      	b.n	8008508 <_printf_float+0x2d8>
 8008532:	46c0      	nop			; (mov r8, r8)
 8008534:	7fefffff 	.word	0x7fefffff
 8008538:	0800d64e 	.word	0x0800d64e
 800853c:	0800d652 	.word	0x0800d652
 8008540:	0800d656 	.word	0x0800d656
 8008544:	0800d65a 	.word	0x0800d65a
 8008548:	0800cfce 	.word	0x0800cfce
 800854c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800854e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008550:	920a      	str	r2, [sp, #40]	; 0x28
 8008552:	429a      	cmp	r2, r3
 8008554:	dd00      	ble.n	8008558 <_printf_float+0x328>
 8008556:	930a      	str	r3, [sp, #40]	; 0x28
 8008558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800855a:	2b00      	cmp	r3, #0
 800855c:	dc3d      	bgt.n	80085da <_printf_float+0x3aa>
 800855e:	2300      	movs	r3, #0
 8008560:	930e      	str	r3, [sp, #56]	; 0x38
 8008562:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008564:	43db      	mvns	r3, r3
 8008566:	17db      	asrs	r3, r3, #31
 8008568:	930f      	str	r3, [sp, #60]	; 0x3c
 800856a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800856c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800856e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008570:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008572:	4013      	ands	r3, r2
 8008574:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008576:	1ad3      	subs	r3, r2, r3
 8008578:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800857a:	4293      	cmp	r3, r2
 800857c:	dc36      	bgt.n	80085ec <_printf_float+0x3bc>
 800857e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008580:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008582:	429a      	cmp	r2, r3
 8008584:	db40      	blt.n	8008608 <_printf_float+0x3d8>
 8008586:	6823      	ldr	r3, [r4, #0]
 8008588:	07db      	lsls	r3, r3, #31
 800858a:	d43d      	bmi.n	8008608 <_printf_float+0x3d8>
 800858c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800858e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008590:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008592:	1af3      	subs	r3, r6, r3
 8008594:	1ab6      	subs	r6, r6, r2
 8008596:	429e      	cmp	r6, r3
 8008598:	dd00      	ble.n	800859c <_printf_float+0x36c>
 800859a:	001e      	movs	r6, r3
 800859c:	2e00      	cmp	r6, #0
 800859e:	dc3c      	bgt.n	800861a <_printf_float+0x3ea>
 80085a0:	2300      	movs	r3, #0
 80085a2:	930a      	str	r3, [sp, #40]	; 0x28
 80085a4:	43f3      	mvns	r3, r6
 80085a6:	17db      	asrs	r3, r3, #31
 80085a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80085aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80085ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80085ae:	1a9b      	subs	r3, r3, r2
 80085b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80085b2:	4032      	ands	r2, r6
 80085b4:	1a9b      	subs	r3, r3, r2
 80085b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085b8:	4293      	cmp	r3, r2
 80085ba:	dc00      	bgt.n	80085be <_printf_float+0x38e>
 80085bc:	e770      	b.n	80084a0 <_printf_float+0x270>
 80085be:	0022      	movs	r2, r4
 80085c0:	2301      	movs	r3, #1
 80085c2:	0038      	movs	r0, r7
 80085c4:	9908      	ldr	r1, [sp, #32]
 80085c6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80085c8:	321a      	adds	r2, #26
 80085ca:	47a8      	blx	r5
 80085cc:	3001      	adds	r0, #1
 80085ce:	d100      	bne.n	80085d2 <_printf_float+0x3a2>
 80085d0:	e68c      	b.n	80082ec <_printf_float+0xbc>
 80085d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085d4:	3301      	adds	r3, #1
 80085d6:	930a      	str	r3, [sp, #40]	; 0x28
 80085d8:	e7e7      	b.n	80085aa <_printf_float+0x37a>
 80085da:	002a      	movs	r2, r5
 80085dc:	0038      	movs	r0, r7
 80085de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085e0:	9908      	ldr	r1, [sp, #32]
 80085e2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80085e4:	47b0      	blx	r6
 80085e6:	3001      	adds	r0, #1
 80085e8:	d1b9      	bne.n	800855e <_printf_float+0x32e>
 80085ea:	e67f      	b.n	80082ec <_printf_float+0xbc>
 80085ec:	0022      	movs	r2, r4
 80085ee:	2301      	movs	r3, #1
 80085f0:	0038      	movs	r0, r7
 80085f2:	9908      	ldr	r1, [sp, #32]
 80085f4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80085f6:	321a      	adds	r2, #26
 80085f8:	47b0      	blx	r6
 80085fa:	3001      	adds	r0, #1
 80085fc:	d100      	bne.n	8008600 <_printf_float+0x3d0>
 80085fe:	e675      	b.n	80082ec <_printf_float+0xbc>
 8008600:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008602:	3301      	adds	r3, #1
 8008604:	930e      	str	r3, [sp, #56]	; 0x38
 8008606:	e7b0      	b.n	800856a <_printf_float+0x33a>
 8008608:	0038      	movs	r0, r7
 800860a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800860c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800860e:	9908      	ldr	r1, [sp, #32]
 8008610:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008612:	47b0      	blx	r6
 8008614:	3001      	adds	r0, #1
 8008616:	d1b9      	bne.n	800858c <_printf_float+0x35c>
 8008618:	e668      	b.n	80082ec <_printf_float+0xbc>
 800861a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800861c:	0038      	movs	r0, r7
 800861e:	18ea      	adds	r2, r5, r3
 8008620:	9908      	ldr	r1, [sp, #32]
 8008622:	0033      	movs	r3, r6
 8008624:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008626:	47a8      	blx	r5
 8008628:	3001      	adds	r0, #1
 800862a:	d1b9      	bne.n	80085a0 <_printf_float+0x370>
 800862c:	e65e      	b.n	80082ec <_printf_float+0xbc>
 800862e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008630:	2b01      	cmp	r3, #1
 8008632:	dc02      	bgt.n	800863a <_printf_float+0x40a>
 8008634:	2301      	movs	r3, #1
 8008636:	421a      	tst	r2, r3
 8008638:	d03a      	beq.n	80086b0 <_printf_float+0x480>
 800863a:	2301      	movs	r3, #1
 800863c:	002a      	movs	r2, r5
 800863e:	0038      	movs	r0, r7
 8008640:	9908      	ldr	r1, [sp, #32]
 8008642:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008644:	47b0      	blx	r6
 8008646:	3001      	adds	r0, #1
 8008648:	d100      	bne.n	800864c <_printf_float+0x41c>
 800864a:	e64f      	b.n	80082ec <_printf_float+0xbc>
 800864c:	0038      	movs	r0, r7
 800864e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008650:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008652:	9908      	ldr	r1, [sp, #32]
 8008654:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008656:	47b0      	blx	r6
 8008658:	3001      	adds	r0, #1
 800865a:	d100      	bne.n	800865e <_printf_float+0x42e>
 800865c:	e646      	b.n	80082ec <_printf_float+0xbc>
 800865e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008660:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008662:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008664:	2200      	movs	r2, #0
 8008666:	001e      	movs	r6, r3
 8008668:	2300      	movs	r3, #0
 800866a:	f7f7 fefb 	bl	8000464 <__aeabi_dcmpeq>
 800866e:	2800      	cmp	r0, #0
 8008670:	d11c      	bne.n	80086ac <_printf_float+0x47c>
 8008672:	0033      	movs	r3, r6
 8008674:	1c6a      	adds	r2, r5, #1
 8008676:	3b01      	subs	r3, #1
 8008678:	0038      	movs	r0, r7
 800867a:	9908      	ldr	r1, [sp, #32]
 800867c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800867e:	47a8      	blx	r5
 8008680:	3001      	adds	r0, #1
 8008682:	d10f      	bne.n	80086a4 <_printf_float+0x474>
 8008684:	e632      	b.n	80082ec <_printf_float+0xbc>
 8008686:	0022      	movs	r2, r4
 8008688:	2301      	movs	r3, #1
 800868a:	0038      	movs	r0, r7
 800868c:	9908      	ldr	r1, [sp, #32]
 800868e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008690:	321a      	adds	r2, #26
 8008692:	47b0      	blx	r6
 8008694:	3001      	adds	r0, #1
 8008696:	d100      	bne.n	800869a <_printf_float+0x46a>
 8008698:	e628      	b.n	80082ec <_printf_float+0xbc>
 800869a:	3501      	adds	r5, #1
 800869c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800869e:	3b01      	subs	r3, #1
 80086a0:	42ab      	cmp	r3, r5
 80086a2:	dcf0      	bgt.n	8008686 <_printf_float+0x456>
 80086a4:	0022      	movs	r2, r4
 80086a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086a8:	3250      	adds	r2, #80	; 0x50
 80086aa:	e6c8      	b.n	800843e <_printf_float+0x20e>
 80086ac:	2500      	movs	r5, #0
 80086ae:	e7f5      	b.n	800869c <_printf_float+0x46c>
 80086b0:	002a      	movs	r2, r5
 80086b2:	e7e1      	b.n	8008678 <_printf_float+0x448>
 80086b4:	0022      	movs	r2, r4
 80086b6:	2301      	movs	r3, #1
 80086b8:	0038      	movs	r0, r7
 80086ba:	9908      	ldr	r1, [sp, #32]
 80086bc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80086be:	3219      	adds	r2, #25
 80086c0:	47b0      	blx	r6
 80086c2:	3001      	adds	r0, #1
 80086c4:	d100      	bne.n	80086c8 <_printf_float+0x498>
 80086c6:	e611      	b.n	80082ec <_printf_float+0xbc>
 80086c8:	3501      	adds	r5, #1
 80086ca:	68e3      	ldr	r3, [r4, #12]
 80086cc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80086ce:	1a9b      	subs	r3, r3, r2
 80086d0:	42ab      	cmp	r3, r5
 80086d2:	dcef      	bgt.n	80086b4 <_printf_float+0x484>
 80086d4:	e6e8      	b.n	80084a8 <_printf_float+0x278>
 80086d6:	2500      	movs	r5, #0
 80086d8:	e7f7      	b.n	80086ca <_printf_float+0x49a>
 80086da:	46c0      	nop			; (mov r8, r8)

080086dc <_printf_common>:
 80086dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086de:	0016      	movs	r6, r2
 80086e0:	9301      	str	r3, [sp, #4]
 80086e2:	688a      	ldr	r2, [r1, #8]
 80086e4:	690b      	ldr	r3, [r1, #16]
 80086e6:	000c      	movs	r4, r1
 80086e8:	9000      	str	r0, [sp, #0]
 80086ea:	4293      	cmp	r3, r2
 80086ec:	da00      	bge.n	80086f0 <_printf_common+0x14>
 80086ee:	0013      	movs	r3, r2
 80086f0:	0022      	movs	r2, r4
 80086f2:	6033      	str	r3, [r6, #0]
 80086f4:	3243      	adds	r2, #67	; 0x43
 80086f6:	7812      	ldrb	r2, [r2, #0]
 80086f8:	2a00      	cmp	r2, #0
 80086fa:	d001      	beq.n	8008700 <_printf_common+0x24>
 80086fc:	3301      	adds	r3, #1
 80086fe:	6033      	str	r3, [r6, #0]
 8008700:	6823      	ldr	r3, [r4, #0]
 8008702:	069b      	lsls	r3, r3, #26
 8008704:	d502      	bpl.n	800870c <_printf_common+0x30>
 8008706:	6833      	ldr	r3, [r6, #0]
 8008708:	3302      	adds	r3, #2
 800870a:	6033      	str	r3, [r6, #0]
 800870c:	6822      	ldr	r2, [r4, #0]
 800870e:	2306      	movs	r3, #6
 8008710:	0015      	movs	r5, r2
 8008712:	401d      	ands	r5, r3
 8008714:	421a      	tst	r2, r3
 8008716:	d027      	beq.n	8008768 <_printf_common+0x8c>
 8008718:	0023      	movs	r3, r4
 800871a:	3343      	adds	r3, #67	; 0x43
 800871c:	781b      	ldrb	r3, [r3, #0]
 800871e:	1e5a      	subs	r2, r3, #1
 8008720:	4193      	sbcs	r3, r2
 8008722:	6822      	ldr	r2, [r4, #0]
 8008724:	0692      	lsls	r2, r2, #26
 8008726:	d430      	bmi.n	800878a <_printf_common+0xae>
 8008728:	0022      	movs	r2, r4
 800872a:	9901      	ldr	r1, [sp, #4]
 800872c:	9800      	ldr	r0, [sp, #0]
 800872e:	9d08      	ldr	r5, [sp, #32]
 8008730:	3243      	adds	r2, #67	; 0x43
 8008732:	47a8      	blx	r5
 8008734:	3001      	adds	r0, #1
 8008736:	d025      	beq.n	8008784 <_printf_common+0xa8>
 8008738:	2206      	movs	r2, #6
 800873a:	6823      	ldr	r3, [r4, #0]
 800873c:	2500      	movs	r5, #0
 800873e:	4013      	ands	r3, r2
 8008740:	2b04      	cmp	r3, #4
 8008742:	d105      	bne.n	8008750 <_printf_common+0x74>
 8008744:	6833      	ldr	r3, [r6, #0]
 8008746:	68e5      	ldr	r5, [r4, #12]
 8008748:	1aed      	subs	r5, r5, r3
 800874a:	43eb      	mvns	r3, r5
 800874c:	17db      	asrs	r3, r3, #31
 800874e:	401d      	ands	r5, r3
 8008750:	68a3      	ldr	r3, [r4, #8]
 8008752:	6922      	ldr	r2, [r4, #16]
 8008754:	4293      	cmp	r3, r2
 8008756:	dd01      	ble.n	800875c <_printf_common+0x80>
 8008758:	1a9b      	subs	r3, r3, r2
 800875a:	18ed      	adds	r5, r5, r3
 800875c:	2600      	movs	r6, #0
 800875e:	42b5      	cmp	r5, r6
 8008760:	d120      	bne.n	80087a4 <_printf_common+0xc8>
 8008762:	2000      	movs	r0, #0
 8008764:	e010      	b.n	8008788 <_printf_common+0xac>
 8008766:	3501      	adds	r5, #1
 8008768:	68e3      	ldr	r3, [r4, #12]
 800876a:	6832      	ldr	r2, [r6, #0]
 800876c:	1a9b      	subs	r3, r3, r2
 800876e:	42ab      	cmp	r3, r5
 8008770:	ddd2      	ble.n	8008718 <_printf_common+0x3c>
 8008772:	0022      	movs	r2, r4
 8008774:	2301      	movs	r3, #1
 8008776:	9901      	ldr	r1, [sp, #4]
 8008778:	9800      	ldr	r0, [sp, #0]
 800877a:	9f08      	ldr	r7, [sp, #32]
 800877c:	3219      	adds	r2, #25
 800877e:	47b8      	blx	r7
 8008780:	3001      	adds	r0, #1
 8008782:	d1f0      	bne.n	8008766 <_printf_common+0x8a>
 8008784:	2001      	movs	r0, #1
 8008786:	4240      	negs	r0, r0
 8008788:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800878a:	2030      	movs	r0, #48	; 0x30
 800878c:	18e1      	adds	r1, r4, r3
 800878e:	3143      	adds	r1, #67	; 0x43
 8008790:	7008      	strb	r0, [r1, #0]
 8008792:	0021      	movs	r1, r4
 8008794:	1c5a      	adds	r2, r3, #1
 8008796:	3145      	adds	r1, #69	; 0x45
 8008798:	7809      	ldrb	r1, [r1, #0]
 800879a:	18a2      	adds	r2, r4, r2
 800879c:	3243      	adds	r2, #67	; 0x43
 800879e:	3302      	adds	r3, #2
 80087a0:	7011      	strb	r1, [r2, #0]
 80087a2:	e7c1      	b.n	8008728 <_printf_common+0x4c>
 80087a4:	0022      	movs	r2, r4
 80087a6:	2301      	movs	r3, #1
 80087a8:	9901      	ldr	r1, [sp, #4]
 80087aa:	9800      	ldr	r0, [sp, #0]
 80087ac:	9f08      	ldr	r7, [sp, #32]
 80087ae:	321a      	adds	r2, #26
 80087b0:	47b8      	blx	r7
 80087b2:	3001      	adds	r0, #1
 80087b4:	d0e6      	beq.n	8008784 <_printf_common+0xa8>
 80087b6:	3601      	adds	r6, #1
 80087b8:	e7d1      	b.n	800875e <_printf_common+0x82>
	...

080087bc <_printf_i>:
 80087bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087be:	b08b      	sub	sp, #44	; 0x2c
 80087c0:	9206      	str	r2, [sp, #24]
 80087c2:	000a      	movs	r2, r1
 80087c4:	3243      	adds	r2, #67	; 0x43
 80087c6:	9307      	str	r3, [sp, #28]
 80087c8:	9005      	str	r0, [sp, #20]
 80087ca:	9204      	str	r2, [sp, #16]
 80087cc:	7e0a      	ldrb	r2, [r1, #24]
 80087ce:	000c      	movs	r4, r1
 80087d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80087d2:	2a78      	cmp	r2, #120	; 0x78
 80087d4:	d809      	bhi.n	80087ea <_printf_i+0x2e>
 80087d6:	2a62      	cmp	r2, #98	; 0x62
 80087d8:	d80b      	bhi.n	80087f2 <_printf_i+0x36>
 80087da:	2a00      	cmp	r2, #0
 80087dc:	d100      	bne.n	80087e0 <_printf_i+0x24>
 80087de:	e0be      	b.n	800895e <_printf_i+0x1a2>
 80087e0:	497c      	ldr	r1, [pc, #496]	; (80089d4 <_printf_i+0x218>)
 80087e2:	9103      	str	r1, [sp, #12]
 80087e4:	2a58      	cmp	r2, #88	; 0x58
 80087e6:	d100      	bne.n	80087ea <_printf_i+0x2e>
 80087e8:	e093      	b.n	8008912 <_printf_i+0x156>
 80087ea:	0026      	movs	r6, r4
 80087ec:	3642      	adds	r6, #66	; 0x42
 80087ee:	7032      	strb	r2, [r6, #0]
 80087f0:	e022      	b.n	8008838 <_printf_i+0x7c>
 80087f2:	0010      	movs	r0, r2
 80087f4:	3863      	subs	r0, #99	; 0x63
 80087f6:	2815      	cmp	r0, #21
 80087f8:	d8f7      	bhi.n	80087ea <_printf_i+0x2e>
 80087fa:	f7f7 fc97 	bl	800012c <__gnu_thumb1_case_shi>
 80087fe:	0016      	.short	0x0016
 8008800:	fff6001f 	.word	0xfff6001f
 8008804:	fff6fff6 	.word	0xfff6fff6
 8008808:	001ffff6 	.word	0x001ffff6
 800880c:	fff6fff6 	.word	0xfff6fff6
 8008810:	fff6fff6 	.word	0xfff6fff6
 8008814:	003600a3 	.word	0x003600a3
 8008818:	fff60083 	.word	0xfff60083
 800881c:	00b4fff6 	.word	0x00b4fff6
 8008820:	0036fff6 	.word	0x0036fff6
 8008824:	fff6fff6 	.word	0xfff6fff6
 8008828:	0087      	.short	0x0087
 800882a:	0026      	movs	r6, r4
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	3642      	adds	r6, #66	; 0x42
 8008830:	1d11      	adds	r1, r2, #4
 8008832:	6019      	str	r1, [r3, #0]
 8008834:	6813      	ldr	r3, [r2, #0]
 8008836:	7033      	strb	r3, [r6, #0]
 8008838:	2301      	movs	r3, #1
 800883a:	e0a2      	b.n	8008982 <_printf_i+0x1c6>
 800883c:	6818      	ldr	r0, [r3, #0]
 800883e:	6809      	ldr	r1, [r1, #0]
 8008840:	1d02      	adds	r2, r0, #4
 8008842:	060d      	lsls	r5, r1, #24
 8008844:	d50b      	bpl.n	800885e <_printf_i+0xa2>
 8008846:	6805      	ldr	r5, [r0, #0]
 8008848:	601a      	str	r2, [r3, #0]
 800884a:	2d00      	cmp	r5, #0
 800884c:	da03      	bge.n	8008856 <_printf_i+0x9a>
 800884e:	232d      	movs	r3, #45	; 0x2d
 8008850:	9a04      	ldr	r2, [sp, #16]
 8008852:	426d      	negs	r5, r5
 8008854:	7013      	strb	r3, [r2, #0]
 8008856:	4b5f      	ldr	r3, [pc, #380]	; (80089d4 <_printf_i+0x218>)
 8008858:	270a      	movs	r7, #10
 800885a:	9303      	str	r3, [sp, #12]
 800885c:	e01b      	b.n	8008896 <_printf_i+0xda>
 800885e:	6805      	ldr	r5, [r0, #0]
 8008860:	601a      	str	r2, [r3, #0]
 8008862:	0649      	lsls	r1, r1, #25
 8008864:	d5f1      	bpl.n	800884a <_printf_i+0x8e>
 8008866:	b22d      	sxth	r5, r5
 8008868:	e7ef      	b.n	800884a <_printf_i+0x8e>
 800886a:	680d      	ldr	r5, [r1, #0]
 800886c:	6819      	ldr	r1, [r3, #0]
 800886e:	1d08      	adds	r0, r1, #4
 8008870:	6018      	str	r0, [r3, #0]
 8008872:	062e      	lsls	r6, r5, #24
 8008874:	d501      	bpl.n	800887a <_printf_i+0xbe>
 8008876:	680d      	ldr	r5, [r1, #0]
 8008878:	e003      	b.n	8008882 <_printf_i+0xc6>
 800887a:	066d      	lsls	r5, r5, #25
 800887c:	d5fb      	bpl.n	8008876 <_printf_i+0xba>
 800887e:	680d      	ldr	r5, [r1, #0]
 8008880:	b2ad      	uxth	r5, r5
 8008882:	4b54      	ldr	r3, [pc, #336]	; (80089d4 <_printf_i+0x218>)
 8008884:	2708      	movs	r7, #8
 8008886:	9303      	str	r3, [sp, #12]
 8008888:	2a6f      	cmp	r2, #111	; 0x6f
 800888a:	d000      	beq.n	800888e <_printf_i+0xd2>
 800888c:	3702      	adds	r7, #2
 800888e:	0023      	movs	r3, r4
 8008890:	2200      	movs	r2, #0
 8008892:	3343      	adds	r3, #67	; 0x43
 8008894:	701a      	strb	r2, [r3, #0]
 8008896:	6863      	ldr	r3, [r4, #4]
 8008898:	60a3      	str	r3, [r4, #8]
 800889a:	2b00      	cmp	r3, #0
 800889c:	db03      	blt.n	80088a6 <_printf_i+0xea>
 800889e:	2104      	movs	r1, #4
 80088a0:	6822      	ldr	r2, [r4, #0]
 80088a2:	438a      	bics	r2, r1
 80088a4:	6022      	str	r2, [r4, #0]
 80088a6:	2d00      	cmp	r5, #0
 80088a8:	d102      	bne.n	80088b0 <_printf_i+0xf4>
 80088aa:	9e04      	ldr	r6, [sp, #16]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d00c      	beq.n	80088ca <_printf_i+0x10e>
 80088b0:	9e04      	ldr	r6, [sp, #16]
 80088b2:	0028      	movs	r0, r5
 80088b4:	0039      	movs	r1, r7
 80088b6:	f7f7 fcc9 	bl	800024c <__aeabi_uidivmod>
 80088ba:	9b03      	ldr	r3, [sp, #12]
 80088bc:	3e01      	subs	r6, #1
 80088be:	5c5b      	ldrb	r3, [r3, r1]
 80088c0:	7033      	strb	r3, [r6, #0]
 80088c2:	002b      	movs	r3, r5
 80088c4:	0005      	movs	r5, r0
 80088c6:	429f      	cmp	r7, r3
 80088c8:	d9f3      	bls.n	80088b2 <_printf_i+0xf6>
 80088ca:	2f08      	cmp	r7, #8
 80088cc:	d109      	bne.n	80088e2 <_printf_i+0x126>
 80088ce:	6823      	ldr	r3, [r4, #0]
 80088d0:	07db      	lsls	r3, r3, #31
 80088d2:	d506      	bpl.n	80088e2 <_printf_i+0x126>
 80088d4:	6862      	ldr	r2, [r4, #4]
 80088d6:	6923      	ldr	r3, [r4, #16]
 80088d8:	429a      	cmp	r2, r3
 80088da:	dc02      	bgt.n	80088e2 <_printf_i+0x126>
 80088dc:	2330      	movs	r3, #48	; 0x30
 80088de:	3e01      	subs	r6, #1
 80088e0:	7033      	strb	r3, [r6, #0]
 80088e2:	9b04      	ldr	r3, [sp, #16]
 80088e4:	1b9b      	subs	r3, r3, r6
 80088e6:	6123      	str	r3, [r4, #16]
 80088e8:	9b07      	ldr	r3, [sp, #28]
 80088ea:	0021      	movs	r1, r4
 80088ec:	9300      	str	r3, [sp, #0]
 80088ee:	9805      	ldr	r0, [sp, #20]
 80088f0:	9b06      	ldr	r3, [sp, #24]
 80088f2:	aa09      	add	r2, sp, #36	; 0x24
 80088f4:	f7ff fef2 	bl	80086dc <_printf_common>
 80088f8:	3001      	adds	r0, #1
 80088fa:	d147      	bne.n	800898c <_printf_i+0x1d0>
 80088fc:	2001      	movs	r0, #1
 80088fe:	4240      	negs	r0, r0
 8008900:	b00b      	add	sp, #44	; 0x2c
 8008902:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008904:	2220      	movs	r2, #32
 8008906:	6809      	ldr	r1, [r1, #0]
 8008908:	430a      	orrs	r2, r1
 800890a:	6022      	str	r2, [r4, #0]
 800890c:	2278      	movs	r2, #120	; 0x78
 800890e:	4932      	ldr	r1, [pc, #200]	; (80089d8 <_printf_i+0x21c>)
 8008910:	9103      	str	r1, [sp, #12]
 8008912:	0021      	movs	r1, r4
 8008914:	3145      	adds	r1, #69	; 0x45
 8008916:	700a      	strb	r2, [r1, #0]
 8008918:	6819      	ldr	r1, [r3, #0]
 800891a:	6822      	ldr	r2, [r4, #0]
 800891c:	c920      	ldmia	r1!, {r5}
 800891e:	0610      	lsls	r0, r2, #24
 8008920:	d402      	bmi.n	8008928 <_printf_i+0x16c>
 8008922:	0650      	lsls	r0, r2, #25
 8008924:	d500      	bpl.n	8008928 <_printf_i+0x16c>
 8008926:	b2ad      	uxth	r5, r5
 8008928:	6019      	str	r1, [r3, #0]
 800892a:	07d3      	lsls	r3, r2, #31
 800892c:	d502      	bpl.n	8008934 <_printf_i+0x178>
 800892e:	2320      	movs	r3, #32
 8008930:	4313      	orrs	r3, r2
 8008932:	6023      	str	r3, [r4, #0]
 8008934:	2710      	movs	r7, #16
 8008936:	2d00      	cmp	r5, #0
 8008938:	d1a9      	bne.n	800888e <_printf_i+0xd2>
 800893a:	2220      	movs	r2, #32
 800893c:	6823      	ldr	r3, [r4, #0]
 800893e:	4393      	bics	r3, r2
 8008940:	6023      	str	r3, [r4, #0]
 8008942:	e7a4      	b.n	800888e <_printf_i+0xd2>
 8008944:	681a      	ldr	r2, [r3, #0]
 8008946:	680d      	ldr	r5, [r1, #0]
 8008948:	1d10      	adds	r0, r2, #4
 800894a:	6949      	ldr	r1, [r1, #20]
 800894c:	6018      	str	r0, [r3, #0]
 800894e:	6813      	ldr	r3, [r2, #0]
 8008950:	062e      	lsls	r6, r5, #24
 8008952:	d501      	bpl.n	8008958 <_printf_i+0x19c>
 8008954:	6019      	str	r1, [r3, #0]
 8008956:	e002      	b.n	800895e <_printf_i+0x1a2>
 8008958:	066d      	lsls	r5, r5, #25
 800895a:	d5fb      	bpl.n	8008954 <_printf_i+0x198>
 800895c:	8019      	strh	r1, [r3, #0]
 800895e:	2300      	movs	r3, #0
 8008960:	9e04      	ldr	r6, [sp, #16]
 8008962:	6123      	str	r3, [r4, #16]
 8008964:	e7c0      	b.n	80088e8 <_printf_i+0x12c>
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	1d11      	adds	r1, r2, #4
 800896a:	6019      	str	r1, [r3, #0]
 800896c:	6816      	ldr	r6, [r2, #0]
 800896e:	2100      	movs	r1, #0
 8008970:	0030      	movs	r0, r6
 8008972:	6862      	ldr	r2, [r4, #4]
 8008974:	f000 f9e9 	bl	8008d4a <memchr>
 8008978:	2800      	cmp	r0, #0
 800897a:	d001      	beq.n	8008980 <_printf_i+0x1c4>
 800897c:	1b80      	subs	r0, r0, r6
 800897e:	6060      	str	r0, [r4, #4]
 8008980:	6863      	ldr	r3, [r4, #4]
 8008982:	6123      	str	r3, [r4, #16]
 8008984:	2300      	movs	r3, #0
 8008986:	9a04      	ldr	r2, [sp, #16]
 8008988:	7013      	strb	r3, [r2, #0]
 800898a:	e7ad      	b.n	80088e8 <_printf_i+0x12c>
 800898c:	0032      	movs	r2, r6
 800898e:	6923      	ldr	r3, [r4, #16]
 8008990:	9906      	ldr	r1, [sp, #24]
 8008992:	9805      	ldr	r0, [sp, #20]
 8008994:	9d07      	ldr	r5, [sp, #28]
 8008996:	47a8      	blx	r5
 8008998:	3001      	adds	r0, #1
 800899a:	d0af      	beq.n	80088fc <_printf_i+0x140>
 800899c:	6823      	ldr	r3, [r4, #0]
 800899e:	079b      	lsls	r3, r3, #30
 80089a0:	d415      	bmi.n	80089ce <_printf_i+0x212>
 80089a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089a4:	68e0      	ldr	r0, [r4, #12]
 80089a6:	4298      	cmp	r0, r3
 80089a8:	daaa      	bge.n	8008900 <_printf_i+0x144>
 80089aa:	0018      	movs	r0, r3
 80089ac:	e7a8      	b.n	8008900 <_printf_i+0x144>
 80089ae:	0022      	movs	r2, r4
 80089b0:	2301      	movs	r3, #1
 80089b2:	9906      	ldr	r1, [sp, #24]
 80089b4:	9805      	ldr	r0, [sp, #20]
 80089b6:	9e07      	ldr	r6, [sp, #28]
 80089b8:	3219      	adds	r2, #25
 80089ba:	47b0      	blx	r6
 80089bc:	3001      	adds	r0, #1
 80089be:	d09d      	beq.n	80088fc <_printf_i+0x140>
 80089c0:	3501      	adds	r5, #1
 80089c2:	68e3      	ldr	r3, [r4, #12]
 80089c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089c6:	1a9b      	subs	r3, r3, r2
 80089c8:	42ab      	cmp	r3, r5
 80089ca:	dcf0      	bgt.n	80089ae <_printf_i+0x1f2>
 80089cc:	e7e9      	b.n	80089a2 <_printf_i+0x1e6>
 80089ce:	2500      	movs	r5, #0
 80089d0:	e7f7      	b.n	80089c2 <_printf_i+0x206>
 80089d2:	46c0      	nop			; (mov r8, r8)
 80089d4:	0800d65e 	.word	0x0800d65e
 80089d8:	0800d66f 	.word	0x0800d66f

080089dc <std>:
 80089dc:	2300      	movs	r3, #0
 80089de:	b510      	push	{r4, lr}
 80089e0:	0004      	movs	r4, r0
 80089e2:	6003      	str	r3, [r0, #0]
 80089e4:	6043      	str	r3, [r0, #4]
 80089e6:	6083      	str	r3, [r0, #8]
 80089e8:	8181      	strh	r1, [r0, #12]
 80089ea:	6643      	str	r3, [r0, #100]	; 0x64
 80089ec:	81c2      	strh	r2, [r0, #14]
 80089ee:	6103      	str	r3, [r0, #16]
 80089f0:	6143      	str	r3, [r0, #20]
 80089f2:	6183      	str	r3, [r0, #24]
 80089f4:	0019      	movs	r1, r3
 80089f6:	2208      	movs	r2, #8
 80089f8:	305c      	adds	r0, #92	; 0x5c
 80089fa:	f000 f91f 	bl	8008c3c <memset>
 80089fe:	4b0b      	ldr	r3, [pc, #44]	; (8008a2c <std+0x50>)
 8008a00:	6224      	str	r4, [r4, #32]
 8008a02:	6263      	str	r3, [r4, #36]	; 0x24
 8008a04:	4b0a      	ldr	r3, [pc, #40]	; (8008a30 <std+0x54>)
 8008a06:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a08:	4b0a      	ldr	r3, [pc, #40]	; (8008a34 <std+0x58>)
 8008a0a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a0c:	4b0a      	ldr	r3, [pc, #40]	; (8008a38 <std+0x5c>)
 8008a0e:	6323      	str	r3, [r4, #48]	; 0x30
 8008a10:	4b0a      	ldr	r3, [pc, #40]	; (8008a3c <std+0x60>)
 8008a12:	429c      	cmp	r4, r3
 8008a14:	d005      	beq.n	8008a22 <std+0x46>
 8008a16:	4b0a      	ldr	r3, [pc, #40]	; (8008a40 <std+0x64>)
 8008a18:	429c      	cmp	r4, r3
 8008a1a:	d002      	beq.n	8008a22 <std+0x46>
 8008a1c:	4b09      	ldr	r3, [pc, #36]	; (8008a44 <std+0x68>)
 8008a1e:	429c      	cmp	r4, r3
 8008a20:	d103      	bne.n	8008a2a <std+0x4e>
 8008a22:	0020      	movs	r0, r4
 8008a24:	3058      	adds	r0, #88	; 0x58
 8008a26:	f000 f98d 	bl	8008d44 <__retarget_lock_init_recursive>
 8008a2a:	bd10      	pop	{r4, pc}
 8008a2c:	08008ba5 	.word	0x08008ba5
 8008a30:	08008bcd 	.word	0x08008bcd
 8008a34:	08008c05 	.word	0x08008c05
 8008a38:	08008c31 	.word	0x08008c31
 8008a3c:	20000938 	.word	0x20000938
 8008a40:	200009a0 	.word	0x200009a0
 8008a44:	20000a08 	.word	0x20000a08

08008a48 <stdio_exit_handler>:
 8008a48:	b510      	push	{r4, lr}
 8008a4a:	4a03      	ldr	r2, [pc, #12]	; (8008a58 <stdio_exit_handler+0x10>)
 8008a4c:	4903      	ldr	r1, [pc, #12]	; (8008a5c <stdio_exit_handler+0x14>)
 8008a4e:	4804      	ldr	r0, [pc, #16]	; (8008a60 <stdio_exit_handler+0x18>)
 8008a50:	f000 f86c 	bl	8008b2c <_fwalk_sglue>
 8008a54:	bd10      	pop	{r4, pc}
 8008a56:	46c0      	nop			; (mov r8, r8)
 8008a58:	20000028 	.word	0x20000028
 8008a5c:	0800a7c9 	.word	0x0800a7c9
 8008a60:	20000034 	.word	0x20000034

08008a64 <cleanup_stdio>:
 8008a64:	6841      	ldr	r1, [r0, #4]
 8008a66:	4b0b      	ldr	r3, [pc, #44]	; (8008a94 <cleanup_stdio+0x30>)
 8008a68:	b510      	push	{r4, lr}
 8008a6a:	0004      	movs	r4, r0
 8008a6c:	4299      	cmp	r1, r3
 8008a6e:	d001      	beq.n	8008a74 <cleanup_stdio+0x10>
 8008a70:	f001 feaa 	bl	800a7c8 <_fflush_r>
 8008a74:	68a1      	ldr	r1, [r4, #8]
 8008a76:	4b08      	ldr	r3, [pc, #32]	; (8008a98 <cleanup_stdio+0x34>)
 8008a78:	4299      	cmp	r1, r3
 8008a7a:	d002      	beq.n	8008a82 <cleanup_stdio+0x1e>
 8008a7c:	0020      	movs	r0, r4
 8008a7e:	f001 fea3 	bl	800a7c8 <_fflush_r>
 8008a82:	68e1      	ldr	r1, [r4, #12]
 8008a84:	4b05      	ldr	r3, [pc, #20]	; (8008a9c <cleanup_stdio+0x38>)
 8008a86:	4299      	cmp	r1, r3
 8008a88:	d002      	beq.n	8008a90 <cleanup_stdio+0x2c>
 8008a8a:	0020      	movs	r0, r4
 8008a8c:	f001 fe9c 	bl	800a7c8 <_fflush_r>
 8008a90:	bd10      	pop	{r4, pc}
 8008a92:	46c0      	nop			; (mov r8, r8)
 8008a94:	20000938 	.word	0x20000938
 8008a98:	200009a0 	.word	0x200009a0
 8008a9c:	20000a08 	.word	0x20000a08

08008aa0 <global_stdio_init.part.0>:
 8008aa0:	b510      	push	{r4, lr}
 8008aa2:	4b09      	ldr	r3, [pc, #36]	; (8008ac8 <global_stdio_init.part.0+0x28>)
 8008aa4:	4a09      	ldr	r2, [pc, #36]	; (8008acc <global_stdio_init.part.0+0x2c>)
 8008aa6:	2104      	movs	r1, #4
 8008aa8:	601a      	str	r2, [r3, #0]
 8008aaa:	4809      	ldr	r0, [pc, #36]	; (8008ad0 <global_stdio_init.part.0+0x30>)
 8008aac:	2200      	movs	r2, #0
 8008aae:	f7ff ff95 	bl	80089dc <std>
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	2109      	movs	r1, #9
 8008ab6:	4807      	ldr	r0, [pc, #28]	; (8008ad4 <global_stdio_init.part.0+0x34>)
 8008ab8:	f7ff ff90 	bl	80089dc <std>
 8008abc:	2202      	movs	r2, #2
 8008abe:	2112      	movs	r1, #18
 8008ac0:	4805      	ldr	r0, [pc, #20]	; (8008ad8 <global_stdio_init.part.0+0x38>)
 8008ac2:	f7ff ff8b 	bl	80089dc <std>
 8008ac6:	bd10      	pop	{r4, pc}
 8008ac8:	20000a70 	.word	0x20000a70
 8008acc:	08008a49 	.word	0x08008a49
 8008ad0:	20000938 	.word	0x20000938
 8008ad4:	200009a0 	.word	0x200009a0
 8008ad8:	20000a08 	.word	0x20000a08

08008adc <__sfp_lock_acquire>:
 8008adc:	b510      	push	{r4, lr}
 8008ade:	4802      	ldr	r0, [pc, #8]	; (8008ae8 <__sfp_lock_acquire+0xc>)
 8008ae0:	f000 f931 	bl	8008d46 <__retarget_lock_acquire_recursive>
 8008ae4:	bd10      	pop	{r4, pc}
 8008ae6:	46c0      	nop			; (mov r8, r8)
 8008ae8:	20000a79 	.word	0x20000a79

08008aec <__sfp_lock_release>:
 8008aec:	b510      	push	{r4, lr}
 8008aee:	4802      	ldr	r0, [pc, #8]	; (8008af8 <__sfp_lock_release+0xc>)
 8008af0:	f000 f92a 	bl	8008d48 <__retarget_lock_release_recursive>
 8008af4:	bd10      	pop	{r4, pc}
 8008af6:	46c0      	nop			; (mov r8, r8)
 8008af8:	20000a79 	.word	0x20000a79

08008afc <__sinit>:
 8008afc:	b510      	push	{r4, lr}
 8008afe:	0004      	movs	r4, r0
 8008b00:	f7ff ffec 	bl	8008adc <__sfp_lock_acquire>
 8008b04:	6a23      	ldr	r3, [r4, #32]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d002      	beq.n	8008b10 <__sinit+0x14>
 8008b0a:	f7ff ffef 	bl	8008aec <__sfp_lock_release>
 8008b0e:	bd10      	pop	{r4, pc}
 8008b10:	4b04      	ldr	r3, [pc, #16]	; (8008b24 <__sinit+0x28>)
 8008b12:	6223      	str	r3, [r4, #32]
 8008b14:	4b04      	ldr	r3, [pc, #16]	; (8008b28 <__sinit+0x2c>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d1f6      	bne.n	8008b0a <__sinit+0xe>
 8008b1c:	f7ff ffc0 	bl	8008aa0 <global_stdio_init.part.0>
 8008b20:	e7f3      	b.n	8008b0a <__sinit+0xe>
 8008b22:	46c0      	nop			; (mov r8, r8)
 8008b24:	08008a65 	.word	0x08008a65
 8008b28:	20000a70 	.word	0x20000a70

08008b2c <_fwalk_sglue>:
 8008b2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b2e:	0014      	movs	r4, r2
 8008b30:	2600      	movs	r6, #0
 8008b32:	9000      	str	r0, [sp, #0]
 8008b34:	9101      	str	r1, [sp, #4]
 8008b36:	68a5      	ldr	r5, [r4, #8]
 8008b38:	6867      	ldr	r7, [r4, #4]
 8008b3a:	3f01      	subs	r7, #1
 8008b3c:	d504      	bpl.n	8008b48 <_fwalk_sglue+0x1c>
 8008b3e:	6824      	ldr	r4, [r4, #0]
 8008b40:	2c00      	cmp	r4, #0
 8008b42:	d1f8      	bne.n	8008b36 <_fwalk_sglue+0xa>
 8008b44:	0030      	movs	r0, r6
 8008b46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008b48:	89ab      	ldrh	r3, [r5, #12]
 8008b4a:	2b01      	cmp	r3, #1
 8008b4c:	d908      	bls.n	8008b60 <_fwalk_sglue+0x34>
 8008b4e:	220e      	movs	r2, #14
 8008b50:	5eab      	ldrsh	r3, [r5, r2]
 8008b52:	3301      	adds	r3, #1
 8008b54:	d004      	beq.n	8008b60 <_fwalk_sglue+0x34>
 8008b56:	0029      	movs	r1, r5
 8008b58:	9800      	ldr	r0, [sp, #0]
 8008b5a:	9b01      	ldr	r3, [sp, #4]
 8008b5c:	4798      	blx	r3
 8008b5e:	4306      	orrs	r6, r0
 8008b60:	3568      	adds	r5, #104	; 0x68
 8008b62:	e7ea      	b.n	8008b3a <_fwalk_sglue+0xe>

08008b64 <siprintf>:
 8008b64:	b40e      	push	{r1, r2, r3}
 8008b66:	b500      	push	{lr}
 8008b68:	490b      	ldr	r1, [pc, #44]	; (8008b98 <siprintf+0x34>)
 8008b6a:	b09c      	sub	sp, #112	; 0x70
 8008b6c:	ab1d      	add	r3, sp, #116	; 0x74
 8008b6e:	9002      	str	r0, [sp, #8]
 8008b70:	9006      	str	r0, [sp, #24]
 8008b72:	9107      	str	r1, [sp, #28]
 8008b74:	9104      	str	r1, [sp, #16]
 8008b76:	4809      	ldr	r0, [pc, #36]	; (8008b9c <siprintf+0x38>)
 8008b78:	4909      	ldr	r1, [pc, #36]	; (8008ba0 <siprintf+0x3c>)
 8008b7a:	cb04      	ldmia	r3!, {r2}
 8008b7c:	9105      	str	r1, [sp, #20]
 8008b7e:	6800      	ldr	r0, [r0, #0]
 8008b80:	a902      	add	r1, sp, #8
 8008b82:	9301      	str	r3, [sp, #4]
 8008b84:	f001 fc96 	bl	800a4b4 <_svfiprintf_r>
 8008b88:	2200      	movs	r2, #0
 8008b8a:	9b02      	ldr	r3, [sp, #8]
 8008b8c:	701a      	strb	r2, [r3, #0]
 8008b8e:	b01c      	add	sp, #112	; 0x70
 8008b90:	bc08      	pop	{r3}
 8008b92:	b003      	add	sp, #12
 8008b94:	4718      	bx	r3
 8008b96:	46c0      	nop			; (mov r8, r8)
 8008b98:	7fffffff 	.word	0x7fffffff
 8008b9c:	20000080 	.word	0x20000080
 8008ba0:	ffff0208 	.word	0xffff0208

08008ba4 <__sread>:
 8008ba4:	b570      	push	{r4, r5, r6, lr}
 8008ba6:	000c      	movs	r4, r1
 8008ba8:	250e      	movs	r5, #14
 8008baa:	5f49      	ldrsh	r1, [r1, r5]
 8008bac:	f000 f878 	bl	8008ca0 <_read_r>
 8008bb0:	2800      	cmp	r0, #0
 8008bb2:	db03      	blt.n	8008bbc <__sread+0x18>
 8008bb4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008bb6:	181b      	adds	r3, r3, r0
 8008bb8:	6563      	str	r3, [r4, #84]	; 0x54
 8008bba:	bd70      	pop	{r4, r5, r6, pc}
 8008bbc:	89a3      	ldrh	r3, [r4, #12]
 8008bbe:	4a02      	ldr	r2, [pc, #8]	; (8008bc8 <__sread+0x24>)
 8008bc0:	4013      	ands	r3, r2
 8008bc2:	81a3      	strh	r3, [r4, #12]
 8008bc4:	e7f9      	b.n	8008bba <__sread+0x16>
 8008bc6:	46c0      	nop			; (mov r8, r8)
 8008bc8:	ffffefff 	.word	0xffffefff

08008bcc <__swrite>:
 8008bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bce:	001f      	movs	r7, r3
 8008bd0:	898b      	ldrh	r3, [r1, #12]
 8008bd2:	0005      	movs	r5, r0
 8008bd4:	000c      	movs	r4, r1
 8008bd6:	0016      	movs	r6, r2
 8008bd8:	05db      	lsls	r3, r3, #23
 8008bda:	d505      	bpl.n	8008be8 <__swrite+0x1c>
 8008bdc:	230e      	movs	r3, #14
 8008bde:	5ec9      	ldrsh	r1, [r1, r3]
 8008be0:	2200      	movs	r2, #0
 8008be2:	2302      	movs	r3, #2
 8008be4:	f000 f848 	bl	8008c78 <_lseek_r>
 8008be8:	89a3      	ldrh	r3, [r4, #12]
 8008bea:	4a05      	ldr	r2, [pc, #20]	; (8008c00 <__swrite+0x34>)
 8008bec:	0028      	movs	r0, r5
 8008bee:	4013      	ands	r3, r2
 8008bf0:	81a3      	strh	r3, [r4, #12]
 8008bf2:	0032      	movs	r2, r6
 8008bf4:	230e      	movs	r3, #14
 8008bf6:	5ee1      	ldrsh	r1, [r4, r3]
 8008bf8:	003b      	movs	r3, r7
 8008bfa:	f000 f865 	bl	8008cc8 <_write_r>
 8008bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c00:	ffffefff 	.word	0xffffefff

08008c04 <__sseek>:
 8008c04:	b570      	push	{r4, r5, r6, lr}
 8008c06:	000c      	movs	r4, r1
 8008c08:	250e      	movs	r5, #14
 8008c0a:	5f49      	ldrsh	r1, [r1, r5]
 8008c0c:	f000 f834 	bl	8008c78 <_lseek_r>
 8008c10:	89a3      	ldrh	r3, [r4, #12]
 8008c12:	1c42      	adds	r2, r0, #1
 8008c14:	d103      	bne.n	8008c1e <__sseek+0x1a>
 8008c16:	4a05      	ldr	r2, [pc, #20]	; (8008c2c <__sseek+0x28>)
 8008c18:	4013      	ands	r3, r2
 8008c1a:	81a3      	strh	r3, [r4, #12]
 8008c1c:	bd70      	pop	{r4, r5, r6, pc}
 8008c1e:	2280      	movs	r2, #128	; 0x80
 8008c20:	0152      	lsls	r2, r2, #5
 8008c22:	4313      	orrs	r3, r2
 8008c24:	81a3      	strh	r3, [r4, #12]
 8008c26:	6560      	str	r0, [r4, #84]	; 0x54
 8008c28:	e7f8      	b.n	8008c1c <__sseek+0x18>
 8008c2a:	46c0      	nop			; (mov r8, r8)
 8008c2c:	ffffefff 	.word	0xffffefff

08008c30 <__sclose>:
 8008c30:	b510      	push	{r4, lr}
 8008c32:	230e      	movs	r3, #14
 8008c34:	5ec9      	ldrsh	r1, [r1, r3]
 8008c36:	f000 f80d 	bl	8008c54 <_close_r>
 8008c3a:	bd10      	pop	{r4, pc}

08008c3c <memset>:
 8008c3c:	0003      	movs	r3, r0
 8008c3e:	1882      	adds	r2, r0, r2
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d100      	bne.n	8008c46 <memset+0xa>
 8008c44:	4770      	bx	lr
 8008c46:	7019      	strb	r1, [r3, #0]
 8008c48:	3301      	adds	r3, #1
 8008c4a:	e7f9      	b.n	8008c40 <memset+0x4>

08008c4c <_localeconv_r>:
 8008c4c:	4800      	ldr	r0, [pc, #0]	; (8008c50 <_localeconv_r+0x4>)
 8008c4e:	4770      	bx	lr
 8008c50:	20000174 	.word	0x20000174

08008c54 <_close_r>:
 8008c54:	2300      	movs	r3, #0
 8008c56:	b570      	push	{r4, r5, r6, lr}
 8008c58:	4d06      	ldr	r5, [pc, #24]	; (8008c74 <_close_r+0x20>)
 8008c5a:	0004      	movs	r4, r0
 8008c5c:	0008      	movs	r0, r1
 8008c5e:	602b      	str	r3, [r5, #0]
 8008c60:	f7fc fa84 	bl	800516c <_close>
 8008c64:	1c43      	adds	r3, r0, #1
 8008c66:	d103      	bne.n	8008c70 <_close_r+0x1c>
 8008c68:	682b      	ldr	r3, [r5, #0]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d000      	beq.n	8008c70 <_close_r+0x1c>
 8008c6e:	6023      	str	r3, [r4, #0]
 8008c70:	bd70      	pop	{r4, r5, r6, pc}
 8008c72:	46c0      	nop			; (mov r8, r8)
 8008c74:	20000a74 	.word	0x20000a74

08008c78 <_lseek_r>:
 8008c78:	b570      	push	{r4, r5, r6, lr}
 8008c7a:	0004      	movs	r4, r0
 8008c7c:	0008      	movs	r0, r1
 8008c7e:	0011      	movs	r1, r2
 8008c80:	001a      	movs	r2, r3
 8008c82:	2300      	movs	r3, #0
 8008c84:	4d05      	ldr	r5, [pc, #20]	; (8008c9c <_lseek_r+0x24>)
 8008c86:	602b      	str	r3, [r5, #0]
 8008c88:	f7fc fa7a 	bl	8005180 <_lseek>
 8008c8c:	1c43      	adds	r3, r0, #1
 8008c8e:	d103      	bne.n	8008c98 <_lseek_r+0x20>
 8008c90:	682b      	ldr	r3, [r5, #0]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d000      	beq.n	8008c98 <_lseek_r+0x20>
 8008c96:	6023      	str	r3, [r4, #0]
 8008c98:	bd70      	pop	{r4, r5, r6, pc}
 8008c9a:	46c0      	nop			; (mov r8, r8)
 8008c9c:	20000a74 	.word	0x20000a74

08008ca0 <_read_r>:
 8008ca0:	b570      	push	{r4, r5, r6, lr}
 8008ca2:	0004      	movs	r4, r0
 8008ca4:	0008      	movs	r0, r1
 8008ca6:	0011      	movs	r1, r2
 8008ca8:	001a      	movs	r2, r3
 8008caa:	2300      	movs	r3, #0
 8008cac:	4d05      	ldr	r5, [pc, #20]	; (8008cc4 <_read_r+0x24>)
 8008cae:	602b      	str	r3, [r5, #0]
 8008cb0:	f7fc fa42 	bl	8005138 <_read>
 8008cb4:	1c43      	adds	r3, r0, #1
 8008cb6:	d103      	bne.n	8008cc0 <_read_r+0x20>
 8008cb8:	682b      	ldr	r3, [r5, #0]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d000      	beq.n	8008cc0 <_read_r+0x20>
 8008cbe:	6023      	str	r3, [r4, #0]
 8008cc0:	bd70      	pop	{r4, r5, r6, pc}
 8008cc2:	46c0      	nop			; (mov r8, r8)
 8008cc4:	20000a74 	.word	0x20000a74

08008cc8 <_write_r>:
 8008cc8:	b570      	push	{r4, r5, r6, lr}
 8008cca:	0004      	movs	r4, r0
 8008ccc:	0008      	movs	r0, r1
 8008cce:	0011      	movs	r1, r2
 8008cd0:	001a      	movs	r2, r3
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	4d05      	ldr	r5, [pc, #20]	; (8008cec <_write_r+0x24>)
 8008cd6:	602b      	str	r3, [r5, #0]
 8008cd8:	f7fc fa3b 	bl	8005152 <_write>
 8008cdc:	1c43      	adds	r3, r0, #1
 8008cde:	d103      	bne.n	8008ce8 <_write_r+0x20>
 8008ce0:	682b      	ldr	r3, [r5, #0]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d000      	beq.n	8008ce8 <_write_r+0x20>
 8008ce6:	6023      	str	r3, [r4, #0]
 8008ce8:	bd70      	pop	{r4, r5, r6, pc}
 8008cea:	46c0      	nop			; (mov r8, r8)
 8008cec:	20000a74 	.word	0x20000a74

08008cf0 <__errno>:
 8008cf0:	4b01      	ldr	r3, [pc, #4]	; (8008cf8 <__errno+0x8>)
 8008cf2:	6818      	ldr	r0, [r3, #0]
 8008cf4:	4770      	bx	lr
 8008cf6:	46c0      	nop			; (mov r8, r8)
 8008cf8:	20000080 	.word	0x20000080

08008cfc <__libc_init_array>:
 8008cfc:	b570      	push	{r4, r5, r6, lr}
 8008cfe:	2600      	movs	r6, #0
 8008d00:	4c0c      	ldr	r4, [pc, #48]	; (8008d34 <__libc_init_array+0x38>)
 8008d02:	4d0d      	ldr	r5, [pc, #52]	; (8008d38 <__libc_init_array+0x3c>)
 8008d04:	1b64      	subs	r4, r4, r5
 8008d06:	10a4      	asrs	r4, r4, #2
 8008d08:	42a6      	cmp	r6, r4
 8008d0a:	d109      	bne.n	8008d20 <__libc_init_array+0x24>
 8008d0c:	2600      	movs	r6, #0
 8008d0e:	f002 f921 	bl	800af54 <_init>
 8008d12:	4c0a      	ldr	r4, [pc, #40]	; (8008d3c <__libc_init_array+0x40>)
 8008d14:	4d0a      	ldr	r5, [pc, #40]	; (8008d40 <__libc_init_array+0x44>)
 8008d16:	1b64      	subs	r4, r4, r5
 8008d18:	10a4      	asrs	r4, r4, #2
 8008d1a:	42a6      	cmp	r6, r4
 8008d1c:	d105      	bne.n	8008d2a <__libc_init_array+0x2e>
 8008d1e:	bd70      	pop	{r4, r5, r6, pc}
 8008d20:	00b3      	lsls	r3, r6, #2
 8008d22:	58eb      	ldr	r3, [r5, r3]
 8008d24:	4798      	blx	r3
 8008d26:	3601      	adds	r6, #1
 8008d28:	e7ee      	b.n	8008d08 <__libc_init_array+0xc>
 8008d2a:	00b3      	lsls	r3, r6, #2
 8008d2c:	58eb      	ldr	r3, [r5, r3]
 8008d2e:	4798      	blx	r3
 8008d30:	3601      	adds	r6, #1
 8008d32:	e7f2      	b.n	8008d1a <__libc_init_array+0x1e>
 8008d34:	0800d9bc 	.word	0x0800d9bc
 8008d38:	0800d9bc 	.word	0x0800d9bc
 8008d3c:	0800d9c0 	.word	0x0800d9c0
 8008d40:	0800d9bc 	.word	0x0800d9bc

08008d44 <__retarget_lock_init_recursive>:
 8008d44:	4770      	bx	lr

08008d46 <__retarget_lock_acquire_recursive>:
 8008d46:	4770      	bx	lr

08008d48 <__retarget_lock_release_recursive>:
 8008d48:	4770      	bx	lr

08008d4a <memchr>:
 8008d4a:	b2c9      	uxtb	r1, r1
 8008d4c:	1882      	adds	r2, r0, r2
 8008d4e:	4290      	cmp	r0, r2
 8008d50:	d101      	bne.n	8008d56 <memchr+0xc>
 8008d52:	2000      	movs	r0, #0
 8008d54:	4770      	bx	lr
 8008d56:	7803      	ldrb	r3, [r0, #0]
 8008d58:	428b      	cmp	r3, r1
 8008d5a:	d0fb      	beq.n	8008d54 <memchr+0xa>
 8008d5c:	3001      	adds	r0, #1
 8008d5e:	e7f6      	b.n	8008d4e <memchr+0x4>

08008d60 <memcpy>:
 8008d60:	2300      	movs	r3, #0
 8008d62:	b510      	push	{r4, lr}
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d100      	bne.n	8008d6a <memcpy+0xa>
 8008d68:	bd10      	pop	{r4, pc}
 8008d6a:	5ccc      	ldrb	r4, [r1, r3]
 8008d6c:	54c4      	strb	r4, [r0, r3]
 8008d6e:	3301      	adds	r3, #1
 8008d70:	e7f8      	b.n	8008d64 <memcpy+0x4>

08008d72 <quorem>:
 8008d72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d74:	6902      	ldr	r2, [r0, #16]
 8008d76:	690b      	ldr	r3, [r1, #16]
 8008d78:	b089      	sub	sp, #36	; 0x24
 8008d7a:	0007      	movs	r7, r0
 8008d7c:	9104      	str	r1, [sp, #16]
 8008d7e:	2000      	movs	r0, #0
 8008d80:	429a      	cmp	r2, r3
 8008d82:	db69      	blt.n	8008e58 <quorem+0xe6>
 8008d84:	3b01      	subs	r3, #1
 8008d86:	009c      	lsls	r4, r3, #2
 8008d88:	9301      	str	r3, [sp, #4]
 8008d8a:	000b      	movs	r3, r1
 8008d8c:	3314      	adds	r3, #20
 8008d8e:	9306      	str	r3, [sp, #24]
 8008d90:	191b      	adds	r3, r3, r4
 8008d92:	9305      	str	r3, [sp, #20]
 8008d94:	003b      	movs	r3, r7
 8008d96:	3314      	adds	r3, #20
 8008d98:	9303      	str	r3, [sp, #12]
 8008d9a:	191c      	adds	r4, r3, r4
 8008d9c:	9b05      	ldr	r3, [sp, #20]
 8008d9e:	6826      	ldr	r6, [r4, #0]
 8008da0:	681d      	ldr	r5, [r3, #0]
 8008da2:	0030      	movs	r0, r6
 8008da4:	3501      	adds	r5, #1
 8008da6:	0029      	movs	r1, r5
 8008da8:	f7f7 f9ca 	bl	8000140 <__udivsi3>
 8008dac:	9002      	str	r0, [sp, #8]
 8008dae:	42ae      	cmp	r6, r5
 8008db0:	d329      	bcc.n	8008e06 <quorem+0x94>
 8008db2:	9b06      	ldr	r3, [sp, #24]
 8008db4:	2600      	movs	r6, #0
 8008db6:	469c      	mov	ip, r3
 8008db8:	9d03      	ldr	r5, [sp, #12]
 8008dba:	9606      	str	r6, [sp, #24]
 8008dbc:	4662      	mov	r2, ip
 8008dbe:	ca08      	ldmia	r2!, {r3}
 8008dc0:	6828      	ldr	r0, [r5, #0]
 8008dc2:	4694      	mov	ip, r2
 8008dc4:	9a02      	ldr	r2, [sp, #8]
 8008dc6:	b299      	uxth	r1, r3
 8008dc8:	4351      	muls	r1, r2
 8008dca:	0c1b      	lsrs	r3, r3, #16
 8008dcc:	4353      	muls	r3, r2
 8008dce:	1989      	adds	r1, r1, r6
 8008dd0:	0c0a      	lsrs	r2, r1, #16
 8008dd2:	189b      	adds	r3, r3, r2
 8008dd4:	9307      	str	r3, [sp, #28]
 8008dd6:	0c1e      	lsrs	r6, r3, #16
 8008dd8:	9b06      	ldr	r3, [sp, #24]
 8008dda:	b282      	uxth	r2, r0
 8008ddc:	18d2      	adds	r2, r2, r3
 8008dde:	466b      	mov	r3, sp
 8008de0:	b289      	uxth	r1, r1
 8008de2:	8b9b      	ldrh	r3, [r3, #28]
 8008de4:	1a52      	subs	r2, r2, r1
 8008de6:	0c01      	lsrs	r1, r0, #16
 8008de8:	1ac9      	subs	r1, r1, r3
 8008dea:	1413      	asrs	r3, r2, #16
 8008dec:	18cb      	adds	r3, r1, r3
 8008dee:	1419      	asrs	r1, r3, #16
 8008df0:	b292      	uxth	r2, r2
 8008df2:	041b      	lsls	r3, r3, #16
 8008df4:	4313      	orrs	r3, r2
 8008df6:	c508      	stmia	r5!, {r3}
 8008df8:	9b05      	ldr	r3, [sp, #20]
 8008dfa:	9106      	str	r1, [sp, #24]
 8008dfc:	4563      	cmp	r3, ip
 8008dfe:	d2dd      	bcs.n	8008dbc <quorem+0x4a>
 8008e00:	6823      	ldr	r3, [r4, #0]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d030      	beq.n	8008e68 <quorem+0xf6>
 8008e06:	0038      	movs	r0, r7
 8008e08:	9904      	ldr	r1, [sp, #16]
 8008e0a:	f001 f9dd 	bl	800a1c8 <__mcmp>
 8008e0e:	2800      	cmp	r0, #0
 8008e10:	db21      	blt.n	8008e56 <quorem+0xe4>
 8008e12:	0038      	movs	r0, r7
 8008e14:	2600      	movs	r6, #0
 8008e16:	9b02      	ldr	r3, [sp, #8]
 8008e18:	9c04      	ldr	r4, [sp, #16]
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	9302      	str	r3, [sp, #8]
 8008e1e:	3014      	adds	r0, #20
 8008e20:	3414      	adds	r4, #20
 8008e22:	6803      	ldr	r3, [r0, #0]
 8008e24:	cc02      	ldmia	r4!, {r1}
 8008e26:	b29d      	uxth	r5, r3
 8008e28:	19ad      	adds	r5, r5, r6
 8008e2a:	b28a      	uxth	r2, r1
 8008e2c:	1aaa      	subs	r2, r5, r2
 8008e2e:	0c09      	lsrs	r1, r1, #16
 8008e30:	0c1b      	lsrs	r3, r3, #16
 8008e32:	1a5b      	subs	r3, r3, r1
 8008e34:	1411      	asrs	r1, r2, #16
 8008e36:	185b      	adds	r3, r3, r1
 8008e38:	141e      	asrs	r6, r3, #16
 8008e3a:	b292      	uxth	r2, r2
 8008e3c:	041b      	lsls	r3, r3, #16
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	c008      	stmia	r0!, {r3}
 8008e42:	9b05      	ldr	r3, [sp, #20]
 8008e44:	42a3      	cmp	r3, r4
 8008e46:	d2ec      	bcs.n	8008e22 <quorem+0xb0>
 8008e48:	9b01      	ldr	r3, [sp, #4]
 8008e4a:	9a03      	ldr	r2, [sp, #12]
 8008e4c:	009b      	lsls	r3, r3, #2
 8008e4e:	18d3      	adds	r3, r2, r3
 8008e50:	681a      	ldr	r2, [r3, #0]
 8008e52:	2a00      	cmp	r2, #0
 8008e54:	d015      	beq.n	8008e82 <quorem+0x110>
 8008e56:	9802      	ldr	r0, [sp, #8]
 8008e58:	b009      	add	sp, #36	; 0x24
 8008e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e5c:	6823      	ldr	r3, [r4, #0]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d106      	bne.n	8008e70 <quorem+0xfe>
 8008e62:	9b01      	ldr	r3, [sp, #4]
 8008e64:	3b01      	subs	r3, #1
 8008e66:	9301      	str	r3, [sp, #4]
 8008e68:	9b03      	ldr	r3, [sp, #12]
 8008e6a:	3c04      	subs	r4, #4
 8008e6c:	42a3      	cmp	r3, r4
 8008e6e:	d3f5      	bcc.n	8008e5c <quorem+0xea>
 8008e70:	9b01      	ldr	r3, [sp, #4]
 8008e72:	613b      	str	r3, [r7, #16]
 8008e74:	e7c7      	b.n	8008e06 <quorem+0x94>
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	2a00      	cmp	r2, #0
 8008e7a:	d106      	bne.n	8008e8a <quorem+0x118>
 8008e7c:	9a01      	ldr	r2, [sp, #4]
 8008e7e:	3a01      	subs	r2, #1
 8008e80:	9201      	str	r2, [sp, #4]
 8008e82:	9a03      	ldr	r2, [sp, #12]
 8008e84:	3b04      	subs	r3, #4
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d3f5      	bcc.n	8008e76 <quorem+0x104>
 8008e8a:	9b01      	ldr	r3, [sp, #4]
 8008e8c:	613b      	str	r3, [r7, #16]
 8008e8e:	e7e2      	b.n	8008e56 <quorem+0xe4>

08008e90 <_dtoa_r>:
 8008e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e92:	0014      	movs	r4, r2
 8008e94:	001d      	movs	r5, r3
 8008e96:	69c6      	ldr	r6, [r0, #28]
 8008e98:	b09d      	sub	sp, #116	; 0x74
 8008e9a:	9408      	str	r4, [sp, #32]
 8008e9c:	9509      	str	r5, [sp, #36]	; 0x24
 8008e9e:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8008ea0:	9004      	str	r0, [sp, #16]
 8008ea2:	2e00      	cmp	r6, #0
 8008ea4:	d10f      	bne.n	8008ec6 <_dtoa_r+0x36>
 8008ea6:	2010      	movs	r0, #16
 8008ea8:	f000 fe4a 	bl	8009b40 <malloc>
 8008eac:	9b04      	ldr	r3, [sp, #16]
 8008eae:	1e02      	subs	r2, r0, #0
 8008eb0:	61d8      	str	r0, [r3, #28]
 8008eb2:	d104      	bne.n	8008ebe <_dtoa_r+0x2e>
 8008eb4:	21ef      	movs	r1, #239	; 0xef
 8008eb6:	4bc6      	ldr	r3, [pc, #792]	; (80091d0 <_dtoa_r+0x340>)
 8008eb8:	48c6      	ldr	r0, [pc, #792]	; (80091d4 <_dtoa_r+0x344>)
 8008eba:	f001 fcd5 	bl	800a868 <__assert_func>
 8008ebe:	6046      	str	r6, [r0, #4]
 8008ec0:	6086      	str	r6, [r0, #8]
 8008ec2:	6006      	str	r6, [r0, #0]
 8008ec4:	60c6      	str	r6, [r0, #12]
 8008ec6:	9b04      	ldr	r3, [sp, #16]
 8008ec8:	69db      	ldr	r3, [r3, #28]
 8008eca:	6819      	ldr	r1, [r3, #0]
 8008ecc:	2900      	cmp	r1, #0
 8008ece:	d00b      	beq.n	8008ee8 <_dtoa_r+0x58>
 8008ed0:	685a      	ldr	r2, [r3, #4]
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	4093      	lsls	r3, r2
 8008ed6:	604a      	str	r2, [r1, #4]
 8008ed8:	608b      	str	r3, [r1, #8]
 8008eda:	9804      	ldr	r0, [sp, #16]
 8008edc:	f000 ff32 	bl	8009d44 <_Bfree>
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	9b04      	ldr	r3, [sp, #16]
 8008ee4:	69db      	ldr	r3, [r3, #28]
 8008ee6:	601a      	str	r2, [r3, #0]
 8008ee8:	2d00      	cmp	r5, #0
 8008eea:	da1e      	bge.n	8008f2a <_dtoa_r+0x9a>
 8008eec:	2301      	movs	r3, #1
 8008eee:	603b      	str	r3, [r7, #0]
 8008ef0:	006b      	lsls	r3, r5, #1
 8008ef2:	085b      	lsrs	r3, r3, #1
 8008ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8008ef6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008ef8:	4bb7      	ldr	r3, [pc, #732]	; (80091d8 <_dtoa_r+0x348>)
 8008efa:	4ab7      	ldr	r2, [pc, #732]	; (80091d8 <_dtoa_r+0x348>)
 8008efc:	403b      	ands	r3, r7
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d116      	bne.n	8008f30 <_dtoa_r+0xa0>
 8008f02:	4bb6      	ldr	r3, [pc, #728]	; (80091dc <_dtoa_r+0x34c>)
 8008f04:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008f06:	6013      	str	r3, [r2, #0]
 8008f08:	033b      	lsls	r3, r7, #12
 8008f0a:	0b1b      	lsrs	r3, r3, #12
 8008f0c:	4323      	orrs	r3, r4
 8008f0e:	d101      	bne.n	8008f14 <_dtoa_r+0x84>
 8008f10:	f000 fdb5 	bl	8009a7e <_dtoa_r+0xbee>
 8008f14:	4bb2      	ldr	r3, [pc, #712]	; (80091e0 <_dtoa_r+0x350>)
 8008f16:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008f18:	9306      	str	r3, [sp, #24]
 8008f1a:	2a00      	cmp	r2, #0
 8008f1c:	d002      	beq.n	8008f24 <_dtoa_r+0x94>
 8008f1e:	4bb1      	ldr	r3, [pc, #708]	; (80091e4 <_dtoa_r+0x354>)
 8008f20:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008f22:	6013      	str	r3, [r2, #0]
 8008f24:	9806      	ldr	r0, [sp, #24]
 8008f26:	b01d      	add	sp, #116	; 0x74
 8008f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	603b      	str	r3, [r7, #0]
 8008f2e:	e7e2      	b.n	8008ef6 <_dtoa_r+0x66>
 8008f30:	9a08      	ldr	r2, [sp, #32]
 8008f32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f34:	9210      	str	r2, [sp, #64]	; 0x40
 8008f36:	9311      	str	r3, [sp, #68]	; 0x44
 8008f38:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008f3a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	2300      	movs	r3, #0
 8008f40:	f7f7 fa90 	bl	8000464 <__aeabi_dcmpeq>
 8008f44:	1e06      	subs	r6, r0, #0
 8008f46:	d009      	beq.n	8008f5c <_dtoa_r+0xcc>
 8008f48:	2301      	movs	r3, #1
 8008f4a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008f4c:	6013      	str	r3, [r2, #0]
 8008f4e:	4ba6      	ldr	r3, [pc, #664]	; (80091e8 <_dtoa_r+0x358>)
 8008f50:	9306      	str	r3, [sp, #24]
 8008f52:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d0e5      	beq.n	8008f24 <_dtoa_r+0x94>
 8008f58:	4ba4      	ldr	r3, [pc, #656]	; (80091ec <_dtoa_r+0x35c>)
 8008f5a:	e7e1      	b.n	8008f20 <_dtoa_r+0x90>
 8008f5c:	ab1a      	add	r3, sp, #104	; 0x68
 8008f5e:	9301      	str	r3, [sp, #4]
 8008f60:	ab1b      	add	r3, sp, #108	; 0x6c
 8008f62:	9300      	str	r3, [sp, #0]
 8008f64:	9804      	ldr	r0, [sp, #16]
 8008f66:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008f68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f6a:	f001 f9e1 	bl	800a330 <__d2b>
 8008f6e:	007a      	lsls	r2, r7, #1
 8008f70:	9005      	str	r0, [sp, #20]
 8008f72:	0d52      	lsrs	r2, r2, #21
 8008f74:	d100      	bne.n	8008f78 <_dtoa_r+0xe8>
 8008f76:	e07b      	b.n	8009070 <_dtoa_r+0x1e0>
 8008f78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f7a:	9617      	str	r6, [sp, #92]	; 0x5c
 8008f7c:	0319      	lsls	r1, r3, #12
 8008f7e:	4b9c      	ldr	r3, [pc, #624]	; (80091f0 <_dtoa_r+0x360>)
 8008f80:	0b09      	lsrs	r1, r1, #12
 8008f82:	430b      	orrs	r3, r1
 8008f84:	499b      	ldr	r1, [pc, #620]	; (80091f4 <_dtoa_r+0x364>)
 8008f86:	1857      	adds	r7, r2, r1
 8008f88:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008f8a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008f8c:	0019      	movs	r1, r3
 8008f8e:	2200      	movs	r2, #0
 8008f90:	4b99      	ldr	r3, [pc, #612]	; (80091f8 <_dtoa_r+0x368>)
 8008f92:	f7f9 fc33 	bl	80027fc <__aeabi_dsub>
 8008f96:	4a99      	ldr	r2, [pc, #612]	; (80091fc <_dtoa_r+0x36c>)
 8008f98:	4b99      	ldr	r3, [pc, #612]	; (8009200 <_dtoa_r+0x370>)
 8008f9a:	f7f9 f96d 	bl	8002278 <__aeabi_dmul>
 8008f9e:	4a99      	ldr	r2, [pc, #612]	; (8009204 <_dtoa_r+0x374>)
 8008fa0:	4b99      	ldr	r3, [pc, #612]	; (8009208 <_dtoa_r+0x378>)
 8008fa2:	f7f8 fa0f 	bl	80013c4 <__aeabi_dadd>
 8008fa6:	0004      	movs	r4, r0
 8008fa8:	0038      	movs	r0, r7
 8008faa:	000d      	movs	r5, r1
 8008fac:	f7f9 fffc 	bl	8002fa8 <__aeabi_i2d>
 8008fb0:	4a96      	ldr	r2, [pc, #600]	; (800920c <_dtoa_r+0x37c>)
 8008fb2:	4b97      	ldr	r3, [pc, #604]	; (8009210 <_dtoa_r+0x380>)
 8008fb4:	f7f9 f960 	bl	8002278 <__aeabi_dmul>
 8008fb8:	0002      	movs	r2, r0
 8008fba:	000b      	movs	r3, r1
 8008fbc:	0020      	movs	r0, r4
 8008fbe:	0029      	movs	r1, r5
 8008fc0:	f7f8 fa00 	bl	80013c4 <__aeabi_dadd>
 8008fc4:	0004      	movs	r4, r0
 8008fc6:	000d      	movs	r5, r1
 8008fc8:	f7f9 ffb8 	bl	8002f3c <__aeabi_d2iz>
 8008fcc:	2200      	movs	r2, #0
 8008fce:	9003      	str	r0, [sp, #12]
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	0020      	movs	r0, r4
 8008fd4:	0029      	movs	r1, r5
 8008fd6:	f7f7 fa4b 	bl	8000470 <__aeabi_dcmplt>
 8008fda:	2800      	cmp	r0, #0
 8008fdc:	d00b      	beq.n	8008ff6 <_dtoa_r+0x166>
 8008fde:	9803      	ldr	r0, [sp, #12]
 8008fe0:	f7f9 ffe2 	bl	8002fa8 <__aeabi_i2d>
 8008fe4:	002b      	movs	r3, r5
 8008fe6:	0022      	movs	r2, r4
 8008fe8:	f7f7 fa3c 	bl	8000464 <__aeabi_dcmpeq>
 8008fec:	4243      	negs	r3, r0
 8008fee:	4158      	adcs	r0, r3
 8008ff0:	9b03      	ldr	r3, [sp, #12]
 8008ff2:	1a1b      	subs	r3, r3, r0
 8008ff4:	9303      	str	r3, [sp, #12]
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	9316      	str	r3, [sp, #88]	; 0x58
 8008ffa:	9b03      	ldr	r3, [sp, #12]
 8008ffc:	2b16      	cmp	r3, #22
 8008ffe:	d810      	bhi.n	8009022 <_dtoa_r+0x192>
 8009000:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009002:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009004:	9a03      	ldr	r2, [sp, #12]
 8009006:	4b83      	ldr	r3, [pc, #524]	; (8009214 <_dtoa_r+0x384>)
 8009008:	00d2      	lsls	r2, r2, #3
 800900a:	189b      	adds	r3, r3, r2
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	f7f7 fa2e 	bl	8000470 <__aeabi_dcmplt>
 8009014:	2800      	cmp	r0, #0
 8009016:	d047      	beq.n	80090a8 <_dtoa_r+0x218>
 8009018:	9b03      	ldr	r3, [sp, #12]
 800901a:	3b01      	subs	r3, #1
 800901c:	9303      	str	r3, [sp, #12]
 800901e:	2300      	movs	r3, #0
 8009020:	9316      	str	r3, [sp, #88]	; 0x58
 8009022:	2200      	movs	r2, #0
 8009024:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009026:	920a      	str	r2, [sp, #40]	; 0x28
 8009028:	1bdb      	subs	r3, r3, r7
 800902a:	1e5a      	subs	r2, r3, #1
 800902c:	d53e      	bpl.n	80090ac <_dtoa_r+0x21c>
 800902e:	2201      	movs	r2, #1
 8009030:	1ad3      	subs	r3, r2, r3
 8009032:	930a      	str	r3, [sp, #40]	; 0x28
 8009034:	2300      	movs	r3, #0
 8009036:	930c      	str	r3, [sp, #48]	; 0x30
 8009038:	9b03      	ldr	r3, [sp, #12]
 800903a:	2b00      	cmp	r3, #0
 800903c:	db38      	blt.n	80090b0 <_dtoa_r+0x220>
 800903e:	9a03      	ldr	r2, [sp, #12]
 8009040:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009042:	4694      	mov	ip, r2
 8009044:	4463      	add	r3, ip
 8009046:	930c      	str	r3, [sp, #48]	; 0x30
 8009048:	2300      	movs	r3, #0
 800904a:	9213      	str	r2, [sp, #76]	; 0x4c
 800904c:	930d      	str	r3, [sp, #52]	; 0x34
 800904e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009050:	2401      	movs	r4, #1
 8009052:	2b09      	cmp	r3, #9
 8009054:	d867      	bhi.n	8009126 <_dtoa_r+0x296>
 8009056:	2b05      	cmp	r3, #5
 8009058:	dd02      	ble.n	8009060 <_dtoa_r+0x1d0>
 800905a:	2400      	movs	r4, #0
 800905c:	3b04      	subs	r3, #4
 800905e:	9322      	str	r3, [sp, #136]	; 0x88
 8009060:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009062:	1e98      	subs	r0, r3, #2
 8009064:	2803      	cmp	r0, #3
 8009066:	d867      	bhi.n	8009138 <_dtoa_r+0x2a8>
 8009068:	f7f7 f856 	bl	8000118 <__gnu_thumb1_case_uqi>
 800906c:	5b383a2b 	.word	0x5b383a2b
 8009070:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009072:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8009074:	18f6      	adds	r6, r6, r3
 8009076:	4b68      	ldr	r3, [pc, #416]	; (8009218 <_dtoa_r+0x388>)
 8009078:	18f2      	adds	r2, r6, r3
 800907a:	2a20      	cmp	r2, #32
 800907c:	dd0f      	ble.n	800909e <_dtoa_r+0x20e>
 800907e:	2340      	movs	r3, #64	; 0x40
 8009080:	1a9b      	subs	r3, r3, r2
 8009082:	409f      	lsls	r7, r3
 8009084:	4b65      	ldr	r3, [pc, #404]	; (800921c <_dtoa_r+0x38c>)
 8009086:	0038      	movs	r0, r7
 8009088:	18f3      	adds	r3, r6, r3
 800908a:	40dc      	lsrs	r4, r3
 800908c:	4320      	orrs	r0, r4
 800908e:	f7f9 ffbb 	bl	8003008 <__aeabi_ui2d>
 8009092:	2201      	movs	r2, #1
 8009094:	4b62      	ldr	r3, [pc, #392]	; (8009220 <_dtoa_r+0x390>)
 8009096:	1e77      	subs	r7, r6, #1
 8009098:	18cb      	adds	r3, r1, r3
 800909a:	9217      	str	r2, [sp, #92]	; 0x5c
 800909c:	e776      	b.n	8008f8c <_dtoa_r+0xfc>
 800909e:	2320      	movs	r3, #32
 80090a0:	0020      	movs	r0, r4
 80090a2:	1a9b      	subs	r3, r3, r2
 80090a4:	4098      	lsls	r0, r3
 80090a6:	e7f2      	b.n	800908e <_dtoa_r+0x1fe>
 80090a8:	9016      	str	r0, [sp, #88]	; 0x58
 80090aa:	e7ba      	b.n	8009022 <_dtoa_r+0x192>
 80090ac:	920c      	str	r2, [sp, #48]	; 0x30
 80090ae:	e7c3      	b.n	8009038 <_dtoa_r+0x1a8>
 80090b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090b2:	9a03      	ldr	r2, [sp, #12]
 80090b4:	1a9b      	subs	r3, r3, r2
 80090b6:	930a      	str	r3, [sp, #40]	; 0x28
 80090b8:	4253      	negs	r3, r2
 80090ba:	930d      	str	r3, [sp, #52]	; 0x34
 80090bc:	2300      	movs	r3, #0
 80090be:	9313      	str	r3, [sp, #76]	; 0x4c
 80090c0:	e7c5      	b.n	800904e <_dtoa_r+0x1be>
 80090c2:	2300      	movs	r3, #0
 80090c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80090c6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80090c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80090ca:	9307      	str	r3, [sp, #28]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	dc13      	bgt.n	80090f8 <_dtoa_r+0x268>
 80090d0:	2301      	movs	r3, #1
 80090d2:	001a      	movs	r2, r3
 80090d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80090d6:	9307      	str	r3, [sp, #28]
 80090d8:	9223      	str	r2, [sp, #140]	; 0x8c
 80090da:	e00d      	b.n	80090f8 <_dtoa_r+0x268>
 80090dc:	2301      	movs	r3, #1
 80090de:	e7f1      	b.n	80090c4 <_dtoa_r+0x234>
 80090e0:	2300      	movs	r3, #0
 80090e2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80090e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80090e6:	4694      	mov	ip, r2
 80090e8:	9b03      	ldr	r3, [sp, #12]
 80090ea:	4463      	add	r3, ip
 80090ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80090ee:	3301      	adds	r3, #1
 80090f0:	9307      	str	r3, [sp, #28]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	dc00      	bgt.n	80090f8 <_dtoa_r+0x268>
 80090f6:	2301      	movs	r3, #1
 80090f8:	9a04      	ldr	r2, [sp, #16]
 80090fa:	2100      	movs	r1, #0
 80090fc:	69d0      	ldr	r0, [r2, #28]
 80090fe:	2204      	movs	r2, #4
 8009100:	0015      	movs	r5, r2
 8009102:	3514      	adds	r5, #20
 8009104:	429d      	cmp	r5, r3
 8009106:	d91b      	bls.n	8009140 <_dtoa_r+0x2b0>
 8009108:	6041      	str	r1, [r0, #4]
 800910a:	9804      	ldr	r0, [sp, #16]
 800910c:	f000 fdd6 	bl	8009cbc <_Balloc>
 8009110:	9006      	str	r0, [sp, #24]
 8009112:	2800      	cmp	r0, #0
 8009114:	d117      	bne.n	8009146 <_dtoa_r+0x2b6>
 8009116:	21b0      	movs	r1, #176	; 0xb0
 8009118:	4b42      	ldr	r3, [pc, #264]	; (8009224 <_dtoa_r+0x394>)
 800911a:	482e      	ldr	r0, [pc, #184]	; (80091d4 <_dtoa_r+0x344>)
 800911c:	9a06      	ldr	r2, [sp, #24]
 800911e:	31ff      	adds	r1, #255	; 0xff
 8009120:	e6cb      	b.n	8008eba <_dtoa_r+0x2a>
 8009122:	2301      	movs	r3, #1
 8009124:	e7dd      	b.n	80090e2 <_dtoa_r+0x252>
 8009126:	2300      	movs	r3, #0
 8009128:	940f      	str	r4, [sp, #60]	; 0x3c
 800912a:	9322      	str	r3, [sp, #136]	; 0x88
 800912c:	3b01      	subs	r3, #1
 800912e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009130:	9307      	str	r3, [sp, #28]
 8009132:	2200      	movs	r2, #0
 8009134:	3313      	adds	r3, #19
 8009136:	e7cf      	b.n	80090d8 <_dtoa_r+0x248>
 8009138:	2301      	movs	r3, #1
 800913a:	930f      	str	r3, [sp, #60]	; 0x3c
 800913c:	3b02      	subs	r3, #2
 800913e:	e7f6      	b.n	800912e <_dtoa_r+0x29e>
 8009140:	3101      	adds	r1, #1
 8009142:	0052      	lsls	r2, r2, #1
 8009144:	e7dc      	b.n	8009100 <_dtoa_r+0x270>
 8009146:	9b04      	ldr	r3, [sp, #16]
 8009148:	9a06      	ldr	r2, [sp, #24]
 800914a:	69db      	ldr	r3, [r3, #28]
 800914c:	601a      	str	r2, [r3, #0]
 800914e:	9b07      	ldr	r3, [sp, #28]
 8009150:	2b0e      	cmp	r3, #14
 8009152:	d900      	bls.n	8009156 <_dtoa_r+0x2c6>
 8009154:	e0e5      	b.n	8009322 <_dtoa_r+0x492>
 8009156:	2c00      	cmp	r4, #0
 8009158:	d100      	bne.n	800915c <_dtoa_r+0x2cc>
 800915a:	e0e2      	b.n	8009322 <_dtoa_r+0x492>
 800915c:	9b03      	ldr	r3, [sp, #12]
 800915e:	2b00      	cmp	r3, #0
 8009160:	dd64      	ble.n	800922c <_dtoa_r+0x39c>
 8009162:	210f      	movs	r1, #15
 8009164:	9a03      	ldr	r2, [sp, #12]
 8009166:	4b2b      	ldr	r3, [pc, #172]	; (8009214 <_dtoa_r+0x384>)
 8009168:	400a      	ands	r2, r1
 800916a:	00d2      	lsls	r2, r2, #3
 800916c:	189b      	adds	r3, r3, r2
 800916e:	681e      	ldr	r6, [r3, #0]
 8009170:	685f      	ldr	r7, [r3, #4]
 8009172:	9b03      	ldr	r3, [sp, #12]
 8009174:	2402      	movs	r4, #2
 8009176:	111d      	asrs	r5, r3, #4
 8009178:	05db      	lsls	r3, r3, #23
 800917a:	d50a      	bpl.n	8009192 <_dtoa_r+0x302>
 800917c:	4b2a      	ldr	r3, [pc, #168]	; (8009228 <_dtoa_r+0x398>)
 800917e:	400d      	ands	r5, r1
 8009180:	6a1a      	ldr	r2, [r3, #32]
 8009182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009184:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009186:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009188:	f7f8 fc7c 	bl	8001a84 <__aeabi_ddiv>
 800918c:	9008      	str	r0, [sp, #32]
 800918e:	9109      	str	r1, [sp, #36]	; 0x24
 8009190:	3401      	adds	r4, #1
 8009192:	4b25      	ldr	r3, [pc, #148]	; (8009228 <_dtoa_r+0x398>)
 8009194:	930e      	str	r3, [sp, #56]	; 0x38
 8009196:	2d00      	cmp	r5, #0
 8009198:	d108      	bne.n	80091ac <_dtoa_r+0x31c>
 800919a:	9808      	ldr	r0, [sp, #32]
 800919c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800919e:	0032      	movs	r2, r6
 80091a0:	003b      	movs	r3, r7
 80091a2:	f7f8 fc6f 	bl	8001a84 <__aeabi_ddiv>
 80091a6:	9008      	str	r0, [sp, #32]
 80091a8:	9109      	str	r1, [sp, #36]	; 0x24
 80091aa:	e05a      	b.n	8009262 <_dtoa_r+0x3d2>
 80091ac:	2301      	movs	r3, #1
 80091ae:	421d      	tst	r5, r3
 80091b0:	d009      	beq.n	80091c6 <_dtoa_r+0x336>
 80091b2:	18e4      	adds	r4, r4, r3
 80091b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091b6:	0030      	movs	r0, r6
 80091b8:	681a      	ldr	r2, [r3, #0]
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	0039      	movs	r1, r7
 80091be:	f7f9 f85b 	bl	8002278 <__aeabi_dmul>
 80091c2:	0006      	movs	r6, r0
 80091c4:	000f      	movs	r7, r1
 80091c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091c8:	106d      	asrs	r5, r5, #1
 80091ca:	3308      	adds	r3, #8
 80091cc:	e7e2      	b.n	8009194 <_dtoa_r+0x304>
 80091ce:	46c0      	nop			; (mov r8, r8)
 80091d0:	0800d68d 	.word	0x0800d68d
 80091d4:	0800d6a4 	.word	0x0800d6a4
 80091d8:	7ff00000 	.word	0x7ff00000
 80091dc:	0000270f 	.word	0x0000270f
 80091e0:	0800d689 	.word	0x0800d689
 80091e4:	0800d68c 	.word	0x0800d68c
 80091e8:	0800cfce 	.word	0x0800cfce
 80091ec:	0800cfcf 	.word	0x0800cfcf
 80091f0:	3ff00000 	.word	0x3ff00000
 80091f4:	fffffc01 	.word	0xfffffc01
 80091f8:	3ff80000 	.word	0x3ff80000
 80091fc:	636f4361 	.word	0x636f4361
 8009200:	3fd287a7 	.word	0x3fd287a7
 8009204:	8b60c8b3 	.word	0x8b60c8b3
 8009208:	3fc68a28 	.word	0x3fc68a28
 800920c:	509f79fb 	.word	0x509f79fb
 8009210:	3fd34413 	.word	0x3fd34413
 8009214:	0800d790 	.word	0x0800d790
 8009218:	00000432 	.word	0x00000432
 800921c:	00000412 	.word	0x00000412
 8009220:	fe100000 	.word	0xfe100000
 8009224:	0800d6fc 	.word	0x0800d6fc
 8009228:	0800d768 	.word	0x0800d768
 800922c:	9b03      	ldr	r3, [sp, #12]
 800922e:	2402      	movs	r4, #2
 8009230:	2b00      	cmp	r3, #0
 8009232:	d016      	beq.n	8009262 <_dtoa_r+0x3d2>
 8009234:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009236:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009238:	220f      	movs	r2, #15
 800923a:	425d      	negs	r5, r3
 800923c:	402a      	ands	r2, r5
 800923e:	4bdd      	ldr	r3, [pc, #884]	; (80095b4 <_dtoa_r+0x724>)
 8009240:	00d2      	lsls	r2, r2, #3
 8009242:	189b      	adds	r3, r3, r2
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	f7f9 f816 	bl	8002278 <__aeabi_dmul>
 800924c:	2701      	movs	r7, #1
 800924e:	2300      	movs	r3, #0
 8009250:	9008      	str	r0, [sp, #32]
 8009252:	9109      	str	r1, [sp, #36]	; 0x24
 8009254:	4ed8      	ldr	r6, [pc, #864]	; (80095b8 <_dtoa_r+0x728>)
 8009256:	112d      	asrs	r5, r5, #4
 8009258:	2d00      	cmp	r5, #0
 800925a:	d000      	beq.n	800925e <_dtoa_r+0x3ce>
 800925c:	e091      	b.n	8009382 <_dtoa_r+0x4f2>
 800925e:	2b00      	cmp	r3, #0
 8009260:	d1a1      	bne.n	80091a6 <_dtoa_r+0x316>
 8009262:	9e08      	ldr	r6, [sp, #32]
 8009264:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009266:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009268:	2b00      	cmp	r3, #0
 800926a:	d100      	bne.n	800926e <_dtoa_r+0x3de>
 800926c:	e094      	b.n	8009398 <_dtoa_r+0x508>
 800926e:	2200      	movs	r2, #0
 8009270:	0030      	movs	r0, r6
 8009272:	0039      	movs	r1, r7
 8009274:	4bd1      	ldr	r3, [pc, #836]	; (80095bc <_dtoa_r+0x72c>)
 8009276:	f7f7 f8fb 	bl	8000470 <__aeabi_dcmplt>
 800927a:	2800      	cmp	r0, #0
 800927c:	d100      	bne.n	8009280 <_dtoa_r+0x3f0>
 800927e:	e08b      	b.n	8009398 <_dtoa_r+0x508>
 8009280:	9b07      	ldr	r3, [sp, #28]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d100      	bne.n	8009288 <_dtoa_r+0x3f8>
 8009286:	e087      	b.n	8009398 <_dtoa_r+0x508>
 8009288:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800928a:	2b00      	cmp	r3, #0
 800928c:	dd45      	ble.n	800931a <_dtoa_r+0x48a>
 800928e:	9b03      	ldr	r3, [sp, #12]
 8009290:	2200      	movs	r2, #0
 8009292:	3b01      	subs	r3, #1
 8009294:	930e      	str	r3, [sp, #56]	; 0x38
 8009296:	0030      	movs	r0, r6
 8009298:	4bc9      	ldr	r3, [pc, #804]	; (80095c0 <_dtoa_r+0x730>)
 800929a:	0039      	movs	r1, r7
 800929c:	f7f8 ffec 	bl	8002278 <__aeabi_dmul>
 80092a0:	9008      	str	r0, [sp, #32]
 80092a2:	9109      	str	r1, [sp, #36]	; 0x24
 80092a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092a6:	3401      	adds	r4, #1
 80092a8:	0020      	movs	r0, r4
 80092aa:	9e08      	ldr	r6, [sp, #32]
 80092ac:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80092ae:	9312      	str	r3, [sp, #72]	; 0x48
 80092b0:	f7f9 fe7a 	bl	8002fa8 <__aeabi_i2d>
 80092b4:	0032      	movs	r2, r6
 80092b6:	003b      	movs	r3, r7
 80092b8:	f7f8 ffde 	bl	8002278 <__aeabi_dmul>
 80092bc:	2200      	movs	r2, #0
 80092be:	4bc1      	ldr	r3, [pc, #772]	; (80095c4 <_dtoa_r+0x734>)
 80092c0:	f7f8 f880 	bl	80013c4 <__aeabi_dadd>
 80092c4:	4ac0      	ldr	r2, [pc, #768]	; (80095c8 <_dtoa_r+0x738>)
 80092c6:	9014      	str	r0, [sp, #80]	; 0x50
 80092c8:	9115      	str	r1, [sp, #84]	; 0x54
 80092ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80092cc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80092ce:	4694      	mov	ip, r2
 80092d0:	9308      	str	r3, [sp, #32]
 80092d2:	9409      	str	r4, [sp, #36]	; 0x24
 80092d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80092d6:	4463      	add	r3, ip
 80092d8:	9318      	str	r3, [sp, #96]	; 0x60
 80092da:	9309      	str	r3, [sp, #36]	; 0x24
 80092dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d15e      	bne.n	80093a0 <_dtoa_r+0x510>
 80092e2:	2200      	movs	r2, #0
 80092e4:	4bb9      	ldr	r3, [pc, #740]	; (80095cc <_dtoa_r+0x73c>)
 80092e6:	0030      	movs	r0, r6
 80092e8:	0039      	movs	r1, r7
 80092ea:	f7f9 fa87 	bl	80027fc <__aeabi_dsub>
 80092ee:	9a08      	ldr	r2, [sp, #32]
 80092f0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80092f2:	0004      	movs	r4, r0
 80092f4:	000d      	movs	r5, r1
 80092f6:	f7f7 f8cf 	bl	8000498 <__aeabi_dcmpgt>
 80092fa:	2800      	cmp	r0, #0
 80092fc:	d000      	beq.n	8009300 <_dtoa_r+0x470>
 80092fe:	e2b3      	b.n	8009868 <_dtoa_r+0x9d8>
 8009300:	48b3      	ldr	r0, [pc, #716]	; (80095d0 <_dtoa_r+0x740>)
 8009302:	9915      	ldr	r1, [sp, #84]	; 0x54
 8009304:	4684      	mov	ip, r0
 8009306:	4461      	add	r1, ip
 8009308:	000b      	movs	r3, r1
 800930a:	0020      	movs	r0, r4
 800930c:	0029      	movs	r1, r5
 800930e:	9a08      	ldr	r2, [sp, #32]
 8009310:	f7f7 f8ae 	bl	8000470 <__aeabi_dcmplt>
 8009314:	2800      	cmp	r0, #0
 8009316:	d000      	beq.n	800931a <_dtoa_r+0x48a>
 8009318:	e2a3      	b.n	8009862 <_dtoa_r+0x9d2>
 800931a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800931c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800931e:	9308      	str	r3, [sp, #32]
 8009320:	9409      	str	r4, [sp, #36]	; 0x24
 8009322:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009324:	2b00      	cmp	r3, #0
 8009326:	da00      	bge.n	800932a <_dtoa_r+0x49a>
 8009328:	e179      	b.n	800961e <_dtoa_r+0x78e>
 800932a:	9a03      	ldr	r2, [sp, #12]
 800932c:	2a0e      	cmp	r2, #14
 800932e:	dd00      	ble.n	8009332 <_dtoa_r+0x4a2>
 8009330:	e175      	b.n	800961e <_dtoa_r+0x78e>
 8009332:	4ba0      	ldr	r3, [pc, #640]	; (80095b4 <_dtoa_r+0x724>)
 8009334:	00d2      	lsls	r2, r2, #3
 8009336:	189b      	adds	r3, r3, r2
 8009338:	681e      	ldr	r6, [r3, #0]
 800933a:	685f      	ldr	r7, [r3, #4]
 800933c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800933e:	2b00      	cmp	r3, #0
 8009340:	db00      	blt.n	8009344 <_dtoa_r+0x4b4>
 8009342:	e0e5      	b.n	8009510 <_dtoa_r+0x680>
 8009344:	9b07      	ldr	r3, [sp, #28]
 8009346:	2b00      	cmp	r3, #0
 8009348:	dd00      	ble.n	800934c <_dtoa_r+0x4bc>
 800934a:	e0e1      	b.n	8009510 <_dtoa_r+0x680>
 800934c:	d000      	beq.n	8009350 <_dtoa_r+0x4c0>
 800934e:	e288      	b.n	8009862 <_dtoa_r+0x9d2>
 8009350:	2200      	movs	r2, #0
 8009352:	0030      	movs	r0, r6
 8009354:	0039      	movs	r1, r7
 8009356:	4b9d      	ldr	r3, [pc, #628]	; (80095cc <_dtoa_r+0x73c>)
 8009358:	f7f8 ff8e 	bl	8002278 <__aeabi_dmul>
 800935c:	9a08      	ldr	r2, [sp, #32]
 800935e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009360:	f7f7 f8a4 	bl	80004ac <__aeabi_dcmpge>
 8009364:	9e07      	ldr	r6, [sp, #28]
 8009366:	0037      	movs	r7, r6
 8009368:	2800      	cmp	r0, #0
 800936a:	d000      	beq.n	800936e <_dtoa_r+0x4de>
 800936c:	e25f      	b.n	800982e <_dtoa_r+0x99e>
 800936e:	9b06      	ldr	r3, [sp, #24]
 8009370:	9a06      	ldr	r2, [sp, #24]
 8009372:	3301      	adds	r3, #1
 8009374:	9308      	str	r3, [sp, #32]
 8009376:	2331      	movs	r3, #49	; 0x31
 8009378:	7013      	strb	r3, [r2, #0]
 800937a:	9b03      	ldr	r3, [sp, #12]
 800937c:	3301      	adds	r3, #1
 800937e:	9303      	str	r3, [sp, #12]
 8009380:	e25a      	b.n	8009838 <_dtoa_r+0x9a8>
 8009382:	423d      	tst	r5, r7
 8009384:	d005      	beq.n	8009392 <_dtoa_r+0x502>
 8009386:	6832      	ldr	r2, [r6, #0]
 8009388:	6873      	ldr	r3, [r6, #4]
 800938a:	f7f8 ff75 	bl	8002278 <__aeabi_dmul>
 800938e:	003b      	movs	r3, r7
 8009390:	3401      	adds	r4, #1
 8009392:	106d      	asrs	r5, r5, #1
 8009394:	3608      	adds	r6, #8
 8009396:	e75f      	b.n	8009258 <_dtoa_r+0x3c8>
 8009398:	9b03      	ldr	r3, [sp, #12]
 800939a:	930e      	str	r3, [sp, #56]	; 0x38
 800939c:	9b07      	ldr	r3, [sp, #28]
 800939e:	e783      	b.n	80092a8 <_dtoa_r+0x418>
 80093a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80093a2:	4b84      	ldr	r3, [pc, #528]	; (80095b4 <_dtoa_r+0x724>)
 80093a4:	3a01      	subs	r2, #1
 80093a6:	00d2      	lsls	r2, r2, #3
 80093a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80093aa:	189b      	adds	r3, r3, r2
 80093ac:	9c08      	ldr	r4, [sp, #32]
 80093ae:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	2900      	cmp	r1, #0
 80093b6:	d051      	beq.n	800945c <_dtoa_r+0x5cc>
 80093b8:	2000      	movs	r0, #0
 80093ba:	4986      	ldr	r1, [pc, #536]	; (80095d4 <_dtoa_r+0x744>)
 80093bc:	f7f8 fb62 	bl	8001a84 <__aeabi_ddiv>
 80093c0:	0022      	movs	r2, r4
 80093c2:	002b      	movs	r3, r5
 80093c4:	f7f9 fa1a 	bl	80027fc <__aeabi_dsub>
 80093c8:	9a06      	ldr	r2, [sp, #24]
 80093ca:	0004      	movs	r4, r0
 80093cc:	4694      	mov	ip, r2
 80093ce:	000d      	movs	r5, r1
 80093d0:	9b06      	ldr	r3, [sp, #24]
 80093d2:	9314      	str	r3, [sp, #80]	; 0x50
 80093d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80093d6:	4463      	add	r3, ip
 80093d8:	9318      	str	r3, [sp, #96]	; 0x60
 80093da:	0039      	movs	r1, r7
 80093dc:	0030      	movs	r0, r6
 80093de:	f7f9 fdad 	bl	8002f3c <__aeabi_d2iz>
 80093e2:	9012      	str	r0, [sp, #72]	; 0x48
 80093e4:	f7f9 fde0 	bl	8002fa8 <__aeabi_i2d>
 80093e8:	0002      	movs	r2, r0
 80093ea:	000b      	movs	r3, r1
 80093ec:	0030      	movs	r0, r6
 80093ee:	0039      	movs	r1, r7
 80093f0:	f7f9 fa04 	bl	80027fc <__aeabi_dsub>
 80093f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80093f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80093f8:	3301      	adds	r3, #1
 80093fa:	9308      	str	r3, [sp, #32]
 80093fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80093fe:	0006      	movs	r6, r0
 8009400:	3330      	adds	r3, #48	; 0x30
 8009402:	7013      	strb	r3, [r2, #0]
 8009404:	0022      	movs	r2, r4
 8009406:	002b      	movs	r3, r5
 8009408:	000f      	movs	r7, r1
 800940a:	f7f7 f831 	bl	8000470 <__aeabi_dcmplt>
 800940e:	2800      	cmp	r0, #0
 8009410:	d174      	bne.n	80094fc <_dtoa_r+0x66c>
 8009412:	0032      	movs	r2, r6
 8009414:	003b      	movs	r3, r7
 8009416:	2000      	movs	r0, #0
 8009418:	4968      	ldr	r1, [pc, #416]	; (80095bc <_dtoa_r+0x72c>)
 800941a:	f7f9 f9ef 	bl	80027fc <__aeabi_dsub>
 800941e:	0022      	movs	r2, r4
 8009420:	002b      	movs	r3, r5
 8009422:	f7f7 f825 	bl	8000470 <__aeabi_dcmplt>
 8009426:	2800      	cmp	r0, #0
 8009428:	d000      	beq.n	800942c <_dtoa_r+0x59c>
 800942a:	e0d7      	b.n	80095dc <_dtoa_r+0x74c>
 800942c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800942e:	9a08      	ldr	r2, [sp, #32]
 8009430:	4293      	cmp	r3, r2
 8009432:	d100      	bne.n	8009436 <_dtoa_r+0x5a6>
 8009434:	e771      	b.n	800931a <_dtoa_r+0x48a>
 8009436:	2200      	movs	r2, #0
 8009438:	0020      	movs	r0, r4
 800943a:	0029      	movs	r1, r5
 800943c:	4b60      	ldr	r3, [pc, #384]	; (80095c0 <_dtoa_r+0x730>)
 800943e:	f7f8 ff1b 	bl	8002278 <__aeabi_dmul>
 8009442:	4b5f      	ldr	r3, [pc, #380]	; (80095c0 <_dtoa_r+0x730>)
 8009444:	0004      	movs	r4, r0
 8009446:	000d      	movs	r5, r1
 8009448:	0030      	movs	r0, r6
 800944a:	0039      	movs	r1, r7
 800944c:	2200      	movs	r2, #0
 800944e:	f7f8 ff13 	bl	8002278 <__aeabi_dmul>
 8009452:	9b08      	ldr	r3, [sp, #32]
 8009454:	0006      	movs	r6, r0
 8009456:	000f      	movs	r7, r1
 8009458:	9314      	str	r3, [sp, #80]	; 0x50
 800945a:	e7be      	b.n	80093da <_dtoa_r+0x54a>
 800945c:	0020      	movs	r0, r4
 800945e:	0029      	movs	r1, r5
 8009460:	f7f8 ff0a 	bl	8002278 <__aeabi_dmul>
 8009464:	9a06      	ldr	r2, [sp, #24]
 8009466:	9b06      	ldr	r3, [sp, #24]
 8009468:	4694      	mov	ip, r2
 800946a:	9308      	str	r3, [sp, #32]
 800946c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800946e:	9014      	str	r0, [sp, #80]	; 0x50
 8009470:	9115      	str	r1, [sp, #84]	; 0x54
 8009472:	4463      	add	r3, ip
 8009474:	9319      	str	r3, [sp, #100]	; 0x64
 8009476:	0030      	movs	r0, r6
 8009478:	0039      	movs	r1, r7
 800947a:	f7f9 fd5f 	bl	8002f3c <__aeabi_d2iz>
 800947e:	9018      	str	r0, [sp, #96]	; 0x60
 8009480:	f7f9 fd92 	bl	8002fa8 <__aeabi_i2d>
 8009484:	0002      	movs	r2, r0
 8009486:	000b      	movs	r3, r1
 8009488:	0030      	movs	r0, r6
 800948a:	0039      	movs	r1, r7
 800948c:	f7f9 f9b6 	bl	80027fc <__aeabi_dsub>
 8009490:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8009492:	9b08      	ldr	r3, [sp, #32]
 8009494:	3630      	adds	r6, #48	; 0x30
 8009496:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009498:	701e      	strb	r6, [r3, #0]
 800949a:	3301      	adds	r3, #1
 800949c:	0004      	movs	r4, r0
 800949e:	000d      	movs	r5, r1
 80094a0:	9308      	str	r3, [sp, #32]
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d12d      	bne.n	8009502 <_dtoa_r+0x672>
 80094a6:	9814      	ldr	r0, [sp, #80]	; 0x50
 80094a8:	9915      	ldr	r1, [sp, #84]	; 0x54
 80094aa:	9a06      	ldr	r2, [sp, #24]
 80094ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80094ae:	4694      	mov	ip, r2
 80094b0:	4463      	add	r3, ip
 80094b2:	2200      	movs	r2, #0
 80094b4:	9308      	str	r3, [sp, #32]
 80094b6:	4b47      	ldr	r3, [pc, #284]	; (80095d4 <_dtoa_r+0x744>)
 80094b8:	f7f7 ff84 	bl	80013c4 <__aeabi_dadd>
 80094bc:	0002      	movs	r2, r0
 80094be:	000b      	movs	r3, r1
 80094c0:	0020      	movs	r0, r4
 80094c2:	0029      	movs	r1, r5
 80094c4:	f7f6 ffe8 	bl	8000498 <__aeabi_dcmpgt>
 80094c8:	2800      	cmp	r0, #0
 80094ca:	d000      	beq.n	80094ce <_dtoa_r+0x63e>
 80094cc:	e086      	b.n	80095dc <_dtoa_r+0x74c>
 80094ce:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80094d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80094d2:	2000      	movs	r0, #0
 80094d4:	493f      	ldr	r1, [pc, #252]	; (80095d4 <_dtoa_r+0x744>)
 80094d6:	f7f9 f991 	bl	80027fc <__aeabi_dsub>
 80094da:	0002      	movs	r2, r0
 80094dc:	000b      	movs	r3, r1
 80094de:	0020      	movs	r0, r4
 80094e0:	0029      	movs	r1, r5
 80094e2:	f7f6 ffc5 	bl	8000470 <__aeabi_dcmplt>
 80094e6:	2800      	cmp	r0, #0
 80094e8:	d100      	bne.n	80094ec <_dtoa_r+0x65c>
 80094ea:	e716      	b.n	800931a <_dtoa_r+0x48a>
 80094ec:	9b08      	ldr	r3, [sp, #32]
 80094ee:	001a      	movs	r2, r3
 80094f0:	3a01      	subs	r2, #1
 80094f2:	9208      	str	r2, [sp, #32]
 80094f4:	7812      	ldrb	r2, [r2, #0]
 80094f6:	2a30      	cmp	r2, #48	; 0x30
 80094f8:	d0f8      	beq.n	80094ec <_dtoa_r+0x65c>
 80094fa:	9308      	str	r3, [sp, #32]
 80094fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094fe:	9303      	str	r3, [sp, #12]
 8009500:	e046      	b.n	8009590 <_dtoa_r+0x700>
 8009502:	2200      	movs	r2, #0
 8009504:	4b2e      	ldr	r3, [pc, #184]	; (80095c0 <_dtoa_r+0x730>)
 8009506:	f7f8 feb7 	bl	8002278 <__aeabi_dmul>
 800950a:	0006      	movs	r6, r0
 800950c:	000f      	movs	r7, r1
 800950e:	e7b2      	b.n	8009476 <_dtoa_r+0x5e6>
 8009510:	9b06      	ldr	r3, [sp, #24]
 8009512:	9a06      	ldr	r2, [sp, #24]
 8009514:	930a      	str	r3, [sp, #40]	; 0x28
 8009516:	9b07      	ldr	r3, [sp, #28]
 8009518:	9c08      	ldr	r4, [sp, #32]
 800951a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800951c:	3b01      	subs	r3, #1
 800951e:	189b      	adds	r3, r3, r2
 8009520:	930b      	str	r3, [sp, #44]	; 0x2c
 8009522:	0032      	movs	r2, r6
 8009524:	003b      	movs	r3, r7
 8009526:	0020      	movs	r0, r4
 8009528:	0029      	movs	r1, r5
 800952a:	f7f8 faab 	bl	8001a84 <__aeabi_ddiv>
 800952e:	f7f9 fd05 	bl	8002f3c <__aeabi_d2iz>
 8009532:	9007      	str	r0, [sp, #28]
 8009534:	f7f9 fd38 	bl	8002fa8 <__aeabi_i2d>
 8009538:	0032      	movs	r2, r6
 800953a:	003b      	movs	r3, r7
 800953c:	f7f8 fe9c 	bl	8002278 <__aeabi_dmul>
 8009540:	0002      	movs	r2, r0
 8009542:	000b      	movs	r3, r1
 8009544:	0020      	movs	r0, r4
 8009546:	0029      	movs	r1, r5
 8009548:	f7f9 f958 	bl	80027fc <__aeabi_dsub>
 800954c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800954e:	001a      	movs	r2, r3
 8009550:	3201      	adds	r2, #1
 8009552:	920a      	str	r2, [sp, #40]	; 0x28
 8009554:	9208      	str	r2, [sp, #32]
 8009556:	9a07      	ldr	r2, [sp, #28]
 8009558:	3230      	adds	r2, #48	; 0x30
 800955a:	701a      	strb	r2, [r3, #0]
 800955c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800955e:	429a      	cmp	r2, r3
 8009560:	d14f      	bne.n	8009602 <_dtoa_r+0x772>
 8009562:	0002      	movs	r2, r0
 8009564:	000b      	movs	r3, r1
 8009566:	f7f7 ff2d 	bl	80013c4 <__aeabi_dadd>
 800956a:	0032      	movs	r2, r6
 800956c:	003b      	movs	r3, r7
 800956e:	0004      	movs	r4, r0
 8009570:	000d      	movs	r5, r1
 8009572:	f7f6 ff91 	bl	8000498 <__aeabi_dcmpgt>
 8009576:	2800      	cmp	r0, #0
 8009578:	d12e      	bne.n	80095d8 <_dtoa_r+0x748>
 800957a:	0032      	movs	r2, r6
 800957c:	003b      	movs	r3, r7
 800957e:	0020      	movs	r0, r4
 8009580:	0029      	movs	r1, r5
 8009582:	f7f6 ff6f 	bl	8000464 <__aeabi_dcmpeq>
 8009586:	2800      	cmp	r0, #0
 8009588:	d002      	beq.n	8009590 <_dtoa_r+0x700>
 800958a:	9b07      	ldr	r3, [sp, #28]
 800958c:	07de      	lsls	r6, r3, #31
 800958e:	d423      	bmi.n	80095d8 <_dtoa_r+0x748>
 8009590:	9905      	ldr	r1, [sp, #20]
 8009592:	9804      	ldr	r0, [sp, #16]
 8009594:	f000 fbd6 	bl	8009d44 <_Bfree>
 8009598:	2300      	movs	r3, #0
 800959a:	9a08      	ldr	r2, [sp, #32]
 800959c:	7013      	strb	r3, [r2, #0]
 800959e:	9b03      	ldr	r3, [sp, #12]
 80095a0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80095a2:	3301      	adds	r3, #1
 80095a4:	6013      	str	r3, [r2, #0]
 80095a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d100      	bne.n	80095ae <_dtoa_r+0x71e>
 80095ac:	e4ba      	b.n	8008f24 <_dtoa_r+0x94>
 80095ae:	9a08      	ldr	r2, [sp, #32]
 80095b0:	601a      	str	r2, [r3, #0]
 80095b2:	e4b7      	b.n	8008f24 <_dtoa_r+0x94>
 80095b4:	0800d790 	.word	0x0800d790
 80095b8:	0800d768 	.word	0x0800d768
 80095bc:	3ff00000 	.word	0x3ff00000
 80095c0:	40240000 	.word	0x40240000
 80095c4:	401c0000 	.word	0x401c0000
 80095c8:	fcc00000 	.word	0xfcc00000
 80095cc:	40140000 	.word	0x40140000
 80095d0:	7cc00000 	.word	0x7cc00000
 80095d4:	3fe00000 	.word	0x3fe00000
 80095d8:	9b03      	ldr	r3, [sp, #12]
 80095da:	930e      	str	r3, [sp, #56]	; 0x38
 80095dc:	9b08      	ldr	r3, [sp, #32]
 80095de:	9308      	str	r3, [sp, #32]
 80095e0:	3b01      	subs	r3, #1
 80095e2:	781a      	ldrb	r2, [r3, #0]
 80095e4:	2a39      	cmp	r2, #57	; 0x39
 80095e6:	d108      	bne.n	80095fa <_dtoa_r+0x76a>
 80095e8:	9a06      	ldr	r2, [sp, #24]
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d1f7      	bne.n	80095de <_dtoa_r+0x74e>
 80095ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80095f0:	9906      	ldr	r1, [sp, #24]
 80095f2:	3201      	adds	r2, #1
 80095f4:	920e      	str	r2, [sp, #56]	; 0x38
 80095f6:	2230      	movs	r2, #48	; 0x30
 80095f8:	700a      	strb	r2, [r1, #0]
 80095fa:	781a      	ldrb	r2, [r3, #0]
 80095fc:	3201      	adds	r2, #1
 80095fe:	701a      	strb	r2, [r3, #0]
 8009600:	e77c      	b.n	80094fc <_dtoa_r+0x66c>
 8009602:	2200      	movs	r2, #0
 8009604:	4ba9      	ldr	r3, [pc, #676]	; (80098ac <_dtoa_r+0xa1c>)
 8009606:	f7f8 fe37 	bl	8002278 <__aeabi_dmul>
 800960a:	2200      	movs	r2, #0
 800960c:	2300      	movs	r3, #0
 800960e:	0004      	movs	r4, r0
 8009610:	000d      	movs	r5, r1
 8009612:	f7f6 ff27 	bl	8000464 <__aeabi_dcmpeq>
 8009616:	2800      	cmp	r0, #0
 8009618:	d100      	bne.n	800961c <_dtoa_r+0x78c>
 800961a:	e782      	b.n	8009522 <_dtoa_r+0x692>
 800961c:	e7b8      	b.n	8009590 <_dtoa_r+0x700>
 800961e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8009620:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009622:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009624:	2f00      	cmp	r7, #0
 8009626:	d012      	beq.n	800964e <_dtoa_r+0x7be>
 8009628:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800962a:	2a01      	cmp	r2, #1
 800962c:	dc6e      	bgt.n	800970c <_dtoa_r+0x87c>
 800962e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009630:	2a00      	cmp	r2, #0
 8009632:	d065      	beq.n	8009700 <_dtoa_r+0x870>
 8009634:	4a9e      	ldr	r2, [pc, #632]	; (80098b0 <_dtoa_r+0xa20>)
 8009636:	189b      	adds	r3, r3, r2
 8009638:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800963a:	2101      	movs	r1, #1
 800963c:	18d2      	adds	r2, r2, r3
 800963e:	920a      	str	r2, [sp, #40]	; 0x28
 8009640:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009642:	9804      	ldr	r0, [sp, #16]
 8009644:	18d3      	adds	r3, r2, r3
 8009646:	930c      	str	r3, [sp, #48]	; 0x30
 8009648:	f000 fc2c 	bl	8009ea4 <__i2b>
 800964c:	0007      	movs	r7, r0
 800964e:	2c00      	cmp	r4, #0
 8009650:	d00e      	beq.n	8009670 <_dtoa_r+0x7e0>
 8009652:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009654:	2b00      	cmp	r3, #0
 8009656:	dd0b      	ble.n	8009670 <_dtoa_r+0x7e0>
 8009658:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800965a:	0023      	movs	r3, r4
 800965c:	4294      	cmp	r4, r2
 800965e:	dd00      	ble.n	8009662 <_dtoa_r+0x7d2>
 8009660:	0013      	movs	r3, r2
 8009662:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009664:	1ae4      	subs	r4, r4, r3
 8009666:	1ad2      	subs	r2, r2, r3
 8009668:	920a      	str	r2, [sp, #40]	; 0x28
 800966a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800966c:	1ad3      	subs	r3, r2, r3
 800966e:	930c      	str	r3, [sp, #48]	; 0x30
 8009670:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009672:	2b00      	cmp	r3, #0
 8009674:	d01e      	beq.n	80096b4 <_dtoa_r+0x824>
 8009676:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009678:	2b00      	cmp	r3, #0
 800967a:	d05c      	beq.n	8009736 <_dtoa_r+0x8a6>
 800967c:	2d00      	cmp	r5, #0
 800967e:	dd10      	ble.n	80096a2 <_dtoa_r+0x812>
 8009680:	0039      	movs	r1, r7
 8009682:	002a      	movs	r2, r5
 8009684:	9804      	ldr	r0, [sp, #16]
 8009686:	f000 fcd5 	bl	800a034 <__pow5mult>
 800968a:	9a05      	ldr	r2, [sp, #20]
 800968c:	0001      	movs	r1, r0
 800968e:	0007      	movs	r7, r0
 8009690:	9804      	ldr	r0, [sp, #16]
 8009692:	f000 fc1f 	bl	8009ed4 <__multiply>
 8009696:	0006      	movs	r6, r0
 8009698:	9905      	ldr	r1, [sp, #20]
 800969a:	9804      	ldr	r0, [sp, #16]
 800969c:	f000 fb52 	bl	8009d44 <_Bfree>
 80096a0:	9605      	str	r6, [sp, #20]
 80096a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096a4:	1b5a      	subs	r2, r3, r5
 80096a6:	42ab      	cmp	r3, r5
 80096a8:	d004      	beq.n	80096b4 <_dtoa_r+0x824>
 80096aa:	9905      	ldr	r1, [sp, #20]
 80096ac:	9804      	ldr	r0, [sp, #16]
 80096ae:	f000 fcc1 	bl	800a034 <__pow5mult>
 80096b2:	9005      	str	r0, [sp, #20]
 80096b4:	2101      	movs	r1, #1
 80096b6:	9804      	ldr	r0, [sp, #16]
 80096b8:	f000 fbf4 	bl	8009ea4 <__i2b>
 80096bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80096be:	0006      	movs	r6, r0
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	dd3a      	ble.n	800973a <_dtoa_r+0x8aa>
 80096c4:	001a      	movs	r2, r3
 80096c6:	0001      	movs	r1, r0
 80096c8:	9804      	ldr	r0, [sp, #16]
 80096ca:	f000 fcb3 	bl	800a034 <__pow5mult>
 80096ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80096d0:	0006      	movs	r6, r0
 80096d2:	2500      	movs	r5, #0
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	dc38      	bgt.n	800974a <_dtoa_r+0x8ba>
 80096d8:	2500      	movs	r5, #0
 80096da:	9b08      	ldr	r3, [sp, #32]
 80096dc:	42ab      	cmp	r3, r5
 80096de:	d130      	bne.n	8009742 <_dtoa_r+0x8b2>
 80096e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096e2:	031b      	lsls	r3, r3, #12
 80096e4:	42ab      	cmp	r3, r5
 80096e6:	d12c      	bne.n	8009742 <_dtoa_r+0x8b2>
 80096e8:	4b72      	ldr	r3, [pc, #456]	; (80098b4 <_dtoa_r+0xa24>)
 80096ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096ec:	4213      	tst	r3, r2
 80096ee:	d028      	beq.n	8009742 <_dtoa_r+0x8b2>
 80096f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096f2:	3501      	adds	r5, #1
 80096f4:	3301      	adds	r3, #1
 80096f6:	930a      	str	r3, [sp, #40]	; 0x28
 80096f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096fa:	3301      	adds	r3, #1
 80096fc:	930c      	str	r3, [sp, #48]	; 0x30
 80096fe:	e020      	b.n	8009742 <_dtoa_r+0x8b2>
 8009700:	2336      	movs	r3, #54	; 0x36
 8009702:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009704:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009706:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009708:	1a9b      	subs	r3, r3, r2
 800970a:	e795      	b.n	8009638 <_dtoa_r+0x7a8>
 800970c:	9b07      	ldr	r3, [sp, #28]
 800970e:	1e5d      	subs	r5, r3, #1
 8009710:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009712:	42ab      	cmp	r3, r5
 8009714:	db07      	blt.n	8009726 <_dtoa_r+0x896>
 8009716:	1b5d      	subs	r5, r3, r5
 8009718:	9b07      	ldr	r3, [sp, #28]
 800971a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800971c:	2b00      	cmp	r3, #0
 800971e:	da8b      	bge.n	8009638 <_dtoa_r+0x7a8>
 8009720:	1ae4      	subs	r4, r4, r3
 8009722:	2300      	movs	r3, #0
 8009724:	e788      	b.n	8009638 <_dtoa_r+0x7a8>
 8009726:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009728:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800972a:	1aeb      	subs	r3, r5, r3
 800972c:	18d3      	adds	r3, r2, r3
 800972e:	950d      	str	r5, [sp, #52]	; 0x34
 8009730:	9313      	str	r3, [sp, #76]	; 0x4c
 8009732:	2500      	movs	r5, #0
 8009734:	e7f0      	b.n	8009718 <_dtoa_r+0x888>
 8009736:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009738:	e7b7      	b.n	80096aa <_dtoa_r+0x81a>
 800973a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800973c:	2500      	movs	r5, #0
 800973e:	2b01      	cmp	r3, #1
 8009740:	ddca      	ble.n	80096d8 <_dtoa_r+0x848>
 8009742:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009744:	2001      	movs	r0, #1
 8009746:	2b00      	cmp	r3, #0
 8009748:	d008      	beq.n	800975c <_dtoa_r+0x8cc>
 800974a:	6933      	ldr	r3, [r6, #16]
 800974c:	3303      	adds	r3, #3
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	18f3      	adds	r3, r6, r3
 8009752:	6858      	ldr	r0, [r3, #4]
 8009754:	f000 fb5e 	bl	8009e14 <__hi0bits>
 8009758:	2320      	movs	r3, #32
 800975a:	1a18      	subs	r0, r3, r0
 800975c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800975e:	1818      	adds	r0, r3, r0
 8009760:	0002      	movs	r2, r0
 8009762:	231f      	movs	r3, #31
 8009764:	401a      	ands	r2, r3
 8009766:	4218      	tst	r0, r3
 8009768:	d047      	beq.n	80097fa <_dtoa_r+0x96a>
 800976a:	3301      	adds	r3, #1
 800976c:	1a9b      	subs	r3, r3, r2
 800976e:	2b04      	cmp	r3, #4
 8009770:	dd3f      	ble.n	80097f2 <_dtoa_r+0x962>
 8009772:	231c      	movs	r3, #28
 8009774:	1a9b      	subs	r3, r3, r2
 8009776:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009778:	18e4      	adds	r4, r4, r3
 800977a:	18d2      	adds	r2, r2, r3
 800977c:	920a      	str	r2, [sp, #40]	; 0x28
 800977e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009780:	18d3      	adds	r3, r2, r3
 8009782:	930c      	str	r3, [sp, #48]	; 0x30
 8009784:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009786:	2b00      	cmp	r3, #0
 8009788:	dd05      	ble.n	8009796 <_dtoa_r+0x906>
 800978a:	001a      	movs	r2, r3
 800978c:	9905      	ldr	r1, [sp, #20]
 800978e:	9804      	ldr	r0, [sp, #16]
 8009790:	f000 fcac 	bl	800a0ec <__lshift>
 8009794:	9005      	str	r0, [sp, #20]
 8009796:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009798:	2b00      	cmp	r3, #0
 800979a:	dd05      	ble.n	80097a8 <_dtoa_r+0x918>
 800979c:	0031      	movs	r1, r6
 800979e:	001a      	movs	r2, r3
 80097a0:	9804      	ldr	r0, [sp, #16]
 80097a2:	f000 fca3 	bl	800a0ec <__lshift>
 80097a6:	0006      	movs	r6, r0
 80097a8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d027      	beq.n	80097fe <_dtoa_r+0x96e>
 80097ae:	0031      	movs	r1, r6
 80097b0:	9805      	ldr	r0, [sp, #20]
 80097b2:	f000 fd09 	bl	800a1c8 <__mcmp>
 80097b6:	2800      	cmp	r0, #0
 80097b8:	da21      	bge.n	80097fe <_dtoa_r+0x96e>
 80097ba:	9b03      	ldr	r3, [sp, #12]
 80097bc:	220a      	movs	r2, #10
 80097be:	3b01      	subs	r3, #1
 80097c0:	9303      	str	r3, [sp, #12]
 80097c2:	9905      	ldr	r1, [sp, #20]
 80097c4:	2300      	movs	r3, #0
 80097c6:	9804      	ldr	r0, [sp, #16]
 80097c8:	f000 fae0 	bl	8009d8c <__multadd>
 80097cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80097ce:	9005      	str	r0, [sp, #20]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d100      	bne.n	80097d6 <_dtoa_r+0x946>
 80097d4:	e15d      	b.n	8009a92 <_dtoa_r+0xc02>
 80097d6:	2300      	movs	r3, #0
 80097d8:	0039      	movs	r1, r7
 80097da:	220a      	movs	r2, #10
 80097dc:	9804      	ldr	r0, [sp, #16]
 80097de:	f000 fad5 	bl	8009d8c <__multadd>
 80097e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097e4:	0007      	movs	r7, r0
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	dc49      	bgt.n	800987e <_dtoa_r+0x9ee>
 80097ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80097ec:	2b02      	cmp	r3, #2
 80097ee:	dc0e      	bgt.n	800980e <_dtoa_r+0x97e>
 80097f0:	e045      	b.n	800987e <_dtoa_r+0x9ee>
 80097f2:	2b04      	cmp	r3, #4
 80097f4:	d0c6      	beq.n	8009784 <_dtoa_r+0x8f4>
 80097f6:	331c      	adds	r3, #28
 80097f8:	e7bd      	b.n	8009776 <_dtoa_r+0x8e6>
 80097fa:	0013      	movs	r3, r2
 80097fc:	e7fb      	b.n	80097f6 <_dtoa_r+0x966>
 80097fe:	9b07      	ldr	r3, [sp, #28]
 8009800:	2b00      	cmp	r3, #0
 8009802:	dc36      	bgt.n	8009872 <_dtoa_r+0x9e2>
 8009804:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009806:	2b02      	cmp	r3, #2
 8009808:	dd33      	ble.n	8009872 <_dtoa_r+0x9e2>
 800980a:	9b07      	ldr	r3, [sp, #28]
 800980c:	930b      	str	r3, [sp, #44]	; 0x2c
 800980e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009810:	2b00      	cmp	r3, #0
 8009812:	d10c      	bne.n	800982e <_dtoa_r+0x99e>
 8009814:	0031      	movs	r1, r6
 8009816:	2205      	movs	r2, #5
 8009818:	9804      	ldr	r0, [sp, #16]
 800981a:	f000 fab7 	bl	8009d8c <__multadd>
 800981e:	0006      	movs	r6, r0
 8009820:	0001      	movs	r1, r0
 8009822:	9805      	ldr	r0, [sp, #20]
 8009824:	f000 fcd0 	bl	800a1c8 <__mcmp>
 8009828:	2800      	cmp	r0, #0
 800982a:	dd00      	ble.n	800982e <_dtoa_r+0x99e>
 800982c:	e59f      	b.n	800936e <_dtoa_r+0x4de>
 800982e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009830:	43db      	mvns	r3, r3
 8009832:	9303      	str	r3, [sp, #12]
 8009834:	9b06      	ldr	r3, [sp, #24]
 8009836:	9308      	str	r3, [sp, #32]
 8009838:	2500      	movs	r5, #0
 800983a:	0031      	movs	r1, r6
 800983c:	9804      	ldr	r0, [sp, #16]
 800983e:	f000 fa81 	bl	8009d44 <_Bfree>
 8009842:	2f00      	cmp	r7, #0
 8009844:	d100      	bne.n	8009848 <_dtoa_r+0x9b8>
 8009846:	e6a3      	b.n	8009590 <_dtoa_r+0x700>
 8009848:	2d00      	cmp	r5, #0
 800984a:	d005      	beq.n	8009858 <_dtoa_r+0x9c8>
 800984c:	42bd      	cmp	r5, r7
 800984e:	d003      	beq.n	8009858 <_dtoa_r+0x9c8>
 8009850:	0029      	movs	r1, r5
 8009852:	9804      	ldr	r0, [sp, #16]
 8009854:	f000 fa76 	bl	8009d44 <_Bfree>
 8009858:	0039      	movs	r1, r7
 800985a:	9804      	ldr	r0, [sp, #16]
 800985c:	f000 fa72 	bl	8009d44 <_Bfree>
 8009860:	e696      	b.n	8009590 <_dtoa_r+0x700>
 8009862:	2600      	movs	r6, #0
 8009864:	0037      	movs	r7, r6
 8009866:	e7e2      	b.n	800982e <_dtoa_r+0x99e>
 8009868:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800986a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800986c:	9303      	str	r3, [sp, #12]
 800986e:	0037      	movs	r7, r6
 8009870:	e57d      	b.n	800936e <_dtoa_r+0x4de>
 8009872:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009874:	2b00      	cmp	r3, #0
 8009876:	d100      	bne.n	800987a <_dtoa_r+0x9ea>
 8009878:	e0c3      	b.n	8009a02 <_dtoa_r+0xb72>
 800987a:	9b07      	ldr	r3, [sp, #28]
 800987c:	930b      	str	r3, [sp, #44]	; 0x2c
 800987e:	2c00      	cmp	r4, #0
 8009880:	dd05      	ble.n	800988e <_dtoa_r+0x9fe>
 8009882:	0039      	movs	r1, r7
 8009884:	0022      	movs	r2, r4
 8009886:	9804      	ldr	r0, [sp, #16]
 8009888:	f000 fc30 	bl	800a0ec <__lshift>
 800988c:	0007      	movs	r7, r0
 800988e:	0038      	movs	r0, r7
 8009890:	2d00      	cmp	r5, #0
 8009892:	d024      	beq.n	80098de <_dtoa_r+0xa4e>
 8009894:	6879      	ldr	r1, [r7, #4]
 8009896:	9804      	ldr	r0, [sp, #16]
 8009898:	f000 fa10 	bl	8009cbc <_Balloc>
 800989c:	1e04      	subs	r4, r0, #0
 800989e:	d111      	bne.n	80098c4 <_dtoa_r+0xa34>
 80098a0:	0022      	movs	r2, r4
 80098a2:	4b05      	ldr	r3, [pc, #20]	; (80098b8 <_dtoa_r+0xa28>)
 80098a4:	4805      	ldr	r0, [pc, #20]	; (80098bc <_dtoa_r+0xa2c>)
 80098a6:	4906      	ldr	r1, [pc, #24]	; (80098c0 <_dtoa_r+0xa30>)
 80098a8:	f7ff fb07 	bl	8008eba <_dtoa_r+0x2a>
 80098ac:	40240000 	.word	0x40240000
 80098b0:	00000433 	.word	0x00000433
 80098b4:	7ff00000 	.word	0x7ff00000
 80098b8:	0800d6fc 	.word	0x0800d6fc
 80098bc:	0800d6a4 	.word	0x0800d6a4
 80098c0:	000002ef 	.word	0x000002ef
 80098c4:	0039      	movs	r1, r7
 80098c6:	693a      	ldr	r2, [r7, #16]
 80098c8:	310c      	adds	r1, #12
 80098ca:	3202      	adds	r2, #2
 80098cc:	0092      	lsls	r2, r2, #2
 80098ce:	300c      	adds	r0, #12
 80098d0:	f7ff fa46 	bl	8008d60 <memcpy>
 80098d4:	2201      	movs	r2, #1
 80098d6:	0021      	movs	r1, r4
 80098d8:	9804      	ldr	r0, [sp, #16]
 80098da:	f000 fc07 	bl	800a0ec <__lshift>
 80098de:	9b06      	ldr	r3, [sp, #24]
 80098e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80098e2:	9307      	str	r3, [sp, #28]
 80098e4:	3b01      	subs	r3, #1
 80098e6:	189b      	adds	r3, r3, r2
 80098e8:	2201      	movs	r2, #1
 80098ea:	003d      	movs	r5, r7
 80098ec:	0007      	movs	r7, r0
 80098ee:	930e      	str	r3, [sp, #56]	; 0x38
 80098f0:	9b08      	ldr	r3, [sp, #32]
 80098f2:	4013      	ands	r3, r2
 80098f4:	930d      	str	r3, [sp, #52]	; 0x34
 80098f6:	0031      	movs	r1, r6
 80098f8:	9805      	ldr	r0, [sp, #20]
 80098fa:	f7ff fa3a 	bl	8008d72 <quorem>
 80098fe:	0029      	movs	r1, r5
 8009900:	0004      	movs	r4, r0
 8009902:	900b      	str	r0, [sp, #44]	; 0x2c
 8009904:	9805      	ldr	r0, [sp, #20]
 8009906:	f000 fc5f 	bl	800a1c8 <__mcmp>
 800990a:	003a      	movs	r2, r7
 800990c:	900c      	str	r0, [sp, #48]	; 0x30
 800990e:	0031      	movs	r1, r6
 8009910:	9804      	ldr	r0, [sp, #16]
 8009912:	f000 fc75 	bl	800a200 <__mdiff>
 8009916:	2201      	movs	r2, #1
 8009918:	68c3      	ldr	r3, [r0, #12]
 800991a:	3430      	adds	r4, #48	; 0x30
 800991c:	9008      	str	r0, [sp, #32]
 800991e:	920a      	str	r2, [sp, #40]	; 0x28
 8009920:	2b00      	cmp	r3, #0
 8009922:	d104      	bne.n	800992e <_dtoa_r+0xa9e>
 8009924:	0001      	movs	r1, r0
 8009926:	9805      	ldr	r0, [sp, #20]
 8009928:	f000 fc4e 	bl	800a1c8 <__mcmp>
 800992c:	900a      	str	r0, [sp, #40]	; 0x28
 800992e:	9908      	ldr	r1, [sp, #32]
 8009930:	9804      	ldr	r0, [sp, #16]
 8009932:	f000 fa07 	bl	8009d44 <_Bfree>
 8009936:	9b07      	ldr	r3, [sp, #28]
 8009938:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800993a:	3301      	adds	r3, #1
 800993c:	9308      	str	r3, [sp, #32]
 800993e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009940:	4313      	orrs	r3, r2
 8009942:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009944:	4313      	orrs	r3, r2
 8009946:	d109      	bne.n	800995c <_dtoa_r+0xacc>
 8009948:	2c39      	cmp	r4, #57	; 0x39
 800994a:	d022      	beq.n	8009992 <_dtoa_r+0xb02>
 800994c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800994e:	2b00      	cmp	r3, #0
 8009950:	dd01      	ble.n	8009956 <_dtoa_r+0xac6>
 8009952:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009954:	3431      	adds	r4, #49	; 0x31
 8009956:	9b07      	ldr	r3, [sp, #28]
 8009958:	701c      	strb	r4, [r3, #0]
 800995a:	e76e      	b.n	800983a <_dtoa_r+0x9aa>
 800995c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800995e:	2b00      	cmp	r3, #0
 8009960:	db04      	blt.n	800996c <_dtoa_r+0xadc>
 8009962:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009964:	4313      	orrs	r3, r2
 8009966:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009968:	4313      	orrs	r3, r2
 800996a:	d11e      	bne.n	80099aa <_dtoa_r+0xb1a>
 800996c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800996e:	2b00      	cmp	r3, #0
 8009970:	ddf1      	ble.n	8009956 <_dtoa_r+0xac6>
 8009972:	9905      	ldr	r1, [sp, #20]
 8009974:	2201      	movs	r2, #1
 8009976:	9804      	ldr	r0, [sp, #16]
 8009978:	f000 fbb8 	bl	800a0ec <__lshift>
 800997c:	0031      	movs	r1, r6
 800997e:	9005      	str	r0, [sp, #20]
 8009980:	f000 fc22 	bl	800a1c8 <__mcmp>
 8009984:	2800      	cmp	r0, #0
 8009986:	dc02      	bgt.n	800998e <_dtoa_r+0xafe>
 8009988:	d1e5      	bne.n	8009956 <_dtoa_r+0xac6>
 800998a:	07e3      	lsls	r3, r4, #31
 800998c:	d5e3      	bpl.n	8009956 <_dtoa_r+0xac6>
 800998e:	2c39      	cmp	r4, #57	; 0x39
 8009990:	d1df      	bne.n	8009952 <_dtoa_r+0xac2>
 8009992:	2339      	movs	r3, #57	; 0x39
 8009994:	9a07      	ldr	r2, [sp, #28]
 8009996:	7013      	strb	r3, [r2, #0]
 8009998:	9b08      	ldr	r3, [sp, #32]
 800999a:	9308      	str	r3, [sp, #32]
 800999c:	3b01      	subs	r3, #1
 800999e:	781a      	ldrb	r2, [r3, #0]
 80099a0:	2a39      	cmp	r2, #57	; 0x39
 80099a2:	d063      	beq.n	8009a6c <_dtoa_r+0xbdc>
 80099a4:	3201      	adds	r2, #1
 80099a6:	701a      	strb	r2, [r3, #0]
 80099a8:	e747      	b.n	800983a <_dtoa_r+0x9aa>
 80099aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	dd03      	ble.n	80099b8 <_dtoa_r+0xb28>
 80099b0:	2c39      	cmp	r4, #57	; 0x39
 80099b2:	d0ee      	beq.n	8009992 <_dtoa_r+0xb02>
 80099b4:	3401      	adds	r4, #1
 80099b6:	e7ce      	b.n	8009956 <_dtoa_r+0xac6>
 80099b8:	9b07      	ldr	r3, [sp, #28]
 80099ba:	9a07      	ldr	r2, [sp, #28]
 80099bc:	701c      	strb	r4, [r3, #0]
 80099be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d03e      	beq.n	8009a42 <_dtoa_r+0xbb2>
 80099c4:	2300      	movs	r3, #0
 80099c6:	220a      	movs	r2, #10
 80099c8:	9905      	ldr	r1, [sp, #20]
 80099ca:	9804      	ldr	r0, [sp, #16]
 80099cc:	f000 f9de 	bl	8009d8c <__multadd>
 80099d0:	2300      	movs	r3, #0
 80099d2:	9005      	str	r0, [sp, #20]
 80099d4:	220a      	movs	r2, #10
 80099d6:	0029      	movs	r1, r5
 80099d8:	9804      	ldr	r0, [sp, #16]
 80099da:	42bd      	cmp	r5, r7
 80099dc:	d106      	bne.n	80099ec <_dtoa_r+0xb5c>
 80099de:	f000 f9d5 	bl	8009d8c <__multadd>
 80099e2:	0005      	movs	r5, r0
 80099e4:	0007      	movs	r7, r0
 80099e6:	9b08      	ldr	r3, [sp, #32]
 80099e8:	9307      	str	r3, [sp, #28]
 80099ea:	e784      	b.n	80098f6 <_dtoa_r+0xa66>
 80099ec:	f000 f9ce 	bl	8009d8c <__multadd>
 80099f0:	0039      	movs	r1, r7
 80099f2:	0005      	movs	r5, r0
 80099f4:	2300      	movs	r3, #0
 80099f6:	220a      	movs	r2, #10
 80099f8:	9804      	ldr	r0, [sp, #16]
 80099fa:	f000 f9c7 	bl	8009d8c <__multadd>
 80099fe:	0007      	movs	r7, r0
 8009a00:	e7f1      	b.n	80099e6 <_dtoa_r+0xb56>
 8009a02:	9b07      	ldr	r3, [sp, #28]
 8009a04:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a06:	2500      	movs	r5, #0
 8009a08:	0031      	movs	r1, r6
 8009a0a:	9805      	ldr	r0, [sp, #20]
 8009a0c:	f7ff f9b1 	bl	8008d72 <quorem>
 8009a10:	9b06      	ldr	r3, [sp, #24]
 8009a12:	3030      	adds	r0, #48	; 0x30
 8009a14:	5558      	strb	r0, [r3, r5]
 8009a16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a18:	3501      	adds	r5, #1
 8009a1a:	0004      	movs	r4, r0
 8009a1c:	42ab      	cmp	r3, r5
 8009a1e:	dd07      	ble.n	8009a30 <_dtoa_r+0xba0>
 8009a20:	2300      	movs	r3, #0
 8009a22:	220a      	movs	r2, #10
 8009a24:	9905      	ldr	r1, [sp, #20]
 8009a26:	9804      	ldr	r0, [sp, #16]
 8009a28:	f000 f9b0 	bl	8009d8c <__multadd>
 8009a2c:	9005      	str	r0, [sp, #20]
 8009a2e:	e7eb      	b.n	8009a08 <_dtoa_r+0xb78>
 8009a30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009a32:	2301      	movs	r3, #1
 8009a34:	2a00      	cmp	r2, #0
 8009a36:	dd00      	ble.n	8009a3a <_dtoa_r+0xbaa>
 8009a38:	0013      	movs	r3, r2
 8009a3a:	2500      	movs	r5, #0
 8009a3c:	9a06      	ldr	r2, [sp, #24]
 8009a3e:	18d3      	adds	r3, r2, r3
 8009a40:	9308      	str	r3, [sp, #32]
 8009a42:	9905      	ldr	r1, [sp, #20]
 8009a44:	2201      	movs	r2, #1
 8009a46:	9804      	ldr	r0, [sp, #16]
 8009a48:	f000 fb50 	bl	800a0ec <__lshift>
 8009a4c:	0031      	movs	r1, r6
 8009a4e:	9005      	str	r0, [sp, #20]
 8009a50:	f000 fbba 	bl	800a1c8 <__mcmp>
 8009a54:	2800      	cmp	r0, #0
 8009a56:	dc9f      	bgt.n	8009998 <_dtoa_r+0xb08>
 8009a58:	d101      	bne.n	8009a5e <_dtoa_r+0xbce>
 8009a5a:	07e4      	lsls	r4, r4, #31
 8009a5c:	d49c      	bmi.n	8009998 <_dtoa_r+0xb08>
 8009a5e:	9b08      	ldr	r3, [sp, #32]
 8009a60:	9308      	str	r3, [sp, #32]
 8009a62:	3b01      	subs	r3, #1
 8009a64:	781a      	ldrb	r2, [r3, #0]
 8009a66:	2a30      	cmp	r2, #48	; 0x30
 8009a68:	d0fa      	beq.n	8009a60 <_dtoa_r+0xbd0>
 8009a6a:	e6e6      	b.n	800983a <_dtoa_r+0x9aa>
 8009a6c:	9a06      	ldr	r2, [sp, #24]
 8009a6e:	429a      	cmp	r2, r3
 8009a70:	d193      	bne.n	800999a <_dtoa_r+0xb0a>
 8009a72:	9b03      	ldr	r3, [sp, #12]
 8009a74:	3301      	adds	r3, #1
 8009a76:	9303      	str	r3, [sp, #12]
 8009a78:	2331      	movs	r3, #49	; 0x31
 8009a7a:	7013      	strb	r3, [r2, #0]
 8009a7c:	e6dd      	b.n	800983a <_dtoa_r+0x9aa>
 8009a7e:	4b09      	ldr	r3, [pc, #36]	; (8009aa4 <_dtoa_r+0xc14>)
 8009a80:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009a82:	9306      	str	r3, [sp, #24]
 8009a84:	4b08      	ldr	r3, [pc, #32]	; (8009aa8 <_dtoa_r+0xc18>)
 8009a86:	2a00      	cmp	r2, #0
 8009a88:	d001      	beq.n	8009a8e <_dtoa_r+0xbfe>
 8009a8a:	f7ff fa49 	bl	8008f20 <_dtoa_r+0x90>
 8009a8e:	f7ff fa49 	bl	8008f24 <_dtoa_r+0x94>
 8009a92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	dcb6      	bgt.n	8009a06 <_dtoa_r+0xb76>
 8009a98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009a9a:	2b02      	cmp	r3, #2
 8009a9c:	dd00      	ble.n	8009aa0 <_dtoa_r+0xc10>
 8009a9e:	e6b6      	b.n	800980e <_dtoa_r+0x97e>
 8009aa0:	e7b1      	b.n	8009a06 <_dtoa_r+0xb76>
 8009aa2:	46c0      	nop			; (mov r8, r8)
 8009aa4:	0800d680 	.word	0x0800d680
 8009aa8:	0800d688 	.word	0x0800d688

08009aac <_free_r>:
 8009aac:	b570      	push	{r4, r5, r6, lr}
 8009aae:	0005      	movs	r5, r0
 8009ab0:	2900      	cmp	r1, #0
 8009ab2:	d010      	beq.n	8009ad6 <_free_r+0x2a>
 8009ab4:	1f0c      	subs	r4, r1, #4
 8009ab6:	6823      	ldr	r3, [r4, #0]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	da00      	bge.n	8009abe <_free_r+0x12>
 8009abc:	18e4      	adds	r4, r4, r3
 8009abe:	0028      	movs	r0, r5
 8009ac0:	f000 f8ec 	bl	8009c9c <__malloc_lock>
 8009ac4:	4a1d      	ldr	r2, [pc, #116]	; (8009b3c <_free_r+0x90>)
 8009ac6:	6813      	ldr	r3, [r2, #0]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d105      	bne.n	8009ad8 <_free_r+0x2c>
 8009acc:	6063      	str	r3, [r4, #4]
 8009ace:	6014      	str	r4, [r2, #0]
 8009ad0:	0028      	movs	r0, r5
 8009ad2:	f000 f8eb 	bl	8009cac <__malloc_unlock>
 8009ad6:	bd70      	pop	{r4, r5, r6, pc}
 8009ad8:	42a3      	cmp	r3, r4
 8009ada:	d908      	bls.n	8009aee <_free_r+0x42>
 8009adc:	6820      	ldr	r0, [r4, #0]
 8009ade:	1821      	adds	r1, r4, r0
 8009ae0:	428b      	cmp	r3, r1
 8009ae2:	d1f3      	bne.n	8009acc <_free_r+0x20>
 8009ae4:	6819      	ldr	r1, [r3, #0]
 8009ae6:	685b      	ldr	r3, [r3, #4]
 8009ae8:	1809      	adds	r1, r1, r0
 8009aea:	6021      	str	r1, [r4, #0]
 8009aec:	e7ee      	b.n	8009acc <_free_r+0x20>
 8009aee:	001a      	movs	r2, r3
 8009af0:	685b      	ldr	r3, [r3, #4]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d001      	beq.n	8009afa <_free_r+0x4e>
 8009af6:	42a3      	cmp	r3, r4
 8009af8:	d9f9      	bls.n	8009aee <_free_r+0x42>
 8009afa:	6811      	ldr	r1, [r2, #0]
 8009afc:	1850      	adds	r0, r2, r1
 8009afe:	42a0      	cmp	r0, r4
 8009b00:	d10b      	bne.n	8009b1a <_free_r+0x6e>
 8009b02:	6820      	ldr	r0, [r4, #0]
 8009b04:	1809      	adds	r1, r1, r0
 8009b06:	1850      	adds	r0, r2, r1
 8009b08:	6011      	str	r1, [r2, #0]
 8009b0a:	4283      	cmp	r3, r0
 8009b0c:	d1e0      	bne.n	8009ad0 <_free_r+0x24>
 8009b0e:	6818      	ldr	r0, [r3, #0]
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	1841      	adds	r1, r0, r1
 8009b14:	6011      	str	r1, [r2, #0]
 8009b16:	6053      	str	r3, [r2, #4]
 8009b18:	e7da      	b.n	8009ad0 <_free_r+0x24>
 8009b1a:	42a0      	cmp	r0, r4
 8009b1c:	d902      	bls.n	8009b24 <_free_r+0x78>
 8009b1e:	230c      	movs	r3, #12
 8009b20:	602b      	str	r3, [r5, #0]
 8009b22:	e7d5      	b.n	8009ad0 <_free_r+0x24>
 8009b24:	6820      	ldr	r0, [r4, #0]
 8009b26:	1821      	adds	r1, r4, r0
 8009b28:	428b      	cmp	r3, r1
 8009b2a:	d103      	bne.n	8009b34 <_free_r+0x88>
 8009b2c:	6819      	ldr	r1, [r3, #0]
 8009b2e:	685b      	ldr	r3, [r3, #4]
 8009b30:	1809      	adds	r1, r1, r0
 8009b32:	6021      	str	r1, [r4, #0]
 8009b34:	6063      	str	r3, [r4, #4]
 8009b36:	6054      	str	r4, [r2, #4]
 8009b38:	e7ca      	b.n	8009ad0 <_free_r+0x24>
 8009b3a:	46c0      	nop			; (mov r8, r8)
 8009b3c:	20000a7c 	.word	0x20000a7c

08009b40 <malloc>:
 8009b40:	b510      	push	{r4, lr}
 8009b42:	4b03      	ldr	r3, [pc, #12]	; (8009b50 <malloc+0x10>)
 8009b44:	0001      	movs	r1, r0
 8009b46:	6818      	ldr	r0, [r3, #0]
 8009b48:	f000 f826 	bl	8009b98 <_malloc_r>
 8009b4c:	bd10      	pop	{r4, pc}
 8009b4e:	46c0      	nop			; (mov r8, r8)
 8009b50:	20000080 	.word	0x20000080

08009b54 <sbrk_aligned>:
 8009b54:	b570      	push	{r4, r5, r6, lr}
 8009b56:	4e0f      	ldr	r6, [pc, #60]	; (8009b94 <sbrk_aligned+0x40>)
 8009b58:	000d      	movs	r5, r1
 8009b5a:	6831      	ldr	r1, [r6, #0]
 8009b5c:	0004      	movs	r4, r0
 8009b5e:	2900      	cmp	r1, #0
 8009b60:	d102      	bne.n	8009b68 <sbrk_aligned+0x14>
 8009b62:	f000 fe6f 	bl	800a844 <_sbrk_r>
 8009b66:	6030      	str	r0, [r6, #0]
 8009b68:	0029      	movs	r1, r5
 8009b6a:	0020      	movs	r0, r4
 8009b6c:	f000 fe6a 	bl	800a844 <_sbrk_r>
 8009b70:	1c43      	adds	r3, r0, #1
 8009b72:	d00a      	beq.n	8009b8a <sbrk_aligned+0x36>
 8009b74:	2303      	movs	r3, #3
 8009b76:	1cc5      	adds	r5, r0, #3
 8009b78:	439d      	bics	r5, r3
 8009b7a:	42a8      	cmp	r0, r5
 8009b7c:	d007      	beq.n	8009b8e <sbrk_aligned+0x3a>
 8009b7e:	1a29      	subs	r1, r5, r0
 8009b80:	0020      	movs	r0, r4
 8009b82:	f000 fe5f 	bl	800a844 <_sbrk_r>
 8009b86:	3001      	adds	r0, #1
 8009b88:	d101      	bne.n	8009b8e <sbrk_aligned+0x3a>
 8009b8a:	2501      	movs	r5, #1
 8009b8c:	426d      	negs	r5, r5
 8009b8e:	0028      	movs	r0, r5
 8009b90:	bd70      	pop	{r4, r5, r6, pc}
 8009b92:	46c0      	nop			; (mov r8, r8)
 8009b94:	20000a80 	.word	0x20000a80

08009b98 <_malloc_r>:
 8009b98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b9a:	2203      	movs	r2, #3
 8009b9c:	1ccb      	adds	r3, r1, #3
 8009b9e:	4393      	bics	r3, r2
 8009ba0:	3308      	adds	r3, #8
 8009ba2:	0006      	movs	r6, r0
 8009ba4:	001f      	movs	r7, r3
 8009ba6:	2b0c      	cmp	r3, #12
 8009ba8:	d238      	bcs.n	8009c1c <_malloc_r+0x84>
 8009baa:	270c      	movs	r7, #12
 8009bac:	42b9      	cmp	r1, r7
 8009bae:	d837      	bhi.n	8009c20 <_malloc_r+0x88>
 8009bb0:	0030      	movs	r0, r6
 8009bb2:	f000 f873 	bl	8009c9c <__malloc_lock>
 8009bb6:	4b38      	ldr	r3, [pc, #224]	; (8009c98 <_malloc_r+0x100>)
 8009bb8:	9300      	str	r3, [sp, #0]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	001c      	movs	r4, r3
 8009bbe:	2c00      	cmp	r4, #0
 8009bc0:	d133      	bne.n	8009c2a <_malloc_r+0x92>
 8009bc2:	0039      	movs	r1, r7
 8009bc4:	0030      	movs	r0, r6
 8009bc6:	f7ff ffc5 	bl	8009b54 <sbrk_aligned>
 8009bca:	0004      	movs	r4, r0
 8009bcc:	1c43      	adds	r3, r0, #1
 8009bce:	d15e      	bne.n	8009c8e <_malloc_r+0xf6>
 8009bd0:	9b00      	ldr	r3, [sp, #0]
 8009bd2:	681c      	ldr	r4, [r3, #0]
 8009bd4:	0025      	movs	r5, r4
 8009bd6:	2d00      	cmp	r5, #0
 8009bd8:	d14e      	bne.n	8009c78 <_malloc_r+0xe0>
 8009bda:	2c00      	cmp	r4, #0
 8009bdc:	d051      	beq.n	8009c82 <_malloc_r+0xea>
 8009bde:	6823      	ldr	r3, [r4, #0]
 8009be0:	0029      	movs	r1, r5
 8009be2:	18e3      	adds	r3, r4, r3
 8009be4:	0030      	movs	r0, r6
 8009be6:	9301      	str	r3, [sp, #4]
 8009be8:	f000 fe2c 	bl	800a844 <_sbrk_r>
 8009bec:	9b01      	ldr	r3, [sp, #4]
 8009bee:	4283      	cmp	r3, r0
 8009bf0:	d147      	bne.n	8009c82 <_malloc_r+0xea>
 8009bf2:	6823      	ldr	r3, [r4, #0]
 8009bf4:	0030      	movs	r0, r6
 8009bf6:	1aff      	subs	r7, r7, r3
 8009bf8:	0039      	movs	r1, r7
 8009bfa:	f7ff ffab 	bl	8009b54 <sbrk_aligned>
 8009bfe:	3001      	adds	r0, #1
 8009c00:	d03f      	beq.n	8009c82 <_malloc_r+0xea>
 8009c02:	6823      	ldr	r3, [r4, #0]
 8009c04:	19db      	adds	r3, r3, r7
 8009c06:	6023      	str	r3, [r4, #0]
 8009c08:	9b00      	ldr	r3, [sp, #0]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d040      	beq.n	8009c92 <_malloc_r+0xfa>
 8009c10:	685a      	ldr	r2, [r3, #4]
 8009c12:	42a2      	cmp	r2, r4
 8009c14:	d133      	bne.n	8009c7e <_malloc_r+0xe6>
 8009c16:	2200      	movs	r2, #0
 8009c18:	605a      	str	r2, [r3, #4]
 8009c1a:	e014      	b.n	8009c46 <_malloc_r+0xae>
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	dac5      	bge.n	8009bac <_malloc_r+0x14>
 8009c20:	230c      	movs	r3, #12
 8009c22:	2500      	movs	r5, #0
 8009c24:	6033      	str	r3, [r6, #0]
 8009c26:	0028      	movs	r0, r5
 8009c28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009c2a:	6821      	ldr	r1, [r4, #0]
 8009c2c:	1bc9      	subs	r1, r1, r7
 8009c2e:	d420      	bmi.n	8009c72 <_malloc_r+0xda>
 8009c30:	290b      	cmp	r1, #11
 8009c32:	d918      	bls.n	8009c66 <_malloc_r+0xce>
 8009c34:	19e2      	adds	r2, r4, r7
 8009c36:	6027      	str	r7, [r4, #0]
 8009c38:	42a3      	cmp	r3, r4
 8009c3a:	d112      	bne.n	8009c62 <_malloc_r+0xca>
 8009c3c:	9b00      	ldr	r3, [sp, #0]
 8009c3e:	601a      	str	r2, [r3, #0]
 8009c40:	6863      	ldr	r3, [r4, #4]
 8009c42:	6011      	str	r1, [r2, #0]
 8009c44:	6053      	str	r3, [r2, #4]
 8009c46:	0030      	movs	r0, r6
 8009c48:	0025      	movs	r5, r4
 8009c4a:	f000 f82f 	bl	8009cac <__malloc_unlock>
 8009c4e:	2207      	movs	r2, #7
 8009c50:	350b      	adds	r5, #11
 8009c52:	1d23      	adds	r3, r4, #4
 8009c54:	4395      	bics	r5, r2
 8009c56:	1aea      	subs	r2, r5, r3
 8009c58:	429d      	cmp	r5, r3
 8009c5a:	d0e4      	beq.n	8009c26 <_malloc_r+0x8e>
 8009c5c:	1b5b      	subs	r3, r3, r5
 8009c5e:	50a3      	str	r3, [r4, r2]
 8009c60:	e7e1      	b.n	8009c26 <_malloc_r+0x8e>
 8009c62:	605a      	str	r2, [r3, #4]
 8009c64:	e7ec      	b.n	8009c40 <_malloc_r+0xa8>
 8009c66:	6862      	ldr	r2, [r4, #4]
 8009c68:	42a3      	cmp	r3, r4
 8009c6a:	d1d5      	bne.n	8009c18 <_malloc_r+0x80>
 8009c6c:	9b00      	ldr	r3, [sp, #0]
 8009c6e:	601a      	str	r2, [r3, #0]
 8009c70:	e7e9      	b.n	8009c46 <_malloc_r+0xae>
 8009c72:	0023      	movs	r3, r4
 8009c74:	6864      	ldr	r4, [r4, #4]
 8009c76:	e7a2      	b.n	8009bbe <_malloc_r+0x26>
 8009c78:	002c      	movs	r4, r5
 8009c7a:	686d      	ldr	r5, [r5, #4]
 8009c7c:	e7ab      	b.n	8009bd6 <_malloc_r+0x3e>
 8009c7e:	0013      	movs	r3, r2
 8009c80:	e7c4      	b.n	8009c0c <_malloc_r+0x74>
 8009c82:	230c      	movs	r3, #12
 8009c84:	0030      	movs	r0, r6
 8009c86:	6033      	str	r3, [r6, #0]
 8009c88:	f000 f810 	bl	8009cac <__malloc_unlock>
 8009c8c:	e7cb      	b.n	8009c26 <_malloc_r+0x8e>
 8009c8e:	6027      	str	r7, [r4, #0]
 8009c90:	e7d9      	b.n	8009c46 <_malloc_r+0xae>
 8009c92:	605b      	str	r3, [r3, #4]
 8009c94:	deff      	udf	#255	; 0xff
 8009c96:	46c0      	nop			; (mov r8, r8)
 8009c98:	20000a7c 	.word	0x20000a7c

08009c9c <__malloc_lock>:
 8009c9c:	b510      	push	{r4, lr}
 8009c9e:	4802      	ldr	r0, [pc, #8]	; (8009ca8 <__malloc_lock+0xc>)
 8009ca0:	f7ff f851 	bl	8008d46 <__retarget_lock_acquire_recursive>
 8009ca4:	bd10      	pop	{r4, pc}
 8009ca6:	46c0      	nop			; (mov r8, r8)
 8009ca8:	20000a78 	.word	0x20000a78

08009cac <__malloc_unlock>:
 8009cac:	b510      	push	{r4, lr}
 8009cae:	4802      	ldr	r0, [pc, #8]	; (8009cb8 <__malloc_unlock+0xc>)
 8009cb0:	f7ff f84a 	bl	8008d48 <__retarget_lock_release_recursive>
 8009cb4:	bd10      	pop	{r4, pc}
 8009cb6:	46c0      	nop			; (mov r8, r8)
 8009cb8:	20000a78 	.word	0x20000a78

08009cbc <_Balloc>:
 8009cbc:	b570      	push	{r4, r5, r6, lr}
 8009cbe:	69c5      	ldr	r5, [r0, #28]
 8009cc0:	0006      	movs	r6, r0
 8009cc2:	000c      	movs	r4, r1
 8009cc4:	2d00      	cmp	r5, #0
 8009cc6:	d10e      	bne.n	8009ce6 <_Balloc+0x2a>
 8009cc8:	2010      	movs	r0, #16
 8009cca:	f7ff ff39 	bl	8009b40 <malloc>
 8009cce:	1e02      	subs	r2, r0, #0
 8009cd0:	61f0      	str	r0, [r6, #28]
 8009cd2:	d104      	bne.n	8009cde <_Balloc+0x22>
 8009cd4:	216b      	movs	r1, #107	; 0x6b
 8009cd6:	4b19      	ldr	r3, [pc, #100]	; (8009d3c <_Balloc+0x80>)
 8009cd8:	4819      	ldr	r0, [pc, #100]	; (8009d40 <_Balloc+0x84>)
 8009cda:	f000 fdc5 	bl	800a868 <__assert_func>
 8009cde:	6045      	str	r5, [r0, #4]
 8009ce0:	6085      	str	r5, [r0, #8]
 8009ce2:	6005      	str	r5, [r0, #0]
 8009ce4:	60c5      	str	r5, [r0, #12]
 8009ce6:	69f5      	ldr	r5, [r6, #28]
 8009ce8:	68eb      	ldr	r3, [r5, #12]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d013      	beq.n	8009d16 <_Balloc+0x5a>
 8009cee:	69f3      	ldr	r3, [r6, #28]
 8009cf0:	00a2      	lsls	r2, r4, #2
 8009cf2:	68db      	ldr	r3, [r3, #12]
 8009cf4:	189b      	adds	r3, r3, r2
 8009cf6:	6818      	ldr	r0, [r3, #0]
 8009cf8:	2800      	cmp	r0, #0
 8009cfa:	d118      	bne.n	8009d2e <_Balloc+0x72>
 8009cfc:	2101      	movs	r1, #1
 8009cfe:	000d      	movs	r5, r1
 8009d00:	40a5      	lsls	r5, r4
 8009d02:	1d6a      	adds	r2, r5, #5
 8009d04:	0030      	movs	r0, r6
 8009d06:	0092      	lsls	r2, r2, #2
 8009d08:	f000 fdcc 	bl	800a8a4 <_calloc_r>
 8009d0c:	2800      	cmp	r0, #0
 8009d0e:	d00c      	beq.n	8009d2a <_Balloc+0x6e>
 8009d10:	6044      	str	r4, [r0, #4]
 8009d12:	6085      	str	r5, [r0, #8]
 8009d14:	e00d      	b.n	8009d32 <_Balloc+0x76>
 8009d16:	2221      	movs	r2, #33	; 0x21
 8009d18:	2104      	movs	r1, #4
 8009d1a:	0030      	movs	r0, r6
 8009d1c:	f000 fdc2 	bl	800a8a4 <_calloc_r>
 8009d20:	69f3      	ldr	r3, [r6, #28]
 8009d22:	60e8      	str	r0, [r5, #12]
 8009d24:	68db      	ldr	r3, [r3, #12]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d1e1      	bne.n	8009cee <_Balloc+0x32>
 8009d2a:	2000      	movs	r0, #0
 8009d2c:	bd70      	pop	{r4, r5, r6, pc}
 8009d2e:	6802      	ldr	r2, [r0, #0]
 8009d30:	601a      	str	r2, [r3, #0]
 8009d32:	2300      	movs	r3, #0
 8009d34:	6103      	str	r3, [r0, #16]
 8009d36:	60c3      	str	r3, [r0, #12]
 8009d38:	e7f8      	b.n	8009d2c <_Balloc+0x70>
 8009d3a:	46c0      	nop			; (mov r8, r8)
 8009d3c:	0800d68d 	.word	0x0800d68d
 8009d40:	0800d70d 	.word	0x0800d70d

08009d44 <_Bfree>:
 8009d44:	b570      	push	{r4, r5, r6, lr}
 8009d46:	69c6      	ldr	r6, [r0, #28]
 8009d48:	0005      	movs	r5, r0
 8009d4a:	000c      	movs	r4, r1
 8009d4c:	2e00      	cmp	r6, #0
 8009d4e:	d10e      	bne.n	8009d6e <_Bfree+0x2a>
 8009d50:	2010      	movs	r0, #16
 8009d52:	f7ff fef5 	bl	8009b40 <malloc>
 8009d56:	1e02      	subs	r2, r0, #0
 8009d58:	61e8      	str	r0, [r5, #28]
 8009d5a:	d104      	bne.n	8009d66 <_Bfree+0x22>
 8009d5c:	218f      	movs	r1, #143	; 0x8f
 8009d5e:	4b09      	ldr	r3, [pc, #36]	; (8009d84 <_Bfree+0x40>)
 8009d60:	4809      	ldr	r0, [pc, #36]	; (8009d88 <_Bfree+0x44>)
 8009d62:	f000 fd81 	bl	800a868 <__assert_func>
 8009d66:	6046      	str	r6, [r0, #4]
 8009d68:	6086      	str	r6, [r0, #8]
 8009d6a:	6006      	str	r6, [r0, #0]
 8009d6c:	60c6      	str	r6, [r0, #12]
 8009d6e:	2c00      	cmp	r4, #0
 8009d70:	d007      	beq.n	8009d82 <_Bfree+0x3e>
 8009d72:	69eb      	ldr	r3, [r5, #28]
 8009d74:	6862      	ldr	r2, [r4, #4]
 8009d76:	68db      	ldr	r3, [r3, #12]
 8009d78:	0092      	lsls	r2, r2, #2
 8009d7a:	189b      	adds	r3, r3, r2
 8009d7c:	681a      	ldr	r2, [r3, #0]
 8009d7e:	6022      	str	r2, [r4, #0]
 8009d80:	601c      	str	r4, [r3, #0]
 8009d82:	bd70      	pop	{r4, r5, r6, pc}
 8009d84:	0800d68d 	.word	0x0800d68d
 8009d88:	0800d70d 	.word	0x0800d70d

08009d8c <__multadd>:
 8009d8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d8e:	000e      	movs	r6, r1
 8009d90:	9001      	str	r0, [sp, #4]
 8009d92:	000c      	movs	r4, r1
 8009d94:	001d      	movs	r5, r3
 8009d96:	2000      	movs	r0, #0
 8009d98:	690f      	ldr	r7, [r1, #16]
 8009d9a:	3614      	adds	r6, #20
 8009d9c:	6833      	ldr	r3, [r6, #0]
 8009d9e:	3001      	adds	r0, #1
 8009da0:	b299      	uxth	r1, r3
 8009da2:	4351      	muls	r1, r2
 8009da4:	0c1b      	lsrs	r3, r3, #16
 8009da6:	4353      	muls	r3, r2
 8009da8:	1949      	adds	r1, r1, r5
 8009daa:	0c0d      	lsrs	r5, r1, #16
 8009dac:	195b      	adds	r3, r3, r5
 8009dae:	0c1d      	lsrs	r5, r3, #16
 8009db0:	b289      	uxth	r1, r1
 8009db2:	041b      	lsls	r3, r3, #16
 8009db4:	185b      	adds	r3, r3, r1
 8009db6:	c608      	stmia	r6!, {r3}
 8009db8:	4287      	cmp	r7, r0
 8009dba:	dcef      	bgt.n	8009d9c <__multadd+0x10>
 8009dbc:	2d00      	cmp	r5, #0
 8009dbe:	d022      	beq.n	8009e06 <__multadd+0x7a>
 8009dc0:	68a3      	ldr	r3, [r4, #8]
 8009dc2:	42bb      	cmp	r3, r7
 8009dc4:	dc19      	bgt.n	8009dfa <__multadd+0x6e>
 8009dc6:	6861      	ldr	r1, [r4, #4]
 8009dc8:	9801      	ldr	r0, [sp, #4]
 8009dca:	3101      	adds	r1, #1
 8009dcc:	f7ff ff76 	bl	8009cbc <_Balloc>
 8009dd0:	1e06      	subs	r6, r0, #0
 8009dd2:	d105      	bne.n	8009de0 <__multadd+0x54>
 8009dd4:	0032      	movs	r2, r6
 8009dd6:	21ba      	movs	r1, #186	; 0xba
 8009dd8:	4b0c      	ldr	r3, [pc, #48]	; (8009e0c <__multadd+0x80>)
 8009dda:	480d      	ldr	r0, [pc, #52]	; (8009e10 <__multadd+0x84>)
 8009ddc:	f000 fd44 	bl	800a868 <__assert_func>
 8009de0:	0021      	movs	r1, r4
 8009de2:	6922      	ldr	r2, [r4, #16]
 8009de4:	310c      	adds	r1, #12
 8009de6:	3202      	adds	r2, #2
 8009de8:	0092      	lsls	r2, r2, #2
 8009dea:	300c      	adds	r0, #12
 8009dec:	f7fe ffb8 	bl	8008d60 <memcpy>
 8009df0:	0021      	movs	r1, r4
 8009df2:	9801      	ldr	r0, [sp, #4]
 8009df4:	f7ff ffa6 	bl	8009d44 <_Bfree>
 8009df8:	0034      	movs	r4, r6
 8009dfa:	1d3b      	adds	r3, r7, #4
 8009dfc:	009b      	lsls	r3, r3, #2
 8009dfe:	18e3      	adds	r3, r4, r3
 8009e00:	605d      	str	r5, [r3, #4]
 8009e02:	1c7b      	adds	r3, r7, #1
 8009e04:	6123      	str	r3, [r4, #16]
 8009e06:	0020      	movs	r0, r4
 8009e08:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009e0a:	46c0      	nop			; (mov r8, r8)
 8009e0c:	0800d6fc 	.word	0x0800d6fc
 8009e10:	0800d70d 	.word	0x0800d70d

08009e14 <__hi0bits>:
 8009e14:	0003      	movs	r3, r0
 8009e16:	0c02      	lsrs	r2, r0, #16
 8009e18:	2000      	movs	r0, #0
 8009e1a:	4282      	cmp	r2, r0
 8009e1c:	d101      	bne.n	8009e22 <__hi0bits+0xe>
 8009e1e:	041b      	lsls	r3, r3, #16
 8009e20:	3010      	adds	r0, #16
 8009e22:	0e1a      	lsrs	r2, r3, #24
 8009e24:	d101      	bne.n	8009e2a <__hi0bits+0x16>
 8009e26:	3008      	adds	r0, #8
 8009e28:	021b      	lsls	r3, r3, #8
 8009e2a:	0f1a      	lsrs	r2, r3, #28
 8009e2c:	d101      	bne.n	8009e32 <__hi0bits+0x1e>
 8009e2e:	3004      	adds	r0, #4
 8009e30:	011b      	lsls	r3, r3, #4
 8009e32:	0f9a      	lsrs	r2, r3, #30
 8009e34:	d101      	bne.n	8009e3a <__hi0bits+0x26>
 8009e36:	3002      	adds	r0, #2
 8009e38:	009b      	lsls	r3, r3, #2
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	db03      	blt.n	8009e46 <__hi0bits+0x32>
 8009e3e:	3001      	adds	r0, #1
 8009e40:	005b      	lsls	r3, r3, #1
 8009e42:	d400      	bmi.n	8009e46 <__hi0bits+0x32>
 8009e44:	2020      	movs	r0, #32
 8009e46:	4770      	bx	lr

08009e48 <__lo0bits>:
 8009e48:	6803      	ldr	r3, [r0, #0]
 8009e4a:	0001      	movs	r1, r0
 8009e4c:	2207      	movs	r2, #7
 8009e4e:	0018      	movs	r0, r3
 8009e50:	4010      	ands	r0, r2
 8009e52:	4213      	tst	r3, r2
 8009e54:	d00d      	beq.n	8009e72 <__lo0bits+0x2a>
 8009e56:	3a06      	subs	r2, #6
 8009e58:	2000      	movs	r0, #0
 8009e5a:	4213      	tst	r3, r2
 8009e5c:	d105      	bne.n	8009e6a <__lo0bits+0x22>
 8009e5e:	3002      	adds	r0, #2
 8009e60:	4203      	tst	r3, r0
 8009e62:	d003      	beq.n	8009e6c <__lo0bits+0x24>
 8009e64:	40d3      	lsrs	r3, r2
 8009e66:	0010      	movs	r0, r2
 8009e68:	600b      	str	r3, [r1, #0]
 8009e6a:	4770      	bx	lr
 8009e6c:	089b      	lsrs	r3, r3, #2
 8009e6e:	600b      	str	r3, [r1, #0]
 8009e70:	e7fb      	b.n	8009e6a <__lo0bits+0x22>
 8009e72:	b29a      	uxth	r2, r3
 8009e74:	2a00      	cmp	r2, #0
 8009e76:	d101      	bne.n	8009e7c <__lo0bits+0x34>
 8009e78:	2010      	movs	r0, #16
 8009e7a:	0c1b      	lsrs	r3, r3, #16
 8009e7c:	b2da      	uxtb	r2, r3
 8009e7e:	2a00      	cmp	r2, #0
 8009e80:	d101      	bne.n	8009e86 <__lo0bits+0x3e>
 8009e82:	3008      	adds	r0, #8
 8009e84:	0a1b      	lsrs	r3, r3, #8
 8009e86:	071a      	lsls	r2, r3, #28
 8009e88:	d101      	bne.n	8009e8e <__lo0bits+0x46>
 8009e8a:	3004      	adds	r0, #4
 8009e8c:	091b      	lsrs	r3, r3, #4
 8009e8e:	079a      	lsls	r2, r3, #30
 8009e90:	d101      	bne.n	8009e96 <__lo0bits+0x4e>
 8009e92:	3002      	adds	r0, #2
 8009e94:	089b      	lsrs	r3, r3, #2
 8009e96:	07da      	lsls	r2, r3, #31
 8009e98:	d4e9      	bmi.n	8009e6e <__lo0bits+0x26>
 8009e9a:	3001      	adds	r0, #1
 8009e9c:	085b      	lsrs	r3, r3, #1
 8009e9e:	d1e6      	bne.n	8009e6e <__lo0bits+0x26>
 8009ea0:	2020      	movs	r0, #32
 8009ea2:	e7e2      	b.n	8009e6a <__lo0bits+0x22>

08009ea4 <__i2b>:
 8009ea4:	b510      	push	{r4, lr}
 8009ea6:	000c      	movs	r4, r1
 8009ea8:	2101      	movs	r1, #1
 8009eaa:	f7ff ff07 	bl	8009cbc <_Balloc>
 8009eae:	2800      	cmp	r0, #0
 8009eb0:	d107      	bne.n	8009ec2 <__i2b+0x1e>
 8009eb2:	2146      	movs	r1, #70	; 0x46
 8009eb4:	4c05      	ldr	r4, [pc, #20]	; (8009ecc <__i2b+0x28>)
 8009eb6:	0002      	movs	r2, r0
 8009eb8:	4b05      	ldr	r3, [pc, #20]	; (8009ed0 <__i2b+0x2c>)
 8009eba:	0020      	movs	r0, r4
 8009ebc:	31ff      	adds	r1, #255	; 0xff
 8009ebe:	f000 fcd3 	bl	800a868 <__assert_func>
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	6144      	str	r4, [r0, #20]
 8009ec6:	6103      	str	r3, [r0, #16]
 8009ec8:	bd10      	pop	{r4, pc}
 8009eca:	46c0      	nop			; (mov r8, r8)
 8009ecc:	0800d70d 	.word	0x0800d70d
 8009ed0:	0800d6fc 	.word	0x0800d6fc

08009ed4 <__multiply>:
 8009ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ed6:	0015      	movs	r5, r2
 8009ed8:	690a      	ldr	r2, [r1, #16]
 8009eda:	692b      	ldr	r3, [r5, #16]
 8009edc:	000c      	movs	r4, r1
 8009ede:	b08b      	sub	sp, #44	; 0x2c
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	da01      	bge.n	8009ee8 <__multiply+0x14>
 8009ee4:	002c      	movs	r4, r5
 8009ee6:	000d      	movs	r5, r1
 8009ee8:	6927      	ldr	r7, [r4, #16]
 8009eea:	692e      	ldr	r6, [r5, #16]
 8009eec:	6861      	ldr	r1, [r4, #4]
 8009eee:	19bb      	adds	r3, r7, r6
 8009ef0:	9303      	str	r3, [sp, #12]
 8009ef2:	68a3      	ldr	r3, [r4, #8]
 8009ef4:	19ba      	adds	r2, r7, r6
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	da00      	bge.n	8009efc <__multiply+0x28>
 8009efa:	3101      	adds	r1, #1
 8009efc:	f7ff fede 	bl	8009cbc <_Balloc>
 8009f00:	9002      	str	r0, [sp, #8]
 8009f02:	2800      	cmp	r0, #0
 8009f04:	d106      	bne.n	8009f14 <__multiply+0x40>
 8009f06:	21b1      	movs	r1, #177	; 0xb1
 8009f08:	4b48      	ldr	r3, [pc, #288]	; (800a02c <__multiply+0x158>)
 8009f0a:	4849      	ldr	r0, [pc, #292]	; (800a030 <__multiply+0x15c>)
 8009f0c:	9a02      	ldr	r2, [sp, #8]
 8009f0e:	0049      	lsls	r1, r1, #1
 8009f10:	f000 fcaa 	bl	800a868 <__assert_func>
 8009f14:	9b02      	ldr	r3, [sp, #8]
 8009f16:	2200      	movs	r2, #0
 8009f18:	3314      	adds	r3, #20
 8009f1a:	469c      	mov	ip, r3
 8009f1c:	19bb      	adds	r3, r7, r6
 8009f1e:	009b      	lsls	r3, r3, #2
 8009f20:	4463      	add	r3, ip
 8009f22:	9304      	str	r3, [sp, #16]
 8009f24:	4663      	mov	r3, ip
 8009f26:	9904      	ldr	r1, [sp, #16]
 8009f28:	428b      	cmp	r3, r1
 8009f2a:	d32a      	bcc.n	8009f82 <__multiply+0xae>
 8009f2c:	0023      	movs	r3, r4
 8009f2e:	00bf      	lsls	r7, r7, #2
 8009f30:	3314      	adds	r3, #20
 8009f32:	3514      	adds	r5, #20
 8009f34:	9308      	str	r3, [sp, #32]
 8009f36:	00b6      	lsls	r6, r6, #2
 8009f38:	19db      	adds	r3, r3, r7
 8009f3a:	9305      	str	r3, [sp, #20]
 8009f3c:	19ab      	adds	r3, r5, r6
 8009f3e:	9309      	str	r3, [sp, #36]	; 0x24
 8009f40:	2304      	movs	r3, #4
 8009f42:	9306      	str	r3, [sp, #24]
 8009f44:	0023      	movs	r3, r4
 8009f46:	9a05      	ldr	r2, [sp, #20]
 8009f48:	3315      	adds	r3, #21
 8009f4a:	9501      	str	r5, [sp, #4]
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	d305      	bcc.n	8009f5c <__multiply+0x88>
 8009f50:	1b13      	subs	r3, r2, r4
 8009f52:	3b15      	subs	r3, #21
 8009f54:	089b      	lsrs	r3, r3, #2
 8009f56:	3301      	adds	r3, #1
 8009f58:	009b      	lsls	r3, r3, #2
 8009f5a:	9306      	str	r3, [sp, #24]
 8009f5c:	9b01      	ldr	r3, [sp, #4]
 8009f5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d310      	bcc.n	8009f86 <__multiply+0xb2>
 8009f64:	9b03      	ldr	r3, [sp, #12]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	dd05      	ble.n	8009f76 <__multiply+0xa2>
 8009f6a:	9b04      	ldr	r3, [sp, #16]
 8009f6c:	3b04      	subs	r3, #4
 8009f6e:	9304      	str	r3, [sp, #16]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d056      	beq.n	800a024 <__multiply+0x150>
 8009f76:	9b02      	ldr	r3, [sp, #8]
 8009f78:	9a03      	ldr	r2, [sp, #12]
 8009f7a:	0018      	movs	r0, r3
 8009f7c:	611a      	str	r2, [r3, #16]
 8009f7e:	b00b      	add	sp, #44	; 0x2c
 8009f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f82:	c304      	stmia	r3!, {r2}
 8009f84:	e7cf      	b.n	8009f26 <__multiply+0x52>
 8009f86:	9b01      	ldr	r3, [sp, #4]
 8009f88:	6818      	ldr	r0, [r3, #0]
 8009f8a:	b280      	uxth	r0, r0
 8009f8c:	2800      	cmp	r0, #0
 8009f8e:	d01e      	beq.n	8009fce <__multiply+0xfa>
 8009f90:	4667      	mov	r7, ip
 8009f92:	2500      	movs	r5, #0
 8009f94:	9e08      	ldr	r6, [sp, #32]
 8009f96:	ce02      	ldmia	r6!, {r1}
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	9307      	str	r3, [sp, #28]
 8009f9c:	b28b      	uxth	r3, r1
 8009f9e:	4343      	muls	r3, r0
 8009fa0:	001a      	movs	r2, r3
 8009fa2:	466b      	mov	r3, sp
 8009fa4:	8b9b      	ldrh	r3, [r3, #28]
 8009fa6:	18d3      	adds	r3, r2, r3
 8009fa8:	195b      	adds	r3, r3, r5
 8009faa:	0c0d      	lsrs	r5, r1, #16
 8009fac:	4345      	muls	r5, r0
 8009fae:	9a07      	ldr	r2, [sp, #28]
 8009fb0:	0c11      	lsrs	r1, r2, #16
 8009fb2:	1869      	adds	r1, r5, r1
 8009fb4:	0c1a      	lsrs	r2, r3, #16
 8009fb6:	188a      	adds	r2, r1, r2
 8009fb8:	b29b      	uxth	r3, r3
 8009fba:	0c15      	lsrs	r5, r2, #16
 8009fbc:	0412      	lsls	r2, r2, #16
 8009fbe:	431a      	orrs	r2, r3
 8009fc0:	9b05      	ldr	r3, [sp, #20]
 8009fc2:	c704      	stmia	r7!, {r2}
 8009fc4:	42b3      	cmp	r3, r6
 8009fc6:	d8e6      	bhi.n	8009f96 <__multiply+0xc2>
 8009fc8:	4663      	mov	r3, ip
 8009fca:	9a06      	ldr	r2, [sp, #24]
 8009fcc:	509d      	str	r5, [r3, r2]
 8009fce:	9b01      	ldr	r3, [sp, #4]
 8009fd0:	6818      	ldr	r0, [r3, #0]
 8009fd2:	0c00      	lsrs	r0, r0, #16
 8009fd4:	d020      	beq.n	800a018 <__multiply+0x144>
 8009fd6:	4663      	mov	r3, ip
 8009fd8:	0025      	movs	r5, r4
 8009fda:	4661      	mov	r1, ip
 8009fdc:	2700      	movs	r7, #0
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	3514      	adds	r5, #20
 8009fe2:	682a      	ldr	r2, [r5, #0]
 8009fe4:	680e      	ldr	r6, [r1, #0]
 8009fe6:	b292      	uxth	r2, r2
 8009fe8:	4342      	muls	r2, r0
 8009fea:	0c36      	lsrs	r6, r6, #16
 8009fec:	1992      	adds	r2, r2, r6
 8009fee:	19d2      	adds	r2, r2, r7
 8009ff0:	0416      	lsls	r6, r2, #16
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	431e      	orrs	r6, r3
 8009ff6:	600e      	str	r6, [r1, #0]
 8009ff8:	cd40      	ldmia	r5!, {r6}
 8009ffa:	684b      	ldr	r3, [r1, #4]
 8009ffc:	0c36      	lsrs	r6, r6, #16
 8009ffe:	4346      	muls	r6, r0
 800a000:	b29b      	uxth	r3, r3
 800a002:	0c12      	lsrs	r2, r2, #16
 800a004:	18f3      	adds	r3, r6, r3
 800a006:	189b      	adds	r3, r3, r2
 800a008:	9a05      	ldr	r2, [sp, #20]
 800a00a:	0c1f      	lsrs	r7, r3, #16
 800a00c:	3104      	adds	r1, #4
 800a00e:	42aa      	cmp	r2, r5
 800a010:	d8e7      	bhi.n	8009fe2 <__multiply+0x10e>
 800a012:	4662      	mov	r2, ip
 800a014:	9906      	ldr	r1, [sp, #24]
 800a016:	5053      	str	r3, [r2, r1]
 800a018:	9b01      	ldr	r3, [sp, #4]
 800a01a:	3304      	adds	r3, #4
 800a01c:	9301      	str	r3, [sp, #4]
 800a01e:	2304      	movs	r3, #4
 800a020:	449c      	add	ip, r3
 800a022:	e79b      	b.n	8009f5c <__multiply+0x88>
 800a024:	9b03      	ldr	r3, [sp, #12]
 800a026:	3b01      	subs	r3, #1
 800a028:	9303      	str	r3, [sp, #12]
 800a02a:	e79b      	b.n	8009f64 <__multiply+0x90>
 800a02c:	0800d6fc 	.word	0x0800d6fc
 800a030:	0800d70d 	.word	0x0800d70d

0800a034 <__pow5mult>:
 800a034:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a036:	2303      	movs	r3, #3
 800a038:	0015      	movs	r5, r2
 800a03a:	0007      	movs	r7, r0
 800a03c:	000e      	movs	r6, r1
 800a03e:	401a      	ands	r2, r3
 800a040:	421d      	tst	r5, r3
 800a042:	d008      	beq.n	800a056 <__pow5mult+0x22>
 800a044:	4925      	ldr	r1, [pc, #148]	; (800a0dc <__pow5mult+0xa8>)
 800a046:	3a01      	subs	r2, #1
 800a048:	0092      	lsls	r2, r2, #2
 800a04a:	5852      	ldr	r2, [r2, r1]
 800a04c:	2300      	movs	r3, #0
 800a04e:	0031      	movs	r1, r6
 800a050:	f7ff fe9c 	bl	8009d8c <__multadd>
 800a054:	0006      	movs	r6, r0
 800a056:	10ad      	asrs	r5, r5, #2
 800a058:	d03d      	beq.n	800a0d6 <__pow5mult+0xa2>
 800a05a:	69fc      	ldr	r4, [r7, #28]
 800a05c:	2c00      	cmp	r4, #0
 800a05e:	d10f      	bne.n	800a080 <__pow5mult+0x4c>
 800a060:	2010      	movs	r0, #16
 800a062:	f7ff fd6d 	bl	8009b40 <malloc>
 800a066:	1e02      	subs	r2, r0, #0
 800a068:	61f8      	str	r0, [r7, #28]
 800a06a:	d105      	bne.n	800a078 <__pow5mult+0x44>
 800a06c:	21b4      	movs	r1, #180	; 0xb4
 800a06e:	4b1c      	ldr	r3, [pc, #112]	; (800a0e0 <__pow5mult+0xac>)
 800a070:	481c      	ldr	r0, [pc, #112]	; (800a0e4 <__pow5mult+0xb0>)
 800a072:	31ff      	adds	r1, #255	; 0xff
 800a074:	f000 fbf8 	bl	800a868 <__assert_func>
 800a078:	6044      	str	r4, [r0, #4]
 800a07a:	6084      	str	r4, [r0, #8]
 800a07c:	6004      	str	r4, [r0, #0]
 800a07e:	60c4      	str	r4, [r0, #12]
 800a080:	69fb      	ldr	r3, [r7, #28]
 800a082:	689c      	ldr	r4, [r3, #8]
 800a084:	9301      	str	r3, [sp, #4]
 800a086:	2c00      	cmp	r4, #0
 800a088:	d108      	bne.n	800a09c <__pow5mult+0x68>
 800a08a:	0038      	movs	r0, r7
 800a08c:	4916      	ldr	r1, [pc, #88]	; (800a0e8 <__pow5mult+0xb4>)
 800a08e:	f7ff ff09 	bl	8009ea4 <__i2b>
 800a092:	9b01      	ldr	r3, [sp, #4]
 800a094:	0004      	movs	r4, r0
 800a096:	6098      	str	r0, [r3, #8]
 800a098:	2300      	movs	r3, #0
 800a09a:	6003      	str	r3, [r0, #0]
 800a09c:	2301      	movs	r3, #1
 800a09e:	421d      	tst	r5, r3
 800a0a0:	d00a      	beq.n	800a0b8 <__pow5mult+0x84>
 800a0a2:	0031      	movs	r1, r6
 800a0a4:	0022      	movs	r2, r4
 800a0a6:	0038      	movs	r0, r7
 800a0a8:	f7ff ff14 	bl	8009ed4 <__multiply>
 800a0ac:	0031      	movs	r1, r6
 800a0ae:	9001      	str	r0, [sp, #4]
 800a0b0:	0038      	movs	r0, r7
 800a0b2:	f7ff fe47 	bl	8009d44 <_Bfree>
 800a0b6:	9e01      	ldr	r6, [sp, #4]
 800a0b8:	106d      	asrs	r5, r5, #1
 800a0ba:	d00c      	beq.n	800a0d6 <__pow5mult+0xa2>
 800a0bc:	6820      	ldr	r0, [r4, #0]
 800a0be:	2800      	cmp	r0, #0
 800a0c0:	d107      	bne.n	800a0d2 <__pow5mult+0x9e>
 800a0c2:	0022      	movs	r2, r4
 800a0c4:	0021      	movs	r1, r4
 800a0c6:	0038      	movs	r0, r7
 800a0c8:	f7ff ff04 	bl	8009ed4 <__multiply>
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	6020      	str	r0, [r4, #0]
 800a0d0:	6003      	str	r3, [r0, #0]
 800a0d2:	0004      	movs	r4, r0
 800a0d4:	e7e2      	b.n	800a09c <__pow5mult+0x68>
 800a0d6:	0030      	movs	r0, r6
 800a0d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a0da:	46c0      	nop			; (mov r8, r8)
 800a0dc:	0800d858 	.word	0x0800d858
 800a0e0:	0800d68d 	.word	0x0800d68d
 800a0e4:	0800d70d 	.word	0x0800d70d
 800a0e8:	00000271 	.word	0x00000271

0800a0ec <__lshift>:
 800a0ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0ee:	000c      	movs	r4, r1
 800a0f0:	0017      	movs	r7, r2
 800a0f2:	6923      	ldr	r3, [r4, #16]
 800a0f4:	1155      	asrs	r5, r2, #5
 800a0f6:	b087      	sub	sp, #28
 800a0f8:	18eb      	adds	r3, r5, r3
 800a0fa:	9302      	str	r3, [sp, #8]
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	9301      	str	r3, [sp, #4]
 800a100:	6849      	ldr	r1, [r1, #4]
 800a102:	68a3      	ldr	r3, [r4, #8]
 800a104:	9004      	str	r0, [sp, #16]
 800a106:	9a01      	ldr	r2, [sp, #4]
 800a108:	4293      	cmp	r3, r2
 800a10a:	db10      	blt.n	800a12e <__lshift+0x42>
 800a10c:	9804      	ldr	r0, [sp, #16]
 800a10e:	f7ff fdd5 	bl	8009cbc <_Balloc>
 800a112:	2300      	movs	r3, #0
 800a114:	0002      	movs	r2, r0
 800a116:	0006      	movs	r6, r0
 800a118:	0019      	movs	r1, r3
 800a11a:	3214      	adds	r2, #20
 800a11c:	4298      	cmp	r0, r3
 800a11e:	d10c      	bne.n	800a13a <__lshift+0x4e>
 800a120:	31df      	adds	r1, #223	; 0xdf
 800a122:	0032      	movs	r2, r6
 800a124:	4b26      	ldr	r3, [pc, #152]	; (800a1c0 <__lshift+0xd4>)
 800a126:	4827      	ldr	r0, [pc, #156]	; (800a1c4 <__lshift+0xd8>)
 800a128:	31ff      	adds	r1, #255	; 0xff
 800a12a:	f000 fb9d 	bl	800a868 <__assert_func>
 800a12e:	3101      	adds	r1, #1
 800a130:	005b      	lsls	r3, r3, #1
 800a132:	e7e8      	b.n	800a106 <__lshift+0x1a>
 800a134:	0098      	lsls	r0, r3, #2
 800a136:	5011      	str	r1, [r2, r0]
 800a138:	3301      	adds	r3, #1
 800a13a:	42ab      	cmp	r3, r5
 800a13c:	dbfa      	blt.n	800a134 <__lshift+0x48>
 800a13e:	43eb      	mvns	r3, r5
 800a140:	17db      	asrs	r3, r3, #31
 800a142:	401d      	ands	r5, r3
 800a144:	211f      	movs	r1, #31
 800a146:	0023      	movs	r3, r4
 800a148:	0038      	movs	r0, r7
 800a14a:	00ad      	lsls	r5, r5, #2
 800a14c:	1955      	adds	r5, r2, r5
 800a14e:	6922      	ldr	r2, [r4, #16]
 800a150:	3314      	adds	r3, #20
 800a152:	0092      	lsls	r2, r2, #2
 800a154:	4008      	ands	r0, r1
 800a156:	4684      	mov	ip, r0
 800a158:	189a      	adds	r2, r3, r2
 800a15a:	420f      	tst	r7, r1
 800a15c:	d02a      	beq.n	800a1b4 <__lshift+0xc8>
 800a15e:	3101      	adds	r1, #1
 800a160:	1a09      	subs	r1, r1, r0
 800a162:	9105      	str	r1, [sp, #20]
 800a164:	2100      	movs	r1, #0
 800a166:	9503      	str	r5, [sp, #12]
 800a168:	4667      	mov	r7, ip
 800a16a:	6818      	ldr	r0, [r3, #0]
 800a16c:	40b8      	lsls	r0, r7
 800a16e:	4308      	orrs	r0, r1
 800a170:	9903      	ldr	r1, [sp, #12]
 800a172:	c101      	stmia	r1!, {r0}
 800a174:	9103      	str	r1, [sp, #12]
 800a176:	9805      	ldr	r0, [sp, #20]
 800a178:	cb02      	ldmia	r3!, {r1}
 800a17a:	40c1      	lsrs	r1, r0
 800a17c:	429a      	cmp	r2, r3
 800a17e:	d8f3      	bhi.n	800a168 <__lshift+0x7c>
 800a180:	0020      	movs	r0, r4
 800a182:	3015      	adds	r0, #21
 800a184:	2304      	movs	r3, #4
 800a186:	4282      	cmp	r2, r0
 800a188:	d304      	bcc.n	800a194 <__lshift+0xa8>
 800a18a:	1b13      	subs	r3, r2, r4
 800a18c:	3b15      	subs	r3, #21
 800a18e:	089b      	lsrs	r3, r3, #2
 800a190:	3301      	adds	r3, #1
 800a192:	009b      	lsls	r3, r3, #2
 800a194:	50e9      	str	r1, [r5, r3]
 800a196:	2900      	cmp	r1, #0
 800a198:	d002      	beq.n	800a1a0 <__lshift+0xb4>
 800a19a:	9b02      	ldr	r3, [sp, #8]
 800a19c:	3302      	adds	r3, #2
 800a19e:	9301      	str	r3, [sp, #4]
 800a1a0:	9b01      	ldr	r3, [sp, #4]
 800a1a2:	9804      	ldr	r0, [sp, #16]
 800a1a4:	3b01      	subs	r3, #1
 800a1a6:	0021      	movs	r1, r4
 800a1a8:	6133      	str	r3, [r6, #16]
 800a1aa:	f7ff fdcb 	bl	8009d44 <_Bfree>
 800a1ae:	0030      	movs	r0, r6
 800a1b0:	b007      	add	sp, #28
 800a1b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1b4:	cb02      	ldmia	r3!, {r1}
 800a1b6:	c502      	stmia	r5!, {r1}
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d8fb      	bhi.n	800a1b4 <__lshift+0xc8>
 800a1bc:	e7f0      	b.n	800a1a0 <__lshift+0xb4>
 800a1be:	46c0      	nop			; (mov r8, r8)
 800a1c0:	0800d6fc 	.word	0x0800d6fc
 800a1c4:	0800d70d 	.word	0x0800d70d

0800a1c8 <__mcmp>:
 800a1c8:	b530      	push	{r4, r5, lr}
 800a1ca:	690b      	ldr	r3, [r1, #16]
 800a1cc:	6904      	ldr	r4, [r0, #16]
 800a1ce:	0002      	movs	r2, r0
 800a1d0:	1ae0      	subs	r0, r4, r3
 800a1d2:	429c      	cmp	r4, r3
 800a1d4:	d10e      	bne.n	800a1f4 <__mcmp+0x2c>
 800a1d6:	3214      	adds	r2, #20
 800a1d8:	009b      	lsls	r3, r3, #2
 800a1da:	3114      	adds	r1, #20
 800a1dc:	0014      	movs	r4, r2
 800a1de:	18c9      	adds	r1, r1, r3
 800a1e0:	18d2      	adds	r2, r2, r3
 800a1e2:	3a04      	subs	r2, #4
 800a1e4:	3904      	subs	r1, #4
 800a1e6:	6815      	ldr	r5, [r2, #0]
 800a1e8:	680b      	ldr	r3, [r1, #0]
 800a1ea:	429d      	cmp	r5, r3
 800a1ec:	d003      	beq.n	800a1f6 <__mcmp+0x2e>
 800a1ee:	2001      	movs	r0, #1
 800a1f0:	429d      	cmp	r5, r3
 800a1f2:	d303      	bcc.n	800a1fc <__mcmp+0x34>
 800a1f4:	bd30      	pop	{r4, r5, pc}
 800a1f6:	4294      	cmp	r4, r2
 800a1f8:	d3f3      	bcc.n	800a1e2 <__mcmp+0x1a>
 800a1fa:	e7fb      	b.n	800a1f4 <__mcmp+0x2c>
 800a1fc:	4240      	negs	r0, r0
 800a1fe:	e7f9      	b.n	800a1f4 <__mcmp+0x2c>

0800a200 <__mdiff>:
 800a200:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a202:	000e      	movs	r6, r1
 800a204:	0007      	movs	r7, r0
 800a206:	0011      	movs	r1, r2
 800a208:	0030      	movs	r0, r6
 800a20a:	b087      	sub	sp, #28
 800a20c:	0014      	movs	r4, r2
 800a20e:	f7ff ffdb 	bl	800a1c8 <__mcmp>
 800a212:	1e05      	subs	r5, r0, #0
 800a214:	d110      	bne.n	800a238 <__mdiff+0x38>
 800a216:	0001      	movs	r1, r0
 800a218:	0038      	movs	r0, r7
 800a21a:	f7ff fd4f 	bl	8009cbc <_Balloc>
 800a21e:	1e02      	subs	r2, r0, #0
 800a220:	d104      	bne.n	800a22c <__mdiff+0x2c>
 800a222:	4b3f      	ldr	r3, [pc, #252]	; (800a320 <__mdiff+0x120>)
 800a224:	483f      	ldr	r0, [pc, #252]	; (800a324 <__mdiff+0x124>)
 800a226:	4940      	ldr	r1, [pc, #256]	; (800a328 <__mdiff+0x128>)
 800a228:	f000 fb1e 	bl	800a868 <__assert_func>
 800a22c:	2301      	movs	r3, #1
 800a22e:	6145      	str	r5, [r0, #20]
 800a230:	6103      	str	r3, [r0, #16]
 800a232:	0010      	movs	r0, r2
 800a234:	b007      	add	sp, #28
 800a236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a238:	2301      	movs	r3, #1
 800a23a:	9301      	str	r3, [sp, #4]
 800a23c:	2800      	cmp	r0, #0
 800a23e:	db04      	blt.n	800a24a <__mdiff+0x4a>
 800a240:	0023      	movs	r3, r4
 800a242:	0034      	movs	r4, r6
 800a244:	001e      	movs	r6, r3
 800a246:	2300      	movs	r3, #0
 800a248:	9301      	str	r3, [sp, #4]
 800a24a:	0038      	movs	r0, r7
 800a24c:	6861      	ldr	r1, [r4, #4]
 800a24e:	f7ff fd35 	bl	8009cbc <_Balloc>
 800a252:	1e02      	subs	r2, r0, #0
 800a254:	d103      	bne.n	800a25e <__mdiff+0x5e>
 800a256:	4b32      	ldr	r3, [pc, #200]	; (800a320 <__mdiff+0x120>)
 800a258:	4832      	ldr	r0, [pc, #200]	; (800a324 <__mdiff+0x124>)
 800a25a:	4934      	ldr	r1, [pc, #208]	; (800a32c <__mdiff+0x12c>)
 800a25c:	e7e4      	b.n	800a228 <__mdiff+0x28>
 800a25e:	9b01      	ldr	r3, [sp, #4]
 800a260:	2700      	movs	r7, #0
 800a262:	60c3      	str	r3, [r0, #12]
 800a264:	6920      	ldr	r0, [r4, #16]
 800a266:	3414      	adds	r4, #20
 800a268:	0083      	lsls	r3, r0, #2
 800a26a:	18e3      	adds	r3, r4, r3
 800a26c:	0021      	movs	r1, r4
 800a26e:	9401      	str	r4, [sp, #4]
 800a270:	0034      	movs	r4, r6
 800a272:	9302      	str	r3, [sp, #8]
 800a274:	6933      	ldr	r3, [r6, #16]
 800a276:	3414      	adds	r4, #20
 800a278:	009b      	lsls	r3, r3, #2
 800a27a:	18e3      	adds	r3, r4, r3
 800a27c:	9303      	str	r3, [sp, #12]
 800a27e:	0013      	movs	r3, r2
 800a280:	3314      	adds	r3, #20
 800a282:	469c      	mov	ip, r3
 800a284:	9305      	str	r3, [sp, #20]
 800a286:	9104      	str	r1, [sp, #16]
 800a288:	9b04      	ldr	r3, [sp, #16]
 800a28a:	cc02      	ldmia	r4!, {r1}
 800a28c:	cb20      	ldmia	r3!, {r5}
 800a28e:	9304      	str	r3, [sp, #16]
 800a290:	b2ab      	uxth	r3, r5
 800a292:	19df      	adds	r7, r3, r7
 800a294:	b28b      	uxth	r3, r1
 800a296:	1afb      	subs	r3, r7, r3
 800a298:	0c09      	lsrs	r1, r1, #16
 800a29a:	0c2d      	lsrs	r5, r5, #16
 800a29c:	1a6d      	subs	r5, r5, r1
 800a29e:	1419      	asrs	r1, r3, #16
 800a2a0:	1869      	adds	r1, r5, r1
 800a2a2:	b29b      	uxth	r3, r3
 800a2a4:	140f      	asrs	r7, r1, #16
 800a2a6:	0409      	lsls	r1, r1, #16
 800a2a8:	4319      	orrs	r1, r3
 800a2aa:	4663      	mov	r3, ip
 800a2ac:	c302      	stmia	r3!, {r1}
 800a2ae:	469c      	mov	ip, r3
 800a2b0:	9b03      	ldr	r3, [sp, #12]
 800a2b2:	42a3      	cmp	r3, r4
 800a2b4:	d8e8      	bhi.n	800a288 <__mdiff+0x88>
 800a2b6:	0031      	movs	r1, r6
 800a2b8:	9c03      	ldr	r4, [sp, #12]
 800a2ba:	3115      	adds	r1, #21
 800a2bc:	2304      	movs	r3, #4
 800a2be:	428c      	cmp	r4, r1
 800a2c0:	d304      	bcc.n	800a2cc <__mdiff+0xcc>
 800a2c2:	1ba3      	subs	r3, r4, r6
 800a2c4:	3b15      	subs	r3, #21
 800a2c6:	089b      	lsrs	r3, r3, #2
 800a2c8:	3301      	adds	r3, #1
 800a2ca:	009b      	lsls	r3, r3, #2
 800a2cc:	9901      	ldr	r1, [sp, #4]
 800a2ce:	18cd      	adds	r5, r1, r3
 800a2d0:	9905      	ldr	r1, [sp, #20]
 800a2d2:	002e      	movs	r6, r5
 800a2d4:	18cb      	adds	r3, r1, r3
 800a2d6:	469c      	mov	ip, r3
 800a2d8:	9902      	ldr	r1, [sp, #8]
 800a2da:	428e      	cmp	r6, r1
 800a2dc:	d310      	bcc.n	800a300 <__mdiff+0x100>
 800a2de:	9e02      	ldr	r6, [sp, #8]
 800a2e0:	1ee9      	subs	r1, r5, #3
 800a2e2:	2400      	movs	r4, #0
 800a2e4:	428e      	cmp	r6, r1
 800a2e6:	d304      	bcc.n	800a2f2 <__mdiff+0xf2>
 800a2e8:	0031      	movs	r1, r6
 800a2ea:	3103      	adds	r1, #3
 800a2ec:	1b49      	subs	r1, r1, r5
 800a2ee:	0889      	lsrs	r1, r1, #2
 800a2f0:	008c      	lsls	r4, r1, #2
 800a2f2:	191b      	adds	r3, r3, r4
 800a2f4:	3b04      	subs	r3, #4
 800a2f6:	6819      	ldr	r1, [r3, #0]
 800a2f8:	2900      	cmp	r1, #0
 800a2fa:	d00f      	beq.n	800a31c <__mdiff+0x11c>
 800a2fc:	6110      	str	r0, [r2, #16]
 800a2fe:	e798      	b.n	800a232 <__mdiff+0x32>
 800a300:	ce02      	ldmia	r6!, {r1}
 800a302:	b28c      	uxth	r4, r1
 800a304:	19e4      	adds	r4, r4, r7
 800a306:	0c0f      	lsrs	r7, r1, #16
 800a308:	1421      	asrs	r1, r4, #16
 800a30a:	1879      	adds	r1, r7, r1
 800a30c:	b2a4      	uxth	r4, r4
 800a30e:	140f      	asrs	r7, r1, #16
 800a310:	0409      	lsls	r1, r1, #16
 800a312:	4321      	orrs	r1, r4
 800a314:	4664      	mov	r4, ip
 800a316:	c402      	stmia	r4!, {r1}
 800a318:	46a4      	mov	ip, r4
 800a31a:	e7dd      	b.n	800a2d8 <__mdiff+0xd8>
 800a31c:	3801      	subs	r0, #1
 800a31e:	e7e9      	b.n	800a2f4 <__mdiff+0xf4>
 800a320:	0800d6fc 	.word	0x0800d6fc
 800a324:	0800d70d 	.word	0x0800d70d
 800a328:	00000237 	.word	0x00000237
 800a32c:	00000245 	.word	0x00000245

0800a330 <__d2b>:
 800a330:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a332:	2101      	movs	r1, #1
 800a334:	0014      	movs	r4, r2
 800a336:	001d      	movs	r5, r3
 800a338:	9f08      	ldr	r7, [sp, #32]
 800a33a:	f7ff fcbf 	bl	8009cbc <_Balloc>
 800a33e:	1e06      	subs	r6, r0, #0
 800a340:	d105      	bne.n	800a34e <__d2b+0x1e>
 800a342:	0032      	movs	r2, r6
 800a344:	4b24      	ldr	r3, [pc, #144]	; (800a3d8 <__d2b+0xa8>)
 800a346:	4825      	ldr	r0, [pc, #148]	; (800a3dc <__d2b+0xac>)
 800a348:	4925      	ldr	r1, [pc, #148]	; (800a3e0 <__d2b+0xb0>)
 800a34a:	f000 fa8d 	bl	800a868 <__assert_func>
 800a34e:	032b      	lsls	r3, r5, #12
 800a350:	006d      	lsls	r5, r5, #1
 800a352:	0b1b      	lsrs	r3, r3, #12
 800a354:	0d6d      	lsrs	r5, r5, #21
 800a356:	d125      	bne.n	800a3a4 <__d2b+0x74>
 800a358:	9301      	str	r3, [sp, #4]
 800a35a:	2c00      	cmp	r4, #0
 800a35c:	d028      	beq.n	800a3b0 <__d2b+0x80>
 800a35e:	4668      	mov	r0, sp
 800a360:	9400      	str	r4, [sp, #0]
 800a362:	f7ff fd71 	bl	8009e48 <__lo0bits>
 800a366:	9b01      	ldr	r3, [sp, #4]
 800a368:	9900      	ldr	r1, [sp, #0]
 800a36a:	2800      	cmp	r0, #0
 800a36c:	d01e      	beq.n	800a3ac <__d2b+0x7c>
 800a36e:	2220      	movs	r2, #32
 800a370:	001c      	movs	r4, r3
 800a372:	1a12      	subs	r2, r2, r0
 800a374:	4094      	lsls	r4, r2
 800a376:	0022      	movs	r2, r4
 800a378:	40c3      	lsrs	r3, r0
 800a37a:	430a      	orrs	r2, r1
 800a37c:	6172      	str	r2, [r6, #20]
 800a37e:	9301      	str	r3, [sp, #4]
 800a380:	9c01      	ldr	r4, [sp, #4]
 800a382:	61b4      	str	r4, [r6, #24]
 800a384:	1e63      	subs	r3, r4, #1
 800a386:	419c      	sbcs	r4, r3
 800a388:	3401      	adds	r4, #1
 800a38a:	6134      	str	r4, [r6, #16]
 800a38c:	2d00      	cmp	r5, #0
 800a38e:	d017      	beq.n	800a3c0 <__d2b+0x90>
 800a390:	2435      	movs	r4, #53	; 0x35
 800a392:	4b14      	ldr	r3, [pc, #80]	; (800a3e4 <__d2b+0xb4>)
 800a394:	18ed      	adds	r5, r5, r3
 800a396:	182d      	adds	r5, r5, r0
 800a398:	603d      	str	r5, [r7, #0]
 800a39a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a39c:	1a24      	subs	r4, r4, r0
 800a39e:	601c      	str	r4, [r3, #0]
 800a3a0:	0030      	movs	r0, r6
 800a3a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a3a4:	2280      	movs	r2, #128	; 0x80
 800a3a6:	0352      	lsls	r2, r2, #13
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	e7d5      	b.n	800a358 <__d2b+0x28>
 800a3ac:	6171      	str	r1, [r6, #20]
 800a3ae:	e7e7      	b.n	800a380 <__d2b+0x50>
 800a3b0:	a801      	add	r0, sp, #4
 800a3b2:	f7ff fd49 	bl	8009e48 <__lo0bits>
 800a3b6:	9b01      	ldr	r3, [sp, #4]
 800a3b8:	2401      	movs	r4, #1
 800a3ba:	6173      	str	r3, [r6, #20]
 800a3bc:	3020      	adds	r0, #32
 800a3be:	e7e4      	b.n	800a38a <__d2b+0x5a>
 800a3c0:	4b09      	ldr	r3, [pc, #36]	; (800a3e8 <__d2b+0xb8>)
 800a3c2:	18c0      	adds	r0, r0, r3
 800a3c4:	4b09      	ldr	r3, [pc, #36]	; (800a3ec <__d2b+0xbc>)
 800a3c6:	6038      	str	r0, [r7, #0]
 800a3c8:	18e3      	adds	r3, r4, r3
 800a3ca:	009b      	lsls	r3, r3, #2
 800a3cc:	18f3      	adds	r3, r6, r3
 800a3ce:	6958      	ldr	r0, [r3, #20]
 800a3d0:	f7ff fd20 	bl	8009e14 <__hi0bits>
 800a3d4:	0164      	lsls	r4, r4, #5
 800a3d6:	e7e0      	b.n	800a39a <__d2b+0x6a>
 800a3d8:	0800d6fc 	.word	0x0800d6fc
 800a3dc:	0800d70d 	.word	0x0800d70d
 800a3e0:	0000030f 	.word	0x0000030f
 800a3e4:	fffffbcd 	.word	0xfffffbcd
 800a3e8:	fffffbce 	.word	0xfffffbce
 800a3ec:	3fffffff 	.word	0x3fffffff

0800a3f0 <__ssputs_r>:
 800a3f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3f2:	b085      	sub	sp, #20
 800a3f4:	9301      	str	r3, [sp, #4]
 800a3f6:	9203      	str	r2, [sp, #12]
 800a3f8:	688e      	ldr	r6, [r1, #8]
 800a3fa:	9a01      	ldr	r2, [sp, #4]
 800a3fc:	0007      	movs	r7, r0
 800a3fe:	000c      	movs	r4, r1
 800a400:	680b      	ldr	r3, [r1, #0]
 800a402:	4296      	cmp	r6, r2
 800a404:	d831      	bhi.n	800a46a <__ssputs_r+0x7a>
 800a406:	898a      	ldrh	r2, [r1, #12]
 800a408:	2190      	movs	r1, #144	; 0x90
 800a40a:	00c9      	lsls	r1, r1, #3
 800a40c:	420a      	tst	r2, r1
 800a40e:	d029      	beq.n	800a464 <__ssputs_r+0x74>
 800a410:	2003      	movs	r0, #3
 800a412:	6921      	ldr	r1, [r4, #16]
 800a414:	1a5b      	subs	r3, r3, r1
 800a416:	9302      	str	r3, [sp, #8]
 800a418:	6963      	ldr	r3, [r4, #20]
 800a41a:	4343      	muls	r3, r0
 800a41c:	0fdd      	lsrs	r5, r3, #31
 800a41e:	18ed      	adds	r5, r5, r3
 800a420:	9b01      	ldr	r3, [sp, #4]
 800a422:	9802      	ldr	r0, [sp, #8]
 800a424:	3301      	adds	r3, #1
 800a426:	181b      	adds	r3, r3, r0
 800a428:	106d      	asrs	r5, r5, #1
 800a42a:	42ab      	cmp	r3, r5
 800a42c:	d900      	bls.n	800a430 <__ssputs_r+0x40>
 800a42e:	001d      	movs	r5, r3
 800a430:	0552      	lsls	r2, r2, #21
 800a432:	d529      	bpl.n	800a488 <__ssputs_r+0x98>
 800a434:	0029      	movs	r1, r5
 800a436:	0038      	movs	r0, r7
 800a438:	f7ff fbae 	bl	8009b98 <_malloc_r>
 800a43c:	1e06      	subs	r6, r0, #0
 800a43e:	d02d      	beq.n	800a49c <__ssputs_r+0xac>
 800a440:	9a02      	ldr	r2, [sp, #8]
 800a442:	6921      	ldr	r1, [r4, #16]
 800a444:	f7fe fc8c 	bl	8008d60 <memcpy>
 800a448:	89a2      	ldrh	r2, [r4, #12]
 800a44a:	4b19      	ldr	r3, [pc, #100]	; (800a4b0 <__ssputs_r+0xc0>)
 800a44c:	401a      	ands	r2, r3
 800a44e:	2380      	movs	r3, #128	; 0x80
 800a450:	4313      	orrs	r3, r2
 800a452:	81a3      	strh	r3, [r4, #12]
 800a454:	9b02      	ldr	r3, [sp, #8]
 800a456:	6126      	str	r6, [r4, #16]
 800a458:	18f6      	adds	r6, r6, r3
 800a45a:	6026      	str	r6, [r4, #0]
 800a45c:	6165      	str	r5, [r4, #20]
 800a45e:	9e01      	ldr	r6, [sp, #4]
 800a460:	1aed      	subs	r5, r5, r3
 800a462:	60a5      	str	r5, [r4, #8]
 800a464:	9b01      	ldr	r3, [sp, #4]
 800a466:	429e      	cmp	r6, r3
 800a468:	d900      	bls.n	800a46c <__ssputs_r+0x7c>
 800a46a:	9e01      	ldr	r6, [sp, #4]
 800a46c:	0032      	movs	r2, r6
 800a46e:	9903      	ldr	r1, [sp, #12]
 800a470:	6820      	ldr	r0, [r4, #0]
 800a472:	f000 f9d4 	bl	800a81e <memmove>
 800a476:	2000      	movs	r0, #0
 800a478:	68a3      	ldr	r3, [r4, #8]
 800a47a:	1b9b      	subs	r3, r3, r6
 800a47c:	60a3      	str	r3, [r4, #8]
 800a47e:	6823      	ldr	r3, [r4, #0]
 800a480:	199b      	adds	r3, r3, r6
 800a482:	6023      	str	r3, [r4, #0]
 800a484:	b005      	add	sp, #20
 800a486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a488:	002a      	movs	r2, r5
 800a48a:	0038      	movs	r0, r7
 800a48c:	f000 fa49 	bl	800a922 <_realloc_r>
 800a490:	1e06      	subs	r6, r0, #0
 800a492:	d1df      	bne.n	800a454 <__ssputs_r+0x64>
 800a494:	0038      	movs	r0, r7
 800a496:	6921      	ldr	r1, [r4, #16]
 800a498:	f7ff fb08 	bl	8009aac <_free_r>
 800a49c:	230c      	movs	r3, #12
 800a49e:	2001      	movs	r0, #1
 800a4a0:	603b      	str	r3, [r7, #0]
 800a4a2:	89a2      	ldrh	r2, [r4, #12]
 800a4a4:	3334      	adds	r3, #52	; 0x34
 800a4a6:	4313      	orrs	r3, r2
 800a4a8:	81a3      	strh	r3, [r4, #12]
 800a4aa:	4240      	negs	r0, r0
 800a4ac:	e7ea      	b.n	800a484 <__ssputs_r+0x94>
 800a4ae:	46c0      	nop			; (mov r8, r8)
 800a4b0:	fffffb7f 	.word	0xfffffb7f

0800a4b4 <_svfiprintf_r>:
 800a4b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4b6:	b0a1      	sub	sp, #132	; 0x84
 800a4b8:	9003      	str	r0, [sp, #12]
 800a4ba:	001d      	movs	r5, r3
 800a4bc:	898b      	ldrh	r3, [r1, #12]
 800a4be:	000f      	movs	r7, r1
 800a4c0:	0016      	movs	r6, r2
 800a4c2:	061b      	lsls	r3, r3, #24
 800a4c4:	d511      	bpl.n	800a4ea <_svfiprintf_r+0x36>
 800a4c6:	690b      	ldr	r3, [r1, #16]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d10e      	bne.n	800a4ea <_svfiprintf_r+0x36>
 800a4cc:	2140      	movs	r1, #64	; 0x40
 800a4ce:	f7ff fb63 	bl	8009b98 <_malloc_r>
 800a4d2:	6038      	str	r0, [r7, #0]
 800a4d4:	6138      	str	r0, [r7, #16]
 800a4d6:	2800      	cmp	r0, #0
 800a4d8:	d105      	bne.n	800a4e6 <_svfiprintf_r+0x32>
 800a4da:	230c      	movs	r3, #12
 800a4dc:	9a03      	ldr	r2, [sp, #12]
 800a4de:	3801      	subs	r0, #1
 800a4e0:	6013      	str	r3, [r2, #0]
 800a4e2:	b021      	add	sp, #132	; 0x84
 800a4e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4e6:	2340      	movs	r3, #64	; 0x40
 800a4e8:	617b      	str	r3, [r7, #20]
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	ac08      	add	r4, sp, #32
 800a4ee:	6163      	str	r3, [r4, #20]
 800a4f0:	3320      	adds	r3, #32
 800a4f2:	7663      	strb	r3, [r4, #25]
 800a4f4:	3310      	adds	r3, #16
 800a4f6:	76a3      	strb	r3, [r4, #26]
 800a4f8:	9507      	str	r5, [sp, #28]
 800a4fa:	0035      	movs	r5, r6
 800a4fc:	782b      	ldrb	r3, [r5, #0]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d001      	beq.n	800a506 <_svfiprintf_r+0x52>
 800a502:	2b25      	cmp	r3, #37	; 0x25
 800a504:	d148      	bne.n	800a598 <_svfiprintf_r+0xe4>
 800a506:	1bab      	subs	r3, r5, r6
 800a508:	9305      	str	r3, [sp, #20]
 800a50a:	42b5      	cmp	r5, r6
 800a50c:	d00b      	beq.n	800a526 <_svfiprintf_r+0x72>
 800a50e:	0032      	movs	r2, r6
 800a510:	0039      	movs	r1, r7
 800a512:	9803      	ldr	r0, [sp, #12]
 800a514:	f7ff ff6c 	bl	800a3f0 <__ssputs_r>
 800a518:	3001      	adds	r0, #1
 800a51a:	d100      	bne.n	800a51e <_svfiprintf_r+0x6a>
 800a51c:	e0af      	b.n	800a67e <_svfiprintf_r+0x1ca>
 800a51e:	6963      	ldr	r3, [r4, #20]
 800a520:	9a05      	ldr	r2, [sp, #20]
 800a522:	189b      	adds	r3, r3, r2
 800a524:	6163      	str	r3, [r4, #20]
 800a526:	782b      	ldrb	r3, [r5, #0]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d100      	bne.n	800a52e <_svfiprintf_r+0x7a>
 800a52c:	e0a7      	b.n	800a67e <_svfiprintf_r+0x1ca>
 800a52e:	2201      	movs	r2, #1
 800a530:	2300      	movs	r3, #0
 800a532:	4252      	negs	r2, r2
 800a534:	6062      	str	r2, [r4, #4]
 800a536:	a904      	add	r1, sp, #16
 800a538:	3254      	adds	r2, #84	; 0x54
 800a53a:	1852      	adds	r2, r2, r1
 800a53c:	1c6e      	adds	r6, r5, #1
 800a53e:	6023      	str	r3, [r4, #0]
 800a540:	60e3      	str	r3, [r4, #12]
 800a542:	60a3      	str	r3, [r4, #8]
 800a544:	7013      	strb	r3, [r2, #0]
 800a546:	65a3      	str	r3, [r4, #88]	; 0x58
 800a548:	4b55      	ldr	r3, [pc, #340]	; (800a6a0 <_svfiprintf_r+0x1ec>)
 800a54a:	2205      	movs	r2, #5
 800a54c:	0018      	movs	r0, r3
 800a54e:	7831      	ldrb	r1, [r6, #0]
 800a550:	9305      	str	r3, [sp, #20]
 800a552:	f7fe fbfa 	bl	8008d4a <memchr>
 800a556:	1c75      	adds	r5, r6, #1
 800a558:	2800      	cmp	r0, #0
 800a55a:	d11f      	bne.n	800a59c <_svfiprintf_r+0xe8>
 800a55c:	6822      	ldr	r2, [r4, #0]
 800a55e:	06d3      	lsls	r3, r2, #27
 800a560:	d504      	bpl.n	800a56c <_svfiprintf_r+0xb8>
 800a562:	2353      	movs	r3, #83	; 0x53
 800a564:	a904      	add	r1, sp, #16
 800a566:	185b      	adds	r3, r3, r1
 800a568:	2120      	movs	r1, #32
 800a56a:	7019      	strb	r1, [r3, #0]
 800a56c:	0713      	lsls	r3, r2, #28
 800a56e:	d504      	bpl.n	800a57a <_svfiprintf_r+0xc6>
 800a570:	2353      	movs	r3, #83	; 0x53
 800a572:	a904      	add	r1, sp, #16
 800a574:	185b      	adds	r3, r3, r1
 800a576:	212b      	movs	r1, #43	; 0x2b
 800a578:	7019      	strb	r1, [r3, #0]
 800a57a:	7833      	ldrb	r3, [r6, #0]
 800a57c:	2b2a      	cmp	r3, #42	; 0x2a
 800a57e:	d016      	beq.n	800a5ae <_svfiprintf_r+0xfa>
 800a580:	0035      	movs	r5, r6
 800a582:	2100      	movs	r1, #0
 800a584:	200a      	movs	r0, #10
 800a586:	68e3      	ldr	r3, [r4, #12]
 800a588:	782a      	ldrb	r2, [r5, #0]
 800a58a:	1c6e      	adds	r6, r5, #1
 800a58c:	3a30      	subs	r2, #48	; 0x30
 800a58e:	2a09      	cmp	r2, #9
 800a590:	d94e      	bls.n	800a630 <_svfiprintf_r+0x17c>
 800a592:	2900      	cmp	r1, #0
 800a594:	d111      	bne.n	800a5ba <_svfiprintf_r+0x106>
 800a596:	e017      	b.n	800a5c8 <_svfiprintf_r+0x114>
 800a598:	3501      	adds	r5, #1
 800a59a:	e7af      	b.n	800a4fc <_svfiprintf_r+0x48>
 800a59c:	9b05      	ldr	r3, [sp, #20]
 800a59e:	6822      	ldr	r2, [r4, #0]
 800a5a0:	1ac0      	subs	r0, r0, r3
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	4083      	lsls	r3, r0
 800a5a6:	4313      	orrs	r3, r2
 800a5a8:	002e      	movs	r6, r5
 800a5aa:	6023      	str	r3, [r4, #0]
 800a5ac:	e7cc      	b.n	800a548 <_svfiprintf_r+0x94>
 800a5ae:	9b07      	ldr	r3, [sp, #28]
 800a5b0:	1d19      	adds	r1, r3, #4
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	9107      	str	r1, [sp, #28]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	db01      	blt.n	800a5be <_svfiprintf_r+0x10a>
 800a5ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800a5bc:	e004      	b.n	800a5c8 <_svfiprintf_r+0x114>
 800a5be:	425b      	negs	r3, r3
 800a5c0:	60e3      	str	r3, [r4, #12]
 800a5c2:	2302      	movs	r3, #2
 800a5c4:	4313      	orrs	r3, r2
 800a5c6:	6023      	str	r3, [r4, #0]
 800a5c8:	782b      	ldrb	r3, [r5, #0]
 800a5ca:	2b2e      	cmp	r3, #46	; 0x2e
 800a5cc:	d10a      	bne.n	800a5e4 <_svfiprintf_r+0x130>
 800a5ce:	786b      	ldrb	r3, [r5, #1]
 800a5d0:	2b2a      	cmp	r3, #42	; 0x2a
 800a5d2:	d135      	bne.n	800a640 <_svfiprintf_r+0x18c>
 800a5d4:	9b07      	ldr	r3, [sp, #28]
 800a5d6:	3502      	adds	r5, #2
 800a5d8:	1d1a      	adds	r2, r3, #4
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	9207      	str	r2, [sp, #28]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	db2b      	blt.n	800a63a <_svfiprintf_r+0x186>
 800a5e2:	9309      	str	r3, [sp, #36]	; 0x24
 800a5e4:	4e2f      	ldr	r6, [pc, #188]	; (800a6a4 <_svfiprintf_r+0x1f0>)
 800a5e6:	2203      	movs	r2, #3
 800a5e8:	0030      	movs	r0, r6
 800a5ea:	7829      	ldrb	r1, [r5, #0]
 800a5ec:	f7fe fbad 	bl	8008d4a <memchr>
 800a5f0:	2800      	cmp	r0, #0
 800a5f2:	d006      	beq.n	800a602 <_svfiprintf_r+0x14e>
 800a5f4:	2340      	movs	r3, #64	; 0x40
 800a5f6:	1b80      	subs	r0, r0, r6
 800a5f8:	4083      	lsls	r3, r0
 800a5fa:	6822      	ldr	r2, [r4, #0]
 800a5fc:	3501      	adds	r5, #1
 800a5fe:	4313      	orrs	r3, r2
 800a600:	6023      	str	r3, [r4, #0]
 800a602:	7829      	ldrb	r1, [r5, #0]
 800a604:	2206      	movs	r2, #6
 800a606:	4828      	ldr	r0, [pc, #160]	; (800a6a8 <_svfiprintf_r+0x1f4>)
 800a608:	1c6e      	adds	r6, r5, #1
 800a60a:	7621      	strb	r1, [r4, #24]
 800a60c:	f7fe fb9d 	bl	8008d4a <memchr>
 800a610:	2800      	cmp	r0, #0
 800a612:	d03c      	beq.n	800a68e <_svfiprintf_r+0x1da>
 800a614:	4b25      	ldr	r3, [pc, #148]	; (800a6ac <_svfiprintf_r+0x1f8>)
 800a616:	2b00      	cmp	r3, #0
 800a618:	d125      	bne.n	800a666 <_svfiprintf_r+0x1b2>
 800a61a:	2207      	movs	r2, #7
 800a61c:	9b07      	ldr	r3, [sp, #28]
 800a61e:	3307      	adds	r3, #7
 800a620:	4393      	bics	r3, r2
 800a622:	3308      	adds	r3, #8
 800a624:	9307      	str	r3, [sp, #28]
 800a626:	6963      	ldr	r3, [r4, #20]
 800a628:	9a04      	ldr	r2, [sp, #16]
 800a62a:	189b      	adds	r3, r3, r2
 800a62c:	6163      	str	r3, [r4, #20]
 800a62e:	e764      	b.n	800a4fa <_svfiprintf_r+0x46>
 800a630:	4343      	muls	r3, r0
 800a632:	0035      	movs	r5, r6
 800a634:	2101      	movs	r1, #1
 800a636:	189b      	adds	r3, r3, r2
 800a638:	e7a6      	b.n	800a588 <_svfiprintf_r+0xd4>
 800a63a:	2301      	movs	r3, #1
 800a63c:	425b      	negs	r3, r3
 800a63e:	e7d0      	b.n	800a5e2 <_svfiprintf_r+0x12e>
 800a640:	2300      	movs	r3, #0
 800a642:	200a      	movs	r0, #10
 800a644:	001a      	movs	r2, r3
 800a646:	3501      	adds	r5, #1
 800a648:	6063      	str	r3, [r4, #4]
 800a64a:	7829      	ldrb	r1, [r5, #0]
 800a64c:	1c6e      	adds	r6, r5, #1
 800a64e:	3930      	subs	r1, #48	; 0x30
 800a650:	2909      	cmp	r1, #9
 800a652:	d903      	bls.n	800a65c <_svfiprintf_r+0x1a8>
 800a654:	2b00      	cmp	r3, #0
 800a656:	d0c5      	beq.n	800a5e4 <_svfiprintf_r+0x130>
 800a658:	9209      	str	r2, [sp, #36]	; 0x24
 800a65a:	e7c3      	b.n	800a5e4 <_svfiprintf_r+0x130>
 800a65c:	4342      	muls	r2, r0
 800a65e:	0035      	movs	r5, r6
 800a660:	2301      	movs	r3, #1
 800a662:	1852      	adds	r2, r2, r1
 800a664:	e7f1      	b.n	800a64a <_svfiprintf_r+0x196>
 800a666:	aa07      	add	r2, sp, #28
 800a668:	9200      	str	r2, [sp, #0]
 800a66a:	0021      	movs	r1, r4
 800a66c:	003a      	movs	r2, r7
 800a66e:	4b10      	ldr	r3, [pc, #64]	; (800a6b0 <_svfiprintf_r+0x1fc>)
 800a670:	9803      	ldr	r0, [sp, #12]
 800a672:	f7fd fddd 	bl	8008230 <_printf_float>
 800a676:	9004      	str	r0, [sp, #16]
 800a678:	9b04      	ldr	r3, [sp, #16]
 800a67a:	3301      	adds	r3, #1
 800a67c:	d1d3      	bne.n	800a626 <_svfiprintf_r+0x172>
 800a67e:	89bb      	ldrh	r3, [r7, #12]
 800a680:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a682:	065b      	lsls	r3, r3, #25
 800a684:	d400      	bmi.n	800a688 <_svfiprintf_r+0x1d4>
 800a686:	e72c      	b.n	800a4e2 <_svfiprintf_r+0x2e>
 800a688:	2001      	movs	r0, #1
 800a68a:	4240      	negs	r0, r0
 800a68c:	e729      	b.n	800a4e2 <_svfiprintf_r+0x2e>
 800a68e:	aa07      	add	r2, sp, #28
 800a690:	9200      	str	r2, [sp, #0]
 800a692:	0021      	movs	r1, r4
 800a694:	003a      	movs	r2, r7
 800a696:	4b06      	ldr	r3, [pc, #24]	; (800a6b0 <_svfiprintf_r+0x1fc>)
 800a698:	9803      	ldr	r0, [sp, #12]
 800a69a:	f7fe f88f 	bl	80087bc <_printf_i>
 800a69e:	e7ea      	b.n	800a676 <_svfiprintf_r+0x1c2>
 800a6a0:	0800d864 	.word	0x0800d864
 800a6a4:	0800d86a 	.word	0x0800d86a
 800a6a8:	0800d86e 	.word	0x0800d86e
 800a6ac:	08008231 	.word	0x08008231
 800a6b0:	0800a3f1 	.word	0x0800a3f1

0800a6b4 <__sflush_r>:
 800a6b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6b6:	898b      	ldrh	r3, [r1, #12]
 800a6b8:	0005      	movs	r5, r0
 800a6ba:	000c      	movs	r4, r1
 800a6bc:	071a      	lsls	r2, r3, #28
 800a6be:	d45c      	bmi.n	800a77a <__sflush_r+0xc6>
 800a6c0:	684a      	ldr	r2, [r1, #4]
 800a6c2:	2a00      	cmp	r2, #0
 800a6c4:	dc04      	bgt.n	800a6d0 <__sflush_r+0x1c>
 800a6c6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800a6c8:	2a00      	cmp	r2, #0
 800a6ca:	dc01      	bgt.n	800a6d0 <__sflush_r+0x1c>
 800a6cc:	2000      	movs	r0, #0
 800a6ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a6d0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a6d2:	2f00      	cmp	r7, #0
 800a6d4:	d0fa      	beq.n	800a6cc <__sflush_r+0x18>
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	2080      	movs	r0, #128	; 0x80
 800a6da:	682e      	ldr	r6, [r5, #0]
 800a6dc:	602a      	str	r2, [r5, #0]
 800a6de:	001a      	movs	r2, r3
 800a6e0:	0140      	lsls	r0, r0, #5
 800a6e2:	6a21      	ldr	r1, [r4, #32]
 800a6e4:	4002      	ands	r2, r0
 800a6e6:	4203      	tst	r3, r0
 800a6e8:	d034      	beq.n	800a754 <__sflush_r+0xa0>
 800a6ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a6ec:	89a3      	ldrh	r3, [r4, #12]
 800a6ee:	075b      	lsls	r3, r3, #29
 800a6f0:	d506      	bpl.n	800a700 <__sflush_r+0x4c>
 800a6f2:	6863      	ldr	r3, [r4, #4]
 800a6f4:	1ac0      	subs	r0, r0, r3
 800a6f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d001      	beq.n	800a700 <__sflush_r+0x4c>
 800a6fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a6fe:	1ac0      	subs	r0, r0, r3
 800a700:	0002      	movs	r2, r0
 800a702:	2300      	movs	r3, #0
 800a704:	0028      	movs	r0, r5
 800a706:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a708:	6a21      	ldr	r1, [r4, #32]
 800a70a:	47b8      	blx	r7
 800a70c:	89a2      	ldrh	r2, [r4, #12]
 800a70e:	1c43      	adds	r3, r0, #1
 800a710:	d106      	bne.n	800a720 <__sflush_r+0x6c>
 800a712:	6829      	ldr	r1, [r5, #0]
 800a714:	291d      	cmp	r1, #29
 800a716:	d82c      	bhi.n	800a772 <__sflush_r+0xbe>
 800a718:	4b2a      	ldr	r3, [pc, #168]	; (800a7c4 <__sflush_r+0x110>)
 800a71a:	410b      	asrs	r3, r1
 800a71c:	07db      	lsls	r3, r3, #31
 800a71e:	d428      	bmi.n	800a772 <__sflush_r+0xbe>
 800a720:	2300      	movs	r3, #0
 800a722:	6063      	str	r3, [r4, #4]
 800a724:	6923      	ldr	r3, [r4, #16]
 800a726:	6023      	str	r3, [r4, #0]
 800a728:	04d2      	lsls	r2, r2, #19
 800a72a:	d505      	bpl.n	800a738 <__sflush_r+0x84>
 800a72c:	1c43      	adds	r3, r0, #1
 800a72e:	d102      	bne.n	800a736 <__sflush_r+0x82>
 800a730:	682b      	ldr	r3, [r5, #0]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d100      	bne.n	800a738 <__sflush_r+0x84>
 800a736:	6560      	str	r0, [r4, #84]	; 0x54
 800a738:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a73a:	602e      	str	r6, [r5, #0]
 800a73c:	2900      	cmp	r1, #0
 800a73e:	d0c5      	beq.n	800a6cc <__sflush_r+0x18>
 800a740:	0023      	movs	r3, r4
 800a742:	3344      	adds	r3, #68	; 0x44
 800a744:	4299      	cmp	r1, r3
 800a746:	d002      	beq.n	800a74e <__sflush_r+0x9a>
 800a748:	0028      	movs	r0, r5
 800a74a:	f7ff f9af 	bl	8009aac <_free_r>
 800a74e:	2000      	movs	r0, #0
 800a750:	6360      	str	r0, [r4, #52]	; 0x34
 800a752:	e7bc      	b.n	800a6ce <__sflush_r+0x1a>
 800a754:	2301      	movs	r3, #1
 800a756:	0028      	movs	r0, r5
 800a758:	47b8      	blx	r7
 800a75a:	1c43      	adds	r3, r0, #1
 800a75c:	d1c6      	bne.n	800a6ec <__sflush_r+0x38>
 800a75e:	682b      	ldr	r3, [r5, #0]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d0c3      	beq.n	800a6ec <__sflush_r+0x38>
 800a764:	2b1d      	cmp	r3, #29
 800a766:	d001      	beq.n	800a76c <__sflush_r+0xb8>
 800a768:	2b16      	cmp	r3, #22
 800a76a:	d101      	bne.n	800a770 <__sflush_r+0xbc>
 800a76c:	602e      	str	r6, [r5, #0]
 800a76e:	e7ad      	b.n	800a6cc <__sflush_r+0x18>
 800a770:	89a2      	ldrh	r2, [r4, #12]
 800a772:	2340      	movs	r3, #64	; 0x40
 800a774:	4313      	orrs	r3, r2
 800a776:	81a3      	strh	r3, [r4, #12]
 800a778:	e7a9      	b.n	800a6ce <__sflush_r+0x1a>
 800a77a:	690e      	ldr	r6, [r1, #16]
 800a77c:	2e00      	cmp	r6, #0
 800a77e:	d0a5      	beq.n	800a6cc <__sflush_r+0x18>
 800a780:	680f      	ldr	r7, [r1, #0]
 800a782:	600e      	str	r6, [r1, #0]
 800a784:	1bba      	subs	r2, r7, r6
 800a786:	9201      	str	r2, [sp, #4]
 800a788:	2200      	movs	r2, #0
 800a78a:	079b      	lsls	r3, r3, #30
 800a78c:	d100      	bne.n	800a790 <__sflush_r+0xdc>
 800a78e:	694a      	ldr	r2, [r1, #20]
 800a790:	60a2      	str	r2, [r4, #8]
 800a792:	9b01      	ldr	r3, [sp, #4]
 800a794:	2b00      	cmp	r3, #0
 800a796:	dd99      	ble.n	800a6cc <__sflush_r+0x18>
 800a798:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a79a:	0032      	movs	r2, r6
 800a79c:	001f      	movs	r7, r3
 800a79e:	0028      	movs	r0, r5
 800a7a0:	9b01      	ldr	r3, [sp, #4]
 800a7a2:	6a21      	ldr	r1, [r4, #32]
 800a7a4:	47b8      	blx	r7
 800a7a6:	2800      	cmp	r0, #0
 800a7a8:	dc06      	bgt.n	800a7b8 <__sflush_r+0x104>
 800a7aa:	2340      	movs	r3, #64	; 0x40
 800a7ac:	2001      	movs	r0, #1
 800a7ae:	89a2      	ldrh	r2, [r4, #12]
 800a7b0:	4240      	negs	r0, r0
 800a7b2:	4313      	orrs	r3, r2
 800a7b4:	81a3      	strh	r3, [r4, #12]
 800a7b6:	e78a      	b.n	800a6ce <__sflush_r+0x1a>
 800a7b8:	9b01      	ldr	r3, [sp, #4]
 800a7ba:	1836      	adds	r6, r6, r0
 800a7bc:	1a1b      	subs	r3, r3, r0
 800a7be:	9301      	str	r3, [sp, #4]
 800a7c0:	e7e7      	b.n	800a792 <__sflush_r+0xde>
 800a7c2:	46c0      	nop			; (mov r8, r8)
 800a7c4:	dfbffffe 	.word	0xdfbffffe

0800a7c8 <_fflush_r>:
 800a7c8:	690b      	ldr	r3, [r1, #16]
 800a7ca:	b570      	push	{r4, r5, r6, lr}
 800a7cc:	0005      	movs	r5, r0
 800a7ce:	000c      	movs	r4, r1
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d102      	bne.n	800a7da <_fflush_r+0x12>
 800a7d4:	2500      	movs	r5, #0
 800a7d6:	0028      	movs	r0, r5
 800a7d8:	bd70      	pop	{r4, r5, r6, pc}
 800a7da:	2800      	cmp	r0, #0
 800a7dc:	d004      	beq.n	800a7e8 <_fflush_r+0x20>
 800a7de:	6a03      	ldr	r3, [r0, #32]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d101      	bne.n	800a7e8 <_fflush_r+0x20>
 800a7e4:	f7fe f98a 	bl	8008afc <__sinit>
 800a7e8:	220c      	movs	r2, #12
 800a7ea:	5ea3      	ldrsh	r3, [r4, r2]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d0f1      	beq.n	800a7d4 <_fflush_r+0xc>
 800a7f0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a7f2:	07d2      	lsls	r2, r2, #31
 800a7f4:	d404      	bmi.n	800a800 <_fflush_r+0x38>
 800a7f6:	059b      	lsls	r3, r3, #22
 800a7f8:	d402      	bmi.n	800a800 <_fflush_r+0x38>
 800a7fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a7fc:	f7fe faa3 	bl	8008d46 <__retarget_lock_acquire_recursive>
 800a800:	0028      	movs	r0, r5
 800a802:	0021      	movs	r1, r4
 800a804:	f7ff ff56 	bl	800a6b4 <__sflush_r>
 800a808:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a80a:	0005      	movs	r5, r0
 800a80c:	07db      	lsls	r3, r3, #31
 800a80e:	d4e2      	bmi.n	800a7d6 <_fflush_r+0xe>
 800a810:	89a3      	ldrh	r3, [r4, #12]
 800a812:	059b      	lsls	r3, r3, #22
 800a814:	d4df      	bmi.n	800a7d6 <_fflush_r+0xe>
 800a816:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a818:	f7fe fa96 	bl	8008d48 <__retarget_lock_release_recursive>
 800a81c:	e7db      	b.n	800a7d6 <_fflush_r+0xe>

0800a81e <memmove>:
 800a81e:	b510      	push	{r4, lr}
 800a820:	4288      	cmp	r0, r1
 800a822:	d902      	bls.n	800a82a <memmove+0xc>
 800a824:	188b      	adds	r3, r1, r2
 800a826:	4298      	cmp	r0, r3
 800a828:	d303      	bcc.n	800a832 <memmove+0x14>
 800a82a:	2300      	movs	r3, #0
 800a82c:	e007      	b.n	800a83e <memmove+0x20>
 800a82e:	5c8b      	ldrb	r3, [r1, r2]
 800a830:	5483      	strb	r3, [r0, r2]
 800a832:	3a01      	subs	r2, #1
 800a834:	d2fb      	bcs.n	800a82e <memmove+0x10>
 800a836:	bd10      	pop	{r4, pc}
 800a838:	5ccc      	ldrb	r4, [r1, r3]
 800a83a:	54c4      	strb	r4, [r0, r3]
 800a83c:	3301      	adds	r3, #1
 800a83e:	429a      	cmp	r2, r3
 800a840:	d1fa      	bne.n	800a838 <memmove+0x1a>
 800a842:	e7f8      	b.n	800a836 <memmove+0x18>

0800a844 <_sbrk_r>:
 800a844:	2300      	movs	r3, #0
 800a846:	b570      	push	{r4, r5, r6, lr}
 800a848:	4d06      	ldr	r5, [pc, #24]	; (800a864 <_sbrk_r+0x20>)
 800a84a:	0004      	movs	r4, r0
 800a84c:	0008      	movs	r0, r1
 800a84e:	602b      	str	r3, [r5, #0]
 800a850:	f7fa fc98 	bl	8005184 <_sbrk>
 800a854:	1c43      	adds	r3, r0, #1
 800a856:	d103      	bne.n	800a860 <_sbrk_r+0x1c>
 800a858:	682b      	ldr	r3, [r5, #0]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d000      	beq.n	800a860 <_sbrk_r+0x1c>
 800a85e:	6023      	str	r3, [r4, #0]
 800a860:	bd70      	pop	{r4, r5, r6, pc}
 800a862:	46c0      	nop			; (mov r8, r8)
 800a864:	20000a74 	.word	0x20000a74

0800a868 <__assert_func>:
 800a868:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a86a:	0014      	movs	r4, r2
 800a86c:	001a      	movs	r2, r3
 800a86e:	4b09      	ldr	r3, [pc, #36]	; (800a894 <__assert_func+0x2c>)
 800a870:	0005      	movs	r5, r0
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	000e      	movs	r6, r1
 800a876:	68d8      	ldr	r0, [r3, #12]
 800a878:	4b07      	ldr	r3, [pc, #28]	; (800a898 <__assert_func+0x30>)
 800a87a:	2c00      	cmp	r4, #0
 800a87c:	d101      	bne.n	800a882 <__assert_func+0x1a>
 800a87e:	4b07      	ldr	r3, [pc, #28]	; (800a89c <__assert_func+0x34>)
 800a880:	001c      	movs	r4, r3
 800a882:	4907      	ldr	r1, [pc, #28]	; (800a8a0 <__assert_func+0x38>)
 800a884:	9301      	str	r3, [sp, #4]
 800a886:	9402      	str	r4, [sp, #8]
 800a888:	002b      	movs	r3, r5
 800a88a:	9600      	str	r6, [sp, #0]
 800a88c:	f000 f886 	bl	800a99c <fiprintf>
 800a890:	f000 f894 	bl	800a9bc <abort>
 800a894:	20000080 	.word	0x20000080
 800a898:	0800d87f 	.word	0x0800d87f
 800a89c:	0800d8ba 	.word	0x0800d8ba
 800a8a0:	0800d88c 	.word	0x0800d88c

0800a8a4 <_calloc_r>:
 800a8a4:	b570      	push	{r4, r5, r6, lr}
 800a8a6:	0c0b      	lsrs	r3, r1, #16
 800a8a8:	0c15      	lsrs	r5, r2, #16
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d11e      	bne.n	800a8ec <_calloc_r+0x48>
 800a8ae:	2d00      	cmp	r5, #0
 800a8b0:	d10c      	bne.n	800a8cc <_calloc_r+0x28>
 800a8b2:	b289      	uxth	r1, r1
 800a8b4:	b294      	uxth	r4, r2
 800a8b6:	434c      	muls	r4, r1
 800a8b8:	0021      	movs	r1, r4
 800a8ba:	f7ff f96d 	bl	8009b98 <_malloc_r>
 800a8be:	1e05      	subs	r5, r0, #0
 800a8c0:	d01b      	beq.n	800a8fa <_calloc_r+0x56>
 800a8c2:	0022      	movs	r2, r4
 800a8c4:	2100      	movs	r1, #0
 800a8c6:	f7fe f9b9 	bl	8008c3c <memset>
 800a8ca:	e016      	b.n	800a8fa <_calloc_r+0x56>
 800a8cc:	1c2b      	adds	r3, r5, #0
 800a8ce:	1c0c      	adds	r4, r1, #0
 800a8d0:	b289      	uxth	r1, r1
 800a8d2:	b292      	uxth	r2, r2
 800a8d4:	434a      	muls	r2, r1
 800a8d6:	b2a1      	uxth	r1, r4
 800a8d8:	b29c      	uxth	r4, r3
 800a8da:	434c      	muls	r4, r1
 800a8dc:	0c13      	lsrs	r3, r2, #16
 800a8de:	18e4      	adds	r4, r4, r3
 800a8e0:	0c23      	lsrs	r3, r4, #16
 800a8e2:	d107      	bne.n	800a8f4 <_calloc_r+0x50>
 800a8e4:	0424      	lsls	r4, r4, #16
 800a8e6:	b292      	uxth	r2, r2
 800a8e8:	4314      	orrs	r4, r2
 800a8ea:	e7e5      	b.n	800a8b8 <_calloc_r+0x14>
 800a8ec:	2d00      	cmp	r5, #0
 800a8ee:	d101      	bne.n	800a8f4 <_calloc_r+0x50>
 800a8f0:	1c14      	adds	r4, r2, #0
 800a8f2:	e7ed      	b.n	800a8d0 <_calloc_r+0x2c>
 800a8f4:	230c      	movs	r3, #12
 800a8f6:	2500      	movs	r5, #0
 800a8f8:	6003      	str	r3, [r0, #0]
 800a8fa:	0028      	movs	r0, r5
 800a8fc:	bd70      	pop	{r4, r5, r6, pc}

0800a8fe <__ascii_mbtowc>:
 800a8fe:	b082      	sub	sp, #8
 800a900:	2900      	cmp	r1, #0
 800a902:	d100      	bne.n	800a906 <__ascii_mbtowc+0x8>
 800a904:	a901      	add	r1, sp, #4
 800a906:	1e10      	subs	r0, r2, #0
 800a908:	d006      	beq.n	800a918 <__ascii_mbtowc+0x1a>
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d006      	beq.n	800a91c <__ascii_mbtowc+0x1e>
 800a90e:	7813      	ldrb	r3, [r2, #0]
 800a910:	600b      	str	r3, [r1, #0]
 800a912:	7810      	ldrb	r0, [r2, #0]
 800a914:	1e43      	subs	r3, r0, #1
 800a916:	4198      	sbcs	r0, r3
 800a918:	b002      	add	sp, #8
 800a91a:	4770      	bx	lr
 800a91c:	2002      	movs	r0, #2
 800a91e:	4240      	negs	r0, r0
 800a920:	e7fa      	b.n	800a918 <__ascii_mbtowc+0x1a>

0800a922 <_realloc_r>:
 800a922:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a924:	0007      	movs	r7, r0
 800a926:	000e      	movs	r6, r1
 800a928:	0014      	movs	r4, r2
 800a92a:	2900      	cmp	r1, #0
 800a92c:	d105      	bne.n	800a93a <_realloc_r+0x18>
 800a92e:	0011      	movs	r1, r2
 800a930:	f7ff f932 	bl	8009b98 <_malloc_r>
 800a934:	0005      	movs	r5, r0
 800a936:	0028      	movs	r0, r5
 800a938:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a93a:	2a00      	cmp	r2, #0
 800a93c:	d103      	bne.n	800a946 <_realloc_r+0x24>
 800a93e:	f7ff f8b5 	bl	8009aac <_free_r>
 800a942:	0025      	movs	r5, r4
 800a944:	e7f7      	b.n	800a936 <_realloc_r+0x14>
 800a946:	f000 f840 	bl	800a9ca <_malloc_usable_size_r>
 800a94a:	9001      	str	r0, [sp, #4]
 800a94c:	4284      	cmp	r4, r0
 800a94e:	d803      	bhi.n	800a958 <_realloc_r+0x36>
 800a950:	0035      	movs	r5, r6
 800a952:	0843      	lsrs	r3, r0, #1
 800a954:	42a3      	cmp	r3, r4
 800a956:	d3ee      	bcc.n	800a936 <_realloc_r+0x14>
 800a958:	0021      	movs	r1, r4
 800a95a:	0038      	movs	r0, r7
 800a95c:	f7ff f91c 	bl	8009b98 <_malloc_r>
 800a960:	1e05      	subs	r5, r0, #0
 800a962:	d0e8      	beq.n	800a936 <_realloc_r+0x14>
 800a964:	9b01      	ldr	r3, [sp, #4]
 800a966:	0022      	movs	r2, r4
 800a968:	429c      	cmp	r4, r3
 800a96a:	d900      	bls.n	800a96e <_realloc_r+0x4c>
 800a96c:	001a      	movs	r2, r3
 800a96e:	0031      	movs	r1, r6
 800a970:	0028      	movs	r0, r5
 800a972:	f7fe f9f5 	bl	8008d60 <memcpy>
 800a976:	0031      	movs	r1, r6
 800a978:	0038      	movs	r0, r7
 800a97a:	f7ff f897 	bl	8009aac <_free_r>
 800a97e:	e7da      	b.n	800a936 <_realloc_r+0x14>

0800a980 <__ascii_wctomb>:
 800a980:	0003      	movs	r3, r0
 800a982:	1e08      	subs	r0, r1, #0
 800a984:	d005      	beq.n	800a992 <__ascii_wctomb+0x12>
 800a986:	2aff      	cmp	r2, #255	; 0xff
 800a988:	d904      	bls.n	800a994 <__ascii_wctomb+0x14>
 800a98a:	228a      	movs	r2, #138	; 0x8a
 800a98c:	2001      	movs	r0, #1
 800a98e:	601a      	str	r2, [r3, #0]
 800a990:	4240      	negs	r0, r0
 800a992:	4770      	bx	lr
 800a994:	2001      	movs	r0, #1
 800a996:	700a      	strb	r2, [r1, #0]
 800a998:	e7fb      	b.n	800a992 <__ascii_wctomb+0x12>
	...

0800a99c <fiprintf>:
 800a99c:	b40e      	push	{r1, r2, r3}
 800a99e:	b517      	push	{r0, r1, r2, r4, lr}
 800a9a0:	4c05      	ldr	r4, [pc, #20]	; (800a9b8 <fiprintf+0x1c>)
 800a9a2:	ab05      	add	r3, sp, #20
 800a9a4:	cb04      	ldmia	r3!, {r2}
 800a9a6:	0001      	movs	r1, r0
 800a9a8:	6820      	ldr	r0, [r4, #0]
 800a9aa:	9301      	str	r3, [sp, #4]
 800a9ac:	f000 f83c 	bl	800aa28 <_vfiprintf_r>
 800a9b0:	bc1e      	pop	{r1, r2, r3, r4}
 800a9b2:	bc08      	pop	{r3}
 800a9b4:	b003      	add	sp, #12
 800a9b6:	4718      	bx	r3
 800a9b8:	20000080 	.word	0x20000080

0800a9bc <abort>:
 800a9bc:	2006      	movs	r0, #6
 800a9be:	b510      	push	{r4, lr}
 800a9c0:	f000 fa1e 	bl	800ae00 <raise>
 800a9c4:	2001      	movs	r0, #1
 800a9c6:	f7fa fbb1 	bl	800512c <_exit>

0800a9ca <_malloc_usable_size_r>:
 800a9ca:	1f0b      	subs	r3, r1, #4
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	1f18      	subs	r0, r3, #4
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	da01      	bge.n	800a9d8 <_malloc_usable_size_r+0xe>
 800a9d4:	580b      	ldr	r3, [r1, r0]
 800a9d6:	18c0      	adds	r0, r0, r3
 800a9d8:	4770      	bx	lr

0800a9da <__sfputc_r>:
 800a9da:	6893      	ldr	r3, [r2, #8]
 800a9dc:	b510      	push	{r4, lr}
 800a9de:	3b01      	subs	r3, #1
 800a9e0:	6093      	str	r3, [r2, #8]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	da04      	bge.n	800a9f0 <__sfputc_r+0x16>
 800a9e6:	6994      	ldr	r4, [r2, #24]
 800a9e8:	42a3      	cmp	r3, r4
 800a9ea:	db07      	blt.n	800a9fc <__sfputc_r+0x22>
 800a9ec:	290a      	cmp	r1, #10
 800a9ee:	d005      	beq.n	800a9fc <__sfputc_r+0x22>
 800a9f0:	6813      	ldr	r3, [r2, #0]
 800a9f2:	1c58      	adds	r0, r3, #1
 800a9f4:	6010      	str	r0, [r2, #0]
 800a9f6:	7019      	strb	r1, [r3, #0]
 800a9f8:	0008      	movs	r0, r1
 800a9fa:	bd10      	pop	{r4, pc}
 800a9fc:	f000 f930 	bl	800ac60 <__swbuf_r>
 800aa00:	0001      	movs	r1, r0
 800aa02:	e7f9      	b.n	800a9f8 <__sfputc_r+0x1e>

0800aa04 <__sfputs_r>:
 800aa04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa06:	0006      	movs	r6, r0
 800aa08:	000f      	movs	r7, r1
 800aa0a:	0014      	movs	r4, r2
 800aa0c:	18d5      	adds	r5, r2, r3
 800aa0e:	42ac      	cmp	r4, r5
 800aa10:	d101      	bne.n	800aa16 <__sfputs_r+0x12>
 800aa12:	2000      	movs	r0, #0
 800aa14:	e007      	b.n	800aa26 <__sfputs_r+0x22>
 800aa16:	7821      	ldrb	r1, [r4, #0]
 800aa18:	003a      	movs	r2, r7
 800aa1a:	0030      	movs	r0, r6
 800aa1c:	f7ff ffdd 	bl	800a9da <__sfputc_r>
 800aa20:	3401      	adds	r4, #1
 800aa22:	1c43      	adds	r3, r0, #1
 800aa24:	d1f3      	bne.n	800aa0e <__sfputs_r+0xa>
 800aa26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aa28 <_vfiprintf_r>:
 800aa28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa2a:	b0a1      	sub	sp, #132	; 0x84
 800aa2c:	000f      	movs	r7, r1
 800aa2e:	0015      	movs	r5, r2
 800aa30:	001e      	movs	r6, r3
 800aa32:	9003      	str	r0, [sp, #12]
 800aa34:	2800      	cmp	r0, #0
 800aa36:	d004      	beq.n	800aa42 <_vfiprintf_r+0x1a>
 800aa38:	6a03      	ldr	r3, [r0, #32]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d101      	bne.n	800aa42 <_vfiprintf_r+0x1a>
 800aa3e:	f7fe f85d 	bl	8008afc <__sinit>
 800aa42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa44:	07db      	lsls	r3, r3, #31
 800aa46:	d405      	bmi.n	800aa54 <_vfiprintf_r+0x2c>
 800aa48:	89bb      	ldrh	r3, [r7, #12]
 800aa4a:	059b      	lsls	r3, r3, #22
 800aa4c:	d402      	bmi.n	800aa54 <_vfiprintf_r+0x2c>
 800aa4e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800aa50:	f7fe f979 	bl	8008d46 <__retarget_lock_acquire_recursive>
 800aa54:	89bb      	ldrh	r3, [r7, #12]
 800aa56:	071b      	lsls	r3, r3, #28
 800aa58:	d502      	bpl.n	800aa60 <_vfiprintf_r+0x38>
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d113      	bne.n	800aa88 <_vfiprintf_r+0x60>
 800aa60:	0039      	movs	r1, r7
 800aa62:	9803      	ldr	r0, [sp, #12]
 800aa64:	f000 f93e 	bl	800ace4 <__swsetup_r>
 800aa68:	2800      	cmp	r0, #0
 800aa6a:	d00d      	beq.n	800aa88 <_vfiprintf_r+0x60>
 800aa6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa6e:	07db      	lsls	r3, r3, #31
 800aa70:	d503      	bpl.n	800aa7a <_vfiprintf_r+0x52>
 800aa72:	2001      	movs	r0, #1
 800aa74:	4240      	negs	r0, r0
 800aa76:	b021      	add	sp, #132	; 0x84
 800aa78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa7a:	89bb      	ldrh	r3, [r7, #12]
 800aa7c:	059b      	lsls	r3, r3, #22
 800aa7e:	d4f8      	bmi.n	800aa72 <_vfiprintf_r+0x4a>
 800aa80:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800aa82:	f7fe f961 	bl	8008d48 <__retarget_lock_release_recursive>
 800aa86:	e7f4      	b.n	800aa72 <_vfiprintf_r+0x4a>
 800aa88:	2300      	movs	r3, #0
 800aa8a:	ac08      	add	r4, sp, #32
 800aa8c:	6163      	str	r3, [r4, #20]
 800aa8e:	3320      	adds	r3, #32
 800aa90:	7663      	strb	r3, [r4, #25]
 800aa92:	3310      	adds	r3, #16
 800aa94:	76a3      	strb	r3, [r4, #26]
 800aa96:	9607      	str	r6, [sp, #28]
 800aa98:	002e      	movs	r6, r5
 800aa9a:	7833      	ldrb	r3, [r6, #0]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d001      	beq.n	800aaa4 <_vfiprintf_r+0x7c>
 800aaa0:	2b25      	cmp	r3, #37	; 0x25
 800aaa2:	d148      	bne.n	800ab36 <_vfiprintf_r+0x10e>
 800aaa4:	1b73      	subs	r3, r6, r5
 800aaa6:	9305      	str	r3, [sp, #20]
 800aaa8:	42ae      	cmp	r6, r5
 800aaaa:	d00b      	beq.n	800aac4 <_vfiprintf_r+0x9c>
 800aaac:	002a      	movs	r2, r5
 800aaae:	0039      	movs	r1, r7
 800aab0:	9803      	ldr	r0, [sp, #12]
 800aab2:	f7ff ffa7 	bl	800aa04 <__sfputs_r>
 800aab6:	3001      	adds	r0, #1
 800aab8:	d100      	bne.n	800aabc <_vfiprintf_r+0x94>
 800aaba:	e0af      	b.n	800ac1c <_vfiprintf_r+0x1f4>
 800aabc:	6963      	ldr	r3, [r4, #20]
 800aabe:	9a05      	ldr	r2, [sp, #20]
 800aac0:	189b      	adds	r3, r3, r2
 800aac2:	6163      	str	r3, [r4, #20]
 800aac4:	7833      	ldrb	r3, [r6, #0]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d100      	bne.n	800aacc <_vfiprintf_r+0xa4>
 800aaca:	e0a7      	b.n	800ac1c <_vfiprintf_r+0x1f4>
 800aacc:	2201      	movs	r2, #1
 800aace:	2300      	movs	r3, #0
 800aad0:	4252      	negs	r2, r2
 800aad2:	6062      	str	r2, [r4, #4]
 800aad4:	a904      	add	r1, sp, #16
 800aad6:	3254      	adds	r2, #84	; 0x54
 800aad8:	1852      	adds	r2, r2, r1
 800aada:	1c75      	adds	r5, r6, #1
 800aadc:	6023      	str	r3, [r4, #0]
 800aade:	60e3      	str	r3, [r4, #12]
 800aae0:	60a3      	str	r3, [r4, #8]
 800aae2:	7013      	strb	r3, [r2, #0]
 800aae4:	65a3      	str	r3, [r4, #88]	; 0x58
 800aae6:	4b59      	ldr	r3, [pc, #356]	; (800ac4c <_vfiprintf_r+0x224>)
 800aae8:	2205      	movs	r2, #5
 800aaea:	0018      	movs	r0, r3
 800aaec:	7829      	ldrb	r1, [r5, #0]
 800aaee:	9305      	str	r3, [sp, #20]
 800aaf0:	f7fe f92b 	bl	8008d4a <memchr>
 800aaf4:	1c6e      	adds	r6, r5, #1
 800aaf6:	2800      	cmp	r0, #0
 800aaf8:	d11f      	bne.n	800ab3a <_vfiprintf_r+0x112>
 800aafa:	6822      	ldr	r2, [r4, #0]
 800aafc:	06d3      	lsls	r3, r2, #27
 800aafe:	d504      	bpl.n	800ab0a <_vfiprintf_r+0xe2>
 800ab00:	2353      	movs	r3, #83	; 0x53
 800ab02:	a904      	add	r1, sp, #16
 800ab04:	185b      	adds	r3, r3, r1
 800ab06:	2120      	movs	r1, #32
 800ab08:	7019      	strb	r1, [r3, #0]
 800ab0a:	0713      	lsls	r3, r2, #28
 800ab0c:	d504      	bpl.n	800ab18 <_vfiprintf_r+0xf0>
 800ab0e:	2353      	movs	r3, #83	; 0x53
 800ab10:	a904      	add	r1, sp, #16
 800ab12:	185b      	adds	r3, r3, r1
 800ab14:	212b      	movs	r1, #43	; 0x2b
 800ab16:	7019      	strb	r1, [r3, #0]
 800ab18:	782b      	ldrb	r3, [r5, #0]
 800ab1a:	2b2a      	cmp	r3, #42	; 0x2a
 800ab1c:	d016      	beq.n	800ab4c <_vfiprintf_r+0x124>
 800ab1e:	002e      	movs	r6, r5
 800ab20:	2100      	movs	r1, #0
 800ab22:	200a      	movs	r0, #10
 800ab24:	68e3      	ldr	r3, [r4, #12]
 800ab26:	7832      	ldrb	r2, [r6, #0]
 800ab28:	1c75      	adds	r5, r6, #1
 800ab2a:	3a30      	subs	r2, #48	; 0x30
 800ab2c:	2a09      	cmp	r2, #9
 800ab2e:	d94e      	bls.n	800abce <_vfiprintf_r+0x1a6>
 800ab30:	2900      	cmp	r1, #0
 800ab32:	d111      	bne.n	800ab58 <_vfiprintf_r+0x130>
 800ab34:	e017      	b.n	800ab66 <_vfiprintf_r+0x13e>
 800ab36:	3601      	adds	r6, #1
 800ab38:	e7af      	b.n	800aa9a <_vfiprintf_r+0x72>
 800ab3a:	9b05      	ldr	r3, [sp, #20]
 800ab3c:	6822      	ldr	r2, [r4, #0]
 800ab3e:	1ac0      	subs	r0, r0, r3
 800ab40:	2301      	movs	r3, #1
 800ab42:	4083      	lsls	r3, r0
 800ab44:	4313      	orrs	r3, r2
 800ab46:	0035      	movs	r5, r6
 800ab48:	6023      	str	r3, [r4, #0]
 800ab4a:	e7cc      	b.n	800aae6 <_vfiprintf_r+0xbe>
 800ab4c:	9b07      	ldr	r3, [sp, #28]
 800ab4e:	1d19      	adds	r1, r3, #4
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	9107      	str	r1, [sp, #28]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	db01      	blt.n	800ab5c <_vfiprintf_r+0x134>
 800ab58:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab5a:	e004      	b.n	800ab66 <_vfiprintf_r+0x13e>
 800ab5c:	425b      	negs	r3, r3
 800ab5e:	60e3      	str	r3, [r4, #12]
 800ab60:	2302      	movs	r3, #2
 800ab62:	4313      	orrs	r3, r2
 800ab64:	6023      	str	r3, [r4, #0]
 800ab66:	7833      	ldrb	r3, [r6, #0]
 800ab68:	2b2e      	cmp	r3, #46	; 0x2e
 800ab6a:	d10a      	bne.n	800ab82 <_vfiprintf_r+0x15a>
 800ab6c:	7873      	ldrb	r3, [r6, #1]
 800ab6e:	2b2a      	cmp	r3, #42	; 0x2a
 800ab70:	d135      	bne.n	800abde <_vfiprintf_r+0x1b6>
 800ab72:	9b07      	ldr	r3, [sp, #28]
 800ab74:	3602      	adds	r6, #2
 800ab76:	1d1a      	adds	r2, r3, #4
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	9207      	str	r2, [sp, #28]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	db2b      	blt.n	800abd8 <_vfiprintf_r+0x1b0>
 800ab80:	9309      	str	r3, [sp, #36]	; 0x24
 800ab82:	4d33      	ldr	r5, [pc, #204]	; (800ac50 <_vfiprintf_r+0x228>)
 800ab84:	2203      	movs	r2, #3
 800ab86:	0028      	movs	r0, r5
 800ab88:	7831      	ldrb	r1, [r6, #0]
 800ab8a:	f7fe f8de 	bl	8008d4a <memchr>
 800ab8e:	2800      	cmp	r0, #0
 800ab90:	d006      	beq.n	800aba0 <_vfiprintf_r+0x178>
 800ab92:	2340      	movs	r3, #64	; 0x40
 800ab94:	1b40      	subs	r0, r0, r5
 800ab96:	4083      	lsls	r3, r0
 800ab98:	6822      	ldr	r2, [r4, #0]
 800ab9a:	3601      	adds	r6, #1
 800ab9c:	4313      	orrs	r3, r2
 800ab9e:	6023      	str	r3, [r4, #0]
 800aba0:	7831      	ldrb	r1, [r6, #0]
 800aba2:	2206      	movs	r2, #6
 800aba4:	482b      	ldr	r0, [pc, #172]	; (800ac54 <_vfiprintf_r+0x22c>)
 800aba6:	1c75      	adds	r5, r6, #1
 800aba8:	7621      	strb	r1, [r4, #24]
 800abaa:	f7fe f8ce 	bl	8008d4a <memchr>
 800abae:	2800      	cmp	r0, #0
 800abb0:	d043      	beq.n	800ac3a <_vfiprintf_r+0x212>
 800abb2:	4b29      	ldr	r3, [pc, #164]	; (800ac58 <_vfiprintf_r+0x230>)
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d125      	bne.n	800ac04 <_vfiprintf_r+0x1dc>
 800abb8:	2207      	movs	r2, #7
 800abba:	9b07      	ldr	r3, [sp, #28]
 800abbc:	3307      	adds	r3, #7
 800abbe:	4393      	bics	r3, r2
 800abc0:	3308      	adds	r3, #8
 800abc2:	9307      	str	r3, [sp, #28]
 800abc4:	6963      	ldr	r3, [r4, #20]
 800abc6:	9a04      	ldr	r2, [sp, #16]
 800abc8:	189b      	adds	r3, r3, r2
 800abca:	6163      	str	r3, [r4, #20]
 800abcc:	e764      	b.n	800aa98 <_vfiprintf_r+0x70>
 800abce:	4343      	muls	r3, r0
 800abd0:	002e      	movs	r6, r5
 800abd2:	2101      	movs	r1, #1
 800abd4:	189b      	adds	r3, r3, r2
 800abd6:	e7a6      	b.n	800ab26 <_vfiprintf_r+0xfe>
 800abd8:	2301      	movs	r3, #1
 800abda:	425b      	negs	r3, r3
 800abdc:	e7d0      	b.n	800ab80 <_vfiprintf_r+0x158>
 800abde:	2300      	movs	r3, #0
 800abe0:	200a      	movs	r0, #10
 800abe2:	001a      	movs	r2, r3
 800abe4:	3601      	adds	r6, #1
 800abe6:	6063      	str	r3, [r4, #4]
 800abe8:	7831      	ldrb	r1, [r6, #0]
 800abea:	1c75      	adds	r5, r6, #1
 800abec:	3930      	subs	r1, #48	; 0x30
 800abee:	2909      	cmp	r1, #9
 800abf0:	d903      	bls.n	800abfa <_vfiprintf_r+0x1d2>
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d0c5      	beq.n	800ab82 <_vfiprintf_r+0x15a>
 800abf6:	9209      	str	r2, [sp, #36]	; 0x24
 800abf8:	e7c3      	b.n	800ab82 <_vfiprintf_r+0x15a>
 800abfa:	4342      	muls	r2, r0
 800abfc:	002e      	movs	r6, r5
 800abfe:	2301      	movs	r3, #1
 800ac00:	1852      	adds	r2, r2, r1
 800ac02:	e7f1      	b.n	800abe8 <_vfiprintf_r+0x1c0>
 800ac04:	aa07      	add	r2, sp, #28
 800ac06:	9200      	str	r2, [sp, #0]
 800ac08:	0021      	movs	r1, r4
 800ac0a:	003a      	movs	r2, r7
 800ac0c:	4b13      	ldr	r3, [pc, #76]	; (800ac5c <_vfiprintf_r+0x234>)
 800ac0e:	9803      	ldr	r0, [sp, #12]
 800ac10:	f7fd fb0e 	bl	8008230 <_printf_float>
 800ac14:	9004      	str	r0, [sp, #16]
 800ac16:	9b04      	ldr	r3, [sp, #16]
 800ac18:	3301      	adds	r3, #1
 800ac1a:	d1d3      	bne.n	800abc4 <_vfiprintf_r+0x19c>
 800ac1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac1e:	07db      	lsls	r3, r3, #31
 800ac20:	d405      	bmi.n	800ac2e <_vfiprintf_r+0x206>
 800ac22:	89bb      	ldrh	r3, [r7, #12]
 800ac24:	059b      	lsls	r3, r3, #22
 800ac26:	d402      	bmi.n	800ac2e <_vfiprintf_r+0x206>
 800ac28:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800ac2a:	f7fe f88d 	bl	8008d48 <__retarget_lock_release_recursive>
 800ac2e:	89bb      	ldrh	r3, [r7, #12]
 800ac30:	065b      	lsls	r3, r3, #25
 800ac32:	d500      	bpl.n	800ac36 <_vfiprintf_r+0x20e>
 800ac34:	e71d      	b.n	800aa72 <_vfiprintf_r+0x4a>
 800ac36:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ac38:	e71d      	b.n	800aa76 <_vfiprintf_r+0x4e>
 800ac3a:	aa07      	add	r2, sp, #28
 800ac3c:	9200      	str	r2, [sp, #0]
 800ac3e:	0021      	movs	r1, r4
 800ac40:	003a      	movs	r2, r7
 800ac42:	4b06      	ldr	r3, [pc, #24]	; (800ac5c <_vfiprintf_r+0x234>)
 800ac44:	9803      	ldr	r0, [sp, #12]
 800ac46:	f7fd fdb9 	bl	80087bc <_printf_i>
 800ac4a:	e7e3      	b.n	800ac14 <_vfiprintf_r+0x1ec>
 800ac4c:	0800d864 	.word	0x0800d864
 800ac50:	0800d86a 	.word	0x0800d86a
 800ac54:	0800d86e 	.word	0x0800d86e
 800ac58:	08008231 	.word	0x08008231
 800ac5c:	0800aa05 	.word	0x0800aa05

0800ac60 <__swbuf_r>:
 800ac60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac62:	0006      	movs	r6, r0
 800ac64:	000d      	movs	r5, r1
 800ac66:	0014      	movs	r4, r2
 800ac68:	2800      	cmp	r0, #0
 800ac6a:	d004      	beq.n	800ac76 <__swbuf_r+0x16>
 800ac6c:	6a03      	ldr	r3, [r0, #32]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d101      	bne.n	800ac76 <__swbuf_r+0x16>
 800ac72:	f7fd ff43 	bl	8008afc <__sinit>
 800ac76:	69a3      	ldr	r3, [r4, #24]
 800ac78:	60a3      	str	r3, [r4, #8]
 800ac7a:	89a3      	ldrh	r3, [r4, #12]
 800ac7c:	071b      	lsls	r3, r3, #28
 800ac7e:	d528      	bpl.n	800acd2 <__swbuf_r+0x72>
 800ac80:	6923      	ldr	r3, [r4, #16]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d025      	beq.n	800acd2 <__swbuf_r+0x72>
 800ac86:	6923      	ldr	r3, [r4, #16]
 800ac88:	6820      	ldr	r0, [r4, #0]
 800ac8a:	b2ef      	uxtb	r7, r5
 800ac8c:	1ac0      	subs	r0, r0, r3
 800ac8e:	6963      	ldr	r3, [r4, #20]
 800ac90:	b2ed      	uxtb	r5, r5
 800ac92:	4283      	cmp	r3, r0
 800ac94:	dc05      	bgt.n	800aca2 <__swbuf_r+0x42>
 800ac96:	0021      	movs	r1, r4
 800ac98:	0030      	movs	r0, r6
 800ac9a:	f7ff fd95 	bl	800a7c8 <_fflush_r>
 800ac9e:	2800      	cmp	r0, #0
 800aca0:	d11d      	bne.n	800acde <__swbuf_r+0x7e>
 800aca2:	68a3      	ldr	r3, [r4, #8]
 800aca4:	3001      	adds	r0, #1
 800aca6:	3b01      	subs	r3, #1
 800aca8:	60a3      	str	r3, [r4, #8]
 800acaa:	6823      	ldr	r3, [r4, #0]
 800acac:	1c5a      	adds	r2, r3, #1
 800acae:	6022      	str	r2, [r4, #0]
 800acb0:	701f      	strb	r7, [r3, #0]
 800acb2:	6963      	ldr	r3, [r4, #20]
 800acb4:	4283      	cmp	r3, r0
 800acb6:	d004      	beq.n	800acc2 <__swbuf_r+0x62>
 800acb8:	89a3      	ldrh	r3, [r4, #12]
 800acba:	07db      	lsls	r3, r3, #31
 800acbc:	d507      	bpl.n	800acce <__swbuf_r+0x6e>
 800acbe:	2d0a      	cmp	r5, #10
 800acc0:	d105      	bne.n	800acce <__swbuf_r+0x6e>
 800acc2:	0021      	movs	r1, r4
 800acc4:	0030      	movs	r0, r6
 800acc6:	f7ff fd7f 	bl	800a7c8 <_fflush_r>
 800acca:	2800      	cmp	r0, #0
 800accc:	d107      	bne.n	800acde <__swbuf_r+0x7e>
 800acce:	0028      	movs	r0, r5
 800acd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acd2:	0021      	movs	r1, r4
 800acd4:	0030      	movs	r0, r6
 800acd6:	f000 f805 	bl	800ace4 <__swsetup_r>
 800acda:	2800      	cmp	r0, #0
 800acdc:	d0d3      	beq.n	800ac86 <__swbuf_r+0x26>
 800acde:	2501      	movs	r5, #1
 800ace0:	426d      	negs	r5, r5
 800ace2:	e7f4      	b.n	800acce <__swbuf_r+0x6e>

0800ace4 <__swsetup_r>:
 800ace4:	4b30      	ldr	r3, [pc, #192]	; (800ada8 <__swsetup_r+0xc4>)
 800ace6:	b570      	push	{r4, r5, r6, lr}
 800ace8:	0005      	movs	r5, r0
 800acea:	6818      	ldr	r0, [r3, #0]
 800acec:	000c      	movs	r4, r1
 800acee:	2800      	cmp	r0, #0
 800acf0:	d004      	beq.n	800acfc <__swsetup_r+0x18>
 800acf2:	6a03      	ldr	r3, [r0, #32]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d101      	bne.n	800acfc <__swsetup_r+0x18>
 800acf8:	f7fd ff00 	bl	8008afc <__sinit>
 800acfc:	230c      	movs	r3, #12
 800acfe:	5ee2      	ldrsh	r2, [r4, r3]
 800ad00:	b293      	uxth	r3, r2
 800ad02:	0711      	lsls	r1, r2, #28
 800ad04:	d423      	bmi.n	800ad4e <__swsetup_r+0x6a>
 800ad06:	06d9      	lsls	r1, r3, #27
 800ad08:	d407      	bmi.n	800ad1a <__swsetup_r+0x36>
 800ad0a:	2309      	movs	r3, #9
 800ad0c:	2001      	movs	r0, #1
 800ad0e:	602b      	str	r3, [r5, #0]
 800ad10:	3337      	adds	r3, #55	; 0x37
 800ad12:	4313      	orrs	r3, r2
 800ad14:	81a3      	strh	r3, [r4, #12]
 800ad16:	4240      	negs	r0, r0
 800ad18:	bd70      	pop	{r4, r5, r6, pc}
 800ad1a:	075b      	lsls	r3, r3, #29
 800ad1c:	d513      	bpl.n	800ad46 <__swsetup_r+0x62>
 800ad1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad20:	2900      	cmp	r1, #0
 800ad22:	d008      	beq.n	800ad36 <__swsetup_r+0x52>
 800ad24:	0023      	movs	r3, r4
 800ad26:	3344      	adds	r3, #68	; 0x44
 800ad28:	4299      	cmp	r1, r3
 800ad2a:	d002      	beq.n	800ad32 <__swsetup_r+0x4e>
 800ad2c:	0028      	movs	r0, r5
 800ad2e:	f7fe febd 	bl	8009aac <_free_r>
 800ad32:	2300      	movs	r3, #0
 800ad34:	6363      	str	r3, [r4, #52]	; 0x34
 800ad36:	2224      	movs	r2, #36	; 0x24
 800ad38:	89a3      	ldrh	r3, [r4, #12]
 800ad3a:	4393      	bics	r3, r2
 800ad3c:	81a3      	strh	r3, [r4, #12]
 800ad3e:	2300      	movs	r3, #0
 800ad40:	6063      	str	r3, [r4, #4]
 800ad42:	6923      	ldr	r3, [r4, #16]
 800ad44:	6023      	str	r3, [r4, #0]
 800ad46:	2308      	movs	r3, #8
 800ad48:	89a2      	ldrh	r2, [r4, #12]
 800ad4a:	4313      	orrs	r3, r2
 800ad4c:	81a3      	strh	r3, [r4, #12]
 800ad4e:	6923      	ldr	r3, [r4, #16]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d10b      	bne.n	800ad6c <__swsetup_r+0x88>
 800ad54:	21a0      	movs	r1, #160	; 0xa0
 800ad56:	2280      	movs	r2, #128	; 0x80
 800ad58:	89a3      	ldrh	r3, [r4, #12]
 800ad5a:	0089      	lsls	r1, r1, #2
 800ad5c:	0092      	lsls	r2, r2, #2
 800ad5e:	400b      	ands	r3, r1
 800ad60:	4293      	cmp	r3, r2
 800ad62:	d003      	beq.n	800ad6c <__swsetup_r+0x88>
 800ad64:	0021      	movs	r1, r4
 800ad66:	0028      	movs	r0, r5
 800ad68:	f000 f892 	bl	800ae90 <__smakebuf_r>
 800ad6c:	220c      	movs	r2, #12
 800ad6e:	5ea3      	ldrsh	r3, [r4, r2]
 800ad70:	2001      	movs	r0, #1
 800ad72:	001a      	movs	r2, r3
 800ad74:	b299      	uxth	r1, r3
 800ad76:	4002      	ands	r2, r0
 800ad78:	4203      	tst	r3, r0
 800ad7a:	d00f      	beq.n	800ad9c <__swsetup_r+0xb8>
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	60a2      	str	r2, [r4, #8]
 800ad80:	6962      	ldr	r2, [r4, #20]
 800ad82:	4252      	negs	r2, r2
 800ad84:	61a2      	str	r2, [r4, #24]
 800ad86:	2000      	movs	r0, #0
 800ad88:	6922      	ldr	r2, [r4, #16]
 800ad8a:	4282      	cmp	r2, r0
 800ad8c:	d1c4      	bne.n	800ad18 <__swsetup_r+0x34>
 800ad8e:	0609      	lsls	r1, r1, #24
 800ad90:	d5c2      	bpl.n	800ad18 <__swsetup_r+0x34>
 800ad92:	2240      	movs	r2, #64	; 0x40
 800ad94:	4313      	orrs	r3, r2
 800ad96:	81a3      	strh	r3, [r4, #12]
 800ad98:	3801      	subs	r0, #1
 800ad9a:	e7bd      	b.n	800ad18 <__swsetup_r+0x34>
 800ad9c:	0788      	lsls	r0, r1, #30
 800ad9e:	d400      	bmi.n	800ada2 <__swsetup_r+0xbe>
 800ada0:	6962      	ldr	r2, [r4, #20]
 800ada2:	60a2      	str	r2, [r4, #8]
 800ada4:	e7ef      	b.n	800ad86 <__swsetup_r+0xa2>
 800ada6:	46c0      	nop			; (mov r8, r8)
 800ada8:	20000080 	.word	0x20000080

0800adac <_raise_r>:
 800adac:	b570      	push	{r4, r5, r6, lr}
 800adae:	0004      	movs	r4, r0
 800adb0:	000d      	movs	r5, r1
 800adb2:	291f      	cmp	r1, #31
 800adb4:	d904      	bls.n	800adc0 <_raise_r+0x14>
 800adb6:	2316      	movs	r3, #22
 800adb8:	6003      	str	r3, [r0, #0]
 800adba:	2001      	movs	r0, #1
 800adbc:	4240      	negs	r0, r0
 800adbe:	bd70      	pop	{r4, r5, r6, pc}
 800adc0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d004      	beq.n	800add0 <_raise_r+0x24>
 800adc6:	008a      	lsls	r2, r1, #2
 800adc8:	189b      	adds	r3, r3, r2
 800adca:	681a      	ldr	r2, [r3, #0]
 800adcc:	2a00      	cmp	r2, #0
 800adce:	d108      	bne.n	800ade2 <_raise_r+0x36>
 800add0:	0020      	movs	r0, r4
 800add2:	f000 f831 	bl	800ae38 <_getpid_r>
 800add6:	002a      	movs	r2, r5
 800add8:	0001      	movs	r1, r0
 800adda:	0020      	movs	r0, r4
 800addc:	f000 f81a 	bl	800ae14 <_kill_r>
 800ade0:	e7ed      	b.n	800adbe <_raise_r+0x12>
 800ade2:	2000      	movs	r0, #0
 800ade4:	2a01      	cmp	r2, #1
 800ade6:	d0ea      	beq.n	800adbe <_raise_r+0x12>
 800ade8:	1c51      	adds	r1, r2, #1
 800adea:	d103      	bne.n	800adf4 <_raise_r+0x48>
 800adec:	2316      	movs	r3, #22
 800adee:	3001      	adds	r0, #1
 800adf0:	6023      	str	r3, [r4, #0]
 800adf2:	e7e4      	b.n	800adbe <_raise_r+0x12>
 800adf4:	2400      	movs	r4, #0
 800adf6:	0028      	movs	r0, r5
 800adf8:	601c      	str	r4, [r3, #0]
 800adfa:	4790      	blx	r2
 800adfc:	0020      	movs	r0, r4
 800adfe:	e7de      	b.n	800adbe <_raise_r+0x12>

0800ae00 <raise>:
 800ae00:	b510      	push	{r4, lr}
 800ae02:	4b03      	ldr	r3, [pc, #12]	; (800ae10 <raise+0x10>)
 800ae04:	0001      	movs	r1, r0
 800ae06:	6818      	ldr	r0, [r3, #0]
 800ae08:	f7ff ffd0 	bl	800adac <_raise_r>
 800ae0c:	bd10      	pop	{r4, pc}
 800ae0e:	46c0      	nop			; (mov r8, r8)
 800ae10:	20000080 	.word	0x20000080

0800ae14 <_kill_r>:
 800ae14:	2300      	movs	r3, #0
 800ae16:	b570      	push	{r4, r5, r6, lr}
 800ae18:	4d06      	ldr	r5, [pc, #24]	; (800ae34 <_kill_r+0x20>)
 800ae1a:	0004      	movs	r4, r0
 800ae1c:	0008      	movs	r0, r1
 800ae1e:	0011      	movs	r1, r2
 800ae20:	602b      	str	r3, [r5, #0]
 800ae22:	f7fa f97b 	bl	800511c <_kill>
 800ae26:	1c43      	adds	r3, r0, #1
 800ae28:	d103      	bne.n	800ae32 <_kill_r+0x1e>
 800ae2a:	682b      	ldr	r3, [r5, #0]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d000      	beq.n	800ae32 <_kill_r+0x1e>
 800ae30:	6023      	str	r3, [r4, #0]
 800ae32:	bd70      	pop	{r4, r5, r6, pc}
 800ae34:	20000a74 	.word	0x20000a74

0800ae38 <_getpid_r>:
 800ae38:	b510      	push	{r4, lr}
 800ae3a:	f7fa f96d 	bl	8005118 <_getpid>
 800ae3e:	bd10      	pop	{r4, pc}

0800ae40 <__swhatbuf_r>:
 800ae40:	b570      	push	{r4, r5, r6, lr}
 800ae42:	000e      	movs	r6, r1
 800ae44:	001d      	movs	r5, r3
 800ae46:	230e      	movs	r3, #14
 800ae48:	5ec9      	ldrsh	r1, [r1, r3]
 800ae4a:	0014      	movs	r4, r2
 800ae4c:	b096      	sub	sp, #88	; 0x58
 800ae4e:	2900      	cmp	r1, #0
 800ae50:	da0c      	bge.n	800ae6c <__swhatbuf_r+0x2c>
 800ae52:	89b2      	ldrh	r2, [r6, #12]
 800ae54:	2380      	movs	r3, #128	; 0x80
 800ae56:	0011      	movs	r1, r2
 800ae58:	4019      	ands	r1, r3
 800ae5a:	421a      	tst	r2, r3
 800ae5c:	d013      	beq.n	800ae86 <__swhatbuf_r+0x46>
 800ae5e:	2100      	movs	r1, #0
 800ae60:	3b40      	subs	r3, #64	; 0x40
 800ae62:	2000      	movs	r0, #0
 800ae64:	6029      	str	r1, [r5, #0]
 800ae66:	6023      	str	r3, [r4, #0]
 800ae68:	b016      	add	sp, #88	; 0x58
 800ae6a:	bd70      	pop	{r4, r5, r6, pc}
 800ae6c:	466a      	mov	r2, sp
 800ae6e:	f000 f84d 	bl	800af0c <_fstat_r>
 800ae72:	2800      	cmp	r0, #0
 800ae74:	dbed      	blt.n	800ae52 <__swhatbuf_r+0x12>
 800ae76:	23f0      	movs	r3, #240	; 0xf0
 800ae78:	9901      	ldr	r1, [sp, #4]
 800ae7a:	021b      	lsls	r3, r3, #8
 800ae7c:	4019      	ands	r1, r3
 800ae7e:	4b03      	ldr	r3, [pc, #12]	; (800ae8c <__swhatbuf_r+0x4c>)
 800ae80:	18c9      	adds	r1, r1, r3
 800ae82:	424b      	negs	r3, r1
 800ae84:	4159      	adcs	r1, r3
 800ae86:	2380      	movs	r3, #128	; 0x80
 800ae88:	00db      	lsls	r3, r3, #3
 800ae8a:	e7ea      	b.n	800ae62 <__swhatbuf_r+0x22>
 800ae8c:	ffffe000 	.word	0xffffe000

0800ae90 <__smakebuf_r>:
 800ae90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae92:	2602      	movs	r6, #2
 800ae94:	898b      	ldrh	r3, [r1, #12]
 800ae96:	0005      	movs	r5, r0
 800ae98:	000c      	movs	r4, r1
 800ae9a:	4233      	tst	r3, r6
 800ae9c:	d006      	beq.n	800aeac <__smakebuf_r+0x1c>
 800ae9e:	0023      	movs	r3, r4
 800aea0:	3347      	adds	r3, #71	; 0x47
 800aea2:	6023      	str	r3, [r4, #0]
 800aea4:	6123      	str	r3, [r4, #16]
 800aea6:	2301      	movs	r3, #1
 800aea8:	6163      	str	r3, [r4, #20]
 800aeaa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800aeac:	466a      	mov	r2, sp
 800aeae:	ab01      	add	r3, sp, #4
 800aeb0:	f7ff ffc6 	bl	800ae40 <__swhatbuf_r>
 800aeb4:	9900      	ldr	r1, [sp, #0]
 800aeb6:	0007      	movs	r7, r0
 800aeb8:	0028      	movs	r0, r5
 800aeba:	f7fe fe6d 	bl	8009b98 <_malloc_r>
 800aebe:	2800      	cmp	r0, #0
 800aec0:	d108      	bne.n	800aed4 <__smakebuf_r+0x44>
 800aec2:	220c      	movs	r2, #12
 800aec4:	5ea3      	ldrsh	r3, [r4, r2]
 800aec6:	059a      	lsls	r2, r3, #22
 800aec8:	d4ef      	bmi.n	800aeaa <__smakebuf_r+0x1a>
 800aeca:	2203      	movs	r2, #3
 800aecc:	4393      	bics	r3, r2
 800aece:	431e      	orrs	r6, r3
 800aed0:	81a6      	strh	r6, [r4, #12]
 800aed2:	e7e4      	b.n	800ae9e <__smakebuf_r+0xe>
 800aed4:	2380      	movs	r3, #128	; 0x80
 800aed6:	89a2      	ldrh	r2, [r4, #12]
 800aed8:	6020      	str	r0, [r4, #0]
 800aeda:	4313      	orrs	r3, r2
 800aedc:	81a3      	strh	r3, [r4, #12]
 800aede:	9b00      	ldr	r3, [sp, #0]
 800aee0:	6120      	str	r0, [r4, #16]
 800aee2:	6163      	str	r3, [r4, #20]
 800aee4:	9b01      	ldr	r3, [sp, #4]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d00c      	beq.n	800af04 <__smakebuf_r+0x74>
 800aeea:	0028      	movs	r0, r5
 800aeec:	230e      	movs	r3, #14
 800aeee:	5ee1      	ldrsh	r1, [r4, r3]
 800aef0:	f000 f81e 	bl	800af30 <_isatty_r>
 800aef4:	2800      	cmp	r0, #0
 800aef6:	d005      	beq.n	800af04 <__smakebuf_r+0x74>
 800aef8:	2303      	movs	r3, #3
 800aefa:	89a2      	ldrh	r2, [r4, #12]
 800aefc:	439a      	bics	r2, r3
 800aefe:	3b02      	subs	r3, #2
 800af00:	4313      	orrs	r3, r2
 800af02:	81a3      	strh	r3, [r4, #12]
 800af04:	89a3      	ldrh	r3, [r4, #12]
 800af06:	433b      	orrs	r3, r7
 800af08:	81a3      	strh	r3, [r4, #12]
 800af0a:	e7ce      	b.n	800aeaa <__smakebuf_r+0x1a>

0800af0c <_fstat_r>:
 800af0c:	2300      	movs	r3, #0
 800af0e:	b570      	push	{r4, r5, r6, lr}
 800af10:	4d06      	ldr	r5, [pc, #24]	; (800af2c <_fstat_r+0x20>)
 800af12:	0004      	movs	r4, r0
 800af14:	0008      	movs	r0, r1
 800af16:	0011      	movs	r1, r2
 800af18:	602b      	str	r3, [r5, #0]
 800af1a:	f7fa f92a 	bl	8005172 <_fstat>
 800af1e:	1c43      	adds	r3, r0, #1
 800af20:	d103      	bne.n	800af2a <_fstat_r+0x1e>
 800af22:	682b      	ldr	r3, [r5, #0]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d000      	beq.n	800af2a <_fstat_r+0x1e>
 800af28:	6023      	str	r3, [r4, #0]
 800af2a:	bd70      	pop	{r4, r5, r6, pc}
 800af2c:	20000a74 	.word	0x20000a74

0800af30 <_isatty_r>:
 800af30:	2300      	movs	r3, #0
 800af32:	b570      	push	{r4, r5, r6, lr}
 800af34:	4d06      	ldr	r5, [pc, #24]	; (800af50 <_isatty_r+0x20>)
 800af36:	0004      	movs	r4, r0
 800af38:	0008      	movs	r0, r1
 800af3a:	602b      	str	r3, [r5, #0]
 800af3c:	f7fa f91e 	bl	800517c <_isatty>
 800af40:	1c43      	adds	r3, r0, #1
 800af42:	d103      	bne.n	800af4c <_isatty_r+0x1c>
 800af44:	682b      	ldr	r3, [r5, #0]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d000      	beq.n	800af4c <_isatty_r+0x1c>
 800af4a:	6023      	str	r3, [r4, #0]
 800af4c:	bd70      	pop	{r4, r5, r6, pc}
 800af4e:	46c0      	nop			; (mov r8, r8)
 800af50:	20000a74 	.word	0x20000a74

0800af54 <_init>:
 800af54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af56:	46c0      	nop			; (mov r8, r8)
 800af58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af5a:	bc08      	pop	{r3}
 800af5c:	469e      	mov	lr, r3
 800af5e:	4770      	bx	lr

0800af60 <_fini>:
 800af60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af62:	46c0      	nop			; (mov r8, r8)
 800af64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af66:	bc08      	pop	{r3}
 800af68:	469e      	mov	lr, r3
 800af6a:	4770      	bx	lr
